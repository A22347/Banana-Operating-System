
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 3f fc 00 00       	call   c000fc5f <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 f3 8f 02 00       	call   c0029018 <_init>
c0000025:	c3                   	ret    
c0000026:	bb ae 9c 02 c0       	mov    ebx,0xc0029cae
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb bc 9c 02 c0    	cmp    ebx,0xc0029cbc
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 f8 e5 02 c0       	mov    eax,0xc002e5f8
c0000049:	3d f8 e5 02 c0       	cmp    eax,0xc002e5f8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 f8 e5 02 c0       	push   0xc002e5f8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 f8 e5 02 c0       	mov    eax,0xc002e5f8
c0000075:	2d f8 e5 02 c0       	sub    eax,0xc002e5f8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 f8 e5 02 c0       	push   0xc002e5f8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 28 ec 02 c0 00 	cmp    BYTE PTR ds:0xc002ec28,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb c4 9c 02 c0       	mov    ebx,0xc0029cc4
c00000bb:	81 eb c0 9c 02 c0    	sub    ebx,0xc0029cc0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be c0 9c 02 c0       	mov    esi,0xc0029cc0
c00000ca:	a1 2c ec 02 c0       	mov    eax,ds:0xc002ec2c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 2c ec 02 c0       	mov    ds:0xc002ec2c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 2c ec 02 c0       	mov    eax,ds:0xc002ec2c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 f8 e5 02 c0       	push   0xc002e5f8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 28 ec 02 c0 01 	mov    BYTE PTR ds:0xc002ec28,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 30 ec 02 c0       	push   0xc002ec30
c000012c:	68 f8 e5 02 c0       	push   0xc002e5f8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 29 db 01 00       	call   c001decc <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 a8 28 01 00       	call   c0012c63 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 07 db 01 00       	call   c001decc <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 af df 01 00       	call   c001e393 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 0d e6 01 00       	call   c001e9fa <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 70 f0 02 c0 	lgdtd  ds:0xc002f070
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 8d 45 01 00       	call   c0014b6f <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <hexStrToInt>:
c0000646:	56                   	push   esi
c0000647:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000064b:	31 d2                	xor    edx,edx

c000064d <hexStrToInt.looping>:
c000064d:	ac                   	lods   al,BYTE PTR ds:[esi]
c000064e:	84 c0                	test   al,al
c0000650:	74 0d                	je     c000065f <hexStrToInt.end>
c0000652:	d4 40                	aam    0x40
c0000654:	d5 39                	aad    0x39
c0000656:	2c 30                	sub    al,0x30
c0000658:	c1 e2 04             	shl    edx,0x4
c000065b:	08 c2                	or     dl,al
c000065d:	eb ee                	jmp    c000064d <hexStrToInt.looping>

c000065f <hexStrToInt.end>:
c000065f:	89 d0                	mov    eax,edx
c0000661:	5e                   	pop    esi
c0000662:	c3                   	ret    

c0000663 <memcpy>:
c0000663:	e9 de de 00 00       	jmp    c000e546 <__not_memcpy>

c0000668 <memcmp>:
c0000668:	56                   	push   esi
c0000669:	53                   	push   ebx
c000066a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000066e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000672:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000676:	85 f6                	test   esi,esi
c0000678:	74 1d                	je     c0000697 <memcmp+0x2f>
c000067a:	8a 08                	mov    cl,BYTE PTR [eax]
c000067c:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000067f:	38 cb                	cmp    bl,cl
c0000681:	75 19                	jne    c000069c <memcmp+0x34>
c0000683:	01 c6                	add    esi,eax
c0000685:	eb 0a                	jmp    c0000691 <memcmp+0x29>
c0000687:	90                   	nop
c0000688:	8a 08                	mov    cl,BYTE PTR [eax]
c000068a:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000068d:	38 d9                	cmp    cl,bl
c000068f:	75 0b                	jne    c000069c <memcmp+0x34>
c0000691:	40                   	inc    eax
c0000692:	42                   	inc    edx
c0000693:	39 f0                	cmp    eax,esi
c0000695:	75 f1                	jne    c0000688 <memcmp+0x20>
c0000697:	31 c0                	xor    eax,eax
c0000699:	5b                   	pop    ebx
c000069a:	5e                   	pop    esi
c000069b:	c3                   	ret    
c000069c:	0f b6 c1             	movzx  eax,cl
c000069f:	29 d8                	sub    eax,ebx
c00006a1:	5b                   	pop    ebx
c00006a2:	5e                   	pop    esi
c00006a3:	c3                   	ret    

c00006a4 <memmove>:
c00006a4:	55                   	push   ebp
c00006a5:	57                   	push   edi
c00006a6:	56                   	push   esi
c00006a7:	53                   	push   ebx
c00006a8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00006ac:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00006b0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00006b4:	39 dd                	cmp    ebp,ebx
c00006b6:	0f 83 80 00 00 00    	jae    c000073c <memmove+0x98>
c00006bc:	85 d2                	test   edx,edx
c00006be:	74 74                	je     c0000734 <memmove+0x90>
c00006c0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006c3:	8d 75 04             	lea    esi,[ebp+0x4]
c00006c6:	39 cd                	cmp    ebp,ecx
c00006c8:	0f 93 c1             	setae  cl
c00006cb:	39 f3                	cmp    ebx,esi
c00006cd:	0f 93 c0             	setae  al
c00006d0:	89 c6                	mov    esi,eax
c00006d2:	09 ce                	or     esi,ecx
c00006d4:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006d7:	89 f0                	mov    eax,esi
c00006d9:	83 f9 0c             	cmp    ecx,0xc
c00006dc:	0f 97 c1             	seta   cl
c00006df:	84 c8                	test   al,cl
c00006e1:	74 75                	je     c0000758 <memmove+0xb4>
c00006e3:	89 e9                	mov    ecx,ebp
c00006e5:	09 d9                	or     ecx,ebx
c00006e7:	83 e1 03             	and    ecx,0x3
c00006ea:	75 6c                	jne    c0000758 <memmove+0xb4>
c00006ec:	89 d7                	mov    edi,edx
c00006ee:	89 d9                	mov    ecx,ebx
c00006f0:	83 e7 fc             	and    edi,0xfffffffc
c00006f3:	89 ee                	mov    esi,ebp
c00006f5:	01 df                	add    edi,ebx
c00006f7:	90                   	nop
c00006f8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006fa:	83 c6 04             	add    esi,0x4
c00006fd:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000700:	83 c1 04             	add    ecx,0x4
c0000703:	39 f9                	cmp    ecx,edi
c0000705:	75 f1                	jne    c00006f8 <memmove+0x54>
c0000707:	89 d1                	mov    ecx,edx
c0000709:	89 d7                	mov    edi,edx
c000070b:	83 e1 fc             	and    ecx,0xfffffffc
c000070e:	29 cf                	sub    edi,ecx
c0000710:	01 cb                	add    ebx,ecx
c0000712:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c0000716:	39 ca                	cmp    edx,ecx
c0000718:	74 1a                	je     c0000734 <memmove+0x90>
c000071a:	8a 03                	mov    al,BYTE PTR [ebx]
c000071c:	83 ff 01             	cmp    edi,0x1
c000071f:	88 06                	mov    BYTE PTR [esi],al
c0000721:	74 11                	je     c0000734 <memmove+0x90>
c0000723:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000726:	83 ff 02             	cmp    edi,0x2
c0000729:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c000072c:	74 06                	je     c0000734 <memmove+0x90>
c000072e:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000731:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000734:	5b                   	pop    ebx
c0000735:	89 e8                	mov    eax,ebp
c0000737:	5e                   	pop    esi
c0000738:	5f                   	pop    edi
c0000739:	5d                   	pop    ebp
c000073a:	c3                   	ret    
c000073b:	90                   	nop
c000073c:	76 f6                	jbe    c0000734 <memmove+0x90>
c000073e:	85 d2                	test   edx,edx
c0000740:	74 f2                	je     c0000734 <memmove+0x90>
c0000742:	4b                   	dec    ebx
c0000743:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000746:	66 90                	xchg   ax,ax
c0000748:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000074b:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000074e:	4a                   	dec    edx
c000074f:	75 f7                	jne    c0000748 <memmove+0xa4>
c0000751:	5b                   	pop    ebx
c0000752:	89 e8                	mov    eax,ebp
c0000754:	5e                   	pop    esi
c0000755:	5f                   	pop    edi
c0000756:	5d                   	pop    ebp
c0000757:	c3                   	ret    
c0000758:	01 ea                	add    edx,ebp
c000075a:	89 e9                	mov    ecx,ebp
c000075c:	8a 03                	mov    al,BYTE PTR [ebx]
c000075e:	41                   	inc    ecx
c000075f:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000762:	43                   	inc    ebx
c0000763:	39 d1                	cmp    ecx,edx
c0000765:	75 f5                	jne    c000075c <memmove+0xb8>
c0000767:	eb cb                	jmp    c0000734 <memmove+0x90>
c0000769:	8d 76 00             	lea    esi,[esi+0x0]

c000076c <memset>:
c000076c:	57                   	push   edi
c000076d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000771:	85 c9                	test   ecx,ecx
c0000773:	74 0b                	je     c0000780 <memset+0x14>
c0000775:	fc                   	cld    
c0000776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000077a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000077e:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000784:	5f                   	pop    edi
c0000785:	c3                   	ret    
c0000786:	66 90                	xchg   ax,ax

c0000788 <strlen>:
c0000788:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000078c:	31 c0                	xor    eax,eax
c000078e:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000791:	74 09                	je     c000079c <strlen+0x14>
c0000793:	90                   	nop
c0000794:	40                   	inc    eax
c0000795:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000799:	75 f9                	jne    c0000794 <strlen+0xc>
c000079b:	c3                   	ret    
c000079c:	c3                   	ret    
c000079d:	8d 76 00             	lea    esi,[esi+0x0]

c00007a0 <strpbrk>:
c00007a0:	57                   	push   edi
c00007a1:	56                   	push   esi
c00007a2:	53                   	push   ebx
c00007a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ab:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007ad:	84 db                	test   bl,bl
c00007af:	74 21                	je     c00007d2 <strpbrk+0x32>
c00007b1:	8a 07                	mov    al,BYTE PTR [edi]
c00007b3:	84 c0                	test   al,al
c00007b5:	74 14                	je     c00007cb <strpbrk+0x2b>
c00007b7:	38 d8                	cmp    al,bl
c00007b9:	74 19                	je     c00007d4 <strpbrk+0x34>
c00007bb:	89 fa                	mov    edx,edi
c00007bd:	eb 05                	jmp    c00007c4 <strpbrk+0x24>
c00007bf:	90                   	nop
c00007c0:	38 d9                	cmp    cl,bl
c00007c2:	74 10                	je     c00007d4 <strpbrk+0x34>
c00007c4:	42                   	inc    edx
c00007c5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007c7:	84 c9                	test   cl,cl
c00007c9:	75 f5                	jne    c00007c0 <strpbrk+0x20>
c00007cb:	46                   	inc    esi
c00007cc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007ce:	84 db                	test   bl,bl
c00007d0:	75 e1                	jne    c00007b3 <strpbrk+0x13>
c00007d2:	31 f6                	xor    esi,esi
c00007d4:	89 f0                	mov    eax,esi
c00007d6:	5b                   	pop    ebx
c00007d7:	5e                   	pop    esi
c00007d8:	5f                   	pop    edi
c00007d9:	c3                   	ret    
c00007da:	66 90                	xchg   ax,ax

c00007dc <strtok>:
c00007dc:	56                   	push   esi
c00007dd:	53                   	push   ebx
c00007de:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007e2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007e6:	85 db                	test   ebx,ebx
c00007e8:	75 07                	jne    c00007f1 <strtok+0x15>
c00007ea:	eb 2c                	jmp    c0000818 <strtok+0x3c>
c00007ec:	43                   	inc    ebx
c00007ed:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007f1:	56                   	push   esi
c00007f2:	53                   	push   ebx
c00007f3:	e8 a8 ff ff ff       	call   c00007a0 <strpbrk>
c00007f8:	5a                   	pop    edx
c00007f9:	a3 48 ec 02 c0       	mov    ds:0xc002ec48,eax
c00007fe:	59                   	pop    ecx
c00007ff:	39 d8                	cmp    eax,ebx
c0000801:	74 e9                	je     c00007ec <strtok+0x10>
c0000803:	85 c0                	test   eax,eax
c0000805:	74 1b                	je     c0000822 <strtok+0x46>
c0000807:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000080a:	8d 50 01             	lea    edx,[eax+0x1]
c000080d:	89 d8                	mov    eax,ebx
c000080f:	89 15 48 ec 02 c0    	mov    DWORD PTR ds:0xc002ec48,edx
c0000815:	5b                   	pop    ebx
c0000816:	5e                   	pop    esi
c0000817:	c3                   	ret    
c0000818:	8b 1d 48 ec 02 c0    	mov    ebx,DWORD PTR ds:0xc002ec48
c000081e:	85 db                	test   ebx,ebx
c0000820:	75 cf                	jne    c00007f1 <strtok+0x15>
c0000822:	31 c0                	xor    eax,eax
c0000824:	5b                   	pop    ebx
c0000825:	5e                   	pop    esi
c0000826:	c3                   	ret    
c0000827:	90                   	nop

c0000828 <strcpy>:
c0000828:	53                   	push   ebx
c0000829:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000082d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000831:	89 c3                	mov    ebx,eax
c0000833:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000835:	84 d2                	test   dl,dl
c0000837:	74 0d                	je     c0000846 <strcpy+0x1e>
c0000839:	8d 76 00             	lea    esi,[esi+0x0]
c000083c:	88 13                	mov    BYTE PTR [ebx],dl
c000083e:	41                   	inc    ecx
c000083f:	43                   	inc    ebx
c0000840:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000842:	84 d2                	test   dl,dl
c0000844:	75 f6                	jne    c000083c <strcpy+0x14>
c0000846:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000849:	5b                   	pop    ebx
c000084a:	c3                   	ret    
c000084b:	90                   	nop

c000084c <strncpy>:
c000084c:	55                   	push   ebp
c000084d:	57                   	push   edi
c000084e:	56                   	push   esi
c000084f:	53                   	push   ebx
c0000850:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000854:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000858:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000085c:	85 c0                	test   eax,eax
c000085e:	74 39                	je     c0000899 <strncpy+0x4d>
c0000860:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000862:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000865:	8d 55 01             	lea    edx,[ebp+0x1]
c0000868:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000086b:	84 db                	test   bl,bl
c000086d:	74 31                	je     c00008a0 <strncpy+0x54>
c000086f:	85 c9                	test   ecx,ecx
c0000871:	74 26                	je     c0000899 <strncpy+0x4d>
c0000873:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000876:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000879:	8d 55 02             	lea    edx,[ebp+0x2]
c000087c:	8d 46 02             	lea    eax,[esi+0x2]
c000087f:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000882:	84 db                	test   bl,bl
c0000884:	75 0f                	jne    c0000895 <strncpy+0x49>
c0000886:	eb 18                	jmp    c00008a0 <strncpy+0x54>
c0000888:	40                   	inc    eax
c0000889:	42                   	inc    edx
c000088a:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c000088d:	49                   	dec    ecx
c000088e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000891:	84 db                	test   bl,bl
c0000893:	74 0b                	je     c00008a0 <strncpy+0x54>
c0000895:	85 c9                	test   ecx,ecx
c0000897:	75 ef                	jne    c0000888 <strncpy+0x3c>
c0000899:	5b                   	pop    ebx
c000089a:	89 e8                	mov    eax,ebp
c000089c:	5e                   	pop    esi
c000089d:	5f                   	pop    edi
c000089e:	5d                   	pop    ebp
c000089f:	c3                   	ret    
c00008a0:	85 c9                	test   ecx,ecx
c00008a2:	74 f5                	je     c0000899 <strncpy+0x4d>
c00008a4:	fc                   	cld    
c00008a5:	31 c0                	xor    eax,eax
c00008a7:	89 d7                	mov    edi,edx
c00008a9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008ab:	89 e8                	mov    eax,ebp
c00008ad:	5b                   	pop    ebx
c00008ae:	5e                   	pop    esi
c00008af:	5f                   	pop    edi
c00008b0:	5d                   	pop    ebp
c00008b1:	c3                   	ret    
c00008b2:	66 90                	xchg   ax,ax

c00008b4 <strcmp>:
c00008b4:	56                   	push   esi
c00008b5:	53                   	push   ebx
c00008b6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008ba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008be:	8a 16                	mov    dl,BYTE PTR [esi]
c00008c0:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008c3:	38 d1                	cmp    cl,dl
c00008c5:	75 1d                	jne    c00008e4 <strcmp+0x30>
c00008c7:	84 c9                	test   cl,cl
c00008c9:	74 21                	je     c00008ec <strcmp+0x38>
c00008cb:	b8 01 00 00 00       	mov    eax,0x1
c00008d0:	eb 07                	jmp    c00008d9 <strcmp+0x25>
c00008d2:	66 90                	xchg   ax,ax
c00008d4:	40                   	inc    eax
c00008d5:	84 d2                	test   dl,dl
c00008d7:	74 13                	je     c00008ec <strcmp+0x38>
c00008d9:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008dc:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008e0:	38 ca                	cmp    dl,cl
c00008e2:	74 f0                	je     c00008d4 <strcmp+0x20>
c00008e4:	0f b6 c2             	movzx  eax,dl
c00008e7:	5b                   	pop    ebx
c00008e8:	29 c8                	sub    eax,ecx
c00008ea:	5e                   	pop    esi
c00008eb:	c3                   	ret    
c00008ec:	31 c0                	xor    eax,eax
c00008ee:	5b                   	pop    ebx
c00008ef:	5e                   	pop    esi
c00008f0:	c3                   	ret    
c00008f1:	8d 76 00             	lea    esi,[esi+0x0]

c00008f4 <strchr>:
c00008f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008f8:	8a 10                	mov    dl,BYTE PTR [eax]
c00008fa:	84 d2                	test   dl,dl
c00008fc:	74 15                	je     c0000913 <strchr+0x1f>
c00008fe:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0000902:	38 ca                	cmp    dl,cl
c0000904:	75 06                	jne    c000090c <strchr+0x18>
c0000906:	eb 0e                	jmp    c0000916 <strchr+0x22>
c0000908:	38 ca                	cmp    dl,cl
c000090a:	74 09                	je     c0000915 <strchr+0x21>
c000090c:	40                   	inc    eax
c000090d:	8a 10                	mov    dl,BYTE PTR [eax]
c000090f:	84 d2                	test   dl,dl
c0000911:	75 f5                	jne    c0000908 <strchr+0x14>
c0000913:	31 c0                	xor    eax,eax
c0000915:	c3                   	ret    
c0000916:	c3                   	ret    
c0000917:	90                   	nop

c0000918 <strncmp>:
c0000918:	57                   	push   edi
c0000919:	56                   	push   esi
c000091a:	53                   	push   ebx
c000091b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000091f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000923:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000927:	85 ff                	test   edi,edi
c0000929:	74 28                	je     c0000953 <strncmp+0x3b>
c000092b:	8a 16                	mov    dl,BYTE PTR [esi]
c000092d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000930:	38 d1                	cmp    cl,dl
c0000932:	75 28                	jne    c000095c <strncmp+0x44>
c0000934:	8d 46 01             	lea    eax,[esi+0x1]
c0000937:	84 c9                	test   cl,cl
c0000939:	74 18                	je     c0000953 <strncmp+0x3b>
c000093b:	01 fe                	add    esi,edi
c000093d:	eb 0f                	jmp    c000094e <strncmp+0x36>
c000093f:	90                   	nop
c0000940:	8a 10                	mov    dl,BYTE PTR [eax]
c0000942:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000945:	38 ca                	cmp    dl,cl
c0000947:	75 13                	jne    c000095c <strncmp+0x44>
c0000949:	40                   	inc    eax
c000094a:	84 d2                	test   dl,dl
c000094c:	74 05                	je     c0000953 <strncmp+0x3b>
c000094e:	43                   	inc    ebx
c000094f:	39 c6                	cmp    esi,eax
c0000951:	75 ed                	jne    c0000940 <strncmp+0x28>
c0000953:	5b                   	pop    ebx
c0000954:	31 c0                	xor    eax,eax
c0000956:	5e                   	pop    esi
c0000957:	5f                   	pop    edi
c0000958:	c3                   	ret    
c0000959:	8d 76 00             	lea    esi,[esi+0x0]
c000095c:	5b                   	pop    ebx
c000095d:	0f b6 c2             	movzx  eax,dl
c0000960:	5e                   	pop    esi
c0000961:	29 c8                	sub    eax,ecx
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]

c0000968 <strcat>:
c0000968:	56                   	push   esi
c0000969:	53                   	push   ebx
c000096a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000096e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000972:	89 c3                	mov    ebx,eax
c0000974:	eb 04                	jmp    c000097a <strcat+0x12>
c0000976:	66 90                	xchg   ax,ax
c0000978:	89 d3                	mov    ebx,edx
c000097a:	8d 53 01             	lea    edx,[ebx+0x1]
c000097d:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000981:	75 f5                	jne    c0000978 <strcat+0x10>
c0000983:	31 d2                	xor    edx,edx
c0000985:	8d 76 00             	lea    esi,[esi+0x0]
c0000988:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000098b:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000098e:	42                   	inc    edx
c000098f:	84 c9                	test   cl,cl
c0000991:	75 f5                	jne    c0000988 <strcat+0x20>
c0000993:	5b                   	pop    ebx
c0000994:	5e                   	pop    esi
c0000995:	c3                   	ret    
c0000996:	66 90                	xchg   ax,ax

c0000998 <strncat>:
c0000998:	56                   	push   esi
c0000999:	53                   	push   ebx
c000099a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000099e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009a6:	85 f6                	test   esi,esi
c00009a8:	74 1e                	je     c00009c8 <strncat+0x30>
c00009aa:	89 c2                	mov    edx,eax
c00009ac:	42                   	inc    edx
c00009ad:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009b1:	75 f9                	jne    c00009ac <strncat+0x14>
c00009b3:	01 ce                	add    esi,ecx
c00009b5:	eb 06                	jmp    c00009bd <strncat+0x25>
c00009b7:	90                   	nop
c00009b8:	39 f1                	cmp    ecx,esi
c00009ba:	74 10                	je     c00009cc <strncat+0x34>
c00009bc:	42                   	inc    edx
c00009bd:	41                   	inc    ecx
c00009be:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009c1:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009c4:	84 db                	test   bl,bl
c00009c6:	75 f0                	jne    c00009b8 <strncat+0x20>
c00009c8:	5b                   	pop    ebx
c00009c9:	5e                   	pop    esi
c00009ca:	c3                   	ret    
c00009cb:	90                   	nop
c00009cc:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009cf:	5b                   	pop    ebx
c00009d0:	5e                   	pop    esi
c00009d1:	c3                   	ret    
c00009d2:	66 90                	xchg   ax,ax

c00009d4 <strstr>:
c00009d4:	57                   	push   edi
c00009d5:	56                   	push   esi
c00009d6:	53                   	push   ebx
c00009d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009db:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009df:	57                   	push   edi
c00009e0:	e8 a3 fd ff ff       	call   c0000788 <strlen>
c00009e5:	59                   	pop    ecx
c00009e6:	85 c0                	test   eax,eax
c00009e8:	74 2a                	je     c0000a14 <strstr+0x40>
c00009ea:	89 c6                	mov    esi,eax
c00009ec:	eb 12                	jmp    c0000a00 <strstr+0x2c>
c00009ee:	66 90                	xchg   ax,ax
c00009f0:	56                   	push   esi
c00009f1:	57                   	push   edi
c00009f2:	53                   	push   ebx
c00009f3:	e8 70 fc ff ff       	call   c0000668 <memcmp>
c00009f8:	83 c4 0c             	add    esp,0xc
c00009fb:	85 c0                	test   eax,eax
c00009fd:	74 15                	je     c0000a14 <strstr+0x40>
c00009ff:	43                   	inc    ebx
c0000a00:	53                   	push   ebx
c0000a01:	e8 82 fd ff ff       	call   c0000788 <strlen>
c0000a06:	5a                   	pop    edx
c0000a07:	39 f0                	cmp    eax,esi
c0000a09:	73 e5                	jae    c00009f0 <strstr+0x1c>
c0000a0b:	5b                   	pop    ebx
c0000a0c:	31 c0                	xor    eax,eax
c0000a0e:	5e                   	pop    esi
c0000a0f:	5f                   	pop    edi
c0000a10:	c3                   	ret    
c0000a11:	8d 76 00             	lea    esi,[esi+0x0]
c0000a14:	89 d8                	mov    eax,ebx
c0000a16:	5b                   	pop    ebx
c0000a17:	5e                   	pop    esi
c0000a18:	5f                   	pop    edi
c0000a19:	c3                   	ret    
c0000a1a:	66 90                	xchg   ax,ax

c0000a1c <toupper>:
c0000a1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a20:	0f b6 d0             	movzx  edx,al
c0000a23:	f6 82 e0 9c 02 c0 02 	test   BYTE PTR [edx-0x3ffd6320],0x2
c0000a2a:	74 03                	je     c0000a2f <toupper+0x13>
c0000a2c:	83 e8 20             	sub    eax,0x20
c0000a2f:	c3                   	ret    

c0000a30 <tolower>:
c0000a30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a34:	0f b6 d0             	movzx  edx,al
c0000a37:	f6 82 e0 9c 02 c0 01 	test   BYTE PTR [edx-0x3ffd6320],0x1
c0000a3e:	74 03                	je     c0000a43 <tolower+0x13>
c0000a40:	83 c0 20             	add    eax,0x20
c0000a43:	c3                   	ret    

c0000a44 <simple_strtoul>:
c0000a44:	55                   	push   ebp
c0000a45:	57                   	push   edi
c0000a46:	56                   	push   esi
c0000a47:	53                   	push   ebx
c0000a48:	83 ec 08             	sub    esp,0x8
c0000a4b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a4f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a53:	90                   	nop
c0000a54:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a57:	f6 82 e0 9c 02 c0 08 	test   BYTE PTR [edx-0x3ffd6320],0x8
c0000a5e:	75 05                	jne    c0000a65 <simple_strtoul+0x21>
c0000a60:	80 fa 09             	cmp    dl,0x9
c0000a63:	75 03                	jne    c0000a68 <simple_strtoul+0x24>
c0000a65:	41                   	inc    ecx
c0000a66:	eb ec                	jmp    c0000a54 <simple_strtoul+0x10>
c0000a68:	80 fa 2d             	cmp    dl,0x2d
c0000a6b:	0f 84 1b 01 00 00    	je     c0000b8c <simple_strtoul+0x148>
c0000a71:	80 fa 2b             	cmp    dl,0x2b
c0000a74:	0f 84 c2 00 00 00    	je     c0000b3c <simple_strtoul+0xf8>
c0000a7a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a82:	85 f6                	test   esi,esi
c0000a84:	0f 85 c3 00 00 00    	jne    c0000b4d <simple_strtoul+0x109>
c0000a8a:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a8c:	80 fa 30             	cmp    dl,0x30
c0000a8f:	0f 84 47 01 00 00    	je     c0000bdc <simple_strtoul+0x198>
c0000a95:	be 0a 00 00 00       	mov    esi,0xa
c0000a9a:	84 d2                	test   dl,dl
c0000a9c:	0f 84 6f 01 00 00    	je     c0000c11 <simple_strtoul+0x1cd>
c0000aa2:	31 ed                	xor    ebp,ebp
c0000aa4:	31 ff                	xor    edi,edi
c0000aa6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000aad:	eb 2b                	jmp    c0000ada <simple_strtoul+0x96>
c0000aaf:	90                   	nop
c0000ab0:	83 eb 30             	sub    ebx,0x30
c0000ab3:	39 f3                	cmp    ebx,esi
c0000ab5:	73 4d                	jae    c0000b04 <simple_strtoul+0xc0>
c0000ab7:	31 d2                	xor    edx,edx
c0000ab9:	89 d8                	mov    eax,ebx
c0000abb:	f7 d0                	not    eax
c0000abd:	f7 f6                	div    esi
c0000abf:	39 f8                	cmp    eax,edi
c0000ac1:	0f 82 b1 00 00 00    	jb     c0000b78 <simple_strtoul+0x134>
c0000ac7:	0f af fe             	imul   edi,esi
c0000aca:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ad1:	01 df                	add    edi,ebx
c0000ad3:	41                   	inc    ecx
c0000ad4:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ad6:	84 d2                	test   dl,dl
c0000ad8:	74 2a                	je     c0000b04 <simple_strtoul+0xc0>
c0000ada:	0f b6 da             	movzx  ebx,dl
c0000add:	f6 83 e0 9c 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6320],0x4
c0000ae4:	75 ca                	jne    c0000ab0 <simple_strtoul+0x6c>
c0000ae6:	0f be d2             	movsx  edx,dl
c0000ae9:	52                   	push   edx
c0000aea:	e8 2d ff ff ff       	call   c0000a1c <toupper>
c0000aef:	5b                   	pop    ebx
c0000af0:	0f b6 d0             	movzx  edx,al
c0000af3:	f6 82 e0 9c 02 c0 01 	test   BYTE PTR [edx-0x3ffd6320],0x1
c0000afa:	74 08                	je     c0000b04 <simple_strtoul+0xc0>
c0000afc:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000aff:	39 f3                	cmp    ebx,esi
c0000b01:	72 b4                	jb     c0000ab7 <simple_strtoul+0x73>
c0000b03:	90                   	nop
c0000b04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b08:	85 c0                	test   eax,eax
c0000b0a:	74 14                	je     c0000b20 <simple_strtoul+0xdc>
c0000b0c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b0f:	09 f8                	or     eax,edi
c0000b11:	75 71                	jne    c0000b84 <simple_strtoul+0x140>
c0000b13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b17:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b1b:	31 ff                	xor    edi,edi
c0000b1d:	89 30                	mov    DWORD PTR [eax],esi
c0000b1f:	90                   	nop
c0000b20:	4d                   	dec    ebp
c0000b21:	75 05                	jne    c0000b28 <simple_strtoul+0xe4>
c0000b23:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b28:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b2d:	75 02                	jne    c0000b31 <simple_strtoul+0xed>
c0000b2f:	f7 df                	neg    edi
c0000b31:	83 c4 08             	add    esp,0x8
c0000b34:	89 f8                	mov    eax,edi
c0000b36:	5b                   	pop    ebx
c0000b37:	5e                   	pop    esi
c0000b38:	5f                   	pop    edi
c0000b39:	5d                   	pop    ebp
c0000b3a:	c3                   	ret    
c0000b3b:	90                   	nop
c0000b3c:	41                   	inc    ecx
c0000b3d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b45:	85 f6                	test   esi,esi
c0000b47:	0f 84 3d ff ff ff    	je     c0000a8a <simple_strtoul+0x46>
c0000b4d:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b50:	83 f8 22             	cmp    eax,0x22
c0000b53:	77 6a                	ja     c0000bbf <simple_strtoul+0x17b>
c0000b55:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b57:	83 fe 08             	cmp    esi,0x8
c0000b5a:	0f 84 a2 00 00 00    	je     c0000c02 <simple_strtoul+0x1be>
c0000b60:	83 fe 10             	cmp    esi,0x10
c0000b63:	0f 85 31 ff ff ff    	jne    c0000a9a <simple_strtoul+0x56>
c0000b69:	80 fa 30             	cmp    dl,0x30
c0000b6c:	74 2c                	je     c0000b9a <simple_strtoul+0x156>
c0000b6e:	be 10 00 00 00       	mov    esi,0x10
c0000b73:	e9 22 ff ff ff       	jmp    c0000a9a <simple_strtoul+0x56>
c0000b78:	bd 01 00 00 00       	mov    ebp,0x1
c0000b7d:	31 ff                	xor    edi,edi
c0000b7f:	e9 4f ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x8f>
c0000b84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b88:	89 08                	mov    DWORD PTR [eax],ecx
c0000b8a:	eb 94                	jmp    c0000b20 <simple_strtoul+0xdc>
c0000b8c:	41                   	inc    ecx
c0000b8d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b95:	e9 e8 fe ff ff       	jmp    c0000a82 <simple_strtoul+0x3e>
c0000b9a:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b9e:	88 04 24             	mov    BYTE PTR [esp],al
c0000ba1:	50                   	push   eax
c0000ba2:	e8 89 fe ff ff       	call   c0000a30 <tolower>
c0000ba7:	5e                   	pop    esi
c0000ba8:	83 f8 78             	cmp    eax,0x78
c0000bab:	0f 84 84 00 00 00    	je     c0000c35 <simple_strtoul+0x1f1>
c0000bb1:	41                   	inc    ecx
c0000bb2:	be 10 00 00 00       	mov    esi,0x10
c0000bb7:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bba:	e9 db fe ff ff       	jmp    c0000a9a <simple_strtoul+0x56>
c0000bbf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bc3:	85 ff                	test   edi,edi
c0000bc5:	74 5c                	je     c0000c23 <simple_strtoul+0x1df>
c0000bc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bcb:	85 c9                	test   ecx,ecx
c0000bcd:	75 4e                	jne    c0000c1d <simple_strtoul+0x1d9>
c0000bcf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bd5:	31 ff                	xor    edi,edi
c0000bd7:	e9 4c ff ff ff       	jmp    c0000b28 <simple_strtoul+0xe4>
c0000bdc:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000be0:	88 04 24             	mov    BYTE PTR [esp],al
c0000be3:	50                   	push   eax
c0000be4:	e8 47 fe ff ff       	call   c0000a30 <tolower>
c0000be9:	5d                   	pop    ebp
c0000bea:	83 f8 78             	cmp    eax,0x78
c0000bed:	74 3b                	je     c0000c2a <simple_strtoul+0x1e6>
c0000bef:	41                   	inc    ecx
c0000bf0:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bf3:	80 fa 30             	cmp    dl,0x30
c0000bf6:	74 13                	je     c0000c0b <simple_strtoul+0x1c7>
c0000bf8:	be 08 00 00 00       	mov    esi,0x8
c0000bfd:	e9 98 fe ff ff       	jmp    c0000a9a <simple_strtoul+0x56>
c0000c02:	80 fa 30             	cmp    dl,0x30
c0000c05:	0f 85 8f fe ff ff    	jne    c0000a9a <simple_strtoul+0x56>
c0000c0b:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c0e:	41                   	inc    ecx
c0000c0f:	eb e7                	jmp    c0000bf8 <simple_strtoul+0x1b4>
c0000c11:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c15:	85 d2                	test   edx,edx
c0000c17:	74 0a                	je     c0000c23 <simple_strtoul+0x1df>
c0000c19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c1d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c21:	89 30                	mov    DWORD PTR [eax],esi
c0000c23:	31 ff                	xor    edi,edi
c0000c25:	e9 fe fe ff ff       	jmp    c0000b28 <simple_strtoul+0xe4>
c0000c2a:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c2d:	83 c1 02             	add    ecx,0x2
c0000c30:	e9 34 ff ff ff       	jmp    c0000b69 <simple_strtoul+0x125>
c0000c35:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c38:	be 10 00 00 00       	mov    esi,0x10
c0000c3d:	83 c1 02             	add    ecx,0x2
c0000c40:	e9 55 fe ff ff       	jmp    c0000a9a <simple_strtoul+0x56>

c0000c45 <largebin_index>:
c0000c45:	89 c2                	mov    edx,eax
c0000c47:	c1 ea 08             	shr    edx,0x8
c0000c4a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c50:	77 10                	ja     c0000c62 <largebin_index+0x1d>
c0000c52:	0f bd d2             	bsr    edx,edx
c0000c55:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c58:	d3 e8                	shr    eax,cl
c0000c5a:	83 e0 03             	and    eax,0x3
c0000c5d:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c61:	c3                   	ret    
c0000c62:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c67:	c3                   	ret    

c0000c68 <malloc_init_state>:
c0000c68:	53                   	push   ebx
c0000c69:	8d 50 34             	lea    edx,[eax+0x34]
c0000c6c:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c72:	89 d1                	mov    ecx,edx
c0000c74:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c77:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c7a:	83 c2 08             	add    edx,0x8
c0000c7d:	39 da                	cmp    edx,ebx
c0000c7f:	75 f3                	jne    c0000c74 <malloc_init_state+0xc>
c0000c81:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c83:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c8d:	83 e2 03             	and    edx,0x3
c0000c90:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c9a:	83 ca 48             	or     edx,0x48
c0000c9d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000ca7:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cb1:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cbd:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cc7:	5b                   	pop    ebx
c0000cc8:	c3                   	ret    

c0000cc9 <malloc_consolidate>:
c0000cc9:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ccb:	85 d2                	test   edx,edx
c0000ccd:	0f 84 d8 00 00 00    	je     c0000dab <malloc_consolidate+0xe2>
c0000cd3:	55                   	push   ebp
c0000cd4:	83 e2 fd             	and    edx,0xfffffffd
c0000cd7:	57                   	push   edi
c0000cd8:	89 c5                	mov    ebp,eax
c0000cda:	56                   	push   esi
c0000cdb:	8d 78 34             	lea    edi,[eax+0x34]
c0000cde:	53                   	push   ebx
c0000cdf:	83 ec 10             	sub    esp,0x10
c0000ce2:	89 10                	mov    DWORD PTR [eax],edx
c0000ce4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ce8:	c1 ea 03             	shr    edx,0x3
c0000ceb:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cef:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cf3:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cf6:	85 d2                	test   edx,edx
c0000cf8:	0f 84 98 00 00 00    	je     c0000d96 <malloc_consolidate+0xcd>
c0000cfe:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d05:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d08:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d0b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d0f:	89 f9                	mov    ecx,edi
c0000d11:	83 e1 fe             	and    ecx,0xfffffffe
c0000d14:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d17:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d1a:	83 e3 fc             	and    ebx,0xfffffffc
c0000d1d:	83 e7 01             	and    edi,0x1
c0000d20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d23:	75 14                	jne    c0000d39 <malloc_consolidate+0x70>
c0000d25:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d27:	29 fa                	sub    edx,edi
c0000d29:	01 f9                	add    ecx,edi
c0000d2b:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d2e:	89 fb                	mov    ebx,edi
c0000d30:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d33:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d36:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d39:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d3c:	74 40                	je     c0000d7e <malloc_consolidate+0xb5>
c0000d3e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d41:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d44:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d48:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d4b:	83 e7 01             	and    edi,0x1
c0000d4e:	75 0e                	jne    c0000d5e <malloc_consolidate+0x95>
c0000d50:	01 d9                	add    ecx,ebx
c0000d52:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d55:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d5b:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d5e:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d61:	89 ce                	mov    esi,ecx
c0000d63:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d66:	83 ce 01             	or     esi,0x1
c0000d69:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d6c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d6f:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d72:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d76:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d79:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d7c:	eb 0c                	jmp    c0000d8a <malloc_consolidate+0xc1>
c0000d7e:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d8a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d8e:	85 d2                	test   edx,edx
c0000d90:	0f 85 6f ff ff ff    	jne    c0000d05 <malloc_consolidate+0x3c>
c0000d96:	83 c5 04             	add    ebp,0x4
c0000d99:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d9d:	0f 85 50 ff ff ff    	jne    c0000cf3 <malloc_consolidate+0x2a>
c0000da3:	83 c4 10             	add    esp,0x10
c0000da6:	5b                   	pop    ebx
c0000da7:	5e                   	pop    esi
c0000da8:	5f                   	pop    edi
c0000da9:	5d                   	pop    ebp
c0000daa:	c3                   	ret    
c0000dab:	e9 b8 fe ff ff       	jmp    c0000c68 <malloc_init_state>

c0000db0 <dlfree>:
c0000db0:	57                   	push   edi
c0000db1:	56                   	push   esi
c0000db2:	53                   	push   ebx
c0000db3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000db7:	85 db                	test   ebx,ebx
c0000db9:	0f 84 e2 00 00 00    	je     c0000ea1 <dlfree+0xf1>
c0000dbf:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dc2:	8b 0d 60 ec 02 c0    	mov    ecx,DWORD PTR ds:0xc002ec60
c0000dc8:	89 f0                	mov    eax,esi
c0000dca:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dcd:	83 e0 fc             	and    eax,0xfffffffc
c0000dd0:	39 c1                	cmp    ecx,eax
c0000dd2:	72 24                	jb     c0000df8 <dlfree+0x48>
c0000dd4:	83 c9 03             	or     ecx,0x3
c0000dd7:	c1 e8 03             	shr    eax,0x3
c0000dda:	89 0d 60 ec 02 c0    	mov    DWORD PTR ds:0xc002ec60,ecx
c0000de0:	83 e8 02             	sub    eax,0x2
c0000de3:	8b 0c 85 64 ec 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd139c]
c0000dea:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dec:	89 14 85 64 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd139c],edx
c0000df3:	e9 a9 00 00 00       	jmp    c0000ea1 <dlfree+0xf1>
c0000df8:	83 e6 02             	and    esi,0x2
c0000dfb:	0f 85 a0 00 00 00    	jne    c0000ea1 <dlfree+0xf1>
c0000e01:	83 c9 01             	or     ecx,0x1
c0000e04:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e07:	89 0d 60 ec 02 c0    	mov    DWORD PTR ds:0xc002ec60,ecx
c0000e0d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e10:	83 e1 fc             	and    ecx,0xfffffffc
c0000e13:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e17:	75 13                	jne    c0000e2c <dlfree+0x7c>
c0000e19:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e1c:	29 da                	sub    edx,ebx
c0000e1e:	01 d8                	add    eax,ebx
c0000e20:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e23:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e26:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e29:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e2c:	39 35 8c ec 02 c0    	cmp    DWORD PTR ds:0xc002ec8c,esi
c0000e32:	74 40                	je     c0000e74 <dlfree+0xc4>
c0000e34:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e38:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e3b:	80 e3 01             	and    bl,0x1
c0000e3e:	75 0e                	jne    c0000e4e <dlfree+0x9e>
c0000e40:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e43:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e46:	01 c8                	add    eax,ecx
c0000e48:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e4b:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e4e:	8b 0d 9c ec 02 c0    	mov    ecx,DWORD PTR ds:0xc002ec9c
c0000e54:	c7 42 0c 94 ec 02 c0 	mov    DWORD PTR [edx+0xc],0xc002ec94
c0000e5b:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e5e:	89 15 9c ec 02 c0    	mov    DWORD PTR ds:0xc002ec9c,edx
c0000e64:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e67:	89 c1                	mov    ecx,eax
c0000e69:	83 c9 01             	or     ecx,0x1
c0000e6c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e6f:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e72:	eb 10                	jmp    c0000e84 <dlfree+0xd4>
c0000e74:	01 c8                	add    eax,ecx
c0000e76:	89 c1                	mov    ecx,eax
c0000e78:	83 c9 01             	or     ecx,0x1
c0000e7b:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7e:	89 15 8c ec 02 c0    	mov    DWORD PTR ds:0xc002ec8c,edx
c0000e84:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e89:	76 16                	jbe    c0000ea1 <dlfree+0xf1>
c0000e8b:	f6 05 60 ec 02 c0 02 	test   BYTE PTR ds:0xc002ec60,0x2
c0000e92:	74 0d                	je     c0000ea1 <dlfree+0xf1>
c0000e94:	5b                   	pop    ebx
c0000e95:	b8 60 ec 02 c0       	mov    eax,0xc002ec60
c0000e9a:	5e                   	pop    esi
c0000e9b:	5f                   	pop    edi
c0000e9c:	e9 28 fe ff ff       	jmp    c0000cc9 <malloc_consolidate>
c0000ea1:	5b                   	pop    ebx
c0000ea2:	5e                   	pop    esi
c0000ea3:	5f                   	pop    edi
c0000ea4:	c3                   	ret    

c0000ea5 <sYSMALLOc>:
c0000ea5:	55                   	push   ebp
c0000ea6:	57                   	push   edi
c0000ea7:	56                   	push   esi
c0000ea8:	53                   	push   ebx
c0000ea9:	89 d3                	mov    ebx,edx
c0000eab:	83 ec 2c             	sub    esp,0x2c
c0000eae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000eb2:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000eb8:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ebb:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ebe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ec2:	74 1f                	je     c0000ee3 <sYSMALLOc+0x3e>
c0000ec4:	89 d8                	mov    eax,ebx
c0000ec6:	e8 fe fd ff ff       	call   c0000cc9 <malloc_consolidate>
c0000ecb:	83 ec 0c             	sub    esp,0xc
c0000ece:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ed2:	83 e8 07             	sub    eax,0x7
c0000ed5:	50                   	push   eax
c0000ed6:	e8 30 02 00 00       	call   c000110b <dlmalloc>
c0000edb:	83 c4 10             	add    esp,0x10
c0000ede:	e9 20 02 00 00       	jmp    c0001103 <sYSMALLOc+0x25e>
c0000ee3:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ee6:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000eec:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000eef:	83 e0 fc             	and    eax,0xfffffffc
c0000ef2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ef6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000efa:	83 c0 10             	add    eax,0x10
c0000efd:	01 c1                	add    ecx,eax
c0000eff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f03:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f0a:	74 04                	je     c0000f10 <sYSMALLOc+0x6b>
c0000f0c:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f10:	f7 da                	neg    edx
c0000f12:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f16:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f1a:	21 d1                	and    ecx,edx
c0000f1c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f20:	7f 07                	jg     c0000f29 <sYSMALLOc+0x84>
c0000f22:	31 c0                	xor    eax,eax
c0000f24:	e9 da 01 00 00       	jmp    c0001103 <sYSMALLOc+0x25e>
c0000f29:	83 ec 0c             	sub    esp,0xc
c0000f2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f30:	e8 01 e8 00 00       	call   c000f736 <sbrk>
c0000f35:	83 c4 10             	add    esp,0x10
c0000f38:	89 c6                	mov    esi,eax
c0000f3a:	83 f8 ff             	cmp    eax,0xffffffff
c0000f3d:	74 e3                	je     c0000f22 <sYSMALLOc+0x7d>
c0000f3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f43:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f47:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f4a:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f50:	39 f1                	cmp    ecx,esi
c0000f52:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f58:	75 13                	jne    c0000f6d <sYSMALLOc+0xc8>
c0000f5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f5e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f62:	83 c8 01             	or     eax,0x1
c0000f65:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f68:	e9 3e 01 00 00       	jmp    c00010ab <sYSMALLOc+0x206>
c0000f6d:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f73:	88 d0                	mov    al,dl
c0000f75:	83 e0 01             	and    eax,0x1
c0000f78:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f7d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f81:	0f 95 c0             	setne  al
c0000f84:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f88:	39 f1                	cmp    ecx,esi
c0000f8a:	76 12                	jbe    c0000f9e <sYSMALLOc+0xf9>
c0000f8c:	84 c0                	test   al,al
c0000f8e:	74 0e                	je     c0000f9e <sYSMALLOc+0xf9>
c0000f90:	83 e2 fe             	and    edx,0xfffffffe
c0000f93:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f99:	e9 83 00 00 00       	jmp    c0001021 <sYSMALLOc+0x17c>
c0000f9e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000fa3:	74 7c                	je     c0001021 <sYSMALLOc+0x17c>
c0000fa5:	84 c0                	test   al,al
c0000fa7:	74 0c                	je     c0000fb5 <sYSMALLOc+0x110>
c0000fa9:	89 f0                	mov    eax,esi
c0000fab:	29 c8                	sub    eax,ecx
c0000fad:	01 e8                	add    eax,ebp
c0000faf:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fb5:	89 f2                	mov    edx,esi
c0000fb7:	83 e2 07             	and    edx,0x7
c0000fba:	74 0c                	je     c0000fc8 <sYSMALLOc+0x123>
c0000fbc:	b8 08 00 00 00       	mov    eax,0x8
c0000fc1:	29 d0                	sub    eax,edx
c0000fc3:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fc6:	eb 04                	jmp    c0000fcc <sYSMALLOc+0x127>
c0000fc8:	89 f5                	mov    ebp,esi
c0000fca:	31 c0                	xor    eax,eax
c0000fcc:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fd0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fd4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fd8:	01 c1                	add    ecx,eax
c0000fda:	83 ec 0c             	sub    esp,0xc
c0000fdd:	01 f1                	add    ecx,esi
c0000fdf:	01 ca                	add    edx,ecx
c0000fe1:	29 c8                	sub    eax,ecx
c0000fe3:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fe7:	01 c2                	add    edx,eax
c0000fe9:	52                   	push   edx
c0000fea:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fee:	e8 43 e7 00 00       	call   c000f736 <sbrk>
c0000ff3:	83 c4 10             	add    esp,0x10
c0000ff6:	83 f8 ff             	cmp    eax,0xffffffff
c0000ff9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ffd:	75 0f                	jne    c000100e <sYSMALLOc+0x169>
c0000fff:	83 ec 0c             	sub    esp,0xc
c0001002:	6a 00                	push   0x0
c0001004:	e8 2d e7 00 00       	call   c000f736 <sbrk>
c0001009:	83 c4 10             	add    esp,0x10
c000100c:	eb 30                	jmp    c000103e <sYSMALLOc+0x199>
c000100e:	39 c6                	cmp    esi,eax
c0001010:	76 33                	jbe    c0001045 <sYSMALLOc+0x1a0>
c0001012:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001016:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000101d:	01 f0                	add    eax,esi
c000101f:	eb 1d                	jmp    c000103e <sYSMALLOc+0x199>
c0001021:	83 ec 0c             	sub    esp,0xc
c0001024:	89 f5                	mov    ebp,esi
c0001026:	6a 00                	push   0x0
c0001028:	e8 09 e7 00 00       	call   c000f736 <sbrk>
c000102d:	89 c2                	mov    edx,eax
c000102f:	29 f2                	sub    edx,esi
c0001031:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001035:	83 c4 10             	add    esp,0x10
c0001038:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103e:	31 d2                	xor    edx,edx
c0001040:	83 f8 ff             	cmp    eax,0xffffffff
c0001043:	74 66                	je     c00010ab <sYSMALLOc+0x206>
c0001045:	29 e8                	sub    eax,ebp
c0001047:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000104a:	01 d0                	add    eax,edx
c000104c:	83 c8 01             	or     eax,0x1
c000104f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001052:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001058:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000105d:	74 4c                	je     c00010ab <sYSMALLOc+0x206>
c000105f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001063:	83 e8 0c             	sub    eax,0xc
c0001066:	83 e0 f8             	and    eax,0xfffffff8
c0001069:	89 c2                	mov    edx,eax
c000106b:	83 ca 01             	or     edx,0x1
c000106e:	83 f8 0f             	cmp    eax,0xf
c0001071:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001074:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000107c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001084:	76 25                	jbe    c00010ab <sYSMALLOc+0x206>
c0001086:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000108c:	83 ec 0c             	sub    esp,0xc
c000108f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001099:	83 c7 08             	add    edi,0x8
c000109c:	57                   	push   edi
c000109d:	e8 0e fd ff ff       	call   c0000db0 <dlfree>
c00010a2:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010a8:	83 c4 10             	add    esp,0x10
c00010ab:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010b1:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010b7:	73 06                	jae    c00010bf <sYSMALLOc+0x21a>
c00010b9:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010bf:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010c5:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010cb:	73 06                	jae    c00010d3 <sYSMALLOc+0x22e>
c00010cd:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010d3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010d6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010d9:	83 e2 fc             	and    edx,0xfffffffc
c00010dc:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010e0:	0f 82 3c fe ff ff    	jb     c0000f22 <sYSMALLOc+0x7d>
c00010e6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ea:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010ed:	29 fa                	sub    edx,edi
c00010ef:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010f2:	83 ca 01             	or     edx,0x1
c00010f5:	89 fb                	mov    ebx,edi
c00010f7:	83 c0 08             	add    eax,0x8
c00010fa:	83 cb 01             	or     ebx,0x1
c00010fd:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001100:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001103:	83 c4 2c             	add    esp,0x2c
c0001106:	5b                   	pop    ebx
c0001107:	5e                   	pop    esi
c0001108:	5f                   	pop    edi
c0001109:	5d                   	pop    ebp
c000110a:	c3                   	ret    

c000110b <dlmalloc>:
c000110b:	55                   	push   ebp
c000110c:	57                   	push   edi
c000110d:	56                   	push   esi
c000110e:	53                   	push   ebx
c000110f:	83 ec 1c             	sub    esp,0x1c
c0001112:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001116:	83 f8 df             	cmp    eax,0xffffffdf
c0001119:	0f 87 70 03 00 00    	ja     c000148f <dlmalloc+0x384>
c000111f:	83 c0 0b             	add    eax,0xb
c0001122:	be 10 00 00 00       	mov    esi,0x10
c0001127:	83 f8 0f             	cmp    eax,0xf
c000112a:	76 05                	jbe    c0001131 <dlmalloc+0x26>
c000112c:	83 e0 f8             	and    eax,0xfffffff8
c000112f:	89 c6                	mov    esi,eax
c0001131:	8b 3d 60 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ec60
c0001137:	f7 c7 01 00 00 00    	test   edi,0x1
c000113d:	75 17                	jne    c0001156 <dlmalloc+0x4b>
c000113f:	85 ff                	test   edi,edi
c0001141:	0f 85 05 03 00 00    	jne    c000144c <dlmalloc+0x341>
c0001147:	b8 60 ec 02 c0       	mov    eax,0xc002ec60
c000114c:	e8 78 fb ff ff       	call   c0000cc9 <malloc_consolidate>
c0001151:	e9 f6 02 00 00       	jmp    c000144c <dlmalloc+0x341>
c0001156:	39 f7                	cmp    edi,esi
c0001158:	72 1f                	jb     c0001179 <dlmalloc+0x6e>
c000115a:	89 f2                	mov    edx,esi
c000115c:	c1 ea 03             	shr    edx,0x3
c000115f:	83 ea 02             	sub    edx,0x2
c0001162:	8b 04 95 64 ec 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd139c]
c0001169:	85 c0                	test   eax,eax
c000116b:	74 0c                	je     c0001179 <dlmalloc+0x6e>
c000116d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001170:	89 0c 95 64 ec 02 c0 	mov    DWORD PTR [edx*4-0x3ffd139c],ecx
c0001177:	eb 30                	jmp    c00011a9 <dlmalloc+0x9e>
c0001179:	89 f0                	mov    eax,esi
c000117b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001181:	77 2e                	ja     c00011b1 <dlmalloc+0xa6>
c0001183:	c1 e8 03             	shr    eax,0x3
c0001186:	8d 14 c5 94 ec 02 c0 	lea    edx,[eax*8-0x3ffd136c]
c000118d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001191:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001194:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001197:	39 c3                	cmp    ebx,eax
c0001199:	74 2e                	je     c00011c9 <dlmalloc+0xbe>
c000119b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000119e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011a3:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011a6:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011a9:	83 c0 08             	add    eax,0x8
c00011ac:	e9 e0 02 00 00       	jmp    c0001491 <dlmalloc+0x386>
c00011b1:	e8 8f fa ff ff       	call   c0000c45 <largebin_index>
c00011b6:	83 e7 02             	and    edi,0x2
c00011b9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011bd:	74 0a                	je     c00011c9 <dlmalloc+0xbe>
c00011bf:	b8 60 ec 02 c0       	mov    eax,0xc002ec60
c00011c4:	e8 00 fb ff ff       	call   c0000cc9 <malloc_consolidate>
c00011c9:	8d 46 10             	lea    eax,[esi+0x10]
c00011cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011d0:	8b 1d a0 ec 02 c0    	mov    ebx,DWORD PTR ds:0xc002eca0
c00011d6:	81 fb 94 ec 02 c0    	cmp    ebx,0xc002ec94
c00011dc:	0f 84 13 01 00 00    	je     c00012f5 <dlmalloc+0x1ea>
c00011e2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011e5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011e8:	83 e7 fc             	and    edi,0xfffffffc
c00011eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011f1:	77 4c                	ja     c000123f <dlmalloc+0x134>
c00011f3:	3d 94 ec 02 c0       	cmp    eax,0xc002ec94
c00011f8:	75 45                	jne    c000123f <dlmalloc+0x134>
c00011fa:	39 1d 90 ec 02 c0    	cmp    DWORD PTR ds:0xc002ec90,ebx
c0001200:	75 3d                	jne    c000123f <dlmalloc+0x134>
c0001202:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001206:	73 37                	jae    c000123f <dlmalloc+0x134>
c0001208:	8d 04 33             	lea    eax,[ebx+esi*1]
c000120b:	89 fa                	mov    edx,edi
c000120d:	a3 9c ec 02 c0       	mov    ds:0xc002ec9c,eax
c0001212:	a3 a0 ec 02 c0       	mov    ds:0xc002eca0,eax
c0001217:	a3 90 ec 02 c0       	mov    ds:0xc002ec90,eax
c000121c:	29 f2                	sub    edx,esi
c000121e:	c7 40 08 94 ec 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ec94
c0001225:	c7 40 0c 94 ec 02 c0 	mov    DWORD PTR [eax+0xc],0xc002ec94
c000122c:	83 ce 01             	or     esi,0x1
c000122f:	89 d1                	mov    ecx,edx
c0001231:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001234:	83 c9 01             	or     ecx,0x1
c0001237:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000123a:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000123d:	eb 15                	jmp    c0001254 <dlmalloc+0x149>
c000123f:	a3 a0 ec 02 c0       	mov    ds:0xc002eca0,eax
c0001244:	39 fe                	cmp    esi,edi
c0001246:	c7 40 08 94 ec 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ec94
c000124d:	75 0d                	jne    c000125c <dlmalloc+0x151>
c000124f:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001254:	8d 43 08             	lea    eax,[ebx+0x8]
c0001257:	e9 35 02 00 00       	jmp    c0001491 <dlmalloc+0x386>
c000125c:	89 f8                	mov    eax,edi
c000125e:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001264:	77 19                	ja     c000127f <dlmalloc+0x174>
c0001266:	c1 e8 03             	shr    eax,0x3
c0001269:	8d 14 00             	lea    edx,[eax+eax*1]
c000126c:	83 c2 0d             	add    edx,0xd
c000126f:	8d 2c 95 58 ec 02 c0 	lea    ebp,[edx*4-0x3ffd13a8]
c0001276:	8b 14 95 60 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13a0]
c000127d:	eb 46                	jmp    c00012c5 <dlmalloc+0x1ba>
c000127f:	e8 c1 f9 ff ff       	call   c0000c45 <largebin_index>
c0001284:	8d 14 00             	lea    edx,[eax+eax*1]
c0001287:	83 c2 0d             	add    edx,0xd
c000128a:	8d 0c 95 60 ec 02 c0 	lea    ecx,[edx*4-0x3ffd13a0]
c0001291:	8b 14 95 60 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13a0]
c0001298:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000129b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000129f:	89 d5                	mov    ebp,edx
c00012a1:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012a5:	74 1e                	je     c00012c5 <dlmalloc+0x1ba>
c00012a7:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012aa:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012ad:	77 12                	ja     c00012c1 <dlmalloc+0x1b6>
c00012af:	83 cf 01             	or     edi,0x1
c00012b2:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012b5:	76 05                	jbe    c00012bc <dlmalloc+0x1b1>
c00012b7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012ba:	eb f6                	jmp    c00012b2 <dlmalloc+0x1a7>
c00012bc:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012bf:	eb 04                	jmp    c00012c5 <dlmalloc+0x1ba>
c00012c1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012c5:	89 c7                	mov    edi,eax
c00012c7:	88 c1                	mov    cl,al
c00012c9:	c1 ff 05             	sar    edi,0x5
c00012cc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012d0:	bf 01 00 00 00       	mov    edi,0x1
c00012d5:	d3 e7                	shl    edi,cl
c00012d7:	89 f8                	mov    eax,edi
c00012d9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012dd:	09 04 bd 94 ef 02 c0 	or     DWORD PTR [edi*4-0x3ffd106c],eax
c00012e4:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012e7:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ea:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012ed:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012f0:	e9 db fe ff ff       	jmp    c00011d0 <dlmalloc+0xc5>
c00012f5:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012fb:	76 78                	jbe    c0001375 <dlmalloc+0x26a>
c00012fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001301:	8d 04 c5 94 ec 02 c0 	lea    eax,[eax*8-0x3ffd136c]
c0001308:	8d 48 f8             	lea    ecx,[eax-0x8]
c000130b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000130e:	39 ca                	cmp    edx,ecx
c0001310:	74 63                	je     c0001375 <dlmalloc+0x26a>
c0001312:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001315:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001318:	83 e3 fc             	and    ebx,0xfffffffc
c000131b:	39 de                	cmp    esi,ebx
c000131d:	77 52                	ja     c0001371 <dlmalloc+0x266>
c000131f:	89 df                	mov    edi,ebx
c0001321:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001324:	29 f7                	sub    edi,esi
c0001326:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001329:	01 d3                	add    ebx,edx
c000132b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000132e:	83 ff 0f             	cmp    edi,0xf
c0001331:	8d 42 08             	lea    eax,[edx+0x8]
c0001334:	77 09                	ja     c000133f <dlmalloc+0x234>
c0001336:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000133a:	e9 52 01 00 00       	jmp    c0001491 <dlmalloc+0x386>
c000133f:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001342:	83 ce 01             	or     esi,0x1
c0001345:	89 0d 9c ec 02 c0    	mov    DWORD PTR ds:0xc002ec9c,ecx
c000134b:	89 0d a0 ec 02 c0    	mov    DWORD PTR ds:0xc002eca0,ecx
c0001351:	c7 41 08 94 ec 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002ec94
c0001358:	c7 41 0c 94 ec 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002ec94
c000135f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001362:	89 fa                	mov    edx,edi
c0001364:	83 ca 01             	or     edx,0x1
c0001367:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000136a:	89 3b                	mov    DWORD PTR [ebx],edi
c000136c:	e9 20 01 00 00       	jmp    c0001491 <dlmalloc+0x386>
c0001371:	89 c2                	mov    edx,eax
c0001373:	eb 99                	jmp    c000130e <dlmalloc+0x203>
c0001375:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001379:	b8 01 00 00 00       	mov    eax,0x1
c000137e:	41                   	inc    ecx
c000137f:	89 cb                	mov    ebx,ecx
c0001381:	8d 14 cd 8c ec 02 c0 	lea    edx,[ecx*8-0x3ffd1374]
c0001388:	c1 eb 05             	shr    ebx,0x5
c000138b:	d3 e0                	shl    eax,cl
c000138d:	8b 3c 9d 94 ef 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd106c]
c0001394:	39 f8                	cmp    eax,edi
c0001396:	77 04                	ja     c000139c <dlmalloc+0x291>
c0001398:	85 c0                	test   eax,eax
c000139a:	75 26                	jne    c00013c2 <dlmalloc+0x2b7>
c000139c:	43                   	inc    ebx
c000139d:	83 fb 02             	cmp    ebx,0x2
c00013a0:	0f 87 a6 00 00 00    	ja     c000144c <dlmalloc+0x341>
c00013a6:	8b 3c 9d 94 ef 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd106c]
c00013ad:	85 ff                	test   edi,edi
c00013af:	74 eb                	je     c000139c <dlmalloc+0x291>
c00013b1:	89 d8                	mov    eax,ebx
c00013b3:	c1 e0 06             	shl    eax,0x6
c00013b6:	8d 14 85 8c ec 02 c0 	lea    edx,[eax*4-0x3ffd1374]
c00013bd:	b8 01 00 00 00       	mov    eax,0x1
c00013c2:	85 f8                	test   eax,edi
c00013c4:	75 07                	jne    c00013cd <dlmalloc+0x2c2>
c00013c6:	83 c2 08             	add    edx,0x8
c00013c9:	01 c0                	add    eax,eax
c00013cb:	eb f5                	jmp    c00013c2 <dlmalloc+0x2b7>
c00013cd:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013d0:	39 ca                	cmp    edx,ecx
c00013d2:	75 14                	jne    c00013e8 <dlmalloc+0x2dd>
c00013d4:	89 c1                	mov    ecx,eax
c00013d6:	83 c2 08             	add    edx,0x8
c00013d9:	f7 d1                	not    ecx
c00013db:	01 c0                	add    eax,eax
c00013dd:	21 cf                	and    edi,ecx
c00013df:	89 3c 9d 94 ef 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd106c],edi
c00013e6:	eb ac                	jmp    c0001394 <dlmalloc+0x289>
c00013e8:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013eb:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013ee:	83 e0 fc             	and    eax,0xfffffffc
c00013f1:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013f4:	89 c3                	mov    ebx,eax
c00013f6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013f9:	29 f3                	sub    ebx,esi
c00013fb:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013fe:	83 fb 0f             	cmp    ebx,0xf
c0001401:	8d 41 08             	lea    eax,[ecx+0x8]
c0001404:	77 09                	ja     c000140f <dlmalloc+0x304>
c0001406:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000140a:	e9 82 00 00 00       	jmp    c0001491 <dlmalloc+0x386>
c000140f:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001412:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001418:	89 3d 9c ec 02 c0    	mov    DWORD PTR ds:0xc002ec9c,edi
c000141e:	89 3d a0 ec 02 c0    	mov    DWORD PTR ds:0xc002eca0,edi
c0001424:	c7 47 08 94 ec 02 c0 	mov    DWORD PTR [edi+0x8],0xc002ec94
c000142b:	c7 47 0c 94 ec 02 c0 	mov    DWORD PTR [edi+0xc],0xc002ec94
c0001432:	77 06                	ja     c000143a <dlmalloc+0x32f>
c0001434:	89 3d 90 ec 02 c0    	mov    DWORD PTR ds:0xc002ec90,edi
c000143a:	83 ce 01             	or     esi,0x1
c000143d:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001440:	89 d9                	mov    ecx,ebx
c0001442:	83 c9 01             	or     ecx,0x1
c0001445:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001448:	89 1a                	mov    DWORD PTR [edx],ebx
c000144a:	eb 45                	jmp    c0001491 <dlmalloc+0x386>
c000144c:	a1 8c ec 02 c0       	mov    eax,ds:0xc002ec8c
c0001451:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001454:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001457:	83 e2 fc             	and    edx,0xfffffffc
c000145a:	39 d1                	cmp    ecx,edx
c000145c:	77 1e                	ja     c000147c <dlmalloc+0x371>
c000145e:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001461:	89 f3                	mov    ebx,esi
c0001463:	89 0d 8c ec 02 c0    	mov    DWORD PTR ds:0xc002ec8c,ecx
c0001469:	83 cb 01             	or     ebx,0x1
c000146c:	29 f2                	sub    edx,esi
c000146e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001471:	83 ca 01             	or     edx,0x1
c0001474:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001477:	e9 2d fd ff ff       	jmp    c00011a9 <dlmalloc+0x9e>
c000147c:	83 c4 1c             	add    esp,0x1c
c000147f:	89 f0                	mov    eax,esi
c0001481:	5b                   	pop    ebx
c0001482:	ba 60 ec 02 c0       	mov    edx,0xc002ec60
c0001487:	5e                   	pop    esi
c0001488:	5f                   	pop    edi
c0001489:	5d                   	pop    ebp
c000148a:	e9 16 fa ff ff       	jmp    c0000ea5 <sYSMALLOc>
c000148f:	31 c0                	xor    eax,eax
c0001491:	83 c4 1c             	add    esp,0x1c
c0001494:	5b                   	pop    ebx
c0001495:	5e                   	pop    esi
c0001496:	5f                   	pop    edi
c0001497:	5d                   	pop    ebp
c0001498:	c3                   	ret    

c0001499 <iALLOc>:
c0001499:	55                   	push   ebp
c000149a:	89 c5                	mov    ebp,eax
c000149c:	57                   	push   edi
c000149d:	56                   	push   esi
c000149e:	53                   	push   ebx
c000149f:	83 ec 2c             	sub    esp,0x2c
c00014a2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014a6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ae:	83 3d 60 ec 02 c0 00 	cmp    DWORD PTR ds:0xc002ec60,0x0
c00014b5:	75 12                	jne    c00014c9 <iALLOc+0x30>
c00014b7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014bb:	b8 60 ec 02 c0       	mov    eax,0xc002ec60
c00014c0:	e8 04 f8 ff ff       	call   c0000cc9 <malloc_consolidate>
c00014c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014c9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014ce:	74 12                	je     c00014e2 <iALLOc+0x49>
c00014d0:	85 ed                	test   ebp,ebp
c00014d2:	0f 84 64 01 00 00    	je     c000163c <iALLOc+0x1a3>
c00014d8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014e0:	eb 33                	jmp    c0001515 <iALLOc+0x7c>
c00014e2:	85 ed                	test   ebp,ebp
c00014e4:	75 14                	jne    c00014fa <iALLOc+0x61>
c00014e6:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014ee:	83 c4 2c             	add    esp,0x2c
c00014f1:	5b                   	pop    ebx
c00014f2:	5e                   	pop    esi
c00014f3:	5f                   	pop    edi
c00014f4:	5d                   	pop    ebp
c00014f5:	e9 11 fc ff ff       	jmp    c000110b <dlmalloc>
c00014fa:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001501:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001509:	83 f8 0f             	cmp    eax,0xf
c000150c:	76 07                	jbe    c0001515 <iALLOc+0x7c>
c000150e:	83 e0 f8             	and    eax,0xfffffff8
c0001511:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001515:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000151a:	75 09                	jne    c0001525 <iALLOc+0x8c>
c000151c:	89 d0                	mov    eax,edx
c000151e:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001521:	31 f6                	xor    esi,esi
c0001523:	eb 3b                	jmp    c0001560 <iALLOc+0xc7>
c0001525:	8b 02                	mov    eax,DWORD PTR [edx]
c0001527:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000152f:	83 c0 0b             	add    eax,0xb
c0001532:	83 f8 0f             	cmp    eax,0xf
c0001535:	76 07                	jbe    c000153e <iALLOc+0xa5>
c0001537:	83 e0 f8             	and    eax,0xfffffff8
c000153a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000153e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001542:	0f af f5             	imul   esi,ebp
c0001545:	eb 25                	jmp    c000156c <iALLOc+0xd3>
c0001547:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001549:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000154c:	bb 10 00 00 00       	mov    ebx,0x10
c0001551:	83 f9 0f             	cmp    ecx,0xf
c0001554:	76 05                	jbe    c000155b <iALLOc+0xc2>
c0001556:	83 e1 f8             	and    ecx,0xfffffff8
c0001559:	89 cb                	mov    ebx,ecx
c000155b:	01 de                	add    esi,ebx
c000155d:	83 c0 04             	add    eax,0x4
c0001560:	39 c7                	cmp    edi,eax
c0001562:	75 e3                	jne    c0001547 <iALLOc+0xae>
c0001564:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000156c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001570:	8b 1d b4 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efb4
c0001576:	83 ec 0c             	sub    esp,0xc
c0001579:	c7 05 b4 ef 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002efb4,0x0
c0001583:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001587:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000158b:	50                   	push   eax
c000158c:	e8 7a fb ff ff       	call   c000110b <dlmalloc>
c0001591:	83 c4 10             	add    esp,0x10
c0001594:	89 1d b4 ef 02 c0    	mov    DWORD PTR ds:0xc002efb4,ebx
c000159a:	85 c0                	test   eax,eax
c000159c:	0f 84 92 00 00 00    	je     c0001634 <iALLOc+0x19b>
c00015a2:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015a5:	8d 78 f8             	lea    edi,[eax-0x8]
c00015a8:	83 e3 fc             	and    ebx,0xfffffffc
c00015ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015af:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015b4:	74 1e                	je     c00015d4 <iALLOc+0x13b>
c00015b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015ba:	89 d9                	mov    ecx,ebx
c00015bc:	52                   	push   edx
c00015bd:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015c1:	83 e9 04             	sub    ecx,0x4
c00015c4:	51                   	push   ecx
c00015c5:	6a 00                	push   0x0
c00015c7:	50                   	push   eax
c00015c8:	e8 9f f1 ff ff       	call   c000076c <memset>
c00015cd:	83 c4 10             	add    esp,0x10
c00015d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015d4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015d9:	75 14                	jne    c00015ef <iALLOc+0x156>
c00015db:	8d 04 37             	lea    eax,[edi+esi*1]
c00015de:	29 f3                	sub    ebx,esi
c00015e0:	8d 48 08             	lea    ecx,[eax+0x8]
c00015e3:	83 cb 01             	or     ebx,0x1
c00015e6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ea:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015ed:	89 f3                	mov    ebx,esi
c00015ef:	31 c0                	xor    eax,eax
c00015f1:	4d                   	dec    ebp
c00015f2:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015f5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015f9:	39 c5                	cmp    ebp,eax
c00015fb:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015fe:	74 2c                	je     c000162c <iALLOc+0x193>
c0001600:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001604:	85 c9                	test   ecx,ecx
c0001606:	75 15                	jne    c000161d <iALLOc+0x184>
c0001608:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000160b:	8d 71 0b             	lea    esi,[ecx+0xb]
c000160e:	b9 10 00 00 00       	mov    ecx,0x10
c0001613:	83 fe 0f             	cmp    esi,0xf
c0001616:	76 05                	jbe    c000161d <iALLOc+0x184>
c0001618:	83 e6 f8             	and    esi,0xfffffff8
c000161b:	89 f1                	mov    ecx,esi
c000161d:	89 ce                	mov    esi,ecx
c000161f:	29 cb                	sub    ebx,ecx
c0001621:	83 ce 01             	or     esi,0x1
c0001624:	40                   	inc    eax
c0001625:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001628:	01 cf                	add    edi,ecx
c000162a:	eb c6                	jmp    c00015f2 <iALLOc+0x159>
c000162c:	83 cb 01             	or     ebx,0x1
c000162f:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001632:	eb 08                	jmp    c000163c <iALLOc+0x1a3>
c0001634:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000163c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001640:	83 c4 2c             	add    esp,0x2c
c0001643:	5b                   	pop    ebx
c0001644:	5e                   	pop    esi
c0001645:	5f                   	pop    edi
c0001646:	5d                   	pop    ebp
c0001647:	c3                   	ret    

c0001648 <dlrealloc>:
c0001648:	55                   	push   ebp
c0001649:	57                   	push   edi
c000164a:	56                   	push   esi
c000164b:	53                   	push   ebx
c000164c:	83 ec 1c             	sub    esp,0x1c
c000164f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001653:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001657:	85 db                	test   ebx,ebx
c0001659:	75 10                	jne    c000166b <dlrealloc+0x23>
c000165b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000165f:	83 c4 1c             	add    esp,0x1c
c0001662:	5b                   	pop    ebx
c0001663:	5e                   	pop    esi
c0001664:	5f                   	pop    edi
c0001665:	5d                   	pop    ebp
c0001666:	e9 a0 fa ff ff       	jmp    c000110b <dlmalloc>
c000166b:	83 f8 df             	cmp    eax,0xffffffdf
c000166e:	76 07                	jbe    c0001677 <dlrealloc+0x2f>
c0001670:	31 db                	xor    ebx,ebx
c0001672:	e9 6a 01 00 00       	jmp    c00017e1 <dlrealloc+0x199>
c0001677:	83 c0 0b             	add    eax,0xb
c000167a:	bd 10 00 00 00       	mov    ebp,0x10
c000167f:	83 f8 0f             	cmp    eax,0xf
c0001682:	76 05                	jbe    c0001689 <dlrealloc+0x41>
c0001684:	83 e0 f8             	and    eax,0xfffffff8
c0001687:	89 c5                	mov    ebp,eax
c0001689:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000168c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000168f:	89 c6                	mov    esi,eax
c0001691:	83 e6 fc             	and    esi,0xfffffffc
c0001694:	a8 02                	test   al,0x2
c0001696:	75 d8                	jne    c0001670 <dlrealloc+0x28>
c0001698:	39 f5                	cmp    ebp,esi
c000169a:	0f 86 04 01 00 00    	jbe    c00017a4 <dlrealloc+0x15c>
c00016a0:	8d 14 37             	lea    edx,[edi+esi*1]
c00016a3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016a6:	39 15 8c ec 02 c0    	cmp    DWORD PTR ds:0xc002ec8c,edx
c00016ac:	75 33                	jne    c00016e1 <dlrealloc+0x99>
c00016ae:	83 e1 fc             	and    ecx,0xfffffffc
c00016b1:	01 f1                	add    ecx,esi
c00016b3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016b7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00016ba:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016be:	77 49                	ja     c0001709 <dlrealloc+0xc1>
c00016c0:	01 ef                	add    edi,ebp
c00016c2:	83 e0 01             	and    eax,0x1
c00016c5:	09 e8                	or     eax,ebp
c00016c7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ca:	89 3d 8c ec 02 c0    	mov    DWORD PTR ds:0xc002ec8c,edi
c00016d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016d4:	29 e8                	sub    eax,ebp
c00016d6:	83 c8 01             	or     eax,0x1
c00016d9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016dc:	e9 00 01 00 00       	jmp    c00017e1 <dlrealloc+0x199>
c00016e1:	89 c8                	mov    eax,ecx
c00016e3:	83 e0 fe             	and    eax,0xfffffffe
c00016e6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016eb:	75 1c                	jne    c0001709 <dlrealloc+0xc1>
c00016ed:	83 e1 fc             	and    ecx,0xfffffffc
c00016f0:	01 f1                	add    ecx,esi
c00016f2:	39 cd                	cmp    ebp,ecx
c00016f4:	77 13                	ja     c0001709 <dlrealloc+0xc1>
c00016f6:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016fc:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016ff:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001702:	89 ce                	mov    esi,ecx
c0001704:	e9 9b 00 00 00       	jmp    c00017a4 <dlrealloc+0x15c>
c0001709:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000170d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001710:	83 ec 0c             	sub    esp,0xc
c0001713:	50                   	push   eax
c0001714:	e8 f2 f9 ff ff       	call   c000110b <dlmalloc>
c0001719:	83 c4 10             	add    esp,0x10
c000171c:	85 c0                	test   eax,eax
c000171e:	0f 84 4c ff ff ff    	je     c0001670 <dlrealloc+0x28>
c0001724:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001727:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000172b:	39 ca                	cmp    edx,ecx
c000172d:	75 0a                	jne    c0001739 <dlrealloc+0xf1>
c000172f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001732:	83 e0 fc             	and    eax,0xfffffffc
c0001735:	01 c6                	add    esi,eax
c0001737:	eb 6b                	jmp    c00017a4 <dlrealloc+0x15c>
c0001739:	8d 4e fc             	lea    ecx,[esi-0x4]
c000173c:	83 f9 27             	cmp    ecx,0x27
c000173f:	76 08                	jbe    c0001749 <dlrealloc+0x101>
c0001741:	89 de                	mov    esi,ebx
c0001743:	89 c7                	mov    edi,eax
c0001745:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001747:	eb 43                	jmp    c000178c <dlrealloc+0x144>
c0001749:	8b 13                	mov    edx,DWORD PTR [ebx]
c000174b:	83 f9 13             	cmp    ecx,0x13
c000174e:	89 10                	mov    DWORD PTR [eax],edx
c0001750:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001753:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001756:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001759:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000175c:	76 2e                	jbe    c000178c <dlrealloc+0x144>
c000175e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001761:	83 f9 1b             	cmp    ecx,0x1b
c0001764:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001767:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000176a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000176d:	76 1d                	jbe    c000178c <dlrealloc+0x144>
c000176f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001772:	83 f9 23             	cmp    ecx,0x23
c0001775:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001778:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000177b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000177e:	76 0c                	jbe    c000178c <dlrealloc+0x144>
c0001780:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001783:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001786:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001789:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000178c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	53                   	push   ebx
c0001794:	e8 17 f6 ff ff       	call   c0000db0 <dlfree>
c0001799:	83 c4 10             	add    esp,0x10
c000179c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00017a0:	89 c3                	mov    ebx,eax
c00017a2:	eb 3d                	jmp    c00017e1 <dlrealloc+0x199>
c00017a4:	89 f2                	mov    edx,esi
c00017a6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017a9:	29 ea                	sub    edx,ebp
c00017ab:	83 e1 01             	and    ecx,0x1
c00017ae:	8d 04 37             	lea    eax,[edi+esi*1]
c00017b1:	83 fa 0f             	cmp    edx,0xf
c00017b4:	77 0b                	ja     c00017c1 <dlrealloc+0x179>
c00017b6:	09 ce                	or     esi,ecx
c00017b8:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017bb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bf:	eb 20                	jmp    c00017e1 <dlrealloc+0x199>
c00017c1:	01 ef                	add    edi,ebp
c00017c3:	83 ec 0c             	sub    esp,0xc
c00017c6:	09 cd                	or     ebp,ecx
c00017c8:	83 ca 01             	or     edx,0x1
c00017cb:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017ce:	83 c7 08             	add    edi,0x8
c00017d1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017d4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017d8:	57                   	push   edi
c00017d9:	e8 d2 f5 ff ff       	call   c0000db0 <dlfree>
c00017de:	83 c4 10             	add    esp,0x10
c00017e1:	83 c4 1c             	add    esp,0x1c
c00017e4:	89 d8                	mov    eax,ebx
c00017e6:	5b                   	pop    ebx
c00017e7:	5e                   	pop    esi
c00017e8:	5f                   	pop    edi
c00017e9:	5d                   	pop    ebp
c00017ea:	c3                   	ret    

c00017eb <dlmemalign>:
c00017eb:	55                   	push   ebp
c00017ec:	57                   	push   edi
c00017ed:	56                   	push   esi
c00017ee:	53                   	push   ebx
c00017ef:	83 ec 0c             	sub    esp,0xc
c00017f2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017f6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017fa:	83 fa 08             	cmp    edx,0x8
c00017fd:	77 10                	ja     c000180f <dlmemalign+0x24>
c00017ff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001803:	83 c4 0c             	add    esp,0xc
c0001806:	5b                   	pop    ebx
c0001807:	5e                   	pop    esi
c0001808:	5f                   	pop    edi
c0001809:	5d                   	pop    ebp
c000180a:	e9 fc f8 ff ff       	jmp    c000110b <dlmalloc>
c000180f:	bf 10 00 00 00       	mov    edi,0x10
c0001814:	83 fa 0f             	cmp    edx,0xf
c0001817:	76 13                	jbe    c000182c <dlmemalign+0x41>
c0001819:	8d 4a ff             	lea    ecx,[edx-0x1]
c000181c:	85 d1                	test   ecx,edx
c000181e:	75 04                	jne    c0001824 <dlmemalign+0x39>
c0001820:	89 d7                	mov    edi,edx
c0001822:	eb 08                	jmp    c000182c <dlmemalign+0x41>
c0001824:	39 d7                	cmp    edi,edx
c0001826:	73 04                	jae    c000182c <dlmemalign+0x41>
c0001828:	01 ff                	add    edi,edi
c000182a:	eb f8                	jmp    c0001824 <dlmemalign+0x39>
c000182c:	83 f8 df             	cmp    eax,0xffffffdf
c000182f:	76 07                	jbe    c0001838 <dlmemalign+0x4d>
c0001831:	31 c0                	xor    eax,eax
c0001833:	e9 ce 00 00 00       	jmp    c0001906 <dlmemalign+0x11b>
c0001838:	83 c0 0b             	add    eax,0xb
c000183b:	bd 10 00 00 00       	mov    ebp,0x10
c0001840:	83 f8 0f             	cmp    eax,0xf
c0001843:	76 05                	jbe    c000184a <dlmemalign+0x5f>
c0001845:	83 e0 f8             	and    eax,0xfffffff8
c0001848:	89 c5                	mov    ebp,eax
c000184a:	83 ec 0c             	sub    esp,0xc
c000184d:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001851:	50                   	push   eax
c0001852:	e8 b4 f8 ff ff       	call   c000110b <dlmalloc>
c0001857:	83 c4 10             	add    esp,0x10
c000185a:	89 c1                	mov    ecx,eax
c000185c:	85 c0                	test   eax,eax
c000185e:	74 d1                	je     c0001831 <dlmemalign+0x46>
c0001860:	31 d2                	xor    edx,edx
c0001862:	8d 70 f8             	lea    esi,[eax-0x8]
c0001865:	f7 f7                	div    edi
c0001867:	85 d2                	test   edx,edx
c0001869:	74 62                	je     c00018cd <dlmemalign+0xe2>
c000186b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000186f:	89 f8                	mov    eax,edi
c0001871:	f7 d8                	neg    eax
c0001873:	21 c3                	and    ebx,eax
c0001875:	83 eb 08             	sub    ebx,0x8
c0001878:	89 d8                	mov    eax,ebx
c000187a:	29 f0                	sub    eax,esi
c000187c:	83 f8 0f             	cmp    eax,0xf
c000187f:	77 02                	ja     c0001883 <dlmemalign+0x98>
c0001881:	01 fb                	add    ebx,edi
c0001883:	89 d8                	mov    eax,ebx
c0001885:	29 f0                	sub    eax,esi
c0001887:	89 c6                	mov    esi,eax
c0001889:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000188c:	89 c2                	mov    edx,eax
c000188e:	83 e2 fc             	and    edx,0xfffffffc
c0001891:	29 f2                	sub    edx,esi
c0001893:	a8 02                	test   al,0x2
c0001895:	74 10                	je     c00018a7 <dlmemalign+0xbc>
c0001897:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000189a:	83 ca 02             	or     edx,0x2
c000189d:	8d 43 08             	lea    eax,[ebx+0x8]
c00018a0:	89 33                	mov    DWORD PTR [ebx],esi
c00018a2:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018a5:	eb 5f                	jmp    c0001906 <dlmemalign+0x11b>
c00018a7:	83 ec 0c             	sub    esp,0xc
c00018aa:	89 d0                	mov    eax,edx
c00018ac:	83 c8 01             	or     eax,0x1
c00018af:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018b2:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018b7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018ba:	83 e0 01             	and    eax,0x1
c00018bd:	09 f0                	or     eax,esi
c00018bf:	89 de                	mov    esi,ebx
c00018c1:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018c4:	51                   	push   ecx
c00018c5:	e8 e6 f4 ff ff       	call   c0000db0 <dlfree>
c00018ca:	83 c4 10             	add    esp,0x10
c00018cd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d0:	a8 02                	test   al,0x2
c00018d2:	75 2f                	jne    c0001903 <dlmemalign+0x118>
c00018d4:	83 e0 fc             	and    eax,0xfffffffc
c00018d7:	8d 55 10             	lea    edx,[ebp+0x10]
c00018da:	39 c2                	cmp    edx,eax
c00018dc:	73 25                	jae    c0001903 <dlmemalign+0x118>
c00018de:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018e1:	83 ec 0c             	sub    esp,0xc
c00018e4:	29 e8                	sub    eax,ebp
c00018e6:	83 c2 08             	add    edx,0x8
c00018e9:	83 c8 01             	or     eax,0x1
c00018ec:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018ef:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018f2:	83 e0 01             	and    eax,0x1
c00018f5:	09 c5                	or     ebp,eax
c00018f7:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018fa:	52                   	push   edx
c00018fb:	e8 b0 f4 ff ff       	call   c0000db0 <dlfree>
c0001900:	83 c4 10             	add    esp,0x10
c0001903:	8d 46 08             	lea    eax,[esi+0x8]
c0001906:	83 c4 0c             	add    esp,0xc
c0001909:	5b                   	pop    ebx
c000190a:	5e                   	pop    esi
c000190b:	5f                   	pop    edi
c000190c:	5d                   	pop    ebp
c000190d:	c3                   	ret    

c000190e <dlcalloc>:
c000190e:	53                   	push   ebx
c000190f:	83 ec 14             	sub    esp,0x14
c0001912:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001916:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000191b:	50                   	push   eax
c000191c:	e8 ea f7 ff ff       	call   c000110b <dlmalloc>
c0001921:	83 c4 10             	add    esp,0x10
c0001924:	89 c3                	mov    ebx,eax
c0001926:	85 c0                	test   eax,eax
c0001928:	74 77                	je     c00019a1 <dlcalloc+0x93>
c000192a:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000192d:	89 d0                	mov    eax,edx
c000192f:	83 e0 fc             	and    eax,0xfffffffc
c0001932:	80 e2 02             	and    dl,0x2
c0001935:	75 5a                	jne    c0001991 <dlcalloc+0x83>
c0001937:	83 e8 04             	sub    eax,0x4
c000193a:	83 f8 27             	cmp    eax,0x27
c000193d:	76 03                	jbe    c0001942 <dlcalloc+0x34>
c000193f:	51                   	push   ecx
c0001940:	eb 53                	jmp    c0001995 <dlcalloc+0x87>
c0001942:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001948:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000194f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001956:	83 f8 13             	cmp    eax,0x13
c0001959:	76 46                	jbe    c00019a1 <dlcalloc+0x93>
c000195b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001962:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001969:	83 f8 1b             	cmp    eax,0x1b
c000196c:	76 33                	jbe    c00019a1 <dlcalloc+0x93>
c000196e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001975:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000197c:	83 f8 23             	cmp    eax,0x23
c000197f:	76 20                	jbe    c00019a1 <dlcalloc+0x93>
c0001981:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001988:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000198f:	eb 10                	jmp    c00019a1 <dlcalloc+0x93>
c0001991:	83 e8 08             	sub    eax,0x8
c0001994:	52                   	push   edx
c0001995:	50                   	push   eax
c0001996:	6a 00                	push   0x0
c0001998:	53                   	push   ebx
c0001999:	e8 ce ed ff ff       	call   c000076c <memset>
c000199e:	83 c4 10             	add    esp,0x10
c00019a1:	89 d8                	mov    eax,ebx
c00019a3:	83 c4 08             	add    esp,0x8
c00019a6:	5b                   	pop    ebx
c00019a7:	c3                   	ret    

c00019a8 <dlcfree>:
c00019a8:	e9 03 f4 ff ff       	jmp    c0000db0 <dlfree>

c00019ad <dlindependent_calloc>:
c00019ad:	83 ec 28             	sub    esp,0x28
c00019b0:	b9 03 00 00 00       	mov    ecx,0x3
c00019b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019c9:	e8 cb fa ff ff       	call   c0001499 <iALLOc>
c00019ce:	83 c4 2c             	add    esp,0x2c
c00019d1:	c3                   	ret    

c00019d2 <dlindependent_comalloc>:
c00019d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019da:	31 c9                	xor    ecx,ecx
c00019dc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019e4:	e9 b0 fa ff ff       	jmp    c0001499 <iALLOc>

c00019e9 <dlvalloc>:
c00019e9:	83 ec 0c             	sub    esp,0xc
c00019ec:	83 3d 60 ec 02 c0 00 	cmp    DWORD PTR ds:0xc002ec60,0x0
c00019f3:	75 0a                	jne    c00019ff <dlvalloc+0x16>
c00019f5:	b8 60 ec 02 c0       	mov    eax,0xc002ec60
c00019fa:	e8 ca f2 ff ff       	call   c0000cc9 <malloc_consolidate>
c00019ff:	50                   	push   eax
c0001a00:	50                   	push   eax
c0001a01:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a05:	ff 35 bc ef 02 c0    	push   DWORD PTR ds:0xc002efbc
c0001a0b:	e8 db fd ff ff       	call   c00017eb <dlmemalign>
c0001a10:	83 c4 1c             	add    esp,0x1c
c0001a13:	c3                   	ret    

c0001a14 <dlpvalloc>:
c0001a14:	83 ec 0c             	sub    esp,0xc
c0001a17:	83 3d 60 ec 02 c0 00 	cmp    DWORD PTR ds:0xc002ec60,0x0
c0001a1e:	75 0a                	jne    c0001a2a <dlpvalloc+0x16>
c0001a20:	b8 60 ec 02 c0       	mov    eax,0xc002ec60
c0001a25:	e8 9f f2 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001a2a:	a1 bc ef 02 c0       	mov    eax,ds:0xc002efbc
c0001a2f:	89 c1                	mov    ecx,eax
c0001a31:	52                   	push   edx
c0001a32:	f7 d9                	neg    ecx
c0001a34:	52                   	push   edx
c0001a35:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a39:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a3d:	21 ca                	and    edx,ecx
c0001a3f:	52                   	push   edx
c0001a40:	50                   	push   eax
c0001a41:	e8 a5 fd ff ff       	call   c00017eb <dlmemalign>
c0001a46:	83 c4 1c             	add    esp,0x1c
c0001a49:	c3                   	ret    

c0001a4a <dlmalloc_trim>:
c0001a4a:	b8 60 ec 02 c0       	mov    eax,0xc002ec60
c0001a4f:	e8 75 f2 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001a54:	31 c0                	xor    eax,eax
c0001a56:	c3                   	ret    

c0001a57 <dlmalloc_usable_size>:
c0001a57:	53                   	push   ebx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a5e:	85 c9                	test   ecx,ecx
c0001a60:	74 24                	je     c0001a86 <dlmalloc_usable_size+0x2f>
c0001a62:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a65:	f6 c2 02             	test   dl,0x2
c0001a68:	74 08                	je     c0001a72 <dlmalloc_usable_size+0x1b>
c0001a6a:	83 e2 fc             	and    edx,0xfffffffc
c0001a6d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a70:	eb 14                	jmp    c0001a86 <dlmalloc_usable_size+0x2f>
c0001a72:	89 d3                	mov    ebx,edx
c0001a74:	31 c0                	xor    eax,eax
c0001a76:	83 e3 fe             	and    ebx,0xfffffffe
c0001a79:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a7e:	74 06                	je     c0001a86 <dlmalloc_usable_size+0x2f>
c0001a80:	83 e2 fc             	and    edx,0xfffffffc
c0001a83:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a86:	5b                   	pop    ebx
c0001a87:	c3                   	ret    

c0001a88 <dlmallinfo>:
c0001a88:	55                   	push   ebp
c0001a89:	57                   	push   edi
c0001a8a:	56                   	push   esi
c0001a8b:	53                   	push   ebx
c0001a8c:	83 ec 08             	sub    esp,0x8
c0001a8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a93:	83 3d 8c ec 02 c0 00 	cmp    DWORD PTR ds:0xc002ec8c,0x0
c0001a9a:	75 0a                	jne    c0001aa6 <dlmallinfo+0x1e>
c0001a9c:	b8 60 ec 02 c0       	mov    eax,0xc002ec60
c0001aa1:	e8 23 f2 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001aa6:	a1 8c ec 02 c0       	mov    eax,ds:0xc002ec8c
c0001aab:	31 ed                	xor    ebp,ebp
c0001aad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ab0:	31 c9                	xor    ecx,ecx
c0001ab2:	83 e0 fc             	and    eax,0xfffffffc
c0001ab5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ab9:	31 c0                	xor    eax,eax
c0001abb:	8b 14 85 64 ec 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd139c]
c0001ac2:	85 d2                	test   edx,edx
c0001ac4:	74 0e                	je     c0001ad4 <dlmallinfo+0x4c>
c0001ac6:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ac9:	45                   	inc    ebp
c0001aca:	83 e6 fc             	and    esi,0xfffffffc
c0001acd:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ad0:	01 f1                	add    ecx,esi
c0001ad2:	eb ee                	jmp    c0001ac2 <dlmallinfo+0x3a>
c0001ad4:	40                   	inc    eax
c0001ad5:	83 f8 0a             	cmp    eax,0xa
c0001ad8:	75 e1                	jne    c0001abb <dlmallinfo+0x33>
c0001ada:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ade:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ae5:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ae8:	b8 94 ec 02 c0       	mov    eax,0xc002ec94
c0001aed:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001af0:	39 f0                	cmp    eax,esi
c0001af2:	74 10                	je     c0001b04 <dlmallinfo+0x7c>
c0001af4:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001af7:	ff 04 24             	inc    DWORD PTR [esp]
c0001afa:	83 e7 fc             	and    edi,0xfffffffc
c0001afd:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b00:	01 fa                	add    edx,edi
c0001b02:	eb ec                	jmp    c0001af0 <dlmallinfo+0x68>
c0001b04:	83 c0 08             	add    eax,0x8
c0001b07:	3d 8c ef 02 c0       	cmp    eax,0xc002ef8c
c0001b0c:	75 df                	jne    c0001aed <dlmallinfo+0x65>
c0001b0e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b11:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b14:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b17:	a1 c8 ef 02 c0       	mov    eax,ds:0xc002efc8
c0001b1c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b1f:	89 03                	mov    DWORD PTR [ebx],eax
c0001b21:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b24:	8b 35 b0 ef 02 c0    	mov    esi,DWORD PTR ds:0xc002efb0
c0001b2a:	29 d0                	sub    eax,edx
c0001b2c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b2f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b32:	8b 35 c4 ef 02 c0    	mov    esi,DWORD PTR ds:0xc002efc4
c0001b38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b3c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b3f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b42:	8b 35 d4 ef 02 c0    	mov    esi,DWORD PTR ds:0xc002efd4
c0001b48:	89 d8                	mov    eax,ebx
c0001b4a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b4d:	83 c4 08             	add    esp,0x8
c0001b50:	5b                   	pop    ebx
c0001b51:	5e                   	pop    esi
c0001b52:	5f                   	pop    edi
c0001b53:	5d                   	pop    ebp
c0001b54:	c2 04 00             	ret    0x4

c0001b57 <dlmalloc_stats>:
c0001b57:	83 ec 30             	sub    esp,0x30
c0001b5a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b5e:	50                   	push   eax
c0001b5f:	e8 24 ff ff ff       	call   c0001a88 <dlmallinfo>
c0001b64:	83 c4 30             	add    esp,0x30
c0001b67:	c3                   	ret    

c0001b68 <dlmallopt>:
c0001b68:	56                   	push   esi
c0001b69:	b8 60 ec 02 c0       	mov    eax,0xc002ec60
c0001b6e:	53                   	push   ebx
c0001b6f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b73:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b77:	e8 4d f1 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001b7c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b7f:	83 f8 05             	cmp    eax,0x5
c0001b82:	77 67                	ja     c0001beb <dlmallopt+0x83>
c0001b84:	ff 24 85 e4 9d 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd621c]
c0001b8b:	83 fb 50             	cmp    ebx,0x50
c0001b8e:	77 5b                	ja     c0001beb <dlmallopt+0x83>
c0001b90:	ba 08 00 00 00       	mov    edx,0x8
c0001b95:	85 db                	test   ebx,ebx
c0001b97:	74 12                	je     c0001bab <dlmallopt+0x43>
c0001b99:	83 c3 0b             	add    ebx,0xb
c0001b9c:	ba 10 00 00 00       	mov    edx,0x10
c0001ba1:	83 fb 0f             	cmp    ebx,0xf
c0001ba4:	76 05                	jbe    c0001bab <dlmallopt+0x43>
c0001ba6:	89 da                	mov    edx,ebx
c0001ba8:	83 e2 f8             	and    edx,0xfffffff8
c0001bab:	a1 60 ec 02 c0       	mov    eax,ds:0xc002ec60
c0001bb0:	83 e0 03             	and    eax,0x3
c0001bb3:	09 d0                	or     eax,edx
c0001bb5:	a3 60 ec 02 c0       	mov    ds:0xc002ec60,eax
c0001bba:	eb 31                	jmp    c0001bed <dlmallopt+0x85>
c0001bbc:	89 1d a4 ef 02 c0    	mov    DWORD PTR ds:0xc002efa4,ebx
c0001bc2:	eb 06                	jmp    c0001bca <dlmallopt+0x62>
c0001bc4:	89 1d a8 ef 02 c0    	mov    DWORD PTR ds:0xc002efa8,ebx
c0001bca:	be 01 00 00 00       	mov    esi,0x1
c0001bcf:	eb 1c                	jmp    c0001bed <dlmallopt+0x85>
c0001bd1:	89 1d ac ef 02 c0    	mov    DWORD PTR ds:0xc002efac,ebx
c0001bd7:	eb f1                	jmp    c0001bca <dlmallopt+0x62>
c0001bd9:	31 f6                	xor    esi,esi
c0001bdb:	85 db                	test   ebx,ebx
c0001bdd:	75 0e                	jne    c0001bed <dlmallopt+0x85>
c0001bdf:	c7 05 b4 ef 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002efb4,0x0
c0001be9:	eb df                	jmp    c0001bca <dlmallopt+0x62>
c0001beb:	31 f6                	xor    esi,esi
c0001bed:	89 f0                	mov    eax,esi
c0001bef:	5b                   	pop    ebx
c0001bf0:	5e                   	pop    esi
c0001bf1:	c3                   	ret    

c0001bf2 <disk_status>:
c0001bf2:	31 c0                	xor    eax,eax
c0001bf4:	c3                   	ret    

c0001bf5 <disk_initialize>:
c0001bf5:	31 c0                	xor    eax,eax
c0001bf7:	c3                   	ret    

c0001bf8 <disk_read>:
c0001bf8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bfd:	0f b6 04 85 40 27 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd8c0]
c0001c05:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c09:	e9 b6 fa 01 00       	jmp    c00216c4 <fatWrapperReadDisk>

c0001c0e <disk_write>:
c0001c0e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c13:	0f b6 04 85 40 27 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd8c0]
c0001c1b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c1f:	e9 e7 fa 01 00       	jmp    c002170b <fatWrapperWriteDisk>

c0001c24 <disk_ioctl>:
c0001c24:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c2d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c32:	0f b6 04 85 40 27 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd8c0]
c0001c3a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3e:	e9 0f fb 01 00       	jmp    c0021752 <fatWrapperIoctl>

c0001c43 <ld_word>:
c0001c43:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c47:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c4a:	c1 e2 08             	shl    edx,0x8
c0001c4d:	09 d0                	or     eax,edx
c0001c4f:	c3                   	ret    

c0001c50 <ld_dword>:
c0001c50:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c54:	89 d1                	mov    ecx,edx
c0001c56:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c5a:	c1 e1 08             	shl    ecx,0x8
c0001c5d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c60:	09 ca                	or     edx,ecx
c0001c62:	c1 e2 08             	shl    edx,0x8
c0001c65:	09 d0                	or     eax,edx
c0001c67:	c3                   	ret    

c0001c68 <ld_qword>:
c0001c68:	57                   	push   edi
c0001c69:	56                   	push   esi
c0001c6a:	53                   	push   ebx
c0001c6b:	31 db                	xor    ebx,ebx
c0001c6d:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c70:	89 df                	mov    edi,ebx
c0001c72:	89 ce                	mov    esi,ecx
c0001c74:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c78:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7c:	c1 e6 08             	shl    esi,0x8
c0001c7f:	09 f2                	or     edx,esi
c0001c81:	89 d6                	mov    esi,edx
c0001c83:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c87:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c8b:	c1 e6 08             	shl    esi,0x8
c0001c8e:	09 f2                	or     edx,esi
c0001c90:	89 d6                	mov    esi,edx
c0001c92:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c9d:	c1 e6 08             	shl    esi,0x8
c0001ca0:	89 fb                	mov    ebx,edi
c0001ca2:	09 f2                	or     edx,esi
c0001ca4:	89 d1                	mov    ecx,edx
c0001ca6:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001caa:	c1 e1 08             	shl    ecx,0x8
c0001cad:	89 da                	mov    edx,ebx
c0001caf:	09 c8                	or     eax,ecx
c0001cb1:	5b                   	pop    ebx
c0001cb2:	5e                   	pop    esi
c0001cb3:	5f                   	pop    edi
c0001cb4:	c3                   	ret    

c0001cb5 <st_word>:
c0001cb5:	66 89 10             	mov    WORD PTR [eax],dx
c0001cb8:	c3                   	ret    

c0001cb9 <st_dword>:
c0001cb9:	89 10                	mov    DWORD PTR [eax],edx
c0001cbb:	c3                   	ret    

c0001cbc <st_qword>:
c0001cbc:	89 10                	mov    DWORD PTR [eax],edx
c0001cbe:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cc1:	c3                   	ret    

c0001cc2 <mem_cpy>:
c0001cc2:	85 c9                	test   ecx,ecx
c0001cc4:	74 10                	je     c0001cd6 <mem_cpy+0x14>
c0001cc6:	57                   	push   edi
c0001cc7:	01 c1                	add    ecx,eax
c0001cc9:	56                   	push   esi
c0001cca:	89 c7                	mov    edi,eax
c0001ccc:	89 d6                	mov    esi,edx
c0001cce:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ccf:	39 f9                	cmp    ecx,edi
c0001cd1:	75 fb                	jne    c0001cce <mem_cpy+0xc>
c0001cd3:	5e                   	pop    esi
c0001cd4:	5f                   	pop    edi
c0001cd5:	c3                   	ret    
c0001cd6:	c3                   	ret    

c0001cd7 <mem_set>:
c0001cd7:	01 c1                	add    ecx,eax
c0001cd9:	40                   	inc    eax
c0001cda:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cdd:	39 c8                	cmp    eax,ecx
c0001cdf:	75 f8                	jne    c0001cd9 <mem_set+0x2>
c0001ce1:	c3                   	ret    

c0001ce2 <mem_cmp>:
c0001ce2:	57                   	push   edi
c0001ce3:	56                   	push   esi
c0001ce4:	89 c6                	mov    esi,eax
c0001ce6:	53                   	push   ebx
c0001ce7:	46                   	inc    esi
c0001ce8:	42                   	inc    edx
c0001ce9:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001ced:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cf1:	29 fb                	sub    ebx,edi
c0001cf3:	89 cf                	mov    edi,ecx
c0001cf5:	29 f7                	sub    edi,esi
c0001cf7:	01 c7                	add    edi,eax
c0001cf9:	74 04                	je     c0001cff <mem_cmp+0x1d>
c0001cfb:	85 db                	test   ebx,ebx
c0001cfd:	74 e8                	je     c0001ce7 <mem_cmp+0x5>
c0001cff:	89 d8                	mov    eax,ebx
c0001d01:	5b                   	pop    ebx
c0001d02:	5e                   	pop    esi
c0001d03:	5f                   	pop    edi
c0001d04:	c3                   	ret    

c0001d05 <chk_chr>:
c0001d05:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d08:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d0b:	74 07                	je     c0001d14 <chk_chr+0xf>
c0001d0d:	39 d1                	cmp    ecx,edx
c0001d0f:	74 03                	je     c0001d14 <chk_chr+0xf>
c0001d11:	40                   	inc    eax
c0001d12:	eb f1                	jmp    c0001d05 <chk_chr>
c0001d14:	89 c8                	mov    eax,ecx
c0001d16:	c3                   	ret    

c0001d17 <dbc_1st>:
c0001d17:	31 c0                	xor    eax,eax
c0001d19:	c3                   	ret    

c0001d1a <dbc_2nd>:
c0001d1a:	31 c0                	xor    eax,eax
c0001d1c:	c3                   	ret    

c0001d1d <tchar2uni>:
c0001d1d:	57                   	push   edi
c0001d1e:	89 c7                	mov    edi,eax
c0001d20:	56                   	push   esi
c0001d21:	53                   	push   ebx
c0001d22:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d24:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d26:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d29:	84 c9                	test   cl,cl
c0001d2b:	78 0a                	js     c0001d37 <tchar2uni+0x1a>
c0001d2d:	0f b6 d1             	movzx  edx,cl
c0001d30:	89 f3                	mov    ebx,esi
c0001d32:	e9 9f 00 00 00       	jmp    c0001dd6 <tchar2uni+0xb9>
c0001d37:	88 ca                	mov    dl,cl
c0001d39:	83 e2 e0             	and    edx,0xffffffe0
c0001d3c:	80 fa c0             	cmp    dl,0xc0
c0001d3f:	75 0c                	jne    c0001d4d <tchar2uni+0x30>
c0001d41:	89 ca                	mov    edx,ecx
c0001d43:	b9 01 00 00 00       	mov    ecx,0x1
c0001d48:	83 e2 1f             	and    edx,0x1f
c0001d4b:	eb 2e                	jmp    c0001d7b <tchar2uni+0x5e>
c0001d4d:	88 ca                	mov    dl,cl
c0001d4f:	83 e2 f0             	and    edx,0xfffffff0
c0001d52:	80 fa e0             	cmp    dl,0xe0
c0001d55:	75 0c                	jne    c0001d63 <tchar2uni+0x46>
c0001d57:	89 ca                	mov    edx,ecx
c0001d59:	b9 02 00 00 00       	mov    ecx,0x2
c0001d5e:	83 e2 0f             	and    edx,0xf
c0001d61:	eb 18                	jmp    c0001d7b <tchar2uni+0x5e>
c0001d63:	88 ca                	mov    dl,cl
c0001d65:	83 e2 f8             	and    edx,0xfffffff8
c0001d68:	88 d0                	mov    al,dl
c0001d6a:	83 ca ff             	or     edx,0xffffffff
c0001d6d:	3c f0                	cmp    al,0xf0
c0001d6f:	75 6c                	jne    c0001ddd <tchar2uni+0xc0>
c0001d71:	89 ca                	mov    edx,ecx
c0001d73:	b9 03 00 00 00       	mov    ecx,0x3
c0001d78:	83 e2 07             	and    edx,0x7
c0001d7b:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d7f:	46                   	inc    esi
c0001d80:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d83:	88 c8                	mov    al,cl
c0001d85:	83 e0 c0             	and    eax,0xffffffc0
c0001d88:	3c 80                	cmp    al,0x80
c0001d8a:	75 4e                	jne    c0001dda <tchar2uni+0xbd>
c0001d8c:	c1 e2 06             	shl    edx,0x6
c0001d8f:	83 e1 3f             	and    ecx,0x3f
c0001d92:	09 ca                	or     edx,ecx
c0001d94:	39 de                	cmp    esi,ebx
c0001d96:	75 e7                	jne    c0001d7f <tchar2uni+0x62>
c0001d98:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d9b:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001da1:	77 37                	ja     c0001dda <tchar2uni+0xbd>
c0001da3:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001da9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001daf:	76 29                	jbe    c0001dda <tchar2uni+0xbd>
c0001db1:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001db7:	76 1d                	jbe    c0001dd6 <tchar2uni+0xb9>
c0001db9:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001dbf:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001dc5:	c1 e1 06             	shl    ecx,0x6
c0001dc8:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dce:	09 ca                	or     edx,ecx
c0001dd0:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dd6:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dd8:	eb 03                	jmp    c0001ddd <tchar2uni+0xc0>
c0001dda:	83 ca ff             	or     edx,0xffffffff
c0001ddd:	5b                   	pop    ebx
c0001dde:	89 d0                	mov    eax,edx
c0001de0:	5e                   	pop    esi
c0001de1:	5f                   	pop    edi
c0001de2:	c3                   	ret    

c0001de3 <put_utf>:
c0001de3:	53                   	push   ebx
c0001de4:	83 f8 7f             	cmp    eax,0x7f
c0001de7:	89 c3                	mov    ebx,eax
c0001de9:	b0 00                	mov    al,0x0
c0001deb:	77 11                	ja     c0001dfe <put_utf+0x1b>
c0001ded:	85 c9                	test   ecx,ecx
c0001def:	0f 84 e5 00 00 00    	je     c0001eda <put_utf+0xf7>
c0001df5:	88 1a                	mov    BYTE PTR [edx],bl
c0001df7:	b0 01                	mov    al,0x1
c0001df9:	e9 dc 00 00 00       	jmp    c0001eda <put_utf+0xf7>
c0001dfe:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e04:	77 23                	ja     c0001e29 <put_utf+0x46>
c0001e06:	83 f9 01             	cmp    ecx,0x1
c0001e09:	0f 86 cb 00 00 00    	jbe    c0001eda <put_utf+0xf7>
c0001e0f:	89 d8                	mov    eax,ebx
c0001e11:	83 e3 3f             	and    ebx,0x3f
c0001e14:	c1 e8 06             	shr    eax,0x6
c0001e17:	83 cb 80             	or     ebx,0xffffff80
c0001e1a:	83 c8 c0             	or     eax,0xffffffc0
c0001e1d:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e20:	88 02                	mov    BYTE PTR [edx],al
c0001e22:	b0 02                	mov    al,0x2
c0001e24:	e9 b1 00 00 00       	jmp    c0001eda <put_utf+0xf7>
c0001e29:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e2f:	77 40                	ja     c0001e71 <put_utf+0x8e>
c0001e31:	83 f9 02             	cmp    ecx,0x2
c0001e34:	0f 86 a0 00 00 00    	jbe    c0001eda <put_utf+0xf7>
c0001e3a:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e40:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e46:	0f 86 8e 00 00 00    	jbe    c0001eda <put_utf+0xf7>
c0001e4c:	89 d8                	mov    eax,ebx
c0001e4e:	c1 e8 0c             	shr    eax,0xc
c0001e51:	83 c8 e0             	or     eax,0xffffffe0
c0001e54:	88 02                	mov    BYTE PTR [edx],al
c0001e56:	89 d8                	mov    eax,ebx
c0001e58:	83 e3 3f             	and    ebx,0x3f
c0001e5b:	c1 e8 06             	shr    eax,0x6
c0001e5e:	83 cb 80             	or     ebx,0xffffff80
c0001e61:	83 e0 3f             	and    eax,0x3f
c0001e64:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e67:	83 c8 80             	or     eax,0xffffff80
c0001e6a:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e6d:	b0 03                	mov    al,0x3
c0001e6f:	eb 69                	jmp    c0001eda <put_utf+0xf7>
c0001e71:	83 f9 03             	cmp    ecx,0x3
c0001e74:	76 64                	jbe    c0001eda <put_utf+0xf7>
c0001e76:	89 d9                	mov    ecx,ebx
c0001e78:	0f b7 c3             	movzx  eax,bx
c0001e7b:	66 31 c9             	xor    cx,cx
c0001e7e:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e84:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e8a:	c1 e9 06             	shr    ecx,0x6
c0001e8d:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e93:	77 43                	ja     c0001ed8 <put_utf+0xf5>
c0001e95:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e9b:	77 3b                	ja     c0001ed8 <put_utf+0xf5>
c0001e9d:	09 cb                	or     ebx,ecx
c0001e9f:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ea5:	89 d8                	mov    eax,ebx
c0001ea7:	c1 e8 12             	shr    eax,0x12
c0001eaa:	83 c8 f0             	or     eax,0xfffffff0
c0001ead:	88 02                	mov    BYTE PTR [edx],al
c0001eaf:	89 d8                	mov    eax,ebx
c0001eb1:	c1 e8 0c             	shr    eax,0xc
c0001eb4:	83 e0 3f             	and    eax,0x3f
c0001eb7:	83 c8 80             	or     eax,0xffffff80
c0001eba:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ebd:	89 d8                	mov    eax,ebx
c0001ebf:	83 e3 3f             	and    ebx,0x3f
c0001ec2:	c1 e8 06             	shr    eax,0x6
c0001ec5:	83 cb 80             	or     ebx,0xffffff80
c0001ec8:	83 e0 3f             	and    eax,0x3f
c0001ecb:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001ece:	83 c8 80             	or     eax,0xffffff80
c0001ed1:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ed4:	b0 04                	mov    al,0x4
c0001ed6:	eb 02                	jmp    c0001eda <put_utf+0xf7>
c0001ed8:	31 c0                	xor    eax,eax
c0001eda:	5b                   	pop    ebx
c0001edb:	c3                   	ret    

c0001edc <clst2sect>:
c0001edc:	89 c1                	mov    ecx,eax
c0001ede:	83 ea 02             	sub    edx,0x2
c0001ee1:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ee4:	83 e8 02             	sub    eax,0x2
c0001ee7:	39 d0                	cmp    eax,edx
c0001ee9:	76 0d                	jbe    c0001ef8 <clst2sect+0x1c>
c0001eeb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001eef:	f7 e2                	mul    edx
c0001ef1:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ef4:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001ef7:	c3                   	ret    
c0001ef8:	31 c0                	xor    eax,eax
c0001efa:	31 d2                	xor    edx,edx
c0001efc:	c3                   	ret    

c0001efd <clmt_clust>:
c0001efd:	57                   	push   edi
c0001efe:	89 cf                	mov    edi,ecx
c0001f00:	56                   	push   esi
c0001f01:	89 d6                	mov    esi,edx
c0001f03:	53                   	push   ebx
c0001f04:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f08:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f0b:	89 f2                	mov    edx,esi
c0001f0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f0f:	c1 ef 09             	shr    edi,0x9
c0001f12:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f16:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f19:	89 f9                	mov    ecx,edi
c0001f1b:	31 ff                	xor    edi,edi
c0001f1d:	57                   	push   edi
c0001f1e:	56                   	push   esi
c0001f1f:	51                   	push   ecx
c0001f20:	52                   	push   edx
c0001f21:	e8 4e 54 02 00       	call   c0027374 <__udivdi3>
c0001f26:	83 c4 10             	add    esp,0x10
c0001f29:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f2b:	85 d2                	test   edx,edx
c0001f2d:	74 10                	je     c0001f3f <clmt_clust+0x42>
c0001f2f:	39 d0                	cmp    eax,edx
c0001f31:	72 07                	jb     c0001f3a <clmt_clust+0x3d>
c0001f33:	29 d0                	sub    eax,edx
c0001f35:	83 c3 08             	add    ebx,0x8
c0001f38:	eb ef                	jmp    c0001f29 <clmt_clust+0x2c>
c0001f3a:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f3d:	89 c2                	mov    edx,eax
c0001f3f:	5b                   	pop    ebx
c0001f40:	89 d0                	mov    eax,edx
c0001f42:	5e                   	pop    esi
c0001f43:	5f                   	pop    edi
c0001f44:	c3                   	ret    

c0001f45 <pick_lfn>:
c0001f45:	55                   	push   ebp
c0001f46:	57                   	push   edi
c0001f47:	56                   	push   esi
c0001f48:	89 d6                	mov    esi,edx
c0001f4a:	53                   	push   ebx
c0001f4b:	89 c3                	mov    ebx,eax
c0001f4d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f50:	e8 ee fc ff ff       	call   c0001c43 <ld_word>
c0001f55:	66 85 c0             	test   ax,ax
c0001f58:	74 04                	je     c0001f5e <pick_lfn+0x19>
c0001f5a:	31 c0                	xor    eax,eax
c0001f5c:	eb 5c                	jmp    c0001fba <pick_lfn+0x75>
c0001f5e:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f61:	bd 01 00 00 00       	mov    ebp,0x1
c0001f66:	83 e1 bf             	and    ecx,0xffffffbf
c0001f69:	31 ff                	xor    edi,edi
c0001f6b:	49                   	dec    ecx
c0001f6c:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f6f:	0f b6 87 00 9f 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6100]
c0001f76:	01 f0                	add    eax,esi
c0001f78:	e8 c6 fc ff ff       	call   c0001c43 <ld_word>
c0001f7d:	66 85 ed             	test   bp,bp
c0001f80:	74 11                	je     c0001f93 <pick_lfn+0x4e>
c0001f82:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f88:	77 d0                	ja     c0001f5a <pick_lfn+0x15>
c0001f8a:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f8e:	89 c5                	mov    ebp,eax
c0001f90:	41                   	inc    ecx
c0001f91:	eb 04                	jmp    c0001f97 <pick_lfn+0x52>
c0001f93:	66 40                	inc    ax
c0001f95:	75 c3                	jne    c0001f5a <pick_lfn+0x15>
c0001f97:	47                   	inc    edi
c0001f98:	83 ff 0d             	cmp    edi,0xd
c0001f9b:	75 d2                	jne    c0001f6f <pick_lfn+0x2a>
c0001f9d:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fa0:	74 13                	je     c0001fb5 <pick_lfn+0x70>
c0001fa2:	66 85 ed             	test   bp,bp
c0001fa5:	74 0e                	je     c0001fb5 <pick_lfn+0x70>
c0001fa7:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fad:	77 ab                	ja     c0001f5a <pick_lfn+0x15>
c0001faf:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fb5:	b8 01 00 00 00       	mov    eax,0x1
c0001fba:	5b                   	pop    ebx
c0001fbb:	5e                   	pop    esi
c0001fbc:	5f                   	pop    edi
c0001fbd:	5d                   	pop    ebp
c0001fbe:	c3                   	ret    

c0001fbf <put_lfn>:
c0001fbf:	55                   	push   ebp
c0001fc0:	31 ed                	xor    ebp,ebp
c0001fc2:	57                   	push   edi
c0001fc3:	89 d7                	mov    edi,edx
c0001fc5:	56                   	push   esi
c0001fc6:	31 f6                	xor    esi,esi
c0001fc8:	53                   	push   ebx
c0001fc9:	83 ec 08             	sub    esp,0x8
c0001fcc:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fcf:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fd7:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fdd:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fe0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fe3:	31 d2                	xor    edx,edx
c0001fe5:	e8 cb fc ff ff       	call   c0001cb5 <st_word>
c0001fea:	0f b6 d9             	movzx  ebx,cl
c0001fed:	4b                   	dec    ebx
c0001fee:	6b db 0d             	imul   ebx,ebx,0xd
c0001ff1:	66 83 fe ff          	cmp    si,0xffff
c0001ff5:	74 08                	je     c0001fff <put_lfn+0x40>
c0001ff7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001ffa:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001ffe:	43                   	inc    ebx
c0001fff:	0f b6 85 00 9f 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6100]
c0002006:	0f b7 d6             	movzx  edx,si
c0002009:	01 f8                	add    eax,edi
c000200b:	e8 a5 fc ff ff       	call   c0001cb5 <st_word>
c0002010:	66 85 f6             	test   si,si
c0002013:	75 03                	jne    c0002018 <put_lfn+0x59>
c0002015:	83 ce ff             	or     esi,0xffffffff
c0002018:	45                   	inc    ebp
c0002019:	83 fd 0d             	cmp    ebp,0xd
c000201c:	75 d3                	jne    c0001ff1 <put_lfn+0x32>
c000201e:	66 46                	inc    si
c0002020:	74 0a                	je     c000202c <put_lfn+0x6d>
c0002022:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002025:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000202a:	75 09                	jne    c0002035 <put_lfn+0x76>
c000202c:	88 c8                	mov    al,cl
c000202e:	83 c8 40             	or     eax,0x40
c0002031:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002035:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002039:	88 07                	mov    BYTE PTR [edi],al
c000203b:	83 c4 08             	add    esp,0x8
c000203e:	5b                   	pop    ebx
c000203f:	5e                   	pop    esi
c0002040:	5f                   	pop    edi
c0002041:	5d                   	pop    ebp
c0002042:	c3                   	ret    

c0002043 <gen_numname>:
c0002043:	57                   	push   edi
c0002044:	89 cf                	mov    edi,ecx
c0002046:	56                   	push   esi
c0002047:	b9 0b 00 00 00       	mov    ecx,0xb
c000204c:	53                   	push   ebx
c000204d:	89 c6                	mov    esi,eax
c000204f:	83 ec 10             	sub    esp,0x10
c0002052:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002056:	e8 67 fc ff ff       	call   c0001cc2 <mem_cpy>
c000205b:	83 fb 05             	cmp    ebx,0x5
c000205e:	76 2d                	jbe    c000208d <gen_numname+0x4a>
c0002060:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002063:	66 85 c0             	test   ax,ax
c0002066:	74 25                	je     c000208d <gen_numname+0x4a>
c0002068:	83 c7 02             	add    edi,0x2
c000206b:	ba 10 00 00 00       	mov    edx,0x10
c0002070:	01 db                	add    ebx,ebx
c0002072:	89 c1                	mov    ecx,eax
c0002074:	66 d1 e8             	shr    ax,1
c0002077:	83 e1 01             	and    ecx,0x1
c000207a:	01 cb                	add    ebx,ecx
c000207c:	0f ba e3 10          	bt     ebx,0x10
c0002080:	73 06                	jae    c0002088 <gen_numname+0x45>
c0002082:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002088:	4a                   	dec    edx
c0002089:	75 e5                	jne    c0002070 <gen_numname+0x2d>
c000208b:	eb d3                	jmp    c0002060 <gen_numname+0x1d>
c000208d:	b8 07 00 00 00       	mov    eax,0x7
c0002092:	88 d9                	mov    cl,bl
c0002094:	83 e1 0f             	and    ecx,0xf
c0002097:	8d 51 30             	lea    edx,[ecx+0x30]
c000209a:	80 fa 39             	cmp    dl,0x39
c000209d:	76 03                	jbe    c00020a2 <gen_numname+0x5f>
c000209f:	8d 51 37             	lea    edx,[ecx+0x37]
c00020a2:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020a5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020a9:	89 da                	mov    edx,ebx
c00020ab:	c1 ea 04             	shr    edx,0x4
c00020ae:	83 fb 0f             	cmp    ebx,0xf
c00020b1:	76 06                	jbe    c00020b9 <gen_numname+0x76>
c00020b3:	89 c8                	mov    eax,ecx
c00020b5:	89 d3                	mov    ebx,edx
c00020b7:	eb d9                	jmp    c0002092 <gen_numname+0x4f>
c00020b9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020be:	31 d2                	xor    edx,edx
c00020c0:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020c3:	8d 04 16             	lea    eax,[esi+edx*1]
c00020c6:	39 ca                	cmp    edx,ecx
c00020c8:	73 18                	jae    c00020e2 <gen_numname+0x9f>
c00020ca:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020cd:	3c 20                	cmp    al,0x20
c00020cf:	74 11                	je     c00020e2 <gen_numname+0x9f>
c00020d1:	e8 41 fc ff ff       	call   c0001d17 <dbc_1st>
c00020d6:	85 c0                	test   eax,eax
c00020d8:	74 05                	je     c00020df <gen_numname+0x9c>
c00020da:	39 d3                	cmp    ebx,edx
c00020dc:	74 04                	je     c00020e2 <gen_numname+0x9f>
c00020de:	42                   	inc    edx
c00020df:	42                   	inc    edx
c00020e0:	eb e1                	jmp    c00020c3 <gen_numname+0x80>
c00020e2:	b0 20                	mov    al,0x20
c00020e4:	83 f9 07             	cmp    ecx,0x7
c00020e7:	77 05                	ja     c00020ee <gen_numname+0xab>
c00020e9:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020ed:	41                   	inc    ecx
c00020ee:	42                   	inc    edx
c00020ef:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020f3:	83 fa 07             	cmp    edx,0x7
c00020f6:	76 ea                	jbe    c00020e2 <gen_numname+0x9f>
c00020f8:	83 c4 10             	add    esp,0x10
c00020fb:	5b                   	pop    ebx
c00020fc:	5e                   	pop    esi
c00020fd:	5f                   	pop    edi
c00020fe:	c3                   	ret    

c00020ff <sum_sfn>:
c00020ff:	31 c9                	xor    ecx,ecx
c0002101:	31 d2                	xor    edx,edx
c0002103:	d0 ca                	ror    dl,1
c0002105:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002108:	41                   	inc    ecx
c0002109:	83 f9 0b             	cmp    ecx,0xb
c000210c:	75 f5                	jne    c0002103 <sum_sfn+0x4>
c000210e:	88 d0                	mov    al,dl
c0002110:	c3                   	ret    

c0002111 <xdir_sum>:
c0002111:	56                   	push   esi
c0002112:	31 c9                	xor    ecx,ecx
c0002114:	53                   	push   ebx
c0002115:	31 d2                	xor    edx,edx
c0002117:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c000211b:	43                   	inc    ebx
c000211c:	c1 e3 05             	shl    ebx,0x5
c000211f:	83 fa 02             	cmp    edx,0x2
c0002122:	74 0b                	je     c000212f <xdir_sum+0x1e>
c0002124:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002128:	66 d1 c9             	ror    cx,1
c000212b:	01 f1                	add    ecx,esi
c000212d:	eb 05                	jmp    c0002134 <xdir_sum+0x23>
c000212f:	ba 03 00 00 00       	mov    edx,0x3
c0002134:	42                   	inc    edx
c0002135:	39 d3                	cmp    ebx,edx
c0002137:	77 e6                	ja     c000211f <xdir_sum+0xe>
c0002139:	89 c8                	mov    eax,ecx
c000213b:	5b                   	pop    ebx
c000213c:	5e                   	pop    esi
c000213d:	c3                   	ret    

c000213e <xsum32>:
c000213e:	d1 ca                	ror    edx,1
c0002140:	0f b6 c0             	movzx  eax,al
c0002143:	01 d0                	add    eax,edx
c0002145:	c3                   	ret    

c0002146 <get_xfileinfo>:
c0002146:	55                   	push   ebp
c0002147:	31 c9                	xor    ecx,ecx
c0002149:	57                   	push   edi
c000214a:	bd 40 00 00 00       	mov    ebp,0x40
c000214f:	56                   	push   esi
c0002150:	31 ff                	xor    edi,edi
c0002152:	53                   	push   ebx
c0002153:	89 c6                	mov    esi,eax
c0002155:	83 ec 0c             	sub    esp,0xc
c0002158:	89 d3                	mov    ebx,edx
c000215a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002161:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002165:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002168:	76 6d                	jbe    c00021d7 <get_xfileinfo+0x91>
c000216a:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002170:	76 0b                	jbe    c000217d <get_xfileinfo+0x37>
c0002172:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002176:	bf 01 00 00 00       	mov    edi,0x1
c000217b:	eb 63                	jmp    c00021e0 <get_xfileinfo+0x9a>
c000217d:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002183:	75 03                	jne    c0002188 <get_xfileinfo+0x42>
c0002185:	83 c5 02             	add    ebp,0x2
c0002188:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000218b:	83 c5 02             	add    ebp,0x2
c000218e:	e8 b0 fa ff ff       	call   c0001c43 <ld_word>
c0002193:	ff 04 24             	inc    DWORD PTR [esp]
c0002196:	66 85 c9             	test   cx,cx
c0002199:	75 0d                	jne    c00021a8 <get_xfileinfo+0x62>
c000219b:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021a1:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021a6:	76 2b                	jbe    c00021d3 <get_xfileinfo+0x8d>
c00021a8:	c1 e1 10             	shl    ecx,0x10
c00021ab:	ba ff 00 00 00       	mov    edx,0xff
c00021b0:	0f b7 c0             	movzx  eax,ax
c00021b3:	29 fa                	sub    edx,edi
c00021b5:	09 c8                	or     eax,ecx
c00021b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021bb:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021bf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021c3:	e8 1b fc ff ff       	call   c0001de3 <put_utf>
c00021c8:	84 c0                	test   al,al
c00021ca:	74 a6                	je     c0002172 <get_xfileinfo+0x2c>
c00021cc:	0f b6 c0             	movzx  eax,al
c00021cf:	01 c7                	add    edi,eax
c00021d1:	31 c0                	xor    eax,eax
c00021d3:	89 c1                	mov    ecx,eax
c00021d5:	eb 8a                	jmp    c0002161 <get_xfileinfo+0x1b>
c00021d7:	85 ff                	test   edi,edi
c00021d9:	74 97                	je     c0002172 <get_xfileinfo+0x2c>
c00021db:	66 85 c9             	test   cx,cx
c00021de:	75 92                	jne    c0002172 <get_xfileinfo+0x2c>
c00021e0:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021e5:	31 c0                	xor    eax,eax
c00021e7:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021eb:	31 d2                	xor    edx,edx
c00021ed:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021f0:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021f3:	80 e1 10             	and    cl,0x10
c00021f6:	75 08                	jne    c0002200 <get_xfileinfo+0xba>
c00021f8:	8d 46 38             	lea    eax,[esi+0x38]
c00021fb:	e8 68 fa ff ff       	call   c0001c68 <ld_qword>
c0002200:	89 03                	mov    DWORD PTR [ebx],eax
c0002202:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002205:	8d 46 0c             	lea    eax,[esi+0xc]
c0002208:	e8 36 fa ff ff       	call   c0001c43 <ld_word>
c000220d:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002211:	8d 46 0e             	lea    eax,[esi+0xe]
c0002214:	e8 2a fa ff ff       	call   c0001c43 <ld_word>
c0002219:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000221d:	83 c4 0c             	add    esp,0xc
c0002220:	5b                   	pop    ebx
c0002221:	5e                   	pop    esi
c0002222:	5f                   	pop    edi
c0002223:	5d                   	pop    ebp
c0002224:	c3                   	ret    

c0002225 <get_ldnumber>:
c0002225:	8b 10                	mov    edx,DWORD PTR [eax]
c0002227:	85 d2                	test   edx,edx
c0002229:	74 14                	je     c000223f <get_ldnumber+0x1a>
c000222b:	56                   	push   esi
c000222c:	53                   	push   ebx
c000222d:	89 d3                	mov    ebx,edx
c000222f:	43                   	inc    ebx
c0002230:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002233:	80 f9 1f             	cmp    cl,0x1f
c0002236:	76 0d                	jbe    c0002245 <get_ldnumber+0x20>
c0002238:	80 f9 3a             	cmp    cl,0x3a
c000223b:	75 f2                	jne    c000222f <get_ldnumber+0xa>
c000223d:	eb 0a                	jmp    c0002249 <get_ldnumber+0x24>
c000223f:	83 c9 ff             	or     ecx,0xffffffff
c0002242:	89 c8                	mov    eax,ecx
c0002244:	c3                   	ret    
c0002245:	31 c9                	xor    ecx,ecx
c0002247:	eb 24                	jmp    c000226d <get_ldnumber+0x48>
c0002249:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000224c:	8d 4e d0             	lea    ecx,[esi-0x30]
c000224f:	80 f9 09             	cmp    cl,0x9
c0002252:	77 16                	ja     c000226a <get_ldnumber+0x45>
c0002254:	83 c2 02             	add    edx,0x2
c0002257:	83 c9 ff             	or     ecx,0xffffffff
c000225a:	39 d3                	cmp    ebx,edx
c000225c:	75 0f                	jne    c000226d <get_ldnumber+0x48>
c000225e:	89 f2                	mov    edx,esi
c0002260:	89 18                	mov    DWORD PTR [eax],ebx
c0002262:	0f be ca             	movsx  ecx,dl
c0002265:	83 e9 30             	sub    ecx,0x30
c0002268:	eb 03                	jmp    c000226d <get_ldnumber+0x48>
c000226a:	83 c9 ff             	or     ecx,0xffffffff
c000226d:	89 c8                	mov    eax,ecx
c000226f:	5b                   	pop    ebx
c0002270:	5e                   	pop    esi
c0002271:	c3                   	ret    

c0002272 <crc32>:
c0002272:	56                   	push   esi
c0002273:	89 d6                	mov    esi,edx
c0002275:	53                   	push   ebx
c0002276:	b2 01                	mov    dl,0x1
c0002278:	bb 08 00 00 00       	mov    ebx,0x8
c000227d:	89 f1                	mov    ecx,esi
c000227f:	84 d1                	test   cl,dl
c0002281:	0f 95 c1             	setne  cl
c0002284:	0f b6 c9             	movzx  ecx,cl
c0002287:	31 c1                	xor    ecx,eax
c0002289:	89 c8                	mov    eax,ecx
c000228b:	d1 e8                	shr    eax,1
c000228d:	80 e1 01             	and    cl,0x1
c0002290:	74 05                	je     c0002297 <crc32+0x25>
c0002292:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002297:	d1 e2                	shl    edx,1
c0002299:	4b                   	dec    ebx
c000229a:	75 e1                	jne    c000227d <crc32+0xb>
c000229c:	5b                   	pop    ebx
c000229d:	5e                   	pop    esi
c000229e:	c3                   	ret    

c000229f <test_gpt_header>:
c000229f:	55                   	push   ebp
c00022a0:	b9 10 00 00 00       	mov    ecx,0x10
c00022a5:	57                   	push   edi
c00022a6:	ba 00 9e 02 c0       	mov    edx,0xc0029e00
c00022ab:	56                   	push   esi
c00022ac:	31 ff                	xor    edi,edi
c00022ae:	53                   	push   ebx
c00022af:	89 c3                	mov    ebx,eax
c00022b1:	e8 2c fa ff ff       	call   c0001ce2 <mem_cmp>
c00022b6:	85 c0                	test   eax,eax
c00022b8:	75 55                	jne    c000230f <test_gpt_header+0x70>
c00022ba:	89 c7                	mov    edi,eax
c00022bc:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022c1:	83 ce ff             	or     esi,0xffffffff
c00022c4:	31 d2                	xor    edx,edx
c00022c6:	83 fd 03             	cmp    ebp,0x3
c00022c9:	76 05                	jbe    c00022d0 <test_gpt_header+0x31>
c00022cb:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022d0:	89 f0                	mov    eax,esi
c00022d2:	45                   	inc    ebp
c00022d3:	e8 9a ff ff ff       	call   c0002272 <crc32>
c00022d8:	83 fd 4c             	cmp    ebp,0x4c
c00022db:	89 c6                	mov    esi,eax
c00022dd:	75 e5                	jne    c00022c4 <test_gpt_header+0x25>
c00022df:	8d 43 10             	lea    eax,[ebx+0x10]
c00022e2:	f7 d6                	not    esi
c00022e4:	e8 67 f9 ff ff       	call   c0001c50 <ld_dword>
c00022e9:	39 c6                	cmp    esi,eax
c00022eb:	75 22                	jne    c000230f <test_gpt_header+0x70>
c00022ed:	8d 43 54             	lea    eax,[ebx+0x54]
c00022f0:	e8 5b f9 ff ff       	call   c0001c50 <ld_dword>
c00022f5:	83 c0 80             	add    eax,0xffffff80
c00022f8:	75 15                	jne    c000230f <test_gpt_header+0x70>
c00022fa:	8d 43 50             	lea    eax,[ebx+0x50]
c00022fd:	e8 4e f9 ff ff       	call   c0001c50 <ld_dword>
c0002302:	3d 80 00 00 00       	cmp    eax,0x80
c0002307:	0f 96 c0             	setbe  al
c000230a:	0f b6 c0             	movzx  eax,al
c000230d:	89 c7                	mov    edi,eax
c000230f:	5b                   	pop    ebx
c0002310:	89 f8                	mov    eax,edi
c0002312:	5e                   	pop    esi
c0002313:	5f                   	pop    edi
c0002314:	5d                   	pop    ebp
c0002315:	c3                   	ret    

c0002316 <make_rand>:
c0002316:	56                   	push   esi
c0002317:	85 c0                	test   eax,eax
c0002319:	53                   	push   ebx
c000231a:	75 05                	jne    c0002321 <make_rand+0xb>
c000231c:	b8 01 00 00 00       	mov    eax,0x1
c0002321:	01 d1                	add    ecx,edx
c0002323:	bb 08 00 00 00       	mov    ebx,0x8
c0002328:	89 c6                	mov    esi,eax
c000232a:	d1 e8                	shr    eax,1
c000232c:	83 e6 01             	and    esi,0x1
c000232f:	85 f6                	test   esi,esi
c0002331:	74 05                	je     c0002338 <make_rand+0x22>
c0002333:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002338:	4b                   	dec    ebx
c0002339:	75 ed                	jne    c0002328 <make_rand+0x12>
c000233b:	42                   	inc    edx
c000233c:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000233f:	39 ca                	cmp    edx,ecx
c0002341:	75 e0                	jne    c0002323 <make_rand+0xd>
c0002343:	5b                   	pop    ebx
c0002344:	5e                   	pop    esi
c0002345:	c3                   	ret    

c0002346 <validate>:
c0002346:	56                   	push   esi
c0002347:	53                   	push   ebx
c0002348:	89 d6                	mov    esi,edx
c000234a:	51                   	push   ecx
c000234b:	85 c0                	test   eax,eax
c000234d:	75 09                	jne    c0002358 <validate+0x12>
c000234f:	b8 09 00 00 00       	mov    eax,0x9
c0002354:	31 c9                	xor    ecx,ecx
c0002356:	eb 2f                	jmp    c0002387 <validate+0x41>
c0002358:	89 c3                	mov    ebx,eax
c000235a:	8b 00                	mov    eax,DWORD PTR [eax]
c000235c:	85 c0                	test   eax,eax
c000235e:	74 ef                	je     c000234f <validate+0x9>
c0002360:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002363:	74 ea                	je     c000234f <validate+0x9>
c0002365:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002369:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000236d:	75 e0                	jne    c000234f <validate+0x9>
c000236f:	83 ec 0c             	sub    esp,0xc
c0002372:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002376:	50                   	push   eax
c0002377:	e8 76 f8 ff ff       	call   c0001bf2 <disk_status>
c000237c:	83 c4 10             	add    esp,0x10
c000237f:	a8 01                	test   al,0x1
c0002381:	75 cc                	jne    c000234f <validate+0x9>
c0002383:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002385:	31 c0                	xor    eax,eax
c0002387:	89 0e                	mov    DWORD PTR [esi],ecx
c0002389:	5a                   	pop    edx
c000238a:	5b                   	pop    ebx
c000238b:	5e                   	pop    esi
c000238c:	c3                   	ret    

c000238d <sync_window>:
c000238d:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002391:	0f 84 85 00 00 00    	je     c000241c <sync_window+0x8f>
c0002397:	55                   	push   ebp
c0002398:	8d 68 54             	lea    ebp,[eax+0x54]
c000239b:	57                   	push   edi
c000239c:	56                   	push   esi
c000239d:	53                   	push   ebx
c000239e:	89 c3                	mov    ebx,eax
c00023a0:	83 ec 28             	sub    esp,0x28
c00023a3:	6a 01                	push   0x1
c00023a5:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023a8:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023ab:	55                   	push   ebp
c00023ac:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023b0:	50                   	push   eax
c00023b1:	e8 58 f8 ff ff       	call   c0001c0e <disk_write>
c00023b6:	83 c4 20             	add    esp,0x20
c00023b9:	ba 01 00 00 00       	mov    edx,0x1
c00023be:	85 c0                	test   eax,eax
c00023c0:	75 50                	jne    c0002412 <sync_window+0x85>
c00023c2:	31 ff                	xor    edi,edi
c00023c4:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023c7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023cb:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023cf:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023d2:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023d5:	89 c6                	mov    esi,eax
c00023d7:	89 d7                	mov    edi,edx
c00023d9:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023dc:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023e0:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023e3:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023e7:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023eb:	73 23                	jae    c0002410 <sync_window+0x83>
c00023ed:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023f1:	75 1d                	jne    c0002410 <sync_window+0x83>
c00023f3:	83 ec 0c             	sub    esp,0xc
c00023f6:	6a 01                	push   0x1
c00023f8:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023fc:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002400:	52                   	push   edx
c0002401:	50                   	push   eax
c0002402:	55                   	push   ebp
c0002403:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002407:	50                   	push   eax
c0002408:	e8 01 f8 ff ff       	call   c0001c0e <disk_write>
c000240d:	83 c4 20             	add    esp,0x20
c0002410:	31 d2                	xor    edx,edx
c0002412:	83 c4 1c             	add    esp,0x1c
c0002415:	89 d0                	mov    eax,edx
c0002417:	5b                   	pop    ebx
c0002418:	5e                   	pop    esi
c0002419:	5f                   	pop    edi
c000241a:	5d                   	pop    ebp
c000241b:	c3                   	ret    
c000241c:	31 d2                	xor    edx,edx
c000241e:	89 d0                	mov    eax,edx
c0002420:	c3                   	ret    

c0002421 <move_window>:
c0002421:	56                   	push   esi
c0002422:	53                   	push   ebx
c0002423:	89 c3                	mov    ebx,eax
c0002425:	83 ec 14             	sub    esp,0x14
c0002428:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000242b:	75 07                	jne    c0002434 <move_window+0x13>
c000242d:	31 f6                	xor    esi,esi
c000242f:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002432:	74 59                	je     c000248d <move_window+0x6c>
c0002434:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002438:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000243c:	89 d8                	mov    eax,ebx
c000243e:	e8 4a ff ff ff       	call   c000238d <sync_window>
c0002443:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002447:	89 c6                	mov    esi,eax
c0002449:	85 c0                	test   eax,eax
c000244b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000244f:	75 3c                	jne    c000248d <move_window+0x6c>
c0002451:	83 ec 0c             	sub    esp,0xc
c0002454:	8d 43 54             	lea    eax,[ebx+0x54]
c0002457:	6a 01                	push   0x1
c0002459:	51                   	push   ecx
c000245a:	52                   	push   edx
c000245b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000245f:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002463:	50                   	push   eax
c0002464:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002468:	50                   	push   eax
c0002469:	e8 8a f7 ff ff       	call   c0001bf8 <disk_read>
c000246e:	83 c4 20             	add    esp,0x20
c0002471:	85 c0                	test   eax,eax
c0002473:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002477:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000247b:	74 0a                	je     c0002487 <move_window+0x66>
c000247d:	83 ca ff             	or     edx,0xffffffff
c0002480:	be 01 00 00 00       	mov    esi,0x1
c0002485:	89 d1                	mov    ecx,edx
c0002487:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000248a:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000248d:	89 f0                	mov    eax,esi
c000248f:	83 c4 14             	add    esp,0x14
c0002492:	5b                   	pop    ebx
c0002493:	5e                   	pop    esi
c0002494:	c3                   	ret    

c0002495 <check_fs>:
c0002495:	53                   	push   ebx
c0002496:	89 c3                	mov    ebx,eax
c0002498:	83 ec 08             	sub    esp,0x8
c000249b:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000249f:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024a6:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024ad:	e8 6f ff ff ff       	call   c0002421 <move_window>
c00024b2:	ba 04 00 00 00       	mov    edx,0x4
c00024b7:	85 c0                	test   eax,eax
c00024b9:	0f 85 89 00 00 00    	jne    c0002548 <check_fs+0xb3>
c00024bf:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024c5:	e8 79 f7 ff ff       	call   c0001c43 <ld_word>
c00024ca:	ba 03 00 00 00       	mov    edx,0x3
c00024cf:	66 3d 55 aa          	cmp    ax,0xaa55
c00024d3:	75 73                	jne    c0002548 <check_fs+0xb3>
c00024d5:	ba 20 9f 02 c0       	mov    edx,0xc0029f20
c00024da:	8d 43 54             	lea    eax,[ebx+0x54]
c00024dd:	b9 0b 00 00 00       	mov    ecx,0xb
c00024e2:	e8 fb f7 ff ff       	call   c0001ce2 <mem_cmp>
c00024e7:	ba 01 00 00 00       	mov    edx,0x1
c00024ec:	85 c0                	test   eax,eax
c00024ee:	74 58                	je     c0002548 <check_fs+0xb3>
c00024f0:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024f3:	8d 50 18             	lea    edx,[eax+0x18]
c00024f6:	80 fa 01             	cmp    dl,0x1
c00024f9:	76 09                	jbe    c0002504 <check_fs+0x6f>
c00024fb:	ba 02 00 00 00       	mov    edx,0x2
c0002500:	3c eb                	cmp    al,0xeb
c0002502:	75 44                	jne    c0002548 <check_fs+0xb3>
c0002504:	ba 50 d4 02 c0       	mov    edx,0xc002d450
c0002509:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000250f:	b9 03 00 00 00       	mov    ecx,0x3
c0002514:	e8 c9 f7 ff ff       	call   c0001ce2 <mem_cmp>
c0002519:	31 d2                	xor    edx,edx
c000251b:	85 c0                	test   eax,eax
c000251d:	74 29                	je     c0002548 <check_fs+0xb3>
c000251f:	ba 2c 9f 02 c0       	mov    edx,0xc0029f2c
c0002524:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000252a:	b9 05 00 00 00       	mov    ecx,0x5
c000252f:	e8 ae f7 ff ff       	call   c0001ce2 <mem_cmp>
c0002534:	31 d2                	xor    edx,edx
c0002536:	85 c0                	test   eax,eax
c0002538:	74 0e                	je     c0002548 <check_fs+0xb3>
c000253a:	31 d2                	xor    edx,edx
c000253c:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002543:	0f 95 c2             	setne  dl
c0002546:	01 d2                	add    edx,edx
c0002548:	89 d0                	mov    eax,edx
c000254a:	83 c4 08             	add    esp,0x8
c000254d:	5b                   	pop    ebx
c000254e:	c3                   	ret    

c000254f <find_volume>:
c000254f:	55                   	push   ebp
c0002550:	31 c9                	xor    ecx,ecx
c0002552:	57                   	push   edi
c0002553:	56                   	push   esi
c0002554:	89 d6                	mov    esi,edx
c0002556:	53                   	push   ebx
c0002557:	31 d2                	xor    edx,edx
c0002559:	83 ec 3c             	sub    esp,0x3c
c000255c:	89 c3                	mov    ebx,eax
c000255e:	e8 32 ff ff ff       	call   c0002495 <check_fs>
c0002563:	83 f8 02             	cmp    eax,0x2
c0002566:	74 0e                	je     c0002576 <find_volume+0x27>
c0002568:	0f 87 5d 01 00 00    	ja     c00026cb <find_volume+0x17c>
c000256e:	85 f6                	test   esi,esi
c0002570:	0f 84 55 01 00 00    	je     c00026cb <find_volume+0x17c>
c0002576:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000257d:	0f 85 dd 00 00 00    	jne    c0002660 <find_volume+0x111>
c0002583:	31 c9                	xor    ecx,ecx
c0002585:	ba 01 00 00 00       	mov    edx,0x1
c000258a:	89 d8                	mov    eax,ebx
c000258c:	e8 90 fe ff ff       	call   c0002421 <move_window>
c0002591:	85 c0                	test   eax,eax
c0002593:	74 0a                	je     c000259f <find_volume+0x50>
c0002595:	b8 04 00 00 00       	mov    eax,0x4
c000259a:	e9 2c 01 00 00       	jmp    c00026cb <find_volume+0x17c>
c000259f:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025a2:	89 e8                	mov    eax,ebp
c00025a4:	e8 f6 fc ff ff       	call   c000229f <test_gpt_header>
c00025a9:	85 c0                	test   eax,eax
c00025ab:	75 0a                	jne    c00025b7 <find_volume+0x68>
c00025ad:	b8 03 00 00 00       	mov    eax,0x3
c00025b2:	e9 14 01 00 00       	jmp    c00026cb <find_volume+0x17c>
c00025b7:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025bd:	e8 8e f6 ff ff       	call   c0001c50 <ld_dword>
c00025c2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025c6:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025cc:	e8 97 f6 ff ff       	call   c0001c68 <ld_qword>
c00025d1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025dd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025e1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025e9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025ed:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025f1:	74 ba                	je     c00025ad <find_volume+0x5e>
c00025f3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025f7:	31 c9                	xor    ecx,ecx
c00025f9:	c1 e7 07             	shl    edi,0x7
c00025fc:	89 d8                	mov    eax,ebx
c00025fe:	89 fa                	mov    edx,edi
c0002600:	c1 ea 09             	shr    edx,0x9
c0002603:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002607:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c000260b:	e8 11 fe ff ff       	call   c0002421 <move_window>
c0002610:	85 c0                	test   eax,eax
c0002612:	75 81                	jne    c0002595 <find_volume+0x46>
c0002614:	81 e7 80 01 00 00    	and    edi,0x180
c000261a:	b9 10 00 00 00       	mov    ecx,0x10
c000261f:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002623:	ba 10 9f 02 c0       	mov    edx,0xc0029f10
c0002628:	e8 b5 f6 ff ff       	call   c0001ce2 <mem_cmp>
c000262d:	85 c0                	test   eax,eax
c000262f:	75 29                	jne    c000265a <find_volume+0x10b>
c0002631:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002635:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002639:	e8 2a f6 ff ff       	call   c0001c68 <ld_qword>
c000263e:	89 d1                	mov    ecx,edx
c0002640:	89 c2                	mov    edx,eax
c0002642:	89 d8                	mov    eax,ebx
c0002644:	e8 4c fe ff ff       	call   c0002495 <check_fs>
c0002649:	85 f6                	test   esi,esi
c000264b:	75 07                	jne    c0002654 <find_volume+0x105>
c000264d:	83 f8 01             	cmp    eax,0x1
c0002650:	77 08                	ja     c000265a <find_volume+0x10b>
c0002652:	eb 77                	jmp    c00026cb <find_volume+0x17c>
c0002654:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002658:	74 71                	je     c00026cb <find_volume+0x17c>
c000265a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000265e:	eb 89                	jmp    c00025e9 <find_volume+0x9a>
c0002660:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002664:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000266a:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002670:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002674:	89 cd                	mov    ebp,ecx
c0002676:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000267a:	89 f8                	mov    eax,edi
c000267c:	83 c7 10             	add    edi,0x10
c000267f:	e8 cc f5 ff ff       	call   c0001c50 <ld_dword>
c0002684:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002688:	89 01                	mov    DWORD PTR [ecx],eax
c000268a:	83 c1 04             	add    ecx,0x4
c000268d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002691:	75 e3                	jne    c0002676 <find_volume+0x127>
c0002693:	31 ff                	xor    edi,edi
c0002695:	85 f6                	test   esi,esi
c0002697:	74 03                	je     c000269c <find_volume+0x14d>
c0002699:	8d 7e ff             	lea    edi,[esi-0x1]
c000269c:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026a0:	85 d2                	test   edx,edx
c00026a2:	74 14                	je     c00026b8 <find_volume+0x169>
c00026a4:	31 c9                	xor    ecx,ecx
c00026a6:	89 d8                	mov    eax,ebx
c00026a8:	e8 e8 fd ff ff       	call   c0002495 <check_fs>
c00026ad:	83 f8 01             	cmp    eax,0x1
c00026b0:	76 19                	jbe    c00026cb <find_volume+0x17c>
c00026b2:	85 f6                	test   esi,esi
c00026b4:	74 0f                	je     c00026c5 <find_volume+0x176>
c00026b6:	eb 13                	jmp    c00026cb <find_volume+0x17c>
c00026b8:	85 f6                	test   esi,esi
c00026ba:	0f 85 ed fe ff ff    	jne    c00025ad <find_volume+0x5e>
c00026c0:	b8 03 00 00 00       	mov    eax,0x3
c00026c5:	47                   	inc    edi
c00026c6:	83 ff 03             	cmp    edi,0x3
c00026c9:	76 d1                	jbe    c000269c <find_volume+0x14d>
c00026cb:	83 c4 3c             	add    esp,0x3c
c00026ce:	5b                   	pop    ebx
c00026cf:	5e                   	pop    esi
c00026d0:	5f                   	pop    edi
c00026d1:	5d                   	pop    ebp
c00026d2:	c3                   	ret    

c00026d3 <mount_volume>:
c00026d3:	55                   	push   ebp
c00026d4:	57                   	push   edi
c00026d5:	89 cf                	mov    edi,ecx
c00026d7:	56                   	push   esi
c00026d8:	53                   	push   ebx
c00026d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00026de:	83 ec 3c             	sub    esp,0x3c
c00026e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026e7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026eb:	e8 35 fb ff ff       	call   c0002225 <get_ldnumber>
c00026f0:	85 c0                	test   eax,eax
c00026f2:	0f 88 3a 05 00 00    	js     c0002c32 <mount_volume+0x55f>
c00026f8:	8b 2c 85 00 f0 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1000]
c00026ff:	89 c6                	mov    esi,eax
c0002701:	bb 0c 00 00 00       	mov    ebx,0xc
c0002706:	85 ed                	test   ebp,ebp
c0002708:	0f 84 24 05 00 00    	je     c0002c32 <mount_volume+0x55f>
c000270e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002712:	83 e7 fe             	and    edi,0xfffffffe
c0002715:	89 2a                	mov    DWORD PTR [edx],ebp
c0002717:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c000271b:	74 32                	je     c000274f <mount_volume+0x7c>
c000271d:	83 ec 0c             	sub    esp,0xc
c0002720:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002724:	50                   	push   eax
c0002725:	e8 c8 f4 ff ff       	call   c0001bf2 <disk_status>
c000272a:	83 c4 10             	add    esp,0x10
c000272d:	a8 01                	test   al,0x1
c000272f:	75 1e                	jne    c000274f <mount_volume+0x7c>
c0002731:	31 db                	xor    ebx,ebx
c0002733:	89 f9                	mov    ecx,edi
c0002735:	84 c9                	test   cl,cl
c0002737:	0f 84 f5 04 00 00    	je     c0002c32 <mount_volume+0x55f>
c000273d:	a8 04                	test   al,0x4
c000273f:	0f 84 ed 04 00 00    	je     c0002c32 <mount_volume+0x55f>
c0002745:	bb 0a 00 00 00       	mov    ebx,0xa
c000274a:	e9 e3 04 00 00       	jmp    c0002c32 <mount_volume+0x55f>
c000274f:	83 ec 0c             	sub    esp,0xc
c0002752:	89 f0                	mov    eax,esi
c0002754:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002758:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000275b:	0f b6 f0             	movzx  esi,al
c000275e:	bb 03 00 00 00       	mov    ebx,0x3
c0002763:	56                   	push   esi
c0002764:	e8 8c f4 ff ff       	call   c0001bf5 <disk_initialize>
c0002769:	83 c4 10             	add    esp,0x10
c000276c:	a8 01                	test   al,0x1
c000276e:	0f 85 be 04 00 00    	jne    c0002c32 <mount_volume+0x55f>
c0002774:	89 f9                	mov    ecx,edi
c0002776:	84 c9                	test   cl,cl
c0002778:	74 04                	je     c000277e <mount_volume+0xab>
c000277a:	a8 04                	test   al,0x4
c000277c:	75 c7                	jne    c0002745 <mount_volume+0x72>
c000277e:	31 d2                	xor    edx,edx
c0002780:	89 e8                	mov    eax,ebp
c0002782:	e8 c8 fd ff ff       	call   c000254f <find_volume>
c0002787:	83 f8 04             	cmp    eax,0x4
c000278a:	75 0a                	jne    c0002796 <mount_volume+0xc3>
c000278c:	bb 01 00 00 00       	mov    ebx,0x1
c0002791:	e9 9c 04 00 00       	jmp    c0002c32 <mount_volume+0x55f>
c0002796:	83 f8 01             	cmp    eax,0x1
c0002799:	76 0a                	jbe    c00027a5 <mount_volume+0xd2>
c000279b:	bb 0d 00 00 00       	mov    ebx,0xd
c00027a0:	e9 8d 04 00 00       	jmp    c0002c32 <mount_volume+0x55f>
c00027a5:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027a8:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027af:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027b3:	75 17                	jne    c00027cc <mount_volume+0xf9>
c00027b5:	b8 0b 00 00 00       	mov    eax,0xb
c00027ba:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027bf:	75 da                	jne    c000279b <mount_volume+0xc8>
c00027c1:	40                   	inc    eax
c00027c2:	83 f8 40             	cmp    eax,0x40
c00027c5:	75 f3                	jne    c00027ba <mount_volume+0xe7>
c00027c7:	e9 5a 02 00 00       	jmp    c0002a26 <mount_volume+0x353>
c00027cc:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027cf:	e8 6f f4 ff ff       	call   c0001c43 <ld_word>
c00027d4:	66 3d 00 02          	cmp    ax,0x200
c00027d8:	75 c1                	jne    c000279b <mount_volume+0xc8>
c00027da:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027dd:	e8 61 f4 ff ff       	call   c0001c43 <ld_word>
c00027e2:	0f b7 c0             	movzx  eax,ax
c00027e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027e9:	85 c0                	test   eax,eax
c00027eb:	75 0c                	jne    c00027f9 <mount_volume+0x126>
c00027ed:	8d 45 78             	lea    eax,[ebp+0x78]
c00027f0:	e8 5b f4 ff ff       	call   c0001c50 <ld_dword>
c00027f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027fd:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002800:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002803:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002807:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000280a:	48                   	dec    eax
c000280b:	3c 01                	cmp    al,0x1
c000280d:	77 8c                	ja     c000279b <mount_volume+0xc8>
c000280f:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002813:	89 c3                	mov    ebx,eax
c0002815:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002819:	66 85 c0             	test   ax,ax
c000281c:	0f 84 79 ff ff ff    	je     c000279b <mount_volume+0xc8>
c0002822:	8d 40 ff             	lea    eax,[eax-0x1]
c0002825:	85 d8                	test   eax,ebx
c0002827:	0f 85 6e ff ff ff    	jne    c000279b <mount_volume+0xc8>
c000282d:	8d 45 65             	lea    eax,[ebp+0x65]
c0002830:	e8 0e f4 ff ff       	call   c0001c43 <ld_word>
c0002835:	89 c7                	mov    edi,eax
c0002837:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000283b:	a8 0f                	test   al,0xf
c000283d:	0f 85 58 ff ff ff    	jne    c000279b <mount_volume+0xc8>
c0002843:	8d 45 67             	lea    eax,[ebp+0x67]
c0002846:	e8 f8 f3 ff ff       	call   c0001c43 <ld_word>
c000284b:	0f b7 f0             	movzx  esi,ax
c000284e:	85 f6                	test   esi,esi
c0002850:	75 0a                	jne    c000285c <mount_volume+0x189>
c0002852:	8d 45 74             	lea    eax,[ebp+0x74]
c0002855:	e8 f6 f3 ff ff       	call   c0001c50 <ld_dword>
c000285a:	89 c6                	mov    esi,eax
c000285c:	8d 45 62             	lea    eax,[ebp+0x62]
c000285f:	e8 df f3 ff ff       	call   c0001c43 <ld_word>
c0002864:	66 85 c0             	test   ax,ax
c0002867:	0f 84 2e ff ff ff    	je     c000279b <mount_volume+0xc8>
c000286d:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002872:	0f b7 c8             	movzx  ecx,ax
c0002875:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000287a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000287e:	89 fa                	mov    edx,edi
c0002880:	66 c1 ea 04          	shr    dx,0x4
c0002884:	0f b7 d2             	movzx  edx,dx
c0002887:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000288b:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000288e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002892:	39 c6                	cmp    esi,eax
c0002894:	0f 82 01 ff ff ff    	jb     c000279b <mount_volume+0xc8>
c000289a:	29 c6                	sub    esi,eax
c000289c:	31 d2                	xor    edx,edx
c000289e:	89 f0                	mov    eax,esi
c00028a0:	f7 f3                	div    ebx
c00028a2:	39 de                	cmp    esi,ebx
c00028a4:	0f 82 f1 fe ff ff    	jb     c000279b <mount_volume+0xc8>
c00028aa:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028af:	0f 87 e6 fe ff ff    	ja     c000279b <mount_volume+0xc8>
c00028b5:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028ba:	0f 86 63 03 00 00    	jbe    c0002c23 <mount_volume+0x550>
c00028c0:	bb 03 00 00 00       	mov    ebx,0x3
c00028c5:	8d 70 02             	lea    esi,[eax+0x2]
c00028c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028d0:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028d3:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028d6:	31 d2                	xor    edx,edx
c00028d8:	89 c8                	mov    eax,ecx
c00028da:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028e9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028ed:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028f0:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028f7:	31 d2                	xor    edx,edx
c00028f9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028fd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002901:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002904:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002907:	83 fb 03             	cmp    ebx,0x3
c000290a:	75 2b                	jne    c0002937 <mount_volume+0x264>
c000290c:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000290f:	e8 2f f3 ff ff       	call   c0001c43 <ld_word>
c0002914:	66 09 c7             	or     di,ax
c0002917:	0f 85 7e fe ff ff    	jne    c000279b <mount_volume+0xc8>
c000291d:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002923:	c1 e6 02             	shl    esi,0x2
c0002926:	e8 25 f3 ff ff       	call   c0001c50 <ld_dword>
c000292b:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	eb 30                	jmp    c0002967 <mount_volume+0x294>
c0002937:	66 85 ff             	test   di,di
c000293a:	0f 84 5b fe ff ff    	je     c000279b <mount_volume+0xc8>
c0002940:	31 d2                	xor    edx,edx
c0002942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002946:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000294a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000294e:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002951:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002954:	83 fb 02             	cmp    ebx,0x2
c0002957:	75 04                	jne    c000295d <mount_volume+0x28a>
c0002959:	01 f6                	add    esi,esi
c000295b:	eb 0a                	jmp    c0002967 <mount_volume+0x294>
c000295d:	8d 04 76             	lea    eax,[esi+esi*2]
c0002960:	83 e6 01             	and    esi,0x1
c0002963:	d1 e8                	shr    eax,1
c0002965:	01 c6                	add    esi,eax
c0002967:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000296d:	c1 ee 09             	shr    esi,0x9
c0002970:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002974:	0f 87 21 fe ff ff    	ja     c000279b <mount_volume+0xc8>
c000297a:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002981:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002988:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000298c:	83 fb 03             	cmp    ebx,0x3
c000298f:	75 7a                	jne    c0002a0b <mount_volume+0x338>
c0002991:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002997:	e8 a7 f2 ff ff       	call   c0001c43 <ld_word>
c000299c:	66 48                	dec    ax
c000299e:	75 6b                	jne    c0002a0b <mount_volume+0x338>
c00029a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029a8:	83 c2 01             	add    edx,0x1
c00029ab:	89 e8                	mov    eax,ebp
c00029ad:	83 d1 00             	adc    ecx,0x0
c00029b0:	e8 6c fa ff ff       	call   c0002421 <move_window>
c00029b5:	85 c0                	test   eax,eax
c00029b7:	75 52                	jne    c0002a0b <mount_volume+0x338>
c00029b9:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029bd:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029c3:	e8 7b f2 ff ff       	call   c0001c43 <ld_word>
c00029c8:	66 3d 55 aa          	cmp    ax,0xaa55
c00029cc:	75 3d                	jne    c0002a0b <mount_volume+0x338>
c00029ce:	8d 45 54             	lea    eax,[ebp+0x54]
c00029d1:	e8 7a f2 ff ff       	call   c0001c50 <ld_dword>
c00029d6:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029db:	75 2e                	jne    c0002a0b <mount_volume+0x338>
c00029dd:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029e3:	e8 68 f2 ff ff       	call   c0001c50 <ld_dword>
c00029e8:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029ed:	75 1c                	jne    c0002a0b <mount_volume+0x338>
c00029ef:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029f5:	e8 56 f2 ff ff       	call   c0001c50 <ld_dword>
c00029fa:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029fd:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a03:	e8 48 f2 ff ff       	call   c0001c50 <ld_dword>
c0002a08:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a0b:	66 a1 e0 ef 02 c0    	mov    ax,ds:0xc002efe0
c0002a11:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a14:	40                   	inc    eax
c0002a15:	31 db                	xor    ebx,ebx
c0002a17:	66 a3 e0 ef 02 c0    	mov    ds:0xc002efe0,ax
c0002a1d:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a21:	e9 0c 02 00 00       	jmp    c0002c32 <mount_volume+0x55f>
c0002a26:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a2c:	e8 12 f2 ff ff       	call   c0001c43 <ld_word>
c0002a31:	66 3d 00 01          	cmp    ax,0x100
c0002a35:	0f 85 60 fd ff ff    	jne    c000279b <mount_volume+0xc8>
c0002a3b:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a42:	0f 85 53 fd ff ff    	jne    c000279b <mount_volume+0xc8>
c0002a48:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a4e:	e8 15 f2 ff ff       	call   c0001c68 <ld_qword>
c0002a53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a5b:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a61:	e8 ea f1 ff ff       	call   c0001c50 <ld_dword>
c0002a66:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a69:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a6f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a72:	fe c8                	dec    al
c0002a74:	0f 85 21 fd ff ff    	jne    c000279b <mount_volume+0xc8>
c0002a7a:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a81:	bb 01 00 00 00       	mov    ebx,0x1
c0002a86:	d3 e3                	shl    ebx,cl
c0002a88:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a8c:	66 85 db             	test   bx,bx
c0002a8f:	0f 84 06 fd ff ff    	je     c000279b <mount_volume+0xc8>
c0002a95:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a9b:	e8 b0 f1 ff ff       	call   c0001c50 <ld_dword>
c0002aa0:	89 c6                	mov    esi,eax
c0002aa2:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002aa7:	0f 87 ee fc ff ff    	ja     c000279b <mount_volume+0xc8>
c0002aad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ab1:	8d 40 02             	lea    eax,[eax+0x2]
c0002ab4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ab7:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002aba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002abe:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002ac1:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ac7:	e8 84 f1 ff ff       	call   c0001c50 <ld_dword>
c0002acc:	31 d2                	xor    edx,edx
c0002ace:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ad2:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ad6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ada:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ade:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ae1:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ae4:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002aea:	e8 61 f1 ff ff       	call   c0001c50 <ld_dword>
c0002aef:	31 d2                	xor    edx,edx
c0002af1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002af5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002afd:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b00:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b03:	0f b7 c3             	movzx  eax,bx
c0002b06:	31 d2                	xor    edx,edx
c0002b08:	0f af f0             	imul   esi,eax
c0002b0b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b0f:	89 f0                	mov    eax,esi
c0002b11:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b15:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b19:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b1d:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b21:	39 c1                	cmp    ecx,eax
c0002b23:	89 df                	mov    edi,ebx
c0002b25:	19 d7                	sbb    edi,edx
c0002b27:	0f 82 6e fc ff ff    	jb     c000279b <mount_volume+0xc8>
c0002b2d:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b33:	31 db                	xor    ebx,ebx
c0002b35:	e8 16 f1 ff ff       	call   c0001c50 <ld_dword>
c0002b3a:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b41:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b44:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b4c:	85 db                	test   ebx,ebx
c0002b4e:	75 39                	jne    c0002b89 <mount_volume+0x4b6>
c0002b50:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b54:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b58:	0f 86 3d fc ff ff    	jbe    c000279b <mount_volume+0xc8>
c0002b5e:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b61:	31 ff                	xor    edi,edi
c0002b63:	89 e8                	mov    eax,ebp
c0002b65:	e8 72 f3 ff ff       	call   c0001edc <clst2sect>
c0002b6a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b6e:	01 c6                	add    esi,eax
c0002b70:	89 e8                	mov    eax,ebp
c0002b72:	11 d7                	adc    edi,edx
c0002b74:	89 f2                	mov    edx,esi
c0002b76:	89 f9                	mov    ecx,edi
c0002b78:	e8 a4 f8 ff ff       	call   c0002421 <move_window>
c0002b7d:	85 c0                	test   eax,eax
c0002b7f:	0f 85 07 fc ff ff    	jne    c000278c <mount_volume+0xb9>
c0002b85:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b89:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b8e:	74 0b                	je     c0002b9b <mount_volume+0x4c8>
c0002b90:	83 c3 20             	add    ebx,0x20
c0002b93:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b99:	eb b1                	jmp    c0002b4c <mount_volume+0x479>
c0002b9b:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b9e:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002ba2:	e8 a9 f0 ff ff       	call   c0001c50 <ld_dword>
c0002ba7:	89 c3                	mov    ebx,eax
c0002ba9:	83 f8 01             	cmp    eax,0x1
c0002bac:	0f 86 e9 fb ff ff    	jbe    c000279b <mount_volume+0xc8>
c0002bb2:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bb5:	0f 86 e0 fb ff ff    	jbe    c000279b <mount_volume+0xc8>
c0002bbb:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bbe:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002bc2:	0f af c2             	imul   eax,edx
c0002bc5:	31 d2                	xor    edx,edx
c0002bc7:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bca:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bcd:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bd0:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bd3:	31 c9                	xor    ecx,ecx
c0002bd5:	89 da                	mov    edx,ebx
c0002bd7:	89 e8                	mov    eax,ebp
c0002bd9:	c1 ea 07             	shr    edx,0x7
c0002bdc:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bdf:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002be2:	e8 3a f8 ff ff       	call   c0002421 <move_window>
c0002be7:	85 c0                	test   eax,eax
c0002be9:	0f 85 9d fb ff ff    	jne    c000278c <mount_volume+0xb9>
c0002bef:	89 d8                	mov    eax,ebx
c0002bf1:	83 e0 7f             	and    eax,0x7f
c0002bf4:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bf7:	e8 54 f0 ff ff       	call   c0001c50 <ld_dword>
c0002bfc:	83 f8 ff             	cmp    eax,0xffffffff
c0002bff:	74 0a                	je     c0002c0b <mount_volume+0x538>
c0002c01:	43                   	inc    ebx
c0002c02:	39 d8                	cmp    eax,ebx
c0002c04:	74 cd                	je     c0002bd3 <mount_volume+0x500>
c0002c06:	e9 90 fb ff ff       	jmp    c000279b <mount_volume+0xc8>
c0002c0b:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c12:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c19:	bb 04 00 00 00       	mov    ebx,0x4
c0002c1e:	e9 e8 fd ff ff       	jmp    c0002a0b <mount_volume+0x338>
c0002c23:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c28:	19 db                	sbb    ebx,ebx
c0002c2a:	83 c3 02             	add    ebx,0x2
c0002c2d:	e9 93 fc ff ff       	jmp    c00028c5 <mount_volume+0x1f2>
c0002c32:	83 c4 3c             	add    esp,0x3c
c0002c35:	89 d8                	mov    eax,ebx
c0002c37:	5b                   	pop    ebx
c0002c38:	5e                   	pop    esi
c0002c39:	5f                   	pop    edi
c0002c3a:	5d                   	pop    ebp
c0002c3b:	c3                   	ret    

c0002c3c <find_bitmap>:
c0002c3c:	55                   	push   ebp
c0002c3d:	57                   	push   edi
c0002c3e:	89 c7                	mov    edi,eax
c0002c40:	56                   	push   esi
c0002c41:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c44:	53                   	push   ebx
c0002c45:	83 ec 1c             	sub    esp,0x1c
c0002c48:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c4b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c4f:	83 e8 02             	sub    eax,0x2
c0002c52:	39 f0                	cmp    eax,esi
c0002c54:	77 02                	ja     c0002c58 <find_bitmap+0x1c>
c0002c56:	31 f6                	xor    esi,esi
c0002c58:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c5c:	89 f3                	mov    ebx,esi
c0002c5e:	31 ed                	xor    ebp,ebp
c0002c60:	31 c9                	xor    ecx,ecx
c0002c62:	89 da                	mov    edx,ebx
c0002c64:	89 f8                	mov    eax,edi
c0002c66:	c1 ea 0c             	shr    edx,0xc
c0002c69:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c6c:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c6f:	e8 ad f7 ff ff       	call   c0002421 <move_window>
c0002c74:	85 c0                	test   eax,eax
c0002c76:	75 68                	jne    c0002ce0 <find_bitmap+0xa4>
c0002c78:	89 da                	mov    edx,ebx
c0002c7a:	89 d9                	mov    ecx,ebx
c0002c7c:	c1 ea 03             	shr    edx,0x3
c0002c7f:	83 e1 07             	and    ecx,0x7
c0002c82:	b8 01 00 00 00       	mov    eax,0x1
c0002c87:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c8d:	d3 e0                	shl    eax,cl
c0002c8f:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c92:	83 e9 02             	sub    ecx,0x2
c0002c95:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c99:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c9d:	43                   	inc    ebx
c0002c9e:	21 c1                	and    ecx,eax
c0002ca0:	d1 e0                	shl    eax,1
c0002ca2:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002ca6:	77 09                	ja     c0002cb1 <find_bitmap+0x75>
c0002ca8:	31 db                	xor    ebx,ebx
c0002caa:	ba 00 02 00 00       	mov    edx,0x200
c0002caf:	31 c0                	xor    eax,eax
c0002cb1:	84 c9                	test   cl,cl
c0002cb3:	75 10                	jne    c0002cc5 <find_bitmap+0x89>
c0002cb5:	45                   	inc    ebp
c0002cb6:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cba:	75 0f                	jne    c0002ccb <find_bitmap+0x8f>
c0002cbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cc0:	83 c0 02             	add    eax,0x2
c0002cc3:	eb 22                	jmp    c0002ce7 <find_bitmap+0xab>
c0002cc5:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cc9:	31 ed                	xor    ebp,ebp
c0002ccb:	39 de                	cmp    esi,ebx
c0002ccd:	74 16                	je     c0002ce5 <find_bitmap+0xa9>
c0002ccf:	84 c0                	test   al,al
c0002cd1:	75 c6                	jne    c0002c99 <find_bitmap+0x5d>
c0002cd3:	42                   	inc    edx
c0002cd4:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cda:	77 84                	ja     c0002c60 <find_bitmap+0x24>
c0002cdc:	b0 01                	mov    al,0x1
c0002cde:	eb b9                	jmp    c0002c99 <find_bitmap+0x5d>
c0002ce0:	83 c8 ff             	or     eax,0xffffffff
c0002ce3:	eb 02                	jmp    c0002ce7 <find_bitmap+0xab>
c0002ce5:	31 c0                	xor    eax,eax
c0002ce7:	83 c4 1c             	add    esp,0x1c
c0002cea:	5b                   	pop    ebx
c0002ceb:	5e                   	pop    esi
c0002cec:	5f                   	pop    edi
c0002ced:	5d                   	pop    ebp
c0002cee:	c3                   	ret    

c0002cef <change_bitmap>:
c0002cef:	55                   	push   ebp
c0002cf0:	89 cd                	mov    ebp,ecx
c0002cf2:	57                   	push   edi
c0002cf3:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cf6:	56                   	push   esi
c0002cf7:	89 c7                	mov    edi,eax
c0002cf9:	53                   	push   ebx
c0002cfa:	89 c8                	mov    eax,ecx
c0002cfc:	83 ec 1c             	sub    esp,0x1c
c0002cff:	31 d2                	xor    edx,edx
c0002d01:	89 ce                	mov    esi,ecx
c0002d03:	c1 e8 0c             	shr    eax,0xc
c0002d06:	bb 01 00 00 00       	mov    ebx,0x1
c0002d0b:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d0e:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d11:	c1 ee 03             	shr    esi,0x3
c0002d14:	83 e1 07             	and    ecx,0x7
c0002d17:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d1d:	d3 e3                	shl    ebx,cl
c0002d1f:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d23:	89 c1                	mov    ecx,eax
c0002d25:	89 d3                	mov    ebx,edx
c0002d27:	83 c1 01             	add    ecx,0x1
c0002d2a:	83 d3 00             	adc    ebx,0x0
c0002d2d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d31:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d35:	89 d1                	mov    ecx,edx
c0002d37:	89 c2                	mov    edx,eax
c0002d39:	89 f8                	mov    eax,edi
c0002d3b:	e8 e1 f6 ff ff       	call   c0002421 <move_window>
c0002d40:	89 c1                	mov    ecx,eax
c0002d42:	85 c0                	test   eax,eax
c0002d44:	75 48                	jne    c0002d8e <change_bitmap+0x9f>
c0002d46:	31 d2                	xor    edx,edx
c0002d48:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d4c:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d50:	0f 95 c2             	setne  dl
c0002d53:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d57:	74 3c                	je     c0002d95 <change_bitmap+0xa6>
c0002d59:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d5d:	4d                   	dec    ebp
c0002d5e:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d62:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d66:	74 32                	je     c0002d9a <change_bitmap+0xab>
c0002d68:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d6c:	75 d8                	jne    c0002d46 <change_bitmap+0x57>
c0002d6e:	8d 46 01             	lea    eax,[esi+0x1]
c0002d71:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d76:	89 c3                	mov    ebx,eax
c0002d78:	31 f6                	xor    esi,esi
c0002d7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d82:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d88:	74 99                	je     c0002d23 <change_bitmap+0x34>
c0002d8a:	89 de                	mov    esi,ebx
c0002d8c:	eb b8                	jmp    c0002d46 <change_bitmap+0x57>
c0002d8e:	b9 01 00 00 00       	mov    ecx,0x1
c0002d93:	eb 05                	jmp    c0002d9a <change_bitmap+0xab>
c0002d95:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9a:	83 c4 1c             	add    esp,0x1c
c0002d9d:	89 c8                	mov    eax,ecx
c0002d9f:	5b                   	pop    ebx
c0002da0:	5e                   	pop    esi
c0002da1:	5f                   	pop    edi
c0002da2:	5d                   	pop    ebp
c0002da3:	c3                   	ret    

c0002da4 <put_fat>:
c0002da4:	83 fa 01             	cmp    edx,0x1
c0002da7:	0f 86 7b 01 00 00    	jbe    c0002f28 <put_fat+0x184>
c0002dad:	55                   	push   ebp
c0002dae:	57                   	push   edi
c0002daf:	89 cf                	mov    edi,ecx
c0002db1:	56                   	push   esi
c0002db2:	b9 02 00 00 00       	mov    ecx,0x2
c0002db7:	53                   	push   ebx
c0002db8:	89 c6                	mov    esi,eax
c0002dba:	83 ec 1c             	sub    esp,0x1c
c0002dbd:	89 d3                	mov    ebx,edx
c0002dbf:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002dc2:	0f 86 68 01 00 00    	jbe    c0002f30 <put_fat+0x18c>
c0002dc8:	8a 00                	mov    al,BYTE PTR [eax]
c0002dca:	3c 02                	cmp    al,0x2
c0002dcc:	0f 84 c7 00 00 00    	je     c0002e99 <put_fat+0xf5>
c0002dd2:	77 09                	ja     c0002ddd <put_fat+0x39>
c0002dd4:	fe c8                	dec    al
c0002dd6:	74 17                	je     c0002def <put_fat+0x4b>
c0002dd8:	e9 53 01 00 00       	jmp    c0002f30 <put_fat+0x18c>
c0002ddd:	b9 02 00 00 00       	mov    ecx,0x2
c0002de2:	3c 04                	cmp    al,0x4
c0002de4:	0f 86 e1 00 00 00    	jbe    c0002ecb <put_fat+0x127>
c0002dea:	e9 41 01 00 00       	jmp    c0002f30 <put_fat+0x18c>
c0002def:	89 d5                	mov    ebp,edx
c0002df1:	31 c9                	xor    ecx,ecx
c0002df3:	d1 ed                	shr    ebp,1
c0002df5:	89 f0                	mov    eax,esi
c0002df7:	01 d5                	add    ebp,edx
c0002df9:	89 ea                	mov    edx,ebp
c0002dfb:	c1 ea 09             	shr    edx,0x9
c0002dfe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e01:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e04:	e8 18 f6 ff ff       	call   c0002421 <move_window>
c0002e09:	89 c1                	mov    ecx,eax
c0002e0b:	85 c0                	test   eax,eax
c0002e0d:	0f 85 1d 01 00 00    	jne    c0002f30 <put_fat+0x18c>
c0002e13:	8d 46 54             	lea    eax,[esi+0x54]
c0002e16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e1a:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e1d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e27:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e2b:	89 f8                	mov    eax,edi
c0002e2d:	83 e3 01             	and    ebx,0x1
c0002e30:	74 0d                	je     c0002e3f <put_fat+0x9b>
c0002e32:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e35:	89 fa                	mov    edx,edi
c0002e37:	83 e0 0f             	and    eax,0xf
c0002e3a:	c1 e2 04             	shl    edx,0x4
c0002e3d:	09 d0                	or     eax,edx
c0002e3f:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e42:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e46:	31 c9                	xor    ecx,ecx
c0002e48:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e4c:	c1 ea 09             	shr    edx,0x9
c0002e4f:	89 f0                	mov    eax,esi
c0002e51:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e54:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e57:	e8 c5 f5 ff ff       	call   c0002421 <move_window>
c0002e5c:	89 c1                	mov    ecx,eax
c0002e5e:	85 c0                	test   eax,eax
c0002e60:	0f 85 ca 00 00 00    	jne    c0002f30 <put_fat+0x18c>
c0002e66:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e6a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e70:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e74:	85 db                	test   ebx,ebx
c0002e76:	74 07                	je     c0002e7f <put_fat+0xdb>
c0002e78:	c1 ef 04             	shr    edi,0x4
c0002e7b:	89 fa                	mov    edx,edi
c0002e7d:	eb 0e                	jmp    c0002e8d <put_fat+0xe9>
c0002e7f:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e82:	c1 ef 08             	shr    edi,0x8
c0002e85:	83 e2 f0             	and    edx,0xfffffff0
c0002e88:	83 e7 0f             	and    edi,0xf
c0002e8b:	09 fa                	or     edx,edi
c0002e8d:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e90:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e94:	e9 97 00 00 00       	jmp    c0002f30 <put_fat+0x18c>
c0002e99:	31 c9                	xor    ecx,ecx
c0002e9b:	c1 ea 08             	shr    edx,0x8
c0002e9e:	89 f0                	mov    eax,esi
c0002ea0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ea3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ea6:	e8 76 f5 ff ff       	call   c0002421 <move_window>
c0002eab:	89 c1                	mov    ecx,eax
c0002ead:	85 c0                	test   eax,eax
c0002eaf:	75 7f                	jne    c0002f30 <put_fat+0x18c>
c0002eb1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002eb5:	01 db                	add    ebx,ebx
c0002eb7:	0f b7 d7             	movzx  edx,di
c0002eba:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ec0:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ec4:	e8 ec ed ff ff       	call   c0001cb5 <st_word>
c0002ec9:	eb 53                	jmp    c0002f1e <put_fat+0x17a>
c0002ecb:	31 c9                	xor    ecx,ecx
c0002ecd:	c1 ea 07             	shr    edx,0x7
c0002ed0:	89 f0                	mov    eax,esi
c0002ed2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ed5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ed8:	e8 44 f5 ff ff       	call   c0002421 <move_window>
c0002edd:	89 c1                	mov    ecx,eax
c0002edf:	85 c0                	test   eax,eax
c0002ee1:	75 4d                	jne    c0002f30 <put_fat+0x18c>
c0002ee3:	c1 e3 02             	shl    ebx,0x2
c0002ee6:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002eec:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002eef:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ef3:	74 1c                	je     c0002f11 <put_fat+0x16d>
c0002ef5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ef9:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002eff:	89 d8                	mov    eax,ebx
c0002f01:	e8 4a ed ff ff       	call   c0001c50 <ld_dword>
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f0f:	09 c7                	or     edi,eax
c0002f11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f15:	89 fa                	mov    edx,edi
c0002f17:	89 d8                	mov    eax,ebx
c0002f19:	e8 9b ed ff ff       	call   c0001cb9 <st_dword>
c0002f1e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f26:	eb 08                	jmp    c0002f30 <put_fat+0x18c>
c0002f28:	b9 02 00 00 00       	mov    ecx,0x2
c0002f2d:	89 c8                	mov    eax,ecx
c0002f2f:	c3                   	ret    
c0002f30:	83 c4 1c             	add    esp,0x1c
c0002f33:	89 c8                	mov    eax,ecx
c0002f35:	5b                   	pop    ebx
c0002f36:	5e                   	pop    esi
c0002f37:	5f                   	pop    edi
c0002f38:	5d                   	pop    ebp
c0002f39:	c3                   	ret    

c0002f3a <fill_last_frag>:
c0002f3a:	57                   	push   edi
c0002f3b:	89 cf                	mov    edi,ecx
c0002f3d:	56                   	push   esi
c0002f3e:	89 d6                	mov    esi,edx
c0002f40:	53                   	push   ebx
c0002f41:	89 c3                	mov    ebx,eax
c0002f43:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f46:	85 c0                	test   eax,eax
c0002f48:	74 21                	je     c0002f6b <fill_last_frag+0x31>
c0002f4a:	89 f9                	mov    ecx,edi
c0002f4c:	83 f8 01             	cmp    eax,0x1
c0002f4f:	76 05                	jbe    c0002f56 <fill_last_frag+0x1c>
c0002f51:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f54:	29 c1                	sub    ecx,eax
c0002f56:	8d 56 01             	lea    edx,[esi+0x1]
c0002f59:	29 c2                	sub    edx,eax
c0002f5b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f5d:	e8 42 fe ff ff       	call   c0002da4 <put_fat>
c0002f62:	85 c0                	test   eax,eax
c0002f64:	75 05                	jne    c0002f6b <fill_last_frag+0x31>
c0002f66:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f69:	eb d8                	jmp    c0002f43 <fill_last_frag+0x9>
c0002f6b:	5b                   	pop    ebx
c0002f6c:	5e                   	pop    esi
c0002f6d:	5f                   	pop    edi
c0002f6e:	c3                   	ret    

c0002f6f <fill_first_frag>:
c0002f6f:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f73:	75 2d                	jne    c0002fa2 <fill_first_frag+0x33>
c0002f75:	57                   	push   edi
c0002f76:	56                   	push   esi
c0002f77:	53                   	push   ebx
c0002f78:	89 c3                	mov    ebx,eax
c0002f7a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f7d:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f80:	01 d7                	add    edi,edx
c0002f82:	39 fa                	cmp    edx,edi
c0002f84:	74 14                	je     c0002f9a <fill_first_frag+0x2b>
c0002f86:	8d 72 01             	lea    esi,[edx+0x1]
c0002f89:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f8b:	89 f1                	mov    ecx,esi
c0002f8d:	e8 12 fe ff ff       	call   c0002da4 <put_fat>
c0002f92:	89 f2                	mov    edx,esi
c0002f94:	85 c0                	test   eax,eax
c0002f96:	74 ea                	je     c0002f82 <fill_first_frag+0x13>
c0002f98:	eb 0b                	jmp    c0002fa5 <fill_first_frag+0x36>
c0002f9a:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f9e:	31 c0                	xor    eax,eax
c0002fa0:	eb 03                	jmp    c0002fa5 <fill_first_frag+0x36>
c0002fa2:	31 c0                	xor    eax,eax
c0002fa4:	c3                   	ret    
c0002fa5:	5b                   	pop    ebx
c0002fa6:	5e                   	pop    esi
c0002fa7:	5f                   	pop    edi
c0002fa8:	c3                   	ret    

c0002fa9 <get_fat>:
c0002fa9:	83 fa 01             	cmp    edx,0x1
c0002fac:	0f 86 db 01 00 00    	jbe    c000318d <get_fat+0x1e4>
c0002fb2:	55                   	push   ebp
c0002fb3:	b9 01 00 00 00       	mov    ecx,0x1
c0002fb8:	57                   	push   edi
c0002fb9:	56                   	push   esi
c0002fba:	53                   	push   ebx
c0002fbb:	83 ec 1c             	sub    esp,0x1c
c0002fbe:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fc0:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fc3:	0f 86 cc 01 00 00    	jbe    c0003195 <get_fat+0x1ec>
c0002fc9:	89 c3                	mov    ebx,eax
c0002fcb:	89 d6                	mov    esi,edx
c0002fcd:	8a 07                	mov    al,BYTE PTR [edi]
c0002fcf:	3c 02                	cmp    al,0x2
c0002fd1:	0f 84 99 00 00 00    	je     c0003070 <get_fat+0xc7>
c0002fd7:	77 09                	ja     c0002fe2 <get_fat+0x39>
c0002fd9:	fe c8                	dec    al
c0002fdb:	74 1a                	je     c0002ff7 <get_fat+0x4e>
c0002fdd:	e9 b3 01 00 00       	jmp    c0003195 <get_fat+0x1ec>
c0002fe2:	3c 03                	cmp    al,0x3
c0002fe4:	0f 84 b5 00 00 00    	je     c000309f <get_fat+0xf6>
c0002fea:	3c 04                	cmp    al,0x4
c0002fec:	0f 84 e3 00 00 00    	je     c00030d5 <get_fat+0x12c>
c0002ff2:	e9 9e 01 00 00       	jmp    c0003195 <get_fat+0x1ec>
c0002ff7:	89 d3                	mov    ebx,edx
c0002ff9:	31 c9                	xor    ecx,ecx
c0002ffb:	d1 eb                	shr    ebx,1
c0002ffd:	89 f8                	mov    eax,edi
c0002fff:	01 d3                	add    ebx,edx
c0003001:	89 da                	mov    edx,ebx
c0003003:	c1 ea 09             	shr    edx,0x9
c0003006:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003009:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000300c:	e8 10 f4 ff ff       	call   c0002421 <move_window>
c0003011:	85 c0                	test   eax,eax
c0003013:	74 08                	je     c000301d <get_fat+0x74>
c0003015:	83 c9 ff             	or     ecx,0xffffffff
c0003018:	e9 78 01 00 00       	jmp    c0003195 <get_fat+0x1ec>
c000301d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003020:	31 c9                	xor    ecx,ecx
c0003022:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003028:	89 ea                	mov    edx,ebp
c000302a:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000302e:	c1 ea 09             	shr    edx,0x9
c0003031:	89 f8                	mov    eax,edi
c0003033:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003036:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003039:	e8 e3 f3 ff ff       	call   c0002421 <move_window>
c000303e:	85 c0                	test   eax,eax
c0003040:	75 d3                	jne    c0003015 <get_fat+0x6c>
c0003042:	0f b6 c3             	movzx  eax,bl
c0003045:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000304b:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003050:	c1 e3 08             	shl    ebx,0x8
c0003053:	09 c3                	or     ebx,eax
c0003055:	89 d9                	mov    ecx,ebx
c0003057:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000305d:	83 e6 01             	and    esi,0x1
c0003060:	0f 84 2f 01 00 00    	je     c0003195 <get_fat+0x1ec>
c0003066:	89 d9                	mov    ecx,ebx
c0003068:	c1 e9 04             	shr    ecx,0x4
c000306b:	e9 25 01 00 00       	jmp    c0003195 <get_fat+0x1ec>
c0003070:	31 c9                	xor    ecx,ecx
c0003072:	c1 ea 08             	shr    edx,0x8
c0003075:	89 f8                	mov    eax,edi
c0003077:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000307a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307d:	e8 9f f3 ff ff       	call   c0002421 <move_window>
c0003082:	85 c0                	test   eax,eax
c0003084:	75 8f                	jne    c0003015 <get_fat+0x6c>
c0003086:	01 f6                	add    esi,esi
c0003088:	81 e6 fe 01 00 00    	and    esi,0x1fe
c000308e:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003092:	e8 ac eb ff ff       	call   c0001c43 <ld_word>
c0003097:	0f b7 c8             	movzx  ecx,ax
c000309a:	e9 f6 00 00 00       	jmp    c0003195 <get_fat+0x1ec>
c000309f:	31 c9                	xor    ecx,ecx
c00030a1:	c1 ea 07             	shr    edx,0x7
c00030a4:	89 f8                	mov    eax,edi
c00030a6:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030a9:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ac:	e8 70 f3 ff ff       	call   c0002421 <move_window>
c00030b1:	85 c0                	test   eax,eax
c00030b3:	0f 85 5c ff ff ff    	jne    c0003015 <get_fat+0x6c>
c00030b9:	c1 e6 02             	shl    esi,0x2
c00030bc:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030c2:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030c6:	e8 85 eb ff ff       	call   c0001c50 <ld_dword>
c00030cb:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030d0:	e9 b4 00 00 00       	jmp    c0003189 <get_fat+0x1e0>
c00030d5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030d8:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030db:	89 d1                	mov    ecx,edx
c00030dd:	09 c1                	or     ecx,eax
c00030df:	74 06                	je     c00030e7 <get_fat+0x13e>
c00030e1:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030e5:	75 0f                	jne    c00030f6 <get_fat+0x14d>
c00030e7:	b9 01 00 00 00       	mov    ecx,0x1
c00030ec:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030f0:	0f 85 9f 00 00 00    	jne    c0003195 <get_fat+0x1ec>
c00030f6:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030fa:	89 f5                	mov    ebp,esi
c00030fc:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003101:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003104:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003107:	80 f9 02             	cmp    cl,0x2
c000310a:	75 35                	jne    c0003141 <get_fat+0x198>
c000310c:	83 c0 ff             	add    eax,0xffffffff
c000310f:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003114:	83 d2 ff             	adc    edx,0xffffffff
c0003117:	31 db                	xor    ebx,ebx
c0003119:	0f ac d0 09          	shrd   eax,edx,0x9
c000311d:	53                   	push   ebx
c000311e:	c1 ea 09             	shr    edx,0x9
c0003121:	51                   	push   ecx
c0003122:	52                   	push   edx
c0003123:	50                   	push   eax
c0003124:	e8 4b 42 02 00       	call   c0027374 <__udivdi3>
c0003129:	83 c4 10             	add    esp,0x10
c000312c:	b9 01 00 00 00       	mov    ecx,0x1
c0003131:	39 c5                	cmp    ebp,eax
c0003133:	77 60                	ja     c0003195 <get_fat+0x1ec>
c0003135:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000313a:	74 59                	je     c0003195 <get_fat+0x1ec>
c000313c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000313f:	eb 54                	jmp    c0003195 <get_fat+0x1ec>
c0003141:	80 f9 03             	cmp    cl,0x3
c0003144:	75 05                	jne    c000314b <get_fat+0x1a2>
c0003146:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003149:	77 f1                	ja     c000313c <get_fat+0x193>
c000314b:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003150:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003154:	75 3f                	jne    c0003195 <get_fat+0x1ec>
c0003156:	31 c9                	xor    ecx,ecx
c0003158:	89 f2                	mov    edx,esi
c000315a:	89 f8                	mov    eax,edi
c000315c:	c1 ea 07             	shr    edx,0x7
c000315f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003162:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003165:	e8 b7 f2 ff ff       	call   c0002421 <move_window>
c000316a:	85 c0                	test   eax,eax
c000316c:	0f 85 a3 fe ff ff    	jne    c0003015 <get_fat+0x6c>
c0003172:	c1 e6 02             	shl    esi,0x2
c0003175:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000317b:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000317f:	e8 cc ea ff ff       	call   c0001c50 <ld_dword>
c0003184:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0003189:	89 c1                	mov    ecx,eax
c000318b:	eb 08                	jmp    c0003195 <get_fat+0x1ec>
c000318d:	b9 01 00 00 00       	mov    ecx,0x1
c0003192:	89 c8                	mov    eax,ecx
c0003194:	c3                   	ret    
c0003195:	83 c4 1c             	add    esp,0x1c
c0003198:	89 c8                	mov    eax,ecx
c000319a:	5b                   	pop    ebx
c000319b:	5e                   	pop    esi
c000319c:	5f                   	pop    edi
c000319d:	5d                   	pop    ebp
c000319e:	c3                   	ret    

c000319f <dir_sdi>:
c000319f:	55                   	push   ebp
c00031a0:	57                   	push   edi
c00031a1:	56                   	push   esi
c00031a2:	53                   	push   ebx
c00031a3:	89 c3                	mov    ebx,eax
c00031a5:	83 ec 1c             	sub    esp,0x1c
c00031a8:	8b 38                	mov    edi,DWORD PTR [eax]
c00031aa:	31 c0                	xor    eax,eax
c00031ac:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031af:	0f 94 c0             	sete   al
c00031b2:	48                   	dec    eax
c00031b3:	25 00 00 20 f0       	and    eax,0xf0200000
c00031b8:	05 00 00 00 10       	add    eax,0x10000000
c00031bd:	39 d0                	cmp    eax,edx
c00031bf:	77 0a                	ja     c00031cb <dir_sdi+0x2c>
c00031c1:	b8 02 00 00 00       	mov    eax,0x2
c00031c6:	e9 c4 00 00 00       	jmp    c000328f <dir_sdi+0xf0>
c00031cb:	89 d6                	mov    esi,edx
c00031cd:	f6 c2 1f             	test   dl,0x1f
c00031d0:	75 ef                	jne    c00031c1 <dir_sdi+0x22>
c00031d2:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031d5:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031d8:	85 c9                	test   ecx,ecx
c00031da:	75 2d                	jne    c0003209 <dir_sdi+0x6a>
c00031dc:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031df:	77 1b                	ja     c00031fc <dir_sdi+0x5d>
c00031e1:	89 f2                	mov    edx,esi
c00031e3:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031e7:	c1 ea 05             	shr    edx,0x5
c00031ea:	39 c2                	cmp    edx,eax
c00031ec:	73 d3                	jae    c00031c1 <dir_sdi+0x22>
c00031ee:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031f1:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031f4:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031f7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031fa:	eb 4b                	jmp    c0003247 <dir_sdi+0xa8>
c00031fc:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031ff:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003203:	85 c0                	test   eax,eax
c0003205:	74 da                	je     c00031e1 <dir_sdi+0x42>
c0003207:	89 c1                	mov    ecx,eax
c0003209:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000320d:	c1 e5 09             	shl    ebp,0x9
c0003210:	89 ca                	mov    edx,ecx
c0003212:	39 ee                	cmp    esi,ebp
c0003214:	72 1c                	jb     c0003232 <dir_sdi+0x93>
c0003216:	89 d8                	mov    eax,ebx
c0003218:	e8 8c fd ff ff       	call   c0002fa9 <get_fat>
c000321d:	89 c1                	mov    ecx,eax
c000321f:	83 f8 ff             	cmp    eax,0xffffffff
c0003222:	74 66                	je     c000328a <dir_sdi+0xeb>
c0003224:	83 f8 01             	cmp    eax,0x1
c0003227:	76 98                	jbe    c00031c1 <dir_sdi+0x22>
c0003229:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000322c:	76 93                	jbe    c00031c1 <dir_sdi+0x22>
c000322e:	29 ee                	sub    esi,ebp
c0003230:	eb de                	jmp    c0003210 <dir_sdi+0x71>
c0003232:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003236:	89 f8                	mov    eax,edi
c0003238:	e8 9f ec ff ff       	call   c0001edc <clst2sect>
c000323d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003241:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003244:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003247:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000324a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000324d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003250:	89 d1                	mov    ecx,edx
c0003252:	09 c1                	or     ecx,eax
c0003254:	0f 84 67 ff ff ff    	je     c00031c1 <dir_sdi+0x22>
c000325a:	89 f1                	mov    ecx,esi
c000325c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003264:	c1 e9 09             	shr    ecx,0x9
c0003267:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000326b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000326f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003273:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003276:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000327c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000327f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003283:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003286:	31 c0                	xor    eax,eax
c0003288:	eb 05                	jmp    c000328f <dir_sdi+0xf0>
c000328a:	b8 01 00 00 00       	mov    eax,0x1
c000328f:	83 c4 1c             	add    esp,0x1c
c0003292:	5b                   	pop    ebx
c0003293:	5e                   	pop    esi
c0003294:	5f                   	pop    edi
c0003295:	5d                   	pop    ebp
c0003296:	c3                   	ret    

c0003297 <create_chain>:
c0003297:	55                   	push   ebp
c0003298:	89 c5                	mov    ebp,eax
c000329a:	57                   	push   edi
c000329b:	56                   	push   esi
c000329c:	53                   	push   ebx
c000329d:	83 ec 1c             	sub    esp,0x1c
c00032a0:	85 d2                	test   edx,edx
c00032a2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032a6:	8b 30                	mov    esi,DWORD PTR [eax]
c00032a8:	75 0e                	jne    c00032b8 <create_chain+0x21>
c00032aa:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032ad:	85 ff                	test   edi,edi
c00032af:	74 39                	je     c00032ea <create_chain+0x53>
c00032b1:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032b4:	77 39                	ja     c00032ef <create_chain+0x58>
c00032b6:	eb 32                	jmp    c00032ea <create_chain+0x53>
c00032b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032bc:	e8 e8 fc ff ff       	call   c0002fa9 <get_fat>
c00032c1:	89 c3                	mov    ebx,eax
c00032c3:	83 f8 01             	cmp    eax,0x1
c00032c6:	77 0a                	ja     c00032d2 <create_chain+0x3b>
c00032c8:	bb 01 00 00 00       	mov    ebx,0x1
c00032cd:	e9 ba 01 00 00       	jmp    c000348c <create_chain+0x1f5>
c00032d2:	83 f8 ff             	cmp    eax,0xffffffff
c00032d5:	0f 84 62 01 00 00    	je     c000343d <create_chain+0x1a6>
c00032db:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032de:	0f 87 a8 01 00 00    	ja     c000348c <create_chain+0x1f5>
c00032e4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032e8:	eb 05                	jmp    c00032ef <create_chain+0x58>
c00032ea:	bf 01 00 00 00       	mov    edi,0x1
c00032ef:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032f3:	75 07                	jne    c00032fc <create_chain+0x65>
c00032f5:	31 db                	xor    ebx,ebx
c00032f7:	e9 90 01 00 00       	jmp    c000348c <create_chain+0x1f5>
c00032fc:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032ff:	75 74                	jne    c0003375 <create_chain+0xde>
c0003301:	b9 01 00 00 00       	mov    ecx,0x1
c0003306:	89 fa                	mov    edx,edi
c0003308:	89 f0                	mov    eax,esi
c000330a:	e8 2d f9 ff ff       	call   c0002c3c <find_bitmap>
c000330f:	89 c3                	mov    ebx,eax
c0003311:	8d 40 ff             	lea    eax,[eax-0x1]
c0003314:	83 f8 fd             	cmp    eax,0xfffffffd
c0003317:	0f 87 6f 01 00 00    	ja     c000348c <create_chain+0x1f5>
c000331d:	83 ec 0c             	sub    esp,0xc
c0003320:	b9 01 00 00 00       	mov    ecx,0x1
c0003325:	6a 01                	push   0x1
c0003327:	89 da                	mov    edx,ebx
c0003329:	89 f0                	mov    eax,esi
c000332b:	e8 bf f9 ff ff       	call   c0002cef <change_bitmap>
c0003330:	83 c4 10             	add    esp,0x10
c0003333:	83 f8 02             	cmp    eax,0x2
c0003336:	74 90                	je     c00032c8 <create_chain+0x31>
c0003338:	83 f8 01             	cmp    eax,0x1
c000333b:	0f 84 fc 00 00 00    	je     c000343d <create_chain+0x1a6>
c0003341:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003346:	75 09                	jne    c0003351 <create_chain+0xba>
c0003348:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000334c:	e9 0c 01 00 00       	jmp    c000345d <create_chain+0x1c6>
c0003351:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003355:	0f 85 e7 00 00 00    	jne    c0003442 <create_chain+0x1ab>
c000335b:	8d 57 01             	lea    edx,[edi+0x1]
c000335e:	39 da                	cmp    edx,ebx
c0003360:	0f 84 f7 00 00 00    	je     c000345d <create_chain+0x1c6>
c0003366:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003369:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000336d:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003370:	e9 cd 00 00 00       	jmp    c0003442 <create_chain+0x1ab>
c0003375:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003379:	75 41                	jne    c00033bc <create_chain+0x125>
c000337b:	8d 5f 01             	lea    ebx,[edi+0x1]
c000337e:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003381:	77 05                	ja     c0003388 <create_chain+0xf1>
c0003383:	bb 02 00 00 00       	mov    ebx,0x2
c0003388:	89 da                	mov    edx,ebx
c000338a:	89 e8                	mov    eax,ebp
c000338c:	e8 18 fc ff ff       	call   c0002fa9 <get_fat>
c0003391:	83 f8 01             	cmp    eax,0x1
c0003394:	0f 84 2e ff ff ff    	je     c00032c8 <create_chain+0x31>
c000339a:	83 f8 ff             	cmp    eax,0xffffffff
c000339d:	0f 84 9a 00 00 00    	je     c000343d <create_chain+0x1a6>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 11                	je     c00033b8 <create_chain+0x121>
c00033a7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033aa:	83 f8 01             	cmp    eax,0x1
c00033ad:	76 0d                	jbe    c00033bc <create_chain+0x125>
c00033af:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033b2:	76 08                	jbe    c00033bc <create_chain+0x125>
c00033b4:	89 c7                	mov    edi,eax
c00033b6:	eb 04                	jmp    c00033bc <create_chain+0x125>
c00033b8:	85 db                	test   ebx,ebx
c00033ba:	75 38                	jne    c00033f4 <create_chain+0x15d>
c00033bc:	89 fb                	mov    ebx,edi
c00033be:	43                   	inc    ebx
c00033bf:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033c2:	77 0e                	ja     c00033d2 <create_chain+0x13b>
c00033c4:	83 ff 01             	cmp    edi,0x1
c00033c7:	0f 86 28 ff ff ff    	jbe    c00032f5 <create_chain+0x5e>
c00033cd:	bb 02 00 00 00       	mov    ebx,0x2
c00033d2:	89 da                	mov    edx,ebx
c00033d4:	89 e8                	mov    eax,ebp
c00033d6:	e8 ce fb ff ff       	call   c0002fa9 <get_fat>
c00033db:	85 c0                	test   eax,eax
c00033dd:	74 15                	je     c00033f4 <create_chain+0x15d>
c00033df:	83 f8 01             	cmp    eax,0x1
c00033e2:	0f 84 e0 fe ff ff    	je     c00032c8 <create_chain+0x31>
c00033e8:	40                   	inc    eax
c00033e9:	74 52                	je     c000343d <create_chain+0x1a6>
c00033eb:	39 fb                	cmp    ebx,edi
c00033ed:	75 cf                	jne    c00033be <create_chain+0x127>
c00033ef:	e9 01 ff ff ff       	jmp    c00032f5 <create_chain+0x5e>
c00033f4:	83 c9 ff             	or     ecx,0xffffffff
c00033f7:	89 da                	mov    edx,ebx
c00033f9:	89 f0                	mov    eax,esi
c00033fb:	e8 a4 f9 ff ff       	call   c0002da4 <put_fat>
c0003400:	85 c0                	test   eax,eax
c0003402:	75 32                	jne    c0003436 <create_chain+0x19f>
c0003404:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003409:	74 11                	je     c000341c <create_chain+0x185>
c000340b:	89 d9                	mov    ecx,ebx
c000340d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003411:	89 f0                	mov    eax,esi
c0003413:	e8 8c f9 ff ff       	call   c0002da4 <put_fat>
c0003418:	85 c0                	test   eax,eax
c000341a:	75 1a                	jne    c0003436 <create_chain+0x19f>
c000341c:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000341f:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003422:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003425:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003428:	39 d0                	cmp    eax,edx
c000342a:	77 04                	ja     c0003430 <create_chain+0x199>
c000342c:	48                   	dec    eax
c000342d:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003430:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003434:	eb 56                	jmp    c000348c <create_chain+0x1f5>
c0003436:	48                   	dec    eax
c0003437:	0f 85 8b fe ff ff    	jne    c00032c8 <create_chain+0x31>
c000343d:	83 cb ff             	or     ebx,0xffffffff
c0003440:	eb 4a                	jmp    c000348c <create_chain+0x1f5>
c0003442:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003446:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003449:	41                   	inc    ecx
c000344a:	39 d9                	cmp    ecx,ebx
c000344c:	75 19                	jne    c0003467 <create_chain+0x1d0>
c000344e:	b9 02 00 00 00       	mov    ecx,0x2
c0003453:	85 d2                	test   edx,edx
c0003455:	74 03                	je     c000345a <create_chain+0x1c3>
c0003457:	8d 4a 01             	lea    ecx,[edx+0x1]
c000345a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000345d:	85 c0                	test   eax,eax
c000345f:	0f 85 63 fe ff ff    	jne    c00032c8 <create_chain+0x31>
c0003465:	eb b5                	jmp    c000341c <create_chain+0x185>
c0003467:	85 d2                	test   edx,edx
c0003469:	75 07                	jne    c0003472 <create_chain+0x1db>
c000346b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003472:	89 d9                	mov    ecx,ebx
c0003474:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003478:	89 e8                	mov    eax,ebp
c000347a:	e8 bb fa ff ff       	call   c0002f3a <fill_last_frag>
c000347f:	85 c0                	test   eax,eax
c0003481:	75 b3                	jne    c0003436 <create_chain+0x19f>
c0003483:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000348a:	eb 90                	jmp    c000341c <create_chain+0x185>
c000348c:	83 c4 1c             	add    esp,0x1c
c000348f:	89 d8                	mov    eax,ebx
c0003491:	5b                   	pop    ebx
c0003492:	5e                   	pop    esi
c0003493:	5f                   	pop    edi
c0003494:	5d                   	pop    ebp
c0003495:	c3                   	ret    

c0003496 <remove_chain>:
c0003496:	55                   	push   ebp
c0003497:	57                   	push   edi
c0003498:	56                   	push   esi
c0003499:	53                   	push   ebx
c000349a:	83 ec 1c             	sub    esp,0x1c
c000349d:	83 fa 01             	cmp    edx,0x1
c00034a0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034a4:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034a6:	77 0a                	ja     c00034b2 <remove_chain+0x1c>
c00034a8:	b8 02 00 00 00       	mov    eax,0x2
c00034ad:	e9 24 01 00 00       	jmp    c00035d6 <remove_chain+0x140>
c00034b2:	89 d6                	mov    esi,edx
c00034b4:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034b7:	76 ef                	jbe    c00034a8 <remove_chain+0x12>
c00034b9:	89 c7                	mov    edi,eax
c00034bb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034c0:	75 06                	jne    c00034c8 <remove_chain+0x32>
c00034c2:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034c6:	eb 54                	jmp    c000351c <remove_chain+0x86>
c00034c8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034cb:	75 06                	jne    c00034d3 <remove_chain+0x3d>
c00034cd:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034d1:	74 ef                	je     c00034c2 <remove_chain+0x2c>
c00034d3:	83 c9 ff             	or     ecx,0xffffffff
c00034d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034da:	89 d8                	mov    eax,ebx
c00034dc:	e8 c3 f8 ff ff       	call   c0002da4 <put_fat>
c00034e1:	85 c0                	test   eax,eax
c00034e3:	74 dd                	je     c00034c2 <remove_chain+0x2c>
c00034e5:	e9 ec 00 00 00       	jmp    c00035d6 <remove_chain+0x140>
c00034ea:	83 f8 01             	cmp    eax,0x1
c00034ed:	74 b9                	je     c00034a8 <remove_chain+0x12>
c00034ef:	83 f8 ff             	cmp    eax,0xffffffff
c00034f2:	74 6d                	je     c0003561 <remove_chain+0xcb>
c00034f4:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034f7:	75 6f                	jne    c0003568 <remove_chain+0xd2>
c00034f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034fc:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034ff:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003502:	39 d0                	cmp    eax,edx
c0003504:	73 08                	jae    c000350e <remove_chain+0x78>
c0003506:	40                   	inc    eax
c0003507:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000350b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000350e:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003511:	39 e9                	cmp    ecx,ebp
c0003513:	75 64                	jne    c0003579 <remove_chain+0xe3>
c0003515:	89 ee                	mov    esi,ebp
c0003517:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c000351a:	76 0f                	jbe    c000352b <remove_chain+0x95>
c000351c:	89 f2                	mov    edx,esi
c000351e:	89 f8                	mov    eax,edi
c0003520:	e8 84 fa ff ff       	call   c0002fa9 <get_fat>
c0003525:	89 c5                	mov    ebp,eax
c0003527:	85 c0                	test   eax,eax
c0003529:	75 bf                	jne    c00034ea <remove_chain+0x54>
c000352b:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000352e:	0f 85 a0 00 00 00    	jne    c00035d4 <remove_chain+0x13e>
c0003534:	eb 6c                	jmp    c00035a2 <remove_chain+0x10c>
c0003536:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003539:	84 c0                	test   al,al
c000353b:	75 7d                	jne    c00035ba <remove_chain+0x124>
c000353d:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003540:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003544:	0f 84 86 00 00 00    	je     c00035d0 <remove_chain+0x13a>
c000354a:	89 da                	mov    edx,ebx
c000354c:	89 f8                	mov    eax,edi
c000354e:	e8 56 fa ff ff       	call   c0002fa9 <get_fat>
c0003553:	83 f8 01             	cmp    eax,0x1
c0003556:	0f 86 4c ff ff ff    	jbe    c00034a8 <remove_chain+0x12>
c000355c:	83 f8 ff             	cmp    eax,0xffffffff
c000355f:	75 4e                	jne    c00035af <remove_chain+0x119>
c0003561:	b8 01 00 00 00       	mov    eax,0x1
c0003566:	eb 6e                	jmp    c00035d6 <remove_chain+0x140>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 31 f8 ff ff       	call   c0002da4 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	74 82                	je     c00034f9 <remove_chain+0x63>
c0003577:	eb 5d                	jmp    c00035d6 <remove_chain+0x140>
c0003579:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000357c:	75 1b                	jne    c0003599 <remove_chain+0x103>
c000357e:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003582:	89 d8                	mov    eax,ebx
c0003584:	83 ec 0c             	sub    esp,0xc
c0003587:	6a 00                	push   0x0
c0003589:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000358d:	e8 5d f7 ff ff       	call   c0002cef <change_bitmap>
c0003592:	83 c4 10             	add    esp,0x10
c0003595:	85 c0                	test   eax,eax
c0003597:	75 3d                	jne    c00035d6 <remove_chain+0x140>
c0003599:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000359d:	e9 73 ff ff ff       	jmp    c0003515 <remove_chain+0x7f>
c00035a2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035a7:	75 8d                	jne    c0003536 <remove_chain+0xa0>
c00035a9:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035ad:	eb 25                	jmp    c00035d4 <remove_chain+0x13e>
c00035af:	8d 53 01             	lea    edx,[ebx+0x1]
c00035b2:	89 c3                	mov    ebx,eax
c00035b4:	39 c2                	cmp    edx,eax
c00035b6:	74 88                	je     c0003540 <remove_chain+0xaa>
c00035b8:	eb 1a                	jmp    c00035d4 <remove_chain+0x13e>
c00035ba:	3c 03                	cmp    al,0x3
c00035bc:	75 16                	jne    c00035d4 <remove_chain+0x13e>
c00035be:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035c1:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035c5:	77 0d                	ja     c00035d4 <remove_chain+0x13e>
c00035c7:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ca:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ce:	72 04                	jb     c00035d4 <remove_chain+0x13e>
c00035d0:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035d4:	31 c0                	xor    eax,eax
c00035d6:	83 c4 1c             	add    esp,0x1c
c00035d9:	5b                   	pop    ebx
c00035da:	5e                   	pop    esi
c00035db:	5f                   	pop    edi
c00035dc:	5d                   	pop    ebp
c00035dd:	c3                   	ret    

c00035de <dir_clear>:
c00035de:	55                   	push   ebp
c00035df:	57                   	push   edi
c00035e0:	56                   	push   esi
c00035e1:	89 c6                	mov    esi,eax
c00035e3:	53                   	push   ebx
c00035e4:	83 ec 1c             	sub    esp,0x1c
c00035e7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035eb:	e8 9d ed ff ff       	call   c000238d <sync_window>
c00035f0:	85 c0                	test   eax,eax
c00035f2:	0f 85 de 00 00 00    	jne    c00036d6 <dir_clear+0xf8>
c00035f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035fc:	89 f0                	mov    eax,esi
c00035fe:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003601:	e8 d6 e8 ff ff       	call   c0001edc <clst2sect>
c0003606:	b9 00 02 00 00       	mov    ecx,0x200
c000360b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000360f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003613:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003616:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003619:	89 e8                	mov    eax,ebp
c000361b:	31 d2                	xor    edx,edx
c000361d:	e8 b5 e6 ff ff       	call   c0001cd7 <mem_set>
c0003622:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003626:	c1 e3 09             	shl    ebx,0x9
c0003629:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000362f:	76 1f                	jbe    c0003650 <dir_clear+0x72>
c0003631:	bb 00 80 00 00       	mov    ebx,0x8000
c0003636:	eb 18                	jmp    c0003650 <dir_clear+0x72>
c0003638:	83 ec 0c             	sub    esp,0xc
c000363b:	53                   	push   ebx
c000363c:	e8 35 4e 00 00       	call   c0008476 <ff_memalloc>
c0003641:	83 c4 10             	add    esp,0x10
c0003644:	89 c7                	mov    edi,eax
c0003646:	85 c0                	test   eax,eax
c0003648:	0f 85 8f 00 00 00    	jne    c00036dd <dir_clear+0xff>
c000364e:	d1 eb                	shr    ebx,1
c0003650:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003656:	77 e0                	ja     c0003638 <dir_clear+0x5a>
c0003658:	31 db                	xor    ebx,ebx
c000365a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000365e:	39 d8                	cmp    eax,ebx
c0003660:	76 66                	jbe    c00036c8 <dir_clear+0xea>
c0003662:	83 ec 0c             	sub    esp,0xc
c0003665:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003669:	6a 01                	push   0x1
c000366b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000366f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003673:	55                   	push   ebp
c0003674:	50                   	push   eax
c0003675:	e8 94 e5 ff ff       	call   c0001c0e <disk_write>
c000367a:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000367f:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003684:	83 c4 20             	add    esp,0x20
c0003687:	85 c0                	test   eax,eax
c0003689:	75 3d                	jne    c00036c8 <dir_clear+0xea>
c000368b:	43                   	inc    ebx
c000368c:	eb cc                	jmp    c000365a <dir_clear+0x7c>
c000368e:	83 ec 0c             	sub    esp,0xc
c0003691:	31 d2                	xor    edx,edx
c0003693:	55                   	push   ebp
c0003694:	89 d8                	mov    eax,ebx
c0003696:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000369a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000369e:	52                   	push   edx
c000369f:	50                   	push   eax
c00036a0:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036a4:	57                   	push   edi
c00036a5:	50                   	push   eax
c00036a6:	e8 63 e5 ff ff       	call   c0001c0e <disk_write>
c00036ab:	83 c4 20             	add    esp,0x20
c00036ae:	85 c0                	test   eax,eax
c00036b0:	75 0a                	jne    c00036bc <dir_clear+0xde>
c00036b2:	01 eb                	add    ebx,ebp
c00036b4:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b8:	39 d8                	cmp    eax,ebx
c00036ba:	77 d2                	ja     c000368e <dir_clear+0xb0>
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	57                   	push   edi
c00036c0:	e8 c7 4d 00 00       	call   c000848c <ff_memfree>
c00036c5:	83 c4 10             	add    esp,0x10
c00036c8:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036cc:	39 d8                	cmp    eax,ebx
c00036ce:	0f 95 c0             	setne  al
c00036d1:	0f b6 c0             	movzx  eax,al
c00036d4:	eb 19                	jmp    c00036ef <dir_clear+0x111>
c00036d6:	b8 01 00 00 00       	mov    eax,0x1
c00036db:	eb 12                	jmp    c00036ef <dir_clear+0x111>
c00036dd:	89 d9                	mov    ecx,ebx
c00036df:	31 d2                	xor    edx,edx
c00036e1:	c1 eb 09             	shr    ebx,0x9
c00036e4:	e8 ee e5 ff ff       	call   c0001cd7 <mem_set>
c00036e9:	89 dd                	mov    ebp,ebx
c00036eb:	31 db                	xor    ebx,ebx
c00036ed:	eb c5                	jmp    c00036b4 <dir_clear+0xd6>
c00036ef:	83 c4 1c             	add    esp,0x1c
c00036f2:	5b                   	pop    ebx
c00036f3:	5e                   	pop    esi
c00036f4:	5f                   	pop    edi
c00036f5:	5d                   	pop    ebp
c00036f6:	c3                   	ret    

c00036f7 <dir_next>:
c00036f7:	55                   	push   ebp
c00036f8:	57                   	push   edi
c00036f9:	56                   	push   esi
c00036fa:	53                   	push   ebx
c00036fb:	89 c3                	mov    ebx,eax
c00036fd:	83 ec 1c             	sub    esp,0x1c
c0003700:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003702:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003706:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003709:	8d 78 20             	lea    edi,[eax+0x20]
c000370c:	31 c0                	xor    eax,eax
c000370e:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003712:	0f 94 c0             	sete   al
c0003715:	48                   	dec    eax
c0003716:	25 00 00 20 f0       	and    eax,0xf0200000
c000371b:	05 00 00 00 10       	add    eax,0x10000000
c0003720:	39 f8                	cmp    eax,edi
c0003722:	77 0e                	ja     c0003732 <dir_next+0x3b>
c0003724:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000372b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003732:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003735:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003738:	b8 04 00 00 00       	mov    eax,0x4
c000373d:	89 ce                	mov    esi,ecx
c000373f:	09 d6                	or     esi,edx
c0003741:	0f 84 da 00 00 00    	je     c0003821 <dir_next+0x12a>
c0003747:	89 f8                	mov    eax,edi
c0003749:	25 ff 01 00 00       	and    eax,0x1ff
c000374e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003752:	0f 85 b9 00 00 00    	jne    c0003811 <dir_next+0x11a>
c0003758:	83 c2 01             	add    edx,0x1
c000375b:	83 d1 00             	adc    ecx,0x0
c000375e:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003761:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003764:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003767:	85 d2                	test   edx,edx
c0003769:	75 29                	jne    c0003794 <dir_next+0x9d>
c000376b:	89 fa                	mov    edx,edi
c000376d:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003771:	c1 ea 05             	shr    edx,0x5
c0003774:	39 c2                	cmp    edx,eax
c0003776:	0f 82 95 00 00 00    	jb     c0003811 <dir_next+0x11a>
c000377c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003783:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000378a:	b8 04 00 00 00       	mov    eax,0x4
c000378f:	e9 8d 00 00 00       	jmp    c0003821 <dir_next+0x12a>
c0003794:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003798:	89 f9                	mov    ecx,edi
c000379a:	48                   	dec    eax
c000379b:	c1 e9 09             	shr    ecx,0x9
c000379e:	85 c8                	test   eax,ecx
c00037a0:	75 6f                	jne    c0003811 <dir_next+0x11a>
c00037a2:	89 d8                	mov    eax,ebx
c00037a4:	e8 00 f8 ff ff       	call   c0002fa9 <get_fat>
c00037a9:	89 c6                	mov    esi,eax
c00037ab:	83 f8 01             	cmp    eax,0x1
c00037ae:	77 07                	ja     c00037b7 <dir_next+0xc0>
c00037b0:	b8 02 00 00 00       	mov    eax,0x2
c00037b5:	eb 6a                	jmp    c0003821 <dir_next+0x12a>
c00037b7:	83 f8 ff             	cmp    eax,0xffffffff
c00037ba:	75 07                	jne    c00037c3 <dir_next+0xcc>
c00037bc:	b8 01 00 00 00       	mov    eax,0x1
c00037c1:	eb 5e                	jmp    c0003821 <dir_next+0x12a>
c00037c3:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037c6:	77 37                	ja     c00037ff <dir_next+0x108>
c00037c8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037cd:	74 ad                	je     c000377c <dir_next+0x85>
c00037cf:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037d2:	89 d8                	mov    eax,ebx
c00037d4:	e8 be fa ff ff       	call   c0003297 <create_chain>
c00037d9:	89 c6                	mov    esi,eax
c00037db:	b8 07 00 00 00       	mov    eax,0x7
c00037e0:	85 f6                	test   esi,esi
c00037e2:	74 3d                	je     c0003821 <dir_next+0x12a>
c00037e4:	83 fe 01             	cmp    esi,0x1
c00037e7:	74 c7                	je     c00037b0 <dir_next+0xb9>
c00037e9:	83 fe ff             	cmp    esi,0xffffffff
c00037ec:	74 ce                	je     c00037bc <dir_next+0xc5>
c00037ee:	89 f2                	mov    edx,esi
c00037f0:	89 e8                	mov    eax,ebp
c00037f2:	e8 e7 fd ff ff       	call   c00035de <dir_clear>
c00037f7:	85 c0                	test   eax,eax
c00037f9:	75 c1                	jne    c00037bc <dir_next+0xc5>
c00037fb:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037ff:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003802:	89 f2                	mov    edx,esi
c0003804:	89 e8                	mov    eax,ebp
c0003806:	e8 d1 e6 ff ff       	call   c0001edc <clst2sect>
c000380b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000380e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003815:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003818:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000381c:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000381f:	31 c0                	xor    eax,eax
c0003821:	83 c4 1c             	add    esp,0x1c
c0003824:	5b                   	pop    ebx
c0003825:	5e                   	pop    esi
c0003826:	5f                   	pop    edi
c0003827:	5d                   	pop    ebp
c0003828:	c3                   	ret    

c0003829 <load_xdir>:
c0003829:	55                   	push   ebp
c000382a:	57                   	push   edi
c000382b:	56                   	push   esi
c000382c:	89 c6                	mov    esi,eax
c000382e:	53                   	push   ebx
c000382f:	83 ec 1c             	sub    esp,0x1c
c0003832:	8b 00                	mov    eax,DWORD PTR [eax]
c0003834:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003837:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000383a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000383d:	e8 df eb ff ff       	call   c0002421 <move_window>
c0003842:	89 c3                	mov    ebx,eax
c0003844:	85 c0                	test   eax,eax
c0003846:	0f 85 0c 01 00 00    	jne    c0003958 <load_xdir+0x12f>
c000384c:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000384f:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003852:	0f 85 fb 00 00 00    	jne    c0003953 <load_xdir+0x12a>
c0003858:	89 f8                	mov    eax,edi
c000385a:	b9 20 00 00 00       	mov    ecx,0x20
c000385f:	e8 5e e4 ff ff       	call   c0001cc2 <mem_cpy>
c0003864:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003868:	40                   	inc    eax
c0003869:	c1 e0 05             	shl    eax,0x5
c000386c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003870:	83 e8 60             	sub    eax,0x60
c0003873:	3d 00 02 00 00       	cmp    eax,0x200
c0003878:	0f 87 d5 00 00 00    	ja     c0003953 <load_xdir+0x12a>
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 f0                	mov    eax,esi
c0003882:	e8 70 fe ff ff       	call   c00036f7 <dir_next>
c0003887:	89 c3                	mov    ebx,eax
c0003889:	83 f8 04             	cmp    eax,0x4
c000388c:	0f 84 c1 00 00 00    	je     c0003953 <load_xdir+0x12a>
c0003892:	85 c0                	test   eax,eax
c0003894:	0f 85 be 00 00 00    	jne    c0003958 <load_xdir+0x12f>
c000389a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000389d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038a0:	8b 06                	mov    eax,DWORD PTR [esi]
c00038a2:	e8 7a eb ff ff       	call   c0002421 <move_window>
c00038a7:	89 c3                	mov    ebx,eax
c00038a9:	85 c0                	test   eax,eax
c00038ab:	0f 85 a7 00 00 00    	jne    c0003958 <load_xdir+0x12f>
c00038b1:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038b4:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038b7:	0f 85 96 00 00 00    	jne    c0003953 <load_xdir+0x12a>
c00038bd:	8d 47 20             	lea    eax,[edi+0x20]
c00038c0:	b9 20 00 00 00       	mov    ecx,0x20
c00038c5:	e8 f8 e3 ff ff       	call   c0001cc2 <mem_cpy>
c00038ca:	31 d2                	xor    edx,edx
c00038cc:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038d0:	b9 0f 00 00 00       	mov    ecx,0xf
c00038d5:	83 c0 2c             	add    eax,0x2c
c00038d8:	f7 f1                	div    ecx
c00038da:	c1 e0 05             	shl    eax,0x5
c00038dd:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038e1:	77 70                	ja     c0003953 <load_xdir+0x12a>
c00038e3:	bd 40 00 00 00       	mov    ebp,0x40
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	89 f0                	mov    eax,esi
c00038ec:	e8 06 fe ff ff       	call   c00036f7 <dir_next>
c00038f1:	89 c3                	mov    ebx,eax
c00038f3:	83 f8 04             	cmp    eax,0x4
c00038f6:	74 5b                	je     c0003953 <load_xdir+0x12a>
c00038f8:	85 c0                	test   eax,eax
c00038fa:	75 5c                	jne    c0003958 <load_xdir+0x12f>
c00038fc:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038ff:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003902:	8b 06                	mov    eax,DWORD PTR [esi]
c0003904:	e8 18 eb ff ff       	call   c0002421 <move_window>
c0003909:	89 c3                	mov    ebx,eax
c000390b:	85 c0                	test   eax,eax
c000390d:	75 49                	jne    c0003958 <load_xdir+0x12f>
c000390f:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003912:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003915:	75 3c                	jne    c0003953 <load_xdir+0x12a>
c0003917:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000391d:	77 0d                	ja     c000392c <load_xdir+0x103>
c000391f:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003922:	b9 20 00 00 00       	mov    ecx,0x20
c0003927:	e8 96 e3 ff ff       	call   c0001cc2 <mem_cpy>
c000392c:	83 c5 20             	add    ebp,0x20
c000392f:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003933:	77 b3                	ja     c00038e8 <load_xdir+0xbf>
c0003935:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000393b:	77 1b                	ja     c0003958 <load_xdir+0x12f>
c000393d:	89 f8                	mov    eax,edi
c000393f:	e8 cd e7 ff ff       	call   c0002111 <xdir_sum>
c0003944:	89 c1                	mov    ecx,eax
c0003946:	8d 47 02             	lea    eax,[edi+0x2]
c0003949:	e8 f5 e2 ff ff       	call   c0001c43 <ld_word>
c000394e:	66 39 c1             	cmp    cx,ax
c0003951:	74 05                	je     c0003958 <load_xdir+0x12f>
c0003953:	bb 02 00 00 00       	mov    ebx,0x2
c0003958:	83 c4 1c             	add    esp,0x1c
c000395b:	89 d8                	mov    eax,ebx
c000395d:	5b                   	pop    ebx
c000395e:	5e                   	pop    esi
c000395f:	5f                   	pop    edi
c0003960:	5d                   	pop    ebp
c0003961:	c3                   	ret    

c0003962 <load_obj_xdir>:
c0003962:	53                   	push   ebx
c0003963:	89 c3                	mov    ebx,eax
c0003965:	83 ec 08             	sub    esp,0x8
c0003968:	8b 02                	mov    eax,DWORD PTR [edx]
c000396a:	89 03                	mov    DWORD PTR [ebx],eax
c000396c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000396f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003972:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003975:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003978:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000397b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003982:	30 c0                	xor    al,al
c0003984:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000398b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000398e:	89 d8                	mov    eax,ebx
c0003990:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003993:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003996:	e8 04 f8 ff ff       	call   c000319f <dir_sdi>
c000399b:	85 c0                	test   eax,eax
c000399d:	75 0b                	jne    c00039aa <load_obj_xdir+0x48>
c000399f:	89 d8                	mov    eax,ebx
c00039a1:	83 c4 08             	add    esp,0x8
c00039a4:	5b                   	pop    ebx
c00039a5:	e9 7f fe ff ff       	jmp    c0003829 <load_xdir>
c00039aa:	83 c4 08             	add    esp,0x8
c00039ad:	5b                   	pop    ebx
c00039ae:	c3                   	ret    

c00039af <dir_read>:
c00039af:	55                   	push   ebp
c00039b0:	bd 04 00 00 00       	mov    ebp,0x4
c00039b5:	57                   	push   edi
c00039b6:	56                   	push   esi
c00039b7:	be ff ff ff ff       	mov    esi,0xffffffff
c00039bc:	53                   	push   ebx
c00039bd:	89 c3                	mov    ebx,eax
c00039bf:	83 ec 1c             	sub    esp,0x1c
c00039c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00039c8:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039cd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039d0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039d3:	89 c8                	mov    eax,ecx
c00039d5:	09 d0                	or     eax,edx
c00039d7:	0f 84 25 01 00 00    	je     c0003b02 <dir_read+0x153>
c00039dd:	89 f8                	mov    eax,edi
c00039df:	e8 3d ea ff ff       	call   c0002421 <move_window>
c00039e4:	89 c5                	mov    ebp,eax
c00039e6:	85 c0                	test   eax,eax
c00039e8:	0f 85 23 01 00 00    	jne    c0003b11 <dir_read+0x162>
c00039ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039f1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039f3:	84 c9                	test   cl,cl
c00039f5:	0f 84 11 01 00 00    	je     c0003b0c <dir_read+0x15d>
c00039fb:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039fe:	75 48                	jne    c0003a48 <dir_read+0x99>
c0003a00:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a05:	74 10                	je     c0003a17 <dir_read+0x68>
c0003a07:	80 f9 83             	cmp    cl,0x83
c0003a0a:	0f 85 dd 00 00 00    	jne    c0003aed <dir_read+0x13e>
c0003a10:	31 ed                	xor    ebp,ebp
c0003a12:	e9 08 01 00 00       	jmp    c0003b1f <dir_read+0x170>
c0003a17:	80 f9 85             	cmp    cl,0x85
c0003a1a:	0f 85 cd 00 00 00    	jne    c0003aed <dir_read+0x13e>
c0003a20:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a23:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a26:	89 d8                	mov    eax,ebx
c0003a28:	e8 fc fd ff ff       	call   c0003829 <load_xdir>
c0003a2d:	89 c5                	mov    ebp,eax
c0003a2f:	85 c0                	test   eax,eax
c0003a31:	0f 85 da 00 00 00    	jne    c0003b11 <dir_read+0x162>
c0003a37:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a3a:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a3d:	83 e0 3f             	and    eax,0x3f
c0003a40:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a43:	e9 d7 00 00 00       	jmp    c0003b1f <dir_read+0x170>
c0003a48:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a4b:	83 e0 3f             	and    eax,0x3f
c0003a4e:	80 f9 2e             	cmp    cl,0x2e
c0003a51:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a55:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a58:	0f 84 8a 00 00 00    	je     c0003ae8 <dir_read+0x139>
c0003a5e:	80 f9 e5             	cmp    cl,0xe5
c0003a61:	0f 84 81 00 00 00    	je     c0003ae8 <dir_read+0x139>
c0003a67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a6b:	83 e0 1f             	and    eax,0x1f
c0003a6e:	83 f8 08             	cmp    eax,0x8
c0003a71:	0f 94 c0             	sete   al
c0003a74:	0f b6 c0             	movzx  eax,al
c0003a77:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a7b:	75 6b                	jne    c0003ae8 <dir_read+0x139>
c0003a7d:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a82:	75 44                	jne    c0003ac8 <dir_read+0x119>
c0003a84:	f6 c1 40             	test   cl,0x40
c0003a87:	74 12                	je     c0003a9b <dir_read+0xec>
c0003a89:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a8c:	83 e1 bf             	and    ecx,0xffffffbf
c0003a8f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a93:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a96:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a99:	eb 06                	jmp    c0003aa1 <dir_read+0xf2>
c0003a9b:	89 f0                	mov    eax,esi
c0003a9d:	38 c8                	cmp    al,cl
c0003a9f:	75 47                	jne    c0003ae8 <dir_read+0x139>
c0003aa1:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003aa5:	be ff ff ff ff       	mov    esi,0xffffffff
c0003aaa:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003aad:	75 3e                	jne    c0003aed <dir_read+0x13e>
c0003aaf:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ab3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ab6:	e8 8a e4 ff ff       	call   c0001f45 <pick_lfn>
c0003abb:	85 c0                	test   eax,eax
c0003abd:	74 2e                	je     c0003aed <dir_read+0x13e>
c0003abf:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ac3:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ac6:	eb 25                	jmp    c0003aed <dir_read+0x13e>
c0003ac8:	89 f0                	mov    eax,esi
c0003aca:	84 c0                	test   al,al
c0003acc:	75 11                	jne    c0003adf <dir_read+0x130>
c0003ace:	89 d0                	mov    eax,edx
c0003ad0:	e8 2a e6 ff ff       	call   c00020ff <sum_sfn>
c0003ad5:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003ad9:	0f 84 31 ff ff ff    	je     c0003a10 <dir_read+0x61>
c0003adf:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003ae6:	eb 37                	jmp    c0003b1f <dir_read+0x170>
c0003ae8:	be ff ff ff ff       	mov    esi,0xffffffff
c0003aed:	31 d2                	xor    edx,edx
c0003aef:	89 d8                	mov    eax,ebx
c0003af1:	e8 01 fc ff ff       	call   c00036f7 <dir_next>
c0003af6:	89 c5                	mov    ebp,eax
c0003af8:	85 c0                	test   eax,eax
c0003afa:	0f 84 cd fe ff ff    	je     c00039cd <dir_read+0x1e>
c0003b00:	eb 0f                	jmp    c0003b11 <dir_read+0x162>
c0003b02:	85 ed                	test   ebp,ebp
c0003b04:	0f 84 06 ff ff ff    	je     c0003a10 <dir_read+0x61>
c0003b0a:	eb 05                	jmp    c0003b11 <dir_read+0x162>
c0003b0c:	bd 04 00 00 00       	mov    ebp,0x4
c0003b11:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b18:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b1f:	83 c4 1c             	add    esp,0x1c
c0003b22:	89 e8                	mov    eax,ebp
c0003b24:	5b                   	pop    ebx
c0003b25:	5e                   	pop    esi
c0003b26:	5f                   	pop    edi
c0003b27:	5d                   	pop    ebp
c0003b28:	c3                   	ret    

c0003b29 <dir_alloc>:
c0003b29:	55                   	push   ebp
c0003b2a:	89 d5                	mov    ebp,edx
c0003b2c:	57                   	push   edi
c0003b2d:	31 d2                	xor    edx,edx
c0003b2f:	56                   	push   esi
c0003b30:	53                   	push   ebx
c0003b31:	89 c3                	mov    ebx,eax
c0003b33:	83 ec 0c             	sub    esp,0xc
c0003b36:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b38:	e8 62 f6 ff ff       	call   c000319f <dir_sdi>
c0003b3d:	85 c0                	test   eax,eax
c0003b3f:	75 4e                	jne    c0003b8f <dir_alloc+0x66>
c0003b41:	31 f6                	xor    esi,esi
c0003b43:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b46:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b49:	89 f8                	mov    eax,edi
c0003b4b:	e8 d1 e8 ff ff       	call   c0002421 <move_window>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	75 3b                	jne    c0003b8f <dir_alloc+0x66>
c0003b54:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b57:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b5a:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b5c:	75 07                	jne    c0003b65 <dir_alloc+0x3c>
c0003b5e:	f7 d2                	not    edx
c0003b60:	c0 ea 07             	shr    dl,0x7
c0003b63:	eb 0d                	jmp    c0003b72 <dir_alloc+0x49>
c0003b65:	84 d2                	test   dl,dl
c0003b67:	0f 94 c1             	sete   cl
c0003b6a:	80 fa e5             	cmp    dl,0xe5
c0003b6d:	0f 94 c2             	sete   dl
c0003b70:	09 ca                	or     edx,ecx
c0003b72:	84 d2                	test   dl,dl
c0003b74:	74 07                	je     c0003b7d <dir_alloc+0x54>
c0003b76:	46                   	inc    esi
c0003b77:	39 ee                	cmp    esi,ebp
c0003b79:	75 04                	jne    c0003b7f <dir_alloc+0x56>
c0003b7b:	eb 1c                	jmp    c0003b99 <dir_alloc+0x70>
c0003b7d:	31 f6                	xor    esi,esi
c0003b7f:	ba 01 00 00 00       	mov    edx,0x1
c0003b84:	89 d8                	mov    eax,ebx
c0003b86:	e8 6c fb ff ff       	call   c00036f7 <dir_next>
c0003b8b:	85 c0                	test   eax,eax
c0003b8d:	74 b4                	je     c0003b43 <dir_alloc+0x1a>
c0003b8f:	83 f8 04             	cmp    eax,0x4
c0003b92:	75 05                	jne    c0003b99 <dir_alloc+0x70>
c0003b94:	b8 07 00 00 00       	mov    eax,0x7
c0003b99:	83 c4 0c             	add    esp,0xc
c0003b9c:	5b                   	pop    ebx
c0003b9d:	5e                   	pop    esi
c0003b9e:	5f                   	pop    edi
c0003b9f:	5d                   	pop    ebp
c0003ba0:	c3                   	ret    

c0003ba1 <store_xdir>:
c0003ba1:	55                   	push   ebp
c0003ba2:	57                   	push   edi
c0003ba3:	89 c7                	mov    edi,eax
c0003ba5:	56                   	push   esi
c0003ba6:	53                   	push   ebx
c0003ba7:	83 ec 0c             	sub    esp,0xc
c0003baa:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bac:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003baf:	89 e8                	mov    eax,ebp
c0003bb1:	e8 5b e5 ff ff       	call   c0002111 <xdir_sum>
c0003bb6:	0f b7 d0             	movzx  edx,ax
c0003bb9:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bbc:	e8 f4 e0 ff ff       	call   c0001cb5 <st_word>
c0003bc1:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003bc5:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bc8:	89 f8                	mov    eax,edi
c0003bca:	e8 d0 f5 ff ff       	call   c000319f <dir_sdi>
c0003bcf:	89 c6                	mov    esi,eax
c0003bd1:	85 f6                	test   esi,esi
c0003bd3:	75 3d                	jne    c0003c12 <store_xdir+0x71>
c0003bd5:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bd8:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	e8 3f e8 ff ff       	call   c0002421 <move_window>
c0003be2:	89 c6                	mov    esi,eax
c0003be4:	85 c0                	test   eax,eax
c0003be6:	75 2a                	jne    c0003c12 <store_xdir+0x71>
c0003be8:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003beb:	b9 20 00 00 00       	mov    ecx,0x20
c0003bf0:	89 ea                	mov    edx,ebp
c0003bf2:	e8 cb e0 ff ff       	call   c0001cc2 <mem_cpy>
c0003bf7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bf9:	85 db                	test   ebx,ebx
c0003bfb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003bff:	74 11                	je     c0003c12 <store_xdir+0x71>
c0003c01:	31 d2                	xor    edx,edx
c0003c03:	89 f8                	mov    eax,edi
c0003c05:	83 c5 20             	add    ebp,0x20
c0003c08:	e8 ea fa ff ff       	call   c00036f7 <dir_next>
c0003c0d:	4b                   	dec    ebx
c0003c0e:	89 c6                	mov    esi,eax
c0003c10:	eb bf                	jmp    c0003bd1 <store_xdir+0x30>
c0003c12:	89 f0                	mov    eax,esi
c0003c14:	83 fe 02             	cmp    esi,0x2
c0003c17:	76 05                	jbe    c0003c1e <store_xdir+0x7d>
c0003c19:	b8 02 00 00 00       	mov    eax,0x2
c0003c1e:	83 c4 0c             	add    esp,0xc
c0003c21:	5b                   	pop    ebx
c0003c22:	5e                   	pop    esi
c0003c23:	5f                   	pop    edi
c0003c24:	5d                   	pop    ebp
c0003c25:	c3                   	ret    

c0003c26 <dir_remove>:
c0003c26:	57                   	push   edi
c0003c27:	56                   	push   esi
c0003c28:	53                   	push   ebx
c0003c29:	89 c3                	mov    ebx,eax
c0003c2b:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c2e:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c30:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c33:	83 fa ff             	cmp    edx,0xffffffff
c0003c36:	74 09                	je     c0003c41 <dir_remove+0x1b>
c0003c38:	e8 62 f5 ff ff       	call   c000319f <dir_sdi>
c0003c3d:	85 c0                	test   eax,eax
c0003c3f:	75 41                	jne    c0003c82 <dir_remove+0x5c>
c0003c41:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c44:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c47:	89 f0                	mov    eax,esi
c0003c49:	e8 d3 e7 ff ff       	call   c0002421 <move_window>
c0003c4e:	85 c0                	test   eax,eax
c0003c50:	75 26                	jne    c0003c78 <dir_remove+0x52>
c0003c52:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c55:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c58:	75 05                	jne    c0003c5f <dir_remove+0x39>
c0003c5a:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c5d:	eb 03                	jmp    c0003c62 <dir_remove+0x3c>
c0003c5f:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c62:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c66:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c69:	73 17                	jae    c0003c82 <dir_remove+0x5c>
c0003c6b:	31 d2                	xor    edx,edx
c0003c6d:	89 d8                	mov    eax,ebx
c0003c6f:	e8 83 fa ff ff       	call   c00036f7 <dir_next>
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 c9                	je     c0003c41 <dir_remove+0x1b>
c0003c78:	83 f8 04             	cmp    eax,0x4
c0003c7b:	75 05                	jne    c0003c82 <dir_remove+0x5c>
c0003c7d:	b8 02 00 00 00       	mov    eax,0x2
c0003c82:	5b                   	pop    ebx
c0003c83:	5e                   	pop    esi
c0003c84:	5f                   	pop    edi
c0003c85:	c3                   	ret    

c0003c86 <create_name>:
c0003c86:	55                   	push   ebp
c0003c87:	89 d5                	mov    ebp,edx
c0003c89:	57                   	push   edi
c0003c8a:	89 c7                	mov    edi,eax
c0003c8c:	56                   	push   esi
c0003c8d:	31 f6                	xor    esi,esi
c0003c8f:	53                   	push   ebx
c0003c90:	83 ec 3c             	sub    esp,0x3c
c0003c93:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c95:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c99:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c9b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c9e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003ca2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003ca6:	e8 72 e0 ff ff       	call   c0001d1d <tchar2uni>
c0003cab:	89 c3                	mov    ebx,eax
c0003cad:	83 f8 ff             	cmp    eax,0xffffffff
c0003cb0:	75 0a                	jne    c0003cbc <create_name+0x36>
c0003cb2:	b8 06 00 00 00       	mov    eax,0x6
c0003cb7:	e9 9e 02 00 00       	jmp    c0003f5a <create_name+0x2d4>
c0003cbc:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cc1:	76 0c                	jbe    c0003ccf <create_name+0x49>
c0003cc3:	c1 e8 10             	shr    eax,0x10
c0003cc6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cca:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cce:	46                   	inc    esi
c0003ccf:	66 83 fb 1f          	cmp    bx,0x1f
c0003cd3:	76 4f                	jbe    c0003d24 <create_name+0x9e>
c0003cd5:	66 83 fb 5c          	cmp    bx,0x5c
c0003cd9:	74 35                	je     c0003d10 <create_name+0x8a>
c0003cdb:	66 83 fb 2f          	cmp    bx,0x2f
c0003cdf:	74 2f                	je     c0003d10 <create_name+0x8a>
c0003ce1:	66 83 fb 7f          	cmp    bx,0x7f
c0003ce5:	77 11                	ja     c0003cf8 <create_name+0x72>
c0003ce7:	0f b7 d3             	movzx  edx,bx
c0003cea:	b8 32 9f 02 c0       	mov    eax,0xc0029f32
c0003cef:	e8 11 e0 ff ff       	call   c0001d05 <chk_chr>
c0003cf4:	85 c0                	test   eax,eax
c0003cf6:	75 ba                	jne    c0003cb2 <create_name+0x2c>
c0003cf8:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003cfe:	77 b2                	ja     c0003cb2 <create_name+0x2c>
c0003d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d04:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d08:	46                   	inc    esi
c0003d09:	eb 97                	jmp    c0003ca2 <create_name+0x1c>
c0003d0b:	40                   	inc    eax
c0003d0c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d10:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d14:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d16:	80 fa 2f             	cmp    dl,0x2f
c0003d19:	74 f0                	je     c0003d0b <create_name+0x85>
c0003d1b:	80 fa 5c             	cmp    dl,0x5c
c0003d1e:	74 eb                	je     c0003d0b <create_name+0x85>
c0003d20:	31 db                	xor    ebx,ebx
c0003d22:	eb 02                	jmp    c0003d26 <create_name+0xa0>
c0003d24:	b3 04                	mov    bl,0x4
c0003d26:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d2a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d2d:	85 f6                	test   esi,esi
c0003d2f:	74 18                	je     c0003d49 <create_name+0xc3>
c0003d31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d35:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d3a:	66 83 f8 20          	cmp    ax,0x20
c0003d3e:	74 06                	je     c0003d46 <create_name+0xc0>
c0003d40:	66 83 f8 2e          	cmp    ax,0x2e
c0003d44:	75 03                	jne    c0003d49 <create_name+0xc3>
c0003d46:	4e                   	dec    esi
c0003d47:	eb e4                	jmp    c0003d2d <create_name+0xa7>
c0003d49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d4d:	31 ed                	xor    ebp,ebp
c0003d4f:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d55:	85 f6                	test   esi,esi
c0003d57:	0f 84 55 ff ff ff    	je     c0003cb2 <create_name+0x2c>
c0003d5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d61:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d64:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d68:	66 83 f8 20          	cmp    ax,0x20
c0003d6c:	75 04                	jne    c0003d72 <create_name+0xec>
c0003d6e:	89 d5                	mov    ebp,edx
c0003d70:	eb eb                	jmp    c0003d5d <create_name+0xd7>
c0003d72:	85 ed                	test   ebp,ebp
c0003d74:	75 06                	jne    c0003d7c <create_name+0xf6>
c0003d76:	66 83 f8 2e          	cmp    ax,0x2e
c0003d7a:	75 08                	jne    c0003d84 <create_name+0xfe>
c0003d7c:	83 cb 03             	or     ebx,0x3
c0003d7f:	eb 03                	jmp    c0003d84 <create_name+0xfe>
c0003d81:	4e                   	dec    esi
c0003d82:	74 0c                	je     c0003d90 <create_name+0x10a>
c0003d84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d88:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d8e:	75 f1                	jne    c0003d81 <create_name+0xfb>
c0003d90:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d95:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d98:	ba 20 00 00 00       	mov    edx,0x20
c0003d9d:	e8 35 df ff ff       	call   c0001cd7 <mem_set>
c0003da2:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003daa:	31 c9                	xor    ecx,ecx
c0003dac:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003db1:	8d 45 01             	lea    eax,[ebp+0x1]
c0003db4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003db8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dbc:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dc0:	66 85 ed             	test   bp,bp
c0003dc3:	0f 84 30 01 00 00    	je     c0003ef9 <create_name+0x273>
c0003dc9:	66 83 fd 20          	cmp    bp,0x20
c0003dcd:	74 10                	je     c0003ddf <create_name+0x159>
c0003dcf:	66 83 fd 2e          	cmp    bp,0x2e
c0003dd3:	75 13                	jne    c0003de8 <create_name+0x162>
c0003dd5:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd9:	0f 84 6b 01 00 00    	je     c0003f4a <create_name+0x2c4>
c0003ddf:	83 cb 03             	or     ebx,0x3
c0003de2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003de6:	eb c9                	jmp    c0003db1 <create_name+0x12b>
c0003de8:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dec:	73 0b                	jae    c0003df9 <create_name+0x173>
c0003dee:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df2:	75 47                	jne    c0003e3b <create_name+0x1b5>
c0003df4:	e9 51 01 00 00       	jmp    c0003f4a <create_name+0x2c4>
c0003df9:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003dfe:	75 10                	jne    c0003e10 <create_name+0x18a>
c0003e00:	83 cb 03             	or     ebx,0x3
c0003e03:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e0b:	e9 e9 00 00 00       	jmp    c0003ef9 <create_name+0x273>
c0003e10:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e14:	74 0d                	je     c0003e23 <create_name+0x19d>
c0003e16:	83 cb 03             	or     ebx,0x3
c0003e19:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e1d:	0f 87 d6 00 00 00    	ja     c0003ef9 <create_name+0x273>
c0003e23:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e28:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e2c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e34:	b9 08 00 00 00       	mov    ecx,0x8
c0003e39:	eb a7                	jmp    c0003de2 <create_name+0x15c>
c0003e3b:	66 83 fd 7f          	cmp    bp,0x7f
c0003e3f:	76 68                	jbe    c0003ea9 <create_name+0x223>
c0003e41:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e45:	88 da                	mov    dl,bl
c0003e47:	83 ca 02             	or     edx,0x2
c0003e4a:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e4e:	50                   	push   eax
c0003e4f:	50                   	push   eax
c0003e50:	68 b5 01 00 00       	push   0x1b5
c0003e55:	55                   	push   ebp
c0003e56:	e8 48 46 00 00       	call   c00084a3 <ff_uni2oem>
c0003e5b:	83 c4 10             	add    esp,0x10
c0003e5e:	89 c5                	mov    ebp,eax
c0003e60:	a8 80                	test   al,0x80
c0003e62:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e66:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e6a:	74 0c                	je     c0003e78 <create_name+0x1f2>
c0003e6c:	83 e5 7f             	and    ebp,0x7f
c0003e6f:	0f b6 ad 80 9e 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6180]
c0003e76:	eb 2a                	jmp    c0003ea2 <create_name+0x21c>
c0003e78:	66 3d ff 00          	cmp    ax,0xff
c0003e7c:	76 24                	jbe    c0003ea2 <create_name+0x21c>
c0003e7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e82:	48                   	dec    eax
c0003e83:	39 c8                	cmp    eax,ecx
c0003e85:	77 0c                	ja     c0003e93 <create_name+0x20d>
c0003e87:	83 cb 03             	or     ebx,0x3
c0003e8a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e8e:	e9 4f ff ff ff       	jmp    c0003de2 <create_name+0x15c>
c0003e93:	89 e8                	mov    eax,ebp
c0003e95:	88 d3                	mov    bl,dl
c0003e97:	66 c1 e8 08          	shr    ax,0x8
c0003e9b:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e9f:	41                   	inc    ecx
c0003ea0:	eb 4b                	jmp    c0003eed <create_name+0x267>
c0003ea2:	88 d3                	mov    bl,dl
c0003ea4:	66 85 ed             	test   bp,bp
c0003ea7:	74 19                	je     c0003ec2 <create_name+0x23c>
c0003ea9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ead:	0f b7 d5             	movzx  edx,bp
c0003eb0:	b8 3b 9f 02 c0       	mov    eax,0xc0029f3b
c0003eb5:	e8 4b de ff ff       	call   c0001d05 <chk_chr>
c0003eba:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ebe:	85 c0                	test   eax,eax
c0003ec0:	74 0a                	je     c0003ecc <create_name+0x246>
c0003ec2:	83 cb 03             	or     ebx,0x3
c0003ec5:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eca:	eb 21                	jmp    c0003eed <create_name+0x267>
c0003ecc:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003ecf:	66 83 f8 19          	cmp    ax,0x19
c0003ed3:	77 07                	ja     c0003edc <create_name+0x256>
c0003ed5:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003eda:	eb 11                	jmp    c0003eed <create_name+0x267>
c0003edc:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003edf:	66 83 f8 19          	cmp    ax,0x19
c0003ee3:	77 08                	ja     c0003eed <create_name+0x267>
c0003ee5:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003eea:	83 ed 20             	sub    ebp,0x20
c0003eed:	89 e8                	mov    eax,ebp
c0003eef:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ef3:	41                   	inc    ecx
c0003ef4:	e9 e9 fe ff ff       	jmp    c0003de2 <create_name+0x15c>
c0003ef9:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003efd:	75 04                	jne    c0003f03 <create_name+0x27d>
c0003eff:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f03:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f08:	75 05                	jne    c0003f0f <create_name+0x289>
c0003f0a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f0f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f13:	83 e0 0c             	and    eax,0xc
c0003f16:	3c 0c                	cmp    al,0xc
c0003f18:	74 0b                	je     c0003f25 <create_name+0x29f>
c0003f1a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f1e:	83 e0 03             	and    eax,0x3
c0003f21:	3c 03                	cmp    al,0x3
c0003f23:	75 05                	jne    c0003f2a <create_name+0x2a4>
c0003f25:	83 cb 02             	or     ebx,0x2
c0003f28:	eb 19                	jmp    c0003f43 <create_name+0x2bd>
c0003f2a:	f6 c3 02             	test   bl,0x2
c0003f2d:	75 14                	jne    c0003f43 <create_name+0x2bd>
c0003f2f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f34:	74 03                	je     c0003f39 <create_name+0x2b3>
c0003f36:	83 cb 10             	or     ebx,0x10
c0003f39:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f3e:	74 03                	je     c0003f43 <create_name+0x2bd>
c0003f40:	83 cb 08             	or     ebx,0x8
c0003f43:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f46:	31 c0                	xor    eax,eax
c0003f48:	eb 10                	jmp    c0003f5a <create_name+0x2d4>
c0003f4a:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f4f:	0f 85 ce fe ff ff    	jne    c0003e23 <create_name+0x19d>
c0003f55:	e9 a6 fe ff ff       	jmp    c0003e00 <create_name+0x17a>
c0003f5a:	83 c4 3c             	add    esp,0x3c
c0003f5d:	5b                   	pop    ebx
c0003f5e:	5e                   	pop    esi
c0003f5f:	5f                   	pop    edi
c0003f60:	5d                   	pop    ebp
c0003f61:	c3                   	ret    

c0003f62 <xname_sum>:
c0003f62:	56                   	push   esi
c0003f63:	53                   	push   ebx
c0003f64:	89 c6                	mov    esi,eax
c0003f66:	51                   	push   ecx
c0003f67:	31 db                	xor    ebx,ebx
c0003f69:	83 c6 02             	add    esi,0x2
c0003f6c:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f70:	66 85 c0             	test   ax,ax
c0003f73:	74 1f                	je     c0003f94 <xname_sum+0x32>
c0003f75:	83 ec 0c             	sub    esp,0xc
c0003f78:	66 d1 cb             	ror    bx,1
c0003f7b:	50                   	push   eax
c0003f7c:	e8 1e 46 00 00       	call   c000859f <ff_wtoupper>
c0003f81:	83 c4 10             	add    esp,0x10
c0003f84:	0f b6 d0             	movzx  edx,al
c0003f87:	66 c1 e8 08          	shr    ax,0x8
c0003f8b:	01 d3                	add    ebx,edx
c0003f8d:	66 d1 cb             	ror    bx,1
c0003f90:	01 c3                	add    ebx,eax
c0003f92:	eb d5                	jmp    c0003f69 <xname_sum+0x7>
c0003f94:	89 d8                	mov    eax,ebx
c0003f96:	5a                   	pop    edx
c0003f97:	5b                   	pop    ebx
c0003f98:	5e                   	pop    esi
c0003f99:	c3                   	ret    

c0003f9a <create_xdir>:
c0003f9a:	55                   	push   ebp
c0003f9b:	b9 40 00 00 00       	mov    ecx,0x40
c0003fa0:	57                   	push   edi
c0003fa1:	bd 01 00 00 00       	mov    ebp,0x1
c0003fa6:	56                   	push   esi
c0003fa7:	31 ff                	xor    edi,edi
c0003fa9:	53                   	push   ebx
c0003faa:	be 40 00 00 00       	mov    esi,0x40
c0003faf:	89 c3                	mov    ebx,eax
c0003fb1:	83 ec 1c             	sub    esp,0x1c
c0003fb4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fb8:	31 d2                	xor    edx,edx
c0003fba:	e8 18 dd ff ff       	call   c0001cd7 <mem_set>
c0003fbf:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fc2:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fc6:	31 c9                	xor    ecx,ecx
c0003fc8:	8d 46 01             	lea    eax,[esi+0x1]
c0003fcb:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fcf:	83 c6 02             	add    esi,0x2
c0003fd2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fd6:	66 85 ed             	test   bp,bp
c0003fd9:	74 12                	je     c0003fed <create_xdir+0x53>
c0003fdb:	0f b6 c1             	movzx  eax,cl
c0003fde:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe2:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fe6:	66 83 fd 01          	cmp    bp,0x1
c0003fea:	80 d9 ff             	sbb    cl,0xff
c0003fed:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003ff0:	0f b7 d5             	movzx  edx,bp
c0003ff3:	83 c6 02             	add    esi,0x2
c0003ff6:	e8 ba dc ff ff       	call   c0001cb5 <st_word>
c0003ffb:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0004001:	75 d3                	jne    c0003fd6 <create_xdir+0x3c>
c0004003:	8d 47 01             	lea    eax,[edi+0x1]
c0004006:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000400a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000400e:	0f b6 c1             	movzx  eax,cl
c0004011:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004016:	74 07                	je     c000401f <create_xdir+0x85>
c0004018:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000401d:	eb a9                	jmp    c0003fc8 <create_xdir+0x2e>
c000401f:	8d 47 02             	lea    eax,[edi+0x2]
c0004022:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004025:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004028:	89 d0                	mov    eax,edx
c000402a:	e8 33 ff ff ff       	call   c0003f62 <xname_sum>
c000402f:	83 c4 1c             	add    esp,0x1c
c0004032:	0f b7 d0             	movzx  edx,ax
c0004035:	8d 43 24             	lea    eax,[ebx+0x24]
c0004038:	5b                   	pop    ebx
c0004039:	5e                   	pop    esi
c000403a:	5f                   	pop    edi
c000403b:	5d                   	pop    ebp
c000403c:	e9 74 dc ff ff       	jmp    c0001cb5 <st_word>

c0004041 <cmp_lfn>:
c0004041:	55                   	push   ebp
c0004042:	57                   	push   edi
c0004043:	89 d7                	mov    edi,edx
c0004045:	56                   	push   esi
c0004046:	53                   	push   ebx
c0004047:	83 ec 1c             	sub    esp,0x1c
c000404a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000404e:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004051:	e8 ed db ff ff       	call   c0001c43 <ld_word>
c0004056:	66 85 c0             	test   ax,ax
c0004059:	74 07                	je     c0004062 <cmp_lfn+0x21>
c000405b:	31 c0                	xor    eax,eax
c000405d:	e9 9a 00 00 00       	jmp    c00040fc <cmp_lfn+0xbb>
c0004062:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004064:	bd 01 00 00 00       	mov    ebp,0x1
c0004069:	83 e3 3f             	and    ebx,0x3f
c000406c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004074:	4b                   	dec    ebx
c0004075:	6b db 0d             	imul   ebx,ebx,0xd
c0004078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000407c:	0f b6 80 00 9f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6100]
c0004083:	01 f8                	add    eax,edi
c0004085:	e8 b9 db ff ff       	call   c0001c43 <ld_word>
c000408a:	66 85 ed             	test   bp,bp
c000408d:	89 c6                	mov    esi,eax
c000408f:	74 3c                	je     c00040cd <cmp_lfn+0x8c>
c0004091:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0004097:	77 c2                	ja     c000405b <cmp_lfn+0x1a>
c0004099:	83 ec 0c             	sub    esp,0xc
c000409c:	0f b7 c0             	movzx  eax,ax
c000409f:	50                   	push   eax
c00040a0:	e8 fa 44 00 00       	call   c000859f <ff_wtoupper>
c00040a5:	89 c5                	mov    ebp,eax
c00040a7:	8d 43 01             	lea    eax,[ebx+0x1]
c00040aa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040ae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040b2:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00040b9:	e8 e1 44 00 00       	call   c000859f <ff_wtoupper>
c00040be:	83 c4 10             	add    esp,0x10
c00040c1:	39 c5                	cmp    ebp,eax
c00040c3:	75 96                	jne    c000405b <cmp_lfn+0x1a>
c00040c5:	89 f5                	mov    ebp,esi
c00040c7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040cb:	eb 04                	jmp    c00040d1 <cmp_lfn+0x90>
c00040cd:	66 46                	inc    si
c00040cf:	75 8a                	jne    c000405b <cmp_lfn+0x1a>
c00040d1:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040d5:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040da:	75 9c                	jne    c0004078 <cmp_lfn+0x37>
c00040dc:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040df:	74 16                	je     c00040f7 <cmp_lfn+0xb6>
c00040e1:	66 85 ed             	test   bp,bp
c00040e4:	74 11                	je     c00040f7 <cmp_lfn+0xb6>
c00040e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ea:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040ef:	0f 94 c0             	sete   al
c00040f2:	0f b6 c0             	movzx  eax,al
c00040f5:	eb 05                	jmp    c00040fc <cmp_lfn+0xbb>
c00040f7:	b8 01 00 00 00       	mov    eax,0x1
c00040fc:	83 c4 1c             	add    esp,0x1c
c00040ff:	5b                   	pop    ebx
c0004100:	5e                   	pop    esi
c0004101:	5f                   	pop    edi
c0004102:	5d                   	pop    ebp
c0004103:	c3                   	ret    

c0004104 <dir_find>:
c0004104:	55                   	push   ebp
c0004105:	31 d2                	xor    edx,edx
c0004107:	57                   	push   edi
c0004108:	56                   	push   esi
c0004109:	53                   	push   ebx
c000410a:	89 c3                	mov    ebx,eax
c000410c:	83 ec 1c             	sub    esp,0x1c
c000410f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004111:	e8 89 f0 ff ff       	call   c000319f <dir_sdi>
c0004116:	89 04 24             	mov    DWORD PTR [esp],eax
c0004119:	85 c0                	test   eax,eax
c000411b:	0f 85 9e 01 00 00    	jne    c00042bf <dir_find+0x1bb>
c0004121:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004124:	0f 85 8d 00 00 00    	jne    c00041b7 <dir_find+0xb3>
c000412a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000412d:	e8 30 fe ff ff       	call   c0003f62 <xname_sum>
c0004132:	89 c7                	mov    edi,eax
c0004134:	31 d2                	xor    edx,edx
c0004136:	89 d8                	mov    eax,ebx
c0004138:	e8 72 f8 ff ff       	call   c00039af <dir_read>
c000413d:	85 c0                	test   eax,eax
c000413f:	0f 85 5e 01 00 00    	jne    c00042a3 <dir_find+0x19f>
c0004145:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004148:	8d 41 24             	lea    eax,[ecx+0x24]
c000414b:	e8 f3 da ff ff       	call   c0001c43 <ld_word>
c0004150:	66 39 f8             	cmp    ax,di
c0004153:	75 df                	jne    c0004134 <dir_find+0x30>
c0004155:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004158:	31 ed                	xor    ebp,ebp
c000415a:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000415e:	ba 40 00 00 00       	mov    edx,0x40
c0004163:	89 e9                	mov    ecx,ebp
c0004165:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004169:	0f 84 42 01 00 00    	je     c00042b1 <dir_find+0x1ad>
c000416f:	f6 c2 1f             	test   dl,0x1f
c0004172:	75 03                	jne    c0004177 <dir_find+0x73>
c0004174:	83 c2 02             	add    edx,0x2
c0004177:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000417b:	89 d0                	mov    eax,edx
c000417d:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004180:	e8 be da ff ff       	call   c0001c43 <ld_word>
c0004185:	83 ec 0c             	sub    esp,0xc
c0004188:	0f b7 c0             	movzx  eax,ax
c000418b:	50                   	push   eax
c000418c:	e8 0e 44 00 00       	call   c000859f <ff_wtoupper>
c0004191:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004195:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004198:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c000419c:	89 04 24             	mov    DWORD PTR [esp],eax
c000419f:	e8 fb 43 00 00       	call   c000859f <ff_wtoupper>
c00041a4:	83 c4 10             	add    esp,0x10
c00041a7:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041ab:	75 87                	jne    c0004134 <dir_find+0x30>
c00041ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041b1:	45                   	inc    ebp
c00041b2:	83 c2 02             	add    edx,0x2
c00041b5:	eb ac                	jmp    c0004163 <dir_find+0x5f>
c00041b7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041be:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041c3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041c8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041cb:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ce:	89 f0                	mov    eax,esi
c00041d0:	e8 4c e2 ff ff       	call   c0002421 <move_window>
c00041d5:	85 c0                	test   eax,eax
c00041d7:	0f 85 c6 00 00 00    	jne    c00042a3 <dir_find+0x19f>
c00041dd:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041e0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041e3:	84 c9                	test   cl,cl
c00041e5:	0f 84 bd 00 00 00    	je     c00042a8 <dir_find+0x1a4>
c00041eb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041ee:	88 d0                	mov    al,dl
c00041f0:	83 e0 3f             	and    eax,0x3f
c00041f3:	80 f9 e5             	cmp    cl,0xe5
c00041f6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041f9:	0f 84 87 00 00 00    	je     c0004286 <dir_find+0x182>
c00041ff:	80 e2 08             	and    dl,0x8
c0004202:	74 06                	je     c000420a <dir_find+0x106>
c0004204:	3c 0f                	cmp    al,0xf
c0004206:	75 7e                	jne    c0004286 <dir_find+0x182>
c0004208:	eb 04                	jmp    c000420e <dir_find+0x10a>
c000420a:	3c 0f                	cmp    al,0xf
c000420c:	75 4c                	jne    c000425a <dir_find+0x156>
c000420e:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004212:	75 7e                	jne    c0004292 <dir_find+0x18e>
c0004214:	f6 c1 40             	test   cl,0x40
c0004217:	74 12                	je     c000422b <dir_find+0x127>
c0004219:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000421c:	83 e1 bf             	and    ecx,0xffffffbf
c000421f:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004223:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004226:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004229:	eb 06                	jmp    c0004231 <dir_find+0x12d>
c000422b:	89 f8                	mov    eax,edi
c000422d:	38 c8                	cmp    al,cl
c000422f:	75 5c                	jne    c000428d <dir_find+0x189>
c0004231:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004235:	bf ff ff ff ff       	mov    edi,0xffffffff
c000423a:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000423d:	75 53                	jne    c0004292 <dir_find+0x18e>
c000423f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004243:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004246:	89 ea                	mov    edx,ebp
c0004248:	e8 f4 fd ff ff       	call   c0004041 <cmp_lfn>
c000424d:	85 c0                	test   eax,eax
c000424f:	74 41                	je     c0004292 <dir_find+0x18e>
c0004251:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004255:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004258:	eb 38                	jmp    c0004292 <dir_find+0x18e>
c000425a:	89 f8                	mov    eax,edi
c000425c:	84 c0                	test   al,al
c000425e:	75 0d                	jne    c000426d <dir_find+0x169>
c0004260:	89 e8                	mov    eax,ebp
c0004262:	e8 98 de ff ff       	call   c00020ff <sum_sfn>
c0004267:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000426b:	74 52                	je     c00042bf <dir_find+0x1bb>
c000426d:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004271:	75 13                	jne    c0004286 <dir_find+0x182>
c0004273:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004276:	b9 0b 00 00 00       	mov    ecx,0xb
c000427b:	89 e8                	mov    eax,ebp
c000427d:	e8 60 da ff ff       	call   c0001ce2 <mem_cmp>
c0004282:	85 c0                	test   eax,eax
c0004284:	74 39                	je     c00042bf <dir_find+0x1bb>
c0004286:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000428d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004292:	31 d2                	xor    edx,edx
c0004294:	89 d8                	mov    eax,ebx
c0004296:	e8 5c f4 ff ff       	call   c00036f7 <dir_next>
c000429b:	85 c0                	test   eax,eax
c000429d:	0f 84 25 ff ff ff    	je     c00041c8 <dir_find+0xc4>
c00042a3:	89 04 24             	mov    DWORD PTR [esp],eax
c00042a6:	eb 17                	jmp    c00042bf <dir_find+0x1bb>
c00042a8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042af:	eb 0e                	jmp    c00042bf <dir_find+0x1bb>
c00042b1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042b4:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042b9:	0f 85 75 fe ff ff    	jne    c0004134 <dir_find+0x30>
c00042bf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042c2:	83 c4 1c             	add    esp,0x1c
c00042c5:	5b                   	pop    ebx
c00042c6:	5e                   	pop    esi
c00042c7:	5f                   	pop    edi
c00042c8:	5d                   	pop    ebp
c00042c9:	c3                   	ret    

c00042ca <dir_register>:
c00042ca:	55                   	push   ebp
c00042cb:	57                   	push   edi
c00042cc:	56                   	push   esi
c00042cd:	be 06 00 00 00       	mov    esi,0x6
c00042d2:	53                   	push   ebx
c00042d3:	83 ec 6c             	sub    esp,0x6c
c00042d6:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042da:	0f 85 62 02 00 00    	jne    c0004542 <dir_register+0x278>
c00042e0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042e2:	31 ff                	xor    edi,edi
c00042e4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e7:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042ec:	74 03                	je     c00042f1 <dir_register+0x27>
c00042ee:	47                   	inc    edi
c00042ef:	eb f6                	jmp    c00042e7 <dir_register+0x1d>
c00042f1:	89 c3                	mov    ebx,eax
c00042f3:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042f7:	0f 85 e1 00 00 00    	jne    c00043de <dir_register+0x114>
c00042fd:	83 c7 0e             	add    edi,0xe
c0004300:	b9 0f 00 00 00       	mov    ecx,0xf
c0004305:	89 f8                	mov    eax,edi
c0004307:	31 d2                	xor    edx,edx
c0004309:	f7 f1                	div    ecx
c000430b:	8d 50 02             	lea    edx,[eax+0x2]
c000430e:	89 c7                	mov    edi,eax
c0004310:	89 d8                	mov    eax,ebx
c0004312:	e8 12 f8 ff ff       	call   c0003b29 <dir_alloc>
c0004317:	89 c6                	mov    esi,eax
c0004319:	85 c0                	test   eax,eax
c000431b:	0f 85 21 02 00 00    	jne    c0004542 <dir_register+0x278>
c0004321:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004327:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000432a:	c1 e7 05             	shl    edi,0x5
c000432d:	29 f8                	sub    eax,edi
c000432f:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004332:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004335:	a8 04                	test   al,0x4
c0004337:	0f 84 91 00 00 00    	je     c00043ce <dir_register+0x104>
c000433d:	83 e0 fb             	and    eax,0xfffffffb
c0004340:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004343:	89 d8                	mov    eax,ebx
c0004345:	e8 25 ec ff ff       	call   c0002f6f <fill_first_frag>
c000434a:	85 c0                	test   eax,eax
c000434c:	0f 85 ee 01 00 00    	jne    c0004540 <dir_register+0x276>
c0004352:	83 c9 ff             	or     ecx,0xffffffff
c0004355:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004358:	89 d8                	mov    eax,ebx
c000435a:	e8 db eb ff ff       	call   c0002f3a <fill_last_frag>
c000435f:	85 c0                	test   eax,eax
c0004361:	0f 85 d9 01 00 00    	jne    c0004540 <dir_register+0x276>
c0004367:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000436b:	74 61                	je     c00043ce <dir_register+0x104>
c000436d:	89 da                	mov    edx,ebx
c000436f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004373:	e8 ea f5 ff ff       	call   c0003962 <load_obj_xdir>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 c0 01 00 00    	jne    c0004540 <dir_register+0x276>
c0004380:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004384:	31 c9                	xor    ecx,ecx
c0004386:	c1 e2 09             	shl    edx,0x9
c0004389:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000438c:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000438f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004392:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004395:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004398:	83 c0 38             	add    eax,0x38
c000439b:	e8 1c d9 ff ff       	call   c0001cbc <st_qword>
c00043a0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043a3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043a6:	83 c0 28             	add    eax,0x28
c00043a9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ac:	e8 0b d9 ff ff       	call   c0001cbc <st_qword>
c00043b1:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043b4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043b7:	83 c8 01             	or     eax,0x1
c00043ba:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043bd:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043c1:	e8 db f7 ff ff       	call   c0003ba1 <store_xdir>
c00043c6:	85 c0                	test   eax,eax
c00043c8:	0f 85 72 01 00 00    	jne    c0004540 <dir_register+0x276>
c00043ce:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043d1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043d4:	e8 c1 fb ff ff       	call   c0003f9a <create_xdir>
c00043d9:	e9 64 01 00 00       	jmp    c0004542 <dir_register+0x278>
c00043de:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043e1:	b9 0c 00 00 00       	mov    ecx,0xc
c00043e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ea:	89 c2                	mov    edx,eax
c00043ec:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043f0:	e8 cd d8 ff ff       	call   c0001cc2 <mem_cpy>
c00043f5:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043fa:	74 58                	je     c0004454 <dir_register+0x18a>
c00043fc:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004400:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004408:	83 ec 0c             	sub    esp,0xc
c000440b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000440e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004412:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004416:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000441a:	e8 24 dc ff ff       	call   c0002043 <gen_numname>
c000441f:	89 d8                	mov    eax,ebx
c0004421:	e8 de fc ff ff       	call   c0004104 <dir_find>
c0004426:	83 c4 10             	add    esp,0x10
c0004429:	89 c6                	mov    esi,eax
c000442b:	85 c0                	test   eax,eax
c000442d:	75 15                	jne    c0004444 <dir_register+0x17a>
c000442f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004433:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004438:	75 ce                	jne    c0004408 <dir_register+0x13e>
c000443a:	be 07 00 00 00       	mov    esi,0x7
c000443f:	e9 fe 00 00 00       	jmp    c0004542 <dir_register+0x278>
c0004444:	83 f8 04             	cmp    eax,0x4
c0004447:	0f 85 f5 00 00 00    	jne    c0004542 <dir_register+0x278>
c000444d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004451:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004454:	b9 01 00 00 00       	mov    ecx,0x1
c0004459:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000445e:	74 0f                	je     c000446f <dir_register+0x1a5>
c0004460:	b9 0d 00 00 00       	mov    ecx,0xd
c0004465:	8d 47 0c             	lea    eax,[edi+0xc]
c0004468:	31 d2                	xor    edx,edx
c000446a:	f7 f1                	div    ecx
c000446c:	8d 48 01             	lea    ecx,[eax+0x1]
c000446f:	89 ca                	mov    edx,ecx
c0004471:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004475:	89 d8                	mov    eax,ebx
c0004477:	e8 ad f6 ff ff       	call   c0003b29 <dir_alloc>
c000447c:	89 c6                	mov    esi,eax
c000447e:	85 c0                	test   eax,eax
c0004480:	0f 85 bc 00 00 00    	jne    c0004542 <dir_register+0x278>
c0004486:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000448a:	49                   	dec    ecx
c000448b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000448f:	74 6a                	je     c00044fb <dir_register+0x231>
c0004491:	89 c8                	mov    eax,ecx
c0004493:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004496:	c1 e0 05             	shl    eax,0x5
c0004499:	29 c2                	sub    edx,eax
c000449b:	89 d8                	mov    eax,ebx
c000449d:	e8 fd ec ff ff       	call   c000319f <dir_sdi>
c00044a2:	89 c6                	mov    esi,eax
c00044a4:	85 c0                	test   eax,eax
c00044a6:	0f 85 96 00 00 00    	jne    c0004542 <dir_register+0x278>
c00044ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044b0:	e8 4a dc ff ff       	call   c00020ff <sum_sfn>
c00044b5:	0f b6 f8             	movzx  edi,al
c00044b8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044bb:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044be:	89 e8                	mov    eax,ebp
c00044c0:	e8 5c df ff ff       	call   c0002421 <move_window>
c00044c5:	89 c6                	mov    esi,eax
c00044c7:	85 c0                	test   eax,eax
c00044c9:	75 77                	jne    c0004542 <dir_register+0x278>
c00044cb:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044d0:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044d3:	83 ec 0c             	sub    esp,0xc
c00044d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044d9:	57                   	push   edi
c00044da:	e8 e0 da ff ff       	call   c0001fbf <put_lfn>
c00044df:	31 d2                	xor    edx,edx
c00044e1:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044e5:	89 d8                	mov    eax,ebx
c00044e7:	e8 0b f2 ff ff       	call   c00036f7 <dir_next>
c00044ec:	83 c4 10             	add    esp,0x10
c00044ef:	89 c6                	mov    esi,eax
c00044f1:	85 c0                	test   eax,eax
c00044f3:	75 4d                	jne    c0004542 <dir_register+0x278>
c00044f5:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044f9:	75 bd                	jne    c00044b8 <dir_register+0x1ee>
c00044fb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044fe:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004501:	89 e8                	mov    eax,ebp
c0004503:	e8 19 df ff ff       	call   c0002421 <move_window>
c0004508:	89 c6                	mov    esi,eax
c000450a:	85 c0                	test   eax,eax
c000450c:	75 34                	jne    c0004542 <dir_register+0x278>
c000450e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004511:	b9 20 00 00 00       	mov    ecx,0x20
c0004516:	31 d2                	xor    edx,edx
c0004518:	e8 ba d7 ff ff       	call   c0001cd7 <mem_set>
c000451d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004524:	b9 0b 00 00 00       	mov    ecx,0xb
c0004529:	e8 94 d7 ff ff       	call   c0001cc2 <mem_cpy>
c000452e:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004531:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004534:	83 e0 18             	and    eax,0x18
c0004537:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000453a:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000453e:	eb 02                	jmp    c0004542 <dir_register+0x278>
c0004540:	89 c6                	mov    esi,eax
c0004542:	83 c4 6c             	add    esp,0x6c
c0004545:	89 f0                	mov    eax,esi
c0004547:	5b                   	pop    ebx
c0004548:	5e                   	pop    esi
c0004549:	5f                   	pop    edi
c000454a:	5d                   	pop    ebp
c000454b:	c3                   	ret    

c000454c <sync_fs>:
c000454c:	56                   	push   esi
c000454d:	53                   	push   ebx
c000454e:	53                   	push   ebx
c000454f:	89 c3                	mov    ebx,eax
c0004551:	e8 37 de ff ff       	call   c000238d <sync_window>
c0004556:	85 c0                	test   eax,eax
c0004558:	0f 85 b1 00 00 00    	jne    c000460f <sync_fs+0xc3>
c000455e:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004561:	0f 85 8e 00 00 00    	jne    c00045f5 <sync_fs+0xa9>
c0004567:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000456b:	0f 85 84 00 00 00    	jne    c00045f5 <sync_fs+0xa9>
c0004571:	b9 00 02 00 00       	mov    ecx,0x200
c0004576:	8d 73 54             	lea    esi,[ebx+0x54]
c0004579:	31 d2                	xor    edx,edx
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 55 d7 ff ff       	call   c0001cd7 <mem_set>
c0004582:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004588:	ba 55 aa 00 00       	mov    edx,0xaa55
c000458d:	e8 23 d7 ff ff       	call   c0001cb5 <st_word>
c0004592:	ba 52 52 61 41       	mov    edx,0x41615252
c0004597:	89 f0                	mov    eax,esi
c0004599:	e8 1b d7 ff ff       	call   c0001cb9 <st_dword>
c000459e:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045a4:	ba 72 72 41 61       	mov    edx,0x61417272
c00045a9:	e8 0b d7 ff ff       	call   c0001cb9 <st_dword>
c00045ae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045b1:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045b7:	e8 fd d6 ff ff       	call   c0001cb9 <st_dword>
c00045bc:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045bf:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045c5:	e8 ef d6 ff ff       	call   c0001cb9 <st_dword>
c00045ca:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045cd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045d0:	83 c0 01             	add    eax,0x1
c00045d3:	83 d2 00             	adc    edx,0x0
c00045d6:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045d9:	83 ec 0c             	sub    esp,0xc
c00045dc:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045df:	6a 01                	push   0x1
c00045e1:	52                   	push   edx
c00045e2:	50                   	push   eax
c00045e3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045e7:	56                   	push   esi
c00045e8:	50                   	push   eax
c00045e9:	e8 20 d6 ff ff       	call   c0001c0e <disk_write>
c00045ee:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045f2:	83 c4 20             	add    esp,0x20
c00045f5:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045f9:	51                   	push   ecx
c00045fa:	6a 00                	push   0x0
c00045fc:	6a 00                	push   0x0
c00045fe:	50                   	push   eax
c00045ff:	e8 20 d6 ff ff       	call   c0001c24 <disk_ioctl>
c0004604:	83 c4 10             	add    esp,0x10
c0004607:	85 c0                	test   eax,eax
c0004609:	0f 95 c0             	setne  al
c000460c:	0f b6 c0             	movzx  eax,al
c000460f:	5a                   	pop    edx
c0004610:	5b                   	pop    ebx
c0004611:	5e                   	pop    esi
c0004612:	c3                   	ret    

c0004613 <create_partition>:
c0004613:	55                   	push   ebp
c0004614:	0f b6 c0             	movzx  eax,al
c0004617:	57                   	push   edi
c0004618:	56                   	push   esi
c0004619:	53                   	push   ebx
c000461a:	83 ec 60             	sub    esp,0x60
c000461d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004621:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004625:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004629:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000462d:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004631:	50                   	push   eax
c0004632:	6a 01                	push   0x1
c0004634:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004638:	e8 e7 d5 ff ff       	call   c0001c24 <disk_ioctl>
c000463d:	83 c4 10             	add    esp,0x10
c0004640:	85 c0                	test   eax,eax
c0004642:	74 0a                	je     c000464e <create_partition+0x3b>
c0004644:	b8 01 00 00 00       	mov    eax,0x1
c0004649:	e9 67 05 00 00       	jmp    c0004bb5 <create_partition+0x5a2>
c000464e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004652:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004656:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000465a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000465e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004663:	0f 86 ed 03 00 00    	jbe    c0004a56 <create_partition+0x443>
c0004669:	83 c0 df             	add    eax,0xffffffdf
c000466c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004674:	83 d2 ff             	adc    edx,0xffffffff
c0004677:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000467b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000467f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004683:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004687:	83 c0 bd             	add    eax,0xffffffbd
c000468a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004691:	83 d2 ff             	adc    edx,0xffffffff
c0004694:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004698:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000469c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046a4:	be 22 00 00 00       	mov    esi,0x22
c00046a9:	31 ff                	xor    edi,edi
c00046ab:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046b3:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046bb:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046c3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046c7:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046cd:	75 0e                	jne    c00046dd <create_partition+0xca>
c00046cf:	b9 00 02 00 00       	mov    ecx,0x200
c00046d4:	31 d2                	xor    edx,edx
c00046d6:	89 d8                	mov    eax,ebx
c00046d8:	e8 fa d5 ff ff       	call   c0001cd7 <mem_set>
c00046dd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046e1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046e9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046ec:	0f 84 23 01 00 00    	je     c0004815 <create_partition+0x202>
c00046f2:	89 f0                	mov    eax,esi
c00046f4:	89 fa                	mov    edx,edi
c00046f6:	05 ff 07 00 00       	add    eax,0x7ff
c00046fb:	83 d2 00             	adc    edx,0x0
c00046fe:	89 c1                	mov    ecx,eax
c0004700:	89 d7                	mov    edi,edx
c0004702:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004708:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000470c:	89 ce                	mov    esi,ecx
c000470e:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004712:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004716:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c000471a:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000471d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004721:	89 04 24             	mov    DWORD PTR [esp],eax
c0004724:	b8 64 00 00 00       	mov    eax,0x64
c0004729:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000472c:	b8 00 00 00 00       	mov    eax,0x0
c0004731:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004735:	72 41                	jb     c0004778 <create_partition+0x165>
c0004737:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000473b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000473f:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004743:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004748:	01 c1                	add    ecx,eax
c000474a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000474e:	f7 24 24             	mul    DWORD PTR [esp]
c0004751:	6a 00                	push   0x0
c0004753:	01 ca                	add    edx,ecx
c0004755:	6a 64                	push   0x64
c0004757:	52                   	push   edx
c0004758:	50                   	push   eax
c0004759:	e8 16 2c 02 00       	call   c0027374 <__udivdi3>
c000475e:	83 c4 10             	add    esp,0x10
c0004761:	05 ff 07 00 00       	add    eax,0x7ff
c0004766:	83 d2 00             	adc    edx,0x0
c0004769:	89 c1                	mov    ecx,eax
c000476b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000476f:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004775:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004778:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000477b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000477f:	01 f0                	add    eax,esi
c0004781:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004785:	11 fa                	adc    edx,edi
c0004787:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000478b:	19 d1                	sbb    ecx,edx
c000478d:	73 2e                	jae    c00047bd <create_partition+0x1aa>
c000478f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004793:	89 f8                	mov    eax,edi
c0004795:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000479c:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047a0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047a8:	73 6b                	jae    c0004815 <create_partition+0x202>
c00047aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047b2:	29 f0                	sub    eax,esi
c00047b4:	19 fa                	sbb    edx,edi
c00047b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00047b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047c1:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047c4:	74 4f                	je     c0004815 <create_partition+0x202>
c00047c6:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047c9:	b9 10 00 00 00       	mov    ecx,0x10
c00047ce:	ba 10 9f 02 c0       	mov    edx,0xc0029f10
c00047d3:	e8 ea d4 ff ff       	call   c0001cc2 <mem_cpy>
c00047d8:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047dc:	b9 10 00 00 00       	mov    ecx,0x10
c00047e1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047e5:	e8 2c db ff ff       	call   c0002316 <make_rand>
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047f2:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047f6:	e8 c1 d4 ff ff       	call   c0001cbc <st_qword>
c00047fb:	03 34 24             	add    esi,DWORD PTR [esp]
c00047fe:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004802:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004806:	89 f2                	mov    edx,esi
c0004808:	89 f9                	mov    ecx,edi
c000480a:	83 c2 ff             	add    edx,0xffffffff
c000480d:	83 d1 ff             	adc    ecx,0xffffffff
c0004810:	e8 a7 d4 ff ff       	call   c0001cbc <st_qword>
c0004815:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004819:	83 e8 80             	sub    eax,0xffffff80
c000481c:	89 c5                	mov    ebp,eax
c000481e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004822:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004828:	75 6b                	jne    c0004895 <create_partition+0x282>
c000482a:	45                   	inc    ebp
c000482b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000482f:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004834:	e8 39 da ff ff       	call   c0002272 <crc32>
c0004839:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000483f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004843:	75 e5                	jne    c000482a <create_partition+0x217>
c0004845:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004849:	31 d2                	xor    edx,edx
c000484b:	83 ec 0c             	sub    esp,0xc
c000484e:	c1 ed 09             	shr    ebp,0x9
c0004851:	6a 01                	push   0x1
c0004853:	8d 45 02             	lea    eax,[ebp+0x2]
c0004856:	52                   	push   edx
c0004857:	50                   	push   eax
c0004858:	53                   	push   ebx
c0004859:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000485d:	e8 ac d3 ff ff       	call   c0001c0e <disk_write>
c0004862:	83 c4 20             	add    esp,0x20
c0004865:	85 c0                	test   eax,eax
c0004867:	0f 85 d7 fd ff ff    	jne    c0004644 <create_partition+0x31>
c000486d:	83 ec 0c             	sub    esp,0xc
c0004870:	31 d2                	xor    edx,edx
c0004872:	6a 01                	push   0x1
c0004874:	89 e8                	mov    eax,ebp
c0004876:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000487a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000487e:	52                   	push   edx
c000487f:	50                   	push   eax
c0004880:	53                   	push   ebx
c0004881:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004885:	e8 84 d3 ff ff       	call   c0001c0e <disk_write>
c000488a:	83 c4 20             	add    esp,0x20
c000488d:	85 c0                	test   eax,eax
c000488f:	0f 85 af fd ff ff    	jne    c0004644 <create_partition+0x31>
c0004895:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004899:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000489d:	3d 00 40 00 00       	cmp    eax,0x4000
c00048a2:	74 0d                	je     c00048b1 <create_partition+0x29e>
c00048a4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048a8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ac:	e9 12 fe ff ff       	jmp    c00046c3 <create_partition+0xb0>
c00048b1:	31 d2                	xor    edx,edx
c00048b3:	b9 00 02 00 00       	mov    ecx,0x200
c00048b8:	89 d8                	mov    eax,ebx
c00048ba:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048bd:	e8 15 d4 ff ff       	call   c0001cd7 <mem_set>
c00048c2:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048c5:	b9 10 00 00 00       	mov    ecx,0x10
c00048ca:	ba 00 9e 02 c0       	mov    edx,0xc0029e00
c00048cf:	89 d8                	mov    eax,ebx
c00048d1:	e8 ec d3 ff ff       	call   c0001cc2 <mem_cpy>
c00048d6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048da:	8d 43 58             	lea    eax,[ebx+0x58]
c00048dd:	f7 d2                	not    edx
c00048df:	e8 d5 d3 ff ff       	call   c0001cb9 <st_dword>
c00048e4:	8d 43 18             	lea    eax,[ebx+0x18]
c00048e7:	31 c9                	xor    ecx,ecx
c00048e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00048ec:	ba 01 00 00 00       	mov    edx,0x1
c00048f1:	e8 c6 d3 ff ff       	call   c0001cbc <st_qword>
c00048f6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048fa:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048fe:	83 c2 ff             	add    edx,0xffffffff
c0004901:	89 e8                	mov    eax,ebp
c0004903:	83 d1 ff             	adc    ecx,0xffffffff
c0004906:	e8 b1 d3 ff ff       	call   c0001cbc <st_qword>
c000490b:	31 c9                	xor    ecx,ecx
c000490d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004910:	ba 22 00 00 00       	mov    edx,0x22
c0004915:	e8 a2 d3 ff ff       	call   c0001cbc <st_qword>
c000491a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000491e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004922:	83 c2 de             	add    edx,0xffffffde
c0004925:	8d 43 30             	lea    eax,[ebx+0x30]
c0004928:	83 d1 ff             	adc    ecx,0xffffffff
c000492b:	31 f6                	xor    esi,esi
c000492d:	e8 8a d3 ff ff       	call   c0001cbc <st_qword>
c0004932:	8d 43 54             	lea    eax,[ebx+0x54]
c0004935:	ba 80 00 00 00       	mov    edx,0x80
c000493a:	e8 7a d3 ff ff       	call   c0001cb9 <st_dword>
c000493f:	8d 43 50             	lea    eax,[ebx+0x50]
c0004942:	ba 80 00 00 00       	mov    edx,0x80
c0004947:	e8 6d d3 ff ff       	call   c0001cb9 <st_dword>
c000494c:	ba 02 00 00 00       	mov    edx,0x2
c0004951:	89 f8                	mov    eax,edi
c0004953:	e8 61 d3 ff ff       	call   c0001cb9 <st_dword>
c0004958:	8d 53 38             	lea    edx,[ebx+0x38]
c000495b:	b9 10 00 00 00       	mov    ecx,0x10
c0004960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004964:	e8 ad d9 ff ff       	call   c0002316 <make_rand>
c0004969:	83 c8 ff             	or     eax,0xffffffff
c000496c:	46                   	inc    esi
c000496d:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004972:	e8 fb d8 ff ff       	call   c0002272 <crc32>
c0004977:	83 fe 5c             	cmp    esi,0x5c
c000497a:	75 f0                	jne    c000496c <create_partition+0x359>
c000497c:	f7 d0                	not    eax
c000497e:	8d 73 10             	lea    esi,[ebx+0x10]
c0004981:	89 c2                	mov    edx,eax
c0004983:	89 f0                	mov    eax,esi
c0004985:	e8 2f d3 ff ff       	call   c0001cb9 <st_dword>
c000498a:	83 ec 0c             	sub    esp,0xc
c000498d:	6a 01                	push   0x1
c000498f:	6a 00                	push   0x0
c0004991:	6a 01                	push   0x1
c0004993:	53                   	push   ebx
c0004994:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004998:	e8 71 d2 ff ff       	call   c0001c0e <disk_write>
c000499d:	83 c4 20             	add    esp,0x20
c00049a0:	85 c0                	test   eax,eax
c00049a2:	0f 85 9c fc ff ff    	jne    c0004644 <create_partition+0x31>
c00049a8:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ac:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049b0:	83 c2 ff             	add    edx,0xffffffff
c00049b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b6:	83 d1 ff             	adc    ecx,0xffffffff
c00049b9:	e8 fe d2 ff ff       	call   c0001cbc <st_qword>
c00049be:	ba 01 00 00 00       	mov    edx,0x1
c00049c3:	31 c9                	xor    ecx,ecx
c00049c5:	89 e8                	mov    eax,ebp
c00049c7:	e8 f0 d2 ff ff       	call   c0001cbc <st_qword>
c00049cc:	89 f8                	mov    eax,edi
c00049ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049d2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049d6:	31 ff                	xor    edi,edi
c00049d8:	e8 df d2 ff ff       	call   c0001cbc <st_qword>
c00049dd:	89 f0                	mov    eax,esi
c00049df:	31 d2                	xor    edx,edx
c00049e1:	e8 d3 d2 ff ff       	call   c0001cb9 <st_dword>
c00049e6:	83 c8 ff             	or     eax,0xffffffff
c00049e9:	47                   	inc    edi
c00049ea:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049ef:	e8 7e d8 ff ff       	call   c0002272 <crc32>
c00049f4:	83 ff 5c             	cmp    edi,0x5c
c00049f7:	75 f0                	jne    c00049e9 <create_partition+0x3d6>
c00049f9:	f7 d0                	not    eax
c00049fb:	89 c2                	mov    edx,eax
c00049fd:	89 f0                	mov    eax,esi
c00049ff:	e8 b5 d2 ff ff       	call   c0001cb9 <st_dword>
c0004a04:	83 ec 0c             	sub    esp,0xc
c0004a07:	6a 01                	push   0x1
c0004a09:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a0d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a11:	83 c0 ff             	add    eax,0xffffffff
c0004a14:	83 d2 ff             	adc    edx,0xffffffff
c0004a17:	52                   	push   edx
c0004a18:	50                   	push   eax
c0004a19:	53                   	push   ebx
c0004a1a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a1e:	e8 eb d1 ff ff       	call   c0001c0e <disk_write>
c0004a23:	83 c4 20             	add    esp,0x20
c0004a26:	85 c0                	test   eax,eax
c0004a28:	0f 85 16 fc ff ff    	jne    c0004644 <create_partition+0x31>
c0004a2e:	31 d2                	xor    edx,edx
c0004a30:	89 d8                	mov    eax,ebx
c0004a32:	b9 00 02 00 00       	mov    ecx,0x200
c0004a37:	e8 9b d2 ff ff       	call   c0001cd7 <mem_set>
c0004a3c:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a42:	b9 10 00 00 00       	mov    ecx,0x10
c0004a47:	ba 10 9e 02 c0       	mov    edx,0xc0029e10
c0004a4c:	e8 71 d2 ff ff       	call   c0001cc2 <mem_cpy>
c0004a51:	e9 21 01 00 00       	jmp    c0004b77 <create_partition+0x564>
c0004a56:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a5a:	b9 05 00 00 00       	mov    ecx,0x5
c0004a5f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a62:	bf 08 00 00 00       	mov    edi,0x8
c0004a67:	89 f8                	mov    eax,edi
c0004a69:	31 d2                	xor    edx,edx
c0004a6b:	0f b6 f0             	movzx  esi,al
c0004a6e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a71:	f7 f6                	div    esi
c0004a73:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a78:	76 0a                	jbe    c0004a84 <create_partition+0x471>
c0004a7a:	d1 e7                	shl    edi,1
c0004a7c:	49                   	dec    ecx
c0004a7d:	75 e8                	jne    c0004a67 <create_partition+0x454>
c0004a7f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a84:	b9 00 02 00 00       	mov    ecx,0x200
c0004a89:	31 d2                	xor    edx,edx
c0004a8b:	89 d8                	mov    eax,ebx
c0004a8d:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a93:	e8 3f d2 ff ff       	call   c0001cd7 <mem_set>
c0004a98:	b9 64 00 00 00       	mov    ecx,0x64
c0004a9d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004aa0:	31 d2                	xor    edx,edx
c0004aa2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004aaa:	f7 f1                	div    ecx
c0004aac:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004ab1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ab5:	89 f8                	mov    eax,edi
c0004ab7:	0f b6 c0             	movzx  eax,al
c0004aba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004abe:	e9 80 00 00 00       	jmp    c0004b43 <create_partition+0x530>
c0004ac3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ac6:	29 cf                	sub    edi,ecx
c0004ac8:	89 ca                	mov    edx,ecx
c0004aca:	89 f0                	mov    eax,esi
c0004acc:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ad1:	e8 e3 d1 ff ff       	call   c0001cb9 <st_dword>
c0004ad6:	8d 46 04             	lea    eax,[esi+0x4]
c0004ad9:	89 fa                	mov    edx,edi
c0004adb:	83 c6 10             	add    esi,0x10
c0004ade:	e8 d6 d1 ff ff       	call   c0001cb9 <st_dword>
c0004ae3:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004ae7:	31 d2                	xor    edx,edx
c0004ae9:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004aec:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004af0:	89 c8                	mov    eax,ecx
c0004af2:	01 f9                	add    ecx,edi
c0004af4:	f7 f5                	div    ebp
c0004af6:	89 d5                	mov    ebp,edx
c0004af8:	31 d2                	xor    edx,edx
c0004afa:	45                   	inc    ebp
c0004afb:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004aff:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b02:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b05:	89 c2                	mov    edx,eax
c0004b07:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b0a:	c1 ea 02             	shr    edx,0x2
c0004b0d:	83 e2 c0             	and    edx,0xffffffc0
c0004b10:	09 ea                	or     edx,ebp
c0004b12:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b17:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b1a:	31 d2                	xor    edx,edx
c0004b1c:	f7 f5                	div    ebp
c0004b1e:	89 d7                	mov    edi,edx
c0004b20:	31 d2                	xor    edx,edx
c0004b22:	47                   	inc    edi
c0004b23:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b27:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b2a:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b2d:	89 c5                	mov    ebp,eax
c0004b2f:	c1 ed 02             	shr    ebp,0x2
c0004b32:	83 e5 c0             	and    ebp,0xffffffc0
c0004b35:	09 ef                	or     edi,ebp
c0004b37:	89 fa                	mov    edx,edi
c0004b39:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b3c:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b41:	74 34                	je     c0004b77 <create_partition+0x564>
c0004b43:	85 c9                	test   ecx,ecx
c0004b45:	74 30                	je     c0004b77 <create_partition+0x564>
c0004b47:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b4a:	76 2b                	jbe    c0004b77 <create_partition+0x564>
c0004b4c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b50:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b54:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b57:	83 ff 64             	cmp    edi,0x64
c0004b5a:	76 4b                	jbe    c0004ba7 <create_partition+0x594>
c0004b5c:	89 f8                	mov    eax,edi
c0004b5e:	01 c8                	add    eax,ecx
c0004b60:	0f 82 5d ff ff ff    	jb     c0004ac3 <create_partition+0x4b0>
c0004b66:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b69:	0f 87 54 ff ff ff    	ja     c0004ac3 <create_partition+0x4b0>
c0004b6f:	85 ff                	test   edi,edi
c0004b71:	0f 85 51 ff ff ff    	jne    c0004ac8 <create_partition+0x4b5>
c0004b77:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b7d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b82:	e8 2e d1 ff ff       	call   c0001cb5 <st_word>
c0004b87:	83 ec 0c             	sub    esp,0xc
c0004b8a:	6a 01                	push   0x1
c0004b8c:	6a 00                	push   0x0
c0004b8e:	6a 00                	push   0x0
c0004b90:	53                   	push   ebx
c0004b91:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b95:	e8 74 d0 ff ff       	call   c0001c0e <disk_write>
c0004b9a:	83 c4 20             	add    esp,0x20
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	0f 95 c0             	setne  al
c0004ba2:	0f b6 c0             	movzx  eax,al
c0004ba5:	eb 0e                	jmp    c0004bb5 <create_partition+0x5a2>
c0004ba7:	74 07                	je     c0004bb0 <create_partition+0x59d>
c0004ba9:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bae:	eb ac                	jmp    c0004b5c <create_partition+0x549>
c0004bb0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bb3:	eb a7                	jmp    c0004b5c <create_partition+0x549>
c0004bb5:	83 c4 5c             	add    esp,0x5c
c0004bb8:	5b                   	pop    ebx
c0004bb9:	5e                   	pop    esi
c0004bba:	5f                   	pop    edi
c0004bbb:	5d                   	pop    ebp
c0004bbc:	c3                   	ret    

c0004bbd <get_fileinfo>:
c0004bbd:	55                   	push   ebp
c0004bbe:	57                   	push   edi
c0004bbf:	56                   	push   esi
c0004bc0:	53                   	push   ebx
c0004bc1:	83 ec 1c             	sub    esp,0x1c
c0004bc4:	8b 30                	mov    esi,DWORD PTR [eax]
c0004bc6:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bca:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bce:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bd1:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bd4:	0f 84 dc 01 00 00    	je     c0004db6 <get_fileinfo+0x1f9>
c0004bda:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bdd:	75 0f                	jne    c0004bee <get_fileinfo+0x31>
c0004bdf:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004be2:	83 c4 1c             	add    esp,0x1c
c0004be5:	5b                   	pop    ebx
c0004be6:	5e                   	pop    esi
c0004be7:	5f                   	pop    edi
c0004be8:	5d                   	pop    ebp
c0004be9:	e9 58 d5 ff ff       	jmp    c0002146 <get_xfileinfo>
c0004bee:	89 d3                	mov    ebx,edx
c0004bf0:	89 c6                	mov    esi,eax
c0004bf2:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bf6:	74 6a                	je     c0004c62 <get_fileinfo+0xa5>
c0004bf8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c00:	31 ed                	xor    ebp,ebp
c0004c02:	31 ff                	xor    edi,edi
c0004c04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c08:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c0c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c0f:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c13:	66 85 d2             	test   dx,dx
c0004c16:	74 3e                	je     c0004c56 <get_fileinfo+0x99>
c0004c18:	66 85 ed             	test   bp,bp
c0004c1b:	75 0c                	jne    c0004c29 <get_fileinfo+0x6c>
c0004c1d:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c23:	66 3d ff 07          	cmp    ax,0x7ff
c0004c27:	76 22                	jbe    c0004c4b <get_fileinfo+0x8e>
c0004c29:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c2e:	89 e8                	mov    eax,ebp
c0004c30:	29 f9                	sub    ecx,edi
c0004c32:	c1 e0 10             	shl    eax,0x10
c0004c35:	09 d0                	or     eax,edx
c0004c37:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c3b:	e8 a3 d1 ff ff       	call   c0001de3 <put_utf>
c0004c40:	84 c0                	test   al,al
c0004c42:	74 10                	je     c0004c54 <get_fileinfo+0x97>
c0004c44:	0f b6 c0             	movzx  eax,al
c0004c47:	31 d2                	xor    edx,edx
c0004c49:	01 c7                	add    edi,eax
c0004c4b:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c50:	89 d5                	mov    ebp,edx
c0004c52:	eb b0                	jmp    c0004c04 <get_fileinfo+0x47>
c0004c54:	31 ff                	xor    edi,edi
c0004c56:	66 85 ed             	test   bp,bp
c0004c59:	74 02                	je     c0004c5d <get_fileinfo+0xa0>
c0004c5b:	31 ff                	xor    edi,edi
c0004c5d:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c62:	31 ff                	xor    edi,edi
c0004c64:	31 c9                	xor    ecx,ecx
c0004c66:	83 f9 0a             	cmp    ecx,0xa
c0004c69:	0f 87 ad 00 00 00    	ja     c0004d1c <get_fileinfo+0x15f>
c0004c6f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c72:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c75:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c79:	66 83 fa 20          	cmp    dx,0x20
c0004c7d:	0f 84 92 00 00 00    	je     c0004d15 <get_fileinfo+0x158>
c0004c83:	66 83 fa 05          	cmp    dx,0x5
c0004c87:	75 05                	jne    c0004c8e <get_fileinfo+0xd1>
c0004c89:	ba e5 00 00 00       	mov    edx,0xe5
c0004c8e:	83 ff 0b             	cmp    edi,0xb
c0004c91:	77 0b                	ja     c0004c9e <get_fileinfo+0xe1>
c0004c93:	83 fd 09             	cmp    ebp,0x9
c0004c96:	75 06                	jne    c0004c9e <get_fileinfo+0xe1>
c0004c98:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c9d:	47                   	inc    edi
c0004c9e:	0f b7 c2             	movzx  eax,dx
c0004ca1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ca5:	e8 6d d0 ff ff       	call   c0001d17 <dbc_1st>
c0004caa:	85 c0                	test   eax,eax
c0004cac:	74 2f                	je     c0004cdd <get_fileinfo+0x120>
c0004cae:	83 fd 08             	cmp    ebp,0x8
c0004cb1:	74 2a                	je     c0004cdd <get_fileinfo+0x120>
c0004cb3:	83 fd 0b             	cmp    ebp,0xb
c0004cb6:	74 25                	je     c0004cdd <get_fileinfo+0x120>
c0004cb8:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cbb:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cbf:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004cc3:	e8 52 d0 ff ff       	call   c0001d1a <dbc_2nd>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 11                	je     c0004cdd <get_fileinfo+0x120>
c0004ccc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cd0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cd5:	c1 e2 08             	shl    edx,0x8
c0004cd8:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cdb:	09 c2                	or     edx,eax
c0004cdd:	0f b7 d2             	movzx  edx,dx
c0004ce0:	50                   	push   eax
c0004ce1:	50                   	push   eax
c0004ce2:	68 b5 01 00 00       	push   0x1b5
c0004ce7:	52                   	push   edx
c0004ce8:	e8 46 38 00 00       	call   c0008533 <ff_oem2uni>
c0004ced:	83 c4 10             	add    esp,0x10
c0004cf0:	66 85 c0             	test   ax,ax
c0004cf3:	75 04                	jne    c0004cf9 <get_fileinfo+0x13c>
c0004cf5:	31 ff                	xor    edi,edi
c0004cf7:	eb 23                	jmp    c0004d1c <get_fileinfo+0x15f>
c0004cf9:	b9 0c 00 00 00       	mov    ecx,0xc
c0004cfe:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d02:	29 f9                	sub    ecx,edi
c0004d04:	0f b7 c0             	movzx  eax,ax
c0004d07:	e8 d7 d0 ff ff       	call   c0001de3 <put_utf>
c0004d0c:	84 c0                	test   al,al
c0004d0e:	74 e5                	je     c0004cf5 <get_fileinfo+0x138>
c0004d10:	0f b6 c0             	movzx  eax,al
c0004d13:	01 c7                	add    edi,eax
c0004d15:	89 e9                	mov    ecx,ebp
c0004d17:	e9 4a ff ff ff       	jmp    c0004c66 <get_fileinfo+0xa9>
c0004d1c:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d21:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d25:	75 54                	jne    c0004d7b <get_fileinfo+0x1be>
c0004d27:	85 ff                	test   edi,edi
c0004d29:	75 0b                	jne    c0004d36 <get_fileinfo+0x179>
c0004d2b:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d2f:	ba 01 00 00 00       	mov    edx,0x1
c0004d34:	eb 33                	jmp    c0004d69 <get_fileinfo+0x1ac>
c0004d36:	b1 08                	mov    cl,0x8
c0004d38:	31 d2                	xor    edx,edx
c0004d3a:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d40:	84 c0                	test   al,al
c0004d42:	74 25                	je     c0004d69 <get_fileinfo+0x1ac>
c0004d44:	66 83 f8 2e          	cmp    ax,0x2e
c0004d48:	74 16                	je     c0004d60 <get_fileinfo+0x1a3>
c0004d4a:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d4d:	66 83 ff 19          	cmp    di,0x19
c0004d51:	77 0f                	ja     c0004d62 <get_fileinfo+0x1a5>
c0004d53:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d56:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d59:	74 07                	je     c0004d62 <get_fileinfo+0x1a5>
c0004d5b:	83 c0 20             	add    eax,0x20
c0004d5e:	eb 02                	jmp    c0004d62 <get_fileinfo+0x1a5>
c0004d60:	b1 10                	mov    cl,0x10
c0004d62:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d66:	42                   	inc    edx
c0004d67:	eb d1                	jmp    c0004d3a <get_fileinfo+0x17d>
c0004d69:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d6e:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d71:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d75:	75 04                	jne    c0004d7b <get_fileinfo+0x1be>
c0004d77:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d7b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7e:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d81:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d84:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d87:	83 c0 1c             	add    eax,0x1c
c0004d8a:	e8 c1 ce ff ff       	call   c0001c50 <ld_dword>
c0004d8f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d96:	89 03                	mov    DWORD PTR [ebx],eax
c0004d98:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9b:	83 c0 16             	add    eax,0x16
c0004d9e:	e8 a0 ce ff ff       	call   c0001c43 <ld_word>
c0004da3:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004da7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004daa:	83 c0 18             	add    eax,0x18
c0004dad:	e8 91 ce ff ff       	call   c0001c43 <ld_word>
c0004db2:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004db6:	83 c4 1c             	add    esp,0x1c
c0004db9:	5b                   	pop    ebx
c0004dba:	5e                   	pop    esi
c0004dbb:	5f                   	pop    edi
c0004dbc:	5d                   	pop    ebp
c0004dbd:	c3                   	ret    

c0004dbe <ld_clust.isra.0>:
c0004dbe:	56                   	push   esi
c0004dbf:	89 c6                	mov    esi,eax
c0004dc1:	53                   	push   ebx
c0004dc2:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004dc5:	89 d3                	mov    ebx,edx
c0004dc7:	e8 77 ce ff ff       	call   c0001c43 <ld_word>
c0004dcc:	0f b7 c8             	movzx  ecx,ax
c0004dcf:	89 f0                	mov    eax,esi
c0004dd1:	3c 03                	cmp    al,0x3
c0004dd3:	75 0d                	jne    c0004de2 <ld_clust.isra.0+0x24>
c0004dd5:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dd8:	e8 66 ce ff ff       	call   c0001c43 <ld_word>
c0004ddd:	c1 e0 10             	shl    eax,0x10
c0004de0:	09 c1                	or     ecx,eax
c0004de2:	89 c8                	mov    eax,ecx
c0004de4:	5b                   	pop    ebx
c0004de5:	5e                   	pop    esi
c0004de6:	c3                   	ret    

c0004de7 <st_clust.isra.1>:
c0004de7:	56                   	push   esi
c0004de8:	89 c6                	mov    esi,eax
c0004dea:	53                   	push   ebx
c0004deb:	89 d3                	mov    ebx,edx
c0004ded:	0f b7 d1             	movzx  edx,cx
c0004df0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004df3:	e8 bd ce ff ff       	call   c0001cb5 <st_word>
c0004df8:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004dfb:	75 0f                	jne    c0004e0c <st_clust.isra.1+0x25>
c0004dfd:	c1 e9 10             	shr    ecx,0x10
c0004e00:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e03:	89 ca                	mov    edx,ecx
c0004e05:	5b                   	pop    ebx
c0004e06:	5e                   	pop    esi
c0004e07:	e9 a9 ce ff ff       	jmp    c0001cb5 <st_word>
c0004e0c:	5b                   	pop    ebx
c0004e0d:	5e                   	pop    esi
c0004e0e:	c3                   	ret    

c0004e0f <init_alloc_info.isra.2>:
c0004e0f:	56                   	push   esi
c0004e10:	53                   	push   ebx
c0004e11:	89 c6                	mov    esi,eax
c0004e13:	89 d3                	mov    ebx,edx
c0004e15:	51                   	push   ecx
c0004e16:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e18:	83 c0 34             	add    eax,0x34
c0004e1b:	e8 30 ce ff ff       	call   c0001c50 <ld_dword>
c0004e20:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e23:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e25:	83 c0 38             	add    eax,0x38
c0004e28:	e8 3b ce ff ff       	call   c0001c68 <ld_qword>
c0004e2d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e30:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e33:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e35:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e38:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e3f:	83 e0 02             	and    eax,0x2
c0004e42:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e45:	5b                   	pop    ebx
c0004e46:	5b                   	pop    ebx
c0004e47:	5e                   	pop    esi
c0004e48:	c3                   	ret    

c0004e49 <follow_path>:
c0004e49:	56                   	push   esi
c0004e4a:	53                   	push   ebx
c0004e4b:	89 c3                	mov    ebx,eax
c0004e4d:	83 ec 14             	sub    esp,0x14
c0004e50:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e54:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5a:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e5c:	80 fa 5c             	cmp    dl,0x5c
c0004e5f:	75 07                	jne    c0004e68 <follow_path+0x1f>
c0004e61:	40                   	inc    eax
c0004e62:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e66:	eb ee                	jmp    c0004e56 <follow_path+0xd>
c0004e68:	80 fa 2f             	cmp    dl,0x2f
c0004e6b:	74 f4                	je     c0004e61 <follow_path+0x18>
c0004e6d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e74:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e7b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e7e:	77 52                	ja     c0004ed2 <follow_path+0x89>
c0004e80:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e84:	31 d2                	xor    edx,edx
c0004e86:	89 d8                	mov    eax,ebx
c0004e88:	e8 12 e3 ff ff       	call   c000319f <dir_sdi>
c0004e8d:	eb 7c                	jmp    c0004f0b <follow_path+0xc2>
c0004e8f:	89 d8                	mov    eax,ebx
c0004e91:	e8 6e f2 ff ff       	call   c0004104 <dir_find>
c0004e96:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e99:	85 c0                	test   eax,eax
c0004e9b:	75 46                	jne    c0004ee3 <follow_path+0x9a>
c0004e9d:	80 e2 04             	and    dl,0x4
c0004ea0:	75 69                	jne    c0004f0b <follow_path+0xc2>
c0004ea2:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ea6:	74 5e                	je     c0004f06 <follow_path+0xbd>
c0004ea8:	8a 06                	mov    al,BYTE PTR [esi]
c0004eaa:	3c 04                	cmp    al,0x4
c0004eac:	75 41                	jne    c0004eef <follow_path+0xa6>
c0004eae:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004eb1:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004eb5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004eb8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ebb:	30 c0                	xor    al,al
c0004ebd:	09 d0                	or     eax,edx
c0004ebf:	89 da                	mov    edx,ebx
c0004ec1:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ec4:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ec7:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eca:	8d 46 10             	lea    eax,[esi+0x10]
c0004ecd:	e8 3d ff ff ff       	call   c0004e0f <init_alloc_info.isra.2>
c0004ed2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ed6:	89 d8                	mov    eax,ebx
c0004ed8:	e8 a9 ed ff ff       	call   c0003c86 <create_name>
c0004edd:	85 c0                	test   eax,eax
c0004edf:	74 ae                	je     c0004e8f <follow_path+0x46>
c0004ee1:	eb 28                	jmp    c0004f0b <follow_path+0xc2>
c0004ee3:	83 f8 04             	cmp    eax,0x4
c0004ee6:	75 23                	jne    c0004f0b <follow_path+0xc2>
c0004ee8:	80 e2 04             	and    dl,0x4
c0004eeb:	74 19                	je     c0004f06 <follow_path+0xbd>
c0004eed:	eb 1c                	jmp    c0004f0b <follow_path+0xc2>
c0004eef:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ef2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004ef8:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004efc:	e8 bd fe ff ff       	call   c0004dbe <ld_clust.isra.0>
c0004f01:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f04:	eb cc                	jmp    c0004ed2 <follow_path+0x89>
c0004f06:	b8 05 00 00 00       	mov    eax,0x5
c0004f0b:	83 c4 14             	add    esp,0x14
c0004f0e:	5b                   	pop    ebx
c0004f0f:	5e                   	pop    esi
c0004f10:	c3                   	ret    

c0004f11 <f_mount>:
c0004f11:	53                   	push   ebx
c0004f12:	83 ec 18             	sub    esp,0x18
c0004f15:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f19:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f21:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f25:	e8 fb d2 ff ff       	call   c0002225 <get_ldnumber>
c0004f2a:	89 c2                	mov    edx,eax
c0004f2c:	b8 0b 00 00 00       	mov    eax,0xb
c0004f31:	85 d2                	test   edx,edx
c0004f33:	78 39                	js     c0004f6e <f_mount+0x5d>
c0004f35:	8b 04 95 00 f0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1000]
c0004f3c:	85 c0                	test   eax,eax
c0004f3e:	74 03                	je     c0004f43 <f_mount+0x32>
c0004f40:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f47:	85 c0                	test   eax,eax
c0004f49:	74 03                	je     c0004f4e <f_mount+0x3d>
c0004f4b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f52:	89 04 95 00 f0 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1000],eax
c0004f59:	31 c0                	xor    eax,eax
c0004f5b:	84 db                	test   bl,bl
c0004f5d:	74 0f                	je     c0004f6e <f_mount+0x5d>
c0004f5f:	31 c9                	xor    ecx,ecx
c0004f61:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f65:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f69:	e8 65 d7 ff ff       	call   c00026d3 <mount_volume>
c0004f6e:	83 c4 18             	add    esp,0x18
c0004f71:	5b                   	pop    ebx
c0004f72:	c3                   	ret    

c0004f73 <f_open>:
c0004f73:	55                   	push   ebp
c0004f74:	bd 09 00 00 00       	mov    ebp,0x9
c0004f79:	57                   	push   edi
c0004f7a:	56                   	push   esi
c0004f7b:	53                   	push   ebx
c0004f7c:	83 ec 7c             	sub    esp,0x7c
c0004f7f:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f86:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f8d:	85 db                	test   ebx,ebx
c0004f8f:	0f 84 10 04 00 00    	je     c00053a5 <f_open+0x432>
c0004f95:	89 fe                	mov    esi,edi
c0004f97:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f9b:	83 e6 3f             	and    esi,0x3f
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	0f b6 c8             	movzx  ecx,al
c0004fa3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004faa:	e8 24 d7 ff ff       	call   c00026d3 <mount_volume>
c0004faf:	89 c5                	mov    ebp,eax
c0004fb1:	85 c0                	test   eax,eax
c0004fb3:	0f 85 e6 03 00 00    	jne    c000539f <f_open+0x42c>
c0004fb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fbd:	bd 11 00 00 00       	mov    ebp,0x11
c0004fc2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fc6:	83 ec 0c             	sub    esp,0xc
c0004fc9:	68 60 04 00 00       	push   0x460
c0004fce:	e8 a3 34 00 00       	call   c0008476 <ff_memalloc>
c0004fd3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fd7:	83 c4 10             	add    esp,0x10
c0004fda:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fdf:	0f 84 c0 03 00 00    	je     c00053a5 <f_open+0x432>
c0004fe5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fe9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fed:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004ff3:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004ff6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004ff9:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0005000:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005004:	e8 40 fe ff ff       	call   c0004e49 <follow_path>
c0005009:	89 c5                	mov    ebp,eax
c000500b:	85 c0                	test   eax,eax
c000500d:	75 0c                	jne    c000501b <f_open+0xa8>
c000500f:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005014:	79 05                	jns    c000501b <f_open+0xa8>
c0005016:	bd 06 00 00 00       	mov    ebp,0x6
c000501b:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005021:	0f 84 84 01 00 00    	je     c00051ab <f_open+0x238>
c0005027:	85 ed                	test   ebp,ebp
c0005029:	74 20                	je     c000504b <f_open+0xd8>
c000502b:	83 fd 04             	cmp    ebp,0x4
c000502e:	0f 85 58 03 00 00    	jne    c000538c <f_open+0x419>
c0005034:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005038:	83 ce 08             	or     esi,0x8
c000503b:	e8 8a f2 ff ff       	call   c00042ca <dir_register>
c0005040:	89 c5                	mov    ebp,eax
c0005042:	85 c0                	test   eax,eax
c0005044:	74 2f                	je     c0005075 <f_open+0x102>
c0005046:	e9 41 03 00 00       	jmp    c000538c <f_open+0x419>
c000504b:	bd 07 00 00 00       	mov    ebp,0x7
c0005050:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005055:	0f 85 31 03 00 00    	jne    c000538c <f_open+0x419>
c000505b:	bd 08 00 00 00       	mov    ebp,0x8
c0005060:	f7 c7 04 00 00 00    	test   edi,0x4
c0005066:	0f 85 20 03 00 00    	jne    c000538c <f_open+0x419>
c000506c:	83 e7 08             	and    edi,0x8
c000506f:	0f 84 65 01 00 00    	je     c00051da <f_open+0x267>
c0005075:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005079:	8a 02                	mov    al,BYTE PTR [edx]
c000507b:	3c 04                	cmp    al,0x4
c000507d:	0f 85 97 00 00 00    	jne    c000511a <f_open+0x1a7>
c0005083:	8d 42 10             	lea    eax,[edx+0x10]
c0005086:	89 13                	mov    DWORD PTR [ebx],edx
c0005088:	89 da                	mov    edx,ebx
c000508a:	e8 80 fd ff ff       	call   c0004e0f <init_alloc_info.isra.2>
c000508f:	31 d2                	xor    edx,edx
c0005091:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005095:	b9 1e 00 00 00       	mov    ecx,0x1e
c000509a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000509d:	83 c0 02             	add    eax,0x2
c00050a0:	e8 32 cc ff ff       	call   c0001cd7 <mem_set>
c00050a5:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050aa:	31 d2                	xor    edx,edx
c00050ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b3:	83 c0 26             	add    eax,0x26
c00050b6:	e8 1c cc ff ff       	call   c0001cd7 <mem_set>
c00050bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050bf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050c2:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050c6:	ba 00 00 21 50       	mov    edx,0x50210000
c00050cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ce:	83 c0 08             	add    eax,0x8
c00050d1:	e8 e3 cb ff ff       	call   c0001cb9 <st_dword>
c00050d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050da:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050dd:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050e1:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050e5:	e8 b7 ea ff ff       	call   c0003ba1 <store_xdir>
c00050ea:	89 c5                	mov    ebp,eax
c00050ec:	85 c0                	test   eax,eax
c00050ee:	0f 85 98 02 00 00    	jne    c000538c <f_open+0x419>
c00050f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050f7:	85 d2                	test   edx,edx
c00050f9:	0f 84 db 00 00 00    	je     c00051da <f_open+0x267>
c00050ff:	31 c9                	xor    ecx,ecx
c0005101:	89 d8                	mov    eax,ebx
c0005103:	e8 8e e3 ff ff       	call   c0003496 <remove_chain>
c0005108:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000510c:	89 c5                	mov    ebp,eax
c000510e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005111:	48                   	dec    eax
c0005112:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005115:	e9 b8 00 00 00       	jmp    c00051d2 <f_open+0x25f>
c000511a:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000511e:	89 ea                	mov    edx,ebp
c0005120:	e8 99 fc ff ff       	call   c0004dbe <ld_clust.isra.0>
c0005125:	ba 00 00 21 50       	mov    edx,0x50210000
c000512a:	89 c7                	mov    edi,eax
c000512c:	8d 45 0e             	lea    eax,[ebp+0xe]
c000512f:	e8 85 cb ff ff       	call   c0001cb9 <st_dword>
c0005134:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005138:	31 c9                	xor    ecx,ecx
c000513a:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000513e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005142:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005146:	e8 9c fc ff ff       	call   c0004de7 <st_clust.isra.1>
c000514b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000514f:	31 d2                	xor    edx,edx
c0005151:	83 c0 1c             	add    eax,0x1c
c0005154:	e8 60 cb ff ff       	call   c0001cb9 <st_dword>
c0005159:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000515d:	85 ff                	test   edi,edi
c000515f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005163:	74 75                	je     c00051da <f_open+0x267>
c0005165:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005169:	31 c9                	xor    ecx,ecx
c000516b:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000516e:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005171:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005175:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005179:	89 fa                	mov    edx,edi
c000517b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000517f:	e8 12 e3 ff ff       	call   c0003496 <remove_chain>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	85 c0                	test   eax,eax
c0005188:	0f 85 fe 01 00 00    	jne    c000538c <f_open+0x419>
c000518e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005192:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005196:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000519a:	4f                   	dec    edi
c000519b:	e8 81 d2 ff ff       	call   c0002421 <move_window>
c00051a0:	89 c5                	mov    ebp,eax
c00051a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051a6:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051a9:	eb 27                	jmp    c00051d2 <f_open+0x25f>
c00051ab:	85 ed                	test   ebp,ebp
c00051ad:	0f 85 d9 01 00 00    	jne    c000538c <f_open+0x419>
c00051b3:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051b7:	bd 04 00 00 00       	mov    ebp,0x4
c00051bc:	a8 10                	test   al,0x10
c00051be:	0f 85 c8 01 00 00    	jne    c000538c <f_open+0x419>
c00051c4:	83 e7 02             	and    edi,0x2
c00051c7:	74 11                	je     c00051da <f_open+0x267>
c00051c9:	bd 07 00 00 00       	mov    ebp,0x7
c00051ce:	a8 01                	test   al,0x1
c00051d0:	eb 02                	jmp    c00051d4 <f_open+0x261>
c00051d2:	85 ed                	test   ebp,ebp
c00051d4:	0f 85 b2 01 00 00    	jne    c000538c <f_open+0x419>
c00051da:	f7 c6 08 00 00 00    	test   esi,0x8
c00051e0:	74 03                	je     c00051e5 <f_open+0x272>
c00051e2:	83 ce 40             	or     esi,0x40
c00051e5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051e9:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051ec:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051ef:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051f2:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051f5:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051f9:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051fc:	8a 02                	mov    al,BYTE PTR [edx]
c00051fe:	3c 04                	cmp    al,0x4
c0005200:	75 2a                	jne    c000522c <f_open+0x2b9>
c0005202:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005206:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c000520b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000520e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005212:	30 c0                	xor    al,al
c0005214:	09 c8                	or     eax,ecx
c0005216:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005219:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000521d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005220:	8d 42 10             	lea    eax,[edx+0x10]
c0005223:	89 da                	mov    edx,ebx
c0005225:	e8 e5 fb ff ff       	call   c0004e0f <init_alloc_info.isra.2>
c000522a:	eb 1c                	jmp    c0005248 <f_open+0x2d5>
c000522c:	89 fa                	mov    edx,edi
c000522e:	e8 8b fb ff ff       	call   c0004dbe <ld_clust.isra.0>
c0005233:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005236:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005239:	e8 12 ca ff ff       	call   c0001c50 <ld_dword>
c000523e:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005245:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005248:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000524c:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005253:	89 03                	mov    DWORD PTR [ebx],eax
c0005255:	31 d2                	xor    edx,edx
c0005257:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000525b:	b9 00 02 00 00       	mov    ecx,0x200
c0005260:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005264:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005268:	89 f0                	mov    eax,esi
c000526a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005271:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005274:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000527b:	8d 43 50             	lea    eax,[ebx+0x50]
c000527e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005285:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000528c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005290:	e8 42 ca ff ff       	call   c0001cd7 <mem_set>
c0005295:	83 e6 20             	and    esi,0x20
c0005298:	75 07                	jne    c00052a1 <f_open+0x32e>
c000529a:	31 ed                	xor    ebp,ebp
c000529c:	e9 eb 00 00 00       	jmp    c000538c <f_open+0x419>
c00052a1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052a4:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052b3:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052b7:	74 e1                	je     c000529a <f_open+0x327>
c00052b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052c1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052c4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052cb:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ce:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052d2:	31 ff                	xor    edi,edi
c00052d4:	c1 e5 09             	shl    ebp,0x9
c00052d7:	89 ee                	mov    esi,ebp
c00052d9:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052dd:	89 f8                	mov    eax,edi
c00052df:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052e3:	73 22                	jae    c0005307 <f_open+0x394>
c00052e5:	89 d8                	mov    eax,ebx
c00052e7:	e8 bd dc ff ff       	call   c0002fa9 <get_fat>
c00052ec:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052f0:	89 c2                	mov    edx,eax
c00052f2:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052f6:	83 f8 01             	cmp    eax,0x1
c00052f9:	76 10                	jbe    c000530b <f_open+0x398>
c00052fb:	83 f8 ff             	cmp    eax,0xffffffff
c00052fe:	75 d9                	jne    c00052d9 <f_open+0x366>
c0005300:	bd 01 00 00 00       	mov    ebp,0x1
c0005305:	eb 09                	jmp    c0005310 <f_open+0x39d>
c0005307:	31 ed                	xor    ebp,ebp
c0005309:	eb 05                	jmp    c0005310 <f_open+0x39d>
c000530b:	bd 02 00 00 00       	mov    ebp,0x2
c0005310:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005313:	85 ed                	test   ebp,ebp
c0005315:	75 75                	jne    c000538c <f_open+0x419>
c0005317:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000531b:	25 ff 01 00 00       	and    eax,0x1ff
c0005320:	0f 84 74 ff ff ff    	je     c000529a <f_open+0x327>
c0005326:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000532a:	bd 02 00 00 00       	mov    ebp,0x2
c000532f:	89 c8                	mov    eax,ecx
c0005331:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005335:	e8 a2 cb ff ff       	call   c0001edc <clst2sect>
c000533a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000533e:	89 d7                	mov    edi,edx
c0005340:	09 c7                	or     edi,eax
c0005342:	74 48                	je     c000538c <f_open+0x419>
c0005344:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005348:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000534c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005354:	0f ac fe 09          	shrd   esi,edi,0x9
c0005358:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000535c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005360:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005363:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005367:	83 ec 0c             	sub    esp,0xc
c000536a:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000536d:	6a 01                	push   0x1
c000536f:	52                   	push   edx
c0005370:	50                   	push   eax
c0005371:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005375:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005379:	50                   	push   eax
c000537a:	e8 79 c8 ff ff       	call   c0001bf8 <disk_read>
c000537f:	83 c4 20             	add    esp,0x20
c0005382:	85 c0                	test   eax,eax
c0005384:	0f 95 c0             	setne  al
c0005387:	0f b6 c0             	movzx  eax,al
c000538a:	89 c5                	mov    ebp,eax
c000538c:	83 ec 0c             	sub    esp,0xc
c000538f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005393:	e8 f4 30 00 00       	call   c000848c <ff_memfree>
c0005398:	83 c4 10             	add    esp,0x10
c000539b:	85 ed                	test   ebp,ebp
c000539d:	74 06                	je     c00053a5 <f_open+0x432>
c000539f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053a5:	83 c4 7c             	add    esp,0x7c
c00053a8:	89 e8                	mov    eax,ebp
c00053aa:	5b                   	pop    ebx
c00053ab:	5e                   	pop    esi
c00053ac:	5f                   	pop    edi
c00053ad:	5d                   	pop    ebp
c00053ae:	c3                   	ret    

c00053af <f_read>:
c00053af:	55                   	push   ebp
c00053b0:	57                   	push   edi
c00053b1:	56                   	push   esi
c00053b2:	53                   	push   ebx
c00053b3:	83 ec 2c             	sub    esp,0x2c
c00053b6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053ba:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053be:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053c4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053c8:	89 d8                	mov    eax,ebx
c00053ca:	e8 77 cf ff ff       	call   c0002346 <validate>
c00053cf:	89 c5                	mov    ebp,eax
c00053d1:	85 c0                	test   eax,eax
c00053d3:	0f 85 4c 02 00 00    	jne    c0005625 <f_read+0x276>
c00053d9:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053dd:	85 ed                	test   ebp,ebp
c00053df:	0f 85 40 02 00 00    	jne    c0005625 <f_read+0x276>
c00053e5:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053e9:	0f 84 31 02 00 00    	je     c0005620 <f_read+0x271>
c00053ef:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053f2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053f5:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053f8:	bf 00 00 00 00       	mov    edi,0x0
c00053fd:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005400:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005404:	89 d1                	mov    ecx,edx
c0005406:	19 f9                	sbb    ecx,edi
c0005408:	0f 83 cf 00 00 00    	jae    c00054dd <f_read+0x12e>
c000540e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005412:	e9 c6 00 00 00       	jmp    c00054dd <f_read+0x12e>
c0005417:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000541a:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000541d:	89 d0                	mov    eax,edx
c000541f:	25 ff 01 00 00       	and    eax,0x1ff
c0005424:	0f 85 c9 01 00 00    	jne    c00055f3 <f_read+0x244>
c000542a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000542e:	89 d6                	mov    esi,edx
c0005430:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005434:	89 cf                	mov    edi,ecx
c0005436:	48                   	dec    eax
c0005437:	0f ac fe 09          	shrd   esi,edi,0x9
c000543b:	21 f0                	and    eax,esi
c000543d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005441:	0f 84 a6 00 00 00    	je     c00054ed <f_read+0x13e>
c0005447:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000544b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000544e:	89 c8                	mov    eax,ecx
c0005450:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005453:	e8 84 ca ff ff       	call   c0001edc <clst2sect>
c0005458:	89 d7                	mov    edi,edx
c000545a:	09 c7                	or     edi,eax
c000545c:	0f 84 b4 00 00 00    	je     c0005516 <f_read+0x167>
c0005462:	31 ff                	xor    edi,edi
c0005464:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005468:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000546b:	01 c6                	add    esi,eax
c000546d:	11 d7                	adc    edi,edx
c000546f:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005477:	0f 86 fd 00 00 00    	jbe    c000557a <f_read+0x1cb>
c000547d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005481:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005485:	c1 e8 09             	shr    eax,0x9
c0005488:	89 04 24             	mov    DWORD PTR [esp],eax
c000548b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000548f:	03 14 24             	add    edx,DWORD PTR [esp]
c0005492:	39 c2                	cmp    edx,eax
c0005494:	76 07                	jbe    c000549d <f_read+0xee>
c0005496:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000549a:	89 04 24             	mov    DWORD PTR [esp],eax
c000549d:	83 ec 0c             	sub    esp,0xc
c00054a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054a4:	57                   	push   edi
c00054a5:	56                   	push   esi
c00054a6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054ae:	50                   	push   eax
c00054af:	e8 44 c7 ff ff       	call   c0001bf8 <disk_read>
c00054b4:	83 c4 20             	add    esp,0x20
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 6e                	jne    c0005529 <f_read+0x17a>
c00054bb:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054bf:	78 7e                	js     c000553f <f_read+0x190>
c00054c1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054c4:	c1 e6 09             	shl    esi,0x9
c00054c7:	31 ff                	xor    edi,edi
c00054c9:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054cd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054d1:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054d5:	01 30                	add    DWORD PTR [eax],esi
c00054d7:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054da:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054e2:	0f 85 2f ff ff ff    	jne    c0005417 <f_read+0x68>
c00054e8:	e9 38 01 00 00       	jmp    c0005625 <f_read+0x276>
c00054ed:	89 c8                	mov    eax,ecx
c00054ef:	09 d0                	or     eax,edx
c00054f1:	75 05                	jne    c00054f8 <f_read+0x149>
c00054f3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054f6:	eb 19                	jmp    c0005511 <f_read+0x162>
c00054f8:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054fc:	74 09                	je     c0005507 <f_read+0x158>
c00054fe:	89 d8                	mov    eax,ebx
c0005500:	e8 f8 c9 ff ff       	call   c0001efd <clmt_clust>
c0005505:	eb 0a                	jmp    c0005511 <f_read+0x162>
c0005507:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000550a:	89 d8                	mov    eax,ebx
c000550c:	e8 98 da ff ff       	call   c0002fa9 <get_fat>
c0005511:	83 f8 01             	cmp    eax,0x1
c0005514:	77 0e                	ja     c0005524 <f_read+0x175>
c0005516:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000551a:	bd 02 00 00 00       	mov    ebp,0x2
c000551f:	e9 01 01 00 00       	jmp    c0005625 <f_read+0x276>
c0005524:	83 f8 ff             	cmp    eax,0xffffffff
c0005527:	75 0e                	jne    c0005537 <f_read+0x188>
c0005529:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000552d:	bd 01 00 00 00       	mov    ebp,0x1
c0005532:	e9 ee 00 00 00       	jmp    c0005625 <f_read+0x276>
c0005537:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000553a:	e9 08 ff ff ff       	jmp    c0005447 <f_read+0x98>
c000553f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005542:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005545:	29 f0                	sub    eax,esi
c0005547:	19 fa                	sbb    edx,edi
c0005549:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000554c:	89 d7                	mov    edi,edx
c000554e:	ba 00 00 00 00       	mov    edx,0x0
c0005553:	89 f9                	mov    ecx,edi
c0005555:	19 d1                	sbb    ecx,edx
c0005557:	0f 83 64 ff ff ff    	jae    c00054c1 <f_read+0x112>
c000555d:	89 c7                	mov    edi,eax
c000555f:	8d 53 50             	lea    edx,[ebx+0x50]
c0005562:	c1 e7 09             	shl    edi,0x9
c0005565:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005569:	b9 00 02 00 00       	mov    ecx,0x200
c000556e:	01 f8                	add    eax,edi
c0005570:	e8 4d c7 ff ff       	call   c0001cc2 <mem_cpy>
c0005575:	e9 47 ff ff ff       	jmp    c00054c1 <f_read+0x112>
c000557a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000557d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005580:	89 04 24             	mov    DWORD PTR [esp],eax
c0005583:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005587:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000558b:	75 05                	jne    c0005592 <f_read+0x1e3>
c000558d:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005590:	74 5b                	je     c00055ed <f_read+0x23e>
c0005592:	8d 43 50             	lea    eax,[ebx+0x50]
c0005595:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005599:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000559d:	79 2a                	jns    c00055c9 <f_read+0x21a>
c000559f:	83 ec 0c             	sub    esp,0xc
c00055a2:	6a 01                	push   0x1
c00055a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055b4:	50                   	push   eax
c00055b5:	e8 54 c6 ff ff       	call   c0001c0e <disk_write>
c00055ba:	83 c4 20             	add    esp,0x20
c00055bd:	85 c0                	test   eax,eax
c00055bf:	0f 85 64 ff ff ff    	jne    c0005529 <f_read+0x17a>
c00055c5:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055c9:	83 ec 0c             	sub    esp,0xc
c00055cc:	6a 01                	push   0x1
c00055ce:	57                   	push   edi
c00055cf:	56                   	push   esi
c00055d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055d4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055dc:	50                   	push   eax
c00055dd:	e8 16 c6 ff ff       	call   c0001bf8 <disk_read>
c00055e2:	83 c4 20             	add    esp,0x20
c00055e5:	85 c0                	test   eax,eax
c00055e7:	0f 85 3c ff ff ff    	jne    c0005529 <f_read+0x17a>
c00055ed:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055f0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055f3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055f6:	ba 00 02 00 00       	mov    edx,0x200
c00055fb:	25 ff 01 00 00       	and    eax,0x1ff
c0005600:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005604:	29 c2                	sub    edx,eax
c0005606:	39 d6                	cmp    esi,edx
c0005608:	76 02                	jbe    c000560c <f_read+0x25d>
c000560a:	89 d6                	mov    esi,edx
c000560c:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005610:	89 f1                	mov    ecx,esi
c0005612:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005616:	e8 a7 c6 ff ff       	call   c0001cc2 <mem_cpy>
c000561b:	e9 a7 fe ff ff       	jmp    c00054c7 <f_read+0x118>
c0005620:	bd 07 00 00 00       	mov    ebp,0x7
c0005625:	83 c4 2c             	add    esp,0x2c
c0005628:	89 e8                	mov    eax,ebp
c000562a:	5b                   	pop    ebx
c000562b:	5e                   	pop    esi
c000562c:	5f                   	pop    edi
c000562d:	5d                   	pop    ebp
c000562e:	c3                   	ret    

c000562f <f_write>:
c000562f:	55                   	push   ebp
c0005630:	57                   	push   edi
c0005631:	56                   	push   esi
c0005632:	53                   	push   ebx
c0005633:	83 ec 2c             	sub    esp,0x2c
c0005636:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000563a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000563e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005644:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005648:	89 d8                	mov    eax,ebx
c000564a:	e8 f7 cc ff ff       	call   c0002346 <validate>
c000564f:	89 c5                	mov    ebp,eax
c0005651:	85 c0                	test   eax,eax
c0005653:	0f 85 86 02 00 00    	jne    c00058df <f_write+0x2b0>
c0005659:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000565d:	85 ed                	test   ebp,ebp
c000565f:	0f 85 7a 02 00 00    	jne    c00058df <f_write+0x2b0>
c0005665:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005669:	0f 84 6b 02 00 00    	je     c00058da <f_write+0x2ab>
c000566f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005673:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005676:	0f 84 43 01 00 00    	je     c00057bf <f_write+0x190>
c000567c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000567f:	89 c1                	mov    ecx,eax
c0005681:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005685:	0f 83 34 01 00 00    	jae    c00057bf <f_write+0x190>
c000568b:	f7 d0                	not    eax
c000568d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005691:	e9 29 01 00 00       	jmp    c00057bf <f_write+0x190>
c0005696:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005699:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000569c:	89 d0                	mov    eax,edx
c000569e:	25 ff 01 00 00       	and    eax,0x1ff
c00056a3:	0f 85 00 02 00 00    	jne    c00058a9 <f_write+0x27a>
c00056a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056ad:	89 d6                	mov    esi,edx
c00056af:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056b3:	89 cf                	mov    edi,ecx
c00056b5:	48                   	dec    eax
c00056b6:	0f ac fe 09          	shrd   esi,edi,0x9
c00056ba:	21 f0                	and    eax,esi
c00056bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056c0:	0f 84 06 01 00 00    	je     c00057cc <f_write+0x19d>
c00056c6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ca:	0f 88 6e 01 00 00    	js     c000583e <f_write+0x20f>
c00056d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056d4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056d7:	89 c8                	mov    eax,ecx
c00056d9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056dd:	e8 fa c7 ff ff       	call   c0001edc <clst2sect>
c00056e2:	89 d1                	mov    ecx,edx
c00056e4:	09 c1                	or     ecx,eax
c00056e6:	0f 84 1c 01 00 00    	je     c0005808 <f_write+0x1d9>
c00056ec:	31 ff                	xor    edi,edi
c00056ee:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056f2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056f6:	01 c6                	add    esi,eax
c00056f8:	11 d7                	adc    edi,edx
c00056fa:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005702:	0f 86 63 01 00 00    	jbe    c000586b <f_write+0x23c>
c0005708:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000570c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005710:	c1 e8 09             	shr    eax,0x9
c0005713:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005717:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000571b:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000571f:	39 c2                	cmp    edx,eax
c0005721:	76 08                	jbe    c000572b <f_write+0xfc>
c0005723:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005727:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000572b:	83 ec 0c             	sub    esp,0xc
c000572e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005732:	57                   	push   edi
c0005733:	56                   	push   esi
c0005734:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005738:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000573c:	50                   	push   eax
c000573d:	e8 cc c4 ff ff       	call   c0001c0e <disk_write>
c0005742:	83 c4 20             	add    esp,0x20
c0005745:	85 c0                	test   eax,eax
c0005747:	0f 85 ce 00 00 00    	jne    c000581b <f_write+0x1ec>
c000574d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005750:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005753:	29 f0                	sub    eax,esi
c0005755:	19 fa                	sbb    edx,edi
c0005757:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000575b:	89 d7                	mov    edi,edx
c000575d:	ba 00 00 00 00       	mov    edx,0x0
c0005762:	89 f9                	mov    ecx,edi
c0005764:	19 d1                	sbb    ecx,edx
c0005766:	73 1c                	jae    c0005784 <f_write+0x155>
c0005768:	89 c7                	mov    edi,eax
c000576a:	b9 00 02 00 00       	mov    ecx,0x200
c000576f:	c1 e7 09             	shl    edi,0x9
c0005772:	8d 43 50             	lea    eax,[ebx+0x50]
c0005775:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005779:	89 fa                	mov    edx,edi
c000577b:	e8 42 c5 ff ff       	call   c0001cc2 <mem_cpy>
c0005780:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005784:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005788:	c1 e6 09             	shl    esi,0x9
c000578b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000578f:	31 ff                	xor    edi,edi
c0005791:	01 30                	add    DWORD PTR [eax],esi
c0005793:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005797:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000579b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000579e:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057a1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057a4:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057a7:	89 c1                	mov    ecx,eax
c00057a9:	39 f2                	cmp    edx,esi
c00057ab:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057ae:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057b1:	19 f9                	sbb    ecx,edi
c00057b3:	73 04                	jae    c00057b9 <f_write+0x18a>
c00057b5:	89 f2                	mov    edx,esi
c00057b7:	89 f8                	mov    eax,edi
c00057b9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057bc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057bf:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057c4:	0f 85 cc fe ff ff    	jne    c0005696 <f_write+0x67>
c00057ca:	eb 2e                	jmp    c00057fa <f_write+0x1cb>
c00057cc:	89 c8                	mov    eax,ecx
c00057ce:	09 d0                	or     eax,edx
c00057d0:	75 0b                	jne    c00057dd <f_write+0x1ae>
c00057d2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057d5:	31 d2                	xor    edx,edx
c00057d7:	85 c0                	test   eax,eax
c00057d9:	75 28                	jne    c0005803 <f_write+0x1d4>
c00057db:	eb 12                	jmp    c00057ef <f_write+0x1c0>
c00057dd:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057e1:	74 09                	je     c00057ec <f_write+0x1bd>
c00057e3:	89 d8                	mov    eax,ebx
c00057e5:	e8 13 c7 ff ff       	call   c0001efd <clmt_clust>
c00057ea:	eb 0a                	jmp    c00057f6 <f_write+0x1c7>
c00057ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057ef:	89 d8                	mov    eax,ebx
c00057f1:	e8 a1 da ff ff       	call   c0003297 <create_chain>
c00057f6:	85 c0                	test   eax,eax
c00057f8:	75 09                	jne    c0005803 <f_write+0x1d4>
c00057fa:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057fe:	e9 dc 00 00 00       	jmp    c00058df <f_write+0x2b0>
c0005803:	83 f8 01             	cmp    eax,0x1
c0005806:	75 0e                	jne    c0005816 <f_write+0x1e7>
c0005808:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000580c:	bd 02 00 00 00       	mov    ebp,0x2
c0005811:	e9 c9 00 00 00       	jmp    c00058df <f_write+0x2b0>
c0005816:	83 f8 ff             	cmp    eax,0xffffffff
c0005819:	75 0e                	jne    c0005829 <f_write+0x1fa>
c000581b:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000581f:	bd 01 00 00 00       	mov    ebp,0x1
c0005824:	e9 b6 00 00 00       	jmp    c00058df <f_write+0x2b0>
c0005829:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000582c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005830:	0f 85 90 fe ff ff    	jne    c00056c6 <f_write+0x97>
c0005836:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005839:	e9 88 fe ff ff       	jmp    c00056c6 <f_write+0x97>
c000583e:	83 ec 0c             	sub    esp,0xc
c0005841:	8d 43 50             	lea    eax,[ebx+0x50]
c0005844:	6a 01                	push   0x1
c0005846:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005849:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000584c:	50                   	push   eax
c000584d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005851:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005855:	50                   	push   eax
c0005856:	e8 b3 c3 ff ff       	call   c0001c0e <disk_write>
c000585b:	83 c4 20             	add    esp,0x20
c000585e:	85 c0                	test   eax,eax
c0005860:	75 b9                	jne    c000581b <f_write+0x1ec>
c0005862:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005866:	e9 65 fe ff ff       	jmp    c00056d0 <f_write+0xa1>
c000586b:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000586e:	75 05                	jne    c0005875 <f_write+0x246>
c0005870:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005873:	74 2e                	je     c00058a3 <f_write+0x274>
c0005875:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005878:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000587b:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000587e:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005881:	73 20                	jae    c00058a3 <f_write+0x274>
c0005883:	83 ec 0c             	sub    esp,0xc
c0005886:	8d 43 50             	lea    eax,[ebx+0x50]
c0005889:	6a 01                	push   0x1
c000588b:	57                   	push   edi
c000588c:	56                   	push   esi
c000588d:	50                   	push   eax
c000588e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005892:	50                   	push   eax
c0005893:	e8 60 c3 ff ff       	call   c0001bf8 <disk_read>
c0005898:	83 c4 20             	add    esp,0x20
c000589b:	85 c0                	test   eax,eax
c000589d:	0f 85 78 ff ff ff    	jne    c000581b <f_write+0x1ec>
c00058a3:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058a6:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058a9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ac:	ba 00 02 00 00       	mov    edx,0x200
c00058b1:	25 ff 01 00 00       	and    eax,0x1ff
c00058b6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058ba:	29 c2                	sub    edx,eax
c00058bc:	39 d6                	cmp    esi,edx
c00058be:	76 02                	jbe    c00058c2 <f_write+0x293>
c00058c0:	89 d6                	mov    esi,edx
c00058c2:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058c6:	89 f1                	mov    ecx,esi
c00058c8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058cc:	e8 f1 c3 ff ff       	call   c0001cc2 <mem_cpy>
c00058d1:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058d5:	e9 b1 fe ff ff       	jmp    c000578b <f_write+0x15c>
c00058da:	bd 07 00 00 00       	mov    ebp,0x7
c00058df:	83 c4 2c             	add    esp,0x2c
c00058e2:	89 e8                	mov    eax,ebp
c00058e4:	5b                   	pop    ebx
c00058e5:	5e                   	pop    esi
c00058e6:	5f                   	pop    edi
c00058e7:	5d                   	pop    ebp
c00058e8:	c3                   	ret    

c00058e9 <f_sync>:
c00058e9:	56                   	push   esi
c00058ea:	53                   	push   ebx
c00058eb:	83 ec 64             	sub    esp,0x64
c00058ee:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058f2:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058f6:	89 d8                	mov    eax,ebx
c00058f8:	e8 49 ca ff ff       	call   c0002346 <validate>
c00058fd:	85 c0                	test   eax,eax
c00058ff:	0f 85 ba 01 00 00    	jne    c0005abf <f_sync+0x1d6>
c0005905:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005908:	f6 c2 40             	test   dl,0x40
c000590b:	0f 84 ae 01 00 00    	je     c0005abf <f_sync+0x1d6>
c0005911:	84 d2                	test   dl,dl
c0005913:	79 33                	jns    c0005948 <f_sync+0x5f>
c0005915:	83 ec 0c             	sub    esp,0xc
c0005918:	8d 43 50             	lea    eax,[ebx+0x50]
c000591b:	6a 01                	push   0x1
c000591d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005920:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005923:	50                   	push   eax
c0005924:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005928:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000592c:	50                   	push   eax
c000592d:	e8 dc c2 ff ff       	call   c0001c0e <disk_write>
c0005932:	83 c4 20             	add    esp,0x20
c0005935:	89 c2                	mov    edx,eax
c0005937:	b8 01 00 00 00       	mov    eax,0x1
c000593c:	85 d2                	test   edx,edx
c000593e:	0f 85 7b 01 00 00    	jne    c0005abf <f_sync+0x1d6>
c0005944:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000594c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000594f:	0f 85 11 01 00 00    	jne    c0005a66 <f_sync+0x17d>
c0005955:	89 d8                	mov    eax,ebx
c0005957:	e8 13 d6 ff ff       	call   c0002f6f <fill_first_frag>
c000595c:	85 c0                	test   eax,eax
c000595e:	0f 85 5b 01 00 00    	jne    c0005abf <f_sync+0x1d6>
c0005964:	83 c9 ff             	or     ecx,0xffffffff
c0005967:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000596a:	89 d8                	mov    eax,ebx
c000596c:	e8 c9 d5 ff ff       	call   c0002f3a <fill_last_frag>
c0005971:	85 c0                	test   eax,eax
c0005973:	0f 85 46 01 00 00    	jne    c0005abf <f_sync+0x1d6>
c0005979:	83 ec 0c             	sub    esp,0xc
c000597c:	68 60 04 00 00       	push   0x460
c0005981:	e8 f0 2a 00 00       	call   c0008476 <ff_memalloc>
c0005986:	83 c4 10             	add    esp,0x10
c0005989:	89 c6                	mov    esi,eax
c000598b:	b8 11 00 00 00       	mov    eax,0x11
c0005990:	85 f6                	test   esi,esi
c0005992:	0f 84 27 01 00 00    	je     c0005abf <f_sync+0x1d6>
c0005998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000599c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059a2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059a5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059a8:	89 da                	mov    edx,ebx
c00059aa:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059ae:	e8 af df ff ff       	call   c0003962 <load_obj_xdir>
c00059b3:	85 c0                	test   eax,eax
c00059b5:	0f 85 95 00 00 00    	jne    c0005a50 <f_sync+0x167>
c00059bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059bf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059c2:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059c6:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059c9:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059cc:	83 ca 01             	or     edx,0x1
c00059cf:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059d2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059d5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059d8:	83 c0 34             	add    eax,0x34
c00059db:	e8 d9 c2 ff ff       	call   c0001cb9 <st_dword>
c00059e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ea:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059ed:	83 c0 38             	add    eax,0x38
c00059f0:	e8 c7 c2 ff ff       	call   c0001cbc <st_qword>
c00059f5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059fc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a02:	83 c0 28             	add    eax,0x28
c0005a05:	e8 b2 c2 ff ff       	call   c0001cbc <st_qword>
c0005a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a0e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a13:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a16:	83 c0 0c             	add    eax,0xc
c0005a19:	e8 9b c2 ff ff       	call   c0001cb9 <st_dword>
c0005a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a22:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a25:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a29:	31 d2                	xor    edx,edx
c0005a2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a2e:	83 c0 10             	add    eax,0x10
c0005a31:	e8 83 c2 ff ff       	call   c0001cb9 <st_dword>
c0005a36:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a3a:	e8 62 e1 ff ff       	call   c0003ba1 <store_xdir>
c0005a3f:	85 c0                	test   eax,eax
c0005a41:	75 0d                	jne    c0005a50 <f_sync+0x167>
c0005a43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a47:	e8 00 eb ff ff       	call   c000454c <sync_fs>
c0005a4c:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a50:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a54:	83 ec 0c             	sub    esp,0xc
c0005a57:	56                   	push   esi
c0005a58:	e8 2f 2a 00 00       	call   c000848c <ff_memfree>
c0005a5d:	83 c4 10             	add    esp,0x10
c0005a60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a64:	eb 59                	jmp    c0005abf <f_sync+0x1d6>
c0005a66:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a69:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a6c:	e8 b0 c9 ff ff       	call   c0002421 <move_window>
c0005a71:	85 c0                	test   eax,eax
c0005a73:	75 4a                	jne    c0005abf <f_sync+0x1d6>
c0005a75:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a78:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a7c:	89 f2                	mov    edx,esi
c0005a7e:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a81:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a83:	e8 5f f3 ff ff       	call   c0004de7 <st_clust.isra.1>
c0005a88:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a8b:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a8e:	e8 26 c2 ff ff       	call   c0001cb9 <st_dword>
c0005a93:	8d 46 16             	lea    eax,[esi+0x16]
c0005a96:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a9b:	e8 19 c2 ff ff       	call   c0001cb9 <st_dword>
c0005aa0:	8d 46 12             	lea    eax,[esi+0x12]
c0005aa3:	31 d2                	xor    edx,edx
c0005aa5:	e8 0b c2 ff ff       	call   c0001cb5 <st_word>
c0005aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005aae:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ab6:	e8 91 ea ff ff       	call   c000454c <sync_fs>
c0005abb:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005abf:	83 c4 64             	add    esp,0x64
c0005ac2:	5b                   	pop    ebx
c0005ac3:	5e                   	pop    esi
c0005ac4:	c3                   	ret    

c0005ac5 <f_close>:
c0005ac5:	53                   	push   ebx
c0005ac6:	83 ec 24             	sub    esp,0x24
c0005ac9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005acd:	53                   	push   ebx
c0005ace:	e8 16 fe ff ff       	call   c00058e9 <f_sync>
c0005ad3:	83 c4 10             	add    esp,0x10
c0005ad6:	85 c0                	test   eax,eax
c0005ad8:	75 15                	jne    c0005aef <f_close+0x2a>
c0005ada:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ade:	89 d8                	mov    eax,ebx
c0005ae0:	e8 61 c8 ff ff       	call   c0002346 <validate>
c0005ae5:	85 c0                	test   eax,eax
c0005ae7:	75 06                	jne    c0005aef <f_close+0x2a>
c0005ae9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005aef:	83 c4 18             	add    esp,0x18
c0005af2:	5b                   	pop    ebx
c0005af3:	c3                   	ret    

c0005af4 <f_lseek>:
c0005af4:	55                   	push   ebp
c0005af5:	57                   	push   edi
c0005af6:	56                   	push   esi
c0005af7:	53                   	push   ebx
c0005af8:	83 ec 3c             	sub    esp,0x3c
c0005afb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005aff:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b03:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b07:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b0a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b0e:	89 d8                	mov    eax,ebx
c0005b10:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b14:	e8 2d c8 ff ff       	call   c0002346 <validate>
c0005b19:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b1d:	85 c0                	test   eax,eax
c0005b1f:	0f 85 7a 04 00 00    	jne    c0005f9f <f_lseek+0x4ab>
c0005b25:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b2d:	85 c0                	test   eax,eax
c0005b2f:	0f 85 6a 04 00 00    	jne    c0005f9f <f_lseek+0x4ab>
c0005b35:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b39:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b3c:	74 0c                	je     c0005b4a <f_lseek+0x56>
c0005b3e:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b41:	85 c0                	test   eax,eax
c0005b43:	75 1f                	jne    c0005b64 <f_lseek+0x70>
c0005b45:	e9 b5 01 00 00       	jmp    c0005cff <f_lseek+0x20b>
c0005b4a:	83 c9 ff             	or     ecx,0xffffffff
c0005b4d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b50:	89 d8                	mov    eax,ebx
c0005b52:	e8 e3 d3 ff ff       	call   c0002f3a <fill_last_frag>
c0005b57:	85 c0                	test   eax,eax
c0005b59:	74 e3                	je     c0005b3e <f_lseek+0x4a>
c0005b5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b5f:	e9 3b 04 00 00       	jmp    c0005f9f <f_lseek+0x4ab>
c0005b64:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b69:	0f 85 ac 00 00 00    	jne    c0005c1b <f_lseek+0x127>
c0005b6f:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b73:	0f 85 a2 00 00 00    	jne    c0005c1b <f_lseek+0x127>
c0005b79:	8d 78 04             	lea    edi,[eax+0x4]
c0005b7c:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b81:	be 02 00 00 00       	mov    esi,0x2
c0005b86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b8a:	85 ed                	test   ebp,ebp
c0005b8c:	74 73                	je     c0005c01 <f_lseek+0x10d>
c0005b8e:	89 e9                	mov    ecx,ebp
c0005b90:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b97:	ff 04 24             	inc    DWORD PTR [esp]
c0005b9a:	89 ca                	mov    edx,ecx
c0005b9c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ba0:	89 d8                	mov    eax,ebx
c0005ba2:	e8 02 d4 ff ff       	call   c0002fa9 <get_fat>
c0005ba7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bab:	83 f8 01             	cmp    eax,0x1
c0005bae:	77 11                	ja     c0005bc1 <f_lseek+0xcd>
c0005bb0:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bb4:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bbc:	e9 de 03 00 00       	jmp    c0005f9f <f_lseek+0x4ab>
c0005bc1:	83 f8 ff             	cmp    eax,0xffffffff
c0005bc4:	75 11                	jne    c0005bd7 <f_lseek+0xe3>
c0005bc6:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bca:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bd2:	e9 c8 03 00 00       	jmp    c0005f9f <f_lseek+0x4ab>
c0005bd7:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bda:	89 c1                	mov    ecx,eax
c0005bdc:	39 c2                	cmp    edx,eax
c0005bde:	74 b7                	je     c0005b97 <f_lseek+0xa3>
c0005be0:	83 c6 02             	add    esi,0x2
c0005be3:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005be7:	72 0b                	jb     c0005bf4 <f_lseek+0x100>
c0005be9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bec:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bef:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bf1:	83 c7 08             	add    edi,0x8
c0005bf4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bf8:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bfb:	76 04                	jbe    c0005c01 <f_lseek+0x10d>
c0005bfd:	89 c5                	mov    ebp,eax
c0005bff:	eb 8d                	jmp    c0005b8e <f_lseek+0x9a>
c0005c01:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c04:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c08:	89 30                	mov    DWORD PTR [eax],esi
c0005c0a:	0f 87 87 03 00 00    	ja     c0005f97 <f_lseek+0x4a3>
c0005c10:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c16:	e9 84 03 00 00       	jmp    c0005f9f <f_lseek+0x4ab>
c0005c1b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c1e:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c21:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c25:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c29:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c2d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c34:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c38:	73 0f                	jae    c0005c49 <f_lseek+0x155>
c0005c3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c3d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c51:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c54:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c5b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c5f:	0f 84 3a 03 00 00    	je     c0005f9f <f_lseek+0x4ab>
c0005c65:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c69:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c6d:	83 c6 ff             	add    esi,0xffffffff
c0005c70:	89 d8                	mov    eax,ebx
c0005c72:	83 d7 ff             	adc    edi,0xffffffff
c0005c75:	89 f2                	mov    edx,esi
c0005c77:	89 f9                	mov    ecx,edi
c0005c79:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c7d:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c80:	e8 78 c2 ff ff       	call   c0001efd <clmt_clust>
c0005c85:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c89:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c8c:	89 c2                	mov    edx,eax
c0005c8e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c92:	89 c8                	mov    eax,ecx
c0005c94:	e8 43 c2 ff ff       	call   c0001edc <clst2sect>
c0005c99:	89 d7                	mov    edi,edx
c0005c9b:	09 c7                	or     edi,eax
c0005c9d:	0f 84 0d ff ff ff    	je     c0005bb0 <f_lseek+0xbc>
c0005ca3:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005ca7:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005cad:	0f 84 ec 02 00 00    	je     c0005f9f <f_lseek+0x4ab>
c0005cb3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cb7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cbb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cbe:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005cc2:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cc6:	4d                   	dec    ebp
c0005cc7:	31 ff                	xor    edi,edi
c0005cc9:	21 ee                	and    esi,ebp
c0005ccb:	01 c6                	add    esi,eax
c0005ccd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cd0:	11 d7                	adc    edi,edx
c0005cd2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cd5:	39 fa                	cmp    edx,edi
c0005cd7:	75 08                	jne    c0005ce1 <f_lseek+0x1ed>
c0005cd9:	39 f0                	cmp    eax,esi
c0005cdb:	0f 84 be 02 00 00    	je     c0005f9f <f_lseek+0x4ab>
c0005ce1:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005ce4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ce8:	0f 89 80 02 00 00    	jns    c0005f6e <f_lseek+0x47a>
c0005cee:	83 ec 0c             	sub    esp,0xc
c0005cf1:	6a 01                	push   0x1
c0005cf3:	52                   	push   edx
c0005cf4:	50                   	push   eax
c0005cf5:	55                   	push   ebp
c0005cf6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cfa:	e9 5a 02 00 00       	jmp    c0005f59 <f_lseek+0x465>
c0005cff:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d03:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d06:	74 16                	je     c0005d1e <f_lseek+0x22a>
c0005d08:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d0d:	76 0f                	jbe    c0005d1e <f_lseek+0x22a>
c0005d0f:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d16:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d1e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d21:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d24:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d27:	89 c7                	mov    edi,eax
c0005d29:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d2d:	73 0d                	jae    c0005d3c <f_lseek+0x248>
c0005d2f:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d33:	75 07                	jne    c0005d3c <f_lseek+0x248>
c0005d35:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d38:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d3c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d3f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d42:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d46:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d4d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d54:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d57:	75 09                	jne    c0005d62 <f_lseek+0x26e>
c0005d59:	31 f6                	xor    esi,esi
c0005d5b:	31 ff                	xor    edi,edi
c0005d5d:	e9 af 01 00 00       	jmp    c0005f11 <f_lseek+0x41d>
c0005d62:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d66:	89 d7                	mov    edi,edx
c0005d68:	c1 e1 09             	shl    ecx,0x9
c0005d6b:	09 c7                	or     edi,eax
c0005d6d:	89 cd                	mov    ebp,ecx
c0005d6f:	74 6d                	je     c0005dde <f_lseek+0x2ea>
c0005d71:	83 c0 ff             	add    eax,0xffffffff
c0005d74:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d78:	83 d2 ff             	adc    edx,0xffffffff
c0005d7b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d82:	83 c0 ff             	add    eax,0xffffffff
c0005d85:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d89:	83 d2 ff             	adc    edx,0xffffffff
c0005d8c:	31 ff                	xor    edi,edi
c0005d8e:	57                   	push   edi
c0005d8f:	51                   	push   ecx
c0005d90:	52                   	push   edx
c0005d91:	50                   	push   eax
c0005d92:	e8 dd 15 02 00       	call   c0027374 <__udivdi3>
c0005d97:	83 c4 10             	add    esp,0x10
c0005d9a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d9e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005da2:	57                   	push   edi
c0005da3:	55                   	push   ebp
c0005da4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005da8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dac:	e8 c3 15 02 00       	call   c0027374 <__udivdi3>
c0005db1:	83 c4 10             	add    esp,0x10
c0005db4:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005db8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dbc:	19 d1                	sbb    ecx,edx
c0005dbe:	72 1e                	jb     c0005dde <f_lseek+0x2ea>
c0005dc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005dc4:	89 e9                	mov    ecx,ebp
c0005dc6:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dc9:	f7 d9                	neg    ecx
c0005dcb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dce:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005dd2:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005dd5:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dd8:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005ddc:	eb 28                	jmp    c0005e06 <f_lseek+0x312>
c0005dde:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005de1:	85 c0                	test   eax,eax
c0005de3:	75 1e                	jne    c0005e03 <f_lseek+0x30f>
c0005de5:	31 d2                	xor    edx,edx
c0005de7:	89 d8                	mov    eax,ebx
c0005de9:	e8 a9 d4 ff ff       	call   c0003297 <create_chain>
c0005dee:	83 f8 01             	cmp    eax,0x1
c0005df1:	0f 84 b9 fd ff ff    	je     c0005bb0 <f_lseek+0xbc>
c0005df7:	83 f8 ff             	cmp    eax,0xffffffff
c0005dfa:	0f 84 c6 fd ff ff    	je     c0005bc6 <f_lseek+0xd2>
c0005e00:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e03:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e06:	85 c0                	test   eax,eax
c0005e08:	0f 84 4b ff ff ff    	je     c0005d59 <f_lseek+0x265>
c0005e0e:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e12:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e1a:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e1d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e21:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e24:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e27:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e2b:	0f 83 9d 00 00 00    	jae    c0005ece <f_lseek+0x3da>
c0005e31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e39:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e3c:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e40:	01 f2                	add    edx,esi
c0005e42:	11 f9                	adc    ecx,edi
c0005e44:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e4c:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e4f:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e52:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e55:	f6 c1 02             	test   cl,0x2
c0005e58:	74 35                	je     c0005e8f <f_lseek+0x39b>
c0005e5a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e5e:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e61:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e64:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e68:	73 16                	jae    c0005e80 <f_lseek+0x38c>
c0005e6a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e6e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e72:	88 ca                	mov    dl,cl
c0005e74:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e77:	83 ca 40             	or     edx,0x40
c0005e7a:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e7d:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e80:	89 c2                	mov    edx,eax
c0005e82:	89 d8                	mov    eax,ebx
c0005e84:	e8 0e d4 ff ff       	call   c0003297 <create_chain>
c0005e89:	85 c0                	test   eax,eax
c0005e8b:	75 0b                	jne    c0005e98 <f_lseek+0x3a4>
c0005e8d:	eb 30                	jmp    c0005ebf <f_lseek+0x3cb>
c0005e8f:	89 c2                	mov    edx,eax
c0005e91:	89 d8                	mov    eax,ebx
c0005e93:	e8 11 d1 ff ff       	call   c0002fa9 <get_fat>
c0005e98:	83 f8 ff             	cmp    eax,0xffffffff
c0005e9b:	0f 84 25 fd ff ff    	je     c0005bc6 <f_lseek+0xd2>
c0005ea1:	83 f8 01             	cmp    eax,0x1
c0005ea4:	0f 86 06 fd ff ff    	jbe    c0005bb0 <f_lseek+0xbc>
c0005eaa:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005eae:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005eb1:	0f 86 f9 fc ff ff    	jbe    c0005bb0 <f_lseek+0xbc>
c0005eb7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005eba:	e9 5b ff ff ff       	jmp    c0005e1a <f_lseek+0x326>
c0005ebf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ec6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ece:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005ed1:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ed5:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ed8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005edb:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ede:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ee4:	0f 84 6f fe ff ff    	je     c0005d59 <f_lseek+0x265>
c0005eea:	89 c2                	mov    edx,eax
c0005eec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ef0:	e8 e7 bf ff ff       	call   c0001edc <clst2sect>
c0005ef5:	89 d7                	mov    edi,edx
c0005ef7:	09 c7                	or     edi,eax
c0005ef9:	0f 84 b1 fc ff ff    	je     c0005bb0 <f_lseek+0xbc>
c0005eff:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f03:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f06:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f0a:	c1 ef 09             	shr    edi,0x9
c0005f0d:	01 c6                	add    esi,eax
c0005f0f:	11 d7                	adc    edi,edx
c0005f11:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f14:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f17:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f1a:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f1d:	19 d1                	sbb    ecx,edx
c0005f1f:	73 0a                	jae    c0005f2b <f_lseek+0x437>
c0005f21:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f24:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f27:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f2b:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f30:	74 6d                	je     c0005f9f <f_lseek+0x4ab>
c0005f32:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f35:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f38:	39 fa                	cmp    edx,edi
c0005f3a:	75 04                	jne    c0005f40 <f_lseek+0x44c>
c0005f3c:	39 f0                	cmp    eax,esi
c0005f3e:	74 5f                	je     c0005f9f <f_lseek+0x4ab>
c0005f40:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f43:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f47:	79 25                	jns    c0005f6e <f_lseek+0x47a>
c0005f49:	83 ec 0c             	sub    esp,0xc
c0005f4c:	6a 01                	push   0x1
c0005f4e:	52                   	push   edx
c0005f4f:	50                   	push   eax
c0005f50:	55                   	push   ebp
c0005f51:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f55:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f59:	50                   	push   eax
c0005f5a:	e8 af bc ff ff       	call   c0001c0e <disk_write>
c0005f5f:	83 c4 20             	add    esp,0x20
c0005f62:	85 c0                	test   eax,eax
c0005f64:	0f 85 5c fc ff ff    	jne    c0005bc6 <f_lseek+0xd2>
c0005f6a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f6e:	83 ec 0c             	sub    esp,0xc
c0005f71:	6a 01                	push   0x1
c0005f73:	57                   	push   edi
c0005f74:	56                   	push   esi
c0005f75:	55                   	push   ebp
c0005f76:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f7a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f7e:	50                   	push   eax
c0005f7f:	e8 74 bc ff ff       	call   c0001bf8 <disk_read>
c0005f84:	83 c4 20             	add    esp,0x20
c0005f87:	85 c0                	test   eax,eax
c0005f89:	0f 85 37 fc ff ff    	jne    c0005bc6 <f_lseek+0xd2>
c0005f8f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f92:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f95:	eb 08                	jmp    c0005f9f <f_lseek+0x4ab>
c0005f97:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fa3:	83 c4 3c             	add    esp,0x3c
c0005fa6:	5b                   	pop    ebx
c0005fa7:	5e                   	pop    esi
c0005fa8:	5f                   	pop    edi
c0005fa9:	5d                   	pop    ebp
c0005faa:	c3                   	ret    

c0005fab <f_opendir>:
c0005fab:	56                   	push   esi
c0005fac:	b8 09 00 00 00       	mov    eax,0x9
c0005fb1:	53                   	push   ebx
c0005fb2:	83 ec 24             	sub    esp,0x24
c0005fb5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fb9:	85 db                	test   ebx,ebx
c0005fbb:	0f 84 e6 00 00 00    	je     c00060a7 <f_opendir+0xfc>
c0005fc1:	31 c9                	xor    ecx,ecx
c0005fc3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fc7:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fcb:	e8 03 c7 ff ff       	call   c00026d3 <mount_volume>
c0005fd0:	85 c0                	test   eax,eax
c0005fd2:	0f 85 c9 00 00 00    	jne    c00060a1 <f_opendir+0xf6>
c0005fd8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fdc:	83 ec 0c             	sub    esp,0xc
c0005fdf:	89 03                	mov    DWORD PTR [ebx],eax
c0005fe1:	68 60 04 00 00       	push   0x460
c0005fe6:	e8 8b 24 00 00       	call   c0008476 <ff_memalloc>
c0005feb:	83 c4 10             	add    esp,0x10
c0005fee:	89 c6                	mov    esi,eax
c0005ff0:	b8 11 00 00 00       	mov    eax,0x11
c0005ff5:	85 f6                	test   esi,esi
c0005ff7:	0f 84 aa 00 00 00    	je     c00060a7 <f_opendir+0xfc>
c0005ffd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006001:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006007:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000600a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000600d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0006011:	89 d8                	mov    eax,ebx
c0006013:	e8 31 ee ff ff       	call   c0004e49 <follow_path>
c0006018:	85 c0                	test   eax,eax
c000601a:	75 61                	jne    c000607d <f_opendir+0xd2>
c000601c:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006020:	78 46                	js     c0006068 <f_opendir+0xbd>
c0006022:	b8 05 00 00 00       	mov    eax,0x5
c0006027:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000602b:	74 50                	je     c000607d <f_opendir+0xd2>
c000602d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006031:	8a 01                	mov    al,BYTE PTR [ecx]
c0006033:	3c 04                	cmp    al,0x4
c0006035:	75 26                	jne    c000605d <f_opendir+0xb2>
c0006037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000603a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000603d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006040:	30 d2                	xor    dl,dl
c0006042:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006046:	09 c2                	or     edx,eax
c0006048:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000604b:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000604e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006051:	89 da                	mov    edx,ebx
c0006053:	8d 41 10             	lea    eax,[ecx+0x10]
c0006056:	e8 b4 ed ff ff       	call   c0004e0f <init_alloc_info.isra.2>
c000605b:	eb 0b                	jmp    c0006068 <f_opendir+0xbd>
c000605d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006060:	e8 59 ed ff ff       	call   c0004dbe <ld_clust.isra.0>
c0006065:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006068:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000606c:	31 d2                	xor    edx,edx
c000606e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006072:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006076:	89 d8                	mov    eax,ebx
c0006078:	e8 22 d1 ff ff       	call   c000319f <dir_sdi>
c000607d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006081:	83 ec 0c             	sub    esp,0xc
c0006084:	56                   	push   esi
c0006085:	e8 02 24 00 00       	call   c000848c <ff_memfree>
c000608a:	83 c4 10             	add    esp,0x10
c000608d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006091:	83 f8 04             	cmp    eax,0x4
c0006094:	74 06                	je     c000609c <f_opendir+0xf1>
c0006096:	85 c0                	test   eax,eax
c0006098:	74 0d                	je     c00060a7 <f_opendir+0xfc>
c000609a:	eb 05                	jmp    c00060a1 <f_opendir+0xf6>
c000609c:	b8 05 00 00 00       	mov    eax,0x5
c00060a1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060a7:	83 c4 24             	add    esp,0x24
c00060aa:	5b                   	pop    ebx
c00060ab:	5e                   	pop    esi
c00060ac:	c3                   	ret    

c00060ad <f_closedir>:
c00060ad:	53                   	push   ebx
c00060ae:	83 ec 18             	sub    esp,0x18
c00060b1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060b5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060b9:	89 d8                	mov    eax,ebx
c00060bb:	e8 86 c2 ff ff       	call   c0002346 <validate>
c00060c0:	85 c0                	test   eax,eax
c00060c2:	75 06                	jne    c00060ca <f_closedir+0x1d>
c00060c4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ca:	83 c4 18             	add    esp,0x18
c00060cd:	5b                   	pop    ebx
c00060ce:	c3                   	ret    

c00060cf <f_readdir>:
c00060cf:	57                   	push   edi
c00060d0:	56                   	push   esi
c00060d1:	53                   	push   ebx
c00060d2:	83 ec 20             	sub    esp,0x20
c00060d5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060d9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060dd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060e1:	89 d8                	mov    eax,ebx
c00060e3:	e8 5e c2 ff ff       	call   c0002346 <validate>
c00060e8:	85 c0                	test   eax,eax
c00060ea:	75 77                	jne    c0006163 <f_readdir+0x94>
c00060ec:	85 ff                	test   edi,edi
c00060ee:	75 0b                	jne    c00060fb <f_readdir+0x2c>
c00060f0:	31 d2                	xor    edx,edx
c00060f2:	89 d8                	mov    eax,ebx
c00060f4:	e8 a6 d0 ff ff       	call   c000319f <dir_sdi>
c00060f9:	eb 68                	jmp    c0006163 <f_readdir+0x94>
c00060fb:	83 ec 0c             	sub    esp,0xc
c00060fe:	68 60 04 00 00       	push   0x460
c0006103:	e8 6e 23 00 00       	call   c0008476 <ff_memalloc>
c0006108:	83 c4 10             	add    esp,0x10
c000610b:	89 c6                	mov    esi,eax
c000610d:	b8 11 00 00 00       	mov    eax,0x11
c0006112:	85 f6                	test   esi,esi
c0006114:	74 4d                	je     c0006163 <f_readdir+0x94>
c0006116:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000611a:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006120:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006123:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006126:	31 d2                	xor    edx,edx
c0006128:	89 d8                	mov    eax,ebx
c000612a:	e8 80 d8 ff ff       	call   c00039af <dir_read>
c000612f:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006134:	75 19                	jne    c000614f <f_readdir+0x80>
c0006136:	89 fa                	mov    edx,edi
c0006138:	89 d8                	mov    eax,ebx
c000613a:	e8 7e ea ff ff       	call   c0004bbd <get_fileinfo>
c000613f:	31 d2                	xor    edx,edx
c0006141:	89 d8                	mov    eax,ebx
c0006143:	e8 af d5 ff ff       	call   c00036f7 <dir_next>
c0006148:	83 f8 04             	cmp    eax,0x4
c000614b:	75 02                	jne    c000614f <f_readdir+0x80>
c000614d:	31 c0                	xor    eax,eax
c000614f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006153:	83 ec 0c             	sub    esp,0xc
c0006156:	56                   	push   esi
c0006157:	e8 30 23 00 00       	call   c000848c <ff_memfree>
c000615c:	83 c4 10             	add    esp,0x10
c000615f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006163:	83 c4 20             	add    esp,0x20
c0006166:	5b                   	pop    ebx
c0006167:	5e                   	pop    esi
c0006168:	5f                   	pop    edi
c0006169:	c3                   	ret    

c000616a <f_stat>:
c000616a:	57                   	push   edi
c000616b:	31 c9                	xor    ecx,ecx
c000616d:	56                   	push   esi
c000616e:	53                   	push   ebx
c000616f:	83 ec 50             	sub    esp,0x50
c0006172:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006176:	8d 54 24 04          	lea    edx,[esp+0x4]
c000617a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000617e:	e8 50 c5 ff ff       	call   c00026d3 <mount_volume>
c0006183:	89 c3                	mov    ebx,eax
c0006185:	85 c0                	test   eax,eax
c0006187:	75 67                	jne    c00061f0 <f_stat+0x86>
c0006189:	83 ec 0c             	sub    esp,0xc
c000618c:	bb 11 00 00 00       	mov    ebx,0x11
c0006191:	68 60 04 00 00       	push   0x460
c0006196:	e8 db 22 00 00       	call   c0008476 <ff_memalloc>
c000619b:	83 c4 10             	add    esp,0x10
c000619e:	89 c6                	mov    esi,eax
c00061a0:	85 c0                	test   eax,eax
c00061a2:	74 4c                	je     c00061f0 <f_stat+0x86>
c00061a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061a8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061ae:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061b1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061b4:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 88 ec ff ff       	call   c0004e49 <follow_path>
c00061c1:	89 c3                	mov    ebx,eax
c00061c3:	85 c0                	test   eax,eax
c00061c5:	75 1d                	jne    c00061e4 <f_stat+0x7a>
c00061c7:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061cc:	78 11                	js     c00061df <f_stat+0x75>
c00061ce:	85 ff                	test   edi,edi
c00061d0:	74 12                	je     c00061e4 <f_stat+0x7a>
c00061d2:	89 fa                	mov    edx,edi
c00061d4:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061d8:	e8 e0 e9 ff ff       	call   c0004bbd <get_fileinfo>
c00061dd:	eb 05                	jmp    c00061e4 <f_stat+0x7a>
c00061df:	bb 06 00 00 00       	mov    ebx,0x6
c00061e4:	83 ec 0c             	sub    esp,0xc
c00061e7:	56                   	push   esi
c00061e8:	e8 9f 22 00 00       	call   c000848c <ff_memfree>
c00061ed:	83 c4 10             	add    esp,0x10
c00061f0:	83 c4 50             	add    esp,0x50
c00061f3:	89 d8                	mov    eax,ebx
c00061f5:	5b                   	pop    ebx
c00061f6:	5e                   	pop    esi
c00061f7:	5f                   	pop    edi
c00061f8:	c3                   	ret    

c00061f9 <f_getfree>:
c00061f9:	55                   	push   ebp
c00061fa:	31 c9                	xor    ecx,ecx
c00061fc:	57                   	push   edi
c00061fd:	56                   	push   esi
c00061fe:	53                   	push   ebx
c00061ff:	83 ec 5c             	sub    esp,0x5c
c0006202:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006206:	8d 44 24 70          	lea    eax,[esp+0x70]
c000620a:	e8 c4 c4 ff ff       	call   c00026d3 <mount_volume>
c000620f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006213:	85 c0                	test   eax,eax
c0006215:	0f 85 9d 01 00 00    	jne    c00063b8 <f_getfree+0x1bf>
c000621b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000621f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006223:	89 02                	mov    DWORD PTR [edx],eax
c0006225:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006228:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000622b:	8d 71 fe             	lea    esi,[ecx-0x2]
c000622e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006232:	39 f2                	cmp    edx,esi
c0006234:	77 0b                	ja     c0006241 <f_getfree+0x48>
c0006236:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000623a:	89 10                	mov    DWORD PTR [eax],edx
c000623c:	e9 77 01 00 00       	jmp    c00063b8 <f_getfree+0x1bf>
c0006241:	8a 10                	mov    dl,BYTE PTR [eax]
c0006243:	80 fa 01             	cmp    dl,0x1
c0006246:	75 3a                	jne    c0006282 <f_getfree+0x89>
c0006248:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000624c:	be 02 00 00 00       	mov    esi,0x2
c0006251:	31 db                	xor    ebx,ebx
c0006253:	89 f2                	mov    edx,esi
c0006255:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006259:	e8 4b cd ff ff       	call   c0002fa9 <get_fat>
c000625e:	83 f8 ff             	cmp    eax,0xffffffff
c0006261:	0f 84 28 01 00 00    	je     c000638f <f_getfree+0x196>
c0006267:	83 f8 01             	cmp    eax,0x1
c000626a:	0f 84 29 01 00 00    	je     c0006399 <f_getfree+0x1a0>
c0006270:	83 d3 00             	adc    ebx,0x0
c0006273:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006277:	46                   	inc    esi
c0006278:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000627b:	77 d6                	ja     c0006253 <f_getfree+0x5a>
c000627d:	e9 25 01 00 00       	jmp    c00063a7 <f_getfree+0x1ae>
c0006282:	80 fa 04             	cmp    dl,0x4
c0006285:	0f 85 88 00 00 00    	jne    c0006313 <f_getfree+0x11a>
c000628b:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000628e:	31 ed                	xor    ebp,ebp
c0006290:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006293:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006297:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000629b:	31 db                	xor    ebx,ebx
c000629d:	85 ed                	test   ebp,ebp
c000629f:	75 3f                	jne    c00062e0 <f_getfree+0xe7>
c00062a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062a9:	83 c0 01             	add    eax,0x1
c00062ac:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062b0:	83 d2 00             	adc    edx,0x0
c00062b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062b7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062c3:	e8 59 c1 ff ff       	call   c0002421 <move_window>
c00062c8:	85 c0                	test   eax,eax
c00062ca:	0f 85 d3 00 00 00    	jne    c00063a3 <f_getfree+0x1aa>
c00062d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062e4:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062e7:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062eb:	89 cf                	mov    edi,ecx
c00062ed:	85 f6                	test   esi,esi
c00062ef:	74 12                	je     c0006303 <f_getfree+0x10a>
c00062f1:	88 c1                	mov    cl,al
c00062f3:	83 e1 01             	and    ecx,0x1
c00062f6:	80 f9 01             	cmp    cl,0x1
c00062f9:	83 d3 00             	adc    ebx,0x0
c00062fc:	d0 e8                	shr    al,1
c00062fe:	4e                   	dec    esi
c00062ff:	39 fe                	cmp    esi,edi
c0006301:	75 ea                	jne    c00062ed <f_getfree+0xf4>
c0006303:	45                   	inc    ebp
c0006304:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000630a:	85 f6                	test   esi,esi
c000630c:	75 8f                	jne    c000629d <f_getfree+0xa4>
c000630e:	e9 94 00 00 00       	jmp    c00063a7 <f_getfree+0x1ae>
c0006313:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006316:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006319:	31 f6                	xor    esi,esi
c000631b:	31 db                	xor    ebx,ebx
c000631d:	85 f6                	test   esi,esi
c000631f:	75 1b                	jne    c000633c <f_getfree+0x143>
c0006321:	89 d7                	mov    edi,edx
c0006323:	89 cd                	mov    ebp,ecx
c0006325:	83 c7 01             	add    edi,0x1
c0006328:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000632c:	83 d5 00             	adc    ebp,0x0
c000632f:	e8 ed c0 ff ff       	call   c0002421 <move_window>
c0006334:	85 c0                	test   eax,eax
c0006336:	75 6b                	jne    c00063a3 <f_getfree+0x1aa>
c0006338:	89 fa                	mov    edx,edi
c000633a:	89 e9                	mov    ecx,ebp
c000633c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006340:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006344:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006348:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000634b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000634f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006353:	75 11                	jne    c0006366 <f_getfree+0x16d>
c0006355:	e8 e9 b8 ff ff       	call   c0001c43 <ld_word>
c000635a:	66 83 f8 01          	cmp    ax,0x1
c000635e:	83 d3 00             	adc    ebx,0x0
c0006361:	83 c6 02             	add    esi,0x2
c0006364:	eb 13                	jmp    c0006379 <f_getfree+0x180>
c0006366:	e8 e5 b8 ff ff       	call   c0001c50 <ld_dword>
c000636b:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006370:	83 f8 01             	cmp    eax,0x1
c0006373:	83 d3 00             	adc    ebx,0x0
c0006376:	83 c6 04             	add    esi,0x4
c0006379:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000637f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006383:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006387:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000638b:	75 90                	jne    c000631d <f_getfree+0x124>
c000638d:	eb 18                	jmp    c00063a7 <f_getfree+0x1ae>
c000638f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0006397:	eb 0e                	jmp    c00063a7 <f_getfree+0x1ae>
c0006399:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063a1:	eb 04                	jmp    c00063a7 <f_getfree+0x1ae>
c00063a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063a7:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063ab:	89 18                	mov    DWORD PTR [eax],ebx
c00063ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063b1:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063b4:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063bc:	83 c4 5c             	add    esp,0x5c
c00063bf:	5b                   	pop    ebx
c00063c0:	5e                   	pop    esi
c00063c1:	5f                   	pop    edi
c00063c2:	5d                   	pop    ebp
c00063c3:	c3                   	ret    

c00063c4 <f_truncate>:
c00063c4:	56                   	push   esi
c00063c5:	53                   	push   ebx
c00063c6:	83 ec 14             	sub    esp,0x14
c00063c9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063cd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063d1:	89 d8                	mov    eax,ebx
c00063d3:	e8 6e bf ff ff       	call   c0002346 <validate>
c00063d8:	89 c6                	mov    esi,eax
c00063da:	85 c0                	test   eax,eax
c00063dc:	0f 85 d2 00 00 00    	jne    c00064b4 <f_truncate+0xf0>
c00063e2:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063e6:	85 f6                	test   esi,esi
c00063e8:	0f 85 c6 00 00 00    	jne    c00064b4 <f_truncate+0xf0>
c00063ee:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063f2:	0f 84 b7 00 00 00    	je     c00064af <f_truncate+0xeb>
c00063f8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063fb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063fe:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006401:	89 d1                	mov    ecx,edx
c0006403:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006406:	0f 83 a8 00 00 00    	jae    c00064b4 <f_truncate+0xf0>
c000640c:	09 c2                	or     edx,eax
c000640e:	75 15                	jne    c0006425 <f_truncate+0x61>
c0006410:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006413:	31 c9                	xor    ecx,ecx
c0006415:	89 d8                	mov    eax,ebx
c0006417:	e8 7a d0 ff ff       	call   c0003496 <remove_chain>
c000641c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006423:	eb 35                	jmp    c000645a <f_truncate+0x96>
c0006425:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006428:	89 d8                	mov    eax,ebx
c000642a:	e8 7a cb ff ff       	call   c0002fa9 <get_fat>
c000642f:	89 c2                	mov    edx,eax
c0006431:	b8 01 00 00 00       	mov    eax,0x1
c0006436:	83 fa ff             	cmp    edx,0xffffffff
c0006439:	74 1f                	je     c000645a <f_truncate+0x96>
c000643b:	b8 02 00 00 00       	mov    eax,0x2
c0006440:	83 fa 01             	cmp    edx,0x1
c0006443:	74 15                	je     c000645a <f_truncate+0x96>
c0006445:	31 c0                	xor    eax,eax
c0006447:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000644b:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000644e:	76 0a                	jbe    c000645a <f_truncate+0x96>
c0006450:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006453:	89 d8                	mov    eax,ebx
c0006455:	e8 3c d0 ff ff       	call   c0003496 <remove_chain>
c000645a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000645d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006460:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006463:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006466:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006469:	83 ca 40             	or     edx,0x40
c000646c:	85 c0                	test   eax,eax
c000646e:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006471:	75 35                	jne    c00064a8 <f_truncate+0xe4>
c0006473:	84 d2                	test   dl,dl
c0006475:	79 3d                	jns    c00064b4 <f_truncate+0xf0>
c0006477:	83 ec 0c             	sub    esp,0xc
c000647a:	8d 43 50             	lea    eax,[ebx+0x50]
c000647d:	6a 01                	push   0x1
c000647f:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006482:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006485:	50                   	push   eax
c0006486:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000648a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000648e:	50                   	push   eax
c000648f:	e8 7a b7 ff ff       	call   c0001c0e <disk_write>
c0006494:	83 c4 20             	add    esp,0x20
c0006497:	85 c0                	test   eax,eax
c0006499:	75 08                	jne    c00064a3 <f_truncate+0xdf>
c000649b:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000649f:	31 f6                	xor    esi,esi
c00064a1:	eb 11                	jmp    c00064b4 <f_truncate+0xf0>
c00064a3:	b8 01 00 00 00       	mov    eax,0x1
c00064a8:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064ab:	89 c6                	mov    esi,eax
c00064ad:	eb 05                	jmp    c00064b4 <f_truncate+0xf0>
c00064af:	be 07 00 00 00       	mov    esi,0x7
c00064b4:	89 f0                	mov    eax,esi
c00064b6:	83 c4 14             	add    esp,0x14
c00064b9:	5b                   	pop    ebx
c00064ba:	5e                   	pop    esi
c00064bb:	c3                   	ret    

c00064bc <f_unlink>:
c00064bc:	56                   	push   esi
c00064bd:	b9 02 00 00 00       	mov    ecx,0x2
c00064c2:	53                   	push   ebx
c00064c3:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064c9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064cd:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064d4:	e8 fa c1 ff ff       	call   c00026d3 <mount_volume>
c00064d9:	85 c0                	test   eax,eax
c00064db:	0f 85 55 01 00 00    	jne    c0006636 <f_unlink+0x17a>
c00064e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064e5:	83 ec 0c             	sub    esp,0xc
c00064e8:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064ec:	68 60 04 00 00       	push   0x460
c00064f1:	e8 80 1f 00 00       	call   c0008476 <ff_memalloc>
c00064f6:	83 c4 10             	add    esp,0x10
c00064f9:	89 c3                	mov    ebx,eax
c00064fb:	b8 11 00 00 00       	mov    eax,0x11
c0006500:	85 db                	test   ebx,ebx
c0006502:	0f 84 2e 01 00 00    	je     c0006636 <f_unlink+0x17a>
c0006508:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000650c:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006512:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006515:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006518:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000651f:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006523:	e8 21 e9 ff ff       	call   c0004e49 <follow_path>
c0006528:	85 c0                	test   eax,eax
c000652a:	0f 85 f2 00 00 00    	jne    c0006622 <f_unlink+0x166>
c0006530:	b8 06 00 00 00       	mov    eax,0x6
c0006535:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000653d:	0f 88 df 00 00 00    	js     c0006622 <f_unlink+0x166>
c0006543:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006548:	74 0a                	je     c0006554 <f_unlink+0x98>
c000654a:	b8 07 00 00 00       	mov    eax,0x7
c000654f:	e9 ce 00 00 00       	jmp    c0006622 <f_unlink+0x166>
c0006554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006558:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000655c:	8a 02                	mov    al,BYTE PTR [edx]
c000655e:	3c 04                	cmp    al,0x4
c0006560:	75 12                	jne    c0006574 <f_unlink+0xb8>
c0006562:	8d 42 10             	lea    eax,[edx+0x10]
c0006565:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006569:	e8 a1 e8 ff ff       	call   c0004e0f <init_alloc_info.isra.2>
c000656e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006572:	eb 0e                	jmp    c0006582 <f_unlink+0xc6>
c0006574:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000657b:	e8 3e e8 ff ff       	call   c0004dbe <ld_clust.isra.0>
c0006580:	89 c6                	mov    esi,eax
c0006582:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006587:	75 12                	jne    c000659b <f_unlink+0xdf>
c0006589:	8d 44 24 48          	lea    eax,[esp+0x48]
c000658d:	e8 94 d6 ff ff       	call   c0003c26 <dir_remove>
c0006592:	85 c0                	test   eax,eax
c0006594:	74 6c                	je     c0006602 <f_unlink+0x146>
c0006596:	e9 87 00 00 00       	jmp    c0006622 <f_unlink+0x166>
c000659b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000659f:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065a6:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065ad:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065b0:	75 21                	jne    c00065d3 <f_unlink+0x117>
c00065b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065b6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065ba:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065c1:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065c8:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065cc:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065d3:	31 d2                	xor    edx,edx
c00065d5:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065dc:	e8 be cb ff ff       	call   c000319f <dir_sdi>
c00065e1:	85 c0                	test   eax,eax
c00065e3:	75 3d                	jne    c0006622 <f_unlink+0x166>
c00065e5:	31 d2                	xor    edx,edx
c00065e7:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065ee:	e8 bc d3 ff ff       	call   c00039af <dir_read>
c00065f3:	85 c0                	test   eax,eax
c00065f5:	0f 84 4f ff ff ff    	je     c000654a <f_unlink+0x8e>
c00065fb:	83 f8 04             	cmp    eax,0x4
c00065fe:	75 22                	jne    c0006622 <f_unlink+0x166>
c0006600:	eb 87                	jmp    c0006589 <f_unlink+0xcd>
c0006602:	85 f6                	test   esi,esi
c0006604:	75 0b                	jne    c0006611 <f_unlink+0x155>
c0006606:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000660a:	e8 3d df ff ff       	call   c000454c <sync_fs>
c000660f:	eb 11                	jmp    c0006622 <f_unlink+0x166>
c0006611:	31 c9                	xor    ecx,ecx
c0006613:	89 f2                	mov    edx,esi
c0006615:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006619:	e8 78 ce ff ff       	call   c0003496 <remove_chain>
c000661e:	85 c0                	test   eax,eax
c0006620:	74 e4                	je     c0006606 <f_unlink+0x14a>
c0006622:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006626:	83 ec 0c             	sub    esp,0xc
c0006629:	53                   	push   ebx
c000662a:	e8 5d 1e 00 00       	call   c000848c <ff_memfree>
c000662f:	83 c4 10             	add    esp,0x10
c0006632:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006636:	81 c4 e4 00 00 00    	add    esp,0xe4
c000663c:	5b                   	pop    ebx
c000663d:	5e                   	pop    esi
c000663e:	c3                   	ret    

c000663f <f_mkdir>:
c000663f:	57                   	push   edi
c0006640:	b9 02 00 00 00       	mov    ecx,0x2
c0006645:	56                   	push   esi
c0006646:	53                   	push   ebx
c0006647:	83 c4 80             	add    esp,0xffffff80
c000664a:	8d 54 24 08          	lea    edx,[esp+0x8]
c000664e:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006655:	e8 79 c0 ff ff       	call   c00026d3 <mount_volume>
c000665a:	89 c3                	mov    ebx,eax
c000665c:	85 c0                	test   eax,eax
c000665e:	0f 85 fe 01 00 00    	jne    c0006862 <f_mkdir+0x223>
c0006664:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006668:	bb 11 00 00 00       	mov    ebx,0x11
c000666d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006671:	83 ec 0c             	sub    esp,0xc
c0006674:	68 60 04 00 00       	push   0x460
c0006679:	e8 f8 1d 00 00       	call   c0008476 <ff_memalloc>
c000667e:	83 c4 10             	add    esp,0x10
c0006681:	89 c7                	mov    edi,eax
c0006683:	85 c0                	test   eax,eax
c0006685:	0f 84 d7 01 00 00    	je     c0006862 <f_mkdir+0x223>
c000668b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000668f:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006695:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006698:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000669b:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066a2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066a6:	e8 9e e7 ff ff       	call   c0004e49 <follow_path>
c00066ab:	89 c3                	mov    ebx,eax
c00066ad:	85 c0                	test   eax,eax
c00066af:	74 3e                	je     c00066ef <f_mkdir+0xb0>
c00066b1:	83 f8 04             	cmp    eax,0x4
c00066b4:	75 3e                	jne    c00066f4 <f_mkdir+0xb5>
c00066b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ba:	31 d2                	xor    edx,edx
c00066bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066c0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066c4:	e8 ce cb ff ff       	call   c0003297 <create_chain>
c00066c9:	89 c6                	mov    esi,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 0c                	je     c00066db <f_mkdir+0x9c>
c00066cf:	bb 02 00 00 00       	mov    ebx,0x2
c00066d4:	83 f8 01             	cmp    eax,0x1
c00066d7:	74 07                	je     c00066e0 <f_mkdir+0xa1>
c00066d9:	eb 2a                	jmp    c0006705 <f_mkdir+0xc6>
c00066db:	bb 07 00 00 00       	mov    ebx,0x7
c00066e0:	31 c9                	xor    ecx,ecx
c00066e2:	89 f2                	mov    edx,esi
c00066e4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e8:	e8 a9 cd ff ff       	call   c0003496 <remove_chain>
c00066ed:	eb 05                	jmp    c00066f4 <f_mkdir+0xb5>
c00066ef:	bb 08 00 00 00       	mov    ebx,0x8
c00066f4:	83 ec 0c             	sub    esp,0xc
c00066f7:	57                   	push   edi
c00066f8:	e8 8f 1d 00 00       	call   c000848c <ff_memfree>
c00066fd:	83 c4 10             	add    esp,0x10
c0006700:	e9 5d 01 00 00       	jmp    c0006862 <f_mkdir+0x223>
c0006705:	bb 01 00 00 00       	mov    ebx,0x1
c000670a:	83 f8 ff             	cmp    eax,0xffffffff
c000670d:	74 d1                	je     c00066e0 <f_mkdir+0xa1>
c000670f:	89 f2                	mov    edx,esi
c0006711:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006715:	e8 c4 ce ff ff       	call   c00035de <dir_clear>
c000671a:	89 c3                	mov    ebx,eax
c000671c:	85 c0                	test   eax,eax
c000671e:	75 c0                	jne    c00066e0 <f_mkdir+0xa1>
c0006720:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006724:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006727:	74 69                	je     c0006792 <f_mkdir+0x153>
c0006729:	b9 0b 00 00 00       	mov    ecx,0xb
c000672e:	83 c0 54             	add    eax,0x54
c0006731:	ba 20 00 00 00       	mov    edx,0x20
c0006736:	e8 9c b5 ff ff       	call   c0001cd7 <mem_set>
c000673b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673f:	ba 00 00 21 50       	mov    edx,0x50210000
c0006744:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006748:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000674c:	83 c0 6a             	add    eax,0x6a
c000674f:	e8 65 b5 ff ff       	call   c0001cb9 <st_dword>
c0006754:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006758:	89 f1                	mov    ecx,esi
c000675a:	8d 50 54             	lea    edx,[eax+0x54]
c000675d:	e8 85 e6 ff ff       	call   c0004de7 <st_clust.isra.1>
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	b9 20 00 00 00       	mov    ecx,0x20
c000676b:	8d 50 54             	lea    edx,[eax+0x54]
c000676e:	83 c0 74             	add    eax,0x74
c0006771:	e8 4c b5 ff ff       	call   c0001cc2 <mem_cpy>
c0006776:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000677a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000677e:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006782:	8d 50 74             	lea    edx,[eax+0x74]
c0006785:	e8 5d e6 ff ff       	call   c0004de7 <st_clust.isra.1>
c000678a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006792:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006796:	e8 2f db ff ff       	call   c00042ca <dir_register>
c000679b:	89 c3                	mov    ebx,eax
c000679d:	85 c0                	test   eax,eax
c000679f:	0f 85 3b ff ff ff    	jne    c00066e0 <f_mkdir+0xa1>
c00067a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a9:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ac:	75 74                	jne    c0006822 <f_mkdir+0x1e3>
c00067ae:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067b1:	ba 00 00 21 50       	mov    edx,0x50210000
c00067b6:	83 c0 0c             	add    eax,0xc
c00067b9:	e8 fb b4 ff ff       	call   c0001cb9 <st_dword>
c00067be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c2:	89 f2                	mov    edx,esi
c00067c4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067c7:	83 c0 34             	add    eax,0x34
c00067ca:	e8 ea b4 ff ff       	call   c0001cb9 <st_dword>
c00067cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067d3:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067da:	c1 e2 09             	shl    edx,0x9
c00067dd:	83 c0 38             	add    eax,0x38
c00067e0:	e8 d4 b4 ff ff       	call   c0001cb9 <st_dword>
c00067e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e9:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f0:	c1 e2 09             	shl    edx,0x9
c00067f3:	83 c0 28             	add    eax,0x28
c00067f6:	e8 be b4 ff ff       	call   c0001cb9 <st_dword>
c00067fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ff:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006802:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006806:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006809:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000680d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006811:	e8 8b d3 ff ff       	call   c0003ba1 <store_xdir>
c0006816:	89 c3                	mov    ebx,eax
c0006818:	85 c0                	test   eax,eax
c000681a:	0f 85 d4 fe ff ff    	jne    c00066f4 <f_mkdir+0xb5>
c0006820:	eb 30                	jmp    c0006852 <f_mkdir+0x213>
c0006822:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006826:	ba 00 00 21 50       	mov    edx,0x50210000
c000682b:	83 c0 16             	add    eax,0x16
c000682e:	e8 86 b4 ff ff       	call   c0001cb9 <st_dword>
c0006833:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006837:	89 f1                	mov    ecx,esi
c0006839:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000683d:	e8 a5 e5 ff ff       	call   c0004de7 <st_clust.isra.1>
c0006842:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006846:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000684a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000684e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006852:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006856:	e8 f1 dc ff ff       	call   c000454c <sync_fs>
c000685b:	89 c3                	mov    ebx,eax
c000685d:	e9 92 fe ff ff       	jmp    c00066f4 <f_mkdir+0xb5>
c0006862:	83 ec 80             	sub    esp,0xffffff80
c0006865:	89 d8                	mov    eax,ebx
c0006867:	5b                   	pop    ebx
c0006868:	5e                   	pop    esi
c0006869:	5f                   	pop    edi
c000686a:	c3                   	ret    

c000686b <f_rename>:
c000686b:	55                   	push   ebp
c000686c:	57                   	push   edi
c000686d:	56                   	push   esi
c000686e:	53                   	push   ebx
c000686f:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006875:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000687c:	e8 a4 b9 ff ff       	call   c0002225 <get_ldnumber>
c0006881:	b9 02 00 00 00       	mov    ecx,0x2
c0006886:	8d 54 24 14          	lea    edx,[esp+0x14]
c000688a:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006891:	e8 3d be ff ff       	call   c00026d3 <mount_volume>
c0006896:	85 c0                	test   eax,eax
c0006898:	0f 85 b5 02 00 00    	jne    c0006b53 <f_rename+0x2e8>
c000689e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068a2:	83 ec 0c             	sub    esp,0xc
c00068a5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068a9:	68 60 04 00 00       	push   0x460
c00068ae:	e8 c3 1b 00 00       	call   c0008476 <ff_memalloc>
c00068b3:	83 c4 10             	add    esp,0x10
c00068b6:	89 c3                	mov    ebx,eax
c00068b8:	b8 11 00 00 00       	mov    eax,0x11
c00068bd:	85 db                	test   ebx,ebx
c00068bf:	0f 84 8e 02 00 00    	je     c0006b53 <f_rename+0x2e8>
c00068c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c9:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068cf:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068d2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068d5:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068dc:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068e0:	e8 64 e5 ff ff       	call   c0004e49 <follow_path>
c00068e5:	85 c0                	test   eax,eax
c00068e7:	0f 85 52 02 00 00    	jne    c0006b3f <f_rename+0x2d4>
c00068ed:	b8 06 00 00 00       	mov    eax,0x6
c00068f2:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068fa:	0f 85 3f 02 00 00    	jne    c0006b3f <f_rename+0x2d4>
c0006900:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006904:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006907:	0f 85 05 01 00 00    	jne    c0006a12 <f_rename+0x1a7>
c000690d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006910:	b9 40 00 00 00       	mov    ecx,0x40
c0006915:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006919:	e8 a4 b3 ff ff       	call   c0001cc2 <mem_cpy>
c000691e:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006923:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006927:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000692e:	e8 8f b3 ff ff       	call   c0001cc2 <mem_cpy>
c0006933:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000693a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006941:	e8 03 e5 ff ff       	call   c0004e49 <follow_path>
c0006946:	85 c0                	test   eax,eax
c0006948:	75 29                	jne    c0006973 <f_rename+0x108>
c000694a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000694e:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006955:	74 0a                	je     c0006961 <f_rename+0xf6>
c0006957:	b8 08 00 00 00       	mov    eax,0x8
c000695c:	e9 de 01 00 00       	jmp    c0006b3f <f_rename+0x2d4>
c0006961:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006968:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000696f:	75 e6                	jne    c0006957 <f_rename+0xec>
c0006971:	eb 09                	jmp    c000697c <f_rename+0x111>
c0006973:	83 f8 04             	cmp    eax,0x4
c0006976:	0f 85 c3 01 00 00    	jne    c0006b3f <f_rename+0x2d4>
c000697c:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006983:	e8 42 d9 ff ff       	call   c00042ca <dir_register>
c0006988:	85 c0                	test   eax,eax
c000698a:	0f 85 af 01 00 00    	jne    c0006b3f <f_rename+0x2d4>
c0006990:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006994:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006997:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000699a:	89 c5                	mov    ebp,eax
c000699c:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000699f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069a3:	8d 46 24             	lea    eax,[esi+0x24]
c00069a6:	e8 98 b2 ff ff       	call   c0001c43 <ld_word>
c00069ab:	b9 40 00 00 00       	mov    ecx,0x40
c00069b0:	89 c7                	mov    edi,eax
c00069b2:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069b6:	89 f0                	mov    eax,esi
c00069b8:	e8 05 b3 ff ff       	call   c0001cc2 <mem_cpy>
c00069bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069c1:	89 e9                	mov    ecx,ebp
c00069c3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c6:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069c9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d4:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069d7:	0f b7 d7             	movzx  edx,di
c00069da:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069dd:	83 c0 24             	add    eax,0x24
c00069e0:	e8 d0 b2 ff ff       	call   c0001cb5 <st_word>
c00069e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069e9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069ec:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069ef:	a8 10                	test   al,0x10
c00069f1:	75 06                	jne    c00069f9 <f_rename+0x18e>
c00069f3:	83 c8 20             	or     eax,0x20
c00069f6:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069f9:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a00:	e8 9c d1 ff ff       	call   c0003ba1 <store_xdir>
c0006a05:	85 c0                	test   eax,eax
c0006a07:	0f 84 1c 01 00 00    	je     c0006b29 <f_rename+0x2be>
c0006a0d:	e9 2d 01 00 00       	jmp    c0006b3f <f_rename+0x2d4>
c0006a12:	b9 20 00 00 00       	mov    ecx,0x20
c0006a17:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a1e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a22:	e8 9b b2 ff ff       	call   c0001cc2 <mem_cpy>
c0006a27:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a2c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a30:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a37:	e8 86 b2 ff ff       	call   c0001cc2 <mem_cpy>
c0006a3c:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a43:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a4a:	e8 fa e3 ff ff       	call   c0004e49 <follow_path>
c0006a4f:	85 c0                	test   eax,eax
c0006a51:	75 27                	jne    c0006a7a <f_rename+0x20f>
c0006a53:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a57:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a5e:	0f 85 f3 fe ff ff    	jne    c0006957 <f_rename+0xec>
c0006a64:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a6b:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a72:	0f 85 df fe ff ff    	jne    c0006957 <f_rename+0xec>
c0006a78:	eb 09                	jmp    c0006a83 <f_rename+0x218>
c0006a7a:	83 f8 04             	cmp    eax,0x4
c0006a7d:	0f 85 bc 00 00 00    	jne    c0006b3f <f_rename+0x2d4>
c0006a83:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a8a:	e8 3b d8 ff ff       	call   c00042ca <dir_register>
c0006a8f:	85 c0                	test   eax,eax
c0006a91:	0f 85 a8 00 00 00    	jne    c0006b3f <f_rename+0x2d4>
c0006a97:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a9e:	b9 13 00 00 00       	mov    ecx,0x13
c0006aa3:	8d 46 0d             	lea    eax,[esi+0xd]
c0006aa6:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006aaa:	e8 13 b2 ff ff       	call   c0001cc2 <mem_cpy>
c0006aaf:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ab3:	a8 10                	test   al,0x10
c0006ab5:	75 03                	jne    c0006aba <f_rename+0x24f>
c0006ab7:	83 c8 20             	or     eax,0x20
c0006aba:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006abd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006ac1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ac5:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ac9:	74 5e                	je     c0006b29 <f_rename+0x2be>
c0006acb:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ad2:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006ad6:	74 51                	je     c0006b29 <f_rename+0x2be>
c0006ad8:	89 f2                	mov    edx,esi
c0006ada:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ade:	8a 07                	mov    al,BYTE PTR [edi]
c0006ae0:	e8 d9 e2 ff ff       	call   c0004dbe <ld_clust.isra.0>
c0006ae5:	89 c2                	mov    edx,eax
c0006ae7:	89 f8                	mov    eax,edi
c0006ae9:	e8 ee b3 ff ff       	call   c0001edc <clst2sect>
c0006aee:	89 c6                	mov    esi,eax
c0006af0:	89 d1                	mov    ecx,edx
c0006af2:	b8 02 00 00 00       	mov    eax,0x2
c0006af7:	09 f2                	or     edx,esi
c0006af9:	74 44                	je     c0006b3f <f_rename+0x2d4>
c0006afb:	89 f2                	mov    edx,esi
c0006afd:	89 f8                	mov    eax,edi
c0006aff:	e8 1d b9 ff ff       	call   c0002421 <move_window>
c0006b04:	85 c0                	test   eax,eax
c0006b06:	75 37                	jne    c0006b3f <f_rename+0x2d4>
c0006b08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b0c:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b10:	75 17                	jne    c0006b29 <f_rename+0x2be>
c0006b12:	8d 50 74             	lea    edx,[eax+0x74]
c0006b15:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b1c:	e8 c6 e2 ff ff       	call   c0004de7 <st_clust.isra.1>
c0006b21:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b25:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b29:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b2d:	e8 f4 d0 ff ff       	call   c0003c26 <dir_remove>
c0006b32:	85 c0                	test   eax,eax
c0006b34:	75 09                	jne    c0006b3f <f_rename+0x2d4>
c0006b36:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b3a:	e8 0d da ff ff       	call   c000454c <sync_fs>
c0006b3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b43:	83 ec 0c             	sub    esp,0xc
c0006b46:	53                   	push   ebx
c0006b47:	e8 40 19 00 00       	call   c000848c <ff_memfree>
c0006b4c:	83 c4 10             	add    esp,0x10
c0006b4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b53:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b59:	5b                   	pop    ebx
c0006b5a:	5e                   	pop    esi
c0006b5b:	5f                   	pop    edi
c0006b5c:	5d                   	pop    ebp
c0006b5d:	c3                   	ret    

c0006b5e <f_chmod>:
c0006b5e:	57                   	push   edi
c0006b5f:	b9 02 00 00 00       	mov    ecx,0x2
c0006b64:	56                   	push   esi
c0006b65:	53                   	push   ebx
c0006b66:	83 ec 60             	sub    esp,0x60
c0006b69:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b6d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b71:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b75:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b79:	e8 55 bb ff ff       	call   c00026d3 <mount_volume>
c0006b7e:	85 c0                	test   eax,eax
c0006b80:	0f 85 af 00 00 00    	jne    c0006c35 <f_chmod+0xd7>
c0006b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b8a:	83 ec 0c             	sub    esp,0xc
c0006b8d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b91:	68 60 04 00 00       	push   0x460
c0006b96:	e8 db 18 00 00       	call   c0008476 <ff_memalloc>
c0006b9b:	83 c4 10             	add    esp,0x10
c0006b9e:	89 c6                	mov    esi,eax
c0006ba0:	b8 11 00 00 00       	mov    eax,0x11
c0006ba5:	85 f6                	test   esi,esi
c0006ba7:	0f 84 88 00 00 00    	je     c0006c35 <f_chmod+0xd7>
c0006bad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb1:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bb7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bba:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bbd:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bc1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bc5:	e8 7f e2 ff ff       	call   c0004e49 <follow_path>
c0006bca:	85 c0                	test   eax,eax
c0006bcc:	75 53                	jne    c0006c21 <f_chmod+0xc3>
c0006bce:	b8 06 00 00 00       	mov    eax,0x6
c0006bd3:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bd8:	75 47                	jne    c0006c21 <f_chmod+0xc3>
c0006bda:	89 f9                	mov    ecx,edi
c0006bdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006be0:	83 e1 27             	and    ecx,0x27
c0006be3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006be6:	75 1d                	jne    c0006c05 <f_chmod+0xa7>
c0006be8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006beb:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bee:	21 cb                	and    ebx,ecx
c0006bf0:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bf3:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bf6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bfa:	e8 a2 cf ff ff       	call   c0003ba1 <store_xdir>
c0006bff:	85 c0                	test   eax,eax
c0006c01:	75 1e                	jne    c0006c21 <f_chmod+0xc3>
c0006c03:	eb 13                	jmp    c0006c18 <f_chmod+0xba>
c0006c05:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c09:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c11:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c14:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c1c:	e8 2b d9 ff ff       	call   c000454c <sync_fs>
c0006c21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c25:	83 ec 0c             	sub    esp,0xc
c0006c28:	56                   	push   esi
c0006c29:	e8 5e 18 00 00       	call   c000848c <ff_memfree>
c0006c2e:	83 c4 10             	add    esp,0x10
c0006c31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c35:	83 c4 60             	add    esp,0x60
c0006c38:	5b                   	pop    ebx
c0006c39:	5e                   	pop    esi
c0006c3a:	5f                   	pop    edi
c0006c3b:	c3                   	ret    

c0006c3c <f_utime>:
c0006c3c:	56                   	push   esi
c0006c3d:	b9 02 00 00 00       	mov    ecx,0x2
c0006c42:	53                   	push   ebx
c0006c43:	83 ec 64             	sub    esp,0x64
c0006c46:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c4a:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c4e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c52:	e8 7c ba ff ff       	call   c00026d3 <mount_volume>
c0006c57:	85 c0                	test   eax,eax
c0006c59:	0f 85 b5 00 00 00    	jne    c0006d14 <f_utime+0xd8>
c0006c5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c63:	83 ec 0c             	sub    esp,0xc
c0006c66:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c6a:	68 60 04 00 00       	push   0x460
c0006c6f:	e8 02 18 00 00       	call   c0008476 <ff_memalloc>
c0006c74:	83 c4 10             	add    esp,0x10
c0006c77:	89 c3                	mov    ebx,eax
c0006c79:	b8 11 00 00 00       	mov    eax,0x11
c0006c7e:	85 db                	test   ebx,ebx
c0006c80:	0f 84 8e 00 00 00    	je     c0006d14 <f_utime+0xd8>
c0006c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c8a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c90:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c93:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c96:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c9a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c9e:	e8 a6 e1 ff ff       	call   c0004e49 <follow_path>
c0006ca3:	85 c0                	test   eax,eax
c0006ca5:	75 59                	jne    c0006d00 <f_utime+0xc4>
c0006ca7:	b8 06 00 00 00       	mov    eax,0x6
c0006cac:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006cb1:	75 4d                	jne    c0006d00 <f_utime+0xc4>
c0006cb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cb7:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cbb:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cbf:	c1 e2 10             	shl    edx,0x10
c0006cc2:	09 ca                	or     edx,ecx
c0006cc4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cc7:	75 1a                	jne    c0006ce3 <f_utime+0xa7>
c0006cc9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006ccc:	83 c0 0c             	add    eax,0xc
c0006ccf:	e8 e5 af ff ff       	call   c0001cb9 <st_dword>
c0006cd4:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cd8:	e8 c4 ce ff ff       	call   c0003ba1 <store_xdir>
c0006cdd:	85 c0                	test   eax,eax
c0006cdf:	75 1f                	jne    c0006d00 <f_utime+0xc4>
c0006ce1:	eb 14                	jmp    c0006cf7 <f_utime+0xbb>
c0006ce3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ce7:	83 c0 16             	add    eax,0x16
c0006cea:	e8 ca af ff ff       	call   c0001cb9 <st_dword>
c0006cef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cf3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cfb:	e8 4c d8 ff ff       	call   c000454c <sync_fs>
c0006d00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d04:	83 ec 0c             	sub    esp,0xc
c0006d07:	53                   	push   ebx
c0006d08:	e8 7f 17 00 00       	call   c000848c <ff_memfree>
c0006d0d:	83 c4 10             	add    esp,0x10
c0006d10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d14:	83 c4 64             	add    esp,0x64
c0006d17:	5b                   	pop    ebx
c0006d18:	5e                   	pop    esi
c0006d19:	c3                   	ret    

c0006d1a <f_getlabel>:
c0006d1a:	55                   	push   ebp
c0006d1b:	31 c9                	xor    ecx,ecx
c0006d1d:	57                   	push   edi
c0006d1e:	56                   	push   esi
c0006d1f:	53                   	push   ebx
c0006d20:	83 ec 6c             	sub    esp,0x6c
c0006d23:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d27:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d2e:	e8 a0 b9 ff ff       	call   c00026d3 <mount_volume>
c0006d33:	89 c6                	mov    esi,eax
c0006d35:	85 c0                	test   eax,eax
c0006d37:	0f 85 c1 01 00 00    	jne    c0006efe <f_getlabel+0x1e4>
c0006d3d:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d45:	0f 84 5f 01 00 00    	je     c0006eaa <f_getlabel+0x190>
c0006d4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d4f:	31 d2                	xor    edx,edx
c0006d51:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d55:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d5d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d61:	e8 39 c4 ff ff       	call   c000319f <dir_sdi>
c0006d66:	85 c0                	test   eax,eax
c0006d68:	0f 85 2d 01 00 00    	jne    c0006e9b <f_getlabel+0x181>
c0006d6e:	ba 01 00 00 00       	mov    edx,0x1
c0006d73:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d77:	e8 33 cc ff ff       	call   c00039af <dir_read>
c0006d7c:	85 c0                	test   eax,eax
c0006d7e:	0f 85 17 01 00 00    	jne    c0006e9b <f_getlabel+0x181>
c0006d84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d88:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d8b:	74 09                	je     c0006d96 <f_getlabel+0x7c>
c0006d8d:	31 db                	xor    ebx,ebx
c0006d8f:	31 c9                	xor    ecx,ecx
c0006d91:	e9 c8 00 00 00       	jmp    c0006e5e <f_getlabel+0x144>
c0006d96:	31 ed                	xor    ebp,ebp
c0006d98:	31 db                	xor    ebx,ebx
c0006d9a:	31 ff                	xor    edi,edi
c0006d9c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006da0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006da4:	39 fa                	cmp    edx,edi
c0006da6:	76 4b                	jbe    c0006df3 <f_getlabel+0xd9>
c0006da8:	47                   	inc    edi
c0006da9:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dac:	01 d0                	add    eax,edx
c0006dae:	e8 90 ae ff ff       	call   c0001c43 <ld_word>
c0006db3:	66 85 ed             	test   bp,bp
c0006db6:	75 0d                	jne    c0006dc5 <f_getlabel+0xab>
c0006db8:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006dbe:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006dc3:	76 28                	jbe    c0006ded <f_getlabel+0xd3>
c0006dc5:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dcc:	89 e9                	mov    ecx,ebp
c0006dce:	01 da                	add    edx,ebx
c0006dd0:	c1 e1 10             	shl    ecx,0x10
c0006dd3:	0f b7 c0             	movzx  eax,ax
c0006dd6:	09 c8                	or     eax,ecx
c0006dd8:	b9 04 00 00 00       	mov    ecx,0x4
c0006ddd:	e8 01 b0 ff ff       	call   c0001de3 <put_utf>
c0006de2:	84 c0                	test   al,al
c0006de4:	74 0b                	je     c0006df1 <f_getlabel+0xd7>
c0006de6:	0f b6 c0             	movzx  eax,al
c0006de9:	01 c3                	add    ebx,eax
c0006deb:	31 c0                	xor    eax,eax
c0006ded:	89 c5                	mov    ebp,eax
c0006def:	eb ab                	jmp    c0006d9c <f_getlabel+0x82>
c0006df1:	31 db                	xor    ebx,ebx
c0006df3:	66 85 ed             	test   bp,bp
c0006df6:	74 02                	je     c0006dfa <f_getlabel+0xe0>
c0006df8:	31 db                	xor    ebx,ebx
c0006dfa:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e01:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e05:	e9 a0 00 00 00       	jmp    c0006eaa <f_getlabel+0x190>
c0006e0a:	83 ff 0b             	cmp    edi,0xb
c0006e0d:	74 11                	je     c0006e20 <f_getlabel+0x106>
c0006e0f:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e18:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e1b:	c1 e0 08             	shl    eax,0x8
c0006e1e:	09 c2                	or     edx,eax
c0006e20:	0f b7 d2             	movzx  edx,dx
c0006e23:	50                   	push   eax
c0006e24:	50                   	push   eax
c0006e25:	68 b5 01 00 00       	push   0x1b5
c0006e2a:	52                   	push   edx
c0006e2b:	e8 03 17 00 00       	call   c0008533 <ff_oem2uni>
c0006e30:	83 c4 10             	add    esp,0x10
c0006e33:	66 85 c0             	test   ax,ax
c0006e36:	74 46                	je     c0006e7e <f_getlabel+0x164>
c0006e38:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e3f:	0f b7 c0             	movzx  eax,ax
c0006e42:	01 da                	add    edx,ebx
c0006e44:	b9 04 00 00 00       	mov    ecx,0x4
c0006e49:	e8 95 af ff ff       	call   c0001de3 <put_utf>
c0006e4e:	84 c0                	test   al,al
c0006e50:	74 2c                	je     c0006e7e <f_getlabel+0x164>
c0006e52:	0f b6 c0             	movzx  eax,al
c0006e55:	01 c3                	add    ebx,eax
c0006e57:	83 ff 0b             	cmp    edi,0xb
c0006e5a:	74 24                	je     c0006e80 <f_getlabel+0x166>
c0006e5c:	89 f9                	mov    ecx,edi
c0006e5e:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e62:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e65:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e6a:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e73:	e8 9f ae ff ff       	call   c0001d17 <dbc_1st>
c0006e78:	85 c0                	test   eax,eax
c0006e7a:	74 a4                	je     c0006e20 <f_getlabel+0x106>
c0006e7c:	eb 8c                	jmp    c0006e0a <f_getlabel+0xf0>
c0006e7e:	31 db                	xor    ebx,ebx
c0006e80:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e87:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e8a:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e91:	74 17                	je     c0006eaa <f_getlabel+0x190>
c0006e93:	4b                   	dec    ebx
c0006e94:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e97:	74 ee                	je     c0006e87 <f_getlabel+0x16d>
c0006e99:	eb 0f                	jmp    c0006eaa <f_getlabel+0x190>
c0006e9b:	83 f8 04             	cmp    eax,0x4
c0006e9e:	75 5c                	jne    c0006efc <f_getlabel+0x1e2>
c0006ea0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ea7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006eaa:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006eb2:	74 4a                	je     c0006efe <f_getlabel+0x1e4>
c0006eb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006eb8:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ebb:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ebe:	e8 5e b5 ff ff       	call   c0002421 <move_window>
c0006ec3:	89 c6                	mov    esi,eax
c0006ec5:	85 c0                	test   eax,eax
c0006ec7:	75 35                	jne    c0006efe <f_getlabel+0x1e4>
c0006ec9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ecd:	b8 43 00 00 00       	mov    eax,0x43
c0006ed2:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ed4:	80 f9 03             	cmp    cl,0x3
c0006ed7:	74 0f                	je     c0006ee8 <f_getlabel+0x1ce>
c0006ed9:	31 c0                	xor    eax,eax
c0006edb:	80 f9 04             	cmp    cl,0x4
c0006ede:	0f 94 c0             	sete   al
c0006ee1:	48                   	dec    eax
c0006ee2:	83 e0 c3             	and    eax,0xffffffc3
c0006ee5:	83 c0 64             	add    eax,0x64
c0006ee8:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006eec:	e8 5f ad ff ff       	call   c0001c50 <ld_dword>
c0006ef1:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006ef8:	89 07                	mov    DWORD PTR [edi],eax
c0006efa:	eb 02                	jmp    c0006efe <f_getlabel+0x1e4>
c0006efc:	89 c6                	mov    esi,eax
c0006efe:	83 c4 6c             	add    esp,0x6c
c0006f01:	89 f0                	mov    eax,esi
c0006f03:	5b                   	pop    ebx
c0006f04:	5e                   	pop    esi
c0006f05:	5f                   	pop    edi
c0006f06:	5d                   	pop    ebp
c0006f07:	c3                   	ret    

c0006f08 <f_setlabel>:
c0006f08:	56                   	push   esi
c0006f09:	b9 02 00 00 00       	mov    ecx,0x2
c0006f0e:	53                   	push   ebx
c0006f0f:	83 ec 74             	sub    esp,0x74
c0006f12:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f16:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f1d:	e8 b1 b7 ff ff       	call   c00026d3 <mount_volume>
c0006f22:	89 c6                	mov    esi,eax
c0006f24:	85 c0                	test   eax,eax
c0006f26:	0f 85 41 02 00 00    	jne    c000716d <f_setlabel+0x265>
c0006f2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f30:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f33:	0f 85 8e 00 00 00    	jne    c0006fc7 <f_setlabel+0xbf>
c0006f39:	b9 16 00 00 00       	mov    ecx,0x16
c0006f3e:	31 d2                	xor    edx,edx
c0006f40:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f44:	31 db                	xor    ebx,ebx
c0006f46:	e8 8c ad ff ff       	call   c0001cd7 <mem_set>
c0006f4b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f52:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f55:	0f 86 0a 01 00 00    	jbe    c0007065 <f_setlabel+0x15d>
c0006f5b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f62:	e8 b6 ad ff ff       	call   c0001d1d <tchar2uni>
c0006f67:	89 c6                	mov    esi,eax
c0006f69:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f6e:	76 2a                	jbe    c0006f9a <f_setlabel+0x92>
c0006f70:	83 f8 ff             	cmp    eax,0xffffffff
c0006f73:	74 05                	je     c0006f7a <f_setlabel+0x72>
c0006f75:	83 fb 09             	cmp    ebx,0x9
c0006f78:	76 0a                	jbe    c0006f84 <f_setlabel+0x7c>
c0006f7a:	be 06 00 00 00       	mov    esi,0x6
c0006f7f:	e9 e9 01 00 00       	jmp    c000716d <f_setlabel+0x265>
c0006f84:	89 c2                	mov    edx,eax
c0006f86:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f8a:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f8d:	c1 ea 10             	shr    edx,0x10
c0006f90:	01 c8                	add    eax,ecx
c0006f92:	43                   	inc    ebx
c0006f93:	e8 1d ad ff ff       	call   c0001cb5 <st_word>
c0006f98:	eb 04                	jmp    c0006f9e <f_setlabel+0x96>
c0006f9a:	85 c0                	test   eax,eax
c0006f9c:	74 dc                	je     c0006f7a <f_setlabel+0x72>
c0006f9e:	89 f2                	mov    edx,esi
c0006fa0:	b8 57 9e 02 c0       	mov    eax,0xc0029e57
c0006fa5:	e8 5b ad ff ff       	call   c0001d05 <chk_chr>
c0006faa:	85 c0                	test   eax,eax
c0006fac:	75 cc                	jne    c0006f7a <f_setlabel+0x72>
c0006fae:	83 fb 0a             	cmp    ebx,0xa
c0006fb1:	77 c7                	ja     c0006f7a <f_setlabel+0x72>
c0006fb3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fb6:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fba:	0f b7 d6             	movzx  edx,si
c0006fbd:	01 c8                	add    eax,ecx
c0006fbf:	43                   	inc    ebx
c0006fc0:	e8 f0 ac ff ff       	call   c0001cb5 <st_word>
c0006fc5:	eb 84                	jmp    c0006f4b <f_setlabel+0x43>
c0006fc7:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fcc:	ba 20 00 00 00       	mov    edx,0x20
c0006fd1:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fd5:	31 db                	xor    ebx,ebx
c0006fd7:	e8 fb ac ff ff       	call   c0001cd7 <mem_set>
c0006fdc:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fe3:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fe6:	76 60                	jbe    c0007048 <f_setlabel+0x140>
c0006fe8:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fef:	e8 29 ad ff ff       	call   c0001d1d <tchar2uni>
c0006ff4:	3d ff ff 00 00       	cmp    eax,0xffff
c0006ff9:	0f 87 7b ff ff ff    	ja     c0006f7a <f_setlabel+0x72>
c0006fff:	83 ec 0c             	sub    esp,0xc
c0007002:	50                   	push   eax
c0007003:	e8 97 15 00 00       	call   c000859f <ff_wtoupper>
c0007008:	5a                   	pop    edx
c0007009:	59                   	pop    ecx
c000700a:	68 b5 01 00 00       	push   0x1b5
c000700f:	50                   	push   eax
c0007010:	e8 8e 14 00 00       	call   c00084a3 <ff_uni2oem>
c0007015:	83 c4 10             	add    esp,0x10
c0007018:	89 c6                	mov    esi,eax
c000701a:	66 85 c0             	test   ax,ax
c000701d:	0f 84 57 ff ff ff    	je     c0006f7a <f_setlabel+0x72>
c0007023:	0f b7 d0             	movzx  edx,ax
c0007026:	b8 50 9e 02 c0       	mov    eax,0xc0029e50
c000702b:	e8 d5 ac ff ff       	call   c0001d05 <chk_chr>
c0007030:	85 c0                	test   eax,eax
c0007032:	0f 85 42 ff ff ff    	jne    c0006f7a <f_setlabel+0x72>
c0007038:	66 81 fe ff 00       	cmp    si,0xff
c000703d:	0f 87 14 01 00 00    	ja     c0007157 <f_setlabel+0x24f>
c0007043:	e9 fa 00 00 00       	jmp    c0007142 <f_setlabel+0x23a>
c0007048:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000704d:	0f 84 27 ff ff ff    	je     c0006f7a <f_setlabel+0x72>
c0007053:	85 db                	test   ebx,ebx
c0007055:	74 0e                	je     c0007065 <f_setlabel+0x15d>
c0007057:	8d 43 ff             	lea    eax,[ebx-0x1]
c000705a:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000705f:	75 04                	jne    c0007065 <f_setlabel+0x15d>
c0007061:	89 c3                	mov    ebx,eax
c0007063:	eb ee                	jmp    c0007053 <f_setlabel+0x14b>
c0007065:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007069:	31 d2                	xor    edx,edx
c000706b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000706f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007077:	8d 44 24 24          	lea    eax,[esp+0x24]
c000707b:	e8 1f c1 ff ff       	call   c000319f <dir_sdi>
c0007080:	89 c6                	mov    esi,eax
c0007082:	85 c0                	test   eax,eax
c0007084:	0f 85 e3 00 00 00    	jne    c000716d <f_setlabel+0x265>
c000708a:	ba 01 00 00 00       	mov    edx,0x1
c000708f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007093:	e8 17 c9 ff ff       	call   c00039af <dir_read>
c0007098:	85 c0                	test   eax,eax
c000709a:	75 21                	jne    c00070bd <f_setlabel+0x1b5>
c000709c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070a0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070a4:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070a7:	74 5d                	je     c0007106 <f_setlabel+0x1fe>
c00070a9:	85 db                	test   ebx,ebx
c00070ab:	74 0b                	je     c00070b8 <f_setlabel+0x1b0>
c00070ad:	b9 0b 00 00 00       	mov    ecx,0xb
c00070b2:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070b6:	eb 70                	jmp    c0007128 <f_setlabel+0x220>
c00070b8:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070bb:	eb 70                	jmp    c000712d <f_setlabel+0x225>
c00070bd:	83 f8 04             	cmp    eax,0x4
c00070c0:	75 7c                	jne    c000713e <f_setlabel+0x236>
c00070c2:	85 db                	test   ebx,ebx
c00070c4:	0f 84 a3 00 00 00    	je     c000716d <f_setlabel+0x265>
c00070ca:	ba 01 00 00 00       	mov    edx,0x1
c00070cf:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070d3:	e8 51 ca ff ff       	call   c0003b29 <dir_alloc>
c00070d8:	89 c6                	mov    esi,eax
c00070da:	85 c0                	test   eax,eax
c00070dc:	0f 85 8b 00 00 00    	jne    c000716d <f_setlabel+0x265>
c00070e2:	31 d2                	xor    edx,edx
c00070e4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e8:	b9 20 00 00 00       	mov    ecx,0x20
c00070ed:	e8 e5 ab ff ff       	call   c0001cd7 <mem_set>
c00070f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070f6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070f9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070fd:	75 18                	jne    c0007117 <f_setlabel+0x20f>
c00070ff:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007109:	b9 16 00 00 00       	mov    ecx,0x16
c000710e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007112:	83 c0 02             	add    eax,0x2
c0007115:	eb 9b                	jmp    c00070b2 <f_setlabel+0x1aa>
c0007117:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000711b:	b9 0b 00 00 00       	mov    ecx,0xb
c0007120:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007124:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007128:	e8 95 ab ff ff       	call   c0001cc2 <mem_cpy>
c000712d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007131:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007135:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007139:	e8 0e d4 ff ff       	call   c000454c <sync_fs>
c000713e:	89 c6                	mov    esi,eax
c0007140:	eb 2b                	jmp    c000716d <f_setlabel+0x265>
c0007142:	83 fb 0a             	cmp    ebx,0xa
c0007145:	0f 87 2f fe ff ff    	ja     c0006f7a <f_setlabel+0x72>
c000714b:	89 f0                	mov    eax,esi
c000714d:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007151:	43                   	inc    ebx
c0007152:	e9 85 fe ff ff       	jmp    c0006fdc <f_setlabel+0xd4>
c0007157:	83 fb 09             	cmp    ebx,0x9
c000715a:	0f 87 1a fe ff ff    	ja     c0006f7a <f_setlabel+0x72>
c0007160:	89 f0                	mov    eax,esi
c0007162:	66 c1 e8 08          	shr    ax,0x8
c0007166:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716a:	43                   	inc    ebx
c000716b:	eb de                	jmp    c000714b <f_setlabel+0x243>
c000716d:	89 f0                	mov    eax,esi
c000716f:	83 c4 74             	add    esp,0x74
c0007172:	5b                   	pop    ebx
c0007173:	5e                   	pop    esi
c0007174:	c3                   	ret    

c0007175 <f_forward>:
c0007175:	55                   	push   ebp
c0007176:	57                   	push   edi
c0007177:	56                   	push   esi
c0007178:	53                   	push   ebx
c0007179:	83 ec 2c             	sub    esp,0x2c
c000717c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007180:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007184:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000718a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000718e:	89 d8                	mov    eax,ebx
c0007190:	e8 b1 b1 ff ff       	call   c0002346 <validate>
c0007195:	89 c5                	mov    ebp,eax
c0007197:	85 c0                	test   eax,eax
c0007199:	0f 85 aa 01 00 00    	jne    c0007349 <f_forward+0x1d4>
c000719f:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071a3:	85 ed                	test   ebp,ebp
c00071a5:	0f 85 9e 01 00 00    	jne    c0007349 <f_forward+0x1d4>
c00071ab:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071af:	0f 84 8f 01 00 00    	je     c0007344 <f_forward+0x1cf>
c00071b5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071b8:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071bb:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071be:	bf 00 00 00 00       	mov    edi,0x0
c00071c3:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071c6:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ca:	89 d1                	mov    ecx,edx
c00071cc:	19 f9                	sbb    ecx,edi
c00071ce:	0f 83 cf 00 00 00    	jae    c00072a3 <f_forward+0x12e>
c00071d4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071d8:	e9 c6 00 00 00       	jmp    c00072a3 <f_forward+0x12e>
c00071dd:	50                   	push   eax
c00071de:	50                   	push   eax
c00071df:	6a 00                	push   0x0
c00071e1:	6a 00                	push   0x0
c00071e3:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071e7:	83 c4 10             	add    esp,0x10
c00071ea:	85 c0                	test   eax,eax
c00071ec:	0f 84 57 01 00 00    	je     c0007349 <f_forward+0x1d4>
c00071f2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071f5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071f9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071fc:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007200:	89 d7                	mov    edi,edx
c0007202:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007205:	89 c6                	mov    esi,eax
c0007207:	0f ac fe 09          	shrd   esi,edi,0x9
c000720b:	21 ce                	and    esi,ecx
c000720d:	89 c1                	mov    ecx,eax
c000720f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007215:	0f 84 98 00 00 00    	je     c00072b3 <f_forward+0x13e>
c000721b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000721f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007222:	89 c8                	mov    eax,ecx
c0007224:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007228:	e8 af ac ff ff       	call   c0001edc <clst2sect>
c000722d:	89 d7                	mov    edi,edx
c000722f:	09 c7                	or     edi,eax
c0007231:	0f 84 9e 00 00 00    	je     c00072d5 <f_forward+0x160>
c0007237:	31 ff                	xor    edi,edi
c0007239:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000723c:	01 c6                	add    esi,eax
c000723e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007242:	11 d7                	adc    edi,edx
c0007244:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007247:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000724a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000724e:	39 fa                	cmp    edx,edi
c0007250:	0f 85 a2 00 00 00    	jne    c00072f8 <f_forward+0x183>
c0007256:	39 f0                	cmp    eax,esi
c0007258:	0f 85 9a 00 00 00    	jne    c00072f8 <f_forward+0x183>
c000725e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007261:	ba 00 02 00 00       	mov    edx,0x200
c0007266:	25 ff 01 00 00       	and    eax,0x1ff
c000726b:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000726f:	29 c2                	sub    edx,eax
c0007271:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007274:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007277:	39 d1                	cmp    ecx,edx
c0007279:	76 02                	jbe    c000727d <f_forward+0x108>
c000727b:	89 d1                	mov    ecx,edx
c000727d:	8d 73 50             	lea    esi,[ebx+0x50]
c0007280:	52                   	push   edx
c0007281:	01 c6                	add    esi,eax
c0007283:	52                   	push   edx
c0007284:	51                   	push   ecx
c0007285:	56                   	push   esi
c0007286:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000728a:	83 c4 10             	add    esp,0x10
c000728d:	85 c0                	test   eax,eax
c000728f:	74 44                	je     c00072d5 <f_forward+0x160>
c0007291:	31 ff                	xor    edi,edi
c0007293:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007296:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007299:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000729d:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072a1:	01 07                	add    DWORD PTR [edi],eax
c00072a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072a8:	0f 85 2f ff ff ff    	jne    c00071dd <f_forward+0x68>
c00072ae:	e9 96 00 00 00       	jmp    c0007349 <f_forward+0x1d4>
c00072b3:	85 f6                	test   esi,esi
c00072b5:	0f 85 60 ff ff ff    	jne    c000721b <f_forward+0xa6>
c00072bb:	89 d7                	mov    edi,edx
c00072bd:	09 c7                	or     edi,eax
c00072bf:	75 05                	jne    c00072c6 <f_forward+0x151>
c00072c1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072c4:	eb 0a                	jmp    c00072d0 <f_forward+0x15b>
c00072c6:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072c9:	89 d8                	mov    eax,ebx
c00072cb:	e8 d9 bc ff ff       	call   c0002fa9 <get_fat>
c00072d0:	83 f8 01             	cmp    eax,0x1
c00072d3:	77 0b                	ja     c00072e0 <f_forward+0x16b>
c00072d5:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072d9:	bd 02 00 00 00       	mov    ebp,0x2
c00072de:	eb 69                	jmp    c0007349 <f_forward+0x1d4>
c00072e0:	83 f8 ff             	cmp    eax,0xffffffff
c00072e3:	75 0b                	jne    c00072f0 <f_forward+0x17b>
c00072e5:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072e9:	bd 01 00 00 00       	mov    ebp,0x1
c00072ee:	eb 59                	jmp    c0007349 <f_forward+0x1d4>
c00072f0:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072f3:	e9 23 ff ff ff       	jmp    c000721b <f_forward+0xa6>
c00072f8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072fc:	79 20                	jns    c000731e <f_forward+0x1a9>
c00072fe:	83 ec 0c             	sub    esp,0xc
c0007301:	6a 01                	push   0x1
c0007303:	52                   	push   edx
c0007304:	50                   	push   eax
c0007305:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007309:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000730d:	50                   	push   eax
c000730e:	e8 fb a8 ff ff       	call   c0001c0e <disk_write>
c0007313:	83 c4 20             	add    esp,0x20
c0007316:	85 c0                	test   eax,eax
c0007318:	75 cb                	jne    c00072e5 <f_forward+0x170>
c000731a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000731e:	83 ec 0c             	sub    esp,0xc
c0007321:	6a 01                	push   0x1
c0007323:	57                   	push   edi
c0007324:	56                   	push   esi
c0007325:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007329:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000732d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007331:	50                   	push   eax
c0007332:	e8 c1 a8 ff ff       	call   c0001bf8 <disk_read>
c0007337:	83 c4 20             	add    esp,0x20
c000733a:	85 c0                	test   eax,eax
c000733c:	0f 84 1c ff ff ff    	je     c000725e <f_forward+0xe9>
c0007342:	eb a1                	jmp    c00072e5 <f_forward+0x170>
c0007344:	bd 07 00 00 00       	mov    ebp,0x7
c0007349:	83 c4 2c             	add    esp,0x2c
c000734c:	89 e8                	mov    eax,ebp
c000734e:	5b                   	pop    ebx
c000734f:	5e                   	pop    esi
c0007350:	5f                   	pop    edi
c0007351:	5d                   	pop    ebp
c0007352:	c3                   	ret    

c0007353 <f_mkfs>:
c0007353:	55                   	push   ebp
c0007354:	57                   	push   edi
c0007355:	56                   	push   esi
c0007356:	53                   	push   ebx
c0007357:	bb 0b 00 00 00       	mov    ebx,0xb
c000735c:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007362:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007369:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007370:	e8 b0 ae ff ff       	call   c0002225 <get_ldnumber>
c0007375:	85 c0                	test   eax,eax
c0007377:	0f 88 ec 10 00 00    	js     c0008469 <f_mkfs+0x1116>
c000737d:	8b 14 85 00 f0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1000]
c0007384:	85 d2                	test   edx,edx
c0007386:	74 03                	je     c000738b <f_mkfs+0x38>
c0007388:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000738b:	85 f6                	test   esi,esi
c000738d:	75 05                	jne    c0007394 <f_mkfs+0x41>
c000738f:	be 40 9e 02 c0       	mov    esi,0xc0029e40
c0007394:	83 ec 0c             	sub    esp,0xc
c0007397:	0f b6 c0             	movzx  eax,al
c000739a:	bb 03 00 00 00       	mov    ebx,0x3
c000739f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073a7:	e8 49 a8 ff ff       	call   c0001bf5 <disk_initialize>
c00073ac:	83 c4 10             	add    esp,0x10
c00073af:	a8 01                	test   al,0x1
c00073b1:	0f 85 b2 10 00 00    	jne    c0008469 <f_mkfs+0x1116>
c00073b7:	bb 0a 00 00 00       	mov    ebx,0xa
c00073bc:	a8 04                	test   al,0x4
c00073be:	0f 85 a5 10 00 00    	jne    c0008469 <f_mkfs+0x1116>
c00073c4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073c7:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073cb:	85 c0                	test   eax,eax
c00073cd:	75 20                	jne    c00073ef <f_mkfs+0x9c>
c00073cf:	51                   	push   ecx
c00073d0:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073d4:	50                   	push   eax
c00073d5:	6a 03                	push   0x3
c00073d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073db:	e8 44 a8 ff ff       	call   c0001c24 <disk_ioctl>
c00073e0:	83 c4 10             	add    esp,0x10
c00073e3:	85 c0                	test   eax,eax
c00073e5:	74 08                	je     c00073ef <f_mkfs+0x9c>
c00073e7:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ef:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073f3:	8d 42 ff             	lea    eax,[edx-0x1]
c00073f6:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073fb:	77 04                	ja     c0007401 <f_mkfs+0xae>
c00073fd:	85 c2                	test   edx,eax
c00073ff:	74 08                	je     c0007409 <f_mkfs+0xb6>
c0007401:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007409:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000740c:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007410:	48                   	dec    eax
c0007411:	3c 01                	cmp    al,0x1
c0007413:	76 05                	jbe    c000741a <f_mkfs+0xc7>
c0007415:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c000741a:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000741d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007421:	48                   	dec    eax
c0007422:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007427:	77 07                	ja     c0007430 <f_mkfs+0xdd>
c0007429:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000742e:	74 08                	je     c0007438 <f_mkfs+0xe5>
c0007430:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007438:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000743b:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007441:	77 07                	ja     c000744a <f_mkfs+0xf7>
c0007443:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007446:	85 d8                	test   eax,ebx
c0007448:	74 02                	je     c000744c <f_mkfs+0xf9>
c000744a:	31 db                	xor    ebx,ebx
c000744c:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007457:	77 0a                	ja     c0007463 <f_mkfs+0x110>
c0007459:	bb 11 00 00 00       	mov    ebx,0x11
c000745e:	e9 06 10 00 00       	jmp    c0008469 <f_mkfs+0x1116>
c0007463:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000746a:	8b 36                	mov    esi,DWORD PTR [esi]
c000746c:	85 ed                	test   ebp,ebp
c000746e:	75 1e                	jne    c000748e <f_mkfs+0x13b>
c0007470:	83 ec 0c             	sub    esp,0xc
c0007473:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000747a:	25 00 fe ff ff       	and    eax,0xfffffe00
c000747f:	50                   	push   eax
c0007480:	e8 f1 0f 00 00       	call   c0008476 <ff_memalloc>
c0007485:	83 c4 10             	add    esp,0x10
c0007488:	89 c5                	mov    ebp,eax
c000748a:	85 c0                	test   eax,eax
c000748c:	74 cb                	je     c0007459 <f_mkfs+0x106>
c000748e:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007496:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000749e:	52                   	push   edx
c000749f:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074a3:	50                   	push   eax
c00074a4:	6a 01                	push   0x1
c00074a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074aa:	e8 75 a7 ff ff       	call   c0001c24 <disk_ioctl>
c00074af:	83 c4 10             	add    esp,0x10
c00074b2:	85 c0                	test   eax,eax
c00074b4:	0f 85 4a 0f 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c00074ba:	89 f1                	mov    ecx,esi
c00074bc:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074c4:	83 e1 0f             	and    ecx,0xf
c00074c7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074cf:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074d3:	83 e6 08             	and    esi,0x8
c00074d6:	75 56                	jne    c000752e <f_mkfs+0x1db>
c00074d8:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074dc:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074e0:	83 ff 00             	cmp    edi,0x0
c00074e3:	76 20                	jbe    c0007505 <f_mkfs+0x1b2>
c00074e5:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ea:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074f2:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074f8:	83 d7 ff             	adc    edi,0xffffffff
c00074fb:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074ff:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007503:	eb 21                	jmp    c0007526 <f_mkfs+0x1d3>
c0007505:	ba 3f 00 00 00       	mov    edx,0x3f
c000750a:	39 f2                	cmp    edx,esi
c000750c:	19 f8                	sbb    eax,edi
c000750e:	73 1e                	jae    c000752e <f_mkfs+0x1db>
c0007510:	83 c6 c1             	add    esi,0xffffffc1
c0007513:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000751b:	83 d7 ff             	adc    edi,0xffffffff
c000751e:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007522:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007526:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000752e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007532:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007536:	89 04 24             	mov    DWORD PTR [esp],eax
c0007539:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000753d:	31 c0                	xor    eax,eax
c000753f:	ba 7f 00 00 00       	mov    edx,0x7f
c0007544:	89 c7                	mov    edi,eax
c0007546:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007549:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000754d:	0f 83 c5 0a 00 00    	jae    c0008018 <f_mkfs+0xcc5>
c0007553:	89 df                	mov    edi,ebx
c0007555:	c1 ef 09             	shr    edi,0x9
c0007558:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000755c:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007563:	c1 ef 09             	shr    edi,0x9
c0007566:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000756b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000756f:	74 29                	je     c000759a <f_mkfs+0x247>
c0007571:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007577:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000757c:	0f 97 c2             	seta   dl
c000757f:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007582:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007586:	0f 92 c0             	setb   al
c0007589:	08 c2                	or     dl,al
c000758b:	75 5b                	jne    c00075e8 <f_mkfs+0x295>
c000758d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007591:	83 e0 07             	and    eax,0x7
c0007594:	3c 04                	cmp    al,0x4
c0007596:	74 50                	je     c00075e8 <f_mkfs+0x295>
c0007598:	eb 1b                	jmp    c00075b5 <f_mkfs+0x262>
c000759a:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000759f:	0f 87 73 0a 00 00    	ja     c0008018 <f_mkfs+0xcc5>
c00075a5:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075ab:	76 08                	jbe    c00075b5 <f_mkfs+0x262>
c00075ad:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075b5:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075b9:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075bd:	83 e0 01             	and    eax,0x1
c00075c0:	80 e1 02             	and    cl,0x2
c00075c3:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075c7:	74 0d                	je     c00075d6 <f_mkfs+0x283>
c00075c9:	84 c0                	test   al,al
c00075cb:	0f 84 53 09 00 00    	je     c0007f24 <f_mkfs+0xbd1>
c00075d1:	e9 12 08 00 00       	jmp    c0007de8 <f_mkfs+0xa95>
c00075d6:	bb 13 00 00 00       	mov    ebx,0x13
c00075db:	84 c0                	test   al,al
c00075dd:	0f 85 05 08 00 00    	jne    c0007de8 <f_mkfs+0xa95>
c00075e3:	e9 39 0e 00 00       	jmp    c0008421 <f_mkfs+0x10ce>
c00075e8:	31 c0                	xor    eax,eax
c00075ea:	ba ff 0f 00 00       	mov    edx,0xfff
c00075ef:	89 c7                	mov    edi,eax
c00075f1:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075f4:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075f8:	0f 83 1a 0a 00 00    	jae    c0008018 <f_mkfs+0xcc5>
c00075fe:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007604:	77 39                	ja     c000763f <f_mkfs+0x2ec>
c0007606:	ba ff ff 07 00       	mov    edx,0x7ffff
c000760b:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007613:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007616:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000761a:	73 08                	jae    c0007624 <f_mkfs+0x2d1>
c000761c:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007624:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007629:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000762c:	b8 00 00 00 00       	mov    eax,0x0
c0007631:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007635:	73 08                	jae    c000763f <f_mkfs+0x2ec>
c0007637:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000763f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007643:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007647:	83 c0 20             	add    eax,0x20
c000764a:	83 d2 00             	adc    edx,0x0
c000764d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007651:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007659:	31 d2                	xor    edx,edx
c000765b:	31 ff                	xor    edi,edi
c000765d:	52                   	push   edx
c000765e:	89 fb                	mov    ebx,edi
c0007660:	50                   	push   eax
c0007661:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007665:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007669:	e8 06 fd 01 00       	call   c0027374 <__udivdi3>
c000766e:	83 c4 10             	add    esp,0x10
c0007671:	c1 e0 02             	shl    eax,0x2
c0007674:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007678:	05 07 02 00 00       	add    eax,0x207
c000767d:	89 f1                	mov    ecx,esi
c000767f:	c1 e8 09             	shr    eax,0x9
c0007682:	83 c1 ff             	add    ecx,0xffffffff
c0007685:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007689:	83 d3 ff             	adc    ebx,0xffffffff
c000768c:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007690:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007694:	31 d2                	xor    edx,edx
c0007696:	01 c8                	add    eax,ecx
c0007698:	11 da                	adc    edx,ebx
c000769a:	89 c1                	mov    ecx,eax
c000769c:	f7 de                	neg    esi
c000769e:	89 d0                	mov    eax,edx
c00076a0:	83 d7 00             	adc    edi,0x0
c00076a3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076a7:	f7 df                	neg    edi
c00076a9:	21 f1                	and    ecx,esi
c00076ab:	21 f8                	and    eax,edi
c00076ad:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076b1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076b5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076b9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076bd:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076c1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076c4:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076c8:	0f ac d0 01          	shrd   eax,edx,0x1
c00076cc:	89 df                	mov    edi,ebx
c00076ce:	d1 ea                	shr    edx,1
c00076d0:	39 c1                	cmp    ecx,eax
c00076d2:	19 d7                	sbb    edi,edx
c00076d4:	0f 83 3e 09 00 00    	jae    c0008018 <f_mkfs+0xcc5>
c00076da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076de:	31 d2                	xor    edx,edx
c00076e0:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076e8:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076ec:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076ef:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076f3:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076f7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076fb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076ff:	83 f8 0f             	cmp    eax,0xf
c0007702:	0f 86 10 09 00 00    	jbe    c0008018 <f_mkfs+0xcc5>
c0007708:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007710:	0f 87 02 09 00 00    	ja     c0008018 <f_mkfs+0xcc5>
c0007716:	31 d2                	xor    edx,edx
c0007718:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000771c:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007724:	83 c0 07             	add    eax,0x7
c0007727:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000772f:	c1 e8 03             	shr    eax,0x3
c0007732:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007739:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000773d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007741:	c1 e0 09             	shl    eax,0x9
c0007744:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007748:	48                   	dec    eax
c0007749:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000774d:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007751:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007755:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007759:	31 d2                	xor    edx,edx
c000775b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000775f:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007766:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000776a:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000776f:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007773:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007777:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000777b:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000777f:	31 ff                	xor    edi,edi
c0007781:	31 f6                	xor    esi,esi
c0007783:	31 db                	xor    ebx,ebx
c0007785:	85 ff                	test   edi,edi
c0007787:	74 05                	je     c000778e <f_mkfs+0x43b>
c0007789:	4f                   	dec    edi
c000778a:	74 44                	je     c00077d0 <f_mkfs+0x47d>
c000778c:	eb 4f                	jmp    c00077dd <f_mkfs+0x48a>
c000778e:	83 ec 0c             	sub    esp,0xc
c0007791:	0f b7 c3             	movzx  eax,bx
c0007794:	50                   	push   eax
c0007795:	e8 05 0e 00 00       	call   c000859f <ff_wtoupper>
c000779a:	83 c4 10             	add    esp,0x10
c000779d:	89 c1                	mov    ecx,eax
c000779f:	8d 53 01             	lea    edx,[ebx+0x1]
c00077a2:	66 39 c3             	cmp    bx,ax
c00077a5:	75 3e                	jne    c00077e5 <f_mkfs+0x492>
c00077a7:	be 01 00 00 00       	mov    esi,0x1
c00077ac:	89 df                	mov    edi,ebx
c00077ae:	66 01 f7             	add    di,si
c00077b1:	75 07                	jne    c00077ba <f_mkfs+0x467>
c00077b3:	83 fe 7f             	cmp    esi,0x7f
c00077b6:	77 31                	ja     c00077e9 <f_mkfs+0x496>
c00077b8:	eb 16                	jmp    c00077d0 <f_mkfs+0x47d>
c00077ba:	83 ec 0c             	sub    esp,0xc
c00077bd:	0f b7 ff             	movzx  edi,di
c00077c0:	57                   	push   edi
c00077c1:	e8 d9 0d 00 00       	call   c000859f <ff_wtoupper>
c00077c6:	83 c4 10             	add    esp,0x10
c00077c9:	39 c7                	cmp    edi,eax
c00077cb:	75 e6                	jne    c00077b3 <f_mkfs+0x460>
c00077cd:	46                   	inc    esi
c00077ce:	eb dc                	jmp    c00077ac <f_mkfs+0x459>
c00077d0:	31 c0                	xor    eax,eax
c00077d2:	89 d9                	mov    ecx,ebx
c00077d4:	4e                   	dec    esi
c00077d5:	0f 95 c0             	setne  al
c00077d8:	43                   	inc    ebx
c00077d9:	89 c7                	mov    edi,eax
c00077db:	eb 14                	jmp    c00077f1 <f_mkfs+0x49e>
c00077dd:	89 f1                	mov    ecx,esi
c00077df:	01 f3                	add    ebx,esi
c00077e1:	31 ff                	xor    edi,edi
c00077e3:	eb 0c                	jmp    c00077f1 <f_mkfs+0x49e>
c00077e5:	89 d3                	mov    ebx,edx
c00077e7:	eb 08                	jmp    c00077f1 <f_mkfs+0x49e>
c00077e9:	bf 02 00 00 00       	mov    edi,0x2
c00077ee:	83 c9 ff             	or     ecx,0xffffffff
c00077f1:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f8:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077fc:	0f b6 c1             	movzx  eax,cl
c00077ff:	e8 3a a9 ff ff       	call   c000213e <xsum32>
c0007804:	66 c1 e9 08          	shr    cx,0x8
c0007808:	89 c2                	mov    edx,eax
c000780a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780d:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007811:	0f b7 c1             	movzx  eax,cx
c0007814:	e8 25 a9 ff ff       	call   c000213e <xsum32>
c0007819:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000781e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007822:	66 85 db             	test   bx,bx
c0007825:	74 1f                	je     c0007846 <f_mkfs+0x4f3>
c0007827:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782a:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007831:	83 c0 02             	add    eax,0x2
c0007834:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000783a:	39 c2                	cmp    edx,eax
c000783c:	74 08                	je     c0007846 <f_mkfs+0x4f3>
c000783e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007841:	e9 3f ff ff ff       	jmp    c0007785 <f_mkfs+0x432>
c0007846:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007849:	83 ec 0c             	sub    esp,0xc
c000784c:	05 01 02 00 00       	add    eax,0x201
c0007851:	c1 e8 09             	shr    eax,0x9
c0007854:	50                   	push   eax
c0007855:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007859:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000785d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007861:	55                   	push   ebp
c0007862:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007866:	e8 a3 a3 ff ff       	call   c0001c0e <disk_write>
c000786b:	83 c4 20             	add    esp,0x20
c000786e:	85 c0                	test   eax,eax
c0007870:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007873:	0f 85 8b 0b 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c0007879:	89 d0                	mov    eax,edx
c000787b:	31 d2                	xor    edx,edx
c000787d:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007881:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007885:	66 85 db             	test   bx,bx
c0007888:	74 04                	je     c000788e <f_mkfs+0x53b>
c000788a:	31 c0                	xor    eax,eax
c000788c:	eb b0                	jmp    c000783e <f_mkfs+0x4eb>
c000788e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007892:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007896:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000789a:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078a0:	31 d2                	xor    edx,edx
c00078a2:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078ad:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078b1:	c1 eb 09             	shr    ebx,0x9
c00078b4:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078bf:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078c7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078cb:	8d 70 01             	lea    esi,[eax+0x1]
c00078ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078d2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078d6:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078dd:	31 d2                	xor    edx,edx
c00078df:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00078e7:	89 c1                	mov    ecx,eax
c00078e9:	89 e8                	mov    eax,ebp
c00078eb:	e8 e7 a3 ff ff       	call   c0001cd7 <mem_set>
c00078f0:	31 c0                	xor    eax,eax
c00078f2:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f5:	76 10                	jbe    c0007907 <f_mkfs+0x5b4>
c00078f7:	83 fe 07             	cmp    esi,0x7
c00078fa:	76 0b                	jbe    c0007907 <f_mkfs+0x5b4>
c00078fc:	40                   	inc    eax
c00078fd:	83 ee 08             	sub    esi,0x8
c0007900:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007905:	eb eb                	jmp    c00078f2 <f_mkfs+0x59f>
c0007907:	b2 01                	mov    dl,0x1
c0007909:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000790d:	85 f6                	test   esi,esi
c000790f:	74 0c                	je     c000791d <f_mkfs+0x5ca>
c0007911:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007914:	76 07                	jbe    c000791d <f_mkfs+0x5ca>
c0007916:	08 11                	or     BYTE PTR [ecx],dl
c0007918:	4e                   	dec    esi
c0007919:	d1 e2                	shl    edx,1
c000791b:	eb f0                	jmp    c000790d <f_mkfs+0x5ba>
c000791d:	89 df                	mov    edi,ebx
c000791f:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007923:	76 04                	jbe    c0007929 <f_mkfs+0x5d6>
c0007925:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007929:	83 ec 0c             	sub    esp,0xc
c000792c:	57                   	push   edi
c000792d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007931:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007935:	55                   	push   ebp
c0007936:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000793a:	e8 cf a2 ff ff       	call   c0001c0e <disk_write>
c000793f:	83 c4 20             	add    esp,0x20
c0007942:	85 c0                	test   eax,eax
c0007944:	0f 85 ba 0a 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c000794a:	31 d2                	xor    edx,edx
c000794c:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007950:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007954:	29 fb                	sub    ebx,edi
c0007956:	0f 85 7a ff ff ff    	jne    c00078d6 <f_mkfs+0x583>
c000795c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007960:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007968:	31 f6                	xor    esi,esi
c000796a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000796e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007971:	31 d2                	xor    edx,edx
c0007973:	89 e8                	mov    eax,ebp
c0007975:	e8 5d a3 ff ff       	call   c0001cd7 <mem_set>
c000797a:	31 c9                	xor    ecx,ecx
c000797c:	85 db                	test   ebx,ebx
c000797e:	75 40                	jne    c00079c0 <f_mkfs+0x66d>
c0007980:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007985:	89 e8                	mov    eax,ebp
c0007987:	bb 02 00 00 00       	mov    ebx,0x2
c000798c:	e8 28 a3 ff ff       	call   c0001cb9 <st_dword>
c0007991:	8d 45 04             	lea    eax,[ebp+0x4]
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	e8 1d a3 ff ff       	call   c0001cb9 <st_dword>
c000799c:	b9 08 00 00 00       	mov    ecx,0x8
c00079a1:	eb 1d                	jmp    c00079c0 <f_mkfs+0x66d>
c00079a3:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079a6:	76 3b                	jbe    c00079e3 <f_mkfs+0x690>
c00079a8:	43                   	inc    ebx
c00079a9:	83 fe 01             	cmp    esi,0x1
c00079ac:	89 da                	mov    edx,ebx
c00079ae:	77 03                	ja     c00079b3 <f_mkfs+0x660>
c00079b0:	83 ca ff             	or     edx,0xffffffff
c00079b3:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079b7:	4e                   	dec    esi
c00079b8:	e8 fc a2 ff ff       	call   c0001cb9 <st_dword>
c00079bd:	83 c1 04             	add    ecx,0x4
c00079c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079c4:	85 f6                	test   esi,esi
c00079c6:	75 db                	jne    c00079a3 <f_mkfs+0x650>
c00079c8:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079cd:	77 14                	ja     c00079e3 <f_mkfs+0x690>
c00079cf:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079d3:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079da:	85 f6                	test   esi,esi
c00079dc:	74 05                	je     c00079e3 <f_mkfs+0x690>
c00079de:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079e1:	77 dd                	ja     c00079c0 <f_mkfs+0x66d>
c00079e3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079e7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079eb:	39 cf                	cmp    edi,ecx
c00079ed:	76 02                	jbe    c00079f1 <f_mkfs+0x69e>
c00079ef:	89 cf                	mov    edi,ecx
c00079f1:	83 ec 0c             	sub    esp,0xc
c00079f4:	57                   	push   edi
c00079f5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079f9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079fd:	55                   	push   ebp
c00079fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a02:	e8 07 a2 ff ff       	call   c0001c0e <disk_write>
c0007a07:	83 c4 20             	add    esp,0x20
c0007a0a:	85 c0                	test   eax,eax
c0007a0c:	0f 85 f2 09 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c0007a12:	31 d2                	xor    edx,edx
c0007a14:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a18:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a1c:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a20:	0f 85 48 ff ff ff    	jne    c000796e <f_mkfs+0x61b>
c0007a26:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a29:	31 d2                	xor    edx,edx
c0007a2b:	89 e8                	mov    eax,ebp
c0007a2d:	31 ff                	xor    edi,edi
c0007a2f:	e8 a3 a2 ff ff       	call   c0001cd7 <mem_set>
c0007a34:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a37:	ba 02 00 00 00       	mov    edx,0x2
c0007a3c:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a40:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a44:	e8 70 a2 ff ff       	call   c0001cb9 <st_dword>
c0007a49:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a4c:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a50:	e8 64 a2 ff ff       	call   c0001cb9 <st_dword>
c0007a55:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a58:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a5c:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a60:	e8 54 a2 ff ff       	call   c0001cb9 <st_dword>
c0007a65:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a68:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a70:	83 c2 02             	add    edx,0x2
c0007a73:	e8 41 a2 ff ff       	call   c0001cb9 <st_dword>
c0007a78:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a7b:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a7f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a83:	e8 31 a2 ff ff       	call   c0001cb9 <st_dword>
c0007a88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a8c:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a91:	89 c6                	mov    esi,eax
c0007a93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a97:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a9e:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007aa2:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007aa5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007aa9:	39 cb                	cmp    ebx,ecx
c0007aab:	76 02                	jbe    c0007aaf <f_mkfs+0x75c>
c0007aad:	89 cb                	mov    ebx,ecx
c0007aaf:	83 ec 0c             	sub    esp,0xc
c0007ab2:	53                   	push   ebx
c0007ab3:	57                   	push   edi
c0007ab4:	56                   	push   esi
c0007ab5:	55                   	push   ebp
c0007ab6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007aba:	e8 4f a1 ff ff       	call   c0001c0e <disk_write>
c0007abf:	83 c4 20             	add    esp,0x20
c0007ac2:	85 c0                	test   eax,eax
c0007ac4:	0f 85 3a 09 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c0007aca:	31 d2                	xor    edx,edx
c0007acc:	b9 00 02 00 00       	mov    ecx,0x200
c0007ad1:	89 e8                	mov    eax,ebp
c0007ad3:	e8 ff a1 ff ff       	call   c0001cd7 <mem_set>
c0007ad8:	31 d2                	xor    edx,edx
c0007ada:	01 de                	add    esi,ebx
c0007adc:	11 d7                	adc    edi,edx
c0007ade:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ae1:	75 bf                	jne    c0007aa2 <f_mkfs+0x74f>
c0007ae3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007ae7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007aeb:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007af3:	b9 00 02 00 00       	mov    ecx,0x200
c0007af8:	31 d2                	xor    edx,edx
c0007afa:	89 e8                	mov    eax,ebp
c0007afc:	e8 d6 a1 ff ff       	call   c0001cd7 <mem_set>
c0007b01:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b06:	ba 20 9f 02 c0       	mov    edx,0xc0029f20
c0007b0b:	89 e8                	mov    eax,ebp
c0007b0d:	e8 b0 a1 ff ff       	call   c0001cc2 <mem_cpy>
c0007b12:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b19:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b1d:	e8 9a a1 ff ff       	call   c0001cbc <st_qword>
c0007b22:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b26:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b29:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b2d:	e8 8a a1 ff ff       	call   c0001cbc <st_qword>
c0007b32:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b35:	ba 20 00 00 00       	mov    edx,0x20
c0007b3a:	e8 7a a1 ff ff       	call   c0001cb9 <st_dword>
c0007b3f:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b43:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b47:	e8 6d a1 ff ff       	call   c0001cb9 <st_dword>
c0007b4c:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b50:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b54:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b58:	e8 5c a1 ff ff       	call   c0001cb9 <st_dword>
c0007b5d:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b60:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b64:	e8 50 a1 ff ff       	call   c0001cb9 <st_dword>
c0007b69:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b6d:	8d 50 02             	lea    edx,[eax+0x2]
c0007b70:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b73:	e8 41 a1 ff ff       	call   c0001cb9 <st_dword>
c0007b78:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b7b:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b80:	e8 34 a1 ff ff       	call   c0001cb9 <st_dword>
c0007b85:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b88:	ba 00 01 00 00       	mov    edx,0x100
c0007b8d:	e8 23 a1 ff ff       	call   c0001cb5 <st_word>
c0007b92:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b96:	b8 0a 00 00 00       	mov    eax,0xa
c0007b9b:	48                   	dec    eax
c0007b9c:	74 05                	je     c0007ba3 <f_mkfs+0x850>
c0007b9e:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007ba1:	eb f8                	jmp    c0007b9b <f_mkfs+0x848>
c0007ba3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ba7:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007baf:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bb3:	74 05                	je     c0007bba <f_mkfs+0x867>
c0007bb5:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bb8:	eb f5                	jmp    c0007baf <f_mkfs+0x85c>
c0007bba:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bbd:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007bc2:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bc8:	31 db                	xor    ebx,ebx
c0007bca:	e8 e6 a0 ff ff       	call   c0001cb5 <st_word>
c0007bcf:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bd5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bda:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bdd:	e8 d3 a0 ff ff       	call   c0001cb5 <st_word>
c0007be2:	31 c9                	xor    ecx,ecx
c0007be4:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007be7:	83 f8 01             	cmp    eax,0x1
c0007bea:	76 13                	jbe    c0007bff <f_mkfs+0x8ac>
c0007bec:	83 f9 70             	cmp    ecx,0x70
c0007bef:	74 0e                	je     c0007bff <f_mkfs+0x8ac>
c0007bf1:	89 da                	mov    edx,ebx
c0007bf3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bf8:	e8 41 a5 ff ff       	call   c000213e <xsum32>
c0007bfd:	89 c3                	mov    ebx,eax
c0007bff:	41                   	inc    ecx
c0007c00:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c06:	75 dc                	jne    c0007be4 <f_mkfs+0x891>
c0007c08:	89 f0                	mov    eax,esi
c0007c0a:	89 fa                	mov    edx,edi
c0007c0c:	83 c0 01             	add    eax,0x1
c0007c0f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c13:	83 d2 00             	adc    edx,0x0
c0007c16:	83 ec 0c             	sub    esp,0xc
c0007c19:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c1d:	6a 01                	push   0x1
c0007c1f:	57                   	push   edi
c0007c20:	56                   	push   esi
c0007c21:	55                   	push   ebp
c0007c22:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c26:	e8 e3 9f ff ff       	call   c0001c0e <disk_write>
c0007c2b:	83 c4 20             	add    esp,0x20
c0007c2e:	85 c0                	test   eax,eax
c0007c30:	0f 85 ce 07 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c0007c36:	31 d2                	xor    edx,edx
c0007c38:	b9 00 02 00 00       	mov    ecx,0x200
c0007c3d:	89 e8                	mov    eax,ebp
c0007c3f:	e8 93 a0 ff ff       	call   c0001cd7 <mem_set>
c0007c44:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c49:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c4c:	e8 64 a0 ff ff       	call   c0001cb5 <st_word>
c0007c51:	89 f0                	mov    eax,esi
c0007c53:	89 fa                	mov    edx,edi
c0007c55:	83 c0 09             	add    eax,0x9
c0007c58:	83 d2 00             	adc    edx,0x0
c0007c5b:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c5e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c62:	31 c9                	xor    ecx,ecx
c0007c64:	41                   	inc    ecx
c0007c65:	89 da                	mov    edx,ebx
c0007c67:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c6c:	e8 cd a4 ff ff       	call   c000213e <xsum32>
c0007c71:	89 c3                	mov    ebx,eax
c0007c73:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c79:	75 e9                	jne    c0007c64 <f_mkfs+0x911>
c0007c7b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c7f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c83:	83 c0 01             	add    eax,0x1
c0007c86:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c8a:	83 d2 00             	adc    edx,0x0
c0007c8d:	83 ec 0c             	sub    esp,0xc
c0007c90:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c94:	6a 01                	push   0x1
c0007c96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c9a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c9e:	55                   	push   ebp
c0007c9f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ca3:	e8 66 9f ff ff       	call   c0001c0e <disk_write>
c0007ca8:	83 c4 20             	add    esp,0x20
c0007cab:	85 c0                	test   eax,eax
c0007cad:	0f 85 51 07 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c0007cb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cb7:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cbb:	75 09                	jne    c0007cc6 <f_mkfs+0x973>
c0007cbd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cc0:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007cc4:	74 12                	je     c0007cd8 <f_mkfs+0x985>
c0007cc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cca:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cce:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cd6:	eb 8a                	jmp    c0007c62 <f_mkfs+0x90f>
c0007cd8:	31 d2                	xor    edx,edx
c0007cda:	b9 00 02 00 00       	mov    ecx,0x200
c0007cdf:	89 e8                	mov    eax,ebp
c0007ce1:	e8 f1 9f ff ff       	call   c0001cd7 <mem_set>
c0007ce6:	83 c6 0b             	add    esi,0xb
c0007ce9:	83 d7 00             	adc    edi,0x0
c0007cec:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cf0:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cf4:	31 c9                	xor    ecx,ecx
c0007cf6:	41                   	inc    ecx
c0007cf7:	89 da                	mov    edx,ebx
c0007cf9:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007cfe:	e8 3b a4 ff ff       	call   c000213e <xsum32>
c0007d03:	89 c3                	mov    ebx,eax
c0007d05:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d0b:	75 e9                	jne    c0007cf6 <f_mkfs+0x9a3>
c0007d0d:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d10:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d14:	83 c6 01             	add    esi,0x1
c0007d17:	83 d7 00             	adc    edi,0x0
c0007d1a:	83 ec 0c             	sub    esp,0xc
c0007d1d:	6a 01                	push   0x1
c0007d1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d27:	55                   	push   ebp
c0007d28:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d2c:	e8 dd 9e ff ff       	call   c0001c0e <disk_write>
c0007d31:	83 c4 20             	add    esp,0x20
c0007d34:	85 c0                	test   eax,eax
c0007d36:	0f 85 c8 06 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c0007d3c:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d40:	75 06                	jne    c0007d48 <f_mkfs+0x9f5>
c0007d42:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d46:	74 09                	je     c0007d51 <f_mkfs+0x9fe>
c0007d48:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d4b:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d4f:	eb a3                	jmp    c0007cf4 <f_mkfs+0x9a1>
c0007d51:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d55:	89 da                	mov    edx,ebx
c0007d57:	01 e8                	add    eax,ebp
c0007d59:	e8 5b 9f ff ff       	call   c0001cb9 <st_dword>
c0007d5e:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d63:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d6b:	75 e4                	jne    c0007d51 <f_mkfs+0x9fe>
c0007d6d:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d70:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d74:	83 c6 02             	add    esi,0x2
c0007d77:	83 d7 00             	adc    edi,0x0
c0007d7a:	83 ec 0c             	sub    esp,0xc
c0007d7d:	6a 01                	push   0x1
c0007d7f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d87:	55                   	push   ebp
c0007d88:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d8c:	e8 7d 9e ff ff       	call   c0001c0e <disk_write>
c0007d91:	83 c4 20             	add    esp,0x20
c0007d94:	85 c0                	test   eax,eax
c0007d96:	0f 85 68 06 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c0007d9c:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007da1:	74 0d                	je     c0007db0 <f_mkfs+0xa5d>
c0007da3:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dab:	e9 43 fd ff ff       	jmp    c0007af3 <f_mkfs+0x7a0>
c0007db0:	b1 07                	mov    cl,0x7
c0007db2:	e9 e3 05 00 00       	jmp    c000839a <f_mkfs+0x1047>
c0007db7:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dbc:	0f 85 4f 02 00 00    	jne    c0008011 <f_mkfs+0xcbe>
c0007dc2:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dc7:	0f 86 22 02 00 00    	jbe    c0007fef <f_mkfs+0xc9c>
c0007dcd:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007dd2:	0f 85 81 06 00 00    	jne    c0008459 <f_mkfs+0x1106>
c0007dd8:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007ddb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007ddf:	83 f8 40             	cmp    eax,0x40
c0007de2:	0f 87 51 06 00 00    	ja     c0008439 <f_mkfs+0x10e6>
c0007de8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dec:	85 ff                	test   edi,edi
c0007dee:	75 1c                	jne    c0007e0c <f_mkfs+0xab9>
c0007df0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007df3:	ba 20 9e 02 c0       	mov    edx,0xc0029e20
c0007df8:	c1 e9 0c             	shr    ecx,0xc
c0007dfb:	bf 01 00 00 00       	mov    edi,0x1
c0007e00:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e03:	66 85 c0             	test   ax,ax
c0007e06:	0f 85 95 01 00 00    	jne    c0007fa1 <f_mkfs+0xc4e>
c0007e0c:	31 d2                	xor    edx,edx
c0007e0e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e11:	f7 f7                	div    edi
c0007e13:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e18:	0f 86 95 01 00 00    	jbe    c0007fb3 <f_mkfs+0xc60>
c0007e1e:	83 c0 02             	add    eax,0x2
c0007e21:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e26:	01 c0                	add    eax,eax
c0007e28:	05 ff 01 00 00       	add    eax,0x1ff
c0007e2d:	be 01 00 00 00       	mov    esi,0x1
c0007e32:	c1 e8 09             	shr    eax,0x9
c0007e35:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e39:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e3d:	c1 e0 05             	shl    eax,0x5
c0007e40:	c1 e8 09             	shr    eax,0x9
c0007e43:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e47:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e4c:	31 d2                	xor    edx,edx
c0007e4e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e52:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e56:	89 f0                	mov    eax,esi
c0007e58:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e5c:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e60:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e64:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e68:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e6c:	31 d2                	xor    edx,edx
c0007e6e:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e73:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e77:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e7b:	31 db                	xor    ebx,ebx
c0007e7d:	01 c8                	add    eax,ecx
c0007e7f:	11 da                	adc    edx,ebx
c0007e81:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e85:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e89:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e8d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e91:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e95:	f7 da                	neg    edx
c0007e97:	21 d1                	and    ecx,edx
c0007e99:	29 d9                	sub    ecx,ebx
c0007e9b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ea0:	0f 85 20 01 00 00    	jne    c0007fc6 <f_mkfs+0xc73>
c0007ea6:	31 db                	xor    ebx,ebx
c0007ea8:	01 ce                	add    esi,ecx
c0007eaa:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007eae:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007eb2:	31 d2                	xor    edx,edx
c0007eb4:	89 f8                	mov    eax,edi
c0007eb6:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007eba:	c1 e0 04             	shl    eax,0x4
c0007ebd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ec1:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ec5:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ec9:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007ecd:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007ed0:	19 d3                	sbb    ebx,edx
c0007ed2:	0f 82 40 01 00 00    	jb     c0008018 <f_mkfs+0xcc5>
c0007ed8:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007edb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007edf:	89 c8                	mov    eax,ecx
c0007ee1:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007ee6:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007eea:	29 f0                	sub    eax,esi
c0007eec:	29 d0                	sub    eax,edx
c0007eee:	31 d2                	xor    edx,edx
c0007ef0:	f7 f7                	div    edi
c0007ef2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ef7:	89 c3                	mov    ebx,eax
c0007ef9:	0f 85 b8 fe ff ff    	jne    c0007db7 <f_mkfs+0xa64>
c0007eff:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f04:	0f 87 1d 01 00 00    	ja     c0008027 <f_mkfs+0xcd4>
c0007f0a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f0f:	0f 85 03 01 00 00    	jne    c0008018 <f_mkfs+0xcc5>
c0007f15:	83 ff 01             	cmp    edi,0x1
c0007f18:	0f 86 fa 00 00 00    	jbe    c0008018 <f_mkfs+0xcc5>
c0007f1e:	d1 ef                	shr    edi,1
c0007f20:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f24:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f28:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f2b:	85 db                	test   ebx,ebx
c0007f2d:	75 2d                	jne    c0007f5c <f_mkfs+0xc09>
c0007f2f:	89 cb                	mov    ebx,ecx
c0007f31:	ba 30 9e 02 c0       	mov    edx,0xc0029e30
c0007f36:	c1 eb 11             	shr    ebx,0x11
c0007f39:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f41:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f44:	66 85 c0             	test   ax,ax
c0007f47:	74 11                	je     c0007f5a <f_mkfs+0xc07>
c0007f49:	83 c2 02             	add    edx,0x2
c0007f4c:	39 d8                	cmp    eax,ebx
c0007f4e:	77 0a                	ja     c0007f5a <f_mkfs+0xc07>
c0007f50:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f54:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f58:	eb e7                	jmp    c0007f41 <f_mkfs+0xbee>
c0007f5a:	31 db                	xor    ebx,ebx
c0007f5c:	31 d2                	xor    edx,edx
c0007f5e:	89 c8                	mov    eax,ecx
c0007f60:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f64:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f6b:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f70:	c1 ea 09             	shr    edx,0x9
c0007f73:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f78:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f7c:	0f 87 96 00 00 00    	ja     c0008018 <f_mkfs+0xcc5>
c0007f82:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f86:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f8e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f92:	be 20 00 00 00       	mov    esi,0x20
c0007f97:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f9c:	e9 a6 fe ff ff       	jmp    c0007e47 <f_mkfs+0xaf4>
c0007fa1:	83 c2 02             	add    edx,0x2
c0007fa4:	39 c8                	cmp    eax,ecx
c0007fa6:	0f 87 60 fe ff ff    	ja     c0007e0c <f_mkfs+0xab9>
c0007fac:	01 ff                	add    edi,edi
c0007fae:	e9 4d fe ff ff       	jmp    c0007e00 <f_mkfs+0xaad>
c0007fb3:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fb6:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fbb:	40                   	inc    eax
c0007fbc:	d1 e8                	shr    eax,1
c0007fbe:	83 c0 03             	add    eax,0x3
c0007fc1:	e9 62 fe ff ff       	jmp    c0007e28 <f_mkfs+0xad5>
c0007fc6:	31 d2                	xor    edx,edx
c0007fc8:	89 c8                	mov    eax,ecx
c0007fca:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fce:	85 d2                	test   edx,edx
c0007fd0:	74 0c                	je     c0007fde <f_mkfs+0xc8b>
c0007fd2:	49                   	dec    ecx
c0007fd3:	46                   	inc    esi
c0007fd4:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fd9:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fde:	89 c8                	mov    eax,ecx
c0007fe0:	31 d2                	xor    edx,edx
c0007fe2:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fe6:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fea:	e9 c3 fe ff ff       	jmp    c0007eb2 <f_mkfs+0xb5f>
c0007fef:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ff4:	77 31                	ja     c0008027 <f_mkfs+0xcd4>
c0007ff6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ffb:	75 1b                	jne    c0008018 <f_mkfs+0xcc5>
c0007ffd:	8d 04 3f             	lea    eax,[edi+edi*1]
c0008000:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008004:	3d 80 00 00 00       	cmp    eax,0x80
c0008009:	0f 86 d9 fd ff ff    	jbe    c0007de8 <f_mkfs+0xa95>
c000800f:	eb 07                	jmp    c0008018 <f_mkfs+0xcc5>
c0008011:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008016:	76 0a                	jbe    c0008022 <f_mkfs+0xccf>
c0008018:	bb 0e 00 00 00       	mov    ebx,0xe
c000801d:	e9 ff 03 00 00       	jmp    c0008421 <f_mkfs+0x10ce>
c0008022:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008027:	31 d2                	xor    edx,edx
c0008029:	b9 00 02 00 00       	mov    ecx,0x200
c000802e:	89 e8                	mov    eax,ebp
c0008030:	e8 a2 9c ff ff       	call   c0001cd7 <mem_set>
c0008035:	b9 0b 00 00 00       	mov    ecx,0xb
c000803a:	ba 42 9f 02 c0       	mov    edx,0xc0029f42
c000803f:	89 e8                	mov    eax,ebp
c0008041:	e8 7c 9c ff ff       	call   c0001cc2 <mem_cpy>
c0008046:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008049:	ba 00 02 00 00       	mov    edx,0x200
c000804e:	e8 62 9c ff ff       	call   c0001cb5 <st_word>
c0008053:	89 f8                	mov    eax,edi
c0008055:	0f b7 d6             	movzx  edx,si
c0008058:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000805b:	8d 45 0e             	lea    eax,[ebp+0xe]
c000805e:	e8 52 9c ff ff       	call   c0001cb5 <st_word>
c0008063:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008067:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000806c:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000806f:	75 08                	jne    c0008079 <f_mkfs+0xd26>
c0008071:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008079:	8d 45 11             	lea    eax,[ebp+0x11]
c000807c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008080:	e8 30 9c ff ff       	call   c0001cb5 <st_word>
c0008085:	b8 ff ff 00 00       	mov    eax,0xffff
c000808a:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000808e:	39 d0                	cmp    eax,edx
c0008090:	b8 00 00 00 00       	mov    eax,0x0
c0008095:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0008099:	72 0a                	jb     c00080a5 <f_mkfs+0xd52>
c000809b:	8d 45 13             	lea    eax,[ebp+0x13]
c000809e:	e8 12 9c ff ff       	call   c0001cb5 <st_word>
c00080a3:	eb 08                	jmp    c00080ad <f_mkfs+0xd5a>
c00080a5:	8d 45 20             	lea    eax,[ebp+0x20]
c00080a8:	e8 0c 9c ff ff       	call   c0001cb9 <st_dword>
c00080ad:	8d 45 18             	lea    eax,[ebp+0x18]
c00080b0:	ba 3f 00 00 00       	mov    edx,0x3f
c00080b5:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080b9:	e8 f7 9b ff ff       	call   c0001cb5 <st_word>
c00080be:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080c1:	ba ff 00 00 00       	mov    edx,0xff
c00080c6:	e8 ea 9b ff ff       	call   c0001cb5 <st_word>
c00080cb:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080d2:	e8 e2 9b ff ff       	call   c0001cb9 <st_dword>
c00080d7:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080dc:	75 57                	jne    c0008135 <f_mkfs+0xde2>
c00080de:	8d 45 43             	lea    eax,[ebp+0x43]
c00080e1:	ba 00 00 21 50       	mov    edx,0x50210000
c00080e6:	e8 ce 9b ff ff       	call   c0001cb9 <st_dword>
c00080eb:	8d 45 24             	lea    eax,[ebp+0x24]
c00080ee:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080f2:	e8 c2 9b ff ff       	call   c0001cb9 <st_dword>
c00080f7:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080fa:	ba 02 00 00 00       	mov    edx,0x2
c00080ff:	e8 b5 9b ff ff       	call   c0001cb9 <st_dword>
c0008104:	8d 45 30             	lea    eax,[ebp+0x30]
c0008107:	ba 01 00 00 00       	mov    edx,0x1
c000810c:	e8 a4 9b ff ff       	call   c0001cb5 <st_word>
c0008111:	8d 45 32             	lea    eax,[ebp+0x32]
c0008114:	ba 06 00 00 00       	mov    edx,0x6
c0008119:	e8 97 9b ff ff       	call   c0001cb5 <st_word>
c000811e:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008122:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008126:	8d 45 47             	lea    eax,[ebp+0x47]
c0008129:	b9 13 00 00 00       	mov    ecx,0x13
c000812e:	ba 4e 9f 02 c0       	mov    edx,0xc0029f4e
c0008133:	eb 2f                	jmp    c0008164 <f_mkfs+0xe11>
c0008135:	8d 45 27             	lea    eax,[ebp+0x27]
c0008138:	ba 00 00 21 50       	mov    edx,0x50210000
c000813d:	e8 77 9b ff ff       	call   c0001cb9 <st_dword>
c0008142:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008147:	8d 45 16             	lea    eax,[ebp+0x16]
c000814a:	e8 66 9b ff ff       	call   c0001cb5 <st_word>
c000814f:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008153:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008157:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000815a:	b9 13 00 00 00       	mov    ecx,0x13
c000815f:	ba 62 9f 02 c0       	mov    edx,0xc0029f62
c0008164:	e8 59 9b ff ff       	call   c0001cc2 <mem_cpy>
c0008169:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000816f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008174:	89 f0                	mov    eax,esi
c0008176:	e8 3a 9b ff ff       	call   c0001cb5 <st_word>
c000817b:	83 ec 0c             	sub    esp,0xc
c000817e:	6a 01                	push   0x1
c0008180:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008184:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008188:	55                   	push   ebp
c0008189:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000818d:	e8 7c 9a ff ff       	call   c0001c0e <disk_write>
c0008192:	83 c4 20             	add    esp,0x20
c0008195:	85 c0                	test   eax,eax
c0008197:	0f 85 67 02 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c000819d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081a2:	0f 85 b7 00 00 00    	jne    c000825f <f_mkfs+0xf0c>
c00081a8:	83 ec 0c             	sub    esp,0xc
c00081ab:	6a 01                	push   0x1
c00081ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081b1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081b5:	83 c0 06             	add    eax,0x6
c00081b8:	83 d2 00             	adc    edx,0x0
c00081bb:	52                   	push   edx
c00081bc:	50                   	push   eax
c00081bd:	55                   	push   ebp
c00081be:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081c2:	e8 47 9a ff ff       	call   c0001c0e <disk_write>
c00081c7:	83 c4 20             	add    esp,0x20
c00081ca:	b9 00 02 00 00       	mov    ecx,0x200
c00081cf:	31 d2                	xor    edx,edx
c00081d1:	89 e8                	mov    eax,ebp
c00081d3:	e8 ff 9a ff ff       	call   c0001cd7 <mem_set>
c00081d8:	ba 52 52 61 41       	mov    edx,0x41615252
c00081dd:	89 e8                	mov    eax,ebp
c00081df:	e8 d5 9a ff ff       	call   c0001cb9 <st_dword>
c00081e4:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ea:	ba 72 72 41 61       	mov    edx,0x61417272
c00081ef:	e8 c5 9a ff ff       	call   c0001cb9 <st_dword>
c00081f4:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081f7:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081fd:	e8 b7 9a ff ff       	call   c0001cb9 <st_dword>
c0008202:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008208:	ba 02 00 00 00       	mov    edx,0x2
c000820d:	e8 a7 9a ff ff       	call   c0001cb9 <st_dword>
c0008212:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008217:	89 f0                	mov    eax,esi
c0008219:	e8 97 9a ff ff       	call   c0001cb5 <st_word>
c000821e:	83 ec 0c             	sub    esp,0xc
c0008221:	6a 01                	push   0x1
c0008223:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008227:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822b:	83 c0 07             	add    eax,0x7
c000822e:	83 d2 00             	adc    edx,0x0
c0008231:	52                   	push   edx
c0008232:	50                   	push   eax
c0008233:	55                   	push   ebp
c0008234:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008238:	e8 d1 99 ff ff       	call   c0001c0e <disk_write>
c000823d:	83 c4 14             	add    esp,0x14
c0008240:	6a 01                	push   0x1
c0008242:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008246:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000824a:	83 c0 01             	add    eax,0x1
c000824d:	83 d2 00             	adc    edx,0x0
c0008250:	52                   	push   edx
c0008251:	50                   	push   eax
c0008252:	55                   	push   ebp
c0008253:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008257:	e8 b2 99 ff ff       	call   c0001c0e <disk_write>
c000825c:	83 c4 20             	add    esp,0x20
c000825f:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008266:	31 d2                	xor    edx,edx
c0008268:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000826e:	31 db                	xor    ebx,ebx
c0008270:	89 e8                	mov    eax,ebp
c0008272:	e8 60 9a ff ff       	call   c0001cd7 <mem_set>
c0008277:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000827c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008283:	0f 94 c3             	sete   bl
c0008286:	4b                   	dec    ebx
c0008287:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000828d:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008293:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008298:	75 21                	jne    c00082bb <f_mkfs+0xf68>
c000829a:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000829f:	89 e8                	mov    eax,ebp
c00082a1:	e8 13 9a ff ff       	call   c0001cb9 <st_dword>
c00082a6:	8d 45 04             	lea    eax,[ebp+0x4]
c00082a9:	83 ca ff             	or     edx,0xffffffff
c00082ac:	e8 08 9a ff ff       	call   c0001cb9 <st_dword>
c00082b1:	8d 45 08             	lea    eax,[ebp+0x8]
c00082b4:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082b9:	eb 04                	jmp    c00082bf <f_mkfs+0xf6c>
c00082bb:	89 da                	mov    edx,ebx
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 f5 99 ff ff       	call   c0001cb9 <st_dword>
c00082c4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082cc:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082d4:	39 ce                	cmp    esi,ecx
c00082d6:	76 02                	jbe    c00082da <f_mkfs+0xf87>
c00082d8:	89 ce                	mov    esi,ecx
c00082da:	83 ec 0c             	sub    esp,0xc
c00082dd:	56                   	push   esi
c00082de:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082e2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082e6:	55                   	push   ebp
c00082e7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082eb:	e8 1e 99 ff ff       	call   c0001c0e <disk_write>
c00082f0:	83 c4 20             	add    esp,0x20
c00082f3:	85 c0                	test   eax,eax
c00082f5:	0f 85 09 01 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c00082fb:	31 d2                	xor    edx,edx
c00082fd:	b9 00 02 00 00       	mov    ecx,0x200
c0008302:	89 e8                	mov    eax,ebp
c0008304:	e8 ce 99 ff ff       	call   c0001cd7 <mem_set>
c0008309:	31 d2                	xor    edx,edx
c000830b:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000830f:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008313:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008317:	75 b3                	jne    c00082cc <f_mkfs+0xf79>
c0008319:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000831c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008323:	40                   	inc    eax
c0008324:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008328:	0f 87 65 ff ff ff    	ja     c0008293 <f_mkfs+0xf40>
c000832e:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008333:	74 04                	je     c0008339 <f_mkfs+0xfe6>
c0008335:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008339:	89 fb                	mov    ebx,edi
c000833b:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000833f:	76 04                	jbe    c0008345 <f_mkfs+0xff2>
c0008341:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008345:	83 ec 0c             	sub    esp,0xc
c0008348:	53                   	push   ebx
c0008349:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000834d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008351:	55                   	push   ebp
c0008352:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008356:	e8 b3 98 ff ff       	call   c0001c0e <disk_write>
c000835b:	83 c4 20             	add    esp,0x20
c000835e:	85 c0                	test   eax,eax
c0008360:	0f 85 9e 00 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c0008366:	31 d2                	xor    edx,edx
c0008368:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000836c:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008370:	29 df                	sub    edi,ebx
c0008372:	75 c5                	jne    c0008339 <f_mkfs+0xfe6>
c0008374:	b1 0c                	mov    cl,0xc
c0008376:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000837b:	74 1d                	je     c000839a <f_mkfs+0x1047>
c000837d:	b8 ff ff 00 00       	mov    eax,0xffff
c0008382:	b1 06                	mov    cl,0x6
c0008384:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008388:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000838c:	72 0c                	jb     c000839a <f_mkfs+0x1047>
c000838e:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008393:	0f 94 c1             	sete   cl
c0008396:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000839a:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000839f:	75 4c                	jne    c00083ed <f_mkfs+0x109a>
c00083a1:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083a5:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083a9:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083b0:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083b7:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083c2:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083cd:	0f b6 c9             	movzx  ecx,cl
c00083d0:	83 ec 0c             	sub    esp,0xc
c00083d3:	55                   	push   ebp
c00083d4:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083df:	e8 2f c2 ff ff       	call   c0004613 <create_partition>
c00083e4:	83 c4 10             	add    esp,0x10
c00083e7:	89 c3                	mov    ebx,eax
c00083e9:	85 c0                	test   eax,eax
c00083eb:	75 34                	jne    c0008421 <f_mkfs+0x10ce>
c00083ed:	31 db                	xor    ebx,ebx
c00083ef:	50                   	push   eax
c00083f0:	6a 00                	push   0x0
c00083f2:	6a 00                	push   0x0
c00083f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083f8:	e8 27 98 ff ff       	call   c0001c24 <disk_ioctl>
c00083fd:	83 c4 10             	add    esp,0x10
c0008400:	85 c0                	test   eax,eax
c0008402:	74 1d                	je     c0008421 <f_mkfs+0x10ce>
c0008404:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840c:	75 0c                	jne    c000841a <f_mkfs+0x10c7>
c000840e:	83 ec 0c             	sub    esp,0xc
c0008411:	55                   	push   ebp
c0008412:	e8 75 00 00 00       	call   c000848c <ff_memfree>
c0008417:	83 c4 10             	add    esp,0x10
c000841a:	bb 01 00 00 00       	mov    ebx,0x1
c000841f:	eb 48                	jmp    c0008469 <f_mkfs+0x1116>
c0008421:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008429:	75 3e                	jne    c0008469 <f_mkfs+0x1116>
c000842b:	83 ec 0c             	sub    esp,0xc
c000842e:	55                   	push   ebp
c000842f:	e8 58 00 00 00       	call   c000848c <ff_memfree>
c0008434:	83 c4 10             	add    esp,0x10
c0008437:	eb 30                	jmp    c0008469 <f_mkfs+0x1116>
c0008439:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000843e:	0f 85 eb fa ff ff    	jne    c0007f2f <f_mkfs+0xbdc>
c0008444:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008448:	81 ff 80 00 00 00    	cmp    edi,0x80
c000844e:	0f 86 b8 f9 ff ff    	jbe    c0007e0c <f_mkfs+0xab9>
c0008454:	e9 bf fb ff ff       	jmp    c0008018 <f_mkfs+0xcc5>
c0008459:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845e:	0f 85 c0 fa ff ff    	jne    c0007f24 <f_mkfs+0xbd1>
c0008464:	e9 af fb ff ff       	jmp    c0008018 <f_mkfs+0xcc5>
c0008469:	81 c4 9c 00 00 00    	add    esp,0x9c
c000846f:	89 d8                	mov    eax,ebx
c0008471:	5b                   	pop    ebx
c0008472:	5e                   	pop    esi
c0008473:	5f                   	pop    edi
c0008474:	5d                   	pop    ebp
c0008475:	c3                   	ret    

c0008476 <ff_memalloc>:
c0008476:	83 ec 0c             	sub    esp,0xc
c0008479:	83 ec 0c             	sub    esp,0xc
c000847c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008480:	e8 55 74 00 00       	call   c000f8da <malloc>
c0008485:	83 c4 10             	add    esp,0x10
c0008488:	83 c4 0c             	add    esp,0xc
c000848b:	c3                   	ret    

c000848c <ff_memfree>:
c000848c:	83 ec 0c             	sub    esp,0xc
c000848f:	83 ec 0c             	sub    esp,0xc
c0008492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008496:	e8 4f 74 00 00       	call   c000f8ea <free>
c000849b:	83 c4 10             	add    esp,0x10
c000849e:	90                   	nop
c000849f:	83 c4 0c             	add    esp,0xc
c00084a2:	c3                   	ret    

c00084a3 <ff_uni2oem>:
c00084a3:	83 ec 14             	sub    esp,0x14
c00084a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084aa:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084ae:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084b5:	c7 44 24 0c 80 a2 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a280
c00084bd:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084c2:	77 0b                	ja     c00084cf <ff_uni2oem+0x2c>
c00084c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084c8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084cd:	eb 5b                	jmp    c000852a <ff_uni2oem+0x87>
c00084cf:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084d7:	77 51                	ja     c000852a <ff_uni2oem+0x87>
c00084d9:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084df:	75 49                	jne    c000852a <ff_uni2oem+0x87>
c00084e1:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084e8:	eb 0b                	jmp    c00084f5 <ff_uni2oem+0x52>
c00084ea:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084ef:	40                   	inc    eax
c00084f0:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084f5:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084fb:	77 1b                	ja     c0008518 <ff_uni2oem+0x75>
c00084fd:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008502:	01 c0                	add    eax,eax
c0008504:	89 c2                	mov    edx,eax
c0008506:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000850a:	01 d0                	add    eax,edx
c000850c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000850f:	0f b7 c0             	movzx  eax,ax
c0008512:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008516:	75 d2                	jne    c00084ea <ff_uni2oem+0x47>
c0008518:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000851d:	83 e8 80             	sub    eax,0xffffff80
c0008520:	25 ff 00 00 00       	and    eax,0xff
c0008525:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000852a:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000852f:	83 c4 14             	add    esp,0x14
c0008532:	c3                   	ret    

c0008533 <ff_oem2uni>:
c0008533:	83 ec 18             	sub    esp,0x18
c0008536:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000853a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000853e:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008543:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008547:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000854e:	c7 44 24 10 80 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a280
c0008556:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000855c:	77 0b                	ja     c0008569 <ff_oem2uni+0x36>
c000855e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008562:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008567:	eb 2d                	jmp    c0008596 <ff_oem2uni+0x63>
c0008569:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000856f:	75 25                	jne    c0008596 <ff_oem2uni+0x63>
c0008571:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008578:	77 1c                	ja     c0008596 <ff_oem2uni+0x63>
c000857a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000857f:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008584:	01 c0                	add    eax,eax
c0008586:	89 c2                	mov    edx,eax
c0008588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000858c:	01 d0                	add    eax,edx
c000858e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008591:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008596:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000859b:	83 c4 18             	add    esp,0x18
c000859e:	c3                   	ret    

c000859f <ff_wtoupper>:
c000859f:	83 ec 10             	sub    esp,0x10
c00085a2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085aa:	0f 87 3e 01 00 00    	ja     c00086ee <ff_wtoupper+0x14f>
c00085b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085b4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085b9:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085c0:	77 07                	ja     c00085c9 <ff_wtoupper+0x2a>
c00085c2:	b8 80 a0 02 c0       	mov    eax,0xc002a080
c00085c7:	eb 05                	jmp    c00085ce <ff_wtoupper+0x2f>
c00085c9:	b8 c0 9f 02 c0       	mov    eax,0xc0029fc0
c00085ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085d6:	8d 50 02             	lea    edx,[eax+0x2]
c00085d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085dd:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085e0:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085e5:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085eb:	0f 84 f4 00 00 00    	je     c00086e5 <ff_wtoupper+0x146>
c00085f1:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085f6:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085fb:	0f 82 e4 00 00 00    	jb     c00086e5 <ff_wtoupper+0x146>
c0008601:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008605:	8d 50 02             	lea    edx,[eax+0x2]
c0008608:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000860c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000860f:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008614:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008619:	66 c1 e8 08          	shr    ax,0x8
c000861d:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008622:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008629:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000862e:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008633:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008638:	01 ca                	add    edx,ecx
c000863a:	39 d0                	cmp    eax,edx
c000863c:	0f 8d 86 00 00 00    	jge    c00086c8 <ff_wtoupper+0x129>
c0008642:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008647:	83 f8 08             	cmp    eax,0x8
c000864a:	0f 87 94 00 00 00    	ja     c00086e4 <ff_wtoupper+0x145>
c0008650:	8b 04 85 80 9f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6080]
c0008657:	ff e0                	jmp    eax
c0008659:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000865e:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008663:	29 c2                	sub    edx,eax
c0008665:	89 d0                	mov    eax,edx
c0008667:	01 c0                	add    eax,eax
c0008669:	89 c2                	mov    edx,eax
c000866b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000866f:	01 d0                	add    eax,edx
c0008671:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008674:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008679:	eb 4b                	jmp    c00086c6 <ff_wtoupper+0x127>
c000867b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008680:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008684:	83 e0 01             	and    eax,0x1
c0008687:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000868c:	eb 38                	jmp    c00086c6 <ff_wtoupper+0x127>
c000868e:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008694:	eb 30                	jmp    c00086c6 <ff_wtoupper+0x127>
c0008696:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000869c:	eb 28                	jmp    c00086c6 <ff_wtoupper+0x127>
c000869e:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086a4:	eb 20                	jmp    c00086c6 <ff_wtoupper+0x127>
c00086a6:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ac:	eb 18                	jmp    c00086c6 <ff_wtoupper+0x127>
c00086ae:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086b4:	eb 10                	jmp    c00086c6 <ff_wtoupper+0x127>
c00086b6:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086bc:	eb 08                	jmp    c00086c6 <ff_wtoupper+0x127>
c00086be:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086c5:	90                   	nop
c00086c6:	eb 1c                	jmp    c00086e4 <ff_wtoupper+0x145>
c00086c8:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ce:	0f 85 fe fe ff ff    	jne    c00085d2 <ff_wtoupper+0x33>
c00086d4:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086d9:	01 c0                	add    eax,eax
c00086db:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086df:	e9 ee fe ff ff       	jmp    c00085d2 <ff_wtoupper+0x33>
c00086e4:	90                   	nop
c00086e5:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086f2:	83 c4 10             	add    esp,0x10
c00086f5:	c3                   	ret    

c00086f6 <psrc_set_converter>:
c00086f6:	56                   	push   esi
c00086f7:	89 d6                	mov    esi,edx
c00086f9:	53                   	push   ebx
c00086fa:	89 c3                	mov    ebx,eax
c00086fc:	83 ec 0c             	sub    esp,0xc
c00086ff:	52                   	push   edx
c0008700:	50                   	push   eax
c0008701:	e8 6f 55 00 00       	call   c000dc75 <sinc_set_converter>
c0008706:	83 c4 10             	add    esp,0x10
c0008709:	85 c0                	test   eax,eax
c000870b:	74 25                	je     c0008732 <psrc_set_converter+0x3c>
c000870d:	50                   	push   eax
c000870e:	50                   	push   eax
c000870f:	56                   	push   esi
c0008710:	53                   	push   ebx
c0008711:	e8 17 5d 00 00       	call   c000e42d <zoh_set_converter>
c0008716:	83 c4 10             	add    esp,0x10
c0008719:	85 c0                	test   eax,eax
c000871b:	74 15                	je     c0008732 <psrc_set_converter+0x3c>
c000871d:	51                   	push   ecx
c000871e:	51                   	push   ecx
c000871f:	56                   	push   esi
c0008720:	53                   	push   ebx
c0008721:	e8 0f 11 00 00       	call   c0009835 <linear_set_converter>
c0008726:	83 c4 10             	add    esp,0x10
c0008729:	ba 0a 00 00 00       	mov    edx,0xa
c000872e:	85 c0                	test   eax,eax
c0008730:	75 02                	jne    c0008734 <psrc_set_converter+0x3e>
c0008732:	31 d2                	xor    edx,edx
c0008734:	89 d0                	mov    eax,edx
c0008736:	5a                   	pop    edx
c0008737:	5b                   	pop    ebx
c0008738:	5e                   	pop    esi
c0008739:	c3                   	ret    

c000873a <src_delete>:
c000873a:	53                   	push   ebx
c000873b:	83 ec 08             	sub    esp,0x8
c000873e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008742:	85 db                	test   ebx,ebx
c0008744:	74 29                	je     c000876f <src_delete+0x35>
c0008746:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008749:	85 c0                	test   eax,eax
c000874b:	74 0c                	je     c0008759 <src_delete+0x1f>
c000874d:	83 ec 0c             	sub    esp,0xc
c0008750:	50                   	push   eax
c0008751:	e8 94 71 00 00       	call   c000f8ea <free>
c0008756:	83 c4 10             	add    esp,0x10
c0008759:	50                   	push   eax
c000875a:	6a 3c                	push   0x3c
c000875c:	6a 00                	push   0x0
c000875e:	53                   	push   ebx
c000875f:	e8 08 80 ff ff       	call   c000076c <memset>
c0008764:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008767:	e8 7e 71 00 00       	call   c000f8ea <free>
c000876c:	83 c4 10             	add    esp,0x10
c000876f:	31 c0                	xor    eax,eax
c0008771:	83 c4 08             	add    esp,0x8
c0008774:	5b                   	pop    ebx
c0008775:	c3                   	ret    

c0008776 <src_process>:
c0008776:	55                   	push   ebp
c0008777:	57                   	push   edi
c0008778:	56                   	push   esi
c0008779:	53                   	push   ebx
c000877a:	83 ec 1c             	sub    esp,0x1c
c000877d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008781:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008785:	85 ed                	test   ebp,ebp
c0008787:	0f 84 6f 01 00 00    	je     c00088fc <src_process+0x186>
c000878d:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008791:	0f 84 6c 01 00 00    	je     c0008903 <src_process+0x18d>
c0008797:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000879b:	0f 84 62 01 00 00    	je     c0008903 <src_process+0x18d>
c00087a1:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087a8:	0f 85 5c 01 00 00    	jne    c000890a <src_process+0x194>
c00087ae:	85 db                	test   ebx,ebx
c00087b0:	0f 84 5b 01 00 00    	je     c0008911 <src_process+0x19b>
c00087b6:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087b8:	85 f6                	test   esi,esi
c00087ba:	0f 84 58 01 00 00    	je     c0008918 <src_process+0x1a2>
c00087c0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087c3:	85 ff                	test   edi,edi
c00087c5:	0f 84 4d 01 00 00    	je     c0008918 <src_process+0x1a2>
c00087cb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ce:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087d9:	68 00 00 70 3f       	push   0x3f700000
c00087de:	6a 00                	push   0x0
c00087e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e8:	e8 5a 06 02 00       	call   c0028e47 <__ltdf2>
c00087ed:	83 c4 10             	add    esp,0x10
c00087f0:	85 c0                	test   eax,eax
c00087f2:	0f 88 27 01 00 00    	js     c000891f <src_process+0x1a9>
c00087f8:	68 00 00 70 40       	push   0x40700000
c00087fd:	6a 00                	push   0x0
c00087ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008803:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008807:	e8 1d 06 02 00       	call   c0028e29 <__gtdf2>
c000880c:	83 c4 10             	add    esp,0x10
c000880f:	85 c0                	test   eax,eax
c0008811:	0f 8f 08 01 00 00    	jg     c000891f <src_process+0x1a9>
c0008817:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000881b:	79 07                	jns    c0008824 <src_process+0xae>
c000881d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008824:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008827:	85 c0                	test   eax,eax
c0008829:	79 50                	jns    c000887b <src_process+0x105>
c000882b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008832:	39 fe                	cmp    esi,edi
c0008834:	72 37                	jb     c000886d <src_process+0xf7>
c0008836:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000883d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008844:	68 00 00 70 3f       	push   0x3f700000
c0008849:	6a 00                	push   0x0
c000884b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000884e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008851:	e8 f1 05 02 00       	call   c0028e47 <__ltdf2>
c0008856:	83 c4 10             	add    esp,0x10
c0008859:	85 c0                	test   eax,eax
c000885b:	79 37                	jns    c0008894 <src_process+0x11e>
c000885d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008861:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008865:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008868:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000886b:	eb 27                	jmp    c0008894 <src_process+0x11e>
c000886d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008870:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008874:	8d 04 86             	lea    eax,[esi+eax*4]
c0008877:	39 c7                	cmp    edi,eax
c0008879:	eb 0d                	jmp    c0008888 <src_process+0x112>
c000887b:	39 fe                	cmp    esi,edi
c000887d:	72 ee                	jb     c000886d <src_process+0xf7>
c000887f:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008883:	8d 04 87             	lea    eax,[edi+eax*4]
c0008886:	39 c6                	cmp    esi,eax
c0008888:	73 ac                	jae    c0008836 <src_process+0xc0>
c000888a:	b8 10 00 00 00       	mov    eax,0x10
c000888f:	e9 90 00 00 00       	jmp    c0008924 <src_process+0x1ae>
c0008894:	83 ec 10             	sub    esp,0x10
c0008897:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000889a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000889d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088a0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088a3:	e8 a4 fc 01 00       	call   c002854c <__subdf3>
c00088a8:	83 c4 18             	add    esp,0x18
c00088ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088b3:	52                   	push   edx
c00088b4:	50                   	push   eax
c00088b5:	e8 26 07 02 00       	call   c0028fe0 <fabs>
c00088ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088be:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088c2:	83 c4 10             	add    esp,0x10
c00088c5:	68 af 03 d2 3c       	push   0x3cd203af
c00088ca:	68 16 56 e7 9e       	push   0x9ee75616
c00088cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088d7:	e8 6b 05 02 00       	call   c0028e47 <__ltdf2>
c00088dc:	83 c4 10             	add    esp,0x10
c00088df:	85 c0                	test   eax,eax
c00088e1:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088e5:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088e9:	79 05                	jns    c00088f0 <src_process+0x17a>
c00088eb:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088ee:	eb 03                	jmp    c00088f3 <src_process+0x17d>
c00088f0:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088f3:	83 c4 1c             	add    esp,0x1c
c00088f6:	5b                   	pop    ebx
c00088f7:	5e                   	pop    esi
c00088f8:	5f                   	pop    edi
c00088f9:	5d                   	pop    ebp
c00088fa:	ff e0                	jmp    eax
c00088fc:	b8 02 00 00 00       	mov    eax,0x2
c0008901:	eb 21                	jmp    c0008924 <src_process+0x1ae>
c0008903:	b8 07 00 00 00       	mov    eax,0x7
c0008908:	eb 1a                	jmp    c0008924 <src_process+0x1ae>
c000890a:	b8 12 00 00 00       	mov    eax,0x12
c000890f:	eb 13                	jmp    c0008924 <src_process+0x1ae>
c0008911:	b8 03 00 00 00       	mov    eax,0x3
c0008916:	eb 0c                	jmp    c0008924 <src_process+0x1ae>
c0008918:	b8 04 00 00 00       	mov    eax,0x4
c000891d:	eb 05                	jmp    c0008924 <src_process+0x1ae>
c000891f:	b8 06 00 00 00       	mov    eax,0x6
c0008924:	83 c4 1c             	add    esp,0x1c
c0008927:	5b                   	pop    ebx
c0008928:	5e                   	pop    esi
c0008929:	5f                   	pop    edi
c000892a:	5d                   	pop    ebp
c000892b:	c3                   	ret    

c000892c <src_callback_read>:
c000892c:	55                   	push   ebp
c000892d:	57                   	push   edi
c000892e:	56                   	push   esi
c000892f:	53                   	push   ebx
c0008930:	83 ec 3c             	sub    esp,0x3c
c0008933:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008937:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000893b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000893f:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008943:	85 ed                	test   ebp,ebp
c0008945:	0f 8e 52 01 00 00    	jle    c0008a9d <src_callback_read+0x171>
c000894b:	85 db                	test   ebx,ebx
c000894d:	0f 84 4a 01 00 00    	je     c0008a9d <src_callback_read+0x171>
c0008953:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000895a:	74 0c                	je     c0008968 <src_callback_read+0x3c>
c000895c:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008963:	e9 35 01 00 00       	jmp    c0008a9d <src_callback_read+0x171>
c0008968:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000896c:	75 0c                	jne    c000897a <src_callback_read+0x4e>
c000896e:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008975:	e9 23 01 00 00       	jmp    c0008a9d <src_callback_read+0x171>
c000897a:	51                   	push   ecx
c000897b:	6a 24                	push   0x24
c000897d:	6a 00                	push   0x0
c000897f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008983:	50                   	push   eax
c0008984:	e8 e3 7d ff ff       	call   c000076c <memset>
c0008989:	83 c4 10             	add    esp,0x10
c000898c:	68 00 00 70 3f       	push   0x3f700000
c0008991:	6a 00                	push   0x0
c0008993:	57                   	push   edi
c0008994:	56                   	push   esi
c0008995:	e8 ad 04 02 00       	call   c0028e47 <__ltdf2>
c000899a:	83 c4 10             	add    esp,0x10
c000899d:	85 c0                	test   eax,eax
c000899f:	78 3e                	js     c00089df <src_callback_read+0xb3>
c00089a1:	68 00 00 70 40       	push   0x40700000
c00089a6:	6a 00                	push   0x0
c00089a8:	57                   	push   edi
c00089a9:	56                   	push   esi
c00089aa:	e8 7a 04 02 00       	call   c0028e29 <__gtdf2>
c00089af:	83 c4 10             	add    esp,0x10
c00089b2:	85 c0                	test   eax,eax
c00089b4:	7f 29                	jg     c00089df <src_callback_read+0xb3>
c00089b6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089ba:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089c2:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089c6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089c9:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089d1:	31 f6                	xor    esi,esi
c00089d3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089da:	e9 97 00 00 00       	jmp    c0008a76 <src_callback_read+0x14a>
c00089df:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089e6:	e9 b2 00 00 00       	jmp    c0008a9d <src_callback_read+0x171>
c00089eb:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089f3:	52                   	push   edx
c00089f4:	52                   	push   edx
c00089f5:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089f9:	50                   	push   eax
c00089fa:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089fd:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a00:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a04:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a08:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a0c:	83 c4 10             	add    esp,0x10
c0008a0f:	85 c0                	test   eax,eax
c0008a11:	75 08                	jne    c0008a1b <src_callback_read+0xef>
c0008a13:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a1b:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a22:	50                   	push   eax
c0008a23:	50                   	push   eax
c0008a24:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a28:	50                   	push   eax
c0008a29:	53                   	push   ebx
c0008a2a:	e8 47 fd ff ff       	call   c0008776 <src_process>
c0008a2f:	83 c4 10             	add    esp,0x10
c0008a32:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a39:	85 c0                	test   eax,eax
c0008a3b:	75 49                	jne    c0008a86 <src_callback_read+0x15a>
c0008a3d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a41:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a44:	89 f9                	mov    ecx,edi
c0008a46:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a4a:	0f af ca             	imul   ecx,edx
c0008a4d:	c1 e1 02             	shl    ecx,0x2
c0008a50:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a54:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a58:	0f af d1             	imul   edx,ecx
c0008a5b:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a5f:	c1 e2 02             	shl    edx,0x2
c0008a62:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a66:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a69:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a6e:	74 12                	je     c0008a82 <src_callback_read+0x156>
c0008a70:	39 d5                	cmp    ebp,edx
c0008a72:	7e 14                	jle    c0008a88 <src_callback_read+0x15c>
c0008a74:	89 d6                	mov    esi,edx
c0008a76:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a7b:	75 9e                	jne    c0008a1b <src_callback_read+0xef>
c0008a7d:	e9 69 ff ff ff       	jmp    c00089eb <src_callback_read+0xbf>
c0008a82:	85 c9                	test   ecx,ecx
c0008a84:	75 ea                	jne    c0008a70 <src_callback_read+0x144>
c0008a86:	89 f2                	mov    edx,esi
c0008a88:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a8c:	85 c0                	test   eax,eax
c0008a8e:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a91:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a95:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a98:	74 05                	je     c0008a9f <src_callback_read+0x173>
c0008a9a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a9d:	31 d2                	xor    edx,edx
c0008a9f:	83 c4 3c             	add    esp,0x3c
c0008aa2:	89 d0                	mov    eax,edx
c0008aa4:	5b                   	pop    ebx
c0008aa5:	5e                   	pop    esi
c0008aa6:	5f                   	pop    edi
c0008aa7:	5d                   	pop    ebp
c0008aa8:	c3                   	ret    

c0008aa9 <src_set_ratio>:
c0008aa9:	57                   	push   edi
c0008aaa:	ba 02 00 00 00       	mov    edx,0x2
c0008aaf:	56                   	push   esi
c0008ab0:	53                   	push   ebx
c0008ab1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ab5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ab9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008abd:	85 db                	test   ebx,ebx
c0008abf:	74 4c                	je     c0008b0d <src_set_ratio+0x64>
c0008ac1:	ba 07 00 00 00       	mov    edx,0x7
c0008ac6:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aca:	74 41                	je     c0008b0d <src_set_ratio+0x64>
c0008acc:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ad0:	74 3b                	je     c0008b0d <src_set_ratio+0x64>
c0008ad2:	68 00 00 70 3f       	push   0x3f700000
c0008ad7:	6a 00                	push   0x0
c0008ad9:	57                   	push   edi
c0008ada:	56                   	push   esi
c0008adb:	e8 67 03 02 00       	call   c0028e47 <__ltdf2>
c0008ae0:	83 c4 10             	add    esp,0x10
c0008ae3:	ba 06 00 00 00       	mov    edx,0x6
c0008ae8:	85 c0                	test   eax,eax
c0008aea:	78 21                	js     c0008b0d <src_set_ratio+0x64>
c0008aec:	68 00 00 70 40       	push   0x40700000
c0008af1:	6a 00                	push   0x0
c0008af3:	57                   	push   edi
c0008af4:	56                   	push   esi
c0008af5:	e8 2f 03 02 00       	call   c0028e29 <__gtdf2>
c0008afa:	83 c4 10             	add    esp,0x10
c0008afd:	ba 06 00 00 00       	mov    edx,0x6
c0008b02:	85 c0                	test   eax,eax
c0008b04:	7f 07                	jg     c0008b0d <src_set_ratio+0x64>
c0008b06:	89 33                	mov    DWORD PTR [ebx],esi
c0008b08:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b0b:	31 d2                	xor    edx,edx
c0008b0d:	5b                   	pop    ebx
c0008b0e:	89 d0                	mov    eax,edx
c0008b10:	5e                   	pop    esi
c0008b11:	5f                   	pop    edi
c0008b12:	c3                   	ret    

c0008b13 <src_get_channels>:
c0008b13:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b17:	b8 02 00 00 00       	mov    eax,0x2
c0008b1c:	85 d2                	test   edx,edx
c0008b1e:	74 14                	je     c0008b34 <src_get_channels+0x21>
c0008b20:	b8 07 00 00 00       	mov    eax,0x7
c0008b25:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b29:	74 09                	je     c0008b34 <src_get_channels+0x21>
c0008b2b:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b2f:	74 03                	je     c0008b34 <src_get_channels+0x21>
c0008b31:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b34:	c3                   	ret    

c0008b35 <src_reset>:
c0008b35:	53                   	push   ebx
c0008b36:	b8 02 00 00 00       	mov    eax,0x2
c0008b3b:	83 ec 08             	sub    esp,0x8
c0008b3e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b42:	85 db                	test   ebx,ebx
c0008b44:	74 36                	je     c0008b7c <src_reset+0x47>
c0008b46:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b49:	85 c0                	test   eax,eax
c0008b4b:	74 09                	je     c0008b56 <src_reset+0x21>
c0008b4d:	83 ec 0c             	sub    esp,0xc
c0008b50:	53                   	push   ebx
c0008b51:	ff d0                	call   eax
c0008b53:	83 c4 10             	add    esp,0x10
c0008b56:	31 c0                	xor    eax,eax
c0008b58:	31 d2                	xor    edx,edx
c0008b5a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b5d:	89 03                	mov    DWORD PTR [ebx],eax
c0008b5f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b62:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b65:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b6c:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b73:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b7a:	31 c0                	xor    eax,eax
c0008b7c:	83 c4 08             	add    esp,0x8
c0008b7f:	5b                   	pop    ebx
c0008b80:	c3                   	ret    

c0008b81 <src_new>:
c0008b81:	57                   	push   edi
c0008b82:	56                   	push   esi
c0008b83:	53                   	push   ebx
c0008b84:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b88:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b8c:	85 f6                	test   esi,esi
c0008b8e:	74 73                	je     c0008c03 <src_new+0x82>
c0008b90:	85 ff                	test   edi,edi
c0008b92:	7f 08                	jg     c0008b9c <src_new+0x1b>
c0008b94:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b9a:	eb 1e                	jmp    c0008bba <src_new+0x39>
c0008b9c:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008ba2:	50                   	push   eax
c0008ba3:	50                   	push   eax
c0008ba4:	6a 3c                	push   0x3c
c0008ba6:	6a 01                	push   0x1
c0008ba8:	e8 5d 6d 00 00       	call   c000f90a <calloc>
c0008bad:	83 c4 10             	add    esp,0x10
c0008bb0:	89 c3                	mov    ebx,eax
c0008bb2:	85 c0                	test   eax,eax
c0008bb4:	75 10                	jne    c0008bc6 <src_new+0x45>
c0008bb6:	85 f6                	test   esi,esi
c0008bb8:	75 04                	jne    c0008bbe <src_new+0x3d>
c0008bba:	31 db                	xor    ebx,ebx
c0008bbc:	eb 4b                	jmp    c0008c09 <src_new+0x88>
c0008bbe:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008bc4:	eb 43                	jmp    c0008c09 <src_new+0x88>
c0008bc6:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bc9:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bd0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bd4:	e8 1d fb ff ff       	call   c00086f6 <psrc_set_converter>
c0008bd9:	85 c0                	test   eax,eax
c0008bdb:	74 18                	je     c0008bf5 <src_new+0x74>
c0008bdd:	85 f6                	test   esi,esi
c0008bdf:	74 06                	je     c0008be7 <src_new+0x66>
c0008be1:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008be7:	83 ec 0c             	sub    esp,0xc
c0008bea:	53                   	push   ebx
c0008beb:	31 db                	xor    ebx,ebx
c0008bed:	e8 f8 6c 00 00       	call   c000f8ea <free>
c0008bf2:	83 c4 10             	add    esp,0x10
c0008bf5:	83 ec 0c             	sub    esp,0xc
c0008bf8:	53                   	push   ebx
c0008bf9:	e8 37 ff ff ff       	call   c0008b35 <src_reset>
c0008bfe:	83 c4 10             	add    esp,0x10
c0008c01:	eb 06                	jmp    c0008c09 <src_new+0x88>
c0008c03:	85 ff                	test   edi,edi
c0008c05:	7f 9b                	jg     c0008ba2 <src_new+0x21>
c0008c07:	eb b1                	jmp    c0008bba <src_new+0x39>
c0008c09:	89 d8                	mov    eax,ebx
c0008c0b:	5b                   	pop    ebx
c0008c0c:	5e                   	pop    esi
c0008c0d:	5f                   	pop    edi
c0008c0e:	c3                   	ret    

c0008c0f <src_callback_new>:
c0008c0f:	56                   	push   esi
c0008c10:	53                   	push   ebx
c0008c11:	53                   	push   ebx
c0008c12:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c1a:	85 f6                	test   esi,esi
c0008c1c:	75 0e                	jne    c0008c2c <src_callback_new+0x1d>
c0008c1e:	31 db                	xor    ebx,ebx
c0008c20:	85 c0                	test   eax,eax
c0008c22:	74 47                	je     c0008c6b <src_callback_new+0x5c>
c0008c24:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c2a:	eb 3f                	jmp    c0008c6b <src_callback_new+0x5c>
c0008c2c:	85 c0                	test   eax,eax
c0008c2e:	74 06                	je     c0008c36 <src_callback_new+0x27>
c0008c30:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c36:	51                   	push   ecx
c0008c37:	50                   	push   eax
c0008c38:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c3c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c40:	e8 3c ff ff ff       	call   c0008b81 <src_new>
c0008c45:	83 c4 10             	add    esp,0x10
c0008c48:	89 c3                	mov    ebx,eax
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 1d                	je     c0008c6b <src_callback_new+0x5c>
c0008c4e:	83 ec 0c             	sub    esp,0xc
c0008c51:	50                   	push   eax
c0008c52:	e8 de fe ff ff       	call   c0008b35 <src_reset>
c0008c57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c5b:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c62:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c65:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c68:	83 c4 10             	add    esp,0x10
c0008c6b:	89 d8                	mov    eax,ebx
c0008c6d:	5a                   	pop    edx
c0008c6e:	5b                   	pop    ebx
c0008c6f:	5e                   	pop    esi
c0008c70:	c3                   	ret    

c0008c71 <src_get_name>:
c0008c71:	53                   	push   ebx
c0008c72:	83 ec 14             	sub    esp,0x14
c0008c75:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c79:	53                   	push   ebx
c0008c7a:	e8 d0 4f 00 00       	call   c000dc4f <sinc_get_name>
c0008c7f:	83 c4 10             	add    esp,0x10
c0008c82:	85 c0                	test   eax,eax
c0008c84:	75 1d                	jne    c0008ca3 <src_get_name+0x32>
c0008c86:	83 ec 0c             	sub    esp,0xc
c0008c89:	53                   	push   ebx
c0008c8a:	e8 80 57 00 00       	call   c000e40f <zoh_get_name>
c0008c8f:	83 c4 10             	add    esp,0x10
c0008c92:	85 c0                	test   eax,eax
c0008c94:	75 0d                	jne    c0008ca3 <src_get_name+0x32>
c0008c96:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c9a:	83 c4 08             	add    esp,0x8
c0008c9d:	5b                   	pop    ebx
c0008c9e:	e9 74 0b 00 00       	jmp    c0009817 <linear_get_name>
c0008ca3:	83 c4 08             	add    esp,0x8
c0008ca6:	5b                   	pop    ebx
c0008ca7:	c3                   	ret    

c0008ca8 <src_get_description>:
c0008ca8:	53                   	push   ebx
c0008ca9:	83 ec 14             	sub    esp,0x14
c0008cac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cb0:	53                   	push   ebx
c0008cb1:	e8 ac 4f 00 00       	call   c000dc62 <sinc_get_description>
c0008cb6:	83 c4 10             	add    esp,0x10
c0008cb9:	85 c0                	test   eax,eax
c0008cbb:	75 1d                	jne    c0008cda <src_get_description+0x32>
c0008cbd:	83 ec 0c             	sub    esp,0xc
c0008cc0:	53                   	push   ebx
c0008cc1:	e8 58 57 00 00       	call   c000e41e <zoh_get_description>
c0008cc6:	83 c4 10             	add    esp,0x10
c0008cc9:	85 c0                	test   eax,eax
c0008ccb:	75 0d                	jne    c0008cda <src_get_description+0x32>
c0008ccd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cd1:	83 c4 08             	add    esp,0x8
c0008cd4:	5b                   	pop    ebx
c0008cd5:	e9 4c 0b 00 00       	jmp    c0009826 <linear_get_description>
c0008cda:	83 c4 08             	add    esp,0x8
c0008cdd:	5b                   	pop    ebx
c0008cde:	c3                   	ret    

c0008cdf <src_get_version>:
c0008cdf:	b8 80 a3 02 c0       	mov    eax,0xc002a380
c0008ce4:	c3                   	ret    

c0008ce5 <src_is_valid_ratio>:
c0008ce5:	83 ec 1c             	sub    esp,0x1c
c0008ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cf0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cf4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cf8:	68 00 00 70 3f       	push   0x3f700000
c0008cfd:	6a 00                	push   0x0
c0008cff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d07:	e8 3b 01 02 00       	call   c0028e47 <__ltdf2>
c0008d0c:	83 c4 10             	add    esp,0x10
c0008d0f:	31 d2                	xor    edx,edx
c0008d11:	85 c0                	test   eax,eax
c0008d13:	78 1e                	js     c0008d33 <src_is_valid_ratio+0x4e>
c0008d15:	68 00 00 70 40       	push   0x40700000
c0008d1a:	6a 00                	push   0x0
c0008d1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d24:	e8 00 01 02 00       	call   c0028e29 <__gtdf2>
c0008d29:	31 d2                	xor    edx,edx
c0008d2b:	83 c4 10             	add    esp,0x10
c0008d2e:	85 c0                	test   eax,eax
c0008d30:	0f 9e c2             	setle  dl
c0008d33:	89 d0                	mov    eax,edx
c0008d35:	83 c4 1c             	add    esp,0x1c
c0008d38:	c3                   	ret    

c0008d39 <src_error>:
c0008d39:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d3d:	31 c0                	xor    eax,eax
c0008d3f:	85 d2                	test   edx,edx
c0008d41:	74 03                	je     c0008d46 <src_error+0xd>
c0008d43:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d46:	c3                   	ret    

c0008d47 <src_strerror>:
c0008d47:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d4b:	31 c0                	xor    eax,eax
c0008d4d:	83 fa 17             	cmp    edx,0x17
c0008d50:	77 07                	ja     c0008d59 <src_strerror+0x12>
c0008d52:	8b 04 95 e0 a7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5820]
c0008d59:	c3                   	ret    

c0008d5a <src_simple>:
c0008d5a:	56                   	push   esi
c0008d5b:	53                   	push   ebx
c0008d5c:	83 ec 18             	sub    esp,0x18
c0008d5f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d63:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d67:	50                   	push   eax
c0008d68:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d6c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d70:	e8 0c fe ff ff       	call   c0008b81 <src_new>
c0008d75:	83 c4 10             	add    esp,0x10
c0008d78:	85 c0                	test   eax,eax
c0008d7a:	75 06                	jne    c0008d82 <src_simple+0x28>
c0008d7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d80:	eb 25                	jmp    c0008da7 <src_simple+0x4d>
c0008d82:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d89:	89 c3                	mov    ebx,eax
c0008d8b:	50                   	push   eax
c0008d8c:	50                   	push   eax
c0008d8d:	56                   	push   esi
c0008d8e:	53                   	push   ebx
c0008d8f:	e8 e2 f9 ff ff       	call   c0008776 <src_process>
c0008d94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d97:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d9b:	e8 9a f9 ff ff       	call   c000873a <src_delete>
c0008da0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008da4:	83 c4 10             	add    esp,0x10
c0008da7:	83 c4 14             	add    esp,0x14
c0008daa:	5b                   	pop    ebx
c0008dab:	5e                   	pop    esi
c0008dac:	c3                   	ret    

c0008dad <src_short_to_float_array>:
c0008dad:	53                   	push   ebx
c0008dae:	83 ec 18             	sub    esp,0x18
c0008db1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008db5:	85 db                	test   ebx,ebx
c0008db7:	74 54                	je     c0008e0d <src_short_to_float_array+0x60>
c0008db9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008dbd:	4b                   	dec    ebx
c0008dbe:	83 ec 0c             	sub    esp,0xc
c0008dc1:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008dc5:	50                   	push   eax
c0008dc6:	e8 10 fe 01 00       	call   c0028bdb <__floatsidf>
c0008dcb:	83 c4 10             	add    esp,0x10
c0008dce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008dd2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dd6:	68 00 00 00 3f       	push   0x3f000000
c0008ddb:	6a 00                	push   0x0
c0008ddd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de5:	e8 8e f7 01 00       	call   c0028578 <__muldf3>
c0008dea:	59                   	pop    ecx
c0008deb:	59                   	pop    ecx
c0008dec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008df0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008df4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008df8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dfc:	e8 4a 00 02 00       	call   c0028e4b <__truncdfsf2>
c0008e01:	83 c4 10             	add    esp,0x10
c0008e04:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e08:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e0b:	eb a8                	jmp    c0008db5 <src_short_to_float_array+0x8>
c0008e0d:	83 c4 18             	add    esp,0x18
c0008e10:	5b                   	pop    ebx
c0008e11:	c3                   	ret    

c0008e12 <src_float_to_short_array>:
c0008e12:	56                   	push   esi
c0008e13:	53                   	push   ebx
c0008e14:	83 ec 14             	sub    esp,0x14
c0008e17:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e1b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e1f:	85 db                	test   ebx,ebx
c0008e21:	0f 84 a4 00 00 00    	je     c0008ecb <src_float_to_short_array+0xb9>
c0008e27:	83 ec 0c             	sub    esp,0xc
c0008e2a:	4b                   	dec    ebx
c0008e2b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e2f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e32:	e8 38 01 02 00       	call   c0028f6f <__extendsfdf2>
c0008e37:	83 c4 10             	add    esp,0x10
c0008e3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e42:	68 00 00 e0 41       	push   0x41e00000
c0008e47:	6a 00                	push   0x0
c0008e49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e51:	e8 22 f7 01 00       	call   c0028578 <__muldf3>
c0008e56:	83 c4 10             	add    esp,0x10
c0008e59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e61:	68 ff ff df 41       	push   0x41dfffff
c0008e66:	68 00 00 c0 ff       	push   0xffc00000
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e73:	e8 cd ff 01 00       	call   c0028e45 <__gedf2>
c0008e78:	83 c4 10             	add    esp,0x10
c0008e7b:	85 c0                	test   eax,eax
c0008e7d:	78 08                	js     c0008e87 <src_float_to_short_array+0x75>
c0008e7f:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e85:	eb 98                	jmp    c0008e1f <src_float_to_short_array+0xd>
c0008e87:	68 00 00 e0 c1       	push   0xc1e00000
c0008e8c:	6a 00                	push   0x0
c0008e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e96:	e8 ae ff 01 00       	call   c0028e49 <__ledf2>
c0008e9b:	83 c4 10             	add    esp,0x10
c0008e9e:	85 c0                	test   eax,eax
c0008ea0:	7f 0b                	jg     c0008ead <src_float_to_short_array+0x9b>
c0008ea2:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ea8:	e9 72 ff ff ff       	jmp    c0008e1f <src_float_to_short_array+0xd>
c0008ead:	50                   	push   eax
c0008eae:	50                   	push   eax
c0008eaf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb7:	e8 44 01 02 00       	call   c0029000 <lrint>
c0008ebc:	83 c4 10             	add    esp,0x10
c0008ebf:	c1 f8 10             	sar    eax,0x10
c0008ec2:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ec6:	e9 54 ff ff ff       	jmp    c0008e1f <src_float_to_short_array+0xd>
c0008ecb:	83 c4 14             	add    esp,0x14
c0008ece:	5b                   	pop    ebx
c0008ecf:	5e                   	pop    esi
c0008ed0:	c3                   	ret    

c0008ed1 <src_int_to_float_array>:
c0008ed1:	53                   	push   ebx
c0008ed2:	83 ec 18             	sub    esp,0x18
c0008ed5:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ed9:	85 db                	test   ebx,ebx
c0008edb:	74 52                	je     c0008f2f <src_int_to_float_array+0x5e>
c0008edd:	83 ec 0c             	sub    esp,0xc
c0008ee0:	4b                   	dec    ebx
c0008ee1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ee5:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ee8:	e8 ee fc 01 00       	call   c0028bdb <__floatsidf>
c0008eed:	83 c4 10             	add    esp,0x10
c0008ef0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ef4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ef8:	68 00 00 00 3e       	push   0x3e000000
c0008efd:	6a 00                	push   0x0
c0008eff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f07:	e8 6c f6 01 00       	call   c0028578 <__muldf3>
c0008f0c:	59                   	pop    ecx
c0008f0d:	59                   	pop    ecx
c0008f0e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f12:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f1e:	e8 28 ff 01 00       	call   c0028e4b <__truncdfsf2>
c0008f23:	83 c4 10             	add    esp,0x10
c0008f26:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f2a:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f2d:	eb aa                	jmp    c0008ed9 <src_int_to_float_array+0x8>
c0008f2f:	83 c4 18             	add    esp,0x18
c0008f32:	5b                   	pop    ebx
c0008f33:	c3                   	ret    

c0008f34 <src_float_to_int_array>:
c0008f34:	56                   	push   esi
c0008f35:	53                   	push   ebx
c0008f36:	83 ec 14             	sub    esp,0x14
c0008f39:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f3d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f41:	85 db                	test   ebx,ebx
c0008f43:	0f 84 a2 00 00 00    	je     c0008feb <src_float_to_int_array+0xb7>
c0008f49:	83 ec 0c             	sub    esp,0xc
c0008f4c:	4b                   	dec    ebx
c0008f4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f51:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f54:	e8 16 00 02 00       	call   c0028f6f <__extendsfdf2>
c0008f59:	83 c4 10             	add    esp,0x10
c0008f5c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f60:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f64:	68 00 00 e0 41       	push   0x41e00000
c0008f69:	6a 00                	push   0x0
c0008f6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f73:	e8 00 f6 01 00       	call   c0028578 <__muldf3>
c0008f78:	83 c4 10             	add    esp,0x10
c0008f7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f83:	68 ff ff df 41       	push   0x41dfffff
c0008f88:	68 00 00 c0 ff       	push   0xffc00000
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f95:	e8 ab fe 01 00       	call   c0028e45 <__gedf2>
c0008f9a:	83 c4 10             	add    esp,0x10
c0008f9d:	85 c0                	test   eax,eax
c0008f9f:	78 09                	js     c0008faa <src_float_to_int_array+0x76>
c0008fa1:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fa8:	eb 97                	jmp    c0008f41 <src_float_to_int_array+0xd>
c0008faa:	68 00 00 e0 c1       	push   0xc1e00000
c0008faf:	6a 00                	push   0x0
c0008fb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb9:	e8 8b fe 01 00       	call   c0028e49 <__ledf2>
c0008fbe:	83 c4 10             	add    esp,0x10
c0008fc1:	85 c0                	test   eax,eax
c0008fc3:	7f 0c                	jg     c0008fd1 <src_float_to_int_array+0x9d>
c0008fc5:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fcc:	e9 70 ff ff ff       	jmp    c0008f41 <src_float_to_int_array+0xd>
c0008fd1:	50                   	push   eax
c0008fd2:	50                   	push   eax
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fdb:	e8 20 00 02 00       	call   c0029000 <lrint>
c0008fe0:	83 c4 10             	add    esp,0x10
c0008fe3:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fe6:	e9 56 ff ff ff       	jmp    c0008f41 <src_float_to_int_array+0xd>
c0008feb:	83 c4 14             	add    esp,0x14
c0008fee:	5b                   	pop    ebx
c0008fef:	5e                   	pop    esi
c0008ff0:	c3                   	ret    

c0008ff1 <linear_vari_process>:
c0008ff1:	55                   	push   ebp
c0008ff2:	31 d2                	xor    edx,edx
c0008ff4:	57                   	push   edi
c0008ff5:	56                   	push   esi
c0008ff6:	53                   	push   ebx
c0008ff7:	83 ec 3c             	sub    esp,0x3c
c0008ffa:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008ffe:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009002:	0f 8e d3 07 00 00    	jle    c00097db <linear_vari_process+0x7ea>
c0009008:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000900c:	ba 05 00 00 00       	mov    edx,0x5
c0009011:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009014:	85 db                	test   ebx,ebx
c0009016:	0f 84 bf 07 00 00    	je     c00097db <linear_vari_process+0x7ea>
c000901c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000901f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009023:	74 19                	je     c000903e <linear_vari_process+0x4d>
c0009025:	31 d2                	xor    edx,edx
c0009027:	39 c2                	cmp    edx,eax
c0009029:	7d 0c                	jge    c0009037 <linear_vari_process+0x46>
c000902b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000902d:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009030:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009034:	42                   	inc    edx
c0009035:	eb f0                	jmp    c0009027 <linear_vari_process+0x36>
c0009037:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000903e:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009041:	0f af d0             	imul   edx,eax
c0009044:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009047:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000904b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009052:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009055:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000905c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009060:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009063:	8b 00                	mov    eax,DWORD PTR [eax]
c0009065:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009069:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000906d:	68 00 00 70 3f       	push   0x3f700000
c0009072:	6a 00                	push   0x0
c0009074:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009078:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000907c:	e8 c6 fd 01 00       	call   c0028e47 <__ltdf2>
c0009081:	83 c4 10             	add    esp,0x10
c0009084:	ba 16 00 00 00       	mov    edx,0x16
c0009089:	85 c0                	test   eax,eax
c000908b:	0f 88 4a 07 00 00    	js     c00097db <linear_vari_process+0x7ea>
c0009091:	68 00 00 70 40       	push   0x40700000
c0009096:	6a 00                	push   0x0
c0009098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090a0:	e8 84 fd 01 00       	call   c0028e29 <__gtdf2>
c00090a5:	83 c4 10             	add    esp,0x10
c00090a8:	ba 16 00 00 00       	mov    edx,0x16
c00090ad:	85 c0                	test   eax,eax
c00090af:	0f 8f 26 07 00 00    	jg     c00097db <linear_vari_process+0x7ea>
c00090b5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090b9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090c7:	68 00 00 f0 3f       	push   0x3ff00000
c00090cc:	6a 00                	push   0x0
c00090ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090d6:	e8 6c fd 01 00       	call   c0028e47 <__ltdf2>
c00090db:	83 c4 10             	add    esp,0x10
c00090de:	85 c0                	test   eax,eax
c00090e0:	0f 89 89 02 00 00    	jns    c000936f <linear_vari_process+0x37e>
c00090e6:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090e9:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090ec:	0f 8d 7d 02 00 00    	jge    c000936f <linear_vari_process+0x37e>
c00090f2:	83 ec 0c             	sub    esp,0xc
c00090f5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090f8:	e8 de fa 01 00       	call   c0028bdb <__floatsidf>
c00090fd:	83 c4 10             	add    esp,0x10
c0009100:	89 04 24             	mov    DWORD PTR [esp],eax
c0009103:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009107:	68 00 00 f0 3f       	push   0x3ff00000
c000910c:	6a 00                	push   0x0
c000910e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009112:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009116:	e8 e0 ed 01 00       	call   c0027efb <__adddf3>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009122:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009126:	52                   	push   edx
c0009127:	50                   	push   eax
c0009128:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000912c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009130:	e8 43 f4 01 00       	call   c0028578 <__muldf3>
c0009135:	5d                   	pop    ebp
c0009136:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000913a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000913e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009141:	e8 95 fa 01 00       	call   c0028bdb <__floatsidf>
c0009146:	83 c4 10             	add    esp,0x10
c0009149:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000914d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009151:	52                   	push   edx
c0009152:	50                   	push   eax
c0009153:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009157:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000915b:	e8 9b ed 01 00       	call   c0027efb <__adddf3>
c0009160:	59                   	pop    ecx
c0009161:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009165:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009169:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000916c:	e8 6a fa 01 00       	call   c0028bdb <__floatsidf>
c0009171:	83 c4 10             	add    esp,0x10
c0009174:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009178:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000917c:	52                   	push   edx
c000917d:	50                   	push   eax
c000917e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009182:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009186:	e8 ba fc 01 00       	call   c0028e45 <__gedf2>
c000918b:	83 c4 10             	add    esp,0x10
c000918e:	85 c0                	test   eax,eax
c0009190:	0f 89 d9 01 00 00    	jns    c000936f <linear_vari_process+0x37e>
c0009196:	85 ff                	test   edi,edi
c0009198:	0f 8e f4 00 00 00    	jle    c0009292 <linear_vari_process+0x2a1>
c000919e:	83 ec 10             	sub    esp,0x10
c00091a1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091a4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091a7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091ab:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091ae:	ff 30                	push   DWORD PTR [eax]
c00091b0:	e8 97 f3 01 00       	call   c002854c <__subdf3>
c00091b5:	83 c4 18             	add    esp,0x18
c00091b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091c0:	52                   	push   edx
c00091c1:	50                   	push   eax
c00091c2:	e8 19 fe 01 00       	call   c0028fe0 <fabs>
c00091c7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091cb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091cf:	83 c4 10             	add    esp,0x10
c00091d2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091d7:	68 23 42 92 0c       	push   0xc924223
c00091dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091e0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091e4:	e8 40 fc 01 00       	call   c0028e29 <__gtdf2>
c00091e9:	83 c4 10             	add    esp,0x10
c00091ec:	85 c0                	test   eax,eax
c00091ee:	0f 8e 9e 00 00 00    	jle    c0009292 <linear_vari_process+0x2a1>
c00091f4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091f8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00091fd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009201:	89 04 24             	mov    DWORD PTR [esp],eax
c0009204:	52                   	push   edx
c0009205:	50                   	push   eax
c0009206:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009209:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000920c:	e8 3b f3 01 00       	call   c002854c <__subdf3>
c0009211:	59                   	pop    ecx
c0009212:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009216:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000921a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000921d:	e8 b9 f9 01 00       	call   c0028bdb <__floatsidf>
c0009222:	83 c4 10             	add    esp,0x10
c0009225:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009229:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000922d:	52                   	push   edx
c000922e:	50                   	push   eax
c000922f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009233:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009237:	e8 3c f3 01 00       	call   c0028578 <__muldf3>
c000923c:	5f                   	pop    edi
c000923d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009241:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009245:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009248:	e8 8e f9 01 00       	call   c0028bdb <__floatsidf>
c000924d:	83 c4 10             	add    esp,0x10
c0009250:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009254:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009258:	52                   	push   edx
c0009259:	50                   	push   eax
c000925a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	e8 f5 f5 01 00       	call   c002885c <__divdf3>
c0009267:	83 c4 10             	add    esp,0x10
c000926a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000926e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009272:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009276:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000927a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009282:	e8 74 ec 01 00       	call   c0027efb <__adddf3>
c0009287:	83 c4 10             	add    esp,0x10
c000928a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009292:	31 ff                	xor    edi,edi
c0009294:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009297:	0f 8e 9d 00 00 00    	jle    c000933a <linear_vari_process+0x349>
c000929d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092a0:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092a4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092a7:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00092ae:	8b 06                	mov    eax,DWORD PTR [esi]
c00092b0:	52                   	push   edx
c00092b1:	52                   	push   edx
c00092b2:	55                   	push   ebp
c00092b3:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092b6:	47                   	inc    edi
c00092b7:	e8 d4 e5 01 00       	call   c0027890 <__subsf3>
c00092bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00092bf:	e8 ab fc 01 00       	call   c0028f6f <__extendsfdf2>
c00092c4:	83 c4 10             	add    esp,0x10
c00092c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092cb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092cf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092df:	e8 94 f2 01 00       	call   c0028578 <__muldf3>
c00092e4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092eb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092ef:	e8 7b fc 01 00       	call   c0028f6f <__extendsfdf2>
c00092f4:	83 c4 10             	add    esp,0x10
c00092f7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092fb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092ff:	52                   	push   edx
c0009300:	50                   	push   eax
c0009301:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009305:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009309:	e8 ed eb 01 00       	call   c0027efb <__adddf3>
c000930e:	59                   	pop    ecx
c000930f:	5d                   	pop    ebp
c0009310:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009314:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009318:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000931c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009320:	e8 26 fb 01 00       	call   c0028e4b <__truncdfsf2>
c0009325:	83 c4 10             	add    esp,0x10
c0009328:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000932b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000932f:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009332:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009335:	e9 5a ff ff ff       	jmp    c0009294 <linear_vari_process+0x2a3>
c000933a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	68 00 00 f0 3f       	push   0x3ff00000
c0009347:	6a 00                	push   0x0
c0009349:	e8 0e f5 01 00       	call   c002885c <__divdf3>
c000934e:	83 c4 10             	add    esp,0x10
c0009351:	89 04 24             	mov    DWORD PTR [esp],eax
c0009354:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009358:	52                   	push   edx
c0009359:	50                   	push   eax
c000935a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009362:	e8 94 eb 01 00       	call   c0027efb <__adddf3>
c0009367:	83 c4 10             	add    esp,0x10
c000936a:	e9 50 fd ff ff       	jmp    c00090bf <linear_vari_process+0xce>
c000936f:	50                   	push   eax
c0009370:	50                   	push   eax
c0009371:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009375:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009379:	e8 82 fc 01 00       	call   c0029000 <lrint>
c000937e:	83 ec 0c             	sub    esp,0xc
c0009381:	50                   	push   eax
c0009382:	e8 54 f8 01 00       	call   c0028bdb <__floatsidf>
c0009387:	83 c4 10             	add    esp,0x10
c000938a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000938e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009392:	52                   	push   edx
c0009393:	50                   	push   eax
c0009394:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009398:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000939c:	e8 ab f1 01 00       	call   c002854c <__subdf3>
c00093a1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093a5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093a9:	83 c4 20             	add    esp,0x20
c00093ac:	6a 00                	push   0x0
c00093ae:	6a 00                	push   0x0
c00093b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b8:	e8 8a fa 01 00       	call   c0028e47 <__ltdf2>
c00093bd:	83 c4 10             	add    esp,0x10
c00093c0:	85 c0                	test   eax,eax
c00093c2:	79 1e                	jns    c00093e2 <linear_vari_process+0x3f1>
c00093c4:	68 00 00 f0 3f       	push   0x3ff00000
c00093c9:	6a 00                	push   0x0
c00093cb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093cf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d3:	e8 23 eb 01 00       	call   c0027efb <__adddf3>
c00093d8:	83 c4 10             	add    esp,0x10
c00093db:	89 04 24             	mov    DWORD PTR [esp],eax
c00093de:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093e2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093e5:	83 ec 10             	sub    esp,0x10
c00093e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093f8:	e8 4f f1 01 00       	call   c002854c <__subdf3>
c00093fd:	83 c4 18             	add    esp,0x18
c0009400:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009404:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009408:	52                   	push   edx
c0009409:	50                   	push   eax
c000940a:	e8 f1 fb 01 00       	call   c0029000 <lrint>
c000940f:	83 c4 10             	add    esp,0x10
c0009412:	0f af f8             	imul   edi,eax
c0009415:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009418:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c000941b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000941e:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009421:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009424:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009428:	0f 8d 13 03 00 00    	jge    c0009741 <linear_vari_process+0x750>
c000942e:	83 ec 0c             	sub    esp,0xc
c0009431:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009434:	e8 a2 f7 01 00       	call   c0028bdb <__floatsidf>
c0009439:	83 c4 10             	add    esp,0x10
c000943c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009440:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009444:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009448:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000944c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009450:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009454:	e8 1f f1 01 00       	call   c0028578 <__muldf3>
c0009459:	89 3c 24             	mov    DWORD PTR [esp],edi
c000945c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009460:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009464:	e8 72 f7 01 00       	call   c0028bdb <__floatsidf>
c0009469:	83 c4 10             	add    esp,0x10
c000946c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009470:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009474:	52                   	push   edx
c0009475:	50                   	push   eax
c0009476:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000947a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000947e:	e8 78 ea 01 00       	call   c0027efb <__adddf3>
c0009483:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000948e:	e8 48 f7 01 00       	call   c0028bdb <__floatsidf>
c0009493:	83 c4 10             	add    esp,0x10
c0009496:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000949a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000949e:	52                   	push   edx
c000949f:	50                   	push   eax
c00094a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a8:	e8 9a f9 01 00       	call   c0028e47 <__ltdf2>
c00094ad:	83 c4 10             	add    esp,0x10
c00094b0:	85 c0                	test   eax,eax
c00094b2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094b6:	0f 89 85 02 00 00    	jns    c0009741 <linear_vari_process+0x750>
c00094bc:	85 c9                	test   ecx,ecx
c00094be:	0f 8e f5 00 00 00    	jle    c00095b9 <linear_vari_process+0x5c8>
c00094c4:	83 ec 10             	sub    esp,0x10
c00094c7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ca:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094cd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094d1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094d4:	ff 30                	push   DWORD PTR [eax]
c00094d6:	e8 71 f0 01 00       	call   c002854c <__subdf3>
c00094db:	83 c4 18             	add    esp,0x18
c00094de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094e2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094e6:	52                   	push   edx
c00094e7:	50                   	push   eax
c00094e8:	e8 f3 fa 01 00       	call   c0028fe0 <fabs>
c00094ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094f1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094f5:	83 c4 10             	add    esp,0x10
c00094f8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094fd:	68 23 42 92 0c       	push   0xc924223
c0009502:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009506:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000950a:	e8 1a f9 01 00       	call   c0028e29 <__gtdf2>
c000950f:	83 c4 10             	add    esp,0x10
c0009512:	85 c0                	test   eax,eax
c0009514:	0f 8e 9f 00 00 00    	jle    c00095b9 <linear_vari_process+0x5c8>
c000951a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000951e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009521:	8b 00                	mov    eax,DWORD PTR [eax]
c0009523:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009527:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000952b:	52                   	push   edx
c000952c:	50                   	push   eax
c000952d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009530:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009533:	e8 14 f0 01 00       	call   c002854c <__subdf3>
c0009538:	5f                   	pop    edi
c0009539:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000953d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009541:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009544:	e8 92 f6 01 00       	call   c0028bdb <__floatsidf>
c0009549:	83 c4 10             	add    esp,0x10
c000954c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009554:	52                   	push   edx
c0009555:	50                   	push   eax
c0009556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000955a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000955e:	e8 15 f0 01 00       	call   c0028578 <__muldf3>
c0009563:	5d                   	pop    ebp
c0009564:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009568:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000956c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000956f:	e8 67 f6 01 00       	call   c0028bdb <__floatsidf>
c0009574:	83 c4 10             	add    esp,0x10
c0009577:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000957b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000957f:	52                   	push   edx
c0009580:	50                   	push   eax
c0009581:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	e8 ce f2 01 00       	call   c002885c <__divdf3>
c000958e:	83 c4 10             	add    esp,0x10
c0009591:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009595:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009599:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000959d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a9:	e8 4d e9 01 00       	call   c0027efb <__adddf3>
c00095ae:	83 c4 10             	add    esp,0x10
c00095b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b9:	31 ff                	xor    edi,edi
c00095bb:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095be:	39 f8                	cmp    eax,edi
c00095c0:	0f 8e ac 00 00 00    	jle    c0009672 <linear_vari_process+0x681>
c00095c6:	8b 16                	mov    edx,DWORD PTR [esi]
c00095c8:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095cb:	29 c1                	sub    ecx,eax
c00095cd:	89 c8                	mov    eax,ecx
c00095cf:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095d2:	01 f8                	add    eax,edi
c00095d4:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095d8:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095db:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095e2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095e5:	51                   	push   ecx
c00095e6:	01 f8                	add    eax,edi
c00095e8:	51                   	push   ecx
c00095e9:	47                   	inc    edi
c00095ea:	55                   	push   ebp
c00095eb:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095ee:	e8 9d e2 01 00       	call   c0027890 <__subsf3>
c00095f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00095f6:	e8 74 f9 01 00       	call   c0028f6f <__extendsfdf2>
c00095fb:	83 c4 10             	add    esp,0x10
c00095fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009602:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009606:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000960a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000960e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009612:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009616:	e8 5d ef 01 00       	call   c0028578 <__muldf3>
c000961b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000961e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009622:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009626:	e8 44 f9 01 00       	call   c0028f6f <__extendsfdf2>
c000962b:	83 c4 10             	add    esp,0x10
c000962e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009632:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009636:	52                   	push   edx
c0009637:	50                   	push   eax
c0009638:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009640:	e8 b6 e8 01 00       	call   c0027efb <__adddf3>
c0009645:	5d                   	pop    ebp
c0009646:	59                   	pop    ecx
c0009647:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000964b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000964f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009653:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009657:	e8 ef f7 01 00       	call   c0028e4b <__truncdfsf2>
c000965c:	83 c4 10             	add    esp,0x10
c000965f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009663:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009667:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000966a:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000966d:	e9 49 ff ff ff       	jmp    c00095bb <linear_vari_process+0x5ca>
c0009672:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009676:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000967a:	68 00 00 f0 3f       	push   0x3ff00000
c000967f:	6a 00                	push   0x0
c0009681:	e8 d6 f1 01 00       	call   c002885c <__divdf3>
c0009686:	83 c4 10             	add    esp,0x10
c0009689:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000968d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009691:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009695:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009699:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096a1:	e8 55 e8 01 00       	call   c0027efb <__adddf3>
c00096a6:	59                   	pop    ecx
c00096a7:	5f                   	pop    edi
c00096a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096b8:	e8 43 f9 01 00       	call   c0029000 <lrint>
c00096bd:	83 ec 0c             	sub    esp,0xc
c00096c0:	50                   	push   eax
c00096c1:	e8 15 f5 01 00       	call   c0028bdb <__floatsidf>
c00096c6:	83 c4 10             	add    esp,0x10
c00096c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096d1:	52                   	push   edx
c00096d2:	50                   	push   eax
c00096d3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096db:	e8 6c ee 01 00       	call   c002854c <__subdf3>
c00096e0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096e4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096e8:	83 c4 20             	add    esp,0x20
c00096eb:	6a 00                	push   0x0
c00096ed:	6a 00                	push   0x0
c00096ef:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f7:	e8 4b f7 01 00       	call   c0028e47 <__ltdf2>
c00096fc:	83 c4 10             	add    esp,0x10
c00096ff:	85 c0                	test   eax,eax
c0009701:	79 1e                	jns    c0009721 <linear_vari_process+0x730>
c0009703:	68 00 00 f0 3f       	push   0x3ff00000
c0009708:	6a 00                	push   0x0
c000970a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000970e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009712:	e8 e4 e7 01 00       	call   c0027efb <__adddf3>
c0009717:	83 c4 10             	add    esp,0x10
c000971a:	89 04 24             	mov    DWORD PTR [esp],eax
c000971d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009721:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009724:	83 ec 10             	sub    esp,0x10
c0009727:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000972b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000972f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009733:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009737:	e8 10 ee 01 00       	call   c002854c <__subdf3>
c000973c:	e9 bc fc ff ff       	jmp    c00093fd <linear_vari_process+0x40c>
c0009741:	39 fd                	cmp    ebp,edi
c0009743:	7d 38                	jge    c000977d <linear_vari_process+0x78c>
c0009745:	83 ec 0c             	sub    esp,0xc
c0009748:	89 f8                	mov    eax,edi
c000974a:	29 e8                	sub    eax,ebp
c000974c:	99                   	cdq    
c000974d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009750:	50                   	push   eax
c0009751:	e8 85 f4 01 00       	call   c0028bdb <__floatsidf>
c0009756:	83 c4 10             	add    esp,0x10
c0009759:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000975d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009761:	52                   	push   edx
c0009762:	50                   	push   eax
c0009763:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009767:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000976b:	e8 8b e7 01 00       	call   c0027efb <__adddf3>
c0009770:	83 c4 10             	add    esp,0x10
c0009773:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009776:	89 04 24             	mov    DWORD PTR [esp],eax
c0009779:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000977d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009781:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009784:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009788:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000978b:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000978e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009791:	85 c0                	test   eax,eax
c0009793:	7f 29                	jg     c00097be <linear_vari_process+0x7cd>
c0009795:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000979d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097a1:	89 01                	mov    DWORD PTR [ecx],eax
c00097a3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097a6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097a9:	99                   	cdq    
c00097aa:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097ad:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097b0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097b3:	99                   	cdq    
c00097b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097b7:	31 d2                	xor    edx,edx
c00097b9:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097bc:	eb 1d                	jmp    c00097db <linear_vari_process+0x7ea>
c00097be:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097c1:	31 d2                	xor    edx,edx
c00097c3:	29 c8                	sub    eax,ecx
c00097c5:	c1 e0 02             	shl    eax,0x2
c00097c8:	39 d1                	cmp    ecx,edx
c00097ca:	7e c9                	jle    c0009795 <linear_vari_process+0x7a4>
c00097cc:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ce:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097d1:	83 c0 04             	add    eax,0x4
c00097d4:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097d8:	42                   	inc    edx
c00097d9:	eb ed                	jmp    c00097c8 <linear_vari_process+0x7d7>
c00097db:	83 c4 3c             	add    esp,0x3c
c00097de:	89 d0                	mov    eax,edx
c00097e0:	5b                   	pop    ebx
c00097e1:	5e                   	pop    esi
c00097e2:	5f                   	pop    edi
c00097e3:	5d                   	pop    ebp
c00097e4:	c3                   	ret    

c00097e5 <linear_reset>:
c00097e5:	83 ec 0c             	sub    esp,0xc
c00097e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097ec:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097ef:	85 c0                	test   eax,eax
c00097f1:	74 20                	je     c0009813 <linear_reset+0x2e>
c00097f3:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097f6:	83 c0 1c             	add    eax,0x1c
c00097f9:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097fc:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009803:	c1 e2 02             	shl    edx,0x2
c0009806:	51                   	push   ecx
c0009807:	52                   	push   edx
c0009808:	6a 00                	push   0x0
c000980a:	50                   	push   eax
c000980b:	e8 5c 6f ff ff       	call   c000076c <memset>
c0009810:	83 c4 10             	add    esp,0x10
c0009813:	83 c4 0c             	add    esp,0xc
c0009816:	c3                   	ret    

c0009817 <linear_get_name>:
c0009817:	31 c0                	xor    eax,eax
c0009819:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000981e:	75 05                	jne    c0009825 <linear_get_name+0xe>
c0009820:	b8 40 a8 02 c0       	mov    eax,0xc002a840
c0009825:	c3                   	ret    

c0009826 <linear_get_description>:
c0009826:	31 c0                	xor    eax,eax
c0009828:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000982d:	75 05                	jne    c0009834 <linear_get_description+0xe>
c000982f:	b8 54 a8 02 c0       	mov    eax,0xc002a854
c0009834:	c3                   	ret    

c0009835 <linear_set_converter>:
c0009835:	53                   	push   ebx
c0009836:	b8 0a 00 00 00       	mov    eax,0xa
c000983b:	83 ec 08             	sub    esp,0x8
c000983e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009842:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009847:	75 6e                	jne    c00098b7 <linear_set_converter+0x82>
c0009849:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000984c:	85 c0                	test   eax,eax
c000984e:	74 13                	je     c0009863 <linear_set_converter+0x2e>
c0009850:	83 ec 0c             	sub    esp,0xc
c0009853:	50                   	push   eax
c0009854:	e8 91 60 00 00       	call   c000f8ea <free>
c0009859:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009860:	83 c4 10             	add    esp,0x10
c0009863:	50                   	push   eax
c0009864:	50                   	push   eax
c0009865:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009868:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000986f:	50                   	push   eax
c0009870:	6a 01                	push   0x1
c0009872:	e8 93 60 00 00       	call   c000f90a <calloc>
c0009877:	83 c4 10             	add    esp,0x10
c000987a:	89 c2                	mov    edx,eax
c000987c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000987f:	85 d2                	test   edx,edx
c0009881:	b8 01 00 00 00       	mov    eax,0x1
c0009886:	74 2f                	je     c00098b7 <linear_set_converter+0x82>
c0009888:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000988b:	83 ec 0c             	sub    esp,0xc
c000988e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009891:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009897:	c7 43 24 f1 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008ff1
c000989e:	c7 43 20 f1 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008ff1
c00098a5:	c7 43 28 e5 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097e5
c00098ac:	53                   	push   ebx
c00098ad:	e8 33 ff ff ff       	call   c00097e5 <linear_reset>
c00098b2:	83 c4 10             	add    esp,0x10
c00098b5:	31 c0                	xor    eax,eax
c00098b7:	83 c4 08             	add    esp,0x8
c00098ba:	5b                   	pop    ebx
c00098bb:	c3                   	ret    

c00098bc <int_to_fp>:
c00098bc:	c1 e0 0c             	shl    eax,0xc
c00098bf:	c3                   	ret    

c00098c0 <fp_to_int>:
c00098c0:	c1 f8 0c             	sar    eax,0xc
c00098c3:	c3                   	ret    

c00098c4 <fp_fraction_part>:
c00098c4:	25 ff 0f 00 00       	and    eax,0xfff
c00098c9:	c3                   	ret    

c00098ca <fp_to_double>:
c00098ca:	83 ec 1c             	sub    esp,0x1c
c00098cd:	e8 f2 ff ff ff       	call   c00098c4 <fp_fraction_part>
c00098d2:	83 ec 0c             	sub    esp,0xc
c00098d5:	50                   	push   eax
c00098d6:	e8 00 f3 01 00       	call   c0028bdb <__floatsidf>
c00098db:	83 c4 10             	add    esp,0x10
c00098de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098e6:	68 00 00 30 3f       	push   0x3f300000
c00098eb:	6a 00                	push   0x0
c00098ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098f5:	e8 7e ec 01 00       	call   c0028578 <__muldf3>
c00098fa:	83 c4 2c             	add    esp,0x2c
c00098fd:	c3                   	ret    

c00098fe <calc_output_single>:
c00098fe:	55                   	push   ebp
c00098ff:	57                   	push   edi
c0009900:	56                   	push   esi
c0009901:	89 c6                	mov    esi,eax
c0009903:	53                   	push   ebx
c0009904:	89 d3                	mov    ebx,edx
c0009906:	83 ec 4c             	sub    esp,0x4c
c0009909:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000990d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009910:	e8 a7 ff ff ff       	call   c00098bc <int_to_fp>
c0009915:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009918:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000991c:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009920:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009924:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009927:	99                   	cdq    
c0009928:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009930:	f7 fb                	idiv   ebx
c0009932:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000993a:	89 da                	mov    edx,ebx
c000993c:	0f af d0             	imul   edx,eax
c000993f:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009943:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009947:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000994b:	29 c2                	sub    edx,eax
c000994d:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009954:	83 c5 04             	add    ebp,0x4
c0009957:	e8 6e ff ff ff       	call   c00098ca <fp_to_double>
c000995c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009960:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009968:	e8 53 ff ff ff       	call   c00098c0 <fp_to_int>
c000996d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009970:	52                   	push   edx
c0009971:	52                   	push   edx
c0009972:	51                   	push   ecx
c0009973:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009977:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000997b:	e8 10 df 01 00       	call   c0027890 <__subsf3>
c0009980:	89 04 24             	mov    DWORD PTR [esp],eax
c0009983:	e8 e7 f5 01 00       	call   c0028f6f <__extendsfdf2>
c0009988:	83 c4 10             	add    esp,0x10
c000998b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000998f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009993:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009997:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000999b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000999f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099a3:	e8 d0 eb 01 00       	call   c0028578 <__muldf3>
c00099a8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099b0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099b7:	e8 b3 f5 01 00       	call   c0028f6f <__extendsfdf2>
c00099bc:	83 c4 10             	add    esp,0x10
c00099bf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099c3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099c7:	52                   	push   edx
c00099c8:	50                   	push   eax
c00099c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099d1:	e8 25 e5 01 00       	call   c0027efb <__adddf3>
c00099d6:	59                   	pop    ecx
c00099d7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099db:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099df:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099e5:	e8 85 f5 01 00       	call   c0028f6f <__extendsfdf2>
c00099ea:	83 c4 10             	add    esp,0x10
c00099ed:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099f1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099f5:	52                   	push   edx
c00099f6:	50                   	push   eax
c00099f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ff:	e8 74 eb 01 00       	call   c0028578 <__muldf3>
c0009a04:	83 c4 10             	add    esp,0x10
c0009a07:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a0b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a0f:	52                   	push   edx
c0009a10:	50                   	push   eax
c0009a11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a19:	e8 dd e4 01 00       	call   c0027efb <__adddf3>
c0009a1e:	83 c4 10             	add    esp,0x10
c0009a21:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a25:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a29:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a2d:	0f 89 1d ff ff ff    	jns    c0009950 <calc_output_single+0x52>
c0009a33:	89 d9                	mov    ecx,ebx
c0009a35:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a39:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a3d:	89 dd                	mov    ebp,ebx
c0009a3f:	29 c8                	sub    eax,ecx
c0009a41:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a49:	99                   	cdq    
c0009a4a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a52:	f7 fb                	idiv   ebx
c0009a54:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a58:	0f af e8             	imul   ebp,eax
c0009a5b:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a5f:	01 cd                	add    ebp,ecx
c0009a61:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a64:	89 e8                	mov    eax,ebp
c0009a66:	83 ee 04             	sub    esi,0x4
c0009a69:	e8 5c fe ff ff       	call   c00098ca <fp_to_double>
c0009a6e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a72:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a76:	89 e8                	mov    eax,ebp
c0009a78:	29 dd                	sub    ebp,ebx
c0009a7a:	e8 41 fe ff ff       	call   c00098c0 <fp_to_int>
c0009a7f:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a82:	52                   	push   edx
c0009a83:	52                   	push   edx
c0009a84:	51                   	push   ecx
c0009a85:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a89:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a8d:	e8 fe dd 01 00       	call   c0027890 <__subsf3>
c0009a92:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a95:	e8 d5 f4 01 00       	call   c0028f6f <__extendsfdf2>
c0009a9a:	83 c4 10             	add    esp,0x10
c0009a9d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009aa1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009aad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ab1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ab5:	e8 be ea 01 00       	call   c0028578 <__muldf3>
c0009aba:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009abe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ac2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ac5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ac9:	e8 a1 f4 01 00       	call   c0028f6f <__extendsfdf2>
c0009ace:	83 c4 10             	add    esp,0x10
c0009ad1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ad5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ad9:	52                   	push   edx
c0009ada:	50                   	push   eax
c0009adb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009adf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ae3:	e8 13 e4 01 00       	call   c0027efb <__adddf3>
c0009ae8:	59                   	pop    ecx
c0009ae9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009aed:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009af1:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009af7:	e8 73 f4 01 00       	call   c0028f6f <__extendsfdf2>
c0009afc:	83 c4 10             	add    esp,0x10
c0009aff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b07:	52                   	push   edx
c0009b08:	50                   	push   eax
c0009b09:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b0d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b11:	e8 62 ea 01 00       	call   c0028578 <__muldf3>
c0009b16:	83 c4 10             	add    esp,0x10
c0009b19:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b21:	52                   	push   edx
c0009b22:	50                   	push   eax
c0009b23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b2b:	e8 cb e3 01 00       	call   c0027efb <__adddf3>
c0009b30:	83 c4 10             	add    esp,0x10
c0009b33:	85 ed                	test   ebp,ebp
c0009b35:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b39:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b3d:	0f 8f 21 ff ff ff    	jg     c0009a64 <calc_output_single+0x166>
c0009b43:	52                   	push   edx
c0009b44:	50                   	push   eax
c0009b45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b4d:	e8 a9 e3 01 00       	call   c0027efb <__adddf3>
c0009b52:	83 c4 5c             	add    esp,0x5c
c0009b55:	5b                   	pop    ebx
c0009b56:	5e                   	pop    esi
c0009b57:	5f                   	pop    edi
c0009b58:	5d                   	pop    ebp
c0009b59:	c3                   	ret    

c0009b5a <calc_output_stereo>:
c0009b5a:	55                   	push   ebp
c0009b5b:	89 cd                	mov    ebp,ecx
c0009b5d:	57                   	push   edi
c0009b5e:	56                   	push   esi
c0009b5f:	53                   	push   ebx
c0009b60:	89 c3                	mov    ebx,eax
c0009b62:	83 ec 6c             	sub    esp,0x6c
c0009b65:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b70:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b77:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b7b:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b7f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b82:	e8 35 fd ff ff       	call   c00098bc <int_to_fp>
c0009b87:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b8f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b93:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b9b:	29 c8                	sub    eax,ecx
c0009b9d:	99                   	cdq    
c0009b9e:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009ba2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ba6:	0f af d0             	imul   edx,eax
c0009ba9:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bac:	31 d2                	xor    edx,edx
c0009bae:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bb2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bb6:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bb9:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bbd:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bc0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009bc4:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bc8:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009bcb:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bd0:	29 c1                	sub    ecx,eax
c0009bd2:	31 c0                	xor    eax,eax
c0009bd4:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bd7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bdb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bdf:	83 c7 08             	add    edi,0x8
c0009be2:	e8 e3 fc ff ff       	call   c00098ca <fp_to_double>
c0009be7:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009beb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bf3:	e8 c8 fc ff ff       	call   c00098c0 <fp_to_int>
c0009bf8:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bfb:	52                   	push   edx
c0009bfc:	52                   	push   edx
c0009bfd:	51                   	push   ecx
c0009bfe:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c02:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c06:	e8 85 dc 01 00       	call   c0027890 <__subsf3>
c0009c0b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c0e:	e8 5c f3 01 00       	call   c0028f6f <__extendsfdf2>
c0009c13:	83 c4 10             	add    esp,0x10
c0009c16:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c1a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c1e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c22:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c26:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c2a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c2e:	e8 45 e9 01 00       	call   c0028578 <__muldf3>
c0009c33:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c37:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c3b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c3e:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c42:	e8 28 f3 01 00       	call   c0028f6f <__extendsfdf2>
c0009c47:	83 c4 10             	add    esp,0x10
c0009c4a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c4e:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c52:	52                   	push   edx
c0009c53:	50                   	push   eax
c0009c54:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c58:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c5c:	e8 9a e2 01 00       	call   c0027efb <__adddf3>
c0009c61:	59                   	pop    ecx
c0009c62:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c66:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c6a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c70:	e8 fa f2 01 00       	call   c0028f6f <__extendsfdf2>
c0009c75:	83 c4 10             	add    esp,0x10
c0009c78:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c7c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c80:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c84:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c88:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c8c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c90:	e8 e3 e8 01 00       	call   c0028578 <__muldf3>
c0009c95:	83 c4 10             	add    esp,0x10
c0009c98:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ca0:	52                   	push   edx
c0009ca1:	50                   	push   eax
c0009ca2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ca6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009caa:	e8 4c e2 01 00       	call   c0027efb <__adddf3>
c0009caf:	59                   	pop    ecx
c0009cb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cb4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cb8:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cbe:	e8 ac f2 01 00       	call   c0028f6f <__extendsfdf2>
c0009cc3:	83 c4 10             	add    esp,0x10
c0009cc6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cca:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cce:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cd2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cd6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cda:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cde:	e8 95 e8 01 00       	call   c0028578 <__muldf3>
c0009ce3:	83 c4 10             	add    esp,0x10
c0009ce6:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cea:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cee:	52                   	push   edx
c0009cef:	50                   	push   eax
c0009cf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cf8:	e8 fe e1 01 00       	call   c0027efb <__adddf3>
c0009cfd:	83 c4 10             	add    esp,0x10
c0009d00:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d0c:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d10:	0f 89 c5 fe ff ff    	jns    c0009bdb <calc_output_stereo+0x81>
c0009d16:	29 e9                	sub    ecx,ebp
c0009d18:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d1c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d20:	29 c8                	sub    eax,ecx
c0009d22:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d2a:	99                   	cdq    
c0009d2b:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d2f:	31 d2                	xor    edx,edx
c0009d31:	0f af f8             	imul   edi,eax
c0009d34:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d38:	40                   	inc    eax
c0009d39:	01 cf                	add    edi,ecx
c0009d3b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d40:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d44:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d4c:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d4f:	31 c0                	xor    eax,eax
c0009d51:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d55:	89 f8                	mov    eax,edi
c0009d57:	83 eb 08             	sub    ebx,0x8
c0009d5a:	e8 6b fb ff ff       	call   c00098ca <fp_to_double>
c0009d5f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d63:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d67:	89 f8                	mov    eax,edi
c0009d69:	e8 52 fb ff ff       	call   c00098c0 <fp_to_int>
c0009d6e:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d71:	52                   	push   edx
c0009d72:	52                   	push   edx
c0009d73:	55                   	push   ebp
c0009d74:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d78:	e8 13 db 01 00       	call   c0027890 <__subsf3>
c0009d7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d80:	e8 ea f1 01 00       	call   c0028f6f <__extendsfdf2>
c0009d85:	83 c4 10             	add    esp,0x10
c0009d88:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d8c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d90:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d94:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d9c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009da0:	e8 d3 e7 01 00       	call   c0028578 <__muldf3>
c0009da5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009da8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dac:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009db0:	e8 ba f1 01 00       	call   c0028f6f <__extendsfdf2>
c0009db5:	83 c4 10             	add    esp,0x10
c0009db8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dbc:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dc0:	52                   	push   edx
c0009dc1:	50                   	push   eax
c0009dc2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dc6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dca:	e8 2c e1 01 00       	call   c0027efb <__adddf3>
c0009dcf:	59                   	pop    ecx
c0009dd0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009dd4:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dd8:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dde:	e8 8c f1 01 00       	call   c0028f6f <__extendsfdf2>
c0009de3:	83 c4 10             	add    esp,0x10
c0009de6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dea:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009df2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009df6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dfa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dfe:	e8 75 e7 01 00       	call   c0028578 <__muldf3>
c0009e03:	83 c4 10             	add    esp,0x10
c0009e06:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e0a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0e:	52                   	push   edx
c0009e0f:	50                   	push   eax
c0009e10:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e14:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e18:	e8 de e0 01 00       	call   c0027efb <__adddf3>
c0009e1d:	5d                   	pop    ebp
c0009e1e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e22:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e26:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e2c:	e8 3e f1 01 00       	call   c0028f6f <__extendsfdf2>
c0009e31:	83 c4 10             	add    esp,0x10
c0009e34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e44:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e48:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e4c:	e8 27 e7 01 00       	call   c0028578 <__muldf3>
c0009e51:	83 c4 10             	add    esp,0x10
c0009e54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e5c:	52                   	push   edx
c0009e5d:	50                   	push   eax
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e66:	e8 90 e0 01 00       	call   c0027efb <__adddf3>
c0009e6b:	83 c4 10             	add    esp,0x10
c0009e6e:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e72:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e76:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e7a:	85 ff                	test   edi,edi
c0009e7c:	0f 8f d3 fe ff ff    	jg     c0009d55 <calc_output_stereo+0x1fb>
c0009e82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e92:	e8 64 e0 01 00       	call   c0027efb <__adddf3>
c0009e97:	83 c4 10             	add    esp,0x10
c0009e9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e9e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ea2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ea6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009eaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eb2:	e8 c1 e6 01 00       	call   c0028578 <__muldf3>
c0009eb7:	59                   	pop    ecx
c0009eb8:	5b                   	pop    ebx
c0009eb9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ebd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ec1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ec5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ec9:	e8 7d ef 01 00       	call   c0028e4b <__truncdfsf2>
c0009ece:	83 c4 10             	add    esp,0x10
c0009ed1:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ed8:	89 03                	mov    DWORD PTR [ebx],eax
c0009eda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ee2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ee6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eea:	e8 0c e0 01 00       	call   c0027efb <__adddf3>
c0009eef:	83 c4 10             	add    esp,0x10
c0009ef2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ef6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009efa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009efe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f0a:	e8 69 e6 01 00       	call   c0028578 <__muldf3>
c0009f0f:	5e                   	pop    esi
c0009f10:	5f                   	pop    edi
c0009f11:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f15:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f21:	e8 25 ef 01 00       	call   c0028e4b <__truncdfsf2>
c0009f26:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f2d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f30:	83 c4 7c             	add    esp,0x7c
c0009f33:	5b                   	pop    ebx
c0009f34:	5e                   	pop    esi
c0009f35:	5f                   	pop    edi
c0009f36:	5d                   	pop    ebp
c0009f37:	c3                   	ret    

c0009f38 <calc_output_quad>:
c0009f38:	55                   	push   ebp
c0009f39:	57                   	push   edi
c0009f3a:	56                   	push   esi
c0009f3b:	89 c6                	mov    esi,eax
c0009f3d:	53                   	push   ebx
c0009f3e:	83 ec 7c             	sub    esp,0x7c
c0009f41:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f45:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f49:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f50:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f5b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f5f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f62:	e8 55 f9 ff ff       	call   c00098bc <int_to_fp>
c0009f67:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f6a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f6d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f71:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f75:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f79:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f7d:	99                   	cdq    
c0009f7e:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f86:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f89:	31 d2                	xor    edx,edx
c0009f8b:	0f af d8             	imul   ebx,eax
c0009f8e:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f96:	0f af c7             	imul   eax,edi
c0009f99:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f9d:	29 c1                	sub    ecx,eax
c0009f9f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fa7:	31 c0                	xor    eax,eax
c0009fa9:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fb0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fb4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fb8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fbc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fc0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fc4:	89 d8                	mov    eax,ebx
c0009fc6:	83 c7 10             	add    edi,0x10
c0009fc9:	e8 fc f8 ff ff       	call   c00098ca <fp_to_double>
c0009fce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fd2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fd6:	89 d8                	mov    eax,ebx
c0009fd8:	e8 e3 f8 ff ff       	call   c00098c0 <fp_to_int>
c0009fdd:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fe1:	52                   	push   edx
c0009fe2:	52                   	push   edx
c0009fe3:	51                   	push   ecx
c0009fe4:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fe8:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fec:	e8 9f d8 01 00       	call   c0027890 <__subsf3>
c0009ff1:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ff4:	e8 76 ef 01 00       	call   c0028f6f <__extendsfdf2>
c0009ff9:	83 c4 10             	add    esp,0x10
c0009ffc:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a000:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a00c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a010:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a014:	e8 5f e5 01 00       	call   c0028578 <__muldf3>
c000a019:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a01d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a021:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a024:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a028:	e8 42 ef 01 00       	call   c0028f6f <__extendsfdf2>
c000a02d:	83 c4 10             	add    esp,0x10
c000a030:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a034:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a038:	52                   	push   edx
c000a039:	50                   	push   eax
c000a03a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a03e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a042:	e8 b4 de 01 00       	call   c0027efb <__adddf3>
c000a047:	59                   	pop    ecx
c000a048:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a04c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a050:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a056:	e8 14 ef 01 00       	call   c0028f6f <__extendsfdf2>
c000a05b:	83 c4 10             	add    esp,0x10
c000a05e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a062:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a06a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a06e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a072:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a076:	e8 fd e4 01 00       	call   c0028578 <__muldf3>
c000a07b:	83 c4 10             	add    esp,0x10
c000a07e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a082:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a086:	52                   	push   edx
c000a087:	50                   	push   eax
c000a088:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a08c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a090:	e8 66 de 01 00       	call   c0027efb <__adddf3>
c000a095:	59                   	pop    ecx
c000a096:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a09a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a09e:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0a4:	e8 c6 ee 01 00       	call   c0028f6f <__extendsfdf2>
c000a0a9:	83 c4 10             	add    esp,0x10
c000a0ac:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0bc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0c0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0c4:	e8 af e4 01 00       	call   c0028578 <__muldf3>
c000a0c9:	83 c4 10             	add    esp,0x10
c000a0cc:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0d0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d4:	52                   	push   edx
c000a0d5:	50                   	push   eax
c000a0d6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0da:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0de:	e8 18 de 01 00       	call   c0027efb <__adddf3>
c000a0e3:	59                   	pop    ecx
c000a0e4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0e8:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0ec:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0f2:	e8 78 ee 01 00       	call   c0028f6f <__extendsfdf2>
c000a0f7:	83 c4 10             	add    esp,0x10
c000a0fa:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0fe:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a102:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a106:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a10a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a10e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a112:	e8 61 e4 01 00       	call   c0028578 <__muldf3>
c000a117:	83 c4 10             	add    esp,0x10
c000a11a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a122:	52                   	push   edx
c000a123:	50                   	push   eax
c000a124:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a128:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a12c:	e8 ca dd 01 00       	call   c0027efb <__adddf3>
c000a131:	59                   	pop    ecx
c000a132:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a136:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a13a:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a140:	e8 2a ee 01 00       	call   c0028f6f <__extendsfdf2>
c000a145:	83 c4 10             	add    esp,0x10
c000a148:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a14c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a158:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a15c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a160:	e8 13 e4 01 00       	call   c0028578 <__muldf3>
c000a165:	83 c4 10             	add    esp,0x10
c000a168:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a16c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a170:	52                   	push   edx
c000a171:	50                   	push   eax
c000a172:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a176:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a17a:	e8 7c dd 01 00       	call   c0027efb <__adddf3>
c000a17f:	83 c4 10             	add    esp,0x10
c000a182:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a186:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a18a:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a18e:	0f 89 30 fe ff ff    	jns    c0009fc4 <calc_output_quad+0x8c>
c000a194:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a198:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a19c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1a0:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1a4:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ac:	29 c8                	sub    eax,ecx
c000a1ae:	99                   	cdq    
c000a1af:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1b3:	31 d2                	xor    edx,edx
c000a1b5:	0f af d8             	imul   ebx,eax
c000a1b8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1bc:	40                   	inc    eax
c000a1bd:	01 cb                	add    ebx,ecx
c000a1bf:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1c4:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1c8:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1d0:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1d3:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1db:	31 c0                	xor    eax,eax
c000a1dd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1e1:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1e9:	89 d8                	mov    eax,ebx
c000a1eb:	83 ee 10             	sub    esi,0x10
c000a1ee:	e8 d7 f6 ff ff       	call   c00098ca <fp_to_double>
c000a1f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1fb:	89 d8                	mov    eax,ebx
c000a1fd:	e8 be f6 ff ff       	call   c00098c0 <fp_to_int>
c000a202:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a206:	52                   	push   edx
c000a207:	52                   	push   edx
c000a208:	57                   	push   edi
c000a209:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a20d:	e8 7e d6 01 00       	call   c0027890 <__subsf3>
c000a212:	89 04 24             	mov    DWORD PTR [esp],eax
c000a215:	e8 55 ed 01 00       	call   c0028f6f <__extendsfdf2>
c000a21a:	83 c4 10             	add    esp,0x10
c000a21d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a221:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a225:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a229:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a22d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a231:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a235:	e8 3e e3 01 00       	call   c0028578 <__muldf3>
c000a23a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a23d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a241:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a245:	e8 25 ed 01 00       	call   c0028f6f <__extendsfdf2>
c000a24a:	83 c4 10             	add    esp,0x10
c000a24d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a251:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a255:	52                   	push   edx
c000a256:	50                   	push   eax
c000a257:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a25b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a25f:	e8 97 dc 01 00       	call   c0027efb <__adddf3>
c000a264:	59                   	pop    ecx
c000a265:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a269:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a26d:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a273:	e8 f7 ec 01 00       	call   c0028f6f <__extendsfdf2>
c000a278:	83 c4 10             	add    esp,0x10
c000a27b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a27f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a283:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a287:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a28b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a28f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a293:	e8 e0 e2 01 00       	call   c0028578 <__muldf3>
c000a298:	83 c4 10             	add    esp,0x10
c000a29b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a3:	52                   	push   edx
c000a2a4:	50                   	push   eax
c000a2a5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2a9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2ad:	e8 49 dc 01 00       	call   c0027efb <__adddf3>
c000a2b2:	5f                   	pop    edi
c000a2b3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2b7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2bb:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2c1:	e8 a9 ec 01 00       	call   c0028f6f <__extendsfdf2>
c000a2c6:	83 c4 10             	add    esp,0x10
c000a2c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2e1:	e8 92 e2 01 00       	call   c0028578 <__muldf3>
c000a2e6:	83 c4 10             	add    esp,0x10
c000a2e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2f1:	52                   	push   edx
c000a2f2:	50                   	push   eax
c000a2f3:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2f7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2fb:	e8 fb db 01 00       	call   c0027efb <__adddf3>
c000a300:	59                   	pop    ecx
c000a301:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a305:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a309:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a30f:	e8 5b ec 01 00       	call   c0028f6f <__extendsfdf2>
c000a314:	83 c4 10             	add    esp,0x10
c000a317:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a31f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a323:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a327:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a32b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a32f:	e8 44 e2 01 00       	call   c0028578 <__muldf3>
c000a334:	83 c4 10             	add    esp,0x10
c000a337:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a33b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33f:	52                   	push   edx
c000a340:	50                   	push   eax
c000a341:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a345:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a349:	e8 ad db 01 00       	call   c0027efb <__adddf3>
c000a34e:	5f                   	pop    edi
c000a34f:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a353:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a357:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a35d:	e8 0d ec 01 00       	call   c0028f6f <__extendsfdf2>
c000a362:	83 c4 10             	add    esp,0x10
c000a365:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a369:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a36d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a371:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a375:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a379:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a37d:	e8 f6 e1 01 00       	call   c0028578 <__muldf3>
c000a382:	83 c4 10             	add    esp,0x10
c000a385:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a389:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a38d:	52                   	push   edx
c000a38e:	50                   	push   eax
c000a38f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a393:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a397:	e8 5f db 01 00       	call   c0027efb <__adddf3>
c000a39c:	83 c4 10             	add    esp,0x10
c000a39f:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3a3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3a7:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3ab:	85 db                	test   ebx,ebx
c000a3ad:	0f 8f 36 fe ff ff    	jg     c000a1e9 <calc_output_quad+0x2b1>
c000a3b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3c3:	e8 33 db 01 00       	call   c0027efb <__adddf3>
c000a3c8:	83 c4 10             	add    esp,0x10
c000a3cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3e3:	e8 90 e1 01 00       	call   c0028578 <__muldf3>
c000a3e8:	59                   	pop    ecx
c000a3e9:	5b                   	pop    ebx
c000a3ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fa:	e8 4c ea 01 00       	call   c0028e4b <__truncdfsf2>
c000a3ff:	83 c4 10             	add    esp,0x10
c000a402:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a409:	89 06                	mov    DWORD PTR [esi],eax
c000a40b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a40f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a413:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a417:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a41b:	e8 db da 01 00       	call   c0027efb <__adddf3>
c000a420:	83 c4 10             	add    esp,0x10
c000a423:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a427:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a42b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a42f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a433:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a437:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a43b:	e8 38 e1 01 00       	call   c0028578 <__muldf3>
c000a440:	5e                   	pop    esi
c000a441:	5f                   	pop    edi
c000a442:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a446:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a44a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a452:	e8 f4 e9 01 00       	call   c0028e4b <__truncdfsf2>
c000a457:	83 c4 10             	add    esp,0x10
c000a45a:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a461:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a464:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a468:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a470:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a474:	e8 82 da 01 00       	call   c0027efb <__adddf3>
c000a479:	83 c4 10             	add    esp,0x10
c000a47c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a480:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a490:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a494:	e8 df e0 01 00       	call   c0028578 <__muldf3>
c000a499:	5d                   	pop    ebp
c000a49a:	59                   	pop    ecx
c000a49b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a49f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ab:	e8 9b e9 01 00       	call   c0028e4b <__truncdfsf2>
c000a4b0:	83 c4 10             	add    esp,0x10
c000a4b3:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4ba:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4c1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4c5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4c9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4cd:	e8 29 da 01 00       	call   c0027efb <__adddf3>
c000a4d2:	83 c4 10             	add    esp,0x10
c000a4d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ed:	e8 86 e0 01 00       	call   c0028578 <__muldf3>
c000a4f2:	5b                   	pop    ebx
c000a4f3:	5e                   	pop    esi
c000a4f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4f8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a500:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a504:	e8 42 e9 01 00       	call   c0028e4b <__truncdfsf2>
c000a509:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a510:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a513:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a519:	5b                   	pop    ebx
c000a51a:	5e                   	pop    esi
c000a51b:	5f                   	pop    edi
c000a51c:	5d                   	pop    ebp
c000a51d:	c3                   	ret    

c000a51e <calc_output_hex>:
c000a51e:	55                   	push   ebp
c000a51f:	89 cd                	mov    ebp,ecx
c000a521:	57                   	push   edi
c000a522:	56                   	push   esi
c000a523:	53                   	push   ebx
c000a524:	89 c3                	mov    ebx,eax
c000a526:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a52c:	89 14 24             	mov    DWORD PTR [esp],edx
c000a52f:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a536:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a53d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a545:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a548:	e8 6f f3 ff ff       	call   c00098bc <int_to_fp>
c000a54d:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a550:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a554:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a557:	29 c8                	sub    eax,ecx
c000a559:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a55d:	99                   	cdq    
c000a55e:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a566:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a569:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a571:	0f af f8             	imul   edi,eax
c000a574:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a577:	01 cf                	add    edi,ecx
c000a579:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a57d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a580:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a584:	0f af c2             	imul   eax,edx
c000a587:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a58b:	29 c1                	sub    ecx,eax
c000a58d:	31 d2                	xor    edx,edx
c000a58f:	31 c0                	xor    eax,eax
c000a591:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a594:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a598:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a59c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5a0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5a4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5a8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ac:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5b0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5bc:	89 f8                	mov    eax,edi
c000a5be:	e8 07 f3 ff ff       	call   c00098ca <fp_to_double>
c000a5c3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5c7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5cb:	89 f8                	mov    eax,edi
c000a5cd:	e8 ee f2 ff ff       	call   c00098c0 <fp_to_int>
c000a5d2:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5d6:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5d9:	52                   	push   edx
c000a5da:	52                   	push   edx
c000a5db:	51                   	push   ecx
c000a5dc:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5e0:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5e7:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5eb:	e8 a0 d2 01 00       	call   c0027890 <__subsf3>
c000a5f0:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5f3:	e8 77 e9 01 00       	call   c0028f6f <__extendsfdf2>
c000a5f8:	83 c4 10             	add    esp,0x10
c000a5fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a603:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a607:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a60b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a60f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a613:	e8 60 df 01 00       	call   c0028578 <__muldf3>
c000a618:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a61c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a620:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a623:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a627:	e8 43 e9 01 00       	call   c0028f6f <__extendsfdf2>
c000a62c:	83 c4 10             	add    esp,0x10
c000a62f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a633:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a637:	52                   	push   edx
c000a638:	50                   	push   eax
c000a639:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a63d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a641:	e8 b5 d8 01 00       	call   c0027efb <__adddf3>
c000a646:	59                   	pop    ecx
c000a647:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a64b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a64f:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a655:	e8 15 e9 01 00       	call   c0028f6f <__extendsfdf2>
c000a65a:	83 c4 10             	add    esp,0x10
c000a65d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a661:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a665:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a669:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a66d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a671:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a675:	e8 fe de 01 00       	call   c0028578 <__muldf3>
c000a67a:	83 c4 10             	add    esp,0x10
c000a67d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a681:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a685:	52                   	push   edx
c000a686:	50                   	push   eax
c000a687:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a68b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a68f:	e8 67 d8 01 00       	call   c0027efb <__adddf3>
c000a694:	59                   	pop    ecx
c000a695:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a699:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a69d:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6a3:	e8 c7 e8 01 00       	call   c0028f6f <__extendsfdf2>
c000a6a8:	83 c4 10             	add    esp,0x10
c000a6ab:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6af:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6bb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6bf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6c3:	e8 b0 de 01 00       	call   c0028578 <__muldf3>
c000a6c8:	83 c4 10             	add    esp,0x10
c000a6cb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cf:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d3:	52                   	push   edx
c000a6d4:	50                   	push   eax
c000a6d5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6d9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6dd:	e8 19 d8 01 00       	call   c0027efb <__adddf3>
c000a6e2:	59                   	pop    ecx
c000a6e3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6e7:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6eb:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6f1:	e8 79 e8 01 00       	call   c0028f6f <__extendsfdf2>
c000a6f6:	83 c4 10             	add    esp,0x10
c000a6f9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6fd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a701:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a705:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a709:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a70d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a711:	e8 62 de 01 00       	call   c0028578 <__muldf3>
c000a716:	83 c4 10             	add    esp,0x10
c000a719:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a721:	52                   	push   edx
c000a722:	50                   	push   eax
c000a723:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a727:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a72b:	e8 cb d7 01 00       	call   c0027efb <__adddf3>
c000a730:	59                   	pop    ecx
c000a731:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a735:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a739:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a73f:	e8 2b e8 01 00       	call   c0028f6f <__extendsfdf2>
c000a744:	83 c4 10             	add    esp,0x10
c000a747:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a74f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a753:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a757:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a75b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a75f:	e8 14 de 01 00       	call   c0028578 <__muldf3>
c000a764:	83 c4 10             	add    esp,0x10
c000a767:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a76b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76f:	52                   	push   edx
c000a770:	50                   	push   eax
c000a771:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a775:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a779:	e8 7d d7 01 00       	call   c0027efb <__adddf3>
c000a77e:	59                   	pop    ecx
c000a77f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a783:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a787:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a78d:	e8 dd e7 01 00       	call   c0028f6f <__extendsfdf2>
c000a792:	83 c4 10             	add    esp,0x10
c000a795:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a799:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7a5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7ad:	e8 c6 dd 01 00       	call   c0028578 <__muldf3>
c000a7b2:	83 c4 10             	add    esp,0x10
c000a7b5:	83 c6 18             	add    esi,0x18
c000a7b8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7bc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7c0:	52                   	push   edx
c000a7c1:	50                   	push   eax
c000a7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ca:	e8 2c d7 01 00       	call   c0027efb <__adddf3>
c000a7cf:	59                   	pop    ecx
c000a7d0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7d4:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7d8:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7de:	e8 8c e7 01 00       	call   c0028f6f <__extendsfdf2>
c000a7e3:	83 c4 10             	add    esp,0x10
c000a7e6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ea:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7f6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7fa:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7fe:	e8 75 dd 01 00       	call   c0028578 <__muldf3>
c000a803:	83 c4 10             	add    esp,0x10
c000a806:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a80a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a80e:	52                   	push   edx
c000a80f:	50                   	push   eax
c000a810:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a814:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a818:	e8 de d6 01 00       	call   c0027efb <__adddf3>
c000a81d:	83 c4 10             	add    esp,0x10
c000a820:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a824:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a828:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a82b:	0f 89 8b fd ff ff    	jns    c000a5bc <calc_output_hex+0x9e>
c000a831:	31 f6                	xor    esi,esi
c000a833:	31 ff                	xor    edi,edi
c000a835:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a839:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a83c:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a840:	29 e9                	sub    ecx,ebp
c000a842:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a846:	29 c8                	sub    eax,ecx
c000a848:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a84b:	99                   	cdq    
c000a84c:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a850:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a853:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a857:	0f af e8             	imul   ebp,eax
c000a85a:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a85e:	40                   	inc    eax
c000a85f:	01 cd                	add    ebp,ecx
c000a861:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a866:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a86a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a86e:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a872:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a875:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a879:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a87d:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a881:	89 e8                	mov    eax,ebp
c000a883:	e8 42 f0 ff ff       	call   c00098ca <fp_to_double>
c000a888:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a88c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a890:	89 e8                	mov    eax,ebp
c000a892:	e8 29 f0 ff ff       	call   c00098c0 <fp_to_int>
c000a897:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a89b:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a89e:	52                   	push   edx
c000a89f:	52                   	push   edx
c000a8a0:	51                   	push   ecx
c000a8a1:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8a8:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8af:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8b3:	e8 d8 cf 01 00       	call   c0027890 <__subsf3>
c000a8b8:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8bb:	e8 af e6 01 00       	call   c0028f6f <__extendsfdf2>
c000a8c0:	83 c4 10             	add    esp,0x10
c000a8c3:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8c7:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8d3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8d7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8db:	e8 98 dc 01 00       	call   c0028578 <__muldf3>
c000a8e0:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8e7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8eb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8ee:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8f2:	e8 78 e6 01 00       	call   c0028f6f <__extendsfdf2>
c000a8f7:	83 c4 10             	add    esp,0x10
c000a8fa:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8fe:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a902:	52                   	push   edx
c000a903:	50                   	push   eax
c000a904:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a908:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a90c:	e8 ea d5 01 00       	call   c0027efb <__adddf3>
c000a911:	59                   	pop    ecx
c000a912:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a916:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a91a:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a920:	e8 4a e6 01 00       	call   c0028f6f <__extendsfdf2>
c000a925:	83 c4 10             	add    esp,0x10
c000a928:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a92c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a930:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a934:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a938:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a93c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a940:	e8 33 dc 01 00       	call   c0028578 <__muldf3>
c000a945:	83 c4 10             	add    esp,0x10
c000a948:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a950:	52                   	push   edx
c000a951:	50                   	push   eax
c000a952:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a956:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a95a:	e8 9c d5 01 00       	call   c0027efb <__adddf3>
c000a95f:	59                   	pop    ecx
c000a960:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a964:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a968:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a96e:	e8 fc e5 01 00       	call   c0028f6f <__extendsfdf2>
c000a973:	83 c4 10             	add    esp,0x10
c000a976:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a97e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a982:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a986:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a98a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a98e:	e8 e5 db 01 00       	call   c0028578 <__muldf3>
c000a993:	83 c4 10             	add    esp,0x10
c000a996:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a99a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99e:	52                   	push   edx
c000a99f:	50                   	push   eax
c000a9a0:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9a4:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9a8:	e8 4e d5 01 00       	call   c0027efb <__adddf3>
c000a9ad:	59                   	pop    ecx
c000a9ae:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9b2:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9b6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9bc:	e8 ae e5 01 00       	call   c0028f6f <__extendsfdf2>
c000a9c1:	83 c4 10             	add    esp,0x10
c000a9c4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9c8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9d4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9d8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9dc:	e8 97 db 01 00       	call   c0028578 <__muldf3>
c000a9e1:	83 c4 10             	add    esp,0x10
c000a9e4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ec:	52                   	push   edx
c000a9ed:	50                   	push   eax
c000a9ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9f6:	e8 00 d5 01 00       	call   c0027efb <__adddf3>
c000a9fb:	59                   	pop    ecx
c000a9fc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa00:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa04:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa0a:	e8 60 e5 01 00       	call   c0028f6f <__extendsfdf2>
c000aa0f:	83 c4 10             	add    esp,0x10
c000aa12:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa16:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa22:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa26:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa2a:	e8 49 db 01 00       	call   c0028578 <__muldf3>
c000aa2f:	83 c4 10             	add    esp,0x10
c000aa32:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa36:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa3a:	52                   	push   edx
c000aa3b:	50                   	push   eax
c000aa3c:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa40:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa44:	e8 b2 d4 01 00       	call   c0027efb <__adddf3>
c000aa49:	59                   	pop    ecx
c000aa4a:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa4e:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa52:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa58:	e8 12 e5 01 00       	call   c0028f6f <__extendsfdf2>
c000aa5d:	83 c4 10             	add    esp,0x10
c000aa60:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa64:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa70:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa74:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa78:	e8 fb da 01 00       	call   c0028578 <__muldf3>
c000aa7d:	83 c4 10             	add    esp,0x10
c000aa80:	83 eb 18             	sub    ebx,0x18
c000aa83:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa87:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa8b:	52                   	push   edx
c000aa8c:	50                   	push   eax
c000aa8d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa91:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa95:	e8 61 d4 01 00       	call   c0027efb <__adddf3>
c000aa9a:	59                   	pop    ecx
c000aa9b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa9f:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aaa3:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aaa9:	e8 c1 e4 01 00       	call   c0028f6f <__extendsfdf2>
c000aaae:	83 c4 10             	add    esp,0x10
c000aab1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aab5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aab9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aabd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aac1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aac5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aac9:	e8 aa da 01 00       	call   c0028578 <__muldf3>
c000aace:	83 c4 10             	add    esp,0x10
c000aad1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aad5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aad9:	52                   	push   edx
c000aada:	50                   	push   eax
c000aadb:	57                   	push   edi
c000aadc:	56                   	push   esi
c000aadd:	e8 19 d4 01 00       	call   c0027efb <__adddf3>
c000aae2:	83 c4 10             	add    esp,0x10
c000aae5:	89 c6                	mov    esi,eax
c000aae7:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aaea:	89 d7                	mov    edi,edx
c000aaec:	85 ed                	test   ebp,ebp
c000aaee:	0f 8f 8d fd ff ff    	jg     c000a881 <calc_output_hex+0x363>
c000aaf4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aaf8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aafc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab00:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab04:	e8 f2 d3 01 00       	call   c0027efb <__adddf3>
c000ab09:	83 c4 10             	add    esp,0x10
c000ab0c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab0f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab13:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab17:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab23:	e8 50 da 01 00       	call   c0028578 <__muldf3>
c000ab28:	59                   	pop    ecx
c000ab29:	5b                   	pop    ebx
c000ab2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3a:	e8 0c e3 01 00       	call   c0028e4b <__truncdfsf2>
c000ab3f:	83 c4 10             	add    esp,0x10
c000ab42:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab49:	89 03                	mov    DWORD PTR [ebx],eax
c000ab4b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab4f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab53:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab57:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab5b:	e8 9b d3 01 00       	call   c0027efb <__adddf3>
c000ab60:	83 c4 10             	add    esp,0x10
c000ab63:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab66:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab6a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab6e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab72:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab76:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab7a:	e8 f9 d9 01 00       	call   c0028578 <__muldf3>
c000ab7f:	5d                   	pop    ebp
c000ab80:	59                   	pop    ecx
c000ab81:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab85:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab89:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab91:	e8 b5 e2 01 00       	call   c0028e4b <__truncdfsf2>
c000ab96:	83 c4 10             	add    esp,0x10
c000ab99:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aba0:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000aba3:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aba7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abab:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abaf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abb3:	e8 43 d3 01 00       	call   c0027efb <__adddf3>
c000abb8:	83 c4 10             	add    esp,0x10
c000abbb:	89 04 24             	mov    DWORD PTR [esp],eax
c000abbe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abc2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abd2:	e8 a1 d9 01 00       	call   c0028578 <__muldf3>
c000abd7:	5b                   	pop    ebx
c000abd8:	5d                   	pop    ebp
c000abd9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abdd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abe1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe9:	e8 5d e2 01 00       	call   c0028e4b <__truncdfsf2>
c000abee:	83 c4 10             	add    esp,0x10
c000abf1:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abf8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abfb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abff:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac03:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac07:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac0b:	e8 eb d2 01 00       	call   c0027efb <__adddf3>
c000ac10:	83 c4 10             	add    esp,0x10
c000ac13:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac16:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac1e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac22:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac26:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac2a:	e8 49 d9 01 00       	call   c0028578 <__muldf3>
c000ac2f:	59                   	pop    ecx
c000ac30:	5b                   	pop    ebx
c000ac31:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac35:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac41:	e8 05 e2 01 00       	call   c0028e4b <__truncdfsf2>
c000ac46:	83 c4 10             	add    esp,0x10
c000ac49:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac50:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac53:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac57:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac5b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac5f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac63:	e8 93 d2 01 00       	call   c0027efb <__adddf3>
c000ac68:	83 c4 10             	add    esp,0x10
c000ac6b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac72:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac76:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac82:	e8 f1 d8 01 00       	call   c0028578 <__muldf3>
c000ac87:	5d                   	pop    ebp
c000ac88:	59                   	pop    ecx
c000ac89:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac99:	e8 ad e1 01 00       	call   c0028e4b <__truncdfsf2>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aca8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acab:	57                   	push   edi
c000acac:	56                   	push   esi
c000acad:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acb1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acb5:	e8 41 d2 01 00       	call   c0027efb <__adddf3>
c000acba:	83 c4 10             	add    esp,0x10
c000acbd:	89 04 24             	mov    DWORD PTR [esp],eax
c000acc0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000acc4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acc8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acd0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acd4:	e8 9f d8 01 00       	call   c0028578 <__muldf3>
c000acd9:	5b                   	pop    ebx
c000acda:	5e                   	pop    esi
c000acdb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acdf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ace3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aceb:	e8 5b e1 01 00       	call   c0028e4b <__truncdfsf2>
c000acf0:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acf7:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acfa:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad00:	5b                   	pop    ebx
c000ad01:	5e                   	pop    esi
c000ad02:	5f                   	pop    edi
c000ad03:	5d                   	pop    ebp
c000ad04:	c3                   	ret    

c000ad05 <sinc_reset>:
c000ad05:	56                   	push   esi
c000ad06:	53                   	push   ebx
c000ad07:	51                   	push   ecx
c000ad08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad0c:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad0f:	85 db                	test   ebx,ebx
c000ad11:	74 59                	je     c000ad6c <sinc_reset+0x67>
c000ad13:	31 d2                	xor    edx,edx
c000ad15:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad1c:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad1f:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad22:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad29:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad30:	31 c0                	xor    eax,eax
c000ad32:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad38:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad3b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad3e:	52                   	push   edx
c000ad3f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad42:	c1 e0 02             	shl    eax,0x2
c000ad45:	50                   	push   eax
c000ad46:	6a 00                	push   0x0
c000ad48:	56                   	push   esi
c000ad49:	e8 1e 5a ff ff       	call   c000076c <memset>
c000ad4e:	83 c4 0c             	add    esp,0xc
c000ad51:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad54:	c1 e0 02             	shl    eax,0x2
c000ad57:	50                   	push   eax
c000ad58:	68 aa 00 00 00       	push   0xaa
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad63:	50                   	push   eax
c000ad64:	e8 03 5a ff ff       	call   c000076c <memset>
c000ad69:	83 c4 10             	add    esp,0x10
c000ad6c:	58                   	pop    eax
c000ad6d:	5b                   	pop    ebx
c000ad6e:	5e                   	pop    esi
c000ad6f:	c3                   	ret    

c000ad70 <calc_output_multi>:
c000ad70:	55                   	push   ebp
c000ad71:	57                   	push   edi
c000ad72:	56                   	push   esi
c000ad73:	89 c6                	mov    esi,eax
c000ad75:	53                   	push   ebx
c000ad76:	83 ec 4c             	sub    esp,0x4c
c000ad79:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad7d:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad81:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad85:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad89:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad95:	8d 46 44             	lea    eax,[esi+0x44]
c000ad98:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad9b:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ada1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ada5:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ada8:	e8 0f eb ff ff       	call   c00098bc <int_to_fp>
c000adad:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adb0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000adb4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000adb8:	99                   	cdq    
c000adb9:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000adbd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000adc1:	0f af d0             	imul   edx,eax
c000adc4:	0f af c3             	imul   eax,ebx
c000adc7:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adcb:	29 c1                	sub    ecx,eax
c000adcd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000add1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000add5:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000addc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ade0:	57                   	push   edi
c000ade1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ade5:	6a 00                	push   0x0
c000ade7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adeb:	e8 7c 59 ff ff       	call   c000076c <memset>
c000adf0:	83 c4 10             	add    esp,0x10
c000adf3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adf7:	89 df                	mov    edi,ebx
c000adf9:	e8 cc ea ff ff       	call   c00098ca <fp_to_double>
c000adfe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae02:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae06:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae0a:	e8 b1 ea ff ff       	call   c00098c0 <fp_to_int>
c000ae0f:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae12:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae15:	51                   	push   ecx
c000ae16:	51                   	push   ecx
c000ae17:	55                   	push   ebp
c000ae18:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae1c:	e8 6f ca 01 00       	call   c0027890 <__subsf3>
c000ae21:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae24:	e8 46 e1 01 00       	call   c0028f6f <__extendsfdf2>
c000ae29:	83 c4 10             	add    esp,0x10
c000ae2c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae30:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae3c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae40:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae44:	e8 2f d7 01 00       	call   c0028578 <__muldf3>
c000ae49:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae4c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae50:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae54:	e8 16 e1 01 00       	call   c0028f6f <__extendsfdf2>
c000ae59:	83 c4 10             	add    esp,0x10
c000ae5c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae60:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae64:	52                   	push   edx
c000ae65:	50                   	push   eax
c000ae66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae6e:	e8 88 d0 01 00       	call   c0027efb <__adddf3>
c000ae73:	83 c4 10             	add    esp,0x10
c000ae76:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae7a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae7e:	89 f8                	mov    eax,edi
c000ae80:	b9 08 00 00 00       	mov    ecx,0x8
c000ae85:	99                   	cdq    
c000ae86:	f7 f9                	idiv   ecx
c000ae88:	4a                   	dec    edx
c000ae89:	83 fa 06             	cmp    edx,0x6
c000ae8c:	77 07                	ja     c000ae95 <calc_output_multi+0x125>
c000ae8e:	ff 24 95 84 a8 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd577c]
c000ae95:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae98:	4f                   	dec    edi
c000ae99:	83 ec 0c             	sub    esp,0xc
c000ae9c:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aea3:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeaa:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aeae:	e8 bc e0 01 00       	call   c0028f6f <__extendsfdf2>
c000aeb3:	83 c4 10             	add    esp,0x10
c000aeb6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aeba:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aebe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aec2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aec6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeca:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aece:	e8 a5 d6 01 00       	call   c0028578 <__muldf3>
c000aed3:	83 c4 10             	add    esp,0x10
c000aed6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aeda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aede:	52                   	push   edx
c000aedf:	50                   	push   eax
c000aee0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aee3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aee6:	e8 10 d0 01 00       	call   c0027efb <__adddf3>
c000aeeb:	83 c4 10             	add    esp,0x10
c000aeee:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aef1:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aef4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aef7:	4f                   	dec    edi
c000aef8:	83 ec 0c             	sub    esp,0xc
c000aefb:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aefe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af02:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af09:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af0d:	e8 5d e0 01 00       	call   c0028f6f <__extendsfdf2>
c000af12:	83 c4 10             	add    esp,0x10
c000af15:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af19:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af25:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af29:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af2d:	e8 46 d6 01 00       	call   c0028578 <__muldf3>
c000af32:	83 c4 10             	add    esp,0x10
c000af35:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af39:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3d:	52                   	push   edx
c000af3e:	50                   	push   eax
c000af3f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af42:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af45:	e8 b1 cf 01 00       	call   c0027efb <__adddf3>
c000af4a:	83 c4 10             	add    esp,0x10
c000af4d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af50:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af53:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af56:	4f                   	dec    edi
c000af57:	83 ec 0c             	sub    esp,0xc
c000af5a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af61:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af68:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af6c:	e8 fe df 01 00       	call   c0028f6f <__extendsfdf2>
c000af71:	83 c4 10             	add    esp,0x10
c000af74:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af78:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af84:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af88:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af8c:	e8 e7 d5 01 00       	call   c0028578 <__muldf3>
c000af91:	83 c4 10             	add    esp,0x10
c000af94:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af98:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9c:	52                   	push   edx
c000af9d:	50                   	push   eax
c000af9e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afa1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afa4:	e8 52 cf 01 00       	call   c0027efb <__adddf3>
c000afa9:	83 c4 10             	add    esp,0x10
c000afac:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afaf:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afb2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afb5:	4f                   	dec    edi
c000afb6:	83 ec 0c             	sub    esp,0xc
c000afb9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afbc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afc0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afc7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afcb:	e8 9f df 01 00       	call   c0028f6f <__extendsfdf2>
c000afd0:	83 c4 10             	add    esp,0x10
c000afd3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afd7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afdf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afe3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afe7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afeb:	e8 88 d5 01 00       	call   c0028578 <__muldf3>
c000aff0:	83 c4 10             	add    esp,0x10
c000aff3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000affb:	52                   	push   edx
c000affc:	50                   	push   eax
c000affd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b000:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b003:	e8 f3 ce 01 00       	call   c0027efb <__adddf3>
c000b008:	83 c4 10             	add    esp,0x10
c000b00b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b00e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b011:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b014:	4f                   	dec    edi
c000b015:	83 ec 0c             	sub    esp,0xc
c000b018:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b01b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b01f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b026:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b02a:	e8 40 df 01 00       	call   c0028f6f <__extendsfdf2>
c000b02f:	83 c4 10             	add    esp,0x10
c000b032:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b036:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b03e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b042:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b046:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b04a:	e8 29 d5 01 00       	call   c0028578 <__muldf3>
c000b04f:	83 c4 10             	add    esp,0x10
c000b052:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b056:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b05a:	52                   	push   edx
c000b05b:	50                   	push   eax
c000b05c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b05f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b062:	e8 94 ce 01 00       	call   c0027efb <__adddf3>
c000b067:	83 c4 10             	add    esp,0x10
c000b06a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b06d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b070:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b073:	4f                   	dec    edi
c000b074:	83 ec 0c             	sub    esp,0xc
c000b077:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b07a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b07e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b085:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b089:	e8 e1 de 01 00       	call   c0028f6f <__extendsfdf2>
c000b08e:	83 c4 10             	add    esp,0x10
c000b091:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b095:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b099:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b09d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0a1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0a5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0a9:	e8 ca d4 01 00       	call   c0028578 <__muldf3>
c000b0ae:	83 c4 10             	add    esp,0x10
c000b0b1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b9:	52                   	push   edx
c000b0ba:	50                   	push   eax
c000b0bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0c1:	e8 35 ce 01 00       	call   c0027efb <__adddf3>
c000b0c6:	83 c4 10             	add    esp,0x10
c000b0c9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0cc:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0cf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0d2:	4f                   	dec    edi
c000b0d3:	83 ec 0c             	sub    esp,0xc
c000b0d6:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0dd:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0e4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0e8:	e8 82 de 01 00       	call   c0028f6f <__extendsfdf2>
c000b0ed:	83 c4 10             	add    esp,0x10
c000b0f0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b100:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b104:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b108:	e8 6b d4 01 00       	call   c0028578 <__muldf3>
c000b10d:	83 c4 10             	add    esp,0x10
c000b110:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b114:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b118:	52                   	push   edx
c000b119:	50                   	push   eax
c000b11a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b11d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b120:	e8 d6 cd 01 00       	call   c0027efb <__adddf3>
c000b125:	83 c4 10             	add    esp,0x10
c000b128:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b12b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b12e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b131:	4f                   	dec    edi
c000b132:	83 ec 0c             	sub    esp,0xc
c000b135:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b138:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b13c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b143:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b147:	e8 23 de 01 00       	call   c0028f6f <__extendsfdf2>
c000b14c:	83 c4 10             	add    esp,0x10
c000b14f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b153:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b157:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b15b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b15f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b163:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b167:	e8 0c d4 01 00       	call   c0028578 <__muldf3>
c000b16c:	83 c4 10             	add    esp,0x10
c000b16f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b173:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b177:	52                   	push   edx
c000b178:	50                   	push   eax
c000b179:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b17c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b17f:	e8 77 cd 01 00       	call   c0027efb <__adddf3>
c000b184:	83 c4 10             	add    esp,0x10
c000b187:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b18a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b18d:	85 ff                	test   edi,edi
c000b18f:	0f 8f e9 fc ff ff    	jg     c000ae7e <calc_output_multi+0x10e>
c000b195:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b199:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b19d:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1a1:	0f 89 4c fc ff ff    	jns    c000adf3 <calc_output_multi+0x83>
c000b1a7:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1ab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1af:	29 c8                	sub    eax,ecx
c000b1b1:	99                   	cdq    
c000b1b2:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1b6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1ba:	0f af d0             	imul   edx,eax
c000b1bd:	40                   	inc    eax
c000b1be:	01 d1                	add    ecx,edx
c000b1c0:	0f af c3             	imul   eax,ebx
c000b1c3:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1c7:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ce:	55                   	push   ebp
c000b1cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1d3:	6a 00                	push   0x0
c000b1d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1d9:	e8 8e 55 ff ff       	call   c000076c <memset>
c000b1de:	83 c4 10             	add    esp,0x10
c000b1e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1e5:	e8 e0 e6 ff ff       	call   c00098ca <fp_to_double>
c000b1ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1f2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1f6:	e8 c5 e6 ff ff       	call   c00098c0 <fp_to_int>
c000b1fb:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1fe:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b201:	57                   	push   edi
c000b202:	57                   	push   edi
c000b203:	89 df                	mov    edi,ebx
c000b205:	55                   	push   ebp
c000b206:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b20a:	e8 81 c6 01 00       	call   c0027890 <__subsf3>
c000b20f:	89 04 24             	mov    DWORD PTR [esp],eax
c000b212:	e8 58 dd 01 00       	call   c0028f6f <__extendsfdf2>
c000b217:	83 c4 10             	add    esp,0x10
c000b21a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b21e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b222:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b226:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b22a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b22e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b232:	e8 41 d3 01 00       	call   c0028578 <__muldf3>
c000b237:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b23a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b23e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b242:	e8 28 dd 01 00       	call   c0028f6f <__extendsfdf2>
c000b247:	83 c4 10             	add    esp,0x10
c000b24a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b24e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b252:	52                   	push   edx
c000b253:	50                   	push   eax
c000b254:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b258:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b25c:	e8 9a cc 01 00       	call   c0027efb <__adddf3>
c000b261:	83 c4 10             	add    esp,0x10
c000b264:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b268:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b26c:	89 f8                	mov    eax,edi
c000b26e:	b9 08 00 00 00       	mov    ecx,0x8
c000b273:	99                   	cdq    
c000b274:	f7 f9                	idiv   ecx
c000b276:	4a                   	dec    edx
c000b277:	83 fa 06             	cmp    edx,0x6
c000b27a:	77 07                	ja     c000b283 <calc_output_multi+0x513>
c000b27c:	ff 24 95 a0 a8 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5760]
c000b283:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b287:	4f                   	dec    edi
c000b288:	83 ec 0c             	sub    esp,0xc
c000b28b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b28e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b292:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b299:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b29d:	e8 cd dc 01 00       	call   c0028f6f <__extendsfdf2>
c000b2a2:	83 c4 10             	add    esp,0x10
c000b2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2bd:	e8 b6 d2 01 00       	call   c0028578 <__muldf3>
c000b2c2:	83 c4 10             	add    esp,0x10
c000b2c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cd:	52                   	push   edx
c000b2ce:	50                   	push   eax
c000b2cf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2d2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2d5:	e8 21 cc 01 00       	call   c0027efb <__adddf3>
c000b2da:	83 c4 10             	add    esp,0x10
c000b2dd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2e0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2e7:	4f                   	dec    edi
c000b2e8:	83 ec 0c             	sub    esp,0xc
c000b2eb:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2f2:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2f9:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2fd:	e8 6d dc 01 00       	call   c0028f6f <__extendsfdf2>
c000b302:	83 c4 10             	add    esp,0x10
c000b305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b30d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b311:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b315:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b319:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b31d:	e8 56 d2 01 00       	call   c0028578 <__muldf3>
c000b322:	83 c4 10             	add    esp,0x10
c000b325:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b329:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32d:	52                   	push   edx
c000b32e:	50                   	push   eax
c000b32f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b332:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b335:	e8 c1 cb 01 00       	call   c0027efb <__adddf3>
c000b33a:	83 c4 10             	add    esp,0x10
c000b33d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b340:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b343:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b347:	4f                   	dec    edi
c000b348:	83 ec 0c             	sub    esp,0xc
c000b34b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b34e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b352:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b359:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b35d:	e8 0d dc 01 00       	call   c0028f6f <__extendsfdf2>
c000b362:	83 c4 10             	add    esp,0x10
c000b365:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b369:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b36d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b371:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b375:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b379:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b37d:	e8 f6 d1 01 00       	call   c0028578 <__muldf3>
c000b382:	83 c4 10             	add    esp,0x10
c000b385:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b389:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38d:	52                   	push   edx
c000b38e:	50                   	push   eax
c000b38f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b392:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b395:	e8 61 cb 01 00       	call   c0027efb <__adddf3>
c000b39a:	83 c4 10             	add    esp,0x10
c000b39d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3a0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3a7:	4f                   	dec    edi
c000b3a8:	83 ec 0c             	sub    esp,0xc
c000b3ab:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3b2:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3b9:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3bd:	e8 ad db 01 00       	call   c0028f6f <__extendsfdf2>
c000b3c2:	83 c4 10             	add    esp,0x10
c000b3c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3dd:	e8 96 d1 01 00       	call   c0028578 <__muldf3>
c000b3e2:	83 c4 10             	add    esp,0x10
c000b3e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ed:	52                   	push   edx
c000b3ee:	50                   	push   eax
c000b3ef:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3f2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3f5:	e8 01 cb 01 00       	call   c0027efb <__adddf3>
c000b3fa:	83 c4 10             	add    esp,0x10
c000b3fd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b400:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b403:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b407:	4f                   	dec    edi
c000b408:	83 ec 0c             	sub    esp,0xc
c000b40b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b40e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b412:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b419:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b41d:	e8 4d db 01 00       	call   c0028f6f <__extendsfdf2>
c000b422:	83 c4 10             	add    esp,0x10
c000b425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b42d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b431:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b435:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b439:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b43d:	e8 36 d1 01 00       	call   c0028578 <__muldf3>
c000b442:	83 c4 10             	add    esp,0x10
c000b445:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b449:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44d:	52                   	push   edx
c000b44e:	50                   	push   eax
c000b44f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b452:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b455:	e8 a1 ca 01 00       	call   c0027efb <__adddf3>
c000b45a:	83 c4 10             	add    esp,0x10
c000b45d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b460:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b463:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b467:	4f                   	dec    edi
c000b468:	83 ec 0c             	sub    esp,0xc
c000b46b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b46e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b472:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b479:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b47d:	e8 ed da 01 00       	call   c0028f6f <__extendsfdf2>
c000b482:	83 c4 10             	add    esp,0x10
c000b485:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b489:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b48d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b491:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b495:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b499:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b49d:	e8 d6 d0 01 00       	call   c0028578 <__muldf3>
c000b4a2:	83 c4 10             	add    esp,0x10
c000b4a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ad:	52                   	push   edx
c000b4ae:	50                   	push   eax
c000b4af:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4b2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4b5:	e8 41 ca 01 00       	call   c0027efb <__adddf3>
c000b4ba:	83 c4 10             	add    esp,0x10
c000b4bd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4c0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4c7:	4f                   	dec    edi
c000b4c8:	83 ec 0c             	sub    esp,0xc
c000b4cb:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4d2:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4d9:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4dd:	e8 8d da 01 00       	call   c0028f6f <__extendsfdf2>
c000b4e2:	83 c4 10             	add    esp,0x10
c000b4e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4fd:	e8 76 d0 01 00       	call   c0028578 <__muldf3>
c000b502:	83 c4 10             	add    esp,0x10
c000b505:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b509:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50d:	52                   	push   edx
c000b50e:	50                   	push   eax
c000b50f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b512:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b515:	e8 e1 c9 01 00       	call   c0027efb <__adddf3>
c000b51a:	83 c4 10             	add    esp,0x10
c000b51d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b520:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b523:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b527:	4f                   	dec    edi
c000b528:	83 ec 0c             	sub    esp,0xc
c000b52b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b52e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b532:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b539:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b53d:	e8 2d da 01 00       	call   c0028f6f <__extendsfdf2>
c000b542:	83 c4 10             	add    esp,0x10
c000b545:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b549:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b54d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b551:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b555:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b559:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b55d:	e8 16 d0 01 00       	call   c0028578 <__muldf3>
c000b562:	83 c4 10             	add    esp,0x10
c000b565:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b569:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56d:	52                   	push   edx
c000b56e:	50                   	push   eax
c000b56f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b572:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b575:	e8 81 c9 01 00       	call   c0027efb <__adddf3>
c000b57a:	83 c4 10             	add    esp,0x10
c000b57d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b580:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b583:	85 ff                	test   edi,edi
c000b585:	0f 8f e1 fc ff ff    	jg     c000b26c <calc_output_multi+0x4fc>
c000b58b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b58f:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b593:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b597:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b59c:	0f 8f 3f fc ff ff    	jg     c000b1e1 <calc_output_multi+0x471>
c000b5a2:	be 08 00 00 00       	mov    esi,0x8
c000b5a7:	89 d8                	mov    eax,ebx
c000b5a9:	99                   	cdq    
c000b5aa:	f7 fe                	idiv   esi
c000b5ac:	4a                   	dec    edx
c000b5ad:	83 fa 06             	cmp    edx,0x6
c000b5b0:	77 07                	ja     c000b5b9 <calc_output_multi+0x849>
c000b5b2:	ff 24 95 bc a8 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5744]
c000b5b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5bd:	4b                   	dec    ebx
c000b5be:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5c2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5c9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5cd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5d0:	e8 26 c9 01 00       	call   c0027efb <__adddf3>
c000b5d5:	83 c4 10             	add    esp,0x10
c000b5d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5dc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5f0:	e8 83 cf 01 00       	call   c0028578 <__muldf3>
c000b5f5:	5d                   	pop    ebp
c000b5f6:	59                   	pop    ecx
c000b5f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5fb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b603:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b607:	e8 3f d8 01 00       	call   c0028e4b <__truncdfsf2>
c000b60c:	83 c4 10             	add    esp,0x10
c000b60f:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b613:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b616:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b61a:	4b                   	dec    ebx
c000b61b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b61f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b622:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b626:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b62a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b62d:	e8 c9 c8 01 00       	call   c0027efb <__adddf3>
c000b632:	83 c4 10             	add    esp,0x10
c000b635:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b639:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b63d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b641:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b64d:	e8 26 cf 01 00       	call   c0028578 <__muldf3>
c000b652:	59                   	pop    ecx
c000b653:	5f                   	pop    edi
c000b654:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b658:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b65c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b660:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b664:	e8 e2 d7 01 00       	call   c0028e4b <__truncdfsf2>
c000b669:	83 c4 10             	add    esp,0x10
c000b66c:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b670:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b673:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b677:	4b                   	dec    ebx
c000b678:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b67c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b67f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b683:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b687:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b68a:	e8 6c c8 01 00       	call   c0027efb <__adddf3>
c000b68f:	83 c4 10             	add    esp,0x10
c000b692:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b696:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b69a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b69e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6aa:	e8 c9 ce 01 00       	call   c0028578 <__muldf3>
c000b6af:	5f                   	pop    edi
c000b6b0:	5d                   	pop    ebp
c000b6b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6b5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c1:	e8 85 d7 01 00       	call   c0028e4b <__truncdfsf2>
c000b6c6:	83 c4 10             	add    esp,0x10
c000b6c9:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6cd:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6d4:	4b                   	dec    ebx
c000b6d5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6d9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6e0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6e4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6e7:	e8 0f c8 01 00       	call   c0027efb <__adddf3>
c000b6ec:	83 c4 10             	add    esp,0x10
c000b6ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b703:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b707:	e8 6c ce 01 00       	call   c0028578 <__muldf3>
c000b70c:	5d                   	pop    ebp
c000b70d:	59                   	pop    ecx
c000b70e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b712:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b716:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b71a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b71e:	e8 28 d7 01 00       	call   c0028e4b <__truncdfsf2>
c000b723:	83 c4 10             	add    esp,0x10
c000b726:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b72a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b72d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b731:	4b                   	dec    ebx
c000b732:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b736:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b739:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b73d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b741:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b744:	e8 b2 c7 01 00       	call   c0027efb <__adddf3>
c000b749:	83 c4 10             	add    esp,0x10
c000b74c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b750:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b754:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b758:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b75c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b760:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b764:	e8 0f ce 01 00       	call   c0028578 <__muldf3>
c000b769:	59                   	pop    ecx
c000b76a:	5f                   	pop    edi
c000b76b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b76f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b777:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77b:	e8 cb d6 01 00       	call   c0028e4b <__truncdfsf2>
c000b780:	83 c4 10             	add    esp,0x10
c000b783:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b787:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b78a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b78e:	4b                   	dec    ebx
c000b78f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b793:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b796:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b79a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b79e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7a1:	e8 55 c7 01 00       	call   c0027efb <__adddf3>
c000b7a6:	83 c4 10             	add    esp,0x10
c000b7a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7c1:	e8 b2 cd 01 00       	call   c0028578 <__muldf3>
c000b7c6:	5f                   	pop    edi
c000b7c7:	5d                   	pop    ebp
c000b7c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7cc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7d8:	e8 6e d6 01 00       	call   c0028e4b <__truncdfsf2>
c000b7dd:	83 c4 10             	add    esp,0x10
c000b7e0:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7e4:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7eb:	4b                   	dec    ebx
c000b7ec:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7f0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7f7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7fb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7fe:	e8 f8 c6 01 00       	call   c0027efb <__adddf3>
c000b803:	83 c4 10             	add    esp,0x10
c000b806:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b80a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b80e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b816:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b81a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b81e:	e8 55 cd 01 00       	call   c0028578 <__muldf3>
c000b823:	5d                   	pop    ebp
c000b824:	59                   	pop    ecx
c000b825:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b829:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b82d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b831:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b835:	e8 11 d6 01 00       	call   c0028e4b <__truncdfsf2>
c000b83a:	83 c4 10             	add    esp,0x10
c000b83d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b841:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b844:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b848:	4b                   	dec    ebx
c000b849:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b84d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b850:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b854:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b858:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b85b:	e8 9b c6 01 00       	call   c0027efb <__adddf3>
c000b860:	83 c4 10             	add    esp,0x10
c000b863:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b867:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b86b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b86f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b873:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b877:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b87b:	e8 f8 cc 01 00       	call   c0028578 <__muldf3>
c000b880:	59                   	pop    ecx
c000b881:	5f                   	pop    edi
c000b882:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b886:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b88a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b88e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b892:	e8 b4 d5 01 00       	call   c0028e4b <__truncdfsf2>
c000b897:	83 c4 10             	add    esp,0x10
c000b89a:	85 db                	test   ebx,ebx
c000b89c:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8a0:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8a3:	0f 8f fe fc ff ff    	jg     c000b5a7 <calc_output_multi+0x837>
c000b8a9:	83 c4 4c             	add    esp,0x4c
c000b8ac:	5b                   	pop    ebx
c000b8ad:	5e                   	pop    esi
c000b8ae:	5f                   	pop    edi
c000b8af:	5d                   	pop    ebp
c000b8b0:	c3                   	ret    

c000b8b1 <double_to_fp>:
c000b8b1:	83 ec 0c             	sub    esp,0xc
c000b8b4:	68 00 00 b0 40       	push   0x40b00000
c000b8b9:	6a 00                	push   0x0
c000b8bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8c3:	e8 b0 cc 01 00       	call   c0028578 <__muldf3>
c000b8c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8d0:	83 c4 1c             	add    esp,0x1c
c000b8d3:	e9 28 d7 01 00       	jmp    c0029000 <lrint>

c000b8d8 <prepare_data>:
c000b8d8:	55                   	push   ebp
c000b8d9:	57                   	push   edi
c000b8da:	56                   	push   esi
c000b8db:	53                   	push   ebx
c000b8dc:	83 ec 1c             	sub    esp,0x1c
c000b8df:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8e3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8e7:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8eb:	0f 89 57 01 00 00    	jns    c000ba48 <prepare_data+0x170>
c000b8f1:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8f4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8f7:	85 d2                	test   edx,edx
c000b8f9:	75 0d                	jne    c000b908 <prepare_data+0x30>
c000b8fb:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8fe:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b901:	29 d0                	sub    eax,edx
c000b903:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b906:	eb 44                	jmp    c000b94c <prepare_data+0x74>
c000b908:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b90b:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b90e:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b911:	39 c1                	cmp    ecx,eax
c000b913:	7d 04                	jge    c000b919 <prepare_data+0x41>
c000b915:	29 d0                	sub    eax,edx
c000b917:	eb 2d                	jmp    c000b946 <prepare_data+0x6e>
c000b919:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b91f:	29 d7                	sub    edi,edx
c000b921:	01 f7                	add    edi,esi
c000b923:	51                   	push   ecx
c000b924:	29 f2                	sub    edx,esi
c000b926:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b92d:	8d 14 90             	lea    edx,[eax+edx*4]
c000b930:	51                   	push   ecx
c000b931:	52                   	push   edx
c000b932:	50                   	push   eax
c000b933:	e8 6c 4d ff ff       	call   c00006a4 <memmove>
c000b938:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b93b:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b93e:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b941:	29 f0                	sub    eax,esi
c000b943:	83 c4 10             	add    esp,0x10
c000b946:	29 f0                	sub    eax,esi
c000b948:	79 02                	jns    c000b94c <prepare_data+0x74>
c000b94a:	31 c0                	xor    eax,eax
c000b94c:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b94f:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b952:	29 ef                	sub    edi,ebp
c000b954:	39 c7                	cmp    edi,eax
c000b956:	7e 02                	jle    c000b95a <prepare_data+0x82>
c000b958:	89 c7                	mov    edi,eax
c000b95a:	89 f8                	mov    eax,edi
c000b95c:	99                   	cdq    
c000b95d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b960:	b8 15 00 00 00       	mov    eax,0x15
c000b965:	29 d7                	sub    edi,edx
c000b967:	0f 88 dd 00 00 00    	js     c000ba4a <prepare_data+0x172>
c000b96d:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b970:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b973:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b976:	0f 8f ce 00 00 00    	jg     c000ba4a <prepare_data+0x172>
c000b97c:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b982:	50                   	push   eax
c000b983:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b98a:	50                   	push   eax
c000b98b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b98f:	8b 00                	mov    eax,DWORD PTR [eax]
c000b991:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b994:	50                   	push   eax
c000b995:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b998:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b99c:	50                   	push   eax
c000b99d:	e8 c1 4c ff ff       	call   c0000663 <memcpy>
c000b9a2:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9a5:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9a8:	01 fd                	add    ebp,edi
c000b9aa:	01 f9                	add    ecx,edi
c000b9ac:	83 c4 10             	add    esp,0x10
c000b9af:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9b2:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9b5:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9bc:	0f 85 86 00 00 00    	jne    c000ba48 <prepare_data+0x170>
c000b9c2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9c5:	89 e8                	mov    eax,ebp
c000b9c7:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ca:	29 c8                	sub    eax,ecx
c000b9cc:	39 f8                	cmp    eax,edi
c000b9ce:	7d 78                	jge    c000ba48 <prepare_data+0x170>
c000b9d0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9d4:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9d8:	74 6e                	je     c000ba48 <prepare_data+0x170>
c000b9da:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9dd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9e1:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9e4:	29 ef                	sub    edi,ebp
c000b9e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ea:	7c 29                	jl     c000ba15 <prepare_data+0x13d>
c000b9ec:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9ef:	29 f1                	sub    ecx,esi
c000b9f1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9f8:	55                   	push   ebp
c000b9f9:	50                   	push   eax
c000b9fa:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9fd:	50                   	push   eax
c000b9fe:	52                   	push   edx
c000b9ff:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba03:	e8 9c 4c ff ff       	call   c00006a4 <memmove>
c000ba08:	83 c4 10             	add    esp,0x10
c000ba0b:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba0e:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba11:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba15:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba18:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba1b:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba1e:	83 c6 05             	add    esi,0x5
c000ba21:	78 07                	js     c000ba2a <prepare_data+0x152>
c000ba23:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba26:	39 cf                	cmp    edi,ecx
c000ba28:	7e 04                	jle    c000ba2e <prepare_data+0x156>
c000ba2a:	89 ce                	mov    esi,ecx
c000ba2c:	29 c6                	sub    esi,eax
c000ba2e:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba31:	51                   	push   ecx
c000ba32:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba39:	51                   	push   ecx
c000ba3a:	6a 00                	push   0x0
c000ba3c:	50                   	push   eax
c000ba3d:	e8 2a 4d ff ff       	call   c000076c <memset>
c000ba42:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba45:	83 c4 10             	add    esp,0x10
c000ba48:	31 c0                	xor    eax,eax
c000ba4a:	83 c4 1c             	add    esp,0x1c
c000ba4d:	5b                   	pop    ebx
c000ba4e:	5e                   	pop    esi
c000ba4f:	5f                   	pop    edi
c000ba50:	5d                   	pop    ebp
c000ba51:	c3                   	ret    

c000ba52 <sinc_multichan_vari_process>:
c000ba52:	55                   	push   ebp
c000ba53:	ba 05 00 00 00       	mov    edx,0x5
c000ba58:	57                   	push   edi
c000ba59:	56                   	push   esi
c000ba5a:	53                   	push   ebx
c000ba5b:	83 ec 4c             	sub    esp,0x4c
c000ba5e:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba62:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba66:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba69:	85 db                	test   ebx,ebx
c000ba6b:	0f 84 9b 06 00 00    	je     c000c10c <sinc_multichan_vari_process+0x6ba>
c000ba71:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba74:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba77:	0f af c5             	imul   eax,ebp
c000ba7a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba7d:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba80:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba87:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba8e:	0f af c5             	imul   eax,ebp
c000ba91:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba94:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba97:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba99:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba9d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000baa1:	68 00 00 70 3f       	push   0x3f700000
c000baa6:	6a 00                	push   0x0
c000baa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab0:	e8 92 d3 01 00       	call   c0028e47 <__ltdf2>
c000bab5:	83 c4 10             	add    esp,0x10
c000bab8:	ba 16 00 00 00       	mov    edx,0x16
c000babd:	85 c0                	test   eax,eax
c000babf:	0f 88 47 06 00 00    	js     c000c10c <sinc_multichan_vari_process+0x6ba>
c000bac5:	68 00 00 70 40       	push   0x40700000
c000baca:	6a 00                	push   0x0
c000bacc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad4:	e8 50 d3 01 00       	call   c0028e29 <__gtdf2>
c000bad9:	83 c4 10             	add    esp,0x10
c000badc:	ba 16 00 00 00       	mov    edx,0x16
c000bae1:	85 c0                	test   eax,eax
c000bae3:	0f 8f 23 06 00 00    	jg     c000c10c <sinc_multichan_vari_process+0x6ba>
c000bae9:	83 ec 0c             	sub    esp,0xc
c000baec:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000baef:	e8 e7 d0 01 00       	call   c0028bdb <__floatsidf>
c000baf4:	83 c4 10             	add    esp,0x10
c000baf7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bafb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000baff:	68 00 00 00 40       	push   0x40000000
c000bb04:	6a 00                	push   0x0
c000bb06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb0e:	e8 e8 c3 01 00       	call   c0027efb <__adddf3>
c000bb13:	59                   	pop    ecx
c000bb14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb1c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb1f:	e8 b7 d0 01 00       	call   c0028bdb <__floatsidf>
c000bb24:	83 c4 10             	add    esp,0x10
c000bb27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2f:	52                   	push   edx
c000bb30:	50                   	push   eax
c000bb31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb39:	e8 1e cd 01 00       	call   c002885c <__divdf3>
c000bb3e:	83 c4 10             	add    esp,0x10
c000bb41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb45:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb49:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb4c:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb53:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb67:	e8 bd d2 01 00       	call   c0028e29 <__gtdf2>
c000bb6c:	83 c4 10             	add    esp,0x10
c000bb6f:	85 c0                	test   eax,eax
c000bb71:	7e 2d                	jle    c000bba0 <sinc_multichan_vari_process+0x14e>
c000bb73:	68 00 00 f0 3f       	push   0x3ff00000
c000bb78:	6a 00                	push   0x0
c000bb7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb82:	e8 c0 d2 01 00       	call   c0028e47 <__ltdf2>
c000bb87:	83 c4 10             	add    esp,0x10
c000bb8a:	85 c0                	test   eax,eax
c000bb8c:	79 4d                	jns    c000bbdb <sinc_multichan_vari_process+0x189>
c000bb8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb92:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb96:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb9a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb9e:	eb 1b                	jmp    c000bbbb <sinc_multichan_vari_process+0x169>
c000bba0:	68 00 00 f0 3f       	push   0x3ff00000
c000bba5:	6a 00                	push   0x0
c000bba7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbaf:	e8 93 d2 01 00       	call   c0028e47 <__ltdf2>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	85 c0                	test   eax,eax
c000bbb9:	79 20                	jns    c000bbdb <sinc_multichan_vari_process+0x189>
c000bbbb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbbf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbc3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbcb:	e8 8c cc 01 00       	call   c002885c <__divdf3>
c000bbd0:	83 c4 10             	add    esp,0x10
c000bbd3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbd7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbdb:	50                   	push   eax
c000bbdc:	50                   	push   eax
c000bbdd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	e8 16 d4 01 00       	call   c0029000 <lrint>
c000bbea:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbed:	40                   	inc    eax
c000bbee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbf2:	0f af c5             	imul   eax,ebp
c000bbf5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbf9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbfc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc00:	58                   	pop    eax
c000bc01:	5a                   	pop    edx
c000bc02:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc06:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc0a:	e8 f1 d3 01 00       	call   c0029000 <lrint>
c000bc0f:	83 ec 0c             	sub    esp,0xc
c000bc12:	50                   	push   eax
c000bc13:	e8 c3 cf 01 00       	call   c0028bdb <__floatsidf>
c000bc18:	83 c4 10             	add    esp,0x10
c000bc1b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc1f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc23:	52                   	push   edx
c000bc24:	50                   	push   eax
c000bc25:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc29:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc2d:	e8 1a c9 01 00       	call   c002854c <__subdf3>
c000bc32:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc36:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc3a:	83 c4 20             	add    esp,0x20
c000bc3d:	6a 00                	push   0x0
c000bc3f:	6a 00                	push   0x0
c000bc41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc49:	e8 f9 d1 01 00       	call   c0028e47 <__ltdf2>
c000bc4e:	83 c4 10             	add    esp,0x10
c000bc51:	85 c0                	test   eax,eax
c000bc53:	79 1f                	jns    c000bc74 <sinc_multichan_vari_process+0x222>
c000bc55:	68 00 00 f0 3f       	push   0x3ff00000
c000bc5a:	6a 00                	push   0x0
c000bc5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc64:	e8 92 c2 01 00       	call   c0027efb <__adddf3>
c000bc69:	83 c4 10             	add    esp,0x10
c000bc6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc74:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc77:	83 ec 10             	sub    esp,0x10
c000bc7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc7e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc91:	e8 b6 c8 01 00       	call   c002854c <__subdf3>
c000bc96:	83 c4 18             	add    esp,0x18
c000bc99:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc9d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bca1:	52                   	push   edx
c000bca2:	50                   	push   eax
c000bca3:	e8 58 d3 01 00       	call   c0029000 <lrint>
c000bca8:	0f af e8             	imul   ebp,eax
c000bcab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bcaf:	01 e8                	add    eax,ebp
c000bcb1:	99                   	cdq    
c000bcb2:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcb5:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcbc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcc0:	68 00 00 f0 3f       	push   0x3ff00000
c000bcc5:	6a 00                	push   0x0
c000bcc7:	e8 90 cb 01 00       	call   c002885c <__divdf3>
c000bccc:	83 c4 10             	add    esp,0x10
c000bccf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcd3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcd7:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcdc:	68 23 42 92 0c       	push   0xc924223
c000bce1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bce5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bce9:	e8 0d c2 01 00       	call   c0027efb <__adddf3>
c000bcee:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcf2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcf6:	83 c4 20             	add    esp,0x20
c000bcf9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd01:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd09:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd0c:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd0f:	7d 50                	jge    c000bd61 <sinc_multichan_vari_process+0x30f>
c000bd11:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd14:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd17:	01 c8                	add    eax,ecx
c000bd19:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd1c:	99                   	cdq    
c000bd1d:	f7 f9                	idiv   ecx
c000bd1f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd23:	7d 0c                	jge    c000bd31 <sinc_multichan_vari_process+0x2df>
c000bd25:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd28:	85 ed                	test   ebp,ebp
c000bd2a:	79 6b                	jns    c000bd97 <sinc_multichan_vari_process+0x345>
c000bd2c:	e9 e6 00 00 00       	jmp    c000be17 <sinc_multichan_vari_process+0x3c5>
c000bd31:	50                   	push   eax
c000bd32:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd36:	57                   	push   edi
c000bd37:	53                   	push   ebx
c000bd38:	e8 9b fb ff ff       	call   c000b8d8 <prepare_data>
c000bd3d:	83 c4 10             	add    esp,0x10
c000bd40:	89 c2                	mov    edx,eax
c000bd42:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd45:	85 c0                	test   eax,eax
c000bd47:	0f 85 bf 03 00 00    	jne    c000c10c <sinc_multichan_vari_process+0x6ba>
c000bd4d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd50:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd53:	01 c8                	add    eax,ecx
c000bd55:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd58:	99                   	cdq    
c000bd59:	f7 f9                	idiv   ecx
c000bd5b:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd5f:	7c c4                	jl     c000bd25 <sinc_multichan_vari_process+0x2d3>
c000bd61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd69:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd6c:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd77:	89 06                	mov    DWORD PTR [esi],eax
c000bd79:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd7c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd7f:	99                   	cdq    
c000bd80:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd83:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd86:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd89:	99                   	cdq    
c000bd8a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd8d:	31 d2                	xor    edx,edx
c000bd8f:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd92:	e9 75 03 00 00       	jmp    c000c10c <sinc_multichan_vari_process+0x6ba>
c000bd97:	83 ec 0c             	sub    esp,0xc
c000bd9a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd9d:	e8 39 ce 01 00       	call   c0028bdb <__floatsidf>
c000bda2:	83 c4 10             	add    esp,0x10
c000bda5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bda9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdad:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdb1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdb5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	e8 39 c1 01 00       	call   c0027efb <__adddf3>
c000bdc2:	83 c4 10             	add    esp,0x10
c000bdc5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdd1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdd5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddd:	e8 19 c1 01 00       	call   c0027efb <__adddf3>
c000bde2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bde5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bde9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bded:	e8 e9 cd 01 00       	call   c0028bdb <__floatsidf>
c000bdf2:	83 c4 10             	add    esp,0x10
c000bdf5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bdf9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bdfd:	52                   	push   edx
c000bdfe:	50                   	push   eax
c000bdff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be07:	e8 39 d0 01 00       	call   c0028e45 <__gedf2>
c000be0c:	83 c4 10             	add    esp,0x10
c000be0f:	85 c0                	test   eax,eax
c000be11:	0f 89 4a ff ff ff    	jns    c000bd61 <sinc_multichan_vari_process+0x30f>
c000be17:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be1b:	0f 8e ed 00 00 00    	jle    c000bf0e <sinc_multichan_vari_process+0x4bc>
c000be21:	83 ec 10             	sub    esp,0x10
c000be24:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be27:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be2a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be2d:	ff 36                	push   DWORD PTR [esi]
c000be2f:	e8 18 c7 01 00       	call   c002854c <__subdf3>
c000be34:	83 c4 18             	add    esp,0x18
c000be37:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be3b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be3f:	52                   	push   edx
c000be40:	50                   	push   eax
c000be41:	e8 9a d1 01 00       	call   c0028fe0 <fabs>
c000be46:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be4a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be4e:	83 c4 10             	add    esp,0x10
c000be51:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be56:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be5b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be5f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be63:	e8 c1 cf 01 00       	call   c0028e29 <__gtdf2>
c000be68:	83 c4 10             	add    esp,0x10
c000be6b:	85 c0                	test   eax,eax
c000be6d:	0f 8e 9b 00 00 00    	jle    c000bf0e <sinc_multichan_vari_process+0x4bc>
c000be73:	8b 06                	mov    eax,DWORD PTR [esi]
c000be75:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be78:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be7c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be80:	52                   	push   edx
c000be81:	50                   	push   eax
c000be82:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be85:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be88:	e8 bf c6 01 00       	call   c002854c <__subdf3>
c000be8d:	59                   	pop    ecx
c000be8e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be92:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be96:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be99:	e8 3d cd 01 00       	call   c0028bdb <__floatsidf>
c000be9e:	83 c4 10             	add    esp,0x10
c000bea1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bea5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bea9:	52                   	push   edx
c000beaa:	50                   	push   eax
c000beab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000beaf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000beb3:	e8 c0 c6 01 00       	call   c0028578 <__muldf3>
c000beb8:	5d                   	pop    ebp
c000beb9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bebd:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bec1:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bec4:	e8 12 cd 01 00       	call   c0028bdb <__floatsidf>
c000bec9:	83 c4 10             	add    esp,0x10
c000becc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bed0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bed4:	52                   	push   edx
c000bed5:	50                   	push   eax
c000bed6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	e8 79 c9 01 00       	call   c002885c <__divdf3>
c000bee3:	83 c4 10             	add    esp,0x10
c000bee6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000beea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000beee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bef2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bef6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befe:	e8 f8 bf 01 00       	call   c0027efb <__adddf3>
c000bf03:	83 c4 10             	add    esp,0x10
c000bf06:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf0a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf0e:	83 ec 0c             	sub    esp,0xc
c000bf11:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf14:	e8 c2 cc 01 00       	call   c0028bdb <__floatsidf>
c000bf19:	83 c4 10             	add    esp,0x10
c000bf1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf20:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf34:	e8 0e cf 01 00       	call   c0028e47 <__ltdf2>
c000bf39:	83 c4 10             	add    esp,0x10
c000bf3c:	85 c0                	test   eax,eax
c000bf3e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf42:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf46:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf4a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf4e:	78 10                	js     c000bf60 <sinc_multichan_vari_process+0x50e>
c000bf50:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf54:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf58:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf5c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf68:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf6c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf70:	e8 03 c6 01 00       	call   c0028578 <__muldf3>
c000bf75:	59                   	pop    ecx
c000bf76:	5d                   	pop    ebp
c000bf77:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf7b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf87:	e8 25 f9 ff ff       	call   c000b8b1 <double_to_fp>
c000bf8c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf90:	89 c5                	mov    ebp,eax
c000bf92:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf96:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf9a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf9e:	e8 d5 c5 01 00       	call   c0028578 <__muldf3>
c000bfa3:	83 c4 18             	add    esp,0x18
c000bfa6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfaa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfae:	52                   	push   edx
c000bfaf:	50                   	push   eax
c000bfb0:	e8 fc f8 ff ff       	call   c000b8b1 <double_to_fp>
c000bfb5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfb8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfbc:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfbf:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfc2:	50                   	push   eax
c000bfc3:	50                   	push   eax
c000bfc4:	50                   	push   eax
c000bfc5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfc8:	e8 0e cc 01 00       	call   c0028bdb <__floatsidf>
c000bfcd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfd1:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfd5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfd9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfdd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfe1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfe5:	e8 72 c8 01 00       	call   c002885c <__divdf3>
c000bfea:	83 c4 1c             	add    esp,0x1c
c000bfed:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bff1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bff5:	52                   	push   edx
c000bff6:	89 ea                	mov    edx,ebp
c000bff8:	50                   	push   eax
c000bff9:	89 d8                	mov    eax,ebx
c000bffb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bffe:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c002:	e8 69 ed ff ff       	call   c000ad70 <calc_output_multi>
c000c007:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c00a:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c00d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c011:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c015:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c019:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c01d:	e8 3a c8 01 00       	call   c002885c <__divdf3>
c000c022:	83 c4 10             	add    esp,0x10
c000c025:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c029:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c02d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c039:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c03d:	e8 b9 be 01 00       	call   c0027efb <__adddf3>
c000c042:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c046:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c04a:	83 c4 28             	add    esp,0x28
c000c04d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c051:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c055:	e8 a6 cf 01 00       	call   c0029000 <lrint>
c000c05a:	83 ec 0c             	sub    esp,0xc
c000c05d:	50                   	push   eax
c000c05e:	e8 78 cb 01 00       	call   c0028bdb <__floatsidf>
c000c063:	83 c4 10             	add    esp,0x10
c000c066:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c06a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c06e:	52                   	push   edx
c000c06f:	50                   	push   eax
c000c070:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c074:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c078:	e8 cf c4 01 00       	call   c002854c <__subdf3>
c000c07d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c081:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c085:	83 c4 20             	add    esp,0x20
c000c088:	6a 00                	push   0x0
c000c08a:	6a 00                	push   0x0
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 ae cd 01 00       	call   c0028e47 <__ltdf2>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	85 c0                	test   eax,eax
c000c09e:	79 20                	jns    c000c0c0 <sinc_multichan_vari_process+0x66e>
c000c0a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b0:	e8 46 be 01 00       	call   c0027efb <__adddf3>
c000c0b5:	83 c4 10             	add    esp,0x10
c000c0b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0c0:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0c3:	83 ec 10             	sub    esp,0x10
c000c0c6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ca:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0d9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0dd:	e8 6a c4 01 00       	call   c002854c <__subdf3>
c000c0e2:	83 c4 18             	add    esp,0x18
c000c0e5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0ed:	52                   	push   edx
c000c0ee:	50                   	push   eax
c000c0ef:	e8 0c cf 01 00       	call   c0029000 <lrint>
c000c0f4:	0f af e8             	imul   ebp,eax
c000c0f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0fb:	83 c4 10             	add    esp,0x10
c000c0fe:	01 e8                	add    eax,ebp
c000c100:	99                   	cdq    
c000c101:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c104:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c107:	e9 fd fb ff ff       	jmp    c000bd09 <sinc_multichan_vari_process+0x2b7>
c000c10c:	83 c4 4c             	add    esp,0x4c
c000c10f:	89 d0                	mov    eax,edx
c000c111:	5b                   	pop    ebx
c000c112:	5e                   	pop    esi
c000c113:	5f                   	pop    edi
c000c114:	5d                   	pop    ebp
c000c115:	c3                   	ret    

c000c116 <sinc_hex_vari_process>:
c000c116:	55                   	push   ebp
c000c117:	ba 05 00 00 00       	mov    edx,0x5
c000c11c:	57                   	push   edi
c000c11d:	56                   	push   esi
c000c11e:	53                   	push   ebx
c000c11f:	83 ec 4c             	sub    esp,0x4c
c000c122:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c126:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c12a:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c12d:	85 db                	test   ebx,ebx
c000c12f:	0f 84 9c 06 00 00    	je     c000c7d1 <sinc_hex_vari_process+0x6bb>
c000c135:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c138:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c13b:	0f af c7             	imul   eax,edi
c000c13e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c141:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c144:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c14b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c152:	0f af c7             	imul   eax,edi
c000c155:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c158:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c15b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c15e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c162:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c166:	68 00 00 70 3f       	push   0x3f700000
c000c16b:	6a 00                	push   0x0
c000c16d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c171:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c175:	e8 cd cc 01 00       	call   c0028e47 <__ltdf2>
c000c17a:	83 c4 10             	add    esp,0x10
c000c17d:	ba 16 00 00 00       	mov    edx,0x16
c000c182:	85 c0                	test   eax,eax
c000c184:	0f 88 47 06 00 00    	js     c000c7d1 <sinc_hex_vari_process+0x6bb>
c000c18a:	68 00 00 70 40       	push   0x40700000
c000c18f:	6a 00                	push   0x0
c000c191:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c195:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c199:	e8 8b cc 01 00       	call   c0028e29 <__gtdf2>
c000c19e:	83 c4 10             	add    esp,0x10
c000c1a1:	ba 16 00 00 00       	mov    edx,0x16
c000c1a6:	85 c0                	test   eax,eax
c000c1a8:	0f 8f 23 06 00 00    	jg     c000c7d1 <sinc_hex_vari_process+0x6bb>
c000c1ae:	83 ec 0c             	sub    esp,0xc
c000c1b1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1b4:	e8 22 ca 01 00       	call   c0028bdb <__floatsidf>
c000c1b9:	83 c4 10             	add    esp,0x10
c000c1bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1c4:	68 00 00 00 40       	push   0x40000000
c000c1c9:	6a 00                	push   0x0
c000c1cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1d3:	e8 23 bd 01 00       	call   c0027efb <__adddf3>
c000c1d8:	59                   	pop    ecx
c000c1d9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1dd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1e1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1e4:	e8 f2 c9 01 00       	call   c0028bdb <__floatsidf>
c000c1e9:	83 c4 10             	add    esp,0x10
c000c1ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1f0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f4:	52                   	push   edx
c000c1f5:	50                   	push   eax
c000c1f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1fe:	e8 59 c6 01 00       	call   c002885c <__divdf3>
c000c203:	83 c4 10             	add    esp,0x10
c000c206:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c20e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c211:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c214:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c218:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c21c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c220:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c224:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c228:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c22c:	e8 f8 cb 01 00       	call   c0028e29 <__gtdf2>
c000c231:	83 c4 10             	add    esp,0x10
c000c234:	85 c0                	test   eax,eax
c000c236:	7e 2d                	jle    c000c265 <sinc_hex_vari_process+0x14f>
c000c238:	68 00 00 f0 3f       	push   0x3ff00000
c000c23d:	6a 00                	push   0x0
c000c23f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c247:	e8 fb cb 01 00       	call   c0028e47 <__ltdf2>
c000c24c:	83 c4 10             	add    esp,0x10
c000c24f:	85 c0                	test   eax,eax
c000c251:	79 4d                	jns    c000c2a0 <sinc_hex_vari_process+0x18a>
c000c253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c257:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c25b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c25f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c263:	eb 1b                	jmp    c000c280 <sinc_hex_vari_process+0x16a>
c000c265:	68 00 00 f0 3f       	push   0x3ff00000
c000c26a:	6a 00                	push   0x0
c000c26c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c270:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c274:	e8 ce cb 01 00       	call   c0028e47 <__ltdf2>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	85 c0                	test   eax,eax
c000c27e:	79 20                	jns    c000c2a0 <sinc_hex_vari_process+0x18a>
c000c280:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c284:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c288:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c290:	e8 c7 c5 01 00       	call   c002885c <__divdf3>
c000c295:	83 c4 10             	add    esp,0x10
c000c298:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c29c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2a0:	50                   	push   eax
c000c2a1:	50                   	push   eax
c000c2a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	e8 51 cd 01 00       	call   c0029000 <lrint>
c000c2af:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2b2:	40                   	inc    eax
c000c2b3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2b7:	0f af c7             	imul   eax,edi
c000c2ba:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2c1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2c5:	58                   	pop    eax
c000c2c6:	5a                   	pop    edx
c000c2c7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2cb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2cf:	e8 2c cd 01 00       	call   c0029000 <lrint>
c000c2d4:	83 ec 0c             	sub    esp,0xc
c000c2d7:	50                   	push   eax
c000c2d8:	e8 fe c8 01 00       	call   c0028bdb <__floatsidf>
c000c2dd:	83 c4 10             	add    esp,0x10
c000c2e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2e4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2e8:	52                   	push   edx
c000c2e9:	50                   	push   eax
c000c2ea:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2ee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2f2:	e8 55 c2 01 00       	call   c002854c <__subdf3>
c000c2f7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2fb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2ff:	83 c4 20             	add    esp,0x20
c000c302:	6a 00                	push   0x0
c000c304:	6a 00                	push   0x0
c000c306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30e:	e8 34 cb 01 00       	call   c0028e47 <__ltdf2>
c000c313:	83 c4 10             	add    esp,0x10
c000c316:	85 c0                	test   eax,eax
c000c318:	79 1f                	jns    c000c339 <sinc_hex_vari_process+0x223>
c000c31a:	68 00 00 f0 3f       	push   0x3ff00000
c000c31f:	6a 00                	push   0x0
c000c321:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c325:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c329:	e8 cd bb 01 00       	call   c0027efb <__adddf3>
c000c32e:	83 c4 10             	add    esp,0x10
c000c331:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c335:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c339:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c33c:	83 ec 10             	sub    esp,0x10
c000c33f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c343:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c346:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c34a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c34e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c352:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c356:	e8 f1 c1 01 00       	call   c002854c <__subdf3>
c000c35b:	83 c4 18             	add    esp,0x18
c000c35e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c362:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c366:	52                   	push   edx
c000c367:	50                   	push   eax
c000c368:	e8 93 cc 01 00       	call   c0029000 <lrint>
c000c36d:	0f af f8             	imul   edi,eax
c000c370:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c374:	01 f8                	add    eax,edi
c000c376:	99                   	cdq    
c000c377:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c37a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c37d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c381:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c385:	68 00 00 f0 3f       	push   0x3ff00000
c000c38a:	6a 00                	push   0x0
c000c38c:	e8 cb c4 01 00       	call   c002885c <__divdf3>
c000c391:	83 c4 10             	add    esp,0x10
c000c394:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c398:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c39c:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3a1:	68 23 42 92 0c       	push   0xc924223
c000c3a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3ae:	e8 48 bb 01 00       	call   c0027efb <__adddf3>
c000c3b3:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3b7:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3bb:	83 c4 20             	add    esp,0x20
c000c3be:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3c6:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ce:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3d1:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3d4:	7d 50                	jge    c000c426 <sinc_hex_vari_process+0x310>
c000c3d6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3d9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3dc:	01 c8                	add    eax,ecx
c000c3de:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3e1:	99                   	cdq    
c000c3e2:	f7 f9                	idiv   ecx
c000c3e4:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3e8:	7d 0c                	jge    c000c3f6 <sinc_hex_vari_process+0x2e0>
c000c3ea:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3ed:	85 ff                	test   edi,edi
c000c3ef:	79 6c                	jns    c000c45d <sinc_hex_vari_process+0x347>
c000c3f1:	e9 e7 00 00 00       	jmp    c000c4dd <sinc_hex_vari_process+0x3c7>
c000c3f6:	50                   	push   eax
c000c3f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3fb:	56                   	push   esi
c000c3fc:	53                   	push   ebx
c000c3fd:	e8 d6 f4 ff ff       	call   c000b8d8 <prepare_data>
c000c402:	83 c4 10             	add    esp,0x10
c000c405:	89 c2                	mov    edx,eax
c000c407:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c40a:	85 c0                	test   eax,eax
c000c40c:	0f 85 bf 03 00 00    	jne    c000c7d1 <sinc_hex_vari_process+0x6bb>
c000c412:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c415:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c418:	01 c8                	add    eax,ecx
c000c41a:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c41d:	99                   	cdq    
c000c41e:	f7 f9                	idiv   ecx
c000c420:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c424:	7c c4                	jl     c000c3ea <sinc_hex_vari_process+0x2d4>
c000c426:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c42a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c42e:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c431:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c438:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c43c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c43f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c442:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c445:	99                   	cdq    
c000c446:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c449:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c44c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c44f:	99                   	cdq    
c000c450:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c453:	31 d2                	xor    edx,edx
c000c455:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c458:	e9 74 03 00 00       	jmp    c000c7d1 <sinc_hex_vari_process+0x6bb>
c000c45d:	83 ec 0c             	sub    esp,0xc
c000c460:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c463:	e8 73 c7 01 00       	call   c0028bdb <__floatsidf>
c000c468:	83 c4 10             	add    esp,0x10
c000c46b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c46f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c473:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c477:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c47b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	e8 73 ba 01 00       	call   c0027efb <__adddf3>
c000c488:	83 c4 10             	add    esp,0x10
c000c48b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c493:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c497:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c49b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a3:	e8 53 ba 01 00       	call   c0027efb <__adddf3>
c000c4a8:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4ab:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4af:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4b3:	e8 23 c7 01 00       	call   c0028bdb <__floatsidf>
c000c4b8:	83 c4 10             	add    esp,0x10
c000c4bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4bf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4c3:	52                   	push   edx
c000c4c4:	50                   	push   eax
c000c4c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4cd:	e8 73 c9 01 00       	call   c0028e45 <__gedf2>
c000c4d2:	83 c4 10             	add    esp,0x10
c000c4d5:	85 c0                	test   eax,eax
c000c4d7:	0f 89 49 ff ff ff    	jns    c000c426 <sinc_hex_vari_process+0x310>
c000c4dd:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4e1:	0f 8e ef 00 00 00    	jle    c000c5d6 <sinc_hex_vari_process+0x4c0>
c000c4e7:	83 ec 10             	sub    esp,0x10
c000c4ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4f0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4f3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4f6:	e8 51 c0 01 00       	call   c002854c <__subdf3>
c000c4fb:	83 c4 18             	add    esp,0x18
c000c4fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c502:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c506:	52                   	push   edx
c000c507:	50                   	push   eax
c000c508:	e8 d3 ca 01 00       	call   c0028fe0 <fabs>
c000c50d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c511:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c515:	83 c4 10             	add    esp,0x10
c000c518:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c51d:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c522:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c526:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c52a:	e8 fa c8 01 00       	call   c0028e29 <__gtdf2>
c000c52f:	83 c4 10             	add    esp,0x10
c000c532:	85 c0                	test   eax,eax
c000c534:	0f 8e 9c 00 00 00    	jle    c000c5d6 <sinc_hex_vari_process+0x4c0>
c000c53a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c53d:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c540:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c544:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c548:	52                   	push   edx
c000c549:	50                   	push   eax
c000c54a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c54d:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c550:	e8 f7 bf 01 00       	call   c002854c <__subdf3>
c000c555:	59                   	pop    ecx
c000c556:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c55a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c55e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c561:	e8 75 c6 01 00       	call   c0028bdb <__floatsidf>
c000c566:	83 c4 10             	add    esp,0x10
c000c569:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c56d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c571:	52                   	push   edx
c000c572:	50                   	push   eax
c000c573:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c577:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c57b:	e8 f8 bf 01 00       	call   c0028578 <__muldf3>
c000c580:	5f                   	pop    edi
c000c581:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c585:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c589:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c58c:	e8 4a c6 01 00       	call   c0028bdb <__floatsidf>
c000c591:	83 c4 10             	add    esp,0x10
c000c594:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c598:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c59c:	52                   	push   edx
c000c59d:	50                   	push   eax
c000c59e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	e8 b1 c2 01 00       	call   c002885c <__divdf3>
c000c5ab:	83 c4 10             	add    esp,0x10
c000c5ae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5b2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c6:	e8 30 b9 01 00       	call   c0027efb <__adddf3>
c000c5cb:	83 c4 10             	add    esp,0x10
c000c5ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5d6:	83 ec 0c             	sub    esp,0xc
c000c5d9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5dc:	e8 fa c5 01 00       	call   c0028bdb <__floatsidf>
c000c5e1:	83 c4 10             	add    esp,0x10
c000c5e4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5e8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5fc:	e8 46 c8 01 00       	call   c0028e47 <__ltdf2>
c000c601:	83 c4 10             	add    esp,0x10
c000c604:	85 c0                	test   eax,eax
c000c606:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c60a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c60e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c612:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c616:	78 10                	js     c000c628 <sinc_hex_vari_process+0x512>
c000c618:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c61c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c620:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c624:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c628:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c62c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c630:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c634:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c638:	e8 3b bf 01 00       	call   c0028578 <__muldf3>
c000c63d:	59                   	pop    ecx
c000c63e:	5f                   	pop    edi
c000c63f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c643:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c647:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c64b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c64f:	e8 5d f2 ff ff       	call   c000b8b1 <double_to_fp>
c000c654:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c658:	89 c7                	mov    edi,eax
c000c65a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c65e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c662:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c666:	e8 0d bf 01 00       	call   c0028578 <__muldf3>
c000c66b:	83 c4 18             	add    esp,0x18
c000c66e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c676:	52                   	push   edx
c000c677:	50                   	push   eax
c000c678:	e8 34 f2 ff ff       	call   c000b8b1 <double_to_fp>
c000c67d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c680:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c684:	83 c4 0c             	add    esp,0xc
c000c687:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c68a:	8d 04 90             	lea    eax,[eax+edx*4]
c000c68d:	50                   	push   eax
c000c68e:	50                   	push   eax
c000c68f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c692:	e8 44 c5 01 00       	call   c0028bdb <__floatsidf>
c000c697:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c69b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c69f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6ab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6af:	e8 a8 c1 01 00       	call   c002885c <__divdf3>
c000c6b4:	83 c4 18             	add    esp,0x18
c000c6b7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6bb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6bf:	52                   	push   edx
c000c6c0:	89 fa                	mov    edx,edi
c000c6c2:	50                   	push   eax
c000c6c3:	89 d8                	mov    eax,ebx
c000c6c5:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6c9:	e8 50 de ff ff       	call   c000a51e <calc_output_hex>
c000c6ce:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6da:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6de:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6e2:	e8 75 c1 01 00       	call   c002885c <__divdf3>
c000c6e7:	83 c4 10             	add    esp,0x10
c000c6ea:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6ee:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6fa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c702:	e8 f4 b7 01 00       	call   c0027efb <__adddf3>
c000c707:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c70b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c70f:	83 c4 18             	add    esp,0x18
c000c712:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c716:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c71a:	e8 e1 c8 01 00       	call   c0029000 <lrint>
c000c71f:	83 ec 0c             	sub    esp,0xc
c000c722:	50                   	push   eax
c000c723:	e8 b3 c4 01 00       	call   c0028bdb <__floatsidf>
c000c728:	83 c4 10             	add    esp,0x10
c000c72b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c72f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c733:	52                   	push   edx
c000c734:	50                   	push   eax
c000c735:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c739:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c73d:	e8 0a be 01 00       	call   c002854c <__subdf3>
c000c742:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c746:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c74a:	83 c4 20             	add    esp,0x20
c000c74d:	6a 00                	push   0x0
c000c74f:	6a 00                	push   0x0
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 e9 c6 01 00       	call   c0028e47 <__ltdf2>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	85 c0                	test   eax,eax
c000c763:	79 20                	jns    c000c785 <sinc_hex_vari_process+0x66f>
c000c765:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c769:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c775:	e8 81 b7 01 00       	call   c0027efb <__adddf3>
c000c77a:	83 c4 10             	add    esp,0x10
c000c77d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c781:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c785:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c788:	83 ec 10             	sub    esp,0x10
c000c78b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c78f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c792:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c79a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c79e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7a2:	e8 a5 bd 01 00       	call   c002854c <__subdf3>
c000c7a7:	83 c4 18             	add    esp,0x18
c000c7aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7b2:	52                   	push   edx
c000c7b3:	50                   	push   eax
c000c7b4:	e8 47 c8 01 00       	call   c0029000 <lrint>
c000c7b9:	0f af f8             	imul   edi,eax
c000c7bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7c0:	83 c4 10             	add    esp,0x10
c000c7c3:	01 f8                	add    eax,edi
c000c7c5:	99                   	cdq    
c000c7c6:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7c9:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7cc:	e9 fd fb ff ff       	jmp    c000c3ce <sinc_hex_vari_process+0x2b8>
c000c7d1:	83 c4 4c             	add    esp,0x4c
c000c7d4:	89 d0                	mov    eax,edx
c000c7d6:	5b                   	pop    ebx
c000c7d7:	5e                   	pop    esi
c000c7d8:	5f                   	pop    edi
c000c7d9:	5d                   	pop    ebp
c000c7da:	c3                   	ret    

c000c7db <sinc_quad_vari_process>:
c000c7db:	55                   	push   ebp
c000c7dc:	ba 05 00 00 00       	mov    edx,0x5
c000c7e1:	57                   	push   edi
c000c7e2:	56                   	push   esi
c000c7e3:	53                   	push   ebx
c000c7e4:	83 ec 4c             	sub    esp,0x4c
c000c7e7:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7eb:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7ef:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7f2:	85 db                	test   ebx,ebx
c000c7f4:	0f 84 9c 06 00 00    	je     c000ce96 <sinc_quad_vari_process+0x6bb>
c000c7fa:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c800:	0f af c7             	imul   eax,edi
c000c803:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c806:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c809:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c810:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c817:	0f af c7             	imul   eax,edi
c000c81a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c81d:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c820:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c823:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c827:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c82b:	68 00 00 70 3f       	push   0x3f700000
c000c830:	6a 00                	push   0x0
c000c832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83a:	e8 08 c6 01 00       	call   c0028e47 <__ltdf2>
c000c83f:	83 c4 10             	add    esp,0x10
c000c842:	ba 16 00 00 00       	mov    edx,0x16
c000c847:	85 c0                	test   eax,eax
c000c849:	0f 88 47 06 00 00    	js     c000ce96 <sinc_quad_vari_process+0x6bb>
c000c84f:	68 00 00 70 40       	push   0x40700000
c000c854:	6a 00                	push   0x0
c000c856:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c85a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c85e:	e8 c6 c5 01 00       	call   c0028e29 <__gtdf2>
c000c863:	83 c4 10             	add    esp,0x10
c000c866:	ba 16 00 00 00       	mov    edx,0x16
c000c86b:	85 c0                	test   eax,eax
c000c86d:	0f 8f 23 06 00 00    	jg     c000ce96 <sinc_quad_vari_process+0x6bb>
c000c873:	83 ec 0c             	sub    esp,0xc
c000c876:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c879:	e8 5d c3 01 00       	call   c0028bdb <__floatsidf>
c000c87e:	83 c4 10             	add    esp,0x10
c000c881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c889:	68 00 00 00 40       	push   0x40000000
c000c88e:	6a 00                	push   0x0
c000c890:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c894:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c898:	e8 5e b6 01 00       	call   c0027efb <__adddf3>
c000c89d:	59                   	pop    ecx
c000c89e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8a2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8a6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8a9:	e8 2d c3 01 00       	call   c0028bdb <__floatsidf>
c000c8ae:	83 c4 10             	add    esp,0x10
c000c8b1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b9:	52                   	push   edx
c000c8ba:	50                   	push   eax
c000c8bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c3:	e8 94 bf 01 00       	call   c002885c <__divdf3>
c000c8c8:	83 c4 10             	add    esp,0x10
c000c8cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8d6:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8f1:	e8 33 c5 01 00       	call   c0028e29 <__gtdf2>
c000c8f6:	83 c4 10             	add    esp,0x10
c000c8f9:	85 c0                	test   eax,eax
c000c8fb:	7e 2d                	jle    c000c92a <sinc_quad_vari_process+0x14f>
c000c8fd:	68 00 00 f0 3f       	push   0x3ff00000
c000c902:	6a 00                	push   0x0
c000c904:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c908:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c90c:	e8 36 c5 01 00       	call   c0028e47 <__ltdf2>
c000c911:	83 c4 10             	add    esp,0x10
c000c914:	85 c0                	test   eax,eax
c000c916:	79 4d                	jns    c000c965 <sinc_quad_vari_process+0x18a>
c000c918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c91c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c924:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c928:	eb 1b                	jmp    c000c945 <sinc_quad_vari_process+0x16a>
c000c92a:	68 00 00 f0 3f       	push   0x3ff00000
c000c92f:	6a 00                	push   0x0
c000c931:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c935:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c939:	e8 09 c5 01 00       	call   c0028e47 <__ltdf2>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	85 c0                	test   eax,eax
c000c943:	79 20                	jns    c000c965 <sinc_quad_vari_process+0x18a>
c000c945:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c949:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c94d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c951:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c955:	e8 02 bf 01 00       	call   c002885c <__divdf3>
c000c95a:	83 c4 10             	add    esp,0x10
c000c95d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c961:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c965:	50                   	push   eax
c000c966:	50                   	push   eax
c000c967:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	e8 8c c6 01 00       	call   c0029000 <lrint>
c000c974:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c977:	40                   	inc    eax
c000c978:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c97c:	0f af c7             	imul   eax,edi
c000c97f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c983:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c986:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c98a:	58                   	pop    eax
c000c98b:	5a                   	pop    edx
c000c98c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c990:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c994:	e8 67 c6 01 00       	call   c0029000 <lrint>
c000c999:	83 ec 0c             	sub    esp,0xc
c000c99c:	50                   	push   eax
c000c99d:	e8 39 c2 01 00       	call   c0028bdb <__floatsidf>
c000c9a2:	83 c4 10             	add    esp,0x10
c000c9a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9ad:	52                   	push   edx
c000c9ae:	50                   	push   eax
c000c9af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9b7:	e8 90 bb 01 00       	call   c002854c <__subdf3>
c000c9bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9c0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9c4:	83 c4 20             	add    esp,0x20
c000c9c7:	6a 00                	push   0x0
c000c9c9:	6a 00                	push   0x0
c000c9cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d3:	e8 6f c4 01 00       	call   c0028e47 <__ltdf2>
c000c9d8:	83 c4 10             	add    esp,0x10
c000c9db:	85 c0                	test   eax,eax
c000c9dd:	79 1f                	jns    c000c9fe <sinc_quad_vari_process+0x223>
c000c9df:	68 00 00 f0 3f       	push   0x3ff00000
c000c9e4:	6a 00                	push   0x0
c000c9e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ee:	e8 08 b5 01 00       	call   c0027efb <__adddf3>
c000c9f3:	83 c4 10             	add    esp,0x10
c000c9f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9fe:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca01:	83 ec 10             	sub    esp,0x10
c000ca04:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca08:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca1b:	e8 2c bb 01 00       	call   c002854c <__subdf3>
c000ca20:	83 c4 18             	add    esp,0x18
c000ca23:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca27:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca2b:	52                   	push   edx
c000ca2c:	50                   	push   eax
c000ca2d:	e8 ce c5 01 00       	call   c0029000 <lrint>
c000ca32:	0f af f8             	imul   edi,eax
c000ca35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca39:	01 f8                	add    eax,edi
c000ca3b:	99                   	cdq    
c000ca3c:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca3f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca42:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca46:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca4a:	68 00 00 f0 3f       	push   0x3ff00000
c000ca4f:	6a 00                	push   0x0
c000ca51:	e8 06 be 01 00       	call   c002885c <__divdf3>
c000ca56:	83 c4 10             	add    esp,0x10
c000ca59:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca5d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca61:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca66:	68 23 42 92 0c       	push   0xc924223
c000ca6b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca6f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca73:	e8 83 b4 01 00       	call   c0027efb <__adddf3>
c000ca78:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca7c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca80:	83 c4 20             	add    esp,0x20
c000ca83:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca8b:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca93:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca96:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca99:	7d 50                	jge    c000caeb <sinc_quad_vari_process+0x310>
c000ca9b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca9e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000caa1:	01 c8                	add    eax,ecx
c000caa3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000caa6:	99                   	cdq    
c000caa7:	f7 f9                	idiv   ecx
c000caa9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000caad:	7d 0c                	jge    c000cabb <sinc_quad_vari_process+0x2e0>
c000caaf:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cab2:	85 ff                	test   edi,edi
c000cab4:	79 6c                	jns    c000cb22 <sinc_quad_vari_process+0x347>
c000cab6:	e9 e7 00 00 00       	jmp    c000cba2 <sinc_quad_vari_process+0x3c7>
c000cabb:	50                   	push   eax
c000cabc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cac0:	56                   	push   esi
c000cac1:	53                   	push   ebx
c000cac2:	e8 11 ee ff ff       	call   c000b8d8 <prepare_data>
c000cac7:	83 c4 10             	add    esp,0x10
c000caca:	89 c2                	mov    edx,eax
c000cacc:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cacf:	85 c0                	test   eax,eax
c000cad1:	0f 85 bf 03 00 00    	jne    c000ce96 <sinc_quad_vari_process+0x6bb>
c000cad7:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cada:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cadd:	01 c8                	add    eax,ecx
c000cadf:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cae2:	99                   	cdq    
c000cae3:	f7 f9                	idiv   ecx
c000cae5:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cae9:	7c c4                	jl     c000caaf <sinc_quad_vari_process+0x2d4>
c000caeb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000caef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000caf3:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000caf6:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000caf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cafd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb01:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb04:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb07:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb0a:	99                   	cdq    
c000cb0b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb0e:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb11:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb14:	99                   	cdq    
c000cb15:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb18:	31 d2                	xor    edx,edx
c000cb1a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb1d:	e9 74 03 00 00       	jmp    c000ce96 <sinc_quad_vari_process+0x6bb>
c000cb22:	83 ec 0c             	sub    esp,0xc
c000cb25:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb28:	e8 ae c0 01 00       	call   c0028bdb <__floatsidf>
c000cb2d:	83 c4 10             	add    esp,0x10
c000cb30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb40:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	e8 ae b3 01 00       	call   c0027efb <__adddf3>
c000cb4d:	83 c4 10             	add    esp,0x10
c000cb50:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb54:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb58:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb5c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb60:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb64:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb68:	e8 8e b3 01 00       	call   c0027efb <__adddf3>
c000cb6d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb70:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb74:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb78:	e8 5e c0 01 00       	call   c0028bdb <__floatsidf>
c000cb7d:	83 c4 10             	add    esp,0x10
c000cb80:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb84:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb88:	52                   	push   edx
c000cb89:	50                   	push   eax
c000cb8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb92:	e8 ae c2 01 00       	call   c0028e45 <__gedf2>
c000cb97:	83 c4 10             	add    esp,0x10
c000cb9a:	85 c0                	test   eax,eax
c000cb9c:	0f 89 49 ff ff ff    	jns    c000caeb <sinc_quad_vari_process+0x310>
c000cba2:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cba6:	0f 8e ef 00 00 00    	jle    c000cc9b <sinc_quad_vari_process+0x4c0>
c000cbac:	83 ec 10             	sub    esp,0x10
c000cbaf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbb2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbb5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbb8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbbb:	e8 8c b9 01 00       	call   c002854c <__subdf3>
c000cbc0:	83 c4 18             	add    esp,0x18
c000cbc3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbc7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbcb:	52                   	push   edx
c000cbcc:	50                   	push   eax
c000cbcd:	e8 0e c4 01 00       	call   c0028fe0 <fabs>
c000cbd2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbd6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbda:	83 c4 10             	add    esp,0x10
c000cbdd:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbe2:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbe7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbeb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbef:	e8 35 c2 01 00       	call   c0028e29 <__gtdf2>
c000cbf4:	83 c4 10             	add    esp,0x10
c000cbf7:	85 c0                	test   eax,eax
c000cbf9:	0f 8e 9c 00 00 00    	jle    c000cc9b <sinc_quad_vari_process+0x4c0>
c000cbff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc02:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc05:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc09:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc0d:	52                   	push   edx
c000cc0e:	50                   	push   eax
c000cc0f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc12:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc15:	e8 32 b9 01 00       	call   c002854c <__subdf3>
c000cc1a:	59                   	pop    ecx
c000cc1b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc1f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc23:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc26:	e8 b0 bf 01 00       	call   c0028bdb <__floatsidf>
c000cc2b:	83 c4 10             	add    esp,0x10
c000cc2e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc32:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc36:	52                   	push   edx
c000cc37:	50                   	push   eax
c000cc38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc3c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc40:	e8 33 b9 01 00       	call   c0028578 <__muldf3>
c000cc45:	5f                   	pop    edi
c000cc46:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc4a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc4e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc51:	e8 85 bf 01 00       	call   c0028bdb <__floatsidf>
c000cc56:	83 c4 10             	add    esp,0x10
c000cc59:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc5d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc61:	52                   	push   edx
c000cc62:	50                   	push   eax
c000cc63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	e8 ec bb 01 00       	call   c002885c <__divdf3>
c000cc70:	83 c4 10             	add    esp,0x10
c000cc73:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc77:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc8b:	e8 6b b2 01 00       	call   c0027efb <__adddf3>
c000cc90:	83 c4 10             	add    esp,0x10
c000cc93:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc97:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc9b:	83 ec 0c             	sub    esp,0xc
c000cc9e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cca1:	e8 35 bf 01 00       	call   c0028bdb <__floatsidf>
c000cca6:	83 c4 10             	add    esp,0x10
c000cca9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccbd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc1:	e8 81 c1 01 00       	call   c0028e47 <__ltdf2>
c000ccc6:	83 c4 10             	add    esp,0x10
c000ccc9:	85 c0                	test   eax,eax
c000cccb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cccf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccd3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccd7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccdb:	78 10                	js     c000cced <sinc_quad_vari_process+0x512>
c000ccdd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cce1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cce5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cce9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cced:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccf1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccf5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccf9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccfd:	e8 76 b8 01 00       	call   c0028578 <__muldf3>
c000cd02:	59                   	pop    ecx
c000cd03:	5f                   	pop    edi
c000cd04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd08:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd10:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd14:	e8 98 eb ff ff       	call   c000b8b1 <double_to_fp>
c000cd19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1d:	89 c7                	mov    edi,eax
c000cd1f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd2b:	e8 48 b8 01 00       	call   c0028578 <__muldf3>
c000cd30:	83 c4 18             	add    esp,0x18
c000cd33:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd37:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd3b:	52                   	push   edx
c000cd3c:	50                   	push   eax
c000cd3d:	e8 6f eb ff ff       	call   c000b8b1 <double_to_fp>
c000cd42:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd45:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd49:	83 c4 0c             	add    esp,0xc
c000cd4c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd4f:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd52:	50                   	push   eax
c000cd53:	50                   	push   eax
c000cd54:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd57:	e8 7f be 01 00       	call   c0028bdb <__floatsidf>
c000cd5c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd60:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd64:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd68:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd6c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd70:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd74:	e8 e3 ba 01 00       	call   c002885c <__divdf3>
c000cd79:	83 c4 18             	add    esp,0x18
c000cd7c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd80:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd84:	52                   	push   edx
c000cd85:	89 fa                	mov    edx,edi
c000cd87:	50                   	push   eax
c000cd88:	89 d8                	mov    eax,ebx
c000cd8a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd8e:	e8 a5 d1 ff ff       	call   c0009f38 <calc_output_quad>
c000cd93:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd97:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd9b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd9f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cda3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cda7:	e8 b0 ba 01 00       	call   c002885c <__divdf3>
c000cdac:	83 c4 10             	add    esp,0x10
c000cdaf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdb3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdb7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdbb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdbf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdc3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdc7:	e8 2f b1 01 00       	call   c0027efb <__adddf3>
c000cdcc:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdd0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdd4:	83 c4 18             	add    esp,0x18
c000cdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cddb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cddf:	e8 1c c2 01 00       	call   c0029000 <lrint>
c000cde4:	83 ec 0c             	sub    esp,0xc
c000cde7:	50                   	push   eax
c000cde8:	e8 ee bd 01 00       	call   c0028bdb <__floatsidf>
c000cded:	83 c4 10             	add    esp,0x10
c000cdf0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdf4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdf8:	52                   	push   edx
c000cdf9:	50                   	push   eax
c000cdfa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdfe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce02:	e8 45 b7 01 00       	call   c002854c <__subdf3>
c000ce07:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce0b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce0f:	83 c4 20             	add    esp,0x20
c000ce12:	6a 00                	push   0x0
c000ce14:	6a 00                	push   0x0
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 24 c0 01 00       	call   c0028e47 <__ltdf2>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	85 c0                	test   eax,eax
c000ce28:	79 20                	jns    c000ce4a <sinc_quad_vari_process+0x66f>
c000ce2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce32:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3a:	e8 bc b0 01 00       	call   c0027efb <__adddf3>
c000ce3f:	83 c4 10             	add    esp,0x10
c000ce42:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce46:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce4a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce4d:	83 ec 10             	sub    esp,0x10
c000ce50:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce54:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce5f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce63:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce67:	e8 e0 b6 01 00       	call   c002854c <__subdf3>
c000ce6c:	83 c4 18             	add    esp,0x18
c000ce6f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce77:	52                   	push   edx
c000ce78:	50                   	push   eax
c000ce79:	e8 82 c1 01 00       	call   c0029000 <lrint>
c000ce7e:	0f af f8             	imul   edi,eax
c000ce81:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce85:	83 c4 10             	add    esp,0x10
c000ce88:	01 f8                	add    eax,edi
c000ce8a:	99                   	cdq    
c000ce8b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce8e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce91:	e9 fd fb ff ff       	jmp    c000ca93 <sinc_quad_vari_process+0x2b8>
c000ce96:	83 c4 4c             	add    esp,0x4c
c000ce99:	89 d0                	mov    eax,edx
c000ce9b:	5b                   	pop    ebx
c000ce9c:	5e                   	pop    esi
c000ce9d:	5f                   	pop    edi
c000ce9e:	5d                   	pop    ebp
c000ce9f:	c3                   	ret    

c000cea0 <sinc_stereo_vari_process>:
c000cea0:	55                   	push   ebp
c000cea1:	ba 05 00 00 00       	mov    edx,0x5
c000cea6:	57                   	push   edi
c000cea7:	56                   	push   esi
c000cea8:	53                   	push   ebx
c000cea9:	83 ec 4c             	sub    esp,0x4c
c000ceac:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ceb0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ceb4:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ceb7:	85 db                	test   ebx,ebx
c000ceb9:	0f 84 9c 06 00 00    	je     c000d55b <sinc_stereo_vari_process+0x6bb>
c000cebf:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cec2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cec5:	0f af c7             	imul   eax,edi
c000cec8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cecb:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cece:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ced5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cedc:	0f af c7             	imul   eax,edi
c000cedf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cee2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cee5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cee8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ceec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cef0:	68 00 00 70 3f       	push   0x3f700000
c000cef5:	6a 00                	push   0x0
c000cef7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cefb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ceff:	e8 43 bf 01 00       	call   c0028e47 <__ltdf2>
c000cf04:	83 c4 10             	add    esp,0x10
c000cf07:	ba 16 00 00 00       	mov    edx,0x16
c000cf0c:	85 c0                	test   eax,eax
c000cf0e:	0f 88 47 06 00 00    	js     c000d55b <sinc_stereo_vari_process+0x6bb>
c000cf14:	68 00 00 70 40       	push   0x40700000
c000cf19:	6a 00                	push   0x0
c000cf1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf23:	e8 01 bf 01 00       	call   c0028e29 <__gtdf2>
c000cf28:	83 c4 10             	add    esp,0x10
c000cf2b:	ba 16 00 00 00       	mov    edx,0x16
c000cf30:	85 c0                	test   eax,eax
c000cf32:	0f 8f 23 06 00 00    	jg     c000d55b <sinc_stereo_vari_process+0x6bb>
c000cf38:	83 ec 0c             	sub    esp,0xc
c000cf3b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf3e:	e8 98 bc 01 00       	call   c0028bdb <__floatsidf>
c000cf43:	83 c4 10             	add    esp,0x10
c000cf46:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf4a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf4e:	68 00 00 00 40       	push   0x40000000
c000cf53:	6a 00                	push   0x0
c000cf55:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf59:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf5d:	e8 99 af 01 00       	call   c0027efb <__adddf3>
c000cf62:	59                   	pop    ecx
c000cf63:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf67:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf6b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf6e:	e8 68 bc 01 00       	call   c0028bdb <__floatsidf>
c000cf73:	83 c4 10             	add    esp,0x10
c000cf76:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf7a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7e:	52                   	push   edx
c000cf7f:	50                   	push   eax
c000cf80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf84:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf88:	e8 cf b8 01 00       	call   c002885c <__divdf3>
c000cf8d:	83 c4 10             	add    esp,0x10
c000cf90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf94:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf98:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf9b:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfa2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfa6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfb6:	e8 6e be 01 00       	call   c0028e29 <__gtdf2>
c000cfbb:	83 c4 10             	add    esp,0x10
c000cfbe:	85 c0                	test   eax,eax
c000cfc0:	7e 2d                	jle    c000cfef <sinc_stereo_vari_process+0x14f>
c000cfc2:	68 00 00 f0 3f       	push   0x3ff00000
c000cfc7:	6a 00                	push   0x0
c000cfc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfcd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfd1:	e8 71 be 01 00       	call   c0028e47 <__ltdf2>
c000cfd6:	83 c4 10             	add    esp,0x10
c000cfd9:	85 c0                	test   eax,eax
c000cfdb:	79 4d                	jns    c000d02a <sinc_stereo_vari_process+0x18a>
c000cfdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfe1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfe5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfe9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfed:	eb 1b                	jmp    c000d00a <sinc_stereo_vari_process+0x16a>
c000cfef:	68 00 00 f0 3f       	push   0x3ff00000
c000cff4:	6a 00                	push   0x0
c000cff6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cffa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cffe:	e8 44 be 01 00       	call   c0028e47 <__ltdf2>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	85 c0                	test   eax,eax
c000d008:	79 20                	jns    c000d02a <sinc_stereo_vari_process+0x18a>
c000d00a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d00e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d012:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d016:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d01a:	e8 3d b8 01 00       	call   c002885c <__divdf3>
c000d01f:	83 c4 10             	add    esp,0x10
c000d022:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d026:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d02a:	50                   	push   eax
c000d02b:	50                   	push   eax
c000d02c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	e8 c7 bf 01 00       	call   c0029000 <lrint>
c000d039:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d03c:	40                   	inc    eax
c000d03d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d041:	0f af c7             	imul   eax,edi
c000d044:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d048:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d04b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d04f:	58                   	pop    eax
c000d050:	5a                   	pop    edx
c000d051:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d055:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d059:	e8 a2 bf 01 00       	call   c0029000 <lrint>
c000d05e:	83 ec 0c             	sub    esp,0xc
c000d061:	50                   	push   eax
c000d062:	e8 74 bb 01 00       	call   c0028bdb <__floatsidf>
c000d067:	83 c4 10             	add    esp,0x10
c000d06a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d06e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d072:	52                   	push   edx
c000d073:	50                   	push   eax
c000d074:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d078:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d07c:	e8 cb b4 01 00       	call   c002854c <__subdf3>
c000d081:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d085:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d089:	83 c4 20             	add    esp,0x20
c000d08c:	6a 00                	push   0x0
c000d08e:	6a 00                	push   0x0
c000d090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d094:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d098:	e8 aa bd 01 00       	call   c0028e47 <__ltdf2>
c000d09d:	83 c4 10             	add    esp,0x10
c000d0a0:	85 c0                	test   eax,eax
c000d0a2:	79 1f                	jns    c000d0c3 <sinc_stereo_vari_process+0x223>
c000d0a4:	68 00 00 f0 3f       	push   0x3ff00000
c000d0a9:	6a 00                	push   0x0
c000d0ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b3:	e8 43 ae 01 00       	call   c0027efb <__adddf3>
c000d0b8:	83 c4 10             	add    esp,0x10
c000d0bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0c3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0c6:	83 ec 10             	sub    esp,0x10
c000d0c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0cd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0e0:	e8 67 b4 01 00       	call   c002854c <__subdf3>
c000d0e5:	83 c4 18             	add    esp,0x18
c000d0e8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0f0:	52                   	push   edx
c000d0f1:	50                   	push   eax
c000d0f2:	e8 09 bf 01 00       	call   c0029000 <lrint>
c000d0f7:	0f af f8             	imul   edi,eax
c000d0fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0fe:	01 f8                	add    eax,edi
c000d100:	99                   	cdq    
c000d101:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d104:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d107:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d10b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d10f:	68 00 00 f0 3f       	push   0x3ff00000
c000d114:	6a 00                	push   0x0
c000d116:	e8 41 b7 01 00       	call   c002885c <__divdf3>
c000d11b:	83 c4 10             	add    esp,0x10
c000d11e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d122:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d126:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d12b:	68 23 42 92 0c       	push   0xc924223
c000d130:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d134:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d138:	e8 be ad 01 00       	call   c0027efb <__adddf3>
c000d13d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d141:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d145:	83 c4 20             	add    esp,0x20
c000d148:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d150:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d158:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d15b:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d15e:	7d 50                	jge    c000d1b0 <sinc_stereo_vari_process+0x310>
c000d160:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d163:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d166:	01 c8                	add    eax,ecx
c000d168:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d16b:	99                   	cdq    
c000d16c:	f7 f9                	idiv   ecx
c000d16e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d172:	7d 0c                	jge    c000d180 <sinc_stereo_vari_process+0x2e0>
c000d174:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d177:	85 ff                	test   edi,edi
c000d179:	79 6c                	jns    c000d1e7 <sinc_stereo_vari_process+0x347>
c000d17b:	e9 e7 00 00 00       	jmp    c000d267 <sinc_stereo_vari_process+0x3c7>
c000d180:	50                   	push   eax
c000d181:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d185:	56                   	push   esi
c000d186:	53                   	push   ebx
c000d187:	e8 4c e7 ff ff       	call   c000b8d8 <prepare_data>
c000d18c:	83 c4 10             	add    esp,0x10
c000d18f:	89 c2                	mov    edx,eax
c000d191:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d194:	85 c0                	test   eax,eax
c000d196:	0f 85 bf 03 00 00    	jne    c000d55b <sinc_stereo_vari_process+0x6bb>
c000d19c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d19f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1a2:	01 c8                	add    eax,ecx
c000d1a4:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1a7:	99                   	cdq    
c000d1a8:	f7 f9                	idiv   ecx
c000d1aa:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1ae:	7c c4                	jl     c000d174 <sinc_stereo_vari_process+0x2d4>
c000d1b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1b8:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1bb:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1c6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1c9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1cc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1cf:	99                   	cdq    
c000d1d0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1d3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1d6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1d9:	99                   	cdq    
c000d1da:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1dd:	31 d2                	xor    edx,edx
c000d1df:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1e2:	e9 74 03 00 00       	jmp    c000d55b <sinc_stereo_vari_process+0x6bb>
c000d1e7:	83 ec 0c             	sub    esp,0xc
c000d1ea:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1ed:	e8 e9 b9 01 00       	call   c0028bdb <__floatsidf>
c000d1f2:	83 c4 10             	add    esp,0x10
c000d1f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1f9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1fd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d201:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d205:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	e8 e9 ac 01 00       	call   c0027efb <__adddf3>
c000d212:	83 c4 10             	add    esp,0x10
c000d215:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d219:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d221:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d225:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d229:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22d:	e8 c9 ac 01 00       	call   c0027efb <__adddf3>
c000d232:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d235:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d239:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d23d:	e8 99 b9 01 00       	call   c0028bdb <__floatsidf>
c000d242:	83 c4 10             	add    esp,0x10
c000d245:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d249:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d24d:	52                   	push   edx
c000d24e:	50                   	push   eax
c000d24f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d253:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d257:	e8 e9 bb 01 00       	call   c0028e45 <__gedf2>
c000d25c:	83 c4 10             	add    esp,0x10
c000d25f:	85 c0                	test   eax,eax
c000d261:	0f 89 49 ff ff ff    	jns    c000d1b0 <sinc_stereo_vari_process+0x310>
c000d267:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d26b:	0f 8e ef 00 00 00    	jle    c000d360 <sinc_stereo_vari_process+0x4c0>
c000d271:	83 ec 10             	sub    esp,0x10
c000d274:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d277:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d27a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d27d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d280:	e8 c7 b2 01 00       	call   c002854c <__subdf3>
c000d285:	83 c4 18             	add    esp,0x18
c000d288:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d28c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d290:	52                   	push   edx
c000d291:	50                   	push   eax
c000d292:	e8 49 bd 01 00       	call   c0028fe0 <fabs>
c000d297:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d29b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d29f:	83 c4 10             	add    esp,0x10
c000d2a2:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2a7:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2b0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2b4:	e8 70 bb 01 00       	call   c0028e29 <__gtdf2>
c000d2b9:	83 c4 10             	add    esp,0x10
c000d2bc:	85 c0                	test   eax,eax
c000d2be:	0f 8e 9c 00 00 00    	jle    c000d360 <sinc_stereo_vari_process+0x4c0>
c000d2c4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2c7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2d2:	52                   	push   edx
c000d2d3:	50                   	push   eax
c000d2d4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2d7:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2da:	e8 6d b2 01 00       	call   c002854c <__subdf3>
c000d2df:	59                   	pop    ecx
c000d2e0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2e4:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2e8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2eb:	e8 eb b8 01 00       	call   c0028bdb <__floatsidf>
c000d2f0:	83 c4 10             	add    esp,0x10
c000d2f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2fb:	52                   	push   edx
c000d2fc:	50                   	push   eax
c000d2fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d301:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d305:	e8 6e b2 01 00       	call   c0028578 <__muldf3>
c000d30a:	5f                   	pop    edi
c000d30b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d30f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d313:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d316:	e8 c0 b8 01 00       	call   c0028bdb <__floatsidf>
c000d31b:	83 c4 10             	add    esp,0x10
c000d31e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d322:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d326:	52                   	push   edx
c000d327:	50                   	push   eax
c000d328:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	e8 27 b5 01 00       	call   c002885c <__divdf3>
c000d335:	83 c4 10             	add    esp,0x10
c000d338:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d33c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d350:	e8 a6 ab 01 00       	call   c0027efb <__adddf3>
c000d355:	83 c4 10             	add    esp,0x10
c000d358:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d35c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d360:	83 ec 0c             	sub    esp,0xc
c000d363:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d366:	e8 70 b8 01 00       	call   c0028bdb <__floatsidf>
c000d36b:	83 c4 10             	add    esp,0x10
c000d36e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d372:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d37a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d37e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d386:	e8 bc ba 01 00       	call   c0028e47 <__ltdf2>
c000d38b:	83 c4 10             	add    esp,0x10
c000d38e:	85 c0                	test   eax,eax
c000d390:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d394:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d398:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d39c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3a0:	78 10                	js     c000d3b2 <sinc_stereo_vari_process+0x512>
c000d3a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3a6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3aa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3ae:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c2:	e8 b1 b1 01 00       	call   c0028578 <__muldf3>
c000d3c7:	59                   	pop    ecx
c000d3c8:	5f                   	pop    edi
c000d3c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3d9:	e8 d3 e4 ff ff       	call   c000b8b1 <double_to_fp>
c000d3de:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e2:	89 c7                	mov    edi,eax
c000d3e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3f0:	e8 83 b1 01 00       	call   c0028578 <__muldf3>
c000d3f5:	83 c4 18             	add    esp,0x18
c000d3f8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3fc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d400:	52                   	push   edx
c000d401:	50                   	push   eax
c000d402:	e8 aa e4 ff ff       	call   c000b8b1 <double_to_fp>
c000d407:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d40a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d40e:	83 c4 0c             	add    esp,0xc
c000d411:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d414:	8d 04 90             	lea    eax,[eax+edx*4]
c000d417:	50                   	push   eax
c000d418:	50                   	push   eax
c000d419:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d41c:	e8 ba b7 01 00       	call   c0028bdb <__floatsidf>
c000d421:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d425:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d429:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d42d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d431:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d435:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d439:	e8 1e b4 01 00       	call   c002885c <__divdf3>
c000d43e:	83 c4 18             	add    esp,0x18
c000d441:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d445:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d449:	52                   	push   edx
c000d44a:	89 fa                	mov    edx,edi
c000d44c:	50                   	push   eax
c000d44d:	89 d8                	mov    eax,ebx
c000d44f:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d453:	e8 02 c7 ff ff       	call   c0009b5a <calc_output_stereo>
c000d458:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d45c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d460:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d464:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d468:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d46c:	e8 eb b3 01 00       	call   c002885c <__divdf3>
c000d471:	83 c4 10             	add    esp,0x10
c000d474:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d478:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d47c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d480:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d484:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d488:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d48c:	e8 6a aa 01 00       	call   c0027efb <__adddf3>
c000d491:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d495:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d499:	83 c4 18             	add    esp,0x18
c000d49c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4a4:	e8 57 bb 01 00       	call   c0029000 <lrint>
c000d4a9:	83 ec 0c             	sub    esp,0xc
c000d4ac:	50                   	push   eax
c000d4ad:	e8 29 b7 01 00       	call   c0028bdb <__floatsidf>
c000d4b2:	83 c4 10             	add    esp,0x10
c000d4b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4b9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4bd:	52                   	push   edx
c000d4be:	50                   	push   eax
c000d4bf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4c3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4c7:	e8 80 b0 01 00       	call   c002854c <__subdf3>
c000d4cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4d4:	83 c4 20             	add    esp,0x20
c000d4d7:	6a 00                	push   0x0
c000d4d9:	6a 00                	push   0x0
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 5f b9 01 00       	call   c0028e47 <__ltdf2>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	85 c0                	test   eax,eax
c000d4ed:	79 20                	jns    c000d50f <sinc_stereo_vari_process+0x66f>
c000d4ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4ff:	e8 f7 a9 01 00       	call   c0027efb <__adddf3>
c000d504:	83 c4 10             	add    esp,0x10
c000d507:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d50b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d50f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d512:	83 ec 10             	sub    esp,0x10
c000d515:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d519:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d51c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d520:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d524:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d528:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d52c:	e8 1b b0 01 00       	call   c002854c <__subdf3>
c000d531:	83 c4 18             	add    esp,0x18
c000d534:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d538:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d53c:	52                   	push   edx
c000d53d:	50                   	push   eax
c000d53e:	e8 bd ba 01 00       	call   c0029000 <lrint>
c000d543:	0f af f8             	imul   edi,eax
c000d546:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d54a:	83 c4 10             	add    esp,0x10
c000d54d:	01 f8                	add    eax,edi
c000d54f:	99                   	cdq    
c000d550:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d553:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d556:	e9 fd fb ff ff       	jmp    c000d158 <sinc_stereo_vari_process+0x2b8>
c000d55b:	83 c4 4c             	add    esp,0x4c
c000d55e:	89 d0                	mov    eax,edx
c000d560:	5b                   	pop    ebx
c000d561:	5e                   	pop    esi
c000d562:	5f                   	pop    edi
c000d563:	5d                   	pop    ebp
c000d564:	c3                   	ret    

c000d565 <sinc_mono_vari_process>:
c000d565:	55                   	push   ebp
c000d566:	ba 05 00 00 00       	mov    edx,0x5
c000d56b:	57                   	push   edi
c000d56c:	56                   	push   esi
c000d56d:	53                   	push   ebx
c000d56e:	83 ec 4c             	sub    esp,0x4c
c000d571:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d575:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d579:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d57c:	85 db                	test   ebx,ebx
c000d57e:	0f 84 c1 06 00 00    	je     c000dc45 <sinc_mono_vari_process+0x6e0>
c000d584:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d587:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d58a:	0f af c7             	imul   eax,edi
c000d58d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d590:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d593:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d59a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5a1:	0f af c7             	imul   eax,edi
c000d5a4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5a7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5b8:	68 00 00 70 3f       	push   0x3f700000
c000d5bd:	6a 00                	push   0x0
c000d5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5c7:	e8 7b b8 01 00       	call   c0028e47 <__ltdf2>
c000d5cc:	83 c4 10             	add    esp,0x10
c000d5cf:	ba 16 00 00 00       	mov    edx,0x16
c000d5d4:	85 c0                	test   eax,eax
c000d5d6:	0f 88 69 06 00 00    	js     c000dc45 <sinc_mono_vari_process+0x6e0>
c000d5dc:	68 00 00 70 40       	push   0x40700000
c000d5e1:	6a 00                	push   0x0
c000d5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5eb:	e8 39 b8 01 00       	call   c0028e29 <__gtdf2>
c000d5f0:	83 c4 10             	add    esp,0x10
c000d5f3:	ba 16 00 00 00       	mov    edx,0x16
c000d5f8:	85 c0                	test   eax,eax
c000d5fa:	0f 8f 45 06 00 00    	jg     c000dc45 <sinc_mono_vari_process+0x6e0>
c000d600:	83 ec 0c             	sub    esp,0xc
c000d603:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d606:	e8 d0 b5 01 00       	call   c0028bdb <__floatsidf>
c000d60b:	83 c4 10             	add    esp,0x10
c000d60e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d612:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d616:	68 00 00 00 40       	push   0x40000000
c000d61b:	6a 00                	push   0x0
c000d61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d625:	e8 d1 a8 01 00       	call   c0027efb <__adddf3>
c000d62a:	59                   	pop    ecx
c000d62b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d62f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d633:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d636:	e8 a0 b5 01 00       	call   c0028bdb <__floatsidf>
c000d63b:	83 c4 10             	add    esp,0x10
c000d63e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d642:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d646:	52                   	push   edx
c000d647:	50                   	push   eax
c000d648:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d64c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d650:	e8 07 b2 01 00       	call   c002885c <__divdf3>
c000d655:	83 c4 10             	add    esp,0x10
c000d658:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d65c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d660:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d663:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d66a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d66e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d672:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d676:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d67e:	e8 a6 b7 01 00       	call   c0028e29 <__gtdf2>
c000d683:	83 c4 10             	add    esp,0x10
c000d686:	85 c0                	test   eax,eax
c000d688:	7e 2d                	jle    c000d6b7 <sinc_mono_vari_process+0x152>
c000d68a:	68 00 00 f0 3f       	push   0x3ff00000
c000d68f:	6a 00                	push   0x0
c000d691:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d695:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d699:	e8 a9 b7 01 00       	call   c0028e47 <__ltdf2>
c000d69e:	83 c4 10             	add    esp,0x10
c000d6a1:	85 c0                	test   eax,eax
c000d6a3:	79 4d                	jns    c000d6f2 <sinc_mono_vari_process+0x18d>
c000d6a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6b5:	eb 1b                	jmp    c000d6d2 <sinc_mono_vari_process+0x16d>
c000d6b7:	68 00 00 f0 3f       	push   0x3ff00000
c000d6bc:	6a 00                	push   0x0
c000d6be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6c6:	e8 7c b7 01 00       	call   c0028e47 <__ltdf2>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	85 c0                	test   eax,eax
c000d6d0:	79 20                	jns    c000d6f2 <sinc_mono_vari_process+0x18d>
c000d6d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6d6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e2:	e8 75 b1 01 00       	call   c002885c <__divdf3>
c000d6e7:	83 c4 10             	add    esp,0x10
c000d6ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6f2:	50                   	push   eax
c000d6f3:	50                   	push   eax
c000d6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	e8 ff b8 01 00       	call   c0029000 <lrint>
c000d701:	40                   	inc    eax
c000d702:	0f af c7             	imul   eax,edi
c000d705:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d709:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d70d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d710:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d713:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d717:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d71b:	58                   	pop    eax
c000d71c:	5a                   	pop    edx
c000d71d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d721:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d725:	e8 d6 b8 01 00       	call   c0029000 <lrint>
c000d72a:	83 ec 0c             	sub    esp,0xc
c000d72d:	50                   	push   eax
c000d72e:	e8 a8 b4 01 00       	call   c0028bdb <__floatsidf>
c000d733:	83 c4 10             	add    esp,0x10
c000d736:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d73a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d73e:	52                   	push   edx
c000d73f:	50                   	push   eax
c000d740:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d744:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d748:	e8 ff ad 01 00       	call   c002854c <__subdf3>
c000d74d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d751:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d755:	83 c4 20             	add    esp,0x20
c000d758:	6a 00                	push   0x0
c000d75a:	6a 00                	push   0x0
c000d75c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d760:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d764:	e8 de b6 01 00       	call   c0028e47 <__ltdf2>
c000d769:	83 c4 10             	add    esp,0x10
c000d76c:	85 c0                	test   eax,eax
c000d76e:	79 1f                	jns    c000d78f <sinc_mono_vari_process+0x22a>
c000d770:	68 00 00 f0 3f       	push   0x3ff00000
c000d775:	6a 00                	push   0x0
c000d777:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77f:	e8 77 a7 01 00       	call   c0027efb <__adddf3>
c000d784:	83 c4 10             	add    esp,0x10
c000d787:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d78b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d78f:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d792:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d795:	83 ec 10             	sub    esp,0x10
c000d798:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d79c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7a0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7a4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7a8:	e8 9f ad 01 00       	call   c002854c <__subdf3>
c000d7ad:	83 c4 18             	add    esp,0x18
c000d7b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7b4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7b8:	52                   	push   edx
c000d7b9:	50                   	push   eax
c000d7ba:	e8 41 b8 01 00       	call   c0029000 <lrint>
c000d7bf:	0f af f8             	imul   edi,eax
c000d7c2:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7c5:	31 ff                	xor    edi,edi
c000d7c7:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7cc:	99                   	cdq    
c000d7cd:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7d0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7d3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7db:	55                   	push   ebp
c000d7dc:	57                   	push   edi
c000d7dd:	e8 7a b0 01 00       	call   c002885c <__divdf3>
c000d7e2:	83 c4 10             	add    esp,0x10
c000d7e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7ed:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7f2:	68 23 42 92 0c       	push   0xc924223
c000d7f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ff:	e8 f7 a6 01 00       	call   c0027efb <__adddf3>
c000d804:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d808:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d80c:	83 c4 20             	add    esp,0x20
c000d80f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d813:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d817:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d81a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d81d:	7d 54                	jge    c000d873 <sinc_mono_vari_process+0x30e>
c000d81f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d822:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d825:	01 c8                	add    eax,ecx
c000d827:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d82a:	99                   	cdq    
c000d82b:	f7 f9                	idiv   ecx
c000d82d:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d831:	7d 0c                	jge    c000d83f <sinc_mono_vari_process+0x2da>
c000d833:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d836:	85 ff                	test   edi,edi
c000d838:	79 73                	jns    c000d8ad <sinc_mono_vari_process+0x348>
c000d83a:	e9 ee 00 00 00       	jmp    c000d92d <sinc_mono_vari_process+0x3c8>
c000d83f:	50                   	push   eax
c000d840:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d844:	56                   	push   esi
c000d845:	53                   	push   ebx
c000d846:	e8 8d e0 ff ff       	call   c000b8d8 <prepare_data>
c000d84b:	89 c2                	mov    edx,eax
c000d84d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d851:	83 c4 10             	add    esp,0x10
c000d854:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d857:	85 d2                	test   edx,edx
c000d859:	0f 85 e6 03 00 00    	jne    c000dc45 <sinc_mono_vari_process+0x6e0>
c000d85f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d862:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d865:	01 c8                	add    eax,ecx
c000d867:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d86a:	99                   	cdq    
c000d86b:	f7 f9                	idiv   ecx
c000d86d:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d871:	7c c0                	jl     c000d833 <sinc_mono_vari_process+0x2ce>
c000d873:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d877:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d87b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d87f:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d882:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d889:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d88d:	89 01                	mov    DWORD PTR [ecx],eax
c000d88f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d892:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d895:	99                   	cdq    
c000d896:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d899:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d89c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d89f:	99                   	cdq    
c000d8a0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8a3:	31 d2                	xor    edx,edx
c000d8a5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8a8:	e9 98 03 00 00       	jmp    c000dc45 <sinc_mono_vari_process+0x6e0>
c000d8ad:	83 ec 0c             	sub    esp,0xc
c000d8b0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8b3:	e8 23 b3 01 00       	call   c0028bdb <__floatsidf>
c000d8b8:	83 c4 10             	add    esp,0x10
c000d8bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8bf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8c7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8cb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	e8 23 a6 01 00       	call   c0027efb <__adddf3>
c000d8d8:	83 c4 10             	add    esp,0x10
c000d8db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8e7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f3:	e8 03 a6 01 00       	call   c0027efb <__adddf3>
c000d8f8:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8fb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8ff:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d903:	e8 d3 b2 01 00       	call   c0028bdb <__floatsidf>
c000d908:	83 c4 10             	add    esp,0x10
c000d90b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d90f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d913:	52                   	push   edx
c000d914:	50                   	push   eax
c000d915:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d919:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d91d:	e8 07 b5 01 00       	call   c0028e29 <__gtdf2>
c000d922:	83 c4 10             	add    esp,0x10
c000d925:	85 c0                	test   eax,eax
c000d927:	0f 8f 46 ff ff ff    	jg     c000d873 <sinc_mono_vari_process+0x30e>
c000d92d:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d931:	0f 8e f5 00 00 00    	jle    c000da2c <sinc_mono_vari_process+0x4c7>
c000d937:	83 ec 10             	sub    esp,0x10
c000d93a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d93d:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d940:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d944:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d947:	ff 30                	push   DWORD PTR [eax]
c000d949:	e8 fe ab 01 00       	call   c002854c <__subdf3>
c000d94e:	83 c4 18             	add    esp,0x18
c000d951:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d955:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d959:	52                   	push   edx
c000d95a:	50                   	push   eax
c000d95b:	e8 80 b6 01 00       	call   c0028fe0 <fabs>
c000d960:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d964:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d968:	83 c4 10             	add    esp,0x10
c000d96b:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d970:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d975:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d979:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d97d:	e8 a7 b4 01 00       	call   c0028e29 <__gtdf2>
c000d982:	83 c4 10             	add    esp,0x10
c000d985:	85 c0                	test   eax,eax
c000d987:	0f 8e 9f 00 00 00    	jle    c000da2c <sinc_mono_vari_process+0x4c7>
c000d98d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d991:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d994:	8b 00                	mov    eax,DWORD PTR [eax]
c000d996:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d99a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d99e:	52                   	push   edx
c000d99f:	50                   	push   eax
c000d9a0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9a3:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9a6:	e8 a1 ab 01 00       	call   c002854c <__subdf3>
c000d9ab:	5f                   	pop    edi
c000d9ac:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9b0:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9b4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9b7:	e8 1f b2 01 00       	call   c0028bdb <__floatsidf>
c000d9bc:	83 c4 10             	add    esp,0x10
c000d9bf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9c3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9c7:	52                   	push   edx
c000d9c8:	50                   	push   eax
c000d9c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9d1:	e8 a2 ab 01 00       	call   c0028578 <__muldf3>
c000d9d6:	5d                   	pop    ebp
c000d9d7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9db:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9df:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9e2:	e8 f4 b1 01 00       	call   c0028bdb <__floatsidf>
c000d9e7:	83 c4 10             	add    esp,0x10
c000d9ea:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9ee:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9f2:	52                   	push   edx
c000d9f3:	50                   	push   eax
c000d9f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	e8 5b ae 01 00       	call   c002885c <__divdf3>
c000da01:	83 c4 10             	add    esp,0x10
c000da04:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da08:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da14:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da18:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1c:	e8 da a4 01 00       	call   c0027efb <__adddf3>
c000da21:	83 c4 10             	add    esp,0x10
c000da24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da2c:	83 ec 0c             	sub    esp,0xc
c000da2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da32:	e8 a4 b1 01 00       	call   c0028bdb <__floatsidf>
c000da37:	83 c4 10             	add    esp,0x10
c000da3a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da3e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da52:	e8 f0 b3 01 00       	call   c0028e47 <__ltdf2>
c000da57:	83 c4 10             	add    esp,0x10
c000da5a:	85 c0                	test   eax,eax
c000da5c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da60:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da64:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da68:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da6c:	78 10                	js     c000da7e <sinc_mono_vari_process+0x519>
c000da6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da76:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da7a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da8e:	e8 e5 aa 01 00       	call   c0028578 <__muldf3>
c000da93:	59                   	pop    ecx
c000da94:	5f                   	pop    edi
c000da95:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da99:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000daa1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000daa5:	e8 07 de ff ff       	call   c000b8b1 <double_to_fp>
c000daaa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daae:	89 c7                	mov    edi,eax
c000dab0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dab4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dab8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dabc:	e8 b7 aa 01 00       	call   c0028578 <__muldf3>
c000dac1:	83 c4 18             	add    esp,0x18
c000dac4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dac8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dacc:	52                   	push   edx
c000dacd:	50                   	push   eax
c000dace:	e8 de dd ff ff       	call   c000b8b1 <double_to_fp>
c000dad3:	83 ec 0c             	sub    esp,0xc
c000dad6:	89 c5                	mov    ebp,eax
c000dad8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dadb:	e8 fb b0 01 00       	call   c0028bdb <__floatsidf>
c000dae0:	83 c4 10             	add    esp,0x10
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	52                   	push   edx
c000daec:	50                   	push   eax
c000daed:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000daf1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000daf5:	e8 62 ad 01 00       	call   c002885c <__divdf3>
c000dafa:	83 c4 10             	add    esp,0x10
c000dafd:	89 e9                	mov    ecx,ebp
c000daff:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db03:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db07:	89 d8                	mov    eax,ebx
c000db09:	89 fa                	mov    edx,edi
c000db0b:	e8 ee bd ff ff       	call   c00098fe <calc_output_single>
c000db10:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db13:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db16:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db1a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db1e:	52                   	push   edx
c000db1f:	50                   	push   eax
c000db20:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db24:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db28:	e8 4b aa 01 00       	call   c0028578 <__muldf3>
c000db2d:	59                   	pop    ecx
c000db2e:	59                   	pop    ecx
c000db2f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db33:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db37:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db3b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db3f:	e8 07 b3 01 00       	call   c0028e4b <__truncdfsf2>
c000db44:	83 c4 10             	add    esp,0x10
c000db47:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db4a:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db4d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db51:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db55:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db59:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db5d:	e8 fa ac 01 00       	call   c002885c <__divdf3>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db69:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db75:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db79:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db7d:	e8 79 a3 01 00       	call   c0027efb <__adddf3>
c000db82:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db86:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db8a:	83 c4 18             	add    esp,0x18
c000db8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db91:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db95:	e8 66 b4 01 00       	call   c0029000 <lrint>
c000db9a:	83 ec 0c             	sub    esp,0xc
c000db9d:	50                   	push   eax
c000db9e:	e8 38 b0 01 00       	call   c0028bdb <__floatsidf>
c000dba3:	83 c4 10             	add    esp,0x10
c000dba6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbaa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbae:	52                   	push   edx
c000dbaf:	50                   	push   eax
c000dbb0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbb4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbb8:	e8 8f a9 01 00       	call   c002854c <__subdf3>
c000dbbd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbc1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbc5:	83 c4 20             	add    esp,0x20
c000dbc8:	6a 00                	push   0x0
c000dbca:	6a 00                	push   0x0
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 6e b2 01 00       	call   c0028e47 <__ltdf2>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	85 c0                	test   eax,eax
c000dbde:	79 20                	jns    c000dc00 <sinc_mono_vari_process+0x69b>
c000dbe0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf0:	e8 06 a3 01 00       	call   c0027efb <__adddf3>
c000dbf5:	83 c4 10             	add    esp,0x10
c000dbf8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbfc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc00:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc03:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc06:	83 ec 10             	sub    esp,0x10
c000dc09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc11:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc15:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc19:	e8 2e a9 01 00       	call   c002854c <__subdf3>
c000dc1e:	83 c4 18             	add    esp,0x18
c000dc21:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc25:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc29:	52                   	push   edx
c000dc2a:	50                   	push   eax
c000dc2b:	e8 d0 b3 01 00       	call   c0029000 <lrint>
c000dc30:	83 c4 10             	add    esp,0x10
c000dc33:	0f af f8             	imul   edi,eax
c000dc36:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc39:	99                   	cdq    
c000dc3a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc3d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc40:	e9 d2 fb ff ff       	jmp    c000d817 <sinc_mono_vari_process+0x2b2>
c000dc45:	83 c4 4c             	add    esp,0x4c
c000dc48:	89 d0                	mov    eax,edx
c000dc4a:	5b                   	pop    ebx
c000dc4b:	5e                   	pop    esi
c000dc4c:	5f                   	pop    edi
c000dc4d:	5d                   	pop    ebp
c000dc4e:	c3                   	ret    

c000dc4f <sinc_get_name>:
c000dc4f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc53:	31 c0                	xor    eax,eax
c000dc55:	83 fa 02             	cmp    edx,0x2
c000dc58:	77 07                	ja     c000dc61 <sinc_get_name+0x12>
c000dc5a:	8b 04 95 e4 a8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd571c]
c000dc61:	c3                   	ret    

c000dc62 <sinc_get_description>:
c000dc62:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc66:	31 c0                	xor    eax,eax
c000dc68:	83 fa 02             	cmp    edx,0x2
c000dc6b:	77 07                	ja     c000dc74 <sinc_get_description+0x12>
c000dc6d:	8b 04 95 d8 a8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5728]
c000dc74:	c3                   	ret    

c000dc75 <sinc_set_converter>:
c000dc75:	53                   	push   ebx
c000dc76:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc7c:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc83:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc86:	85 c0                	test   eax,eax
c000dc88:	74 13                	je     c000dc9d <sinc_set_converter+0x28>
c000dc8a:	83 ec 0c             	sub    esp,0xc
c000dc8d:	50                   	push   eax
c000dc8e:	e8 57 1c 00 00       	call   c000f8ea <free>
c000dc93:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc9a:	83 c4 10             	add    esp,0x10
c000dc9d:	50                   	push   eax
c000dc9e:	68 44 08 00 00       	push   0x844
c000dca3:	6a 00                	push   0x0
c000dca5:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dca9:	50                   	push   eax
c000dcaa:	e8 bd 2a ff ff       	call   c000076c <memset>
c000dcaf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcb2:	83 c4 10             	add    esp,0x10
c000dcb5:	b8 0b 00 00 00       	mov    eax,0xb
c000dcba:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcc0:	7f 6e                	jg     c000dd30 <sinc_set_converter+0xbb>
c000dcc2:	83 fa 01             	cmp    edx,0x1
c000dcc5:	75 10                	jne    c000dcd7 <sinc_set_converter+0x62>
c000dcc7:	c7 43 24 65 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d565
c000dcce:	c7 43 20 65 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d565
c000dcd5:	eb 4d                	jmp    c000dd24 <sinc_set_converter+0xaf>
c000dcd7:	83 fa 02             	cmp    edx,0x2
c000dcda:	75 10                	jne    c000dcec <sinc_set_converter+0x77>
c000dcdc:	c7 43 24 a0 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cea0
c000dce3:	c7 43 20 a0 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cea0
c000dcea:	eb 38                	jmp    c000dd24 <sinc_set_converter+0xaf>
c000dcec:	83 fa 04             	cmp    edx,0x4
c000dcef:	75 10                	jne    c000dd01 <sinc_set_converter+0x8c>
c000dcf1:	c7 43 24 db c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7db
c000dcf8:	c7 43 20 db c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7db
c000dcff:	eb 23                	jmp    c000dd24 <sinc_set_converter+0xaf>
c000dd01:	83 fa 06             	cmp    edx,0x6
c000dd04:	75 10                	jne    c000dd16 <sinc_set_converter+0xa1>
c000dd06:	c7 43 24 16 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c116
c000dd0d:	c7 43 20 16 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c116
c000dd14:	eb 0e                	jmp    c000dd24 <sinc_set_converter+0xaf>
c000dd16:	c7 43 24 52 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba52
c000dd1d:	c7 43 20 52 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba52
c000dd24:	c7 43 28 05 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad05
c000dd2b:	b8 0a 00 00 00       	mov    eax,0xa
c000dd30:	81 c4 58 08 00 00    	add    esp,0x858
c000dd36:	5b                   	pop    ebx
c000dd37:	c3                   	ret    

c000dd38 <zoh_vari_process>:
c000dd38:	55                   	push   ebp
c000dd39:	31 d2                	xor    edx,edx
c000dd3b:	57                   	push   edi
c000dd3c:	56                   	push   esi
c000dd3d:	53                   	push   ebx
c000dd3e:	83 ec 3c             	sub    esp,0x3c
c000dd41:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd45:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd49:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd4d:	0f 8e 80 06 00 00    	jle    c000e3d3 <zoh_vari_process+0x69b>
c000dd53:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd56:	ba 05 00 00 00       	mov    edx,0x5
c000dd5b:	85 db                	test   ebx,ebx
c000dd5d:	0f 84 70 06 00 00    	je     c000e3d3 <zoh_vari_process+0x69b>
c000dd63:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd66:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd6a:	74 19                	je     c000dd85 <zoh_vari_process+0x4d>
c000dd6c:	31 d2                	xor    edx,edx
c000dd6e:	39 c2                	cmp    edx,eax
c000dd70:	7d 0c                	jge    c000dd7e <zoh_vari_process+0x46>
c000dd72:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd74:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd77:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd7b:	42                   	inc    edx
c000dd7c:	eb f0                	jmp    c000dd6e <zoh_vari_process+0x36>
c000dd7e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd85:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd88:	0f af d0             	imul   edx,eax
c000dd8b:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd8e:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd99:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd9c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dda3:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dda6:	8b 07                	mov    eax,DWORD PTR [edi]
c000dda8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddb0:	68 00 00 70 3f       	push   0x3f700000
c000ddb5:	6a 00                	push   0x0
c000ddb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddbf:	e8 83 b0 01 00       	call   c0028e47 <__ltdf2>
c000ddc4:	83 c4 10             	add    esp,0x10
c000ddc7:	ba 16 00 00 00       	mov    edx,0x16
c000ddcc:	85 c0                	test   eax,eax
c000ddce:	0f 88 ff 05 00 00    	js     c000e3d3 <zoh_vari_process+0x69b>
c000ddd4:	68 00 00 70 40       	push   0x40700000
c000ddd9:	6a 00                	push   0x0
c000dddb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dde3:	e8 41 b0 01 00       	call   c0028e29 <__gtdf2>
c000dde8:	83 c4 10             	add    esp,0x10
c000ddeb:	ba 16 00 00 00       	mov    edx,0x16
c000ddf0:	85 c0                	test   eax,eax
c000ddf2:	0f 8f db 05 00 00    	jg     c000e3d3 <zoh_vari_process+0x69b>
c000ddf8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ddfb:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000ddfe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de02:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de06:	68 00 00 f0 3f       	push   0x3ff00000
c000de0b:	6a 00                	push   0x0
c000de0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de15:	e8 2d b0 01 00       	call   c0028e47 <__ltdf2>
c000de1a:	83 c4 10             	add    esp,0x10
c000de1d:	85 c0                	test   eax,eax
c000de1f:	0f 89 da 01 00 00    	jns    c000dfff <zoh_vari_process+0x2c7>
c000de25:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de28:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de2b:	0f 8d ce 01 00 00    	jge    c000dfff <zoh_vari_process+0x2c7>
c000de31:	83 ec 0c             	sub    esp,0xc
c000de34:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de37:	e8 9f ad 01 00       	call   c0028bdb <__floatsidf>
c000de3c:	83 c4 10             	add    esp,0x10
c000de3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000de42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de56:	e8 1d a7 01 00       	call   c0028578 <__muldf3>
c000de5b:	59                   	pop    ecx
c000de5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de60:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de64:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de67:	e8 6f ad 01 00       	call   c0028bdb <__floatsidf>
c000de6c:	83 c4 10             	add    esp,0x10
c000de6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de73:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de77:	52                   	push   edx
c000de78:	50                   	push   eax
c000de79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de7d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de81:	e8 75 a0 01 00       	call   c0027efb <__adddf3>
c000de86:	59                   	pop    ecx
c000de87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de8b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de8f:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de92:	e8 44 ad 01 00       	call   c0028bdb <__floatsidf>
c000de97:	83 c4 10             	add    esp,0x10
c000de9a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de9e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dea2:	52                   	push   edx
c000dea3:	50                   	push   eax
c000dea4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dea8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deac:	e8 94 af 01 00       	call   c0028e45 <__gedf2>
c000deb1:	83 c4 10             	add    esp,0x10
c000deb4:	85 c0                	test   eax,eax
c000deb6:	0f 89 43 01 00 00    	jns    c000dfff <zoh_vari_process+0x2c7>
c000debc:	85 ed                	test   ebp,ebp
c000debe:	0f 8e ec 00 00 00    	jle    c000dfb0 <zoh_vari_process+0x278>
c000dec4:	83 ec 10             	sub    esp,0x10
c000dec7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deca:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000decd:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000ded0:	ff 37                	push   DWORD PTR [edi]
c000ded2:	e8 75 a6 01 00       	call   c002854c <__subdf3>
c000ded7:	83 c4 18             	add    esp,0x18
c000deda:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dede:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dee2:	52                   	push   edx
c000dee3:	50                   	push   eax
c000dee4:	e8 f7 b0 01 00       	call   c0028fe0 <fabs>
c000dee9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000deed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000def1:	83 c4 10             	add    esp,0x10
c000def4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000def9:	68 23 42 92 0c       	push   0xc924223
c000defe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df06:	e8 1e af 01 00       	call   c0028e29 <__gtdf2>
c000df0b:	83 c4 10             	add    esp,0x10
c000df0e:	85 c0                	test   eax,eax
c000df10:	0f 8e 9a 00 00 00    	jle    c000dfb0 <zoh_vari_process+0x278>
c000df16:	8b 07                	mov    eax,DWORD PTR [edi]
c000df18:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df1b:	89 04 24             	mov    DWORD PTR [esp],eax
c000df1e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df22:	52                   	push   edx
c000df23:	50                   	push   eax
c000df24:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df27:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df2a:	e8 1d a6 01 00       	call   c002854c <__subdf3>
c000df2f:	59                   	pop    ecx
c000df30:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df34:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df38:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df3b:	e8 9b ac 01 00       	call   c0028bdb <__floatsidf>
c000df40:	83 c4 10             	add    esp,0x10
c000df43:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df47:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df4b:	52                   	push   edx
c000df4c:	50                   	push   eax
c000df4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df55:	e8 1e a6 01 00       	call   c0028578 <__muldf3>
c000df5a:	5d                   	pop    ebp
c000df5b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df5f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df63:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df66:	e8 70 ac 01 00       	call   c0028bdb <__floatsidf>
c000df6b:	83 c4 10             	add    esp,0x10
c000df6e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df72:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df76:	52                   	push   edx
c000df77:	50                   	push   eax
c000df78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	e8 d7 a8 01 00       	call   c002885c <__divdf3>
c000df85:	83 c4 10             	add    esp,0x10
c000df88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfa0:	e8 56 9f 01 00       	call   c0027efb <__adddf3>
c000dfa5:	83 c4 10             	add    esp,0x10
c000dfa8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfb0:	31 c0                	xor    eax,eax
c000dfb2:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfb5:	7e 13                	jle    c000dfca <zoh_vari_process+0x292>
c000dfb7:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfbb:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfbe:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfc1:	40                   	inc    eax
c000dfc2:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfc5:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfc8:	eb e8                	jmp    c000dfb2 <zoh_vari_process+0x27a>
c000dfca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfd2:	68 00 00 f0 3f       	push   0x3ff00000
c000dfd7:	6a 00                	push   0x0
c000dfd9:	e8 7e a8 01 00       	call   c002885c <__divdf3>
c000dfde:	83 c4 10             	add    esp,0x10
c000dfe1:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfe4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfe8:	52                   	push   edx
c000dfe9:	50                   	push   eax
c000dfea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff2:	e8 04 9f 01 00       	call   c0027efb <__adddf3>
c000dff7:	83 c4 10             	add    esp,0x10
c000dffa:	e9 ff fd ff ff       	jmp    c000ddfe <zoh_vari_process+0xc6>
c000dfff:	55                   	push   ebp
c000e000:	55                   	push   ebp
c000e001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e005:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e009:	e8 f2 af 01 00       	call   c0029000 <lrint>
c000e00e:	83 ec 0c             	sub    esp,0xc
c000e011:	50                   	push   eax
c000e012:	e8 c4 ab 01 00       	call   c0028bdb <__floatsidf>
c000e017:	83 c4 10             	add    esp,0x10
c000e01a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e01e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e022:	52                   	push   edx
c000e023:	50                   	push   eax
c000e024:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e028:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e02c:	e8 1b a5 01 00       	call   c002854c <__subdf3>
c000e031:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e035:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e039:	83 c4 20             	add    esp,0x20
c000e03c:	6a 00                	push   0x0
c000e03e:	6a 00                	push   0x0
c000e040:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e044:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e048:	e8 fa ad 01 00       	call   c0028e47 <__ltdf2>
c000e04d:	83 c4 10             	add    esp,0x10
c000e050:	85 c0                	test   eax,eax
c000e052:	79 1e                	jns    c000e072 <zoh_vari_process+0x33a>
c000e054:	68 00 00 f0 3f       	push   0x3ff00000
c000e059:	6a 00                	push   0x0
c000e05b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e05f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e063:	e8 93 9e 01 00       	call   c0027efb <__adddf3>
c000e068:	83 c4 10             	add    esp,0x10
c000e06b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e06e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e072:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e075:	83 ec 10             	sub    esp,0x10
c000e078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e07c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e080:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e084:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e088:	e8 bf a4 01 00       	call   c002854c <__subdf3>
c000e08d:	83 c4 18             	add    esp,0x18
c000e090:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e094:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e098:	52                   	push   edx
c000e099:	50                   	push   eax
c000e09a:	e8 61 af 01 00       	call   c0029000 <lrint>
c000e09f:	83 c4 10             	add    esp,0x10
c000e0a2:	0f af e8             	imul   ebp,eax
c000e0a5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0a8:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0ab:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0af:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0b2:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0b9:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0bc:	0f 8d 7a 02 00 00    	jge    c000e33c <zoh_vari_process+0x604>
c000e0c2:	83 ec 0c             	sub    esp,0xc
c000e0c5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0c8:	e8 0e ab 01 00       	call   c0028bdb <__floatsidf>
c000e0cd:	83 c4 10             	add    esp,0x10
c000e0d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0d8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0dc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0e8:	e8 8b a4 01 00       	call   c0028578 <__muldf3>
c000e0ed:	59                   	pop    ecx
c000e0ee:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0f2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0fa:	e8 dc aa 01 00       	call   c0028bdb <__floatsidf>
c000e0ff:	83 c4 10             	add    esp,0x10
c000e102:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e10a:	52                   	push   edx
c000e10b:	50                   	push   eax
c000e10c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e110:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e114:	e8 e2 9d 01 00       	call   c0027efb <__adddf3>
c000e119:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e11c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e120:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e124:	e8 b2 aa 01 00       	call   c0028bdb <__floatsidf>
c000e129:	83 c4 10             	add    esp,0x10
c000e12c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e130:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e134:	52                   	push   edx
c000e135:	50                   	push   eax
c000e136:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e13a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e13e:	e8 06 ad 01 00       	call   c0028e49 <__ledf2>
c000e143:	83 c4 10             	add    esp,0x10
c000e146:	85 c0                	test   eax,eax
c000e148:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e14c:	0f 8f ea 01 00 00    	jg     c000e33c <zoh_vari_process+0x604>
c000e152:	85 c9                	test   ecx,ecx
c000e154:	0f 8e ed 00 00 00    	jle    c000e247 <zoh_vari_process+0x50f>
c000e15a:	83 ec 10             	sub    esp,0x10
c000e15d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e160:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e163:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e166:	ff 37                	push   DWORD PTR [edi]
c000e168:	e8 df a3 01 00       	call   c002854c <__subdf3>
c000e16d:	83 c4 18             	add    esp,0x18
c000e170:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e174:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e178:	52                   	push   edx
c000e179:	50                   	push   eax
c000e17a:	e8 61 ae 01 00       	call   c0028fe0 <fabs>
c000e17f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e183:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e187:	83 c4 10             	add    esp,0x10
c000e18a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e18f:	68 23 42 92 0c       	push   0xc924223
c000e194:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e198:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e19c:	e8 88 ac 01 00       	call   c0028e29 <__gtdf2>
c000e1a1:	83 c4 10             	add    esp,0x10
c000e1a4:	85 c0                	test   eax,eax
c000e1a6:	0f 8e 9b 00 00 00    	jle    c000e247 <zoh_vari_process+0x50f>
c000e1ac:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1ae:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1b5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1b9:	52                   	push   edx
c000e1ba:	50                   	push   eax
c000e1bb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1be:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1c1:	e8 86 a3 01 00       	call   c002854c <__subdf3>
c000e1c6:	5d                   	pop    ebp
c000e1c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1cb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1d2:	e8 04 aa 01 00       	call   c0028bdb <__floatsidf>
c000e1d7:	83 c4 10             	add    esp,0x10
c000e1da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1e2:	52                   	push   edx
c000e1e3:	50                   	push   eax
c000e1e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ec:	e8 87 a3 01 00       	call   c0028578 <__muldf3>
c000e1f1:	59                   	pop    ecx
c000e1f2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1f6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1fa:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1fd:	e8 d9 a9 01 00       	call   c0028bdb <__floatsidf>
c000e202:	83 c4 10             	add    esp,0x10
c000e205:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e209:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e20d:	52                   	push   edx
c000e20e:	50                   	push   eax
c000e20f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	e8 40 a6 01 00       	call   c002885c <__divdf3>
c000e21c:	83 c4 10             	add    esp,0x10
c000e21f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e223:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e227:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e22b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e22f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e233:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e237:	e8 bf 9c 01 00       	call   c0027efb <__adddf3>
c000e23c:	83 c4 10             	add    esp,0x10
c000e23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e247:	31 d2                	xor    edx,edx
c000e249:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e24c:	39 d0                	cmp    eax,edx
c000e24e:	7e 1d                	jle    c000e26d <zoh_vari_process+0x535>
c000e250:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e253:	29 c1                	sub    ecx,eax
c000e255:	89 c8                	mov    eax,ecx
c000e257:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e259:	01 d0                	add    eax,edx
c000e25b:	42                   	inc    edx
c000e25c:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e25f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e262:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e265:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e268:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e26b:	eb dc                	jmp    c000e249 <zoh_vari_process+0x511>
c000e26d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e271:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e275:	68 00 00 f0 3f       	push   0x3ff00000
c000e27a:	6a 00                	push   0x0
c000e27c:	e8 db a5 01 00       	call   c002885c <__divdf3>
c000e281:	83 c4 10             	add    esp,0x10
c000e284:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e288:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e28c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e294:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e29c:	e8 5a 9c 01 00       	call   c0027efb <__adddf3>
c000e2a1:	5d                   	pop    ebp
c000e2a2:	59                   	pop    ecx
c000e2a3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b3:	e8 48 ad 01 00       	call   c0029000 <lrint>
c000e2b8:	83 ec 0c             	sub    esp,0xc
c000e2bb:	50                   	push   eax
c000e2bc:	e8 1a a9 01 00       	call   c0028bdb <__floatsidf>
c000e2c1:	83 c4 10             	add    esp,0x10
c000e2c4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2c8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2cc:	52                   	push   edx
c000e2cd:	50                   	push   eax
c000e2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2d6:	e8 71 a2 01 00       	call   c002854c <__subdf3>
c000e2db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2e3:	83 c4 20             	add    esp,0x20
c000e2e6:	6a 00                	push   0x0
c000e2e8:	6a 00                	push   0x0
c000e2ea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f2:	e8 50 ab 01 00       	call   c0028e47 <__ltdf2>
c000e2f7:	83 c4 10             	add    esp,0x10
c000e2fa:	85 c0                	test   eax,eax
c000e2fc:	79 1e                	jns    c000e31c <zoh_vari_process+0x5e4>
c000e2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000e303:	6a 00                	push   0x0
c000e305:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e309:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30d:	e8 e9 9b 01 00       	call   c0027efb <__adddf3>
c000e312:	83 c4 10             	add    esp,0x10
c000e315:	89 04 24             	mov    DWORD PTR [esp],eax
c000e318:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e31c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e31f:	83 ec 10             	sub    esp,0x10
c000e322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e326:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e32a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e32e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e332:	e8 15 a2 01 00       	call   c002854c <__subdf3>
c000e337:	e9 51 fd ff ff       	jmp    c000e08d <zoh_vari_process+0x355>
c000e33c:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e340:	7d 3a                	jge    c000e37c <zoh_vari_process+0x644>
c000e342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e346:	83 ec 0c             	sub    esp,0xc
c000e349:	29 e8                	sub    eax,ebp
c000e34b:	99                   	cdq    
c000e34c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e34f:	50                   	push   eax
c000e350:	e8 86 a8 01 00       	call   c0028bdb <__floatsidf>
c000e355:	83 c4 10             	add    esp,0x10
c000e358:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e35c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e360:	52                   	push   edx
c000e361:	50                   	push   eax
c000e362:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e366:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e36a:	e8 8c 9b 01 00       	call   c0027efb <__adddf3>
c000e36f:	83 c4 10             	add    esp,0x10
c000e372:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e375:	89 04 24             	mov    DWORD PTR [esp],eax
c000e378:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e37c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e37f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e383:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e386:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e389:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e38c:	85 c0                	test   eax,eax
c000e38e:	7f 25                	jg     c000e3b5 <zoh_vari_process+0x67d>
c000e390:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e394:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e398:	89 07                	mov    DWORD PTR [edi],eax
c000e39a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e39d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3a0:	99                   	cdq    
c000e3a1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3a4:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3a7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3aa:	99                   	cdq    
c000e3ab:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3ae:	31 d2                	xor    edx,edx
c000e3b0:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3b3:	eb 1e                	jmp    c000e3d3 <zoh_vari_process+0x69b>
c000e3b5:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3b8:	31 d2                	xor    edx,edx
c000e3ba:	29 c8                	sub    eax,ecx
c000e3bc:	c1 e0 02             	shl    eax,0x2
c000e3bf:	39 d1                	cmp    ecx,edx
c000e3c1:	7e cd                	jle    c000e390 <zoh_vari_process+0x658>
c000e3c3:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3c5:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3c9:	83 c0 04             	add    eax,0x4
c000e3cc:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3d0:	42                   	inc    edx
c000e3d1:	eb ec                	jmp    c000e3bf <zoh_vari_process+0x687>
c000e3d3:	83 c4 3c             	add    esp,0x3c
c000e3d6:	89 d0                	mov    eax,edx
c000e3d8:	5b                   	pop    ebx
c000e3d9:	5e                   	pop    esi
c000e3da:	5f                   	pop    edi
c000e3db:	5d                   	pop    ebp
c000e3dc:	c3                   	ret    

c000e3dd <zoh_reset>:
c000e3dd:	83 ec 0c             	sub    esp,0xc
c000e3e0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3e4:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3e7:	85 c0                	test   eax,eax
c000e3e9:	74 20                	je     c000e40b <zoh_reset+0x2e>
c000e3eb:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3ee:	83 c0 1c             	add    eax,0x1c
c000e3f1:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3f4:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3fb:	c1 e2 02             	shl    edx,0x2
c000e3fe:	51                   	push   ecx
c000e3ff:	52                   	push   edx
c000e400:	6a 00                	push   0x0
c000e402:	50                   	push   eax
c000e403:	e8 64 23 ff ff       	call   c000076c <memset>
c000e408:	83 c4 10             	add    esp,0x10
c000e40b:	83 c4 0c             	add    esp,0xc
c000e40e:	c3                   	ret    

c000e40f <zoh_get_name>:
c000e40f:	31 c0                	xor    eax,eax
c000e411:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e416:	75 05                	jne    c000e41d <zoh_get_name+0xe>
c000e418:	b8 fe a9 02 c0       	mov    eax,0xc002a9fe
c000e41d:	c3                   	ret    

c000e41e <zoh_get_description>:
c000e41e:	31 c0                	xor    eax,eax
c000e420:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e425:	75 05                	jne    c000e42c <zoh_get_description+0xe>
c000e427:	b8 0f aa 02 c0       	mov    eax,0xc002aa0f
c000e42c:	c3                   	ret    

c000e42d <zoh_set_converter>:
c000e42d:	53                   	push   ebx
c000e42e:	b8 0a 00 00 00       	mov    eax,0xa
c000e433:	83 ec 08             	sub    esp,0x8
c000e436:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e43a:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e43f:	75 6e                	jne    c000e4af <zoh_set_converter+0x82>
c000e441:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e444:	85 c0                	test   eax,eax
c000e446:	74 13                	je     c000e45b <zoh_set_converter+0x2e>
c000e448:	83 ec 0c             	sub    esp,0xc
c000e44b:	50                   	push   eax
c000e44c:	e8 99 14 00 00       	call   c000f8ea <free>
c000e451:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e458:	83 c4 10             	add    esp,0x10
c000e45b:	50                   	push   eax
c000e45c:	50                   	push   eax
c000e45d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e460:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e467:	50                   	push   eax
c000e468:	6a 01                	push   0x1
c000e46a:	e8 9b 14 00 00       	call   c000f90a <calloc>
c000e46f:	83 c4 10             	add    esp,0x10
c000e472:	89 c2                	mov    edx,eax
c000e474:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e477:	85 d2                	test   edx,edx
c000e479:	b8 01 00 00 00       	mov    eax,0x1
c000e47e:	74 2f                	je     c000e4af <zoh_set_converter+0x82>
c000e480:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e483:	83 ec 0c             	sub    esp,0xc
c000e486:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e489:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e48f:	c7 43 24 38 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd38
c000e496:	c7 43 20 38 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd38
c000e49d:	c7 43 28 dd e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3dd
c000e4a4:	53                   	push   ebx
c000e4a5:	e8 33 ff ff ff       	call   c000e3dd <zoh_reset>
c000e4aa:	83 c4 10             	add    esp,0x10
c000e4ad:	31 c0                	xor    eax,eax
c000e4af:	83 c4 08             	add    esp,0x8
c000e4b2:	5b                   	pop    ebx
c000e4b3:	c3                   	ret    

c000e4b4 <CPU::current()>:
c000e4b4:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c000e4b9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4bf:	c3                   	ret    

c000e4c0 <operator new(unsigned long)>:
c000e4c0:	e9 15 14 00 00       	jmp    c000f8da <malloc>

c000e4c5 <operator delete(void*)>:
c000e4c5:	e9 30 14 00 00       	jmp    c000f8fa <rfree>

c000e4ca <disableIRQs()>:
c000e4ca:	fa                   	cli    
c000e4cb:	ff 05 a8 25 03 c0    	inc    DWORD PTR ds:0xc00325a8
c000e4d1:	c3                   	ret    

c000e4d2 <enableIRQs()>:
c000e4d2:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c000e4d7:	48                   	dec    eax
c000e4d8:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c000e4dd:	75 01                	jne    c000e4e0 <enableIRQs()+0xe>
c000e4df:	fb                   	sti    
c000e4e0:	c3                   	ret    

c000e4e1 <lockScheduler()>:
c000e4e1:	fa                   	cli    
c000e4e2:	ff 05 a8 25 03 c0    	inc    DWORD PTR ds:0xc00325a8
c000e4e8:	c3                   	ret    

c000e4e9 <unlockScheduler()>:
c000e4e9:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c000e4ee:	48                   	dec    eax
c000e4ef:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c000e4f4:	75 01                	jne    c000e4f7 <unlockScheduler()+0xe>
c000e4f6:	fb                   	sti    
c000e4f7:	c3                   	ret    

c000e4f8 <lockStuff()>:
c000e4f8:	fa                   	cli    
c000e4f9:	ff 05 a8 25 03 c0    	inc    DWORD PTR ds:0xc00325a8
c000e4ff:	ff 05 a4 25 03 c0    	inc    DWORD PTR ds:0xc00325a4
c000e505:	c3                   	ret    

c000e506 <unlockStuff()>:
c000e506:	83 ec 0c             	sub    esp,0xc
c000e509:	a1 a4 25 03 c0       	mov    eax,ds:0xc00325a4
c000e50e:	48                   	dec    eax
c000e50f:	a3 a4 25 03 c0       	mov    ds:0xc00325a4,eax
c000e514:	75 18                	jne    c000e52e <unlockStuff()+0x28>
c000e516:	83 3d a0 25 03 c0 00 	cmp    DWORD PTR ds:0xc00325a0,0x0
c000e51d:	74 0f                	je     c000e52e <unlockStuff()+0x28>
c000e51f:	c7 05 a0 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325a0,0x0
c000e529:	e8 f2 00 01 00       	call   c001e620 <schedule()>
c000e52e:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c000e533:	48                   	dec    eax
c000e534:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c000e539:	75 01                	jne    c000e53c <unlockStuff()+0x36>
c000e53b:	fb                   	sti    
c000e53c:	83 c4 0c             	add    esp,0xc
c000e53f:	c3                   	ret    

c000e540 <Virt::getAKernelVAS()>:
c000e540:	a1 f0 f1 02 c0       	mov    eax,ds:0xc002f1f0
c000e545:	c3                   	ret    

c000e546 <__not_memcpy>:
c000e546:	57                   	push   edi
c000e547:	56                   	push   esi
c000e548:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e54c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e550:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e554:	89 c7                	mov    edi,eax
c000e556:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e558:	5e                   	pop    esi
c000e559:	5f                   	pop    edi
c000e55a:	c3                   	ret    

c000e55b <Krnl::resolveCompatibilitySymbol(char*)>:
c000e55b:	83 ec 0c             	sub    esp,0xc
c000e55e:	83 ec 08             	sub    esp,0x8
c000e561:	68 46 aa 02 c0       	push   0xc002aa46
c000e566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e56a:	e8 45 23 ff ff       	call   c00008b4 <strcmp>
c000e56f:	83 c4 10             	add    esp,0x10
c000e572:	85 c0                	test   eax,eax
c000e574:	0f 94 c0             	sete   al
c000e577:	84 c0                	test   al,al
c000e579:	74 0a                	je     c000e585 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e57b:	b8 68 f0 02 c0       	mov    eax,0xc002f068
c000e580:	e9 e3 00 00 00       	jmp    c000e668 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e585:	83 ec 08             	sub    esp,0x8
c000e588:	68 4f aa 02 c0       	push   0xc002aa4f
c000e58d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e591:	e8 1e 23 ff ff       	call   c00008b4 <strcmp>
c000e596:	83 c4 10             	add    esp,0x10
c000e599:	85 c0                	test   eax,eax
c000e59b:	0f 94 c0             	sete   al
c000e59e:	84 c0                	test   al,al
c000e5a0:	74 0a                	je     c000e5ac <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e5a2:	b8 74 73 02 c0       	mov    eax,0xc0027374
c000e5a7:	e9 bc 00 00 00       	jmp    c000e668 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ac:	83 ec 08             	sub    esp,0x8
c000e5af:	68 59 aa 02 c0       	push   0xc002aa59
c000e5b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5b8:	e8 f7 22 ff ff       	call   c00008b4 <strcmp>
c000e5bd:	83 c4 10             	add    esp,0x10
c000e5c0:	85 c0                	test   eax,eax
c000e5c2:	0f 94 c0             	sete   al
c000e5c5:	84 c0                	test   al,al
c000e5c7:	74 0a                	je     c000e5d3 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5c9:	b8 a8 70 02 c0       	mov    eax,0xc00270a8
c000e5ce:	e9 95 00 00 00       	jmp    c000e668 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d3:	83 ec 08             	sub    esp,0x8
c000e5d6:	68 62 aa 02 c0       	push   0xc002aa62
c000e5db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5df:	e8 d0 22 ff ff       	call   c00008b4 <strcmp>
c000e5e4:	83 c4 10             	add    esp,0x10
c000e5e7:	85 c0                	test   eax,eax
c000e5e9:	0f 94 c0             	sete   al
c000e5ec:	84 c0                	test   al,al
c000e5ee:	74 07                	je     c000e5f7 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5f0:	b8 74 74 02 c0       	mov    eax,0xc0027474
c000e5f5:	eb 71                	jmp    c000e668 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5f7:	83 ec 08             	sub    esp,0x8
c000e5fa:	68 6c aa 02 c0       	push   0xc002aa6c
c000e5ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e603:	e8 ac 22 ff ff       	call   c00008b4 <strcmp>
c000e608:	83 c4 10             	add    esp,0x10
c000e60b:	85 c0                	test   eax,eax
c000e60d:	0f 94 c0             	sete   al
c000e610:	84 c0                	test   al,al
c000e612:	74 07                	je     c000e61b <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e614:	b8 f4 71 02 c0       	mov    eax,0xc00271f4
c000e619:	eb 4d                	jmp    c000e668 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e61b:	83 ec 08             	sub    esp,0x8
c000e61e:	68 75 aa 02 c0       	push   0xc002aa75
c000e623:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e627:	e8 88 22 ff ff       	call   c00008b4 <strcmp>
c000e62c:	83 c4 10             	add    esp,0x10
c000e62f:	85 c0                	test   eax,eax
c000e631:	0f 94 c0             	sete   al
c000e634:	84 c0                	test   al,al
c000e636:	74 07                	je     c000e63f <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e638:	b8 6c f0 02 c0       	mov    eax,0xc002f06c
c000e63d:	eb 29                	jmp    c000e668 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e63f:	83 ec 08             	sub    esp,0x8
c000e642:	68 82 aa 02 c0       	push   0xc002aa82
c000e647:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e64b:	e8 64 22 ff ff       	call   c00008b4 <strcmp>
c000e650:	83 c4 10             	add    esp,0x10
c000e653:	85 c0                	test   eax,eax
c000e655:	0f 94 c0             	sete   al
c000e658:	84 c0                	test   al,al
c000e65a:	74 07                	je     c000e663 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e65c:	b8 6d f0 02 c0       	mov    eax,0xc002f06d
c000e661:	eb 05                	jmp    c000e668 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e663:	b8 00 00 00 00       	mov    eax,0x0
c000e668:	83 c4 0c             	add    esp,0xc
c000e66b:	c3                   	ret    

c000e66c <Computer::close(int, int, void*)>:
c000e66c:	57                   	push   edi
c000e66d:	56                   	push   esi
c000e66e:	53                   	push   ebx
c000e66f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e673:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e677:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e67b:	83 ec 0c             	sub    esp,0xc
c000e67e:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e684:	e8 93 5d 00 00       	call   c001441c <Device::closeAll()>
c000e689:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e68f:	83 c4 10             	add    esp,0x10
c000e692:	8b 10                	mov    edx,DWORD PTR [eax]
c000e694:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e698:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e6a0:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e6a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e6a8:	5b                   	pop    ebx
c000e6a9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e6ac:	5e                   	pop    esi
c000e6ad:	5f                   	pop    edi
c000e6ae:	ff e0                	jmp    eax

c000e6b0 <Krnl::firstTask()>:
c000e6b0:	53                   	push   ebx
c000e6b1:	83 ec 14             	sub    esp,0x14
c000e6b4:	fb                   	sti    
c000e6b5:	68 3f 07 00 00       	push   0x73f
c000e6ba:	e8 1b 12 00 00       	call   c000f8da <malloc>
c000e6bf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6c6:	89 c3                	mov    ebx,eax
c000e6c8:	ff 35 d0 25 03 c0    	push   DWORD PTR ds:0xc00325d0
c000e6ce:	68 8f aa 02 c0       	push   0xc002aa8f
c000e6d3:	6a 01                	push   0x1
c000e6d5:	50                   	push   eax
c000e6d6:	e8 09 fb 00 00       	call   c001e1e4 <Process::Process(bool, char const*, Process*, char**)>
c000e6db:	83 c4 20             	add    esp,0x20
c000e6de:	68 ff 00 00 00       	push   0xff
c000e6e3:	6a 00                	push   0x0
c000e6e5:	68 6d f2 00 c0       	push   0xc000f26d
c000e6ea:	53                   	push   ebx
c000e6eb:	e8 ec fc 00 00       	call   c001e3dc <Process::createThread(void (*)(void*), void*, int)>
c000e6f0:	6a 7a                	push   0x7a
c000e6f2:	6a 00                	push   0x0
c000e6f4:	68 5a ee 01 c0       	push   0xc001ee5a
c000e6f9:	ff 35 d0 25 03 c0    	push   DWORD PTR ds:0xc00325d0
c000e6ff:	e8 d8 fc 00 00       	call   c001e3dc <Process::createThread(void (*)(void*), void*, int)>
c000e704:	83 c4 20             	add    esp,0x20
c000e707:	a3 88 25 03 c0       	mov    ds:0xc0032588,eax
c000e70c:	c6 05 6d f0 02 c0 01 	mov    BYTE PTR ds:0xc002f06d,0x1
c000e713:	e8 96 0b 01 00       	call   c001f2ae <Vm::initialise8086()>
c000e718:	e8 f3 4a 00 00       	call   c0013210 <Fs::initVFS()>
c000e71d:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c000e722:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e728:	8b 10                	mov    edx,DWORD PTR [eax]
c000e72a:	6a 00                	push   0x0
c000e72c:	6a 00                	push   0x0
c000e72e:	6a 00                	push   0x0
c000e730:	50                   	push   eax
c000e731:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e734:	e8 38 e3 00 00       	call   c001ca71 <Sys::loadSyscalls()>
c000e739:	e8 f6 bf 00 00       	call   c001a734 <Krnl::loadSystemEnv()>
c000e73e:	83 c4 0c             	add    esp,0xc
c000e741:	6a 3a                	push   0x3a
c000e743:	68 9c aa 02 c0       	push   0xc002aa9c
c000e748:	68 a5 aa 02 c0       	push   0xc002aaa5
c000e74d:	e8 d1 ce 00 00       	call   c001b623 <Reg::readIntWithDefault(char*, char*, int)>
c000e752:	89 04 24             	mov    DWORD PTR [esp],eax
c000e755:	e8 a6 55 00 00       	call   c0013d00 <User::loadClockSettings(int)>
c000e75a:	58                   	pop    eax
c000e75b:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c000e760:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e766:	e8 85 5c 00 00       	call   c00143f0 <Device::loadDriversForAll()>
c000e76b:	e8 10 bb 00 00       	call   c001a280 <Krnl::startCPUs()>
c000e770:	5a                   	pop    edx
c000e771:	8b 1d 68 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f068
c000e777:	59                   	pop    ecx
c000e778:	6a 01                	push   0x1
c000e77a:	68 ad aa 02 c0       	push   0xc002aaad
c000e77f:	e8 bd f4 00 00       	call   c001dc41 <Thr::loadDLL(char const*, bool)>
c000e784:	5a                   	pop    edx
c000e785:	59                   	pop    ecx
c000e786:	53                   	push   ebx
c000e787:	50                   	push   eax
c000e788:	e8 df f6 00 00       	call   c001de6c <Thr::executeDLL(unsigned long, void*)>
c000e78d:	83 c4 10             	add    esp,0x10
c000e790:	83 ec 0c             	sub    esp,0xc
c000e793:	6a 02                	push   0x2
c000e795:	e8 85 00 01 00       	call   c001e81f <blockTask(TaskState)>
c000e79a:	83 c4 10             	add    esp,0x10
c000e79d:	eb f1                	jmp    c000e790 <Krnl::firstTask()+0xe0>
c000e79f:	90                   	nop

c000e7a0 <Computer::Computer()>:
c000e7a0:	83 ec 0c             	sub    esp,0xc
c000e7a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a7:	83 ec 08             	sub    esp,0x8
c000e7aa:	68 c9 aa 02 c0       	push   0xc002aac9
c000e7af:	50                   	push   eax
c000e7b0:	e8 e1 5c 00 00       	call   c0014496 <Device::Device(char const*)>
c000e7b5:	83 c4 10             	add    esp,0x10
c000e7b8:	ba cc ac 02 c0       	mov    edx,0xc002accc
c000e7bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c1:	89 10                	mov    DWORD PTR [eax],edx
c000e7c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c7:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e7d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d5:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e7df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e3:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e7e9:	83 ca 04             	or     edx,0x4
c000e7ec:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e7f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7fc:	0f b6 d0             	movzx  edx,al
c000e7ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e803:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e80a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e814:	0f b6 d0             	movzx  edx,al
c000e817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e81b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e824:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e82a:	8d 50 01             	lea    edx,[eax+0x1]
c000e82d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e831:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e837:	0f b6 d0             	movzx  edx,al
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e842:	83 e1 3f             	and    ecx,0x3f
c000e845:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e849:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e853:	0f b6 d0             	movzx  edx,al
c000e856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85a:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e865:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e86b:	0f b6 d0             	movzx  edx,al
c000e86e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e872:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e87b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e881:	8d 50 01             	lea    edx,[eax+0x1]
c000e884:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e888:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e88e:	0f b6 d0             	movzx  edx,al
c000e891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e895:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e899:	83 e1 3f             	and    ecx,0x3f
c000e89c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8aa:	0f b6 d0             	movzx  edx,al
c000e8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b1:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8bc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8c2:	0f b6 d0             	movzx  edx,al
c000e8c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8c9:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8d8:	8d 50 01             	lea    edx,[eax+0x1]
c000e8db:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8df:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8e5:	0f b6 d0             	movzx  edx,al
c000e8e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ec:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8f0:	83 e1 3f             	and    ecx,0x3f
c000e8f3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8f7:	90                   	nop
c000e8f8:	83 c4 0c             	add    esp,0xc
c000e8fb:	c3                   	ret    

c000e8fc <Computer::setBootMessage(char const*)>:
c000e8fc:	c3                   	ret    
c000e8fd:	90                   	nop

c000e8fe <Computer::detectFeatures()>:
c000e8fe:	55                   	push   ebp
c000e8ff:	57                   	push   edi
c000e900:	56                   	push   esi
c000e901:	53                   	push   ebx
c000e902:	83 ec 1c             	sub    esp,0x1c
c000e905:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e909:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e913:	e8 cc 19 ff ff       	call   c00002e4 <detectCPUID>
c000e918:	85 c0                	test   eax,eax
c000e91a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e920:	0f 95 c2             	setne  dl
c000e923:	83 e0 fd             	and    eax,0xfffffffd
c000e926:	d1 e2                	shl    edx,1
c000e928:	09 d0                	or     eax,edx
c000e92a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e930:	a8 02                	test   al,0x2
c000e932:	75 46                	jne    c000e97a <Computer::detectFeatures()+0x7c>
c000e934:	f6 05 81 f0 02 c0 04 	test   BYTE PTR ds:0xc002f081,0x4
c000e93b:	74 07                	je     c000e944 <Computer::detectFeatures()+0x46>
c000e93d:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e944:	e8 ed 86 01 00       	call   c0027036 <x87Detect>
c000e949:	83 e0 01             	and    eax,0x1
c000e94c:	c1 e0 04             	shl    eax,0x4
c000e94f:	88 c2                	mov    dl,al
c000e951:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e957:	83 e0 ef             	and    eax,0xffffffef
c000e95a:	09 d0                	or     eax,edx
c000e95c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e962:	a8 10                	test   al,0x10
c000e964:	0f 85 2a 01 00 00    	jne    c000ea94 <Computer::detectFeatures()+0x196>
c000e96a:	84 c0                	test   al,al
c000e96c:	0f 88 45 01 00 00    	js     c000eab7 <Computer::detectFeatures()+0x1b9>
c000e972:	83 c4 1c             	add    esp,0x1c
c000e975:	5b                   	pop    ebx
c000e976:	5e                   	pop    esi
c000e977:	5f                   	pop    edi
c000e978:	5d                   	pop    ebp
c000e979:	c3                   	ret    
c000e97a:	83 ec 0c             	sub    esp,0xc
c000e97d:	6a 20                	push   0x20
c000e97f:	e8 0c a6 00 00       	call   c0018f90 <CPU::cpuidCheckEDX(unsigned int)>
c000e984:	83 e0 01             	and    eax,0x1
c000e987:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e98e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e994:	83 e0 f7             	and    eax,0xfffffff7
c000e997:	09 d0                	or     eax,edx
c000e999:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e99f:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9a6:	e8 e5 a5 00 00       	call   c0018f90 <CPU::cpuidCheckEDX(unsigned int)>
c000e9ab:	83 e0 01             	and    eax,0x1
c000e9ae:	88 c2                	mov    dl,al
c000e9b0:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9b6:	83 e0 fe             	and    eax,0xfffffffe
c000e9b9:	09 d0                	or     eax,edx
c000e9bb:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9c1:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9c8:	e8 c3 a5 00 00       	call   c0018f90 <CPU::cpuidCheckEDX(unsigned int)>
c000e9cd:	c1 e0 07             	shl    eax,0x7
c000e9d0:	88 c2                	mov    dl,al
c000e9d2:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9d8:	83 e0 7f             	and    eax,0x7f
c000e9db:	09 d0                	or     eax,edx
c000e9dd:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9e3:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e9ea:	e8 a1 a5 00 00       	call   c0018f90 <CPU::cpuidCheckEDX(unsigned int)>
c000e9ef:	83 c4 10             	add    esp,0x10
c000e9f2:	83 e0 01             	and    eax,0x1
c000e9f5:	c1 e0 05             	shl    eax,0x5
c000e9f8:	88 c2                	mov    dl,al
c000e9fa:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea00:	83 e0 df             	and    eax,0xffffffdf
c000ea03:	09 d0                	or     eax,edx
c000ea05:	f7 05 80 f0 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002f080,0x401
c000ea0f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea15:	0f 84 c2 00 00 00    	je     c000eadd <Computer::detectFeatures()+0x1df>
c000ea1b:	83 e0 fe             	and    eax,0xfffffffe
c000ea1e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea24:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea2a:	88 c2                	mov    dl,al
c000ea2c:	83 e2 09             	and    edx,0x9
c000ea2f:	fe ca                	dec    dl
c000ea31:	75 09                	jne    c000ea3c <Computer::detectFeatures()+0x13e>
c000ea33:	83 e0 fe             	and    eax,0xfffffffe
c000ea36:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea3c:	83 ec 0c             	sub    esp,0xc
c000ea3f:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea43:	50                   	push   eax
c000ea44:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea48:	55                   	push   ebp
c000ea49:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea4d:	57                   	push   edi
c000ea4e:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea52:	56                   	push   esi
c000ea53:	68 00 00 00 80       	push   0x80000000
c000ea58:	e8 af a4 00 00       	call   c0018f0c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea5d:	83 c4 20             	add    esp,0x20
c000ea60:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea67:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea6b:	0f 86 c3 fe ff ff    	jbe    c000e934 <Computer::detectFeatures()+0x36>
c000ea71:	83 ec 0c             	sub    esp,0xc
c000ea74:	50                   	push   eax
c000ea75:	55                   	push   ebp
c000ea76:	57                   	push   edi
c000ea77:	56                   	push   esi
c000ea78:	68 01 00 00 80       	push   0x80000001
c000ea7d:	e8 8a a4 00 00       	call   c0018f0c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea82:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea8c:	83 c4 20             	add    esp,0x20
c000ea8f:	e9 a0 fe ff ff       	jmp    c000e934 <Computer::detectFeatures()+0x36>
c000ea94:	e8 57 85 01 00       	call   c0026ff0 <absolutelyNoChanceInHell>
c000ea99:	88 c2                	mov    dl,al
c000ea9b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eaa1:	c1 e2 07             	shl    edx,0x7
c000eaa4:	83 e0 7f             	and    eax,0x7f
c000eaa7:	09 d0                	or     eax,edx
c000eaa9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eaaf:	84 c0                	test   al,al
c000eab1:	0f 89 bb fe ff ff    	jns    c000e972 <Computer::detectFeatures()+0x74>
c000eab7:	e8 14 85 01 00       	call   c0026fd0 <avxDetect>
c000eabc:	83 e0 01             	and    eax,0x1
c000eabf:	c1 e0 05             	shl    eax,0x5
c000eac2:	88 c2                	mov    dl,al
c000eac4:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eaca:	83 e0 df             	and    eax,0xffffffdf
c000eacd:	09 d0                	or     eax,edx
c000eacf:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ead5:	83 c4 1c             	add    esp,0x1c
c000ead8:	5b                   	pop    ebx
c000ead9:	5e                   	pop    esi
c000eada:	5f                   	pop    edi
c000eadb:	5d                   	pop    ebp
c000eadc:	c3                   	ret    
c000eadd:	83 ec 0c             	sub    esp,0xc
c000eae0:	68 00 02 00 00       	push   0x200
c000eae5:	e8 a6 a4 00 00       	call   c0018f90 <CPU::cpuidCheckEDX(unsigned int)>
c000eaea:	83 c4 10             	add    esp,0x10
c000eaed:	83 e0 01             	and    eax,0x1
c000eaf0:	88 c2                	mov    dl,al
c000eaf2:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eaf8:	83 e0 fe             	and    eax,0xfffffffe
c000eafb:	09 d0                	or     eax,edx
c000eafd:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb03:	e9 1c ff ff ff       	jmp    c000ea24 <Computer::detectFeatures()+0x126>

c000eb08 <Computer::displayFeatures()>:
c000eb08:	53                   	push   ebx
c000eb09:	83 ec 14             	sub    esp,0x14
c000eb0c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb10:	68 d9 aa 02 c0       	push   0xc002aad9
c000eb15:	e8 2c 1b ff ff       	call   c0000646 <hexStrToInt>
c000eb1a:	5a                   	pop    edx
c000eb1b:	59                   	pop    ecx
c000eb1c:	50                   	push   eax
c000eb1d:	68 74 ac 02 c0       	push   0xc002ac74
c000eb22:	e8 5e 43 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c000eb27:	c7 04 24 e2 aa 02 c0 	mov    DWORD PTR [esp],0xc002aae2
c000eb2e:	e8 13 1b ff ff       	call   c0000646 <hexStrToInt>
c000eb33:	5a                   	pop    edx
c000eb34:	59                   	pop    ecx
c000eb35:	50                   	push   eax
c000eb36:	68 9c ac 02 c0       	push   0xc002ac9c
c000eb3b:	e8 45 43 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c000eb40:	c7 04 24 eb aa 02 c0 	mov    DWORD PTR [esp],0xc002aaeb
c000eb47:	e8 39 43 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c000eb4c:	83 c4 10             	add    esp,0x10
c000eb4f:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eb56:	0f 85 73 02 00 00    	jne    c000edcf <Computer::displayFeatures()+0x2c7>
c000eb5c:	b8 d6 aa 02 c0       	mov    eax,0xc002aad6
c000eb61:	83 ec 08             	sub    esp,0x8
c000eb64:	50                   	push   eax
c000eb65:	68 fe aa 02 c0       	push   0xc002aafe
c000eb6a:	e8 16 43 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c000eb6f:	83 c4 10             	add    esp,0x10
c000eb72:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eb79:	0f 85 8c 02 00 00    	jne    c000ee0b <Computer::displayFeatures()+0x303>
c000eb7f:	b8 d6 aa 02 c0       	mov    eax,0xc002aad6
c000eb84:	83 ec 08             	sub    esp,0x8
c000eb87:	50                   	push   eax
c000eb88:	68 0f ab 02 c0       	push   0xc002ab0f
c000eb8d:	e8 f3 42 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c000eb92:	83 c4 10             	add    esp,0x10
c000eb95:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb9c:	0f 85 5f 02 00 00    	jne    c000ee01 <Computer::displayFeatures()+0x2f9>
c000eba2:	b8 d6 aa 02 c0       	mov    eax,0xc002aad6
c000eba7:	83 ec 08             	sub    esp,0x8
c000ebaa:	50                   	push   eax
c000ebab:	68 20 ab 02 c0       	push   0xc002ab20
c000ebb0:	e8 d0 42 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c000ebb5:	83 c4 10             	add    esp,0x10
c000ebb8:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000ebbf:	0f 85 32 02 00 00    	jne    c000edf7 <Computer::displayFeatures()+0x2ef>
c000ebc5:	b8 d6 aa 02 c0       	mov    eax,0xc002aad6
c000ebca:	83 ec 08             	sub    esp,0x8
c000ebcd:	50                   	push   eax
c000ebce:	68 31 ab 02 c0       	push   0xc002ab31
c000ebd3:	e8 ad 42 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c000ebd8:	83 c4 10             	add    esp,0x10
c000ebdb:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000ebe2:	0f 85 05 02 00 00    	jne    c000eded <Computer::displayFeatures()+0x2e5>
c000ebe8:	b8 d6 aa 02 c0       	mov    eax,0xc002aad6
c000ebed:	83 ec 08             	sub    esp,0x8
c000ebf0:	50                   	push   eax
c000ebf1:	68 42 ab 02 c0       	push   0xc002ab42
c000ebf6:	e8 8a 42 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c000ebfb:	83 c4 10             	add    esp,0x10
c000ebfe:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000ec05:	0f 85 d8 01 00 00    	jne    c000ede3 <Computer::displayFeatures()+0x2db>
c000ec0b:	b8 d6 aa 02 c0       	mov    eax,0xc002aad6
c000ec10:	83 ec 08             	sub    esp,0x8
c000ec13:	50                   	push   eax
c000ec14:	68 53 ab 02 c0       	push   0xc002ab53
c000ec19:	e8 67 42 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c000ec1e:	83 c4 10             	add    esp,0x10
c000ec21:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000ec28:	0f 85 ab 01 00 00    	jne    c000edd9 <Computer::displayFeatures()+0x2d1>
c000ec2e:	b8 d6 aa 02 c0       	mov    eax,0xc002aad6
c000ec33:	83 ec 08             	sub    esp,0x8
c000ec36:	50                   	push   eax
c000ec37:	68 64 ab 02 c0       	push   0xc002ab64
c000ec3c:	e8 44 42 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c000ec41:	83 c4 10             	add    esp,0x10
c000ec44:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ec4b:	0f 88 1b 02 00 00    	js     c000ee6c <Computer::displayFeatures()+0x364>
c000ec51:	b8 d6 aa 02 c0       	mov    eax,0xc002aad6
c000ec56:	83 ec 08             	sub    esp,0x8
c000ec59:	50                   	push   eax
c000ec5a:	68 75 ab 02 c0       	push   0xc002ab75
c000ec5f:	e8 21 42 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c000ec64:	83 c4 10             	add    esp,0x10
c000ec67:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ec6e:	0f 85 a1 01 00 00    	jne    c000ee15 <Computer::displayFeatures()+0x30d>
c000ec74:	b8 d6 aa 02 c0       	mov    eax,0xc002aad6
c000ec79:	83 ec 08             	sub    esp,0x8
c000ec7c:	50                   	push   eax
c000ec7d:	68 86 ab 02 c0       	push   0xc002ab86
c000ec82:	e8 fe 41 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c000ec87:	83 c4 10             	add    esp,0x10
c000ec8a:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ec91:	0f 85 cb 01 00 00    	jne    c000ee62 <Computer::displayFeatures()+0x35a>
c000ec97:	b8 d6 aa 02 c0       	mov    eax,0xc002aad6
c000ec9c:	83 ec 08             	sub    esp,0x8
c000ec9f:	50                   	push   eax
c000eca0:	68 97 ab 02 c0       	push   0xc002ab97
c000eca5:	e8 db 41 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c000ecaa:	83 c4 10             	add    esp,0x10
c000ecad:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ecb4:	0f 85 9e 01 00 00    	jne    c000ee58 <Computer::displayFeatures()+0x350>
c000ecba:	b8 d6 aa 02 c0       	mov    eax,0xc002aad6
c000ecbf:	83 ec 08             	sub    esp,0x8
c000ecc2:	50                   	push   eax
c000ecc3:	68 a8 ab 02 c0       	push   0xc002aba8
c000ecc8:	e8 b8 41 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c000eccd:	83 c4 10             	add    esp,0x10
c000ecd0:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ecd7:	0f 85 71 01 00 00    	jne    c000ee4e <Computer::displayFeatures()+0x346>
c000ecdd:	b8 d6 aa 02 c0       	mov    eax,0xc002aad6
c000ece2:	83 ec 08             	sub    esp,0x8
c000ece5:	50                   	push   eax
c000ece6:	68 b9 ab 02 c0       	push   0xc002abb9
c000eceb:	e8 95 41 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c000ecf0:	83 c4 10             	add    esp,0x10
c000ecf3:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ecfa:	0f 85 44 01 00 00    	jne    c000ee44 <Computer::displayFeatures()+0x33c>
c000ed00:	b8 d6 aa 02 c0       	mov    eax,0xc002aad6
c000ed05:	83 ec 08             	sub    esp,0x8
c000ed08:	50                   	push   eax
c000ed09:	68 ca ab 02 c0       	push   0xc002abca
c000ed0e:	e8 72 41 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c000ed13:	83 c4 10             	add    esp,0x10
c000ed16:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ed1d:	0f 85 17 01 00 00    	jne    c000ee3a <Computer::displayFeatures()+0x332>
c000ed23:	b8 d6 aa 02 c0       	mov    eax,0xc002aad6
c000ed28:	83 ec 08             	sub    esp,0x8
c000ed2b:	50                   	push   eax
c000ed2c:	68 db ab 02 c0       	push   0xc002abdb
c000ed31:	e8 4f 41 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c000ed36:	83 c4 10             	add    esp,0x10
c000ed39:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ed40:	0f 85 ea 00 00 00    	jne    c000ee30 <Computer::displayFeatures()+0x328>
c000ed46:	b8 d6 aa 02 c0       	mov    eax,0xc002aad6
c000ed4b:	83 ec 08             	sub    esp,0x8
c000ed4e:	50                   	push   eax
c000ed4f:	68 ec ab 02 c0       	push   0xc002abec
c000ed54:	e8 2c 41 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c000ed59:	83 c4 10             	add    esp,0x10
c000ed5c:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ed63:	0f 88 0d 01 00 00    	js     c000ee76 <Computer::displayFeatures()+0x36e>
c000ed69:	b8 d6 aa 02 c0       	mov    eax,0xc002aad6
c000ed6e:	83 ec 08             	sub    esp,0x8
c000ed71:	50                   	push   eax
c000ed72:	68 fd ab 02 c0       	push   0xc002abfd
c000ed77:	e8 09 41 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c000ed7c:	83 c4 10             	add    esp,0x10
c000ed7f:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ed86:	0f 85 9a 00 00 00    	jne    c000ee26 <Computer::displayFeatures()+0x31e>
c000ed8c:	b8 d6 aa 02 c0       	mov    eax,0xc002aad6
c000ed91:	83 ec 08             	sub    esp,0x8
c000ed94:	50                   	push   eax
c000ed95:	68 0e ac 02 c0       	push   0xc002ac0e
c000ed9a:	e8 e6 40 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c000ed9f:	83 c4 10             	add    esp,0x10
c000eda2:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000eda9:	75 74                	jne    c000ee1f <Computer::displayFeatures()+0x317>
c000edab:	b8 d6 aa 02 c0       	mov    eax,0xc002aad6
c000edb0:	83 ec 08             	sub    esp,0x8
c000edb3:	50                   	push   eax
c000edb4:	68 1f ac 02 c0       	push   0xc002ac1f
c000edb9:	e8 c7 40 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c000edbe:	c7 44 24 20 d4 c6 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c6d4
c000edc6:	83 c4 18             	add    esp,0x18
c000edc9:	5b                   	pop    ebx
c000edca:	e9 b6 40 00 00       	jmp    c0012e85 <Dbg::kprintf(char const*, ...)>
c000edcf:	b8 d2 aa 02 c0       	mov    eax,0xc002aad2
c000edd4:	e9 88 fd ff ff       	jmp    c000eb61 <Computer::displayFeatures()+0x59>
c000edd9:	b8 d2 aa 02 c0       	mov    eax,0xc002aad2
c000edde:	e9 50 fe ff ff       	jmp    c000ec33 <Computer::displayFeatures()+0x12b>
c000ede3:	b8 d2 aa 02 c0       	mov    eax,0xc002aad2
c000ede8:	e9 23 fe ff ff       	jmp    c000ec10 <Computer::displayFeatures()+0x108>
c000eded:	b8 d2 aa 02 c0       	mov    eax,0xc002aad2
c000edf2:	e9 f6 fd ff ff       	jmp    c000ebed <Computer::displayFeatures()+0xe5>
c000edf7:	b8 d2 aa 02 c0       	mov    eax,0xc002aad2
c000edfc:	e9 c9 fd ff ff       	jmp    c000ebca <Computer::displayFeatures()+0xc2>
c000ee01:	b8 d2 aa 02 c0       	mov    eax,0xc002aad2
c000ee06:	e9 9c fd ff ff       	jmp    c000eba7 <Computer::displayFeatures()+0x9f>
c000ee0b:	b8 d2 aa 02 c0       	mov    eax,0xc002aad2
c000ee10:	e9 6f fd ff ff       	jmp    c000eb84 <Computer::displayFeatures()+0x7c>
c000ee15:	b8 d2 aa 02 c0       	mov    eax,0xc002aad2
c000ee1a:	e9 5a fe ff ff       	jmp    c000ec79 <Computer::displayFeatures()+0x171>
c000ee1f:	b8 d2 aa 02 c0       	mov    eax,0xc002aad2
c000ee24:	eb 8a                	jmp    c000edb0 <Computer::displayFeatures()+0x2a8>
c000ee26:	b8 d2 aa 02 c0       	mov    eax,0xc002aad2
c000ee2b:	e9 61 ff ff ff       	jmp    c000ed91 <Computer::displayFeatures()+0x289>
c000ee30:	b8 d2 aa 02 c0       	mov    eax,0xc002aad2
c000ee35:	e9 11 ff ff ff       	jmp    c000ed4b <Computer::displayFeatures()+0x243>
c000ee3a:	b8 d2 aa 02 c0       	mov    eax,0xc002aad2
c000ee3f:	e9 e4 fe ff ff       	jmp    c000ed28 <Computer::displayFeatures()+0x220>
c000ee44:	b8 d2 aa 02 c0       	mov    eax,0xc002aad2
c000ee49:	e9 b7 fe ff ff       	jmp    c000ed05 <Computer::displayFeatures()+0x1fd>
c000ee4e:	b8 d2 aa 02 c0       	mov    eax,0xc002aad2
c000ee53:	e9 8a fe ff ff       	jmp    c000ece2 <Computer::displayFeatures()+0x1da>
c000ee58:	b8 d2 aa 02 c0       	mov    eax,0xc002aad2
c000ee5d:	e9 5d fe ff ff       	jmp    c000ecbf <Computer::displayFeatures()+0x1b7>
c000ee62:	b8 d2 aa 02 c0       	mov    eax,0xc002aad2
c000ee67:	e9 30 fe ff ff       	jmp    c000ec9c <Computer::displayFeatures()+0x194>
c000ee6c:	b8 d2 aa 02 c0       	mov    eax,0xc002aad2
c000ee71:	e9 e0 fd ff ff       	jmp    c000ec56 <Computer::displayFeatures()+0x14e>
c000ee76:	b8 d2 aa 02 c0       	mov    eax,0xc002aad2
c000ee7b:	e9 ee fe ff ff       	jmp    c000ed6e <Computer::displayFeatures()+0x266>

c000ee80 <Computer::rdmsr(unsigned int)>:
c000ee80:	83 ec 0c             	sub    esp,0xc
c000ee83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee87:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee8e:	74 0a                	je     c000ee9a <Computer::rdmsr(unsigned int)+0x1a>
c000ee90:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee94:	0f 32                	rdmsr  
c000ee96:	83 c4 0c             	add    esp,0xc
c000ee99:	c3                   	ret    
c000ee9a:	83 ec 0c             	sub    esp,0xc
c000ee9d:	68 30 ac 02 c0       	push   0xc002ac30
c000eea2:	e8 c6 b9 00 00       	call   c001a86d <Krnl::panic(char const*)>
c000eea7:	83 c4 10             	add    esp,0x10
c000eeaa:	eb e4                	jmp    c000ee90 <Computer::rdmsr(unsigned int)+0x10>

c000eeac <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eeac:	57                   	push   edi
c000eead:	56                   	push   esi
c000eeae:	52                   	push   edx
c000eeaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eeb3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eeb7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eebb:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eec2:	74 0e                	je     c000eed2 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eec4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eec8:	89 f0                	mov    eax,esi
c000eeca:	89 fa                	mov    edx,edi
c000eecc:	0f 30                	wrmsr  
c000eece:	58                   	pop    eax
c000eecf:	5e                   	pop    esi
c000eed0:	5f                   	pop    edi
c000eed1:	c3                   	ret    
c000eed2:	83 ec 0c             	sub    esp,0xc
c000eed5:	68 36 ac 02 c0       	push   0xc002ac36
c000eeda:	e8 8e b9 00 00       	call   c001a86d <Krnl::panic(char const*)>
c000eedf:	83 c4 10             	add    esp,0x10
c000eee2:	eb e0                	jmp    c000eec4 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eee4 <Computer::nmiEnabled()>:
c000eee4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eee8:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eeee:	c3                   	ret    
c000eeef:	90                   	nop

c000eef0 <Computer::readCMOS(unsigned char)>:
c000eef0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eef4:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eefb:	19 c0                	sbb    eax,eax
c000eefd:	83 e0 80             	and    eax,0xffffff80
c000ef00:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef04:	e6 70                	out    0x70,al
c000ef06:	e4 71                	in     al,0x71
c000ef08:	c3                   	ret    
c000ef09:	90                   	nop

c000ef0a <Computer::enableNMI(bool)>:
c000ef0a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef12:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ef18:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ef20:	eb ce                	jmp    c000eef0 <Computer::readCMOS(unsigned char)>

c000ef22 <Computer::open(int, int, void*)>:
c000ef22:	56                   	push   esi
c000ef23:	53                   	push   ebx
c000ef24:	83 ec 10             	sub    esp,0x10
c000ef27:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ef2b:	f6 05 80 f0 02 c0 04 	test   BYTE PTR ds:0xc002f080,0x4
c000ef32:	68 68 12 00 00       	push   0x1268
c000ef37:	0f 94 05 a4 df 02 c0 	sete   BYTE PTR ds:0xc002dfa4
c000ef3e:	e8 97 09 00 00       	call   c000f8da <malloc>
c000ef43:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef46:	89 c6                	mov    esi,eax
c000ef48:	e8 c7 93 00 00       	call   c0018314 <ACPI::ACPI()>
c000ef4d:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ef53:	58                   	pop    eax
c000ef54:	5a                   	pop    edx
c000ef55:	56                   	push   esi
c000ef56:	53                   	push   ebx
c000ef57:	e8 4a 53 00 00       	call   c00142a6 <Device::addChild(Device*)>
c000ef5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef5f:	e8 9a f9 ff ff       	call   c000e8fe <Computer::detectFeatures()>
c000ef64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef67:	e8 9c fb ff ff       	call   c000eb08 <Computer::displayFeatures()>
c000ef6c:	59                   	pop    ecx
c000ef6d:	5e                   	pop    esi
c000ef6e:	6a 01                	push   0x1
c000ef70:	53                   	push   ebx
c000ef71:	e8 94 ff ff ff       	call   c000ef0a <Computer::enableNMI(bool)>
c000ef76:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ef7d:	e8 58 09 00 00       	call   c000f8da <malloc>
c000ef82:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef85:	89 c6                	mov    esi,eax
c000ef87:	e8 bc a0 00 00       	call   c0019048 <CPU::CPU()>
c000ef8c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef92:	58                   	pop    eax
c000ef93:	5a                   	pop    edx
c000ef94:	56                   	push   esi
c000ef95:	53                   	push   ebx
c000ef96:	e8 0b 53 00 00       	call   c00142a6 <Device::addChild(Device*)>
c000ef9b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000efa1:	8b 10                	mov    edx,DWORD PTR [eax]
c000efa3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000efa7:	6a 00                	push   0x0
c000efa9:	6a 00                	push   0x0
c000efab:	50                   	push   eax
c000efac:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000efaf:	83 c4 20             	add    esp,0x20
c000efb2:	e8 83 58 00 00       	call   c001483a <setupFPU()>
c000efb7:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000efbd:	85 c0                	test   eax,eax
c000efbf:	74 1f                	je     c000efe0 <Computer::open(int, int, void*)+0xbe>
c000efc1:	83 ec 08             	sub    esp,0x8
c000efc4:	50                   	push   eax
c000efc5:	53                   	push   ebx
c000efc6:	e8 db 52 00 00       	call   c00142a6 <Device::addChild(Device*)>
c000efcb:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000efd1:	8b 10                	mov    edx,DWORD PTR [eax]
c000efd3:	6a 00                	push   0x0
c000efd5:	6a 00                	push   0x0
c000efd7:	6a 00                	push   0x0
c000efd9:	50                   	push   eax
c000efda:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000efdd:	83 c4 20             	add    esp,0x20
c000efe0:	83 ec 0c             	sub    esp,0xc
c000efe3:	68 b0 e6 00 c0       	push   0xc000e6b0
c000efe8:	e8 11 f5 00 00       	call   c001e4fe <setupMultitasking(void (*)())>
c000efed:	83 c4 14             	add    esp,0x14
c000eff0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eff5:	5b                   	pop    ebx
c000eff6:	5e                   	pop    esi
c000eff7:	c3                   	ret    

c000eff8 <Computer::disableNMI()>:
c000eff8:	6a 00                	push   0x0
c000effa:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000effe:	e8 07 ff ff ff       	call   c000ef0a <Computer::enableNMI(bool)>
c000f003:	58                   	pop    eax
c000f004:	5a                   	pop    edx
c000f005:	c3                   	ret    

c000f006 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000f006:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f00a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000f011:	19 c0                	sbb    eax,eax
c000f013:	83 e0 80             	and    eax,0xffffff80
c000f016:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000f01a:	e6 70                	out    0x70,al
c000f01c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f020:	e6 71                	out    0x71,al
c000f022:	c3                   	ret    
c000f023:	90                   	nop

c000f024 <Computer::handleNMI()>:
c000f024:	56                   	push   esi
c000f025:	53                   	push   ebx
c000f026:	83 ec 10             	sub    esp,0x10
c000f029:	e4 92                	in     al,0x92
c000f02b:	89 c6                	mov    esi,eax
c000f02d:	e4 61                	in     al,0x61
c000f02f:	68 3c ac 02 c0       	push   0xc002ac3c
c000f034:	88 c3                	mov    bl,al
c000f036:	e8 4a 3e 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c000f03b:	83 c4 10             	add    esp,0x10
c000f03e:	83 e6 10             	and    esi,0x10
c000f041:	75 0d                	jne    c000f050 <Computer::handleNMI()+0x2c>
c000f043:	f6 c3 40             	test   bl,0x40
c000f046:	75 1d                	jne    c000f065 <Computer::handleNMI()+0x41>
c000f048:	84 db                	test   bl,bl
c000f04a:	78 2d                	js     c000f079 <Computer::handleNMI()+0x55>
c000f04c:	58                   	pop    eax
c000f04d:	5b                   	pop    ebx
c000f04e:	5e                   	pop    esi
c000f04f:	c3                   	ret    
c000f050:	83 ec 0c             	sub    esp,0xc
c000f053:	68 4d ac 02 c0       	push   0xc002ac4d
c000f058:	e8 10 b8 00 00       	call   c001a86d <Krnl::panic(char const*)>
c000f05d:	83 c4 10             	add    esp,0x10
c000f060:	f6 c3 40             	test   bl,0x40
c000f063:	74 e3                	je     c000f048 <Computer::handleNMI()+0x24>
c000f065:	83 ec 0c             	sub    esp,0xc
c000f068:	68 5a ac 02 c0       	push   0xc002ac5a
c000f06d:	e8 fb b7 00 00       	call   c001a86d <Krnl::panic(char const*)>
c000f072:	83 c4 10             	add    esp,0x10
c000f075:	84 db                	test   bl,bl
c000f077:	79 d3                	jns    c000f04c <Computer::handleNMI()+0x28>
c000f079:	c7 44 24 10 64 ac 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ac64
c000f081:	5a                   	pop    edx
c000f082:	5b                   	pop    ebx
c000f083:	5e                   	pop    esi
c000f084:	e9 e4 b7 00 00       	jmp    c001a86d <Krnl::panic(char const*)>
c000f089:	90                   	nop

c000f08a <Computer::setDiskActivityLight(int, bool)>:
c000f08a:	56                   	push   esi
c000f08b:	53                   	push   ebx
c000f08c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f090:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f095:	77 1b                	ja     c000f0b2 <Computer::setDiskActivityLight(int, bool)+0x28>
c000f097:	e4 92                	in     al,0x92
c000f099:	bb 40 00 00 00       	mov    ebx,0x40
c000f09e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f0a2:	89 da                	mov    edx,ebx
c000f0a4:	d3 e2                	shl    edx,cl
c000f0a6:	89 f1                	mov    ecx,esi
c000f0a8:	f7 d2                	not    edx
c000f0aa:	d3 e3                	shl    ebx,cl
c000f0ac:	21 d0                	and    eax,edx
c000f0ae:	09 d8                	or     eax,ebx
c000f0b0:	e6 92                	out    0x92,al
c000f0b2:	5b                   	pop    ebx
c000f0b3:	5e                   	pop    esi
c000f0b4:	c3                   	ret    
c000f0b5:	90                   	nop

c000f0b6 <GDTEntry::setBase(unsigned int)>:
c000f0b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0ba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f0be:	89 c1                	mov    ecx,eax
c000f0c0:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f0c4:	c1 e9 10             	shr    ecx,0x10
c000f0c7:	c1 e8 18             	shr    eax,0x18
c000f0ca:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f0cd:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f0d0:	c3                   	ret    
c000f0d1:	90                   	nop

c000f0d2 <GDTEntry::setLimit(unsigned int)>:
c000f0d2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f0d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0da:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f0dd:	66 89 01             	mov    WORD PTR [ecx],ax
c000f0e0:	83 e2 f0             	and    edx,0xfffffff0
c000f0e3:	c1 e8 10             	shr    eax,0x10
c000f0e6:	83 e0 0f             	and    eax,0xf
c000f0e9:	09 d0                	or     eax,edx
c000f0eb:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f0ee:	c3                   	ret    
c000f0ef:	90                   	nop

c000f0f0 <GDT::GDT()>:
c000f0f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0f4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f104:	90                   	nop
c000f105:	c3                   	ret    

c000f106 <GDT::addEntry(GDTEntry)>:
c000f106:	53                   	push   ebx
c000f107:	83 ec 0c             	sub    esp,0xc
c000f10a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f10e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f110:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f117:	52                   	push   edx
c000f118:	50                   	push   eax
c000f119:	68 f0 ac 02 c0       	push   0xc002acf0
c000f11e:	e8 62 3d 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c000f123:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f125:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f129:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f12d:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f131:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f135:	8d 50 01             	lea    edx,[eax+0x1]
c000f138:	c1 e0 03             	shl    eax,0x3
c000f13b:	89 13                	mov    DWORD PTR [ebx],edx
c000f13d:	83 c4 18             	add    esp,0x18
c000f140:	5b                   	pop    ebx
c000f141:	c3                   	ret    

c000f142 <GDT::getNumberOfEntries()>:
c000f142:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f146:	8b 00                	mov    eax,DWORD PTR [eax]
c000f148:	c3                   	ret    
c000f149:	90                   	nop

c000f14a <GDT::flush()>:
c000f14a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f14e:	8b 10                	mov    edx,DWORD PTR [eax]
c000f150:	83 c0 04             	add    eax,0x4
c000f153:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f15a:	a3 72 f0 02 c0       	mov    ds:0xc002f072,eax
c000f15f:	66 89 15 70 f0 02 c0 	mov    WORD PTR ds:0xc002f070,dx
c000f166:	e9 e5 12 ff ff       	jmp    c0000450 <loadGDT>
c000f16b:	90                   	nop

c000f16c <GDT::setup()>:
c000f16c:	55                   	push   ebp
c000f16d:	57                   	push   edi
c000f16e:	56                   	push   esi
c000f16f:	53                   	push   ebx
c000f170:	83 ec 3c             	sub    esp,0x3c
c000f173:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f177:	6a 00                	push   0x0
c000f179:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f17d:	53                   	push   ebx
c000f17e:	e8 33 ff ff ff       	call   c000f0b6 <GDTEntry::setBase(unsigned int)>
c000f183:	6a 00                	push   0x0
c000f185:	53                   	push   ebx
c000f186:	e8 47 ff ff ff       	call   c000f0d2 <GDTEntry::setLimit(unsigned int)>
c000f18b:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f193:	6a 00                	push   0x0
c000f195:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f199:	53                   	push   ebx
c000f19a:	e8 17 ff ff ff       	call   c000f0b6 <GDTEntry::setBase(unsigned int)>
c000f19f:	68 ff ff ff 00       	push   0xffffff
c000f1a4:	53                   	push   ebx
c000f1a5:	e8 28 ff ff ff       	call   c000f0d2 <GDTEntry::setLimit(unsigned int)>
c000f1aa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f1ae:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f1b3:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f1b8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f1bc:	83 c4 20             	add    esp,0x20
c000f1bf:	6a 00                	push   0x0
c000f1c1:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f1c5:	53                   	push   ebx
c000f1c6:	e8 eb fe ff ff       	call   c000f0b6 <GDTEntry::setBase(unsigned int)>
c000f1cb:	68 ff ff ff 00       	push   0xffffff
c000f1d0:	53                   	push   ebx
c000f1d1:	e8 fc fe ff ff       	call   c000f0d2 <GDTEntry::setLimit(unsigned int)>
c000f1d6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f1da:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f1de:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f1e2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f1e6:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f1ea:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f1ef:	0d 00 92 c0 00       	or     eax,0xc09200
c000f1f4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f1f8:	89 d8                	mov    eax,ebx
c000f1fa:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f1fe:	80 cc 60             	or     ah,0x60
c000f201:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f205:	83 c4 0c             	add    esp,0xc
c000f208:	89 f8                	mov    eax,edi
c000f20a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f20e:	80 cc 60             	or     ah,0x60
c000f211:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f215:	89 c7                	mov    edi,eax
c000f217:	55                   	push   ebp
c000f218:	e8 e9 fe ff ff       	call   c000f106 <GDT::addEntry(GDTEntry)>
c000f21d:	83 c4 0c             	add    esp,0xc
c000f220:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f224:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f228:	55                   	push   ebp
c000f229:	e8 d8 fe ff ff       	call   c000f106 <GDT::addEntry(GDTEntry)>
c000f22e:	83 c4 0c             	add    esp,0xc
c000f231:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f235:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f239:	55                   	push   ebp
c000f23a:	e8 c7 fe ff ff       	call   c000f106 <GDT::addEntry(GDTEntry)>
c000f23f:	83 c4 0c             	add    esp,0xc
c000f242:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f246:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f24a:	53                   	push   ebx
c000f24b:	51                   	push   ecx
c000f24c:	55                   	push   ebp
c000f24d:	e8 b4 fe ff ff       	call   c000f106 <GDT::addEntry(GDTEntry)>
c000f252:	83 c4 0c             	add    esp,0xc
c000f255:	57                   	push   edi
c000f256:	56                   	push   esi
c000f257:	55                   	push   ebp
c000f258:	e8 a9 fe ff ff       	call   c000f106 <GDT::addEntry(GDTEntry)>
c000f25d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f260:	e8 e5 fe ff ff       	call   c000f14a <GDT::flush()>
c000f265:	83 c4 4c             	add    esp,0x4c
c000f268:	5b                   	pop    ebx
c000f269:	5e                   	pop    esi
c000f26a:	5f                   	pop    edi
c000f26b:	5d                   	pop    ebp
c000f26c:	c3                   	ret    

c000f26d <idleFunction(void*)>:
c000f26d:	53                   	push   ebx
c000f26e:	83 ec 08             	sub    esp,0x8
c000f271:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c000f276:	48                   	dec    eax
c000f277:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c000f27c:	75 01                	jne    c000f27f <idleFunction(void*)+0x12>
c000f27e:	fb                   	sti    
c000f27f:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c000f284:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f28a:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f291:	74 3c                	je     c000f2cf <idleFunction(void*)+0x62>
c000f293:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f29a:	74 33                	je     c000f2cf <idleFunction(void*)+0x62>
c000f29c:	31 db                	xor    ebx,ebx
c000f29e:	52                   	push   edx
c000f29f:	52                   	push   edx
c000f2a0:	68 e1 00 00 00       	push   0xe1
c000f2a5:	50                   	push   eax
c000f2a6:	e8 d5 fb ff ff       	call   c000ee80 <Computer::rdmsr(unsigned int)>
c000f2ab:	53                   	push   ebx
c000f2ac:	83 e0 02             	and    eax,0x2
c000f2af:	50                   	push   eax
c000f2b0:	68 e1 00 00 00       	push   0xe1
c000f2b5:	ff 35 68 f0 02 c0    	push   DWORD PTR ds:0xc002f068
c000f2bb:	e8 ec fb ff ff       	call   c000eeac <Computer::wrmsr(unsigned int, unsigned long long)>
c000f2c0:	83 c4 20             	add    esp,0x20
c000f2c3:	e8 b7 0f ff ff       	call   c000027f <doTPAUSE>
c000f2c8:	e8 b3 9d 01 00       	call   c0029080 <idleCommon()>
c000f2cd:	eb f4                	jmp    c000f2c3 <idleFunction(void*)+0x56>
c000f2cf:	fb                   	sti    
c000f2d0:	f4                   	hlt    
c000f2d1:	e8 aa 9d 01 00       	call   c0029080 <idleCommon()>
c000f2d6:	eb f7                	jmp    c000f2cf <idleFunction(void*)+0x62>

c000f2d8 <IDTEntry::IDTEntry(bool)>:
c000f2d8:	83 ec 04             	sub    esp,0x4
c000f2db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f2df:	88 04 24             	mov    BYTE PTR [esp],al
c000f2e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2e6:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f2ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2f0:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f2f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2f8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2fb:	83 e2 f0             	and    edx,0xfffffff0
c000f2fe:	83 ca 0e             	or     edx,0xe
c000f301:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f304:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f308:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f30b:	83 e2 ef             	and    edx,0xffffffef
c000f30e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f311:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f315:	74 04                	je     c000f31b <IDTEntry::IDTEntry(bool)+0x43>
c000f317:	b2 03                	mov    dl,0x3
c000f319:	eb 02                	jmp    c000f31d <IDTEntry::IDTEntry(bool)+0x45>
c000f31b:	b2 00                	mov    dl,0x0
c000f31d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f321:	83 e2 03             	and    edx,0x3
c000f324:	88 d1                	mov    cl,dl
c000f326:	c1 e1 05             	shl    ecx,0x5
c000f329:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f32c:	83 e2 9f             	and    edx,0xffffff9f
c000f32f:	09 ca                	or     edx,ecx
c000f331:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f334:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f338:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f33b:	83 ca 80             	or     edx,0xffffff80
c000f33e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f341:	90                   	nop
c000f342:	83 c4 04             	add    esp,0x4
c000f345:	c3                   	ret    

c000f346 <IDTEntry::setOffset(unsigned int)>:
c000f346:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f34a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f34e:	66 89 02             	mov    WORD PTR [edx],ax
c000f351:	c1 e8 10             	shr    eax,0x10
c000f354:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f358:	c3                   	ret    
c000f359:	90                   	nop

c000f35a <IDT::IDT()>:
c000f35a:	90                   	nop
c000f35b:	c3                   	ret    

c000f35c <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f35c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f360:	83 c0 30             	add    eax,0x30
c000f363:	c3                   	ret    

c000f364 <IDT::addEntry(IDTEntry, int)>:
c000f364:	53                   	push   ebx
c000f365:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f369:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f36d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f371:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f375:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f378:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f37c:	5b                   	pop    ebx
c000f37d:	c3                   	ret    

c000f37e <IDT::addEntry(int, void (*)(), bool)>:
c000f37e:	53                   	push   ebx
c000f37f:	83 ec 10             	sub    esp,0x10
c000f382:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f387:	50                   	push   eax
c000f388:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f38c:	53                   	push   ebx
c000f38d:	e8 46 ff ff ff       	call   c000f2d8 <IDTEntry::IDTEntry(bool)>
c000f392:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f396:	53                   	push   ebx
c000f397:	e8 aa ff ff ff       	call   c000f346 <IDTEntry::setOffset(unsigned int)>
c000f39c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f3a0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f3a4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f3a8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f3ac:	e8 b3 ff ff ff       	call   c000f364 <IDT::addEntry(IDTEntry, int)>
c000f3b1:	83 c4 30             	add    esp,0x30
c000f3b4:	5b                   	pop    ebx
c000f3b5:	c3                   	ret    

c000f3b6 <IDT::flush()>:
c000f3b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f3ba:	66 c7 05 78 f0 02 c0 ff 07 	mov    WORD PTR ds:0xc002f078,0x7ff
c000f3c3:	a3 7a f0 02 c0       	mov    ds:0xc002f07a,eax
c000f3c8:	0f 01 1d 78 f0 02 c0 	lidtd  ds:0xc002f078
c000f3cf:	c3                   	ret    

c000f3d0 <IDT::setup()>:
c000f3d0:	57                   	push   edi
c000f3d1:	56                   	push   esi
c000f3d2:	53                   	push   ebx
c000f3d3:	83 ec 10             	sub    esp,0x10
c000f3d6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f3da:	6a 00                	push   0x0
c000f3dc:	68 70 04 00 c0       	push   0xc0000470
c000f3e1:	6a 00                	push   0x0
c000f3e3:	53                   	push   ebx
c000f3e4:	e8 95 ff ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f3e9:	6a 00                	push   0x0
c000f3eb:	68 80 04 00 c0       	push   0xc0000480
c000f3f0:	6a 01                	push   0x1
c000f3f2:	53                   	push   ebx
c000f3f3:	e8 86 ff ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f3f8:	83 c4 20             	add    esp,0x20
c000f3fb:	6a 00                	push   0x0
c000f3fd:	68 8a 04 00 c0       	push   0xc000048a
c000f402:	6a 02                	push   0x2
c000f404:	53                   	push   ebx
c000f405:	e8 74 ff ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f40a:	6a 00                	push   0x0
c000f40c:	68 94 04 00 c0       	push   0xc0000494
c000f411:	6a 03                	push   0x3
c000f413:	53                   	push   ebx
c000f414:	e8 65 ff ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f419:	83 c4 20             	add    esp,0x20
c000f41c:	6a 00                	push   0x0
c000f41e:	68 9e 04 00 c0       	push   0xc000049e
c000f423:	6a 04                	push   0x4
c000f425:	53                   	push   ebx
c000f426:	e8 53 ff ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f42b:	6a 00                	push   0x0
c000f42d:	68 a8 04 00 c0       	push   0xc00004a8
c000f432:	6a 05                	push   0x5
c000f434:	53                   	push   ebx
c000f435:	e8 44 ff ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f43a:	83 c4 20             	add    esp,0x20
c000f43d:	6a 00                	push   0x0
c000f43f:	68 b2 04 00 c0       	push   0xc00004b2
c000f444:	6a 06                	push   0x6
c000f446:	53                   	push   ebx
c000f447:	e8 32 ff ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f44c:	6a 00                	push   0x0
c000f44e:	68 bc 04 00 c0       	push   0xc00004bc
c000f453:	6a 07                	push   0x7
c000f455:	53                   	push   ebx
c000f456:	e8 23 ff ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f45b:	83 c4 20             	add    esp,0x20
c000f45e:	6a 00                	push   0x0
c000f460:	68 c6 04 00 c0       	push   0xc00004c6
c000f465:	6a 08                	push   0x8
c000f467:	53                   	push   ebx
c000f468:	e8 11 ff ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f46d:	6a 00                	push   0x0
c000f46f:	68 ce 04 00 c0       	push   0xc00004ce
c000f474:	6a 09                	push   0x9
c000f476:	53                   	push   ebx
c000f477:	e8 02 ff ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f47c:	83 c4 20             	add    esp,0x20
c000f47f:	6a 00                	push   0x0
c000f481:	68 d8 04 00 c0       	push   0xc00004d8
c000f486:	6a 0a                	push   0xa
c000f488:	53                   	push   ebx
c000f489:	e8 f0 fe ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f48e:	6a 00                	push   0x0
c000f490:	68 e0 04 00 c0       	push   0xc00004e0
c000f495:	6a 0b                	push   0xb
c000f497:	53                   	push   ebx
c000f498:	e8 e1 fe ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f49d:	83 c4 20             	add    esp,0x20
c000f4a0:	6a 00                	push   0x0
c000f4a2:	68 e8 04 00 c0       	push   0xc00004e8
c000f4a7:	6a 0c                	push   0xc
c000f4a9:	53                   	push   ebx
c000f4aa:	e8 cf fe ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f4af:	6a 00                	push   0x0
c000f4b1:	68 f0 04 00 c0       	push   0xc00004f0
c000f4b6:	6a 0d                	push   0xd
c000f4b8:	53                   	push   ebx
c000f4b9:	e8 c0 fe ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f4be:	83 c4 20             	add    esp,0x20
c000f4c1:	6a 00                	push   0x0
c000f4c3:	68 f8 04 00 c0       	push   0xc00004f8
c000f4c8:	6a 0e                	push   0xe
c000f4ca:	53                   	push   ebx
c000f4cb:	e8 ae fe ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f4d0:	6a 00                	push   0x0
c000f4d2:	68 00 05 00 c0       	push   0xc0000500
c000f4d7:	6a 0f                	push   0xf
c000f4d9:	53                   	push   ebx
c000f4da:	e8 9f fe ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f4df:	83 c4 20             	add    esp,0x20
c000f4e2:	6a 00                	push   0x0
c000f4e4:	68 0a 05 00 c0       	push   0xc000050a
c000f4e9:	6a 10                	push   0x10
c000f4eb:	53                   	push   ebx
c000f4ec:	e8 8d fe ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f4f1:	6a 00                	push   0x0
c000f4f3:	68 14 05 00 c0       	push   0xc0000514
c000f4f8:	6a 11                	push   0x11
c000f4fa:	53                   	push   ebx
c000f4fb:	e8 7e fe ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f500:	83 c4 20             	add    esp,0x20
c000f503:	6a 00                	push   0x0
c000f505:	68 1e 05 00 c0       	push   0xc000051e
c000f50a:	6a 12                	push   0x12
c000f50c:	53                   	push   ebx
c000f50d:	e8 6c fe ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f512:	6a 01                	push   0x1
c000f514:	68 b8 05 00 c0       	push   0xc00005b8
c000f519:	6a 60                	push   0x60
c000f51b:	53                   	push   ebx
c000f51c:	e8 5d fe ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f521:	83 c4 20             	add    esp,0x20
c000f524:	6a 00                	push   0x0
c000f526:	68 bf 05 00 c0       	push   0xc00005bf
c000f52b:	6a 20                	push   0x20
c000f52d:	53                   	push   ebx
c000f52e:	e8 4b fe ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f533:	6a 00                	push   0x0
c000f535:	68 aa 05 00 c0       	push   0xc00005aa
c000f53a:	6a 21                	push   0x21
c000f53c:	53                   	push   ebx
c000f53d:	e8 3c fe ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f542:	83 c4 20             	add    esp,0x20
c000f545:	6a 00                	push   0x0
c000f547:	68 b1 05 00 c0       	push   0xc00005b1
c000f54c:	6a 22                	push   0x22
c000f54e:	53                   	push   ebx
c000f54f:	e8 2a fe ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f554:	6a 00                	push   0x0
c000f556:	68 28 05 00 c0       	push   0xc0000528
c000f55b:	6a 23                	push   0x23
c000f55d:	53                   	push   ebx
c000f55e:	e8 1b fe ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f563:	83 c4 20             	add    esp,0x20
c000f566:	6a 00                	push   0x0
c000f568:	68 32 05 00 c0       	push   0xc0000532
c000f56d:	6a 24                	push   0x24
c000f56f:	53                   	push   ebx
c000f570:	e8 09 fe ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f575:	6a 00                	push   0x0
c000f577:	68 3c 05 00 c0       	push   0xc000053c
c000f57c:	6a 25                	push   0x25
c000f57e:	53                   	push   ebx
c000f57f:	e8 fa fd ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f584:	83 c4 20             	add    esp,0x20
c000f587:	6a 00                	push   0x0
c000f589:	68 46 05 00 c0       	push   0xc0000546
c000f58e:	6a 26                	push   0x26
c000f590:	53                   	push   ebx
c000f591:	e8 e8 fd ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f596:	6a 00                	push   0x0
c000f598:	68 50 05 00 c0       	push   0xc0000550
c000f59d:	6a 27                	push   0x27
c000f59f:	53                   	push   ebx
c000f5a0:	e8 d9 fd ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f5a5:	83 c4 20             	add    esp,0x20
c000f5a8:	6a 00                	push   0x0
c000f5aa:	68 5a 05 00 c0       	push   0xc000055a
c000f5af:	6a 28                	push   0x28
c000f5b1:	53                   	push   ebx
c000f5b2:	e8 c7 fd ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f5b7:	6a 00                	push   0x0
c000f5b9:	68 64 05 00 c0       	push   0xc0000564
c000f5be:	6a 29                	push   0x29
c000f5c0:	53                   	push   ebx
c000f5c1:	e8 b8 fd ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f5c6:	83 c4 20             	add    esp,0x20
c000f5c9:	6a 00                	push   0x0
c000f5cb:	68 6e 05 00 c0       	push   0xc000056e
c000f5d0:	6a 2a                	push   0x2a
c000f5d2:	53                   	push   ebx
c000f5d3:	e8 a6 fd ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f5d8:	6a 00                	push   0x0
c000f5da:	68 78 05 00 c0       	push   0xc0000578
c000f5df:	6a 2b                	push   0x2b
c000f5e1:	53                   	push   ebx
c000f5e2:	e8 97 fd ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f5e7:	83 c4 20             	add    esp,0x20
c000f5ea:	6a 00                	push   0x0
c000f5ec:	68 82 05 00 c0       	push   0xc0000582
c000f5f1:	6a 2c                	push   0x2c
c000f5f3:	53                   	push   ebx
c000f5f4:	e8 85 fd ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f5f9:	6a 00                	push   0x0
c000f5fb:	68 8c 05 00 c0       	push   0xc000058c
c000f600:	6a 2d                	push   0x2d
c000f602:	53                   	push   ebx
c000f603:	e8 76 fd ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f608:	83 c4 20             	add    esp,0x20
c000f60b:	6a 00                	push   0x0
c000f60d:	68 96 05 00 c0       	push   0xc0000596
c000f612:	6a 2e                	push   0x2e
c000f614:	53                   	push   ebx
c000f615:	e8 64 fd ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f61a:	6a 00                	push   0x0
c000f61c:	68 a0 05 00 c0       	push   0xc00005a0
c000f621:	6a 2f                	push   0x2f
c000f623:	53                   	push   ebx
c000f624:	e8 55 fd ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f629:	83 c4 20             	add    esp,0x20
c000f62c:	6a 00                	push   0x0
c000f62e:	68 f6 05 00 c0       	push   0xc00005f6
c000f633:	6a 30                	push   0x30
c000f635:	53                   	push   ebx
c000f636:	e8 43 fd ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f63b:	6a 00                	push   0x0
c000f63d:	68 00 06 00 c0       	push   0xc0000600
c000f642:	6a 31                	push   0x31
c000f644:	53                   	push   ebx
c000f645:	e8 34 fd ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f64a:	83 c4 20             	add    esp,0x20
c000f64d:	6a 00                	push   0x0
c000f64f:	68 0a 06 00 c0       	push   0xc000060a
c000f654:	6a 32                	push   0x32
c000f656:	53                   	push   ebx
c000f657:	e8 22 fd ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f65c:	6a 00                	push   0x0
c000f65e:	68 14 06 00 c0       	push   0xc0000614
c000f663:	6a 33                	push   0x33
c000f665:	53                   	push   ebx
c000f666:	e8 13 fd ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f66b:	83 c4 20             	add    esp,0x20
c000f66e:	6a 00                	push   0x0
c000f670:	68 1e 06 00 c0       	push   0xc000061e
c000f675:	6a 34                	push   0x34
c000f677:	53                   	push   ebx
c000f678:	e8 01 fd ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f67d:	6a 00                	push   0x0
c000f67f:	68 28 06 00 c0       	push   0xc0000628
c000f684:	6a 35                	push   0x35
c000f686:	53                   	push   ebx
c000f687:	e8 f2 fc ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f68c:	83 c4 20             	add    esp,0x20
c000f68f:	6a 00                	push   0x0
c000f691:	68 32 06 00 c0       	push   0xc0000632
c000f696:	6a 36                	push   0x36
c000f698:	53                   	push   ebx
c000f699:	e8 e0 fc ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f69e:	6a 00                	push   0x0
c000f6a0:	68 3c 06 00 c0       	push   0xc000063c
c000f6a5:	6a 37                	push   0x37
c000f6a7:	53                   	push   ebx
c000f6a8:	e8 d1 fc ff ff       	call   c000f37e <IDT::addEntry(int, void (*)(), bool)>
c000f6ad:	83 c4 1c             	add    esp,0x1c
c000f6b0:	6a 03                	push   0x3
c000f6b2:	6a 02                	push   0x2
c000f6b4:	ff 35 f0 f1 02 c0    	push   DWORD PTR ds:0xc002f1f0
c000f6ba:	e8 f9 2c 00 00       	call   c00123b8 <VAS::allocatePages(int, int)>
c000f6bf:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f6c6:	89 c6                	mov    esi,eax
c000f6c8:	e8 0d 02 00 00       	call   c000f8da <malloc>
c000f6cd:	81 c6 00 20 00 00    	add    esi,0x2000
c000f6d3:	89 04 24             	mov    DWORD PTR [esp],eax
c000f6d6:	89 c7                	mov    edi,eax
c000f6d8:	e8 d3 1c 00 00       	call   c00113b0 <TSS::TSS()>
c000f6dd:	83 c4 0c             	add    esp,0xc
c000f6e0:	68 c6 04 00 c0       	push   0xc00004c6
c000f6e5:	56                   	push   esi
c000f6e6:	57                   	push   edi
c000f6e7:	e8 04 1d 00 00       	call   c00113f0 <TSS::setup(unsigned long, unsigned long)>
c000f6ec:	89 c6                	mov    esi,eax
c000f6ee:	58                   	pop    eax
c000f6ef:	5a                   	pop    edx
c000f6f0:	6a 00                	push   0x0
c000f6f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f6f6:	50                   	push   eax
c000f6f7:	e8 dc fb ff ff       	call   c000f2d8 <IDTEntry::IDTEntry(bool)>
c000f6fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f700:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f705:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f70c:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f712:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f716:	80 ce 05             	or     dh,0x5
c000f719:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f71c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f720:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f724:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f727:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f72a:	e8 87 fc ff ff       	call   c000f3b6 <IDT::flush()>
c000f72f:	83 c4 20             	add    esp,0x20
c000f732:	5b                   	pop    ebx
c000f733:	5e                   	pop    esi
c000f734:	5f                   	pop    edi
c000f735:	c3                   	ret    

c000f736 <sbrk>:
c000f736:	55                   	push   ebp
c000f737:	57                   	push   edi
c000f738:	56                   	push   esi
c000f739:	53                   	push   ebx
c000f73a:	83 ec 1c             	sub    esp,0x1c
c000f73d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f741:	85 c0                	test   eax,eax
c000f743:	74 3e                	je     c000f783 <sbrk+0x4d>
c000f745:	78 43                	js     c000f78a <sbrk+0x54>
c000f747:	8b 15 68 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f068
c000f74d:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f753:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f759:	83 e2 01             	and    edx,0x1
c000f75c:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f760:	8b 0d 94 df 02 c0    	mov    ecx,DWORD PTR ds:0xc002df94
c000f766:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f76a:	05 ff 0f 00 00       	add    eax,0xfff
c000f76f:	89 c2                	mov    edx,eax
c000f771:	78 2f                	js     c000f7a2 <sbrk+0x6c>
c000f773:	c1 fa 0c             	sar    edx,0xc
c000f776:	89 d7                	mov    edi,edx
c000f778:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f77c:	be 00 00 00 00       	mov    esi,0x0
c000f781:	eb 36                	jmp    c000f7b9 <sbrk+0x83>
c000f783:	a1 94 df 02 c0       	mov    eax,ds:0xc002df94
c000f788:	eb 73                	jmp    c000f7fd <sbrk+0xc7>
c000f78a:	83 ec 08             	sub    esp,0x8
c000f78d:	50                   	push   eax
c000f78e:	68 0c ad 02 c0       	push   0xc002ad0c
c000f793:	e8 ed 36 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c000f798:	83 c4 10             	add    esp,0x10
c000f79b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f7a0:	eb 5b                	jmp    c000f7fd <sbrk+0xc7>
c000f7a2:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f7a8:	eb c9                	jmp    c000f773 <sbrk+0x3d>
c000f7aa:	81 05 94 df 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002df94,0x1000
c000f7b4:	46                   	inc    esi
c000f7b5:	39 f7                	cmp    edi,esi
c000f7b7:	74 33                	je     c000f7ec <sbrk+0xb6>
c000f7b9:	8b 1d f0 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f1f0
c000f7bf:	8b 2d 94 df 02 c0    	mov    ebp,DWORD PTR ds:0xc002df94
c000f7c5:	e8 7c 07 00 00       	call   c000ff46 <Phys::allocatePage()>
c000f7ca:	68 01 0c 00 00       	push   0xc01
c000f7cf:	55                   	push   ebp
c000f7d0:	50                   	push   eax
c000f7d1:	53                   	push   ebx
c000f7d2:	e8 df 2a 00 00       	call   c00122b6 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f7d7:	83 c4 10             	add    esp,0x10
c000f7da:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7df:	74 c9                	je     c000f7aa <sbrk+0x74>
c000f7e1:	8b 1d 94 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002df94
c000f7e7:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f7ea:	eb be                	jmp    c000f7aa <sbrk+0x74>
c000f7ec:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7f1:	75 12                	jne    c000f805 <sbrk+0xcf>
c000f7f3:	0f 20 d8             	mov    eax,cr3
c000f7f6:	0f 22 d8             	mov    cr3,eax
c000f7f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7fd:	83 c4 1c             	add    esp,0x1c
c000f800:	5b                   	pop    ebx
c000f801:	5e                   	pop    esi
c000f802:	5f                   	pop    edi
c000f803:	5d                   	pop    ebp
c000f804:	c3                   	ret    
c000f805:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f809:	89 cb                	mov    ebx,ecx
c000f80b:	c1 eb 0a             	shr    ebx,0xa
c000f80e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f814:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f81a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f81e:	c1 e0 0c             	shl    eax,0xc
c000f821:	01 c8                	add    eax,ecx
c000f823:	c1 e8 0a             	shr    eax,0xa
c000f826:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f82b:	2d 00 00 40 00       	sub    eax,0x400000
c000f830:	39 c3                	cmp    ebx,eax
c000f832:	77 c5                	ja     c000f7f9 <sbrk+0xc3>
c000f834:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f837:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f83d:	39 d8                	cmp    eax,ebx
c000f83f:	73 f3                	jae    c000f834 <sbrk+0xfe>
c000f841:	eb b6                	jmp    c000f7f9 <sbrk+0xc3>

c000f843 <mmap>:
c000f843:	83 ec 18             	sub    esp,0x18
c000f846:	68 3c ad 02 c0       	push   0xc002ad3c
c000f84b:	e8 1d b0 00 00       	call   c001a86d <Krnl::panic(char const*)>
c000f850:	b8 00 00 00 00       	mov    eax,0x0
c000f855:	83 c4 1c             	add    esp,0x1c
c000f858:	c3                   	ret    

c000f859 <munmap>:
c000f859:	83 ec 18             	sub    esp,0x18
c000f85c:	68 41 ad 02 c0       	push   0xc002ad41
c000f861:	e8 07 b0 00 00       	call   c001a86d <Krnl::panic(char const*)>
c000f866:	b8 00 00 00 00       	mov    eax,0x0
c000f86b:	83 c4 1c             	add    esp,0x1c
c000f86e:	c3                   	ret    

c000f86f <liballoc_lock()>:
c000f86f:	fa                   	cli    
c000f870:	ff 05 a8 25 03 c0    	inc    DWORD PTR ds:0xc00325a8
c000f876:	b8 00 00 00 00       	mov    eax,0x0
c000f87b:	c3                   	ret    

c000f87c <liballoc_unlock()>:
c000f87c:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c000f881:	48                   	dec    eax
c000f882:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c000f887:	75 01                	jne    c000f88a <liballoc_unlock()+0xe>
c000f889:	fb                   	sti    
c000f88a:	b8 00 00 00 00       	mov    eax,0x0
c000f88f:	c3                   	ret    

c000f890 <liballoc_alloc(int)>:
c000f890:	83 ec 10             	sub    esp,0x10
c000f893:	68 01 08 00 00       	push   0x801
c000f898:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f89c:	ff 35 f0 f1 02 c0    	push   DWORD PTR ds:0xc002f1f0
c000f8a2:	e8 11 2b 00 00       	call   c00123b8 <VAS::allocatePages(int, int)>
c000f8a7:	83 c4 1c             	add    esp,0x1c
c000f8aa:	c3                   	ret    

c000f8ab <liballoc_free(void*, int)>:
c000f8ab:	83 ec 14             	sub    esp,0x14
c000f8ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8b2:	ff 35 f0 f1 02 c0    	push   DWORD PTR ds:0xc002f1f0
c000f8b8:	e8 a5 27 00 00       	call   c0012062 <VAS::freeAllocatedPages(unsigned long)>
c000f8bd:	b8 00 00 00 00       	mov    eax,0x0
c000f8c2:	83 c4 1c             	add    esp,0x1c
c000f8c5:	c3                   	ret    

c000f8c6 <realloc>:
c000f8c6:	83 ec 14             	sub    esp,0x14
c000f8c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8d1:	e8 72 1d ff ff       	call   c0001648 <dlrealloc>
c000f8d6:	83 c4 1c             	add    esp,0x1c
c000f8d9:	c3                   	ret    

c000f8da <malloc>:
c000f8da:	83 ec 18             	sub    esp,0x18
c000f8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8e1:	e8 25 18 ff ff       	call   c000110b <dlmalloc>
c000f8e6:	83 c4 1c             	add    esp,0x1c
c000f8e9:	c3                   	ret    

c000f8ea <free>:
c000f8ea:	83 ec 18             	sub    esp,0x18
c000f8ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8f1:	e8 ba 14 ff ff       	call   c0000db0 <dlfree>
c000f8f6:	83 c4 1c             	add    esp,0x1c
c000f8f9:	c3                   	ret    

c000f8fa <rfree>:
c000f8fa:	83 ec 18             	sub    esp,0x18
c000f8fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f901:	e8 aa 14 ff ff       	call   c0000db0 <dlfree>
c000f906:	83 c4 1c             	add    esp,0x1c
c000f909:	c3                   	ret    

c000f90a <calloc>:
c000f90a:	56                   	push   esi
c000f90b:	53                   	push   ebx
c000f90c:	83 ec 10             	sub    esp,0x10
c000f90f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f913:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f918:	53                   	push   ebx
c000f919:	e8 bc ff ff ff       	call   c000f8da <malloc>
c000f91e:	89 c6                	mov    esi,eax
c000f920:	83 c4 0c             	add    esp,0xc
c000f923:	53                   	push   ebx
c000f924:	6a 00                	push   0x0
c000f926:	50                   	push   eax
c000f927:	e8 40 0e ff ff       	call   c000076c <memset>
c000f92c:	89 f0                	mov    eax,esi
c000f92e:	83 c4 14             	add    esp,0x14
c000f931:	5b                   	pop    ebx
c000f932:	5e                   	pop    esi
c000f933:	c3                   	ret    

c000f934 <hwTextMode_loadInData(VgaText*)>:
c000f934:	55                   	push   ebp
c000f935:	a1 a0 df 02 c0       	mov    eax,ds:0xc002dfa0
c000f93a:	57                   	push   edi
c000f93b:	56                   	push   esi
c000f93c:	53                   	push   ebx
c000f93d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f941:	8b 57 10             	mov    edx,DWORD PTR [edi+0x10]
c000f944:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c000f947:	85 d2                	test   edx,edx
c000f949:	7e 29                	jle    c000f974 <hwTextMode_loadInData(VgaText*)+0x40>
c000f94b:	8d a8 a0 00 00 00    	lea    ebp,[eax+0xa0]
c000f951:	31 f6                	xor    esi,esi
c000f953:	29 cd                	sub    ebp,ecx
c000f955:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f958:	31 c0                	xor    eax,eax
c000f95a:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f95e:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f962:	40                   	inc    eax
c000f963:	83 f8 50             	cmp    eax,0x50
c000f966:	75 f2                	jne    c000f95a <hwTextMode_loadInData(VgaText*)+0x26>
c000f968:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f96e:	46                   	inc    esi
c000f96f:	39 77 10             	cmp    DWORD PTR [edi+0x10],esi
c000f972:	7f e1                	jg     c000f955 <hwTextMode_loadInData(VgaText*)+0x21>
c000f974:	5b                   	pop    ebx
c000f975:	5e                   	pop    esi
c000f976:	5f                   	pop    edi
c000f977:	5d                   	pop    ebp
c000f978:	c3                   	ret    

c000f979 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f979:	55                   	push   ebp
c000f97a:	80 3d 00 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f100,0x0
c000f981:	57                   	push   edi
c000f982:	56                   	push   esi
c000f983:	53                   	push   ebx
c000f984:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f988:	75 44                	jne    c000f9ce <hwTextMode_loadInTitle(VgaText*, char*)+0x55>
c000f98a:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f98d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f990:	8b 15 a0 df 02 c0    	mov    edx,DWORD PTR ds:0xc002dfa0
c000f996:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f99a:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f9a0:	eb 08                	jmp    c000f9aa <hwTextMode_loadInTitle(VgaText*, char*)+0x31>
c000f9a2:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f9a5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f9a8:	89 da                	mov    edx,ebx
c000f9aa:	83 e5 0f             	and    ebp,0xf
c000f9ad:	c1 e0 04             	shl    eax,0x4
c000f9b0:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f9b3:	0f b6 c0             	movzx  eax,al
c000f9b6:	41                   	inc    ecx
c000f9b7:	09 e8                	or     eax,ebp
c000f9b9:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f9bd:	c1 e0 08             	shl    eax,0x8
c000f9c0:	09 e8                	or     eax,ebp
c000f9c2:	39 fb                	cmp    ebx,edi
c000f9c4:	66 89 02             	mov    WORD PTR [edx],ax
c000f9c7:	75 d9                	jne    c000f9a2 <hwTextMode_loadInTitle(VgaText*, char*)+0x29>
c000f9c9:	5b                   	pop    ebx
c000f9ca:	5e                   	pop    esi
c000f9cb:	5f                   	pop    edi
c000f9cc:	5d                   	pop    ebp
c000f9cd:	c3                   	ret    
c000f9ce:	c7 46 3c 02 00 00 00 	mov    DWORD PTR [esi+0x3c],0x2
c000f9d5:	c7 46 38 00 00 00 00 	mov    DWORD PTR [esi+0x38],0x0
c000f9dc:	31 c0                	xor    eax,eax
c000f9de:	bd 02 00 00 00       	mov    ebp,0x2
c000f9e3:	eb ab                	jmp    c000f990 <hwTextMode_loadInTitle(VgaText*, char*)+0x17>

c000f9e5 <hwTextMode_showCursor(VgaText*, bool)>:
c000f9e5:	56                   	push   esi
c000f9e6:	80 3d 00 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f100,0x0
c000f9ed:	53                   	push   ebx
c000f9ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9f2:	75 36                	jne    c000fa2a <hwTextMode_showCursor(VgaText*, bool)+0x45>
c000f9f4:	84 c0                	test   al,al
c000f9f6:	74 35                	je     c000fa2d <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f9f8:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f9fd:	b0 0a                	mov    al,0xa
c000f9ff:	89 da                	mov    edx,ebx
c000fa01:	ee                   	out    dx,al
c000fa02:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000fa07:	89 ca                	mov    edx,ecx
c000fa09:	ec                   	in     al,dx
c000fa0a:	b2 0f                	mov    dl,0xf
c000fa0c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000fa10:	83 e0 c0             	and    eax,0xffffffc0
c000fa13:	2b 56 1c             	sub    edx,DWORD PTR [esi+0x1c]
c000fa16:	09 d0                	or     eax,edx
c000fa18:	89 ca                	mov    edx,ecx
c000fa1a:	ee                   	out    dx,al
c000fa1b:	b0 0b                	mov    al,0xb
c000fa1d:	89 da                	mov    edx,ebx
c000fa1f:	ee                   	out    dx,al
c000fa20:	89 ca                	mov    edx,ecx
c000fa22:	ec                   	in     al,dx
c000fa23:	83 e0 e0             	and    eax,0xffffffe0
c000fa26:	83 c8 0f             	or     eax,0xf
c000fa29:	ee                   	out    dx,al
c000fa2a:	5b                   	pop    ebx
c000fa2b:	5e                   	pop    esi
c000fa2c:	c3                   	ret    
c000fa2d:	b0 0a                	mov    al,0xa
c000fa2f:	ba d4 03 00 00       	mov    edx,0x3d4
c000fa34:	ee                   	out    dx,al
c000fa35:	b0 20                	mov    al,0x20
c000fa37:	ba d5 03 00 00       	mov    edx,0x3d5
c000fa3c:	ee                   	out    dx,al
c000fa3d:	5b                   	pop    ebx
c000fa3e:	5e                   	pop    esi
c000fa3f:	c3                   	ret    

c000fa40 <hwTextMode_update(VgaText*)>:
c000fa40:	c3                   	ret    

c000fa41 <hwTextMode_updateCursor(VgaText*)>:
c000fa41:	56                   	push   esi
c000fa42:	80 3d 00 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f100,0x0
c000fa49:	53                   	push   ebx
c000fa4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa4e:	75 36                	jne    c000fa86 <hwTextMode_updateCursor(VgaText*)+0x45>
c000fa50:	be d4 03 00 00       	mov    esi,0x3d4
c000fa55:	b9 19 00 00 00       	mov    ecx,0x19
c000fa5a:	89 f2                	mov    edx,esi
c000fa5c:	2b 48 10             	sub    ecx,DWORD PTR [eax+0x10]
c000fa5f:	03 48 18             	add    ecx,DWORD PTR [eax+0x18]
c000fa62:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000fa65:	c1 e1 04             	shl    ecx,0x4
c000fa68:	03 48 14             	add    ecx,DWORD PTR [eax+0x14]
c000fa6b:	b0 0f                	mov    al,0xf
c000fa6d:	ee                   	out    dx,al
c000fa6e:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fa73:	88 c8                	mov    al,cl
c000fa75:	89 da                	mov    edx,ebx
c000fa77:	ee                   	out    dx,al
c000fa78:	b0 0e                	mov    al,0xe
c000fa7a:	89 f2                	mov    edx,esi
c000fa7c:	ee                   	out    dx,al
c000fa7d:	89 c8                	mov    eax,ecx
c000fa7f:	89 da                	mov    edx,ebx
c000fa81:	66 c1 e8 08          	shr    ax,0x8
c000fa85:	ee                   	out    dx,al
c000fa86:	5b                   	pop    ebx
c000fa87:	5e                   	pop    esi
c000fa88:	c3                   	ret    

c000fa89 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa89:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa8d:	80 3d 00 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f100,0x0
c000fa94:	75 38                	jne    c000face <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa96:	ba da 03 00 00       	mov    edx,0x3da
c000fa9b:	84 c0                	test   al,al
c000fa9d:	75 18                	jne    c000fab7 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa9f:	ec                   	in     al,dx
c000faa0:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000faa5:	b0 30                	mov    al,0x30
c000faa7:	89 ca                	mov    edx,ecx
c000faa9:	ee                   	out    dx,al
c000faaa:	ba c1 03 00 00       	mov    edx,0x3c1
c000faaf:	ec                   	in     al,dx
c000fab0:	83 c8 08             	or     eax,0x8
c000fab3:	89 ca                	mov    edx,ecx
c000fab5:	ee                   	out    dx,al
c000fab6:	c3                   	ret    
c000fab7:	ec                   	in     al,dx
c000fab8:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fabd:	b0 30                	mov    al,0x30
c000fabf:	89 ca                	mov    edx,ecx
c000fac1:	ee                   	out    dx,al
c000fac2:	ba c1 03 00 00       	mov    edx,0x3c1
c000fac7:	ec                   	in     al,dx
c000fac8:	83 e0 f7             	and    eax,0xfffffff7
c000facb:	89 ca                	mov    edx,ecx
c000facd:	ee                   	out    dx,al
c000face:	c3                   	ret    

c000facf <hwTextMode_scrollScreen(VgaText*)>:
c000facf:	55                   	push   ebp
c000fad0:	57                   	push   edi
c000fad1:	56                   	push   esi
c000fad2:	53                   	push   ebx
c000fad3:	83 ec 1c             	sub    esp,0x1c
c000fad6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fada:	80 3d 00 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f100,0x0
c000fae1:	74 0e                	je     c000faf1 <hwTextMode_scrollScreen(VgaText*)+0x22>
c000fae3:	c7 41 34 02 00 00 00 	mov    DWORD PTR [ecx+0x34],0x2
c000faea:	c7 41 30 00 00 00 00 	mov    DWORD PTR [ecx+0x30],0x0
c000faf1:	a1 a0 df 02 c0       	mov    eax,ds:0xc002dfa0
c000faf6:	bd 02 00 00 00       	mov    ebp,0x2
c000fafb:	05 a0 00 00 00       	add    eax,0xa0
c000fb00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fb04:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fb08:	31 c0                	xor    eax,eax
c000fb0a:	eb 0b                	jmp    c000fb17 <hwTextMode_scrollScreen(VgaText*)+0x48>
c000fb0c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fb12:	74 51                	je     c000fb65 <hwTextMode_scrollScreen(VgaText*)+0x96>
c000fb14:	43                   	inc    ebx
c000fb15:	89 f0                	mov    eax,esi
c000fb17:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000fb1d:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fb23:	88 13                	mov    BYTE PTR [ebx],dl
c000fb25:	8d 70 01             	lea    esi,[eax+0x1]
c000fb28:	83 fd 18             	cmp    ebp,0x18
c000fb2b:	75 df                	jne    c000fb0c <hwTextMode_scrollScreen(VgaText*)+0x3d>
c000fb2d:	a8 01                	test   al,0x1
c000fb2f:	75 13                	jne    c000fb44 <hwTextMode_scrollScreen(VgaText*)+0x75>
c000fb31:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fb34:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fb3a:	75 d8                	jne    c000fb14 <hwTextMode_scrollScreen(VgaText*)+0x45>
c000fb3c:	83 c4 1c             	add    esp,0x1c
c000fb3f:	5b                   	pop    ebx
c000fb40:	5e                   	pop    esi
c000fb41:	5f                   	pop    edi
c000fb42:	5d                   	pop    ebp
c000fb43:	c3                   	ret    
c000fb44:	83 ec 08             	sub    esp,0x8
c000fb47:	0f b6 41 30          	movzx  eax,BYTE PTR [ecx+0x30]
c000fb4b:	50                   	push   eax
c000fb4c:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fb50:	0f b6 41 34          	movzx  eax,BYTE PTR [ecx+0x34]
c000fb54:	50                   	push   eax
c000fb55:	e8 0c 0c 00 00       	call   c0010766 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb5a:	83 c4 10             	add    esp,0x10
c000fb5d:	88 07                	mov    BYTE PTR [edi],al
c000fb5f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fb63:	eb cf                	jmp    c000fb34 <hwTextMode_scrollScreen(VgaText*)+0x65>
c000fb65:	45                   	inc    ebp
c000fb66:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb6e:	eb 94                	jmp    c000fb04 <hwTextMode_scrollScreen(VgaText*)+0x35>

c000fb70 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb70:	57                   	push   edi
c000fb71:	80 3d 00 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f100,0x0
c000fb78:	56                   	push   esi
c000fb79:	53                   	push   ebx
c000fb7a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb7e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb82:	75 62                	jne    c000fbe6 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x76>
c000fb84:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb89:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb8e:	83 ec 08             	sub    esp,0x8
c000fb91:	52                   	push   edx
c000fb92:	50                   	push   eax
c000fb93:	e8 ce 0b 00 00       	call   c0010766 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb98:	5a                   	pop    edx
c000fb99:	0f b6 c0             	movzx  eax,al
c000fb9c:	59                   	pop    ecx
c000fb9d:	50                   	push   eax
c000fb9e:	0f be c3             	movsx  eax,bl
c000fba1:	50                   	push   eax
c000fba2:	e8 65 0c 00 00       	call   c001080c <VgaText::combineCharAndColour(char, unsigned char)>
c000fba7:	83 c4 10             	add    esp,0x10
c000fbaa:	8b 35 a0 df 02 c0    	mov    esi,DWORD PTR ds:0xc002dfa0
c000fbb0:	80 3d 00 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f100,0x0
c000fbb7:	74 07                	je     c000fbc0 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fbb9:	66 0f be c3          	movsx  ax,bl
c000fbbd:	80 cc 02             	or     ah,0x2
c000fbc0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fbc4:	ba 19 00 00 00       	mov    edx,0x19
c000fbc9:	2b 51 10             	sub    edx,DWORD PTR [ecx+0x10]
c000fbcc:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fbcf:	8d 14 92             	lea    edx,[edx+edx*4]
c000fbd2:	c1 e1 04             	shl    ecx,0x4
c000fbd5:	c1 e2 04             	shl    edx,0x4
c000fbd8:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fbdc:	01 ca                	add    edx,ecx
c000fbde:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fbe2:	5b                   	pop    ebx
c000fbe3:	5e                   	pop    esi
c000fbe4:	5f                   	pop    edi
c000fbe5:	c3                   	ret    
c000fbe6:	b8 02 00 00 00       	mov    eax,0x2
c000fbeb:	31 d2                	xor    edx,edx
c000fbed:	eb 9f                	jmp    c000fb8e <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fbef <setupTextMode()>:
c000fbef:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fbf4:	83 e0 30             	and    eax,0x30
c000fbf7:	66 83 f8 30          	cmp    ax,0x30
c000fbfb:	75 11                	jne    c000fc0e <setupTextMode()+0x1f>
c000fbfd:	81 2d a0 df 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002dfa0,0x8000
c000fc07:	c6 05 00 f1 02 c0 01 	mov    BYTE PTR ds:0xc002f100,0x1
c000fc0e:	c7 05 38 f1 02 c0 89 fa 00 c0 	mov    DWORD PTR ds:0xc002f138,0xc000fa89
c000fc18:	c7 05 24 f1 02 c0 34 f9 00 c0 	mov    DWORD PTR ds:0xc002f124,0xc000f934
c000fc22:	c7 05 20 f1 02 c0 79 f9 00 c0 	mov    DWORD PTR ds:0xc002f120,0xc000f979
c000fc2c:	c7 05 2c f1 02 c0 cf fa 00 c0 	mov    DWORD PTR ds:0xc002f12c,0xc000facf
c000fc36:	c7 05 34 f1 02 c0 e5 f9 00 c0 	mov    DWORD PTR ds:0xc002f134,0xc000f9e5
c000fc40:	c7 05 28 f1 02 c0 40 fa 00 c0 	mov    DWORD PTR ds:0xc002f128,0xc000fa40
c000fc4a:	c7 05 30 f1 02 c0 41 fa 00 c0 	mov    DWORD PTR ds:0xc002f130,0xc000fa41
c000fc54:	c7 05 3c f1 02 c0 70 fb 00 c0 	mov    DWORD PTR ds:0xc002f13c,0xc000fb70
c000fc5e:	c3                   	ret    

c000fc5f <kernel_main>:
c000fc5f:	57                   	push   edi
c000fc60:	bf f9 03 00 00       	mov    edi,0x3f9
c000fc65:	56                   	push   esi
c000fc66:	89 fa                	mov    edx,edi
c000fc68:	53                   	push   ebx
c000fc69:	31 f6                	xor    esi,esi
c000fc6b:	83 ec 2c             	sub    esp,0x2c
c000fc6e:	89 f0                	mov    eax,esi
c000fc70:	ee                   	out    dx,al
c000fc71:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc76:	b0 80                	mov    al,0x80
c000fc78:	89 da                	mov    edx,ebx
c000fc7a:	ee                   	out    dx,al
c000fc7b:	b1 03                	mov    cl,0x3
c000fc7d:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc82:	88 c8                	mov    al,cl
c000fc84:	ee                   	out    dx,al
c000fc85:	89 f0                	mov    eax,esi
c000fc87:	89 fa                	mov    edx,edi
c000fc89:	ee                   	out    dx,al
c000fc8a:	88 c8                	mov    al,cl
c000fc8c:	89 da                	mov    edx,ebx
c000fc8e:	ee                   	out    dx,al
c000fc8f:	b0 c7                	mov    al,0xc7
c000fc91:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc96:	ee                   	out    dx,al
c000fc97:	b0 0b                	mov    al,0xb
c000fc99:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc9e:	ee                   	out    dx,al
c000fc9f:	68 48 ad 02 c0       	push   0xc002ad48
c000fca4:	e8 dc 31 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c000fca9:	e8 4a 09 00 00       	call   c00105f8 <installVgaTextImplementation()>
c000fcae:	e8 3c ff ff ff       	call   c000fbef <setupTextMode()>
c000fcb3:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fcb8:	05 ff 0f 00 00       	add    eax,0xfff
c000fcbd:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fcc2:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcc5:	e8 f5 03 00 00       	call   c00100bf <Phys::physicalMemorySetup(unsigned int)>
c000fcca:	e8 6f 1f 00 00       	call   c0011c3e <Virt::virtualMemorySetup()>
c000fccf:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fcd5:	83 c4 10             	add    esp,0x10
c000fcd8:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fcde:	75 0e                	jne    c000fcee <kernel_main+0x8f>
c000fce0:	89 d8                	mov    eax,ebx
c000fce2:	25 48 03 00 00       	and    eax,0x348
c000fce7:	3d 00 03 00 00       	cmp    eax,0x300
c000fcec:	74 10                	je     c000fcfe <kernel_main+0x9f>
c000fcee:	83 ec 0c             	sub    esp,0xc
c000fcf1:	68 d5 c6 02 c0       	push   0xc002c6d5
c000fcf6:	e8 72 ab 00 00       	call   c001a86d <Krnl::panic(char const*)>
c000fcfb:	83 c4 10             	add    esp,0x10
c000fcfe:	83 ec 0c             	sub    esp,0xc
c000fd01:	89 1d 80 f0 02 c0    	mov    DWORD PTR ds:0xc002f080,ebx
c000fd07:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fd0b:	53                   	push   ebx
c000fd0c:	e8 79 21 00 00       	call   c0011e8a <VAS::VAS()>
c000fd11:	89 1d f0 f1 02 c0    	mov    DWORD PTR ds:0xc002f1f0,ebx
c000fd17:	e8 04 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fd1c:	c7 04 24 5f ad 02 c0 	mov    DWORD PTR [esp],0xc002ad5f
c000fd23:	e8 5d 31 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c000fd28:	e8 90 1f 00 00       	call   c0011cbd <Virt::swappingSetup()>
c000fd2d:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fd34:	e8 a1 fb ff ff       	call   c000f8da <malloc>
c000fd39:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd3c:	89 c6                	mov    esi,eax
c000fd3e:	e8 5d ea ff ff       	call   c000e7a0 <Computer::Computer()>
c000fd43:	58                   	pop    eax
c000fd44:	89 35 68 f0 02 c0    	mov    DWORD PTR ds:0xc002f068,esi
c000fd4a:	5a                   	pop    edx
c000fd4b:	56                   	push   esi
c000fd4c:	68 7c ad 02 c0       	push   0xc002ad7c
c000fd51:	e8 2f 31 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c000fd56:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c000fd5b:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd5d:	6a 00                	push   0x0
c000fd5f:	6a 00                	push   0x0
c000fd61:	6a 00                	push   0x0
c000fd63:	50                   	push   eax
c000fd64:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd67:	83 c4 14             	add    esp,0x14
c000fd6a:	53                   	push   ebx
c000fd6b:	e8 ca 23 00 00       	call   c001213a <VAS::~VAS()>
c000fd70:	c7 04 24 8f ad 02 c0 	mov    DWORD PTR [esp],0xc002ad8f
c000fd77:	e8 f1 aa 00 00       	call   c001a86d <Krnl::panic(char const*)>
c000fd7c:	83 c4 30             	add    esp,0x30
c000fd7f:	5b                   	pop    ebx
c000fd80:	5e                   	pop    esi
c000fd81:	5f                   	pop    edi
c000fd82:	c3                   	ret    

c000fd83 <Phys::allocateDMA(unsigned long)>:
c000fd83:	55                   	push   ebp
c000fd84:	31 d2                	xor    edx,edx
c000fd86:	57                   	push   edi
c000fd87:	31 ed                	xor    ebp,ebp
c000fd89:	56                   	push   esi
c000fd8a:	31 c9                	xor    ecx,ecx
c000fd8c:	53                   	push   ebx
c000fd8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd91:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd97:	31 c0                	xor    eax,eax
c000fd99:	c1 ee 0c             	shr    esi,0xc
c000fd9c:	eb 17                	jmp    c000fdb5 <Phys::allocateDMA(unsigned long)+0x32>
c000fd9e:	85 c9                	test   ecx,ecx
c000fda0:	75 04                	jne    c000fda6 <Phys::allocateDMA(unsigned long)+0x23>
c000fda2:	89 d5                	mov    ebp,edx
c000fda4:	89 d0                	mov    eax,edx
c000fda6:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fda9:	39 de                	cmp    esi,ebx
c000fdab:	74 20                	je     c000fdcd <Phys::allocateDMA(unsigned long)+0x4a>
c000fdad:	42                   	inc    edx
c000fdae:	89 d9                	mov    ecx,ebx
c000fdb0:	83 fa 2f             	cmp    edx,0x2f
c000fdb3:	7f 11                	jg     c000fdc6 <Phys::allocateDMA(unsigned long)+0x43>
c000fdb5:	80 ba c0 f0 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd0f40],0x0
c000fdbc:	74 e0                	je     c000fd9e <Phys::allocateDMA(unsigned long)+0x1b>
c000fdbe:	31 c9                	xor    ecx,ecx
c000fdc0:	42                   	inc    edx
c000fdc1:	83 fa 2f             	cmp    edx,0x2f
c000fdc4:	7e ef                	jle    c000fdb5 <Phys::allocateDMA(unsigned long)+0x32>
c000fdc6:	5b                   	pop    ebx
c000fdc7:	31 c0                	xor    eax,eax
c000fdc9:	5e                   	pop    esi
c000fdca:	5f                   	pop    edi
c000fdcb:	5d                   	pop    ebp
c000fdcc:	c3                   	ret    
c000fdcd:	8d 14 30             	lea    edx,[eax+esi*1]
c000fdd0:	89 d7                	mov    edi,edx
c000fdd2:	4f                   	dec    edi
c000fdd3:	79 03                	jns    c000fdd8 <Phys::allocateDMA(unsigned long)+0x55>
c000fdd5:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fdd8:	c1 ff 04             	sar    edi,0x4
c000fddb:	89 c2                	mov    edx,eax
c000fddd:	c1 fa 04             	sar    edx,0x4
c000fde0:	39 fa                	cmp    edx,edi
c000fde2:	75 2f                	jne    c000fe13 <Phys::allocateDMA(unsigned long)+0x90>
c000fde4:	85 db                	test   ebx,ebx
c000fde6:	74 1a                	je     c000fe02 <Phys::allocateDMA(unsigned long)+0x7f>
c000fde8:	be c0 f0 02 c0       	mov    esi,0xc002f0c0
c000fded:	8d 90 c0 f0 02 c0    	lea    edx,[eax-0x3ffd0f40]
c000fdf3:	f7 d6                	not    esi
c000fdf5:	29 c6                	sub    esi,eax
c000fdf7:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fdfa:	42                   	inc    edx
c000fdfb:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fdfe:	39 d9                	cmp    ecx,ebx
c000fe00:	7f f5                	jg     c000fdf7 <Phys::allocateDMA(unsigned long)+0x74>
c000fe02:	85 ff                	test   edi,edi
c000fe04:	74 13                	je     c000fe19 <Phys::allocateDMA(unsigned long)+0x96>
c000fe06:	5b                   	pop    ebx
c000fe07:	05 50 20 0c 00       	add    eax,0xc2050
c000fe0c:	5e                   	pop    esi
c000fe0d:	c1 e0 0c             	shl    eax,0xc
c000fe10:	5f                   	pop    edi
c000fe11:	5d                   	pop    ebp
c000fe12:	c3                   	ret    
c000fe13:	89 ea                	mov    edx,ebp
c000fe15:	31 c9                	xor    ecx,ecx
c000fe17:	eb a7                	jmp    c000fdc0 <Phys::allocateDMA(unsigned long)+0x3d>
c000fe19:	5b                   	pop    ebx
c000fe1a:	c1 e0 0c             	shl    eax,0xc
c000fe1d:	5e                   	pop    esi
c000fe1e:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fe23:	5f                   	pop    edi
c000fe24:	5d                   	pop    ebp
c000fe25:	c3                   	ret    

c000fe26 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fe26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe2a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fe2e:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fe34:	c1 e9 0c             	shr    ecx,0xc
c000fe37:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fe3c:	76 25                	jbe    c000fe63 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fe3e:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fe43:	c1 e8 0c             	shr    eax,0xc
c000fe46:	8d 50 10             	lea    edx,[eax+0x10]
c000fe49:	85 c9                	test   ecx,ecx
c000fe4b:	74 15                	je     c000fe62 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fe4d:	8d 82 c0 f0 02 c0    	lea    eax,[edx-0x3ffd0f40]
c000fe53:	8d 94 11 c0 f0 02 c0 	lea    edx,[ecx+edx*1-0x3ffd0f40]
c000fe5a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fe5d:	40                   	inc    eax
c000fe5e:	39 d0                	cmp    eax,edx
c000fe60:	75 f8                	jne    c000fe5a <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fe62:	c3                   	ret    
c000fe63:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe69:	c1 ea 0c             	shr    edx,0xc
c000fe6c:	eb db                	jmp    c000fe49 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe6e <Phys::setPageState(unsigned long, bool)>:
c000fe6e:	56                   	push   esi
c000fe6f:	ba 01 00 00 00       	mov    edx,0x1
c000fe74:	53                   	push   ebx
c000fe75:	8b 35 98 df 02 c0    	mov    esi,DWORD PTR ds:0xc002df98
c000fe7b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe7f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe83:	89 c8                	mov    eax,ecx
c000fe85:	83 e1 07             	and    ecx,0x7
c000fe88:	c1 e8 03             	shr    eax,0x3
c000fe8b:	d3 e3                	shl    ebx,cl
c000fe8d:	01 c6                	add    esi,eax
c000fe8f:	d3 e2                	shl    edx,cl
c000fe91:	f7 d2                	not    edx
c000fe93:	20 16                	and    BYTE PTR [esi],dl
c000fe95:	03 05 98 df 02 c0    	add    eax,DWORD PTR ds:0xc002df98
c000fe9b:	08 18                	or     BYTE PTR [eax],bl
c000fe9d:	5b                   	pop    ebx
c000fe9e:	5e                   	pop    esi
c000fe9f:	c3                   	ret    

c000fea0 <Phys::getPageState(unsigned long)>:
c000fea0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fea4:	8b 15 98 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df98
c000feaa:	89 c8                	mov    eax,ecx
c000feac:	83 e1 07             	and    ecx,0x7
c000feaf:	c1 e8 03             	shr    eax,0x3
c000feb2:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000feb6:	d3 f8                	sar    eax,cl
c000feb8:	83 e0 01             	and    eax,0x1
c000febb:	c3                   	ret    

c000febc <Phys::freePage(unsigned long)>:
c000febc:	53                   	push   ebx
c000febd:	83 ec 08             	sub    esp,0x8
c000fec0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fec4:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000feca:	76 57                	jbe    c000ff23 <Phys::freePage(unsigned long)+0x67>
c000fecc:	c1 eb 0c             	shr    ebx,0xc
c000fecf:	53                   	push   ebx
c000fed0:	e8 cb ff ff ff       	call   c000fea0 <Phys::getPageState(unsigned long)>
c000fed5:	5a                   	pop    edx
c000fed6:	84 c0                	test   al,al
c000fed8:	74 5b                	je     c000ff35 <Phys::freePage(unsigned long)+0x79>
c000feda:	a1 b0 f0 02 c0       	mov    eax,ds:0xc002f0b0
c000fedf:	48                   	dec    eax
c000fee0:	a3 b0 f0 02 c0       	mov    ds:0xc002f0b0,eax
c000fee5:	8d 04 80             	lea    eax,[eax+eax*4]
c000fee8:	8d 04 80             	lea    eax,[eax+eax*4]
c000feeb:	c1 e0 02             	shl    eax,0x2
c000feee:	99                   	cdq    
c000feef:	f7 3d b4 f0 02 c0    	idiv   DWORD PTR ds:0xc002f0b4
c000fef5:	39 05 ac f0 02 c0    	cmp    DWORD PTR ds:0xc002f0ac,eax
c000fefb:	75 13                	jne    c000ff10 <Phys::freePage(unsigned long)+0x54>
c000fefd:	83 ec 08             	sub    esp,0x8
c000ff00:	6a 00                	push   0x0
c000ff02:	53                   	push   ebx
c000ff03:	e8 66 ff ff ff       	call   c000fe6e <Phys::setPageState(unsigned long, bool)>
c000ff08:	83 c4 10             	add    esp,0x10
c000ff0b:	83 c4 08             	add    esp,0x8
c000ff0e:	5b                   	pop    ebx
c000ff0f:	c3                   	ret    
c000ff10:	83 ec 0c             	sub    esp,0xc
c000ff13:	a3 ac f0 02 c0       	mov    ds:0xc002f0ac,eax
c000ff18:	50                   	push   eax
c000ff19:	e8 08 0a 00 00       	call   c0010926 <VgaText::updateRAMUsageDisplay(int)>
c000ff1e:	83 c4 10             	add    esp,0x10
c000ff21:	eb da                	jmp    c000fefd <Phys::freePage(unsigned long)+0x41>
c000ff23:	68 00 10 00 00       	push   0x1000
c000ff28:	53                   	push   ebx
c000ff29:	e8 f8 fe ff ff       	call   c000fe26 <Phys::freeDMA(unsigned long, unsigned long)>
c000ff2e:	59                   	pop    ecx
c000ff2f:	5b                   	pop    ebx
c000ff30:	83 c4 08             	add    esp,0x8
c000ff33:	5b                   	pop    ebx
c000ff34:	c3                   	ret    
c000ff35:	c7 44 24 10 aa ad 02 c0 	mov    DWORD PTR [esp+0x10],0xc002adaa
c000ff3d:	83 c4 08             	add    esp,0x8
c000ff40:	5b                   	pop    ebx
c000ff41:	e9 27 a9 00 00       	jmp    c001a86d <Krnl::panic(char const*)>

c000ff46 <Phys::allocatePage()>:
c000ff46:	56                   	push   esi
c000ff47:	53                   	push   ebx
c000ff48:	51                   	push   ecx
c000ff49:	8b 35 a4 f0 02 c0    	mov    esi,DWORD PTR ds:0xc002f0a4
c000ff4f:	89 f3                	mov    ebx,esi
c000ff51:	eb 0a                	jmp    c000ff5d <Phys::allocatePage()+0x17>
c000ff53:	89 1d a4 f0 02 c0    	mov    DWORD PTR ds:0xc002f0a4,ebx
c000ff59:	39 de                	cmp    esi,ebx
c000ff5b:	74 24                	je     c000ff81 <Phys::allocatePage()+0x3b>
c000ff5d:	53                   	push   ebx
c000ff5e:	e8 3d ff ff ff       	call   c000fea0 <Phys::getPageState(unsigned long)>
c000ff63:	5a                   	pop    edx
c000ff64:	84 c0                	test   al,al
c000ff66:	74 77                	je     c000ffdf <Phys::allocatePage()+0x99>
c000ff68:	43                   	inc    ebx
c000ff69:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff6f:	75 e2                	jne    c000ff53 <Phys::allocatePage()+0xd>
c000ff71:	31 db                	xor    ebx,ebx
c000ff73:	c7 05 a4 f0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f0a4,0x0
c000ff7d:	39 de                	cmp    esi,ebx
c000ff7f:	75 dc                	jne    c000ff5d <Phys::allocatePage()+0x17>
c000ff81:	83 ec 0c             	sub    esp,0xc
c000ff84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff89:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff8c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ff92:	e8 1b 2c 00 00       	call   c0012bb2 <VAS::scanForEviction()>
c000ff97:	83 c4 10             	add    esp,0x10
c000ff9a:	85 c0                	test   eax,eax
c000ff9c:	75 76                	jne    c0010014 <Phys::allocatePage()+0xce>
c000ff9e:	83 ec 0c             	sub    esp,0xc
c000ffa1:	68 c0 ad 02 c0       	push   0xc002adc0
c000ffa6:	e8 da 2e 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c000ffab:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ffb2:	e8 cc fd ff ff       	call   c000fd83 <Phys::allocateDMA(unsigned long)>
c000ffb7:	83 c4 10             	add    esp,0x10
c000ffba:	85 c0                	test   eax,eax
c000ffbc:	75 56                	jne    c0010014 <Phys::allocatePage()+0xce>
c000ffbe:	83 ec 0c             	sub    esp,0xc
c000ffc1:	68 d1 ad 02 c0       	push   0xc002add1
c000ffc6:	e8 a2 a8 00 00       	call   c001a86d <Krnl::panic(char const*)>
c000ffcb:	83 c4 10             	add    esp,0x10
c000ffce:	8b 1d a4 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0a4
c000ffd4:	53                   	push   ebx
c000ffd5:	e8 c6 fe ff ff       	call   c000fea0 <Phys::getPageState(unsigned long)>
c000ffda:	5a                   	pop    edx
c000ffdb:	84 c0                	test   al,al
c000ffdd:	75 89                	jne    c000ff68 <Phys::allocatePage()+0x22>
c000ffdf:	6a 01                	push   0x1
c000ffe1:	53                   	push   ebx
c000ffe2:	e8 87 fe ff ff       	call   c000fe6e <Phys::setPageState(unsigned long, bool)>
c000ffe7:	a1 b0 f0 02 c0       	mov    eax,ds:0xc002f0b0
c000ffec:	59                   	pop    ecx
c000ffed:	40                   	inc    eax
c000ffee:	5b                   	pop    ebx
c000ffef:	a3 b0 f0 02 c0       	mov    ds:0xc002f0b0,eax
c000fff4:	8d 04 80             	lea    eax,[eax+eax*4]
c000fff7:	8d 04 80             	lea    eax,[eax+eax*4]
c000fffa:	c1 e0 02             	shl    eax,0x2
c000fffd:	99                   	cdq    
c000fffe:	f7 3d b4 f0 02 c0    	idiv   DWORD PTR ds:0xc002f0b4
c0010004:	39 05 ac f0 02 c0    	cmp    DWORD PTR ds:0xc002f0ac,eax
c001000a:	75 0c                	jne    c0010018 <Phys::allocatePage()+0xd2>
c001000c:	a1 a4 f0 02 c0       	mov    eax,ds:0xc002f0a4
c0010011:	c1 e0 0c             	shl    eax,0xc
c0010014:	5a                   	pop    edx
c0010015:	5b                   	pop    ebx
c0010016:	5e                   	pop    esi
c0010017:	c3                   	ret    
c0010018:	83 ec 0c             	sub    esp,0xc
c001001b:	a3 ac f0 02 c0       	mov    ds:0xc002f0ac,eax
c0010020:	50                   	push   eax
c0010021:	e8 00 09 00 00       	call   c0010926 <VgaText::updateRAMUsageDisplay(int)>
c0010026:	83 c4 10             	add    esp,0x10
c0010029:	eb e1                	jmp    c001000c <Phys::allocatePage()+0xc6>

c001002b <Phys::allocateContiguousPages(int)>:
c001002b:	57                   	push   edi
c001002c:	56                   	push   esi
c001002d:	53                   	push   ebx
c001002e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010032:	fa                   	cli    
c0010033:	ff 05 a8 25 03 c0    	inc    DWORD PTR ds:0xc00325a8
c0010039:	31 db                	xor    ebx,ebx
c001003b:	85 db                	test   ebx,ebx
c001003d:	75 11                	jne    c0010050 <Phys::allocateContiguousPages(int)+0x25>
c001003f:	e8 02 ff ff ff       	call   c000ff46 <Phys::allocatePage()>
c0010044:	83 fe 01             	cmp    esi,0x1
c0010047:	89 c7                	mov    edi,eax
c0010049:	74 21                	je     c001006c <Phys::allocateContiguousPages(int)+0x41>
c001004b:	bb 01 00 00 00       	mov    ebx,0x1
c0010050:	e8 f1 fe ff ff       	call   c000ff46 <Phys::allocatePage()>
c0010055:	89 da                	mov    edx,ebx
c0010057:	c1 e2 0c             	shl    edx,0xc
c001005a:	01 fa                	add    edx,edi
c001005c:	39 c2                	cmp    edx,eax
c001005e:	74 20                	je     c0010080 <Phys::allocateContiguousPages(int)+0x55>
c0010060:	bb 01 00 00 00       	mov    ebx,0x1
c0010065:	89 c7                	mov    edi,eax
c0010067:	83 fe 01             	cmp    esi,0x1
c001006a:	75 e4                	jne    c0010050 <Phys::allocateContiguousPages(int)+0x25>
c001006c:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c0010071:	48                   	dec    eax
c0010072:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c0010077:	75 01                	jne    c001007a <Phys::allocateContiguousPages(int)+0x4f>
c0010079:	fb                   	sti    
c001007a:	89 f8                	mov    eax,edi
c001007c:	5b                   	pop    ebx
c001007d:	5e                   	pop    esi
c001007e:	5f                   	pop    edi
c001007f:	c3                   	ret    
c0010080:	43                   	inc    ebx
c0010081:	39 f3                	cmp    ebx,esi
c0010083:	75 b6                	jne    c001003b <Phys::allocateContiguousPages(int)+0x10>
c0010085:	eb e5                	jmp    c001006c <Phys::allocateContiguousPages(int)+0x41>

c0010087 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010087:	56                   	push   esi
c0010088:	53                   	push   ebx
c0010089:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001008d:	39 1d a8 f0 02 c0    	cmp    DWORD PTR ds:0xc002f0a8,ebx
c0010093:	73 06                	jae    c001009b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010095:	89 1d a8 f0 02 c0    	mov    DWORD PTR ds:0xc002f0a8,ebx
c001009b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001009f:	c1 eb 0c             	shr    ebx,0xc
c00100a2:	c1 e8 0c             	shr    eax,0xc
c00100a5:	39 d8                	cmp    eax,ebx
c00100a7:	73 13                	jae    c00100bc <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c00100a9:	6a 00                	push   0x0
c00100ab:	8d 70 01             	lea    esi,[eax+0x1]
c00100ae:	50                   	push   eax
c00100af:	e8 ba fd ff ff       	call   c000fe6e <Phys::setPageState(unsigned long, bool)>
c00100b4:	5a                   	pop    edx
c00100b5:	89 f0                	mov    eax,esi
c00100b7:	59                   	pop    ecx
c00100b8:	39 f3                	cmp    ebx,esi
c00100ba:	75 ed                	jne    c00100a9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c00100bc:	5b                   	pop    ebx
c00100bd:	5e                   	pop    esi
c00100be:	c3                   	ret    

c00100bf <Phys::physicalMemorySetup(unsigned int)>:
c00100bf:	55                   	push   ebp
c00100c0:	57                   	push   edi
c00100c1:	56                   	push   esi
c00100c2:	53                   	push   ebx
c00100c3:	31 db                	xor    ebx,ebx
c00100c5:	83 ec 40             	sub    esp,0x40
c00100c8:	6a 30                	push   0x30
c00100ca:	6a 00                	push   0x0
c00100cc:	68 c0 f0 02 c0       	push   0xc002f0c0
c00100d1:	e8 96 06 ff ff       	call   c000076c <memset>
c00100d6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00100da:	25 00 f0 ff ff       	and    eax,0xfffff000
c00100df:	05 00 10 00 00       	add    eax,0x1000
c00100e4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00100e8:	83 c4 10             	add    esp,0x10
c00100eb:	83 ec 08             	sub    esp,0x8
c00100ee:	6a 01                	push   0x1
c00100f0:	53                   	push   ebx
c00100f1:	43                   	inc    ebx
c00100f2:	e8 77 fd ff ff       	call   c000fe6e <Phys::setPageState(unsigned long, bool)>
c00100f7:	83 c4 10             	add    esp,0x10
c00100fa:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010100:	75 e9                	jne    c00100eb <Phys::physicalMemorySetup(unsigned int)+0x2c>
c0010102:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0010109:	66 85 c0             	test   ax,ax
c001010c:	0f 84 8e 01 00 00    	je     c00102a0 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c0010112:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010116:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001011e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010122:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0010127:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001012b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0010133:	eb 15                	jmp    c001014a <Phys::physicalMemorySetup(unsigned int)+0x8b>
c0010135:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0010139:	83 c3 18             	add    ebx,0x18
c001013c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010140:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010144:	0f 84 66 01 00 00    	je     c00102b0 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c001014a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001014d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010150:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0010153:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010157:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001015b:	8b 33                	mov    esi,DWORD PTR [ebx]
c001015d:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010160:	01 f0                	add    eax,esi
c0010162:	55                   	push   ebp
c0010163:	11 fa                	adc    edx,edi
c0010165:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010169:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001016d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010171:	56                   	push   esi
c0010172:	68 0c ae 02 c0       	push   0xc002ae0c
c0010177:	e8 09 2d 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001017c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010180:	83 c4 10             	add    esp,0x10
c0010183:	09 f8                	or     eax,edi
c0010185:	0f 85 25 01 00 00    	jne    c00102b0 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c001018b:	4d                   	dec    ebp
c001018c:	75 a7                	jne    c0010135 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001018e:	ba 00 00 08 00       	mov    edx,0x80000
c0010193:	89 c1                	mov    ecx,eax
c0010195:	39 f2                	cmp    edx,esi
c0010197:	19 f9                	sbb    ecx,edi
c0010199:	0f 82 a7 00 00 00    	jb     c0010246 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001019f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00101a3:	89 c1                	mov    ecx,eax
c00101a5:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c00101a9:	0f 83 97 00 00 00    	jae    c0010246 <Phys::physicalMemorySetup(unsigned int)+0x187>
c00101af:	ba 00 00 0a 00       	mov    edx,0xa0000
c00101b4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101b8:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101bc:	39 fa                	cmp    edx,edi
c00101be:	19 e8                	sbb    eax,ebp
c00101c0:	0f 82 14 01 00 00    	jb     c00102da <Phys::physicalMemorySetup(unsigned int)+0x21b>
c00101c6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101ca:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101ce:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00101d4:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101d9:	83 d5 ff             	adc    ebp,0xffffffff
c00101dc:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101e0:	31 c0                	xor    eax,eax
c00101e2:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00101e6:	39 fa                	cmp    edx,edi
c00101e8:	89 c1                	mov    ecx,eax
c00101ea:	19 e9                	sbb    ecx,ebp
c00101ec:	0f 83 43 ff ff ff    	jae    c0010135 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101f2:	be 00 00 08 00       	mov    esi,0x80000
c00101f7:	50                   	push   eax
c00101f8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101fc:	57                   	push   edi
c00101fd:	56                   	push   esi
c00101fe:	68 30 ae 02 c0       	push   0xc002ae30
c0010203:	e8 7d 2c 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0010208:	5a                   	pop    edx
c0010209:	59                   	pop    ecx
c001020a:	57                   	push   edi
c001020b:	56                   	push   esi
c001020c:	e8 76 fe ff ff       	call   c0010087 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010211:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010215:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010219:	83 c4 0c             	add    esp,0xc
c001021c:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010220:	03 05 b4 f0 02 c0    	add    eax,DWORD PTR ds:0xc002f0b4
c0010226:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001022d:	a3 b4 f0 02 c0       	mov    ds:0xc002f0b4,eax
c0010232:	52                   	push   edx
c0010233:	50                   	push   eax
c0010234:	68 ed ad 02 c0       	push   0xc002aded
c0010239:	e8 47 2c 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001023e:	83 c4 10             	add    esp,0x10
c0010241:	e9 ef fe ff ff       	jmp    c0010135 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010246:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001024a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001024e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010252:	39 ea                	cmp    edx,ebp
c0010254:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010258:	0f 82 d7 fe ff ff    	jb     c0010135 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001025e:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010263:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010267:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c001026b:	0f 83 c4 fe ff ff    	jae    c0010135 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010271:	39 ee                	cmp    esi,ebp
c0010273:	89 f8                	mov    eax,edi
c0010275:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010279:	0f 83 78 ff ff ff    	jae    c00101f7 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001027f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010283:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010287:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001028b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001028f:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010293:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010297:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001029b:	e9 57 ff ff ff       	jmp    c00101f7 <Phys::physicalMemorySetup(unsigned int)+0x138>
c00102a0:	83 ec 0c             	sub    esp,0xc
c00102a3:	68 df ad 02 c0       	push   0xc002addf
c00102a8:	e8 c0 a5 00 00       	call   c001a86d <Krnl::panic(char const*)>
c00102ad:	83 c4 10             	add    esp,0x10
c00102b0:	bb 40 01 00 00       	mov    ebx,0x140
c00102b5:	83 ec 08             	sub    esp,0x8
c00102b8:	6a 00                	push   0x0
c00102ba:	53                   	push   ebx
c00102bb:	43                   	inc    ebx
c00102bc:	e8 ad fb ff ff       	call   c000fe6e <Phys::setPageState(unsigned long, bool)>
c00102c1:	ff 05 b4 f0 02 c0    	inc    DWORD PTR ds:0xc002f0b4
c00102c7:	83 c4 10             	add    esp,0x10
c00102ca:	81 fb 80 01 00 00    	cmp    ebx,0x180
c00102d0:	75 e3                	jne    c00102b5 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00102d2:	83 c4 3c             	add    esp,0x3c
c00102d5:	5b                   	pop    ebx
c00102d6:	5e                   	pop    esi
c00102d7:	5f                   	pop    edi
c00102d8:	5d                   	pop    ebp
c00102d9:	c3                   	ret    
c00102da:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00102e2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102ea:	e9 d7 fe ff ff       	jmp    c00101c6 <Phys::physicalMemorySetup(unsigned int)+0x107>
c00102ef:	90                   	nop

c00102f0 <Pipe::isAtty()>:
c00102f0:	31 c0                	xor    eax,eax
c00102f2:	c3                   	ret    
c00102f3:	90                   	nop

c00102f4 <Pipe::~Pipe()>:
c00102f4:	83 ec 0c             	sub    esp,0xc
c00102f7:	ba 9c ae 02 c0       	mov    edx,0xc002ae9c
c00102fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010300:	89 10                	mov    DWORD PTR [eax],edx
c0010302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010306:	83 ec 0c             	sub    esp,0xc
c0010309:	50                   	push   eax
c001030a:	e8 0f 15 00 00       	call   c001181e <UnixFile::~UnixFile()>
c001030f:	83 c4 10             	add    esp,0x10
c0010312:	90                   	nop
c0010313:	83 c4 0c             	add    esp,0xc
c0010316:	c3                   	ret    
c0010317:	90                   	nop

c0010318 <Pipe::~Pipe()>:
c0010318:	83 ec 0c             	sub    esp,0xc
c001031b:	83 ec 0c             	sub    esp,0xc
c001031e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010322:	e8 cd ff ff ff       	call   c00102f4 <Pipe::~Pipe()>
c0010327:	83 c4 10             	add    esp,0x10
c001032a:	83 ec 08             	sub    esp,0x8
c001032d:	6a 20                	push   0x20
c001032f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010333:	e8 6d 2a 00 00       	call   c0012da5 <operator delete(void*, unsigned long)>
c0010338:	83 c4 10             	add    esp,0x10
c001033b:	83 c4 0c             	add    esp,0xc
c001033e:	c3                   	ret    
c001033f:	90                   	nop

c0010340 <Pipe::read(unsigned long long, void*, int*)>:
c0010340:	55                   	push   ebp
c0010341:	57                   	push   edi
c0010342:	56                   	push   esi
c0010343:	53                   	push   ebx
c0010344:	83 ec 1c             	sub    esp,0x1c
c0010347:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001034b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001034f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010353:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010356:	89 c8                	mov    eax,ecx
c0010358:	99                   	cdq    
c0010359:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c001035d:	74 24                	je     c0010383 <Pipe::read(unsigned long long, void*, int*)+0x43>
c001035f:	39 f9                	cmp    ecx,edi
c0010361:	89 d1                	mov    ecx,edx
c0010363:	19 f1                	sbb    ecx,esi
c0010365:	73 1c                	jae    c0010383 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0010367:	fa                   	cli    
c0010368:	ff 05 a8 25 03 c0    	inc    DWORD PTR ds:0xc00325a8
c001036e:	e8 ad e2 00 00       	call   c001e620 <schedule()>
c0010373:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c0010378:	48                   	dec    eax
c0010379:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c001037e:	75 d3                	jne    c0010353 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010380:	fb                   	sti    
c0010381:	eb d0                	jmp    c0010353 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010383:	39 f8                	cmp    eax,edi
c0010385:	89 d1                	mov    ecx,edx
c0010387:	89 3c 24             	mov    DWORD PTR [esp],edi
c001038a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001038e:	19 f1                	sbb    ecx,esi
c0010390:	73 07                	jae    c0010399 <Pipe::read(unsigned long long, void*, int*)+0x59>
c0010392:	89 04 24             	mov    DWORD PTR [esp],eax
c0010395:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010399:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c001039c:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c001039f:	29 f7                	sub    edi,esi
c00103a1:	89 f8                	mov    eax,edi
c00103a3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00103a7:	99                   	cdq    
c00103a8:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00103ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103af:	19 d0                	sbb    eax,edx
c00103b1:	73 07                	jae    c00103ba <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00103b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00103b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00103ba:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00103bd:	89 ea                	mov    edx,ebp
c00103bf:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00103c3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00103c8:	74 0d                	je     c00103d7 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00103ca:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00103cd:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00103d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00103d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103d7:	85 d2                	test   edx,edx
c00103d9:	74 11                	je     c00103ec <Pipe::read(unsigned long long, void*, int*)+0xac>
c00103db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00103df:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00103e2:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00103e6:	89 d1                	mov    ecx,edx
c00103e8:	89 c7                	mov    edi,eax
c00103ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103ef:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00103f2:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103f5:	99                   	cdq    
c00103f6:	89 f7                	mov    edi,esi
c00103f8:	03 04 24             	add    eax,DWORD PTR [esp]
c00103fb:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00103ff:	c1 ff 1f             	sar    edi,0x1f
c0010402:	57                   	push   edi
c0010403:	56                   	push   esi
c0010404:	52                   	push   edx
c0010405:	50                   	push   eax
c0010406:	e8 69 70 01 00       	call   c0027474 <__umoddi3>
c001040b:	83 c4 10             	add    esp,0x10
c001040e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010411:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010416:	75 10                	jne    c0010428 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0010418:	83 ec 0c             	sub    esp,0xc
c001041b:	68 59 ae 02 c0       	push   0xc002ae59
c0010420:	e8 48 a4 00 00       	call   c001a86d <Krnl::panic(char const*)>
c0010425:	83 c4 10             	add    esp,0x10
c0010428:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001042c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001042f:	89 10                	mov    DWORD PTR [eax],edx
c0010431:	83 c4 1c             	add    esp,0x1c
c0010434:	31 c0                	xor    eax,eax
c0010436:	5b                   	pop    ebx
c0010437:	5e                   	pop    esi
c0010438:	5f                   	pop    edi
c0010439:	5d                   	pop    ebp
c001043a:	c3                   	ret    
c001043b:	90                   	nop

c001043c <Pipe::write(unsigned long long, void*, int*)>:
c001043c:	55                   	push   ebp
c001043d:	57                   	push   edi
c001043e:	56                   	push   esi
c001043f:	53                   	push   ebx
c0010440:	83 ec 1c             	sub    esp,0x1c
c0010443:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010447:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001044b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001044e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010452:	89 04 24             	mov    DWORD PTR [esp],eax
c0010455:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010459:	89 d8                	mov    eax,ebx
c001045b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001045e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0010462:	89 d6                	mov    esi,edx
c0010464:	89 d7                	mov    edi,edx
c0010466:	c1 ff 1f             	sar    edi,0x1f
c0010469:	03 34 24             	add    esi,DWORD PTR [esp]
c001046c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0010470:	c1 f8 1f             	sar    eax,0x1f
c0010473:	39 f3                	cmp    ebx,esi
c0010475:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010479:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001047d:	19 f8                	sbb    eax,edi
c001047f:	b8 01 00 00 00       	mov    eax,0x1
c0010484:	72 6e                	jb     c00104f4 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0010486:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010489:	01 d0                	add    eax,edx
c001048b:	99                   	cdq    
c001048c:	f7 fb                	idiv   ebx
c001048e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010492:	29 d3                	sub    ebx,edx
c0010494:	89 d7                	mov    edi,edx
c0010496:	89 de                	mov    esi,ebx
c0010498:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001049b:	c1 fb 1f             	sar    ebx,0x1f
c001049e:	39 f2                	cmp    edx,esi
c00104a0:	19 d8                	sbb    eax,ebx
c00104a2:	b8 00 00 00 00       	mov    eax,0x0
c00104a7:	72 04                	jb     c00104ad <Pipe::write(unsigned long long, void*, int*)+0x71>
c00104a9:	89 d0                	mov    eax,edx
c00104ab:	29 f0                	sub    eax,esi
c00104ad:	89 d3                	mov    ebx,edx
c00104af:	29 c3                	sub    ebx,eax
c00104b1:	74 0b                	je     c00104be <Pipe::write(unsigned long long, void*, int*)+0x82>
c00104b3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00104b6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00104ba:	89 d9                	mov    ecx,ebx
c00104bc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00104be:	85 c0                	test   eax,eax
c00104c0:	74 0d                	je     c00104cf <Pipe::write(unsigned long long, void*, int*)+0x93>
c00104c2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00104c6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00104c9:	89 de                	mov    esi,ebx
c00104cb:	89 c1                	mov    ecx,eax
c00104cd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00104cf:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c00104d2:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00104d7:	75 10                	jne    c00104e9 <Pipe::write(unsigned long long, void*, int*)+0xad>
c00104d9:	83 ec 0c             	sub    esp,0xc
c00104dc:	68 75 ae 02 c0       	push   0xc002ae75
c00104e1:	e8 87 a3 00 00       	call   c001a86d <Krnl::panic(char const*)>
c00104e6:	83 c4 10             	add    esp,0x10
c00104e9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00104ed:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00104f0:	89 08                	mov    DWORD PTR [eax],ecx
c00104f2:	31 c0                	xor    eax,eax
c00104f4:	83 c4 1c             	add    esp,0x1c
c00104f7:	5b                   	pop    ebx
c00104f8:	5e                   	pop    esi
c00104f9:	5f                   	pop    edi
c00104fa:	5d                   	pop    ebp
c00104fb:	c3                   	ret    

c00104fc <Pipe::Pipe(int)>:
c00104fc:	83 ec 0c             	sub    esp,0xc
c00104ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010503:	83 ec 08             	sub    esp,0x8
c0010506:	6a 00                	push   0x0
c0010508:	50                   	push   eax
c0010509:	e8 2e 11 00 00       	call   c001163c <UnixFile::UnixFile(int)>
c001050e:	83 c4 10             	add    esp,0x10
c0010511:	ba 9c ae 02 c0       	mov    edx,0xc002ae9c
c0010516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001051a:	89 10                	mov    DWORD PTR [eax],edx
c001051c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010520:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010524:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010527:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001052b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010532:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010536:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001053d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010541:	83 ec 0c             	sub    esp,0xc
c0010544:	50                   	push   eax
c0010545:	e8 90 f3 ff ff       	call   c000f8da <malloc>
c001054a:	83 c4 10             	add    esp,0x10
c001054d:	89 c2                	mov    edx,eax
c001054f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010553:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001055a:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c001055e:	90                   	nop
c001055f:	83 c4 0c             	add    esp,0xc
c0010562:	c3                   	ret    
c0010563:	90                   	nop

c0010564 <VgaText::isAtty()>:
c0010564:	b0 01                	mov    al,0x1
c0010566:	c3                   	ret    
c0010567:	90                   	nop

c0010568 <VgaText::~VgaText()>:
c0010568:	83 ec 0c             	sub    esp,0xc
c001056b:	ba 58 af 02 c0       	mov    edx,0xc002af58
c0010570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010574:	89 10                	mov    DWORD PTR [eax],edx
c0010576:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001057a:	83 ec 0c             	sub    esp,0xc
c001057d:	50                   	push   eax
c001057e:	e8 9b 12 00 00       	call   c001181e <UnixFile::~UnixFile()>
c0010583:	83 c4 10             	add    esp,0x10
c0010586:	90                   	nop
c0010587:	83 c4 0c             	add    esp,0xc
c001058a:	c3                   	ret    
c001058b:	90                   	nop

c001058c <VgaText::~VgaText()>:
c001058c:	83 ec 0c             	sub    esp,0xc
c001058f:	83 ec 0c             	sub    esp,0xc
c0010592:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010596:	e8 cd ff ff ff       	call   c0010568 <VgaText::~VgaText()>
c001059b:	83 c4 10             	add    esp,0x10
c001059e:	83 ec 08             	sub    esp,0x8
c00105a1:	68 c4 02 00 00       	push   0x2c4
c00105a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105aa:	e8 f6 27 00 00       	call   c0012da5 <operator delete(void*, unsigned long)>
c00105af:	83 c4 10             	add    esp,0x10
c00105b2:	83 c4 0c             	add    esp,0xc
c00105b5:	c3                   	ret    

c00105b6 <VgaText::read(unsigned long long, void*, int*)>:
c00105b6:	83 ec 10             	sub    esp,0x10
c00105b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105bd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00105c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105c5:	e8 6a 5d 00 00       	call   c0016334 <readKeyboard(VgaText*, char*, unsigned long)>
c00105ca:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00105ce:	89 02                	mov    DWORD PTR [edx],eax
c00105d0:	31 c0                	xor    eax,eax
c00105d2:	83 c4 1c             	add    esp,0x1c
c00105d5:	c3                   	ret    

c00105d6 <setTerminalScrollLock(bool)>:
c00105d6:	c3                   	ret    

c00105d7 <addToTerminalCycle(VgaText*)>:
c00105d7:	8b 15 40 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f140
c00105dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105e1:	85 d2                	test   edx,edx
c00105e3:	75 09                	jne    c00105ee <addToTerminalCycle(VgaText*)+0x17>
c00105e5:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c00105e8:	a3 40 f1 02 c0       	mov    ds:0xc002f140,eax
c00105ed:	c3                   	ret    
c00105ee:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c00105f1:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00105f4:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c00105f7:	c3                   	ret    

c00105f8 <installVgaTextImplementation()>:
c00105f8:	83 ec 10             	sub    esp,0x10
c00105fb:	6a 20                	push   0x20
c00105fd:	6a 00                	push   0x0
c00105ff:	68 20 f1 02 c0       	push   0xc002f120
c0010604:	e8 63 01 ff ff       	call   c000076c <memset>
c0010609:	83 c4 1c             	add    esp,0x1c
c001060c:	c3                   	ret    

c001060d <scrollTerminalScrollLock(int)>:
c001060d:	c3                   	ret    

c001060e <VgaText::load()>:
c001060e:	53                   	push   ebx
c001060f:	31 c0                	xor    eax,eax
c0010611:	83 ec 58             	sub    esp,0x58
c0010614:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010618:	89 e2                	mov    edx,esp
c001061a:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001061e:	40                   	inc    eax
c001061f:	83 f8 50             	cmp    eax,0x50
c0010622:	75 f6                	jne    c001061a <VgaText::load()+0xc>
c0010624:	31 c0                	xor    eax,eax
c0010626:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c001062d:	84 c9                	test   cl,cl
c001062f:	74 06                	je     c0010637 <VgaText::load()+0x29>
c0010631:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010634:	40                   	inc    eax
c0010635:	eb ef                	jmp    c0010626 <VgaText::load()+0x18>
c0010637:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c001063a:	85 c0                	test   eax,eax
c001063c:	74 09                	je     c0010647 <VgaText::load()+0x39>
c001063e:	51                   	push   ecx
c001063f:	51                   	push   ecx
c0010640:	52                   	push   edx
c0010641:	53                   	push   ebx
c0010642:	ff d0                	call   eax
c0010644:	83 c4 10             	add    esp,0x10
c0010647:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c001064a:	85 c0                	test   eax,eax
c001064c:	74 09                	je     c0010657 <VgaText::load()+0x49>
c001064e:	83 ec 0c             	sub    esp,0xc
c0010651:	53                   	push   ebx
c0010652:	ff d0                	call   eax
c0010654:	83 c4 10             	add    esp,0x10
c0010657:	83 c4 58             	add    esp,0x58
c001065a:	5b                   	pop    ebx
c001065b:	c3                   	ret    

c001065c <VgaText::updateCursor()>:
c001065c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010660:	39 05 44 f1 02 c0    	cmp    DWORD PTR ds:0xc002f144,eax
c0010666:	75 09                	jne    c0010671 <VgaText::updateCursor()+0x15>
c0010668:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c001066b:	85 c0                	test   eax,eax
c001066d:	74 02                	je     c0010671 <VgaText::updateCursor()+0x15>
c001066f:	ff e0                	jmp    eax
c0010671:	c3                   	ret    

c0010672 <VgaText::showCursor(bool)>:
c0010672:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010676:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001067a:	88 50 20             	mov    BYTE PTR [eax+0x20],dl
c001067d:	c3                   	ret    

c001067e <VgaText::disableBlink(bool)>:
c001067e:	56                   	push   esi
c001067f:	53                   	push   ebx
c0010680:	51                   	push   ecx
c0010681:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010685:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010689:	39 1d 44 f1 02 c0    	cmp    DWORD PTR ds:0xc002f144,ebx
c001068f:	75 15                	jne    c00106a6 <VgaText::disableBlink(bool)+0x28>
c0010691:	8b 43 78             	mov    eax,DWORD PTR [ebx+0x78]
c0010694:	85 c0                	test   eax,eax
c0010696:	74 0e                	je     c00106a6 <VgaText::disableBlink(bool)+0x28>
c0010698:	89 f1                	mov    ecx,esi
c001069a:	52                   	push   edx
c001069b:	52                   	push   edx
c001069c:	0f b6 d1             	movzx  edx,cl
c001069f:	52                   	push   edx
c00106a0:	53                   	push   ebx
c00106a1:	ff d0                	call   eax
c00106a3:	83 c4 10             	add    esp,0x10
c00106a6:	89 f0                	mov    eax,esi
c00106a8:	83 f0 01             	xor    eax,0x1
c00106ab:	88 43 21             	mov    BYTE PTR [ebx+0x21],al
c00106ae:	58                   	pop    eax
c00106af:	5b                   	pop    ebx
c00106b0:	5e                   	pop    esi
c00106b1:	c3                   	ret    

c00106b2 <VgaText::doANSI_SGR(int)>:
c00106b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106ba:	85 d2                	test   edx,edx
c00106bc:	75 0b                	jne    c00106c9 <VgaText::doANSI_SGR(int)+0x17>
c00106be:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00106c1:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00106c4:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00106c7:	eb 59                	jmp    c0010722 <VgaText::doANSI_SGR(int)+0x70>
c00106c9:	83 fa 07             	cmp    edx,0x7
c00106cc:	75 0b                	jne    c00106d9 <VgaText::doANSI_SGR(int)+0x27>
c00106ce:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00106d1:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00106d4:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00106d7:	eb 49                	jmp    c0010722 <VgaText::doANSI_SGR(int)+0x70>
c00106d9:	83 fa 1b             	cmp    edx,0x1b
c00106dc:	74 e0                	je     c00106be <VgaText::doANSI_SGR(int)+0xc>
c00106de:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00106e1:	83 f9 07             	cmp    ecx,0x7
c00106e4:	77 09                	ja     c00106ef <VgaText::doANSI_SGR(int)+0x3d>
c00106e6:	8b 14 8d c0 df 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2040]
c00106ed:	eb 20                	jmp    c001070f <VgaText::doANSI_SGR(int)+0x5d>
c00106ef:	8d 4a d8             	lea    ecx,[edx-0x28]
c00106f2:	83 f9 07             	cmp    ecx,0x7
c00106f5:	77 09                	ja     c0010700 <VgaText::doANSI_SGR(int)+0x4e>
c00106f7:	8b 14 8d c0 df 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2040]
c00106fe:	eb 22                	jmp    c0010722 <VgaText::doANSI_SGR(int)+0x70>
c0010700:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010703:	83 f9 07             	cmp    ecx,0x7
c0010706:	77 0b                	ja     c0010713 <VgaText::doANSI_SGR(int)+0x61>
c0010708:	8b 14 95 78 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2188]
c001070f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010712:	c3                   	ret    
c0010713:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010716:	83 f9 07             	cmp    ecx,0x7
c0010719:	77 0a                	ja     c0010725 <VgaText::doANSI_SGR(int)+0x73>
c001071b:	8b 14 95 50 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd21b0]
c0010722:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010725:	c3                   	ret    

c0010726 <VgaText::setDefaultBgColour(VgaColour)>:
c0010726:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001072a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001072e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010731:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010734:	c3                   	ret    
c0010735:	90                   	nop

c0010736 <VgaText::setDefaultFgColour(VgaColour)>:
c0010736:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001073a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001073e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0010741:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010744:	c3                   	ret    
c0010745:	90                   	nop

c0010746 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010746:	53                   	push   ebx
c0010747:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001074b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001074f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010753:	51                   	push   ecx
c0010754:	e8 cd ff ff ff       	call   c0010726 <VgaText::setDefaultBgColour(VgaColour)>
c0010759:	58                   	pop    eax
c001075a:	5a                   	pop    edx
c001075b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001075f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010763:	5b                   	pop    ebx
c0010764:	eb d0                	jmp    c0010736 <VgaText::setDefaultFgColour(VgaColour)>

c0010766 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010766:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001076a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001076f:	83 e0 0f             	and    eax,0xf
c0010772:	c1 e2 04             	shl    edx,0x4
c0010775:	09 d0                	or     eax,edx
c0010777:	c3                   	ret    

c0010778 <VgaText::scrollScreen()>:
c0010778:	55                   	push   ebp
c0010779:	b9 01 00 00 00       	mov    ecx,0x1
c001077e:	57                   	push   edi
c001077f:	56                   	push   esi
c0010780:	53                   	push   ebx
c0010781:	83 ec 0c             	sub    esp,0xc
c0010784:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010788:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c001078e:	31 ff                	xor    edi,edi
c0010790:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0010793:	83 f9 17             	cmp    ecx,0x17
c0010796:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0010799:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00107a0:	75 27                	jne    c00107c9 <VgaText::scrollScreen()+0x51>
c00107a2:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00107a5:	01 f5                	add    ebp,esi
c00107a7:	f7 c7 01 00 00 00    	test   edi,0x1
c00107ad:	74 16                	je     c00107c5 <VgaText::scrollScreen()+0x4d>
c00107af:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00107b3:	50                   	push   eax
c00107b4:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00107b8:	50                   	push   eax
c00107b9:	e8 a8 ff ff ff       	call   c0010766 <VgaText::combineColours(unsigned char, unsigned char)>
c00107be:	5a                   	pop    edx
c00107bf:	5a                   	pop    edx
c00107c0:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00107c3:	eb 04                	jmp    c00107c9 <VgaText::scrollScreen()+0x51>
c00107c5:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00107c9:	47                   	inc    edi
c00107ca:	46                   	inc    esi
c00107cb:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00107d1:	75 bd                	jne    c0010790 <VgaText::scrollScreen()+0x18>
c00107d3:	41                   	inc    ecx
c00107d4:	83 f9 18             	cmp    ecx,0x18
c00107d7:	75 af                	jne    c0010788 <VgaText::scrollScreen()+0x10>
c00107d9:	39 1d 44 f1 02 c0    	cmp    DWORD PTR ds:0xc002f144,ebx
c00107df:	75 1b                	jne    c00107fc <VgaText::scrollScreen()+0x84>
c00107e1:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00107e5:	74 05                	je     c00107ec <VgaText::scrollScreen()+0x74>
c00107e7:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00107ea:	eb 10                	jmp    c00107fc <VgaText::scrollScreen()+0x84>
c00107ec:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c00107ef:	85 c0                	test   eax,eax
c00107f1:	74 09                	je     c00107fc <VgaText::scrollScreen()+0x84>
c00107f3:	83 ec 0c             	sub    esp,0xc
c00107f6:	53                   	push   ebx
c00107f7:	ff d0                	call   eax
c00107f9:	83 c4 10             	add    esp,0x10
c00107fc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010800:	83 c4 0c             	add    esp,0xc
c0010803:	5b                   	pop    ebx
c0010804:	5e                   	pop    esi
c0010805:	5f                   	pop    edi
c0010806:	5d                   	pop    ebp
c0010807:	e9 50 fe ff ff       	jmp    c001065c <VgaText::updateCursor()>

c001080c <VgaText::combineCharAndColour(char, unsigned char)>:
c001080c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010811:	c1 e0 08             	shl    eax,0x8
c0010814:	89 c2                	mov    edx,eax
c0010816:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001081b:	09 d0                	or     eax,edx
c001081d:	c3                   	ret    

c001081e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001081e:	56                   	push   esi
c001081f:	53                   	push   ebx
c0010820:	51                   	push   ecx
c0010821:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010825:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001082a:	50                   	push   eax
c001082b:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010830:	50                   	push   eax
c0010831:	e8 30 ff ff ff       	call   c0010766 <VgaText::combineColours(unsigned char, unsigned char)>
c0010836:	5b                   	pop    ebx
c0010837:	0f b6 c0             	movzx  eax,al
c001083a:	5e                   	pop    esi
c001083b:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010840:	50                   	push   eax
c0010841:	53                   	push   ebx
c0010842:	e8 c5 ff ff ff       	call   c001080c <VgaText::combineCharAndColour(char, unsigned char)>
c0010847:	5a                   	pop    edx
c0010848:	5e                   	pop    esi
c0010849:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c001084c:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010852:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010856:	0f b7 d2             	movzx  edx,dx
c0010859:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c001085d:	39 0d 44 f1 02 c0    	cmp    DWORD PTR ds:0xc002f144,ecx
c0010863:	75 10                	jne    c0010875 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010865:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c0010868:	85 c0                	test   eax,eax
c001086a:	74 09                	je     c0010875 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001086c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010870:	5a                   	pop    edx
c0010871:	5b                   	pop    ebx
c0010872:	5e                   	pop    esi
c0010873:	ff e0                	jmp    eax
c0010875:	58                   	pop    eax
c0010876:	5b                   	pop    ebx
c0010877:	5e                   	pop    esi
c0010878:	c3                   	ret    
c0010879:	90                   	nop

c001087a <VgaText::getCursorX()>:
c001087a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001087e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010881:	c3                   	ret    

c0010882 <VgaText::getCursorY()>:
c0010882:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010886:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0010889:	c3                   	ret    

c001088a <VgaText::setCursor(int, int)>:
c001088a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001088e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010892:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010895:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010899:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001089c:	e9 bb fd ff ff       	jmp    c001065c <VgaText::updateCursor()>
c00108a1:	90                   	nop

c00108a2 <VgaText::setCursorX(int)>:
c00108a2:	83 ec 10             	sub    esp,0x10
c00108a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108a9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00108ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108b0:	50                   	push   eax
c00108b1:	e8 d4 ff ff ff       	call   c001088a <VgaText::setCursor(int, int)>
c00108b6:	83 c4 1c             	add    esp,0x1c
c00108b9:	c3                   	ret    

c00108ba <VgaText::setCursorY(int)>:
c00108ba:	83 ec 10             	sub    esp,0x10
c00108bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108c5:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00108c8:	50                   	push   eax
c00108c9:	e8 bc ff ff ff       	call   c001088a <VgaText::setCursor(int, int)>
c00108ce:	83 c4 1c             	add    esp,0x1c
c00108d1:	c3                   	ret    

c00108d2 <VgaText::incrementCursor(bool)>:
c00108d2:	56                   	push   esi
c00108d3:	53                   	push   ebx
c00108d4:	51                   	push   ecx
c00108d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108d9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00108dd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00108e0:	40                   	inc    eax
c00108e1:	83 f8 50             	cmp    eax,0x50
c00108e4:	74 05                	je     c00108eb <VgaText::incrementCursor(bool)+0x19>
c00108e6:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00108e9:	eb 24                	jmp    c001090f <VgaText::incrementCursor(bool)+0x3d>
c00108eb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00108ee:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00108f5:	8d 50 01             	lea    edx,[eax+0x1]
c00108f8:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00108fb:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00108fe:	75 0f                	jne    c001090f <VgaText::incrementCursor(bool)+0x3d>
c0010900:	83 ec 0c             	sub    esp,0xc
c0010903:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010906:	53                   	push   ebx
c0010907:	e8 6c fe ff ff       	call   c0010778 <VgaText::scrollScreen()>
c001090c:	83 c4 10             	add    esp,0x10
c001090f:	89 f0                	mov    eax,esi
c0010911:	84 c0                	test   al,al
c0010913:	74 0c                	je     c0010921 <VgaText::incrementCursor(bool)+0x4f>
c0010915:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010919:	5a                   	pop    edx
c001091a:	5b                   	pop    ebx
c001091b:	5e                   	pop    esi
c001091c:	e9 3b fd ff ff       	jmp    c001065c <VgaText::updateCursor()>
c0010921:	58                   	pop    eax
c0010922:	5b                   	pop    ebx
c0010923:	5e                   	pop    esi
c0010924:	c3                   	ret    
c0010925:	90                   	nop

c0010926 <VgaText::updateRAMUsageDisplay(int)>:
c0010926:	56                   	push   esi
c0010927:	8b 35 a0 df 02 c0    	mov    esi,DWORD PTR ds:0xc002dfa0
c001092d:	53                   	push   ebx
c001092e:	bb 0a 00 00 00       	mov    ebx,0xa
c0010933:	6a 0f                	push   0xf
c0010935:	6a 00                	push   0x0
c0010937:	e8 2a fe ff ff       	call   c0010766 <VgaText::combineColours(unsigned char, unsigned char)>
c001093c:	5a                   	pop    edx
c001093d:	59                   	pop    ecx
c001093e:	0f b6 c8             	movzx  ecx,al
c0010941:	51                   	push   ecx
c0010942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010946:	99                   	cdq    
c0010947:	f7 fb                	idiv   ebx
c0010949:	89 d3                	mov    ebx,edx
c001094b:	83 c0 30             	add    eax,0x30
c001094e:	83 c3 30             	add    ebx,0x30
c0010951:	0f be c0             	movsx  eax,al
c0010954:	0f b6 db             	movzx  ebx,bl
c0010957:	50                   	push   eax
c0010958:	e8 af fe ff ff       	call   c001080c <VgaText::combineCharAndColour(char, unsigned char)>
c001095d:	5a                   	pop    edx
c001095e:	5a                   	pop    edx
c001095f:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010966:	51                   	push   ecx
c0010967:	53                   	push   ebx
c0010968:	e8 9f fe ff ff       	call   c001080c <VgaText::combineCharAndColour(char, unsigned char)>
c001096d:	5b                   	pop    ebx
c001096e:	5a                   	pop    edx
c001096f:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010976:	51                   	push   ecx
c0010977:	6a 25                	push   0x25
c0010979:	e8 8e fe ff ff       	call   c001080c <VgaText::combineCharAndColour(char, unsigned char)>
c001097e:	59                   	pop    ecx
c001097f:	5b                   	pop    ebx
c0010980:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010987:	5b                   	pop    ebx
c0010988:	5e                   	pop    esi
c0010989:	c3                   	ret    

c001098a <VgaText::updateDiskUsage()>:
c001098a:	55                   	push   ebp
c001098b:	bd 10 27 00 00       	mov    ebp,0x2710
c0010990:	57                   	push   edi
c0010991:	8b 3d a0 df 02 c0    	mov    edi,DWORD PTR ds:0xc002dfa0
c0010997:	56                   	push   esi
c0010998:	53                   	push   ebx
c0010999:	6a 0f                	push   0xf
c001099b:	6a 00                	push   0x0
c001099d:	e8 c4 fd ff ff       	call   c0010766 <VgaText::combineColours(unsigned char, unsigned char)>
c00109a2:	5a                   	pop    edx
c00109a3:	0f b6 d8             	movzx  ebx,al
c00109a6:	59                   	pop    ecx
c00109a7:	8b 35 c8 33 03 c0    	mov    esi,DWORD PTR ds:0xc00333c8
c00109ad:	53                   	push   ebx
c00109ae:	b9 0a 00 00 00       	mov    ecx,0xa
c00109b3:	89 f0                	mov    eax,esi
c00109b5:	99                   	cdq    
c00109b6:	f7 fd                	idiv   ebp
c00109b8:	99                   	cdq    
c00109b9:	f7 f9                	idiv   ecx
c00109bb:	8d 42 30             	lea    eax,[edx+0x30]
c00109be:	0f b6 c0             	movzx  eax,al
c00109c1:	50                   	push   eax
c00109c2:	e8 45 fe ff ff       	call   c001080c <VgaText::combineCharAndColour(char, unsigned char)>
c00109c7:	5d                   	pop    ebp
c00109c8:	bd e8 03 00 00       	mov    ebp,0x3e8
c00109cd:	5a                   	pop    edx
c00109ce:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c00109d2:	53                   	push   ebx
c00109d3:	89 f0                	mov    eax,esi
c00109d5:	99                   	cdq    
c00109d6:	f7 fd                	idiv   ebp
c00109d8:	99                   	cdq    
c00109d9:	f7 f9                	idiv   ecx
c00109db:	8d 42 30             	lea    eax,[edx+0x30]
c00109de:	0f b6 c0             	movzx  eax,al
c00109e1:	50                   	push   eax
c00109e2:	e8 25 fe ff ff       	call   c001080c <VgaText::combineCharAndColour(char, unsigned char)>
c00109e7:	5d                   	pop    ebp
c00109e8:	bd 64 00 00 00       	mov    ebp,0x64
c00109ed:	5a                   	pop    edx
c00109ee:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00109f5:	53                   	push   ebx
c00109f6:	89 f0                	mov    eax,esi
c00109f8:	99                   	cdq    
c00109f9:	f7 fd                	idiv   ebp
c00109fb:	99                   	cdq    
c00109fc:	f7 f9                	idiv   ecx
c00109fe:	8d 42 30             	lea    eax,[edx+0x30]
c0010a01:	0f b6 c0             	movzx  eax,al
c0010a04:	50                   	push   eax
c0010a05:	e8 02 fe ff ff       	call   c001080c <VgaText::combineCharAndColour(char, unsigned char)>
c0010a0a:	5d                   	pop    ebp
c0010a0b:	5a                   	pop    edx
c0010a0c:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a13:	53                   	push   ebx
c0010a14:	89 f0                	mov    eax,esi
c0010a16:	99                   	cdq    
c0010a17:	f7 f9                	idiv   ecx
c0010a19:	89 d6                	mov    esi,edx
c0010a1b:	99                   	cdq    
c0010a1c:	f7 f9                	idiv   ecx
c0010a1e:	8d 42 30             	lea    eax,[edx+0x30]
c0010a21:	0f b6 c0             	movzx  eax,al
c0010a24:	50                   	push   eax
c0010a25:	e8 e2 fd ff ff       	call   c001080c <VgaText::combineCharAndColour(char, unsigned char)>
c0010a2a:	5d                   	pop    ebp
c0010a2b:	5a                   	pop    edx
c0010a2c:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a33:	53                   	push   ebx
c0010a34:	8d 46 30             	lea    eax,[esi+0x30]
c0010a37:	0f b6 f0             	movzx  esi,al
c0010a3a:	56                   	push   esi
c0010a3b:	e8 cc fd ff ff       	call   c001080c <VgaText::combineCharAndColour(char, unsigned char)>
c0010a40:	5e                   	pop    esi
c0010a41:	8b 35 c4 33 03 c0    	mov    esi,DWORD PTR ds:0xc00333c4
c0010a47:	5d                   	pop    ebp
c0010a48:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a4f:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a54:	53                   	push   ebx
c0010a55:	89 f0                	mov    eax,esi
c0010a57:	99                   	cdq    
c0010a58:	f7 fd                	idiv   ebp
c0010a5a:	99                   	cdq    
c0010a5b:	f7 f9                	idiv   ecx
c0010a5d:	8d 42 30             	lea    eax,[edx+0x30]
c0010a60:	0f b6 c0             	movzx  eax,al
c0010a63:	50                   	push   eax
c0010a64:	e8 a3 fd ff ff       	call   c001080c <VgaText::combineCharAndColour(char, unsigned char)>
c0010a69:	5a                   	pop    edx
c0010a6a:	5d                   	pop    ebp
c0010a6b:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010a72:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a77:	53                   	push   ebx
c0010a78:	89 f0                	mov    eax,esi
c0010a7a:	99                   	cdq    
c0010a7b:	f7 fd                	idiv   ebp
c0010a7d:	99                   	cdq    
c0010a7e:	f7 f9                	idiv   ecx
c0010a80:	8d 42 30             	lea    eax,[edx+0x30]
c0010a83:	0f b6 c0             	movzx  eax,al
c0010a86:	50                   	push   eax
c0010a87:	e8 80 fd ff ff       	call   c001080c <VgaText::combineCharAndColour(char, unsigned char)>
c0010a8c:	5a                   	pop    edx
c0010a8d:	5d                   	pop    ebp
c0010a8e:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010a95:	bd 64 00 00 00       	mov    ebp,0x64
c0010a9a:	53                   	push   ebx
c0010a9b:	89 f0                	mov    eax,esi
c0010a9d:	99                   	cdq    
c0010a9e:	f7 fd                	idiv   ebp
c0010aa0:	99                   	cdq    
c0010aa1:	f7 f9                	idiv   ecx
c0010aa3:	83 c2 30             	add    edx,0x30
c0010aa6:	0f b6 d2             	movzx  edx,dl
c0010aa9:	52                   	push   edx
c0010aaa:	e8 5d fd ff ff       	call   c001080c <VgaText::combineCharAndColour(char, unsigned char)>
c0010aaf:	5a                   	pop    edx
c0010ab0:	5d                   	pop    ebp
c0010ab1:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010ab8:	53                   	push   ebx
c0010ab9:	89 f0                	mov    eax,esi
c0010abb:	99                   	cdq    
c0010abc:	f7 f9                	idiv   ecx
c0010abe:	89 d6                	mov    esi,edx
c0010ac0:	99                   	cdq    
c0010ac1:	f7 f9                	idiv   ecx
c0010ac3:	8d 42 30             	lea    eax,[edx+0x30]
c0010ac6:	0f b6 c0             	movzx  eax,al
c0010ac9:	50                   	push   eax
c0010aca:	e8 3d fd ff ff       	call   c001080c <VgaText::combineCharAndColour(char, unsigned char)>
c0010acf:	5a                   	pop    edx
c0010ad0:	59                   	pop    ecx
c0010ad1:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010ad8:	53                   	push   ebx
c0010ad9:	8d 46 30             	lea    eax,[esi+0x30]
c0010adc:	0f b6 f0             	movzx  esi,al
c0010adf:	56                   	push   esi
c0010ae0:	e8 27 fd ff ff       	call   c001080c <VgaText::combineCharAndColour(char, unsigned char)>
c0010ae5:	5b                   	pop    ebx
c0010ae6:	5e                   	pop    esi
c0010ae7:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010aee:	5b                   	pop    ebx
c0010aef:	5e                   	pop    esi
c0010af0:	5f                   	pop    edi
c0010af1:	5d                   	pop    ebp
c0010af2:	c3                   	ret    
c0010af3:	90                   	nop

c0010af4 <VgaText::updateTitle()>:
c0010af4:	53                   	push   ebx
c0010af5:	31 c0                	xor    eax,eax
c0010af7:	83 ec 58             	sub    esp,0x58
c0010afa:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010afe:	89 e1                	mov    ecx,esp
c0010b00:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b04:	40                   	inc    eax
c0010b05:	83 f8 50             	cmp    eax,0x50
c0010b08:	75 f6                	jne    c0010b00 <VgaText::updateTitle()+0xc>
c0010b0a:	31 c0                	xor    eax,eax
c0010b0c:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c0010b13:	84 db                	test   bl,bl
c0010b15:	74 06                	je     c0010b1d <VgaText::updateTitle()+0x29>
c0010b17:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b1a:	40                   	inc    eax
c0010b1b:	eb ef                	jmp    c0010b0c <VgaText::updateTitle()+0x18>
c0010b1d:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010b20:	85 c0                	test   eax,eax
c0010b22:	74 09                	je     c0010b2d <VgaText::updateTitle()+0x39>
c0010b24:	53                   	push   ebx
c0010b25:	53                   	push   ebx
c0010b26:	51                   	push   ecx
c0010b27:	52                   	push   edx
c0010b28:	ff d0                	call   eax
c0010b2a:	83 c4 10             	add    esp,0x10
c0010b2d:	e8 58 fe ff ff       	call   c001098a <VgaText::updateDiskUsage()>
c0010b32:	83 c4 58             	add    esp,0x58
c0010b35:	5b                   	pop    ebx
c0010b36:	c3                   	ret    
c0010b37:	90                   	nop

c0010b38 <VgaText::setTitleTextColour(VgaColour)>:
c0010b38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b40:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010b43:	eb af                	jmp    c0010af4 <VgaText::updateTitle()>
c0010b45:	90                   	nop

c0010b46 <VgaText::setTitleColour(VgaColour)>:
c0010b46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b4e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010b51:	eb a1                	jmp    c0010af4 <VgaText::updateTitle()>
c0010b53:	90                   	nop

c0010b54 <VgaText::setTitle(char*)>:
c0010b54:	53                   	push   ebx
c0010b55:	83 ec 10             	sub    esp,0x10
c0010b58:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010b5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b60:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010b66:	50                   	push   eax
c0010b67:	e8 bc fc fe ff       	call   c0000828 <strcpy>
c0010b6c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010b70:	83 c4 18             	add    esp,0x18
c0010b73:	5b                   	pop    ebx
c0010b74:	e9 7b ff ff ff       	jmp    c0010af4 <VgaText::updateTitle()>
c0010b79:	90                   	nop

c0010b7a <VgaText::decrementCursor(bool)>:
c0010b7a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b7e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010b82:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010b85:	85 c0                	test   eax,eax
c0010b87:	74 04                	je     c0010b8d <VgaText::decrementCursor(bool)+0x13>
c0010b89:	48                   	dec    eax
c0010b8a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010b8d:	84 c9                	test   cl,cl
c0010b8f:	74 09                	je     c0010b9a <VgaText::decrementCursor(bool)+0x20>
c0010b91:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010b95:	e9 c2 fa ff ff       	jmp    c001065c <VgaText::updateCursor()>
c0010b9a:	c3                   	ret    
c0010b9b:	90                   	nop

c0010b9c <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010b9c:	53                   	push   ebx
c0010b9d:	83 ec 08             	sub    esp,0x8
c0010ba0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010ba4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ba8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010bac:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010bb0:	3c 07                	cmp    al,0x7
c0010bb2:	75 2a                	jne    c0010bde <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010bb4:	a1 f8 f1 02 c0       	mov    eax,ds:0xc002f1f8
c0010bb9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010bc1:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010bc9:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010bd1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010bd5:	83 c4 08             	add    esp,0x8
c0010bd8:	5b                   	pop    ebx
c0010bd9:	e9 b4 30 00 00       	jmp    c0013c92 <Buzzer::beep(int, int, bool)>
c0010bde:	3c 0d                	cmp    al,0xd
c0010be0:	75 09                	jne    c0010beb <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010be2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010be9:	eb 2c                	jmp    c0010c17 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010beb:	3c 0a                	cmp    al,0xa
c0010bed:	75 31                	jne    c0010c20 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010bef:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010bf2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010bf9:	8d 50 01             	lea    edx,[eax+0x1]
c0010bfc:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010bff:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010c02:	75 0f                	jne    c0010c13 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010c04:	83 ec 0c             	sub    esp,0xc
c0010c07:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010c0a:	53                   	push   ebx
c0010c0b:	e8 68 fb ff ff       	call   c0010778 <VgaText::scrollScreen()>
c0010c10:	83 c4 10             	add    esp,0x10
c0010c13:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c17:	83 c4 08             	add    esp,0x8
c0010c1a:	5b                   	pop    ebx
c0010c1b:	e9 3c fa ff ff       	jmp    c001065c <VgaText::updateCursor()>
c0010c20:	3c 08                	cmp    al,0x8
c0010c22:	75 25                	jne    c0010c49 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c0010c24:	50                   	push   eax
c0010c25:	50                   	push   eax
c0010c26:	6a 01                	push   0x1
c0010c28:	53                   	push   ebx
c0010c29:	e8 4c ff ff ff       	call   c0010b7a <VgaText::decrementCursor(bool)>
c0010c2e:	5a                   	pop    edx
c0010c2f:	59                   	pop    ecx
c0010c30:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010c33:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010c36:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010c39:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010c3c:	6a 20                	push   0x20
c0010c3e:	53                   	push   ebx
c0010c3f:	e8 da fb ff ff       	call   c001081e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c44:	83 c4 28             	add    esp,0x28
c0010c47:	5b                   	pop    ebx
c0010c48:	c3                   	ret    
c0010c49:	83 ec 08             	sub    esp,0x8
c0010c4c:	0f be c0             	movsx  eax,al
c0010c4f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010c52:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010c55:	51                   	push   ecx
c0010c56:	52                   	push   edx
c0010c57:	50                   	push   eax
c0010c58:	53                   	push   ebx
c0010c59:	e8 c0 fb ff ff       	call   c001081e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c5e:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010c62:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010c6a:	83 c4 28             	add    esp,0x28
c0010c6d:	5b                   	pop    ebx
c0010c6e:	e9 5f fc ff ff       	jmp    c00108d2 <VgaText::incrementCursor(bool)>
c0010c73:	90                   	nop

c0010c74 <VgaText::isShowingCursor()>:
c0010c74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c78:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0010c7b:	c3                   	ret    

c0010c7c <VgaText::isBlinkDisabled()>:
c0010c7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c80:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0010c83:	83 f0 01             	xor    eax,0x1
c0010c86:	c3                   	ret    
c0010c87:	90                   	nop

c0010c88 <VgaText::setCursorHeight(int)>:
c0010c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c8c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c90:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010c93:	0f b6 40 20          	movzx  eax,BYTE PTR [eax+0x20]
c0010c97:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010c9b:	e9 d2 f9 ff ff       	jmp    c0010672 <VgaText::showCursor(bool)>

c0010ca0 <VgaText::getCursorHeight()>:
c0010ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ca4:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0010ca7:	c3                   	ret    

c0010ca8 <setActiveTerminal(VgaText*)>:
c0010ca8:	53                   	push   ebx
c0010ca9:	83 ec 08             	sub    esp,0x8
c0010cac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cb0:	85 db                	test   ebx,ebx
c0010cb2:	75 11                	jne    c0010cc5 <setActiveTerminal(VgaText*)+0x1d>
c0010cb4:	c7 44 24 10 b0 ae 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aeb0
c0010cbc:	83 c4 08             	add    esp,0x8
c0010cbf:	5b                   	pop    ebx
c0010cc0:	e9 a8 9b 00 00       	jmp    c001a86d <Krnl::panic(char const*)>
c0010cc5:	50                   	push   eax
c0010cc6:	50                   	push   eax
c0010cc7:	53                   	push   ebx
c0010cc8:	68 be ae 02 c0       	push   0xc002aebe
c0010ccd:	e8 b3 21 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0010cd2:	a1 44 f1 02 c0       	mov    eax,ds:0xc002f144
c0010cd7:	83 c4 10             	add    esp,0x10
c0010cda:	85 c0                	test   eax,eax
c0010cdc:	74 0c                	je     c0010cea <setActiveTerminal(VgaText*)+0x42>
c0010cde:	83 ec 0c             	sub    esp,0xc
c0010ce1:	50                   	push   eax
c0010ce2:	e8 75 f9 ff ff       	call   c001065c <VgaText::updateCursor()>
c0010ce7:	83 c4 10             	add    esp,0x10
c0010cea:	89 1d 44 f1 02 c0    	mov    DWORD PTR ds:0xc002f144,ebx
c0010cf0:	51                   	push   ecx
c0010cf1:	51                   	push   ecx
c0010cf2:	53                   	push   ebx
c0010cf3:	68 d6 ae 02 c0       	push   0xc002aed6
c0010cf8:	e8 88 21 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0010cfd:	83 c4 0c             	add    esp,0xc
c0010d00:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010d03:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010d06:	53                   	push   ebx
c0010d07:	e8 7e fb ff ff       	call   c001088a <VgaText::setCursor(int, int)>
c0010d0c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d0f:	e8 68 ff ff ff       	call   c0010c7c <VgaText::isBlinkDisabled()>
c0010d14:	5a                   	pop    edx
c0010d15:	0f b6 c0             	movzx  eax,al
c0010d18:	59                   	pop    ecx
c0010d19:	50                   	push   eax
c0010d1a:	53                   	push   ebx
c0010d1b:	e8 5e f9 ff ff       	call   c001067e <VgaText::disableBlink(bool)>
c0010d20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d23:	e8 78 ff ff ff       	call   c0010ca0 <VgaText::getCursorHeight()>
c0010d28:	5a                   	pop    edx
c0010d29:	59                   	pop    ecx
c0010d2a:	50                   	push   eax
c0010d2b:	53                   	push   ebx
c0010d2c:	e8 57 ff ff ff       	call   c0010c88 <VgaText::setCursorHeight(int)>
c0010d31:	83 c4 10             	add    esp,0x10
c0010d34:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010d38:	75 07                	jne    c0010d41 <setActiveTerminal(VgaText*)+0x99>
c0010d3a:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c0010d41:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010d45:	83 c4 08             	add    esp,0x8
c0010d48:	5b                   	pop    ebx
c0010d49:	e9 c0 f8 ff ff       	jmp    c001060e <VgaText::load()>

c0010d4e <doTerminalCycle()>:
c0010d4e:	83 ec 18             	sub    esp,0x18
c0010d51:	a1 40 f1 02 c0       	mov    eax,ds:0xc002f140
c0010d56:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010d59:	50                   	push   eax
c0010d5a:	a3 40 f1 02 c0       	mov    ds:0xc002f140,eax
c0010d5f:	e8 44 ff ff ff       	call   c0010ca8 <setActiveTerminal(VgaText*)>
c0010d64:	83 c4 1c             	add    esp,0x1c
c0010d67:	c3                   	ret    

c0010d68 <VgaText::doUpdate()>:
c0010d68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d6c:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010d6f:	85 c0                	test   eax,eax
c0010d71:	74 02                	je     c0010d75 <VgaText::doUpdate()+0xd>
c0010d73:	ff e0                	jmp    eax
c0010d75:	c3                   	ret    

c0010d76 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010d76:	55                   	push   ebp
c0010d77:	31 ed                	xor    ebp,ebp
c0010d79:	57                   	push   edi
c0010d7a:	56                   	push   esi
c0010d7b:	53                   	push   ebx
c0010d7c:	83 ec 1c             	sub    esp,0x1c
c0010d7f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010d83:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010d88:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010d8f:	50                   	push   eax
c0010d90:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010d95:	50                   	push   eax
c0010d96:	e8 cb f9 ff ff       	call   c0010766 <VgaText::combineColours(unsigned char, unsigned char)>
c0010d9b:	59                   	pop    ecx
c0010d9c:	0f b6 c0             	movzx  eax,al
c0010d9f:	5e                   	pop    esi
c0010da0:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010da5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010da9:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010dac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010db0:	0f b7 f6             	movzx  esi,si
c0010db3:	01 f6                	add    esi,esi
c0010db5:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010db8:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010dbb:	84 c0                	test   al,al
c0010dbd:	0f 84 fd 00 00 00    	je     c0010ec0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010dc3:	3c 0d                	cmp    al,0xd
c0010dc5:	75 0c                	jne    c0010dd3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010dc7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010dce:	e9 e7 00 00 00       	jmp    c0010eba <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010dd3:	3c 0a                	cmp    al,0xa
c0010dd5:	75 47                	jne    c0010e1e <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010dd7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010dda:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010de1:	8d 48 01             	lea    ecx,[eax+0x1]
c0010de4:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010de7:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010dea:	75 0f                	jne    c0010dfb <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010dec:	83 ec 0c             	sub    esp,0xc
c0010def:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010df2:	53                   	push   ebx
c0010df3:	e8 80 f9 ff ff       	call   c0010778 <VgaText::scrollScreen()>
c0010df8:	83 c4 10             	add    esp,0x10
c0010dfb:	83 ec 0c             	sub    esp,0xc
c0010dfe:	31 ed                	xor    ebp,ebp
c0010e00:	53                   	push   ebx
c0010e01:	e8 56 f8 ff ff       	call   c001065c <VgaText::updateCursor()>
c0010e06:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010e0b:	83 c4 10             	add    esp,0x10
c0010e0e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010e11:	0f b7 f6             	movzx  esi,si
c0010e14:	01 f6                	add    esi,esi
c0010e16:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e19:	e9 9c 00 00 00       	jmp    c0010eba <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010e1e:	3c 08                	cmp    al,0x8
c0010e20:	75 35                	jne    c0010e57 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010e22:	56                   	push   esi
c0010e23:	56                   	push   esi
c0010e24:	6a 01                	push   0x1
c0010e26:	53                   	push   ebx
c0010e27:	e8 4e fd ff ff       	call   c0010b7a <VgaText::decrementCursor(bool)>
c0010e2c:	58                   	pop    eax
c0010e2d:	5a                   	pop    edx
c0010e2e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010e31:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010e34:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010e37:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010e3a:	6a 20                	push   0x20
c0010e3c:	53                   	push   ebx
c0010e3d:	e8 dc f9 ff ff       	call   c001081e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010e42:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010e47:	83 c4 20             	add    esp,0x20
c0010e4a:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010e4d:	0f b7 f6             	movzx  esi,si
c0010e50:	01 f6                	add    esi,esi
c0010e52:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e55:	eb 63                	jmp    c0010eba <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010e57:	51                   	push   ecx
c0010e58:	51                   	push   ecx
c0010e59:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010e5d:	50                   	push   eax
c0010e5e:	e8 a9 f9 ff ff       	call   c001080c <VgaText::combineCharAndColour(char, unsigned char)>
c0010e63:	83 c4 10             	add    esp,0x10
c0010e66:	66 89 06             	mov    WORD PTR [esi],ax
c0010e69:	39 1d 44 f1 02 c0    	cmp    DWORD PTR ds:0xc002f144,ebx
c0010e6f:	75 21                	jne    c0010e92 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010e71:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010e74:	85 c0                	test   eax,eax
c0010e76:	74 1a                	je     c0010e92 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010e78:	52                   	push   edx
c0010e79:	52                   	push   edx
c0010e7a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010e7d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010e80:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010e84:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010e88:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010e8b:	51                   	push   ecx
c0010e8c:	53                   	push   ebx
c0010e8d:	ff d0                	call   eax
c0010e8f:	83 c4 20             	add    esp,0x20
c0010e92:	83 c6 02             	add    esi,0x2
c0010e95:	50                   	push   eax
c0010e96:	50                   	push   eax
c0010e97:	6a 00                	push   0x0
c0010e99:	53                   	push   ebx
c0010e9a:	e8 33 fa ff ff       	call   c00108d2 <VgaText::incrementCursor(bool)>
c0010e9f:	83 c4 10             	add    esp,0x10
c0010ea2:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010ea6:	75 0d                	jne    c0010eb5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010ea8:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010ead:	0f b7 f6             	movzx  esi,si
c0010eb0:	01 f6                	add    esi,esi
c0010eb2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010eb5:	bd 01 00 00 00       	mov    ebp,0x1
c0010eba:	47                   	inc    edi
c0010ebb:	e9 f8 fe ff ff       	jmp    c0010db8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010ec0:	83 ec 0c             	sub    esp,0xc
c0010ec3:	53                   	push   ebx
c0010ec4:	e8 93 f7 ff ff       	call   c001065c <VgaText::updateCursor()>
c0010ec9:	83 c4 10             	add    esp,0x10
c0010ecc:	89 e8                	mov    eax,ebp
c0010ece:	84 c0                	test   al,al
c0010ed0:	74 0c                	je     c0010ede <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010ed2:	83 ec 0c             	sub    esp,0xc
c0010ed5:	53                   	push   ebx
c0010ed6:	e8 8d fe ff ff       	call   c0010d68 <VgaText::doUpdate()>
c0010edb:	83 c4 10             	add    esp,0x10
c0010ede:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010ee5:	83 c4 1c             	add    esp,0x1c
c0010ee8:	5b                   	pop    ebx
c0010ee9:	5e                   	pop    esi
c0010eea:	5f                   	pop    edi
c0010eeb:	5d                   	pop    ebp
c0010eec:	c3                   	ret    
c0010eed:	90                   	nop

c0010eee <VgaText::clearScreen()>:
c0010eee:	57                   	push   edi
c0010eef:	56                   	push   esi
c0010ef0:	31 f6                	xor    esi,esi
c0010ef2:	53                   	push   ebx
c0010ef3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ef7:	52                   	push   edx
c0010ef8:	6a 00                	push   0x0
c0010efa:	6a 00                	push   0x0
c0010efc:	53                   	push   ebx
c0010efd:	e8 88 f9 ff ff       	call   c001088a <VgaText::setCursor(int, int)>
c0010f02:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010f09:	83 c4 10             	add    esp,0x10
c0010f0c:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010f0f:	7e 20                	jle    c0010f31 <VgaText::clearScreen()+0x43>
c0010f11:	31 ff                	xor    edi,edi
c0010f13:	50                   	push   eax
c0010f14:	50                   	push   eax
c0010f15:	56                   	push   esi
c0010f16:	57                   	push   edi
c0010f17:	47                   	inc    edi
c0010f18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010f1b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010f1e:	6a 20                	push   0x20
c0010f20:	53                   	push   ebx
c0010f21:	e8 f8 f8 ff ff       	call   c001081e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f26:	83 c4 20             	add    esp,0x20
c0010f29:	83 ff 50             	cmp    edi,0x50
c0010f2c:	75 e5                	jne    c0010f13 <VgaText::clearScreen()+0x25>
c0010f2e:	46                   	inc    esi
c0010f2f:	eb db                	jmp    c0010f0c <VgaText::clearScreen()+0x1e>
c0010f31:	83 ec 0c             	sub    esp,0xc
c0010f34:	53                   	push   ebx
c0010f35:	e8 2e fe ff ff       	call   c0010d68 <VgaText::doUpdate()>
c0010f3a:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010f41:	83 c4 10             	add    esp,0x10
c0010f44:	5b                   	pop    ebx
c0010f45:	5e                   	pop    esi
c0010f46:	5f                   	pop    edi
c0010f47:	c3                   	ret    

c0010f48 <VgaText::putchar(char)>:
c0010f48:	56                   	push   esi
c0010f49:	53                   	push   ebx
c0010f4a:	83 ec 14             	sub    esp,0x14
c0010f4d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010f51:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010f55:	3c 5b                	cmp    al,0x5b
c0010f57:	75 18                	jne    c0010f71 <VgaText::putchar(char)+0x29>
c0010f59:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010f5d:	74 1f                	je     c0010f7e <VgaText::putchar(char)+0x36>
c0010f5f:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010f65:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010f6c:	e9 bd 00 00 00       	jmp    c001102e <VgaText::putchar(char)+0xe6>
c0010f71:	3c 1b                	cmp    al,0x1b
c0010f73:	75 09                	jne    c0010f7e <VgaText::putchar(char)+0x36>
c0010f75:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010f79:	e9 b0 00 00 00       	jmp    c001102e <VgaText::putchar(char)+0xe6>
c0010f7e:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010f81:	84 c9                	test   cl,cl
c0010f83:	0f 84 92 00 00 00    	je     c001101b <VgaText::putchar(char)+0xd3>
c0010f89:	8d 50 c0             	lea    edx,[eax-0x40]
c0010f8c:	80 fa 3e             	cmp    dl,0x3e
c0010f8f:	77 76                	ja     c0011007 <VgaText::putchar(char)+0xbf>
c0010f91:	3c 6d                	cmp    al,0x6d
c0010f93:	75 47                	jne    c0010fdc <VgaText::putchar(char)+0x94>
c0010f95:	31 f6                	xor    esi,esi
c0010f97:	31 d2                	xor    edx,edx
c0010f99:	31 c0                	xor    eax,eax
c0010f9b:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010f9e:	7e 2d                	jle    c0010fcd <VgaText::putchar(char)+0x85>
c0010fa0:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010fa5:	80 fa 3b             	cmp    dl,0x3b
c0010fa8:	75 17                	jne    c0010fc1 <VgaText::putchar(char)+0x79>
c0010faa:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010fae:	50                   	push   eax
c0010faf:	53                   	push   ebx
c0010fb0:	e8 fd f6 ff ff       	call   c00106b2 <VgaText::doANSI_SGR(int)>
c0010fb5:	59                   	pop    ecx
c0010fb6:	31 d2                	xor    edx,edx
c0010fb8:	58                   	pop    eax
c0010fb9:	31 c0                	xor    eax,eax
c0010fbb:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010fbf:	eb 09                	jmp    c0010fca <VgaText::putchar(char)+0x82>
c0010fc1:	6b c0 0a             	imul   eax,eax,0xa
c0010fc4:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010fc8:	88 ca                	mov    dl,cl
c0010fca:	46                   	inc    esi
c0010fcb:	eb ce                	jmp    c0010f9b <VgaText::putchar(char)+0x53>
c0010fcd:	84 d2                	test   dl,dl
c0010fcf:	74 2e                	je     c0010fff <VgaText::putchar(char)+0xb7>
c0010fd1:	50                   	push   eax
c0010fd2:	53                   	push   ebx
c0010fd3:	e8 da f6 ff ff       	call   c00106b2 <VgaText::doANSI_SGR(int)>
c0010fd8:	58                   	pop    eax
c0010fd9:	5a                   	pop    edx
c0010fda:	eb 23                	jmp    c0010fff <VgaText::putchar(char)+0xb7>
c0010fdc:	3c 4a                	cmp    al,0x4a
c0010fde:	75 1f                	jne    c0010fff <VgaText::putchar(char)+0xb7>
c0010fe0:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010fe4:	75 19                	jne    c0010fff <VgaText::putchar(char)+0xb7>
c0010fe6:	83 ec 0c             	sub    esp,0xc
c0010fe9:	53                   	push   ebx
c0010fea:	e8 ff fe ff ff       	call   c0010eee <VgaText::clearScreen()>
c0010fef:	83 c4 0c             	add    esp,0xc
c0010ff2:	6a 00                	push   0x0
c0010ff4:	6a 00                	push   0x0
c0010ff6:	53                   	push   ebx
c0010ff7:	e8 8e f8 ff ff       	call   c001088a <VgaText::setCursor(int, int)>
c0010ffc:	83 c4 10             	add    esp,0x10
c0010fff:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0011005:	eb 27                	jmp    c001102e <VgaText::putchar(char)+0xe6>
c0011007:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c001100a:	83 fa 0e             	cmp    edx,0xe
c001100d:	7f 1f                	jg     c001102e <VgaText::putchar(char)+0xe6>
c001100f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011012:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0011015:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0011019:	eb 13                	jmp    c001102e <VgaText::putchar(char)+0xe6>
c001101b:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001101e:	0f be c0             	movsx  eax,al
c0011021:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011024:	50                   	push   eax
c0011025:	53                   	push   ebx
c0011026:	e8 71 fb ff ff       	call   c0010b9c <VgaText::putchar(char, VgaColour, VgaColour)>
c001102b:	83 c4 10             	add    esp,0x10
c001102e:	83 c4 14             	add    esp,0x14
c0011031:	5b                   	pop    ebx
c0011032:	5e                   	pop    esi
c0011033:	c3                   	ret    

c0011034 <VgaText::puts(char const*)>:
c0011034:	53                   	push   ebx
c0011035:	83 ec 08             	sub    esp,0x8
c0011038:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001103c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001103f:	84 c0                	test   al,al
c0011041:	74 12                	je     c0011055 <VgaText::puts(char const*)+0x21>
c0011043:	43                   	inc    ebx
c0011044:	51                   	push   ecx
c0011045:	51                   	push   ecx
c0011046:	50                   	push   eax
c0011047:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001104b:	e8 f8 fe ff ff       	call   c0010f48 <VgaText::putchar(char)>
c0011050:	83 c4 10             	add    esp,0x10
c0011053:	eb e7                	jmp    c001103c <VgaText::puts(char const*)+0x8>
c0011055:	83 c4 08             	add    esp,0x8
c0011058:	5b                   	pop    ebx
c0011059:	c3                   	ret    

c001105a <VgaText::putx(unsigned int)>:
c001105a:	57                   	push   edi
c001105b:	b9 11 00 00 00       	mov    ecx,0x11
c0011060:	56                   	push   esi
c0011061:	be f2 ae 02 c0       	mov    esi,0xc002aef2
c0011066:	53                   	push   ebx
c0011067:	83 ec 20             	sub    esp,0x20
c001106a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001106e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011072:	fc                   	cld    
c0011073:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011075:	be 08 00 00 00       	mov    esi,0x8
c001107a:	50                   	push   eax
c001107b:	50                   	push   eax
c001107c:	89 d8                	mov    eax,ebx
c001107e:	c1 e3 04             	shl    ebx,0x4
c0011081:	c1 e8 1c             	shr    eax,0x1c
c0011084:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0011089:	50                   	push   eax
c001108a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001108e:	e8 b5 fe ff ff       	call   c0010f48 <VgaText::putchar(char)>
c0011093:	83 c4 10             	add    esp,0x10
c0011096:	4e                   	dec    esi
c0011097:	75 e1                	jne    c001107a <VgaText::putx(unsigned int)+0x20>
c0011099:	83 c4 20             	add    esp,0x20
c001109c:	5b                   	pop    ebx
c001109d:	5e                   	pop    esi
c001109e:	5f                   	pop    edi
c001109f:	c3                   	ret    

c00110a0 <VgaText::VgaText(char const*)>:
c00110a0:	57                   	push   edi
c00110a1:	56                   	push   esi
c00110a2:	53                   	push   ebx
c00110a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110a7:	83 ec 08             	sub    esp,0x8
c00110aa:	6a 00                	push   0x0
c00110ac:	50                   	push   eax
c00110ad:	e8 8a 05 00 00       	call   c001163c <UnixFile::UnixFile(int)>
c00110b2:	83 c4 10             	add    esp,0x10
c00110b5:	ba 58 af 02 c0       	mov    edx,0xc002af58
c00110ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110be:	89 10                	mov    DWORD PTR [eax],edx
c00110c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110c4:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00110cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110cf:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00110d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110da:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00110de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110e2:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00110e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110ea:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00110f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110f5:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00110fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011100:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0011107:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001110b:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0011112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011116:	8d 50 60             	lea    edx,[eax+0x60]
c0011119:	bb 20 f1 02 c0       	mov    ebx,0xc002f120
c001111e:	b8 08 00 00 00       	mov    eax,0x8
c0011123:	fc                   	cld    
c0011124:	89 d7                	mov    edi,edx
c0011126:	89 de                	mov    esi,ebx
c0011128:	89 c1                	mov    ecx,eax
c001112a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001112c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011130:	05 82 00 00 00       	add    eax,0x82
c0011135:	83 ec 08             	sub    esp,0x8
c0011138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001113c:	50                   	push   eax
c001113d:	e8 e6 f6 fe ff       	call   c0000828 <strcpy>
c0011142:	83 c4 10             	add    esp,0x10
c0011145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011149:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0011150:	83 ec 0c             	sub    esp,0xc
c0011153:	6a 01                	push   0x1
c0011155:	e8 25 09 00 00       	call   c0011a7f <Virt::allocateKernelVirtualPages(int)>
c001115a:	83 c4 10             	add    esp,0x10
c001115d:	89 c2                	mov    edx,eax
c001115f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011163:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011166:	8b 1d f0 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f1f0
c001116c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011170:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011173:	89 c6                	mov    esi,eax
c0011175:	e8 cc ed ff ff       	call   c000ff46 <Phys::allocatePage()>
c001117a:	6a 05                	push   0x5
c001117c:	56                   	push   esi
c001117d:	50                   	push   eax
c001117e:	53                   	push   ebx
c001117f:	e8 32 11 00 00       	call   c00122b6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011184:	83 c4 10             	add    esp,0x10
c0011187:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001118b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001118e:	83 ec 04             	sub    esp,0x4
c0011191:	68 00 0f 00 00       	push   0xf00
c0011196:	6a 00                	push   0x0
c0011198:	50                   	push   eax
c0011199:	e8 ce f5 fe ff       	call   c000076c <memset>
c001119e:	83 c4 10             	add    esp,0x10
c00111a1:	83 ec 04             	sub    esp,0x4
c00111a4:	6a 00                	push   0x0
c00111a6:	6a 07                	push   0x7
c00111a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111ac:	e8 95 f5 ff ff       	call   c0010746 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00111b1:	83 c4 10             	add    esp,0x10
c00111b4:	83 ec 08             	sub    esp,0x8
c00111b7:	6a 02                	push   0x2
c00111b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111bd:	e8 c6 fa ff ff       	call   c0010c88 <VgaText::setCursorHeight(int)>
c00111c2:	83 c4 10             	add    esp,0x10
c00111c5:	83 ec 04             	sub    esp,0x4
c00111c8:	6a 00                	push   0x0
c00111ca:	6a 00                	push   0x0
c00111cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111d0:	e8 b5 f6 ff ff       	call   c001088a <VgaText::setCursor(int, int)>
c00111d5:	83 c4 10             	add    esp,0x10
c00111d8:	83 ec 08             	sub    esp,0x8
c00111db:	6a 01                	push   0x1
c00111dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111e1:	e8 8c f4 ff ff       	call   c0010672 <VgaText::showCursor(bool)>
c00111e6:	83 c4 10             	add    esp,0x10
c00111e9:	83 ec 08             	sub    esp,0x8
c00111ec:	6a 01                	push   0x1
c00111ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111f2:	e8 87 f4 ff ff       	call   c001067e <VgaText::disableBlink(bool)>
c00111f7:	83 c4 10             	add    esp,0x10
c00111fa:	83 ec 0c             	sub    esp,0xc
c00111fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011201:	e8 e8 fc ff ff       	call   c0010eee <VgaText::clearScreen()>
c0011206:	83 c4 10             	add    esp,0x10
c0011209:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001120d:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0011211:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011215:	05 02 01 00 00       	add    eax,0x102
c001121a:	83 ec 04             	sub    esp,0x4
c001121d:	68 96 00 00 00       	push   0x96
c0011222:	6a 00                	push   0x0
c0011224:	50                   	push   eax
c0011225:	e8 42 f5 fe ff       	call   c000076c <memset>
c001122a:	83 c4 10             	add    esp,0x10
c001122d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011231:	05 98 01 00 00       	add    eax,0x198
c0011236:	83 ec 04             	sub    esp,0x4
c0011239:	68 2c 01 00 00       	push   0x12c
c001123e:	6a 00                	push   0x0
c0011240:	50                   	push   eax
c0011241:	e8 26 f5 fe ff       	call   c000076c <memset>
c0011246:	83 c4 10             	add    esp,0x10
c0011249:	90                   	nop
c001124a:	5b                   	pop    ebx
c001124b:	5e                   	pop    esi
c001124c:	5f                   	pop    edi
c001124d:	c3                   	ret    

c001124e <VgaText::receiveKey(unsigned char)>:
c001124e:	55                   	push   ebp
c001124f:	57                   	push   edi
c0011250:	56                   	push   esi
c0011251:	53                   	push   ebx
c0011252:	83 ec 1c             	sub    esp,0x1c
c0011255:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011259:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001125d:	84 db                	test   bl,bl
c001125f:	0f 84 c9 00 00 00    	je     c001132e <VgaText::receiveKey(unsigned char)+0xe0>
c0011265:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c001126b:	80 fb 08             	cmp    bl,0x8
c001126e:	75 2c                	jne    c001129c <VgaText::receiveKey(unsigned char)+0x4e>
c0011270:	83 ec 0c             	sub    esp,0xc
c0011273:	57                   	push   edi
c0011274:	e8 0f f5 fe ff       	call   c0000788 <strlen>
c0011279:	83 c4 10             	add    esp,0x10
c001127c:	85 c0                	test   eax,eax
c001127e:	74 41                	je     c00112c1 <VgaText::receiveKey(unsigned char)+0x73>
c0011280:	50                   	push   eax
c0011281:	50                   	push   eax
c0011282:	6a 08                	push   0x8
c0011284:	56                   	push   esi
c0011285:	e8 be fc ff ff       	call   c0010f48 <VgaText::putchar(char)>
c001128a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001128d:	e8 f6 f4 fe ff       	call   c0000788 <strlen>
c0011292:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c001129a:	eb 22                	jmp    c00112be <VgaText::receiveKey(unsigned char)+0x70>
c001129c:	0f be c3             	movsx  eax,bl
c001129f:	52                   	push   edx
c00112a0:	52                   	push   edx
c00112a1:	50                   	push   eax
c00112a2:	56                   	push   esi
c00112a3:	e8 a0 fc ff ff       	call   c0010f48 <VgaText::putchar(char)>
c00112a8:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00112ac:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00112b1:	59                   	pop    ecx
c00112b2:	5d                   	pop    ebp
c00112b3:	8d 44 24 16          	lea    eax,[esp+0x16]
c00112b7:	50                   	push   eax
c00112b8:	57                   	push   edi
c00112b9:	e8 aa f6 fe ff       	call   c0000968 <strcat>
c00112be:	83 c4 10             	add    esp,0x10
c00112c1:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c00112c8:	75 05                	jne    c00112cf <VgaText::receiveKey(unsigned char)+0x81>
c00112ca:	80 fb 0a             	cmp    bl,0xa
c00112cd:	75 53                	jne    c0011322 <VgaText::receiveKey(unsigned char)+0xd4>
c00112cf:	83 ec 0c             	sub    esp,0xc
c00112d2:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c00112d8:	53                   	push   ebx
c00112d9:	e8 aa f4 fe ff       	call   c0000788 <strlen>
c00112de:	89 3c 24             	mov    DWORD PTR [esp],edi
c00112e1:	89 c5                	mov    ebp,eax
c00112e3:	e8 a0 f4 fe ff       	call   c0000788 <strlen>
c00112e8:	83 c4 10             	add    esp,0x10
c00112eb:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00112ef:	3d 2c 01 00 00       	cmp    eax,0x12c
c00112f4:	76 10                	jbe    c0011306 <VgaText::receiveKey(unsigned char)+0xb8>
c00112f6:	83 ec 0c             	sub    esp,0xc
c00112f9:	68 03 af 02 c0       	push   0xc002af03
c00112fe:	e8 6a 95 00 00       	call   c001a86d <Krnl::panic(char const*)>
c0011303:	83 c4 10             	add    esp,0x10
c0011306:	50                   	push   eax
c0011307:	50                   	push   eax
c0011308:	57                   	push   edi
c0011309:	53                   	push   ebx
c001130a:	e8 59 f6 fe ff       	call   c0000968 <strcat>
c001130f:	83 c4 0c             	add    esp,0xc
c0011312:	68 96 00 00 00       	push   0x96
c0011317:	6a 00                	push   0x0
c0011319:	57                   	push   edi
c001131a:	e8 4d f4 fe ff       	call   c000076c <memset>
c001131f:	83 c4 10             	add    esp,0x10
c0011322:	83 ec 0c             	sub    esp,0xc
c0011325:	56                   	push   esi
c0011326:	e8 3d fa ff ff       	call   c0010d68 <VgaText::doUpdate()>
c001132b:	83 c4 10             	add    esp,0x10
c001132e:	83 c4 1c             	add    esp,0x1c
c0011331:	5b                   	pop    ebx
c0011332:	5e                   	pop    esi
c0011333:	5f                   	pop    edi
c0011334:	5d                   	pop    ebp
c0011335:	c3                   	ret    

c0011336 <VgaText::write(unsigned long long, void*, int*)>:
c0011336:	55                   	push   ebp
c0011337:	57                   	push   edi
c0011338:	56                   	push   esi
c0011339:	53                   	push   ebx
c001133a:	83 ec 0c             	sub    esp,0xc
c001133d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011341:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011345:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011349:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0011350:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011353:	39 eb                	cmp    ebx,ebp
c0011355:	74 13                	je     c001136a <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011357:	43                   	inc    ebx
c0011358:	50                   	push   eax
c0011359:	50                   	push   eax
c001135a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001135e:	50                   	push   eax
c001135f:	56                   	push   esi
c0011360:	e8 e3 fb ff ff       	call   c0010f48 <VgaText::putchar(char)>
c0011365:	83 c4 10             	add    esp,0x10
c0011368:	eb e9                	jmp    c0011353 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001136a:	83 ec 0c             	sub    esp,0xc
c001136d:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0011374:	56                   	push   esi
c0011375:	e8 ee f9 ff ff       	call   c0010d68 <VgaText::doUpdate()>
c001137a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001137e:	89 38                	mov    DWORD PTR [eax],edi
c0011380:	83 c4 1c             	add    esp,0x1c
c0011383:	31 c0                	xor    eax,eax
c0011385:	5b                   	pop    ebx
c0011386:	5e                   	pop    esi
c0011387:	5f                   	pop    edi
c0011388:	5d                   	pop    ebp
c0011389:	c3                   	ret    

c001138a <newTerminal(char*)>:
c001138a:	83 ec 28             	sub    esp,0x28
c001138d:	68 c4 02 00 00       	push   0x2c4
c0011392:	e8 43 e5 ff ff       	call   c000f8da <malloc>
c0011397:	5a                   	pop    edx
c0011398:	59                   	pop    ecx
c0011399:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001139d:	50                   	push   eax
c001139e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00113a2:	e8 f9 fc ff ff       	call   c00110a0 <VgaText::VgaText(char const*)>
c00113a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113ab:	83 c4 2c             	add    esp,0x2c
c00113ae:	c3                   	ret    
c00113af:	90                   	nop

c00113b0 <TSS::TSS()>:
c00113b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00113bb:	90                   	nop
c00113bc:	c3                   	ret    
c00113bd:	90                   	nop

c00113be <TSS::setESP(unsigned long)>:
c00113be:	55                   	push   ebp
c00113bf:	89 e5                	mov    ebp,esp
c00113c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113c7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00113ca:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00113cd:	90                   	nop
c00113ce:	5d                   	pop    ebp
c00113cf:	c3                   	ret    

c00113d0 <TSS::flush()>:
c00113d0:	55                   	push   ebp
c00113d1:	89 e5                	mov    ebp,esp
c00113d3:	83 ec 10             	sub    esp,0x10
c00113d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00113db:	83 c8 03             	or     eax,0x3
c00113de:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00113e2:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00113e6:	66 89 d0             	mov    ax,dx
c00113e9:	0f 00 d8             	ltr    ax
c00113ec:	90                   	nop
c00113ed:	c9                   	leave  
c00113ee:	c3                   	ret    
c00113ef:	90                   	nop

c00113f0 <TSS::setup(unsigned long, unsigned long)>:
c00113f0:	55                   	push   ebp
c00113f1:	89 e5                	mov    ebp,esp
c00113f3:	83 ec 18             	sub    esp,0x18
c00113f6:	83 ec 0c             	sub    esp,0xc
c00113f9:	6a 68                	push   0x68
c00113fb:	e8 da e4 ff ff       	call   c000f8da <malloc>
c0011400:	83 c4 10             	add    esp,0x10
c0011403:	89 c2                	mov    edx,eax
c0011405:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011408:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001140b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001140e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011411:	83 ec 04             	sub    esp,0x4
c0011414:	6a 68                	push   0x68
c0011416:	6a 00                	push   0x0
c0011418:	50                   	push   eax
c0011419:	e8 4e f3 fe ff       	call   c000076c <memset>
c001141e:	83 c4 10             	add    esp,0x10
c0011421:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011424:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011427:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c001142d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011430:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011433:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011439:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001143c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001143f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011442:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011445:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011448:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001144b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011451:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011454:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011457:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001145d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011460:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011463:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011469:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001146c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001146f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011475:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011478:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001147b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011481:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011484:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011487:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c001148d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011490:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011493:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011496:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011499:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001149c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001149f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114a2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00114a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114ab:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00114b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114b8:	0f 20 da             	mov    edx,cr3
c00114bb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00114be:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00114c1:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00114c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114ca:	83 ec 08             	sub    esp,0x8
c00114cd:	50                   	push   eax
c00114ce:	8d 45 ec             	lea    eax,[ebp-0x14]
c00114d1:	50                   	push   eax
c00114d2:	e8 df db ff ff       	call   c000f0b6 <GDTEntry::setBase(unsigned int)>
c00114d7:	83 c4 10             	add    esp,0x10
c00114da:	83 ec 08             	sub    esp,0x8
c00114dd:	6a 68                	push   0x68
c00114df:	8d 45 ec             	lea    eax,[ebp-0x14]
c00114e2:	50                   	push   eax
c00114e3:	e8 ea db ff ff       	call   c000f0d2 <GDTEntry::setLimit(unsigned int)>
c00114e8:	83 c4 10             	add    esp,0x10
c00114eb:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00114ef:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00114f2:	83 e0 0f             	and    eax,0xf
c00114f5:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00114f8:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00114fb:	83 c8 40             	or     eax,0x40
c00114fe:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011501:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c0011506:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001150c:	05 78 01 00 00       	add    eax,0x178
c0011511:	83 ec 04             	sub    esp,0x4
c0011514:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011517:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001151a:	50                   	push   eax
c001151b:	e8 e6 db ff ff       	call   c000f106 <GDT::addEntry(GDTEntry)>
c0011520:	83 c4 10             	add    esp,0x10
c0011523:	89 c2                	mov    edx,eax
c0011525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011528:	89 10                	mov    DWORD PTR [eax],edx
c001152a:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c001152f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011535:	05 78 01 00 00       	add    eax,0x178
c001153a:	83 ec 0c             	sub    esp,0xc
c001153d:	50                   	push   eax
c001153e:	e8 07 dc ff ff       	call   c000f14a <GDT::flush()>
c0011543:	83 c4 10             	add    esp,0x10
c0011546:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011549:	8b 00                	mov    eax,DWORD PTR [eax]
c001154b:	83 ec 08             	sub    esp,0x8
c001154e:	50                   	push   eax
c001154f:	68 6c af 02 c0       	push   0xc002af6c
c0011554:	e8 2c 19 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0011559:	83 c4 10             	add    esp,0x10
c001155c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001155f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011561:	c9                   	leave  
c0011562:	c3                   	ret    
c0011563:	90                   	nop

c0011564 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011564:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011568:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001156c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001156f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011574:	75 08                	jne    c001157e <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011576:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001157c:	eb 38                	jmp    c00115b6 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001157e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011583:	75 17                	jne    c001159c <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011585:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001158a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001158d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011593:	8b 10                	mov    edx,DWORD PTR [eax]
c0011595:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011599:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c001159c:	89 c1                	mov    ecx,eax
c001159e:	83 e1 fd             	and    ecx,0xfffffffd
c00115a1:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00115a7:	74 cd                	je     c0011576 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00115a9:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00115ae:	83 e0 ef             	and    eax,0xffffffef
c00115b1:	83 f8 08             	cmp    eax,0x8
c00115b4:	76 c0                	jbe    c0011576 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00115b6:	31 c0                	xor    eax,eax
c00115b8:	c3                   	ret    
c00115b9:	90                   	nop

c00115ba <ReservedFilename::isAtty()>:
c00115ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115be:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00115c1:	31 c0                	xor    eax,eax
c00115c3:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00115c9:	74 09                	je     c00115d4 <ReservedFilename::isAtty()+0x1a>
c00115cb:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00115d1:	0f 94 c0             	sete   al
c00115d4:	c3                   	ret    
c00115d5:	90                   	nop

c00115d6 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00115d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115da:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00115de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00115e5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00115ea:	75 08                	jne    c00115f4 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00115ec:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00115f2:	eb 3d                	jmp    c0011631 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00115f4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00115f9:	75 17                	jne    c0011612 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00115fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011600:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011603:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011609:	8b 10                	mov    edx,DWORD PTR [eax]
c001160b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001160f:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011612:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011617:	75 04                	jne    c001161d <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011619:	89 0a                	mov    DWORD PTR [edx],ecx
c001161b:	eb 14                	jmp    c0011631 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001161d:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011622:	74 c8                	je     c00115ec <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011624:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011629:	83 e0 ef             	and    eax,0xffffffef
c001162c:	83 f8 08             	cmp    eax,0x8
c001162f:	76 bb                	jbe    c00115ec <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011631:	31 c0                	xor    eax,eax
c0011633:	c3                   	ret    

c0011634 <UnixFile::getFileDescriptor()>:
c0011634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011638:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001163b:	c3                   	ret    

c001163c <UnixFile::UnixFile(int)>:
c001163c:	53                   	push   ebx
c001163d:	83 ec 28             	sub    esp,0x28
c0011640:	ba 58 b0 02 c0       	mov    edx,0xc002b058
c0011645:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011649:	89 10                	mov    DWORD PTR [eax],edx
c001164b:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011653:	0f 8f 8c 01 00 00    	jg     c00117e5 <UnixFile::UnixFile(int)+0x1a9>
c0011659:	a1 00 e0 02 c0       	mov    eax,ds:0xc002e000
c001165e:	8d 50 01             	lea    edx,[eax+0x1]
c0011661:	89 15 00 e0 02 c0    	mov    DWORD PTR ds:0xc002e000,edx
c0011667:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001166b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001166e:	83 ec 08             	sub    esp,0x8
c0011671:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011675:	68 d8 f1 02 c0       	push   0xc002f1d8
c001167a:	e8 7d 7a 01 00       	call   c00290fc <LinkedList<UnixFile>::addElement(UnixFile*)>
c001167f:	83 c4 10             	add    esp,0x10
c0011682:	a0 d4 f1 02 c0       	mov    al,ds:0xc002f1d4
c0011687:	83 f0 01             	xor    eax,0x1
c001168a:	84 c0                	test   al,al
c001168c:	0f 84 54 01 00 00    	je     c00117e6 <UnixFile::UnixFile(int)+0x1aa>
c0011692:	c6 05 d4 f1 02 c0 01 	mov    BYTE PTR ds:0xc002f1d4,0x1
c0011699:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00116a1:	83 ec 0c             	sub    esp,0xc
c00116a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00116a8:	e8 2d e2 ff ff       	call   c000f8da <malloc>
c00116ad:	83 c4 10             	add    esp,0x10
c00116b0:	89 c3                	mov    ebx,eax
c00116b2:	83 ec 08             	sub    esp,0x8
c00116b5:	68 03 ff ff 0f       	push   0xfffff03
c00116ba:	53                   	push   ebx
c00116bb:	e8 2c 01 00 00       	call   c00117ec <ReservedFilename::ReservedFilename(int)>
c00116c0:	83 c4 10             	add    esp,0x10
c00116c3:	89 1d cc f1 02 c0    	mov    DWORD PTR ds:0xc002f1cc,ebx
c00116c9:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00116d1:	83 ec 0c             	sub    esp,0xc
c00116d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116d8:	e8 fd e1 ff ff       	call   c000f8da <malloc>
c00116dd:	83 c4 10             	add    esp,0x10
c00116e0:	89 c3                	mov    ebx,eax
c00116e2:	83 ec 08             	sub    esp,0x8
c00116e5:	68 01 ff ff 0f       	push   0xfffff01
c00116ea:	53                   	push   ebx
c00116eb:	e8 fc 00 00 00       	call   c00117ec <ReservedFilename::ReservedFilename(int)>
c00116f0:	83 c4 10             	add    esp,0x10
c00116f3:	89 1d d0 f1 02 c0    	mov    DWORD PTR ds:0xc002f1d0,ebx
c00116f9:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011701:	83 ec 0c             	sub    esp,0xc
c0011704:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011708:	e8 cd e1 ff ff       	call   c000f8da <malloc>
c001170d:	83 c4 10             	add    esp,0x10
c0011710:	89 c3                	mov    ebx,eax
c0011712:	83 ec 08             	sub    esp,0x8
c0011715:	68 00 ff ff 0f       	push   0xfffff00
c001171a:	53                   	push   ebx
c001171b:	e8 cc 00 00 00       	call   c00117ec <ReservedFilename::ReservedFilename(int)>
c0011720:	83 c4 10             	add    esp,0x10
c0011723:	89 1d c4 f1 02 c0    	mov    DWORD PTR ds:0xc002f1c4,ebx
c0011729:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011731:	83 ec 0c             	sub    esp,0xc
c0011734:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011738:	e8 9d e1 ff ff       	call   c000f8da <malloc>
c001173d:	83 c4 10             	add    esp,0x10
c0011740:	89 c3                	mov    ebx,eax
c0011742:	83 ec 08             	sub    esp,0x8
c0011745:	68 02 ff ff 0f       	push   0xfffff02
c001174a:	53                   	push   ebx
c001174b:	e8 9c 00 00 00       	call   c00117ec <ReservedFilename::ReservedFilename(int)>
c0011750:	83 c4 10             	add    esp,0x10
c0011753:	89 1d c8 f1 02 c0    	mov    DWORD PTR ds:0xc002f1c8,ebx
c0011759:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011761:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011766:	7f 7e                	jg     c00117e6 <UnixFile::UnixFile(int)+0x1aa>
c0011768:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011770:	83 ec 0c             	sub    esp,0xc
c0011773:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011777:	e8 5e e1 ff ff       	call   c000f8da <malloc>
c001177c:	83 c4 10             	add    esp,0x10
c001177f:	89 c3                	mov    ebx,eax
c0011781:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011785:	05 10 ff ff 0f       	add    eax,0xfffff10
c001178a:	83 ec 08             	sub    esp,0x8
c001178d:	50                   	push   eax
c001178e:	53                   	push   ebx
c001178f:	e8 58 00 00 00       	call   c00117ec <ReservedFilename::ReservedFilename(int)>
c0011794:	83 c4 10             	add    esp,0x10
c0011797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001179b:	89 1c 85 a0 f1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0e60],ebx
c00117a2:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00117aa:	83 ec 0c             	sub    esp,0xc
c00117ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117b1:	e8 24 e1 ff ff       	call   c000f8da <malloc>
c00117b6:	83 c4 10             	add    esp,0x10
c00117b9:	89 c3                	mov    ebx,eax
c00117bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00117bf:	05 20 ff ff 0f       	add    eax,0xfffff20
c00117c4:	83 ec 08             	sub    esp,0x8
c00117c7:	50                   	push   eax
c00117c8:	53                   	push   ebx
c00117c9:	e8 1e 00 00 00       	call   c00117ec <ReservedFilename::ReservedFilename(int)>
c00117ce:	83 c4 10             	add    esp,0x10
c00117d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00117d5:	89 1c 85 60 f1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0ea0],ebx
c00117dc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00117e0:	e9 7c ff ff ff       	jmp    c0011761 <UnixFile::UnixFile(int)+0x125>
c00117e5:	90                   	nop
c00117e6:	83 c4 28             	add    esp,0x28
c00117e9:	5b                   	pop    ebx
c00117ea:	c3                   	ret    
c00117eb:	90                   	nop

c00117ec <ReservedFilename::ReservedFilename(int)>:
c00117ec:	83 ec 0c             	sub    esp,0xc
c00117ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117f3:	83 ec 08             	sub    esp,0x8
c00117f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117fa:	50                   	push   eax
c00117fb:	e8 3c fe ff ff       	call   c001163c <UnixFile::UnixFile(int)>
c0011800:	83 c4 10             	add    esp,0x10
c0011803:	ba 74 b0 02 c0       	mov    edx,0xc002b074
c0011808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001180c:	89 10                	mov    DWORD PTR [eax],edx
c001180e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011812:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011816:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011819:	90                   	nop
c001181a:	83 c4 0c             	add    esp,0xc
c001181d:	c3                   	ret    

c001181e <UnixFile::~UnixFile()>:
c001181e:	83 ec 1c             	sub    esp,0x1c
c0011821:	ba 58 b0 02 c0       	mov    edx,0xc002b058
c0011826:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001182a:	89 10                	mov    DWORD PTR [eax],edx
c001182c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011830:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011833:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011838:	7f 73                	jg     c00118ad <UnixFile::~UnixFile()+0x8f>
c001183a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011842:	83 ec 0c             	sub    esp,0xc
c0011845:	68 d8 f1 02 c0       	push   0xc002f1d8
c001184a:	e8 81 79 01 00       	call   c00291d0 <LinkedList<UnixFile>::getFirstElement()>
c001184f:	83 c4 10             	add    esp,0x10
c0011852:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011856:	83 ec 0c             	sub    esp,0xc
c0011859:	68 d8 f1 02 c0       	push   0xc002f1d8
c001185e:	e8 75 79 01 00       	call   c00291d8 <LinkedList<UnixFile>::removeFirst()>
c0011863:	83 c4 10             	add    esp,0x10
c0011866:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001186a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001186e:	74 40                	je     c00118b0 <UnixFile::~UnixFile()+0x92>
c0011870:	83 ec 08             	sub    esp,0x8
c0011873:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011877:	68 d8 f1 02 c0       	push   0xc002f1d8
c001187c:	e8 7b 78 01 00       	call   c00290fc <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011881:	83 c4 10             	add    esp,0x10
c0011884:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011888:	8d 50 01             	lea    edx,[eax+0x1]
c001188b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001188f:	3d 88 13 00 00       	cmp    eax,0x1388
c0011894:	0f 94 c0             	sete   al
c0011897:	84 c0                	test   al,al
c0011899:	74 a7                	je     c0011842 <UnixFile::~UnixFile()+0x24>
c001189b:	83 ec 0c             	sub    esp,0xc
c001189e:	68 30 b0 02 c0       	push   0xc002b030
c00118a3:	e8 c5 8f 00 00       	call   c001a86d <Krnl::panic(char const*)>
c00118a8:	83 c4 10             	add    esp,0x10
c00118ab:	eb 95                	jmp    c0011842 <UnixFile::~UnixFile()+0x24>
c00118ad:	90                   	nop
c00118ae:	eb 01                	jmp    c00118b1 <UnixFile::~UnixFile()+0x93>
c00118b0:	90                   	nop
c00118b1:	90                   	nop
c00118b2:	83 c4 1c             	add    esp,0x1c
c00118b5:	c3                   	ret    

c00118b6 <UnixFile::~UnixFile()>:
c00118b6:	83 ec 0c             	sub    esp,0xc
c00118b9:	83 ec 0c             	sub    esp,0xc
c00118bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118c0:	e8 59 ff ff ff       	call   c001181e <UnixFile::~UnixFile()>
c00118c5:	83 c4 10             	add    esp,0x10
c00118c8:	83 ec 08             	sub    esp,0x8
c00118cb:	6a 0c                	push   0xc
c00118cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118d1:	e8 cf 14 00 00       	call   c0012da5 <operator delete(void*, unsigned long)>
c00118d6:	83 c4 10             	add    esp,0x10
c00118d9:	83 c4 0c             	add    esp,0xc
c00118dc:	c3                   	ret    
c00118dd:	90                   	nop

c00118de <ReservedFilename::~ReservedFilename()>:
c00118de:	83 ec 0c             	sub    esp,0xc
c00118e1:	ba 74 b0 02 c0       	mov    edx,0xc002b074
c00118e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ea:	89 10                	mov    DWORD PTR [eax],edx
c00118ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118f0:	83 ec 0c             	sub    esp,0xc
c00118f3:	50                   	push   eax
c00118f4:	e8 25 ff ff ff       	call   c001181e <UnixFile::~UnixFile()>
c00118f9:	83 c4 10             	add    esp,0x10
c00118fc:	90                   	nop
c00118fd:	83 c4 0c             	add    esp,0xc
c0011900:	c3                   	ret    
c0011901:	90                   	nop

c0011902 <ReservedFilename::~ReservedFilename()>:
c0011902:	83 ec 0c             	sub    esp,0xc
c0011905:	83 ec 0c             	sub    esp,0xc
c0011908:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001190c:	e8 cd ff ff ff       	call   c00118de <ReservedFilename::~ReservedFilename()>
c0011911:	83 c4 10             	add    esp,0x10
c0011914:	83 ec 08             	sub    esp,0x8
c0011917:	6a 0c                	push   0xc
c0011919:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001191d:	e8 83 14 00 00       	call   c0012da5 <operator delete(void*, unsigned long)>
c0011922:	83 c4 10             	add    esp,0x10
c0011925:	83 c4 0c             	add    esp,0xc
c0011928:	c3                   	ret    

c0011929 <getFromFileDescriptor(int)>:
c0011929:	53                   	push   ebx
c001192a:	83 ec 08             	sub    esp,0x8
c001192d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011931:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011937:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001193d:	7f 2c                	jg     c001196b <getFromFileDescriptor(int)+0x42>
c001193f:	83 ec 0c             	sub    esp,0xc
c0011942:	68 d8 f1 02 c0       	push   0xc002f1d8
c0011947:	e8 84 78 01 00       	call   c00291d0 <LinkedList<UnixFile>::getFirstElement()>
c001194c:	83 c4 10             	add    esp,0x10
c001194f:	85 c0                	test   eax,eax
c0011951:	75 04                	jne    c0011957 <getFromFileDescriptor(int)+0x2e>
c0011953:	31 c0                	xor    eax,eax
c0011955:	eb 6e                	jmp    c00119c5 <getFromFileDescriptor(int)+0x9c>
c0011957:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c001195a:	74 69                	je     c00119c5 <getFromFileDescriptor(int)+0x9c>
c001195c:	52                   	push   edx
c001195d:	52                   	push   edx
c001195e:	50                   	push   eax
c001195f:	68 d8 f1 02 c0       	push   0xc002f1d8
c0011964:	e8 11 79 01 00       	call   c002927a <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011969:	eb e1                	jmp    c001194c <getFromFileDescriptor(int)+0x23>
c001196b:	a1 cc f1 02 c0       	mov    eax,ds:0xc002f1cc
c0011970:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011976:	74 4d                	je     c00119c5 <getFromFileDescriptor(int)+0x9c>
c0011978:	a1 d0 f1 02 c0       	mov    eax,ds:0xc002f1d0
c001197d:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011983:	74 40                	je     c00119c5 <getFromFileDescriptor(int)+0x9c>
c0011985:	a1 c8 f1 02 c0       	mov    eax,ds:0xc002f1c8
c001198a:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011990:	74 33                	je     c00119c5 <getFromFileDescriptor(int)+0x9c>
c0011992:	a1 c4 f1 02 c0       	mov    eax,ds:0xc002f1c4
c0011997:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001199d:	74 26                	je     c00119c5 <getFromFileDescriptor(int)+0x9c>
c001199f:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00119a5:	83 f8 08             	cmp    eax,0x8
c00119a8:	77 09                	ja     c00119b3 <getFromFileDescriptor(int)+0x8a>
c00119aa:	8b 04 85 a0 f1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0e60]
c00119b1:	eb 12                	jmp    c00119c5 <getFromFileDescriptor(int)+0x9c>
c00119b3:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00119b9:	83 fb 08             	cmp    ebx,0x8
c00119bc:	77 95                	ja     c0011953 <getFromFileDescriptor(int)+0x2a>
c00119be:	8b 04 9d 60 f1 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd0ea0]
c00119c5:	83 c4 08             	add    esp,0x8
c00119c8:	5b                   	pop    ebx
c00119c9:	c3                   	ret    

c00119ca <__static_initialization_and_destruction_0(int, int)>:
c00119ca:	83 ec 0c             	sub    esp,0xc
c00119cd:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00119d2:	75 34                	jne    c0011a08 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00119d4:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00119dc:	75 2a                	jne    c0011a08 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00119de:	83 ec 0c             	sub    esp,0xc
c00119e1:	68 d8 f1 02 c0       	push   0xc002f1d8
c00119e6:	e8 b9 76 01 00       	call   c00290a4 <LinkedList<UnixFile>::LinkedList()>
c00119eb:	83 c4 10             	add    esp,0x10
c00119ee:	83 ec 04             	sub    esp,0x4
c00119f1:	68 90 df 02 c0       	push   0xc002df90
c00119f6:	68 d8 f1 02 c0       	push   0xc002f1d8
c00119fb:	68 a2 90 02 c0       	push   0xc00290a2
c0011a00:	e8 1a 13 00 00       	call   c0012d1f <__cxa_atexit>
c0011a05:	83 c4 10             	add    esp,0x10
c0011a08:	90                   	nop
c0011a09:	83 c4 0c             	add    esp,0xc
c0011a0c:	c3                   	ret    

c0011a0d <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011a0d:	83 ec 0c             	sub    esp,0xc
c0011a10:	83 ec 08             	sub    esp,0x8
c0011a13:	68 ff ff 00 00       	push   0xffff
c0011a18:	6a 01                	push   0x1
c0011a1a:	e8 ab ff ff ff       	call   c00119ca <__static_initialization_and_destruction_0(int, int)>
c0011a1f:	83 c4 10             	add    esp,0x10
c0011a22:	83 c4 0c             	add    esp,0xc
c0011a25:	c3                   	ret    

c0011a26 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011a26:	53                   	push   ebx
c0011a27:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011a2b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011a2f:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011a35:	89 c8                	mov    eax,ecx
c0011a37:	d1 e8                	shr    eax,1
c0011a39:	03 05 08 e0 02 c0    	add    eax,DWORD PTR ds:0xc002e008
c0011a3f:	83 e1 01             	and    ecx,0x1
c0011a42:	8a 10                	mov    dl,BYTE PTR [eax]
c0011a44:	75 09                	jne    c0011a4f <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011a46:	83 e2 f0             	and    edx,0xfffffff0
c0011a49:	09 da                	or     edx,ebx
c0011a4b:	88 10                	mov    BYTE PTR [eax],dl
c0011a4d:	5b                   	pop    ebx
c0011a4e:	c3                   	ret    
c0011a4f:	c1 e3 04             	shl    ebx,0x4
c0011a52:	83 e2 0f             	and    edx,0xf
c0011a55:	09 da                	or     edx,ebx
c0011a57:	88 10                	mov    BYTE PTR [eax],dl
c0011a59:	5b                   	pop    ebx
c0011a5a:	c3                   	ret    

c0011a5b <Virt::getPageState(unsigned long)>:
c0011a5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a5f:	8b 0d 08 e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e008
c0011a65:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011a6b:	89 d0                	mov    eax,edx
c0011a6d:	d1 e8                	shr    eax,1
c0011a6f:	83 e2 01             	and    edx,0x1
c0011a72:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011a75:	75 04                	jne    c0011a7b <Virt::getPageState(unsigned long)+0x20>
c0011a77:	83 e0 0f             	and    eax,0xf
c0011a7a:	c3                   	ret    
c0011a7b:	c0 e8 04             	shr    al,0x4
c0011a7e:	c3                   	ret    

c0011a7f <Virt::allocateKernelVirtualPages(int)>:
c0011a7f:	55                   	push   ebp
c0011a80:	31 ed                	xor    ebp,ebp
c0011a82:	57                   	push   edi
c0011a83:	56                   	push   esi
c0011a84:	53                   	push   ebx
c0011a85:	31 db                	xor    ebx,ebx
c0011a87:	83 ec 1c             	sub    esp,0x1c
c0011a8a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011a8e:	8b 3d 04 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e004
c0011a94:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011a99:	57                   	push   edi
c0011a9a:	e8 bc ff ff ff       	call   c0011a5b <Virt::getPageState(unsigned long)>
c0011a9f:	5a                   	pop    edx
c0011aa0:	84 c0                	test   al,al
c0011aa2:	75 3a                	jne    c0011ade <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011aa4:	85 db                	test   ebx,ebx
c0011aa6:	75 02                	jne    c0011aaa <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011aa8:	89 fd                	mov    ebp,edi
c0011aaa:	43                   	inc    ebx
c0011aab:	39 f3                	cmp    ebx,esi
c0011aad:	74 5a                	je     c0011b09 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011aaf:	47                   	inc    edi
c0011ab0:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011ab6:	76 31                	jbe    c0011ae9 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011ab8:	c7 05 04 e0 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002e004,0xc8000
c0011ac2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011ac7:	75 28                	jne    c0011af1 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011ac9:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011ace:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011ad3:	57                   	push   edi
c0011ad4:	e8 82 ff ff ff       	call   c0011a5b <Virt::getPageState(unsigned long)>
c0011ad9:	5a                   	pop    edx
c0011ada:	84 c0                	test   al,al
c0011adc:	74 c6                	je     c0011aa4 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011ade:	31 db                	xor    ebx,ebx
c0011ae0:	47                   	inc    edi
c0011ae1:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011ae7:	77 cf                	ja     c0011ab8 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011ae9:	89 3d 04 e0 02 c0    	mov    DWORD PTR ds:0xc002e004,edi
c0011aef:	eb a8                	jmp    c0011a99 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011af1:	83 ec 0c             	sub    esp,0xc
c0011af4:	68 88 b0 02 c0       	push   0xc002b088
c0011af9:	e8 6f 8d 00 00       	call   c001a86d <Krnl::panic(char const*)>
c0011afe:	8b 3d 04 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e004
c0011b04:	83 c4 10             	add    esp,0x10
c0011b07:	eb 90                	jmp    c0011a99 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011b09:	89 2d 04 e0 02 c0    	mov    DWORD PTR ds:0xc002e004,ebp
c0011b0f:	4b                   	dec    ebx
c0011b10:	74 5f                	je     c0011b71 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011b12:	85 f6                	test   esi,esi
c0011b14:	74 3d                	je     c0011b53 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011b16:	89 e8                	mov    eax,ebp
c0011b18:	31 db                	xor    ebx,ebx
c0011b1a:	8d 7e ff             	lea    edi,[esi-0x1]
c0011b1d:	eb 14                	jmp    c0011b33 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011b1f:	6a 01                	push   0x1
c0011b21:	43                   	inc    ebx
c0011b22:	50                   	push   eax
c0011b23:	e8 fe fe ff ff       	call   c0011a26 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b28:	58                   	pop    eax
c0011b29:	39 f3                	cmp    ebx,esi
c0011b2b:	5a                   	pop    edx
c0011b2c:	74 25                	je     c0011b53 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011b2e:	a1 04 e0 02 c0       	mov    eax,ds:0xc002e004
c0011b33:	8d 50 01             	lea    edx,[eax+0x1]
c0011b36:	85 db                	test   ebx,ebx
c0011b38:	89 15 04 e0 02 c0    	mov    DWORD PTR ds:0xc002e004,edx
c0011b3e:	74 20                	je     c0011b60 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011b40:	39 df                	cmp    edi,ebx
c0011b42:	75 db                	jne    c0011b1f <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011b44:	6a 03                	push   0x3
c0011b46:	43                   	inc    ebx
c0011b47:	50                   	push   eax
c0011b48:	e8 d9 fe ff ff       	call   c0011a26 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b4d:	59                   	pop    ecx
c0011b4e:	39 f3                	cmp    ebx,esi
c0011b50:	58                   	pop    eax
c0011b51:	75 db                	jne    c0011b2e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011b53:	83 c4 1c             	add    esp,0x1c
c0011b56:	89 e8                	mov    eax,ebp
c0011b58:	5b                   	pop    ebx
c0011b59:	c1 e0 0c             	shl    eax,0xc
c0011b5c:	5e                   	pop    esi
c0011b5d:	5f                   	pop    edi
c0011b5e:	5d                   	pop    ebp
c0011b5f:	c3                   	ret    
c0011b60:	6a 02                	push   0x2
c0011b62:	bb 01 00 00 00       	mov    ebx,0x1
c0011b67:	50                   	push   eax
c0011b68:	e8 b9 fe ff ff       	call   c0011a26 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b6d:	58                   	pop    eax
c0011b6e:	5a                   	pop    edx
c0011b6f:	eb bd                	jmp    c0011b2e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011b71:	6a 04                	push   0x4
c0011b73:	8d 45 01             	lea    eax,[ebp+0x1]
c0011b76:	55                   	push   ebp
c0011b77:	a3 04 e0 02 c0       	mov    ds:0xc002e004,eax
c0011b7c:	e8 a5 fe ff ff       	call   c0011a26 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b81:	59                   	pop    ecx
c0011b82:	89 e8                	mov    eax,ebp
c0011b84:	5b                   	pop    ebx
c0011b85:	c1 e0 0c             	shl    eax,0xc
c0011b88:	83 c4 1c             	add    esp,0x1c
c0011b8b:	5b                   	pop    ebx
c0011b8c:	5e                   	pop    esi
c0011b8d:	5f                   	pop    edi
c0011b8e:	5d                   	pop    ebp
c0011b8f:	c3                   	ret    

c0011b90 <Virt::freeSwapfilePage(unsigned long)>:
c0011b90:	53                   	push   ebx
c0011b91:	8b 15 ec f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f1ec
c0011b97:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011b9b:	b8 01 00 00 00       	mov    eax,0x1
c0011ba0:	89 cb                	mov    ebx,ecx
c0011ba2:	d3 e0                	shl    eax,cl
c0011ba4:	c1 eb 05             	shr    ebx,0x5
c0011ba7:	f7 d0                	not    eax
c0011ba9:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011bac:	5b                   	pop    ebx
c0011bad:	c3                   	ret    

c0011bae <Virt::swapIDToSector(unsigned long)>:
c0011bae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bb2:	0f af 05 0c e0 02 c0 	imul   eax,DWORD PTR ds:0xc002e00c
c0011bb9:	03 05 14 e0 02 c0    	add    eax,DWORD PTR ds:0xc002e014
c0011bbf:	c3                   	ret    

c0011bc0 <Virt::allocateSwapfilePage()>:
c0011bc0:	55                   	push   ebp
c0011bc1:	31 d2                	xor    edx,edx
c0011bc3:	57                   	push   edi
c0011bc4:	56                   	push   esi
c0011bc5:	53                   	push   ebx
c0011bc6:	83 ec 0c             	sub    esp,0xc
c0011bc9:	8b 0d 0c e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e00c
c0011bcf:	a1 10 e0 02 c0       	mov    eax,ds:0xc002e010
c0011bd4:	f7 f1                	div    ecx
c0011bd6:	39 0d 10 e0 02 c0    	cmp    DWORD PTR ds:0xc002e010,ecx
c0011bdc:	72 2d                	jb     c0011c0b <Virt::allocateSwapfilePage()+0x4b>
c0011bde:	8b 35 ec f1 02 c0    	mov    esi,DWORD PTR ds:0xc002f1ec
c0011be4:	8b 16                	mov    edx,DWORD PTR [esi]
c0011be6:	f6 c2 01             	test   dl,0x1
c0011be9:	74 3c                	je     c0011c27 <Virt::allocateSwapfilePage()+0x67>
c0011beb:	31 c9                	xor    ecx,ecx
c0011bed:	bf 01 00 00 00       	mov    edi,0x1
c0011bf2:	eb 12                	jmp    c0011c06 <Virt::allocateSwapfilePage()+0x46>
c0011bf4:	89 fd                	mov    ebp,edi
c0011bf6:	89 ca                	mov    edx,ecx
c0011bf8:	d3 e5                	shl    ebp,cl
c0011bfa:	c1 ea 05             	shr    edx,0x5
c0011bfd:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011c00:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011c02:	85 ea                	test   edx,ebp
c0011c04:	74 2a                	je     c0011c30 <Virt::allocateSwapfilePage()+0x70>
c0011c06:	41                   	inc    ecx
c0011c07:	39 c8                	cmp    eax,ecx
c0011c09:	77 e9                	ja     c0011bf4 <Virt::allocateSwapfilePage()+0x34>
c0011c0b:	83 ec 0c             	sub    esp,0xc
c0011c0e:	68 0f b2 02 c0       	push   0xc002b20f
c0011c13:	e8 55 8c 00 00       	call   c001a86d <Krnl::panic(char const*)>
c0011c18:	83 c4 10             	add    esp,0x10
c0011c1b:	31 c9                	xor    ecx,ecx
c0011c1d:	83 c4 0c             	add    esp,0xc
c0011c20:	89 c8                	mov    eax,ecx
c0011c22:	5b                   	pop    ebx
c0011c23:	5e                   	pop    esi
c0011c24:	5f                   	pop    edi
c0011c25:	5d                   	pop    ebp
c0011c26:	c3                   	ret    
c0011c27:	89 f3                	mov    ebx,esi
c0011c29:	bd 01 00 00 00       	mov    ebp,0x1
c0011c2e:	31 c9                	xor    ecx,ecx
c0011c30:	09 ea                	or     edx,ebp
c0011c32:	89 c8                	mov    eax,ecx
c0011c34:	89 13                	mov    DWORD PTR [ebx],edx
c0011c36:	83 c4 0c             	add    esp,0xc
c0011c39:	5b                   	pop    ebx
c0011c3a:	5e                   	pop    esi
c0011c3b:	5f                   	pop    edi
c0011c3c:	5d                   	pop    ebp
c0011c3d:	c3                   	ret    

c0011c3e <Virt::virtualMemorySetup()>:
c0011c3e:	53                   	push   ebx
c0011c3f:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c44:	83 ec 08             	sub    esp,0x8
c0011c47:	6a 0f                	push   0xf
c0011c49:	53                   	push   ebx
c0011c4a:	43                   	inc    ebx
c0011c4b:	e8 d6 fd ff ff       	call   c0011a26 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c50:	59                   	pop    ecx
c0011c51:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c57:	58                   	pop    eax
c0011c58:	75 ed                	jne    c0011c47 <Virt::virtualMemorySetup()+0x9>
c0011c5a:	83 ec 08             	sub    esp,0x8
c0011c5d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c62:	68 00 00 00 c8       	push   0xc8000000
c0011c67:	68 26 b2 02 c0       	push   0xc002b226
c0011c6c:	e8 14 12 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0011c71:	58                   	pop    eax
c0011c72:	5a                   	pop    edx
c0011c73:	68 00 f0 ff ef       	push   0xeffff000
c0011c78:	68 3a b2 02 c0       	push   0xc002b23a
c0011c7d:	e8 03 12 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0011c82:	83 c4 10             	add    esp,0x10
c0011c85:	83 ec 08             	sub    esp,0x8
c0011c88:	6a 00                	push   0x0
c0011c8a:	53                   	push   ebx
c0011c8b:	43                   	inc    ebx
c0011c8c:	e8 95 fd ff ff       	call   c0011a26 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c91:	83 c4 10             	add    esp,0x10
c0011c94:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c9a:	75 e9                	jne    c0011c85 <Virt::virtualMemorySetup()+0x47>
c0011c9c:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011ca1:	83 ec 08             	sub    esp,0x8
c0011ca4:	6a 0f                	push   0xf
c0011ca6:	53                   	push   ebx
c0011ca7:	43                   	inc    ebx
c0011ca8:	e8 79 fd ff ff       	call   c0011a26 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011cad:	83 c4 10             	add    esp,0x10
c0011cb0:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011cb6:	75 e9                	jne    c0011ca1 <Virt::virtualMemorySetup()+0x63>
c0011cb8:	83 c4 08             	add    esp,0x8
c0011cbb:	5b                   	pop    ebx
c0011cbc:	c3                   	ret    

c0011cbd <Virt::swappingSetup()>:
c0011cbd:	c3                   	ret    

c0011cbe <Virt::setupPageSwapping(int)>:
c0011cbe:	57                   	push   edi
c0011cbf:	56                   	push   esi
c0011cc0:	53                   	push   ebx
c0011cc1:	83 ec 1c             	sub    esp,0x1c
c0011cc4:	68 4e b2 02 c0       	push   0xc002b24e
c0011cc9:	e8 b7 11 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0011cce:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011cd5:	e8 00 dc ff ff       	call   c000f8da <malloc>
c0011cda:	83 c4 0c             	add    esp,0xc
c0011cdd:	89 c6                	mov    esi,eax
c0011cdf:	ff 35 d0 25 03 c0    	push   DWORD PTR ds:0xc00325d0
c0011ce5:	68 62 b2 02 c0       	push   0xc002b262
c0011cea:	50                   	push   eax
c0011ceb:	e8 f4 16 00 00       	call   c00133e4 <File::File(char const*, Process*)>
c0011cf0:	89 34 24             	mov    DWORD PTR [esp],esi
c0011cf3:	e8 c8 18 00 00       	call   c00135c0 <File::unlink()>
c0011cf8:	59                   	pop    ecx
c0011cf9:	5b                   	pop    ebx
c0011cfa:	6a 12                	push   0x12
c0011cfc:	56                   	push   esi
c0011cfd:	e8 46 17 00 00       	call   c0013448 <File::open(FileOpenMode)>
c0011d02:	83 c4 10             	add    esp,0x10
c0011d05:	85 c0                	test   eax,eax
c0011d07:	0f 85 5b 01 00 00    	jne    c0011e68 <Virt::setupPageSwapping(int)+0x1aa>
c0011d0d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d11:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d19:	c1 e3 08             	shl    ebx,0x8
c0011d1c:	83 ec 0c             	sub    esp,0xc
c0011d1f:	68 00 00 01 00       	push   0x10000
c0011d24:	e8 b1 db ff ff       	call   c000f8da <malloc>
c0011d29:	83 c4 0c             	add    esp,0xc
c0011d2c:	89 c7                	mov    edi,eax
c0011d2e:	68 00 00 01 00       	push   0x10000
c0011d33:	68 ee 00 00 00       	push   0xee
c0011d38:	50                   	push   eax
c0011d39:	e8 2e ea fe ff       	call   c000076c <memset>
c0011d3e:	83 c4 10             	add    esp,0x10
c0011d41:	85 db                	test   ebx,ebx
c0011d43:	79 03                	jns    c0011d48 <Virt::setupPageSwapping(int)+0x8a>
c0011d45:	83 c3 0f             	add    ebx,0xf
c0011d48:	c1 fb 04             	sar    ebx,0x4
c0011d4b:	4b                   	dec    ebx
c0011d4c:	83 fb ff             	cmp    ebx,0xffffffff
c0011d4f:	74 4f                	je     c0011da0 <Virt::setupPageSwapping(int)+0xe2>
c0011d51:	83 ec 0c             	sub    esp,0xc
c0011d54:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d56:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011d5a:	52                   	push   edx
c0011d5b:	57                   	push   edi
c0011d5c:	6a 00                	push   0x0
c0011d5e:	68 00 00 01 00       	push   0x10000
c0011d63:	56                   	push   esi
c0011d64:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011d67:	83 c4 20             	add    esp,0x20
c0011d6a:	85 c0                	test   eax,eax
c0011d6c:	0f 85 e0 00 00 00    	jne    c0011e52 <Virt::setupPageSwapping(int)+0x194>
c0011d72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d76:	3d 00 00 01 00       	cmp    eax,0x10000
c0011d7b:	74 ce                	je     c0011d4b <Virt::setupPageSwapping(int)+0x8d>
c0011d7d:	83 ec 08             	sub    esp,0x8
c0011d80:	4b                   	dec    ebx
c0011d81:	50                   	push   eax
c0011d82:	68 b5 b2 02 c0       	push   0xc002b2b5
c0011d87:	e8 f9 10 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0011d8c:	c7 04 24 be b2 02 c0 	mov    DWORD PTR [esp],0xc002b2be
c0011d93:	e8 d5 8a 00 00       	call   c001a86d <Krnl::panic(char const*)>
c0011d98:	83 c4 10             	add    esp,0x10
c0011d9b:	83 fb ff             	cmp    ebx,0xffffffff
c0011d9e:	75 b1                	jne    c0011d51 <Virt::setupPageSwapping(int)+0x93>
c0011da0:	83 ec 0c             	sub    esp,0xc
c0011da3:	56                   	push   esi
c0011da4:	e8 fd 16 00 00       	call   c00134a6 <File::close()>
c0011da9:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011dac:	e8 49 db ff ff       	call   c000f8fa <rfree>
c0011db1:	83 c4 10             	add    esp,0x10
c0011db4:	85 f6                	test   esi,esi
c0011db6:	74 0c                	je     c0011dc4 <Virt::setupPageSwapping(int)+0x106>
c0011db8:	83 ec 0c             	sub    esp,0xc
c0011dbb:	8b 06                	mov    eax,DWORD PTR [esi]
c0011dbd:	56                   	push   esi
c0011dbe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011dc1:	83 c4 10             	add    esp,0x10
c0011dc4:	83 ec 08             	sub    esp,0x8
c0011dc7:	a1 88 f6 02 c0       	mov    eax,ds:0xc002f688
c0011dcc:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011dd2:	8b 10                	mov    edx,DWORD PTR [eax]
c0011dd4:	68 62 b2 02 c0       	push   0xc002b262
c0011dd9:	50                   	push   eax
c0011dda:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011ddd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011de1:	c6 05 18 e0 02 c0 43 	mov    BYTE PTR ds:0xc002e018,0x43
c0011de8:	c1 e2 0b             	shl    edx,0xb
c0011deb:	a3 14 e0 02 c0       	mov    ds:0xc002e014,eax
c0011df0:	89 15 10 e0 02 c0    	mov    DWORD PTR ds:0xc002e010,edx
c0011df6:	c7 05 0c e0 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002e00c,0x8
c0011e00:	c1 ea 08             	shr    edx,0x8
c0011e03:	89 14 24             	mov    DWORD PTR [esp],edx
c0011e06:	e8 cf da ff ff       	call   c000f8da <malloc>
c0011e0b:	83 c4 0c             	add    esp,0xc
c0011e0e:	89 c1                	mov    ecx,eax
c0011e10:	a3 ec f1 02 c0       	mov    ds:0xc002f1ec,eax
c0011e15:	31 d2                	xor    edx,edx
c0011e17:	a1 10 e0 02 c0       	mov    eax,ds:0xc002e010
c0011e1c:	f7 35 0c e0 02 c0    	div    DWORD PTR ds:0xc002e00c
c0011e22:	c1 e8 05             	shr    eax,0x5
c0011e25:	50                   	push   eax
c0011e26:	6a 00                	push   0x0
c0011e28:	51                   	push   ecx
c0011e29:	e8 3e e9 fe ff       	call   c000076c <memset>
c0011e2e:	58                   	pop    eax
c0011e2f:	a1 10 e0 02 c0       	mov    eax,ds:0xc002e010
c0011e34:	5a                   	pop    edx
c0011e35:	31 d2                	xor    edx,edx
c0011e37:	f7 35 0c e0 02 c0    	div    DWORD PTR ds:0xc002e00c
c0011e3d:	c1 e8 05             	shr    eax,0x5
c0011e40:	50                   	push   eax
c0011e41:	68 c4 b2 02 c0       	push   0xc002b2c4
c0011e46:	e8 3a 10 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0011e4b:	83 c4 20             	add    esp,0x20
c0011e4e:	5b                   	pop    ebx
c0011e4f:	5e                   	pop    esi
c0011e50:	5f                   	pop    edi
c0011e51:	c3                   	ret    
c0011e52:	83 ec 08             	sub    esp,0x8
c0011e55:	50                   	push   eax
c0011e56:	68 9d b2 02 c0       	push   0xc002b29d
c0011e5b:	e8 25 10 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0011e60:	83 c4 10             	add    esp,0x10
c0011e63:	e9 0a ff ff ff       	jmp    c0011d72 <Virt::setupPageSwapping(int)+0xb4>
c0011e68:	83 ec 08             	sub    esp,0x8
c0011e6b:	50                   	push   eax
c0011e6c:	68 79 b2 02 c0       	push   0xc002b279
c0011e71:	e8 0f 10 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0011e76:	c7 04 24 82 b2 02 c0 	mov    DWORD PTR [esp],0xc002b282
c0011e7d:	e8 eb 89 00 00       	call   c001a86d <Krnl::panic(char const*)>
c0011e82:	83 c4 10             	add    esp,0x10
c0011e85:	e9 83 fe ff ff       	jmp    c0011d0d <Virt::setupPageSwapping(int)+0x4f>

c0011e8a <VAS::VAS()>:
c0011e8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e8e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e99:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011ea0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ea4:	a3 f0 f1 02 c0       	mov    ds:0xc002f1f0,eax
c0011ea9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ead:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011eb1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011eb5:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011eb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ebc:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011ec3:	90                   	nop
c0011ec4:	c3                   	ret    
c0011ec5:	90                   	nop

c0011ec6 <VAS::VAS(VAS*)>:
c0011ec6:	83 ec 0c             	sub    esp,0xc
c0011ec9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ecd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011ed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ed8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011edf:	83 ec 0c             	sub    esp,0xc
c0011ee2:	68 a8 b0 02 c0       	push   0xc002b0a8
c0011ee7:	e8 81 89 00 00       	call   c001a86d <Krnl::panic(char const*)>
c0011eec:	83 c4 10             	add    esp,0x10
c0011eef:	90                   	nop
c0011ef0:	83 c4 0c             	add    esp,0xc
c0011ef3:	c3                   	ret    

c0011ef4 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011ef4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ef8:	89 c2                	mov    edx,eax
c0011efa:	c1 e8 0a             	shr    eax,0xa
c0011efd:	c1 ea 16             	shr    edx,0x16
c0011f00:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011f05:	19 c9                	sbb    ecx,ecx
c0011f07:	c1 e2 0c             	shl    edx,0xc
c0011f0a:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011f10:	25 fc 0f 00 00       	and    eax,0xffc
c0011f15:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011f1c:	01 d0                	add    eax,edx
c0011f1e:	c3                   	ret    
c0011f1f:	90                   	nop

c0011f20 <VAS::getPageTableEntry(unsigned long)>:
c0011f20:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011f24:	89 ca                	mov    edx,ecx
c0011f26:	c1 e9 0a             	shr    ecx,0xa
c0011f29:	c1 ea 16             	shr    edx,0x16
c0011f2c:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011f32:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011f38:	c1 e0 0c             	shl    eax,0xc
c0011f3b:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011f3e:	c3                   	ret    

c0011f3f <Virt::freeKernelVirtualPages(unsigned long)>:
c0011f3f:	57                   	push   edi
c0011f40:	56                   	push   esi
c0011f41:	be 01 00 00 00       	mov    esi,0x1
c0011f46:	53                   	push   ebx
c0011f47:	83 ec 10             	sub    esp,0x10
c0011f4a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f4e:	c1 eb 0c             	shr    ebx,0xc
c0011f51:	eb 3f                	jmp    c0011f92 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011f53:	83 ec 08             	sub    esp,0x8
c0011f56:	57                   	push   edi
c0011f57:	ff 35 f0 f1 02 c0    	push   DWORD PTR ds:0xc002f1f0
c0011f5d:	e8 be ff ff ff       	call   c0011f20 <VAS::getPageTableEntry(unsigned long)>
c0011f62:	83 c4 10             	add    esp,0x10
c0011f65:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f67:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f6b:	f6 c4 04             	test   ah,0x4
c0011f6e:	75 5f                	jne    c0011fcf <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011f70:	80 fa 04             	cmp    dl,0x4
c0011f73:	74 78                	je     c0011fed <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011f75:	80 fa 02             	cmp    dl,0x2
c0011f78:	0f 84 88 00 00 00    	je     c0012006 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011f7e:	80 fa 03             	cmp    dl,0x3
c0011f81:	0f 84 ad 00 00 00    	je     c0012034 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011f87:	fe ca                	dec    dl
c0011f89:	0f 84 92 00 00 00    	je     c0012021 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011f8f:	43                   	inc    ebx
c0011f90:	31 f6                	xor    esi,esi
c0011f92:	53                   	push   ebx
c0011f93:	89 df                	mov    edi,ebx
c0011f95:	e8 c1 fa ff ff       	call   c0011a5b <Virt::getPageState(unsigned long)>
c0011f9a:	c1 e7 0c             	shl    edi,0xc
c0011f9d:	59                   	pop    ecx
c0011f9e:	84 c0                	test   al,al
c0011fa0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011fa4:	75 ad                	jne    c0011f53 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011fa6:	83 ec 0c             	sub    esp,0xc
c0011fa9:	68 df b2 02 c0       	push   0xc002b2df
c0011fae:	e8 ba 88 00 00       	call   c001a86d <Krnl::panic(char const*)>
c0011fb3:	58                   	pop    eax
c0011fb4:	5a                   	pop    edx
c0011fb5:	57                   	push   edi
c0011fb6:	ff 35 f0 f1 02 c0    	push   DWORD PTR ds:0xc002f1f0
c0011fbc:	e8 5f ff ff ff       	call   c0011f20 <VAS::getPageTableEntry(unsigned long)>
c0011fc1:	83 c4 10             	add    esp,0x10
c0011fc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011fc6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011fca:	f6 c4 04             	test   ah,0x4
c0011fcd:	74 c0                	je     c0011f8f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011fcf:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011fd3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011fd8:	83 ec 0c             	sub    esp,0xc
c0011fdb:	50                   	push   eax
c0011fdc:	e8 db de ff ff       	call   c000febc <Phys::freePage(unsigned long)>
c0011fe1:	83 c4 10             	add    esp,0x10
c0011fe4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011fe8:	80 fa 04             	cmp    dl,0x4
c0011feb:	75 88                	jne    c0011f75 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011fed:	89 f0                	mov    eax,esi
c0011fef:	84 c0                	test   al,al
c0011ff1:	75 47                	jne    c001203a <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011ff3:	c7 44 24 20 cc b0 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b0cc
c0011ffb:	83 c4 10             	add    esp,0x10
c0011ffe:	5b                   	pop    ebx
c0011fff:	5e                   	pop    esi
c0012000:	5f                   	pop    edi
c0012001:	e9 67 88 00 00       	jmp    c001a86d <Krnl::panic(char const*)>
c0012006:	89 f0                	mov    eax,esi
c0012008:	84 c0                	test   al,al
c001200a:	75 15                	jne    c0012021 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001200c:	83 ec 0c             	sub    esp,0xc
c001200f:	68 fb b2 02 c0       	push   0xc002b2fb
c0012014:	e8 54 88 00 00       	call   c001a86d <Krnl::panic(char const*)>
c0012019:	83 c4 10             	add    esp,0x10
c001201c:	e9 6e ff ff ff       	jmp    c0011f8f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012021:	83 ec 08             	sub    esp,0x8
c0012024:	6a 00                	push   0x0
c0012026:	53                   	push   ebx
c0012027:	e8 fa f9 ff ff       	call   c0011a26 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001202c:	83 c4 10             	add    esp,0x10
c001202f:	e9 5b ff ff ff       	jmp    c0011f8f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012034:	89 f0                	mov    eax,esi
c0012036:	84 c0                	test   al,al
c0012038:	75 15                	jne    c001204f <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c001203a:	83 ec 08             	sub    esp,0x8
c001203d:	6a 00                	push   0x0
c001203f:	53                   	push   ebx
c0012040:	e8 e1 f9 ff ff       	call   c0011a26 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012045:	83 c4 10             	add    esp,0x10
c0012048:	83 c4 10             	add    esp,0x10
c001204b:	5b                   	pop    ebx
c001204c:	5e                   	pop    esi
c001204d:	5f                   	pop    edi
c001204e:	c3                   	ret    
c001204f:	c7 44 24 20 17 b3 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b317
c0012057:	83 c4 10             	add    esp,0x10
c001205a:	5b                   	pop    ebx
c001205b:	5e                   	pop    esi
c001205c:	5f                   	pop    edi
c001205d:	e9 0b 88 00 00       	jmp    c001a86d <Krnl::panic(char const*)>

c0012062 <VAS::freeAllocatedPages(unsigned long)>:
c0012062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012066:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001206a:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001206e:	74 09                	je     c0012079 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0012070:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012074:	e9 c6 fe ff ff       	jmp    c0011f3f <Virt::freeKernelVirtualPages(unsigned long)>
c0012079:	c7 44 24 04 f0 b0 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b0f0
c0012081:	e9 ff 0d 00 00       	jmp    c0012e85 <Dbg::kprintf(char const*, ...)>

c0012086 <VAS::virtualToPhysical(unsigned long)>:
c0012086:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001208a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001208e:	e8 8d fe ff ff       	call   c0011f20 <VAS::getPageTableEntry(unsigned long)>
c0012093:	5a                   	pop    edx
c0012094:	8b 00                	mov    eax,DWORD PTR [eax]
c0012096:	59                   	pop    ecx
c0012097:	25 00 f0 ff ff       	and    eax,0xfffff000
c001209c:	c3                   	ret    
c001209d:	90                   	nop

c001209e <VAS::reflagRange(unsigned long, int, int, int)>:
c001209e:	55                   	push   ebp
c001209f:	57                   	push   edi
c00120a0:	56                   	push   esi
c00120a1:	53                   	push   ebx
c00120a2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00120a6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00120aa:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00120ae:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00120b2:	85 db                	test   ebx,ebx
c00120b4:	7e 22                	jle    c00120d8 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00120b6:	c1 e3 0c             	shl    ebx,0xc
c00120b9:	01 f3                	add    ebx,esi
c00120bb:	56                   	push   esi
c00120bc:	81 c6 00 10 00 00    	add    esi,0x1000
c00120c2:	55                   	push   ebp
c00120c3:	e8 58 fe ff ff       	call   c0011f20 <VAS::getPageTableEntry(unsigned long)>
c00120c8:	5a                   	pop    edx
c00120c9:	59                   	pop    ecx
c00120ca:	8b 08                	mov    ecx,DWORD PTR [eax]
c00120cc:	21 f9                	and    ecx,edi
c00120ce:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00120d2:	39 f3                	cmp    ebx,esi
c00120d4:	89 08                	mov    DWORD PTR [eax],ecx
c00120d6:	75 e3                	jne    c00120bb <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00120d8:	5b                   	pop    ebx
c00120d9:	5e                   	pop    esi
c00120da:	5f                   	pop    edi
c00120db:	5d                   	pop    ebp
c00120dc:	c3                   	ret    
c00120dd:	90                   	nop

c00120de <VAS::setToWriteCombining(unsigned long, int)>:
c00120de:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c00120e3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120e9:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00120f0:	75 01                	jne    c00120f3 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00120f2:	c3                   	ret    
c00120f3:	68 80 00 00 00       	push   0x80
c00120f8:	6a ff                	push   0xffffffff
c00120fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012102:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012106:	e8 93 ff ff ff       	call   c001209e <VAS::reflagRange(unsigned long, int, int, int)>
c001210b:	83 c4 14             	add    esp,0x14
c001210e:	c3                   	ret    
c001210f:	90                   	nop

c0012110 <VAS::mapOtherVASIn(bool, VAS*)>:
c0012110:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0012115:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012119:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001211c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012120:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0012123:	19 c0                	sbb    eax,eax
c0012125:	83 ca 03             	or     edx,0x3
c0012128:	83 e0 fc             	and    eax,0xfffffffc
c001212b:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012132:	0f 20 d8             	mov    eax,cr3
c0012135:	0f 22 d8             	mov    cr3,eax
c0012138:	c3                   	ret    
c0012139:	90                   	nop

c001213a <VAS::~VAS()>:
c001213a:	83 ec 2c             	sub    esp,0x2c
c001213d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012145:	fa                   	cli    
c0012146:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c001214b:	40                   	inc    eax
c001214c:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c0012151:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012156:	8b 00                	mov    eax,DWORD PTR [eax]
c0012158:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001215b:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012161:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012165:	6a 01                	push   0x1
c0012167:	50                   	push   eax
c0012168:	e8 a3 ff ff ff       	call   c0012110 <VAS::mapOtherVASIn(bool, VAS*)>
c001216d:	83 c4 0c             	add    esp,0xc
c0012170:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012178:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012180:	0f 8f d4 00 00 00    	jg     c001225a <VAS::~VAS()+0x120>
c0012186:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001218a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001218d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012191:	c1 e2 02             	shl    edx,0x2
c0012194:	01 d0                	add    eax,edx
c0012196:	8b 00                	mov    eax,DWORD PTR [eax]
c0012198:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001219c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121a0:	83 e0 01             	and    eax,0x1
c00121a3:	0f 84 a8 00 00 00    	je     c0012251 <VAS::~VAS()+0x117>
c00121a9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00121b1:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00121b9:	7f 72                	jg     c001222d <VAS::~VAS()+0xf3>
c00121bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00121bf:	c1 e0 0a             	shl    eax,0xa
c00121c2:	89 c2                	mov    edx,eax
c00121c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121c8:	01 d0                	add    eax,edx
c00121ca:	c1 e0 0c             	shl    eax,0xc
c00121cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00121d1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00121d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00121d8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00121db:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00121e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00121e5:	6a 01                	push   0x1
c00121e7:	50                   	push   eax
c00121e8:	e8 07 fd ff ff       	call   c0011ef4 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00121ed:	83 c4 0c             	add    esp,0xc
c00121f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00121f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00121f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00121fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00121fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012202:	25 01 04 00 00       	and    eax,0x401
c0012207:	3d 01 04 00 00       	cmp    eax,0x401
c001220c:	75 19                	jne    c0012227 <VAS::~VAS()+0xed>
c001220e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012212:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012217:	83 ec 0c             	sub    esp,0xc
c001221a:	50                   	push   eax
c001221b:	e8 9c dc ff ff       	call   c000febc <Phys::freePage(unsigned long)>
c0012220:	83 c4 10             	add    esp,0x10
c0012223:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012227:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001222b:	eb 84                	jmp    c00121b1 <VAS::~VAS()+0x77>
c001222d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012231:	25 00 04 00 00       	and    eax,0x400
c0012236:	74 19                	je     c0012251 <VAS::~VAS()+0x117>
c0012238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001223c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012241:	83 ec 0c             	sub    esp,0xc
c0012244:	50                   	push   eax
c0012245:	e8 72 dc ff ff       	call   c000febc <Phys::freePage(unsigned long)>
c001224a:	83 c4 10             	add    esp,0x10
c001224d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012251:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012255:	e9 1e ff ff ff       	jmp    c0012178 <VAS::~VAS()+0x3e>
c001225a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001225e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012261:	83 ec 0c             	sub    esp,0xc
c0012264:	50                   	push   eax
c0012265:	e8 d5 fc ff ff       	call   c0011f3f <Virt::freeKernelVirtualPages(unsigned long)>
c001226a:	83 c4 10             	add    esp,0x10
c001226d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012271:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012274:	83 ec 0c             	sub    esp,0xc
c0012277:	50                   	push   eax
c0012278:	e8 3f dc ff ff       	call   c000febc <Phys::freePage(unsigned long)>
c001227d:	83 c4 10             	add    esp,0x10
c0012280:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012284:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012288:	c1 e0 02             	shl    eax,0x2
c001228b:	83 ec 08             	sub    esp,0x8
c001228e:	50                   	push   eax
c001228f:	68 14 b1 02 c0       	push   0xc002b114
c0012294:	e8 ec 0b 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0012299:	83 c4 10             	add    esp,0x10
c001229c:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c00122a1:	48                   	dec    eax
c00122a2:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c00122a7:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c00122ac:	85 c0                	test   eax,eax
c00122ae:	75 01                	jne    c00122b1 <VAS::~VAS()+0x177>
c00122b0:	fb                   	sti    
c00122b1:	90                   	nop
c00122b2:	83 c4 2c             	add    esp,0x2c
c00122b5:	c3                   	ret    

c00122b6 <VAS::mapPage(unsigned long, unsigned long, int)>:
c00122b6:	55                   	push   ebp
c00122b7:	57                   	push   edi
c00122b8:	56                   	push   esi
c00122b9:	53                   	push   ebx
c00122ba:	83 ec 1c             	sub    esp,0x1c
c00122bd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00122c1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00122c5:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00122cb:	77 08                	ja     c00122d5 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c00122cd:	0f 20 d8             	mov    eax,cr3
c00122d0:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c00122d3:	75 47                	jne    c001231c <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00122d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00122d9:	09 d8                	or     eax,ebx
c00122db:	a9 ff 0f 00 00       	test   eax,0xfff
c00122e0:	75 57                	jne    c0012339 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c00122e2:	89 de                	mov    esi,ebx
c00122e4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00122e7:	c1 ee 16             	shr    esi,0x16
c00122ea:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00122f1:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00122f5:	74 54                	je     c001234b <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00122f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122fb:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0012301:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012305:	c1 e6 0c             	shl    esi,0xc
c0012308:	c1 eb 0a             	shr    ebx,0xa
c001230b:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012311:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0012314:	83 c4 1c             	add    esp,0x1c
c0012317:	5b                   	pop    ebx
c0012318:	5e                   	pop    esi
c0012319:	5f                   	pop    edi
c001231a:	5d                   	pop    ebp
c001231b:	c3                   	ret    
c001231c:	83 ec 0c             	sub    esp,0xc
c001231f:	68 34 b1 02 c0       	push   0xc002b134
c0012324:	e8 5c 0b 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0012329:	83 c4 10             	add    esp,0x10
c001232c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012330:	09 d8                	or     eax,ebx
c0012332:	a9 ff 0f 00 00       	test   eax,0xfff
c0012337:	74 a9                	je     c00122e2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012339:	83 ec 0c             	sub    esp,0xc
c001233c:	68 9c b1 02 c0       	push   0xc002b19c
c0012341:	e8 27 85 00 00       	call   c001a86d <Krnl::panic(char const*)>
c0012346:	83 c4 10             	add    esp,0x10
c0012349:	eb 97                	jmp    c00122e2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001234b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001234f:	e8 f2 db ff ff       	call   c000ff46 <Phys::allocatePage()>
c0012354:	83 ec 0c             	sub    esp,0xc
c0012357:	89 c5                	mov    ebp,eax
c0012359:	8b 0d f0 f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f1f0
c001235f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012363:	6a 01                	push   0x1
c0012365:	e8 15 f7 ff ff       	call   c0011a7f <Virt::allocateKernelVirtualPages(int)>
c001236a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012371:	6a 01                	push   0x1
c0012373:	50                   	push   eax
c0012374:	55                   	push   ebp
c0012375:	81 cd 07 04 00 00    	or     ebp,0x407
c001237b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001237f:	51                   	push   ecx
c0012380:	e8 27 02 00 00       	call   c00125ac <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012385:	83 c4 1c             	add    esp,0x1c
c0012388:	68 00 10 00 00       	push   0x1000
c001238d:	6a 00                	push   0x0
c001238f:	50                   	push   eax
c0012390:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012394:	e8 d3 e3 fe ff       	call   c000076c <memset>
c0012399:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001239d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00123a0:	e8 9a fb ff ff       	call   c0011f3f <Virt::freeKernelVirtualPages(unsigned long)>
c00123a5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00123a9:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00123ac:	83 c4 10             	add    esp,0x10
c00123af:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00123b2:	e9 40 ff ff ff       	jmp    c00122f7 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c00123b7:	90                   	nop

c00123b8 <VAS::allocatePages(int, int)>:
c00123b8:	55                   	push   ebp
c00123b9:	57                   	push   edi
c00123ba:	56                   	push   esi
c00123bb:	53                   	push   ebx
c00123bc:	83 ec 1c             	sub    esp,0x1c
c00123bf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00123c3:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c00123c8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123ce:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00123d4:	83 e0 01             	and    eax,0x1
c00123d7:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c00123db:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00123df:	0f 85 cc 00 00 00    	jne    c00124b1 <VAS::allocatePages(int, int)+0xf9>
c00123e5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00123e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00123ec:	85 c0                	test   eax,eax
c00123ee:	0f 84 a1 00 00 00    	je     c0012495 <VAS::allocatePages(int, int)+0xdd>
c00123f4:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00123f8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123fc:	c1 e6 0c             	shl    esi,0xc
c00123ff:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0012403:	85 c0                	test   eax,eax
c0012405:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0012408:	7e 33                	jle    c001243d <VAS::allocatePages(int, int)+0x85>
c001240a:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001240e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012412:	81 cd 00 04 00 00    	or     ebp,0x400
c0012418:	e8 29 db ff ff       	call   c000ff46 <Phys::allocatePage()>
c001241d:	55                   	push   ebp
c001241e:	53                   	push   ebx
c001241f:	50                   	push   eax
c0012420:	57                   	push   edi
c0012421:	e8 90 fe ff ff       	call   c00122b6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012426:	83 c4 10             	add    esp,0x10
c0012429:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001242e:	74 03                	je     c0012433 <VAS::allocatePages(int, int)+0x7b>
c0012430:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012433:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012439:	39 de                	cmp    esi,ebx
c001243b:	75 db                	jne    c0012418 <VAS::allocatePages(int, int)+0x60>
c001243d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012442:	75 12                	jne    c0012456 <VAS::allocatePages(int, int)+0x9e>
c0012444:	0f 20 d8             	mov    eax,cr3
c0012447:	0f 22 d8             	mov    cr3,eax
c001244a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001244e:	83 c4 1c             	add    esp,0x1c
c0012451:	5b                   	pop    ebx
c0012452:	5e                   	pop    esi
c0012453:	5f                   	pop    edi
c0012454:	5d                   	pop    ebp
c0012455:	c3                   	ret    
c0012456:	c1 ee 0a             	shr    esi,0xa
c0012459:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001245d:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012463:	c1 eb 0a             	shr    ebx,0xa
c0012466:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c001246c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012472:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012478:	39 c3                	cmp    ebx,eax
c001247a:	77 ce                	ja     c001244a <VAS::allocatePages(int, int)+0x92>
c001247c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001247f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012485:	39 d8                	cmp    eax,ebx
c0012487:	73 f3                	jae    c001247c <VAS::allocatePages(int, int)+0xc4>
c0012489:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001248d:	83 c4 1c             	add    esp,0x1c
c0012490:	5b                   	pop    ebx
c0012491:	5e                   	pop    esi
c0012492:	5f                   	pop    edi
c0012493:	5d                   	pop    ebp
c0012494:	c3                   	ret    
c0012495:	83 ec 0c             	sub    esp,0xc
c0012498:	68 c0 b1 02 c0       	push   0xc002b1c0
c001249d:	e8 cb 83 00 00       	call   c001a86d <Krnl::panic(char const*)>
c00124a2:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00124a5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00124a9:	83 c4 10             	add    esp,0x10
c00124ac:	e9 43 ff ff ff       	jmp    c00123f4 <VAS::allocatePages(int, int)+0x3c>
c00124b1:	83 ec 0c             	sub    esp,0xc
c00124b4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00124b8:	e8 c2 f5 ff ff       	call   c0011a7f <Virt::allocateKernelVirtualPages(int)>
c00124bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00124c1:	83 c4 10             	add    esp,0x10
c00124c4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00124c9:	0f 87 9b 00 00 00    	ja     c001256a <VAS::allocatePages(int, int)+0x1b2>
c00124cf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00124d3:	85 d2                	test   edx,edx
c00124d5:	7e 3c                	jle    c0012513 <VAS::allocatePages(int, int)+0x15b>
c00124d7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00124db:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00124df:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124e3:	c1 e5 0c             	shl    ebp,0xc
c00124e6:	81 ce 00 04 00 00    	or     esi,0x400
c00124ec:	01 dd                	add    ebp,ebx
c00124ee:	e8 53 da ff ff       	call   c000ff46 <Phys::allocatePage()>
c00124f3:	56                   	push   esi
c00124f4:	53                   	push   ebx
c00124f5:	50                   	push   eax
c00124f6:	57                   	push   edi
c00124f7:	e8 ba fd ff ff       	call   c00122b6 <VAS::mapPage(unsigned long, unsigned long, int)>
c00124fc:	83 c4 10             	add    esp,0x10
c00124ff:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012504:	74 03                	je     c0012509 <VAS::allocatePages(int, int)+0x151>
c0012506:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012509:	81 c3 00 10 00 00    	add    ebx,0x1000
c001250f:	39 dd                	cmp    ebp,ebx
c0012511:	75 db                	jne    c00124ee <VAS::allocatePages(int, int)+0x136>
c0012513:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012518:	0f 84 26 ff ff ff    	je     c0012444 <VAS::allocatePages(int, int)+0x8c>
c001251e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012522:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012526:	89 d3                	mov    ebx,edx
c0012528:	c1 e0 0c             	shl    eax,0xc
c001252b:	c1 eb 0a             	shr    ebx,0xa
c001252e:	01 d0                	add    eax,edx
c0012530:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012536:	c1 e8 0a             	shr    eax,0xa
c0012539:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001253f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012544:	2d 00 00 40 00       	sub    eax,0x400000
c0012549:	39 c3                	cmp    ebx,eax
c001254b:	0f 87 f9 fe ff ff    	ja     c001244a <VAS::allocatePages(int, int)+0x92>
c0012551:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012554:	81 c3 00 10 00 00    	add    ebx,0x1000
c001255a:	39 d8                	cmp    eax,ebx
c001255c:	73 f3                	jae    c0012551 <VAS::allocatePages(int, int)+0x199>
c001255e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012562:	83 c4 1c             	add    esp,0x1c
c0012565:	5b                   	pop    ebx
c0012566:	5e                   	pop    esi
c0012567:	5f                   	pop    edi
c0012568:	5d                   	pop    ebp
c0012569:	c3                   	ret    
c001256a:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c001256f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012575:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c001257c:	0f 84 4d ff ff ff    	je     c00124cf <VAS::allocatePages(int, int)+0x117>
c0012582:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c001258a:	e9 40 ff ff ff       	jmp    c00124cf <VAS::allocatePages(int, int)+0x117>
c001258f:	90                   	nop

c0012590 <VAS::setCPUSpecific(unsigned long)>:
c0012590:	83 ec 0c             	sub    esp,0xc
c0012593:	6a 05                	push   0x5
c0012595:	68 00 00 40 c2       	push   0xc2400000
c001259a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001259e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125a2:	e8 0f fd ff ff       	call   c00122b6 <VAS::mapPage(unsigned long, unsigned long, int)>
c00125a7:	83 c4 1c             	add    esp,0x1c
c00125aa:	c3                   	ret    
c00125ab:	90                   	nop

c00125ac <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00125ac:	55                   	push   ebp
c00125ad:	57                   	push   edi
c00125ae:	56                   	push   esi
c00125af:	53                   	push   ebx
c00125b0:	83 ec 1c             	sub    esp,0x1c
c00125b3:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c00125b8:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00125bc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125c2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00125c6:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00125cc:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00125d0:	83 e0 01             	and    eax,0x1
c00125d3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00125d7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125db:	85 c0                	test   eax,eax
c00125dd:	7e 39                	jle    c0012618 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c00125df:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125e3:	89 f3                	mov    ebx,esi
c00125e5:	c1 e0 0c             	shl    eax,0xc
c00125e8:	01 f0                	add    eax,esi
c00125ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00125ee:	55                   	push   ebp
c00125ef:	53                   	push   ebx
c00125f0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125f4:	29 f0                	sub    eax,esi
c00125f6:	01 d8                	add    eax,ebx
c00125f8:	50                   	push   eax
c00125f9:	57                   	push   edi
c00125fa:	e8 b7 fc ff ff       	call   c00122b6 <VAS::mapPage(unsigned long, unsigned long, int)>
c00125ff:	83 c4 10             	add    esp,0x10
c0012602:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012607:	74 03                	je     c001260c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012609:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001260c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012612:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012616:	75 d6                	jne    c00125ee <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012618:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001261d:	75 10                	jne    c001262f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c001261f:	0f 20 d8             	mov    eax,cr3
c0012622:	0f 22 d8             	mov    cr3,eax
c0012625:	83 c4 1c             	add    esp,0x1c
c0012628:	89 f0                	mov    eax,esi
c001262a:	5b                   	pop    ebx
c001262b:	5e                   	pop    esi
c001262c:	5f                   	pop    edi
c001262d:	5d                   	pop    ebp
c001262e:	c3                   	ret    
c001262f:	89 f3                	mov    ebx,esi
c0012631:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012635:	c1 eb 0a             	shr    ebx,0xa
c0012638:	c1 e0 0c             	shl    eax,0xc
c001263b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012641:	01 f0                	add    eax,esi
c0012643:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012649:	c1 e8 0a             	shr    eax,0xa
c001264c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012651:	2d 00 00 40 00       	sub    eax,0x400000
c0012656:	39 c3                	cmp    ebx,eax
c0012658:	77 cb                	ja     c0012625 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c001265a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001265d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012663:	39 d8                	cmp    eax,ebx
c0012665:	73 f3                	jae    c001265a <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012667:	83 c4 1c             	add    esp,0x1c
c001266a:	89 f0                	mov    eax,esi
c001266c:	5b                   	pop    ebx
c001266d:	5e                   	pop    esi
c001266e:	5f                   	pop    edi
c001266f:	5d                   	pop    ebp
c0012670:	c3                   	ret    
c0012671:	90                   	nop

c0012672 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012672:	55                   	push   ebp
c0012673:	57                   	push   edi
c0012674:	56                   	push   esi
c0012675:	53                   	push   ebx
c0012676:	83 ec 1c             	sub    esp,0x1c
c0012679:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001267d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012681:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012685:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012689:	a9 ff 0f 00 00       	test   eax,0xfff
c001268e:	75 4a                	jne    c00126da <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012690:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012694:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012697:	c1 eb 16             	shr    ebx,0x16
c001269a:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00126a1:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00126a5:	74 4d                	je     c00126f4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00126a7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00126ab:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00126af:	c1 e8 0a             	shr    eax,0xa
c00126b2:	80 fa 01             	cmp    dl,0x1
c00126b5:	19 d2                	sbb    edx,edx
c00126b7:	c1 e3 0c             	shl    ebx,0xc
c00126ba:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c00126be:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00126c4:	25 fc 0f 00 00       	and    eax,0xffc
c00126c9:	01 d8                	add    eax,ebx
c00126cb:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00126d2:	83 c4 1c             	add    esp,0x1c
c00126d5:	5b                   	pop    ebx
c00126d6:	5e                   	pop    esi
c00126d7:	5f                   	pop    edi
c00126d8:	5d                   	pop    ebp
c00126d9:	c3                   	ret    
c00126da:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00126de:	83 ec 0c             	sub    esp,0xc
c00126e1:	68 ec b1 02 c0       	push   0xc002b1ec
c00126e6:	e8 82 81 00 00       	call   c001a86d <Krnl::panic(char const*)>
c00126eb:	83 c4 10             	add    esp,0x10
c00126ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00126f2:	eb 9c                	jmp    c0012690 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00126f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00126f8:	e8 49 d8 ff ff       	call   c000ff46 <Phys::allocatePage()>
c00126fd:	83 ec 0c             	sub    esp,0xc
c0012700:	89 c5                	mov    ebp,eax
c0012702:	8b 0d f0 f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f1f0
c0012708:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001270c:	6a 01                	push   0x1
c001270e:	e8 6c f3 ff ff       	call   c0011a7f <Virt::allocateKernelVirtualPages(int)>
c0012713:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001271a:	6a 01                	push   0x1
c001271c:	50                   	push   eax
c001271d:	55                   	push   ebp
c001271e:	81 cd 07 04 00 00    	or     ebp,0x407
c0012724:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012728:	51                   	push   ecx
c0012729:	e8 7e fe ff ff       	call   c00125ac <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001272e:	83 c4 1c             	add    esp,0x1c
c0012731:	68 00 10 00 00       	push   0x1000
c0012736:	6a 00                	push   0x0
c0012738:	50                   	push   eax
c0012739:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001273d:	e8 2a e0 fe ff       	call   c000076c <memset>
c0012742:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012746:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012749:	e8 f1 f7 ff ff       	call   c0011f3f <Virt::freeKernelVirtualPages(unsigned long)>
c001274e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012751:	83 c4 10             	add    esp,0x10
c0012754:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012757:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001275b:	e9 47 ff ff ff       	jmp    c00126a7 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0012760 <VAS::VAS(bool)>:
c0012760:	53                   	push   ebx
c0012761:	83 ec 28             	sub    esp,0x28
c0012764:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012768:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001276c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012770:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012777:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001277b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012782:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012786:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001278a:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001278d:	e8 b4 d7 ff ff       	call   c000ff46 <Phys::allocatePage()>
c0012792:	89 c2                	mov    edx,eax
c0012794:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012798:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001279b:	8b 1d f0 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f1f0
c00127a1:	83 ec 0c             	sub    esp,0xc
c00127a4:	6a 01                	push   0x1
c00127a6:	e8 d4 f2 ff ff       	call   c0011a7f <Virt::allocateKernelVirtualPages(int)>
c00127ab:	83 c4 10             	add    esp,0x10
c00127ae:	89 c2                	mov    edx,eax
c00127b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127b4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00127b7:	83 ec 0c             	sub    esp,0xc
c00127ba:	6a 03                	push   0x3
c00127bc:	6a 01                	push   0x1
c00127be:	52                   	push   edx
c00127bf:	50                   	push   eax
c00127c0:	53                   	push   ebx
c00127c1:	e8 e6 fd ff ff       	call   c00125ac <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127c6:	83 c4 20             	add    esp,0x20
c00127c9:	89 c2                	mov    edx,eax
c00127cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127cf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00127d2:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00127da:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00127e2:	7f 1c                	jg     c0012800 <VAS::VAS(bool)+0xa0>
c00127e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127e8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00127eb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00127ef:	c1 e2 02             	shl    edx,0x2
c00127f2:	01 d0                	add    eax,edx
c00127f4:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00127fa:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00127fe:	eb da                	jmp    c00127da <VAS::VAS(bool)+0x7a>
c0012800:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012808:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012810:	7f 7a                	jg     c001288c <VAS::VAS(bool)+0x12c>
c0012812:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012816:	2d 00 02 00 00       	sub    eax,0x200
c001281b:	c1 e0 0c             	shl    eax,0xc
c001281e:	83 c8 03             	or     eax,0x3
c0012821:	89 c2                	mov    edx,eax
c0012823:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c0012828:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001282e:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012834:	83 e0 10             	and    eax,0x10
c0012837:	84 c0                	test   al,al
c0012839:	74 07                	je     c0012842 <VAS::VAS(bool)+0xe2>
c001283b:	b8 00 01 00 00       	mov    eax,0x100
c0012840:	eb 05                	jmp    c0012847 <VAS::VAS(bool)+0xe7>
c0012842:	b8 00 00 00 00       	mov    eax,0x0
c0012847:	09 d0                	or     eax,edx
c0012849:	89 c1                	mov    ecx,eax
c001284b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001284f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012852:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012856:	c1 e2 02             	shl    edx,0x2
c0012859:	01 d0                	add    eax,edx
c001285b:	89 ca                	mov    edx,ecx
c001285d:	89 10                	mov    DWORD PTR [eax],edx
c001285f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012863:	2d 40 03 00 00       	sub    eax,0x340
c0012868:	83 f8 7f             	cmp    eax,0x7f
c001286b:	77 16                	ja     c0012883 <VAS::VAS(bool)+0x123>
c001286d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012871:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012874:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012878:	c1 e2 02             	shl    edx,0x2
c001287b:	01 d0                	add    eax,edx
c001287d:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012883:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012887:	e9 7c ff ff ff       	jmp    c0012808 <VAS::VAS(bool)+0xa8>
c001288c:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c0012891:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012897:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001289d:	83 e0 10             	and    eax,0x10
c00128a0:	84 c0                	test   al,al
c00128a2:	74 07                	je     c00128ab <VAS::VAS(bool)+0x14b>
c00128a4:	b8 03 41 00 00       	mov    eax,0x4103
c00128a9:	eb 05                	jmp    c00128b0 <VAS::VAS(bool)+0x150>
c00128ab:	b8 03 40 00 00       	mov    eax,0x4003
c00128b0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00128b4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00128b7:	81 c2 20 0c 00 00    	add    edx,0xc20
c00128bd:	89 02                	mov    DWORD PTR [edx],eax
c00128bf:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c00128c4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128ca:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00128d0:	83 ec 08             	sub    esp,0x8
c00128d3:	50                   	push   eax
c00128d4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00128d8:	e8 b3 fc ff ff       	call   c0012590 <VAS::setCPUSpecific(unsigned long)>
c00128dd:	83 c4 10             	add    esp,0x10
c00128e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128e4:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00128e7:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c00128ec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128f2:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128f8:	83 e0 10             	and    eax,0x10
c00128fb:	84 c0                	test   al,al
c00128fd:	74 07                	je     c0012906 <VAS::VAS(bool)+0x1a6>
c00128ff:	b8 00 01 00 00       	mov    eax,0x100
c0012904:	eb 05                	jmp    c001290b <VAS::VAS(bool)+0x1ab>
c0012906:	b8 00 00 00 00       	mov    eax,0x0
c001290b:	09 c2                	or     edx,eax
c001290d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012911:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012914:	05 fc 0f 00 00       	add    eax,0xffc
c0012919:	83 ca 03             	or     edx,0x3
c001291c:	89 10                	mov    DWORD PTR [eax],edx
c001291e:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c0012923:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012929:	83 ec 0c             	sub    esp,0xc
c001292c:	50                   	push   eax
c001292d:	e8 60 1c 00 00       	call   c0014592 <Device::getName()>
c0012932:	83 c4 10             	add    esp,0x10
c0012935:	83 ec 08             	sub    esp,0x8
c0012938:	68 31 b3 02 c0       	push   0xc002b331
c001293d:	50                   	push   eax
c001293e:	e8 71 df fe ff       	call   c00008b4 <strcmp>
c0012943:	83 c4 10             	add    esp,0x10
c0012946:	85 c0                	test   eax,eax
c0012948:	0f 94 c0             	sete   al
c001294b:	84 c0                	test   al,al
c001294d:	0f 84 87 00 00 00    	je     c00129da <VAS::VAS(bool)+0x27a>
c0012953:	fa                   	cli    
c0012954:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c0012959:	40                   	inc    eax
c001295a:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c001295f:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c0012964:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001296a:	05 7c 09 00 00       	add    eax,0x97c
c001296f:	83 ec 0c             	sub    esp,0xc
c0012972:	50                   	push   eax
c0012973:	e8 e4 c9 ff ff       	call   c000f35c <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012978:	83 c4 10             	add    esp,0x10
c001297b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012980:	89 c3                	mov    ebx,eax
c0012982:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c0012987:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001298d:	05 7c 09 00 00       	add    eax,0x97c
c0012992:	83 ec 0c             	sub    esp,0xc
c0012995:	50                   	push   eax
c0012996:	e8 c1 c9 ff ff       	call   c000f35c <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001299b:	83 c4 10             	add    esp,0x10
c001299e:	83 ec 08             	sub    esp,0x8
c00129a1:	50                   	push   eax
c00129a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00129a6:	e8 75 f5 ff ff       	call   c0011f20 <VAS::getPageTableEntry(unsigned long)>
c00129ab:	83 c4 10             	add    esp,0x10
c00129ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00129b0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00129b5:	6a 11                	push   0x11
c00129b7:	53                   	push   ebx
c00129b8:	50                   	push   eax
c00129b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00129bd:	e8 f4 f8 ff ff       	call   c00122b6 <VAS::mapPage(unsigned long, unsigned long, int)>
c00129c2:	83 c4 10             	add    esp,0x10
c00129c5:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c00129ca:	48                   	dec    eax
c00129cb:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c00129d0:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c00129d5:	85 c0                	test   eax,eax
c00129d7:	75 01                	jne    c00129da <VAS::VAS(bool)+0x27a>
c00129d9:	fb                   	sti    
c00129da:	90                   	nop
c00129db:	83 c4 28             	add    esp,0x28
c00129de:	5b                   	pop    ebx
c00129df:	c3                   	ret    

c00129e0 <VAS::evict(unsigned long)>:
c00129e0:	55                   	push   ebp
c00129e1:	57                   	push   edi
c00129e2:	56                   	push   esi
c00129e3:	53                   	push   ebx
c00129e4:	83 ec 1c             	sub    esp,0x1c
c00129e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129eb:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00129ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129f3:	e8 c8 f1 ff ff       	call   c0011bc0 <Virt::allocateSwapfilePage()>
c00129f8:	89 c7                	mov    edi,eax
c00129fa:	a1 0c e0 02 c0       	mov    eax,ds:0xc002e00c
c00129ff:	85 c0                	test   eax,eax
c0012a01:	7e 3d                	jle    c0012a40 <VAS::evict(unsigned long)+0x60>
c0012a03:	89 ee                	mov    esi,ebp
c0012a05:	31 db                	xor    ebx,ebx
c0012a07:	83 ec 0c             	sub    esp,0xc
c0012a0a:	57                   	push   edi
c0012a0b:	e8 9e f1 ff ff       	call   c0011bae <Virt::swapIDToSector(unsigned long)>
c0012a10:	89 34 24             	mov    DWORD PTR [esp],esi
c0012a13:	01 d8                	add    eax,ebx
c0012a15:	6a 01                	push   0x1
c0012a17:	31 d2                	xor    edx,edx
c0012a19:	43                   	inc    ebx
c0012a1a:	52                   	push   edx
c0012a1b:	81 c6 00 02 00 00    	add    esi,0x200
c0012a21:	50                   	push   eax
c0012a22:	0f be 05 18 e0 02 c0 	movsx  eax,BYTE PTR ds:0xc002e018
c0012a29:	ff 34 85 7c f5 02 c0 	push   DWORD PTR [eax*4-0x3ffd0a84]
c0012a30:	e8 33 3e 00 00       	call   c0016868 <LogicalDisk::write(unsigned long long, int, void*)>
c0012a35:	83 c4 20             	add    esp,0x20
c0012a38:	39 1d 0c e0 02 c0    	cmp    DWORD PTR ds:0xc002e00c,ebx
c0012a3e:	7f c7                	jg     c0012a07 <VAS::evict(unsigned long)+0x27>
c0012a40:	83 ec 08             	sub    esp,0x8
c0012a43:	c1 e7 0b             	shl    edi,0xb
c0012a46:	55                   	push   ebp
c0012a47:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a4b:	e8 d0 f4 ff ff       	call   c0011f20 <VAS::getPageTableEntry(unsigned long)>
c0012a50:	83 c4 0c             	add    esp,0xc
c0012a53:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a55:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012a5b:	09 d7                	or     edi,edx
c0012a5d:	89 38                	mov    DWORD PTR [eax],edi
c0012a5f:	a1 e8 f1 02 c0       	mov    eax,ds:0xc002f1e8
c0012a64:	40                   	inc    eax
c0012a65:	a3 e8 f1 02 c0       	mov    ds:0xc002f1e8,eax
c0012a6a:	0f 20 da             	mov    edx,cr3
c0012a6d:	0f 22 da             	mov    cr3,edx
c0012a70:	50                   	push   eax
c0012a71:	55                   	push   ebp
c0012a72:	68 3f b3 02 c0       	push   0xc002b33f
c0012a77:	e8 09 04 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0012a7c:	a1 e4 f1 02 c0       	mov    eax,ds:0xc002f1e4
c0012a81:	c7 44 24 40 54 b3 02 c0 	mov    DWORD PTR [esp+0x40],0xc002b354
c0012a89:	8d 50 01             	lea    edx,[eax+0x1]
c0012a8c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012a90:	89 15 e4 f1 02 c0    	mov    DWORD PTR ds:0xc002f1e4,edx
c0012a96:	83 c4 2c             	add    esp,0x2c
c0012a99:	5b                   	pop    ebx
c0012a9a:	5e                   	pop    esi
c0012a9b:	5f                   	pop    edi
c0012a9c:	5d                   	pop    ebp
c0012a9d:	e9 e3 03 00 00       	jmp    c0012e85 <Dbg::kprintf(char const*, ...)>

c0012aa2 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012aa2:	55                   	push   ebp
c0012aa3:	57                   	push   edi
c0012aa4:	56                   	push   esi
c0012aa5:	53                   	push   ebx
c0012aa6:	83 ec 0c             	sub    esp,0xc
c0012aa9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012aad:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012ab3:	0f 84 dc 00 00 00    	je     c0012b95 <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012ab9:	56                   	push   esi
c0012aba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012abe:	e8 5d f4 ff ff       	call   c0011f20 <VAS::getPageTableEntry(unsigned long)>
c0012ac3:	5b                   	pop    ebx
c0012ac4:	85 c0                	test   eax,eax
c0012ac6:	5f                   	pop    edi
c0012ac7:	89 c3                	mov    ebx,eax
c0012ac9:	0f 84 c6 00 00 00    	je     c0012b95 <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012acf:	8b 38                	mov    edi,DWORD PTR [eax]
c0012ad1:	31 c0                	xor    eax,eax
c0012ad3:	89 fa                	mov    edx,edi
c0012ad5:	81 e2 01 04 00 00    	and    edx,0x401
c0012adb:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012ae1:	0f 85 b0 00 00 00    	jne    c0012b97 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012ae7:	e8 5a d4 ff ff       	call   c000ff46 <Phys::allocatePage()>
c0012aec:	c1 ef 0b             	shr    edi,0xb
c0012aef:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012af1:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012af7:	09 c2                	or     edx,eax
c0012af9:	81 ca 01 08 00 00    	or     edx,0x801
c0012aff:	89 13                	mov    DWORD PTR [ebx],edx
c0012b01:	8b 0d 0c e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e00c
c0012b07:	85 c9                	test   ecx,ecx
c0012b09:	7e 3d                	jle    c0012b48 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0012b0b:	89 f5                	mov    ebp,esi
c0012b0d:	31 db                	xor    ebx,ebx
c0012b0f:	83 ec 0c             	sub    esp,0xc
c0012b12:	57                   	push   edi
c0012b13:	e8 96 f0 ff ff       	call   c0011bae <Virt::swapIDToSector(unsigned long)>
c0012b18:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012b1b:	01 d8                	add    eax,ebx
c0012b1d:	6a 01                	push   0x1
c0012b1f:	31 d2                	xor    edx,edx
c0012b21:	43                   	inc    ebx
c0012b22:	52                   	push   edx
c0012b23:	81 c5 00 02 00 00    	add    ebp,0x200
c0012b29:	50                   	push   eax
c0012b2a:	0f be 05 18 e0 02 c0 	movsx  eax,BYTE PTR ds:0xc002e018
c0012b31:	ff 34 85 7c f5 02 c0 	push   DWORD PTR [eax*4-0x3ffd0a84]
c0012b38:	e8 bf 3c 00 00       	call   c00167fc <LogicalDisk::read(unsigned long long, int, void*)>
c0012b3d:	83 c4 20             	add    esp,0x20
c0012b40:	39 1d 0c e0 02 c0    	cmp    DWORD PTR ds:0xc002e00c,ebx
c0012b46:	7f c7                	jg     c0012b0f <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c0012b48:	a1 e8 f1 02 c0       	mov    eax,ds:0xc002f1e8
c0012b4d:	48                   	dec    eax
c0012b4e:	52                   	push   edx
c0012b4f:	a3 e8 f1 02 c0       	mov    ds:0xc002f1e8,eax
c0012b54:	50                   	push   eax
c0012b55:	56                   	push   esi
c0012b56:	68 65 b3 02 c0       	push   0xc002b365
c0012b5b:	e8 25 03 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0012b60:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012b63:	e8 28 f0 ff ff       	call   c0011b90 <Virt::freeSwapfilePage(unsigned long)>
c0012b68:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c0012b6d:	83 c4 10             	add    esp,0x10
c0012b70:	48                   	dec    eax
c0012b71:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c0012b76:	85 c0                	test   eax,eax
c0012b78:	75 01                	jne    c0012b7b <VAS::tryLoadBackOffDisk(unsigned long)+0xd9>
c0012b7a:	fb                   	sti    
c0012b7b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012b7f:	25 ff 0f 00 00       	and    eax,0xfff
c0012b84:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012b89:	77 14                	ja     c0012b9f <VAS::tryLoadBackOffDisk(unsigned long)+0xfd>
c0012b8b:	0f 20 d8             	mov    eax,cr3
c0012b8e:	0f 22 d8             	mov    cr3,eax
c0012b91:	b0 01                	mov    al,0x1
c0012b93:	eb 02                	jmp    c0012b97 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012b95:	31 c0                	xor    eax,eax
c0012b97:	83 c4 0c             	add    esp,0xc
c0012b9a:	5b                   	pop    ebx
c0012b9b:	5e                   	pop    esi
c0012b9c:	5f                   	pop    edi
c0012b9d:	5d                   	pop    ebp
c0012b9e:	c3                   	ret    
c0012b9f:	83 ec 0c             	sub    esp,0xc
c0012ba2:	68 7a b3 02 c0       	push   0xc002b37a
c0012ba7:	e8 d9 02 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0012bac:	83 c4 10             	add    esp,0x10
c0012baf:	eb da                	jmp    c0012b8b <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c0012bb1:	90                   	nop

c0012bb2 <VAS::scanForEviction()>:
c0012bb2:	57                   	push   edi
c0012bb3:	56                   	push   esi
c0012bb4:	53                   	push   ebx
c0012bb5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012bb9:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012bbc:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012bc2:	75 0e                	jne    c0012bd2 <VAS::scanForEviction()+0x20>
c0012bc4:	89 da                	mov    edx,ebx
c0012bc6:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012bc9:	c1 ea 16             	shr    edx,0x16
c0012bcc:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012bd0:	74 48                	je     c0012c1a <VAS::scanForEviction()+0x68>
c0012bd2:	53                   	push   ebx
c0012bd3:	56                   	push   esi
c0012bd4:	e8 47 f3 ff ff       	call   c0011f20 <VAS::getPageTableEntry(unsigned long)>
c0012bd9:	5a                   	pop    edx
c0012bda:	8b 38                	mov    edi,DWORD PTR [eax]
c0012bdc:	59                   	pop    ecx
c0012bdd:	89 fa                	mov    edx,edi
c0012bdf:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012be5:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012beb:	74 3d                	je     c0012c2a <VAS::scanForEviction()+0x78>
c0012bed:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012bf3:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012bf9:	76 2a                	jbe    c0012c25 <VAS::scanForEviction()+0x73>
c0012bfb:	31 db                	xor    ebx,ebx
c0012bfd:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012c04:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012c0a:	75 c6                	jne    c0012bd2 <VAS::scanForEviction()+0x20>
c0012c0c:	89 da                	mov    edx,ebx
c0012c0e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012c11:	c1 ea 16             	shr    edx,0x16
c0012c14:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012c18:	75 b8                	jne    c0012bd2 <VAS::scanForEviction()+0x20>
c0012c1a:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012c20:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012c23:	eb 97                	jmp    c0012bbc <VAS::scanForEviction()+0xa>
c0012c25:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012c28:	eb 92                	jmp    c0012bbc <VAS::scanForEviction()+0xa>
c0012c2a:	f7 c7 01 00 00 00    	test   edi,0x1
c0012c30:	74 bb                	je     c0012bed <VAS::scanForEviction()+0x3b>
c0012c32:	f7 c7 20 00 00 00    	test   edi,0x20
c0012c38:	74 0a                	je     c0012c44 <VAS::scanForEviction()+0x92>
c0012c3a:	83 e7 df             	and    edi,0xffffffdf
c0012c3d:	89 38                	mov    DWORD PTR [eax],edi
c0012c3f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012c42:	eb a9                	jmp    c0012bed <VAS::scanForEviction()+0x3b>
c0012c44:	83 ec 08             	sub    esp,0x8
c0012c47:	53                   	push   ebx
c0012c48:	56                   	push   esi
c0012c49:	e8 92 fd ff ff       	call   c00129e0 <VAS::evict(unsigned long)>
c0012c4e:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012c55:	83 c4 10             	add    esp,0x10
c0012c58:	89 f8                	mov    eax,edi
c0012c5a:	5b                   	pop    ebx
c0012c5b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012c60:	5e                   	pop    esi
c0012c61:	5f                   	pop    edi
c0012c62:	c3                   	ret    

c0012c63 <mapVASFirstTime>:
c0012c63:	55                   	push   ebp
c0012c64:	57                   	push   edi
c0012c65:	56                   	push   esi
c0012c66:	53                   	push   ebx
c0012c67:	83 ec 0c             	sub    esp,0xc
c0012c6a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c6f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012c72:	4a                   	dec    edx
c0012c73:	0f 84 8e 00 00 00    	je     c0012d07 <mapVASFirstTime+0xa4>
c0012c79:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012c7c:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012c7f:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012c84:	c1 e5 15             	shl    ebp,0x15
c0012c87:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012c8c:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012c92:	29 eb                	sub    ebx,ebp
c0012c94:	29 ee                	sub    esi,ebp
c0012c96:	e8 ab d2 ff ff       	call   c000ff46 <Phys::allocatePage()>
c0012c9b:	83 ec 0c             	sub    esp,0xc
c0012c9e:	68 03 04 00 00       	push   0x403
c0012ca3:	6a 01                	push   0x1
c0012ca5:	53                   	push   ebx
c0012ca6:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012cac:	50                   	push   eax
c0012cad:	57                   	push   edi
c0012cae:	e8 f9 f8 ff ff       	call   c00125ac <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012cb3:	83 c4 20             	add    esp,0x20
c0012cb6:	39 f3                	cmp    ebx,esi
c0012cb8:	75 dc                	jne    c0012c96 <mapVASFirstTime+0x33>
c0012cba:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012cbf:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012cc4:	29 ee                	sub    esi,ebp
c0012cc6:	29 e8                	sub    eax,ebp
c0012cc8:	89 c5                	mov    ebp,eax
c0012cca:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012cce:	19 db                	sbb    ebx,ebx
c0012cd0:	e8 71 d2 ff ff       	call   c000ff46 <Phys::allocatePage()>
c0012cd5:	83 e3 04             	and    ebx,0x4
c0012cd8:	83 ec 0c             	sub    esp,0xc
c0012cdb:	81 c3 03 04 00 00    	add    ebx,0x403
c0012ce1:	53                   	push   ebx
c0012ce2:	6a 01                	push   0x1
c0012ce4:	56                   	push   esi
c0012ce5:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012ceb:	50                   	push   eax
c0012cec:	57                   	push   edi
c0012ced:	e8 ba f8 ff ff       	call   c00125ac <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012cf2:	83 c4 20             	add    esp,0x20
c0012cf5:	39 f5                	cmp    ebp,esi
c0012cf7:	75 d1                	jne    c0012cca <mapVASFirstTime+0x67>
c0012cf9:	0f 20 d8             	mov    eax,cr3
c0012cfc:	0f 22 d8             	mov    cr3,eax
c0012cff:	83 c4 0c             	add    esp,0xc
c0012d02:	5b                   	pop    ebx
c0012d03:	5e                   	pop    esi
c0012d04:	5f                   	pop    edi
c0012d05:	5d                   	pop    ebp
c0012d06:	c3                   	ret    
c0012d07:	83 ec 0c             	sub    esp,0xc
c0012d0a:	68 8a b3 02 c0       	push   0xc002b38a
c0012d0f:	e8 71 01 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0012d14:	83 c4 10             	add    esp,0x10
c0012d17:	83 c4 0c             	add    esp,0xc
c0012d1a:	5b                   	pop    ebx
c0012d1b:	5e                   	pop    esi
c0012d1c:	5f                   	pop    edi
c0012d1d:	5d                   	pop    ebp
c0012d1e:	c3                   	ret    

c0012d1f <__cxa_atexit>:
c0012d1f:	31 c0                	xor    eax,eax
c0012d21:	c3                   	ret    

c0012d22 <__cxa_finalize>:
c0012d22:	c3                   	ret    

c0012d23 <__stack_chk_fail>:
c0012d23:	55                   	push   ebp
c0012d24:	89 e5                	mov    ebp,esp
c0012d26:	83 ec 14             	sub    esp,0x14
c0012d29:	68 a3 b3 02 c0       	push   0xc002b3a3
c0012d2e:	e8 52 01 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0012d33:	58                   	pop    eax
c0012d34:	5a                   	pop    edx
c0012d35:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012d38:	68 f3 b3 02 c0       	push   0xc002b3f3
c0012d3d:	e8 43 01 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0012d42:	59                   	pop    ecx
c0012d43:	58                   	pop    eax
c0012d44:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d47:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d4a:	68 f3 b3 02 c0       	push   0xc002b3f3
c0012d4f:	e8 31 01 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0012d54:	5a                   	pop    edx
c0012d55:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d58:	59                   	pop    ecx
c0012d59:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d5b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d5e:	68 f3 b3 02 c0       	push   0xc002b3f3
c0012d63:	e8 1d 01 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0012d68:	5a                   	pop    edx
c0012d69:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d6c:	59                   	pop    ecx
c0012d6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d71:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d74:	68 f3 b3 02 c0       	push   0xc002b3f3
c0012d79:	e8 07 01 00 00       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0012d7e:	c7 04 24 fb b3 02 c0 	mov    DWORD PTR [esp],0xc002b3fb
c0012d85:	e8 e3 7a 00 00       	call   c001a86d <Krnl::panic(char const*)>
c0012d8a:	83 c4 10             	add    esp,0x10
c0012d8d:	c9                   	leave  
c0012d8e:	c3                   	ret    

c0012d8f <__cxa_pure_virtual>:
c0012d8f:	83 ec 18             	sub    esp,0x18
c0012d92:	68 13 b4 02 c0       	push   0xc002b413
c0012d97:	e8 d1 7a 00 00       	call   c001a86d <Krnl::panic(char const*)>
c0012d9c:	83 c4 1c             	add    esp,0x1c
c0012d9f:	c3                   	ret    

c0012da0 <operator new[](unsigned long)>:
c0012da0:	e9 35 cb ff ff       	jmp    c000f8da <malloc>

c0012da5 <operator delete(void*, unsigned long)>:
c0012da5:	e9 50 cb ff ff       	jmp    c000f8fa <rfree>

c0012daa <operator delete[](void*)>:
c0012daa:	e9 4b cb ff ff       	jmp    c000f8fa <rfree>

c0012daf <operator delete[](void*, unsigned long)>:
c0012daf:	e9 46 cb ff ff       	jmp    c000f8fa <rfree>

c0012db4 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012db4:	57                   	push   edi
c0012db5:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012dba:	56                   	push   esi
c0012dbb:	be 28 b4 02 c0       	mov    esi,0xc002b428
c0012dc0:	53                   	push   ebx
c0012dc1:	83 ec 40             	sub    esp,0x40
c0012dc4:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012dc8:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012dcc:	fc                   	cld    
c0012dcd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012dcf:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012dd3:	83 f9 3e             	cmp    ecx,0x3e
c0012dd6:	7e 05                	jle    c0012ddd <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012dd8:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012ddd:	89 df                	mov    edi,ebx
c0012ddf:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012de3:	eb 02                	jmp    c0012de7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012de5:	89 c7                	mov    edi,eax
c0012de7:	31 d2                	xor    edx,edx
c0012de9:	46                   	inc    esi
c0012dea:	89 f8                	mov    eax,edi
c0012dec:	f7 f1                	div    ecx
c0012dee:	39 cf                	cmp    edi,ecx
c0012df0:	73 f3                	jae    c0012de5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012df2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012df5:	eb 02                	jmp    c0012df9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012df7:	89 c3                	mov    ebx,eax
c0012df9:	31 d2                	xor    edx,edx
c0012dfb:	4e                   	dec    esi
c0012dfc:	89 d8                	mov    eax,ebx
c0012dfe:	f7 f1                	div    ecx
c0012e00:	39 cb                	cmp    ebx,ecx
c0012e02:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012e06:	88 16                	mov    BYTE PTR [esi],dl
c0012e08:	73 ed                	jae    c0012df7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012e0a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012e0e:	83 c4 40             	add    esp,0x40
c0012e11:	5b                   	pop    ebx
c0012e12:	5e                   	pop    esi
c0012e13:	5f                   	pop    edi
c0012e14:	c3                   	ret    

c0012e15 <Dbg::logc(char)>:
c0012e15:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e19:	ba fd 03 00 00       	mov    edx,0x3fd
c0012e1e:	ec                   	in     al,dx
c0012e1f:	a8 20                	test   al,0x20
c0012e21:	74 fb                	je     c0012e1e <Dbg::logc(char)+0x9>
c0012e23:	ba f8 03 00 00       	mov    edx,0x3f8
c0012e28:	88 c8                	mov    al,cl
c0012e2a:	ee                   	out    dx,al
c0012e2b:	c3                   	ret    

c0012e2c <Dbg::logs(char*)>:
c0012e2c:	53                   	push   ebx
c0012e2d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012e31:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e34:	84 c0                	test   al,al
c0012e36:	74 0f                	je     c0012e47 <Dbg::logs(char*)+0x1b>
c0012e38:	50                   	push   eax
c0012e39:	43                   	inc    ebx
c0012e3a:	e8 d6 ff ff ff       	call   c0012e15 <Dbg::logc(char)>
c0012e3f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e42:	5a                   	pop    edx
c0012e43:	84 c0                	test   al,al
c0012e45:	75 f1                	jne    c0012e38 <Dbg::logs(char*)+0xc>
c0012e47:	5b                   	pop    ebx
c0012e48:	c3                   	ret    

c0012e49 <Dbg::logWriteInt(unsigned int)>:
c0012e49:	83 ec 10             	sub    esp,0x10
c0012e4c:	6a 0a                	push   0xa
c0012e4e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012e52:	50                   	push   eax
c0012e53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e57:	e8 58 ff ff ff       	call   c0012db4 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012e5c:	50                   	push   eax
c0012e5d:	e8 ca ff ff ff       	call   c0012e2c <Dbg::logs(char*)>
c0012e62:	83 c4 20             	add    esp,0x20
c0012e65:	c3                   	ret    

c0012e66 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012e66:	83 ec 10             	sub    esp,0x10
c0012e69:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e6d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012e71:	50                   	push   eax
c0012e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e76:	e8 39 ff ff ff       	call   c0012db4 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012e7b:	50                   	push   eax
c0012e7c:	e8 ab ff ff ff       	call   c0012e2c <Dbg::logs(char*)>
c0012e81:	83 c4 20             	add    esp,0x20
c0012e84:	c3                   	ret    

c0012e85 <Dbg::kprintf(char const*, ...)>:
c0012e85:	55                   	push   ebp
c0012e86:	57                   	push   edi
c0012e87:	56                   	push   esi
c0012e88:	53                   	push   ebx
c0012e89:	83 ec 0c             	sub    esp,0xc
c0012e8c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012e90:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012e94:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012e98:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012e9b:	84 c0                	test   al,al
c0012e9d:	74 4a                	je     c0012ee9 <Dbg::kprintf(char const*, ...)+0x64>
c0012e9f:	31 db                	xor    ebx,ebx
c0012ea1:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012ea4:	3c 25                	cmp    al,0x25
c0012ea6:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012ea9:	0f 85 e4 00 00 00    	jne    c0012f93 <Dbg::kprintf(char const*, ...)+0x10e>
c0012eaf:	83 c3 02             	add    ebx,0x2
c0012eb2:	8a 07                	mov    al,BYTE PTR [edi]
c0012eb4:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012eb7:	83 e8 25             	sub    eax,0x25
c0012eba:	3c 53                	cmp    al,0x53
c0012ebc:	0f 87 ba 00 00 00    	ja     c0012f7c <Dbg::kprintf(char const*, ...)+0xf7>
c0012ec2:	0f b6 c0             	movzx  eax,al
c0012ec5:	ff 24 85 68 b4 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4b98]
c0012ecc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ed0:	89 c8                	mov    eax,ecx
c0012ed2:	83 c1 04             	add    ecx,0x4
c0012ed5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012ed9:	ff 30                	push   DWORD PTR [eax]
c0012edb:	e8 4c ff ff ff       	call   c0012e2c <Dbg::logs(char*)>
c0012ee0:	58                   	pop    eax
c0012ee1:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012ee5:	84 c0                	test   al,al
c0012ee7:	75 b8                	jne    c0012ea1 <Dbg::kprintf(char const*, ...)+0x1c>
c0012ee9:	83 c4 0c             	add    esp,0xc
c0012eec:	5b                   	pop    ebx
c0012eed:	5e                   	pop    esi
c0012eee:	5f                   	pop    edi
c0012eef:	5d                   	pop    ebp
c0012ef0:	c3                   	ret    
c0012ef1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012ef5:	89 d0                	mov    eax,edx
c0012ef7:	83 c2 04             	add    edx,0x4
c0012efa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012efe:	ff 30                	push   DWORD PTR [eax]
c0012f00:	e8 44 ff ff ff       	call   c0012e49 <Dbg::logWriteInt(unsigned int)>
c0012f05:	58                   	pop    eax
c0012f06:	eb d9                	jmp    c0012ee1 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f08:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f0c:	89 d0                	mov    eax,edx
c0012f0e:	83 c2 04             	add    edx,0x4
c0012f11:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012f14:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f18:	50                   	push   eax
c0012f19:	e8 f7 fe ff ff       	call   c0012e15 <Dbg::logc(char)>
c0012f1e:	58                   	pop    eax
c0012f1f:	eb c0                	jmp    c0012ee1 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f21:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f25:	89 c8                	mov    eax,ecx
c0012f27:	83 c1 04             	add    ecx,0x4
c0012f2a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f2e:	ff 30                	push   DWORD PTR [eax]
c0012f30:	e8 14 ff ff ff       	call   c0012e49 <Dbg::logWriteInt(unsigned int)>
c0012f35:	5f                   	pop    edi
c0012f36:	eb a9                	jmp    c0012ee1 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f38:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f3c:	89 c8                	mov    eax,ecx
c0012f3e:	83 c1 04             	add    ecx,0x4
c0012f41:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f45:	6a 10                	push   0x10
c0012f47:	ff 30                	push   DWORD PTR [eax]
c0012f49:	e8 18 ff ff ff       	call   c0012e66 <Dbg::logWriteIntBase(unsigned int, int)>
c0012f4e:	59                   	pop    ecx
c0012f4f:	5f                   	pop    edi
c0012f50:	eb 8f                	jmp    c0012ee1 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f52:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f56:	89 d0                	mov    eax,edx
c0012f58:	83 c2 08             	add    edx,0x8
c0012f5b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f5f:	6a 10                	push   0x10
c0012f61:	ff 30                	push   DWORD PTR [eax]
c0012f63:	e8 fe fe ff ff       	call   c0012e66 <Dbg::logWriteIntBase(unsigned int, int)>
c0012f68:	58                   	pop    eax
c0012f69:	5a                   	pop    edx
c0012f6a:	e9 72 ff ff ff       	jmp    c0012ee1 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f6f:	6a 25                	push   0x25
c0012f71:	e8 9f fe ff ff       	call   c0012e15 <Dbg::logc(char)>
c0012f76:	58                   	pop    eax
c0012f77:	e9 65 ff ff ff       	jmp    c0012ee1 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f7c:	6a 25                	push   0x25
c0012f7e:	e8 92 fe ff ff       	call   c0012e15 <Dbg::logc(char)>
c0012f83:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012f86:	50                   	push   eax
c0012f87:	e8 89 fe ff ff       	call   c0012e15 <Dbg::logc(char)>
c0012f8c:	5a                   	pop    edx
c0012f8d:	59                   	pop    ecx
c0012f8e:	e9 4e ff ff ff       	jmp    c0012ee1 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f93:	50                   	push   eax
c0012f94:	89 eb                	mov    ebx,ebp
c0012f96:	e8 7a fe ff ff       	call   c0012e15 <Dbg::logc(char)>
c0012f9b:	89 fd                	mov    ebp,edi
c0012f9d:	58                   	pop    eax
c0012f9e:	e9 3e ff ff ff       	jmp    c0012ee1 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fa3:	90                   	nop

c0012fa4 <File::read(unsigned long long, void*, int*)>:
c0012fa4:	53                   	push   ebx
c0012fa5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012fa9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012fad:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012fb4:	3c 19                	cmp    al,0x19
c0012fb6:	77 35                	ja     c0012fed <File::read(unsigned long long, void*, int*)+0x49>
c0012fb8:	8b 04 85 80 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0980]
c0012fbf:	85 c0                	test   eax,eax
c0012fc1:	74 2a                	je     c0012fed <File::read(unsigned long long, void*, int*)+0x49>
c0012fc3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012fc9:	85 c0                	test   eax,eax
c0012fcb:	74 20                	je     c0012fed <File::read(unsigned long long, void*, int*)+0x49>
c0012fcd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012fd1:	74 21                	je     c0012ff4 <File::read(unsigned long long, void*, int*)+0x50>
c0012fd3:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012fd5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012fd9:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012fdf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012fe3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012fe7:	5b                   	pop    ebx
c0012fe8:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012feb:	ff e0                	jmp    eax
c0012fed:	b8 0b 00 00 00       	mov    eax,0xb
c0012ff2:	eb 05                	jmp    c0012ff9 <File::read(unsigned long long, void*, int*)+0x55>
c0012ff4:	b8 05 00 00 00       	mov    eax,0x5
c0012ff9:	5b                   	pop    ebx
c0012ffa:	c3                   	ret    
c0012ffb:	90                   	nop

c0012ffc <File::write(unsigned long long, void*, int*)>:
c0012ffc:	53                   	push   ebx
c0012ffd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013001:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013005:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001300c:	3c 19                	cmp    al,0x19
c001300e:	77 35                	ja     c0013045 <File::write(unsigned long long, void*, int*)+0x49>
c0013010:	8b 04 85 80 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0980]
c0013017:	85 c0                	test   eax,eax
c0013019:	74 2a                	je     c0013045 <File::write(unsigned long long, void*, int*)+0x49>
c001301b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013021:	85 c0                	test   eax,eax
c0013023:	74 20                	je     c0013045 <File::write(unsigned long long, void*, int*)+0x49>
c0013025:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013029:	74 21                	je     c001304c <File::write(unsigned long long, void*, int*)+0x50>
c001302b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001302d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013031:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013037:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001303b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001303f:	5b                   	pop    ebx
c0013040:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0013043:	ff e0                	jmp    eax
c0013045:	b8 0b 00 00 00       	mov    eax,0xb
c001304a:	eb 05                	jmp    c0013051 <File::write(unsigned long long, void*, int*)+0x55>
c001304c:	b8 05 00 00 00       	mov    eax,0x5
c0013051:	5b                   	pop    ebx
c0013052:	c3                   	ret    
c0013053:	90                   	nop

c0013054 <Directory::read(unsigned long long, void*, int*)>:
c0013054:	53                   	push   ebx
c0013055:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013059:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001305d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013064:	3c 19                	cmp    al,0x19
c0013066:	77 35                	ja     c001309d <Directory::read(unsigned long long, void*, int*)+0x49>
c0013068:	8b 04 85 80 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0980]
c001306f:	85 c0                	test   eax,eax
c0013071:	74 2a                	je     c001309d <Directory::read(unsigned long long, void*, int*)+0x49>
c0013073:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013079:	85 c0                	test   eax,eax
c001307b:	74 20                	je     c001309d <Directory::read(unsigned long long, void*, int*)+0x49>
c001307d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013081:	74 21                	je     c00130a4 <Directory::read(unsigned long long, void*, int*)+0x50>
c0013083:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013085:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013089:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001308f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013093:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013097:	5b                   	pop    ebx
c0013098:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c001309b:	ff e0                	jmp    eax
c001309d:	b8 0b 00 00 00       	mov    eax,0xb
c00130a2:	eb 05                	jmp    c00130a9 <Directory::read(unsigned long long, void*, int*)+0x55>
c00130a4:	b8 05 00 00 00       	mov    eax,0x5
c00130a9:	5b                   	pop    ebx
c00130aa:	c3                   	ret    
c00130ab:	90                   	nop

c00130ac <Directory::write(unsigned long long, void*, int*)>:
c00130ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130b0:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00130b7:	b8 0b 00 00 00       	mov    eax,0xb
c00130bc:	80 fa 19             	cmp    dl,0x19
c00130bf:	77 18                	ja     c00130d9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00130c1:	8b 14 95 80 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0980]
c00130c8:	85 d2                	test   edx,edx
c00130ca:	74 0d                	je     c00130d9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00130cc:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00130d3:	19 c0                	sbb    eax,eax
c00130d5:	83 e0 0a             	and    eax,0xa
c00130d8:	40                   	inc    eax
c00130d9:	c3                   	ret    

c00130da <File::isAtty()>:
c00130da:	31 c0                	xor    eax,eax
c00130dc:	c3                   	ret    
c00130dd:	90                   	nop

c00130de <Directory::isAtty()>:
c00130de:	31 c0                	xor    eax,eax
c00130e0:	c3                   	ret    
c00130e1:	90                   	nop

c00130e2 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00130e2:	b8 0a 00 00 00       	mov    eax,0xa
c00130e7:	c3                   	ret    

c00130e8 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00130e8:	b8 0a 00 00 00       	mov    eax,0xa
c00130ed:	c3                   	ret    

c00130ee <Filesystem::getFileFirstSector(char const*)>:
c00130ee:	31 c0                	xor    eax,eax
c00130f0:	31 d2                	xor    edx,edx
c00130f2:	c3                   	ret    
c00130f3:	90                   	nop

c00130f4 <File::~File()>:
c00130f4:	83 ec 0c             	sub    esp,0xc
c00130f7:	ba 28 b6 02 c0       	mov    edx,0xc002b628
c00130fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013100:	89 10                	mov    DWORD PTR [eax],edx
c0013102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013106:	83 ec 0c             	sub    esp,0xc
c0013109:	50                   	push   eax
c001310a:	e8 0f e7 ff ff       	call   c001181e <UnixFile::~UnixFile()>
c001310f:	83 c4 10             	add    esp,0x10
c0013112:	90                   	nop
c0013113:	83 c4 0c             	add    esp,0xc
c0013116:	c3                   	ret    
c0013117:	90                   	nop

c0013118 <File::~File()>:
c0013118:	83 ec 0c             	sub    esp,0xc
c001311b:	83 ec 0c             	sub    esp,0xc
c001311e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013122:	e8 cd ff ff ff       	call   c00130f4 <File::~File()>
c0013127:	83 c4 10             	add    esp,0x10
c001312a:	83 ec 08             	sub    esp,0x8
c001312d:	68 14 01 00 00       	push   0x114
c0013132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013136:	e8 6a fc ff ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c001313b:	83 c4 10             	add    esp,0x10
c001313e:	83 c4 0c             	add    esp,0xc
c0013141:	c3                   	ret    

c0013142 <Directory::~Directory()>:
c0013142:	83 ec 0c             	sub    esp,0xc
c0013145:	ba 44 b6 02 c0       	mov    edx,0xc002b644
c001314a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001314e:	89 10                	mov    DWORD PTR [eax],edx
c0013150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013154:	83 ec 0c             	sub    esp,0xc
c0013157:	50                   	push   eax
c0013158:	e8 c1 e6 ff ff       	call   c001181e <UnixFile::~UnixFile()>
c001315d:	83 c4 10             	add    esp,0x10
c0013160:	90                   	nop
c0013161:	83 c4 0c             	add    esp,0xc
c0013164:	c3                   	ret    
c0013165:	90                   	nop

c0013166 <Directory::~Directory()>:
c0013166:	83 ec 0c             	sub    esp,0xc
c0013169:	83 ec 0c             	sub    esp,0xc
c001316c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013170:	e8 cd ff ff ff       	call   c0013142 <Directory::~Directory()>
c0013175:	83 c4 10             	add    esp,0x10
c0013178:	83 ec 08             	sub    esp,0x8
c001317b:	68 14 01 00 00       	push   0x114
c0013180:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013184:	e8 1c fc ff ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c0013189:	83 c4 10             	add    esp,0x10
c001318c:	83 c4 0c             	add    esp,0xc
c001318f:	c3                   	ret    

c0013190 <Filesystem::Filesystem()>:
c0013190:	ba c0 b5 02 c0       	mov    edx,0xc002b5c0
c0013195:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013199:	89 10                	mov    DWORD PTR [eax],edx
c001319b:	8b 15 f4 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f1f4
c00131a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131a5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00131a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131ac:	a3 f4 f1 02 c0       	mov    ds:0xc002f1f4,eax
c00131b1:	90                   	nop
c00131b2:	c3                   	ret    
c00131b3:	90                   	nop

c00131b4 <Filesystem::~Filesystem()>:
c00131b4:	ba c0 b5 02 c0       	mov    edx,0xc002b5c0
c00131b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131bd:	89 10                	mov    DWORD PTR [eax],edx
c00131bf:	90                   	nop
c00131c0:	c3                   	ret    
c00131c1:	90                   	nop

c00131c2 <Filesystem::~Filesystem()>:
c00131c2:	83 ec 0c             	sub    esp,0xc
c00131c5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00131c9:	e8 e6 ff ff ff       	call   c00131b4 <Filesystem::~Filesystem()>
c00131ce:	83 c4 04             	add    esp,0x4
c00131d1:	83 ec 08             	sub    esp,0x8
c00131d4:	6a 08                	push   0x8
c00131d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131da:	e8 c6 fb ff ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c00131df:	83 c4 10             	add    esp,0x10
c00131e2:	83 c4 0c             	add    esp,0xc
c00131e5:	c3                   	ret    

c00131e6 <Fs::getcwd(Process*, char*, int)>:
c00131e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00131ea:	31 c0                	xor    eax,eax
c00131ec:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00131ef:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00131f3:	7d 15                	jge    c001320a <Fs::getcwd(Process*, char*, int)+0x24>
c00131f5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00131f9:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0013200:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0013203:	84 c9                	test   cl,cl
c0013205:	74 06                	je     c001320d <Fs::getcwd(Process*, char*, int)+0x27>
c0013207:	40                   	inc    eax
c0013208:	eb e2                	jmp    c00131ec <Fs::getcwd(Process*, char*, int)+0x6>
c001320a:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001320d:	31 c0                	xor    eax,eax
c001320f:	c3                   	ret    

c0013210 <Fs::initVFS()>:
c0013210:	83 ec 18             	sub    esp,0x18
c0013213:	6a 08                	push   0x8
c0013215:	e8 c0 c6 ff ff       	call   c000f8da <malloc>
c001321a:	89 04 24             	mov    DWORD PTR [esp],eax
c001321d:	e8 34 e6 00 00       	call   c0021856 <FAT::FAT()>
c0013222:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013229:	e8 ac c6 ff ff       	call   c000f8da <malloc>
c001322e:	89 04 24             	mov    DWORD PTR [esp],eax
c0013231:	e8 5c f8 00 00       	call   c0022a92 <ISO9660::ISO9660()>
c0013236:	83 c4 1c             	add    esp,0x1c
c0013239:	c3                   	ret    

c001323a <Fs::standardiseFiles(char*, char const*, char const*)>:
c001323a:	55                   	push   ebp
c001323b:	57                   	push   edi
c001323c:	56                   	push   esi
c001323d:	53                   	push   ebx
c001323e:	81 ec 10 04 00 00    	sub    esp,0x410
c0013244:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c001324b:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0013252:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0013259:	68 00 04 00 00       	push   0x400
c001325e:	6a 00                	push   0x0
c0013260:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013264:	56                   	push   esi
c0013265:	e8 02 d5 fe ff       	call   c000076c <memset>
c001326a:	83 c4 10             	add    esp,0x10
c001326d:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0013271:	75 0b                	jne    c001327e <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0013273:	50                   	push   eax
c0013274:	50                   	push   eax
c0013275:	57                   	push   edi
c0013276:	56                   	push   esi
c0013277:	e8 ac d5 fe ff       	call   c0000828 <strcpy>
c001327c:	eb 41                	jmp    c00132bf <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c001327e:	8a 07                	mov    al,BYTE PTR [edi]
c0013280:	3c 5c                	cmp    al,0x5c
c0013282:	74 04                	je     c0013288 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0013284:	3c 2f                	cmp    al,0x2f
c0013286:	75 18                	jne    c00132a0 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0013288:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001328b:	3c 60                	cmp    al,0x60
c001328d:	7e 03                	jle    c0013292 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c001328f:	83 e8 20             	sub    eax,0x20
c0013292:	88 04 24             	mov    BYTE PTR [esp],al
c0013295:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001329c:	50                   	push   eax
c001329d:	50                   	push   eax
c001329e:	eb 18                	jmp    c00132b8 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c00132a0:	50                   	push   eax
c00132a1:	50                   	push   eax
c00132a2:	55                   	push   ebp
c00132a3:	56                   	push   esi
c00132a4:	e8 7f d5 fe ff       	call   c0000828 <strcpy>
c00132a9:	5a                   	pop    edx
c00132aa:	59                   	pop    ecx
c00132ab:	68 d1 cd 02 c0       	push   0xc002cdd1
c00132b0:	56                   	push   esi
c00132b1:	e8 b2 d6 fe ff       	call   c0000968 <strcat>
c00132b6:	5d                   	pop    ebp
c00132b7:	58                   	pop    eax
c00132b8:	57                   	push   edi
c00132b9:	56                   	push   esi
c00132ba:	e8 a9 d6 fe ff       	call   c0000968 <strcat>
c00132bf:	83 c4 10             	add    esp,0x10
c00132c2:	8a 04 24             	mov    al,BYTE PTR [esp]
c00132c5:	3c 60                	cmp    al,0x60
c00132c7:	7e 03                	jle    c00132cc <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c00132c9:	83 e8 20             	sub    eax,0x20
c00132cc:	88 04 24             	mov    BYTE PTR [esp],al
c00132cf:	88 03                	mov    BYTE PTR [ebx],al
c00132d1:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00132d8:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c00132de:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00132e2:	bf 03 00 00 00       	mov    edi,0x3
c00132e7:	b8 03 00 00 00       	mov    eax,0x3
c00132ec:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00132ef:	84 d2                	test   dl,dl
c00132f1:	0f 84 91 00 00 00    	je     c0013388 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c00132f7:	8d 4f 01             	lea    ecx,[edi+0x1]
c00132fa:	80 fa 5c             	cmp    dl,0x5c
c00132fd:	74 05                	je     c0013304 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c00132ff:	80 fa 2f             	cmp    dl,0x2f
c0013302:	75 12                	jne    c0013316 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013304:	89 c5                	mov    ebp,eax
c0013306:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001330b:	74 09                	je     c0013316 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c001330d:	40                   	inc    eax
c001330e:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0013312:	89 cf                	mov    edi,ecx
c0013314:	eb d6                	jmp    c00132ec <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0013316:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c001331b:	75 5b                	jne    c0013378 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001331d:	80 fa 2e             	cmp    dl,0x2e
c0013320:	75 56                	jne    c0013378 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013322:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0013326:	74 19                	je     c0013341 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0013328:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c001332d:	74 53                	je     c0013382 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c001332f:	89 f9                	mov    ecx,edi
c0013331:	41                   	inc    ecx
c0013332:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013335:	80 fa 2f             	cmp    dl,0x2f
c0013338:	74 f7                	je     c0013331 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c001333a:	80 fa 5c             	cmp    dl,0x5c
c001333d:	74 f2                	je     c0013331 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c001333f:	eb d1                	jmp    c0013312 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013341:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013346:	74 3a                	je     c0013382 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013348:	83 f8 03             	cmp    eax,0x3
c001334b:	74 c5                	je     c0013312 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001334d:	41                   	inc    ecx
c001334e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013351:	80 fa 2f             	cmp    dl,0x2f
c0013354:	74 f7                	je     c001334d <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013356:	80 fa 5c             	cmp    dl,0x5c
c0013359:	74 f2                	je     c001334d <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c001335b:	48                   	dec    eax
c001335c:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013360:	75 06                	jne    c0013368 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013362:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013366:	eb f3                	jmp    c001335b <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0013368:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001336c:	74 07                	je     c0013375 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c001336e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013372:	48                   	dec    eax
c0013373:	eb f3                	jmp    c0013368 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013375:	40                   	inc    eax
c0013376:	eb 9a                	jmp    c0013312 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013378:	80 fa 2f             	cmp    dl,0x2f
c001337b:	74 95                	je     c0013312 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001337d:	80 fa 5c             	cmp    dl,0x5c
c0013380:	74 90                	je     c0013312 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013382:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0013385:	40                   	inc    eax
c0013386:	eb 8a                	jmp    c0013312 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013388:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001338c:	83 ec 0c             	sub    esp,0xc
c001338f:	53                   	push   ebx
c0013390:	e8 f3 d3 fe ff       	call   c0000788 <strlen>
c0013395:	83 c4 10             	add    esp,0x10
c0013398:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001339d:	75 26                	jne    c00133c5 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c001339f:	83 ec 0c             	sub    esp,0xc
c00133a2:	53                   	push   ebx
c00133a3:	e8 e0 d3 fe ff       	call   c0000788 <strlen>
c00133a8:	83 c4 10             	add    esp,0x10
c00133ab:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c00133b0:	74 26                	je     c00133d8 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c00133b2:	83 ec 0c             	sub    esp,0xc
c00133b5:	53                   	push   ebx
c00133b6:	e8 cd d3 fe ff       	call   c0000788 <strlen>
c00133bb:	83 c4 10             	add    esp,0x10
c00133be:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00133c3:	eb c7                	jmp    c001338c <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c00133c5:	83 ec 0c             	sub    esp,0xc
c00133c8:	53                   	push   ebx
c00133c9:	e8 ba d3 fe ff       	call   c0000788 <strlen>
c00133ce:	83 c4 10             	add    esp,0x10
c00133d1:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00133d6:	74 c7                	je     c001339f <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c00133d8:	81 c4 0c 04 00 00    	add    esp,0x40c
c00133de:	5b                   	pop    ebx
c00133df:	5e                   	pop    esi
c00133e0:	5f                   	pop    edi
c00133e1:	5d                   	pop    ebp
c00133e2:	c3                   	ret    
c00133e3:	90                   	nop

c00133e4 <File::File(char const*, Process*)>:
c00133e4:	83 ec 0c             	sub    esp,0xc
c00133e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133eb:	83 ec 08             	sub    esp,0x8
c00133ee:	6a 00                	push   0x0
c00133f0:	50                   	push   eax
c00133f1:	e8 46 e2 ff ff       	call   c001163c <UnixFile::UnixFile(int)>
c00133f6:	83 c4 10             	add    esp,0x10
c00133f9:	ba 28 b6 02 c0       	mov    edx,0xc002b628
c00133fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013402:	89 10                	mov    DWORD PTR [eax],edx
c0013404:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013408:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001340e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013412:	83 c0 0d             	add    eax,0xd
c0013415:	83 ec 04             	sub    esp,0x4
c0013418:	52                   	push   edx
c0013419:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001341d:	50                   	push   eax
c001341e:	e8 17 fe ff ff       	call   c001323a <Fs::standardiseFiles(char*, char const*, char const*)>
c0013423:	83 c4 10             	add    esp,0x10
c0013426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001342a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001342d:	8d 50 bf             	lea    edx,[eax-0x41]
c0013430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013434:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001343a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001343e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013442:	90                   	nop
c0013443:	83 c4 0c             	add    esp,0xc
c0013446:	c3                   	ret    
c0013447:	90                   	nop

c0013448 <File::open(FileOpenMode)>:
c0013448:	53                   	push   ebx
c0013449:	b8 0b 00 00 00       	mov    eax,0xb
c001344e:	83 ec 08             	sub    esp,0x8
c0013451:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013455:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001345c:	80 fa 19             	cmp    dl,0x19
c001345f:	77 40                	ja     c00134a1 <File::open(FileOpenMode)+0x59>
c0013461:	8b 14 95 80 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0980]
c0013468:	85 d2                	test   edx,edx
c001346a:	74 35                	je     c00134a1 <File::open(FileOpenMode)+0x59>
c001346c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013472:	85 d2                	test   edx,edx
c0013474:	74 2b                	je     c00134a1 <File::open(FileOpenMode)+0x59>
c0013476:	b8 06 00 00 00       	mov    eax,0x6
c001347b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001347f:	75 20                	jne    c00134a1 <File::open(FileOpenMode)+0x59>
c0013481:	8b 02                	mov    eax,DWORD PTR [edx]
c0013483:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013489:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001348d:	51                   	push   ecx
c001348e:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013491:	51                   	push   ecx
c0013492:	52                   	push   edx
c0013493:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013496:	83 c4 10             	add    esp,0x10
c0013499:	85 c0                	test   eax,eax
c001349b:	75 04                	jne    c00134a1 <File::open(FileOpenMode)+0x59>
c001349d:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00134a1:	83 c4 08             	add    esp,0x8
c00134a4:	5b                   	pop    ebx
c00134a5:	c3                   	ret    

c00134a6 <File::close()>:
c00134a6:	53                   	push   ebx
c00134a7:	b8 0b 00 00 00       	mov    eax,0xb
c00134ac:	83 ec 08             	sub    esp,0x8
c00134af:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00134b3:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00134ba:	80 fa 19             	cmp    dl,0x19
c00134bd:	77 41                	ja     c0013500 <File::close()+0x5a>
c00134bf:	8b 1c 95 80 f6 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0980]
c00134c6:	85 db                	test   ebx,ebx
c00134c8:	74 36                	je     c0013500 <File::close()+0x5a>
c00134ca:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00134d1:	74 2d                	je     c0013500 <File::close()+0x5a>
c00134d3:	b8 05 00 00 00       	mov    eax,0x5
c00134d8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00134dc:	74 22                	je     c0013500 <File::close()+0x5a>
c00134de:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00134e2:	8b 04 95 80 f6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0980]
c00134e9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00134ef:	53                   	push   ebx
c00134f0:	53                   	push   ebx
c00134f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00134f3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00134f9:	50                   	push   eax
c00134fa:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00134fd:	83 c4 10             	add    esp,0x10
c0013500:	83 c4 08             	add    esp,0x8
c0013503:	5b                   	pop    ebx
c0013504:	c3                   	ret    
c0013505:	90                   	nop

c0013506 <File::seek(unsigned long long)>:
c0013506:	56                   	push   esi
c0013507:	53                   	push   ebx
c0013508:	b8 0b 00 00 00       	mov    eax,0xb
c001350d:	51                   	push   ecx
c001350e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013512:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013516:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001351d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013521:	80 fa 19             	cmp    dl,0x19
c0013524:	77 31                	ja     c0013557 <File::seek(unsigned long long)+0x51>
c0013526:	8b 14 95 80 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0980]
c001352d:	85 d2                	test   edx,edx
c001352f:	74 26                	je     c0013557 <File::seek(unsigned long long)+0x51>
c0013531:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013537:	85 d2                	test   edx,edx
c0013539:	74 1c                	je     c0013557 <File::seek(unsigned long long)+0x51>
c001353b:	b8 05 00 00 00       	mov    eax,0x5
c0013540:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0013544:	74 11                	je     c0013557 <File::seek(unsigned long long)+0x51>
c0013546:	8b 02                	mov    eax,DWORD PTR [edx]
c0013548:	53                   	push   ebx
c0013549:	51                   	push   ecx
c001354a:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0013550:	52                   	push   edx
c0013551:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013554:	83 c4 10             	add    esp,0x10
c0013557:	5a                   	pop    edx
c0013558:	5b                   	pop    ebx
c0013559:	5e                   	pop    esi
c001355a:	c3                   	ret    
c001355b:	90                   	nop

c001355c <File::tell(unsigned long long*)>:
c001355c:	83 ec 0c             	sub    esp,0xc
c001355f:	b8 0b 00 00 00       	mov    eax,0xb
c0013564:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013568:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001356f:	80 fa 19             	cmp    dl,0x19
c0013572:	77 34                	ja     c00135a8 <File::tell(unsigned long long*)+0x4c>
c0013574:	8b 14 95 80 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0980]
c001357b:	85 d2                	test   edx,edx
c001357d:	74 29                	je     c00135a8 <File::tell(unsigned long long*)+0x4c>
c001357f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013585:	85 d2                	test   edx,edx
c0013587:	74 1f                	je     c00135a8 <File::tell(unsigned long long*)+0x4c>
c0013589:	b8 05 00 00 00       	mov    eax,0x5
c001358e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013592:	74 14                	je     c00135a8 <File::tell(unsigned long long*)+0x4c>
c0013594:	50                   	push   eax
c0013595:	8b 02                	mov    eax,DWORD PTR [edx]
c0013597:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001359b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00135a1:	52                   	push   edx
c00135a2:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00135a5:	83 c4 10             	add    esp,0x10
c00135a8:	83 c4 0c             	add    esp,0xc
c00135ab:	c3                   	ret    

c00135ac <File::rewind()>:
c00135ac:	83 ec 10             	sub    esp,0x10
c00135af:	6a 00                	push   0x0
c00135b1:	6a 00                	push   0x0
c00135b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135b7:	e8 4a ff ff ff       	call   c0013506 <File::seek(unsigned long long)>
c00135bc:	83 c4 1c             	add    esp,0x1c
c00135bf:	c3                   	ret    

c00135c0 <File::unlink()>:
c00135c0:	83 ec 0c             	sub    esp,0xc
c00135c3:	b8 0b 00 00 00       	mov    eax,0xb
c00135c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135cc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135d3:	80 f9 19             	cmp    cl,0x19
c00135d6:	77 2f                	ja     c0013607 <File::unlink()+0x47>
c00135d8:	8b 0c 8d 80 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0980]
c00135df:	85 c9                	test   ecx,ecx
c00135e1:	74 24                	je     c0013607 <File::unlink()+0x47>
c00135e3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135e9:	85 c9                	test   ecx,ecx
c00135eb:	74 1a                	je     c0013607 <File::unlink()+0x47>
c00135ed:	b8 06 00 00 00       	mov    eax,0x6
c00135f2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00135f6:	75 0f                	jne    c0013607 <File::unlink()+0x47>
c00135f8:	83 c2 0d             	add    edx,0xd
c00135fb:	50                   	push   eax
c00135fc:	50                   	push   eax
c00135fd:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135ff:	52                   	push   edx
c0013600:	51                   	push   ecx
c0013601:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013604:	83 c4 10             	add    esp,0x10
c0013607:	83 c4 0c             	add    esp,0xc
c001360a:	c3                   	ret    
c001360b:	90                   	nop

c001360c <File::rename(char const*)>:
c001360c:	83 ec 0c             	sub    esp,0xc
c001360f:	b8 0b 00 00 00       	mov    eax,0xb
c0013614:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013618:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001361f:	80 f9 19             	cmp    cl,0x19
c0013622:	77 32                	ja     c0013656 <File::rename(char const*)+0x4a>
c0013624:	8b 0c 8d 80 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0980]
c001362b:	85 c9                	test   ecx,ecx
c001362d:	74 27                	je     c0013656 <File::rename(char const*)+0x4a>
c001362f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013635:	85 c9                	test   ecx,ecx
c0013637:	74 1d                	je     c0013656 <File::rename(char const*)+0x4a>
c0013639:	b8 06 00 00 00       	mov    eax,0x6
c001363e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013642:	75 12                	jne    c0013656 <File::rename(char const*)+0x4a>
c0013644:	83 c2 0d             	add    edx,0xd
c0013647:	50                   	push   eax
c0013648:	8b 01                	mov    eax,DWORD PTR [ecx]
c001364a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001364e:	52                   	push   edx
c001364f:	51                   	push   ecx
c0013650:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013653:	83 c4 10             	add    esp,0x10
c0013656:	83 c4 0c             	add    esp,0xc
c0013659:	c3                   	ret    

c001365a <File::chfatattr(unsigned char, unsigned char)>:
c001365a:	57                   	push   edi
c001365b:	b8 0b 00 00 00       	mov    eax,0xb
c0013660:	56                   	push   esi
c0013661:	53                   	push   ebx
c0013662:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013666:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001366a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013671:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013675:	80 f9 19             	cmp    cl,0x19
c0013678:	77 37                	ja     c00136b1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001367a:	8b 0c 8d 80 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0980]
c0013681:	85 c9                	test   ecx,ecx
c0013683:	74 2c                	je     c00136b1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013685:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001368b:	85 c9                	test   ecx,ecx
c001368d:	74 22                	je     c00136b1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001368f:	b8 06 00 00 00       	mov    eax,0x6
c0013694:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013698:	75 17                	jne    c00136b1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001369a:	8b 39                	mov    edi,DWORD PTR [ecx]
c001369c:	89 f0                	mov    eax,esi
c001369e:	83 c2 0d             	add    edx,0xd
c00136a1:	0f b6 f0             	movzx  esi,al
c00136a4:	0f b6 db             	movzx  ebx,bl
c00136a7:	56                   	push   esi
c00136a8:	53                   	push   ebx
c00136a9:	52                   	push   edx
c00136aa:	51                   	push   ecx
c00136ab:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00136ae:	83 c4 10             	add    esp,0x10
c00136b1:	5b                   	pop    ebx
c00136b2:	5e                   	pop    esi
c00136b3:	5f                   	pop    edi
c00136b4:	c3                   	ret    
c00136b5:	90                   	nop

c00136b6 <File::exists()>:
c00136b6:	83 ec 0c             	sub    esp,0xc
c00136b9:	31 c0                	xor    eax,eax
c00136bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136bf:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136c6:	80 f9 19             	cmp    cl,0x19
c00136c9:	77 24                	ja     c00136ef <File::exists()+0x39>
c00136cb:	8b 0c 8d 80 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0980]
c00136d2:	85 c9                	test   ecx,ecx
c00136d4:	74 19                	je     c00136ef <File::exists()+0x39>
c00136d6:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136dc:	85 c9                	test   ecx,ecx
c00136de:	74 0f                	je     c00136ef <File::exists()+0x39>
c00136e0:	83 c2 0d             	add    edx,0xd
c00136e3:	50                   	push   eax
c00136e4:	50                   	push   eax
c00136e5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136e7:	52                   	push   edx
c00136e8:	51                   	push   ecx
c00136e9:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00136ec:	83 c4 10             	add    esp,0x10
c00136ef:	83 c4 0c             	add    esp,0xc
c00136f2:	c3                   	ret    
c00136f3:	90                   	nop

c00136f4 <File::stat(unsigned long long*, bool*)>:
c00136f4:	56                   	push   esi
c00136f5:	53                   	push   ebx
c00136f6:	50                   	push   eax
c00136f7:	b8 0b 00 00 00       	mov    eax,0xb
c00136fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013700:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013704:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001370b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001370f:	80 f9 19             	cmp    cl,0x19
c0013712:	77 3d                	ja     c0013751 <File::stat(unsigned long long*, bool*)+0x5d>
c0013714:	8b 0c 8d 80 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0980]
c001371b:	85 c9                	test   ecx,ecx
c001371d:	74 32                	je     c0013751 <File::stat(unsigned long long*, bool*)+0x5d>
c001371f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013725:	85 c9                	test   ecx,ecx
c0013727:	74 28                	je     c0013751 <File::stat(unsigned long long*, bool*)+0x5d>
c0013729:	8b 01                	mov    eax,DWORD PTR [ecx]
c001372b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001372f:	74 13                	je     c0013744 <File::stat(unsigned long long*, bool*)+0x50>
c0013731:	83 ec 04             	sub    esp,0x4
c0013734:	56                   	push   esi
c0013735:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001373b:	51                   	push   ecx
c001373c:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001373f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013742:	eb 0a                	jmp    c001374e <File::stat(unsigned long long*, bool*)+0x5a>
c0013744:	53                   	push   ebx
c0013745:	83 c2 0d             	add    edx,0xd
c0013748:	56                   	push   esi
c0013749:	52                   	push   edx
c001374a:	51                   	push   ecx
c001374b:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001374e:	83 c4 10             	add    esp,0x10
c0013751:	5a                   	pop    edx
c0013752:	5b                   	pop    ebx
c0013753:	5e                   	pop    esi
c0013754:	c3                   	ret    

c0013755 <Fs::setcwd(Process*, char*)>:
c0013755:	55                   	push   ebp
c0013756:	57                   	push   edi
c0013757:	56                   	push   esi
c0013758:	53                   	push   ebx
c0013759:	81 ec 20 02 00 00    	sub    esp,0x220
c001375f:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013766:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001376c:	57                   	push   edi
c001376d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013774:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013778:	56                   	push   esi
c0013779:	e8 bc fa ff ff       	call   c001323a <Fs::standardiseFiles(char*, char const*, char const*)>
c001377e:	89 34 24             	mov    DWORD PTR [esp],esi
c0013781:	e8 02 d0 fe ff       	call   c0000788 <strlen>
c0013786:	83 c4 10             	add    esp,0x10
c0013789:	83 f8 02             	cmp    eax,0x2
c001378c:	77 17                	ja     c00137a5 <Fs::setcwd(Process*, char*)+0x50>
c001378e:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013793:	83 e8 41             	sub    eax,0x41
c0013796:	83 f8 19             	cmp    eax,0x19
c0013799:	76 24                	jbe    c00137bf <Fs::setcwd(Process*, char*)+0x6a>
c001379b:	b8 03 00 00 00       	mov    eax,0x3
c00137a0:	e9 e0 00 00 00       	jmp    c0013885 <Fs::setcwd(Process*, char*)+0x130>
c00137a5:	83 ec 0c             	sub    esp,0xc
c00137a8:	56                   	push   esi
c00137a9:	e8 da cf fe ff       	call   c0000788 <strlen>
c00137ae:	83 c4 10             	add    esp,0x10
c00137b1:	83 f8 03             	cmp    eax,0x3
c00137b4:	75 34                	jne    c00137ea <Fs::setcwd(Process*, char*)+0x95>
c00137b6:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00137bb:	75 2d                	jne    c00137ea <Fs::setcwd(Process*, char*)+0x95>
c00137bd:	eb cf                	jmp    c001378e <Fs::setcwd(Process*, char*)+0x39>
c00137bf:	8b 14 85 80 f6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0980]
c00137c6:	b8 05 00 00 00       	mov    eax,0x5
c00137cb:	85 d2                	test   edx,edx
c00137cd:	0f 84 b2 00 00 00    	je     c0013885 <Fs::setcwd(Process*, char*)+0x130>
c00137d3:	b8 06 00 00 00       	mov    eax,0x6
c00137d8:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00137df:	0f 85 92 00 00 00    	jne    c0013877 <Fs::setcwd(Process*, char*)+0x122>
c00137e5:	e9 9b 00 00 00       	jmp    c0013885 <Fs::setcwd(Process*, char*)+0x130>
c00137ea:	83 ec 0c             	sub    esp,0xc
c00137ed:	68 14 01 00 00       	push   0x114
c00137f2:	e8 e3 c0 ff ff       	call   c000f8da <malloc>
c00137f7:	83 c4 0c             	add    esp,0xc
c00137fa:	89 c3                	mov    ebx,eax
c00137fc:	55                   	push   ebp
c00137fd:	56                   	push   esi
c00137fe:	50                   	push   eax
c00137ff:	e8 e0 fb ff ff       	call   c00133e4 <File::File(char const*, Process*)>
c0013804:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013809:	83 c4 0c             	add    esp,0xc
c001380c:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013810:	50                   	push   eax
c0013811:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013815:	50                   	push   eax
c0013816:	53                   	push   ebx
c0013817:	e8 d8 fe ff ff       	call   c00136f4 <File::stat(unsigned long long*, bool*)>
c001381c:	83 c4 10             	add    esp,0x10
c001381f:	83 f8 02             	cmp    eax,0x2
c0013822:	74 04                	je     c0013828 <Fs::setcwd(Process*, char*)+0xd3>
c0013824:	85 c0                	test   eax,eax
c0013826:	74 1c                	je     c0013844 <Fs::setcwd(Process*, char*)+0xef>
c0013828:	b8 01 00 00 00       	mov    eax,0x1
c001382d:	85 db                	test   ebx,ebx
c001382f:	74 54                	je     c0013885 <Fs::setcwd(Process*, char*)+0x130>
c0013831:	83 ec 0c             	sub    esp,0xc
c0013834:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013836:	53                   	push   ebx
c0013837:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001383a:	83 c4 10             	add    esp,0x10
c001383d:	b8 01 00 00 00       	mov    eax,0x1
c0013842:	eb 41                	jmp    c0013885 <Fs::setcwd(Process*, char*)+0x130>
c0013844:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013849:	75 1c                	jne    c0013867 <Fs::setcwd(Process*, char*)+0x112>
c001384b:	b8 02 00 00 00       	mov    eax,0x2
c0013850:	85 db                	test   ebx,ebx
c0013852:	74 31                	je     c0013885 <Fs::setcwd(Process*, char*)+0x130>
c0013854:	83 ec 0c             	sub    esp,0xc
c0013857:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013859:	53                   	push   ebx
c001385a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001385d:	83 c4 10             	add    esp,0x10
c0013860:	b8 02 00 00 00       	mov    eax,0x2
c0013865:	eb 1e                	jmp    c0013885 <Fs::setcwd(Process*, char*)+0x130>
c0013867:	85 db                	test   ebx,ebx
c0013869:	74 0c                	je     c0013877 <Fs::setcwd(Process*, char*)+0x122>
c001386b:	83 ec 0c             	sub    esp,0xc
c001386e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013870:	53                   	push   ebx
c0013871:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013874:	83 c4 10             	add    esp,0x10
c0013877:	50                   	push   eax
c0013878:	50                   	push   eax
c0013879:	56                   	push   esi
c001387a:	57                   	push   edi
c001387b:	e8 a8 cf fe ff       	call   c0000828 <strcpy>
c0013880:	83 c4 10             	add    esp,0x10
c0013883:	31 c0                	xor    eax,eax
c0013885:	81 c4 1c 02 00 00    	add    esp,0x21c
c001388b:	5b                   	pop    ebx
c001388c:	5e                   	pop    esi
c001388d:	5f                   	pop    edi
c001388e:	5d                   	pop    ebp
c001388f:	c3                   	ret    

c0013890 <Directory::Directory(char const*, Process*)>:
c0013890:	83 ec 0c             	sub    esp,0xc
c0013893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013897:	83 ec 08             	sub    esp,0x8
c001389a:	6a 00                	push   0x0
c001389c:	50                   	push   eax
c001389d:	e8 9a dd ff ff       	call   c001163c <UnixFile::UnixFile(int)>
c00138a2:	83 c4 10             	add    esp,0x10
c00138a5:	ba 44 b6 02 c0       	mov    edx,0xc002b644
c00138aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138ae:	89 10                	mov    DWORD PTR [eax],edx
c00138b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00138b4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00138ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138be:	83 c0 0d             	add    eax,0xd
c00138c1:	83 ec 04             	sub    esp,0x4
c00138c4:	52                   	push   edx
c00138c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138c9:	50                   	push   eax
c00138ca:	e8 6b f9 ff ff       	call   c001323a <Fs::standardiseFiles(char*, char const*, char const*)>
c00138cf:	83 c4 10             	add    esp,0x10
c00138d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138d6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00138d9:	8d 50 bf             	lea    edx,[eax-0x41]
c00138dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138e0:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00138e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138ea:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00138ee:	90                   	nop
c00138ef:	83 c4 0c             	add    esp,0xc
c00138f2:	c3                   	ret    
c00138f3:	90                   	nop

c00138f4 <Directory::open()>:
c00138f4:	53                   	push   ebx
c00138f5:	b8 0b 00 00 00       	mov    eax,0xb
c00138fa:	83 ec 08             	sub    esp,0x8
c00138fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013901:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013908:	80 fa 19             	cmp    dl,0x19
c001390b:	77 3d                	ja     c001394a <Directory::open()+0x56>
c001390d:	8b 14 95 80 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0980]
c0013914:	85 d2                	test   edx,edx
c0013916:	74 32                	je     c001394a <Directory::open()+0x56>
c0013918:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001391e:	85 d2                	test   edx,edx
c0013920:	74 28                	je     c001394a <Directory::open()+0x56>
c0013922:	b8 06 00 00 00       	mov    eax,0x6
c0013927:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001392b:	75 1d                	jne    c001394a <Directory::open()+0x56>
c001392d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013933:	50                   	push   eax
c0013934:	8b 02                	mov    eax,DWORD PTR [edx]
c0013936:	51                   	push   ecx
c0013937:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001393a:	51                   	push   ecx
c001393b:	52                   	push   edx
c001393c:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c001393f:	83 c4 10             	add    esp,0x10
c0013942:	85 c0                	test   eax,eax
c0013944:	75 04                	jne    c001394a <Directory::open()+0x56>
c0013946:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001394a:	83 c4 08             	add    esp,0x8
c001394d:	5b                   	pop    ebx
c001394e:	c3                   	ret    
c001394f:	90                   	nop

c0013950 <Directory::close()>:
c0013950:	53                   	push   ebx
c0013951:	b8 0b 00 00 00       	mov    eax,0xb
c0013956:	83 ec 08             	sub    esp,0x8
c0013959:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001395d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013964:	80 fa 19             	cmp    dl,0x19
c0013967:	77 41                	ja     c00139aa <Directory::close()+0x5a>
c0013969:	8b 1c 95 80 f6 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0980]
c0013970:	85 db                	test   ebx,ebx
c0013972:	74 36                	je     c00139aa <Directory::close()+0x5a>
c0013974:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001397b:	74 2d                	je     c00139aa <Directory::close()+0x5a>
c001397d:	b8 05 00 00 00       	mov    eax,0x5
c0013982:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013986:	74 22                	je     c00139aa <Directory::close()+0x5a>
c0013988:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001398c:	8b 04 95 80 f6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0980]
c0013993:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013999:	53                   	push   ebx
c001399a:	53                   	push   ebx
c001399b:	8b 10                	mov    edx,DWORD PTR [eax]
c001399d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00139a3:	50                   	push   eax
c00139a4:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00139a7:	83 c4 10             	add    esp,0x10
c00139aa:	83 c4 08             	add    esp,0x8
c00139ad:	5b                   	pop    ebx
c00139ae:	c3                   	ret    
c00139af:	90                   	nop

c00139b0 <Directory::unlink()>:
c00139b0:	83 ec 0c             	sub    esp,0xc
c00139b3:	b8 0b 00 00 00       	mov    eax,0xb
c00139b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139bc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00139c3:	80 f9 19             	cmp    cl,0x19
c00139c6:	77 2f                	ja     c00139f7 <Directory::unlink()+0x47>
c00139c8:	8b 0c 8d 80 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0980]
c00139cf:	85 c9                	test   ecx,ecx
c00139d1:	74 24                	je     c00139f7 <Directory::unlink()+0x47>
c00139d3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00139d9:	85 c9                	test   ecx,ecx
c00139db:	74 1a                	je     c00139f7 <Directory::unlink()+0x47>
c00139dd:	b8 06 00 00 00       	mov    eax,0x6
c00139e2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00139e6:	75 0f                	jne    c00139f7 <Directory::unlink()+0x47>
c00139e8:	83 c2 0d             	add    edx,0xd
c00139eb:	50                   	push   eax
c00139ec:	50                   	push   eax
c00139ed:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139ef:	52                   	push   edx
c00139f0:	51                   	push   ecx
c00139f1:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00139f4:	83 c4 10             	add    esp,0x10
c00139f7:	83 c4 0c             	add    esp,0xc
c00139fa:	c3                   	ret    
c00139fb:	90                   	nop

c00139fc <Directory::rename(char const*)>:
c00139fc:	83 ec 0c             	sub    esp,0xc
c00139ff:	b8 0b 00 00 00       	mov    eax,0xb
c0013a04:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a08:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a0f:	80 f9 19             	cmp    cl,0x19
c0013a12:	77 32                	ja     c0013a46 <Directory::rename(char const*)+0x4a>
c0013a14:	8b 0c 8d 80 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0980]
c0013a1b:	85 c9                	test   ecx,ecx
c0013a1d:	74 27                	je     c0013a46 <Directory::rename(char const*)+0x4a>
c0013a1f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a25:	85 c9                	test   ecx,ecx
c0013a27:	74 1d                	je     c0013a46 <Directory::rename(char const*)+0x4a>
c0013a29:	b8 06 00 00 00       	mov    eax,0x6
c0013a2e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a32:	75 12                	jne    c0013a46 <Directory::rename(char const*)+0x4a>
c0013a34:	83 c2 0d             	add    edx,0xd
c0013a37:	50                   	push   eax
c0013a38:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a3a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a3e:	52                   	push   edx
c0013a3f:	51                   	push   ecx
c0013a40:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013a43:	83 c4 10             	add    esp,0x10
c0013a46:	83 c4 0c             	add    esp,0xc
c0013a49:	c3                   	ret    

c0013a4a <Directory::exists()>:
c0013a4a:	83 ec 0c             	sub    esp,0xc
c0013a4d:	31 c0                	xor    eax,eax
c0013a4f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a53:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a5a:	80 f9 19             	cmp    cl,0x19
c0013a5d:	77 24                	ja     c0013a83 <Directory::exists()+0x39>
c0013a5f:	8b 0c 8d 80 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0980]
c0013a66:	85 c9                	test   ecx,ecx
c0013a68:	74 19                	je     c0013a83 <Directory::exists()+0x39>
c0013a6a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a70:	85 c9                	test   ecx,ecx
c0013a72:	74 0f                	je     c0013a83 <Directory::exists()+0x39>
c0013a74:	83 c2 0d             	add    edx,0xd
c0013a77:	50                   	push   eax
c0013a78:	50                   	push   eax
c0013a79:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a7b:	52                   	push   edx
c0013a7c:	51                   	push   ecx
c0013a7d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013a80:	83 c4 10             	add    esp,0x10
c0013a83:	83 c4 0c             	add    esp,0xc
c0013a86:	c3                   	ret    
c0013a87:	90                   	nop

c0013a88 <Directory::read(dirent*)>:
c0013a88:	83 ec 1c             	sub    esp,0x1c
c0013a8b:	b8 0b 00 00 00       	mov    eax,0xb
c0013a90:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013a94:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013a9b:	80 fa 19             	cmp    dl,0x19
c0013a9e:	77 30                	ja     c0013ad0 <Directory::read(dirent*)+0x48>
c0013aa0:	8b 14 95 80 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0980]
c0013aa7:	85 d2                	test   edx,edx
c0013aa9:	74 25                	je     c0013ad0 <Directory::read(dirent*)+0x48>
c0013aab:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013ab2:	74 1c                	je     c0013ad0 <Directory::read(dirent*)+0x48>
c0013ab4:	83 ec 0c             	sub    esp,0xc
c0013ab7:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ab9:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013abd:	52                   	push   edx
c0013abe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013ac2:	6a 00                	push   0x0
c0013ac4:	68 10 01 00 00       	push   0x110
c0013ac9:	51                   	push   ecx
c0013aca:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013acd:	83 c4 20             	add    esp,0x20
c0013ad0:	83 c4 1c             	add    esp,0x1c
c0013ad3:	c3                   	ret    

c0013ad4 <Directory::create()>:
c0013ad4:	83 ec 0c             	sub    esp,0xc
c0013ad7:	b8 0b 00 00 00       	mov    eax,0xb
c0013adc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ae0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013ae7:	80 f9 19             	cmp    cl,0x19
c0013aea:	77 2f                	ja     c0013b1b <Directory::create()+0x47>
c0013aec:	8b 0c 8d 80 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0980]
c0013af3:	85 c9                	test   ecx,ecx
c0013af5:	74 24                	je     c0013b1b <Directory::create()+0x47>
c0013af7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013afd:	85 c9                	test   ecx,ecx
c0013aff:	74 1a                	je     c0013b1b <Directory::create()+0x47>
c0013b01:	b8 06 00 00 00       	mov    eax,0x6
c0013b06:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b0a:	75 0f                	jne    c0013b1b <Directory::create()+0x47>
c0013b0c:	83 c2 0d             	add    edx,0xd
c0013b0f:	50                   	push   eax
c0013b10:	50                   	push   eax
c0013b11:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b13:	52                   	push   edx
c0013b14:	51                   	push   ecx
c0013b15:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013b18:	83 c4 10             	add    esp,0x10
c0013b1b:	83 c4 0c             	add    esp,0xc
c0013b1e:	c3                   	ret    
c0013b1f:	90                   	nop

c0013b20 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013b20:	b8 0a 00 00 00       	mov    eax,0xa
c0013b25:	c3                   	ret    

c0013b26 <Bus::Bus(char const*)>:
c0013b26:	83 ec 0c             	sub    esp,0xc
c0013b29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b2d:	83 ec 08             	sub    esp,0x8
c0013b30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b34:	50                   	push   eax
c0013b35:	e8 5c 09 00 00       	call   c0014496 <Device::Device(char const*)>
c0013b3a:	83 c4 10             	add    esp,0x10
c0013b3d:	ba 60 b6 02 c0       	mov    edx,0xc002b660
c0013b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b46:	89 10                	mov    DWORD PTR [eax],edx
c0013b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b4c:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013b56:	90                   	nop
c0013b57:	83 c4 0c             	add    esp,0xc
c0013b5a:	c3                   	ret    
c0013b5b:	90                   	nop

c0013b5c <Bus::~Bus()>:
c0013b5c:	83 ec 0c             	sub    esp,0xc
c0013b5f:	ba 60 b6 02 c0       	mov    edx,0xc002b660
c0013b64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b68:	89 10                	mov    DWORD PTR [eax],edx
c0013b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b6e:	83 ec 0c             	sub    esp,0xc
c0013b71:	50                   	push   eax
c0013b72:	e8 15 06 00 00       	call   c001418c <Device::~Device()>
c0013b77:	83 c4 10             	add    esp,0x10
c0013b7a:	90                   	nop
c0013b7b:	83 c4 0c             	add    esp,0xc
c0013b7e:	c3                   	ret    
c0013b7f:	90                   	nop

c0013b80 <Bus::~Bus()>:
c0013b80:	83 ec 0c             	sub    esp,0xc
c0013b83:	83 ec 0c             	sub    esp,0xc
c0013b86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b8a:	e8 cd ff ff ff       	call   c0013b5c <Bus::~Bus()>
c0013b8f:	83 c4 10             	add    esp,0x10
c0013b92:	83 ec 08             	sub    esp,0x8
c0013b95:	68 58 01 00 00       	push   0x158
c0013b9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b9e:	e8 02 f2 ff ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c0013ba3:	83 c4 10             	add    esp,0x10
c0013ba6:	83 c4 0c             	add    esp,0xc
c0013ba9:	c3                   	ret    

c0013baa <Buzzer::Buzzer(char const*)>:
c0013baa:	83 ec 0c             	sub    esp,0xc
c0013bad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bb1:	83 ec 08             	sub    esp,0x8
c0013bb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bb8:	50                   	push   eax
c0013bb9:	e8 d8 08 00 00       	call   c0014496 <Device::Device(char const*)>
c0013bbe:	83 c4 10             	add    esp,0x10
c0013bc1:	ba 8c b6 02 c0       	mov    edx,0xc002b68c
c0013bc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bca:	89 10                	mov    DWORD PTR [eax],edx
c0013bcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bd0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013bda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bde:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013be8:	90                   	nop
c0013be9:	83 c4 0c             	add    esp,0xc
c0013bec:	c3                   	ret    
c0013bed:	90                   	nop

c0013bee <Buzzer::~Buzzer()>:
c0013bee:	83 ec 0c             	sub    esp,0xc
c0013bf1:	ba 8c b6 02 c0       	mov    edx,0xc002b68c
c0013bf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bfa:	89 10                	mov    DWORD PTR [eax],edx
c0013bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c00:	83 ec 0c             	sub    esp,0xc
c0013c03:	50                   	push   eax
c0013c04:	e8 83 05 00 00       	call   c001418c <Device::~Device()>
c0013c09:	83 c4 10             	add    esp,0x10
c0013c0c:	90                   	nop
c0013c0d:	83 c4 0c             	add    esp,0xc
c0013c10:	c3                   	ret    
c0013c11:	90                   	nop

c0013c12 <Buzzer::~Buzzer()>:
c0013c12:	83 ec 0c             	sub    esp,0xc
c0013c15:	83 ec 0c             	sub    esp,0xc
c0013c18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c1c:	e8 cd ff ff ff       	call   c0013bee <Buzzer::~Buzzer()>
c0013c21:	83 c4 10             	add    esp,0x10
c0013c24:	83 ec 08             	sub    esp,0x8
c0013c27:	68 5c 01 00 00       	push   0x15c
c0013c2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c30:	e8 70 f1 ff ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c0013c35:	83 c4 10             	add    esp,0x10
c0013c38:	83 c4 0c             	add    esp,0xc
c0013c3b:	c3                   	ret    

c0013c3c <Buzzer::stop()>:
c0013c3c:	83 ec 14             	sub    esp,0x14
c0013c3f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c43:	8b 10                	mov    edx,DWORD PTR [eax]
c0013c45:	6a 00                	push   0x0
c0013c47:	50                   	push   eax
c0013c48:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013c4b:	83 c4 1c             	add    esp,0x1c
c0013c4e:	c3                   	ret    

c0013c4f <beepThread(void*)>:
c0013c4f:	53                   	push   ebx
c0013c50:	83 ec 08             	sub    esp,0x8
c0013c53:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c0013c58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c5c:	48                   	dec    eax
c0013c5d:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c0013c62:	75 01                	jne    c0013c65 <beepThread(void*)+0x16>
c0013c64:	fb                   	sti    
c0013c65:	50                   	push   eax
c0013c66:	50                   	push   eax
c0013c67:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013c6c:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013c72:	52                   	push   edx
c0013c73:	50                   	push   eax
c0013c74:	e8 aa ac 00 00       	call   c001e923 <nanoSleep(unsigned long long)>
c0013c79:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c7c:	e8 bb ff ff ff       	call   c0013c3c <Buzzer::stop()>
c0013c81:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013c89:	83 c4 18             	add    esp,0x18
c0013c8c:	5b                   	pop    ebx
c0013c8d:	e9 8d ab 00 00       	jmp    c001e81f <blockTask(TaskState)>

c0013c92 <Buzzer::beep(int, int, bool)>:
c0013c92:	57                   	push   edi
c0013c93:	56                   	push   esi
c0013c94:	53                   	push   ebx
c0013c95:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c99:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013c9d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ca1:	52                   	push   edx
c0013ca2:	52                   	push   edx
c0013ca3:	8b 06                	mov    eax,DWORD PTR [esi]
c0013ca5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ca9:	56                   	push   esi
c0013caa:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013cad:	83 c4 10             	add    esp,0x10
c0013cb0:	89 f8                	mov    eax,edi
c0013cb2:	84 c0                	test   al,al
c0013cb4:	74 1f                	je     c0013cd5 <Buzzer::beep(int, int, bool)+0x43>
c0013cb6:	50                   	push   eax
c0013cb7:	50                   	push   eax
c0013cb8:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013cbe:	99                   	cdq    
c0013cbf:	52                   	push   edx
c0013cc0:	50                   	push   eax
c0013cc1:	e8 5d ac 00 00       	call   c001e923 <nanoSleep(unsigned long long)>
c0013cc6:	83 c4 10             	add    esp,0x10
c0013cc9:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013ccd:	5b                   	pop    ebx
c0013cce:	5e                   	pop    esi
c0013ccf:	5f                   	pop    edi
c0013cd0:	e9 67 ff ff ff       	jmp    c0013c3c <Buzzer::stop()>
c0013cd5:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013cdb:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c0013ce0:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013ce8:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013cec:	c7 44 24 14 4f 3c 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013c4f
c0013cf4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013cf8:	5b                   	pop    ebx
c0013cf9:	5e                   	pop    esi
c0013cfa:	5f                   	pop    edi
c0013cfb:	e9 dc a6 00 00       	jmp    c001e3dc <Process::createThread(void (*)(void*), void*, int)>

c0013d00 <User::loadClockSettings(int)>:
c0013d00:	53                   	push   ebx
c0013d01:	83 ec 14             	sub    esp,0x14
c0013d04:	68 14 01 00 00       	push   0x114
c0013d09:	e8 cc bb ff ff       	call   c000f8da <malloc>
c0013d0e:	83 c4 0c             	add    esp,0xc
c0013d11:	89 c3                	mov    ebx,eax
c0013d13:	ff 35 d0 25 03 c0    	push   DWORD PTR ds:0xc00325d0
c0013d19:	68 b4 b6 02 c0       	push   0xc002b6b4
c0013d1e:	50                   	push   eax
c0013d1f:	e8 c0 f6 ff ff       	call   c00133e4 <File::File(char const*, Process*)>
c0013d24:	58                   	pop    eax
c0013d25:	5a                   	pop    edx
c0013d26:	6a 01                	push   0x1
c0013d28:	53                   	push   ebx
c0013d29:	e8 1a f7 ff ff       	call   c0013448 <File::open(FileOpenMode)>
c0013d2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d31:	e8 70 f7 ff ff       	call   c00134a6 <File::close()>
c0013d36:	83 c4 10             	add    esp,0x10
c0013d39:	85 db                	test   ebx,ebx
c0013d3b:	74 0f                	je     c0013d4c <User::loadClockSettings(int)+0x4c>
c0013d3d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d3f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013d43:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013d46:	83 c4 08             	add    esp,0x8
c0013d49:	5b                   	pop    ebx
c0013d4a:	ff e0                	jmp    eax
c0013d4c:	83 c4 08             	add    esp,0x8
c0013d4f:	5b                   	pop    ebx
c0013d50:	c3                   	ret    
c0013d51:	90                   	nop

c0013d52 <Clock::Clock(char const*)>:
c0013d52:	83 ec 0c             	sub    esp,0xc
c0013d55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d59:	83 ec 08             	sub    esp,0x8
c0013d5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d60:	50                   	push   eax
c0013d61:	e8 30 07 00 00       	call   c0014496 <Device::Device(char const*)>
c0013d66:	83 c4 10             	add    esp,0x10
c0013d69:	ba dc b6 02 c0       	mov    edx,0xc002b6dc
c0013d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d72:	89 10                	mov    DWORD PTR [eax],edx
c0013d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d78:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013d82:	90                   	nop
c0013d83:	83 c4 0c             	add    esp,0xc
c0013d86:	c3                   	ret    
c0013d87:	90                   	nop

c0013d88 <Clock::~Clock()>:
c0013d88:	83 ec 0c             	sub    esp,0xc
c0013d8b:	ba dc b6 02 c0       	mov    edx,0xc002b6dc
c0013d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d94:	89 10                	mov    DWORD PTR [eax],edx
c0013d96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d9a:	83 ec 0c             	sub    esp,0xc
c0013d9d:	50                   	push   eax
c0013d9e:	e8 e9 03 00 00       	call   c001418c <Device::~Device()>
c0013da3:	83 c4 10             	add    esp,0x10
c0013da6:	90                   	nop
c0013da7:	83 c4 0c             	add    esp,0xc
c0013daa:	c3                   	ret    
c0013dab:	90                   	nop

c0013dac <Clock::~Clock()>:
c0013dac:	83 ec 0c             	sub    esp,0xc
c0013daf:	83 ec 0c             	sub    esp,0xc
c0013db2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013db6:	e8 cd ff ff ff       	call   c0013d88 <Clock::~Clock()>
c0013dbb:	83 c4 10             	add    esp,0x10
c0013dbe:	83 ec 08             	sub    esp,0x8
c0013dc1:	68 58 01 00 00       	push   0x158
c0013dc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dca:	e8 d6 ef ff ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c0013dcf:	83 c4 10             	add    esp,0x10
c0013dd2:	83 c4 0c             	add    esp,0xc
c0013dd5:	c3                   	ret    

c0013dd6 <Clock::timeInSecondsLocal()>:
c0013dd6:	53                   	push   ebx
c0013dd7:	83 ec 14             	sub    esp,0x14
c0013dda:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013dde:	8b 10                	mov    edx,DWORD PTR [eax]
c0013de0:	50                   	push   eax
c0013de1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013de4:	0f b6 0d fc f1 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f1fc
c0013deb:	03 0d 00 f2 02 c0    	add    ecx,DWORD PTR ds:0xc002f200
c0013df1:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013df7:	89 cb                	mov    ebx,ecx
c0013df9:	c1 fb 1f             	sar    ebx,0x1f
c0013dfc:	01 c8                	add    eax,ecx
c0013dfe:	11 da                	adc    edx,ebx
c0013e00:	83 c4 10             	add    esp,0x10
c0013e03:	31 c9                	xor    ecx,ecx
c0013e05:	80 3d fd f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f1fd,0x0
c0013e0c:	74 05                	je     c0013e13 <Clock::timeInSecondsLocal()+0x3d>
c0013e0e:	b9 08 07 00 00       	mov    ecx,0x708
c0013e13:	31 db                	xor    ebx,ebx
c0013e15:	01 c8                	add    eax,ecx
c0013e17:	11 da                	adc    edx,ebx
c0013e19:	83 c4 08             	add    esp,0x8
c0013e1c:	5b                   	pop    ebx
c0013e1d:	c3                   	ret    

c0013e1e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013e1e:	57                   	push   edi
c0013e1f:	56                   	push   esi
c0013e20:	53                   	push   ebx
c0013e21:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013e25:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e29:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013e2b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e2f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013e32:	0f b6 05 fc f1 02 c0 	movzx  eax,BYTE PTR ds:0xc002f1fc
c0013e39:	03 05 00 f2 02 c0    	add    eax,DWORD PTR ds:0xc002f200
c0013e3f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013e45:	99                   	cdq    
c0013e46:	29 c6                	sub    esi,eax
c0013e48:	19 d7                	sbb    edi,edx
c0013e4a:	89 f0                	mov    eax,esi
c0013e4c:	89 fa                	mov    edx,edi
c0013e4e:	31 f6                	xor    esi,esi
c0013e50:	80 3d fd f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f1fd,0x0
c0013e57:	74 05                	je     c0013e5e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013e59:	be 08 07 00 00       	mov    esi,0x708
c0013e5e:	31 ff                	xor    edi,edi
c0013e60:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013e64:	29 f0                	sub    eax,esi
c0013e66:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013e6a:	19 fa                	sbb    edx,edi
c0013e6c:	89 d8                	mov    eax,ebx
c0013e6e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013e72:	5b                   	pop    ebx
c0013e73:	5e                   	pop    esi
c0013e74:	5f                   	pop    edi
c0013e75:	ff e0                	jmp    eax

c0013e77 <datetimeToSeconds(datetime_t)>:
c0013e77:	55                   	push   ebp
c0013e78:	57                   	push   edi
c0013e79:	56                   	push   esi
c0013e7a:	53                   	push   ebx
c0013e7b:	83 ec 14             	sub    esp,0x14
c0013e7e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013e82:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013e86:	89 d3                	mov    ebx,edx
c0013e88:	0f b6 c6             	movzx  eax,dh
c0013e8b:	c1 eb 10             	shr    ebx,0x10
c0013e8e:	48                   	dec    eax
c0013e8f:	66 81 eb 6c 07       	sub    bx,0x76c
c0013e94:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013e98:	0f b6 f5             	movzx  esi,ch
c0013e9b:	89 cf                	mov    edi,ecx
c0013e9d:	6b f6 3c             	imul   esi,esi,0x3c
c0013ea0:	c1 ef 10             	shr    edi,0x10
c0013ea3:	0f b6 c9             	movzx  ecx,cl
c0013ea6:	89 f8                	mov    eax,edi
c0013ea8:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013eae:	0f b6 f8             	movzx  edi,al
c0013eb1:	0f b6 d2             	movzx  edx,dl
c0013eb4:	01 fe                	add    esi,edi
c0013eb6:	01 f1                	add    ecx,esi
c0013eb8:	0f b7 f3             	movzx  esi,bx
c0013ebb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013ebf:	c1 f9 1f             	sar    ecx,0x1f
c0013ec2:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013ec7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013ecb:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013ed0:	8b 0c 8d 20 b7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd48e0]
c0013ed7:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013edb:	76 29                	jbe    c0013f06 <datetimeToSeconds(datetime_t)+0x8f>
c0013edd:	f6 c3 03             	test   bl,0x3
c0013ee0:	75 24                	jne    c0013f06 <datetimeToSeconds(datetime_t)+0x8f>
c0013ee2:	31 d2                	xor    edx,edx
c0013ee4:	bf 64 00 00 00       	mov    edi,0x64
c0013ee9:	89 d8                	mov    eax,ebx
c0013eeb:	66 f7 f7             	div    di
c0013eee:	66 85 d2             	test   dx,dx
c0013ef1:	75 12                	jne    c0013f05 <datetimeToSeconds(datetime_t)+0x8e>
c0013ef3:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013ef9:	bf 90 01 00 00       	mov    edi,0x190
c0013efe:	99                   	cdq    
c0013eff:	f7 ff                	idiv   edi
c0013f01:	85 d2                	test   edx,edx
c0013f03:	75 01                	jne    c0013f06 <datetimeToSeconds(datetime_t)+0x8f>
c0013f05:	41                   	inc    ecx
c0013f06:	66 83 fb 46          	cmp    bx,0x46
c0013f0a:	76 45                	jbe    c0013f51 <datetimeToSeconds(datetime_t)+0xda>
c0013f0c:	bb 46 00 00 00       	mov    ebx,0x46
c0013f11:	bf 64 00 00 00       	mov    edi,0x64
c0013f16:	bd 90 01 00 00       	mov    ebp,0x190
c0013f1b:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f20:	f6 c3 03             	test   bl,0x3
c0013f23:	75 23                	jne    c0013f48 <datetimeToSeconds(datetime_t)+0xd1>
c0013f25:	89 d8                	mov    eax,ebx
c0013f27:	99                   	cdq    
c0013f28:	f7 ff                	idiv   edi
c0013f2a:	b8 6e 01 00 00       	mov    eax,0x16e
c0013f2f:	85 d2                	test   edx,edx
c0013f31:	75 15                	jne    c0013f48 <datetimeToSeconds(datetime_t)+0xd1>
c0013f33:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013f39:	99                   	cdq    
c0013f3a:	f7 fd                	idiv   ebp
c0013f3c:	83 fa 01             	cmp    edx,0x1
c0013f3f:	19 c0                	sbb    eax,eax
c0013f41:	f7 d0                	not    eax
c0013f43:	05 6e 01 00 00       	add    eax,0x16e
c0013f48:	01 c1                	add    ecx,eax
c0013f4a:	43                   	inc    ebx
c0013f4b:	39 f3                	cmp    ebx,esi
c0013f4d:	7c cc                	jl     c0013f1b <datetimeToSeconds(datetime_t)+0xa4>
c0013f4f:	eb 35                	jmp    c0013f86 <datetimeToSeconds(datetime_t)+0x10f>
c0013f51:	74 33                	je     c0013f86 <datetimeToSeconds(datetime_t)+0x10f>
c0013f53:	b8 45 00 00 00       	mov    eax,0x45
c0013f58:	89 c2                	mov    edx,eax
c0013f5a:	83 e2 03             	and    edx,0x3
c0013f5d:	39 f0                	cmp    eax,esi
c0013f5f:	7e 0f                	jle    c0013f70 <datetimeToSeconds(datetime_t)+0xf9>
c0013f61:	83 fa 01             	cmp    edx,0x1
c0013f64:	19 d2                	sbb    edx,edx
c0013f66:	48                   	dec    eax
c0013f67:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013f6e:	eb e8                	jmp    c0013f58 <datetimeToSeconds(datetime_t)+0xe1>
c0013f70:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f75:	85 d2                	test   edx,edx
c0013f77:	75 0b                	jne    c0013f84 <datetimeToSeconds(datetime_t)+0x10d>
c0013f79:	66 83 fb 01          	cmp    bx,0x1
c0013f7d:	19 c0                	sbb    eax,eax
c0013f7f:	05 6e 01 00 00       	add    eax,0x16e
c0013f84:	29 c1                	sub    ecx,eax
c0013f86:	b8 80 51 01 00       	mov    eax,0x15180
c0013f8b:	f7 e9                	imul   ecx
c0013f8d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013f91:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013f95:	83 c4 14             	add    esp,0x14
c0013f98:	5b                   	pop    ebx
c0013f99:	5e                   	pop    esi
c0013f9a:	5f                   	pop    edi
c0013f9b:	5d                   	pop    ebp
c0013f9c:	c3                   	ret    
c0013f9d:	90                   	nop

c0013f9e <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013f9e:	57                   	push   edi
c0013f9f:	56                   	push   esi
c0013fa0:	53                   	push   ebx
c0013fa1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013fa5:	8b 06                	mov    eax,DWORD PTR [esi]
c0013fa7:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013faa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013fae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013fb2:	e8 c0 fe ff ff       	call   c0013e77 <datetimeToSeconds(datetime_t)>
c0013fb7:	59                   	pop    ecx
c0013fb8:	0f b6 0d fc f1 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f1fc
c0013fbf:	5b                   	pop    ebx
c0013fc0:	03 0d 00 f2 02 c0    	add    ecx,DWORD PTR ds:0xc002f200
c0013fc6:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013fcc:	89 cb                	mov    ebx,ecx
c0013fce:	c1 fb 1f             	sar    ebx,0x1f
c0013fd1:	29 c8                	sub    eax,ecx
c0013fd3:	19 da                	sbb    edx,ebx
c0013fd5:	31 c9                	xor    ecx,ecx
c0013fd7:	80 3d fd f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f1fd,0x0
c0013fde:	74 05                	je     c0013fe5 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013fe0:	b9 08 07 00 00       	mov    ecx,0x708
c0013fe5:	31 db                	xor    ebx,ebx
c0013fe7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013feb:	29 c8                	sub    eax,ecx
c0013fed:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ff1:	19 da                	sbb    edx,ebx
c0013ff3:	89 f8                	mov    eax,edi
c0013ff5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013ff9:	5b                   	pop    ebx
c0013ffa:	5e                   	pop    esi
c0013ffb:	5f                   	pop    edi
c0013ffc:	ff e0                	jmp    eax

c0013ffe <secondsToDatetime(unsigned long long)>:
c0013ffe:	55                   	push   ebp
c0013fff:	57                   	push   edi
c0014000:	56                   	push   esi
c0014001:	53                   	push   ebx
c0014002:	83 ec 1c             	sub    esp,0x1c
c0014005:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0014009:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001400d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0014011:	6a 00                	push   0x0
c0014013:	68 80 51 01 00       	push   0x15180
c0014018:	55                   	push   ebp
c0014019:	57                   	push   edi
c001401a:	e8 55 33 01 00       	call   c0027374 <__udivdi3>
c001401f:	83 c4 10             	add    esp,0x10
c0014022:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0014028:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001402c:	6a 00                	push   0x0
c001402e:	68 80 51 01 00       	push   0x15180
c0014033:	55                   	push   ebp
c0014034:	57                   	push   edi
c0014035:	bf 10 0e 00 00       	mov    edi,0xe10
c001403a:	e8 35 34 01 00       	call   c0027474 <__umoddi3>
c001403f:	83 c4 10             	add    esp,0x10
c0014042:	99                   	cdq    
c0014043:	f7 ff                	idiv   edi
c0014045:	bf 3c 00 00 00       	mov    edi,0x3c
c001404a:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001404d:	89 d0                	mov    eax,edx
c001404f:	99                   	cdq    
c0014050:	f7 ff                	idiv   edi
c0014052:	85 db                	test   ebx,ebx
c0014054:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0014057:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001405a:	79 11                	jns    c001406d <secondsToDatetime(unsigned long long)+0x6f>
c001405c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014060:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0014066:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001406b:	eb 07                	jmp    c0014074 <secondsToDatetime(unsigned long long)+0x76>
c001406d:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014072:	89 d8                	mov    eax,ebx
c0014074:	bf b4 05 00 00       	mov    edi,0x5b4
c0014079:	99                   	cdq    
c001407a:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001407f:	f7 f9                	idiv   ecx
c0014081:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0014086:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001408a:	31 d2                	xor    edx,edx
c001408c:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0014094:	01 c3                	add    ebx,eax
c0014096:	89 d8                	mov    eax,ebx
c0014098:	f7 f1                	div    ecx
c001409a:	31 d2                	xor    edx,edx
c001409c:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001409f:	89 d8                	mov    eax,ebx
c00140a1:	f7 f7                	div    edi
c00140a3:	31 d2                	xor    edx,edx
c00140a5:	29 c1                	sub    ecx,eax
c00140a7:	89 d8                	mov    eax,ebx
c00140a9:	f7 f5                	div    ebp
c00140ab:	bd 6d 01 00 00       	mov    ebp,0x16d
c00140b0:	29 c1                	sub    ecx,eax
c00140b2:	31 d2                	xor    edx,edx
c00140b4:	89 c8                	mov    eax,ecx
c00140b6:	f7 f5                	div    ebp
c00140b8:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00140bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00140c1:	31 d2                	xor    edx,edx
c00140c3:	89 c8                	mov    eax,ecx
c00140c5:	f7 f5                	div    ebp
c00140c7:	31 d2                	xor    edx,edx
c00140c9:	01 c3                	add    ebx,eax
c00140cb:	89 c8                	mov    eax,ecx
c00140cd:	f7 f7                	div    edi
c00140cf:	bf 99 00 00 00       	mov    edi,0x99
c00140d4:	29 c3                	sub    ebx,eax
c00140d6:	31 d2                	xor    edx,edx
c00140d8:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00140e0:	29 c3                	sub    ebx,eax
c00140e2:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00140e5:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00140e8:	bb 05 00 00 00       	mov    ebx,0x5
c00140ed:	83 c1 02             	add    ecx,0x2
c00140f0:	89 c8                	mov    eax,ecx
c00140f2:	f7 f7                	div    edi
c00140f4:	31 d2                	xor    edx,edx
c00140f6:	89 c7                	mov    edi,eax
c00140f8:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00140fe:	83 c0 02             	add    eax,0x2
c0014101:	f7 f3                	div    ebx
c0014103:	89 eb                	mov    ebx,ebp
c0014105:	29 c3                	sub    ebx,eax
c0014107:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001410d:	88 1e                	mov    BYTE PTR [esi],bl
c001410f:	19 c0                	sbb    eax,eax
c0014111:	31 d2                	xor    edx,edx
c0014113:	83 e0 0c             	and    eax,0xc
c0014116:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001411a:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0014122:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0014126:	83 f9 01             	cmp    ecx,0x1
c0014129:	0f 96 c2             	setbe  dl
c001412c:	41                   	inc    ecx
c001412d:	01 d0                	add    eax,edx
c001412f:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0014132:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0014136:	83 c4 1c             	add    esp,0x1c
c0014139:	89 f0                	mov    eax,esi
c001413b:	5b                   	pop    ebx
c001413c:	5e                   	pop    esi
c001413d:	5f                   	pop    edi
c001413e:	5d                   	pop    ebp
c001413f:	c2 04 00             	ret    0x4

c0014142 <Clock::timeInDatetimeLocal()>:
c0014142:	53                   	push   ebx
c0014143:	83 ec 14             	sub    esp,0x14
c0014146:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001414a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001414e:	e8 83 fc ff ff       	call   c0013dd6 <Clock::timeInSecondsLocal()>
c0014153:	83 c4 0c             	add    esp,0xc
c0014156:	52                   	push   edx
c0014157:	50                   	push   eax
c0014158:	53                   	push   ebx
c0014159:	e8 a0 fe ff ff       	call   c0013ffe <secondsToDatetime(unsigned long long)>
c001415e:	89 d8                	mov    eax,ebx
c0014160:	83 c4 14             	add    esp,0x14
c0014163:	5b                   	pop    ebx
c0014164:	c2 04 00             	ret    0x4
c0014167:	90                   	nop

c0014168 <Device::hibernate()>:
c0014168:	c3                   	ret    
c0014169:	90                   	nop

c001416a <Device::wake()>:
c001416a:	c3                   	ret    
c001416b:	90                   	nop

c001416c <Device::detect()>:
c001416c:	c3                   	ret    
c001416d:	90                   	nop

c001416e <Device::disableLegacy()>:
c001416e:	c3                   	ret    
c001416f:	90                   	nop

c0014170 <Device::powerSaving(PowerSavingLevel)>:
c0014170:	c3                   	ret    
c0014171:	90                   	nop

c0014172 <DriverlessDevice::close(int, int, void*)>:
c0014172:	31 c0                	xor    eax,eax
c0014174:	c3                   	ret    
c0014175:	90                   	nop

c0014176 <DriverlessDevice::detect()>:
c0014176:	c3                   	ret    
c0014177:	90                   	nop

c0014178 <DriverlessDevice::open(int, int, void*)>:
c0014178:	83 ec 18             	sub    esp,0x18
c001417b:	68 50 b7 02 c0       	push   0xc002b750
c0014180:	e8 e8 66 00 00       	call   c001a86d <Krnl::panic(char const*)>
c0014185:	83 c8 ff             	or     eax,0xffffffff
c0014188:	83 c4 1c             	add    esp,0x1c
c001418b:	c3                   	ret    

c001418c <Device::~Device()>:
c001418c:	ba 78 b7 02 c0       	mov    edx,0xc002b778
c0014191:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014195:	89 10                	mov    DWORD PTR [eax],edx
c0014197:	90                   	nop
c0014198:	c3                   	ret    
c0014199:	90                   	nop

c001419a <Device::~Device()>:
c001419a:	83 ec 0c             	sub    esp,0xc
c001419d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00141a1:	e8 e6 ff ff ff       	call   c001418c <Device::~Device()>
c00141a6:	83 c4 04             	add    esp,0x4
c00141a9:	83 ec 08             	sub    esp,0x8
c00141ac:	68 58 01 00 00       	push   0x158
c00141b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141b5:	e8 eb eb ff ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c00141ba:	83 c4 10             	add    esp,0x10
c00141bd:	83 c4 0c             	add    esp,0xc
c00141c0:	c3                   	ret    
c00141c1:	90                   	nop

c00141c2 <Device::findAndLoadDriver()>:
c00141c2:	c3                   	ret    
c00141c3:	90                   	nop

c00141c4 <Device::preOpenPCI(PCIDeviceInfo)>:
c00141c4:	57                   	push   edi
c00141c5:	b9 09 00 00 00       	mov    ecx,0x9
c00141ca:	56                   	push   esi
c00141cb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00141cf:	8d 74 24 10          	lea    esi,[esp+0x10]
c00141d3:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00141dd:	81 c7 18 01 00 00    	add    edi,0x118
c00141e3:	fc                   	cld    
c00141e4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00141e6:	5e                   	pop    esi
c00141e7:	5f                   	pop    edi
c00141e8:	c3                   	ret    
c00141e9:	90                   	nop

c00141ea <Device::preOpenACPI(void*, char*, char*)>:
c00141ea:	57                   	push   edi
c00141eb:	b9 1e 00 00 00       	mov    ecx,0x1e
c00141f0:	56                   	push   esi
c00141f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00141f5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00141f9:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0014203:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0014209:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c001420f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014213:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014215:	b9 0e 00 00 00       	mov    ecx,0xe
c001421a:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0014220:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014224:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014226:	5e                   	pop    esi
c0014227:	5f                   	pop    edi
c0014228:	c3                   	ret    
c0014229:	90                   	nop

c001422a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001422a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001422e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014233:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001423a:	75 0b                	jne    c0014247 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c001423c:	8b 00                	mov    eax,DWORD PTR [eax]
c001423e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014242:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014245:	eb 1e                	jmp    c0014265 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0014247:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c001424c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014252:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014258:	8b 08                	mov    ecx,DWORD PTR [eax]
c001425a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001425e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014262:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014265:	ff e0                	jmp    eax
c0014267:	90                   	nop

c0014268 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014268:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001426c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014271:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014278:	75 0b                	jne    c0014285 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001427a:	8b 00                	mov    eax,DWORD PTR [eax]
c001427c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014280:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0014283:	eb 1e                	jmp    c00142a3 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0014285:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c001428a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014290:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014296:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014298:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001429c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142a0:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c00142a3:	ff e0                	jmp    eax
c00142a5:	90                   	nop

c00142a6 <Device::addChild(Device*)>:
c00142a6:	53                   	push   ebx
c00142a7:	83 ec 08             	sub    esp,0x8
c00142aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00142ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00142b2:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00142b8:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00142be:	8b 13                	mov    edx,DWORD PTR [ebx]
c00142c0:	85 d2                	test   edx,edx
c00142c2:	74 04                	je     c00142c8 <Device::addChild(Device*)+0x22>
c00142c4:	89 d3                	mov    ebx,edx
c00142c6:	eb f6                	jmp    c00142be <Device::addChild(Device*)+0x18>
c00142c8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00142cb:	83 ec 0c             	sub    esp,0xc
c00142ce:	6a 08                	push   0x8
c00142d0:	e8 05 b6 ff ff       	call   c000f8da <malloc>
c00142d5:	89 03                	mov    DWORD PTR [ebx],eax
c00142d7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00142dd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00142e4:	83 c4 18             	add    esp,0x18
c00142e7:	5b                   	pop    ebx
c00142e8:	c3                   	ret    
c00142e9:	90                   	nop

c00142ea <Device::removeAllChildren()>:
c00142ea:	56                   	push   esi
c00142eb:	53                   	push   ebx
c00142ec:	52                   	push   edx
c00142ed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00142f1:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00142f7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142fa:	74 17                	je     c0014313 <Device::removeAllChildren()+0x29>
c00142fc:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00142ff:	85 c0                	test   eax,eax
c0014301:	74 0c                	je     c001430f <Device::removeAllChildren()+0x25>
c0014303:	83 ec 0c             	sub    esp,0xc
c0014306:	8b 10                	mov    edx,DWORD PTR [eax]
c0014308:	50                   	push   eax
c0014309:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001430c:	83 c4 10             	add    esp,0x10
c001430f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014311:	eb e4                	jmp    c00142f7 <Device::removeAllChildren()+0xd>
c0014313:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014319:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001431f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014325:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001432c:	58                   	pop    eax
c001432d:	5b                   	pop    ebx
c001432e:	5e                   	pop    esi
c001432f:	c3                   	ret    

c0014330 <Device::hibernateAll()>:
c0014330:	53                   	push   ebx
c0014331:	83 ec 14             	sub    esp,0x14
c0014334:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014338:	8b 03                	mov    eax,DWORD PTR [ebx]
c001433a:	53                   	push   ebx
c001433b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001433e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014344:	83 c4 10             	add    esp,0x10
c0014347:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001434a:	74 0f                	je     c001435b <Device::hibernateAll()+0x2b>
c001434c:	83 ec 0c             	sub    esp,0xc
c001434f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014352:	e8 d9 ff ff ff       	call   c0014330 <Device::hibernateAll()>
c0014357:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014359:	eb e9                	jmp    c0014344 <Device::hibernateAll()+0x14>
c001435b:	83 c4 08             	add    esp,0x8
c001435e:	5b                   	pop    ebx
c001435f:	c3                   	ret    

c0014360 <Device::wakeAll()>:
c0014360:	53                   	push   ebx
c0014361:	83 ec 14             	sub    esp,0x14
c0014364:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014368:	8b 03                	mov    eax,DWORD PTR [ebx]
c001436a:	53                   	push   ebx
c001436b:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001436e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014374:	83 c4 10             	add    esp,0x10
c0014377:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001437a:	74 0f                	je     c001438b <Device::wakeAll()+0x2b>
c001437c:	83 ec 0c             	sub    esp,0xc
c001437f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014382:	e8 d9 ff ff ff       	call   c0014360 <Device::wakeAll()>
c0014387:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014389:	eb e9                	jmp    c0014374 <Device::wakeAll()+0x14>
c001438b:	83 c4 08             	add    esp,0x8
c001438e:	5b                   	pop    ebx
c001438f:	c3                   	ret    

c0014390 <Device::detectAll()>:
c0014390:	53                   	push   ebx
c0014391:	83 ec 14             	sub    esp,0x14
c0014394:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014398:	8b 03                	mov    eax,DWORD PTR [ebx]
c001439a:	53                   	push   ebx
c001439b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001439e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143a4:	83 c4 10             	add    esp,0x10
c00143a7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143aa:	74 0f                	je     c00143bb <Device::detectAll()+0x2b>
c00143ac:	83 ec 0c             	sub    esp,0xc
c00143af:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143b2:	e8 d9 ff ff ff       	call   c0014390 <Device::detectAll()>
c00143b7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143b9:	eb e9                	jmp    c00143a4 <Device::detectAll()+0x14>
c00143bb:	83 c4 08             	add    esp,0x8
c00143be:	5b                   	pop    ebx
c00143bf:	c3                   	ret    

c00143c0 <Device::disableLegacyAll()>:
c00143c0:	53                   	push   ebx
c00143c1:	83 ec 14             	sub    esp,0x14
c00143c4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143ca:	53                   	push   ebx
c00143cb:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c00143ce:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143d4:	83 c4 10             	add    esp,0x10
c00143d7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143da:	74 0f                	je     c00143eb <Device::disableLegacyAll()+0x2b>
c00143dc:	83 ec 0c             	sub    esp,0xc
c00143df:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143e2:	e8 d9 ff ff ff       	call   c00143c0 <Device::disableLegacyAll()>
c00143e7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143e9:	eb e9                	jmp    c00143d4 <Device::disableLegacyAll()+0x14>
c00143eb:	83 c4 08             	add    esp,0x8
c00143ee:	5b                   	pop    ebx
c00143ef:	c3                   	ret    

c00143f0 <Device::loadDriversForAll()>:
c00143f0:	53                   	push   ebx
c00143f1:	83 ec 08             	sub    esp,0x8
c00143f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143f8:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00143fe:	8b 18                	mov    ebx,DWORD PTR [eax]
c0014400:	85 db                	test   ebx,ebx
c0014402:	74 12                	je     c0014416 <Device::loadDriversForAll()+0x26>
c0014404:	83 ec 0c             	sub    esp,0xc
c0014407:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001440a:	e8 e1 ff ff ff       	call   c00143f0 <Device::loadDriversForAll()>
c001440f:	83 c4 10             	add    esp,0x10
c0014412:	89 d8                	mov    eax,ebx
c0014414:	eb e8                	jmp    c00143fe <Device::loadDriversForAll()+0xe>
c0014416:	83 c4 08             	add    esp,0x8
c0014419:	5b                   	pop    ebx
c001441a:	c3                   	ret    
c001441b:	90                   	nop

c001441c <Device::closeAll()>:
c001441c:	53                   	push   ebx
c001441d:	83 ec 08             	sub    esp,0x8
c0014420:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014424:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014426:	6a 00                	push   0x0
c0014428:	6a 00                	push   0x0
c001442a:	6a 00                	push   0x0
c001442c:	53                   	push   ebx
c001442d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014430:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014436:	83 c4 10             	add    esp,0x10
c0014439:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001443c:	74 0f                	je     c001444d <Device::closeAll()+0x31>
c001443e:	83 ec 0c             	sub    esp,0xc
c0014441:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014444:	e8 d3 ff ff ff       	call   c001441c <Device::closeAll()>
c0014449:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001444b:	eb e9                	jmp    c0014436 <Device::closeAll()+0x1a>
c001444d:	83 c4 08             	add    esp,0x8
c0014450:	5b                   	pop    ebx
c0014451:	c3                   	ret    

c0014452 <Device::powerSavingAll(PowerSavingLevel)>:
c0014452:	56                   	push   esi
c0014453:	53                   	push   ebx
c0014454:	83 ec 0c             	sub    esp,0xc
c0014457:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001445b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001445f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014461:	56                   	push   esi
c0014462:	53                   	push   ebx
c0014463:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0014466:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001446c:	83 c4 10             	add    esp,0x10
c001446f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014472:	74 0f                	je     c0014483 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0014474:	52                   	push   edx
c0014475:	52                   	push   edx
c0014476:	56                   	push   esi
c0014477:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001447a:	e8 d3 ff ff ff       	call   c0014452 <Device::powerSavingAll(PowerSavingLevel)>
c001447f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014481:	eb e9                	jmp    c001446c <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014483:	58                   	pop    eax
c0014484:	5b                   	pop    ebx
c0014485:	5e                   	pop    esi
c0014486:	c3                   	ret    
c0014487:	90                   	nop

c0014488 <Device::setName(char const*)>:
c0014488:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0014490:	e9 93 c3 fe ff       	jmp    c0000828 <strcpy>
c0014495:	90                   	nop

c0014496 <Device::Device(char const*)>:
c0014496:	83 ec 1c             	sub    esp,0x1c
c0014499:	ba 78 b7 02 c0       	mov    edx,0xc002b778
c001449e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144a2:	89 10                	mov    DWORD PTR [eax],edx
c00144a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144a8:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00144b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144b6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00144c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144c4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00144ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144d2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00144dc:	83 ec 08             	sub    esp,0x8
c00144df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144e7:	e8 9c ff ff ff       	call   c0014488 <Device::setName(char const*)>
c00144ec:	83 c4 10             	add    esp,0x10
c00144ef:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c00144f7:	83 ec 0c             	sub    esp,0xc
c00144fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00144fe:	e8 d7 b3 ff ff       	call   c000f8da <malloc>
c0014503:	83 c4 10             	add    esp,0x10
c0014506:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001450c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014513:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014517:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001451d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014521:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014527:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001452d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014531:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014537:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001453e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014542:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0014549:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001454d:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0014554:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014558:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014562:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014566:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014570:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014574:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001457e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014582:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c001458c:	90                   	nop
c001458d:	83 c4 1c             	add    esp,0x1c
c0014590:	c3                   	ret    
c0014591:	90                   	nop

c0014592 <Device::getName()>:
c0014592:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014596:	05 d0 00 00 00       	add    eax,0xd0
c001459b:	c3                   	ret    

c001459c <DriverlessDevice::DriverlessDevice(char const*)>:
c001459c:	83 ec 0c             	sub    esp,0xc
c001459f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145a3:	83 ec 08             	sub    esp,0x8
c00145a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145aa:	50                   	push   eax
c00145ab:	e8 e6 fe ff ff       	call   c0014496 <Device::Device(char const*)>
c00145b0:	83 c4 10             	add    esp,0x10
c00145b3:	ba a4 b7 02 c0       	mov    edx,0xc002b7a4
c00145b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145bc:	89 10                	mov    DWORD PTR [eax],edx
c00145be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145c2:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00145cc:	90                   	nop
c00145cd:	83 c4 0c             	add    esp,0xc
c00145d0:	c3                   	ret    
c00145d1:	90                   	nop

c00145d2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c00145d2:	57                   	push   edi
c00145d3:	56                   	push   esi
c00145d4:	53                   	push   ebx
c00145d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00145d9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00145dd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00145e1:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00145e7:	75 0c                	jne    c00145f5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00145e9:	52                   	push   edx
c00145ea:	52                   	push   edx
c00145eb:	53                   	push   ebx
c00145ec:	56                   	push   esi
c00145ed:	e8 d4 4c 01 00       	call   c00292c6 <LinkedList<Device>::addElement(Device*)>
c00145f2:	83 c4 10             	add    esp,0x10
c00145f5:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00145fb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00145fe:	74 12                	je     c0014612 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014600:	50                   	push   eax
c0014601:	57                   	push   edi
c0014602:	56                   	push   esi
c0014603:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014606:	e8 c7 ff ff ff       	call   c00145d2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001460b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001460d:	83 c4 10             	add    esp,0x10
c0014610:	eb e9                	jmp    c00145fb <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014612:	5b                   	pop    ebx
c0014613:	5e                   	pop    esi
c0014614:	5f                   	pop    edi
c0014615:	c3                   	ret    

c0014616 <getDevicesOfType(DeviceType)>:
c0014616:	53                   	push   ebx
c0014617:	83 ec 14             	sub    esp,0x14
c001461a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001461e:	53                   	push   ebx
c001461f:	e8 7e 4d 01 00       	call   c00293a2 <LinkedList<Device>::LinkedList()>
c0014624:	83 c4 0c             	add    esp,0xc
c0014627:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001462b:	53                   	push   ebx
c001462c:	ff 35 68 f0 02 c0    	push   DWORD PTR ds:0xc002f068
c0014632:	e8 9b ff ff ff       	call   c00145d2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014637:	89 d8                	mov    eax,ebx
c0014639:	83 c4 18             	add    esp,0x18
c001463c:	5b                   	pop    ebx
c001463d:	c2 04 00             	ret    0x4

c0014640 <HardDiskController::HardDiskController(char const*)>:
c0014640:	83 ec 0c             	sub    esp,0xc
c0014643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014647:	83 ec 08             	sub    esp,0x8
c001464a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001464e:	50                   	push   eax
c001464f:	e8 42 fe ff ff       	call   c0014496 <Device::Device(char const*)>
c0014654:	83 c4 10             	add    esp,0x10
c0014657:	ba d0 b7 02 c0       	mov    edx,0xc002b7d0
c001465c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014660:	89 10                	mov    DWORD PTR [eax],edx
c0014662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014666:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014670:	90                   	nop
c0014671:	83 c4 0c             	add    esp,0xc
c0014674:	c3                   	ret    
c0014675:	90                   	nop

c0014676 <HardDiskController::~HardDiskController()>:
c0014676:	83 ec 0c             	sub    esp,0xc
c0014679:	ba d0 b7 02 c0       	mov    edx,0xc002b7d0
c001467e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014682:	89 10                	mov    DWORD PTR [eax],edx
c0014684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014688:	83 ec 0c             	sub    esp,0xc
c001468b:	50                   	push   eax
c001468c:	e8 fb fa ff ff       	call   c001418c <Device::~Device()>
c0014691:	83 c4 10             	add    esp,0x10
c0014694:	90                   	nop
c0014695:	83 c4 0c             	add    esp,0xc
c0014698:	c3                   	ret    
c0014699:	90                   	nop

c001469a <HardDiskController::~HardDiskController()>:
c001469a:	83 ec 0c             	sub    esp,0xc
c001469d:	83 ec 0c             	sub    esp,0xc
c00146a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146a4:	e8 cd ff ff ff       	call   c0014676 <HardDiskController::~HardDiskController()>
c00146a9:	83 c4 10             	add    esp,0x10
c00146ac:	83 ec 08             	sub    esp,0x8
c00146af:	68 58 01 00 00       	push   0x158
c00146b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146b8:	e8 e8 e6 ff ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c00146bd:	83 c4 10             	add    esp,0x10
c00146c0:	83 c4 0c             	add    esp,0xc
c00146c3:	c3                   	ret    

c00146c4 <PhysicalDisk::eject()>:
c00146c4:	83 ec 18             	sub    esp,0x18
c00146c7:	68 f4 b7 02 c0       	push   0xc002b7f4
c00146cc:	e8 b4 e7 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00146d1:	83 c8 ff             	or     eax,0xffffffff
c00146d4:	83 c4 1c             	add    esp,0x1c
c00146d7:	c3                   	ret    

c00146d8 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00146d8:	83 ec 0c             	sub    esp,0xc
c00146db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146df:	83 ec 08             	sub    esp,0x8
c00146e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146e6:	50                   	push   eax
c00146e7:	e8 aa fd ff ff       	call   c0014496 <Device::Device(char const*)>
c00146ec:	83 c4 10             	add    esp,0x10
c00146ef:	ba 24 b8 02 c0       	mov    edx,0xc002b824
c00146f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146f8:	89 10                	mov    DWORD PTR [eax],edx
c00146fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146fe:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014705:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014709:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014714:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001471e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014722:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014726:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001472c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014730:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001473a:	90                   	nop
c001473b:	83 c4 0c             	add    esp,0xc
c001473e:	c3                   	ret    
c001473f:	90                   	nop

c0014740 <PhysicalDisk::startCache()>:
c0014740:	56                   	push   esi
c0014741:	53                   	push   ebx
c0014742:	83 ec 10             	sub    esp,0x10
c0014745:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014749:	6a 44                	push   0x44
c001474b:	e8 8a b1 ff ff       	call   c000f8da <malloc>
c0014750:	89 c6                	mov    esi,eax
c0014752:	58                   	pop    eax
c0014753:	5a                   	pop    edx
c0014754:	53                   	push   ebx
c0014755:	56                   	push   esi
c0014756:	e8 cf 28 00 00       	call   c001702a <VCache::VCache(PhysicalDisk*)>
c001475b:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014761:	83 c4 14             	add    esp,0x14
c0014764:	5b                   	pop    ebx
c0014765:	5e                   	pop    esi
c0014766:	c3                   	ret    
c0014767:	90                   	nop

c0014768 <PhysicalDisk::~PhysicalDisk()>:
c0014768:	83 ec 0c             	sub    esp,0xc
c001476b:	ba 24 b8 02 c0       	mov    edx,0xc002b824
c0014770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014774:	89 10                	mov    DWORD PTR [eax],edx
c0014776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001477a:	83 ec 0c             	sub    esp,0xc
c001477d:	50                   	push   eax
c001477e:	e8 09 fa ff ff       	call   c001418c <Device::~Device()>
c0014783:	83 c4 10             	add    esp,0x10
c0014786:	90                   	nop
c0014787:	83 c4 0c             	add    esp,0xc
c001478a:	c3                   	ret    
c001478b:	90                   	nop

c001478c <PhysicalDisk::~PhysicalDisk()>:
c001478c:	83 ec 0c             	sub    esp,0xc
c001478f:	83 ec 0c             	sub    esp,0xc
c0014792:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014796:	e8 cd ff ff ff       	call   c0014768 <PhysicalDisk::~PhysicalDisk()>
c001479b:	83 c4 10             	add    esp,0x10
c001479e:	83 ec 08             	sub    esp,0x8
c00147a1:	68 6c 01 00 00       	push   0x16c
c00147a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147aa:	e8 f6 e5 ff ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c00147af:	83 c4 10             	add    esp,0x10
c00147b2:	83 c4 0c             	add    esp,0xc
c00147b5:	c3                   	ret    

c00147b6 <FPU::FPU(char const*)>:
c00147b6:	83 ec 0c             	sub    esp,0xc
c00147b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147bd:	83 ec 08             	sub    esp,0x8
c00147c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147c4:	50                   	push   eax
c00147c5:	e8 cc fc ff ff       	call   c0014496 <Device::Device(char const*)>
c00147ca:	83 c4 10             	add    esp,0x10
c00147cd:	ba 68 b8 02 c0       	mov    edx,0xc002b868
c00147d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147d6:	89 10                	mov    DWORD PTR [eax],edx
c00147d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147dc:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00147e6:	90                   	nop
c00147e7:	83 c4 0c             	add    esp,0xc
c00147ea:	c3                   	ret    
c00147eb:	90                   	nop

c00147ec <FPU::~FPU()>:
c00147ec:	83 ec 0c             	sub    esp,0xc
c00147ef:	ba 68 b8 02 c0       	mov    edx,0xc002b868
c00147f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147f8:	89 10                	mov    DWORD PTR [eax],edx
c00147fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147fe:	83 ec 0c             	sub    esp,0xc
c0014801:	50                   	push   eax
c0014802:	e8 85 f9 ff ff       	call   c001418c <Device::~Device()>
c0014807:	83 c4 10             	add    esp,0x10
c001480a:	90                   	nop
c001480b:	83 c4 0c             	add    esp,0xc
c001480e:	c3                   	ret    
c001480f:	90                   	nop

c0014810 <FPU::~FPU()>:
c0014810:	83 ec 0c             	sub    esp,0xc
c0014813:	83 ec 0c             	sub    esp,0xc
c0014816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001481a:	e8 cd ff ff ff       	call   c00147ec <FPU::~FPU()>
c001481f:	83 c4 10             	add    esp,0x10
c0014822:	83 ec 08             	sub    esp,0x8
c0014825:	68 58 01 00 00       	push   0x158
c001482a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001482e:	e8 72 e5 ff ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c0014833:	83 c4 10             	add    esp,0x10
c0014836:	83 c4 0c             	add    esp,0xc
c0014839:	c3                   	ret    

c001483a <setupFPU()>:
c001483a:	53                   	push   ebx
c001483b:	83 ec 08             	sub    esp,0x8
c001483e:	8b 15 68 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f068
c0014844:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c001484b:	74 19                	je     c0014866 <setupFPU()+0x2c>
c001484d:	83 ec 0c             	sub    esp,0xc
c0014850:	68 58 01 00 00       	push   0x158
c0014855:	e8 80 b0 ff ff       	call   c000f8da <malloc>
c001485a:	89 c3                	mov    ebx,eax
c001485c:	89 04 24             	mov    DWORD PTR [esp],eax
c001485f:	e8 94 16 01 00       	call   c0025ef8 <AVX::AVX()>
c0014864:	eb 5b                	jmp    c00148c1 <setupFPU()+0x87>
c0014866:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001486c:	84 c0                	test   al,al
c001486e:	79 19                	jns    c0014889 <setupFPU()+0x4f>
c0014870:	83 ec 0c             	sub    esp,0xc
c0014873:	68 58 01 00 00       	push   0x158
c0014878:	e8 5d b0 ff ff       	call   c000f8da <malloc>
c001487d:	89 c3                	mov    ebx,eax
c001487f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014882:	e8 97 17 01 00       	call   c002601e <SSE::SSE()>
c0014887:	eb 38                	jmp    c00148c1 <setupFPU()+0x87>
c0014889:	a8 20                	test   al,0x20
c001488b:	74 19                	je     c00148a6 <setupFPU()+0x6c>
c001488d:	83 ec 0c             	sub    esp,0xc
c0014890:	68 58 01 00 00       	push   0x158
c0014895:	e8 40 b0 ff ff       	call   c000f8da <malloc>
c001489a:	89 c3                	mov    ebx,eax
c001489c:	89 04 24             	mov    DWORD PTR [esp],eax
c001489f:	e8 e4 16 01 00       	call   c0025f88 <MMX::MMX()>
c00148a4:	eb 1b                	jmp    c00148c1 <setupFPU()+0x87>
c00148a6:	a8 10                	test   al,0x10
c00148a8:	74 1c                	je     c00148c6 <setupFPU()+0x8c>
c00148aa:	83 ec 0c             	sub    esp,0xc
c00148ad:	68 58 01 00 00       	push   0x158
c00148b2:	e8 23 b0 ff ff       	call   c000f8da <malloc>
c00148b7:	89 c3                	mov    ebx,eax
c00148b9:	89 04 24             	mov    DWORD PTR [esp],eax
c00148bc:	e8 eb 17 01 00       	call   c00260ac <x87::x87()>
c00148c1:	83 c4 10             	add    esp,0x10
c00148c4:	eb 24                	jmp    c00148ea <setupFPU()+0xb0>
c00148c6:	83 e0 ef             	and    eax,0xffffffef
c00148c9:	83 ec 0c             	sub    esp,0xc
c00148cc:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00148d2:	68 54 b8 02 c0       	push   0xc002b854
c00148d7:	e8 a9 e5 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00148dc:	0f 20 c0             	mov    eax,cr0
c00148df:	83 c8 04             	or     eax,0x4
c00148e2:	0f 22 c0             	mov    cr0,eax
c00148e5:	31 db                	xor    ebx,ebx
c00148e7:	83 c4 10             	add    esp,0x10
c00148ea:	89 d8                	mov    eax,ebx
c00148ec:	83 c4 08             	add    esp,0x8
c00148ef:	5b                   	pop    ebx
c00148f0:	c3                   	ret    
c00148f1:	90                   	nop

c00148f2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00148f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00148f6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00148fa:	c1 e0 04             	shl    eax,0x4
c00148fd:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014901:	8d 50 10             	lea    edx,[eax+0x10]
c0014904:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c001490a:	74 08                	je     c0014914 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c001490c:	83 c0 04             	add    eax,0x4
c001490f:	39 d0                	cmp    eax,edx
c0014911:	75 f1                	jne    c0014904 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014913:	c3                   	ret    
c0014914:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001491e:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014928:	eb e2                	jmp    c001490c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c001492a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c001492a:	57                   	push   edi
c001492b:	31 c0                	xor    eax,eax
c001492d:	56                   	push   esi
c001492e:	53                   	push   ebx
c001492f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014933:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014937:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001493b:	89 da                	mov    edx,ebx
c001493d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014941:	c1 e2 04             	shl    edx,0x4
c0014944:	01 ca                	add    edx,ecx
c0014946:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001494e:	74 16                	je     c0014966 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014950:	40                   	inc    eax
c0014951:	83 f8 04             	cmp    eax,0x4
c0014954:	75 f0                	jne    c0014946 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014956:	c7 44 24 10 98 b8 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b898
c001495e:	5b                   	pop    ebx
c001495f:	5e                   	pop    esi
c0014960:	5f                   	pop    edi
c0014961:	e9 07 5f 00 00       	jmp    c001a86d <Krnl::panic(char const*)>
c0014966:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014969:	8d 04 81             	lea    eax,[ecx+eax*4]
c001496c:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014972:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014978:	5b                   	pop    ebx
c0014979:	5e                   	pop    esi
c001497a:	5f                   	pop    edi
c001497b:	c3                   	ret    

c001497c <doubleFault(regs*, void*)>:
c001497c:	55                   	push   ebp
c001497d:	89 e5                	mov    ebp,esp
c001497f:	83 ec 08             	sub    esp,0x8
c0014982:	83 ec 0c             	sub    esp,0xc
c0014985:	68 d3 b8 02 c0       	push   0xc002b8d3
c001498a:	e8 de 5e 00 00       	call   c001a86d <Krnl::panic(char const*)>
c001498f:	83 c4 10             	add    esp,0x10
c0014992:	90                   	nop
c0014993:	c9                   	leave  
c0014994:	c3                   	ret    
c0014995:	90                   	nop

c0014996 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014996:	56                   	push   esi
c0014997:	53                   	push   ebx
c0014998:	50                   	push   eax
c0014999:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001499d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00149a1:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00149a6:	75 35                	jne    c00149dd <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00149a8:	8d 43 20             	lea    eax,[ebx+0x20]
c00149ab:	31 d2                	xor    edx,edx
c00149ad:	89 c1                	mov    ecx,eax
c00149af:	c1 e1 04             	shl    ecx,0x4
c00149b2:	01 f1                	add    ecx,esi
c00149b4:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00149bc:	74 3e                	je     c00149fc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00149be:	42                   	inc    edx
c00149bf:	83 fa 04             	cmp    edx,0x4
c00149c2:	75 f0                	jne    c00149b4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00149c4:	83 ec 0c             	sub    esp,0xc
c00149c7:	68 18 b9 02 c0       	push   0xc002b918
c00149cc:	e8 9c 5e 00 00       	call   c001a86d <Krnl::panic(char const*)>
c00149d1:	83 c4 10             	add    esp,0x10
c00149d4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00149d9:	5a                   	pop    edx
c00149da:	5b                   	pop    ebx
c00149db:	5e                   	pop    esi
c00149dc:	c3                   	ret    
c00149dd:	83 ec 0c             	sub    esp,0xc
c00149e0:	56                   	push   esi
c00149e1:	e8 ac fb ff ff       	call   c0014592 <Device::getName()>
c00149e6:	83 c4 10             	add    esp,0x10
c00149e9:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00149ec:	75 ba                	jne    c00149a8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00149ee:	83 fb 0f             	cmp    ebx,0xf
c00149f1:	7f 29                	jg     c0014a1c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00149f3:	0f b6 9b c0 e2 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd1d40]
c00149fa:	eb ac                	jmp    c00149a8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00149fc:	8d 04 82             	lea    eax,[edx+eax*4]
c00149ff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014a03:	8d 04 86             	lea    eax,[esi+eax*4]
c0014a06:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014a0c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014a10:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014a16:	89 d8                	mov    eax,ebx
c0014a18:	5a                   	pop    edx
c0014a19:	5b                   	pop    ebx
c0014a1a:	5e                   	pop    esi
c0014a1b:	c3                   	ret    
c0014a1c:	83 ec 0c             	sub    esp,0xc
c0014a1f:	68 e0 b8 02 c0       	push   0xc002b8e0
c0014a24:	e8 44 5e 00 00       	call   c001a86d <Krnl::panic(char const*)>
c0014a29:	83 c4 10             	add    esp,0x10
c0014a2c:	e9 77 ff ff ff       	jmp    c00149a8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a31:	90                   	nop

c0014a32 <InterruptController::clearAllHandlers(int, bool)>:
c0014a32:	56                   	push   esi
c0014a33:	53                   	push   ebx
c0014a34:	52                   	push   edx
c0014a35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014a39:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014a3d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014a42:	75 61                	jne    c0014aa5 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014a44:	8d 46 20             	lea    eax,[esi+0x20]
c0014a47:	c1 e6 04             	shl    esi,0x4
c0014a4a:	c1 e0 04             	shl    eax,0x4
c0014a4d:	01 de                	add    esi,ebx
c0014a4f:	01 d8                	add    eax,ebx
c0014a51:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014a5b:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014a65:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014a6f:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014a79:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014a83:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014a8d:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014a97:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014aa1:	58                   	pop    eax
c0014aa2:	5b                   	pop    ebx
c0014aa3:	5e                   	pop    esi
c0014aa4:	c3                   	ret    
c0014aa5:	83 ec 0c             	sub    esp,0xc
c0014aa8:	53                   	push   ebx
c0014aa9:	e8 e4 fa ff ff       	call   c0014592 <Device::getName()>
c0014aae:	83 c4 10             	add    esp,0x10
c0014ab1:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014ab4:	75 8e                	jne    c0014a44 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014ab6:	83 fe 0f             	cmp    esi,0xf
c0014ab9:	7f 09                	jg     c0014ac4 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014abb:	0f b6 b6 c0 e2 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd1d40]
c0014ac2:	eb 80                	jmp    c0014a44 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014ac4:	83 ec 0c             	sub    esp,0xc
c0014ac7:	68 54 b9 02 c0       	push   0xc002b954
c0014acc:	e8 9c 5d 00 00       	call   c001a86d <Krnl::panic(char const*)>
c0014ad1:	83 c4 10             	add    esp,0x10
c0014ad4:	e9 6b ff ff ff       	jmp    c0014a44 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014ad9:	90                   	nop

c0014ada <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014ada:	56                   	push   esi
c0014adb:	53                   	push   ebx
c0014adc:	52                   	push   edx
c0014add:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014ae1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014ae5:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014aea:	75 3a                	jne    c0014b26 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014af0:	8d 50 20             	lea    edx,[eax+0x20]
c0014af3:	c1 e2 04             	shl    edx,0x4
c0014af6:	8d 04 16             	lea    eax,[esi+edx*1]
c0014af9:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014afd:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014b03:	74 0b                	je     c0014b10 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014b05:	83 c0 04             	add    eax,0x4
c0014b08:	39 d0                	cmp    eax,edx
c0014b0a:	75 f1                	jne    c0014afd <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014b0c:	58                   	pop    eax
c0014b0d:	5b                   	pop    ebx
c0014b0e:	5e                   	pop    esi
c0014b0f:	c3                   	ret    
c0014b10:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014b1a:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014b24:	eb df                	jmp    c0014b05 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014b26:	83 ec 0c             	sub    esp,0xc
c0014b29:	56                   	push   esi
c0014b2a:	e8 63 fa ff ff       	call   c0014592 <Device::getName()>
c0014b2f:	83 c4 10             	add    esp,0x10
c0014b32:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b35:	75 b5                	jne    c0014aec <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b37:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014b3c:	7f 11                	jg     c0014b4f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014b3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b42:	0f b6 80 c0 e2 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd1d40]
c0014b49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b4d:	eb 9d                	jmp    c0014aec <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b4f:	83 ec 0c             	sub    esp,0xc
c0014b52:	68 54 b9 02 c0       	push   0xc002b954
c0014b57:	e8 11 5d 00 00       	call   c001a86d <Krnl::panic(char const*)>
c0014b5c:	83 c4 10             	add    esp,0x10
c0014b5f:	eb 8b                	jmp    c0014aec <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014b61 <nmiHandler(regs*, void*)>:
c0014b61:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c0014b66:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b6a:	e9 b5 a4 ff ff       	jmp    c000f024 <Computer::handleNMI()>

c0014b6f <int_handler>:
c0014b6f:	55                   	push   ebp
c0014b70:	57                   	push   edi
c0014b71:	56                   	push   esi
c0014b72:	53                   	push   ebx
c0014b73:	83 ec 0c             	sub    esp,0xc
c0014b76:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014b7a:	80 3d c4 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031bc4,0x0
c0014b81:	74 0b                	je     c0014b8e <int_handler+0x1f>
c0014b83:	fa                   	cli    
c0014b84:	f4                   	hlt    
c0014b85:	80 3d c4 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031bc4,0x0
c0014b8c:	75 f5                	jne    c0014b83 <int_handler+0x14>
c0014b8e:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c0014b93:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014b96:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014b9c:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014ba2:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014ba5:	83 f8 17             	cmp    eax,0x17
c0014ba8:	77 13                	ja     c0014bbd <int_handler+0x4e>
c0014baa:	83 ec 08             	sub    esp,0x8
c0014bad:	8b 17                	mov    edx,DWORD PTR [edi]
c0014baf:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014bb2:	0f b6 c0             	movzx  eax,al
c0014bb5:	50                   	push   eax
c0014bb6:	57                   	push   edi
c0014bb7:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014bba:	83 c4 10             	add    esp,0x10
c0014bbd:	83 c3 15             	add    ebx,0x15
c0014bc0:	c1 e3 04             	shl    ebx,0x4
c0014bc3:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014bc7:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014bce:	31 db                	xor    ebx,ebx
c0014bd0:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014bd4:	85 c0                	test   eax,eax
c0014bd6:	74 13                	je     c0014beb <int_handler+0x7c>
c0014bd8:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014bdb:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014bdf:	74 1c                	je     c0014bfd <int_handler+0x8e>
c0014be1:	83 ec 08             	sub    esp,0x8
c0014be4:	52                   	push   edx
c0014be5:	56                   	push   esi
c0014be6:	ff d0                	call   eax
c0014be8:	83 c4 10             	add    esp,0x10
c0014beb:	43                   	inc    ebx
c0014bec:	83 fb 04             	cmp    ebx,0x4
c0014bef:	75 df                	jne    c0014bd0 <int_handler+0x61>
c0014bf1:	83 c4 0c             	add    esp,0xc
c0014bf4:	31 c0                	xor    eax,eax
c0014bf6:	5b                   	pop    ebx
c0014bf7:	31 d2                	xor    edx,edx
c0014bf9:	5e                   	pop    esi
c0014bfa:	5f                   	pop    edi
c0014bfb:	5d                   	pop    ebp
c0014bfc:	c3                   	ret    
c0014bfd:	83 ec 08             	sub    esp,0x8
c0014c00:	52                   	push   edx
c0014c01:	56                   	push   esi
c0014c02:	ff d0                	call   eax
c0014c04:	83 c4 10             	add    esp,0x10
c0014c07:	83 c4 0c             	add    esp,0xc
c0014c0a:	5b                   	pop    ebx
c0014c0b:	5e                   	pop    esi
c0014c0c:	5f                   	pop    edi
c0014c0d:	5d                   	pop    ebp
c0014c0e:	c3                   	ret    
c0014c0f:	90                   	nop

c0014c10 <InterruptController::InterruptController(char const*)>:
c0014c10:	83 ec 1c             	sub    esp,0x1c
c0014c13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c17:	83 ec 08             	sub    esp,0x8
c0014c1a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c1e:	50                   	push   eax
c0014c1f:	e8 72 f8 ff ff       	call   c0014496 <Device::Device(char const*)>
c0014c24:	83 c4 10             	add    esp,0x10
c0014c27:	ba 14 bc 02 c0       	mov    edx,0xc002bc14
c0014c2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c30:	89 10                	mov    DWORD PTR [eax],edx
c0014c32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c36:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014c40:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c48:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014c50:	7f 5e                	jg     c0014cb0 <InterruptController::InterruptController(char const*)+0xa0>
c0014c52:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014c5a:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014c5f:	7f 49                	jg     c0014caa <InterruptController::InterruptController(char const*)+0x9a>
c0014c61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c69:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014c70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014c74:	01 ca                	add    edx,ecx
c0014c76:	83 c2 54             	add    edx,0x54
c0014c79:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014c81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c85:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c89:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014c90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014c94:	01 ca                	add    edx,ecx
c0014c96:	81 c2 54 04 00 00    	add    edx,0x454
c0014c9c:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014ca4:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014ca8:	eb b0                	jmp    c0014c5a <InterruptController::InterruptController(char const*)+0x4a>
c0014caa:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014cae:	eb 98                	jmp    c0014c48 <InterruptController::InterruptController(char const*)+0x38>
c0014cb0:	90                   	nop
c0014cb1:	83 c4 1c             	add    esp,0x1c
c0014cb4:	c3                   	ret    
c0014cb5:	90                   	nop

c0014cb6 <InterruptController::~InterruptController()>:
c0014cb6:	83 ec 0c             	sub    esp,0xc
c0014cb9:	ba 14 bc 02 c0       	mov    edx,0xc002bc14
c0014cbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014cc2:	89 10                	mov    DWORD PTR [eax],edx
c0014cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014cc8:	83 ec 0c             	sub    esp,0xc
c0014ccb:	50                   	push   eax
c0014ccc:	e8 bb f4 ff ff       	call   c001418c <Device::~Device()>
c0014cd1:	83 c4 10             	add    esp,0x10
c0014cd4:	90                   	nop
c0014cd5:	83 c4 0c             	add    esp,0xc
c0014cd8:	c3                   	ret    
c0014cd9:	90                   	nop

c0014cda <InterruptController::~InterruptController()>:
c0014cda:	83 ec 0c             	sub    esp,0xc
c0014cdd:	83 ec 0c             	sub    esp,0xc
c0014ce0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ce4:	e8 cd ff ff ff       	call   c0014cb6 <InterruptController::~InterruptController()>
c0014ce9:	83 c4 10             	add    esp,0x10
c0014cec:	83 ec 08             	sub    esp,0x8
c0014cef:	68 58 21 00 00       	push   0x2158
c0014cf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014cf8:	e8 a8 e0 ff ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c0014cfd:	83 c4 10             	add    esp,0x10
c0014d00:	83 c4 0c             	add    esp,0xc
c0014d03:	c3                   	ret    

c0014d04 <displayDebugInfo(regs*)>:
c0014d04:	55                   	push   ebp
c0014d05:	57                   	push   edi
c0014d06:	56                   	push   esi
c0014d07:	53                   	push   ebx
c0014d08:	83 ec 24             	sub    esp,0x24
c0014d0b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014d0f:	0f 20 c2             	mov    edx,cr0
c0014d12:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014d16:	0f 20 d7             	mov    edi,cr2
c0014d19:	0f 20 de             	mov    esi,cr3
c0014d1c:	0f 20 e5             	mov    ebp,cr4
c0014d1f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014d22:	68 8e b9 02 c0       	push   0xc002b98e
c0014d27:	e8 59 e1 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0014d2c:	59                   	pop    ecx
c0014d2d:	58                   	pop    eax
c0014d2e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014d31:	68 99 b9 02 c0       	push   0xc002b999
c0014d36:	e8 4a e1 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0014d3b:	58                   	pop    eax
c0014d3c:	5a                   	pop    edx
c0014d3d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014d40:	68 a4 b9 02 c0       	push   0xc002b9a4
c0014d45:	e8 3b e1 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0014d4a:	59                   	pop    ecx
c0014d4b:	58                   	pop    eax
c0014d4c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014d4f:	68 af b9 02 c0       	push   0xc002b9af
c0014d54:	e8 2c e1 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0014d59:	58                   	pop    eax
c0014d5a:	5a                   	pop    edx
c0014d5b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014d5e:	68 ba b9 02 c0       	push   0xc002b9ba
c0014d63:	e8 1d e1 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0014d68:	59                   	pop    ecx
c0014d69:	58                   	pop    eax
c0014d6a:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014d6d:	68 c5 b9 02 c0       	push   0xc002b9c5
c0014d72:	e8 0e e1 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0014d77:	58                   	pop    eax
c0014d78:	5a                   	pop    edx
c0014d79:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014d7c:	68 d0 b9 02 c0       	push   0xc002b9d0
c0014d81:	e8 ff e0 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0014d86:	59                   	pop    ecx
c0014d87:	58                   	pop    eax
c0014d88:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014d8b:	68 db b9 02 c0       	push   0xc002b9db
c0014d90:	e8 f0 e0 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0014d95:	58                   	pop    eax
c0014d96:	5a                   	pop    edx
c0014d97:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014d9a:	68 e6 b9 02 c0       	push   0xc002b9e6
c0014d9f:	e8 e1 e0 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0014da4:	59                   	pop    ecx
c0014da5:	58                   	pop    eax
c0014da6:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014da9:	68 f5 b9 02 c0       	push   0xc002b9f5
c0014dae:	e8 d2 e0 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0014db3:	58                   	pop    eax
c0014db4:	5a                   	pop    edx
c0014db5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014db8:	68 00 ba 02 c0       	push   0xc002ba00
c0014dbd:	e8 c3 e0 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0014dc2:	59                   	pop    ecx
c0014dc3:	58                   	pop    eax
c0014dc4:	57                   	push   edi
c0014dc5:	68 0b ba 02 c0       	push   0xc002ba0b
c0014dca:	e8 b6 e0 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0014dcf:	58                   	pop    eax
c0014dd0:	5a                   	pop    edx
c0014dd1:	56                   	push   esi
c0014dd2:	68 16 ba 02 c0       	push   0xc002ba16
c0014dd7:	e8 a9 e0 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0014ddc:	59                   	pop    ecx
c0014ddd:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c0014de2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014de8:	e8 bb be ff ff       	call   c0010ca8 <setActiveTerminal(VgaText*)>
c0014ded:	58                   	pop    eax
c0014dee:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014df1:	5a                   	pop    edx
c0014df2:	c1 e0 05             	shl    eax,0x5
c0014df5:	05 20 e0 02 c0       	add    eax,0xc002e020
c0014dfa:	50                   	push   eax
c0014dfb:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c0014e00:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e06:	e8 29 c2 ff ff       	call   c0011034 <VgaText::puts(char const*)>
c0014e0b:	59                   	pop    ecx
c0014e0c:	58                   	pop    eax
c0014e0d:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c0014e12:	68 21 ba 02 c0       	push   0xc002ba21
c0014e17:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e1d:	e8 12 c2 ff ff       	call   c0011034 <VgaText::puts(char const*)>
c0014e22:	58                   	pop    eax
c0014e23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e28:	5a                   	pop    edx
c0014e29:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e2c:	83 c0 0c             	add    eax,0xc
c0014e2f:	50                   	push   eax
c0014e30:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c0014e35:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e3b:	e8 f4 c1 ff ff       	call   c0011034 <VgaText::puts(char const*)>
c0014e40:	59                   	pop    ecx
c0014e41:	58                   	pop    eax
c0014e42:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c0014e47:	68 2a ba 02 c0       	push   0xc002ba2a
c0014e4c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e52:	e8 dd c1 ff ff       	call   c0011034 <VgaText::puts(char const*)>
c0014e57:	58                   	pop    eax
c0014e58:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c0014e5d:	5a                   	pop    edx
c0014e5e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e61:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e67:	e8 ee c1 ff ff       	call   c001105a <VgaText::putx(unsigned int)>
c0014e6c:	59                   	pop    ecx
c0014e6d:	58                   	pop    eax
c0014e6e:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c0014e73:	68 32 ba 02 c0       	push   0xc002ba32
c0014e78:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e7e:	e8 b1 c1 ff ff       	call   c0011034 <VgaText::puts(char const*)>
c0014e83:	58                   	pop    eax
c0014e84:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c0014e89:	5a                   	pop    edx
c0014e8a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014e8d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e93:	e8 c2 c1 ff ff       	call   c001105a <VgaText::putx(unsigned int)>
c0014e98:	59                   	pop    ecx
c0014e99:	58                   	pop    eax
c0014e9a:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c0014e9f:	68 3a ba 02 c0       	push   0xc002ba3a
c0014ea4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eaa:	e8 85 c1 ff ff       	call   c0011034 <VgaText::puts(char const*)>
c0014eaf:	58                   	pop    eax
c0014eb0:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c0014eb5:	5a                   	pop    edx
c0014eb6:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014eb9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ebf:	e8 96 c1 ff ff       	call   c001105a <VgaText::putx(unsigned int)>
c0014ec4:	59                   	pop    ecx
c0014ec5:	58                   	pop    eax
c0014ec6:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c0014ecb:	68 42 ba 02 c0       	push   0xc002ba42
c0014ed0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ed6:	e8 59 c1 ff ff       	call   c0011034 <VgaText::puts(char const*)>
c0014edb:	58                   	pop    eax
c0014edc:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c0014ee1:	5a                   	pop    edx
c0014ee2:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014ee5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eeb:	e8 6a c1 ff ff       	call   c001105a <VgaText::putx(unsigned int)>
c0014ef0:	59                   	pop    ecx
c0014ef1:	58                   	pop    eax
c0014ef2:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c0014ef7:	68 4a ba 02 c0       	push   0xc002ba4a
c0014efc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f02:	e8 2d c1 ff ff       	call   c0011034 <VgaText::puts(char const*)>
c0014f07:	58                   	pop    eax
c0014f08:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c0014f0d:	5a                   	pop    edx
c0014f0e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014f11:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f17:	e8 3e c1 ff ff       	call   c001105a <VgaText::putx(unsigned int)>
c0014f1c:	59                   	pop    ecx
c0014f1d:	58                   	pop    eax
c0014f1e:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c0014f23:	68 52 ba 02 c0       	push   0xc002ba52
c0014f28:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f2e:	e8 01 c1 ff ff       	call   c0011034 <VgaText::puts(char const*)>
c0014f33:	58                   	pop    eax
c0014f34:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c0014f39:	5a                   	pop    edx
c0014f3a:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014f3d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f43:	e8 12 c1 ff ff       	call   c001105a <VgaText::putx(unsigned int)>
c0014f48:	59                   	pop    ecx
c0014f49:	58                   	pop    eax
c0014f4a:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c0014f4f:	68 5a ba 02 c0       	push   0xc002ba5a
c0014f54:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f5a:	e8 d5 c0 ff ff       	call   c0011034 <VgaText::puts(char const*)>
c0014f5f:	58                   	pop    eax
c0014f60:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c0014f65:	5a                   	pop    edx
c0014f66:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014f6a:	52                   	push   edx
c0014f6b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f71:	e8 e4 c0 ff ff       	call   c001105a <VgaText::putx(unsigned int)>
c0014f76:	59                   	pop    ecx
c0014f77:	58                   	pop    eax
c0014f78:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c0014f7d:	68 63 ba 02 c0       	push   0xc002ba63
c0014f82:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f88:	e8 a7 c0 ff ff       	call   c0011034 <VgaText::puts(char const*)>
c0014f8d:	58                   	pop    eax
c0014f8e:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c0014f93:	5a                   	pop    edx
c0014f94:	57                   	push   edi
c0014f95:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f9b:	e8 ba c0 ff ff       	call   c001105a <VgaText::putx(unsigned int)>
c0014fa0:	59                   	pop    ecx
c0014fa1:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c0014fa6:	5f                   	pop    edi
c0014fa7:	68 6b ba 02 c0       	push   0xc002ba6b
c0014fac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fb2:	e8 7d c0 ff ff       	call   c0011034 <VgaText::puts(char const*)>
c0014fb7:	58                   	pop    eax
c0014fb8:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c0014fbd:	5a                   	pop    edx
c0014fbe:	56                   	push   esi
c0014fbf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fc5:	e8 90 c0 ff ff       	call   c001105a <VgaText::putx(unsigned int)>
c0014fca:	59                   	pop    ecx
c0014fcb:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c0014fd0:	5e                   	pop    esi
c0014fd1:	68 73 ba 02 c0       	push   0xc002ba73
c0014fd6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fdc:	e8 53 c0 ff ff       	call   c0011034 <VgaText::puts(char const*)>
c0014fe1:	5f                   	pop    edi
c0014fe2:	58                   	pop    eax
c0014fe3:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c0014fe8:	55                   	push   ebp
c0014fe9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fef:	e8 66 c0 ff ff       	call   c001105a <VgaText::putx(unsigned int)>
c0014ff4:	58                   	pop    eax
c0014ff5:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c0014ffa:	5a                   	pop    edx
c0014ffb:	68 7b ba 02 c0       	push   0xc002ba7b
c0015000:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015006:	e8 29 c0 ff ff       	call   c0011034 <VgaText::puts(char const*)>
c001500b:	0f 21 c0             	mov    eax,db0
c001500e:	59                   	pop    ecx
c001500f:	5e                   	pop    esi
c0015010:	50                   	push   eax
c0015011:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c0015016:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001501c:	e8 39 c0 ff ff       	call   c001105a <VgaText::putx(unsigned int)>
c0015021:	5f                   	pop    edi
c0015022:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c0015027:	5d                   	pop    ebp
c0015028:	68 84 ba 02 c0       	push   0xc002ba84
c001502d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015033:	e8 fc bf ff ff       	call   c0011034 <VgaText::puts(char const*)>
c0015038:	0f 21 c8             	mov    eax,db1
c001503b:	5a                   	pop    edx
c001503c:	59                   	pop    ecx
c001503d:	50                   	push   eax
c001503e:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c0015043:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015049:	e8 0c c0 ff ff       	call   c001105a <VgaText::putx(unsigned int)>
c001504e:	5e                   	pop    esi
c001504f:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c0015054:	5f                   	pop    edi
c0015055:	68 8c ba 02 c0       	push   0xc002ba8c
c001505a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015060:	e8 cf bf ff ff       	call   c0011034 <VgaText::puts(char const*)>
c0015065:	0f 21 d0             	mov    eax,db2
c0015068:	5d                   	pop    ebp
c0015069:	5a                   	pop    edx
c001506a:	50                   	push   eax
c001506b:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c0015070:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015076:	e8 df bf ff ff       	call   c001105a <VgaText::putx(unsigned int)>
c001507b:	59                   	pop    ecx
c001507c:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c0015081:	5e                   	pop    esi
c0015082:	68 94 ba 02 c0       	push   0xc002ba94
c0015087:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001508d:	e8 a2 bf ff ff       	call   c0011034 <VgaText::puts(char const*)>
c0015092:	0f 21 d8             	mov    eax,db3
c0015095:	5f                   	pop    edi
c0015096:	5d                   	pop    ebp
c0015097:	50                   	push   eax
c0015098:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c001509d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150a3:	e8 b2 bf ff ff       	call   c001105a <VgaText::putx(unsigned int)>
c00150a8:	58                   	pop    eax
c00150a9:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c00150ae:	5a                   	pop    edx
c00150af:	68 9c ba 02 c0       	push   0xc002ba9c
c00150b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150ba:	e8 75 bf ff ff       	call   c0011034 <VgaText::puts(char const*)>
c00150bf:	0f 21 f0             	mov    eax,db6
c00150c2:	59                   	pop    ecx
c00150c3:	5e                   	pop    esi
c00150c4:	50                   	push   eax
c00150c5:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c00150ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150d0:	e8 85 bf ff ff       	call   c001105a <VgaText::putx(unsigned int)>
c00150d5:	5f                   	pop    edi
c00150d6:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c00150db:	5d                   	pop    ebp
c00150dc:	68 a4 ba 02 c0       	push   0xc002baa4
c00150e1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150e7:	e8 48 bf ff ff       	call   c0011034 <VgaText::puts(char const*)>
c00150ec:	0f 21 f8             	mov    eax,db7
c00150ef:	5a                   	pop    edx
c00150f0:	59                   	pop    ecx
c00150f1:	50                   	push   eax
c00150f2:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c00150f7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150fd:	e8 58 bf ff ff       	call   c001105a <VgaText::putx(unsigned int)>
c0015102:	5e                   	pop    esi
c0015103:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015106:	e8 e5 8a 00 00       	call   c001dbf0 <Thr::getDriverNameFromAddress(unsigned long)>
c001510b:	83 c4 10             	add    esp,0x10
c001510e:	85 c0                	test   eax,eax
c0015110:	74 7d                	je     c001518f <displayDebugInfo(regs*)+0x48b>
c0015112:	89 c6                	mov    esi,eax
c0015114:	50                   	push   eax
c0015115:	50                   	push   eax
c0015116:	56                   	push   esi
c0015117:	68 ac ba 02 c0       	push   0xc002baac
c001511c:	e8 64 dd ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0015121:	5a                   	pop    edx
c0015122:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c0015127:	59                   	pop    ecx
c0015128:	68 ba ba 02 c0       	push   0xc002baba
c001512d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015133:	e8 fc be ff ff       	call   c0011034 <VgaText::puts(char const*)>
c0015138:	5f                   	pop    edi
c0015139:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c001513e:	5d                   	pop    ebp
c001513f:	56                   	push   esi
c0015140:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015146:	e8 e9 be ff ff       	call   c0011034 <VgaText::puts(char const*)>
c001514b:	58                   	pop    eax
c001514c:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c0015151:	5a                   	pop    edx
c0015152:	68 c6 ba 02 c0       	push   0xc002bac6
c0015157:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001515d:	e8 d2 be ff ff       	call   c0011034 <VgaText::puts(char const*)>
c0015162:	59                   	pop    ecx
c0015163:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c0015168:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c001516e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015171:	e8 b1 8a 00 00       	call   c001dc27 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0015176:	5b                   	pop    ebx
c0015177:	5d                   	pop    ebp
c0015178:	50                   	push   eax
c0015179:	57                   	push   edi
c001517a:	e8 db be ff ff       	call   c001105a <VgaText::putx(unsigned int)>
c001517f:	58                   	pop    eax
c0015180:	5a                   	pop    edx
c0015181:	56                   	push   esi
c0015182:	68 d2 ba 02 c0       	push   0xc002bad2
c0015187:	e8 f9 dc ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001518c:	83 c4 10             	add    esp,0x10
c001518f:	fa                   	cli    
c0015190:	f4                   	hlt    
c0015191:	eb fe                	jmp    c0015191 <displayDebugInfo(regs*)+0x48d>

c0015193 <x87EmulHandler(regs*, void*)>:
c0015193:	83 ec 0c             	sub    esp,0xc
c0015196:	0f 20 c2             	mov    edx,cr0
c0015199:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001519e:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c00151a2:	75 4b                	jne    c00151ef <x87EmulHandler(regs*, void*)+0x5c>
c00151a4:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c00151a9:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c00151af:	85 c0                	test   eax,eax
c00151b1:	74 05                	je     c00151b8 <x87EmulHandler(regs*, void*)+0x25>
c00151b3:	83 e2 08             	and    edx,0x8
c00151b6:	75 17                	jne    c00151cf <x87EmulHandler(regs*, void*)+0x3c>
c00151b8:	83 ec 0c             	sub    esp,0xc
c00151bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151bf:	e8 9c b0 00 00       	call   c0020260 <Vm::x87Handler(regs*)>
c00151c4:	83 c4 10             	add    esp,0x10
c00151c7:	84 c0                	test   al,al
c00151c9:	74 24                	je     c00151ef <x87EmulHandler(regs*, void*)+0x5c>
c00151cb:	83 c4 0c             	add    esp,0xc
c00151ce:	c3                   	ret    
c00151cf:	83 ec 0c             	sub    esp,0xc
c00151d2:	68 f8 ba 02 c0       	push   0xc002baf8
c00151d7:	e8 a9 dc ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00151dc:	0f 06                	clts   
c00151de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151e3:	83 c4 10             	add    esp,0x10
c00151e6:	a3 08 f2 02 c0       	mov    ds:0xc002f208,eax
c00151eb:	83 c4 0c             	add    esp,0xc
c00151ee:	c3                   	ret    
c00151ef:	83 ec 0c             	sub    esp,0xc
c00151f2:	68 e2 ba 02 c0       	push   0xc002bae2
c00151f7:	e8 89 dc ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00151fc:	5a                   	pop    edx
c00151fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015201:	e8 fe fa ff ff       	call   c0014d04 <displayDebugInfo(regs*)>

c0015206 <gpFault(regs*, void*)>:
c0015206:	53                   	push   ebx
c0015207:	83 ec 14             	sub    esp,0x14
c001520a:	c7 05 04 f2 02 c0 dd f5 01 c0 	mov    DWORD PTR ds:0xc002f204,0xc001f5dd
c0015214:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015218:	53                   	push   ebx
c0015219:	e8 bf a3 00 00       	call   c001f5dd <Vm::faultHandler(regs*)>
c001521e:	83 c4 10             	add    esp,0x10
c0015221:	84 c0                	test   al,al
c0015223:	74 05                	je     c001522a <gpFault(regs*, void*)+0x24>
c0015225:	83 c4 08             	add    esp,0x8
c0015228:	5b                   	pop    ebx
c0015229:	c3                   	ret    
c001522a:	83 ec 0c             	sub    esp,0xc
c001522d:	68 05 bb 02 c0       	push   0xc002bb05
c0015232:	e8 4e dc ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0015237:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001523a:	e8 c5 fa ff ff       	call   c0014d04 <displayDebugInfo(regs*)>

c001523f <pgFault(regs*, void*)>:
c001523f:	83 ec 14             	sub    esp,0x14
c0015242:	0f 20 d0             	mov    eax,cr2
c0015245:	50                   	push   eax
c0015246:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001524b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001524e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0015254:	e8 49 d8 ff ff       	call   c0012aa2 <VAS::tryLoadBackOffDisk(unsigned long)>
c0015259:	83 c4 10             	add    esp,0x10
c001525c:	84 c0                	test   al,al
c001525e:	74 04                	je     c0015264 <pgFault(regs*, void*)+0x25>
c0015260:	83 c4 0c             	add    esp,0xc
c0015263:	c3                   	ret    
c0015264:	83 ec 0c             	sub    esp,0xc
c0015267:	68 20 bb 02 c0       	push   0xc002bb20
c001526c:	e8 14 dc ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0015271:	58                   	pop    eax
c0015272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015276:	e8 89 fa ff ff       	call   c0014d04 <displayDebugInfo(regs*)>

c001527b <otherISRHandler(regs*, void*)>:
c001527b:	53                   	push   ebx
c001527c:	83 ec 0c             	sub    esp,0xc
c001527f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015283:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0015286:	50                   	push   eax
c0015287:	50                   	push   eax
c0015288:	68 2d bb 02 c0       	push   0xc002bb2d
c001528d:	e8 f3 db ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0015292:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015295:	e8 6a fa ff ff       	call   c0014d04 <displayDebugInfo(regs*)>

c001529a <opcodeFault(regs*, void*)>:
c001529a:	55                   	push   ebp
c001529b:	89 e5                	mov    ebp,esp
c001529d:	56                   	push   esi
c001529e:	53                   	push   ebx
c001529f:	83 ec 40             	sub    esp,0x40
c00152a2:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c00152a7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00152ad:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c00152b3:	84 c0                	test   al,al
c00152b5:	74 24                	je     c00152db <opcodeFault(regs*, void*)+0x41>
c00152b7:	83 ec 0c             	sub    esp,0xc
c00152ba:	68 4c bb 02 c0       	push   0xc002bb4c
c00152bf:	e8 c1 db ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00152c4:	83 c4 10             	add    esp,0x10
c00152c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ca:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152cd:	8d 50 19             	lea    edx,[eax+0x19]
c00152d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152d3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152d6:	e9 d5 05 00 00       	jmp    c00158b0 <opcodeFault(regs*, void*)+0x616>
c00152db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152de:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152e1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00152e4:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00152e8:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00152ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ef:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152f2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00152f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152f8:	8a 00                	mov    al,BYTE PTR [eax]
c00152fa:	3c f0                	cmp    al,0xf0
c00152fc:	75 17                	jne    c0015315 <opcodeFault(regs*, void*)+0x7b>
c00152fe:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015301:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015304:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015307:	8d 50 01             	lea    edx,[eax+0x1]
c001530a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001530d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015310:	e9 da 00 00 00       	jmp    c00153ef <opcodeFault(regs*, void*)+0x155>
c0015315:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015318:	8a 00                	mov    al,BYTE PTR [eax]
c001531a:	3c f2                	cmp    al,0xf2
c001531c:	74 09                	je     c0015327 <opcodeFault(regs*, void*)+0x8d>
c001531e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015321:	8a 00                	mov    al,BYTE PTR [eax]
c0015323:	3c f3                	cmp    al,0xf3
c0015325:	75 1b                	jne    c0015342 <opcodeFault(regs*, void*)+0xa8>
c0015327:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001532b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001532e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015331:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015334:	8d 50 01             	lea    edx,[eax+0x1]
c0015337:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001533a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001533d:	e9 ad 00 00 00       	jmp    c00153ef <opcodeFault(regs*, void*)+0x155>
c0015342:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015345:	8a 00                	mov    al,BYTE PTR [eax]
c0015347:	3c 66                	cmp    al,0x66
c0015349:	75 1f                	jne    c001536a <opcodeFault(regs*, void*)+0xd0>
c001534b:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001534f:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0015353:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015356:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015359:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001535c:	8d 50 01             	lea    edx,[eax+0x1]
c001535f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015362:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015365:	e9 85 00 00 00       	jmp    c00153ef <opcodeFault(regs*, void*)+0x155>
c001536a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001536d:	8a 00                	mov    al,BYTE PTR [eax]
c001536f:	3c 67                	cmp    al,0x67
c0015371:	75 18                	jne    c001538b <opcodeFault(regs*, void*)+0xf1>
c0015373:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015377:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001537a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001537d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015380:	8d 50 01             	lea    edx,[eax+0x1]
c0015383:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015386:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015389:	eb 64                	jmp    c00153ef <opcodeFault(regs*, void*)+0x155>
c001538b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001538e:	8a 00                	mov    al,BYTE PTR [eax]
c0015390:	3c 2e                	cmp    al,0x2e
c0015392:	74 09                	je     c001539d <opcodeFault(regs*, void*)+0x103>
c0015394:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015397:	8a 00                	mov    al,BYTE PTR [eax]
c0015399:	3c 3e                	cmp    al,0x3e
c001539b:	75 18                	jne    c00153b5 <opcodeFault(regs*, void*)+0x11b>
c001539d:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153a1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153aa:	8d 50 01             	lea    edx,[eax+0x1]
c00153ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153b3:	eb 3a                	jmp    c00153ef <opcodeFault(regs*, void*)+0x155>
c00153b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153b8:	8a 00                	mov    al,BYTE PTR [eax]
c00153ba:	3c 36                	cmp    al,0x36
c00153bc:	74 1b                	je     c00153d9 <opcodeFault(regs*, void*)+0x13f>
c00153be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c1:	8a 00                	mov    al,BYTE PTR [eax]
c00153c3:	3c 26                	cmp    al,0x26
c00153c5:	74 12                	je     c00153d9 <opcodeFault(regs*, void*)+0x13f>
c00153c7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ca:	8a 00                	mov    al,BYTE PTR [eax]
c00153cc:	3c 64                	cmp    al,0x64
c00153ce:	74 09                	je     c00153d9 <opcodeFault(regs*, void*)+0x13f>
c00153d0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d3:	8a 00                	mov    al,BYTE PTR [eax]
c00153d5:	3c 65                	cmp    al,0x65
c00153d7:	75 16                	jne    c00153ef <opcodeFault(regs*, void*)+0x155>
c00153d9:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153dd:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153e6:	8d 50 01             	lea    edx,[eax+0x1]
c00153e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ec:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f2:	8a 00                	mov    al,BYTE PTR [eax]
c00153f4:	3c 0f                	cmp    al,0xf
c00153f6:	0f 85 ad 00 00 00    	jne    c00154a9 <opcodeFault(regs*, void*)+0x20f>
c00153fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ff:	40                   	inc    eax
c0015400:	8a 00                	mov    al,BYTE PTR [eax]
c0015402:	3c c2                	cmp    al,0xc2
c0015404:	74 0e                	je     c0015414 <opcodeFault(regs*, void*)+0x17a>
c0015406:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015409:	40                   	inc    eax
c001540a:	8a 00                	mov    al,BYTE PTR [eax]
c001540c:	3c c3                	cmp    al,0xc3
c001540e:	0f 85 95 00 00 00    	jne    c00154a9 <opcodeFault(regs*, void*)+0x20f>
c0015414:	83 ec 0c             	sub    esp,0xc
c0015417:	68 6f bb 02 c0       	push   0xc002bb6f
c001541c:	e8 64 da ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0015421:	83 c4 10             	add    esp,0x10
c0015424:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015427:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001542a:	8d 50 01             	lea    edx,[eax+0x1]
c001542d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015430:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015433:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015436:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015439:	8a 00                	mov    al,BYTE PTR [eax]
c001543b:	8d 50 fe             	lea    edx,[eax-0x2]
c001543e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015441:	88 10                	mov    BYTE PTR [eax],dl
c0015443:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0015446:	50                   	push   eax
c0015447:	8d 45 c3             	lea    eax,[ebp-0x3d]
c001544a:	50                   	push   eax
c001544b:	8d 45 c4             	lea    eax,[ebp-0x3c]
c001544e:	50                   	push   eax
c001544f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015452:	e8 e3 4a 00 00       	call   c0019f3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015457:	83 c4 10             	add    esp,0x10
c001545a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001545d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015460:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015463:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0015466:	01 d0                	add    eax,edx
c0015468:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001546b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001546e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015471:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015474:	48                   	dec    eax
c0015475:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0015478:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001547b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001547e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015481:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015484:	83 ec 04             	sub    esp,0x4
c0015487:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001548a:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001548d:	50                   	push   eax
c001548e:	e8 21 ad fe ff       	call   c00001b4 <voodooXADD>
c0015493:	83 c4 10             	add    esp,0x10
c0015496:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0015499:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001549c:	01 c2                	add    edx,eax
c001549e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154a4:	e9 07 04 00 00       	jmp    c00158b0 <opcodeFault(regs*, void*)+0x616>
c00154a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ac:	8a 00                	mov    al,BYTE PTR [eax]
c00154ae:	3c 0f                	cmp    al,0xf
c00154b0:	0f 85 8b 01 00 00    	jne    c0015641 <opcodeFault(regs*, void*)+0x3a7>
c00154b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b9:	40                   	inc    eax
c00154ba:	8a 00                	mov    al,BYTE PTR [eax]
c00154bc:	3c c7                	cmp    al,0xc7
c00154be:	0f 86 7d 01 00 00    	jbe    c0015641 <opcodeFault(regs*, void*)+0x3a7>
c00154c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154c7:	40                   	inc    eax
c00154c8:	8a 00                	mov    al,BYTE PTR [eax]
c00154ca:	3c cf                	cmp    al,0xcf
c00154cc:	0f 87 6f 01 00 00    	ja     c0015641 <opcodeFault(regs*, void*)+0x3a7>
c00154d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154d5:	40                   	inc    eax
c00154d6:	8a 00                	mov    al,BYTE PTR [eax]
c00154d8:	83 c0 38             	add    eax,0x38
c00154db:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00154de:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00154e2:	75 0b                	jne    c00154ef <opcodeFault(regs*, void*)+0x255>
c00154e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154e7:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00154ea:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154ed:	eb 75                	jmp    c0015564 <opcodeFault(regs*, void*)+0x2ca>
c00154ef:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00154f3:	75 0b                	jne    c0015500 <opcodeFault(regs*, void*)+0x266>
c00154f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154f8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00154fb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154fe:	eb 64                	jmp    c0015564 <opcodeFault(regs*, void*)+0x2ca>
c0015500:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015504:	75 0b                	jne    c0015511 <opcodeFault(regs*, void*)+0x277>
c0015506:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015509:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001550c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001550f:	eb 53                	jmp    c0015564 <opcodeFault(regs*, void*)+0x2ca>
c0015511:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015515:	75 0b                	jne    c0015522 <opcodeFault(regs*, void*)+0x288>
c0015517:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001551a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001551d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015520:	eb 42                	jmp    c0015564 <opcodeFault(regs*, void*)+0x2ca>
c0015522:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015526:	75 0b                	jne    c0015533 <opcodeFault(regs*, void*)+0x299>
c0015528:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001552b:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001552e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015531:	eb 31                	jmp    c0015564 <opcodeFault(regs*, void*)+0x2ca>
c0015533:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015537:	75 0b                	jne    c0015544 <opcodeFault(regs*, void*)+0x2aa>
c0015539:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001553c:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001553f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015542:	eb 20                	jmp    c0015564 <opcodeFault(regs*, void*)+0x2ca>
c0015544:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015548:	75 0b                	jne    c0015555 <opcodeFault(regs*, void*)+0x2bb>
c001554a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001554d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015550:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015553:	eb 0f                	jmp    c0015564 <opcodeFault(regs*, void*)+0x2ca>
c0015555:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015559:	75 09                	jne    c0015564 <opcodeFault(regs*, void*)+0x2ca>
c001555b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001555e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015561:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015564:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0015568:	74 10                	je     c001557a <opcodeFault(regs*, void*)+0x2e0>
c001556a:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0015571:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0015578:	eb 2d                	jmp    c00155a7 <opcodeFault(regs*, void*)+0x30d>
c001557a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001557d:	c1 e0 18             	shl    eax,0x18
c0015580:	89 c2                	mov    edx,eax
c0015582:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015585:	c1 e0 08             	shl    eax,0x8
c0015588:	25 00 00 ff 00       	and    eax,0xff0000
c001558d:	09 c2                	or     edx,eax
c001558f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015592:	c1 e8 08             	shr    eax,0x8
c0015595:	25 00 ff 00 00       	and    eax,0xff00
c001559a:	09 c2                	or     edx,eax
c001559c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001559f:	c1 e8 18             	shr    eax,0x18
c00155a2:	09 d0                	or     eax,edx
c00155a4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155a7:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00155ab:	75 0b                	jne    c00155b8 <opcodeFault(regs*, void*)+0x31e>
c00155ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155b3:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00155b6:	eb 75                	jmp    c001562d <opcodeFault(regs*, void*)+0x393>
c00155b8:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00155bc:	75 0b                	jne    c00155c9 <opcodeFault(regs*, void*)+0x32f>
c00155be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155c4:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00155c7:	eb 64                	jmp    c001562d <opcodeFault(regs*, void*)+0x393>
c00155c9:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00155cd:	75 0b                	jne    c00155da <opcodeFault(regs*, void*)+0x340>
c00155cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155d5:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00155d8:	eb 53                	jmp    c001562d <opcodeFault(regs*, void*)+0x393>
c00155da:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00155de:	75 0b                	jne    c00155eb <opcodeFault(regs*, void*)+0x351>
c00155e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155e6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00155e9:	eb 42                	jmp    c001562d <opcodeFault(regs*, void*)+0x393>
c00155eb:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00155ef:	75 0b                	jne    c00155fc <opcodeFault(regs*, void*)+0x362>
c00155f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155f7:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00155fa:	eb 31                	jmp    c001562d <opcodeFault(regs*, void*)+0x393>
c00155fc:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015600:	75 0b                	jne    c001560d <opcodeFault(regs*, void*)+0x373>
c0015602:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015605:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015608:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001560b:	eb 20                	jmp    c001562d <opcodeFault(regs*, void*)+0x393>
c001560d:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015611:	75 0b                	jne    c001561e <opcodeFault(regs*, void*)+0x384>
c0015613:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015616:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015619:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001561c:	eb 0f                	jmp    c001562d <opcodeFault(regs*, void*)+0x393>
c001561e:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015622:	75 09                	jne    c001562d <opcodeFault(regs*, void*)+0x393>
c0015624:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015627:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001562a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001562d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015630:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015633:	8d 50 02             	lea    edx,[eax+0x2]
c0015636:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015639:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001563c:	e9 6f 02 00 00       	jmp    c00158b0 <opcodeFault(regs*, void*)+0x616>
c0015641:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015644:	8a 00                	mov    al,BYTE PTR [eax]
c0015646:	3c 0f                	cmp    al,0xf
c0015648:	0f 85 8d 01 00 00    	jne    c00157db <opcodeFault(regs*, void*)+0x541>
c001564e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015651:	40                   	inc    eax
c0015652:	8a 00                	mov    al,BYTE PTR [eax]
c0015654:	3c c7                	cmp    al,0xc7
c0015656:	0f 85 7f 01 00 00    	jne    c00157db <opcodeFault(regs*, void*)+0x541>
c001565c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001565f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015662:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015665:	8d 50 01             	lea    edx,[eax+0x1]
c0015668:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001566b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001566e:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015671:	50                   	push   eax
c0015672:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015675:	50                   	push   eax
c0015676:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015679:	50                   	push   eax
c001567a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001567d:	e8 b8 48 00 00       	call   c0019f3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015682:	83 c4 10             	add    esp,0x10
c0015685:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015688:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c001568b:	83 f0 01             	xor    eax,0x1
c001568e:	84 c0                	test   al,al
c0015690:	0f 84 45 01 00 00    	je     c00157db <opcodeFault(regs*, void*)+0x541>
c0015696:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015699:	3c 01                	cmp    al,0x1
c001569b:	0f 85 3a 01 00 00    	jne    c00157db <opcodeFault(regs*, void*)+0x541>
c00156a1:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00156a4:	83 f0 01             	xor    eax,0x1
c00156a7:	84 c0                	test   al,al
c00156a9:	0f 84 2c 01 00 00    	je     c00157db <opcodeFault(regs*, void*)+0x541>
c00156af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b2:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00156b5:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00156b8:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00156bf:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00156c2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00156c5:	89 c2                	mov    edx,eax
c00156c7:	b8 00 00 00 00       	mov    eax,0x0
c00156cc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00156cf:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00156d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d5:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00156d8:	ba 00 00 00 00       	mov    edx,0x0
c00156dd:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00156e0:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00156e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00156e9:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00156ec:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00156f3:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00156f6:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00156f9:	89 c2                	mov    edx,eax
c00156fb:	b8 00 00 00 00       	mov    eax,0x0
c0015700:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015703:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015706:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015709:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001570c:	ba 00 00 00 00       	mov    edx,0x0
c0015711:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015714:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015717:	fa                   	cli    
c0015718:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c001571d:	40                   	inc    eax
c001571e:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c0015723:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015726:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015729:	8b 00                	mov    eax,DWORD PTR [eax]
c001572b:	89 c1                	mov    ecx,eax
c001572d:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015730:	89 cb                	mov    ebx,ecx
c0015732:	89 d0                	mov    eax,edx
c0015734:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015737:	89 c6                	mov    esi,eax
c0015739:	89 f0                	mov    eax,esi
c001573b:	09 d8                	or     eax,ebx
c001573d:	85 c0                	test   eax,eax
c001573f:	75 21                	jne    c0015762 <opcodeFault(regs*, void*)+0x4c8>
c0015741:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015744:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015747:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001574a:	89 01                	mov    DWORD PTR [ecx],eax
c001574c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001574f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015752:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015755:	83 c8 40             	or     eax,0x40
c0015758:	89 c2                	mov    edx,eax
c001575a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001575d:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015760:	eb 3e                	jmp    c00157a0 <opcodeFault(regs*, void*)+0x506>
c0015762:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015765:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015768:	8b 00                	mov    eax,DWORD PTR [eax]
c001576a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001576d:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015770:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015773:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015776:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015779:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001577c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001577f:	89 d0                	mov    eax,edx
c0015781:	31 d2                	xor    edx,edx
c0015783:	89 c3                	mov    ebx,eax
c0015785:	89 d6                	mov    esi,edx
c0015787:	89 da                	mov    edx,ebx
c0015789:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001578c:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001578f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015792:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015795:	83 e0 bf             	and    eax,0xffffffbf
c0015798:	89 c2                	mov    edx,eax
c001579a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001579d:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00157a0:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c00157a5:	48                   	dec    eax
c00157a6:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c00157ab:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c00157b0:	85 c0                	test   eax,eax
c00157b2:	75 01                	jne    c00157b5 <opcodeFault(regs*, void*)+0x51b>
c00157b4:	fb                   	sti    
c00157b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00157bb:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00157be:	01 c2                	add    edx,eax
c00157c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00157c6:	83 ec 0c             	sub    esp,0xc
c00157c9:	68 7e bb 02 c0       	push   0xc002bb7e
c00157ce:	e8 b2 d6 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00157d3:	83 c4 10             	add    esp,0x10
c00157d6:	e9 d5 00 00 00       	jmp    c00158b0 <opcodeFault(regs*, void*)+0x616>
c00157db:	83 ec 0c             	sub    esp,0xc
c00157de:	68 91 bb 02 c0       	push   0xc002bb91
c00157e3:	e8 9d d6 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00157e8:	83 c4 10             	add    esp,0x10
c00157eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ee:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157f7:	c1 e0 04             	shl    eax,0x4
c00157fa:	01 d0                	add    eax,edx
c00157fc:	83 c0 03             	add    eax,0x3
c00157ff:	8a 00                	mov    al,BYTE PTR [eax]
c0015801:	0f b6 d8             	movzx  ebx,al
c0015804:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015807:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001580a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001580d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015810:	c1 e0 04             	shl    eax,0x4
c0015813:	01 d0                	add    eax,edx
c0015815:	83 c0 02             	add    eax,0x2
c0015818:	8a 00                	mov    al,BYTE PTR [eax]
c001581a:	0f b6 c8             	movzx  ecx,al
c001581d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015820:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015823:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015826:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015829:	c1 e0 04             	shl    eax,0x4
c001582c:	01 d0                	add    eax,edx
c001582e:	40                   	inc    eax
c001582f:	8a 00                	mov    al,BYTE PTR [eax]
c0015831:	0f b6 d0             	movzx  edx,al
c0015834:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015837:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c001583a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001583d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015840:	c1 e0 04             	shl    eax,0x4
c0015843:	01 f0                	add    eax,esi
c0015845:	8a 00                	mov    al,BYTE PTR [eax]
c0015847:	0f b6 c0             	movzx  eax,al
c001584a:	83 ec 0c             	sub    esp,0xc
c001584d:	53                   	push   ebx
c001584e:	51                   	push   ecx
c001584f:	52                   	push   edx
c0015850:	50                   	push   eax
c0015851:	68 a4 bb 02 c0       	push   0xc002bba4
c0015856:	e8 2a d6 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001585b:	83 c4 20             	add    esp,0x20
c001585e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015861:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015864:	83 c0 03             	add    eax,0x3
c0015867:	8a 00                	mov    al,BYTE PTR [eax]
c0015869:	0f b6 d8             	movzx  ebx,al
c001586c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001586f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015872:	83 c0 02             	add    eax,0x2
c0015875:	8a 00                	mov    al,BYTE PTR [eax]
c0015877:	0f b6 c8             	movzx  ecx,al
c001587a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001587d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015880:	40                   	inc    eax
c0015881:	8a 00                	mov    al,BYTE PTR [eax]
c0015883:	0f b6 d0             	movzx  edx,al
c0015886:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015889:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001588c:	8a 00                	mov    al,BYTE PTR [eax]
c001588e:	0f b6 c0             	movzx  eax,al
c0015891:	83 ec 0c             	sub    esp,0xc
c0015894:	53                   	push   ebx
c0015895:	51                   	push   ecx
c0015896:	52                   	push   edx
c0015897:	50                   	push   eax
c0015898:	68 cc bb 02 c0       	push   0xc002bbcc
c001589d:	e8 e3 d5 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00158a2:	83 c4 20             	add    esp,0x20
c00158a5:	83 ec 0c             	sub    esp,0xc
c00158a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00158ab:	e8 54 f4 ff ff       	call   c0014d04 <displayDebugInfo(regs*)>
c00158b0:	8d 65 f8             	lea    esp,[ebp-0x8]
c00158b3:	5b                   	pop    ebx
c00158b4:	5e                   	pop    esi
c00158b5:	5d                   	pop    ebp
c00158b6:	c3                   	ret    

c00158b7 <displayProgramFault(char const*)>:
c00158b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158bc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00158bf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00158c5:	85 c0                	test   eax,eax
c00158c7:	74 15                	je     c00158de <displayProgramFault(char const*)+0x27>
c00158c9:	83 ec 0c             	sub    esp,0xc
c00158cc:	6a 04                	push   0x4
c00158ce:	6a 0f                	push   0xf
c00158d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00158d4:	50                   	push   eax
c00158d5:	e8 9c b4 ff ff       	call   c0010d76 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00158da:	83 c4 1c             	add    esp,0x1c
c00158dd:	c3                   	ret    
c00158de:	c3                   	ret    

c00158df <setupInterruptController()>:
c00158df:	55                   	push   ebp
c00158e0:	89 e5                	mov    ebp,esp
c00158e2:	53                   	push   ebx
c00158e3:	83 ec 24             	sub    esp,0x24
c00158e6:	b8 00 00 00 00       	mov    eax,0x0
c00158eb:	85 c0                	test   eax,eax
c00158ed:	0f 95 c0             	setne  al
c00158f0:	84 c0                	test   al,al
c00158f2:	74 5b                	je     c001594f <setupInterruptController()+0x70>
c00158f4:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00158fb:	83 ec 0c             	sub    esp,0xc
c00158fe:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015901:	e8 d4 9f ff ff       	call   c000f8da <malloc>
c0015906:	83 c4 10             	add    esp,0x10
c0015909:	89 c3                	mov    ebx,eax
c001590b:	83 ec 0c             	sub    esp,0xc
c001590e:	53                   	push   ebx
c001590f:	e8 d6 09 01 00       	call   c00262ea <APIC::APIC()>
c0015914:	83 c4 10             	add    esp,0x10
c0015917:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c001591a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001591d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015920:	8b 00                	mov    eax,DWORD PTR [eax]
c0015922:	83 c0 08             	add    eax,0x8
c0015925:	8b 00                	mov    eax,DWORD PTR [eax]
c0015927:	6a 00                	push   0x0
c0015929:	6a 00                	push   0x0
c001592b:	6a 00                	push   0x0
c001592d:	52                   	push   edx
c001592e:	ff d0                	call   eax
c0015930:	83 c4 10             	add    esp,0x10
c0015933:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c0015938:	83 ec 08             	sub    esp,0x8
c001593b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001593e:	50                   	push   eax
c001593f:	e8 62 e9 ff ff       	call   c00142a6 <Device::addChild(Device*)>
c0015944:	83 c4 10             	add    esp,0x10
c0015947:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001594a:	e9 89 03 00 00       	jmp    c0015cd8 <setupInterruptController()+0x3f9>
c001594f:	a0 00 1a 03 c0       	mov    al,ds:0xc0031a00
c0015954:	84 c0                	test   al,al
c0015956:	75 24                	jne    c001597c <setupInterruptController()+0x9d>
c0015958:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c001595d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015963:	83 e2 fe             	and    edx,0xfffffffe
c0015966:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001596c:	83 ec 0c             	sub    esp,0xc
c001596f:	68 f1 bb 02 c0       	push   0xc002bbf1
c0015974:	e8 0c d5 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0015979:	83 c4 10             	add    esp,0x10
c001597c:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c0015981:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015987:	83 e0 01             	and    eax,0x1
c001598a:	84 c0                	test   al,al
c001598c:	0f 95 c0             	setne  al
c001598f:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015992:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015999:	83 ec 0c             	sub    esp,0xc
c001599c:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001599f:	e8 36 9f ff ff       	call   c000f8da <malloc>
c00159a4:	83 c4 10             	add    esp,0x10
c00159a7:	89 c3                	mov    ebx,eax
c00159a9:	83 ec 0c             	sub    esp,0xc
c00159ac:	53                   	push   ebx
c00159ad:	e8 90 0e 01 00       	call   c0026842 <PIC::PIC()>
c00159b2:	83 c4 10             	add    esp,0x10
c00159b5:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00159b8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159be:	8b 00                	mov    eax,DWORD PTR [eax]
c00159c0:	83 c0 08             	add    eax,0x8
c00159c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00159c5:	6a 00                	push   0x0
c00159c7:	6a 00                	push   0x0
c00159c9:	6a 00                	push   0x0
c00159cb:	52                   	push   edx
c00159cc:	ff d0                	call   eax
c00159ce:	83 c4 10             	add    esp,0x10
c00159d1:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00159d5:	74 73                	je     c0015a4a <setupInterruptController()+0x16b>
c00159d7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00159df:	83 c0 0c             	add    eax,0xc
c00159e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00159e4:	6a 00                	push   0x0
c00159e6:	6a 00                	push   0x0
c00159e8:	6a 00                	push   0x0
c00159ea:	52                   	push   edx
c00159eb:	ff d0                	call   eax
c00159ed:	83 c4 10             	add    esp,0x10
c00159f0:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00159f4:	74 15                	je     c0015a0b <setupInterruptController()+0x12c>
c00159f6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00159fb:	83 c0 04             	add    eax,0x4
c00159fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a00:	83 ec 0c             	sub    esp,0xc
c0015a03:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a06:	ff d0                	call   eax
c0015a08:	83 c4 10             	add    esp,0x10
c0015a0b:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015a12:	83 ec 0c             	sub    esp,0xc
c0015a15:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015a18:	e8 bd 9e ff ff       	call   c000f8da <malloc>
c0015a1d:	83 c4 10             	add    esp,0x10
c0015a20:	89 c3                	mov    ebx,eax
c0015a22:	83 ec 0c             	sub    esp,0xc
c0015a25:	53                   	push   ebx
c0015a26:	e8 bf 08 01 00       	call   c00262ea <APIC::APIC()>
c0015a2b:	83 c4 10             	add    esp,0x10
c0015a2e:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a31:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a34:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a37:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a39:	83 c0 08             	add    eax,0x8
c0015a3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a3e:	6a 00                	push   0x0
c0015a40:	6a 00                	push   0x0
c0015a42:	6a 00                	push   0x0
c0015a44:	52                   	push   edx
c0015a45:	ff d0                	call   eax
c0015a47:	83 c4 10             	add    esp,0x10
c0015a4a:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c0015a4f:	83 ec 08             	sub    esp,0x8
c0015a52:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a55:	50                   	push   eax
c0015a56:	e8 4b e8 ff ff       	call   c00142a6 <Device::addChild(Device*)>
c0015a5b:	83 c4 10             	add    esp,0x10
c0015a5e:	c7 05 08 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f208,0x0
c0015a68:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a6d:	83 c0 24             	add    eax,0x24
c0015a70:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a72:	6a 00                	push   0x0
c0015a74:	68 7b 52 01 c0       	push   0xc001527b
c0015a79:	6a 00                	push   0x0
c0015a7b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a7e:	ff d0                	call   eax
c0015a80:	83 c4 10             	add    esp,0x10
c0015a83:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a86:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a88:	83 c0 24             	add    eax,0x24
c0015a8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a8d:	6a 00                	push   0x0
c0015a8f:	68 7b 52 01 c0       	push   0xc001527b
c0015a94:	6a 01                	push   0x1
c0015a96:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a99:	ff d0                	call   eax
c0015a9b:	83 c4 10             	add    esp,0x10
c0015a9e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aa1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa3:	83 c0 24             	add    eax,0x24
c0015aa6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa8:	6a 00                	push   0x0
c0015aaa:	68 61 4b 01 c0       	push   0xc0014b61
c0015aaf:	6a 02                	push   0x2
c0015ab1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ab4:	ff d0                	call   eax
c0015ab6:	83 c4 10             	add    esp,0x10
c0015ab9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015abc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015abe:	83 c0 24             	add    eax,0x24
c0015ac1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac3:	6a 00                	push   0x0
c0015ac5:	68 7b 52 01 c0       	push   0xc001527b
c0015aca:	6a 03                	push   0x3
c0015acc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015acf:	ff d0                	call   eax
c0015ad1:	83 c4 10             	add    esp,0x10
c0015ad4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ad7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad9:	83 c0 24             	add    eax,0x24
c0015adc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ade:	6a 00                	push   0x0
c0015ae0:	68 7b 52 01 c0       	push   0xc001527b
c0015ae5:	6a 04                	push   0x4
c0015ae7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aea:	ff d0                	call   eax
c0015aec:	83 c4 10             	add    esp,0x10
c0015aef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015af2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af4:	83 c0 24             	add    eax,0x24
c0015af7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af9:	6a 00                	push   0x0
c0015afb:	68 7b 52 01 c0       	push   0xc001527b
c0015b00:	6a 05                	push   0x5
c0015b02:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b05:	ff d0                	call   eax
c0015b07:	83 c4 10             	add    esp,0x10
c0015b0a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b0f:	83 c0 24             	add    eax,0x24
c0015b12:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b14:	6a 00                	push   0x0
c0015b16:	68 9a 52 01 c0       	push   0xc001529a
c0015b1b:	6a 06                	push   0x6
c0015b1d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b20:	ff d0                	call   eax
c0015b22:	83 c4 10             	add    esp,0x10
c0015b25:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b28:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b2a:	83 c0 24             	add    eax,0x24
c0015b2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b2f:	6a 00                	push   0x0
c0015b31:	68 93 51 01 c0       	push   0xc0015193
c0015b36:	6a 07                	push   0x7
c0015b38:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b3b:	ff d0                	call   eax
c0015b3d:	83 c4 10             	add    esp,0x10
c0015b40:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b43:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b45:	83 c0 24             	add    eax,0x24
c0015b48:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b4a:	6a 00                	push   0x0
c0015b4c:	68 7c 49 01 c0       	push   0xc001497c
c0015b51:	6a 08                	push   0x8
c0015b53:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b56:	ff d0                	call   eax
c0015b58:	83 c4 10             	add    esp,0x10
c0015b5b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b60:	83 c0 24             	add    eax,0x24
c0015b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b65:	6a 00                	push   0x0
c0015b67:	68 7b 52 01 c0       	push   0xc001527b
c0015b6c:	6a 09                	push   0x9
c0015b6e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b71:	ff d0                	call   eax
c0015b73:	83 c4 10             	add    esp,0x10
c0015b76:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b79:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b7b:	83 c0 24             	add    eax,0x24
c0015b7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b80:	6a 00                	push   0x0
c0015b82:	68 7b 52 01 c0       	push   0xc001527b
c0015b87:	6a 0a                	push   0xa
c0015b89:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b8c:	ff d0                	call   eax
c0015b8e:	83 c4 10             	add    esp,0x10
c0015b91:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b94:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b96:	83 c0 24             	add    eax,0x24
c0015b99:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b9b:	6a 00                	push   0x0
c0015b9d:	68 7b 52 01 c0       	push   0xc001527b
c0015ba2:	6a 0b                	push   0xb
c0015ba4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ba7:	ff d0                	call   eax
c0015ba9:	83 c4 10             	add    esp,0x10
c0015bac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015baf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb1:	83 c0 24             	add    eax,0x24
c0015bb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb6:	6a 00                	push   0x0
c0015bb8:	68 7b 52 01 c0       	push   0xc001527b
c0015bbd:	6a 0c                	push   0xc
c0015bbf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bc2:	ff d0                	call   eax
c0015bc4:	83 c4 10             	add    esp,0x10
c0015bc7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bca:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bcc:	83 c0 24             	add    eax,0x24
c0015bcf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd1:	6a 00                	push   0x0
c0015bd3:	68 06 52 01 c0       	push   0xc0015206
c0015bd8:	6a 0d                	push   0xd
c0015bda:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bdd:	ff d0                	call   eax
c0015bdf:	83 c4 10             	add    esp,0x10
c0015be2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015be5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be7:	83 c0 24             	add    eax,0x24
c0015bea:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bec:	6a 00                	push   0x0
c0015bee:	68 3f 52 01 c0       	push   0xc001523f
c0015bf3:	6a 0e                	push   0xe
c0015bf5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bf8:	ff d0                	call   eax
c0015bfa:	83 c4 10             	add    esp,0x10
c0015bfd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c00:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c02:	83 c0 24             	add    eax,0x24
c0015c05:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c07:	6a 00                	push   0x0
c0015c09:	68 7b 52 01 c0       	push   0xc001527b
c0015c0e:	6a 0f                	push   0xf
c0015c10:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c13:	ff d0                	call   eax
c0015c15:	83 c4 10             	add    esp,0x10
c0015c18:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c1d:	83 c0 24             	add    eax,0x24
c0015c20:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c22:	6a 00                	push   0x0
c0015c24:	68 7b 52 01 c0       	push   0xc001527b
c0015c29:	6a 10                	push   0x10
c0015c2b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c2e:	ff d0                	call   eax
c0015c30:	83 c4 10             	add    esp,0x10
c0015c33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c36:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c38:	83 c0 24             	add    eax,0x24
c0015c3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c3d:	6a 00                	push   0x0
c0015c3f:	68 7b 52 01 c0       	push   0xc001527b
c0015c44:	6a 11                	push   0x11
c0015c46:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c49:	ff d0                	call   eax
c0015c4b:	83 c4 10             	add    esp,0x10
c0015c4e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c51:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c53:	83 c0 24             	add    eax,0x24
c0015c56:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c58:	6a 00                	push   0x0
c0015c5a:	68 7b 52 01 c0       	push   0xc001527b
c0015c5f:	6a 12                	push   0x12
c0015c61:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c64:	ff d0                	call   eax
c0015c66:	83 c4 10             	add    esp,0x10
c0015c69:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c6e:	83 c0 24             	add    eax,0x24
c0015c71:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c73:	6a 00                	push   0x0
c0015c75:	68 7b 52 01 c0       	push   0xc001527b
c0015c7a:	6a 13                	push   0x13
c0015c7c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c7f:	ff d0                	call   eax
c0015c81:	83 c4 10             	add    esp,0x10
c0015c84:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c87:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c89:	83 c0 24             	add    eax,0x24
c0015c8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c8e:	6a 00                	push   0x0
c0015c90:	68 7b 52 01 c0       	push   0xc001527b
c0015c95:	6a 14                	push   0x14
c0015c97:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c9a:	ff d0                	call   eax
c0015c9c:	83 c4 10             	add    esp,0x10
c0015c9f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ca2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca4:	83 c0 24             	add    eax,0x24
c0015ca7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca9:	6a 00                	push   0x0
c0015cab:	68 7b 52 01 c0       	push   0xc001527b
c0015cb0:	6a 1e                	push   0x1e
c0015cb2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cb5:	ff d0                	call   eax
c0015cb7:	83 c4 10             	add    esp,0x10
c0015cba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cbd:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cbf:	83 c0 24             	add    eax,0x24
c0015cc2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cc4:	6a 00                	push   0x0
c0015cc6:	68 66 cc 01 c0       	push   0xc001cc66
c0015ccb:	6a 60                	push   0x60
c0015ccd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cd0:	ff d0                	call   eax
c0015cd2:	83 c4 10             	add    esp,0x10
c0015cd5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cd8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015cdb:	c9                   	leave  
c0015cdc:	c3                   	ret    
c0015cdd:	90                   	nop

c0015cde <InterruptController::convertLegacyIRQNumber(int)>:
c0015cde:	55                   	push   ebp
c0015cdf:	89 e5                	mov    ebp,esp
c0015ce1:	83 ec 08             	sub    esp,0x8
c0015ce4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ce7:	83 ec 0c             	sub    esp,0xc
c0015cea:	50                   	push   eax
c0015ceb:	e8 a2 e8 ff ff       	call   c0014592 <Device::getName()>
c0015cf0:	83 c4 10             	add    esp,0x10
c0015cf3:	8a 00                	mov    al,BYTE PTR [eax]
c0015cf5:	3c 41                	cmp    al,0x41
c0015cf7:	0f 94 c0             	sete   al
c0015cfa:	84 c0                	test   al,al
c0015cfc:	74 28                	je     c0015d26 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015cfe:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015d02:	7f 12                	jg     c0015d16 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015d04:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d07:	05 c0 e2 02 c0       	add    eax,0xc002e2c0
c0015d0c:	8a 00                	mov    al,BYTE PTR [eax]
c0015d0e:	0f b6 c0             	movzx  eax,al
c0015d11:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015d14:	eb 10                	jmp    c0015d26 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d16:	83 ec 0c             	sub    esp,0xc
c0015d19:	68 e0 b8 02 c0       	push   0xc002b8e0
c0015d1e:	e8 4a 4b 00 00       	call   c001a86d <Krnl::panic(char const*)>
c0015d23:	83 c4 10             	add    esp,0x10
c0015d26:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d29:	c9                   	leave  
c0015d2a:	c3                   	ret    
c0015d2b:	90                   	nop

c0015d2c <startGUI(void*)>:
c0015d2c:	55                   	push   ebp
c0015d2d:	89 e5                	mov    ebp,esp
c0015d2f:	53                   	push   ebx
c0015d30:	83 ec 04             	sub    esp,0x4
c0015d33:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c0015d38:	48                   	dec    eax
c0015d39:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c0015d3e:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c0015d43:	85 c0                	test   eax,eax
c0015d45:	75 01                	jne    c0015d48 <startGUI(void*)+0x1c>
c0015d47:	fb                   	sti    
c0015d48:	8b 1d 68 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f068
c0015d4e:	83 ec 08             	sub    esp,0x8
c0015d51:	6a 01                	push   0x1
c0015d53:	68 54 bc 02 c0       	push   0xc002bc54
c0015d58:	e8 e4 7e 00 00       	call   c001dc41 <Thr::loadDLL(char const*, bool)>
c0015d5d:	83 c4 10             	add    esp,0x10
c0015d60:	83 ec 08             	sub    esp,0x8
c0015d63:	53                   	push   ebx
c0015d64:	50                   	push   eax
c0015d65:	e8 02 81 00 00       	call   c001de6c <Thr::executeDLL(unsigned long, void*)>
c0015d6a:	83 c4 10             	add    esp,0x10
c0015d6d:	8b 1d 68 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f068
c0015d73:	83 ec 08             	sub    esp,0x8
c0015d76:	6a 01                	push   0x1
c0015d78:	68 6e bc 02 c0       	push   0xc002bc6e
c0015d7d:	e8 bf 7e 00 00       	call   c001dc41 <Thr::loadDLL(char const*, bool)>
c0015d82:	83 c4 10             	add    esp,0x10
c0015d85:	83 ec 08             	sub    esp,0x8
c0015d88:	53                   	push   ebx
c0015d89:	50                   	push   eax
c0015d8a:	e8 dd 80 00 00       	call   c001de6c <Thr::executeDLL(unsigned long, void*)>
c0015d8f:	83 c4 10             	add    esp,0x10
c0015d92:	90                   	nop
c0015d93:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d96:	c9                   	leave  
c0015d97:	c3                   	ret    

c0015d98 <startGUIVESA(void*)>:
c0015d98:	55                   	push   ebp
c0015d99:	89 e5                	mov    ebp,esp
c0015d9b:	53                   	push   ebx
c0015d9c:	83 ec 04             	sub    esp,0x4
c0015d9f:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c0015da4:	48                   	dec    eax
c0015da5:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c0015daa:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c0015daf:	85 c0                	test   eax,eax
c0015db1:	75 01                	jne    c0015db4 <startGUIVESA(void*)+0x1c>
c0015db3:	fb                   	sti    
c0015db4:	8b 1d 68 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f068
c0015dba:	83 ec 08             	sub    esp,0x8
c0015dbd:	6a 01                	push   0x1
c0015dbf:	68 88 bc 02 c0       	push   0xc002bc88
c0015dc4:	e8 78 7e 00 00       	call   c001dc41 <Thr::loadDLL(char const*, bool)>
c0015dc9:	83 c4 10             	add    esp,0x10
c0015dcc:	83 ec 08             	sub    esp,0x8
c0015dcf:	53                   	push   ebx
c0015dd0:	50                   	push   eax
c0015dd1:	e8 96 80 00 00       	call   c001de6c <Thr::executeDLL(unsigned long, void*)>
c0015dd6:	83 c4 10             	add    esp,0x10
c0015dd9:	8b 1d 68 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f068
c0015ddf:	83 ec 08             	sub    esp,0x8
c0015de2:	6a 01                	push   0x1
c0015de4:	68 6e bc 02 c0       	push   0xc002bc6e
c0015de9:	e8 53 7e 00 00       	call   c001dc41 <Thr::loadDLL(char const*, bool)>
c0015dee:	83 c4 10             	add    esp,0x10
c0015df1:	83 ec 08             	sub    esp,0x8
c0015df4:	53                   	push   ebx
c0015df5:	50                   	push   eax
c0015df6:	e8 71 80 00 00       	call   c001de6c <Thr::executeDLL(unsigned long, void*)>
c0015dfb:	83 c4 10             	add    esp,0x10
c0015dfe:	90                   	nop
c0015dff:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e02:	c9                   	leave  
c0015e03:	c3                   	ret    

c0015e04 <sendKeyToTerminal(unsigned char)>:
c0015e04:	55                   	push   ebp
c0015e05:	89 e5                	mov    ebp,esp
c0015e07:	83 ec 28             	sub    esp,0x28
c0015e0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e0d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015e10:	a1 44 f1 02 c0       	mov    eax,ds:0xc002f144
c0015e15:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015e19:	83 ec 08             	sub    esp,0x8
c0015e1c:	52                   	push   edx
c0015e1d:	50                   	push   eax
c0015e1e:	e8 2b b4 ff ff       	call   c001124e <VgaText::receiveKey(unsigned char)>
c0015e23:	83 c4 10             	add    esp,0x10
c0015e26:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015e2a:	0f 85 8f 00 00 00    	jne    c0015ebf <sendKeyToTerminal(unsigned char)+0xbb>
c0015e30:	fa                   	cli    
c0015e31:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c0015e36:	40                   	inc    eax
c0015e37:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c0015e3c:	a1 a4 25 03 c0       	mov    eax,ds:0xc00325a4
c0015e41:	40                   	inc    eax
c0015e42:	a3 a4 25 03 c0       	mov    ds:0xc00325a4,eax
c0015e47:	a1 20 f2 02 c0       	mov    eax,ds:0xc002f220
c0015e4c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e4f:	c7 05 20 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f220,0x0
c0015e59:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015e5d:	74 1f                	je     c0015e7e <sendKeyToTerminal(unsigned char)+0x7a>
c0015e5f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e62:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015e65:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015e68:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015e6b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e6e:	83 ec 0c             	sub    esp,0xc
c0015e71:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015e74:	e8 6b 8c 00 00       	call   c001eae4 <unblockTask(ThreadControlBlock*)>
c0015e79:	83 c4 10             	add    esp,0x10
c0015e7c:	eb db                	jmp    c0015e59 <sendKeyToTerminal(unsigned char)+0x55>
c0015e7e:	a1 a4 25 03 c0       	mov    eax,ds:0xc00325a4
c0015e83:	48                   	dec    eax
c0015e84:	a3 a4 25 03 c0       	mov    ds:0xc00325a4,eax
c0015e89:	a1 a4 25 03 c0       	mov    eax,ds:0xc00325a4
c0015e8e:	85 c0                	test   eax,eax
c0015e90:	75 18                	jne    c0015eaa <sendKeyToTerminal(unsigned char)+0xa6>
c0015e92:	a1 a0 25 03 c0       	mov    eax,ds:0xc00325a0
c0015e97:	85 c0                	test   eax,eax
c0015e99:	74 0f                	je     c0015eaa <sendKeyToTerminal(unsigned char)+0xa6>
c0015e9b:	c7 05 a0 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325a0,0x0
c0015ea5:	e8 76 87 00 00       	call   c001e620 <schedule()>
c0015eaa:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c0015eaf:	48                   	dec    eax
c0015eb0:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c0015eb5:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c0015eba:	85 c0                	test   eax,eax
c0015ebc:	75 01                	jne    c0015ebf <sendKeyToTerminal(unsigned char)+0xbb>
c0015ebe:	fb                   	sti    
c0015ebf:	90                   	nop
c0015ec0:	c9                   	leave  
c0015ec1:	c3                   	ret    

c0015ec2 <sendKeyboardToken(KeyboardToken)>:
c0015ec2:	55                   	push   ebp
c0015ec3:	89 e5                	mov    ebp,esp
c0015ec5:	83 ec 18             	sub    esp,0x18
c0015ec8:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015ecb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ece:	0f b7 c0             	movzx  eax,ax
c0015ed1:	83 f2 01             	xor    edx,0x1
c0015ed4:	88 90 40 f2 02 c0    	mov    BYTE PTR [eax-0x3ffd0dc0],dl
c0015eda:	a1 28 f2 02 c0       	mov    eax,ds:0xc002f228
c0015edf:	85 c0                	test   eax,eax
c0015ee1:	74 24                	je     c0015f07 <sendKeyboardToken(KeyboardToken)+0x45>
c0015ee3:	8b 0d 28 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f228
c0015ee9:	83 ec 04             	sub    esp,0x4
c0015eec:	68 40 f2 02 c0       	push   0xc002f240
c0015ef1:	83 ec 08             	sub    esp,0x8
c0015ef4:	89 e2                	mov    edx,esp
c0015ef6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ef9:	89 02                	mov    DWORD PTR [edx],eax
c0015efb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015efe:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015f02:	ff d1                	call   ecx
c0015f04:	83 c4 10             	add    esp,0x10
c0015f07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f0a:	66 3d 03 02          	cmp    ax,0x203
c0015f0e:	75 07                	jne    c0015f17 <sendKeyboardToken(KeyboardToken)+0x55>
c0015f10:	a0 40 f3 02 c0       	mov    al,ds:0xc002f340
c0015f15:	84 c0                	test   al,al
c0015f17:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015f1b:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015f1e:	a0 48 f6 02 c0       	mov    al,ds:0xc002f648
c0015f23:	38 c2                	cmp    dl,al
c0015f25:	74 1c                	je     c0015f43 <sendKeyboardToken(KeyboardToken)+0x81>
c0015f27:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015f2a:	a2 48 f6 02 c0       	mov    ds:0xc002f648,al
c0015f2f:	a0 48 f6 02 c0       	mov    al,ds:0xc002f648
c0015f34:	0f b6 c0             	movzx  eax,al
c0015f37:	83 ec 0c             	sub    esp,0xc
c0015f3a:	50                   	push   eax
c0015f3b:	e8 96 a6 ff ff       	call   c00105d6 <setTerminalScrollLock(bool)>
c0015f40:	83 c4 10             	add    esp,0x10
c0015f43:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015f46:	84 c0                	test   al,al
c0015f48:	0f 84 ae 00 00 00    	je     c0015ffc <sendKeyboardToken(KeyboardToken)+0x13a>
c0015f4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f51:	66 3d 10 03          	cmp    ax,0x310
c0015f55:	75 06                	jne    c0015f5d <sendKeyboardToken(KeyboardToken)+0x9b>
c0015f57:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015f5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f60:	66 3d 11 03          	cmp    ax,0x311
c0015f64:	75 06                	jne    c0015f6c <sendKeyboardToken(KeyboardToken)+0xaa>
c0015f66:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015f6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f6f:	66 3d 12 03          	cmp    ax,0x312
c0015f73:	75 06                	jne    c0015f7b <sendKeyboardToken(KeyboardToken)+0xb9>
c0015f75:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015f7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f7e:	66 3d 13 03          	cmp    ax,0x313
c0015f82:	75 06                	jne    c0015f8a <sendKeyboardToken(KeyboardToken)+0xc8>
c0015f84:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015f8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f8d:	66 3d 14 03          	cmp    ax,0x314
c0015f91:	75 06                	jne    c0015f99 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015f93:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015f99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f9c:	66 3d 15 03          	cmp    ax,0x315
c0015fa0:	75 06                	jne    c0015fa8 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015fa2:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015fa8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fab:	66 3d 16 03          	cmp    ax,0x316
c0015faf:	75 06                	jne    c0015fb7 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015fb1:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015fb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fba:	66 3d 17 03          	cmp    ax,0x317
c0015fbe:	75 06                	jne    c0015fc6 <sendKeyboardToken(KeyboardToken)+0x104>
c0015fc0:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015fc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fc9:	66 3d 18 03          	cmp    ax,0x318
c0015fcd:	75 06                	jne    c0015fd5 <sendKeyboardToken(KeyboardToken)+0x113>
c0015fcf:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015fd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd8:	66 3d 19 03          	cmp    ax,0x319
c0015fdc:	75 06                	jne    c0015fe4 <sendKeyboardToken(KeyboardToken)+0x122>
c0015fde:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015fe4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fe7:	66 3d 1a 03          	cmp    ax,0x31a
c0015feb:	0f 85 c9 00 00 00    	jne    c00160ba <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015ff1:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015ff7:	e9 be 00 00 00       	jmp    c00160ba <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015ffc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fff:	66 3d 10 03          	cmp    ax,0x310
c0016003:	75 0a                	jne    c001600f <sendKeyboardToken(KeyboardToken)+0x14d>
c0016005:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001600b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001600f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016012:	66 3d 11 03          	cmp    ax,0x311
c0016016:	75 0a                	jne    c0016022 <sendKeyboardToken(KeyboardToken)+0x160>
c0016018:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001601e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016022:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016025:	66 3d 12 03          	cmp    ax,0x312
c0016029:	75 0a                	jne    c0016035 <sendKeyboardToken(KeyboardToken)+0x173>
c001602b:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0016031:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016035:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016038:	66 3d 13 03          	cmp    ax,0x313
c001603c:	75 0a                	jne    c0016048 <sendKeyboardToken(KeyboardToken)+0x186>
c001603e:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0016044:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016048:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001604b:	66 3d 14 03          	cmp    ax,0x314
c001604f:	75 0a                	jne    c001605b <sendKeyboardToken(KeyboardToken)+0x199>
c0016051:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0016057:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001605b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001605e:	66 3d 15 03          	cmp    ax,0x315
c0016062:	75 0a                	jne    c001606e <sendKeyboardToken(KeyboardToken)+0x1ac>
c0016064:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001606a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001606e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016071:	66 3d 16 03          	cmp    ax,0x316
c0016075:	75 0a                	jne    c0016081 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0016077:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001607d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016081:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016084:	66 3d 17 03          	cmp    ax,0x317
c0016088:	75 0a                	jne    c0016094 <sendKeyboardToken(KeyboardToken)+0x1d2>
c001608a:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0016090:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016094:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016097:	66 3d 18 03          	cmp    ax,0x318
c001609b:	75 0a                	jne    c00160a7 <sendKeyboardToken(KeyboardToken)+0x1e5>
c001609d:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00160a3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160aa:	66 3d 19 03          	cmp    ax,0x319
c00160ae:	75 0a                	jne    c00160ba <sendKeyboardToken(KeyboardToken)+0x1f8>
c00160b0:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00160b6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160bd:	66 3d 00 02          	cmp    ax,0x200
c00160c1:	75 2c                	jne    c00160ef <sendKeyboardToken(KeyboardToken)+0x22d>
c00160c3:	a0 40 f6 02 c0       	mov    al,ds:0xc002f640
c00160c8:	83 f0 01             	xor    eax,0x1
c00160cb:	84 c0                	test   al,al
c00160cd:	74 20                	je     c00160ef <sendKeyboardToken(KeyboardToken)+0x22d>
c00160cf:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c00160d4:	6a 01                	push   0x1
c00160d6:	6a 00                	push   0x0
c00160d8:	68 2c 5d 01 c0       	push   0xc0015d2c
c00160dd:	50                   	push   eax
c00160de:	e8 f9 82 00 00       	call   c001e3dc <Process::createThread(void (*)(void*), void*, int)>
c00160e3:	83 c4 10             	add    esp,0x10
c00160e6:	c6 05 40 f6 02 c0 01 	mov    BYTE PTR ds:0xc002f640,0x1
c00160ed:	eb 33                	jmp    c0016122 <sendKeyboardToken(KeyboardToken)+0x260>
c00160ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160f2:	66 3d 01 02          	cmp    ax,0x201
c00160f6:	75 2a                	jne    c0016122 <sendKeyboardToken(KeyboardToken)+0x260>
c00160f8:	a0 40 f6 02 c0       	mov    al,ds:0xc002f640
c00160fd:	83 f0 01             	xor    eax,0x1
c0016100:	84 c0                	test   al,al
c0016102:	74 1e                	je     c0016122 <sendKeyboardToken(KeyboardToken)+0x260>
c0016104:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c0016109:	6a 01                	push   0x1
c001610b:	6a 00                	push   0x0
c001610d:	68 98 5d 01 c0       	push   0xc0015d98
c0016112:	50                   	push   eax
c0016113:	e8 c4 82 00 00       	call   c001e3dc <Process::createThread(void (*)(void*), void*, int)>
c0016118:	83 c4 10             	add    esp,0x10
c001611b:	c6 05 40 f6 02 c0 01 	mov    BYTE PTR ds:0xc002f640,0x1
c0016122:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016125:	66 3d 1d 03          	cmp    ax,0x31d
c0016129:	75 06                	jne    c0016131 <sendKeyboardToken(KeyboardToken)+0x26f>
c001612b:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0016131:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016134:	66 3d 1c 03          	cmp    ax,0x31c
c0016138:	75 06                	jne    c0016140 <sendKeyboardToken(KeyboardToken)+0x27e>
c001613a:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0016140:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016143:	66 3d 1b 03          	cmp    ax,0x31b
c0016147:	75 06                	jne    c001614f <sendKeyboardToken(KeyboardToken)+0x28d>
c0016149:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001614f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016152:	66 3d 1e 03          	cmp    ax,0x31e
c0016156:	75 06                	jne    c001615e <sendKeyboardToken(KeyboardToken)+0x29c>
c0016158:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001615e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016161:	66 3d 1f 03          	cmp    ax,0x31f
c0016165:	75 06                	jne    c001616d <sendKeyboardToken(KeyboardToken)+0x2ab>
c0016167:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001616d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016170:	66 3d 1a 03          	cmp    ax,0x31a
c0016174:	75 06                	jne    c001617c <sendKeyboardToken(KeyboardToken)+0x2ba>
c0016176:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001617c:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0016180:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016183:	83 f0 01             	xor    eax,0x1
c0016186:	84 c0                	test   al,al
c0016188:	74 77                	je     c0016201 <sendKeyboardToken(KeyboardToken)+0x33f>
c001618a:	a0 41 f3 02 c0       	mov    al,ds:0xc002f341
c001618f:	84 c0                	test   al,al
c0016191:	74 41                	je     c00161d4 <sendKeyboardToken(KeyboardToken)+0x312>
c0016193:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016197:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001619b:	74 2b                	je     c00161c8 <sendKeyboardToken(KeyboardToken)+0x306>
c001619d:	8b 15 44 f6 02 c0    	mov    edx,DWORD PTR ds:0xc002f644
c00161a3:	89 d0                	mov    eax,edx
c00161a5:	c1 e0 02             	shl    eax,0x2
c00161a8:	01 d0                	add    eax,edx
c00161aa:	01 c0                	add    eax,eax
c00161ac:	a3 44 f6 02 c0       	mov    ds:0xc002f644,eax
c00161b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161b4:	0f b7 c0             	movzx  eax,ax
c00161b7:	8d 50 d0             	lea    edx,[eax-0x30]
c00161ba:	a1 44 f6 02 c0       	mov    eax,ds:0xc002f644
c00161bf:	01 d0                	add    eax,edx
c00161c1:	a3 44 f6 02 c0       	mov    ds:0xc002f644,eax
c00161c6:	eb 6d                	jmp    c0016235 <sendKeyboardToken(KeyboardToken)+0x373>
c00161c8:	c7 05 44 f6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f644,0x0
c00161d2:	eb 61                	jmp    c0016235 <sendKeyboardToken(KeyboardToken)+0x373>
c00161d4:	a1 44 f6 02 c0       	mov    eax,ds:0xc002f644
c00161d9:	85 c0                	test   eax,eax
c00161db:	74 18                	je     c00161f5 <sendKeyboardToken(KeyboardToken)+0x333>
c00161dd:	a1 44 f6 02 c0       	mov    eax,ds:0xc002f644
c00161e2:	0f b6 c0             	movzx  eax,al
c00161e5:	83 ec 0c             	sub    esp,0xc
c00161e8:	50                   	push   eax
c00161e9:	e8 16 fc ff ff       	call   c0015e04 <sendKeyToTerminal(unsigned char)>
c00161ee:	83 c4 10             	add    esp,0x10
c00161f1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161f5:	c7 05 44 f6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f644,0x0
c00161ff:	eb 34                	jmp    c0016235 <sendKeyboardToken(KeyboardToken)+0x373>
c0016201:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016204:	66 3d 01 01          	cmp    ax,0x101
c0016208:	75 2b                	jne    c0016235 <sendKeyboardToken(KeyboardToken)+0x373>
c001620a:	a1 44 f6 02 c0       	mov    eax,ds:0xc002f644
c001620f:	85 c0                	test   eax,eax
c0016211:	74 18                	je     c001622b <sendKeyboardToken(KeyboardToken)+0x369>
c0016213:	a1 44 f6 02 c0       	mov    eax,ds:0xc002f644
c0016218:	0f b6 c0             	movzx  eax,al
c001621b:	83 ec 0c             	sub    esp,0xc
c001621e:	50                   	push   eax
c001621f:	e8 e0 fb ff ff       	call   c0015e04 <sendKeyToTerminal(unsigned char)>
c0016224:	83 c4 10             	add    esp,0x10
c0016227:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001622b:	c7 05 44 f6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f644,0x0
c0016235:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016238:	83 f0 01             	xor    eax,0x1
c001623b:	84 c0                	test   al,al
c001623d:	74 4c                	je     c001628b <sendKeyboardToken(KeyboardToken)+0x3c9>
c001623f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016242:	83 f0 01             	xor    eax,0x1
c0016245:	84 c0                	test   al,al
c0016247:	74 42                	je     c001628b <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016249:	a0 40 f3 02 c0       	mov    al,ds:0xc002f340
c001624e:	83 f0 01             	xor    eax,0x1
c0016251:	84 c0                	test   al,al
c0016253:	74 36                	je     c001628b <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016255:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016258:	66 83 f8 1f          	cmp    ax,0x1f
c001625c:	76 09                	jbe    c0016267 <sendKeyboardToken(KeyboardToken)+0x3a5>
c001625e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016261:	66 83 f8 7e          	cmp    ax,0x7e
c0016265:	76 12                	jbe    c0016279 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016267:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001626a:	66 83 f8 0a          	cmp    ax,0xa
c001626e:	74 09                	je     c0016279 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016270:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016273:	66 83 f8 08          	cmp    ax,0x8
c0016277:	75 12                	jne    c001628b <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016279:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001627c:	0f b6 c0             	movzx  eax,al
c001627f:	83 ec 0c             	sub    esp,0xc
c0016282:	50                   	push   eax
c0016283:	e8 7c fb ff ff       	call   c0015e04 <sendKeyToTerminal(unsigned char)>
c0016288:	83 c4 10             	add    esp,0x10
c001628b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001628e:	83 f0 01             	xor    eax,0x1
c0016291:	84 c0                	test   al,al
c0016293:	74 4f                	je     c00162e4 <sendKeyboardToken(KeyboardToken)+0x422>
c0016295:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016298:	83 f0 01             	xor    eax,0x1
c001629b:	84 c0                	test   al,al
c001629d:	74 45                	je     c00162e4 <sendKeyboardToken(KeyboardToken)+0x422>
c001629f:	a0 40 f3 02 c0       	mov    al,ds:0xc002f340
c00162a4:	84 c0                	test   al,al
c00162a6:	74 3c                	je     c00162e4 <sendKeyboardToken(KeyboardToken)+0x422>
c00162a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162ab:	66 83 f8 3f          	cmp    ax,0x3f
c00162af:	76 33                	jbe    c00162e4 <sendKeyboardToken(KeyboardToken)+0x422>
c00162b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162b4:	66 83 f8 7f          	cmp    ax,0x7f
c00162b8:	77 2a                	ja     c00162e4 <sendKeyboardToken(KeyboardToken)+0x422>
c00162ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162bd:	88 c2                	mov    dl,al
c00162bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162c2:	66 83 f8 5f          	cmp    ax,0x5f
c00162c6:	76 04                	jbe    c00162cc <sendKeyboardToken(KeyboardToken)+0x40a>
c00162c8:	b0 20                	mov    al,0x20
c00162ca:	eb 02                	jmp    c00162ce <sendKeyboardToken(KeyboardToken)+0x40c>
c00162cc:	b0 00                	mov    al,0x0
c00162ce:	29 c2                	sub    edx,eax
c00162d0:	88 d0                	mov    al,dl
c00162d2:	83 e8 40             	sub    eax,0x40
c00162d5:	0f b6 c0             	movzx  eax,al
c00162d8:	83 ec 0c             	sub    esp,0xc
c00162db:	50                   	push   eax
c00162dc:	e8 23 fb ff ff       	call   c0015e04 <sendKeyToTerminal(unsigned char)>
c00162e1:	83 c4 10             	add    esp,0x10
c00162e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162e7:	66 3d 00 03          	cmp    ax,0x300
c00162eb:	75 0f                	jne    c00162fc <sendKeyboardToken(KeyboardToken)+0x43a>
c00162ed:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162f0:	83 f0 01             	xor    eax,0x1
c00162f3:	84 c0                	test   al,al
c00162f5:	74 05                	je     c00162fc <sendKeyboardToken(KeyboardToken)+0x43a>
c00162f7:	e8 52 aa ff ff       	call   c0010d4e <doTerminalCycle()>
c00162fc:	90                   	nop
c00162fd:	c9                   	leave  
c00162fe:	c3                   	ret    

c00162ff <clearInternalKeybuffer(VgaText*)>:
c00162ff:	55                   	push   ebp
c0016300:	89 e5                	mov    ebp,esp
c0016302:	83 ec 08             	sub    esp,0x8
c0016305:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016308:	05 98 01 00 00       	add    eax,0x198
c001630d:	83 ec 0c             	sub    esp,0xc
c0016310:	50                   	push   eax
c0016311:	e8 72 a4 fe ff       	call   c0000788 <strlen>
c0016316:	83 c4 10             	add    esp,0x10
c0016319:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001631c:	81 c2 98 01 00 00    	add    edx,0x198
c0016322:	83 ec 04             	sub    esp,0x4
c0016325:	50                   	push   eax
c0016326:	6a 00                	push   0x0
c0016328:	52                   	push   edx
c0016329:	e8 3e a4 fe ff       	call   c000076c <memset>
c001632e:	83 c4 10             	add    esp,0x10
c0016331:	90                   	nop
c0016332:	c9                   	leave  
c0016333:	c3                   	ret    

c0016334 <readKeyboard(VgaText*, char*, unsigned long)>:
c0016334:	55                   	push   ebp
c0016335:	89 e5                	mov    ebp,esp
c0016337:	83 ec 18             	sub    esp,0x18
c001633a:	a1 28 f2 02 c0       	mov    eax,ds:0xc002f228
c001633f:	85 c0                	test   eax,eax
c0016341:	74 2a                	je     c001636d <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0016343:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0016349:	8b 0d 28 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f228
c001634f:	83 ec 04             	sub    esp,0x4
c0016352:	68 40 f2 02 c0       	push   0xc002f240
c0016357:	83 ec 08             	sub    esp,0x8
c001635a:	89 e2                	mov    edx,esp
c001635c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001635f:	89 02                	mov    DWORD PTR [edx],eax
c0016361:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0016364:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0016368:	ff d1                	call   ecx
c001636a:	83 c4 10             	add    esp,0x10
c001636d:	83 ec 0c             	sub    esp,0xc
c0016370:	68 a3 bc 02 c0       	push   0xc002bca3
c0016375:	e8 0b cb ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001637a:	83 c4 10             	add    esp,0x10
c001637d:	fb                   	sti    
c001637e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0016385:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0016389:	0f 84 a1 00 00 00    	je     c0016430 <readKeyboard(VgaText*, char*, unsigned long)+0xfc>
c001638f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016392:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0016398:	84 c0                	test   al,al
c001639a:	75 28                	jne    c00163c4 <readKeyboard(VgaText*, char*, unsigned long)+0x90>
c001639c:	fa                   	cli    
c001639d:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c00163a2:	40                   	inc    eax
c00163a3:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c00163a8:	e8 73 82 00 00       	call   c001e620 <schedule()>
c00163ad:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c00163b2:	48                   	dec    eax
c00163b3:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c00163b8:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c00163bd:	85 c0                	test   eax,eax
c00163bf:	75 ce                	jne    c001638f <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c00163c1:	fb                   	sti    
c00163c2:	eb cb                	jmp    c001638f <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c00163c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00163c7:	8d 50 01             	lea    edx,[eax+0x1]
c00163ca:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00163cd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163d0:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c00163d6:	88 10                	mov    BYTE PTR [eax],dl
c00163d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163db:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c00163e1:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00163e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163e7:	05 98 01 00 00       	add    eax,0x198
c00163ec:	83 ec 0c             	sub    esp,0xc
c00163ef:	50                   	push   eax
c00163f0:	e8 93 a3 fe ff       	call   c0000788 <strlen>
c00163f5:	83 c4 10             	add    esp,0x10
c00163f8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163fb:	81 c2 98 01 00 00    	add    edx,0x198
c0016401:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016404:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016407:	81 c2 98 01 00 00    	add    edx,0x198
c001640d:	83 ec 04             	sub    esp,0x4
c0016410:	50                   	push   eax
c0016411:	51                   	push   ecx
c0016412:	52                   	push   edx
c0016413:	e8 8c a2 fe ff       	call   c00006a4 <memmove>
c0016418:	83 c4 10             	add    esp,0x10
c001641b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c001641e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0016421:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0016425:	0f 85 5a ff ff ff    	jne    c0016385 <readKeyboard(VgaText*, char*, unsigned long)+0x51>
c001642b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001642e:	eb 03                	jmp    c0016433 <readKeyboard(VgaText*, char*, unsigned long)+0xff>
c0016430:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016433:	c9                   	leave  
c0016434:	c3                   	ret    
c0016435:	90                   	nop

c0016436 <Keyboard::Keyboard(char const*)>:
c0016436:	83 ec 0c             	sub    esp,0xc
c0016439:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001643d:	83 ec 08             	sub    esp,0x8
c0016440:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016444:	50                   	push   eax
c0016445:	e8 4c e0 ff ff       	call   c0014496 <Device::Device(char const*)>
c001644a:	83 c4 10             	add    esp,0x10
c001644d:	ba c4 bc 02 c0       	mov    edx,0xc002bcc4
c0016452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016456:	89 10                	mov    DWORD PTR [eax],edx
c0016458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001645c:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0016466:	c6 05 24 f2 02 c0 01 	mov    BYTE PTR ds:0xc002f224,0x1
c001646d:	90                   	nop
c001646e:	83 c4 0c             	add    esp,0xc
c0016471:	c3                   	ret    

c0016472 <Keyboard::~Keyboard()>:
c0016472:	83 ec 0c             	sub    esp,0xc
c0016475:	ba c4 bc 02 c0       	mov    edx,0xc002bcc4
c001647a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001647e:	89 10                	mov    DWORD PTR [eax],edx
c0016480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016484:	83 ec 0c             	sub    esp,0xc
c0016487:	50                   	push   eax
c0016488:	e8 ff dc ff ff       	call   c001418c <Device::~Device()>
c001648d:	83 c4 10             	add    esp,0x10
c0016490:	90                   	nop
c0016491:	83 c4 0c             	add    esp,0xc
c0016494:	c3                   	ret    
c0016495:	90                   	nop

c0016496 <Keyboard::~Keyboard()>:
c0016496:	83 ec 0c             	sub    esp,0xc
c0016499:	83 ec 0c             	sub    esp,0xc
c001649c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164a0:	e8 cd ff ff ff       	call   c0016472 <Keyboard::~Keyboard()>
c00164a5:	83 c4 10             	add    esp,0x10
c00164a8:	83 ec 08             	sub    esp,0x8
c00164ab:	68 5c 01 00 00       	push   0x15c
c00164b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164b4:	e8 ec c8 ff ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c00164b9:	83 c4 10             	add    esp,0x10
c00164bc:	83 c4 0c             	add    esp,0xc
c00164bf:	c3                   	ret    

c00164c0 <LogicalDisk::close(int, int, void*)>:
c00164c0:	83 c8 ff             	or     eax,0xffffffff
c00164c3:	c3                   	ret    

c00164c4 <LogicalDisk::~LogicalDisk()>:
c00164c4:	83 ec 0c             	sub    esp,0xc
c00164c7:	ba 74 bd 02 c0       	mov    edx,0xc002bd74
c00164cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164d0:	89 10                	mov    DWORD PTR [eax],edx
c00164d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164d6:	83 ec 0c             	sub    esp,0xc
c00164d9:	50                   	push   eax
c00164da:	e8 ad dc ff ff       	call   c001418c <Device::~Device()>
c00164df:	83 c4 10             	add    esp,0x10
c00164e2:	90                   	nop
c00164e3:	83 c4 0c             	add    esp,0xc
c00164e6:	c3                   	ret    
c00164e7:	90                   	nop

c00164e8 <LogicalDisk::~LogicalDisk()>:
c00164e8:	83 ec 0c             	sub    esp,0xc
c00164eb:	83 ec 0c             	sub    esp,0xc
c00164ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164f2:	e8 cd ff ff ff       	call   c00164c4 <LogicalDisk::~LogicalDisk()>
c00164f7:	83 c4 10             	add    esp,0x10
c00164fa:	83 ec 08             	sub    esp,0x8
c00164fd:	68 74 01 00 00       	push   0x174
c0016502:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016506:	e8 9a c8 ff ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c001650b:	83 c4 10             	add    esp,0x10
c001650e:	83 c4 0c             	add    esp,0xc
c0016511:	c3                   	ret    

c0016512 <LogicalDisk::open(int, int, void*)>:
c0016512:	83 ec 18             	sub    esp,0x18
c0016515:	68 f0 bc 02 c0       	push   0xc002bcf0
c001651a:	e8 4e 43 00 00       	call   c001a86d <Krnl::panic(char const*)>
c001651f:	83 c8 ff             	or     eax,0xffffffff
c0016522:	83 c4 1c             	add    esp,0x1c
c0016525:	c3                   	ret    

c0016526 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016526:	53                   	push   ebx
c0016527:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001652b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001652f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016533:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016539:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001653f:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0016545:	77 10                	ja     c0016557 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0016547:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001654d:	89 d3                	mov    ebx,edx
c001654f:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0016555:	72 05                	jb     c001655c <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016557:	83 c8 ff             	or     eax,0xffffffff
c001655a:	89 c2                	mov    edx,eax
c001655c:	5b                   	pop    ebx
c001655d:	c3                   	ret    

c001655e <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001655e:	56                   	push   esi
c001655f:	83 c8 ff             	or     eax,0xffffffff
c0016562:	53                   	push   ebx
c0016563:	89 c2                	mov    edx,eax
c0016565:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016569:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001656d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016571:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016577:	77 27                	ja     c00165a0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016579:	89 d8                	mov    eax,ebx
c001657b:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0016581:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016587:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001658c:	89 c2                	mov    edx,eax
c001658e:	73 10                	jae    c00165a0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016590:	89 c8                	mov    eax,ecx
c0016592:	89 da                	mov    edx,ebx
c0016594:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001659a:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00165a0:	5b                   	pop    ebx
c00165a1:	5e                   	pop    esi
c00165a2:	c3                   	ret    
c00165a3:	90                   	nop

c00165a4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00165a4:	83 ec 1c             	sub    esp,0x1c
c00165a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00165ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00165af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00165b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00165b7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00165bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00165be:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00165c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00165c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165ca:	83 ec 08             	sub    esp,0x8
c00165cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00165d1:	50                   	push   eax
c00165d2:	e8 bf de ff ff       	call   c0014496 <Device::Device(char const*)>
c00165d7:	83 c4 10             	add    esp,0x10
c00165da:	ba 74 bd 02 c0       	mov    edx,0xc002bd74
c00165df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165e3:	89 10                	mov    DWORD PTR [eax],edx
c00165e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165e9:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00165f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165f4:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00165fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165ff:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016609:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001660d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016611:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016615:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001661b:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0016621:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016625:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016628:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001662c:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0016632:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016638:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001663c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016640:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016646:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001664a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016654:	90                   	nop
c0016655:	83 c4 1c             	add    esp,0x1c
c0016658:	c3                   	ret    
c0016659:	90                   	nop

c001665a <LogicalDisk::assignDriveLetter()>:
c001665a:	55                   	push   ebp
c001665b:	57                   	push   edi
c001665c:	56                   	push   esi
c001665d:	53                   	push   ebx
c001665e:	83 ec 14             	sub    esp,0x14
c0016661:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016665:	8b 3d 60 f6 02 c0    	mov    edi,DWORD PTR ds:0xc002f660
c001666b:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0016671:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016675:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c001667b:	8b 3d 64 f6 02 c0    	mov    edi,DWORD PTR ds:0xc002f664
c0016681:	3c 01                	cmp    al,0x1
c0016683:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016687:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001668b:	19 c0                	sbb    eax,eax
c001668d:	83 e0 02             	and    eax,0x2
c0016690:	83 c0 41             	add    eax,0x41
c0016693:	0f be e8             	movsx  ebp,al
c0016696:	3c 43                	cmp    al,0x43
c0016698:	75 10                	jne    c00166aa <LogicalDisk::assignDriveLetter()+0x50>
c001669a:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00166a1:	75 5d                	jne    c0016700 <LogicalDisk::assignDriveLetter()+0xa6>
c00166a3:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00166a8:	75 56                	jne    c0016700 <LogicalDisk::assignDriveLetter()+0xa6>
c00166aa:	8d 75 bf             	lea    esi,[ebp-0x41]
c00166ad:	ba 01 00 00 00       	mov    edx,0x1
c00166b2:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00166b6:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00166ba:	d3 e2                	shl    edx,cl
c00166bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00166c0:	89 d7                	mov    edi,edx
c00166c2:	89 d6                	mov    esi,edx
c00166c4:	c1 ff 1f             	sar    edi,0x1f
c00166c7:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00166cb:	21 f9                	and    ecx,edi
c00166cd:	09 d1                	or     ecx,edx
c00166cf:	75 2f                	jne    c0016700 <LogicalDisk::assignDriveLetter()+0xa6>
c00166d1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00166d5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00166d9:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00166df:	09 f2                	or     edx,esi
c00166e1:	89 15 60 f6 02 c0    	mov    DWORD PTR ds:0xc002f660,edx
c00166e7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00166eb:	09 fa                	or     edx,edi
c00166ed:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00166f1:	89 15 64 f6 02 c0    	mov    DWORD PTR ds:0xc002f664,edx
c00166f7:	89 1c bd 80 f6 02 c0 	mov    DWORD PTR [edi*4-0x3ffd0980],ebx
c00166fe:	eb 08                	jmp    c0016708 <LogicalDisk::assignDriveLetter()+0xae>
c0016700:	45                   	inc    ebp
c0016701:	40                   	inc    eax
c0016702:	3c 5b                	cmp    al,0x5b
c0016704:	75 90                	jne    c0016696 <LogicalDisk::assignDriveLetter()+0x3c>
c0016706:	31 c0                	xor    eax,eax
c0016708:	83 c4 14             	add    esp,0x14
c001670b:	5b                   	pop    ebx
c001670c:	5e                   	pop    esi
c001670d:	5f                   	pop    edi
c001670e:	5d                   	pop    ebp
c001670f:	c3                   	ret    

c0016710 <LogicalDisk::mount()>:
c0016710:	56                   	push   esi
c0016711:	53                   	push   ebx
c0016712:	50                   	push   eax
c0016713:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016717:	8b 1d f4 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f1f4
c001671d:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016727:	85 db                	test   ebx,ebx
c0016729:	74 50                	je     c001677b <LogicalDisk::mount()+0x6b>
c001672b:	50                   	push   eax
c001672c:	50                   	push   eax
c001672d:	ff 35 a8 25 03 c0    	push   DWORD PTR ds:0xc00325a8
c0016733:	68 14 bd 02 c0       	push   0xc002bd14
c0016738:	e8 48 c7 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001673d:	83 c4 0c             	add    esp,0xc
c0016740:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016747:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016749:	83 e8 41             	sub    eax,0x41
c001674c:	50                   	push   eax
c001674d:	56                   	push   esi
c001674e:	53                   	push   ebx
c001674f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016752:	83 c4 10             	add    esp,0x10
c0016755:	84 c0                	test   al,al
c0016757:	74 08                	je     c0016761 <LogicalDisk::mount()+0x51>
c0016759:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001675f:	eb 1c                	jmp    c001677d <LogicalDisk::mount()+0x6d>
c0016761:	51                   	push   ecx
c0016762:	51                   	push   ecx
c0016763:	ff 35 a8 25 03 c0    	push   DWORD PTR ds:0xc00325a8
c0016769:	68 2f bd 02 c0       	push   0xc002bd2f
c001676e:	e8 12 c7 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0016773:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016776:	83 c4 10             	add    esp,0x10
c0016779:	eb ac                	jmp    c0016727 <LogicalDisk::mount()+0x17>
c001677b:	31 c0                	xor    eax,eax
c001677d:	5a                   	pop    edx
c001677e:	5b                   	pop    ebx
c001677f:	5e                   	pop    esi
c0016780:	c3                   	ret    
c0016781:	90                   	nop

c0016782 <LogicalDisk::unmount()>:
c0016782:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016786:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016790:	c3                   	ret    
c0016791:	90                   	nop

c0016792 <LogicalDisk::eject()>:
c0016792:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016796:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001679c:	8b 10                	mov    edx,DWORD PTR [eax]
c001679e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00167a2:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00167a5:	90                   	nop

c00167a6 <LogicalDisk::unassignDriveLetter()>:
c00167a6:	57                   	push   edi
c00167a7:	56                   	push   esi
c00167a8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00167ac:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00167b3:	84 c9                	test   cl,cl
c00167b5:	75 0f                	jne    c00167c6 <LogicalDisk::unassignDriveLetter()+0x20>
c00167b7:	c7 44 24 0c 4a bd 02 c0 	mov    DWORD PTR [esp+0xc],0xc002bd4a
c00167bf:	5e                   	pop    esi
c00167c0:	5f                   	pop    edi
c00167c1:	e9 a7 40 00 00       	jmp    c001a86d <Krnl::panic(char const*)>
c00167c6:	83 e9 41             	sub    ecx,0x41
c00167c9:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00167d0:	b8 01 00 00 00       	mov    eax,0x1
c00167d5:	c7 04 8d 80 f6 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd0980],0x0
c00167e0:	d3 e0                	shl    eax,cl
c00167e2:	89 c7                	mov    edi,eax
c00167e4:	f7 d0                	not    eax
c00167e6:	c1 ff 1f             	sar    edi,0x1f
c00167e9:	21 05 60 f6 02 c0    	and    DWORD PTR ds:0xc002f660,eax
c00167ef:	89 fe                	mov    esi,edi
c00167f1:	f7 d6                	not    esi
c00167f3:	21 35 64 f6 02 c0    	and    DWORD PTR ds:0xc002f664,esi
c00167f9:	5e                   	pop    esi
c00167fa:	5f                   	pop    edi
c00167fb:	c3                   	ret    

c00167fc <LogicalDisk::read(unsigned long long, int, void*)>:
c00167fc:	57                   	push   edi
c00167fd:	56                   	push   esi
c00167fe:	53                   	push   ebx
c00167ff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016803:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016807:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001680b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001680f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016815:	77 41                	ja     c0016858 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016817:	99                   	cdq    
c0016818:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001681e:	01 c8                	add    eax,ecx
c0016820:	11 da                	adc    edx,ebx
c0016822:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016828:	19 d7                	sbb    edi,edx
c001682a:	72 33                	jb     c001685f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001682c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016832:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016838:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001683c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016840:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016846:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001684c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016850:	5b                   	pop    ebx
c0016851:	5e                   	pop    esi
c0016852:	5f                   	pop    edi
c0016853:	e9 ec 0a 00 00       	jmp    c0017344 <VCache::read(unsigned long long, int, void*)>
c0016858:	b8 05 00 00 00       	mov    eax,0x5
c001685d:	eb 05                	jmp    c0016864 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001685f:	b8 07 00 00 00       	mov    eax,0x7
c0016864:	5b                   	pop    ebx
c0016865:	5e                   	pop    esi
c0016866:	5f                   	pop    edi
c0016867:	c3                   	ret    

c0016868 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016868:	57                   	push   edi
c0016869:	56                   	push   esi
c001686a:	53                   	push   ebx
c001686b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001686f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016873:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016877:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001687b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016881:	77 41                	ja     c00168c4 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016883:	99                   	cdq    
c0016884:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001688a:	01 c8                	add    eax,ecx
c001688c:	11 da                	adc    edx,ebx
c001688e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016894:	19 d7                	sbb    edi,edx
c0016896:	72 33                	jb     c00168cb <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016898:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001689e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00168a4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00168a8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00168ac:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00168b2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00168b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00168bc:	5b                   	pop    ebx
c00168bd:	5e                   	pop    esi
c00168be:	5f                   	pop    edi
c00168bf:	e9 96 09 00 00       	jmp    c001725a <VCache::write(unsigned long long, int, void*)>
c00168c4:	b8 05 00 00 00       	mov    eax,0x5
c00168c9:	eb 05                	jmp    c00168d0 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00168cb:	b8 07 00 00 00       	mov    eax,0x7
c00168d0:	5b                   	pop    ebx
c00168d1:	5e                   	pop    esi
c00168d2:	5f                   	pop    edi
c00168d3:	c3                   	ret    

c00168d4 <Mouse::Mouse(char const*)>:
c00168d4:	83 ec 0c             	sub    esp,0xc
c00168d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168db:	83 ec 08             	sub    esp,0x8
c00168de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168e2:	50                   	push   eax
c00168e3:	e8 ae db ff ff       	call   c0014496 <Device::Device(char const*)>
c00168e8:	83 c4 10             	add    esp,0x10
c00168eb:	ba a0 bd 02 c0       	mov    edx,0xc002bda0
c00168f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168f4:	89 10                	mov    DWORD PTR [eax],edx
c00168f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168fa:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016904:	90                   	nop
c0016905:	83 c4 0c             	add    esp,0xc
c0016908:	c3                   	ret    
c0016909:	90                   	nop

c001690a <Mouse::~Mouse()>:
c001690a:	83 ec 0c             	sub    esp,0xc
c001690d:	ba a0 bd 02 c0       	mov    edx,0xc002bda0
c0016912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016916:	89 10                	mov    DWORD PTR [eax],edx
c0016918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001691c:	83 ec 0c             	sub    esp,0xc
c001691f:	50                   	push   eax
c0016920:	e8 67 d8 ff ff       	call   c001418c <Device::~Device()>
c0016925:	83 c4 10             	add    esp,0x10
c0016928:	90                   	nop
c0016929:	83 c4 0c             	add    esp,0xc
c001692c:	c3                   	ret    
c001692d:	90                   	nop

c001692e <Mouse::~Mouse()>:
c001692e:	83 ec 0c             	sub    esp,0xc
c0016931:	83 ec 0c             	sub    esp,0xc
c0016934:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016938:	e8 cd ff ff ff       	call   c001690a <Mouse::~Mouse()>
c001693d:	83 c4 10             	add    esp,0x10
c0016940:	83 ec 08             	sub    esp,0x8
c0016943:	68 58 01 00 00       	push   0x158
c0016948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001694c:	e8 54 c4 ff ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c0016951:	83 c4 10             	add    esp,0x10
c0016954:	83 c4 0c             	add    esp,0xc
c0016957:	c3                   	ret    

c0016958 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016958:	55                   	push   ebp
c0016959:	57                   	push   edi
c001695a:	56                   	push   esi
c001695b:	53                   	push   ebx
c001695c:	81 ec 20 01 00 00    	sub    esp,0x120
c0016962:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c0016969:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0016970:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016977:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001697e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016982:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016986:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001698a:	56                   	push   esi
c001698b:	68 c4 bd 02 c0       	push   0xc002bdc4
c0016990:	e8 f0 c4 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0016995:	58                   	pop    eax
c0016996:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001699d:	e8 f0 db ff ff       	call   c0014592 <Device::getName()>
c00169a2:	5a                   	pop    edx
c00169a3:	59                   	pop    ecx
c00169a4:	50                   	push   eax
c00169a5:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c00169a9:	53                   	push   ebx
c00169aa:	e8 79 9e fe ff       	call   c0000828 <strcpy>
c00169af:	5d                   	pop    ebp
c00169b0:	58                   	pop    eax
c00169b1:	68 f5 bd 02 c0       	push   0xc002bdf5
c00169b6:	53                   	push   ebx
c00169b7:	e8 ac 9f fe ff       	call   c0000968 <strcat>
c00169bc:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00169c3:	e8 12 8f ff ff       	call   c000f8da <malloc>
c00169c8:	83 c4 0c             	add    esp,0xc
c00169cb:	89 c5                	mov    ebp,eax
c00169cd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00169d1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00169d5:	57                   	push   edi
c00169d6:	56                   	push   esi
c00169d7:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00169de:	53                   	push   ebx
c00169df:	50                   	push   eax
c00169e0:	e8 bf fb ff ff       	call   c00165a4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00169e5:	83 c4 14             	add    esp,0x14
c00169e8:	55                   	push   ebp
c00169e9:	e8 6c fc ff ff       	call   c001665a <LogicalDisk::assignDriveLetter()>
c00169ee:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00169f1:	0f be d8             	movsx  ebx,al
c00169f4:	e8 17 fd ff ff       	call   c0016710 <LogicalDisk::mount()>
c00169f9:	58                   	pop    eax
c00169fa:	5a                   	pop    edx
c00169fb:	55                   	push   ebp
c00169fc:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016a03:	e8 9e d8 ff ff       	call   c00142a6 <Device::addChild(Device*)>
c0016a08:	59                   	pop    ecx
c0016a09:	5e                   	pop    esi
c0016a0a:	53                   	push   ebx
c0016a0b:	68 00 be 02 c0       	push   0xc002be00
c0016a10:	e8 70 c4 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0016a15:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016a1b:	5b                   	pop    ebx
c0016a1c:	5e                   	pop    esi
c0016a1d:	5f                   	pop    edi
c0016a1e:	5d                   	pop    ebp
c0016a1f:	c3                   	ret    

c0016a20 <createPartitionsForDisk(PhysicalDisk*)>:
c0016a20:	55                   	push   ebp
c0016a21:	57                   	push   edi
c0016a22:	56                   	push   esi
c0016a23:	53                   	push   ebx
c0016a24:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016a2a:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016a31:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016a37:	3d 00 02 00 00       	cmp    eax,0x200
c0016a3c:	74 27                	je     c0016a65 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016a3e:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016a44:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016a4a:	83 ec 10             	sub    esp,0x10
c0016a4d:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016a51:	99                   	cdq    
c0016a52:	c1 e6 0a             	shl    esi,0xa
c0016a55:	52                   	push   edx
c0016a56:	89 fd                	mov    ebp,edi
c0016a58:	50                   	push   eax
c0016a59:	55                   	push   ebp
c0016a5a:	56                   	push   esi
c0016a5b:	e8 14 09 01 00       	call   c0027374 <__udivdi3>
c0016a60:	e9 b1 00 00 00       	jmp    c0016b16 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a65:	83 ec 0c             	sub    esp,0xc
c0016a68:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a6a:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016a6e:	56                   	push   esi
c0016a6f:	6a 01                	push   0x1
c0016a71:	6a 00                	push   0x0
c0016a73:	6a 00                	push   0x0
c0016a75:	53                   	push   ebx
c0016a76:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016a79:	83 c4 20             	add    esp,0x20
c0016a7c:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016a84:	75 0a                	jne    c0016a90 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016a86:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016a8e:	74 2c                	je     c0016abc <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016a90:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a96:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a9c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016aa2:	83 ec 10             	sub    esp,0x10
c0016aa5:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016aa9:	89 f7                	mov    edi,esi
c0016aab:	c1 e0 0a             	shl    eax,0xa
c0016aae:	c1 ff 1f             	sar    edi,0x1f
c0016ab1:	57                   	push   edi
c0016ab2:	56                   	push   esi
c0016ab3:	52                   	push   edx
c0016ab4:	50                   	push   eax
c0016ab5:	e8 ba 08 01 00       	call   c0027374 <__udivdi3>
c0016aba:	eb 5a                	jmp    c0016b16 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016abc:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016ac3:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016aca:	83 e1 7f             	and    ecx,0x7f
c0016acd:	83 e0 7f             	and    eax,0x7f
c0016ad0:	01 c1                	add    ecx,eax
c0016ad2:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016ad9:	83 e0 7f             	and    eax,0x7f
c0016adc:	01 c1                	add    ecx,eax
c0016ade:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016ae5:	83 e0 7f             	and    eax,0x7f
c0016ae8:	00 c1                	add    cl,al
c0016aea:	74 41                	je     c0016b2d <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016aec:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016af2:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016af8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016afe:	83 ec 10             	sub    esp,0x10
c0016b01:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b05:	89 f7                	mov    edi,esi
c0016b07:	c1 e0 0a             	shl    eax,0xa
c0016b0a:	c1 ff 1f             	sar    edi,0x1f
c0016b0d:	57                   	push   edi
c0016b0e:	56                   	push   esi
c0016b0f:	52                   	push   edx
c0016b10:	50                   	push   eax
c0016b11:	e8 5e 08 01 00       	call   c0027374 <__udivdi3>
c0016b16:	83 c4 14             	add    esp,0x14
c0016b19:	52                   	push   edx
c0016b1a:	50                   	push   eax
c0016b1b:	6a 00                	push   0x0
c0016b1d:	6a 00                	push   0x0
c0016b1f:	53                   	push   ebx
c0016b20:	e8 33 fe ff ff       	call   c0016958 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016b25:	83 c4 20             	add    esp,0x20
c0016b28:	e9 79 01 00 00       	jmp    c0016ca6 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016b2d:	89 f0                	mov    eax,esi
c0016b2f:	31 f6                	xor    esi,esi
c0016b31:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016b38:	75 02                	jne    c0016b3c <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016b3a:	89 f1                	mov    ecx,esi
c0016b3c:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016b43:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016b4a:	c1 e2 08             	shl    edx,0x8
c0016b4d:	c1 e7 10             	shl    edi,0x10
c0016b50:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016b58:	09 fa                	or     edx,edi
c0016b5a:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016b62:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016b69:	83 c0 10             	add    eax,0x10
c0016b6c:	09 fa                	or     edx,edi
c0016b6e:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016b75:	c1 e7 18             	shl    edi,0x18
c0016b78:	09 fa                	or     edx,edi
c0016b7a:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016b81:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016b85:	c1 e7 10             	shl    edi,0x10
c0016b88:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016b8f:	c1 e2 08             	shl    edx,0x8
c0016b92:	09 fa                	or     edx,edi
c0016b94:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016b9b:	09 fa                	or     edx,edi
c0016b9d:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016ba4:	c1 e7 18             	shl    edi,0x18
c0016ba7:	09 fa                	or     edx,edi
c0016ba9:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016bad:	46                   	inc    esi
c0016bae:	83 fe 04             	cmp    esi,0x4
c0016bb1:	0f 85 7a ff ff ff    	jne    c0016b31 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bbb:	83 f0 01             	xor    eax,0x1
c0016bbe:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016bc2:	75 57                	jne    c0016c1b <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016bc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016bc8:	83 f0 01             	xor    eax,0x1
c0016bcb:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016bcf:	75 4a                	jne    c0016c1b <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016bd1:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016bd5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016bdd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016be5:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016beb:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016bf1:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016bf7:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016bfb:	89 f7                	mov    edi,esi
c0016bfd:	c1 e0 0a             	shl    eax,0xa
c0016c00:	c1 ff 1f             	sar    edi,0x1f
c0016c03:	57                   	push   edi
c0016c04:	56                   	push   esi
c0016c05:	52                   	push   edx
c0016c06:	50                   	push   eax
c0016c07:	e8 68 07 01 00       	call   c0027374 <__udivdi3>
c0016c0c:	83 c4 10             	add    esp,0x10
c0016c0f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c13:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c17:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016c1b:	84 c9                	test   cl,cl
c0016c1d:	74 53                	je     c0016c72 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016c1f:	0f b6 c9             	movzx  ecx,cl
c0016c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c26:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c2a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c2e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016c32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c36:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016c3a:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016c3e:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016c42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016c4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c4e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c52:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016c56:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016c5a:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016c5e:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016c62:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c66:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c6a:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016c6e:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016c72:	31 ed                	xor    ebp,ebp
c0016c74:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016c78:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016c7c:	89 f8                	mov    eax,edi
c0016c7e:	09 f0                	or     eax,esi
c0016c80:	74 1e                	je     c0016ca0 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c82:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016c86:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016c8a:	89 d1                	mov    ecx,edx
c0016c8c:	09 c1                	or     ecx,eax
c0016c8e:	74 10                	je     c0016ca0 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c90:	83 ec 0c             	sub    esp,0xc
c0016c93:	57                   	push   edi
c0016c94:	56                   	push   esi
c0016c95:	52                   	push   edx
c0016c96:	50                   	push   eax
c0016c97:	53                   	push   ebx
c0016c98:	e8 bb fc ff ff       	call   c0016958 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016c9d:	83 c4 20             	add    esp,0x20
c0016ca0:	45                   	inc    ebp
c0016ca1:	83 fd 04             	cmp    ebp,0x4
c0016ca4:	75 ce                	jne    c0016c74 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016ca6:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016cac:	5b                   	pop    ebx
c0016cad:	5e                   	pop    esi
c0016cae:	5f                   	pop    edi
c0016caf:	5d                   	pop    ebp
c0016cb0:	c3                   	ret    
c0016cb1:	90                   	nop

c0016cb2 <Serial::Serial(char const*)>:
c0016cb2:	83 ec 0c             	sub    esp,0xc
c0016cb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cb9:	83 ec 08             	sub    esp,0x8
c0016cbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cc0:	50                   	push   eax
c0016cc1:	e8 d0 d7 ff ff       	call   c0014496 <Device::Device(char const*)>
c0016cc6:	83 c4 10             	add    esp,0x10
c0016cc9:	ba 2c be 02 c0       	mov    edx,0xc002be2c
c0016cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cd2:	89 10                	mov    DWORD PTR [eax],edx
c0016cd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cd8:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016ce2:	90                   	nop
c0016ce3:	83 c4 0c             	add    esp,0xc
c0016ce6:	c3                   	ret    
c0016ce7:	90                   	nop

c0016ce8 <Serial::~Serial()>:
c0016ce8:	83 ec 0c             	sub    esp,0xc
c0016ceb:	ba 2c be 02 c0       	mov    edx,0xc002be2c
c0016cf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cf4:	89 10                	mov    DWORD PTR [eax],edx
c0016cf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cfa:	83 ec 0c             	sub    esp,0xc
c0016cfd:	50                   	push   eax
c0016cfe:	e8 89 d4 ff ff       	call   c001418c <Device::~Device()>
c0016d03:	83 c4 10             	add    esp,0x10
c0016d06:	90                   	nop
c0016d07:	83 c4 0c             	add    esp,0xc
c0016d0a:	c3                   	ret    
c0016d0b:	90                   	nop

c0016d0c <Serial::~Serial()>:
c0016d0c:	83 ec 0c             	sub    esp,0xc
c0016d0f:	83 ec 0c             	sub    esp,0xc
c0016d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d16:	e8 cd ff ff ff       	call   c0016ce8 <Serial::~Serial()>
c0016d1b:	83 c4 10             	add    esp,0x10
c0016d1e:	83 ec 08             	sub    esp,0x8
c0016d21:	68 58 01 00 00       	push   0x158
c0016d26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d2a:	e8 76 c0 ff ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c0016d2f:	83 c4 10             	add    esp,0x10
c0016d32:	83 c4 0c             	add    esp,0xc
c0016d35:	c3                   	ret    

c0016d36 <Timer::Timer(char const*)>:
c0016d36:	83 ec 0c             	sub    esp,0xc
c0016d39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d3d:	83 ec 08             	sub    esp,0x8
c0016d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d44:	50                   	push   eax
c0016d45:	e8 4c d7 ff ff       	call   c0014496 <Device::Device(char const*)>
c0016d4a:	83 c4 10             	add    esp,0x10
c0016d4d:	ba 70 be 02 c0       	mov    edx,0xc002be70
c0016d52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d56:	89 10                	mov    DWORD PTR [eax],edx
c0016d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d5c:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016d66:	90                   	nop
c0016d67:	83 c4 0c             	add    esp,0xc
c0016d6a:	c3                   	ret    
c0016d6b:	90                   	nop

c0016d6c <Timer::~Timer()>:
c0016d6c:	83 ec 0c             	sub    esp,0xc
c0016d6f:	ba 70 be 02 c0       	mov    edx,0xc002be70
c0016d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d78:	89 10                	mov    DWORD PTR [eax],edx
c0016d7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d7e:	83 ec 0c             	sub    esp,0xc
c0016d81:	50                   	push   eax
c0016d82:	e8 05 d4 ff ff       	call   c001418c <Device::~Device()>
c0016d87:	83 c4 10             	add    esp,0x10
c0016d8a:	90                   	nop
c0016d8b:	83 c4 0c             	add    esp,0xc
c0016d8e:	c3                   	ret    
c0016d8f:	90                   	nop

c0016d90 <Timer::~Timer()>:
c0016d90:	83 ec 0c             	sub    esp,0xc
c0016d93:	83 ec 0c             	sub    esp,0xc
c0016d96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d9a:	e8 cd ff ff ff       	call   c0016d6c <Timer::~Timer()>
c0016d9f:	83 c4 10             	add    esp,0x10
c0016da2:	83 ec 08             	sub    esp,0x8
c0016da5:	68 5c 01 00 00       	push   0x15c
c0016daa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016dae:	e8 f2 bf ff ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c0016db3:	83 c4 10             	add    esp,0x10
c0016db6:	83 c4 0c             	add    esp,0xc
c0016db9:	c3                   	ret    

c0016dba <Timer::read()>:
c0016dba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016dbe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016dc4:	c3                   	ret    

c0016dc5 <timerHandler(unsigned long long)>:
c0016dc5:	55                   	push   ebp
c0016dc6:	57                   	push   edi
c0016dc7:	56                   	push   esi
c0016dc8:	53                   	push   ebx
c0016dc9:	83 ec 0c             	sub    esp,0xc
c0016dcc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016dd0:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016dd4:	01 35 f0 f6 02 c0    	add    DWORD PTR ds:0xc002f6f0,esi
c0016dda:	11 3d f4 f6 02 c0    	adc    DWORD PTR ds:0xc002f6f4,edi
c0016de0:	80 3d 6d f0 02 c0 00 	cmp    BYTE PTR ds:0xc002f06d,0x0
c0016de7:	0f 84 42 01 00 00    	je     c0016f2f <timerHandler(unsigned long long)+0x16a>
c0016ded:	fa                   	cli    
c0016dee:	ff 05 a8 25 03 c0    	inc    DWORD PTR ds:0xc00325a8
c0016df4:	83 ec 0c             	sub    esp,0xc
c0016df7:	ff 05 a4 25 03 c0    	inc    DWORD PTR ds:0xc00325a4
c0016dfd:	68 b8 25 03 c0       	push   0xc00325b8
c0016e02:	e8 f3 25 01 00       	call   c00293fa <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e07:	83 c4 10             	add    esp,0x10
c0016e0a:	84 c0                	test   al,al
c0016e0c:	0f 85 a2 00 00 00    	jne    c0016eb4 <timerHandler(unsigned long long)+0xef>
c0016e12:	83 ec 0c             	sub    esp,0xc
c0016e15:	68 b8 25 03 c0       	push   0xc00325b8
c0016e1a:	e8 f7 25 01 00       	call   c0029416 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e1f:	83 c4 10             	add    esp,0x10
c0016e22:	89 c3                	mov    ebx,eax
c0016e24:	83 ec 0c             	sub    esp,0xc
c0016e27:	68 b8 25 03 c0       	push   0xc00325b8
c0016e2c:	e8 e5 25 01 00       	call   c0029416 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e31:	c7 04 24 b8 25 03 c0 	mov    DWORD PTR [esp],0xc00325b8
c0016e38:	89 c5                	mov    ebp,eax
c0016e3a:	e8 df 25 01 00       	call   c002941e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016e3f:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016e42:	83 c4 10             	add    esp,0x10
c0016e45:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016e48:	39 15 f0 f6 02 c0    	cmp    DWORD PTR ds:0xc002f6f0,edx
c0016e4e:	a1 f4 f6 02 c0       	mov    eax,ds:0xc002f6f4
c0016e53:	19 c8                	sbb    eax,ecx
c0016e55:	72 21                	jb     c0016e78 <timerHandler(unsigned long long)+0xb3>
c0016e57:	83 ec 0c             	sub    esp,0xc
c0016e5a:	55                   	push   ebp
c0016e5b:	e8 84 7c 00 00       	call   c001eae4 <unblockTask(ThreadControlBlock*)>
c0016e60:	83 c4 10             	add    esp,0x10
c0016e63:	39 eb                	cmp    ebx,ebp
c0016e65:	75 21                	jne    c0016e88 <timerHandler(unsigned long long)+0xc3>
c0016e67:	83 ec 0c             	sub    esp,0xc
c0016e6a:	68 b8 25 03 c0       	push   0xc00325b8
c0016e6f:	e8 a2 25 01 00       	call   c0029416 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e74:	89 c3                	mov    ebx,eax
c0016e76:	eb 0d                	jmp    c0016e85 <timerHandler(unsigned long long)+0xc0>
c0016e78:	50                   	push   eax
c0016e79:	50                   	push   eax
c0016e7a:	55                   	push   ebp
c0016e7b:	68 b8 25 03 c0       	push   0xc00325b8
c0016e80:	e8 47 26 01 00       	call   c00294cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e85:	83 c4 10             	add    esp,0x10
c0016e88:	83 ec 0c             	sub    esp,0xc
c0016e8b:	68 b8 25 03 c0       	push   0xc00325b8
c0016e90:	e8 65 25 01 00       	call   c00293fa <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e95:	83 c4 10             	add    esp,0x10
c0016e98:	84 c0                	test   al,al
c0016e9a:	75 18                	jne    c0016eb4 <timerHandler(unsigned long long)+0xef>
c0016e9c:	83 ec 0c             	sub    esp,0xc
c0016e9f:	68 b8 25 03 c0       	push   0xc00325b8
c0016ea4:	e8 6d 25 01 00       	call   c0029416 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ea9:	83 c4 10             	add    esp,0x10
c0016eac:	39 d8                	cmp    eax,ebx
c0016eae:	0f 85 70 ff ff ff    	jne    c0016e24 <timerHandler(unsigned long long)+0x5f>
c0016eb4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016eb9:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016ebd:	74 3d                	je     c0016efc <timerHandler(unsigned long long)+0x137>
c0016ebf:	80 3d 6c f0 02 c0 00 	cmp    BYTE PTR ds:0xc002f06c,0x0
c0016ec6:	74 34                	je     c0016efc <timerHandler(unsigned long long)+0x137>
c0016ec8:	fa                   	cli    
c0016ec9:	ff 05 a8 25 03 c0    	inc    DWORD PTR ds:0xc00325a8
c0016ecf:	31 d2                	xor    edx,edx
c0016ed1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ed6:	89 f9                	mov    ecx,edi
c0016ed8:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016edb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ee0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016ee3:	39 c6                	cmp    esi,eax
c0016ee5:	19 d1                	sbb    ecx,edx
c0016ee7:	72 05                	jb     c0016eee <timerHandler(unsigned long long)+0x129>
c0016ee9:	e8 32 77 00 00       	call   c001e620 <schedule()>
c0016eee:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c0016ef3:	48                   	dec    eax
c0016ef4:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c0016ef9:	75 01                	jne    c0016efc <timerHandler(unsigned long long)+0x137>
c0016efb:	fb                   	sti    
c0016efc:	a1 a4 25 03 c0       	mov    eax,ds:0xc00325a4
c0016f01:	48                   	dec    eax
c0016f02:	a3 a4 25 03 c0       	mov    ds:0xc00325a4,eax
c0016f07:	75 18                	jne    c0016f21 <timerHandler(unsigned long long)+0x15c>
c0016f09:	83 3d a0 25 03 c0 00 	cmp    DWORD PTR ds:0xc00325a0,0x0
c0016f10:	74 0f                	je     c0016f21 <timerHandler(unsigned long long)+0x15c>
c0016f12:	c7 05 a0 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325a0,0x0
c0016f1c:	e8 ff 76 00 00       	call   c001e620 <schedule()>
c0016f21:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c0016f26:	48                   	dec    eax
c0016f27:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c0016f2c:	75 01                	jne    c0016f2f <timerHandler(unsigned long long)+0x16a>
c0016f2e:	fb                   	sti    
c0016f2f:	83 c4 0c             	add    esp,0xc
c0016f32:	5b                   	pop    ebx
c0016f33:	5e                   	pop    esi
c0016f34:	5f                   	pop    edi
c0016f35:	5d                   	pop    ebp
c0016f36:	c3                   	ret    

c0016f37 <setupTimer(int)>:
c0016f37:	57                   	push   edi
c0016f38:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c0016f3d:	56                   	push   esi
c0016f3e:	53                   	push   ebx
c0016f3f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016f43:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f49:	83 ec 0c             	sub    esp,0xc
c0016f4c:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f52:	e8 3b d6 ff ff       	call   c0014592 <Device::getName()>
c0016f57:	83 c4 10             	add    esp,0x10
c0016f5a:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016f5d:	0f 85 8d 00 00 00    	jne    c0016ff0 <setupTimer(int)+0xb9>
c0016f63:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c0016f68:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016f6f:	74 7f                	je     c0016ff0 <setupTimer(int)+0xb9>
c0016f71:	83 ec 0c             	sub    esp,0xc
c0016f74:	68 5c 01 00 00       	push   0x15c
c0016f79:	e8 5c 89 ff ff       	call   c000f8da <malloc>
c0016f7e:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f81:	89 c3                	mov    ebx,eax
c0016f83:	e8 c4 ff 00 00       	call   c0026f4c <PIT::PIT()>
c0016f88:	59                   	pop    ecx
c0016f89:	5f                   	pop    edi
c0016f8a:	53                   	push   ebx
c0016f8b:	ff 35 68 f0 02 c0    	push   DWORD PTR ds:0xc002f068
c0016f91:	e8 10 d3 ff ff       	call   c00142a6 <Device::addChild(Device*)>
c0016f96:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f98:	6a 00                	push   0x0
c0016f9a:	6a 00                	push   0x0
c0016f9c:	56                   	push   esi
c0016f9d:	53                   	push   ebx
c0016f9e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016fa1:	83 c4 14             	add    esp,0x14
c0016fa4:	68 60 01 00 00       	push   0x160
c0016fa9:	e8 2c 89 ff ff       	call   c000f8da <malloc>
c0016fae:	89 04 24             	mov    DWORD PTR [esp],eax
c0016fb1:	89 c7                	mov    edi,eax
c0016fb3:	e8 44 fe 00 00       	call   c0026dfc <APICTimer::APICTimer()>
c0016fb8:	6a 00                	push   0x0
c0016fba:	6a 00                	push   0x0
c0016fbc:	56                   	push   esi
c0016fbd:	57                   	push   edi
c0016fbe:	e8 3b fd 00 00       	call   c0026cfe <APICTimer::open(int, int, void*)>
c0016fc3:	83 c4 20             	add    esp,0x20
c0016fc6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016fc8:	6a 00                	push   0x0
c0016fca:	6a 00                	push   0x0
c0016fcc:	6a 00                	push   0x0
c0016fce:	53                   	push   ebx
c0016fcf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016fd2:	58                   	pop    eax
c0016fd3:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c0016fd8:	5a                   	pop    edx
c0016fd9:	57                   	push   edi
c0016fda:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016fe0:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016fe6:	e8 bb d2 ff ff       	call   c00142a6 <Device::addChild(Device*)>
c0016feb:	83 c4 10             	add    esp,0x10
c0016fee:	eb 33                	jmp    c0017023 <setupTimer(int)+0xec>
c0016ff0:	83 ec 0c             	sub    esp,0xc
c0016ff3:	68 5c 01 00 00       	push   0x15c
c0016ff8:	e8 dd 88 ff ff       	call   c000f8da <malloc>
c0016ffd:	89 04 24             	mov    DWORD PTR [esp],eax
c0017000:	89 c3                	mov    ebx,eax
c0017002:	e8 45 ff 00 00       	call   c0026f4c <PIT::PIT()>
c0017007:	58                   	pop    eax
c0017008:	5a                   	pop    edx
c0017009:	53                   	push   ebx
c001700a:	ff 35 68 f0 02 c0    	push   DWORD PTR ds:0xc002f068
c0017010:	e8 91 d2 ff ff       	call   c00142a6 <Device::addChild(Device*)>
c0017015:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017017:	6a 00                	push   0x0
c0017019:	6a 00                	push   0x0
c001701b:	56                   	push   esi
c001701c:	53                   	push   ebx
c001701d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017020:	83 c4 20             	add    esp,0x20
c0017023:	89 d8                	mov    eax,ebx
c0017025:	5b                   	pop    ebx
c0017026:	5e                   	pop    esi
c0017027:	5f                   	pop    edi
c0017028:	c3                   	ret    
c0017029:	90                   	nop

c001702a <VCache::VCache(PhysicalDisk*)>:
c001702a:	53                   	push   ebx
c001702b:	83 ec 18             	sub    esp,0x18
c001702e:	ba a0 be 02 c0       	mov    edx,0xc002bea0
c0017033:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017037:	89 10                	mov    DWORD PTR [eax],edx
c0017039:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001703d:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0017044:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017048:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001704f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017053:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001705a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017061:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017065:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001706c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0017073:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017077:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001707e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017082:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017086:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001708a:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0017091:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0017098:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001709c:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00170a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170a4:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c00170a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ac:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00170b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170b4:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00170bb:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00170c3:	83 ec 0c             	sub    esp,0xc
c00170c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00170ca:	e8 0b 88 ff ff       	call   c000f8da <malloc>
c00170cf:	83 c4 10             	add    esp,0x10
c00170d2:	89 c3                	mov    ebx,eax
c00170d4:	83 ec 0c             	sub    esp,0xc
c00170d7:	53                   	push   ebx
c00170d8:	e8 ed 72 00 00       	call   c001e3ca <Mutex::Mutex()>
c00170dd:	83 c4 10             	add    esp,0x10
c00170e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170e4:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00170e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170eb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00170ef:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00170f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170f6:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00170fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017101:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017107:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001710b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001710e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017112:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0017118:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001711e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017122:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0017125:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0017128:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001712c:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017130:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017134:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001713a:	05 00 01 00 00       	add    eax,0x100
c001713f:	c1 e0 04             	shl    eax,0x4
c0017142:	83 ec 0c             	sub    esp,0xc
c0017145:	50                   	push   eax
c0017146:	e8 8f 87 ff ff       	call   c000f8da <malloc>
c001714b:	83 c4 10             	add    esp,0x10
c001714e:	89 c2                	mov    edx,eax
c0017150:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017154:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017157:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001715b:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017162:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017166:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001716a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001716e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017174:	c1 e0 07             	shl    eax,0x7
c0017177:	83 ec 0c             	sub    esp,0xc
c001717a:	50                   	push   eax
c001717b:	e8 5a 87 ff ff       	call   c000f8da <malloc>
c0017180:	83 c4 10             	add    esp,0x10
c0017183:	89 c2                	mov    edx,eax
c0017185:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017189:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001718c:	90                   	nop
c001718d:	83 c4 18             	add    esp,0x18
c0017190:	5b                   	pop    ebx
c0017191:	c3                   	ret    

c0017192 <VCache::invalidateReadBuffer()>:
c0017192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017196:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001719c:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00171a0:	c3                   	ret    
c00171a1:	90                   	nop

c00171a2 <VCache::writeWriteBuffer()>:
c00171a2:	53                   	push   ebx
c00171a3:	83 ec 14             	sub    esp,0x14
c00171a6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00171aa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00171ad:	8b 10                	mov    edx,DWORD PTR [eax]
c00171af:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00171b2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00171b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00171b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00171bb:	50                   	push   eax
c00171bc:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00171bf:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00171c6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00171cd:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00171d1:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00171d8:	83 c4 28             	add    esp,0x28
c00171db:	5b                   	pop    ebx
c00171dc:	c3                   	ret    
c00171dd:	90                   	nop

c00171de <VCache::~VCache()>:
c00171de:	83 ec 0c             	sub    esp,0xc
c00171e1:	ba a0 be 02 c0       	mov    edx,0xc002bea0
c00171e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171ea:	89 10                	mov    DWORD PTR [eax],edx
c00171ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171f0:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00171f3:	84 c0                	test   al,al
c00171f5:	74 0f                	je     c0017206 <VCache::~VCache()+0x28>
c00171f7:	83 ec 0c             	sub    esp,0xc
c00171fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171fe:	e8 9f ff ff ff       	call   c00171a2 <VCache::writeWriteBuffer()>
c0017203:	83 c4 10             	add    esp,0x10
c0017206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001720a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001720d:	83 ec 0c             	sub    esp,0xc
c0017210:	50                   	push   eax
c0017211:	e8 d4 86 ff ff       	call   c000f8ea <free>
c0017216:	83 c4 10             	add    esp,0x10
c0017219:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001721d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017220:	83 ec 0c             	sub    esp,0xc
c0017223:	50                   	push   eax
c0017224:	e8 c1 86 ff ff       	call   c000f8ea <free>
c0017229:	83 c4 10             	add    esp,0x10
c001722c:	90                   	nop
c001722d:	83 c4 0c             	add    esp,0xc
c0017230:	c3                   	ret    
c0017231:	90                   	nop

c0017232 <VCache::~VCache()>:
c0017232:	83 ec 0c             	sub    esp,0xc
c0017235:	83 ec 0c             	sub    esp,0xc
c0017238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001723c:	e8 9d ff ff ff       	call   c00171de <VCache::~VCache()>
c0017241:	83 c4 10             	add    esp,0x10
c0017244:	83 ec 08             	sub    esp,0x8
c0017247:	6a 44                	push   0x44
c0017249:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001724d:	e8 53 bb ff ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c0017252:	83 c4 10             	add    esp,0x10
c0017255:	83 c4 0c             	add    esp,0xc
c0017258:	c3                   	ret    
c0017259:	90                   	nop

c001725a <VCache::write(unsigned long long, int, void*)>:
c001725a:	55                   	push   ebp
c001725b:	57                   	push   edi
c001725c:	56                   	push   esi
c001725d:	53                   	push   ebx
c001725e:	83 ec 18             	sub    esp,0x18
c0017261:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017265:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017269:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001726d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017270:	e8 e3 76 00 00       	call   c001e958 <Semaphore::acquire()>
c0017275:	83 c4 10             	add    esp,0x10
c0017278:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001727c:	74 0c                	je     c001728a <VCache::write(unsigned long long, int, void*)+0x30>
c001727e:	83 ec 0c             	sub    esp,0xc
c0017281:	53                   	push   ebx
c0017282:	e8 0b ff ff ff       	call   c0017192 <VCache::invalidateReadBuffer()>
c0017287:	83 c4 10             	add    esp,0x10
c001728a:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001728e:	74 5c                	je     c00172ec <VCache::write(unsigned long long, int, void*)+0x92>
c0017290:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0017293:	89 e8                	mov    eax,ebp
c0017295:	99                   	cdq    
c0017296:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0017299:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001729c:	89 c1                	mov    ecx,eax
c001729e:	89 d0                	mov    eax,edx
c00172a0:	31 f1                	xor    ecx,esi
c00172a2:	31 f8                	xor    eax,edi
c00172a4:	09 c1                	or     ecx,eax
c00172a6:	75 38                	jne    c00172e0 <VCache::write(unsigned long long, int, void*)+0x86>
c00172a8:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00172ad:	75 31                	jne    c00172e0 <VCache::write(unsigned long long, int, void*)+0x86>
c00172af:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172b2:	89 ef                	mov    edi,ebp
c00172b4:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00172ba:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00172be:	0f af f9             	imul   edi,ecx
c00172c1:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c00172c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00172c6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00172c9:	40                   	inc    eax
c00172ca:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00172cd:	83 c0 80             	add    eax,0xffffff80
c00172d0:	75 5c                	jne    c001732e <VCache::write(unsigned long long, int, void*)+0xd4>
c00172d2:	83 ec 0c             	sub    esp,0xc
c00172d5:	53                   	push   ebx
c00172d6:	e8 c7 fe ff ff       	call   c00171a2 <VCache::writeWriteBuffer()>
c00172db:	83 c4 10             	add    esp,0x10
c00172de:	eb 4e                	jmp    c001732e <VCache::write(unsigned long long, int, void*)+0xd4>
c00172e0:	83 ec 0c             	sub    esp,0xc
c00172e3:	53                   	push   ebx
c00172e4:	e8 b9 fe ff ff       	call   c00171a2 <VCache::writeWriteBuffer()>
c00172e9:	83 c4 10             	add    esp,0x10
c00172ec:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172ef:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c00172f4:	7f 22                	jg     c0017318 <VCache::write(unsigned long long, int, void*)+0xbe>
c00172f6:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00172f9:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00172fc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017300:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0017304:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0017307:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c001730a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0017310:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017314:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017316:	eb 16                	jmp    c001732e <VCache::write(unsigned long long, int, void*)+0xd4>
c0017318:	83 ec 0c             	sub    esp,0xc
c001731b:	8b 10                	mov    edx,DWORD PTR [eax]
c001731d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017321:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017325:	57                   	push   edi
c0017326:	56                   	push   esi
c0017327:	50                   	push   eax
c0017328:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001732b:	83 c4 20             	add    esp,0x20
c001732e:	83 ec 0c             	sub    esp,0xc
c0017331:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017334:	e8 59 7d 00 00       	call   c001f092 <Semaphore::release()>
c0017339:	83 c4 1c             	add    esp,0x1c
c001733c:	31 c0                	xor    eax,eax
c001733e:	5b                   	pop    ebx
c001733f:	5e                   	pop    esi
c0017340:	5f                   	pop    edi
c0017341:	5d                   	pop    ebp
c0017342:	c3                   	ret    
c0017343:	90                   	nop

c0017344 <VCache::read(unsigned long long, int, void*)>:
c0017344:	55                   	push   ebp
c0017345:	57                   	push   edi
c0017346:	56                   	push   esi
c0017347:	53                   	push   ebx
c0017348:	83 ec 28             	sub    esp,0x28
c001734b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001734f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017353:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017357:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001735b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001735e:	e8 f5 75 00 00       	call   c001e958 <Semaphore::acquire()>
c0017363:	83 c4 10             	add    esp,0x10
c0017366:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001736a:	74 0c                	je     c0017378 <VCache::read(unsigned long long, int, void*)+0x34>
c001736c:	83 ec 0c             	sub    esp,0xc
c001736f:	53                   	push   ebx
c0017370:	e8 2d fe ff ff       	call   c00171a2 <VCache::writeWriteBuffer()>
c0017375:	83 c4 10             	add    esp,0x10
c0017378:	83 fd 01             	cmp    ebp,0x1
c001737b:	0f 85 80 00 00 00    	jne    c0017401 <VCache::read(unsigned long long, int, void*)+0xbd>
c0017381:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017384:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017388:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001738f:	75 70                	jne    c0017401 <VCache::read(unsigned long long, int, void*)+0xbd>
c0017391:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0017394:	89 e9                	mov    ecx,ebp
c0017396:	f7 d9                	neg    ecx
c0017398:	89 c8                	mov    eax,ecx
c001739a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001739e:	c1 f8 1f             	sar    eax,0x1f
c00173a1:	21 f1                	and    ecx,esi
c00173a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00173a7:	89 c8                	mov    eax,ecx
c00173a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00173ad:	21 f9                	and    ecx,edi
c00173af:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00173b3:	89 ca                	mov    edx,ecx
c00173b5:	74 0a                	je     c00173c1 <VCache::read(unsigned long long, int, void*)+0x7d>
c00173b7:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c00173ba:	75 05                	jne    c00173c1 <VCache::read(unsigned long long, int, void*)+0x7d>
c00173bc:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c00173bf:	74 23                	je     c00173e4 <VCache::read(unsigned long long, int, void*)+0xa0>
c00173c1:	83 ec 0c             	sub    esp,0xc
c00173c4:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c00173c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00173cc:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00173cf:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00173d2:	8b 09                	mov    ecx,DWORD PTR [ecx]
c00173d4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00173d7:	55                   	push   ebp
c00173d8:	52                   	push   edx
c00173d9:	50                   	push   eax
c00173da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00173de:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c00173e1:	83 c4 20             	add    esp,0x20
c00173e4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173e7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00173eb:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00173f1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00173f4:	48                   	dec    eax
c00173f5:	21 c6                	and    esi,eax
c00173f7:	0f af f1             	imul   esi,ecx
c00173fa:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c00173fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00173ff:	eb 1d                	jmp    c001741e <VCache::read(unsigned long long, int, void*)+0xda>
c0017401:	83 ec 0c             	sub    esp,0xc
c0017404:	53                   	push   ebx
c0017405:	e8 88 fd ff ff       	call   c0017192 <VCache::invalidateReadBuffer()>
c001740a:	5a                   	pop    edx
c001740b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001740e:	8b 10                	mov    edx,DWORD PTR [eax]
c0017410:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017414:	55                   	push   ebp
c0017415:	57                   	push   edi
c0017416:	56                   	push   esi
c0017417:	50                   	push   eax
c0017418:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001741b:	83 c4 20             	add    esp,0x20
c001741e:	83 ec 0c             	sub    esp,0xc
c0017421:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017424:	e8 69 7c 00 00       	call   c001f092 <Semaphore::release()>
c0017429:	83 c4 2c             	add    esp,0x2c
c001742c:	31 c0                	xor    eax,eax
c001742e:	5b                   	pop    ebx
c001742f:	5e                   	pop    esi
c0017430:	5f                   	pop    edi
c0017431:	5d                   	pop    ebp
c0017432:	c3                   	ret    
c0017433:	90                   	nop

c0017434 <Video::putrect(int, int, int, int, unsigned int)>:
c0017434:	55                   	push   ebp
c0017435:	57                   	push   edi
c0017436:	56                   	push   esi
c0017437:	53                   	push   ebx
c0017438:	83 ec 1c             	sub    esp,0x1c
c001743b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001743f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017443:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017447:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001744b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001744f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017453:	01 df                	add    edi,ebx
c0017455:	39 fb                	cmp    ebx,edi
c0017457:	7d 1f                	jge    c0017478 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0017459:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001745d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0017461:	7d 12                	jge    c0017475 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0017463:	8b 16                	mov    edx,DWORD PTR [esi]
c0017465:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017469:	53                   	push   ebx
c001746a:	55                   	push   ebp
c001746b:	45                   	inc    ebp
c001746c:	56                   	push   esi
c001746d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017470:	83 c4 10             	add    esp,0x10
c0017473:	eb e8                	jmp    c001745d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0017475:	43                   	inc    ebx
c0017476:	eb dd                	jmp    c0017455 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0017478:	83 c4 1c             	add    esp,0x1c
c001747b:	5b                   	pop    ebx
c001747c:	5e                   	pop    esi
c001747d:	5f                   	pop    edi
c001747e:	5d                   	pop    ebp
c001747f:	c3                   	ret    

c0017480 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0017480:	55                   	push   ebp
c0017481:	57                   	push   edi
c0017482:	31 ff                	xor    edi,edi
c0017484:	56                   	push   esi
c0017485:	53                   	push   ebx
c0017486:	83 ec 1c             	sub    esp,0x1c
c0017489:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001748d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017491:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017498:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001749d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00174a1:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00174a5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00174a9:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c00174ac:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00174b0:	01 f9                	add    ecx,edi
c00174b2:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c00174b6:	7d 2f                	jge    c00174e7 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c00174b8:	31 f6                	xor    esi,esi
c00174ba:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00174be:	01 f2                	add    edx,esi
c00174c0:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00174c4:	7d 1a                	jge    c00174e0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00174c6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00174c9:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00174cc:	46                   	inc    esi
c00174cd:	51                   	push   ecx
c00174ce:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00174d2:	52                   	push   edx
c00174d3:	55                   	push   ebp
c00174d4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00174d7:	83 c4 10             	add    esp,0x10
c00174da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00174de:	eb da                	jmp    c00174ba <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00174e0:	47                   	inc    edi
c00174e1:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00174e5:	eb c5                	jmp    c00174ac <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00174e7:	83 c4 1c             	add    esp,0x1c
c00174ea:	5b                   	pop    ebx
c00174eb:	5e                   	pop    esi
c00174ec:	5f                   	pop    edi
c00174ed:	5d                   	pop    ebp
c00174ee:	c3                   	ret    
c00174ef:	90                   	nop

c00174f0 <Video::blit(unsigned int*, int, int, int, int)>:
c00174f0:	55                   	push   ebp
c00174f1:	57                   	push   edi
c00174f2:	56                   	push   esi
c00174f3:	53                   	push   ebx
c00174f4:	83 ec 1c             	sub    esp,0x1c
c00174f7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00174fb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00174ff:	85 c0                	test   eax,eax
c0017501:	79 02                	jns    c0017505 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0017503:	31 c0                	xor    eax,eax
c0017505:	c1 e0 02             	shl    eax,0x2
c0017508:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001750c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017510:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017514:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0017518:	39 d8                	cmp    eax,ebx
c001751a:	7e 49                	jle    c0017565 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001751c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017522:	7c 41                	jl     c0017565 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017524:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0017528:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001752c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017530:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0017534:	39 f9                	cmp    ecx,edi
c0017536:	7e 22                	jle    c001755a <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0017538:	83 c5 04             	add    ebp,0x4
c001753b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017541:	7c 14                	jl     c0017557 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0017543:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017545:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0017548:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001754c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017550:	56                   	push   esi
c0017551:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017554:	83 c4 10             	add    esp,0x10
c0017557:	47                   	inc    edi
c0017558:	eb d2                	jmp    c001752c <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001755a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001755e:	43                   	inc    ebx
c001755f:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017563:	eb ab                	jmp    c0017510 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017565:	83 c4 1c             	add    esp,0x1c
c0017568:	5b                   	pop    ebx
c0017569:	5e                   	pop    esi
c001756a:	5f                   	pop    edi
c001756b:	5d                   	pop    ebp
c001756c:	c3                   	ret    
c001756d:	90                   	nop

c001756e <Video::clearScreen(unsigned int)>:
c001756e:	57                   	push   edi
c001756f:	56                   	push   esi
c0017570:	53                   	push   ebx
c0017571:	31 db                	xor    ebx,ebx
c0017573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017577:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001757d:	7e 1f                	jle    c001759e <Video::clearScreen(unsigned int)+0x30>
c001757f:	31 ff                	xor    edi,edi
c0017581:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017587:	7e 12                	jle    c001759b <Video::clearScreen(unsigned int)+0x2d>
c0017589:	8b 06                	mov    eax,DWORD PTR [esi]
c001758b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001758f:	53                   	push   ebx
c0017590:	57                   	push   edi
c0017591:	47                   	inc    edi
c0017592:	56                   	push   esi
c0017593:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017596:	83 c4 10             	add    esp,0x10
c0017599:	eb e6                	jmp    c0017581 <Video::clearScreen(unsigned int)+0x13>
c001759b:	43                   	inc    ebx
c001759c:	eb d9                	jmp    c0017577 <Video::clearScreen(unsigned int)+0x9>
c001759e:	5b                   	pop    ebx
c001759f:	5e                   	pop    esi
c00175a0:	5f                   	pop    edi
c00175a1:	c3                   	ret    

c00175a2 <Video::putpixel(int, int, unsigned int)>:
c00175a2:	c7 44 24 04 a8 be 02 c0 	mov    DWORD PTR [esp+0x4],0xc002bea8
c00175aa:	e9 be 32 00 00       	jmp    c001a86d <Krnl::panic(char const*)>
c00175af:	90                   	nop

c00175b0 <Video::Video(char const*)>:
c00175b0:	83 ec 0c             	sub    esp,0xc
c00175b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175b7:	83 ec 08             	sub    esp,0x8
c00175ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175be:	50                   	push   eax
c00175bf:	e8 d2 ce ff ff       	call   c0014496 <Device::Device(char const*)>
c00175c4:	83 c4 10             	add    esp,0x10
c00175c7:	ba 2c bf 02 c0       	mov    edx,0xc002bf2c
c00175cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175d0:	89 10                	mov    DWORD PTR [eax],edx
c00175d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175d6:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00175e0:	90                   	nop
c00175e1:	83 c4 0c             	add    esp,0xc
c00175e4:	c3                   	ret    
c00175e5:	90                   	nop

c00175e6 <Video::~Video()>:
c00175e6:	83 ec 0c             	sub    esp,0xc
c00175e9:	ba 2c bf 02 c0       	mov    edx,0xc002bf2c
c00175ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175f2:	89 10                	mov    DWORD PTR [eax],edx
c00175f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175f8:	83 ec 0c             	sub    esp,0xc
c00175fb:	50                   	push   eax
c00175fc:	e8 8b cb ff ff       	call   c001418c <Device::~Device()>
c0017601:	83 c4 10             	add    esp,0x10
c0017604:	90                   	nop
c0017605:	83 c4 0c             	add    esp,0xc
c0017608:	c3                   	ret    
c0017609:	90                   	nop

c001760a <Video::~Video()>:
c001760a:	83 ec 0c             	sub    esp,0xc
c001760d:	83 ec 0c             	sub    esp,0xc
c0017610:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017614:	e8 cd ff ff ff       	call   c00175e6 <Video::~Video()>
c0017619:	83 c4 10             	add    esp,0x10
c001761c:	83 ec 08             	sub    esp,0x8
c001761f:	68 64 01 00 00       	push   0x164
c0017624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017628:	e8 78 b7 ff ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c001762d:	83 c4 10             	add    esp,0x10
c0017630:	83 c4 0c             	add    esp,0xc
c0017633:	c3                   	ret    

c0017634 <Video::isMonochrome()>:
c0017634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017638:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001763e:	c3                   	ret    
c001763f:	90                   	nop

c0017640 <Video::getWidth()>:
c0017640:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017644:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001764a:	c3                   	ret    
c001764b:	90                   	nop

c001764c <Video::getHeight()>:
c001764c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017650:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017656:	c3                   	ret    
c0017657:	90                   	nop

c0017658 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017658:	55                   	push   ebp
c0017659:	57                   	push   edi
c001765a:	56                   	push   esi
c001765b:	53                   	push   ebx
c001765c:	83 ec 2c             	sub    esp,0x2c
c001765f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017663:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017667:	83 f8 01             	cmp    eax,0x1
c001766a:	19 c9                	sbb    ecx,ecx
c001766c:	31 db                	xor    ebx,ebx
c001766e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017672:	89 cd                	mov    ebp,ecx
c0017674:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001767c:	f7 d5                	not    ebp
c001767e:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017684:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017688:	01 d8                	add    eax,ebx
c001768a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001768e:	56                   	push   esi
c001768f:	e8 b8 ff ff ff       	call   c001764c <Video::getHeight()>
c0017694:	59                   	pop    ecx
c0017695:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017699:	7e 70                	jle    c001770b <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001769b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001769f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00176a3:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00176a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00176aa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00176ae:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00176b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00176b9:	89 f8                	mov    eax,edi
c00176bb:	83 c0 20             	add    eax,0x20
c00176be:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00176c2:	56                   	push   esi
c00176c3:	e8 78 ff ff ff       	call   c0017640 <Video::getWidth()>
c00176c8:	5a                   	pop    edx
c00176c9:	39 c7                	cmp    edi,eax
c00176cb:	7d 34                	jge    c0017701 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00176cd:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00176d2:	74 05                	je     c00176d9 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00176d4:	8b 06                	mov    eax,DWORD PTR [esi]
c00176d6:	55                   	push   ebp
c00176d7:	eb 0d                	jmp    c00176e6 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00176d9:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00176de:	74 12                	je     c00176f2 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00176e0:	8b 06                	mov    eax,DWORD PTR [esi]
c00176e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00176e6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00176ea:	57                   	push   edi
c00176eb:	56                   	push   esi
c00176ec:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00176ef:	83 c4 10             	add    esp,0x10
c00176f2:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00176f6:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00176fa:	47                   	inc    edi
c00176fb:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00176ff:	75 c1                	jne    c00176c2 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0017701:	43                   	inc    ebx
c0017702:	83 fb 20             	cmp    ebx,0x20
c0017705:	0f 85 79 ff ff ff    	jne    c0017684 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c001770b:	83 c4 2c             	add    esp,0x2c
c001770e:	5b                   	pop    ebx
c001770f:	5e                   	pop    esi
c0017710:	5f                   	pop    edi
c0017711:	5d                   	pop    ebp
c0017712:	c3                   	ret    
c0017713:	90                   	nop

c0017714 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017714:	55                   	push   ebp
c0017715:	57                   	push   edi
c0017716:	56                   	push   esi
c0017717:	53                   	push   ebx
c0017718:	83 ec 28             	sub    esp,0x28
c001771b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001771f:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017723:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017727:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001772b:	c1 e7 08             	shl    edi,0x8
c001772e:	01 c7                	add    edi,eax
c0017730:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017734:	c1 e0 08             	shl    eax,0x8
c0017737:	01 d0                	add    eax,edx
c0017739:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001773d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017741:	0f af c7             	imul   eax,edi
c0017744:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001774b:	50                   	push   eax
c001774c:	e8 89 81 ff ff       	call   c000f8da <malloc>
c0017751:	83 c4 10             	add    esp,0x10
c0017754:	89 c5                	mov    ebp,eax
c0017756:	85 c0                	test   eax,eax
c0017758:	75 15                	jne    c001776f <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c001775a:	83 ec 0c             	sub    esp,0xc
c001775d:	68 c9 be 02 c0       	push   0xc002bec9
c0017762:	e8 1e b7 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0017767:	83 c4 10             	add    esp,0x10
c001776a:	e9 1c 01 00 00       	jmp    c001788b <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001776f:	be 12 00 00 00       	mov    esi,0x12
c0017774:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017778:	74 11                	je     c001778b <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c001777a:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001777e:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017782:	c1 fe 03             	sar    esi,0x3
c0017785:	0f af f0             	imul   esi,eax
c0017788:	83 c6 12             	add    esi,0x12
c001778b:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001778f:	74 04                	je     c0017795 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0017791:	85 ff                	test   edi,edi
c0017793:	75 12                	jne    c00177a7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017795:	83 ec 0c             	sub    esp,0xc
c0017798:	68 e0 be 02 c0       	push   0xc002bee0
c001779d:	e8 e3 b6 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00177a2:	e9 ce 00 00 00       	jmp    c0017875 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c00177a7:	52                   	push   edx
c00177a8:	52                   	push   edx
c00177a9:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c00177ad:	50                   	push   eax
c00177ae:	68 f5 be 02 c0       	push   0xc002bef5
c00177b3:	e8 cd b6 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00177b8:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c00177bc:	83 c4 10             	add    esp,0x10
c00177bf:	80 fa 02             	cmp    dl,0x2
c00177c2:	0f 85 98 00 00 00    	jne    c0017860 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c00177c8:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00177cd:	75 10                	jne    c00177df <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00177cf:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00177d3:	75 0a                	jne    c00177df <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00177d5:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00177d8:	83 e8 18             	sub    eax,0x18
c00177db:	a8 f7                	test   al,0xf7
c00177dd:	74 0a                	je     c00177e9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c00177df:	83 ec 0c             	sub    esp,0xc
c00177e2:	68 02 bf 02 c0       	push   0xc002bf02
c00177e7:	eb 7f                	jmp    c0017868 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c00177e9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00177f1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00177f9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00177fd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017805:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017809:	75 0c                	jne    c0017817 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c001780b:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0017810:	c1 e0 18             	shl    eax,0x18
c0017813:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017817:	41                   	inc    ecx
c0017818:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c001781d:	c1 e2 10             	shl    edx,0x10
c0017820:	89 d0                	mov    eax,edx
c0017822:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017827:	c1 e2 08             	shl    edx,0x8
c001782a:	09 c2                	or     edx,eax
c001782c:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0017830:	09 c2                	or     edx,eax
c0017832:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017836:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c001783a:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001783e:	c1 f8 03             	sar    eax,0x3
c0017841:	01 c6                	add    esi,eax
c0017843:	89 c8                	mov    eax,ecx
c0017845:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017849:	39 c7                	cmp    edi,eax
c001784b:	7f b0                	jg     c00177fd <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001784d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017851:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017855:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017858:	7e 22                	jle    c001787c <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c001785a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001785e:	eb 99                	jmp    c00177f9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0017860:	50                   	push   eax
c0017861:	50                   	push   eax
c0017862:	52                   	push   edx
c0017863:	68 10 bf 02 c0       	push   0xc002bf10
c0017868:	e8 18 b6 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001786d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017870:	e8 75 80 ff ff       	call   c000f8ea <free>
c0017875:	83 c4 10             	add    esp,0x10
c0017878:	31 ed                	xor    ebp,ebp
c001787a:	eb 0f                	jmp    c001788b <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001787c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017880:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017883:	89 38                	mov    DWORD PTR [eax],edi
c0017885:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017889:	89 08                	mov    DWORD PTR [eax],ecx
c001788b:	83 c4 1c             	add    esp,0x1c
c001788e:	89 e8                	mov    eax,ebp
c0017890:	5b                   	pop    ebx
c0017891:	5e                   	pop    esi
c0017892:	5f                   	pop    edi
c0017893:	5d                   	pop    ebp
c0017894:	c3                   	ret    
c0017895:	90                   	nop

c0017896 <Video::putTGA(int, int, unsigned char*, int)>:
c0017896:	55                   	push   ebp
c0017897:	57                   	push   edi
c0017898:	56                   	push   esi
c0017899:	53                   	push   ebx
c001789a:	83 ec 28             	sub    esp,0x28
c001789d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00178a1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178a5:	50                   	push   eax
c00178a6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178aa:	50                   	push   eax
c00178ab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00178af:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00178b3:	56                   	push   esi
c00178b4:	e8 5b fe ff ff       	call   c0017714 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00178b9:	83 c4 20             	add    esp,0x20
c00178bc:	85 c0                	test   eax,eax
c00178be:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00178c2:	74 35                	je     c00178f9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00178c4:	89 c7                	mov    edi,eax
c00178c6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00178ca:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00178ce:	39 d8                	cmp    eax,ebx
c00178d0:	7e 27                	jle    c00178f9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00178d2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00178d6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00178da:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00178de:	39 e8                	cmp    eax,ebp
c00178e0:	7e 14                	jle    c00178f6 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00178e2:	8b 06                	mov    eax,DWORD PTR [esi]
c00178e4:	83 c7 04             	add    edi,0x4
c00178e7:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00178ea:	53                   	push   ebx
c00178eb:	55                   	push   ebp
c00178ec:	45                   	inc    ebp
c00178ed:	56                   	push   esi
c00178ee:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00178f1:	83 c4 10             	add    esp,0x10
c00178f4:	eb e0                	jmp    c00178d6 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00178f6:	43                   	inc    ebx
c00178f7:	eb cd                	jmp    c00178c6 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00178f9:	83 c4 1c             	add    esp,0x1c
c00178fc:	5b                   	pop    ebx
c00178fd:	5e                   	pop    esi
c00178fe:	5f                   	pop    edi
c00178ff:	5d                   	pop    ebp
c0017900:	c3                   	ret    
c0017901:	90                   	nop

c0017902 <ACPI::close(int, int, void*)>:
c0017902:	83 ec 1c             	sub    esp,0x1c
c0017905:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001790d:	74 0a                	je     c0017919 <ACPI::close(int, int, void*)+0x17>
c001790f:	b8 00 00 00 00       	mov    eax,0x0
c0017914:	e9 9a 00 00 00       	jmp    c00179b3 <ACPI::close(int, int, void*)+0xb1>
c0017919:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001791e:	75 37                	jne    c0017957 <ACPI::close(int, int, void*)+0x55>
c0017920:	83 ec 0c             	sub    esp,0xc
c0017923:	68 6c bf 02 c0       	push   0xc002bf6c
c0017928:	e8 58 b5 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001792d:	83 c4 10             	add    esp,0x10
c0017930:	a1 28 17 03 c0       	mov    eax,ds:0xc0031728
c0017935:	85 c0                	test   eax,eax
c0017937:	74 07                	je     c0017940 <ACPI::close(int, int, void*)+0x3e>
c0017939:	a1 28 17 03 c0       	mov    eax,ds:0xc0031728
c001793e:	ff d0                	call   eax
c0017940:	83 ec 0c             	sub    esp,0xc
c0017943:	68 e0 c0 02 c0       	push   0xc002c0e0
c0017948:	e8 20 2f 00 00       	call   c001a86d <Krnl::panic(char const*)>
c001794d:	83 c4 10             	add    esp,0x10
c0017950:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017955:	eb 5c                	jmp    c00179b3 <ACPI::close(int, int, void*)+0xb1>
c0017957:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001795c:	75 50                	jne    c00179ae <ACPI::close(int, int, void*)+0xac>
c001795e:	a1 24 17 03 c0       	mov    eax,ds:0xc0031724
c0017963:	85 c0                	test   eax,eax
c0017965:	74 07                	je     c001796e <ACPI::close(int, int, void*)+0x6c>
c0017967:	a1 24 17 03 c0       	mov    eax,ds:0xc0031724
c001796c:	ff d0                	call   eax
c001796e:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017973:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017978:	83 e0 02             	and    eax,0x2
c001797b:	74 1c                	je     c0017999 <ACPI::close(int, int, void*)+0x97>
c001797d:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017984:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017988:	89 c2                	mov    edx,eax
c001798a:	ec                   	in     al,dx
c001798b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001798f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017993:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017997:	eb da                	jmp    c0017973 <ACPI::close(int, int, void*)+0x71>
c0017999:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00179a0:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00179a5:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00179a9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00179ad:	ee                   	out    dx,al
c00179ae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00179b3:	83 c4 1c             	add    esp,0x1c
c00179b6:	c3                   	ret    

c00179b7 <findRSDP()>:
c00179b7:	83 ec 1c             	sub    esp,0x1c
c00179ba:	83 ec 0c             	sub    esp,0xc
c00179bd:	68 79 bf 02 c0       	push   0xc002bf79
c00179c2:	e8 be b4 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00179c7:	83 c4 10             	add    esp,0x10
c00179ca:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c00179cf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00179d5:	83 e0 04             	and    eax,0x4
c00179d8:	84 c0                	test   al,al
c00179da:	75 07                	jne    c00179e3 <findRSDP()+0x2c>
c00179dc:	b8 00 00 00 00       	mov    eax,0x0
c00179e1:	eb 6a                	jmp    c0017a4d <findRSDP()+0x96>
c00179e3:	a1 b4 f0 02 c0       	mov    eax,ds:0xc002f0b4
c00179e8:	3d ff 07 00 00       	cmp    eax,0x7ff
c00179ed:	7f 1b                	jg     c0017a0a <findRSDP()+0x53>
c00179ef:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c00179f4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00179fa:	83 e2 fb             	and    edx,0xfffffffb
c00179fd:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017a03:	b8 00 00 00 00       	mov    eax,0x0
c0017a08:	eb 43                	jmp    c0017a4d <findRSDP()+0x96>
c0017a0a:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017a12:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017a1a:	77 2c                	ja     c0017a48 <findRSDP()+0x91>
c0017a1c:	83 ec 04             	sub    esp,0x4
c0017a1f:	6a 08                	push   0x8
c0017a21:	68 87 bf 02 c0       	push   0xc002bf87
c0017a26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017a2a:	e8 39 8c fe ff       	call   c0000668 <memcmp>
c0017a2f:	83 c4 10             	add    esp,0x10
c0017a32:	85 c0                	test   eax,eax
c0017a34:	0f 94 c0             	sete   al
c0017a37:	84 c0                	test   al,al
c0017a39:	74 06                	je     c0017a41 <findRSDP()+0x8a>
c0017a3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a3f:	eb 0c                	jmp    c0017a4d <findRSDP()+0x96>
c0017a41:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017a46:	eb ca                	jmp    c0017a12 <findRSDP()+0x5b>
c0017a48:	b8 00 00 00 00       	mov    eax,0x0
c0017a4d:	83 c4 1c             	add    esp,0x1c
c0017a50:	c3                   	ret    

c0017a51 <loadACPITables(unsigned char*)>:
c0017a51:	57                   	push   edi
c0017a52:	56                   	push   esi
c0017a53:	53                   	push   ebx
c0017a54:	83 ec 60             	sub    esp,0x60
c0017a57:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c0017a5c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a62:	83 e0 04             	and    eax,0x4
c0017a65:	84 c0                	test   al,al
c0017a67:	0f 84 33 02 00 00    	je     c0017ca0 <loadACPITables(unsigned char*)+0x24f>
c0017a6d:	a0 40 19 03 c0       	mov    al,ds:0xc0031940
c0017a72:	84 c0                	test   al,al
c0017a74:	74 75                	je     c0017aeb <loadACPITables(unsigned char*)+0x9a>
c0017a76:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017a7a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0017a7e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a82:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a85:	83 e8 24             	sub    eax,0x24
c0017a88:	c1 e8 03             	shr    eax,0x3
c0017a8b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017a8f:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0017a97:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017a9b:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0017a9f:	0f 8d b2 00 00 00    	jge    c0017b57 <loadACPITables(unsigned char*)+0x106>
c0017aa5:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017aa9:	83 c0 24             	add    eax,0x24
c0017aac:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017ab0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017ab4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017ab8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017abc:	c1 e0 03             	shl    eax,0x3
c0017abf:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0017ac3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017ac7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017aca:	8b 00                	mov    eax,DWORD PTR [eax]
c0017acc:	89 c1                	mov    ecx,eax
c0017ace:	a1 2c 17 03 c0       	mov    eax,ds:0xc003172c
c0017ad3:	8d 50 01             	lea    edx,[eax+0x1]
c0017ad6:	89 15 2c 17 03 c0    	mov    DWORD PTR ds:0xc003172c,edx
c0017adc:	89 ca                	mov    edx,ecx
c0017ade:	89 14 c5 44 17 03 c0 	mov    DWORD PTR [eax*8-0x3ffce8bc],edx
c0017ae5:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0017ae9:	eb ac                	jmp    c0017a97 <loadACPITables(unsigned char*)+0x46>
c0017aeb:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017aef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017af3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017af7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017afa:	83 e8 24             	sub    eax,0x24
c0017afd:	c1 e8 02             	shr    eax,0x2
c0017b00:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017b04:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0017b0c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017b10:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0017b14:	7d 41                	jge    c0017b57 <loadACPITables(unsigned char*)+0x106>
c0017b16:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017b1a:	83 c0 24             	add    eax,0x24
c0017b1d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017b21:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017b25:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017b29:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017b2d:	c1 e0 02             	shl    eax,0x2
c0017b30:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017b34:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b38:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017b3a:	a1 2c 17 03 c0       	mov    eax,ds:0xc003172c
c0017b3f:	8d 50 01             	lea    edx,[eax+0x1]
c0017b42:	89 15 2c 17 03 c0    	mov    DWORD PTR ds:0xc003172c,edx
c0017b48:	89 ca                	mov    edx,ecx
c0017b4a:	89 14 c5 44 17 03 c0 	mov    DWORD PTR [eax*8-0x3ffce8bc],edx
c0017b51:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0017b55:	eb b5                	jmp    c0017b0c <loadACPITables(unsigned char*)+0xbb>
c0017b57:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0017b5f:	a1 2c 17 03 c0       	mov    eax,ds:0xc003172c
c0017b64:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0017b68:	0f 8d 33 01 00 00    	jge    c0017ca1 <loadACPITables(unsigned char*)+0x250>
c0017b6e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017b72:	8b 04 c5 44 17 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce8bc]
c0017b79:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017b7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b81:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017b85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b89:	25 ff 0f 00 00       	and    eax,0xfff
c0017b8e:	89 c6                	mov    esi,eax
c0017b90:	8b 1d f0 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f1f0
c0017b96:	83 ec 0c             	sub    esp,0xc
c0017b99:	6a 01                	push   0x1
c0017b9b:	e8 df 9e ff ff       	call   c0011a7f <Virt::allocateKernelVirtualPages(int)>
c0017ba0:	83 c4 10             	add    esp,0x10
c0017ba3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017ba7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017bad:	83 ec 0c             	sub    esp,0xc
c0017bb0:	6a 01                	push   0x1
c0017bb2:	6a 01                	push   0x1
c0017bb4:	50                   	push   eax
c0017bb5:	52                   	push   edx
c0017bb6:	53                   	push   ebx
c0017bb7:	e8 f0 a9 ff ff       	call   c00125ac <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017bbc:	83 c4 20             	add    esp,0x20
c0017bbf:	09 f0                	or     eax,esi
c0017bc1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017bc5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017bc9:	c1 e0 03             	shl    eax,0x3
c0017bcc:	05 40 17 03 c0       	add    eax,0xc0031740
c0017bd1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017bd5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bd9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017bdd:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0017be5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017be9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017bed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017bf1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017bf5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017bf9:	89 c6                	mov    esi,eax
c0017bfb:	89 d7                	mov    edi,edx
c0017bfd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017bff:	89 c8                	mov    eax,ecx
c0017c01:	89 fa                	mov    edx,edi
c0017c03:	89 f3                	mov    ebx,esi
c0017c05:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017c09:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017c0d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017c11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c15:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c18:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017c1c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c20:	05 00 10 00 00       	add    eax,0x1000
c0017c25:	c1 e8 0c             	shr    eax,0xc
c0017c28:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017c2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017c34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c38:	25 ff 0f 00 00       	and    eax,0xfff
c0017c3d:	89 c6                	mov    esi,eax
c0017c3f:	8b 1d f0 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f1f0
c0017c45:	83 ec 0c             	sub    esp,0xc
c0017c48:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017c4c:	e8 2e 9e ff ff       	call   c0011a7f <Virt::allocateKernelVirtualPages(int)>
c0017c51:	83 c4 10             	add    esp,0x10
c0017c54:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017c58:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c5e:	83 ec 0c             	sub    esp,0xc
c0017c61:	6a 01                	push   0x1
c0017c63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017c67:	50                   	push   eax
c0017c68:	52                   	push   edx
c0017c69:	53                   	push   ebx
c0017c6a:	e8 3d a9 ff ff       	call   c00125ac <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c6f:	83 c4 20             	add    esp,0x20
c0017c72:	09 f0                	or     eax,esi
c0017c74:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c7c:	83 ec 0c             	sub    esp,0xc
c0017c7f:	50                   	push   eax
c0017c80:	e8 ba a2 ff ff       	call   c0011f3f <Virt::freeKernelVirtualPages(unsigned long)>
c0017c85:	83 c4 10             	add    esp,0x10
c0017c88:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017c8c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017c90:	89 14 c5 44 17 03 c0 	mov    DWORD PTR [eax*8-0x3ffce8bc],edx
c0017c97:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0017c9b:	e9 bf fe ff ff       	jmp    c0017b5f <loadACPITables(unsigned char*)+0x10e>
c0017ca0:	90                   	nop
c0017ca1:	83 c4 60             	add    esp,0x60
c0017ca4:	5b                   	pop    ebx
c0017ca5:	5e                   	pop    esi
c0017ca6:	5f                   	pop    edi
c0017ca7:	c3                   	ret    

c0017ca8 <findRSDT(unsigned char*)>:
c0017ca8:	57                   	push   edi
c0017ca9:	56                   	push   esi
c0017caa:	53                   	push   ebx
c0017cab:	83 ec 50             	sub    esp,0x50
c0017cae:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c0017cb3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017cb9:	83 e0 04             	and    eax,0x4
c0017cbc:	84 c0                	test   al,al
c0017cbe:	75 0a                	jne    c0017cca <findRSDT(unsigned char*)+0x22>
c0017cc0:	b8 00 00 00 00       	mov    eax,0x0
c0017cc5:	e9 21 01 00 00       	jmp    c0017deb <findRSDT(unsigned char*)+0x143>
c0017cca:	89 e0                	mov    eax,esp
c0017ccc:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017cd0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017cd4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017cd8:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0017ce0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017ce4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017ce8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017cec:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017cf0:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0017cf4:	89 c6                	mov    esi,eax
c0017cf6:	89 d7                	mov    edi,edx
c0017cf8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017cfa:	89 c8                	mov    eax,ecx
c0017cfc:	89 fa                	mov    edx,edi
c0017cfe:	89 f3                	mov    ebx,esi
c0017d00:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017d04:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017d08:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017d0c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017d10:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0017d14:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0017d1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017d20:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017d24:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d2c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017d30:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017d34:	25 ff 0f 00 00       	and    eax,0xfff
c0017d39:	89 c6                	mov    esi,eax
c0017d3b:	8b 1d f0 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f1f0
c0017d41:	83 ec 0c             	sub    esp,0xc
c0017d44:	6a 02                	push   0x2
c0017d46:	e8 34 9d ff ff       	call   c0011a7f <Virt::allocateKernelVirtualPages(int)>
c0017d4b:	83 c4 10             	add    esp,0x10
c0017d4e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017d52:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017d58:	83 ec 0c             	sub    esp,0xc
c0017d5b:	6a 01                	push   0x1
c0017d5d:	6a 02                	push   0x2
c0017d5f:	50                   	push   eax
c0017d60:	52                   	push   edx
c0017d61:	53                   	push   ebx
c0017d62:	e8 45 a8 ff ff       	call   c00125ac <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d67:	83 c4 20             	add    esp,0x20
c0017d6a:	09 f0                	or     eax,esi
c0017d6c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017d70:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017d74:	25 ff 0f 00 00       	and    eax,0xfff
c0017d79:	89 c6                	mov    esi,eax
c0017d7b:	8b 1d f0 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f1f0
c0017d81:	83 ec 0c             	sub    esp,0xc
c0017d84:	6a 02                	push   0x2
c0017d86:	e8 f4 9c ff ff       	call   c0011a7f <Virt::allocateKernelVirtualPages(int)>
c0017d8b:	83 c4 10             	add    esp,0x10
c0017d8e:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017d92:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017d98:	83 ec 0c             	sub    esp,0xc
c0017d9b:	6a 01                	push   0x1
c0017d9d:	6a 02                	push   0x2
c0017d9f:	50                   	push   eax
c0017da0:	52                   	push   edx
c0017da1:	53                   	push   ebx
c0017da2:	e8 05 a8 ff ff       	call   c00125ac <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017da7:	83 c4 20             	add    esp,0x20
c0017daa:	09 f0                	or     eax,esi
c0017dac:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017db0:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0017db5:	75 11                	jne    c0017dc8 <findRSDT(unsigned char*)+0x120>
c0017db7:	c6 05 40 19 03 c0 00 	mov    BYTE PTR ds:0xc0031940,0x0
c0017dbe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017dc2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017dc6:	eb 1f                	jmp    c0017de7 <findRSDT(unsigned char*)+0x13f>
c0017dc8:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0017dcd:	75 11                	jne    c0017de0 <findRSDT(unsigned char*)+0x138>
c0017dcf:	c6 05 40 19 03 c0 01 	mov    BYTE PTR ds:0xc0031940,0x1
c0017dd6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017dda:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017dde:	eb 07                	jmp    c0017de7 <findRSDT(unsigned char*)+0x13f>
c0017de0:	b8 00 00 00 00       	mov    eax,0x0
c0017de5:	eb 04                	jmp    c0017deb <findRSDT(unsigned char*)+0x143>
c0017de7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017deb:	83 c4 50             	add    esp,0x50
c0017dee:	5b                   	pop    ebx
c0017def:	5e                   	pop    esi
c0017df0:	5f                   	pop    edi
c0017df1:	c3                   	ret    

c0017df2 <findDataTable(unsigned char*, char*)>:
c0017df2:	83 ec 1c             	sub    esp,0x1c
c0017df5:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c0017dfa:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e00:	83 e0 04             	and    eax,0x4
c0017e03:	84 c0                	test   al,al
c0017e05:	75 07                	jne    c0017e0e <findDataTable(unsigned char*, char*)+0x1c>
c0017e07:	b8 00 00 00 00       	mov    eax,0x0
c0017e0c:	eb 7c                	jmp    c0017e8a <findDataTable(unsigned char*, char*)+0x98>
c0017e0e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017e16:	a1 2c 17 03 c0       	mov    eax,ds:0xc003172c
c0017e1b:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017e1f:	7d 3a                	jge    c0017e5b <findDataTable(unsigned char*, char*)+0x69>
c0017e21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e25:	c1 e0 03             	shl    eax,0x3
c0017e28:	05 40 17 03 c0       	add    eax,0xc0031740
c0017e2d:	83 ec 04             	sub    esp,0x4
c0017e30:	6a 04                	push   0x4
c0017e32:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e36:	50                   	push   eax
c0017e37:	e8 2c 88 fe ff       	call   c0000668 <memcmp>
c0017e3c:	83 c4 10             	add    esp,0x10
c0017e3f:	85 c0                	test   eax,eax
c0017e41:	0f 94 c0             	sete   al
c0017e44:	84 c0                	test   al,al
c0017e46:	74 0d                	je     c0017e55 <findDataTable(unsigned char*, char*)+0x63>
c0017e48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e4c:	8b 04 c5 44 17 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce8bc]
c0017e53:	eb 35                	jmp    c0017e8a <findDataTable(unsigned char*, char*)+0x98>
c0017e55:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017e59:	eb bb                	jmp    c0017e16 <findDataTable(unsigned char*, char*)+0x24>
c0017e5b:	a0 40 19 03 c0       	mov    al,ds:0xc0031940
c0017e60:	84 c0                	test   al,al
c0017e62:	74 07                	je     c0017e6b <findDataTable(unsigned char*, char*)+0x79>
c0017e64:	b8 58 00 00 00       	mov    eax,0x58
c0017e69:	eb 05                	jmp    c0017e70 <findDataTable(unsigned char*, char*)+0x7e>
c0017e6b:	b8 52 00 00 00       	mov    eax,0x52
c0017e70:	83 ec 04             	sub    esp,0x4
c0017e73:	50                   	push   eax
c0017e74:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e78:	68 04 c1 02 c0       	push   0xc002c104
c0017e7d:	e8 03 b0 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0017e82:	83 c4 10             	add    esp,0x10
c0017e85:	b8 00 00 00 00       	mov    eax,0x0
c0017e8a:	83 c4 1c             	add    esp,0x1c
c0017e8d:	c3                   	ret    

c0017e8e <scanMADT()>:
c0017e8e:	53                   	push   ebx
c0017e8f:	83 ec 38             	sub    esp,0x38
c0017e92:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c0017e97:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e9d:	83 e0 04             	and    eax,0x4
c0017ea0:	84 c0                	test   al,al
c0017ea2:	0f 84 63 04 00 00    	je     c001830b <scanMADT()+0x47d>
c0017ea8:	e8 0a fb ff ff       	call   c00179b7 <findRSDP()>
c0017ead:	a3 4c 19 03 c0       	mov    ds:0xc003194c,eax
c0017eb2:	a1 4c 19 03 c0       	mov    eax,ds:0xc003194c
c0017eb7:	85 c0                	test   eax,eax
c0017eb9:	75 19                	jne    c0017ed4 <scanMADT()+0x46>
c0017ebb:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c0017ec0:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017ec6:	83 e2 fb             	and    edx,0xfffffffb
c0017ec9:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017ecf:	e9 3b 04 00 00       	jmp    c001830f <scanMADT()+0x481>
c0017ed4:	a1 4c 19 03 c0       	mov    eax,ds:0xc003194c
c0017ed9:	83 ec 0c             	sub    esp,0xc
c0017edc:	50                   	push   eax
c0017edd:	e8 c6 fd ff ff       	call   c0017ca8 <findRSDT(unsigned char*)>
c0017ee2:	83 c4 10             	add    esp,0x10
c0017ee5:	a3 48 19 03 c0       	mov    ds:0xc0031948,eax
c0017eea:	a1 48 19 03 c0       	mov    eax,ds:0xc0031948
c0017eef:	85 c0                	test   eax,eax
c0017ef1:	75 19                	jne    c0017f0c <scanMADT()+0x7e>
c0017ef3:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c0017ef8:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017efe:	83 e2 fb             	and    edx,0xfffffffb
c0017f01:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017f07:	e9 03 04 00 00       	jmp    c001830f <scanMADT()+0x481>
c0017f0c:	a1 48 19 03 c0       	mov    eax,ds:0xc0031948
c0017f11:	83 ec 0c             	sub    esp,0xc
c0017f14:	50                   	push   eax
c0017f15:	e8 37 fb ff ff       	call   c0017a51 <loadACPITables(unsigned char*)>
c0017f1a:	83 c4 10             	add    esp,0x10
c0017f1d:	a1 48 19 03 c0       	mov    eax,ds:0xc0031948
c0017f22:	83 ec 08             	sub    esp,0x8
c0017f25:	68 90 bf 02 c0       	push   0xc002bf90
c0017f2a:	50                   	push   eax
c0017f2b:	e8 c2 fe ff ff       	call   c0017df2 <findDataTable(unsigned char*, char*)>
c0017f30:	83 c4 10             	add    esp,0x10
c0017f33:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017f37:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017f3c:	75 19                	jne    c0017f57 <scanMADT()+0xc9>
c0017f3e:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c0017f43:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017f49:	83 e2 fe             	and    edx,0xfffffffe
c0017f4c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017f52:	e9 b8 03 00 00       	jmp    c001830f <scanMADT()+0x481>
c0017f57:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017f5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f63:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017f66:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017f6a:	0f 87 9f 03 00 00    	ja     c001830f <scanMADT()+0x481>
c0017f70:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017f78:	0f 87 91 03 00 00    	ja     c001830f <scanMADT()+0x481>
c0017f7e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f82:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017f86:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f8a:	8d 50 01             	lea    edx,[eax+0x1]
c0017f8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f91:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f95:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f99:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017f9d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fa1:	8d 50 01             	lea    edx,[eax+0x1]
c0017fa4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fa8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fac:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017fb0:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017fb4:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017fb9:	0f 86 4f 03 00 00    	jbe    c001830e <scanMADT()+0x480>
c0017fbf:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017fc4:	75 57                	jne    c001801d <scanMADT()+0x18f>
c0017fc6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fca:	8d 50 01             	lea    edx,[eax+0x1]
c0017fcd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fd1:	8a 15 40 1b 03 c0    	mov    dl,BYTE PTR ds:0xc0031b40
c0017fd7:	0f b6 d2             	movzx  edx,dl
c0017fda:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017fde:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017fe2:	88 82 80 1b 03 c0    	mov    BYTE PTR [edx-0x3ffce480],al
c0017fe8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fec:	8d 50 01             	lea    edx,[eax+0x1]
c0017fef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ff3:	8a 15 40 1b 03 c0    	mov    dl,BYTE PTR ds:0xc0031b40
c0017ff9:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017ffc:	88 0d 40 1b 03 c0    	mov    BYTE PTR ds:0xc0031b40,cl
c0018002:	0f b6 d2             	movzx  edx,dl
c0018005:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0018009:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001800d:	88 82 60 1b 03 c0    	mov    BYTE PTR [edx-0x3ffce4a0],al
c0018013:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018018:	e9 da 02 00 00       	jmp    c00182f7 <scanMADT()+0x469>
c001801d:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0018022:	0f 85 14 01 00 00    	jne    c001813c <scanMADT()+0x2ae>
c0018028:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001802c:	8d 50 01             	lea    edx,[eax+0x1]
c001802f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018033:	8a 15 00 1a 03 c0    	mov    dl,BYTE PTR ds:0xc0031a00
c0018039:	0f b6 d2             	movzx  edx,dl
c001803c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0018040:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0018044:	88 82 20 1a 03 c0    	mov    BYTE PTR [edx-0x3ffce5e0],al
c001804a:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c001804e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018052:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018056:	01 d0                	add    eax,edx
c0018058:	83 c0 2c             	add    eax,0x2c
c001805b:	8a 00                	mov    al,BYTE PTR [eax]
c001805d:	0f b6 d0             	movzx  edx,al
c0018060:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018064:	8d 48 01             	lea    ecx,[eax+0x1]
c0018067:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001806b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001806f:	0f b6 c0             	movzx  eax,al
c0018072:	c1 e0 08             	shl    eax,0x8
c0018075:	89 d1                	mov    ecx,edx
c0018077:	09 c1                	or     ecx,eax
c0018079:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001807d:	8d 50 02             	lea    edx,[eax+0x2]
c0018080:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018084:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018088:	0f b6 c0             	movzx  eax,al
c001808b:	c1 e0 10             	shl    eax,0x10
c001808e:	09 c1                	or     ecx,eax
c0018090:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018094:	8d 50 03             	lea    edx,[eax+0x3]
c0018097:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001809b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001809f:	0f b6 c0             	movzx  eax,al
c00180a2:	c1 e0 18             	shl    eax,0x18
c00180a5:	09 c1                	or     ecx,eax
c00180a7:	89 ca                	mov    edx,ecx
c00180a9:	a0 00 1a 03 c0       	mov    al,ds:0xc0031a00
c00180ae:	0f b6 c0             	movzx  eax,al
c00180b1:	89 14 85 40 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5c0],edx
c00180b8:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00180bd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180c1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180c5:	01 d0                	add    eax,edx
c00180c7:	83 c0 2c             	add    eax,0x2c
c00180ca:	8a 00                	mov    al,BYTE PTR [eax]
c00180cc:	0f b6 d0             	movzx  edx,al
c00180cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180d3:	8d 48 01             	lea    ecx,[eax+0x1]
c00180d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180da:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00180de:	0f b6 c0             	movzx  eax,al
c00180e1:	c1 e0 08             	shl    eax,0x8
c00180e4:	89 d1                	mov    ecx,edx
c00180e6:	09 c1                	or     ecx,eax
c00180e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180ec:	8d 50 02             	lea    edx,[eax+0x2]
c00180ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180f3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180f7:	0f b6 c0             	movzx  eax,al
c00180fa:	c1 e0 10             	shl    eax,0x10
c00180fd:	09 c1                	or     ecx,eax
c00180ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018103:	8d 50 03             	lea    edx,[eax+0x3]
c0018106:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001810a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001810e:	0f b6 c0             	movzx  eax,al
c0018111:	c1 e0 18             	shl    eax,0x18
c0018114:	09 c1                	or     ecx,eax
c0018116:	89 ca                	mov    edx,ecx
c0018118:	a0 00 1a 03 c0       	mov    al,ds:0xc0031a00
c001811d:	0f b6 c0             	movzx  eax,al
c0018120:	89 14 85 c0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce540],edx
c0018127:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001812c:	a0 00 1a 03 c0       	mov    al,ds:0xc0031a00
c0018131:	40                   	inc    eax
c0018132:	a2 00 1a 03 c0       	mov    ds:0xc0031a00,al
c0018137:	e9 bb 01 00 00       	jmp    c00182f7 <scanMADT()+0x469>
c001813c:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0018141:	0f 85 e9 00 00 00    	jne    c0018230 <scanMADT()+0x3a2>
c0018147:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001814b:	8d 50 01             	lea    edx,[eax+0x1]
c001814e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018152:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018156:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001815a:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001815e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018162:	8d 50 01             	lea    edx,[eax+0x1]
c0018165:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018169:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001816d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018171:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018175:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018179:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001817d:	01 d0                	add    eax,edx
c001817f:	83 c0 2c             	add    eax,0x2c
c0018182:	8a 00                	mov    al,BYTE PTR [eax]
c0018184:	0f b6 d0             	movzx  edx,al
c0018187:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001818b:	8d 48 01             	lea    ecx,[eax+0x1]
c001818e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018192:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018196:	0f b6 c0             	movzx  eax,al
c0018199:	c1 e0 08             	shl    eax,0x8
c001819c:	89 d1                	mov    ecx,edx
c001819e:	09 c1                	or     ecx,eax
c00181a0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181a4:	8d 50 02             	lea    edx,[eax+0x2]
c00181a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181ab:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00181af:	0f b6 c0             	movzx  eax,al
c00181b2:	c1 e0 10             	shl    eax,0x10
c00181b5:	09 c1                	or     ecx,eax
c00181b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181bb:	8d 50 03             	lea    edx,[eax+0x3]
c00181be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181c2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00181c6:	0f b6 c0             	movzx  eax,al
c00181c9:	c1 e0 18             	shl    eax,0x18
c00181cc:	09 c8                	or     eax,ecx
c00181ce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00181d2:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00181d7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181df:	01 d0                	add    eax,edx
c00181e1:	83 c0 2c             	add    eax,0x2c
c00181e4:	8a 00                	mov    al,BYTE PTR [eax]
c00181e6:	0f b6 c0             	movzx  eax,al
c00181e9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00181ed:	8d 4a 01             	lea    ecx,[edx+0x1]
c00181f0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181f4:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00181f8:	0f b6 d2             	movzx  edx,dl
c00181fb:	c1 e2 08             	shl    edx,0x8
c00181fe:	09 d0                	or     eax,edx
c0018200:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0018205:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001820a:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001820f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018213:	88 90 c0 e2 02 c0    	mov    BYTE PTR [eax-0x3ffd1d40],dl
c0018219:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001821e:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0018223:	66 89 84 12 e0 19 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffce620],ax
c001822b:	e9 c7 00 00 00       	jmp    c00182f7 <scanMADT()+0x469>
c0018230:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0018235:	0f 85 b0 00 00 00    	jne    c00182eb <scanMADT()+0x45d>
c001823b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001823f:	8d 50 01             	lea    edx,[eax+0x1]
c0018242:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018246:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001824a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001824e:	0f b6 c0             	movzx  eax,al
c0018251:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018255:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018259:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001825d:	01 d0                	add    eax,edx
c001825f:	83 c0 2c             	add    eax,0x2c
c0018262:	8a 00                	mov    al,BYTE PTR [eax]
c0018264:	0f b6 d0             	movzx  edx,al
c0018267:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001826b:	8d 48 01             	lea    ecx,[eax+0x1]
c001826e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018272:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018276:	0f b6 c0             	movzx  eax,al
c0018279:	c1 e0 08             	shl    eax,0x8
c001827c:	09 d0                	or     eax,edx
c001827e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018282:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018287:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001828b:	8d 50 01             	lea    edx,[eax+0x1]
c001828e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018292:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018296:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001829a:	0f b6 c0             	movzx  eax,al
c001829d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00182a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182a5:	c1 e0 08             	shl    eax,0x8
c00182a8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00182ac:	89 c1                	mov    ecx,eax
c00182ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00182b2:	c1 e0 18             	shl    eax,0x18
c00182b5:	89 c3                	mov    ebx,eax
c00182b7:	a1 50 19 03 c0       	mov    eax,ds:0xc0031950
c00182bc:	8d 50 01             	lea    edx,[eax+0x1]
c00182bf:	89 15 50 19 03 c0    	mov    DWORD PTR ds:0xc0031950,edx
c00182c5:	09 d9                	or     ecx,ebx
c00182c7:	89 ca                	mov    edx,ecx
c00182c9:	89 14 85 60 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce6a0],edx
c00182d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00182d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00182d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00182dc:	68 34 c1 02 c0       	push   0xc002c134
c00182e1:	e8 9f ab ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00182e6:	83 c4 10             	add    esp,0x10
c00182e9:	eb 0c                	jmp    c00182f7 <scanMADT()+0x469>
c00182eb:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00182f0:	75 05                	jne    c00182f7 <scanMADT()+0x469>
c00182f2:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00182f7:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00182fc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018300:	01 d0                	add    eax,edx
c0018302:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018306:	e9 54 fc ff ff       	jmp    c0017f5f <scanMADT()+0xd1>
c001830b:	90                   	nop
c001830c:	eb 01                	jmp    c001830f <scanMADT()+0x481>
c001830e:	90                   	nop
c001830f:	83 c4 38             	add    esp,0x38
c0018312:	5b                   	pop    ebx
c0018313:	c3                   	ret    

c0018314 <ACPI::ACPI()>:
c0018314:	83 ec 0c             	sub    esp,0xc
c0018317:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001831b:	83 ec 08             	sub    esp,0x8
c001831e:	68 95 bf 02 c0       	push   0xc002bf95
c0018323:	50                   	push   eax
c0018324:	e8 6d c1 ff ff       	call   c0014496 <Device::Device(char const*)>
c0018329:	83 c4 10             	add    esp,0x10
c001832c:	ba d0 c1 02 c0       	mov    edx,0xc002c1d0
c0018331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018335:	89 10                	mov    DWORD PTR [eax],edx
c0018337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001833b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018346:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0018350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018354:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001835e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018362:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018369:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001836d:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018374:	e8 15 fb ff ff       	call   c0017e8e <scanMADT()>
c0018379:	90                   	nop
c001837a:	83 c4 0c             	add    esp,0xc
c001837d:	c3                   	ret    

c001837e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001837e:	83 ec 2c             	sub    esp,0x2c
c0018381:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0018385:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018389:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001838d:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018391:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018396:	88 d0                	mov    al,dl
c0018398:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001839c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00183a1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00183a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183ad:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183b3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00183b7:	0f 8d 97 00 00 00    	jge    c0018454 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00183bd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183c1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183c5:	83 c2 2a             	add    edx,0x2a
c00183c8:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00183cc:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00183d1:	75 78                	jne    c001844b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00183d3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183d7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183db:	83 c2 2a             	add    edx,0x2a
c00183de:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00183e2:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00183e6:	75 63                	jne    c001844b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00183e8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00183ed:	74 3a                	je     c0018429 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00183ef:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183f7:	83 c2 2a             	add    edx,0x2a
c00183fa:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00183fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018402:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018405:	39 c2                	cmp    edx,eax
c0018407:	74 10                	je     c0018419 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0018409:	83 ec 0c             	sub    esp,0xc
c001840c:	68 70 c1 02 c0       	push   0xc002c170
c0018411:	e8 57 24 00 00       	call   c001a86d <Krnl::panic(char const*)>
c0018416:	83 c4 10             	add    esp,0x10
c0018419:	83 ec 0c             	sub    esp,0xc
c001841c:	68 9a bf 02 c0       	push   0xc002bf9a
c0018421:	e8 47 24 00 00       	call   c001a86d <Krnl::panic(char const*)>
c0018426:	83 c4 10             	add    esp,0x10
c0018429:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001842d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018431:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018435:	83 c2 2a             	add    edx,0x2a
c0018438:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001843c:	8b 02                	mov    eax,DWORD PTR [edx]
c001843e:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0018441:	89 01                	mov    DWORD PTR [ecx],eax
c0018443:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018446:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001844b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001844f:	e9 55 ff ff ff       	jmp    c00183a9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0018454:	90                   	nop
c0018455:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018459:	83 c4 2c             	add    esp,0x2c
c001845c:	c2 04 00             	ret    0x4
c001845f:	90                   	nop

c0018460 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0018460:	83 ec 1c             	sub    esp,0x1c
c0018463:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018467:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001846b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001846f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018474:	88 c8                	mov    al,cl
c0018476:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001847a:	88 d0                	mov    al,dl
c001847c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018480:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018484:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001848a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001848e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018491:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0018495:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0018499:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001849d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00184a3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00184a7:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00184aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00184ae:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00184b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184b7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00184bd:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00184c1:	8d 48 01             	lea    ecx,[eax+0x1]
c00184c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184c8:	83 c2 2a             	add    edx,0x2a
c00184cb:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00184cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184d3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00184d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184dd:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00184e0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00184e4:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00184e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184ec:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00184f2:	8d 50 01             	lea    edx,[eax+0x1]
c00184f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184f9:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00184ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018503:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018509:	3d 00 02 00 00       	cmp    eax,0x200
c001850e:	75 10                	jne    c0018520 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0018510:	83 ec 0c             	sub    esp,0xc
c0018513:	68 a9 bf 02 c0       	push   0xc002bfa9
c0018518:	e8 50 23 00 00       	call   c001a86d <Krnl::panic(char const*)>
c001851d:	83 c4 10             	add    esp,0x10
c0018520:	90                   	nop
c0018521:	83 c4 1c             	add    esp,0x1c
c0018524:	c3                   	ret    
c0018525:	90                   	nop

c0018526 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0018526:	b8 00 00 00 00       	mov    eax,0x0
c001852b:	c3                   	ret    

c001852c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001852c:	83 ec 1c             	sub    esp,0x1c
c001852f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018533:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018536:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001853a:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c001853f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018544:	83 ec 08             	sub    esp,0x8
c0018547:	52                   	push   edx
c0018548:	50                   	push   eax
c0018549:	e8 a2 69 ff ff       	call   c000eef0 <Computer::readCMOS(unsigned char)>
c001854e:	83 c4 10             	add    esp,0x10
c0018551:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018555:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c001855a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001855f:	83 ec 04             	sub    esp,0x4
c0018562:	6a 01                	push   0x1
c0018564:	52                   	push   edx
c0018565:	50                   	push   eax
c0018566:	e8 9b 6a ff ff       	call   c000f006 <Computer::writeCMOS(unsigned char, unsigned char)>
c001856b:	83 c4 10             	add    esp,0x10
c001856e:	90                   	nop
c001856f:	83 c4 1c             	add    esp,0x1c
c0018572:	c3                   	ret    
c0018573:	90                   	nop

c0018574 <ACPI::sleep()>:
c0018574:	83 ec 0c             	sub    esp,0xc
c0018577:	a1 20 17 03 c0       	mov    eax,ds:0xc0031720
c001857c:	85 c0                	test   eax,eax
c001857e:	74 07                	je     c0018587 <ACPI::sleep()+0x13>
c0018580:	a1 20 17 03 c0       	mov    eax,ds:0xc0031720
c0018585:	ff d0                	call   eax
c0018587:	90                   	nop
c0018588:	83 c4 0c             	add    esp,0xc
c001858b:	c3                   	ret    

c001858c <ACPI::open(int, int, void*)>:
c001858c:	57                   	push   edi
c001858d:	56                   	push   esi
c001858e:	53                   	push   ebx
c001858f:	83 ec 60             	sub    esp,0x60
c0018592:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018596:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c001859d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00185a1:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00185a8:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c00185ad:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00185b3:	83 e0 04             	and    eax,0x4
c00185b6:	84 c0                	test   al,al
c00185b8:	74 47                	je     c0018601 <ACPI::open(int, int, void*)+0x75>
c00185ba:	a1 48 19 03 c0       	mov    eax,ds:0xc0031948
c00185bf:	83 ec 08             	sub    esp,0x8
c00185c2:	68 c6 bf 02 c0       	push   0xc002bfc6
c00185c7:	50                   	push   eax
c00185c8:	e8 25 f8 ff ff       	call   c0017df2 <findDataTable(unsigned char*, char*)>
c00185cd:	83 c4 10             	add    esp,0x10
c00185d0:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c00185d4:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
c00185d9:	74 26                	je     c0018601 <ACPI::open(int, int, void*)+0x75>
c00185db:	83 ec 0c             	sub    esp,0xc
c00185de:	68 cb bf 02 c0       	push   0xc002bfcb
c00185e3:	e8 9d a8 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00185e8:	83 c4 10             	add    esp,0x10
c00185eb:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00185ef:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185f6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00185fa:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018601:	c7 44 24 58 5f 0c 00 00 	mov    DWORD PTR [esp+0x58],0xc5f
c0018609:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001860d:	8a 00                	mov    al,BYTE PTR [eax]
c001860f:	3c 01                	cmp    al,0x1
c0018611:	75 28                	jne    c001863b <ACPI::open(int, int, void*)+0xaf>
c0018613:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018617:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001861e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018622:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018629:	83 ec 0c             	sub    esp,0xc
c001862c:	68 dc bf 02 c0       	push   0xc002bfdc
c0018631:	e8 4f a8 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0018636:	83 c4 10             	add    esp,0x10
c0018639:	eb 25                	jmp    c0018660 <ACPI::open(int, int, void*)+0xd4>
c001863b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001863f:	8a 00                	mov    al,BYTE PTR [eax]
c0018641:	3c 02                	cmp    al,0x2
c0018643:	75 1b                	jne    c0018660 <ACPI::open(int, int, void*)+0xd4>
c0018645:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018649:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018650:	83 ec 0c             	sub    esp,0xc
c0018653:	68 e4 bf 02 c0       	push   0xc002bfe4
c0018658:	e8 28 a8 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001865d:	83 c4 10             	add    esp,0x10
c0018660:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018664:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001866a:	83 f0 01             	xor    eax,0x1
c001866d:	84 c0                	test   al,al
c001866f:	74 6a                	je     c00186db <ACPI::open(int, int, void*)+0x14f>
c0018671:	83 ec 0c             	sub    esp,0xc
c0018674:	68 ec bf 02 c0       	push   0xc002bfec
c0018679:	e8 07 a8 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001867e:	83 c4 10             	add    esp,0x10
c0018681:	e8 ca 7a fe ff       	call   c0000150 <manualPCIProbe>
c0018686:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001868a:	83 7c 24 54 01       	cmp    DWORD PTR [esp+0x54],0x1
c001868f:	75 28                	jne    c00186b9 <ACPI::open(int, int, void*)+0x12d>
c0018691:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018695:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001869c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186a0:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00186a7:	83 ec 0c             	sub    esp,0xc
c00186aa:	68 fa bf 02 c0       	push   0xc002bffa
c00186af:	e8 d1 a7 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00186b4:	83 c4 10             	add    esp,0x10
c00186b7:	eb 22                	jmp    c00186db <ACPI::open(int, int, void*)+0x14f>
c00186b9:	83 7c 24 54 02       	cmp    DWORD PTR [esp+0x54],0x2
c00186be:	75 1b                	jne    c00186db <ACPI::open(int, int, void*)+0x14f>
c00186c0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186c4:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00186cb:	83 ec 0c             	sub    esp,0xc
c00186ce:	68 04 c0 02 c0       	push   0xc002c004
c00186d3:	e8 ad a7 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00186d8:	83 c4 10             	add    esp,0x10
c00186db:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186df:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00186e5:	84 c0                	test   al,al
c00186e7:	74 13                	je     c00186fc <ACPI::open(int, int, void*)+0x170>
c00186e9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186ed:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c00186f3:	83 f0 01             	xor    eax,0x1
c00186f6:	0f b6 c0             	movzx  eax,al
c00186f9:	40                   	inc    eax
c00186fa:	eb 05                	jmp    c0018701 <ACPI::open(int, int, void*)+0x175>
c00186fc:	b8 00 00 00 00       	mov    eax,0x0
c0018701:	83 ec 08             	sub    esp,0x8
c0018704:	50                   	push   eax
c0018705:	68 0e c0 02 c0       	push   0xc002c00e
c001870a:	e8 76 a7 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001870f:	83 c4 10             	add    esp,0x10
c0018712:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018716:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001871c:	84 c0                	test   al,al
c001871e:	74 67                	je     c0018787 <ACPI::open(int, int, void*)+0x1fb>
c0018720:	c7 44 24 38 58 01 00 00 	mov    DWORD PTR [esp+0x38],0x158
c0018728:	83 ec 0c             	sub    esp,0xc
c001872b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001872f:	e8 a6 71 ff ff       	call   c000f8da <malloc>
c0018734:	83 c4 10             	add    esp,0x10
c0018737:	89 c3                	mov    ebx,eax
c0018739:	83 ec 0c             	sub    esp,0xc
c001873c:	53                   	push   ebx
c001873d:	e8 88 aa 00 00       	call   c00231ca <PCI::PCI()>
c0018742:	83 c4 10             	add    esp,0x10
c0018745:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
c0018749:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001874d:	83 ec 08             	sub    esp,0x8
c0018750:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0018754:	50                   	push   eax
c0018755:	e8 4c bb ff ff       	call   c00142a6 <Device::addChild(Device*)>
c001875a:	83 c4 10             	add    esp,0x10
c001875d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0018761:	8b 00                	mov    eax,DWORD PTR [eax]
c0018763:	83 c0 08             	add    eax,0x8
c0018766:	8b 00                	mov    eax,DWORD PTR [eax]
c0018768:	6a 00                	push   0x0
c001876a:	6a 00                	push   0x0
c001876c:	6a 00                	push   0x0
c001876e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018772:	ff d0                	call   eax
c0018774:	83 c4 10             	add    esp,0x10
c0018777:	83 ec 0c             	sub    esp,0xc
c001877a:	68 17 c0 02 c0       	push   0xc002c017
c001877f:	e8 01 a7 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0018784:	83 c4 10             	add    esp,0x10
c0018787:	83 ec 0c             	sub    esp,0xc
c001878a:	68 22 c0 02 c0       	push   0xc002c022
c001878f:	e8 36 4a 00 00       	call   c001d1ca <Thr::loadKernelSymbolTable(char const*)>
c0018794:	83 c4 10             	add    esp,0x10
c0018797:	83 ec 0c             	sub    esp,0xc
c001879a:	6a 0c                	push   0xc
c001879c:	e8 1d 95 ff ff       	call   c0011cbe <Virt::setupPageSwapping(int)>
c00187a1:	83 c4 10             	add    esp,0x10
c00187a4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00187a8:	83 ec 08             	sub    esp,0x8
c00187ab:	6a 12                	push   0x12
c00187ad:	50                   	push   eax
c00187ae:	e8 63 be ff ff       	call   c0014616 <getDevicesOfType(DeviceType)>
c00187b3:	83 c4 0c             	add    esp,0xc
c00187b6:	83 ec 0c             	sub    esp,0xc
c00187b9:	8d 44 24 34          	lea    eax,[esp+0x34]
c00187bd:	50                   	push   eax
c00187be:	e8 2d 0e 01 00       	call   c00295f0 <LinkedList<Device>::isEmpty()>
c00187c3:	83 c4 10             	add    esp,0x10
c00187c6:	83 f0 01             	xor    eax,0x1
c00187c9:	84 c0                	test   al,al
c00187cb:	0f 84 fd 00 00 00    	je     c00188ce <ACPI::open(int, int, void*)+0x342>
c00187d1:	83 ec 0c             	sub    esp,0xc
c00187d4:	8d 44 24 34          	lea    eax,[esp+0x34]
c00187d8:	50                   	push   eax
c00187d9:	e8 2e 0e 01 00       	call   c002960c <LinkedList<Device>::getFirstElement()>
c00187de:	83 c4 10             	add    esp,0x10
c00187e1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00187e5:	83 ec 0c             	sub    esp,0xc
c00187e8:	8d 44 24 34          	lea    eax,[esp+0x34]
c00187ec:	50                   	push   eax
c00187ed:	e8 22 0e 01 00       	call   c0029614 <LinkedList<Device>::removeFirst()>
c00187f2:	83 c4 10             	add    esp,0x10
c00187f5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00187f9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00187fd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018801:	83 ec 0c             	sub    esp,0xc
c0018804:	50                   	push   eax
c0018805:	e8 88 bd ff ff       	call   c0014592 <Device::getName()>
c001880a:	83 c4 10             	add    esp,0x10
c001880d:	83 ec 08             	sub    esp,0x8
c0018810:	50                   	push   eax
c0018811:	68 a0 c1 02 c0       	push   0xc002c1a0
c0018816:	e8 6a a6 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001881b:	83 c4 10             	add    esp,0x10
c001881e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0018822:	8d 44 24 04          	lea    eax,[esp+0x4]
c0018826:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c001882c:	ba 09 00 00 00       	mov    edx,0x9
c0018831:	fc                   	cld    
c0018832:	89 c7                	mov    edi,eax
c0018834:	89 de                	mov    esi,ebx
c0018836:	89 d1                	mov    ecx,edx
c0018838:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001883a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001883e:	0f b6 c0             	movzx  eax,al
c0018841:	83 ec 08             	sub    esp,0x8
c0018844:	50                   	push   eax
c0018845:	68 40 c0 02 c0       	push   0xc002c040
c001884a:	e8 36 a6 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001884f:	83 c4 10             	add    esp,0x10
c0018852:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018856:	0f b6 c0             	movzx  eax,al
c0018859:	83 ec 08             	sub    esp,0x8
c001885c:	50                   	push   eax
c001885d:	68 52 c0 02 c0       	push   0xc002c052
c0018862:	e8 1e a6 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0018867:	83 c4 10             	add    esp,0x10
c001886a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c001886f:	0f b7 c0             	movzx  eax,ax
c0018872:	83 ec 08             	sub    esp,0x8
c0018875:	50                   	push   eax
c0018876:	68 64 c0 02 c0       	push   0xc002c064
c001887b:	e8 05 a6 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0018880:	83 c4 10             	add    esp,0x10
c0018883:	83 ec 0c             	sub    esp,0xc
c0018886:	83 ec 24             	sub    esp,0x24
c0018889:	89 e0                	mov    eax,esp
c001888b:	89 c3                	mov    ebx,eax
c001888d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018891:	ba 09 00 00 00       	mov    edx,0x9
c0018896:	89 df                	mov    edi,ebx
c0018898:	89 c6                	mov    esi,eax
c001889a:	89 d1                	mov    ecx,edx
c001889c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001889e:	e8 89 ac 00 00       	call   c002352c <PCI::pciDetailsToFilepath(PCIDeviceInfo)>
c00188a3:	83 c4 30             	add    esp,0x30
c00188a6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00188aa:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00188af:	0f 84 01 ff ff ff    	je     c00187b6 <ACPI::open(int, int, void*)+0x22a>
c00188b5:	83 ec 08             	sub    esp,0x8
c00188b8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00188bc:	68 76 c0 02 c0       	push   0xc002c076
c00188c1:	e8 bf a5 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00188c6:	83 c4 10             	add    esp,0x10
c00188c9:	e9 e8 fe ff ff       	jmp    c00187b6 <ACPI::open(int, int, void*)+0x22a>
c00188ce:	83 ec 0c             	sub    esp,0xc
c00188d1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00188d5:	50                   	push   eax
c00188d6:	e8 13 0d 01 00       	call   c00295ee <LinkedList<Device>::~LinkedList()>
c00188db:	83 c4 10             	add    esp,0x10
c00188de:	8b 1d 68 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f068
c00188e4:	83 ec 08             	sub    esp,0x8
c00188e7:	6a 01                	push   0x1
c00188e9:	68 82 c0 02 c0       	push   0xc002c082
c00188ee:	e8 4e 53 00 00       	call   c001dc41 <Thr::loadDLL(char const*, bool)>
c00188f3:	83 c4 10             	add    esp,0x10
c00188f6:	83 ec 08             	sub    esp,0x8
c00188f9:	53                   	push   ebx
c00188fa:	50                   	push   eax
c00188fb:	e8 6c 55 00 00       	call   c001de6c <Thr::executeDLL(unsigned long, void*)>
c0018900:	83 c4 10             	add    esp,0x10
c0018903:	8b 1d 68 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f068
c0018909:	83 ec 08             	sub    esp,0x8
c001890c:	6a 01                	push   0x1
c001890e:	68 9f c0 02 c0       	push   0xc002c09f
c0018913:	e8 29 53 00 00       	call   c001dc41 <Thr::loadDLL(char const*, bool)>
c0018918:	83 c4 10             	add    esp,0x10
c001891b:	83 ec 08             	sub    esp,0x8
c001891e:	53                   	push   ebx
c001891f:	50                   	push   eax
c0018920:	e8 47 55 00 00       	call   c001de6c <Thr::executeDLL(unsigned long, void*)>
c0018925:	83 c4 10             	add    esp,0x10
c0018928:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c001892d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018933:	83 e0 04             	and    eax,0x4
c0018936:	84 c0                	test   al,al
c0018938:	0f 84 d3 00 00 00    	je     c0018a11 <ACPI::open(int, int, void*)+0x485>
c001893e:	c7 44 24 34 14 01 00 00 	mov    DWORD PTR [esp+0x34],0x114
c0018946:	83 ec 0c             	sub    esp,0xc
c0018949:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001894d:	e8 88 6f ff ff       	call   c000f8da <malloc>
c0018952:	83 c4 10             	add    esp,0x10
c0018955:	89 c3                	mov    ebx,eax
c0018957:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c001895c:	83 ec 04             	sub    esp,0x4
c001895f:	50                   	push   eax
c0018960:	68 bc c0 02 c0       	push   0xc002c0bc
c0018965:	53                   	push   ebx
c0018966:	e8 79 aa ff ff       	call   c00133e4 <File::File(char const*, Process*)>
c001896b:	83 c4 10             	add    esp,0x10
c001896e:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0018972:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0018977:	74 17                	je     c0018990 <ACPI::open(int, int, void*)+0x404>
c0018979:	83 ec 0c             	sub    esp,0xc
c001897c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018980:	e8 31 ad ff ff       	call   c00136b6 <File::exists()>
c0018985:	83 c4 10             	add    esp,0x10
c0018988:	84 c0                	test   al,al
c001898a:	74 04                	je     c0018990 <ACPI::open(int, int, void*)+0x404>
c001898c:	b0 01                	mov    al,0x1
c001898e:	eb 02                	jmp    c0018992 <ACPI::open(int, int, void*)+0x406>
c0018990:	b0 00                	mov    al,0x0
c0018992:	84 c0                	test   al,al
c0018994:	74 22                	je     c00189b8 <ACPI::open(int, int, void*)+0x42c>
c0018996:	83 ec 08             	sub    esp,0x8
c0018999:	6a 01                	push   0x1
c001899b:	68 bc c0 02 c0       	push   0xc002c0bc
c00189a0:	e8 9c 52 00 00       	call   c001dc41 <Thr::loadDLL(char const*, bool)>
c00189a5:	83 c4 10             	add    esp,0x10
c00189a8:	83 ec 08             	sub    esp,0x8
c00189ab:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00189af:	50                   	push   eax
c00189b0:	e8 b7 54 00 00       	call   c001de6c <Thr::executeDLL(unsigned long, void*)>
c00189b5:	83 c4 10             	add    esp,0x10
c00189b8:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00189bd:	74 1e                	je     c00189dd <ACPI::open(int, int, void*)+0x451>
c00189bf:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00189c4:	74 17                	je     c00189dd <ACPI::open(int, int, void*)+0x451>
c00189c6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00189ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00189cc:	83 c0 08             	add    eax,0x8
c00189cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00189d1:	83 ec 0c             	sub    esp,0xc
c00189d4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00189d8:	ff d0                	call   eax
c00189da:	83 c4 10             	add    esp,0x10
c00189dd:	a1 48 19 03 c0       	mov    eax,ds:0xc0031948
c00189e2:	83 ec 08             	sub    esp,0x8
c00189e5:	68 d9 c0 02 c0       	push   0xc002c0d9
c00189ea:	50                   	push   eax
c00189eb:	e8 02 f4 ff ff       	call   c0017df2 <findDataTable(unsigned char*, char*)>
c00189f0:	83 c4 10             	add    esp,0x10
c00189f3:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00189f7:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c00189fc:	74 13                	je     c0018a11 <ACPI::open(int, int, void*)+0x485>
c00189fe:	83 ec 08             	sub    esp,0x8
c0018a01:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0018a05:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0018a09:	e8 1e fb ff ff       	call   c001852c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018a0e:	83 c4 10             	add    esp,0x10
c0018a11:	b8 00 00 00 00       	mov    eax,0x0
c0018a16:	83 c4 60             	add    esp,0x60
c0018a19:	5b                   	pop    ebx
c0018a1a:	5e                   	pop    esi
c0018a1b:	5f                   	pop    edi
c0018a1c:	c3                   	ret    
c0018a1d:	90                   	nop

c0018a1e <CPU::close(int, int, void*)>:
c0018a1e:	31 c0                	xor    eax,eax
c0018a20:	c3                   	ret    
c0018a21:	90                   	nop

c0018a22 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018a22:	55                   	push   ebp
c0018a23:	57                   	push   edi
c0018a24:	56                   	push   esi
c0018a25:	53                   	push   ebx
c0018a26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018a2a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a2e:	89 ce                	mov    esi,ecx
c0018a30:	89 d5                	mov    ebp,edx
c0018a32:	80 f9 04             	cmp    cl,0x4
c0018a35:	75 28                	jne    c0018a5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018a37:	8d 42 f9             	lea    eax,[edx-0x7]
c0018a3a:	3c 03                	cmp    al,0x3
c0018a3c:	0f 86 63 01 00 00    	jbe    c0018ba5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018a42:	80 fa 03             	cmp    dl,0x3
c0018a45:	0f 84 5a 01 00 00    	je     c0018ba5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018a4b:	8d 7a f2             	lea    edi,[edx-0xe]
c0018a4e:	b8 90 e4 02 c0       	mov    eax,0xc002e490
c0018a53:	89 fb                	mov    ebx,edi
c0018a55:	80 fb 01             	cmp    bl,0x1
c0018a58:	77 4e                	ja     c0018aa8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018a5a:	e9 52 01 00 00       	jmp    c0018bb1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a5f:	80 f9 05             	cmp    cl,0x5
c0018a62:	75 4d                	jne    c0018ab1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018a64:	b8 a0 e4 02 c0       	mov    eax,0xc002e4a0
c0018a69:	80 fa 03             	cmp    dl,0x3
c0018a6c:	0f 86 3f 01 00 00    	jbe    c0018bb1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a72:	8d 7a fa             	lea    edi,[edx-0x6]
c0018a75:	b8 b0 e4 02 c0       	mov    eax,0xc002e4b0
c0018a7a:	89 fb                	mov    ebx,edi
c0018a7c:	80 fb 01             	cmp    bl,0x1
c0018a7f:	0f 86 2c 01 00 00    	jbe    c0018bb1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a85:	b8 c0 e4 02 c0       	mov    eax,0xc002e4c0
c0018a8a:	80 fa 08             	cmp    dl,0x8
c0018a8d:	0f 84 1e 01 00 00    	je     c0018bb1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a93:	89 d7                	mov    edi,edx
c0018a95:	b8 d0 e4 02 c0       	mov    eax,0xc002e4d0
c0018a9a:	83 e7 fb             	and    edi,0xfffffffb
c0018a9d:	89 fb                	mov    ebx,edi
c0018a9f:	80 fb 09             	cmp    bl,0x9
c0018aa2:	0f 84 09 01 00 00    	je     c0018bb1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018aa8:	31 c0                	xor    eax,eax
c0018aaa:	89 eb                	mov    ebx,ebp
c0018aac:	0f b6 fb             	movzx  edi,bl
c0018aaf:	eb 30                	jmp    c0018ae1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018ab1:	31 c0                	xor    eax,eax
c0018ab3:	80 f9 06             	cmp    cl,0x6
c0018ab6:	75 f2                	jne    c0018aaa <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018ab8:	80 fa 0a             	cmp    dl,0xa
c0018abb:	77 ed                	ja     c0018aaa <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018abd:	bf de 05 00 00       	mov    edi,0x5de
c0018ac2:	0f a3 d7             	bt     edi,edx
c0018ac5:	73 e3                	jae    c0018aaa <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018ac7:	b8 e0 e4 02 c0       	mov    eax,0xc002e4e0
c0018acc:	e9 e0 00 00 00       	jmp    c0018bb1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ad1:	39 c7                	cmp    edi,eax
c0018ad3:	0f 84 d3 00 00 00    	je     c0018bac <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018ad9:	40                   	inc    eax
c0018ada:	3d d0 00 00 00       	cmp    eax,0xd0
c0018adf:	74 09                	je     c0018aea <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018ae1:	89 f3                	mov    ebx,esi
c0018ae3:	80 fb 0f             	cmp    bl,0xf
c0018ae6:	75 f1                	jne    c0018ad9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018ae8:	eb e7                	jmp    c0018ad1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018aea:	80 f9 10             	cmp    cl,0x10
c0018aed:	75 14                	jne    c0018b03 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018aef:	8d 42 fc             	lea    eax,[edx-0x4]
c0018af2:	83 e0 fb             	and    eax,0xfffffffb
c0018af5:	3c 02                	cmp    al,0x2
c0018af7:	76 34                	jbe    c0018b2d <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018af9:	b8 e6 c4 02 c0       	mov    eax,0xc002c4e6
c0018afe:	80 fa 02             	cmp    dl,0x2
c0018b01:	eb 24                	jmp    c0018b27 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018b03:	80 f9 11             	cmp    cl,0x11
c0018b06:	75 13                	jne    c0018b1b <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018b08:	b8 e6 c4 02 c0       	mov    eax,0xc002c4e6
c0018b0d:	80 fa 03             	cmp    dl,0x3
c0018b10:	0f 85 9b 00 00 00    	jne    c0018bb1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b16:	e9 91 00 00 00       	jmp    c0018bac <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018b1b:	80 f9 12             	cmp    cl,0x12
c0018b1e:	75 14                	jne    c0018b34 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018b20:	b8 e6 c4 02 c0       	mov    eax,0xc002c4e6
c0018b25:	fe ca                	dec    dl
c0018b27:	0f 85 84 00 00 00    	jne    c0018bb1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b2d:	b8 00 e5 02 c0       	mov    eax,0xc002e500
c0018b32:	eb 7d                	jmp    c0018bb1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b34:	80 f9 14             	cmp    cl,0x14
c0018b37:	75 12                	jne    c0018b4b <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018b39:	4a                   	dec    edx
c0018b3a:	b8 e6 c4 02 c0       	mov    eax,0xc002c4e6
c0018b3f:	80 fa 01             	cmp    dl,0x1
c0018b42:	77 6d                	ja     c0018bb1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b44:	b8 10 e5 02 c0       	mov    eax,0xc002e510
c0018b49:	eb 66                	jmp    c0018bb1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b4b:	80 f9 15             	cmp    cl,0x15
c0018b4e:	75 31                	jne    c0018b81 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018b50:	b8 20 e5 02 c0       	mov    eax,0xc002e520
c0018b55:	80 fa 01             	cmp    dl,0x1
c0018b58:	74 57                	je     c0018bb1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b5a:	b8 e6 c4 02 c0       	mov    eax,0xc002c4e6
c0018b5f:	80 fa 13             	cmp    dl,0x13
c0018b62:	76 0c                	jbe    c0018b70 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018b64:	80 fa 30             	cmp    dl,0x30
c0018b67:	75 48                	jne    c0018bb1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b69:	b8 40 e5 02 c0       	mov    eax,0xc002e540
c0018b6e:	eb 41                	jmp    c0018bb1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b70:	b9 04 00 09 00       	mov    ecx,0x90004
c0018b75:	0f a3 d1             	bt     ecx,edx
c0018b78:	73 37                	jae    c0018bb1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b7a:	b8 30 e5 02 c0       	mov    eax,0xc002e530
c0018b7f:	eb 30                	jmp    c0018bb1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b81:	b8 e6 c4 02 c0       	mov    eax,0xc002c4e6
c0018b86:	80 f9 16             	cmp    cl,0x16
c0018b89:	75 26                	jne    c0018bb1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b8b:	b8 50 e5 02 c0       	mov    eax,0xc002e550
c0018b90:	84 d2                	test   dl,dl
c0018b92:	74 1d                	je     c0018bb1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b94:	b8 e6 c4 02 c0       	mov    eax,0xc002c4e6
c0018b99:	80 fa 30             	cmp    dl,0x30
c0018b9c:	75 13                	jne    c0018bb1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b9e:	b8 60 e5 02 c0       	mov    eax,0xc002e560
c0018ba3:	eb 0c                	jmp    c0018bb1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ba5:	b8 80 e4 02 c0       	mov    eax,0xc002e480
c0018baa:	eb 05                	jmp    c0018bb1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bac:	b8 f0 e4 02 c0       	mov    eax,0xc002e4f0
c0018bb1:	5b                   	pop    ebx
c0018bb2:	5e                   	pop    esi
c0018bb3:	5f                   	pop    edi
c0018bb4:	5d                   	pop    ebp
c0018bb5:	c3                   	ret    

c0018bb6 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018bb6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018bba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018bbe:	80 f9 04             	cmp    cl,0x4
c0018bc1:	75 6b                	jne    c0018c2e <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018bc3:	b8 e0 e2 02 c0       	mov    eax,0xc002e2e0
c0018bc8:	80 fa 01             	cmp    dl,0x1
c0018bcb:	0f 86 92 02 00 00    	jbe    c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bd1:	b8 f0 e2 02 c0       	mov    eax,0xc002e2f0
c0018bd6:	80 fa 02             	cmp    dl,0x2
c0018bd9:	0f 84 84 02 00 00    	je     c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bdf:	b8 00 e3 02 c0       	mov    eax,0xc002e300
c0018be4:	80 fa 03             	cmp    dl,0x3
c0018be7:	0f 84 76 02 00 00    	je     c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bed:	b8 10 e3 02 c0       	mov    eax,0xc002e310
c0018bf2:	80 fa 04             	cmp    dl,0x4
c0018bf5:	0f 84 68 02 00 00    	je     c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bfb:	b8 20 e3 02 c0       	mov    eax,0xc002e320
c0018c00:	80 fa 05             	cmp    dl,0x5
c0018c03:	0f 84 5a 02 00 00    	je     c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c09:	b8 00 e3 02 c0       	mov    eax,0xc002e300
c0018c0e:	80 fa 07             	cmp    dl,0x7
c0018c11:	0f 84 4c 02 00 00    	je     c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c17:	83 ea 08             	sub    edx,0x8
c0018c1a:	b8 e6 c4 02 c0       	mov    eax,0xc002c4e6
c0018c1f:	80 fa 01             	cmp    dl,0x1
c0018c22:	0f 87 3b 02 00 00    	ja     c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c28:	b8 30 e3 02 c0       	mov    eax,0xc002e330
c0018c2d:	c3                   	ret    
c0018c2e:	80 f9 05             	cmp    cl,0x5
c0018c31:	75 45                	jne    c0018c78 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018c33:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018c36:	b8 40 e3 02 c0       	mov    eax,0xc002e340
c0018c3b:	80 f9 02             	cmp    cl,0x2
c0018c3e:	0f 86 1f 02 00 00    	jbe    c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c44:	80 fa 04             	cmp    dl,0x4
c0018c47:	0f 84 f3 01 00 00    	je     c0018e40 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018c4d:	80 fa 07             	cmp    dl,0x7
c0018c50:	0f 84 0d 02 00 00    	je     c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c56:	b8 50 e3 02 c0       	mov    eax,0xc002e350
c0018c5b:	80 fa 08             	cmp    dl,0x8
c0018c5e:	0f 84 ff 01 00 00    	je     c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c64:	b8 e6 c4 02 c0       	mov    eax,0xc002c4e6
c0018c69:	80 fa 09             	cmp    dl,0x9
c0018c6c:	0f 85 f1 01 00 00    	jne    c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c72:	b8 60 e3 02 c0       	mov    eax,0xc002e360
c0018c77:	c3                   	ret    
c0018c78:	80 f9 06             	cmp    cl,0x6
c0018c7b:	0f 85 85 01 00 00    	jne    c0018e06 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018c81:	b8 70 e3 02 c0       	mov    eax,0xc002e370
c0018c86:	80 fa 01             	cmp    dl,0x1
c0018c89:	0f 84 d4 01 00 00    	je     c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c8f:	8d 42 fb             	lea    eax,[edx-0x5]
c0018c92:	3c 01                	cmp    al,0x1
c0018c94:	0f 86 ac 01 00 00    	jbe    c0018e46 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018c9a:	80 fa 03             	cmp    dl,0x3
c0018c9d:	0f 84 a3 01 00 00    	je     c0018e46 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018ca3:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018ca6:	b8 90 e3 02 c0       	mov    eax,0xc002e390
c0018cab:	80 f9 01             	cmp    cl,0x1
c0018cae:	0f 86 af 01 00 00    	jbe    c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cb4:	80 fa 09             	cmp    dl,0x9
c0018cb7:	0f 84 8f 01 00 00    	je     c0018e4c <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018cbd:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018cc0:	80 f9 01             	cmp    cl,0x1
c0018cc3:	0f 86 9a 01 00 00    	jbe    c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cc9:	b8 a0 e3 02 c0       	mov    eax,0xc002e3a0
c0018cce:	80 fa 0d             	cmp    dl,0xd
c0018cd1:	0f 84 8c 01 00 00    	je     c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cd7:	b8 b0 e3 02 c0       	mov    eax,0xc002e3b0
c0018cdc:	80 fa 0e             	cmp    dl,0xe
c0018cdf:	0f 84 7e 01 00 00    	je     c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ce5:	b8 c0 e3 02 c0       	mov    eax,0xc002e3c0
c0018cea:	80 fa 0f             	cmp    dl,0xf
c0018ced:	0f 84 70 01 00 00    	je     c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cf3:	b8 a0 e3 02 c0       	mov    eax,0xc002e3a0
c0018cf8:	80 fa 15             	cmp    dl,0x15
c0018cfb:	0f 84 62 01 00 00    	je     c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d01:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018d04:	b8 c0 e3 02 c0       	mov    eax,0xc002e3c0
c0018d09:	80 f9 01             	cmp    cl,0x1
c0018d0c:	0f 86 51 01 00 00    	jbe    c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d12:	80 fa 1a             	cmp    dl,0x1a
c0018d15:	0f 84 37 01 00 00    	je     c0018e52 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018d1b:	80 fa 1c             	cmp    dl,0x1c
c0018d1e:	0f 84 34 01 00 00    	je     c0018e58 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018d24:	80 fa 1d             	cmp    dl,0x1d
c0018d27:	0f 84 36 01 00 00    	je     c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d2d:	b8 f0 e3 02 c0       	mov    eax,0xc002e3f0
c0018d32:	80 fa 25             	cmp    dl,0x25
c0018d35:	0f 84 28 01 00 00    	je     c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d3b:	8d 4a da             	lea    ecx,[edx-0x26]
c0018d3e:	b8 e0 e3 02 c0       	mov    eax,0xc002e3e0
c0018d43:	80 f9 01             	cmp    cl,0x1
c0018d46:	0f 86 17 01 00 00    	jbe    c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d4c:	b8 00 e4 02 c0       	mov    eax,0xc002e400
c0018d51:	80 fa 2a             	cmp    dl,0x2a
c0018d54:	0f 84 09 01 00 00    	je     c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d5a:	b8 f0 e3 02 c0       	mov    eax,0xc002e3f0
c0018d5f:	80 fa 2c             	cmp    dl,0x2c
c0018d62:	0f 84 fb 00 00 00    	je     c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d68:	b8 00 e4 02 c0       	mov    eax,0xc002e400
c0018d6d:	80 fa 2d             	cmp    dl,0x2d
c0018d70:	0f 84 ed 00 00 00    	je     c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d76:	b8 d0 e3 02 c0       	mov    eax,0xc002e3d0
c0018d7b:	80 fa 2e             	cmp    dl,0x2e
c0018d7e:	0f 84 df 00 00 00    	je     c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d84:	b8 f0 e3 02 c0       	mov    eax,0xc002e3f0
c0018d89:	80 fa 2f             	cmp    dl,0x2f
c0018d8c:	0f 84 d1 00 00 00    	je     c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d92:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018d95:	b8 e0 e3 02 c0       	mov    eax,0xc002e3e0
c0018d9a:	80 f9 01             	cmp    cl,0x1
c0018d9d:	0f 86 c0 00 00 00    	jbe    c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018da3:	b8 10 e4 02 c0       	mov    eax,0xc002e410
c0018da8:	80 fa 37             	cmp    dl,0x37
c0018dab:	0f 84 b2 00 00 00    	je     c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018db1:	b8 20 e4 02 c0       	mov    eax,0xc002e420
c0018db6:	80 fa 3a             	cmp    dl,0x3a
c0018db9:	0f 84 a4 00 00 00    	je     c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dbf:	b8 30 e4 02 c0       	mov    eax,0xc002e430
c0018dc4:	80 fa 3c             	cmp    dl,0x3c
c0018dc7:	0f 84 96 00 00 00    	je     c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dcd:	b8 40 e4 02 c0       	mov    eax,0xc002e440
c0018dd2:	80 fa 3d             	cmp    dl,0x3d
c0018dd5:	0f 84 88 00 00 00    	je     c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ddb:	b8 20 e4 02 c0       	mov    eax,0xc002e420
c0018de0:	80 fa 3e             	cmp    dl,0x3e
c0018de3:	74 7e                	je     c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018de5:	8d 42 bb             	lea    eax,[edx-0x45]
c0018de8:	3c 01                	cmp    al,0x1
c0018dea:	76 72                	jbe    c0018e5e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018dec:	80 fa 3f             	cmp    dl,0x3f
c0018def:	74 6d                	je     c0018e5e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018df1:	80 fa 4a             	cmp    dl,0x4a
c0018df4:	74 0a                	je     c0018e00 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018df6:	b8 e6 c4 02 c0       	mov    eax,0xc002c4e6
c0018dfb:	80 fa 4d             	cmp    dl,0x4d
c0018dfe:	75 63                	jne    c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e00:	b8 10 e4 02 c0       	mov    eax,0xc002e410
c0018e05:	c3                   	ret    
c0018e06:	b8 e6 c4 02 c0       	mov    eax,0xc002c4e6
c0018e0b:	80 f9 0b             	cmp    cl,0xb
c0018e0e:	75 0a                	jne    c0018e1a <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018e10:	fe ca                	dec    dl
c0018e12:	75 4f                	jne    c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e14:	b8 50 e4 02 c0       	mov    eax,0xc002e450
c0018e19:	c3                   	ret    
c0018e1a:	80 f9 0f             	cmp    cl,0xf
c0018e1d:	75 44                	jne    c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e1f:	b8 60 e4 02 c0       	mov    eax,0xc002e460
c0018e24:	80 fa 02             	cmp    dl,0x2
c0018e27:	76 3a                	jbe    c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e29:	8d 42 fd             	lea    eax,[edx-0x3]
c0018e2c:	3c 01                	cmp    al,0x1
c0018e2e:	76 0a                	jbe    c0018e3a <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018e30:	b8 e6 c4 02 c0       	mov    eax,0xc002c4e6
c0018e35:	80 fa 06             	cmp    dl,0x6
c0018e38:	75 29                	jne    c0018e63 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e3a:	b8 70 e4 02 c0       	mov    eax,0xc002e470
c0018e3f:	c3                   	ret    
c0018e40:	b8 50 e3 02 c0       	mov    eax,0xc002e350
c0018e45:	c3                   	ret    
c0018e46:	b8 80 e3 02 c0       	mov    eax,0xc002e380
c0018e4b:	c3                   	ret    
c0018e4c:	b8 a0 e3 02 c0       	mov    eax,0xc002e3a0
c0018e51:	c3                   	ret    
c0018e52:	b8 d0 e3 02 c0       	mov    eax,0xc002e3d0
c0018e57:	c3                   	ret    
c0018e58:	b8 e0 e3 02 c0       	mov    eax,0xc002e3e0
c0018e5d:	c3                   	ret    
c0018e5e:	b8 30 e4 02 c0       	mov    eax,0xc002e430
c0018e63:	c3                   	ret    

c0018e64 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018e64:	60                   	pusha  
c0018e65:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018e69:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e6d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e71:	9c                   	pushf  
c0018e72:	fa                   	cli    
c0018e73:	0f 09                	wbinvd 
c0018e75:	0f 30                	wrmsr  
c0018e77:	9d                   	popf   
c0018e78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e7c:	89 02                	mov    DWORD PTR [edx],eax
c0018e7e:	61                   	popa   
c0018e7f:	c3                   	ret    

c0018e80 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018e80:	60                   	pusha  
c0018e81:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018e85:	9c                   	pushf  
c0018e86:	fa                   	cli    
c0018e87:	0f 09                	wbinvd 
c0018e89:	31 c0                	xor    eax,eax
c0018e8b:	31 d2                	xor    edx,edx
c0018e8d:	0f 32                	rdmsr  
c0018e8f:	9d                   	popf   
c0018e90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018e94:	89 02                	mov    DWORD PTR [edx],eax
c0018e96:	61                   	popa   
c0018e97:	c3                   	ret    

c0018e98 <CPU::AMD_K6_writeback(int, int, int)>:
c0018e98:	56                   	push   esi
c0018e99:	53                   	push   ebx
c0018e9a:	83 ec 10             	sub    esp,0x10
c0018e9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ea1:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018ea6:	75 5d                	jne    c0018f05 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ea8:	83 f8 08             	cmp    eax,0x8
c0018eab:	75 09                	jne    c0018eb6 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018ead:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018eb2:	7e 13                	jle    c0018ec7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018eb4:	eb 30                	jmp    c0018ee6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018eb6:	83 f8 06             	cmp    eax,0x6
c0018eb9:	7c 4a                	jl     c0018f05 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ebb:	83 f8 07             	cmp    eax,0x7
c0018ebe:	7e 07                	jle    c0018ec7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018ec0:	83 f8 09             	cmp    eax,0x9
c0018ec3:	74 21                	je     c0018ee6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018ec5:	eb 3e                	jmp    c0018f05 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ec7:	89 e6                	mov    esi,esp
c0018ec9:	8b 1d a8 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0a8
c0018ecf:	56                   	push   esi
c0018ed0:	c1 eb 15             	shr    ebx,0x15
c0018ed3:	68 82 00 00 c0       	push   0xc0000082
c0018ed8:	83 e3 7e             	and    ebx,0x7e
c0018edb:	e8 a0 ff ff ff       	call   c0018e80 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018ee0:	56                   	push   esi
c0018ee1:	6a 00                	push   0x0
c0018ee3:	53                   	push   ebx
c0018ee4:	eb 12                	jmp    c0018ef8 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018ee6:	89 e3                	mov    ebx,esp
c0018ee8:	53                   	push   ebx
c0018ee9:	68 82 00 00 c0       	push   0xc0000082
c0018eee:	e8 8d ff ff ff       	call   c0018e80 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018ef3:	53                   	push   ebx
c0018ef4:	6a 00                	push   0x0
c0018ef6:	6a 00                	push   0x0
c0018ef8:	68 82 00 00 c0       	push   0xc0000082
c0018efd:	e8 62 ff ff ff       	call   c0018e64 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018f02:	83 c4 18             	add    esp,0x18
c0018f05:	83 c4 10             	add    esp,0x10
c0018f08:	5b                   	pop    ebx
c0018f09:	5e                   	pop    esi
c0018f0a:	c3                   	ret    
c0018f0b:	90                   	nop

c0018f0c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018f0c:	55                   	push   ebp
c0018f0d:	57                   	push   edi
c0018f0e:	56                   	push   esi
c0018f0f:	53                   	push   ebx
c0018f10:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f14:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018f18:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018f1c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018f20:	39 05 80 e5 02 c0    	cmp    DWORD PTR ds:0xc002e580,eax
c0018f26:	75 23                	jne    c0018f4b <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018f28:	a1 ac 1b 03 c0       	mov    eax,ds:0xc0031bac
c0018f2d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018f31:	89 06                	mov    DWORD PTR [esi],eax
c0018f33:	a1 a8 1b 03 c0       	mov    eax,ds:0xc0031ba8
c0018f38:	89 07                	mov    DWORD PTR [edi],eax
c0018f3a:	a1 a4 1b 03 c0       	mov    eax,ds:0xc0031ba4
c0018f3f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018f42:	a1 a0 1b 03 c0       	mov    eax,ds:0xc0031ba0
c0018f47:	89 02                	mov    DWORD PTR [edx],eax
c0018f49:	eb 3f                	jmp    c0018f8a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018f4b:	31 c9                	xor    ecx,ecx
c0018f4d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f51:	0f a2                	cpuid  
c0018f53:	89 06                	mov    DWORD PTR [esi],eax
c0018f55:	89 1f                	mov    DWORD PTR [edi],ebx
c0018f57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018f5b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018f5e:	89 10                	mov    DWORD PTR [eax],edx
c0018f60:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f64:	a3 80 e5 02 c0       	mov    ds:0xc002e580,eax
c0018f69:	8b 06                	mov    eax,DWORD PTR [esi]
c0018f6b:	a3 ac 1b 03 c0       	mov    ds:0xc0031bac,eax
c0018f70:	8b 07                	mov    eax,DWORD PTR [edi]
c0018f72:	a3 a8 1b 03 c0       	mov    ds:0xc0031ba8,eax
c0018f77:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018f7a:	a3 a4 1b 03 c0       	mov    ds:0xc0031ba4,eax
c0018f7f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018f83:	8b 00                	mov    eax,DWORD PTR [eax]
c0018f85:	a3 a0 1b 03 c0       	mov    ds:0xc0031ba0,eax
c0018f8a:	5b                   	pop    ebx
c0018f8b:	5e                   	pop    esi
c0018f8c:	5f                   	pop    edi
c0018f8d:	5d                   	pop    ebp
c0018f8e:	c3                   	ret    
c0018f8f:	90                   	nop

c0018f90 <CPU::cpuidCheckEDX(unsigned int)>:
c0018f90:	83 ec 10             	sub    esp,0x10
c0018f93:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f97:	50                   	push   eax
c0018f98:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f9c:	50                   	push   eax
c0018f9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fa1:	50                   	push   eax
c0018fa2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fa6:	50                   	push   eax
c0018fa7:	6a 01                	push   0x1
c0018fa9:	e8 5e ff ff ff       	call   c0018f0c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018fae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018fb2:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018fb6:	0f 95 c0             	setne  al
c0018fb9:	83 c4 24             	add    esp,0x24
c0018fbc:	c3                   	ret    
c0018fbd:	90                   	nop

c0018fbe <CPU::cpuidCheckECX(unsigned int)>:
c0018fbe:	83 ec 10             	sub    esp,0x10
c0018fc1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fc5:	50                   	push   eax
c0018fc6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fca:	50                   	push   eax
c0018fcb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fcf:	50                   	push   eax
c0018fd0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fd4:	50                   	push   eax
c0018fd5:	6a 01                	push   0x1
c0018fd7:	e8 30 ff ff ff       	call   c0018f0c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018fdc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018fe0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018fe4:	0f 95 c0             	setne  al
c0018fe7:	83 c4 24             	add    esp,0x24
c0018fea:	c3                   	ret    
c0018feb:	90                   	nop

c0018fec <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018fec:	83 ec 10             	sub    esp,0x10
c0018fef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ff3:	50                   	push   eax
c0018ff4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ff8:	50                   	push   eax
c0018ff9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ffd:	50                   	push   eax
c0018ffe:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019002:	50                   	push   eax
c0019003:	6a 07                	push   0x7
c0019005:	e8 02 ff ff ff       	call   c0018f0c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001900a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001900e:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0019012:	0f 95 c0             	setne  al
c0019015:	83 c4 24             	add    esp,0x24
c0019018:	c3                   	ret    
c0019019:	90                   	nop

c001901a <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001901a:	83 ec 10             	sub    esp,0x10
c001901d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019021:	50                   	push   eax
c0019022:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019026:	50                   	push   eax
c0019027:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001902b:	50                   	push   eax
c001902c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019030:	50                   	push   eax
c0019031:	6a 07                	push   0x7
c0019033:	e8 d4 fe ff ff       	call   c0018f0c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019038:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001903c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0019040:	0f 95 c0             	setne  al
c0019043:	83 c4 24             	add    esp,0x24
c0019046:	c3                   	ret    
c0019047:	90                   	nop

c0019048 <CPU::CPU()>:
c0019048:	83 ec 0c             	sub    esp,0xc
c001904b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001904f:	83 ec 08             	sub    esp,0x8
c0019052:	68 e6 c4 02 c0       	push   0xc002c4e6
c0019057:	50                   	push   eax
c0019058:	e8 39 b4 ff ff       	call   c0014496 <Device::Device(char const*)>
c001905d:	83 c4 10             	add    esp,0x10
c0019060:	ba c0 c5 02 c0       	mov    edx,0xc002c5c0
c0019065:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019069:	89 10                	mov    DWORD PTR [eax],edx
c001906b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001906f:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0019079:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001907d:	05 78 01 00 00       	add    eax,0x178
c0019082:	83 ec 0c             	sub    esp,0xc
c0019085:	50                   	push   eax
c0019086:	e8 65 60 ff ff       	call   c000f0f0 <GDT::GDT()>
c001908b:	83 c4 10             	add    esp,0x10
c001908e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019092:	05 7c 09 00 00       	add    eax,0x97c
c0019097:	83 ec 0c             	sub    esp,0xc
c001909a:	50                   	push   eax
c001909b:	e8 ba 62 ff ff       	call   c000f35a <IDT::IDT()>
c00190a0:	83 c4 10             	add    esp,0x10
c00190a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190a7:	05 7c 11 00 00       	add    eax,0x117c
c00190ac:	83 ec 0c             	sub    esp,0xc
c00190af:	50                   	push   eax
c00190b0:	e8 fb 82 ff ff       	call   c00113b0 <TSS::TSS()>
c00190b5:	83 c4 10             	add    esp,0x10
c00190b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190bc:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00190c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190c7:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00190d1:	90                   	nop
c00190d2:	83 c4 0c             	add    esp,0xc
c00190d5:	c3                   	ret    

c00190d6 <CPU::displayFeatures()>:
c00190d6:	53                   	push   ebx
c00190d7:	83 ec 10             	sub    esp,0x10
c00190da:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00190de:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00190e4:	68 f4 c1 02 c0       	push   0xc002c1f4
c00190e9:	e8 97 9d ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00190ee:	59                   	pop    ecx
c00190ef:	58                   	pop    eax
c00190f0:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c00190f6:	50                   	push   eax
c00190f7:	68 05 c2 02 c0       	push   0xc002c205
c00190fc:	e8 84 9d ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0019101:	58                   	pop    eax
c0019102:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019108:	5a                   	pop    edx
c0019109:	c1 e8 0e             	shr    eax,0xe
c001910c:	0f b6 c0             	movzx  eax,al
c001910f:	50                   	push   eax
c0019110:	68 16 c2 02 c0       	push   0xc002c216
c0019115:	e8 6b 9d ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001911a:	59                   	pop    ecx
c001911b:	58                   	pop    eax
c001911c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019122:	66 c1 e8 06          	shr    ax,0x6
c0019126:	0f b6 c0             	movzx  eax,al
c0019129:	50                   	push   eax
c001912a:	68 27 c2 02 c0       	push   0xc002c227
c001912f:	e8 51 9d ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0019134:	c7 04 24 d4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6d4
c001913b:	e8 45 9d ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0019140:	83 c4 10             	add    esp,0x10
c0019143:	b8 d6 aa 02 c0       	mov    eax,0xc002aad6
c0019148:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c001914f:	74 05                	je     c0019156 <CPU::displayFeatures()+0x80>
c0019151:	b8 d2 aa 02 c0       	mov    eax,0xc002aad2
c0019156:	52                   	push   edx
c0019157:	52                   	push   edx
c0019158:	50                   	push   eax
c0019159:	68 38 c2 02 c0       	push   0xc002c238
c001915e:	e8 22 9d ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0019163:	83 c4 10             	add    esp,0x10
c0019166:	b8 d2 aa 02 c0       	mov    eax,0xc002aad2
c001916b:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0019172:	78 05                	js     c0019179 <CPU::displayFeatures()+0xa3>
c0019174:	b8 d6 aa 02 c0       	mov    eax,0xc002aad6
c0019179:	51                   	push   ecx
c001917a:	51                   	push   ecx
c001917b:	50                   	push   eax
c001917c:	68 4f c2 02 c0       	push   0xc002c24f
c0019181:	e8 ff 9c ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0019186:	83 c4 10             	add    esp,0x10
c0019189:	b8 d2 aa 02 c0       	mov    eax,0xc002aad2
c001918e:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0019195:	75 05                	jne    c001919c <CPU::displayFeatures()+0xc6>
c0019197:	b8 d6 aa 02 c0       	mov    eax,0xc002aad6
c001919c:	52                   	push   edx
c001919d:	52                   	push   edx
c001919e:	50                   	push   eax
c001919f:	68 66 c2 02 c0       	push   0xc002c266
c00191a4:	e8 dc 9c ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00191a9:	83 c4 10             	add    esp,0x10
c00191ac:	b8 d2 aa 02 c0       	mov    eax,0xc002aad2
c00191b1:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c00191b8:	75 05                	jne    c00191bf <CPU::displayFeatures()+0xe9>
c00191ba:	b8 d6 aa 02 c0       	mov    eax,0xc002aad6
c00191bf:	51                   	push   ecx
c00191c0:	51                   	push   ecx
c00191c1:	50                   	push   eax
c00191c2:	68 7d c2 02 c0       	push   0xc002c27d
c00191c7:	e8 b9 9c ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00191cc:	83 c4 10             	add    esp,0x10
c00191cf:	b8 d2 aa 02 c0       	mov    eax,0xc002aad2
c00191d4:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00191db:	75 05                	jne    c00191e2 <CPU::displayFeatures()+0x10c>
c00191dd:	b8 d6 aa 02 c0       	mov    eax,0xc002aad6
c00191e2:	52                   	push   edx
c00191e3:	52                   	push   edx
c00191e4:	50                   	push   eax
c00191e5:	68 94 c2 02 c0       	push   0xc002c294
c00191ea:	e8 96 9c ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00191ef:	83 c4 10             	add    esp,0x10
c00191f2:	b8 d2 aa 02 c0       	mov    eax,0xc002aad2
c00191f7:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00191fe:	75 05                	jne    c0019205 <CPU::displayFeatures()+0x12f>
c0019200:	b8 d6 aa 02 c0       	mov    eax,0xc002aad6
c0019205:	51                   	push   ecx
c0019206:	51                   	push   ecx
c0019207:	50                   	push   eax
c0019208:	68 ab c2 02 c0       	push   0xc002c2ab
c001920d:	e8 73 9c ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0019212:	83 c4 10             	add    esp,0x10
c0019215:	b8 d2 aa 02 c0       	mov    eax,0xc002aad2
c001921a:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0019221:	75 05                	jne    c0019228 <CPU::displayFeatures()+0x152>
c0019223:	b8 d6 aa 02 c0       	mov    eax,0xc002aad6
c0019228:	52                   	push   edx
c0019229:	52                   	push   edx
c001922a:	50                   	push   eax
c001922b:	68 c2 c2 02 c0       	push   0xc002c2c2
c0019230:	e8 50 9c ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0019235:	83 c4 10             	add    esp,0x10
c0019238:	b8 d2 aa 02 c0       	mov    eax,0xc002aad2
c001923d:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0019244:	75 05                	jne    c001924b <CPU::displayFeatures()+0x175>
c0019246:	b8 d6 aa 02 c0       	mov    eax,0xc002aad6
c001924b:	51                   	push   ecx
c001924c:	51                   	push   ecx
c001924d:	50                   	push   eax
c001924e:	68 d9 c2 02 c0       	push   0xc002c2d9
c0019253:	e8 2d 9c ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0019258:	83 c4 10             	add    esp,0x10
c001925b:	b8 d2 aa 02 c0       	mov    eax,0xc002aad2
c0019260:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0019267:	75 05                	jne    c001926e <CPU::displayFeatures()+0x198>
c0019269:	b8 d6 aa 02 c0       	mov    eax,0xc002aad6
c001926e:	52                   	push   edx
c001926f:	52                   	push   edx
c0019270:	50                   	push   eax
c0019271:	68 f0 c2 02 c0       	push   0xc002c2f0
c0019276:	e8 0a 9c ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001927b:	83 c4 10             	add    esp,0x10
c001927e:	b8 d2 aa 02 c0       	mov    eax,0xc002aad2
c0019283:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c001928a:	75 05                	jne    c0019291 <CPU::displayFeatures()+0x1bb>
c001928c:	b8 d6 aa 02 c0       	mov    eax,0xc002aad6
c0019291:	51                   	push   ecx
c0019292:	51                   	push   ecx
c0019293:	50                   	push   eax
c0019294:	68 07 c3 02 c0       	push   0xc002c307
c0019299:	e8 e7 9b ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001929e:	83 c4 10             	add    esp,0x10
c00192a1:	b8 d2 aa 02 c0       	mov    eax,0xc002aad2
c00192a6:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00192ad:	75 05                	jne    c00192b4 <CPU::displayFeatures()+0x1de>
c00192af:	b8 d6 aa 02 c0       	mov    eax,0xc002aad6
c00192b4:	52                   	push   edx
c00192b5:	52                   	push   edx
c00192b6:	50                   	push   eax
c00192b7:	68 1e c3 02 c0       	push   0xc002c31e
c00192bc:	e8 c4 9b ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00192c1:	83 c4 10             	add    esp,0x10
c00192c4:	b8 d2 aa 02 c0       	mov    eax,0xc002aad2
c00192c9:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c00192d0:	75 05                	jne    c00192d7 <CPU::displayFeatures()+0x201>
c00192d2:	b8 d6 aa 02 c0       	mov    eax,0xc002aad6
c00192d7:	51                   	push   ecx
c00192d8:	51                   	push   ecx
c00192d9:	50                   	push   eax
c00192da:	68 35 c3 02 c0       	push   0xc002c335
c00192df:	e8 a1 9b ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00192e4:	83 c4 10             	add    esp,0x10
c00192e7:	b8 d2 aa 02 c0       	mov    eax,0xc002aad2
c00192ec:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c00192f3:	75 05                	jne    c00192fa <CPU::displayFeatures()+0x224>
c00192f5:	b8 d6 aa 02 c0       	mov    eax,0xc002aad6
c00192fa:	52                   	push   edx
c00192fb:	52                   	push   edx
c00192fc:	50                   	push   eax
c00192fd:	68 4c c3 02 c0       	push   0xc002c34c
c0019302:	e8 7e 9b ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0019307:	83 c4 10             	add    esp,0x10
c001930a:	b8 d2 aa 02 c0       	mov    eax,0xc002aad2
c001930f:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0019316:	78 05                	js     c001931d <CPU::displayFeatures()+0x247>
c0019318:	b8 d6 aa 02 c0       	mov    eax,0xc002aad6
c001931d:	51                   	push   ecx
c001931e:	51                   	push   ecx
c001931f:	50                   	push   eax
c0019320:	68 63 c3 02 c0       	push   0xc002c363
c0019325:	e8 5b 9b ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001932a:	83 c4 10             	add    esp,0x10
c001932d:	b8 d2 aa 02 c0       	mov    eax,0xc002aad2
c0019332:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0019339:	75 05                	jne    c0019340 <CPU::displayFeatures()+0x26a>
c001933b:	b8 d6 aa 02 c0       	mov    eax,0xc002aad6
c0019340:	52                   	push   edx
c0019341:	52                   	push   edx
c0019342:	50                   	push   eax
c0019343:	68 7a c3 02 c0       	push   0xc002c37a
c0019348:	e8 38 9b ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001934d:	83 c4 18             	add    esp,0x18
c0019350:	5b                   	pop    ebx
c0019351:	c3                   	ret    

c0019352 <CPU::detectFeatures()>:
c0019352:	55                   	push   ebp
c0019353:	57                   	push   edi
c0019354:	56                   	push   esi
c0019355:	53                   	push   ebx
c0019356:	83 ec 50             	sub    esp,0x50
c0019359:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c001935d:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0019367:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001936e:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0019374:	6a 0d                	push   0xd
c0019376:	6a 00                	push   0x0
c0019378:	55                   	push   ebp
c0019379:	e8 ee 73 fe ff       	call   c000076c <memset>
c001937e:	83 c4 10             	add    esp,0x10
c0019381:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c0019386:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c001938d:	0f 84 22 09 00 00    	je     c0019cb5 <CPU::detectFeatures()+0x963>
c0019393:	83 ec 0c             	sub    esp,0xc
c0019396:	89 ef                	mov    edi,ebp
c0019398:	6a 10                	push   0x10
c001939a:	e8 f1 fb ff ff       	call   c0018f90 <CPU::cpuidCheckEDX(unsigned int)>
c001939f:	83 e0 01             	and    eax,0x1
c00193a2:	8d 14 00             	lea    edx,[eax+eax*1]
c00193a5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00193ab:	83 e0 fd             	and    eax,0xfffffffd
c00193ae:	09 d0                	or     eax,edx
c00193b0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00193b6:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00193bd:	e8 ce fb ff ff       	call   c0018f90 <CPU::cpuidCheckEDX(unsigned int)>
c00193c2:	83 e0 01             	and    eax,0x1
c00193c5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00193cc:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00193d2:	83 e0 fb             	and    eax,0xfffffffb
c00193d5:	09 d0                	or     eax,edx
c00193d7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00193dd:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00193e4:	e8 a7 fb ff ff       	call   c0018f90 <CPU::cpuidCheckEDX(unsigned int)>
c00193e9:	83 e0 01             	and    eax,0x1
c00193ec:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00193f3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00193f9:	83 e0 f7             	and    eax,0xfffffff7
c00193fc:	09 d0                	or     eax,edx
c00193fe:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019404:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001940b:	e8 80 fb ff ff       	call   c0018f90 <CPU::cpuidCheckEDX(unsigned int)>
c0019410:	83 e0 01             	and    eax,0x1
c0019413:	c1 e0 04             	shl    eax,0x4
c0019416:	88 c2                	mov    dl,al
c0019418:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001941e:	83 e0 ef             	and    eax,0xffffffef
c0019421:	09 d0                	or     eax,edx
c0019423:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019429:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0019430:	e8 5b fb ff ff       	call   c0018f90 <CPU::cpuidCheckEDX(unsigned int)>
c0019435:	83 e0 01             	and    eax,0x1
c0019438:	c1 e0 05             	shl    eax,0x5
c001943b:	88 c2                	mov    dl,al
c001943d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019443:	83 e0 df             	and    eax,0xffffffdf
c0019446:	09 d0                	or     eax,edx
c0019448:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001944e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0019455:	e8 36 fb ff ff       	call   c0018f90 <CPU::cpuidCheckEDX(unsigned int)>
c001945a:	83 e0 01             	and    eax,0x1
c001945d:	8d 14 00             	lea    edx,[eax+eax*1]
c0019460:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019466:	83 e0 fd             	and    eax,0xfffffffd
c0019469:	09 d0                	or     eax,edx
c001946b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019471:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0019478:	e8 13 fb ff ff       	call   c0018f90 <CPU::cpuidCheckEDX(unsigned int)>
c001947d:	83 e0 01             	and    eax,0x1
c0019480:	c1 e0 06             	shl    eax,0x6
c0019483:	88 c2                	mov    dl,al
c0019485:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001948b:	83 e0 bf             	and    eax,0xffffffbf
c001948e:	09 d0                	or     eax,edx
c0019490:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019496:	58                   	pop    eax
c0019497:	8d 44 24 28          	lea    eax,[esp+0x28]
c001949b:	50                   	push   eax
c001949c:	8d 44 24 28          	lea    eax,[esp+0x28]
c00194a0:	50                   	push   eax
c00194a1:	8d 74 24 28          	lea    esi,[esp+0x28]
c00194a5:	56                   	push   esi
c00194a6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00194aa:	50                   	push   eax
c00194ab:	6a 00                	push   0x0
c00194ad:	e8 5a fa ff ff       	call   c0018f0c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00194b2:	b8 04 00 00 00       	mov    eax,0x4
c00194b7:	89 c1                	mov    ecx,eax
c00194b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00194bb:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00194c1:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00194c5:	89 c1                	mov    ecx,eax
c00194c7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00194c9:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00194cf:	8d 74 24 38          	lea    esi,[esp+0x38]
c00194d3:	89 c1                	mov    ecx,eax
c00194d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00194d7:	83 c4 18             	add    esp,0x18
c00194da:	68 91 c3 02 c0       	push   0xc002c391
c00194df:	55                   	push   ebp
c00194e0:	e8 cf 73 fe ff       	call   c00008b4 <strcmp>
c00194e5:	83 c4 10             	add    esp,0x10
c00194e8:	85 c0                	test   eax,eax
c00194ea:	75 0f                	jne    c00194fb <CPU::detectFeatures()+0x1a9>
c00194ec:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00194f6:	e9 22 02 00 00       	jmp    c001971d <CPU::detectFeatures()+0x3cb>
c00194fb:	50                   	push   eax
c00194fc:	50                   	push   eax
c00194fd:	68 9e c3 02 c0       	push   0xc002c39e
c0019502:	55                   	push   ebp
c0019503:	e8 ac 73 fe ff       	call   c00008b4 <strcmp>
c0019508:	83 c4 10             	add    esp,0x10
c001950b:	85 c0                	test   eax,eax
c001950d:	74 dd                	je     c00194ec <CPU::detectFeatures()+0x19a>
c001950f:	50                   	push   eax
c0019510:	50                   	push   eax
c0019511:	68 ab c3 02 c0       	push   0xc002c3ab
c0019516:	55                   	push   ebp
c0019517:	e8 98 73 fe ff       	call   c00008b4 <strcmp>
c001951c:	83 c4 10             	add    esp,0x10
c001951f:	85 c0                	test   eax,eax
c0019521:	74 2a                	je     c001954d <CPU::detectFeatures()+0x1fb>
c0019523:	50                   	push   eax
c0019524:	50                   	push   eax
c0019525:	68 b8 c3 02 c0       	push   0xc002c3b8
c001952a:	55                   	push   ebp
c001952b:	e8 84 73 fe ff       	call   c00008b4 <strcmp>
c0019530:	83 c4 10             	add    esp,0x10
c0019533:	85 c0                	test   eax,eax
c0019535:	74 16                	je     c001954d <CPU::detectFeatures()+0x1fb>
c0019537:	50                   	push   eax
c0019538:	50                   	push   eax
c0019539:	68 c5 c3 02 c0       	push   0xc002c3c5
c001953e:	55                   	push   ebp
c001953f:	e8 70 73 fe ff       	call   c00008b4 <strcmp>
c0019544:	83 c4 10             	add    esp,0x10
c0019547:	85 c0                	test   eax,eax
c0019549:	74 48                	je     c0019593 <CPU::detectFeatures()+0x241>
c001954b:	eb 0f                	jmp    c001955c <CPU::detectFeatures()+0x20a>
c001954d:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0019557:	e9 c1 01 00 00       	jmp    c001971d <CPU::detectFeatures()+0x3cb>
c001955c:	50                   	push   eax
c001955d:	50                   	push   eax
c001955e:	68 d2 c3 02 c0       	push   0xc002c3d2
c0019563:	55                   	push   ebp
c0019564:	e8 4b 73 fe ff       	call   c00008b4 <strcmp>
c0019569:	83 c4 10             	add    esp,0x10
c001956c:	85 c0                	test   eax,eax
c001956e:	74 23                	je     c0019593 <CPU::detectFeatures()+0x241>
c0019570:	57                   	push   edi
c0019571:	57                   	push   edi
c0019572:	68 df c3 02 c0       	push   0xc002c3df
c0019577:	55                   	push   ebp
c0019578:	e8 37 73 fe ff       	call   c00008b4 <strcmp>
c001957d:	83 c4 10             	add    esp,0x10
c0019580:	85 c0                	test   eax,eax
c0019582:	75 1e                	jne    c00195a2 <CPU::detectFeatures()+0x250>
c0019584:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001958e:	e9 8a 01 00 00       	jmp    c001971d <CPU::detectFeatures()+0x3cb>
c0019593:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001959d:	e9 7b 01 00 00       	jmp    c001971d <CPU::detectFeatures()+0x3cb>
c00195a2:	56                   	push   esi
c00195a3:	56                   	push   esi
c00195a4:	68 ec c3 02 c0       	push   0xc002c3ec
c00195a9:	55                   	push   ebp
c00195aa:	e8 05 73 fe ff       	call   c00008b4 <strcmp>
c00195af:	83 c4 10             	add    esp,0x10
c00195b2:	85 c0                	test   eax,eax
c00195b4:	75 0f                	jne    c00195c5 <CPU::detectFeatures()+0x273>
c00195b6:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00195c0:	e9 58 01 00 00       	jmp    c001971d <CPU::detectFeatures()+0x3cb>
c00195c5:	51                   	push   ecx
c00195c6:	51                   	push   ecx
c00195c7:	68 ab c3 02 c0       	push   0xc002c3ab
c00195cc:	55                   	push   ebp
c00195cd:	e8 e2 72 fe ff       	call   c00008b4 <strcmp>
c00195d2:	83 c4 10             	add    esp,0x10
c00195d5:	85 c0                	test   eax,eax
c00195d7:	75 0f                	jne    c00195e8 <CPU::detectFeatures()+0x296>
c00195d9:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00195e3:	e9 35 01 00 00       	jmp    c001971d <CPU::detectFeatures()+0x3cb>
c00195e8:	52                   	push   edx
c00195e9:	52                   	push   edx
c00195ea:	68 f9 c3 02 c0       	push   0xc002c3f9
c00195ef:	55                   	push   ebp
c00195f0:	e8 bf 72 fe ff       	call   c00008b4 <strcmp>
c00195f5:	83 c4 10             	add    esp,0x10
c00195f8:	85 c0                	test   eax,eax
c00195fa:	75 0f                	jne    c001960b <CPU::detectFeatures()+0x2b9>
c00195fc:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0019606:	e9 12 01 00 00       	jmp    c001971d <CPU::detectFeatures()+0x3cb>
c001960b:	50                   	push   eax
c001960c:	50                   	push   eax
c001960d:	68 06 c4 02 c0       	push   0xc002c406
c0019612:	55                   	push   ebp
c0019613:	e8 9c 72 fe ff       	call   c00008b4 <strcmp>
c0019618:	83 c4 10             	add    esp,0x10
c001961b:	85 c0                	test   eax,eax
c001961d:	75 0f                	jne    c001962e <CPU::detectFeatures()+0x2dc>
c001961f:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0019629:	e9 ef 00 00 00       	jmp    c001971d <CPU::detectFeatures()+0x3cb>
c001962e:	50                   	push   eax
c001962f:	50                   	push   eax
c0019630:	68 13 c4 02 c0       	push   0xc002c413
c0019635:	55                   	push   ebp
c0019636:	e8 79 72 fe ff       	call   c00008b4 <strcmp>
c001963b:	83 c4 10             	add    esp,0x10
c001963e:	85 c0                	test   eax,eax
c0019640:	75 0f                	jne    c0019651 <CPU::detectFeatures()+0x2ff>
c0019642:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001964c:	e9 cc 00 00 00       	jmp    c001971d <CPU::detectFeatures()+0x3cb>
c0019651:	50                   	push   eax
c0019652:	50                   	push   eax
c0019653:	68 20 c4 02 c0       	push   0xc002c420
c0019658:	55                   	push   ebp
c0019659:	e8 56 72 fe ff       	call   c00008b4 <strcmp>
c001965e:	83 c4 10             	add    esp,0x10
c0019661:	85 c0                	test   eax,eax
c0019663:	75 0f                	jne    c0019674 <CPU::detectFeatures()+0x322>
c0019665:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001966f:	e9 a9 00 00 00       	jmp    c001971d <CPU::detectFeatures()+0x3cb>
c0019674:	50                   	push   eax
c0019675:	50                   	push   eax
c0019676:	68 2d c4 02 c0       	push   0xc002c42d
c001967b:	55                   	push   ebp
c001967c:	e8 33 72 fe ff       	call   c00008b4 <strcmp>
c0019681:	83 c4 10             	add    esp,0x10
c0019684:	85 c0                	test   eax,eax
c0019686:	75 0f                	jne    c0019697 <CPU::detectFeatures()+0x345>
c0019688:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0019692:	e9 86 00 00 00       	jmp    c001971d <CPU::detectFeatures()+0x3cb>
c0019697:	50                   	push   eax
c0019698:	50                   	push   eax
c0019699:	68 3a c4 02 c0       	push   0xc002c43a
c001969e:	55                   	push   ebp
c001969f:	e8 10 72 fe ff       	call   c00008b4 <strcmp>
c00196a4:	83 c4 10             	add    esp,0x10
c00196a7:	85 c0                	test   eax,eax
c00196a9:	75 0c                	jne    c00196b7 <CPU::detectFeatures()+0x365>
c00196ab:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00196b5:	eb 66                	jmp    c001971d <CPU::detectFeatures()+0x3cb>
c00196b7:	50                   	push   eax
c00196b8:	50                   	push   eax
c00196b9:	68 47 c4 02 c0       	push   0xc002c447
c00196be:	55                   	push   ebp
c00196bf:	e8 f0 71 fe ff       	call   c00008b4 <strcmp>
c00196c4:	83 c4 10             	add    esp,0x10
c00196c7:	85 c0                	test   eax,eax
c00196c9:	75 0c                	jne    c00196d7 <CPU::detectFeatures()+0x385>
c00196cb:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00196d5:	eb 46                	jmp    c001971d <CPU::detectFeatures()+0x3cb>
c00196d7:	57                   	push   edi
c00196d8:	57                   	push   edi
c00196d9:	68 54 c4 02 c0       	push   0xc002c454
c00196de:	55                   	push   ebp
c00196df:	e8 d0 71 fe ff       	call   c00008b4 <strcmp>
c00196e4:	83 c4 10             	add    esp,0x10
c00196e7:	85 c0                	test   eax,eax
c00196e9:	74 e0                	je     c00196cb <CPU::detectFeatures()+0x379>
c00196eb:	56                   	push   esi
c00196ec:	56                   	push   esi
c00196ed:	68 61 c4 02 c0       	push   0xc002c461
c00196f2:	55                   	push   ebp
c00196f3:	e8 bc 71 fe ff       	call   c00008b4 <strcmp>
c00196f8:	83 c4 10             	add    esp,0x10
c00196fb:	85 c0                	test   eax,eax
c00196fd:	74 cc                	je     c00196cb <CPU::detectFeatures()+0x379>
c00196ff:	51                   	push   ecx
c0019700:	51                   	push   ecx
c0019701:	68 6e c4 02 c0       	push   0xc002c46e
c0019706:	55                   	push   ebp
c0019707:	e8 a8 71 fe ff       	call   c00008b4 <strcmp>
c001970c:	83 c4 10             	add    esp,0x10
c001970f:	85 c0                	test   eax,eax
c0019711:	74 b8                	je     c00196cb <CPU::detectFeatures()+0x379>
c0019713:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001971d:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0019722:	0f 86 be 00 00 00    	jbe    c00197e6 <CPU::detectFeatures()+0x494>
c0019728:	83 ec 0c             	sub    esp,0xc
c001972b:	68 80 00 00 00       	push   0x80
c0019730:	e8 b7 f8 ff ff       	call   c0018fec <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019735:	83 e0 01             	and    eax,0x1
c0019738:	c1 e0 06             	shl    eax,0x6
c001973b:	88 c2                	mov    dl,al
c001973d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019743:	83 e0 bf             	and    eax,0xffffffbf
c0019746:	09 d0                	or     eax,edx
c0019748:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001974e:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0019755:	e8 92 f8 ff ff       	call   c0018fec <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001975a:	83 e0 01             	and    eax,0x1
c001975d:	c1 e0 04             	shl    eax,0x4
c0019760:	88 c2                	mov    dl,al
c0019762:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019768:	83 e0 ef             	and    eax,0xffffffef
c001976b:	09 d0                	or     eax,edx
c001976d:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019773:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001977a:	e8 6d f8 ff ff       	call   c0018fec <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001977f:	c1 e0 07             	shl    eax,0x7
c0019782:	88 c2                	mov    dl,al
c0019784:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001978a:	83 e0 7f             	and    eax,0x7f
c001978d:	09 d0                	or     eax,edx
c001978f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019795:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001979c:	e8 79 f8 ff ff       	call   c001901a <CPU::cpuidCheckExtendedECX(unsigned int)>
c00197a1:	83 e0 01             	and    eax,0x1
c00197a4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00197ab:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00197b1:	83 e0 f7             	and    eax,0xfffffff7
c00197b4:	09 d0                	or     eax,edx
c00197b6:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00197bc:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00197c3:	e8 52 f8 ff ff       	call   c001901a <CPU::cpuidCheckExtendedECX(unsigned int)>
c00197c8:	83 c4 10             	add    esp,0x10
c00197cb:	83 e0 01             	and    eax,0x1
c00197ce:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00197d5:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00197db:	83 e0 fb             	and    eax,0xfffffffb
c00197de:	09 d0                	or     eax,edx
c00197e0:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00197e6:	83 ec 0c             	sub    esp,0xc
c00197e9:	8d 44 24 28          	lea    eax,[esp+0x28]
c00197ed:	50                   	push   eax
c00197ee:	8d 44 24 28          	lea    eax,[esp+0x28]
c00197f2:	50                   	push   eax
c00197f3:	8d 74 24 28          	lea    esi,[esp+0x28]
c00197f7:	56                   	push   esi
c00197f8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00197fc:	50                   	push   eax
c00197fd:	6a 01                	push   0x1
c00197ff:	e8 08 f7 ff ff       	call   c0018f0c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019804:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019808:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001980e:	88 ca                	mov    dl,cl
c0019810:	83 e0 f0             	and    eax,0xfffffff0
c0019813:	83 e2 0f             	and    edx,0xf
c0019816:	09 d0                	or     eax,edx
c0019818:	88 ca                	mov    dl,cl
c001981a:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019820:	c0 ea 04             	shr    dl,0x4
c0019823:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019827:	0f b6 c2             	movzx  eax,dl
c001982a:	83 c4 20             	add    esp,0x20
c001982d:	c1 e0 06             	shl    eax,0x6
c0019830:	89 c7                	mov    edi,eax
c0019832:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019838:	66 25 3f c0          	and    ax,0xc03f
c001983c:	09 f8                	or     eax,edi
c001983e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019845:	89 c8                	mov    eax,ecx
c0019847:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c001984e:	c1 e8 08             	shr    eax,0x8
c0019851:	83 e5 3f             	and    ebp,0x3f
c0019854:	83 e0 0f             	and    eax,0xf
c0019857:	89 c7                	mov    edi,eax
c0019859:	c1 e7 06             	shl    edi,0x6
c001985c:	09 ef                	or     edi,ebp
c001985e:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0019865:	89 fa                	mov    edx,edi
c0019867:	83 e5 c0             	and    ebp,0xffffffc0
c001986a:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0019870:	88 c2                	mov    dl,al
c0019872:	c0 ea 02             	shr    dl,0x2
c0019875:	89 d7                	mov    edi,edx
c0019877:	09 ef                	or     edi,ebp
c0019879:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001987f:	89 fa                	mov    edx,edi
c0019881:	83 e5 cf             	and    ebp,0xffffffcf
c0019884:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001988a:	89 cf                	mov    edi,ecx
c001988c:	c1 ef 0c             	shr    edi,0xc
c001988f:	83 e7 03             	and    edi,0x3
c0019892:	c1 e7 04             	shl    edi,0x4
c0019895:	09 ef                	or     edi,ebp
c0019897:	3c 06                	cmp    al,0x6
c0019899:	89 fa                	mov    edx,edi
c001989b:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00198a1:	74 04                	je     c00198a7 <CPU::detectFeatures()+0x555>
c00198a3:	3c 0f                	cmp    al,0xf
c00198a5:	75 5c                	jne    c0019903 <CPU::detectFeatures()+0x5b1>
c00198a7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00198ab:	89 cf                	mov    edi,ecx
c00198ad:	c1 ef 10             	shr    edi,0x10
c00198b0:	c1 e7 04             	shl    edi,0x4
c00198b3:	09 fa                	or     edx,edi
c00198b5:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c00198bb:	0f b6 d2             	movzx  edx,dl
c00198be:	66 81 e7 3f c0       	and    di,0xc03f
c00198c3:	c1 e2 06             	shl    edx,0x6
c00198c6:	09 fa                	or     edx,edi
c00198c8:	3c 0f                	cmp    al,0xf
c00198ca:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00198d1:	75 30                	jne    c0019903 <CPU::detectFeatures()+0x5b1>
c00198d3:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00198d9:	c1 e9 14             	shr    ecx,0x14
c00198dc:	83 e0 3f             	and    eax,0x3f
c00198df:	83 c1 0f             	add    ecx,0xf
c00198e2:	88 ca                	mov    dl,cl
c00198e4:	c0 e9 02             	shr    cl,0x2
c00198e7:	c1 e2 06             	shl    edx,0x6
c00198ea:	09 d0                	or     eax,edx
c00198ec:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00198f2:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00198f8:	83 e0 c0             	and    eax,0xffffffc0
c00198fb:	09 c1                	or     ecx,eax
c00198fd:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019903:	83 ec 0c             	sub    esp,0xc
c0019906:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001990d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019911:	50                   	push   eax
c0019912:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019916:	55                   	push   ebp
c0019917:	56                   	push   esi
c0019918:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001991c:	57                   	push   edi
c001991d:	68 00 00 00 80       	push   0x80000000
c0019922:	e8 e5 f5 ff ff       	call   c0018f0c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019927:	83 c4 20             	add    esp,0x20
c001992a:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019932:	76 22                	jbe    c0019956 <CPU::detectFeatures()+0x604>
c0019934:	83 ec 0c             	sub    esp,0xc
c0019937:	8d 44 24 28          	lea    eax,[esp+0x28]
c001993b:	50                   	push   eax
c001993c:	55                   	push   ebp
c001993d:	56                   	push   esi
c001993e:	57                   	push   edi
c001993f:	68 01 00 00 80       	push   0x80000001
c0019944:	e8 c3 f5 ff ff       	call   c0018f0c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019949:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019953:	83 c4 20             	add    esp,0x20
c0019956:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001995c:	83 f8 01             	cmp    eax,0x1
c001995f:	75 6f                	jne    c00199d0 <CPU::detectFeatures()+0x67e>
c0019961:	51                   	push   ecx
c0019962:	51                   	push   ecx
c0019963:	68 7a c4 02 c0       	push   0xc002c47a
c0019968:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001996c:	56                   	push   esi
c001996d:	e8 b6 6e fe ff       	call   c0000828 <strcpy>
c0019972:	5f                   	pop    edi
c0019973:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019979:	5d                   	pop    ebp
c001997a:	66 c1 e8 06          	shr    ax,0x6
c001997e:	0f b6 c0             	movzx  eax,al
c0019981:	50                   	push   eax
c0019982:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019988:	c1 e8 0e             	shr    eax,0xe
c001998b:	0f b6 c0             	movzx  eax,al
c001998e:	50                   	push   eax
c001998f:	e8 22 f2 ff ff       	call   c0018bb6 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019994:	5a                   	pop    edx
c0019995:	59                   	pop    ecx
c0019996:	50                   	push   eax
c0019997:	56                   	push   esi
c0019998:	e8 cb 6f fe ff       	call   c0000968 <strcat>
c001999d:	5f                   	pop    edi
c001999e:	5d                   	pop    ebp
c001999f:	56                   	push   esi
c00199a0:	53                   	push   ebx
c00199a1:	e8 e2 aa ff ff       	call   c0014488 <Device::setName(char const*)>
c00199a6:	58                   	pop    eax
c00199a7:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00199ad:	5a                   	pop    edx
c00199ae:	68 81 c4 02 c0       	push   0xc002c481
c00199b3:	50                   	push   eax
c00199b4:	e8 fb 6e fe ff       	call   c00008b4 <strcmp>
c00199b9:	83 c4 10             	add    esp,0x10
c00199bc:	85 c0                	test   eax,eax
c00199be:	0f 85 71 03 00 00    	jne    c0019d35 <CPU::detectFeatures()+0x9e3>
c00199c4:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00199cb:	e9 65 03 00 00       	jmp    c0019d35 <CPU::detectFeatures()+0x9e3>
c00199d0:	83 f8 02             	cmp    eax,0x2
c00199d3:	0f 85 b5 00 00 00    	jne    c0019a8e <CPU::detectFeatures()+0x73c>
c00199d9:	57                   	push   edi
c00199da:	57                   	push   edi
c00199db:	68 93 c4 02 c0       	push   0xc002c493
c00199e0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00199e4:	56                   	push   esi
c00199e5:	e8 3e 6e fe ff       	call   c0000828 <strcpy>
c00199ea:	5d                   	pop    ebp
c00199eb:	58                   	pop    eax
c00199ec:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00199f2:	66 c1 e8 06          	shr    ax,0x6
c00199f6:	0f b6 c0             	movzx  eax,al
c00199f9:	50                   	push   eax
c00199fa:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019a00:	c1 e8 0e             	shr    eax,0xe
c0019a03:	0f b6 c0             	movzx  eax,al
c0019a06:	50                   	push   eax
c0019a07:	e8 16 f0 ff ff       	call   c0018a22 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019a0c:	5a                   	pop    edx
c0019a0d:	59                   	pop    ecx
c0019a0e:	50                   	push   eax
c0019a0f:	56                   	push   esi
c0019a10:	e8 53 6f fe ff       	call   c0000968 <strcat>
c0019a15:	5f                   	pop    edi
c0019a16:	5d                   	pop    ebp
c0019a17:	56                   	push   esi
c0019a18:	53                   	push   ebx
c0019a19:	e8 6a aa ff ff       	call   c0014488 <Device::setName(char const*)>
c0019a1e:	58                   	pop    eax
c0019a1f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019a25:	5a                   	pop    edx
c0019a26:	68 98 c4 02 c0       	push   0xc002c498
c0019a2b:	50                   	push   eax
c0019a2c:	e8 83 6e fe ff       	call   c00008b4 <strcmp>
c0019a31:	83 c4 10             	add    esp,0x10
c0019a34:	85 c0                	test   eax,eax
c0019a36:	75 20                	jne    c0019a58 <CPU::detectFeatures()+0x706>
c0019a38:	8b 15 68 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f068
c0019a3e:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019a44:	a8 01                	test   al,0x1
c0019a46:	74 10                	je     c0019a58 <CPU::detectFeatures()+0x706>
c0019a48:	83 e0 fe             	and    eax,0xfffffffe
c0019a4b:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019a51:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019a58:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019a5e:	c1 e8 0e             	shr    eax,0xe
c0019a61:	3c 05                	cmp    al,0x5
c0019a63:	0f 85 cc 02 00 00    	jne    c0019d35 <CPU::detectFeatures()+0x9e3>
c0019a69:	56                   	push   esi
c0019a6a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019a70:	83 e0 0f             	and    eax,0xf
c0019a73:	50                   	push   eax
c0019a74:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019a7a:	66 c1 e8 06          	shr    ax,0x6
c0019a7e:	0f b6 c0             	movzx  eax,al
c0019a81:	50                   	push   eax
c0019a82:	6a 05                	push   0x5
c0019a84:	e8 0f f4 ff ff       	call   c0018e98 <CPU::AMD_K6_writeback(int, int, int)>
c0019a89:	e9 1f 02 00 00       	jmp    c0019cad <CPU::detectFeatures()+0x95b>
c0019a8e:	8d 50 fd             	lea    edx,[eax-0x3]
c0019a91:	83 fa 01             	cmp    edx,0x1
c0019a94:	76 09                	jbe    c0019a9f <CPU::detectFeatures()+0x74d>
c0019a96:	83 f8 06             	cmp    eax,0x6
c0019a99:	0f 85 91 01 00 00    	jne    c0019c30 <CPU::detectFeatures()+0x8de>
c0019a9f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019aa5:	c1 ea 0e             	shr    edx,0xe
c0019aa8:	80 fa 05             	cmp    dl,0x5
c0019aab:	75 7b                	jne    c0019b28 <CPU::detectFeatures()+0x7d6>
c0019aad:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019ab3:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019ab8:	66 81 fa 00 01       	cmp    dx,0x100
c0019abd:	75 0c                	jne    c0019acb <CPU::detectFeatures()+0x779>
c0019abf:	51                   	push   ecx
c0019ac0:	51                   	push   ecx
c0019ac1:	68 9f c4 02 c0       	push   0xc002c49f
c0019ac6:	e9 dc 01 00 00       	jmp    c0019ca7 <CPU::detectFeatures()+0x955>
c0019acb:	66 81 fa 00 02       	cmp    dx,0x200
c0019ad0:	75 0c                	jne    c0019ade <CPU::detectFeatures()+0x78c>
c0019ad2:	52                   	push   edx
c0019ad3:	52                   	push   edx
c0019ad4:	68 b2 c4 02 c0       	push   0xc002c4b2
c0019ad9:	e9 c9 01 00 00       	jmp    c0019ca7 <CPU::detectFeatures()+0x955>
c0019ade:	66 81 fa 40 02       	cmp    dx,0x240
c0019ae3:	75 0c                	jne    c0019af1 <CPU::detectFeatures()+0x79f>
c0019ae5:	50                   	push   eax
c0019ae6:	50                   	push   eax
c0019ae7:	68 c4 c4 02 c0       	push   0xc002c4c4
c0019aec:	e9 b6 01 00 00       	jmp    c0019ca7 <CPU::detectFeatures()+0x955>
c0019af1:	83 f8 06             	cmp    eax,0x6
c0019af4:	75 0c                	jne    c0019b02 <CPU::detectFeatures()+0x7b0>
c0019af6:	50                   	push   eax
c0019af7:	50                   	push   eax
c0019af8:	68 d6 c4 02 c0       	push   0xc002c4d6
c0019afd:	e9 a5 01 00 00       	jmp    c0019ca7 <CPU::detectFeatures()+0x955>
c0019b02:	83 f8 04             	cmp    eax,0x4
c0019b05:	75 0c                	jne    c0019b13 <CPU::detectFeatures()+0x7c1>
c0019b07:	50                   	push   eax
c0019b08:	50                   	push   eax
c0019b09:	68 e2 c4 02 c0       	push   0xc002c4e2
c0019b0e:	e9 94 01 00 00       	jmp    c0019ca7 <CPU::detectFeatures()+0x955>
c0019b13:	83 f8 03             	cmp    eax,0x3
c0019b16:	0f 85 19 02 00 00    	jne    c0019d35 <CPU::detectFeatures()+0x9e3>
c0019b1c:	50                   	push   eax
c0019b1d:	50                   	push   eax
c0019b1e:	68 ea c4 02 c0       	push   0xc002c4ea
c0019b23:	e9 7f 01 00 00       	jmp    c0019ca7 <CPU::detectFeatures()+0x955>
c0019b28:	80 fa 06             	cmp    dl,0x6
c0019b2b:	0f 85 db 00 00 00    	jne    c0019c0c <CPU::detectFeatures()+0x8ba>
c0019b31:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019b37:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019b3c:	66 81 fa 80 01       	cmp    dx,0x180
c0019b41:	75 0c                	jne    c0019b4f <CPU::detectFeatures()+0x7fd>
c0019b43:	50                   	push   eax
c0019b44:	50                   	push   eax
c0019b45:	68 f5 c4 02 c0       	push   0xc002c4f5
c0019b4a:	e9 58 01 00 00       	jmp    c0019ca7 <CPU::detectFeatures()+0x955>
c0019b4f:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019b55:	66 f7 c1 80 ff       	test   cx,0xff80
c0019b5a:	75 0c                	jne    c0019b68 <CPU::detectFeatures()+0x816>
c0019b5c:	50                   	push   eax
c0019b5d:	50                   	push   eax
c0019b5e:	68 05 c5 02 c0       	push   0xc002c505
c0019b63:	e9 3f 01 00 00       	jmp    c0019ca7 <CPU::detectFeatures()+0x955>
c0019b68:	66 81 fa 40 02       	cmp    dx,0x240
c0019b6d:	75 0c                	jne    c0019b7b <CPU::detectFeatures()+0x829>
c0019b6f:	55                   	push   ebp
c0019b70:	55                   	push   ebp
c0019b71:	68 0c c5 02 c0       	push   0xc002c50c
c0019b76:	e9 2c 01 00 00       	jmp    c0019ca7 <CPU::detectFeatures()+0x955>
c0019b7b:	66 81 fa 80 02       	cmp    dx,0x280
c0019b80:	75 0c                	jne    c0019b8e <CPU::detectFeatures()+0x83c>
c0019b82:	57                   	push   edi
c0019b83:	57                   	push   edi
c0019b84:	68 15 c5 02 c0       	push   0xc002c515
c0019b89:	e9 19 01 00 00       	jmp    c0019ca7 <CPU::detectFeatures()+0x955>
c0019b8e:	66 81 fa 40 03       	cmp    dx,0x340
c0019b93:	74 ed                	je     c0019b82 <CPU::detectFeatures()+0x830>
c0019b95:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019b9a:	75 0c                	jne    c0019ba8 <CPU::detectFeatures()+0x856>
c0019b9c:	56                   	push   esi
c0019b9d:	56                   	push   esi
c0019b9e:	68 1c c5 02 c0       	push   0xc002c51c
c0019ba3:	e9 ff 00 00 00       	jmp    c0019ca7 <CPU::detectFeatures()+0x955>
c0019ba8:	83 f8 06             	cmp    eax,0x6
c0019bab:	0f 84 45 ff ff ff    	je     c0019af6 <CPU::detectFeatures()+0x7a4>
c0019bb1:	83 f8 04             	cmp    eax,0x4
c0019bb4:	0f 84 4d ff ff ff    	je     c0019b07 <CPU::detectFeatures()+0x7b5>
c0019bba:	83 f8 03             	cmp    eax,0x3
c0019bbd:	0f 85 72 01 00 00    	jne    c0019d35 <CPU::detectFeatures()+0x9e3>
c0019bc3:	51                   	push   ecx
c0019bc4:	51                   	push   ecx
c0019bc5:	68 25 c5 02 c0       	push   0xc002c525
c0019bca:	53                   	push   ebx
c0019bcb:	e8 b8 a8 ff ff       	call   c0014488 <Device::setName(char const*)>
c0019bd0:	b1 c1                	mov    cl,0xc1
c0019bd2:	88 c8                	mov    al,cl
c0019bd4:	e6 22                	out    0x22,al
c0019bd6:	e4 23                	in     al,0x23
c0019bd8:	88 c2                	mov    dl,al
c0019bda:	88 c8                	mov    al,cl
c0019bdc:	e6 22                	out    0x22,al
c0019bde:	88 d0                	mov    al,dl
c0019be0:	83 c8 10             	or     eax,0x10
c0019be3:	e6 23                	out    0x23,al
c0019be5:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019bec:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019bef:	89 d0                	mov    eax,edx
c0019bf1:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019bf7:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019bfb:	40                   	inc    eax
c0019bfc:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019c02:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019c07:	e9 a1 00 00 00       	jmp    c0019cad <CPU::detectFeatures()+0x95b>
c0019c0c:	83 f8 06             	cmp    eax,0x6
c0019c0f:	0f 84 e1 fe ff ff    	je     c0019af6 <CPU::detectFeatures()+0x7a4>
c0019c15:	83 f8 04             	cmp    eax,0x4
c0019c18:	0f 84 e9 fe ff ff    	je     c0019b07 <CPU::detectFeatures()+0x7b5>
c0019c1e:	83 f8 03             	cmp    eax,0x3
c0019c21:	0f 85 0e 01 00 00    	jne    c0019d35 <CPU::detectFeatures()+0x9e3>
c0019c27:	52                   	push   edx
c0019c28:	52                   	push   edx
c0019c29:	68 30 c5 02 c0       	push   0xc002c530
c0019c2e:	eb 77                	jmp    c0019ca7 <CPU::detectFeatures()+0x955>
c0019c30:	83 f8 07             	cmp    eax,0x7
c0019c33:	75 09                	jne    c0019c3e <CPU::detectFeatures()+0x8ec>
c0019c35:	50                   	push   eax
c0019c36:	50                   	push   eax
c0019c37:	68 3a c5 02 c0       	push   0xc002c53a
c0019c3c:	eb 69                	jmp    c0019ca7 <CPU::detectFeatures()+0x955>
c0019c3e:	83 f8 0a             	cmp    eax,0xa
c0019c41:	75 09                	jne    c0019c4c <CPU::detectFeatures()+0x8fa>
c0019c43:	50                   	push   eax
c0019c44:	50                   	push   eax
c0019c45:	68 45 c5 02 c0       	push   0xc002c545
c0019c4a:	eb 5b                	jmp    c0019ca7 <CPU::detectFeatures()+0x955>
c0019c4c:	83 f8 0b             	cmp    eax,0xb
c0019c4f:	75 09                	jne    c0019c5a <CPU::detectFeatures()+0x908>
c0019c51:	50                   	push   eax
c0019c52:	50                   	push   eax
c0019c53:	68 4d c5 02 c0       	push   0xc002c54d
c0019c58:	eb 4d                	jmp    c0019ca7 <CPU::detectFeatures()+0x955>
c0019c5a:	83 f8 08             	cmp    eax,0x8
c0019c5d:	75 09                	jne    c0019c68 <CPU::detectFeatures()+0x916>
c0019c5f:	50                   	push   eax
c0019c60:	50                   	push   eax
c0019c61:	68 56 c5 02 c0       	push   0xc002c556
c0019c66:	eb 3f                	jmp    c0019ca7 <CPU::detectFeatures()+0x955>
c0019c68:	83 f8 09             	cmp    eax,0x9
c0019c6b:	75 09                	jne    c0019c76 <CPU::detectFeatures()+0x924>
c0019c6d:	50                   	push   eax
c0019c6e:	50                   	push   eax
c0019c6f:	68 5e c5 02 c0       	push   0xc002c55e
c0019c74:	eb 31                	jmp    c0019ca7 <CPU::detectFeatures()+0x955>
c0019c76:	83 f8 05             	cmp    eax,0x5
c0019c79:	75 09                	jne    c0019c84 <CPU::detectFeatures()+0x932>
c0019c7b:	50                   	push   eax
c0019c7c:	50                   	push   eax
c0019c7d:	68 66 c5 02 c0       	push   0xc002c566
c0019c82:	eb 23                	jmp    c0019ca7 <CPU::detectFeatures()+0x955>
c0019c84:	83 f8 0c             	cmp    eax,0xc
c0019c87:	75 09                	jne    c0019c92 <CPU::detectFeatures()+0x940>
c0019c89:	55                   	push   ebp
c0019c8a:	55                   	push   ebp
c0019c8b:	68 74 c5 02 c0       	push   0xc002c574
c0019c90:	eb 15                	jmp    c0019ca7 <CPU::detectFeatures()+0x955>
c0019c92:	83 f8 0d             	cmp    eax,0xd
c0019c95:	75 09                	jne    c0019ca0 <CPU::detectFeatures()+0x94e>
c0019c97:	57                   	push   edi
c0019c98:	57                   	push   edi
c0019c99:	68 7f c5 02 c0       	push   0xc002c57f
c0019c9e:	eb 07                	jmp    c0019ca7 <CPU::detectFeatures()+0x955>
c0019ca0:	56                   	push   esi
c0019ca1:	56                   	push   esi
c0019ca2:	68 93 c5 02 c0       	push   0xc002c593
c0019ca7:	53                   	push   ebx
c0019ca8:	e8 db a7 ff ff       	call   c0014488 <Device::setName(char const*)>
c0019cad:	83 c4 10             	add    esp,0x10
c0019cb0:	e9 80 00 00 00       	jmp    c0019d35 <CPU::detectFeatures()+0x9e3>
c0019cb5:	51                   	push   ecx
c0019cb6:	51                   	push   ecx
c0019cb7:	68 df c3 02 c0       	push   0xc002c3df
c0019cbc:	55                   	push   ebp
c0019cbd:	e8 66 6b fe ff       	call   c0000828 <strcpy>
c0019cc2:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019ccc:	e8 dd 65 fe ff       	call   c00002ae <is486>
c0019cd1:	83 c4 10             	add    esp,0x10
c0019cd4:	85 c0                	test   eax,eax
c0019cd6:	74 2b                	je     c0019d03 <CPU::detectFeatures()+0x9b1>
c0019cd8:	52                   	push   edx
c0019cd9:	52                   	push   edx
c0019cda:	68 9f c5 02 c0       	push   0xc002c59f
c0019cdf:	53                   	push   ebx
c0019ce0:	e8 a3 a7 ff ff       	call   c0014488 <Device::setName(char const*)>
c0019ce5:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019cec:	0f 20 c0             	mov    eax,cr0
c0019cef:	83 e0 14             	and    eax,0x14
c0019cf2:	83 c4 10             	add    esp,0x10
c0019cf5:	83 f8 04             	cmp    eax,0x4
c0019cf8:	75 1f                	jne    c0019d19 <CPU::detectFeatures()+0x9c7>
c0019cfa:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019d01:	eb 32                	jmp    c0019d35 <CPU::detectFeatures()+0x9e3>
c0019d03:	50                   	push   eax
c0019d04:	50                   	push   eax
c0019d05:	68 aa c5 02 c0       	push   0xc002c5aa
c0019d0a:	53                   	push   ebx
c0019d0b:	e8 78 a7 ff ff       	call   c0014488 <Device::setName(char const*)>
c0019d10:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019d17:	eb d3                	jmp    c0019cec <CPU::detectFeatures()+0x99a>
c0019d19:	e8 6b 65 fe ff       	call   c0000289 <hasLegacyFPU>
c0019d1e:	83 e0 01             	and    eax,0x1
c0019d21:	8d 14 00             	lea    edx,[eax+eax*1]
c0019d24:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019d2a:	83 e0 fd             	and    eax,0xfffffffd
c0019d2d:	09 d0                	or     eax,edx
c0019d2f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019d35:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019d3c:	83 c4 4c             	add    esp,0x4c
c0019d3f:	5b                   	pop    ebx
c0019d40:	5e                   	pop    esi
c0019d41:	5f                   	pop    edi
c0019d42:	5d                   	pop    ebp
c0019d43:	c3                   	ret    

c0019d44 <CPU::setupSMEP()>:
c0019d44:	0f 20 e0             	mov    eax,cr4
c0019d47:	0d 00 00 10 00       	or     eax,0x100000
c0019d4c:	0f 22 e0             	mov    cr4,eax
c0019d4f:	c3                   	ret    

c0019d50 <CPU::setupUMIP()>:
c0019d50:	0f 20 e0             	mov    eax,cr4
c0019d53:	80 cc 08             	or     ah,0x8
c0019d56:	0f 22 e0             	mov    cr4,eax
c0019d59:	c3                   	ret    

c0019d5a <CPU::setupTSC()>:
c0019d5a:	0f 20 e0             	mov    eax,cr4
c0019d5d:	83 c8 04             	or     eax,0x4
c0019d60:	0f 22 e0             	mov    cr4,eax
c0019d63:	c3                   	ret    

c0019d64 <CPU::setupLargePages()>:
c0019d64:	0f 20 e0             	mov    eax,cr4
c0019d67:	83 c8 10             	or     eax,0x10
c0019d6a:	0f 22 e0             	mov    cr4,eax
c0019d6d:	c3                   	ret    

c0019d6e <CPU::setupPAT()>:
c0019d6e:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c0019d73:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019d7a:	74 2c                	je     c0019da8 <CPU::setupPAT()+0x3a>
c0019d7c:	53                   	push   ebx
c0019d7d:	83 ec 10             	sub    esp,0x10
c0019d80:	68 77 02 00 00       	push   0x277
c0019d85:	50                   	push   eax
c0019d86:	e8 f5 50 ff ff       	call   c000ee80 <Computer::rdmsr(unsigned int)>
c0019d8b:	83 e2 f8             	and    edx,0xfffffff8
c0019d8e:	83 ca 01             	or     edx,0x1
c0019d91:	52                   	push   edx
c0019d92:	50                   	push   eax
c0019d93:	68 77 02 00 00       	push   0x277
c0019d98:	ff 35 68 f0 02 c0    	push   DWORD PTR ds:0xc002f068
c0019d9e:	e8 09 51 ff ff       	call   c000eeac <Computer::wrmsr(unsigned int, unsigned long long)>
c0019da3:	83 c4 28             	add    esp,0x28
c0019da6:	5b                   	pop    ebx
c0019da7:	c3                   	ret    
c0019da8:	c3                   	ret    
c0019da9:	90                   	nop

c0019daa <CPU::setupMTRR()>:
c0019daa:	c3                   	ret    
c0019dab:	90                   	nop

c0019dac <CPU::setupGlobalPages()>:
c0019dac:	0f 20 e0             	mov    eax,cr4
c0019daf:	0c 80                	or     al,0x80
c0019db1:	0f 22 e0             	mov    cr4,eax
c0019db4:	c3                   	ret    
c0019db5:	90                   	nop

c0019db6 <CPU::allowUsermodeDataAccess()>:
c0019db6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019dba:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019dc1:	74 03                	je     c0019dc6 <CPU::allowUsermodeDataAccess()+0x10>
c0019dc3:	0f 01 cb             	stac   
c0019dc6:	c3                   	ret    
c0019dc7:	90                   	nop

c0019dc8 <CPU::prohibitUsermodeDataAccess()>:
c0019dc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019dcc:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019dd3:	74 03                	je     c0019dd8 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019dd5:	0f 01 ca             	clac   
c0019dd8:	c3                   	ret    
c0019dd9:	90                   	nop

c0019dda <CPU::setupSMAP()>:
c0019dda:	0f 20 e0             	mov    eax,cr4
c0019ddd:	0d 00 00 20 00       	or     eax,0x200000
c0019de2:	0f 22 e0             	mov    cr4,eax
c0019de5:	eb e1                	jmp    c0019dc8 <CPU::prohibitUsermodeDataAccess()>
c0019de7:	90                   	nop

c0019de8 <CPU::setupFeatures()>:
c0019de8:	83 ec 0c             	sub    esp,0xc
c0019deb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019def:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019df6:	74 07                	je     c0019dff <CPU::setupFeatures()+0x17>
c0019df8:	52                   	push   edx
c0019df9:	e8 46 ff ff ff       	call   c0019d44 <CPU::setupSMEP()>
c0019dfe:	58                   	pop    eax
c0019dff:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019e06:	74 07                	je     c0019e0f <CPU::setupFeatures()+0x27>
c0019e08:	52                   	push   edx
c0019e09:	e8 cc ff ff ff       	call   c0019dda <CPU::setupSMAP()>
c0019e0e:	58                   	pop    eax
c0019e0f:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019e16:	74 07                	je     c0019e1f <CPU::setupFeatures()+0x37>
c0019e18:	52                   	push   edx
c0019e19:	e8 32 ff ff ff       	call   c0019d50 <CPU::setupUMIP()>
c0019e1e:	58                   	pop    eax
c0019e1f:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019e26:	74 07                	je     c0019e2f <CPU::setupFeatures()+0x47>
c0019e28:	52                   	push   edx
c0019e29:	e8 2c ff ff ff       	call   c0019d5a <CPU::setupTSC()>
c0019e2e:	58                   	pop    eax
c0019e2f:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019e36:	74 07                	je     c0019e3f <CPU::setupFeatures()+0x57>
c0019e38:	52                   	push   edx
c0019e39:	e8 26 ff ff ff       	call   c0019d64 <CPU::setupLargePages()>
c0019e3e:	59                   	pop    ecx
c0019e3f:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019e46:	74 07                	je     c0019e4f <CPU::setupFeatures()+0x67>
c0019e48:	52                   	push   edx
c0019e49:	e8 5e ff ff ff       	call   c0019dac <CPU::setupGlobalPages()>
c0019e4e:	58                   	pop    eax
c0019e4f:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019e56:	74 0c                	je     c0019e64 <CPU::setupFeatures()+0x7c>
c0019e58:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019e5c:	83 c4 0c             	add    esp,0xc
c0019e5f:	e9 0a ff ff ff       	jmp    c0019d6e <CPU::setupPAT()>
c0019e64:	83 c4 0c             	add    esp,0xc
c0019e67:	c3                   	ret    

c0019e68 <CPU::open(int, int, void*)>:
c0019e68:	57                   	push   edi
c0019e69:	56                   	push   esi
c0019e6a:	53                   	push   ebx
c0019e6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e6f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019e73:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019e79:	83 ec 0c             	sub    esp,0xc
c0019e7c:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019e82:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019e88:	50                   	push   eax
c0019e89:	e8 de 52 ff ff       	call   c000f16c <GDT::setup()>
c0019e8e:	83 c4 0c             	add    esp,0xc
c0019e91:	6a 00                	push   0x0
c0019e93:	68 ef be ad de       	push   0xdeadbeef
c0019e98:	57                   	push   edi
c0019e99:	e8 52 75 ff ff       	call   c00113f0 <TSS::setup(unsigned long, unsigned long)>
c0019e9e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019ea1:	e8 2a 75 ff ff       	call   c00113d0 <TSS::flush()>
c0019ea6:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019eac:	89 04 24             	mov    DWORD PTR [esp],eax
c0019eaf:	e8 1c 55 ff ff       	call   c000f3d0 <IDT::setup()>
c0019eb4:	b8 00 04 00 00       	mov    eax,0x400
c0019eb9:	0f 23 f8             	mov    db7,eax
c0019ebc:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019ec6:	e8 7b 60 ff ff       	call   c000ff46 <Phys::allocatePage()>
c0019ecb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019ed1:	89 30                	mov    DWORD PTR [eax],esi
c0019ed3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019ed9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019edc:	58                   	pop    eax
c0019edd:	5a                   	pop    edx
c0019ede:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019ee4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019ee8:	e8 a3 86 ff ff       	call   c0012590 <VAS::setCPUSpecific(unsigned long)>
c0019eed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ef0:	e8 5d f4 ff ff       	call   c0019352 <CPU::detectFeatures()>
c0019ef5:	e8 e5 b9 ff ff       	call   c00158df <setupInterruptController()>
c0019efa:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019f00:	a1 80 f0 02 c0       	mov    eax,ds:0xc002f080
c0019f05:	83 e0 10             	and    eax,0x10
c0019f08:	83 f8 01             	cmp    eax,0x1
c0019f0b:	19 c0                	sbb    eax,eax
c0019f0d:	83 e0 46             	and    eax,0x46
c0019f10:	83 c0 1e             	add    eax,0x1e
c0019f13:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f16:	e8 1c d0 ff ff       	call   c0016f37 <setupTimer(int)>
c0019f1b:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019f21:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f24:	e8 bf fe ff ff       	call   c0019de8 <CPU::setupFeatures()>
c0019f29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f2c:	e8 a5 f1 ff ff       	call   c00190d6 <CPU::displayFeatures()>
c0019f31:	83 c4 10             	add    esp,0x10
c0019f34:	31 c0                	xor    eax,eax
c0019f36:	5b                   	pop    ebx
c0019f37:	5e                   	pop    esi
c0019f38:	5f                   	pop    edi
c0019f39:	c3                   	ret    

c0019f3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019f3a:	57                   	push   edi
c0019f3b:	56                   	push   esi
c0019f3c:	53                   	push   ebx
c0019f3d:	51                   	push   ecx
c0019f3e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019f42:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019f45:	0f 02 c0             	lar    eax,ax
c0019f48:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019f4b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019f4f:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019f52:	88 ca                	mov    dl,cl
c0019f54:	c0 ea 06             	shr    dl,0x6
c0019f57:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019f5b:	89 ca                	mov    edx,ecx
c0019f5d:	66 c1 ea 03          	shr    dx,0x3
c0019f61:	83 e2 07             	and    edx,0x7
c0019f64:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019f69:	88 17                	mov    BYTE PTR [edi],dl
c0019f6b:	0f 84 a6 01 00 00    	je     c001a117 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019f71:	83 e1 07             	and    ecx,0x7
c0019f74:	80 f9 04             	cmp    cl,0x4
c0019f77:	0f 84 98 00 00 00    	je     c001a015 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019f7d:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019f82:	0f 95 c0             	setne  al
c0019f85:	80 f9 05             	cmp    cl,0x5
c0019f88:	0f 95 c2             	setne  dl
c0019f8b:	08 c2                	or     dl,al
c0019f8d:	74 79                	je     c001a008 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019f8f:	84 c9                	test   cl,cl
c0019f91:	75 05                	jne    c0019f98 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019f93:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019f96:	eb 3c                	jmp    c0019fd4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019f98:	80 f9 01             	cmp    cl,0x1
c0019f9b:	75 05                	jne    c0019fa2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019f9d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019fa0:	eb 32                	jmp    c0019fd4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fa2:	80 f9 02             	cmp    cl,0x2
c0019fa5:	75 05                	jne    c0019fac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019fa7:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019faa:	eb 28                	jmp    c0019fd4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fac:	31 c0                	xor    eax,eax
c0019fae:	80 f9 03             	cmp    cl,0x3
c0019fb1:	75 05                	jne    c0019fb8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019fb3:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019fb6:	eb 1c                	jmp    c0019fd4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fb8:	80 f9 05             	cmp    cl,0x5
c0019fbb:	75 05                	jne    c0019fc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019fbd:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019fc0:	eb 12                	jmp    c0019fd4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fc2:	80 f9 06             	cmp    cl,0x6
c0019fc5:	75 05                	jne    c0019fcc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019fc7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019fca:	eb 08                	jmp    c0019fd4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fcc:	80 f9 07             	cmp    cl,0x7
c0019fcf:	75 03                	jne    c0019fd4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fd1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019fd4:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019fd9:	75 10                	jne    c0019feb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019fdb:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019fdf:	b9 03 00 00 00       	mov    ecx,0x3
c0019fe4:	01 d0                	add    eax,edx
c0019fe6:	e9 37 01 00 00       	jmp    c001a122 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019feb:	b9 02 00 00 00       	mov    ecx,0x2
c0019ff0:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019ff5:	0f 85 27 01 00 00    	jne    c001a122 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019ffb:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019ffe:	b9 06 00 00 00       	mov    ecx,0x6
c001a003:	e9 1a 01 00 00       	jmp    c001a122 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a008:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001a00b:	b9 06 00 00 00       	mov    ecx,0x6
c001a010:	e9 0f 01 00 00       	jmp    c001a124 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a015:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c001a018:	88 ca                	mov    dl,cl
c001a01a:	c0 ea 06             	shr    dl,0x6
c001a01d:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001a021:	89 ca                	mov    edx,ecx
c001a023:	66 c1 ea 03          	shr    dx,0x3
c001a027:	83 e2 07             	and    edx,0x7
c001a02a:	80 e1 07             	and    cl,0x7
c001a02d:	75 05                	jne    c001a034 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001a02f:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c001a032:	eb 4c                	jmp    c001a080 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a034:	80 f9 01             	cmp    cl,0x1
c001a037:	75 05                	jne    c001a03e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c001a039:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001a03c:	eb 42                	jmp    c001a080 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a03e:	80 f9 02             	cmp    cl,0x2
c001a041:	75 05                	jne    c001a048 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c001a043:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001a046:	eb 38                	jmp    c001a080 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a048:	80 f9 03             	cmp    cl,0x3
c001a04b:	75 05                	jne    c001a052 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001a04d:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001a050:	eb 2e                	jmp    c001a080 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a052:	80 f9 04             	cmp    cl,0x4
c001a055:	75 12                	jne    c001a069 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c001a057:	f6 c4 60             	test   ah,0x60
c001a05a:	75 08                	jne    c001a064 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001a05c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001a05f:	8d 78 14             	lea    edi,[eax+0x14]
c001a062:	eb 1c                	jmp    c001a080 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a064:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001a067:	eb 17                	jmp    c001a080 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a069:	80 f9 05             	cmp    cl,0x5
c001a06c:	75 05                	jne    c001a073 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001a06e:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001a071:	eb 0d                	jmp    c001a080 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a073:	80 f9 06             	cmp    cl,0x6
c001a076:	75 05                	jne    c001a07d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001a078:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001a07b:	eb 03                	jmp    c001a080 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a07d:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a080:	84 d2                	test   dl,dl
c001a082:	75 05                	jne    c001a089 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001a084:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001a087:	eb 3c                	jmp    c001a0c5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a089:	80 fa 01             	cmp    dl,0x1
c001a08c:	75 05                	jne    c001a093 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001a08e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001a091:	eb 32                	jmp    c001a0c5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a093:	80 fa 02             	cmp    dl,0x2
c001a096:	75 05                	jne    c001a09d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001a098:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001a09b:	eb 28                	jmp    c001a0c5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a09d:	80 fa 03             	cmp    dl,0x3
c001a0a0:	75 05                	jne    c001a0a7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001a0a2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a0a5:	eb 1e                	jmp    c001a0c5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0a7:	31 c0                	xor    eax,eax
c001a0a9:	80 fa 04             	cmp    dl,0x4
c001a0ac:	74 17                	je     c001a0c5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0ae:	80 fa 05             	cmp    dl,0x5
c001a0b1:	75 05                	jne    c001a0b8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001a0b3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001a0b6:	eb 0d                	jmp    c001a0c5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0b8:	80 fa 06             	cmp    dl,0x6
c001a0bb:	75 05                	jne    c001a0c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001a0bd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a0c0:	eb 03                	jmp    c001a0c5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0c2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a0c5:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a0ca:	0f 94 c2             	sete   dl
c001a0cd:	80 f9 05             	cmp    cl,0x5
c001a0d0:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001a0d4:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001a0d9:	d3 e0                	shl    eax,cl
c001a0db:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001a0df:	74 0a                	je     c001a0eb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001a0e1:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a0e4:	b9 07 00 00 00       	mov    ecx,0x7
c001a0e9:	eb 37                	jmp    c001a122 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a0eb:	01 f8                	add    eax,edi
c001a0ed:	b9 03 00 00 00       	mov    ecx,0x3
c001a0f2:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a0f7:	74 2b                	je     c001a124 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a0f9:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001a0fe:	75 0d                	jne    c001a10d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001a100:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001a104:	01 c8                	add    eax,ecx
c001a106:	b9 04 00 00 00       	mov    ecx,0x4
c001a10b:	eb 17                	jmp    c001a124 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a10d:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a110:	b9 07 00 00 00       	mov    ecx,0x7
c001a115:	eb 0d                	jmp    c001a124 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a117:	b9 02 00 00 00       	mov    ecx,0x2
c001a11c:	b2 01                	mov    dl,0x1
c001a11e:	31 c0                	xor    eax,eax
c001a120:	eb 02                	jmp    c001a124 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a122:	31 d2                	xor    edx,edx
c001a124:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a128:	89 0b                	mov    DWORD PTR [ebx],ecx
c001a12a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a12e:	88 11                	mov    BYTE PTR [ecx],dl
c001a130:	5a                   	pop    edx
c001a131:	5b                   	pop    ebx
c001a132:	5e                   	pop    esi
c001a133:	5f                   	pop    edi
c001a134:	c3                   	ret    

c001a135 <Krnl::smpEntry()>:
c001a135:	eb fe                	jmp    c001a135 <Krnl::smpEntry()>

c001a137 <Krnl::startCPU(int)>:
c001a137:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c001a13c:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001a143:	0f 84 36 01 00 00    	je     c001a27f <Krnl::startCPU(int)+0x148>
c001a149:	53                   	push   ebx
c001a14a:	83 ec 10             	sub    esp,0x10
c001a14d:	fa                   	cli    
c001a14e:	ff 05 a8 25 03 c0    	inc    DWORD PTR ds:0xc00325a8
c001a154:	6a 1b                	push   0x1b
c001a156:	ff 35 68 f0 02 c0    	push   DWORD PTR ds:0xc002f068
c001a15c:	e8 1f 4d ff ff       	call   c000ee80 <Computer::rdmsr(unsigned int)>
c001a161:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a166:	89 c3                	mov    ebx,eax
c001a168:	58                   	pop    eax
c001a169:	5a                   	pop    edx
c001a16a:	53                   	push   ebx
c001a16b:	68 e4 c5 02 c0       	push   0xc002c5e4
c001a170:	e8 10 8d ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001a175:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a17f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a183:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a18d:	c1 e0 18             	shl    eax,0x18
c001a190:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c001a196:	83 c4 10             	add    esp,0x10
c001a199:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001a19f:	09 c2                	or     edx,eax
c001a1a1:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c001a1a7:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c001a1ad:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a1b3:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a1b9:	80 cd c5             	or     ch,0xc5
c001a1bc:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a1c2:	f3 90                	pause  
c001a1c4:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a1c6:	0f ba e1 0c          	bt     ecx,0xc
c001a1ca:	72 f6                	jb     c001a1c2 <Krnl::startCPU(int)+0x8b>
c001a1cc:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a1d2:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a1d8:	09 c1                	or     ecx,eax
c001a1da:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a1e0:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a1e6:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a1ec:	80 cd 85             	or     ch,0x85
c001a1ef:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a1f5:	f3 90                	pause  
c001a1f7:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a1f9:	0f ba e1 0c          	bt     ecx,0xc
c001a1fd:	72 f6                	jb     c001a1f5 <Krnl::startCPU(int)+0xbe>
c001a1ff:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a209:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a20f:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a215:	09 c1                	or     ecx,eax
c001a217:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a21d:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a223:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001a229:	81 c9 02 06 00 00    	or     ecx,0x602
c001a22f:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a235:	f3 90                	pause  
c001a237:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a239:	0f ba e1 0c          	bt     ecx,0xc
c001a23d:	72 f6                	jb     c001a235 <Krnl::startCPU(int)+0xfe>
c001a23f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a249:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a24f:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a255:	09 c8                	or     eax,ecx
c001a257:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a25d:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a263:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a268:	0d 02 06 00 00       	or     eax,0x602
c001a26d:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a273:	f3 90                	pause  
c001a275:	8b 02                	mov    eax,DWORD PTR [edx]
c001a277:	0f ba e0 0c          	bt     eax,0xc
c001a27b:	72 f6                	jb     c001a273 <Krnl::startCPU(int)+0x13c>
c001a27d:	eb fe                	jmp    c001a27d <Krnl::startCPU(int)+0x146>
c001a27f:	c3                   	ret    

c001a280 <Krnl::startCPUs()>:
c001a280:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c001a285:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a28b:	88 c2                	mov    dl,al
c001a28d:	83 e2 0a             	and    edx,0xa
c001a290:	80 fa 0a             	cmp    dl,0xa
c001a293:	75 09                	jne    c001a29e <Krnl::startCPUs()+0x1e>
c001a295:	a8 01                	test   al,0x1
c001a297:	74 05                	je     c001a29e <Krnl::startCPUs()+0x1e>
c001a299:	e9 fd 5e fe ff       	jmp    c000019b <prepareTramp>
c001a29e:	c3                   	ret    
c001a29f:	90                   	nop

c001a2a0 <EnvVarContainer::getEnv(char const*)>:
c001a2a0:	57                   	push   edi
c001a2a1:	56                   	push   esi
c001a2a2:	53                   	push   ebx
c001a2a3:	31 db                	xor    ebx,ebx
c001a2a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a2a9:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a2ab:	7e 2b                	jle    c001a2d8 <EnvVarContainer::getEnv(char const*)+0x38>
c001a2ad:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a2b4:	50                   	push   eax
c001a2b5:	50                   	push   eax
c001a2b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a2b9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a2bc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a2c0:	e8 ef 65 fe ff       	call   c00008b4 <strcmp>
c001a2c5:	83 c4 10             	add    esp,0x10
c001a2c8:	85 c0                	test   eax,eax
c001a2ca:	75 09                	jne    c001a2d5 <EnvVarContainer::getEnv(char const*)+0x35>
c001a2cc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a2cf:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a2d3:	eb 05                	jmp    c001a2da <EnvVarContainer::getEnv(char const*)+0x3a>
c001a2d5:	43                   	inc    ebx
c001a2d6:	eb d1                	jmp    c001a2a9 <EnvVarContainer::getEnv(char const*)+0x9>
c001a2d8:	31 c0                	xor    eax,eax
c001a2da:	5b                   	pop    ebx
c001a2db:	5e                   	pop    esi
c001a2dc:	5f                   	pop    edi
c001a2dd:	c3                   	ret    

c001a2de <EnvVarContainer::setEnv(char const*, char const*)>:
c001a2de:	55                   	push   ebp
c001a2df:	57                   	push   edi
c001a2e0:	56                   	push   esi
c001a2e1:	53                   	push   ebx
c001a2e2:	83 ec 28             	sub    esp,0x28
c001a2e5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001a2e9:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001a2ed:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001a2f1:	56                   	push   esi
c001a2f2:	e8 91 64 fe ff       	call   c0000788 <strlen>
c001a2f7:	40                   	inc    eax
c001a2f8:	89 04 24             	mov    DWORD PTR [esp],eax
c001a2fb:	e8 da 55 ff ff       	call   c000f8da <malloc>
c001a300:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a303:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a307:	e8 7c 64 fe ff       	call   c0000788 <strlen>
c001a30c:	40                   	inc    eax
c001a30d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a310:	e8 c5 55 ff ff       	call   c000f8da <malloc>
c001a315:	89 34 24             	mov    DWORD PTR [esp],esi
c001a318:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a31c:	e8 67 64 fe ff       	call   c0000788 <strlen>
c001a321:	83 c4 0c             	add    esp,0xc
c001a324:	40                   	inc    eax
c001a325:	50                   	push   eax
c001a326:	6a 00                	push   0x0
c001a328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a32c:	e8 3b 64 fe ff       	call   c000076c <memset>
c001a331:	89 34 24             	mov    DWORD PTR [esp],esi
c001a334:	e8 4f 64 fe ff       	call   c0000788 <strlen>
c001a339:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a33d:	8d 48 01             	lea    ecx,[eax+0x1]
c001a340:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a342:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a345:	89 de                	mov    esi,ebx
c001a347:	e8 3c 64 fe ff       	call   c0000788 <strlen>
c001a34c:	83 c4 0c             	add    esp,0xc
c001a34f:	40                   	inc    eax
c001a350:	50                   	push   eax
c001a351:	6a 00                	push   0x0
c001a353:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a357:	e8 10 64 fe ff       	call   c000076c <memset>
c001a35c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a35f:	e8 24 64 fe ff       	call   c0000788 <strlen>
c001a364:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a368:	8d 48 01             	lea    ecx,[eax+0x1]
c001a36b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a36d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a370:	40                   	inc    eax
c001a371:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001a374:	c1 e0 03             	shl    eax,0x3
c001a377:	5a                   	pop    edx
c001a378:	59                   	pop    ecx
c001a379:	50                   	push   eax
c001a37a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a37d:	e8 44 55 ff ff       	call   c000f8c6 <realloc>
c001a382:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a386:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a389:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001a38c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a390:	b9 08 00 00 00       	mov    ecx,0x8
c001a395:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a397:	83 c4 2c             	add    esp,0x2c
c001a39a:	5b                   	pop    ebx
c001a39b:	5e                   	pop    esi
c001a39c:	5f                   	pop    edi
c001a39d:	5d                   	pop    ebp
c001a39e:	c3                   	ret    
c001a39f:	90                   	nop

c001a3a0 <EnvVarContainer::deleteEnv(char const*)>:
c001a3a0:	c3                   	ret    
c001a3a1:	90                   	nop

c001a3a2 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a3a2:	55                   	push   ebp
c001a3a3:	57                   	push   edi
c001a3a4:	56                   	push   esi
c001a3a5:	53                   	push   ebx
c001a3a6:	81 ec 38 01 00 00    	sub    esp,0x138
c001a3ac:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c001a3b3:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001a3ba:	68 14 01 00 00       	push   0x114
c001a3bf:	e8 16 55 ff ff       	call   c000f8da <malloc>
c001a3c4:	83 c4 0c             	add    esp,0xc
c001a3c7:	89 c5                	mov    ebp,eax
c001a3c9:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001a3cc:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a3d3:	50                   	push   eax
c001a3d4:	e8 0b 90 ff ff       	call   c00133e4 <File::File(char const*, Process*)>
c001a3d9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a3dc:	e8 d5 92 ff ff       	call   c00136b6 <File::exists()>
c001a3e1:	83 c4 10             	add    esp,0x10
c001a3e4:	84 c0                	test   al,al
c001a3e6:	75 32                	jne    c001a41a <EnvVarContainer::loadFrom(char const*, char const*)+0x78>
c001a3e8:	51                   	push   ecx
c001a3e9:	51                   	push   ecx
c001a3ea:	6a 12                	push   0x12
c001a3ec:	55                   	push   ebp
c001a3ed:	e8 56 90 ff ff       	call   c0013448 <File::open(FileOpenMode)>
c001a3f2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a3f5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001a3f8:	89 34 24             	mov    DWORD PTR [esp],esi
c001a3fb:	e8 88 63 fe ff       	call   c0000788 <strlen>
c001a400:	5a                   	pop    edx
c001a401:	31 d2                	xor    edx,edx
c001a403:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a407:	51                   	push   ecx
c001a408:	56                   	push   esi
c001a409:	52                   	push   edx
c001a40a:	50                   	push   eax
c001a40b:	55                   	push   ebp
c001a40c:	ff d7                	call   edi
c001a40e:	83 c4 14             	add    esp,0x14
c001a411:	55                   	push   ebp
c001a412:	e8 8f 90 ff ff       	call   c00134a6 <File::close()>
c001a417:	83 c4 10             	add    esp,0x10
c001a41a:	31 f6                	xor    esi,esi
c001a41c:	50                   	push   eax
c001a41d:	68 00 01 00 00       	push   0x100
c001a422:	6a 00                	push   0x0
c001a424:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a428:	50                   	push   eax
c001a429:	e8 3e 63 fe ff       	call   c000076c <memset>
c001a42e:	58                   	pop    eax
c001a42f:	5a                   	pop    edx
c001a430:	6a 01                	push   0x1
c001a432:	55                   	push   ebp
c001a433:	e8 10 90 ff ff       	call   c0013448 <File::open(FileOpenMode)>
c001a438:	83 c4 10             	add    esp,0x10
c001a43b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a443:	83 ec 0c             	sub    esp,0xc
c001a446:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a449:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a44d:	51                   	push   ecx
c001a44e:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a452:	52                   	push   edx
c001a453:	6a 00                	push   0x0
c001a455:	6a 01                	push   0x1
c001a457:	55                   	push   ebp
c001a458:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a45b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a45f:	83 c4 20             	add    esp,0x20
c001a462:	3c 0d                	cmp    al,0xd
c001a464:	0f 84 16 01 00 00    	je     c001a580 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a46a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a46f:	0f 84 fc 00 00 00    	je     c001a571 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a475:	3c 0a                	cmp    al,0xa
c001a477:	74 13                	je     c001a48c <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c001a479:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a47e:	74 0c                	je     c001a48c <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c001a480:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001a486:	0f 8e e5 00 00 00    	jle    c001a571 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a48c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a490:	83 ec 0c             	sub    esp,0xc
c001a493:	8d 78 01             	lea    edi,[eax+0x1]
c001a496:	57                   	push   edi
c001a497:	e8 3e 54 ff ff       	call   c000f8da <malloc>
c001a49c:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001a4a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a4a4:	8d 56 04             	lea    edx,[esi+0x4]
c001a4a7:	89 14 24             	mov    DWORD PTR [esp],edx
c001a4aa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a4ae:	e8 27 54 ff ff       	call   c000f8da <malloc>
c001a4b3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a4b7:	83 c4 0c             	add    esp,0xc
c001a4ba:	57                   	push   edi
c001a4bb:	6a 00                	push   0x0
c001a4bd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a4c1:	e8 a6 62 fe ff       	call   c000076c <memset>
c001a4c6:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a4ca:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a4ce:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a4d2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a4d4:	83 c4 0c             	add    esp,0xc
c001a4d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a4db:	52                   	push   edx
c001a4dc:	6a 00                	push   0x0
c001a4de:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a4e2:	e8 85 62 fe ff       	call   c000076c <memset>
c001a4e7:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a4eb:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001a4ef:	89 34 24             	mov    DWORD PTR [esp],esi
c001a4f2:	e8 91 62 fe ff       	call   c0000788 <strlen>
c001a4f7:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001a4fb:	89 c1                	mov    ecx,eax
c001a4fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a4ff:	5e                   	pop    esi
c001a500:	5f                   	pop    edi
c001a501:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a505:	68 f5 c5 02 c0       	push   0xc002c5f5
c001a50a:	e8 76 89 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001a50f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a511:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c001a514:	40                   	inc    eax
c001a515:	83 c4 10             	add    esp,0x10
c001a518:	89 03                	mov    DWORD PTR [ebx],eax
c001a51a:	85 d2                	test   edx,edx
c001a51c:	75 0c                	jne    c001a52a <EnvVarContainer::loadFrom(char const*, char const*)+0x188>
c001a51e:	83 ec 0c             	sub    esp,0xc
c001a521:	6a 08                	push   0x8
c001a523:	e8 b2 53 ff ff       	call   c000f8da <malloc>
c001a528:	eb 0c                	jmp    c001a536 <EnvVarContainer::loadFrom(char const*, char const*)+0x194>
c001a52a:	c1 e0 03             	shl    eax,0x3
c001a52d:	51                   	push   ecx
c001a52e:	51                   	push   ecx
c001a52f:	50                   	push   eax
c001a530:	52                   	push   edx
c001a531:	e8 90 53 ff ff       	call   c000f8c6 <realloc>
c001a536:	83 c4 10             	add    esp,0x10
c001a539:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a53c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a53e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001a541:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a545:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a549:	b9 08 00 00 00       	mov    ecx,0x8
c001a54e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a550:	31 f6                	xor    esi,esi
c001a552:	52                   	push   edx
c001a553:	68 00 01 00 00       	push   0x100
c001a558:	6a 00                	push   0x0
c001a55a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a55e:	50                   	push   eax
c001a55f:	e8 08 62 fe ff       	call   c000076c <memset>
c001a564:	83 c4 10             	add    esp,0x10
c001a567:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a56f:	eb 0f                	jmp    c001a580 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a571:	3c 3d                	cmp    al,0x3d
c001a573:	74 07                	je     c001a57c <EnvVarContainer::loadFrom(char const*, char const*)+0x1da>
c001a575:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001a579:	46                   	inc    esi
c001a57a:	eb 04                	jmp    c001a580 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a57c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001a580:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a585:	0f 85 b8 fe ff ff    	jne    c001a443 <EnvVarContainer::loadFrom(char const*, char const*)+0xa1>
c001a58b:	50                   	push   eax
c001a58c:	50                   	push   eax
c001a58d:	ff 33                	push   DWORD PTR [ebx]
c001a58f:	68 03 c6 02 c0       	push   0xc002c603
c001a594:	e8 ec 88 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001a599:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a59f:	5b                   	pop    ebx
c001a5a0:	5e                   	pop    esi
c001a5a1:	5f                   	pop    edi
c001a5a2:	5d                   	pop    ebp
c001a5a3:	c3                   	ret    

c001a5a4 <EnvVarContainer::__loadSystem()>:
c001a5a4:	83 ec 10             	sub    esp,0x10
c001a5a7:	68 a0 e5 02 c0       	push   0xc002e5a0
c001a5ac:	68 2e c6 02 c0       	push   0xc002c62e
c001a5b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5b5:	e8 e8 fd ff ff       	call   c001a3a2 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a5ba:	83 c4 1c             	add    esp,0x1c
c001a5bd:	c3                   	ret    

c001a5be <EnvVarContainer::__loadUser()>:
c001a5be:	c3                   	ret    
c001a5bf:	90                   	nop

c001a5c0 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a5c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a5ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a5d2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a5d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5d9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a5e0:	90                   	nop
c001a5e1:	c3                   	ret    

c001a5e2 <EnvVarContainer::~EnvVarContainer()>:
c001a5e2:	83 ec 0c             	sub    esp,0xc
c001a5e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a5ec:	85 c0                	test   eax,eax
c001a5ee:	74 1d                	je     c001a60d <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a5f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5f4:	8b 00                	mov    eax,DWORD PTR [eax]
c001a5f6:	85 c0                	test   eax,eax
c001a5f8:	74 13                	je     c001a60d <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a5fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a601:	83 ec 0c             	sub    esp,0xc
c001a604:	50                   	push   eax
c001a605:	e8 e0 52 ff ff       	call   c000f8ea <free>
c001a60a:	83 c4 10             	add    esp,0x10
c001a60d:	90                   	nop
c001a60e:	83 c4 0c             	add    esp,0xc
c001a611:	c3                   	ret    

c001a612 <Krnl::getEnv(Process*, char const*)>:
c001a612:	53                   	push   ebx
c001a613:	83 ec 08             	sub    esp,0x8
c001a616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a61a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a61e:	39 05 d0 25 03 c0    	cmp    DWORD PTR ds:0xc00325d0,eax
c001a624:	74 04                	je     c001a62a <Krnl::getEnv(Process*, char const*)+0x18>
c001a626:	85 c0                	test   eax,eax
c001a628:	75 0b                	jne    c001a635 <Krnl::getEnv(Process*, char const*)+0x23>
c001a62a:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a62f:	85 c0                	test   eax,eax
c001a631:	75 19                	jne    c001a64c <Krnl::getEnv(Process*, char const*)+0x3a>
c001a633:	eb 27                	jmp    c001a65c <Krnl::getEnv(Process*, char const*)+0x4a>
c001a635:	52                   	push   edx
c001a636:	52                   	push   edx
c001a637:	53                   	push   ebx
c001a638:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a63e:	e8 5d fc ff ff       	call   c001a2a0 <EnvVarContainer::getEnv(char const*)>
c001a643:	83 c4 10             	add    esp,0x10
c001a646:	85 c0                	test   eax,eax
c001a648:	75 28                	jne    c001a672 <Krnl::getEnv(Process*, char const*)+0x60>
c001a64a:	eb de                	jmp    c001a62a <Krnl::getEnv(Process*, char const*)+0x18>
c001a64c:	52                   	push   edx
c001a64d:	52                   	push   edx
c001a64e:	53                   	push   ebx
c001a64f:	50                   	push   eax
c001a650:	e8 4b fc ff ff       	call   c001a2a0 <EnvVarContainer::getEnv(char const*)>
c001a655:	83 c4 10             	add    esp,0x10
c001a658:	85 c0                	test   eax,eax
c001a65a:	75 16                	jne    c001a672 <Krnl::getEnv(Process*, char const*)+0x60>
c001a65c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a660:	a1 b8 1b 03 c0       	mov    eax,ds:0xc0031bb8
c001a665:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a669:	83 c4 08             	add    esp,0x8
c001a66c:	5b                   	pop    ebx
c001a66d:	e9 2e fc ff ff       	jmp    c001a2a0 <EnvVarContainer::getEnv(char const*)>
c001a672:	83 c4 08             	add    esp,0x8
c001a675:	5b                   	pop    ebx
c001a676:	c3                   	ret    

c001a677 <Krnl::setEnvSystem(char const*, char const*)>:
c001a677:	83 ec 10             	sub    esp,0x10
c001a67a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a67e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a682:	ff 35 b8 1b 03 c0    	push   DWORD PTR ds:0xc0031bb8
c001a688:	e8 51 fc ff ff       	call   c001a2de <EnvVarContainer::setEnv(char const*, char const*)>
c001a68d:	83 c4 1c             	add    esp,0x1c
c001a690:	c3                   	ret    

c001a691 <Krnl::setEnvUser(char const*, char const*)>:
c001a691:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a696:	85 c0                	test   eax,eax
c001a698:	74 15                	je     c001a6af <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a69a:	83 ec 10             	sub    esp,0x10
c001a69d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6a5:	50                   	push   eax
c001a6a6:	e8 33 fc ff ff       	call   c001a2de <EnvVarContainer::setEnv(char const*, char const*)>
c001a6ab:	83 c4 1c             	add    esp,0x1c
c001a6ae:	c3                   	ret    
c001a6af:	c3                   	ret    

c001a6b0 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a6b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6b4:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a6ba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a6be:	e9 1b fc ff ff       	jmp    c001a2de <EnvVarContainer::setEnv(char const*, char const*)>

c001a6c3 <Krnl::deleteEnvSystem(char const*)>:
c001a6c3:	c3                   	ret    

c001a6c4 <Krnl::deleteEnvUser(char const*)>:
c001a6c4:	c3                   	ret    

c001a6c5 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a6c5:	c3                   	ret    

c001a6c6 <Krnl::newProcessEnv(Process*)>:
c001a6c6:	83 ec 28             	sub    esp,0x28
c001a6c9:	6a 0c                	push   0xc
c001a6cb:	e8 0a 52 ff ff       	call   c000f8da <malloc>
c001a6d0:	5a                   	pop    edx
c001a6d1:	59                   	pop    ecx
c001a6d2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a6d6:	50                   	push   eax
c001a6d7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a6db:	e8 e0 fe ff ff       	call   c001a5c0 <EnvVarContainer::EnvVarContainer(Process*)>
c001a6e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a6e4:	83 c4 2c             	add    esp,0x2c
c001a6e7:	c3                   	ret    

c001a6e8 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a6e8:	57                   	push   edi
c001a6e9:	56                   	push   esi
c001a6ea:	53                   	push   ebx
c001a6eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6ef:	83 ec 0c             	sub    esp,0xc
c001a6f2:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c001a6f8:	6a 0c                	push   0xc
c001a6fa:	e8 db 51 ff ff       	call   c000f8da <malloc>
c001a6ff:	89 c3                	mov    ebx,eax
c001a701:	58                   	pop    eax
c001a702:	5a                   	pop    edx
c001a703:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a707:	53                   	push   ebx
c001a708:	e8 b3 fe ff ff       	call   c001a5c0 <EnvVarContainer::EnvVarContainer(Process*)>
c001a70d:	8b 07                	mov    eax,DWORD PTR [edi]
c001a70f:	89 03                	mov    DWORD PTR [ebx],eax
c001a711:	c1 e0 03             	shl    eax,0x3
c001a714:	89 04 24             	mov    DWORD PTR [esp],eax
c001a717:	e8 be 51 ff ff       	call   c000f8da <malloc>
c001a71c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a71f:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001a721:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001a724:	c1 e1 03             	shl    ecx,0x3
c001a727:	89 c7                	mov    edi,eax
c001a729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a72b:	83 c4 10             	add    esp,0x10
c001a72e:	89 d8                	mov    eax,ebx
c001a730:	5b                   	pop    ebx
c001a731:	5e                   	pop    esi
c001a732:	5f                   	pop    edi
c001a733:	c3                   	ret    

c001a734 <Krnl::loadSystemEnv()>:
c001a734:	53                   	push   ebx
c001a735:	83 ec 14             	sub    esp,0x14
c001a738:	6a 0c                	push   0xc
c001a73a:	e8 9b 51 ff ff       	call   c000f8da <malloc>
c001a73f:	89 c3                	mov    ebx,eax
c001a741:	58                   	pop    eax
c001a742:	5a                   	pop    edx
c001a743:	ff 35 d0 25 03 c0    	push   DWORD PTR ds:0xc00325d0
c001a749:	53                   	push   ebx
c001a74a:	e8 71 fe ff ff       	call   c001a5c0 <EnvVarContainer::EnvVarContainer(Process*)>
c001a74f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a752:	89 1d b8 1b 03 c0    	mov    DWORD PTR ds:0xc0031bb8,ebx
c001a758:	e8 47 fe ff ff       	call   c001a5a4 <EnvVarContainer::__loadSystem()>
c001a75d:	83 c4 18             	add    esp,0x18
c001a760:	5b                   	pop    ebx
c001a761:	c3                   	ret    

c001a762 <Krnl::loadUserEnv()>:
c001a762:	53                   	push   ebx
c001a763:	83 ec 14             	sub    esp,0x14
c001a766:	6a 0c                	push   0xc
c001a768:	e8 6d 51 ff ff       	call   c000f8da <malloc>
c001a76d:	89 c3                	mov    ebx,eax
c001a76f:	58                   	pop    eax
c001a770:	5a                   	pop    edx
c001a771:	ff 35 d0 25 03 c0    	push   DWORD PTR ds:0xc00325d0
c001a777:	53                   	push   ebx
c001a778:	e8 43 fe ff ff       	call   c001a5c0 <EnvVarContainer::EnvVarContainer(Process*)>
c001a77d:	89 1d b4 1b 03 c0    	mov    DWORD PTR ds:0xc0031bb4,ebx
c001a783:	83 c4 18             	add    esp,0x18
c001a786:	5b                   	pop    ebx
c001a787:	c3                   	ret    

c001a788 <Krnl::flushEnv()>:
c001a788:	c3                   	ret    

c001a789 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a789:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a78d:	8b 15 b4 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031bb4
c001a793:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a799:	a1 b8 1b 03 c0       	mov    eax,ds:0xc0031bb8
c001a79e:	8b 00                	mov    eax,DWORD PTR [eax]
c001a7a0:	03 01                	add    eax,DWORD PTR [ecx]
c001a7a2:	85 d2                	test   edx,edx
c001a7a4:	74 02                	je     c001a7a8 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a7a6:	03 02                	add    eax,DWORD PTR [edx]
c001a7a8:	c3                   	ret    

c001a7a9 <Krnl::getProcessEnvPair(Process*, int)>:
c001a7a9:	57                   	push   edi
c001a7aa:	8b 0d b4 1b 03 c0    	mov    ecx,DWORD PTR ds:0xc0031bb4
c001a7b0:	56                   	push   esi
c001a7b1:	85 c9                	test   ecx,ecx
c001a7b3:	53                   	push   ebx
c001a7b4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a7b8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a7bc:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a7c2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a7c6:	8b 02                	mov    eax,DWORD PTR [edx]
c001a7c8:	75 47                	jne    c001a811 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a7ca:	39 c3                	cmp    ebx,eax
c001a7cc:	7c 47                	jl     c001a815 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a7ce:	8b 15 b8 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031bb8
c001a7d4:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a7d6:	01 c1                	add    ecx,eax
c001a7d8:	39 d9                	cmp    ecx,ebx
c001a7da:	7e 6c                	jle    c001a848 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a7dc:	51                   	push   ecx
c001a7dd:	89 d9                	mov    ecx,ebx
c001a7df:	29 c1                	sub    ecx,eax
c001a7e1:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a7e4:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a7e8:	53                   	push   ebx
c001a7e9:	68 50 c6 02 c0       	push   0xc002c650
c001a7ee:	e8 92 86 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001a7f3:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a7f9:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a7fb:	a1 b8 1b 03 c0       	mov    eax,ds:0xc0031bb8
c001a800:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a803:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a807:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a80a:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a80d:	89 06                	mov    DWORD PTR [esi],eax
c001a80f:	eb 51                	jmp    c001a862 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a811:	39 c3                	cmp    ebx,eax
c001a813:	7d 05                	jge    c001a81a <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a815:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a818:	eb 20                	jmp    c001a83a <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a81a:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a81c:	8d 14 07             	lea    edx,[edi+eax*1]
c001a81f:	39 da                	cmp    edx,ebx
c001a821:	7e 04                	jle    c001a827 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a823:	29 c3                	sub    ebx,eax
c001a825:	eb 10                	jmp    c001a837 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a827:	8b 0d b8 1b 03 c0    	mov    ecx,DWORD PTR ds:0xc0031bb8
c001a82d:	03 11                	add    edx,DWORD PTR [ecx]
c001a82f:	39 da                	cmp    edx,ebx
c001a831:	7e 15                	jle    c001a848 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a833:	29 c3                	sub    ebx,eax
c001a835:	29 fb                	sub    ebx,edi
c001a837:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a83a:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a83e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a841:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a844:	89 06                	mov    DWORD PTR [esi],eax
c001a846:	eb 1d                	jmp    c001a865 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a848:	83 ec 0c             	sub    esp,0xc
c001a84b:	68 64 c6 02 c0       	push   0xc002c664
c001a850:	e8 18 00 00 00       	call   c001a86d <Krnl::panic(char const*)>
c001a855:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a85b:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a862:	83 c4 10             	add    esp,0x10
c001a865:	89 f0                	mov    eax,esi
c001a867:	5b                   	pop    ebx
c001a868:	5e                   	pop    esi
c001a869:	5f                   	pop    edi
c001a86a:	c2 04 00             	ret    0x4

c001a86d <Krnl::panic(char const*)>:
c001a86d:	55                   	push   ebp
c001a86e:	89 e5                	mov    ebp,esp
c001a870:	53                   	push   ebx
c001a871:	83 ec 0c             	sub    esp,0xc
c001a874:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a877:	fa                   	cli    
c001a878:	c6 05 c4 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031bc4,0x1
c001a87f:	53                   	push   ebx
c001a880:	c6 05 a4 df 02 c0 00 	mov    BYTE PTR ds:0xc002dfa4,0x0
c001a887:	68 7e c6 02 c0       	push   0xc002c67e
c001a88c:	e8 f4 85 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001a891:	58                   	pop    eax
c001a892:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c001a897:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a89d:	e8 06 64 ff ff       	call   c0010ca8 <setActiveTerminal(VgaText*)>
c001a8a2:	83 c4 0c             	add    esp,0xc
c001a8a5:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c001a8aa:	6a 01                	push   0x1
c001a8ac:	6a 0f                	push   0xf
c001a8ae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8b4:	e8 8d 5e ff ff       	call   c0010746 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a8b9:	58                   	pop    eax
c001a8ba:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c001a8bf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8c5:	e8 24 66 ff ff       	call   c0010eee <VgaText::clearScreen()>
c001a8ca:	58                   	pop    eax
c001a8cb:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c001a8d0:	5a                   	pop    edx
c001a8d1:	68 97 c6 02 c0       	push   0xc002c697
c001a8d6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8dc:	e8 53 67 ff ff       	call   c0011034 <VgaText::puts(char const*)>
c001a8e1:	59                   	pop    ecx
c001a8e2:	58                   	pop    eax
c001a8e3:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c001a8e8:	68 3c c7 02 c0       	push   0xc002c73c
c001a8ed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8f3:	e8 3c 67 ff ff       	call   c0011034 <VgaText::puts(char const*)>
c001a8f8:	58                   	pop    eax
c001a8f9:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c001a8fe:	5a                   	pop    edx
c001a8ff:	68 b3 c6 02 c0       	push   0xc002c6b3
c001a904:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a90a:	e8 25 67 ff ff       	call   c0011034 <VgaText::puts(char const*)>
c001a90f:	59                   	pop    ecx
c001a910:	58                   	pop    eax
c001a911:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c001a916:	53                   	push   ebx
c001a917:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a91d:	e8 12 67 ff ff       	call   c0011034 <VgaText::puts(char const*)>
c001a922:	58                   	pop    eax
c001a923:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c001a928:	5a                   	pop    edx
c001a929:	68 d3 c6 02 c0       	push   0xc002c6d3
c001a92e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a934:	e8 fb 66 ff ff       	call   c0011034 <VgaText::puts(char const*)>
c001a939:	a1 c0 1b 03 c0       	mov    eax,ds:0xc0031bc0
c001a93e:	83 c4 10             	add    esp,0x10
c001a941:	85 c0                	test   eax,eax
c001a943:	74 02                	je     c001a947 <Krnl::panic(char const*)+0xda>
c001a945:	ff d0                	call   eax
c001a947:	83 ec 0c             	sub    esp,0xc
c001a94a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a94d:	e8 9e 32 00 00       	call   c001dbf0 <Thr::getDriverNameFromAddress(unsigned long)>
c001a952:	83 c4 10             	add    esp,0x10
c001a955:	89 c3                	mov    ebx,eax
c001a957:	85 c0                	test   eax,eax
c001a959:	0f 84 50 02 00 00    	je     c001abaf <Krnl::panic(char const*)+0x342>
c001a95f:	83 ec 08             	sub    esp,0x8
c001a962:	8b 15 d0 25 03 c0    	mov    edx,DWORD PTR ds:0xc00325d0
c001a968:	68 78 c7 02 c0       	push   0xc002c778
c001a96d:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a973:	e8 bc 66 ff ff       	call   c0011034 <VgaText::puts(char const*)>
c001a978:	58                   	pop    eax
c001a979:	5a                   	pop    edx
c001a97a:	8b 15 d0 25 03 c0    	mov    edx,DWORD PTR ds:0xc00325d0
c001a980:	68 b3 c6 02 c0       	push   0xc002c6b3
c001a985:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a98b:	e8 a4 66 ff ff       	call   c0011034 <VgaText::puts(char const*)>
c001a990:	59                   	pop    ecx
c001a991:	58                   	pop    eax
c001a992:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c001a997:	53                   	push   ebx
c001a998:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a99e:	e8 91 66 ff ff       	call   c0011034 <VgaText::puts(char const*)>
c001a9a3:	83 c4 10             	add    esp,0x10
c001a9a6:	83 ec 08             	sub    esp,0x8
c001a9a9:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c001a9ae:	68 d2 c6 02 c0       	push   0xc002c6d2
c001a9b3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9b9:	e8 76 66 ff ff       	call   c0011034 <VgaText::puts(char const*)>
c001a9be:	58                   	pop    eax
c001a9bf:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c001a9c4:	5a                   	pop    edx
c001a9c5:	68 d0 c7 02 c0       	push   0xc002c7d0
c001a9ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9d0:	e8 5f 66 ff ff       	call   c0011034 <VgaText::puts(char const*)>
c001a9d5:	59                   	pop    ecx
c001a9d6:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c001a9db:	5b                   	pop    ebx
c001a9dc:	68 10 c8 02 c0       	push   0xc002c810
c001a9e1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9e7:	e8 48 66 ff ff       	call   c0011034 <VgaText::puts(char const*)>
c001a9ec:	58                   	pop    eax
c001a9ed:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c001a9f2:	5a                   	pop    edx
c001a9f3:	68 be c6 02 c0       	push   0xc002c6be
c001a9f8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9fe:	e8 31 66 ff ff       	call   c0011034 <VgaText::puts(char const*)>
c001aa03:	59                   	pop    ecx
c001aa04:	5b                   	pop    ebx
c001aa05:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001aa08:	68 d6 c6 02 c0       	push   0xc002c6d6
c001aa0d:	e8 73 84 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001aa12:	58                   	pop    eax
c001aa13:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001aa16:	5a                   	pop    edx
c001aa17:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001aa1a:	68 df c6 02 c0       	push   0xc002c6df
c001aa1f:	e8 61 84 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001aa24:	59                   	pop    ecx
c001aa25:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001aa28:	5b                   	pop    ebx
c001aa29:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa2b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001aa2e:	68 e8 c6 02 c0       	push   0xc002c6e8
c001aa33:	e8 4d 84 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001aa38:	58                   	pop    eax
c001aa39:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c001aa3e:	5a                   	pop    edx
c001aa3f:	68 54 c8 02 c0       	push   0xc002c854
c001aa44:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa4a:	e8 e5 65 ff ff       	call   c0011034 <VgaText::puts(char const*)>
c001aa4f:	59                   	pop    ecx
c001aa50:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c001aa55:	5b                   	pop    ebx
c001aa56:	68 f1 c6 02 c0       	push   0xc002c6f1
c001aa5b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa61:	e8 ce 65 ff ff       	call   c0011034 <VgaText::puts(char const*)>
c001aa66:	0f 20 c0             	mov    eax,cr0
c001aa69:	5a                   	pop    edx
c001aa6a:	59                   	pop    ecx
c001aa6b:	50                   	push   eax
c001aa6c:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c001aa71:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa77:	e8 de 65 ff ff       	call   c001105a <VgaText::putx(unsigned int)>
c001aa7c:	5b                   	pop    ebx
c001aa7d:	58                   	pop    eax
c001aa7e:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c001aa83:	68 fb c6 02 c0       	push   0xc002c6fb
c001aa88:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa8e:	e8 a1 65 ff ff       	call   c0011034 <VgaText::puts(char const*)>
c001aa93:	0f 20 d0             	mov    eax,cr2
c001aa96:	5a                   	pop    edx
c001aa97:	59                   	pop    ecx
c001aa98:	50                   	push   eax
c001aa99:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c001aa9e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aaa4:	e8 b1 65 ff ff       	call   c001105a <VgaText::putx(unsigned int)>
c001aaa9:	5b                   	pop    ebx
c001aaaa:	58                   	pop    eax
c001aaab:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c001aab0:	68 05 c7 02 c0       	push   0xc002c705
c001aab5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aabb:	e8 74 65 ff ff       	call   c0011034 <VgaText::puts(char const*)>
c001aac0:	0f 20 d8             	mov    eax,cr3
c001aac3:	5a                   	pop    edx
c001aac4:	59                   	pop    ecx
c001aac5:	50                   	push   eax
c001aac6:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c001aacb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aad1:	e8 84 65 ff ff       	call   c001105a <VgaText::putx(unsigned int)>
c001aad6:	5b                   	pop    ebx
c001aad7:	58                   	pop    eax
c001aad8:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c001aadd:	68 18 c7 02 c0       	push   0xc002c718
c001aae2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aae8:	e8 47 65 ff ff       	call   c0011034 <VgaText::puts(char const*)>
c001aaed:	0f 20 e0             	mov    eax,cr4
c001aaf0:	5a                   	pop    edx
c001aaf1:	59                   	pop    ecx
c001aaf2:	50                   	push   eax
c001aaf3:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c001aaf8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aafe:	e8 57 65 ff ff       	call   c001105a <VgaText::putx(unsigned int)>
c001ab03:	5b                   	pop    ebx
c001ab04:	58                   	pop    eax
c001ab05:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c001ab0a:	68 22 c7 02 c0       	push   0xc002c722
c001ab0f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab15:	e8 1a 65 ff ff       	call   c0011034 <VgaText::puts(char const*)>
c001ab1a:	5a                   	pop    edx
c001ab1b:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c001ab20:	59                   	pop    ecx
c001ab21:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ab27:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001ab2a:	50                   	push   eax
c001ab2b:	e8 2a 65 ff ff       	call   c001105a <VgaText::putx(unsigned int)>
c001ab30:	5b                   	pop    ebx
c001ab31:	58                   	pop    eax
c001ab32:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c001ab37:	68 39 c7 02 c0       	push   0xc002c739
c001ab3c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab42:	e8 ed 64 ff ff       	call   c0011034 <VgaText::puts(char const*)>
c001ab47:	5a                   	pop    edx
c001ab48:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c001ab4d:	59                   	pop    ecx
c001ab4e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ab54:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ab57:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001ab5a:	50                   	push   eax
c001ab5b:	e8 fa 64 ff ff       	call   c001105a <VgaText::putx(unsigned int)>
c001ab60:	5b                   	pop    ebx
c001ab61:	58                   	pop    eax
c001ab62:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c001ab67:	68 39 c7 02 c0       	push   0xc002c739
c001ab6c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab72:	e8 bd 64 ff ff       	call   c0011034 <VgaText::puts(char const*)>
c001ab77:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c001ab7c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ab7f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ab85:	8b 12                	mov    edx,DWORD PTR [edx]
c001ab87:	59                   	pop    ecx
c001ab88:	5b                   	pop    ebx
c001ab89:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001ab8c:	50                   	push   eax
c001ab8d:	e8 c8 64 ff ff       	call   c001105a <VgaText::putx(unsigned int)>
c001ab92:	83 c4 10             	add    esp,0x10
c001ab95:	b2 fe                	mov    dl,0xfe
c001ab97:	e4 60                	in     al,0x60
c001ab99:	3c 1c                	cmp    al,0x1c
c001ab9b:	74 04                	je     c001aba1 <Krnl::panic(char const*)+0x334>
c001ab9d:	3c 5a                	cmp    al,0x5a
c001ab9f:	75 f6                	jne    c001ab97 <Krnl::panic(char const*)+0x32a>
c001aba1:	e4 64                	in     al,0x64
c001aba3:	a8 02                	test   al,0x2
c001aba5:	75 fa                	jne    c001aba1 <Krnl::panic(char const*)+0x334>
c001aba7:	88 d0                	mov    al,dl
c001aba9:	e6 64                	out    0x64,al
c001abab:	fa                   	cli    
c001abac:	f4                   	hlt    
c001abad:	eb e8                	jmp    c001ab97 <Krnl::panic(char const*)+0x32a>
c001abaf:	50                   	push   eax
c001abb0:	50                   	push   eax
c001abb1:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c001abb6:	68 a4 c7 02 c0       	push   0xc002c7a4
c001abbb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001abc1:	e8 6e 64 ff ff       	call   c0011034 <VgaText::puts(char const*)>
c001abc6:	58                   	pop    eax
c001abc7:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c001abcc:	5a                   	pop    edx
c001abcd:	68 b3 c6 02 c0       	push   0xc002c6b3
c001abd2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001abd8:	e8 57 64 ff ff       	call   c0011034 <VgaText::puts(char const*)>
c001abdd:	59                   	pop    ecx
c001abde:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001abe3:	5b                   	pop    ebx
c001abe4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001abe7:	83 c0 0c             	add    eax,0xc
c001abea:	50                   	push   eax
c001abeb:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c001abf0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001abf6:	e8 39 64 ff ff       	call   c0011034 <VgaText::puts(char const*)>
c001abfb:	83 c4 10             	add    esp,0x10
c001abfe:	e9 a3 fd ff ff       	jmp    c001a9a6 <Krnl::panic(char const*)+0x139>

c001ac03 <Net::switchEndian16(unsigned short)>:
c001ac03:	83 ec 04             	sub    esp,0x4
c001ac06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac0a:	66 89 04 24          	mov    WORD PTR [esp],ax
c001ac0e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001ac12:	c1 f8 08             	sar    eax,0x8
c001ac15:	89 c2                	mov    edx,eax
c001ac17:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001ac1b:	c1 e0 08             	shl    eax,0x8
c001ac1e:	09 d0                	or     eax,edx
c001ac20:	83 c4 04             	add    esp,0x4
c001ac23:	c3                   	ret    

c001ac24 <Net::switchEndian32(unsigned int)>:
c001ac24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac28:	c1 e8 18             	shr    eax,0x18
c001ac2b:	89 c2                	mov    edx,eax
c001ac2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac31:	c1 e0 08             	shl    eax,0x8
c001ac34:	25 00 00 ff 00       	and    eax,0xff0000
c001ac39:	09 c2                	or     edx,eax
c001ac3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac3f:	c1 e8 08             	shr    eax,0x8
c001ac42:	25 00 ff 00 00       	and    eax,0xff00
c001ac47:	09 c2                	or     edx,eax
c001ac49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac4d:	c1 e0 18             	shl    eax,0x18
c001ac50:	09 d0                	or     eax,edx
c001ac52:	c3                   	ret    

c001ac53 <Net::crc32Calc(unsigned char*, int)>:
c001ac53:	83 ec 10             	sub    esp,0x10
c001ac56:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ac5b:	75 07                	jne    c001ac64 <Net::crc32Calc(unsigned char*, int)+0x11>
c001ac5d:	b8 00 00 00 00       	mov    eax,0x0
c001ac62:	eb 7c                	jmp    c001ace0 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001ac64:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001ac69:	7f 07                	jg     c001ac72 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001ac6b:	b8 00 00 00 00       	mov    eax,0x0
c001ac70:	eb 6e                	jmp    c001ace0 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001ac72:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001ac7a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ac82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac86:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001ac8a:	7d 4e                	jge    c001acda <Net::crc32Calc(unsigned char*, int)+0x87>
c001ac8c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac90:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ac94:	01 d0                	add    eax,edx
c001ac96:	8a 00                	mov    al,BYTE PTR [eax]
c001ac98:	0f b6 c0             	movzx  eax,al
c001ac9b:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001ac9f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aca7:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001acac:	7f 26                	jg     c001acd4 <Net::crc32Calc(unsigned char*, int)+0x81>
c001acae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acb2:	83 e0 01             	and    eax,0x1
c001acb5:	74 0d                	je     c001acc4 <Net::crc32Calc(unsigned char*, int)+0x71>
c001acb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acbb:	d1 e8                	shr    eax,1
c001acbd:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001acc2:	eb 06                	jmp    c001acca <Net::crc32Calc(unsigned char*, int)+0x77>
c001acc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acc8:	d1 e8                	shr    eax,1
c001acca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001acce:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001acd2:	eb d3                	jmp    c001aca7 <Net::crc32Calc(unsigned char*, int)+0x54>
c001acd4:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001acd8:	eb a8                	jmp    c001ac82 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001acda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acde:	f7 d0                	not    eax
c001ace0:	83 c4 10             	add    esp,0x10
c001ace3:	c3                   	ret    

c001ace4 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001ace4:	57                   	push   edi
c001ace5:	56                   	push   esi
c001ace6:	53                   	push   ebx
c001ace7:	83 ec 60             	sub    esp,0x60
c001acea:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001acf1:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001acf5:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001acfd:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001ad02:	7f 1a                	jg     c001ad1e <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001ad04:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ad0b:	8d 50 01             	lea    edx,[eax+0x1]
c001ad0e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001ad15:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001ad18:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001ad1c:	eb df                	jmp    c001acfd <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001ad1e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ad25:	8d 50 01             	lea    edx,[eax+0x1]
c001ad28:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001ad2f:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001ad32:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ad39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ad3d:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001ad41:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ad45:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001ad4d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad59:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ad5d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ad61:	89 c6                	mov    esi,eax
c001ad63:	89 d7                	mov    edi,edx
c001ad65:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad67:	89 c8                	mov    eax,ecx
c001ad69:	89 fa                	mov    edx,edi
c001ad6b:	89 f3                	mov    ebx,esi
c001ad6d:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001ad71:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ad75:	89 04 24             	mov    DWORD PTR [esp],eax
c001ad78:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001ad80:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ad87:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001ad8b:	8d 44 24 78          	lea    eax,[esp+0x78]
c001ad8f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ad93:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001ad9b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad9f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ada3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ada7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001adab:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001adaf:	89 c6                	mov    esi,eax
c001adb1:	89 d7                	mov    edi,edx
c001adb3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001adb5:	89 c8                	mov    eax,ecx
c001adb7:	89 fa                	mov    edx,edi
c001adb9:	89 f3                	mov    ebx,esi
c001adbb:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001adbf:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001adc3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001adc7:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001adcf:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001add6:	0f b7 c0             	movzx  eax,ax
c001add9:	c1 f8 08             	sar    eax,0x8
c001addc:	89 c1                	mov    ecx,eax
c001adde:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ade5:	8d 50 01             	lea    edx,[eax+0x1]
c001ade8:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001adef:	88 ca                	mov    dl,cl
c001adf1:	88 10                	mov    BYTE PTR [eax],dl
c001adf3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001adfa:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ae01:	8d 48 01             	lea    ecx,[eax+0x1]
c001ae04:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001ae0b:	88 10                	mov    BYTE PTR [eax],dl
c001ae0d:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001ae11:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001ae15:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001ae1c:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001ae20:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001ae24:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001ae28:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ae2c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001ae30:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ae34:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001ae38:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001ae3c:	89 c6                	mov    esi,eax
c001ae3e:	89 d7                	mov    edi,edx
c001ae40:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ae42:	89 c8                	mov    eax,ecx
c001ae44:	89 fa                	mov    edx,edi
c001ae46:	89 f3                	mov    ebx,esi
c001ae48:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001ae4c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001ae50:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ae54:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001ae58:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001ae5f:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ae66:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001ae6a:	50                   	push   eax
c001ae6b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ae6f:	e8 df fd ff ff       	call   c001ac53 <Net::crc32Calc(unsigned char*, int)>
c001ae74:	83 c4 08             	add    esp,0x8
c001ae77:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001ae7b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ae7f:	c1 e8 18             	shr    eax,0x18
c001ae82:	89 c1                	mov    ecx,eax
c001ae84:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ae8b:	8d 50 01             	lea    edx,[eax+0x1]
c001ae8e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001ae95:	88 ca                	mov    dl,cl
c001ae97:	88 10                	mov    BYTE PTR [eax],dl
c001ae99:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ae9d:	c1 e8 10             	shr    eax,0x10
c001aea0:	89 c1                	mov    ecx,eax
c001aea2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aea9:	8d 50 01             	lea    edx,[eax+0x1]
c001aeac:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001aeb3:	88 ca                	mov    dl,cl
c001aeb5:	88 10                	mov    BYTE PTR [eax],dl
c001aeb7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001aebb:	c1 e8 08             	shr    eax,0x8
c001aebe:	89 c1                	mov    ecx,eax
c001aec0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aec7:	8d 50 01             	lea    edx,[eax+0x1]
c001aeca:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001aed1:	88 ca                	mov    dl,cl
c001aed3:	88 10                	mov    BYTE PTR [eax],dl
c001aed5:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aedc:	8d 50 01             	lea    edx,[eax+0x1]
c001aedf:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001aee6:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001aeea:	88 10                	mov    BYTE PTR [eax],dl
c001aeec:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001aef0:	83 c4 60             	add    esp,0x60
c001aef3:	5b                   	pop    ebx
c001aef4:	5e                   	pop    esi
c001aef5:	5f                   	pop    edi
c001aef6:	c3                   	ret    

c001aef7 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001aef7:	57                   	push   edi
c001aef8:	56                   	push   esi
c001aef9:	53                   	push   ebx
c001aefa:	83 ec 70             	sub    esp,0x70
c001aefd:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001af04:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001af08:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001af10:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001af17:	83 c0 0e             	add    eax,0xe
c001af1a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001af1e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001af25:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001af29:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001af31:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001af35:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001af39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001af3d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001af41:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001af45:	89 c6                	mov    esi,eax
c001af47:	89 d7                	mov    edi,edx
c001af49:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001af4b:	89 c8                	mov    eax,ecx
c001af4d:	89 fa                	mov    edx,edi
c001af4f:	89 f3                	mov    ebx,esi
c001af51:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001af55:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001af59:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001af5d:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001af65:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001af6c:	83 c0 08             	add    eax,0x8
c001af6f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001af73:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001af7a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001af7e:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001af86:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001af8a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001af8e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001af92:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001af96:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001af9a:	89 c6                	mov    esi,eax
c001af9c:	89 d7                	mov    edi,edx
c001af9e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001afa0:	89 c8                	mov    eax,ecx
c001afa2:	89 fa                	mov    edx,edi
c001afa4:	89 f3                	mov    ebx,esi
c001afa6:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001afaa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001afae:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001afb2:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001afba:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001afc1:	8d 50 01             	lea    edx,[eax+0x1]
c001afc4:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001afcb:	8a 00                	mov    al,BYTE PTR [eax]
c001afcd:	0f b6 c0             	movzx  eax,al
c001afd0:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001afd5:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001afdc:	8d 50 01             	lea    edx,[eax+0x1]
c001afdf:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001afe6:	8a 00                	mov    al,BYTE PTR [eax]
c001afe8:	0f b6 c0             	movzx  eax,al
c001afeb:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001aff0:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001aff5:	c1 e0 08             	shl    eax,0x8
c001aff8:	89 c2                	mov    edx,eax
c001affa:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001affe:	09 d0                	or     eax,edx
c001b000:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001b007:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001b00b:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001b013:	75 46                	jne    c001b05b <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001b015:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b01c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b01f:	66 3d dc 05          	cmp    ax,0x5dc
c001b023:	77 16                	ja     c001b03b <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001b025:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b02c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b02f:	0f b7 c0             	movzx  eax,ax
c001b032:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001b039:	eb 20                	jmp    c001b05b <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001b03b:	83 ec 0c             	sub    esp,0xc
c001b03e:	68 7c c8 02 c0       	push   0xc002c87c
c001b043:	e8 3d 7e ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001b048:	83 c4 10             	add    esp,0x10
c001b04b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b052:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001b056:	e9 17 01 00 00       	jmp    c001b172 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001b05b:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b062:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001b069:	8b 12                	mov    edx,DWORD PTR [edx]
c001b06b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b06f:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001b076:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001b07a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b07e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b082:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b086:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b08a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b08e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b092:	89 c6                	mov    esi,eax
c001b094:	89 d7                	mov    edi,edx
c001b096:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b098:	89 c8                	mov    eax,ecx
c001b09a:	89 fa                	mov    edx,edi
c001b09c:	89 f3                	mov    ebx,esi
c001b09e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001b0a2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b0a6:	89 04 24             	mov    DWORD PTR [esp],eax
c001b0a9:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b0b0:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001b0b7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b0be:	8d 50 01             	lea    edx,[eax+0x1]
c001b0c1:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b0c8:	8a 00                	mov    al,BYTE PTR [eax]
c001b0ca:	0f b6 c0             	movzx  eax,al
c001b0cd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001b0d1:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b0d8:	8d 50 01             	lea    edx,[eax+0x1]
c001b0db:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b0e2:	8a 00                	mov    al,BYTE PTR [eax]
c001b0e4:	0f b6 c0             	movzx  eax,al
c001b0e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001b0eb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b0f2:	8d 50 01             	lea    edx,[eax+0x1]
c001b0f5:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b0fc:	8a 00                	mov    al,BYTE PTR [eax]
c001b0fe:	0f b6 c0             	movzx  eax,al
c001b101:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001b105:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b10c:	8d 50 01             	lea    edx,[eax+0x1]
c001b10f:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b116:	8a 00                	mov    al,BYTE PTR [eax]
c001b118:	0f b6 c0             	movzx  eax,al
c001b11b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001b11f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001b123:	c1 e0 18             	shl    eax,0x18
c001b126:	89 c2                	mov    edx,eax
c001b128:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001b12c:	c1 e0 10             	shl    eax,0x10
c001b12f:	09 c2                	or     edx,eax
c001b131:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001b135:	c1 e0 08             	shl    eax,0x8
c001b138:	09 d0                	or     eax,edx
c001b13a:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001b13e:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b142:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b149:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001b14d:	83 e8 04             	sub    eax,0x4
c001b150:	83 ec 08             	sub    esp,0x8
c001b153:	50                   	push   eax
c001b154:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001b158:	e8 f6 fa ff ff       	call   c001ac53 <Net::crc32Calc(unsigned char*, int)>
c001b15d:	83 c4 10             	add    esp,0x10
c001b160:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001b164:	0f 94 c2             	sete   dl
c001b167:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b16e:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001b171:	90                   	nop
c001b172:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b179:	83 c4 70             	add    esp,0x70
c001b17c:	5b                   	pop    ebx
c001b17d:	5e                   	pop    esi
c001b17e:	5f                   	pop    edi
c001b17f:	c2 04 00             	ret    0x4

c001b182 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001b182:	55                   	push   ebp
c001b183:	57                   	push   edi
c001b184:	56                   	push   esi
c001b185:	53                   	push   ebx
c001b186:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b18c:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001b193:	8a 1e                	mov    bl,BYTE PTR [esi]
c001b195:	8d 6e 01             	lea    ebp,[esi+0x1]
c001b198:	80 fb 40             	cmp    bl,0x40
c001b19b:	75 1b                	jne    c001b1b8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001b19d:	8a 16                	mov    dl,BYTE PTR [esi]
c001b19f:	84 d2                	test   dl,dl
c001b1a1:	0f 84 f1 00 00 00    	je     c001b298 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b1a7:	8d 46 01             	lea    eax,[esi+0x1]
c001b1aa:	80 fa 3a             	cmp    dl,0x3a
c001b1ad:	74 04                	je     c001b1b3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001b1af:	89 c6                	mov    esi,eax
c001b1b1:	eb ea                	jmp    c001b19d <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001b1b3:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b1b6:	89 c6                	mov    esi,eax
c001b1b8:	50                   	push   eax
c001b1b9:	6a 40                	push   0x40
c001b1bb:	6a 00                	push   0x0
c001b1bd:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b1c1:	50                   	push   eax
c001b1c2:	e8 a5 55 fe ff       	call   c000076c <memset>
c001b1c7:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001b1ce:	31 c0                	xor    eax,eax
c001b1d0:	83 c4 10             	add    esp,0x10
c001b1d3:	8a 0f                	mov    cl,BYTE PTR [edi]
c001b1d5:	84 c9                	test   cl,cl
c001b1d7:	0f 84 bb 00 00 00    	je     c001b298 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b1dd:	3d c7 00 00 00       	cmp    eax,0xc7
c001b1e2:	0f 8f b0 00 00 00    	jg     c001b298 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b1e8:	80 f9 0a             	cmp    cl,0xa
c001b1eb:	0f 85 98 00 00 00    	jne    c001b289 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001b1f1:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001b1f6:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001b1fa:	a8 df                	test   al,0xdf
c001b1fc:	0f 94 c1             	sete   cl
c001b1ff:	3c 23                	cmp    al,0x23
c001b201:	0f 94 c2             	sete   dl
c001b204:	08 d1                	or     cl,dl
c001b206:	75 4a                	jne    c001b252 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b208:	8d 50 f7             	lea    edx,[eax-0x9]
c001b20b:	80 fa 01             	cmp    dl,0x1
c001b20e:	76 42                	jbe    c001b252 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b210:	3c 5b                	cmp    al,0x5b
c001b212:	75 42                	jne    c001b256 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001b214:	80 fb 40             	cmp    bl,0x40
c001b217:	75 39                	jne    c001b252 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b219:	83 ec 0c             	sub    esp,0xc
c001b21c:	8d 54 24 65          	lea    edx,[esp+0x65]
c001b220:	52                   	push   edx
c001b221:	e8 62 55 fe ff       	call   c0000788 <strlen>
c001b226:	83 c4 10             	add    esp,0x10
c001b229:	83 f8 3f             	cmp    eax,0x3f
c001b22c:	77 6a                	ja     c001b298 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b22e:	50                   	push   eax
c001b22f:	50                   	push   eax
c001b230:	8d 54 24 61          	lea    edx,[esp+0x61]
c001b234:	52                   	push   edx
c001b235:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b239:	52                   	push   edx
c001b23a:	e8 e9 55 fe ff       	call   c0000828 <strcpy>
c001b23f:	58                   	pop    eax
c001b240:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b244:	52                   	push   edx
c001b245:	e8 3e 55 fe ff       	call   c0000788 <strlen>
c001b24a:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001b24f:	83 c4 10             	add    esp,0x10
c001b252:	31 d2                	xor    edx,edx
c001b254:	eb 3a                	jmp    c001b290 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001b256:	80 fb 40             	cmp    bl,0x40
c001b259:	74 06                	je     c001b261 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001b25b:	8d 44 24 58          	lea    eax,[esp+0x58]
c001b25f:	eb 20                	jmp    c001b281 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001b261:	50                   	push   eax
c001b262:	50                   	push   eax
c001b263:	55                   	push   ebp
c001b264:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b268:	50                   	push   eax
c001b269:	e8 46 56 fe ff       	call   c00008b4 <strcmp>
c001b26e:	83 c4 10             	add    esp,0x10
c001b271:	85 c0                	test   eax,eax
c001b273:	75 dd                	jne    c001b252 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b275:	eb e4                	jmp    c001b25b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001b277:	8d 50 01             	lea    edx,[eax+0x1]
c001b27a:	80 f9 3d             	cmp    cl,0x3d
c001b27d:	74 1d                	je     c001b29c <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001b27f:	89 d0                	mov    eax,edx
c001b281:	8a 08                	mov    cl,BYTE PTR [eax]
c001b283:	84 c9                	test   cl,cl
c001b285:	75 f0                	jne    c001b277 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001b287:	eb 0f                	jmp    c001b298 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b289:	8d 50 01             	lea    edx,[eax+0x1]
c001b28c:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001b290:	47                   	inc    edi
c001b291:	89 d0                	mov    eax,edx
c001b293:	e9 3b ff ff ff       	jmp    c001b1d3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001b298:	31 c0                	xor    eax,eax
c001b29a:	eb 33                	jmp    c001b2cf <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001b29c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b2a0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001b2a3:	50                   	push   eax
c001b2a4:	50                   	push   eax
c001b2a5:	8d 44 24 60          	lea    eax,[esp+0x60]
c001b2a9:	50                   	push   eax
c001b2aa:	56                   	push   esi
c001b2ab:	e8 04 56 fe ff       	call   c00008b4 <strcmp>
c001b2b0:	83 c4 10             	add    esp,0x10
c001b2b3:	85 c0                	test   eax,eax
c001b2b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b2b9:	75 97                	jne    c001b252 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b2bb:	51                   	push   ecx
c001b2bc:	51                   	push   ecx
c001b2bd:	52                   	push   edx
c001b2be:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001b2c5:	e8 5e 55 fe ff       	call   c0000828 <strcpy>
c001b2ca:	83 c4 10             	add    esp,0x10
c001b2cd:	b0 01                	mov    al,0x1
c001b2cf:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b2d5:	5b                   	pop    ebx
c001b2d6:	5e                   	pop    esi
c001b2d7:	5f                   	pop    edi
c001b2d8:	5d                   	pop    ebp
c001b2d9:	c3                   	ret    

c001b2da <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001b2da:	57                   	push   edi
c001b2db:	56                   	push   esi
c001b2dc:	53                   	push   ebx
c001b2dd:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b2e3:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001b2ea:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001b2f1:	53                   	push   ebx
c001b2f2:	e8 91 54 fe ff       	call   c0000788 <strlen>
c001b2f7:	89 34 24             	mov    DWORD PTR [esp],esi
c001b2fa:	89 c7                	mov    edi,eax
c001b2fc:	e8 87 54 fe ff       	call   c0000788 <strlen>
c001b301:	83 c4 10             	add    esp,0x10
c001b304:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001b308:	3d ff 00 00 00       	cmp    eax,0xff
c001b30d:	0f 87 d3 00 00 00    	ja     c001b3e6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b313:	57                   	push   edi
c001b314:	57                   	push   edi
c001b315:	56                   	push   esi
c001b316:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001b31a:	56                   	push   esi
c001b31b:	e8 08 55 fe ff       	call   c0000828 <strcpy>
c001b320:	58                   	pop    eax
c001b321:	5a                   	pop    edx
c001b322:	68 d1 cd 02 c0       	push   0xc002cdd1
c001b327:	56                   	push   esi
c001b328:	e8 3b 56 fe ff       	call   c0000968 <strcat>
c001b32d:	59                   	pop    ecx
c001b32e:	5f                   	pop    edi
c001b32f:	53                   	push   ebx
c001b330:	56                   	push   esi
c001b331:	e8 32 56 fe ff       	call   c0000968 <strcat>
c001b336:	58                   	pop    eax
c001b337:	5a                   	pop    edx
c001b338:	68 c8 c8 02 c0       	push   0xc002c8c8
c001b33d:	56                   	push   esi
c001b33e:	e8 25 56 fe ff       	call   c0000968 <strcat>
c001b343:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001b34a:	e8 8b 45 ff ff       	call   c000f8da <malloc>
c001b34f:	83 c4 0c             	add    esp,0xc
c001b352:	89 c3                	mov    ebx,eax
c001b354:	ff 35 d0 25 03 c0    	push   DWORD PTR ds:0xc00325d0
c001b35a:	56                   	push   esi
c001b35b:	50                   	push   eax
c001b35c:	e8 83 80 ff ff       	call   c00133e4 <File::File(char const*, Process*)>
c001b361:	83 c4 10             	add    esp,0x10
c001b364:	85 db                	test   ebx,ebx
c001b366:	74 7e                	je     c001b3e6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b368:	51                   	push   ecx
c001b369:	51                   	push   ecx
c001b36a:	6a 01                	push   0x1
c001b36c:	53                   	push   ebx
c001b36d:	e8 d6 80 ff ff       	call   c0013448 <File::open(FileOpenMode)>
c001b372:	83 c4 10             	add    esp,0x10
c001b375:	85 c0                	test   eax,eax
c001b377:	74 08                	je     c001b381 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001b379:	83 ec 0c             	sub    esp,0xc
c001b37c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b37e:	53                   	push   ebx
c001b37f:	eb 5f                	jmp    c001b3e0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001b381:	52                   	push   edx
c001b382:	8d 44 24 17          	lea    eax,[esp+0x17]
c001b386:	50                   	push   eax
c001b387:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b38b:	50                   	push   eax
c001b38c:	53                   	push   ebx
c001b38d:	e8 62 83 ff ff       	call   c00136f4 <File::stat(unsigned long long*, bool*)>
c001b392:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b396:	83 c4 10             	add    esp,0x10
c001b399:	89 c1                	mov    ecx,eax
c001b39b:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001b39f:	74 31                	je     c001b3d2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b3a1:	83 ec 0c             	sub    esp,0xc
c001b3a4:	50                   	push   eax
c001b3a5:	e8 30 45 ff ff       	call   c000f8da <malloc>
c001b3aa:	89 c6                	mov    esi,eax
c001b3ac:	58                   	pop    eax
c001b3ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3af:	8d 54 24 20          	lea    edx,[esp+0x20]
c001b3b3:	52                   	push   edx
c001b3b4:	56                   	push   esi
c001b3b5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b3b9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b3bd:	53                   	push   ebx
c001b3be:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b3c1:	83 c4 20             	add    esp,0x20
c001b3c4:	85 c0                	test   eax,eax
c001b3c6:	75 0a                	jne    c001b3d2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b3c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b3cc:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001b3d0:	74 18                	je     c001b3ea <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001b3d2:	83 ec 0c             	sub    esp,0xc
c001b3d5:	53                   	push   ebx
c001b3d6:	e8 cb 80 ff ff       	call   c00134a6 <File::close()>
c001b3db:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b3e0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3e3:	83 c4 10             	add    esp,0x10
c001b3e6:	31 c0                	xor    eax,eax
c001b3e8:	eb 3b                	jmp    c001b425 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001b3ea:	83 ec 0c             	sub    esp,0xc
c001b3ed:	53                   	push   ebx
c001b3ee:	e8 b3 80 ff ff       	call   c00134a6 <File::close()>
c001b3f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b3f8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3fb:	83 c4 0c             	add    esp,0xc
c001b3fe:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b405:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b40c:	56                   	push   esi
c001b40d:	e8 70 fd ff ff       	call   c001b182 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b412:	89 34 24             	mov    DWORD PTR [esp],esi
c001b415:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b419:	e8 cc 44 ff ff       	call   c000f8ea <free>
c001b41e:	83 c4 10             	add    esp,0x10
c001b421:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b425:	81 c4 20 01 00 00    	add    esp,0x120
c001b42b:	5b                   	pop    ebx
c001b42c:	5e                   	pop    esi
c001b42d:	5f                   	pop    edi
c001b42e:	c3                   	ret    

c001b42f <Reg::getLine(char*, char*, char*)>:
c001b42f:	57                   	push   edi
c001b430:	56                   	push   esi
c001b431:	53                   	push   ebx
c001b432:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b436:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b43a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b43e:	57                   	push   edi
c001b43f:	56                   	push   esi
c001b440:	53                   	push   ebx
c001b441:	68 cd c8 02 c0       	push   0xc002c8cd
c001b446:	e8 8f fe ff ff       	call   c001b2da <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b44b:	83 c4 10             	add    esp,0x10
c001b44e:	84 c0                	test   al,al
c001b450:	75 10                	jne    c001b462 <Reg::getLine(char*, char*, char*)+0x33>
c001b452:	57                   	push   edi
c001b453:	56                   	push   esi
c001b454:	53                   	push   ebx
c001b455:	68 f2 c8 02 c0       	push   0xc002c8f2
c001b45a:	e8 7b fe ff ff       	call   c001b2da <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b45f:	83 c4 10             	add    esp,0x10
c001b462:	5b                   	pop    ebx
c001b463:	5e                   	pop    esi
c001b464:	5f                   	pop    edi
c001b465:	c3                   	ret    

c001b466 <Reg::readInt(char*, char*, int*)>:
c001b466:	55                   	push   ebp
c001b467:	57                   	push   edi
c001b468:	56                   	push   esi
c001b469:	53                   	push   ebx
c001b46a:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b470:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b474:	57                   	push   edi
c001b475:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b47c:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b483:	e8 a7 ff ff ff       	call   c001b42f <Reg::getLine(char*, char*, char*)>
c001b488:	83 c4 10             	add    esp,0x10
c001b48b:	84 c0                	test   al,al
c001b48d:	0f 84 b3 00 00 00    	je     c001b546 <Reg::readInt(char*, char*, int*)+0xe0>
c001b493:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b497:	80 fa 2b             	cmp    dl,0x2b
c001b49a:	74 0c                	je     c001b4a8 <Reg::readInt(char*, char*, int*)+0x42>
c001b49c:	80 fa 2d             	cmp    dl,0x2d
c001b49f:	75 0e                	jne    c001b4af <Reg::readInt(char*, char*, int*)+0x49>
c001b4a1:	ba 01 00 00 00       	mov    edx,0x1
c001b4a6:	eb 0b                	jmp    c001b4b3 <Reg::readInt(char*, char*, int*)+0x4d>
c001b4a8:	ba 01 00 00 00       	mov    edx,0x1
c001b4ad:	eb 02                	jmp    c001b4b1 <Reg::readInt(char*, char*, int*)+0x4b>
c001b4af:	31 d2                	xor    edx,edx
c001b4b1:	31 c0                	xor    eax,eax
c001b4b3:	be 0a 00 00 00       	mov    esi,0xa
c001b4b8:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b4bd:	75 20                	jne    c001b4df <Reg::readInt(char*, char*, int*)+0x79>
c001b4bf:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b4c3:	80 f9 78             	cmp    cl,0x78
c001b4c6:	75 0a                	jne    c001b4d2 <Reg::readInt(char*, char*, int*)+0x6c>
c001b4c8:	83 c2 02             	add    edx,0x2
c001b4cb:	be 10 00 00 00       	mov    esi,0x10
c001b4d0:	eb 0d                	jmp    c001b4df <Reg::readInt(char*, char*, int*)+0x79>
c001b4d2:	80 f9 62             	cmp    cl,0x62
c001b4d5:	75 08                	jne    c001b4df <Reg::readInt(char*, char*, int*)+0x79>
c001b4d7:	83 c2 02             	add    edx,0x2
c001b4da:	be 02 00 00 00       	mov    esi,0x2
c001b4df:	01 d7                	add    edi,edx
c001b4e1:	31 d2                	xor    edx,edx
c001b4e3:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b4e5:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b4e9:	80 fb 0d             	cmp    bl,0xd
c001b4ec:	0f 94 c3             	sete   bl
c001b4ef:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b4f4:	0f 94 c1             	sete   cl
c001b4f7:	08 cb                	or     bl,cl
c001b4f9:	75 3a                	jne    c001b535 <Reg::readInt(char*, char*, int*)+0xcf>
c001b4fb:	0f af d6             	imul   edx,esi
c001b4fe:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b503:	83 fe 10             	cmp    esi,0x10
c001b506:	75 26                	jne    c001b52e <Reg::readInt(char*, char*, int*)+0xc8>
c001b508:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b50c:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b50f:	89 e9                	mov    ecx,ebp
c001b511:	80 f9 05             	cmp    cl,0x5
c001b514:	77 06                	ja     c001b51c <Reg::readInt(char*, char*, int*)+0xb6>
c001b516:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b51a:	eb 16                	jmp    c001b532 <Reg::readInt(char*, char*, int*)+0xcc>
c001b51c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b520:	83 e9 61             	sub    ecx,0x61
c001b523:	80 f9 05             	cmp    cl,0x5
c001b526:	77 06                	ja     c001b52e <Reg::readInt(char*, char*, int*)+0xc8>
c001b528:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b52c:	eb 04                	jmp    c001b532 <Reg::readInt(char*, char*, int*)+0xcc>
c001b52e:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b532:	47                   	inc    edi
c001b533:	eb ae                	jmp    c001b4e3 <Reg::readInt(char*, char*, int*)+0x7d>
c001b535:	84 c0                	test   al,al
c001b537:	74 02                	je     c001b53b <Reg::readInt(char*, char*, int*)+0xd5>
c001b539:	f7 da                	neg    edx
c001b53b:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b542:	89 10                	mov    DWORD PTR [eax],edx
c001b544:	88 d8                	mov    al,bl
c001b546:	81 c4 ec 00 00 00    	add    esp,0xec
c001b54c:	5b                   	pop    ebx
c001b54d:	5e                   	pop    esi
c001b54e:	5f                   	pop    edi
c001b54f:	5d                   	pop    ebp
c001b550:	c3                   	ret    

c001b551 <Reg::readString(char*, char*, char*, int)>:
c001b551:	57                   	push   edi
c001b552:	56                   	push   esi
c001b553:	53                   	push   ebx
c001b554:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b55a:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b561:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b565:	57                   	push   edi
c001b566:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b56d:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b574:	e8 b6 fe ff ff       	call   c001b42f <Reg::getLine(char*, char*, char*)>
c001b579:	83 c4 10             	add    esp,0x10
c001b57c:	89 c6                	mov    esi,eax
c001b57e:	84 c0                	test   al,al
c001b580:	74 44                	je     c001b5c6 <Reg::readString(char*, char*, char*, int)+0x75>
c001b582:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b589:	31 c0                	xor    eax,eax
c001b58b:	4a                   	dec    edx
c001b58c:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b58f:	84 c9                	test   cl,cl
c001b591:	74 0f                	je     c001b5a2 <Reg::readString(char*, char*, char*, int)+0x51>
c001b593:	39 c2                	cmp    edx,eax
c001b595:	7e 0b                	jle    c001b5a2 <Reg::readString(char*, char*, char*, int)+0x51>
c001b597:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b59a:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b59f:	40                   	inc    eax
c001b5a0:	eb ea                	jmp    c001b58c <Reg::readString(char*, char*, char*, int)+0x3b>
c001b5a2:	83 ec 0c             	sub    esp,0xc
c001b5a5:	53                   	push   ebx
c001b5a6:	e8 dd 51 fe ff       	call   c0000788 <strlen>
c001b5ab:	83 c4 10             	add    esp,0x10
c001b5ae:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b5b3:	75 11                	jne    c001b5c6 <Reg::readString(char*, char*, char*, int)+0x75>
c001b5b5:	83 ec 0c             	sub    esp,0xc
c001b5b8:	53                   	push   ebx
c001b5b9:	e8 ca 51 fe ff       	call   c0000788 <strlen>
c001b5be:	83 c4 10             	add    esp,0x10
c001b5c1:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b5c6:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b5cc:	89 f0                	mov    eax,esi
c001b5ce:	5b                   	pop    ebx
c001b5cf:	5e                   	pop    esi
c001b5d0:	5f                   	pop    edi
c001b5d1:	c3                   	ret    

c001b5d2 <Reg::readBool(char*, char*, bool*)>:
c001b5d2:	83 ec 20             	sub    esp,0x20
c001b5d5:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b5d9:	50                   	push   eax
c001b5da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b5de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b5e2:	e8 7f fe ff ff       	call   c001b466 <Reg::readInt(char*, char*, int*)>
c001b5e7:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b5ec:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b5f0:	0f 95 02             	setne  BYTE PTR [edx]
c001b5f3:	83 c4 2c             	add    esp,0x2c
c001b5f6:	c3                   	ret    

c001b5f7 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b5f7:	53                   	push   ebx
c001b5f8:	83 ec 1c             	sub    esp,0x1c
c001b5fb:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b5ff:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b603:	50                   	push   eax
c001b604:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b608:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b60c:	e8 c1 ff ff ff       	call   c001b5d2 <Reg::readBool(char*, char*, bool*)>
c001b611:	83 c4 10             	add    esp,0x10
c001b614:	84 c0                	test   al,al
c001b616:	74 04                	je     c001b61c <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b618:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b61c:	88 d8                	mov    al,bl
c001b61e:	83 c4 18             	add    esp,0x18
c001b621:	5b                   	pop    ebx
c001b622:	c3                   	ret    

c001b623 <Reg::readIntWithDefault(char*, char*, int)>:
c001b623:	53                   	push   ebx
c001b624:	83 ec 1c             	sub    esp,0x1c
c001b627:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b62b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b62f:	50                   	push   eax
c001b630:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b634:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b638:	e8 29 fe ff ff       	call   c001b466 <Reg::readInt(char*, char*, int*)>
c001b63d:	83 c4 10             	add    esp,0x10
c001b640:	84 c0                	test   al,al
c001b642:	74 04                	je     c001b648 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b644:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b648:	89 d8                	mov    eax,ebx
c001b64a:	83 c4 18             	add    esp,0x18
c001b64d:	5b                   	pop    ebx
c001b64e:	c3                   	ret    

c001b64f <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b64f:	57                   	push   edi
c001b650:	56                   	push   esi
c001b651:	56                   	push   esi
c001b652:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b656:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b65a:	56                   	push   esi
c001b65b:	57                   	push   edi
c001b65c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b660:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b664:	e8 e8 fe ff ff       	call   c001b551 <Reg::readString(char*, char*, char*, int)>
c001b669:	83 c4 10             	add    esp,0x10
c001b66c:	84 c0                	test   al,al
c001b66e:	75 1a                	jne    c001b68a <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001b670:	51                   	push   ecx
c001b671:	56                   	push   esi
c001b672:	6a 00                	push   0x0
c001b674:	57                   	push   edi
c001b675:	e8 f2 50 fe ff       	call   c000076c <memset>
c001b67a:	8d 4e ff             	lea    ecx,[esi-0x1]
c001b67d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b681:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b683:	83 c4 10             	add    esp,0x10
c001b686:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b68a:	89 f8                	mov    eax,edi
c001b68c:	5a                   	pop    edx
c001b68d:	5e                   	pop    esi
c001b68e:	5f                   	pop    edi
c001b68f:	c3                   	ret    

c001b690 <Sys::eject(regs*)>:
c001b690:	83 ec 0c             	sub    esp,0xc
c001b693:	83 ca ff             	or     edx,0xffffffff
c001b696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b69a:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b69d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b6a2:	83 e9 41             	sub    ecx,0x41
c001b6a5:	83 f9 19             	cmp    ecx,0x19
c001b6a8:	77 18                	ja     c001b6c2 <Sys::eject(regs*)+0x32>
c001b6aa:	8b 0c 8d 80 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0980]
c001b6b1:	85 c9                	test   ecx,ecx
c001b6b3:	74 0d                	je     c001b6c2 <Sys::eject(regs*)+0x32>
c001b6b5:	83 ec 0c             	sub    esp,0xc
c001b6b8:	51                   	push   ecx
c001b6b9:	e8 d4 b0 ff ff       	call   c0016792 <LogicalDisk::eject()>
c001b6be:	83 c4 10             	add    esp,0x10
c001b6c1:	99                   	cdq    
c001b6c2:	83 c4 0c             	add    esp,0xc
c001b6c5:	c3                   	ret    

c001b6c6 <Sys::exit(regs*)>:
c001b6c6:	83 ec 18             	sub    esp,0x18
c001b6c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b6cd:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b6d0:	e8 7e 38 00 00       	call   c001ef53 <terminateTask(int)>
c001b6d5:	83 c8 ff             	or     eax,0xffffffff
c001b6d8:	83 c4 1c             	add    esp,0x1c
c001b6db:	89 c2                	mov    edx,eax
c001b6dd:	c3                   	ret    

c001b6de <Sys::getCwd(regs*)>:
c001b6de:	83 ec 10             	sub    esp,0x10
c001b6e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b6e5:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b6e8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b6eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6f0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b6f3:	e8 ee 7a ff ff       	call   c00131e6 <Fs::getcwd(Process*, char*, int)>
c001b6f8:	83 c4 1c             	add    esp,0x1c
c001b6fb:	99                   	cdq    
c001b6fc:	c3                   	ret    

c001b6fd <Sys::getPID(regs*)>:
c001b6fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b702:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b705:	8b 00                	mov    eax,DWORD PTR [eax]
c001b707:	99                   	cdq    
c001b708:	c3                   	ret    

c001b709 <Sys::getRAMData(regs*)>:
c001b709:	8b 0d b4 f0 02 c0    	mov    ecx,DWORD PTR ds:0xc002f0b4
c001b70f:	6b 05 b0 f0 02 c0 64 	imul   eax,DWORD PTR ds:0xc002f0b0,0x64
c001b716:	99                   	cdq    
c001b717:	f7 f9                	idiv   ecx
c001b719:	c1 e0 18             	shl    eax,0x18
c001b71c:	09 c8                	or     eax,ecx
c001b71e:	99                   	cdq    
c001b71f:	c3                   	ret    

c001b720 <Sys::getVGAPtr(regs*)>:
c001b720:	55                   	push   ebp
c001b721:	57                   	push   edi
c001b722:	56                   	push   esi
c001b723:	53                   	push   ebx
c001b724:	83 ec 18             	sub    esp,0x18
c001b727:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b72b:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001b72e:	e8 02 33 00 00       	call   c001ea35 <Thr::processFromPID(int)>
c001b733:	83 c4 10             	add    esp,0x10
c001b736:	89 c1                	mov    ecx,eax
c001b738:	b8 01 00 00 00       	mov    eax,0x1
c001b73d:	85 c9                	test   ecx,ecx
c001b73f:	74 59                	je     c001b79a <Sys::getVGAPtr(regs*)+0x7a>
c001b741:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b747:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001b74b:	74 0c                	je     c001b759 <Sys::getVGAPtr(regs*)+0x39>
c001b74d:	83 ec 0c             	sub    esp,0xc
c001b750:	53                   	push   ebx
c001b751:	e8 52 55 ff ff       	call   c0010ca8 <setActiveTerminal(VgaText*)>
c001b756:	83 c4 10             	add    esp,0x10
c001b759:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001b75c:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001b75f:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001b764:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b766:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001b769:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b76c:	81 c3 82 00 00 00    	add    ebx,0x82
c001b772:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b778:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b77b:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b77e:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b784:	50                   	push   eax
c001b785:	50                   	push   eax
c001b786:	53                   	push   ebx
c001b787:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b78a:	05 a8 0f 00 00       	add    eax,0xfa8
c001b78f:	50                   	push   eax
c001b790:	e8 93 50 fe ff       	call   c0000828 <strcpy>
c001b795:	83 c4 10             	add    esp,0x10
c001b798:	31 c0                	xor    eax,eax
c001b79a:	83 c4 0c             	add    esp,0xc
c001b79d:	31 d2                	xor    edx,edx
c001b79f:	5b                   	pop    ebx
c001b7a0:	5e                   	pop    esi
c001b7a1:	5f                   	pop    edi
c001b7a2:	5d                   	pop    ebp
c001b7a3:	c3                   	ret    

c001b7a4 <Sys::loadDLL(regs*)>:
c001b7a4:	56                   	push   esi
c001b7a5:	53                   	push   ebx
c001b7a6:	31 d2                	xor    edx,edx
c001b7a8:	51                   	push   ecx
c001b7a9:	b8 01 00 00 00       	mov    eax,0x1
c001b7ae:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b7b2:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b7b6:	0f 84 8c 00 00 00    	je     c001b848 <Sys::loadDLL(regs*)+0xa4>
c001b7bc:	83 ec 0c             	sub    esp,0xc
c001b7bf:	68 14 01 00 00       	push   0x114
c001b7c4:	e8 11 41 ff ff       	call   c000f8da <malloc>
c001b7c9:	83 c4 0c             	add    esp,0xc
c001b7cc:	89 c3                	mov    ebx,eax
c001b7ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7d3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b7d6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b7d9:	53                   	push   ebx
c001b7da:	e8 05 7c ff ff       	call   c00133e4 <File::File(char const*, Process*)>
c001b7df:	83 c4 10             	add    esp,0x10
c001b7e2:	31 d2                	xor    edx,edx
c001b7e4:	b8 02 00 00 00       	mov    eax,0x2
c001b7e9:	85 db                	test   ebx,ebx
c001b7eb:	74 5b                	je     c001b848 <Sys::loadDLL(regs*)+0xa4>
c001b7ed:	83 ec 0c             	sub    esp,0xc
c001b7f0:	53                   	push   ebx
c001b7f1:	e8 c0 7e ff ff       	call   c00136b6 <File::exists()>
c001b7f6:	83 c4 10             	add    esp,0x10
c001b7f9:	84 c0                	test   al,al
c001b7fb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b7fd:	75 11                	jne    c001b810 <Sys::loadDLL(regs*)+0x6c>
c001b7ff:	83 ec 0c             	sub    esp,0xc
c001b802:	53                   	push   ebx
c001b803:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b806:	83 c4 10             	add    esp,0x10
c001b809:	b8 03 00 00 00       	mov    eax,0x3
c001b80e:	eb 36                	jmp    c001b846 <Sys::loadDLL(regs*)+0xa2>
c001b810:	83 ec 0c             	sub    esp,0xc
c001b813:	53                   	push   ebx
c001b814:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b817:	58                   	pop    eax
c001b818:	5a                   	pop    edx
c001b819:	6a 00                	push   0x0
c001b81b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b81e:	e8 1e 24 00 00       	call   c001dc41 <Thr::loadDLL(char const*, bool)>
c001b823:	83 c4 10             	add    esp,0x10
c001b826:	89 c1                	mov    ecx,eax
c001b828:	31 d2                	xor    edx,edx
c001b82a:	b8 04 00 00 00       	mov    eax,0x4
c001b82f:	85 c9                	test   ecx,ecx
c001b831:	74 15                	je     c001b848 <Sys::loadDLL(regs*)+0xa4>
c001b833:	53                   	push   ebx
c001b834:	53                   	push   ebx
c001b835:	ff 35 68 f0 02 c0    	push   DWORD PTR ds:0xc002f068
c001b83b:	51                   	push   ecx
c001b83c:	e8 2b 26 00 00       	call   c001de6c <Thr::executeDLL(unsigned long, void*)>
c001b841:	83 c4 10             	add    esp,0x10
c001b844:	31 c0                	xor    eax,eax
c001b846:	31 d2                	xor    edx,edx
c001b848:	59                   	pop    ecx
c001b849:	5b                   	pop    ebx
c001b84a:	5e                   	pop    esi
c001b84b:	c3                   	ret    

c001b84c <Sys::read(regs*)>:
c001b84c:	57                   	push   edi
c001b84d:	56                   	push   esi
c001b84e:	53                   	push   ebx
c001b84f:	83 ec 10             	sub    esp,0x10
c001b852:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b856:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b859:	83 f8 02             	cmp    eax,0x2
c001b85c:	77 10                	ja     c001b86e <Sys::read(regs*)+0x22>
c001b85e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b863:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b866:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b86c:	eb 0e                	jmp    c001b87c <Sys::read(regs*)+0x30>
c001b86e:	83 ec 0c             	sub    esp,0xc
c001b871:	50                   	push   eax
c001b872:	e8 b2 60 ff ff       	call   c0011929 <getFromFileDescriptor(int)>
c001b877:	83 c4 10             	add    esp,0x10
c001b87a:	89 c1                	mov    ecx,eax
c001b87c:	83 c8 ff             	or     eax,0xffffffff
c001b87f:	85 c9                	test   ecx,ecx
c001b881:	89 c2                	mov    edx,eax
c001b883:	74 28                	je     c001b8ad <Sys::read(regs*)+0x61>
c001b885:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b88d:	31 ff                	xor    edi,edi
c001b88f:	83 ec 0c             	sub    esp,0xc
c001b892:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b894:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b898:	52                   	push   edx
c001b899:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b89c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b89f:	57                   	push   edi
c001b8a0:	56                   	push   esi
c001b8a1:	51                   	push   ecx
c001b8a2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b8a5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b8a9:	83 c4 20             	add    esp,0x20
c001b8ac:	99                   	cdq    
c001b8ad:	83 c4 10             	add    esp,0x10
c001b8b0:	5b                   	pop    ebx
c001b8b1:	5e                   	pop    esi
c001b8b2:	5f                   	pop    edi
c001b8b3:	c3                   	ret    

c001b8b4 <Sys::sbrk(regs*)>:
c001b8b4:	56                   	push   esi
c001b8b5:	53                   	push   ebx
c001b8b6:	50                   	push   eax
c001b8b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b8c0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8c3:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b8c6:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b8cc:	85 db                	test   ebx,ebx
c001b8ce:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b8d1:	74 02                	je     c001b8d5 <Sys::sbrk(regs*)+0x21>
c001b8d3:	79 06                	jns    c001b8db <Sys::sbrk(regs*)+0x27>
c001b8d5:	89 f0                	mov    eax,esi
c001b8d7:	31 d2                	xor    edx,edx
c001b8d9:	eb 2a                	jmp    c001b905 <Sys::sbrk(regs*)+0x51>
c001b8db:	83 c8 ff             	or     eax,0xffffffff
c001b8de:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b8e4:	89 c2                	mov    edx,eax
c001b8e6:	77 1d                	ja     c001b905 <Sys::sbrk(regs*)+0x51>
c001b8e8:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b8ee:	50                   	push   eax
c001b8ef:	c1 ea 0c             	shr    edx,0xc
c001b8f2:	68 07 0c 00 00       	push   0xc07
c001b8f7:	52                   	push   edx
c001b8f8:	51                   	push   ecx
c001b8f9:	e8 ba 6a ff ff       	call   c00123b8 <VAS::allocatePages(int, int)>
c001b8fe:	89 f0                	mov    eax,esi
c001b900:	31 d2                	xor    edx,edx
c001b902:	83 c4 10             	add    esp,0x10
c001b905:	59                   	pop    ecx
c001b906:	5b                   	pop    ebx
c001b907:	5e                   	pop    esi
c001b908:	c3                   	ret    

c001b909 <Sys::setCwd(regs*)>:
c001b909:	83 ec 14             	sub    esp,0x14
c001b90c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b910:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b913:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b918:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b91b:	e8 35 7e ff ff       	call   c0013755 <Fs::setcwd(Process*, char*)>
c001b920:	83 c4 1c             	add    esp,0x1c
c001b923:	99                   	cdq    
c001b924:	c3                   	ret    

c001b925 <Sys::setTime(regs*)>:
c001b925:	55                   	push   ebp
c001b926:	31 d2                	xor    edx,edx
c001b928:	57                   	push   edi
c001b929:	bf 18 00 00 00       	mov    edi,0x18
c001b92e:	56                   	push   esi
c001b92f:	53                   	push   ebx
c001b930:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b935:	83 ec 30             	sub    esp,0x30
c001b938:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b93c:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b93f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b942:	f7 f3                	div    ebx
c001b944:	89 d6                	mov    esi,edx
c001b946:	31 d2                	xor    edx,edx
c001b948:	f7 f3                	div    ebx
c001b94a:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b94d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b951:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b956:	31 d2                	xor    edx,edx
c001b958:	f7 f3                	div    ebx
c001b95a:	31 d2                	xor    edx,edx
c001b95c:	bb 0c 00 00 00       	mov    ebx,0xc
c001b961:	f7 f7                	div    edi
c001b963:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b966:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b96a:	0f b7 cd             	movzx  ecx,bp
c001b96d:	56                   	push   esi
c001b96e:	89 c7                	mov    edi,eax
c001b970:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b974:	c1 e6 10             	shl    esi,0x10
c001b977:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b97b:	83 e7 1f             	and    edi,0x1f
c001b97e:	51                   	push   ecx
c001b97f:	47                   	inc    edi
c001b980:	c1 e8 05             	shr    eax,0x5
c001b983:	31 d2                	xor    edx,edx
c001b985:	f7 f3                	div    ebx
c001b987:	31 db                	xor    ebx,ebx
c001b989:	52                   	push   edx
c001b98a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b98e:	57                   	push   edi
c001b98f:	68 0d c9 02 c0       	push   0xc002c90d
c001b994:	e8 ec 74 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001b999:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b99d:	89 f8                	mov    eax,edi
c001b99f:	31 c9                	xor    ecx,ecx
c001b9a1:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b9a5:	88 c1                	mov    cl,al
c001b9a7:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b9ad:	88 d5                	mov    ch,dl
c001b9af:	c1 e0 10             	shl    eax,0x10
c001b9b2:	0f b7 d1             	movzx  edx,cx
c001b9b5:	09 c2                	or     edx,eax
c001b9b7:	89 d8                	mov    eax,ebx
c001b9b9:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b9be:	09 f0                	or     eax,esi
c001b9c0:	89 c3                	mov    ebx,eax
c001b9c2:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b9c6:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b9ca:	83 c4 18             	add    esp,0x18
c001b9cd:	53                   	push   ebx
c001b9ce:	52                   	push   edx
c001b9cf:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b9d3:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b9d7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b9db:	e8 97 84 ff ff       	call   c0013e77 <datetimeToSeconds(datetime_t)>
c001b9e0:	83 c4 0c             	add    esp,0xc
c001b9e3:	52                   	push   edx
c001b9e4:	50                   	push   eax
c001b9e5:	56                   	push   esi
c001b9e6:	e8 13 86 ff ff       	call   c0013ffe <secondsToDatetime(unsigned long long)>
c001b9eb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b9ef:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b9f3:	51                   	push   ecx
c001b9f4:	89 d6                	mov    esi,edx
c001b9f6:	51                   	push   ecx
c001b9f7:	c1 ee 10             	shr    esi,0x10
c001b9fa:	89 f3                	mov    ebx,esi
c001b9fc:	0f b6 f3             	movzx  esi,bl
c001b9ff:	56                   	push   esi
c001ba00:	0f b6 f6             	movzx  esi,dh
c001ba03:	0f b6 d2             	movzx  edx,dl
c001ba06:	56                   	push   esi
c001ba07:	52                   	push   edx
c001ba08:	89 c2                	mov    edx,eax
c001ba0a:	c1 ea 10             	shr    edx,0x10
c001ba0d:	52                   	push   edx
c001ba0e:	0f b6 d4             	movzx  edx,ah
c001ba11:	0f b6 c0             	movzx  eax,al
c001ba14:	52                   	push   edx
c001ba15:	50                   	push   eax
c001ba16:	68 29 c9 02 c0       	push   0xc002c929
c001ba1b:	e8 65 74 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001ba20:	83 c4 2c             	add    esp,0x2c
c001ba23:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c001ba28:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001ba2c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ba30:	53                   	push   ebx
c001ba31:	51                   	push   ecx
c001ba32:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001ba38:	e8 61 85 ff ff       	call   c0013f9e <Clock::setTimeInDatetimeLocal(datetime_t)>
c001ba3d:	83 f0 01             	xor    eax,0x1
c001ba40:	31 d2                	xor    edx,edx
c001ba42:	0f b6 c0             	movzx  eax,al
c001ba45:	83 c4 3c             	add    esp,0x3c
c001ba48:	5b                   	pop    ebx
c001ba49:	5e                   	pop    esi
c001ba4a:	5f                   	pop    edi
c001ba4b:	5d                   	pop    ebp
c001ba4c:	c3                   	ret    

c001ba4d <Sys::timezone(regs*)>:
c001ba4d:	53                   	push   ebx
c001ba4e:	83 ec 08             	sub    esp,0x8
c001ba51:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba55:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001ba59:	75 17                	jne    c001ba72 <Sys::timezone(regs*)+0x25>
c001ba5b:	83 ec 0c             	sub    esp,0xc
c001ba5e:	68 45 c9 02 c0       	push   0xc002c945
c001ba63:	e8 1d 74 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001ba68:	83 c8 ff             	or     eax,0xffffffff
c001ba6b:	83 c4 10             	add    esp,0x10
c001ba6e:	89 c2                	mov    edx,eax
c001ba70:	eb 20                	jmp    c001ba92 <Sys::timezone(regs*)+0x45>
c001ba72:	83 ec 0c             	sub    esp,0xc
c001ba75:	68 7d c9 02 c0       	push   0xc002c97d
c001ba7a:	e8 06 74 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001ba7f:	58                   	pop    eax
c001ba80:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001ba83:	e8 78 82 ff ff       	call   c0013d00 <User::loadClockSettings(int)>
c001ba88:	83 c4 10             	add    esp,0x10
c001ba8b:	b8 01 00 00 00       	mov    eax,0x1
c001ba90:	31 d2                	xor    edx,edx
c001ba92:	83 c4 08             	add    esp,0x8
c001ba95:	5b                   	pop    ebx
c001ba96:	c3                   	ret    

c001ba97 <Sys::write(regs*)>:
c001ba97:	57                   	push   edi
c001ba98:	56                   	push   esi
c001ba99:	53                   	push   ebx
c001ba9a:	83 ec 10             	sub    esp,0x10
c001ba9d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001baa1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001baa4:	83 f8 02             	cmp    eax,0x2
c001baa7:	77 10                	ja     c001bab9 <Sys::write(regs*)+0x22>
c001baa9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001baae:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bab1:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001bab7:	eb 0e                	jmp    c001bac7 <Sys::write(regs*)+0x30>
c001bab9:	83 ec 0c             	sub    esp,0xc
c001babc:	50                   	push   eax
c001babd:	e8 67 5e ff ff       	call   c0011929 <getFromFileDescriptor(int)>
c001bac2:	83 c4 10             	add    esp,0x10
c001bac5:	89 c1                	mov    ecx,eax
c001bac7:	83 c8 ff             	or     eax,0xffffffff
c001baca:	85 c9                	test   ecx,ecx
c001bacc:	89 c2                	mov    edx,eax
c001bace:	74 28                	je     c001baf8 <Sys::write(regs*)+0x61>
c001bad0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bad8:	31 ff                	xor    edi,edi
c001bada:	83 ec 0c             	sub    esp,0xc
c001badd:	8b 01                	mov    eax,DWORD PTR [ecx]
c001badf:	8d 54 24 18          	lea    edx,[esp+0x18]
c001bae3:	52                   	push   edx
c001bae4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bae7:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001baea:	57                   	push   edi
c001baeb:	56                   	push   esi
c001baec:	51                   	push   ecx
c001baed:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001baf0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001baf4:	83 c4 20             	add    esp,0x20
c001baf7:	99                   	cdq    
c001baf8:	83 c4 10             	add    esp,0x10
c001bafb:	5b                   	pop    ebx
c001bafc:	5e                   	pop    esi
c001bafd:	5f                   	pop    edi
c001bafe:	c3                   	ret    

c001baff <Sys::wsbe(regs*)>:
c001baff:	57                   	push   edi
c001bb00:	b9 0b 00 00 00       	mov    ecx,0xb
c001bb05:	56                   	push   esi
c001bb06:	be bc c9 02 c0       	mov    esi,0xc002c9bc
c001bb0b:	53                   	push   ebx
c001bb0c:	83 ec 30             	sub    esp,0x30
c001bb0f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001bb13:	fc                   	cld    
c001bb14:	83 ec 0c             	sub    esp,0xc
c001bb17:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bb19:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001bb1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb22:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb25:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001bb2b:	8b 06                	mov    eax,DWORD PTR [esi]
c001bb2d:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001bb30:	57                   	push   edi
c001bb31:	e8 52 4c fe ff       	call   c0000788 <strlen>
c001bb36:	5a                   	pop    edx
c001bb37:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001bb3b:	52                   	push   edx
c001bb3c:	31 d2                	xor    edx,edx
c001bb3e:	57                   	push   edi
c001bb3f:	52                   	push   edx
c001bb40:	50                   	push   eax
c001bb41:	56                   	push   esi
c001bb42:	ff d3                	call   ebx
c001bb44:	83 c4 14             	add    esp,0x14
c001bb47:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001bb4b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bb4e:	e8 00 34 00 00       	call   c001ef53 <terminateTask(int)>
c001bb53:	83 c4 40             	add    esp,0x40
c001bb56:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001bb5b:	5b                   	pop    ebx
c001bb5c:	31 d2                	xor    edx,edx
c001bb5e:	5e                   	pop    esi
c001bb5f:	5f                   	pop    edi
c001bb60:	c3                   	ret    

c001bb61 <Sys::yield(regs*)>:
c001bb61:	57                   	push   edi
c001bb62:	56                   	push   esi
c001bb63:	53                   	push   ebx
c001bb64:	fa                   	cli    
c001bb65:	ff 05 a8 25 03 c0    	inc    DWORD PTR ds:0xc00325a8
c001bb6b:	e8 b0 2a 00 00       	call   c001e620 <schedule()>
c001bb70:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c001bb75:	48                   	dec    eax
c001bb76:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c001bb7b:	75 01                	jne    c001bb7e <Sys::yield(regs*)+0x1d>
c001bb7d:	fb                   	sti    
c001bb7e:	8b 35 f0 f6 02 c0    	mov    esi,DWORD PTR ds:0xc002f6f0
c001bb84:	8b 3d f4 f6 02 c0    	mov    edi,DWORD PTR ds:0xc002f6f4
c001bb8a:	89 f0                	mov    eax,esi
c001bb8c:	89 fb                	mov    ebx,edi
c001bb8e:	89 f1                	mov    ecx,esi
c001bb90:	c1 e0 07             	shl    eax,0x7
c001bb93:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001bb97:	25 80 30 0f 00       	and    eax,0xf3080
c001bb9c:	c1 eb 17             	shr    ebx,0x17
c001bb9f:	31 c8                	xor    eax,ecx
c001bba1:	89 da                	mov    edx,ebx
c001bba3:	5b                   	pop    ebx
c001bba4:	5e                   	pop    esi
c001bba5:	5f                   	pop    edi
c001bba6:	c3                   	ret    

c001bba7 <sysCallSeekDir(regs*)>:
c001bba7:	31 c0                	xor    eax,eax
c001bba9:	31 d2                	xor    edx,edx
c001bbab:	c3                   	ret    

c001bbac <sysCallTellDir(regs*)>:
c001bbac:	31 c0                	xor    eax,eax
c001bbae:	31 d2                	xor    edx,edx
c001bbb0:	c3                   	ret    

c001bbb1 <sysCallVerify(regs*)>:
c001bbb1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bbb5:	31 d2                	xor    edx,edx
c001bbb7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bbba:	c3                   	ret    

c001bbbb <sysFormatDisk(regs*)>:
c001bbbb:	56                   	push   esi
c001bbbc:	53                   	push   ebx
c001bbbd:	53                   	push   ebx
c001bbbe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bbc2:	8b 1d f4 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f1f4
c001bbc8:	eb 25                	jmp    c001bbef <sysFormatDisk(regs*)+0x34>
c001bbca:	83 ec 0c             	sub    esp,0xc
c001bbcd:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bbd0:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bbd2:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001bbd5:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bbd8:	50                   	push   eax
c001bbd9:	ff 34 85 80 f6 02 c0 	push   DWORD PTR [eax*4-0x3ffd0980]
c001bbe0:	53                   	push   ebx
c001bbe1:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001bbe4:	83 c4 20             	add    esp,0x20
c001bbe7:	83 f8 08             	cmp    eax,0x8
c001bbea:	75 12                	jne    c001bbfe <sysFormatDisk(regs*)+0x43>
c001bbec:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001bbef:	85 db                	test   ebx,ebx
c001bbf1:	75 d7                	jne    c001bbca <sysFormatDisk(regs*)+0xf>
c001bbf3:	59                   	pop    ecx
c001bbf4:	b8 03 00 00 00       	mov    eax,0x3
c001bbf9:	31 d2                	xor    edx,edx
c001bbfb:	5b                   	pop    ebx
c001bbfc:	5e                   	pop    esi
c001bbfd:	c3                   	ret    
c001bbfe:	85 c0                	test   eax,eax
c001bc00:	74 1b                	je     c001bc1d <sysFormatDisk(regs*)+0x62>
c001bc02:	83 f8 09             	cmp    eax,0x9
c001bc05:	74 0b                	je     c001bc12 <sysFormatDisk(regs*)+0x57>
c001bc07:	59                   	pop    ecx
c001bc08:	b8 02 00 00 00       	mov    eax,0x2
c001bc0d:	31 d2                	xor    edx,edx
c001bc0f:	5b                   	pop    ebx
c001bc10:	5e                   	pop    esi
c001bc11:	c3                   	ret    
c001bc12:	59                   	pop    ecx
c001bc13:	b8 01 00 00 00       	mov    eax,0x1
c001bc18:	31 d2                	xor    edx,edx
c001bc1a:	5b                   	pop    ebx
c001bc1b:	5e                   	pop    esi
c001bc1c:	c3                   	ret    
c001bc1d:	59                   	pop    ecx
c001bc1e:	31 c0                	xor    eax,eax
c001bc20:	31 d2                	xor    edx,edx
c001bc22:	5b                   	pop    ebx
c001bc23:	5e                   	pop    esi
c001bc24:	c3                   	ret    

c001bc25 <sysSetDiskVolumeLabel(regs*)>:
c001bc25:	56                   	push   esi
c001bc26:	53                   	push   ebx
c001bc27:	53                   	push   ebx
c001bc28:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bc2c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bc2f:	83 f8 19             	cmp    eax,0x19
c001bc32:	77 29                	ja     c001bc5d <sysSetDiskVolumeLabel(regs*)+0x38>
c001bc34:	8b 0c 85 80 f6 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd0980]
c001bc3b:	85 c9                	test   ecx,ecx
c001bc3d:	74 1e                	je     c001bc5d <sysSetDiskVolumeLabel(regs*)+0x38>
c001bc3f:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001bc42:	85 d2                	test   edx,edx
c001bc44:	74 17                	je     c001bc5d <sysSetDiskVolumeLabel(regs*)+0x38>
c001bc46:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001bc4c:	8b 33                	mov    esi,DWORD PTR [ebx]
c001bc4e:	52                   	push   edx
c001bc4f:	50                   	push   eax
c001bc50:	51                   	push   ecx
c001bc51:	53                   	push   ebx
c001bc52:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001bc55:	83 c4 10             	add    esp,0x10
c001bc58:	99                   	cdq    
c001bc59:	59                   	pop    ecx
c001bc5a:	5b                   	pop    ebx
c001bc5b:	5e                   	pop    esi
c001bc5c:	c3                   	ret    
c001bc5d:	59                   	pop    ecx
c001bc5e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001bc63:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc68:	5b                   	pop    ebx
c001bc69:	5e                   	pop    esi
c001bc6a:	c3                   	ret    

c001bc6b <sysGetDiskVolumeLabel(regs*)>:
c001bc6b:	57                   	push   edi
c001bc6c:	56                   	push   esi
c001bc6d:	53                   	push   ebx
c001bc6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc72:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001bc75:	83 fa 19             	cmp    edx,0x19
c001bc78:	77 34                	ja     c001bcae <sysGetDiskVolumeLabel(regs*)+0x43>
c001bc7a:	8b 0c 95 80 f6 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd0980]
c001bc81:	85 c9                	test   ecx,ecx
c001bc83:	74 29                	je     c001bcae <sysGetDiskVolumeLabel(regs*)+0x43>
c001bc85:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001bc88:	85 db                	test   ebx,ebx
c001bc8a:	74 22                	je     c001bcae <sysGetDiskVolumeLabel(regs*)+0x43>
c001bc8c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001bc8f:	85 c0                	test   eax,eax
c001bc91:	74 1b                	je     c001bcae <sysGetDiskVolumeLabel(regs*)+0x43>
c001bc93:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001bc99:	83 ec 0c             	sub    esp,0xc
c001bc9c:	8b 3e                	mov    edi,DWORD PTR [esi]
c001bc9e:	50                   	push   eax
c001bc9f:	53                   	push   ebx
c001bca0:	52                   	push   edx
c001bca1:	51                   	push   ecx
c001bca2:	56                   	push   esi
c001bca3:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001bca6:	83 c4 20             	add    esp,0x20
c001bca9:	99                   	cdq    
c001bcaa:	5b                   	pop    ebx
c001bcab:	5e                   	pop    esi
c001bcac:	5f                   	pop    edi
c001bcad:	c3                   	ret    
c001bcae:	5b                   	pop    ebx
c001bcaf:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001bcb4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcb9:	5e                   	pop    esi
c001bcba:	5f                   	pop    edi
c001bcbb:	c3                   	ret    

c001bcbc <sysShutdown(regs*)>:
c001bcbc:	83 ec 0c             	sub    esp,0xc
c001bcbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcc3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bcc6:	85 c0                	test   eax,eax
c001bcc8:	74 18                	je     c001bce2 <sysShutdown(regs*)+0x26>
c001bcca:	83 f8 01             	cmp    eax,0x1
c001bccd:	74 38                	je     c001bd07 <sysShutdown(regs*)+0x4b>
c001bccf:	83 f8 02             	cmp    eax,0x2
c001bcd2:	74 24                	je     c001bcf8 <sysShutdown(regs*)+0x3c>
c001bcd4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcd9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcde:	83 c4 0c             	add    esp,0xc
c001bce1:	c3                   	ret    
c001bce2:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c001bce7:	8b 10                	mov    edx,DWORD PTR [eax]
c001bce9:	6a 00                	push   0x0
c001bceb:	6a 00                	push   0x0
c001bced:	6a 00                	push   0x0
c001bcef:	50                   	push   eax
c001bcf0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bcf3:	83 c4 10             	add    esp,0x10
c001bcf6:	eb dc                	jmp    c001bcd4 <sysShutdown(regs*)+0x18>
c001bcf8:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c001bcfd:	8b 10                	mov    edx,DWORD PTR [eax]
c001bcff:	6a 00                	push   0x0
c001bd01:	6a 00                	push   0x0
c001bd03:	6a 01                	push   0x1
c001bd05:	eb e8                	jmp    c001bcef <sysShutdown(regs*)+0x33>
c001bd07:	a1 20 17 03 c0       	mov    eax,ds:0xc0031720
c001bd0c:	85 c0                	test   eax,eax
c001bd0e:	74 02                	je     c001bd12 <sysShutdown(regs*)+0x56>
c001bd10:	ff d0                	call   eax
c001bd12:	31 c0                	xor    eax,eax
c001bd14:	31 d2                	xor    edx,edx
c001bd16:	83 c4 0c             	add    esp,0xc
c001bd19:	c3                   	ret    

c001bd1a <sysCallRealpath(regs*)>:
c001bd1a:	83 ec 0c             	sub    esp,0xc
c001bd1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd21:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001bd24:	85 d2                	test   edx,edx
c001bd26:	74 07                	je     c001bd2f <sysCallRealpath(regs*)+0x15>
c001bd28:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001bd2b:	85 c0                	test   eax,eax
c001bd2d:	75 0b                	jne    c001bd3a <sysCallRealpath(regs*)+0x20>
c001bd2f:	b8 01 00 00 00       	mov    eax,0x1
c001bd34:	31 d2                	xor    edx,edx
c001bd36:	83 c4 0c             	add    esp,0xc
c001bd39:	c3                   	ret    
c001bd3a:	51                   	push   ecx
c001bd3b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bd41:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bd44:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001bd4a:	51                   	push   ecx
c001bd4b:	52                   	push   edx
c001bd4c:	50                   	push   eax
c001bd4d:	e8 e8 74 ff ff       	call   c001323a <Fs::standardiseFiles(char*, char const*, char const*)>
c001bd52:	83 c4 10             	add    esp,0x10
c001bd55:	31 c0                	xor    eax,eax
c001bd57:	31 d2                	xor    edx,edx
c001bd59:	83 c4 0c             	add    esp,0xc
c001bd5c:	c3                   	ret    

c001bd5d <sysCallGetArgc(regs*)>:
c001bd5d:	83 ec 14             	sub    esp,0x14
c001bd60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd65:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bd68:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001bd6e:	68 e8 c9 02 c0       	push   0xc002c9e8
c001bd73:	e8 0d 71 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001bd78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd7d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bd80:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001bd86:	83 c4 1c             	add    esp,0x1c
c001bd89:	99                   	cdq    
c001bd8a:	c3                   	ret    

c001bd8b <sysCallReadDir(regs*)>:
c001bd8b:	53                   	push   ebx
c001bd8c:	83 ec 18             	sub    esp,0x18
c001bd8f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bd93:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bd96:	83 f8 02             	cmp    eax,0x2
c001bd99:	76 53                	jbe    c001bdee <sysCallReadDir(regs*)+0x63>
c001bd9b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bd9e:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001bda4:	77 4f                	ja     c001bdf5 <sysCallReadDir(regs*)+0x6a>
c001bda6:	83 ec 0c             	sub    esp,0xc
c001bda9:	50                   	push   eax
c001bdaa:	e8 7a 5b ff ff       	call   c0011929 <getFromFileDescriptor(int)>
c001bdaf:	83 c4 10             	add    esp,0x10
c001bdb2:	85 c0                	test   eax,eax
c001bdb4:	74 50                	je     c001be06 <sysCallReadDir(regs*)+0x7b>
c001bdb6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bdbe:	83 ec 0c             	sub    esp,0xc
c001bdc1:	8b 10                	mov    edx,DWORD PTR [eax]
c001bdc3:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001bdc7:	51                   	push   ecx
c001bdc8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bdcb:	6a 00                	push   0x0
c001bdcd:	68 10 01 00 00       	push   0x110
c001bdd2:	50                   	push   eax
c001bdd3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bdd6:	83 c4 20             	add    esp,0x20
c001bdd9:	85 c0                	test   eax,eax
c001bddb:	74 38                	je     c001be15 <sysCallReadDir(regs*)+0x8a>
c001bddd:	83 f8 07             	cmp    eax,0x7
c001bde0:	74 0c                	je     c001bdee <sysCallReadDir(regs*)+0x63>
c001bde2:	b8 02 00 00 00       	mov    eax,0x2
c001bde7:	31 d2                	xor    edx,edx
c001bde9:	83 c4 18             	add    esp,0x18
c001bdec:	5b                   	pop    ebx
c001bded:	c3                   	ret    
c001bdee:	b8 01 00 00 00       	mov    eax,0x1
c001bdf3:	eb f2                	jmp    c001bde7 <sysCallReadDir(regs*)+0x5c>
c001bdf5:	83 ec 08             	sub    esp,0x8
c001bdf8:	52                   	push   edx
c001bdf9:	68 0c cb 02 c0       	push   0xc002cb0c
c001bdfe:	e8 82 70 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001be03:	83 c4 10             	add    esp,0x10
c001be06:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be0b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be10:	83 c4 18             	add    esp,0x18
c001be13:	5b                   	pop    ebx
c001be14:	c3                   	ret    
c001be15:	31 c0                	xor    eax,eax
c001be17:	eb ce                	jmp    c001bde7 <sysCallReadDir(regs*)+0x5c>

c001be19 <sysCallIsATTY(regs*)>:
c001be19:	83 ec 0c             	sub    esp,0xc
c001be1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be20:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001be23:	83 f8 02             	cmp    eax,0x2
c001be26:	76 07                	jbe    c001be2f <sysCallIsATTY(regs*)+0x16>
c001be28:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001be2d:	75 26                	jne    c001be55 <sysCallIsATTY(regs*)+0x3c>
c001be2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be34:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be37:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001be3d:	85 c0                	test   eax,eax
c001be3f:	74 24                	je     c001be65 <sysCallIsATTY(regs*)+0x4c>
c001be41:	83 ec 0c             	sub    esp,0xc
c001be44:	8b 10                	mov    edx,DWORD PTR [eax]
c001be46:	50                   	push   eax
c001be47:	ff 12                	call   DWORD PTR [edx]
c001be49:	31 d2                	xor    edx,edx
c001be4b:	0f b6 c0             	movzx  eax,al
c001be4e:	83 c4 10             	add    esp,0x10
c001be51:	83 c4 0c             	add    esp,0xc
c001be54:	c3                   	ret    
c001be55:	83 ec 0c             	sub    esp,0xc
c001be58:	50                   	push   eax
c001be59:	e8 cb 5a ff ff       	call   c0011929 <getFromFileDescriptor(int)>
c001be5e:	83 c4 10             	add    esp,0x10
c001be61:	85 c0                	test   eax,eax
c001be63:	75 dc                	jne    c001be41 <sysCallIsATTY(regs*)+0x28>
c001be65:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be6a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be6f:	83 c4 0c             	add    esp,0xc
c001be72:	c3                   	ret    

c001be73 <sysCallSeek(regs*)>:
c001be73:	53                   	push   ebx
c001be74:	83 ec 08             	sub    esp,0x8
c001be77:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001be7b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001be7e:	83 f8 02             	cmp    eax,0x2
c001be81:	76 4a                	jbe    c001becd <sysCallSeek(regs*)+0x5a>
c001be83:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001be88:	77 32                	ja     c001bebc <sysCallSeek(regs*)+0x49>
c001be8a:	83 ec 0c             	sub    esp,0xc
c001be8d:	50                   	push   eax
c001be8e:	e8 96 5a ff ff       	call   c0011929 <getFromFileDescriptor(int)>
c001be93:	83 c4 0c             	add    esp,0xc
c001be96:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001be99:	31 db                	xor    ebx,ebx
c001be9b:	53                   	push   ebx
c001be9c:	51                   	push   ecx
c001be9d:	50                   	push   eax
c001be9e:	e8 63 76 ff ff       	call   c0013506 <File::seek(unsigned long long)>
c001bea3:	83 c4 10             	add    esp,0x10
c001bea6:	85 c0                	test   eax,eax
c001bea8:	0f 95 c0             	setne  al
c001beab:	31 d2                	xor    edx,edx
c001bead:	0f b6 c0             	movzx  eax,al
c001beb0:	f7 d8                	neg    eax
c001beb2:	83 d2 00             	adc    edx,0x0
c001beb5:	83 c4 08             	add    esp,0x8
c001beb8:	f7 da                	neg    edx
c001beba:	5b                   	pop    ebx
c001bebb:	c3                   	ret    
c001bebc:	83 ec 08             	sub    esp,0x8
c001bebf:	50                   	push   eax
c001bec0:	68 f3 c9 02 c0       	push   0xc002c9f3
c001bec5:	e8 bb 6f ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001beca:	83 c4 10             	add    esp,0x10
c001becd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bed2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bed7:	83 c4 08             	add    esp,0x8
c001beda:	5b                   	pop    ebx
c001bedb:	c3                   	ret    

c001bedc <sysCallTell(regs*)>:
c001bedc:	53                   	push   ebx
c001bedd:	83 ec 08             	sub    esp,0x8
c001bee0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bee4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bee7:	83 f8 02             	cmp    eax,0x2
c001beea:	76 5e                	jbe    c001bf4a <sysCallTell(regs*)+0x6e>
c001beec:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bef1:	77 2d                	ja     c001bf20 <sysCallTell(regs*)+0x44>
c001bef3:	83 ec 0c             	sub    esp,0xc
c001bef6:	50                   	push   eax
c001bef7:	e8 2d 5a ff ff       	call   c0011929 <getFromFileDescriptor(int)>
c001befc:	5a                   	pop    edx
c001befd:	59                   	pop    ecx
c001befe:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bf01:	50                   	push   eax
c001bf02:	e8 55 76 ff ff       	call   c001355c <File::tell(unsigned long long*)>
c001bf07:	83 c4 10             	add    esp,0x10
c001bf0a:	85 c0                	test   eax,eax
c001bf0c:	0f 95 c0             	setne  al
c001bf0f:	31 d2                	xor    edx,edx
c001bf11:	0f b6 c0             	movzx  eax,al
c001bf14:	f7 d8                	neg    eax
c001bf16:	83 d2 00             	adc    edx,0x0
c001bf19:	83 c4 08             	add    esp,0x8
c001bf1c:	f7 da                	neg    edx
c001bf1e:	5b                   	pop    ebx
c001bf1f:	c3                   	ret    
c001bf20:	83 ec 08             	sub    esp,0x8
c001bf23:	50                   	push   eax
c001bf24:	68 0d ca 02 c0       	push   0xc002ca0d
c001bf29:	e8 57 6f ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001bf2e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bf31:	83 c4 10             	add    esp,0x10
c001bf34:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bf3a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bf41:	31 d2                	xor    edx,edx
c001bf43:	31 c0                	xor    eax,eax
c001bf45:	83 c4 08             	add    esp,0x8
c001bf48:	5b                   	pop    ebx
c001bf49:	c3                   	ret    
c001bf4a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bf4f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bf54:	83 c4 08             	add    esp,0x8
c001bf57:	5b                   	pop    ebx
c001bf58:	c3                   	ret    

c001bf59 <sysCallSize(regs*)>:
c001bf59:	53                   	push   ebx
c001bf5a:	83 ec 18             	sub    esp,0x18
c001bf5d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bf61:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bf64:	83 f8 02             	cmp    eax,0x2
c001bf67:	76 64                	jbe    c001bfcd <sysCallSize(regs*)+0x74>
c001bf69:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bf6e:	77 33                	ja     c001bfa3 <sysCallSize(regs*)+0x4a>
c001bf70:	83 ec 0c             	sub    esp,0xc
c001bf73:	50                   	push   eax
c001bf74:	e8 b0 59 ff ff       	call   c0011929 <getFromFileDescriptor(int)>
c001bf79:	83 c4 0c             	add    esp,0xc
c001bf7c:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bf80:	52                   	push   edx
c001bf81:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bf84:	50                   	push   eax
c001bf85:	e8 6a 77 ff ff       	call   c00136f4 <File::stat(unsigned long long*, bool*)>
c001bf8a:	83 c4 10             	add    esp,0x10
c001bf8d:	85 c0                	test   eax,eax
c001bf8f:	0f 95 c0             	setne  al
c001bf92:	31 d2                	xor    edx,edx
c001bf94:	0f b6 c0             	movzx  eax,al
c001bf97:	f7 d8                	neg    eax
c001bf99:	83 d2 00             	adc    edx,0x0
c001bf9c:	83 c4 18             	add    esp,0x18
c001bf9f:	f7 da                	neg    edx
c001bfa1:	5b                   	pop    ebx
c001bfa2:	c3                   	ret    
c001bfa3:	83 ec 08             	sub    esp,0x8
c001bfa6:	50                   	push   eax
c001bfa7:	68 27 ca 02 c0       	push   0xc002ca27
c001bfac:	e8 d4 6e ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001bfb1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bfb4:	83 c4 10             	add    esp,0x10
c001bfb7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bfbd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bfc4:	31 d2                	xor    edx,edx
c001bfc6:	31 c0                	xor    eax,eax
c001bfc8:	83 c4 18             	add    esp,0x18
c001bfcb:	5b                   	pop    ebx
c001bfcc:	c3                   	ret    
c001bfcd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bfd2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bfd7:	83 c4 18             	add    esp,0x18
c001bfda:	5b                   	pop    ebx
c001bfdb:	c3                   	ret    

c001bfdc <sysCallSizeFromFilename(regs*)>:
c001bfdc:	57                   	push   edi
c001bfdd:	56                   	push   esi
c001bfde:	53                   	push   ebx
c001bfdf:	83 ec 20             	sub    esp,0x20
c001bfe2:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bfe6:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bfe9:	83 fb 02             	cmp    ebx,0x2
c001bfec:	0f 86 99 00 00 00    	jbe    c001c08b <sysCallSizeFromFilename(regs*)+0xaf>
c001bff2:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bff8:	77 65                	ja     c001c05f <sysCallSizeFromFilename(regs*)+0x83>
c001bffa:	83 ec 0c             	sub    esp,0xc
c001bffd:	68 14 01 00 00       	push   0x114
c001c002:	e8 d3 38 ff ff       	call   c000f8da <malloc>
c001c007:	83 c4 0c             	add    esp,0xc
c001c00a:	89 c6                	mov    esi,eax
c001c00c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c011:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c014:	53                   	push   ebx
c001c015:	56                   	push   esi
c001c016:	e8 c9 73 ff ff       	call   c00133e4 <File::File(char const*, Process*)>
c001c01b:	83 c4 0c             	add    esp,0xc
c001c01e:	8d 44 24 23          	lea    eax,[esp+0x23]
c001c022:	50                   	push   eax
c001c023:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001c026:	56                   	push   esi
c001c027:	e8 c8 76 ff ff       	call   c00136f4 <File::stat(unsigned long long*, bool*)>
c001c02c:	83 c4 10             	add    esp,0x10
c001c02f:	85 f6                	test   esi,esi
c001c031:	74 14                	je     c001c047 <sysCallSizeFromFilename(regs*)+0x6b>
c001c033:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c037:	8b 16                	mov    edx,DWORD PTR [esi]
c001c039:	83 ec 0c             	sub    esp,0xc
c001c03c:	56                   	push   esi
c001c03d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c040:	83 c4 10             	add    esp,0x10
c001c043:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c047:	85 c0                	test   eax,eax
c001c049:	0f 95 c0             	setne  al
c001c04c:	31 d2                	xor    edx,edx
c001c04e:	0f b6 c0             	movzx  eax,al
c001c051:	f7 d8                	neg    eax
c001c053:	83 d2 00             	adc    edx,0x0
c001c056:	83 c4 20             	add    esp,0x20
c001c059:	f7 da                	neg    edx
c001c05b:	5b                   	pop    ebx
c001c05c:	5e                   	pop    esi
c001c05d:	5f                   	pop    edi
c001c05e:	c3                   	ret    
c001c05f:	83 ec 08             	sub    esp,0x8
c001c062:	53                   	push   ebx
c001c063:	68 27 ca 02 c0       	push   0xc002ca27
c001c068:	e8 18 6e ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001c06d:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001c070:	83 c4 10             	add    esp,0x10
c001c073:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c079:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c080:	31 d2                	xor    edx,edx
c001c082:	83 c4 20             	add    esp,0x20
c001c085:	31 c0                	xor    eax,eax
c001c087:	5b                   	pop    ebx
c001c088:	5e                   	pop    esi
c001c089:	5f                   	pop    edi
c001c08a:	c3                   	ret    
c001c08b:	83 c4 20             	add    esp,0x20
c001c08e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c093:	5b                   	pop    ebx
c001c094:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c099:	5e                   	pop    esi
c001c09a:	5f                   	pop    edi
c001c09b:	c3                   	ret    

c001c09c <sysCallClose(regs*)>:
c001c09c:	53                   	push   ebx
c001c09d:	83 ec 08             	sub    esp,0x8
c001c0a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0a4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c0a7:	83 f8 02             	cmp    eax,0x2
c001c0aa:	76 50                	jbe    c001c0fc <sysCallClose(regs*)+0x60>
c001c0ac:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c0b1:	74 58                	je     c001c10b <sysCallClose(regs*)+0x6f>
c001c0b3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001c0b8:	74 60                	je     c001c11a <sysCallClose(regs*)+0x7e>
c001c0ba:	77 2f                	ja     c001c0eb <sysCallClose(regs*)+0x4f>
c001c0bc:	83 ec 0c             	sub    esp,0xc
c001c0bf:	50                   	push   eax
c001c0c0:	e8 64 58 ff ff       	call   c0011929 <getFromFileDescriptor(int)>
c001c0c5:	89 c3                	mov    ebx,eax
c001c0c7:	89 04 24             	mov    DWORD PTR [esp],eax
c001c0ca:	e8 d7 73 ff ff       	call   c00134a6 <File::close()>
c001c0cf:	83 c4 10             	add    esp,0x10
c001c0d2:	85 db                	test   ebx,ebx
c001c0d4:	74 0c                	je     c001c0e2 <sysCallClose(regs*)+0x46>
c001c0d6:	83 ec 0c             	sub    esp,0xc
c001c0d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c0db:	53                   	push   ebx
c001c0dc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c0df:	83 c4 10             	add    esp,0x10
c001c0e2:	31 c0                	xor    eax,eax
c001c0e4:	31 d2                	xor    edx,edx
c001c0e6:	83 c4 08             	add    esp,0x8
c001c0e9:	5b                   	pop    ebx
c001c0ea:	c3                   	ret    
c001c0eb:	83 ec 08             	sub    esp,0x8
c001c0ee:	50                   	push   eax
c001c0ef:	68 30 cb 02 c0       	push   0xc002cb30
c001c0f4:	e8 8c 6d ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001c0f9:	83 c4 10             	add    esp,0x10
c001c0fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c101:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c106:	83 c4 08             	add    esp,0x8
c001c109:	5b                   	pop    ebx
c001c10a:	c3                   	ret    
c001c10b:	83 ec 0c             	sub    esp,0xc
c001c10e:	68 42 ca 02 c0       	push   0xc002ca42
c001c113:	e8 6d 6d ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001c118:	eb c5                	jmp    c001c0df <sysCallClose(regs*)+0x43>
c001c11a:	83 ec 0c             	sub    esp,0xc
c001c11d:	68 50 ca 02 c0       	push   0xc002ca50
c001c122:	eb ef                	jmp    c001c113 <sysCallClose(regs*)+0x77>

c001c124 <sysCallOpenDir(regs*)>:
c001c124:	56                   	push   esi
c001c125:	53                   	push   ebx
c001c126:	53                   	push   ebx
c001c127:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c12b:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001c12e:	85 f6                	test   esi,esi
c001c130:	74 59                	je     c001c18b <sysCallOpenDir(regs*)+0x67>
c001c132:	83 ec 0c             	sub    esp,0xc
c001c135:	68 14 01 00 00       	push   0x114
c001c13a:	e8 9b 37 ff ff       	call   c000f8da <malloc>
c001c13f:	83 c4 0c             	add    esp,0xc
c001c142:	89 c6                	mov    esi,eax
c001c144:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c149:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c14c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c14f:	56                   	push   esi
c001c150:	e8 3b 77 ff ff       	call   c0013890 <Directory::Directory(char const*, Process*)>
c001c155:	83 c4 10             	add    esp,0x10
c001c158:	85 f6                	test   esi,esi
c001c15a:	74 2f                	je     c001c18b <sysCallOpenDir(regs*)+0x67>
c001c15c:	83 ec 0c             	sub    esp,0xc
c001c15f:	56                   	push   esi
c001c160:	e8 8f 77 ff ff       	call   c00138f4 <Directory::open()>
c001c165:	83 c4 10             	add    esp,0x10
c001c168:	85 c0                	test   eax,eax
c001c16a:	75 1f                	jne    c001c18b <sysCallOpenDir(regs*)+0x67>
c001c16c:	83 ec 0c             	sub    esp,0xc
c001c16f:	56                   	push   esi
c001c170:	e8 bf 54 ff ff       	call   c0011634 <UnixFile::getFileDescriptor()>
c001c175:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c178:	83 c4 10             	add    esp,0x10
c001c17b:	89 02                	mov    DWORD PTR [edx],eax
c001c17d:	c1 f8 1f             	sar    eax,0x1f
c001c180:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c183:	31 c0                	xor    eax,eax
c001c185:	59                   	pop    ecx
c001c186:	31 d2                	xor    edx,edx
c001c188:	5b                   	pop    ebx
c001c189:	5e                   	pop    esi
c001c18a:	c3                   	ret    
c001c18b:	59                   	pop    ecx
c001c18c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c191:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c196:	5b                   	pop    ebx
c001c197:	5e                   	pop    esi
c001c198:	c3                   	ret    

c001c199 <sysCallCloseDir(regs*)>:
c001c199:	53                   	push   ebx
c001c19a:	83 ec 08             	sub    esp,0x8
c001c19d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1a1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c1a4:	83 f8 02             	cmp    eax,0x2
c001c1a7:	76 47                	jbe    c001c1f0 <sysCallCloseDir(regs*)+0x57>
c001c1a9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001c1ae:	77 2f                	ja     c001c1df <sysCallCloseDir(regs*)+0x46>
c001c1b0:	83 ec 0c             	sub    esp,0xc
c001c1b3:	50                   	push   eax
c001c1b4:	e8 70 57 ff ff       	call   c0011929 <getFromFileDescriptor(int)>
c001c1b9:	89 c3                	mov    ebx,eax
c001c1bb:	89 04 24             	mov    DWORD PTR [esp],eax
c001c1be:	e8 8d 77 ff ff       	call   c0013950 <Directory::close()>
c001c1c3:	83 c4 10             	add    esp,0x10
c001c1c6:	85 db                	test   ebx,ebx
c001c1c8:	74 0c                	je     c001c1d6 <sysCallCloseDir(regs*)+0x3d>
c001c1ca:	83 ec 0c             	sub    esp,0xc
c001c1cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c1cf:	53                   	push   ebx
c001c1d0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c1d3:	83 c4 10             	add    esp,0x10
c001c1d6:	31 c0                	xor    eax,eax
c001c1d8:	31 d2                	xor    edx,edx
c001c1da:	83 c4 08             	add    esp,0x8
c001c1dd:	5b                   	pop    ebx
c001c1de:	c3                   	ret    
c001c1df:	83 ec 08             	sub    esp,0x8
c001c1e2:	50                   	push   eax
c001c1e3:	68 58 cb 02 c0       	push   0xc002cb58
c001c1e8:	e8 98 6c ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001c1ed:	83 c4 10             	add    esp,0x10
c001c1f0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c1f5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c1fa:	83 c4 08             	add    esp,0x8
c001c1fd:	5b                   	pop    ebx
c001c1fe:	c3                   	ret    

c001c1ff <sysCallMakeDir(regs*)>:
c001c1ff:	56                   	push   esi
c001c200:	53                   	push   ebx
c001c201:	83 ec 10             	sub    esp,0x10
c001c204:	68 14 01 00 00       	push   0x114
c001c209:	e8 cc 36 ff ff       	call   c000f8da <malloc>
c001c20e:	83 c4 0c             	add    esp,0xc
c001c211:	89 c3                	mov    ebx,eax
c001c213:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c218:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c21b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c21f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c222:	53                   	push   ebx
c001c223:	e8 68 76 ff ff       	call   c0013890 <Directory::Directory(char const*, Process*)>
c001c228:	83 c4 10             	add    esp,0x10
c001c22b:	85 db                	test   ebx,ebx
c001c22d:	74 32                	je     c001c261 <sysCallMakeDir(regs*)+0x62>
c001c22f:	83 ec 0c             	sub    esp,0xc
c001c232:	53                   	push   ebx
c001c233:	e8 9c 78 ff ff       	call   c0013ad4 <Directory::create()>
c001c238:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c23b:	89 c6                	mov    esi,eax
c001c23d:	e8 0e 77 ff ff       	call   c0013950 <Directory::close()>
c001c242:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c244:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c247:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c24a:	83 c4 10             	add    esp,0x10
c001c24d:	31 c0                	xor    eax,eax
c001c24f:	59                   	pop    ecx
c001c250:	85 f6                	test   esi,esi
c001c252:	5b                   	pop    ebx
c001c253:	0f 95 c0             	setne  al
c001c256:	5e                   	pop    esi
c001c257:	31 d2                	xor    edx,edx
c001c259:	f7 d8                	neg    eax
c001c25b:	83 d2 00             	adc    edx,0x0
c001c25e:	f7 da                	neg    edx
c001c260:	c3                   	ret    
c001c261:	59                   	pop    ecx
c001c262:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c267:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c26c:	5b                   	pop    ebx
c001c26d:	5e                   	pop    esi
c001c26e:	c3                   	ret    

c001c26f <sysCallWait(regs*)>:
c001c26f:	83 ec 10             	sub    esp,0x10
c001c272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c276:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001c279:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c27c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001c27f:	e8 c8 25 00 00       	call   c001e84c <waitTask(int, int*, int)>
c001c284:	83 c4 1c             	add    esp,0x1c
c001c287:	99                   	cdq    
c001c288:	c3                   	ret    

c001c289 <sysCallNotImpl(regs*)>:
c001c289:	83 ec 18             	sub    esp,0x18
c001c28c:	68 5e ca 02 c0       	push   0xc002ca5e
c001c291:	e8 d7 e5 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c001c296:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c29b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c2a0:	83 c4 1c             	add    esp,0x1c
c001c2a3:	c3                   	ret    

c001c2a4 <sysPanic(regs*)>:
c001c2a4:	83 ec 18             	sub    esp,0x18
c001c2a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c2ab:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c2ae:	e8 ba e5 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c001c2b3:	c7 04 24 78 ca 02 c0 	mov    DWORD PTR [esp],0xc002ca78
c001c2ba:	e8 ae e5 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c001c2bf:	b8 01 00 00 00       	mov    eax,0x1
c001c2c4:	31 d2                	xor    edx,edx
c001c2c6:	83 c4 1c             	add    esp,0x1c
c001c2c9:	c3                   	ret    

c001c2ca <sysCallRmdir(regs*)>:
c001c2ca:	56                   	push   esi
c001c2cb:	53                   	push   ebx
c001c2cc:	83 ec 20             	sub    esp,0x20
c001c2cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c2d3:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c2d6:	68 14 01 00 00       	push   0x114
c001c2db:	e8 fa 35 ff ff       	call   c000f8da <malloc>
c001c2e0:	83 c4 0c             	add    esp,0xc
c001c2e3:	89 c3                	mov    ebx,eax
c001c2e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2ea:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c2ed:	56                   	push   esi
c001c2ee:	53                   	push   ebx
c001c2ef:	e8 f0 70 ff ff       	call   c00133e4 <File::File(char const*, Process*)>
c001c2f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c2f7:	e8 c4 72 ff ff       	call   c00135c0 <File::unlink()>
c001c2fc:	83 c4 10             	add    esp,0x10
c001c2ff:	85 db                	test   ebx,ebx
c001c301:	74 14                	je     c001c317 <sysCallRmdir(regs*)+0x4d>
c001c303:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c307:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c309:	83 ec 0c             	sub    esp,0xc
c001c30c:	53                   	push   ebx
c001c30d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c310:	83 c4 10             	add    esp,0x10
c001c313:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c317:	85 c0                	test   eax,eax
c001c319:	0f 95 c0             	setne  al
c001c31c:	31 d2                	xor    edx,edx
c001c31e:	0f b6 c0             	movzx  eax,al
c001c321:	f7 d8                	neg    eax
c001c323:	83 d2 00             	adc    edx,0x0
c001c326:	83 c4 14             	add    esp,0x14
c001c329:	f7 da                	neg    edx
c001c32b:	5b                   	pop    ebx
c001c32c:	5e                   	pop    esi
c001c32d:	c3                   	ret    

c001c32e <sysCallUnlink(regs*)>:
c001c32e:	56                   	push   esi
c001c32f:	53                   	push   ebx
c001c330:	83 ec 20             	sub    esp,0x20
c001c333:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c337:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c33a:	68 14 01 00 00       	push   0x114
c001c33f:	e8 96 35 ff ff       	call   c000f8da <malloc>
c001c344:	83 c4 0c             	add    esp,0xc
c001c347:	89 c3                	mov    ebx,eax
c001c349:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c34e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c351:	56                   	push   esi
c001c352:	53                   	push   ebx
c001c353:	e8 8c 70 ff ff       	call   c00133e4 <File::File(char const*, Process*)>
c001c358:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c35b:	e8 60 72 ff ff       	call   c00135c0 <File::unlink()>
c001c360:	83 c4 10             	add    esp,0x10
c001c363:	85 db                	test   ebx,ebx
c001c365:	74 14                	je     c001c37b <sysCallUnlink(regs*)+0x4d>
c001c367:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c36b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c36d:	83 ec 0c             	sub    esp,0xc
c001c370:	53                   	push   ebx
c001c371:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c374:	83 c4 10             	add    esp,0x10
c001c377:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c37b:	85 c0                	test   eax,eax
c001c37d:	0f 95 c0             	setne  al
c001c380:	31 d2                	xor    edx,edx
c001c382:	0f b6 c0             	movzx  eax,al
c001c385:	f7 d8                	neg    eax
c001c387:	83 d2 00             	adc    edx,0x0
c001c38a:	83 c4 14             	add    esp,0x14
c001c38d:	f7 da                	neg    edx
c001c38f:	5b                   	pop    ebx
c001c390:	5e                   	pop    esi
c001c391:	c3                   	ret    

c001c392 <sysCallGetArgv(regs*)>:
c001c392:	83 ec 0c             	sub    esp,0xc
c001c395:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c399:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001c39c:	85 c0                	test   eax,eax
c001c39e:	78 2b                	js     c001c3cb <sysCallGetArgv(regs*)+0x39>
c001c3a0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c3a6:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001c3a9:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001c3af:	7d 1a                	jge    c001c3cb <sysCallGetArgv(regs*)+0x39>
c001c3b1:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001c3b8:	85 c0                	test   eax,eax
c001c3ba:	74 17                	je     c001c3d3 <sysCallGetArgv(regs*)+0x41>
c001c3bc:	83 ec 08             	sub    esp,0x8
c001c3bf:	50                   	push   eax
c001c3c0:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001c3c3:	e8 60 44 fe ff       	call   c0000828 <strcpy>
c001c3c8:	83 c4 10             	add    esp,0x10
c001c3cb:	31 c0                	xor    eax,eax
c001c3cd:	31 d2                	xor    edx,edx
c001c3cf:	83 c4 0c             	add    esp,0xc
c001c3d2:	c3                   	ret    
c001c3d3:	b8 01 00 00 00       	mov    eax,0x1
c001c3d8:	31 d2                	xor    edx,edx
c001c3da:	83 c4 0c             	add    esp,0xc
c001c3dd:	c3                   	ret    

c001c3de <sysCallTTYName(regs*)>:
c001c3de:	56                   	push   esi
c001c3df:	53                   	push   ebx
c001c3e0:	53                   	push   ebx
c001c3e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c3e5:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001c3e8:	85 c0                	test   eax,eax
c001c3ea:	74 5f                	je     c001c44b <sysCallTTYName(regs*)+0x6d>
c001c3ec:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001c3ef:	83 f8 02             	cmp    eax,0x2
c001c3f2:	77 3e                	ja     c001c432 <sysCallTTYName(regs*)+0x54>
c001c3f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c3f9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c3fc:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001c402:	85 db                	test   ebx,ebx
c001c404:	74 45                	je     c001c44b <sysCallTTYName(regs*)+0x6d>
c001c406:	83 ec 0c             	sub    esp,0xc
c001c409:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c40b:	53                   	push   ebx
c001c40c:	ff 10                	call   DWORD PTR [eax]
c001c40e:	83 c4 10             	add    esp,0x10
c001c411:	84 c0                	test   al,al
c001c413:	74 41                	je     c001c456 <sysCallTTYName(regs*)+0x78>
c001c415:	83 ec 08             	sub    esp,0x8
c001c418:	81 c3 82 00 00 00    	add    ebx,0x82
c001c41e:	53                   	push   ebx
c001c41f:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001c422:	e8 01 44 fe ff       	call   c0000828 <strcpy>
c001c427:	83 c4 10             	add    esp,0x10
c001c42a:	31 c0                	xor    eax,eax
c001c42c:	59                   	pop    ecx
c001c42d:	31 d2                	xor    edx,edx
c001c42f:	5b                   	pop    ebx
c001c430:	5e                   	pop    esi
c001c431:	c3                   	ret    
c001c432:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c437:	74 bb                	je     c001c3f4 <sysCallTTYName(regs*)+0x16>
c001c439:	83 ec 0c             	sub    esp,0xc
c001c43c:	50                   	push   eax
c001c43d:	e8 e7 54 ff ff       	call   c0011929 <getFromFileDescriptor(int)>
c001c442:	83 c4 10             	add    esp,0x10
c001c445:	89 c3                	mov    ebx,eax
c001c447:	85 db                	test   ebx,ebx
c001c449:	75 bb                	jne    c001c406 <sysCallTTYName(regs*)+0x28>
c001c44b:	59                   	pop    ecx
c001c44c:	b8 01 00 00 00       	mov    eax,0x1
c001c451:	31 d2                	xor    edx,edx
c001c453:	5b                   	pop    ebx
c001c454:	5e                   	pop    esi
c001c455:	c3                   	ret    
c001c456:	59                   	pop    ecx
c001c457:	b8 02 00 00 00       	mov    eax,0x2
c001c45c:	31 d2                	xor    edx,edx
c001c45e:	5b                   	pop    ebx
c001c45f:	5e                   	pop    esi
c001c460:	c3                   	ret    

c001c461 <sysCallUSleep(regs*)>:
c001c461:	83 ec 14             	sub    esp,0x14
c001c464:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c469:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c46d:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c474:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c477:	01 ca                	add    edx,ecx
c001c479:	52                   	push   edx
c001c47a:	50                   	push   eax
c001c47b:	e8 a3 24 00 00       	call   c001e923 <nanoSleep(unsigned long long)>
c001c480:	31 c0                	xor    eax,eax
c001c482:	31 d2                	xor    edx,edx
c001c484:	83 c4 1c             	add    esp,0x1c
c001c487:	c3                   	ret    

c001c488 <sysCallSpawn(regs*)>:
c001c488:	56                   	push   esi
c001c489:	53                   	push   ebx
c001c48a:	50                   	push   eax
c001c48b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c48f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c492:	85 c0                	test   eax,eax
c001c494:	75 08                	jne    c001c49e <sysCallSpawn(regs*)+0x16>
c001c496:	59                   	pop    ecx
c001c497:	31 c0                	xor    eax,eax
c001c499:	31 d2                	xor    edx,edx
c001c49b:	5b                   	pop    ebx
c001c49c:	5e                   	pop    esi
c001c49d:	c3                   	ret    
c001c49e:	83 ec 08             	sub    esp,0x8
c001c4a1:	50                   	push   eax
c001c4a2:	68 87 ca 02 c0       	push   0xc002ca87
c001c4a7:	e8 d9 69 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001c4ac:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c001c4b3:	e8 22 34 ff ff       	call   c000f8da <malloc>
c001c4b8:	83 c4 10             	add    esp,0x10
c001c4bb:	89 c6                	mov    esi,eax
c001c4bd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c4c0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c4c3:	85 c0                	test   eax,eax
c001c4c5:	75 32                	jne    c001c4f9 <sysCallSpawn(regs*)+0x71>
c001c4c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c4cc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c4cf:	52                   	push   edx
c001c4d0:	50                   	push   eax
c001c4d1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4d4:	56                   	push   esi
c001c4d5:	e8 26 1b 00 00       	call   c001e000 <Process::Process(char const*, Process*, char**)>
c001c4da:	83 c4 10             	add    esp,0x10
c001c4dd:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c4e4:	75 b0                	jne    c001c496 <sysCallSpawn(regs*)+0xe>
c001c4e6:	83 ec 0c             	sub    esp,0xc
c001c4e9:	56                   	push   esi
c001c4ea:	e8 f3 1f 00 00       	call   c001e4e2 <Process::createUserThread()>
c001c4ef:	8b 06                	mov    eax,DWORD PTR [esi]
c001c4f1:	83 c4 10             	add    esp,0x10
c001c4f4:	99                   	cdq    
c001c4f5:	59                   	pop    ecx
c001c4f6:	5b                   	pop    ebx
c001c4f7:	5e                   	pop    esi
c001c4f8:	c3                   	ret    
c001c4f9:	31 c0                	xor    eax,eax
c001c4fb:	eb d2                	jmp    c001c4cf <sysCallSpawn(regs*)+0x47>

c001c4fd <sysCallGetEnv(regs*)>:
c001c4fd:	55                   	push   ebp
c001c4fe:	57                   	push   edi
c001c4ff:	56                   	push   esi
c001c500:	53                   	push   ebx
c001c501:	83 ec 28             	sub    esp,0x28
c001c504:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c508:	68 95 ca 02 c0       	push   0xc002ca95
c001c50d:	e8 73 69 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001c512:	5f                   	pop    edi
c001c513:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c516:	5d                   	pop    ebp
c001c517:	53                   	push   ebx
c001c518:	68 c2 cd 02 c0       	push   0xc002cdc2
c001c51d:	e8 63 69 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001c522:	58                   	pop    eax
c001c523:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c526:	5a                   	pop    edx
c001c527:	57                   	push   edi
c001c528:	68 9e ca 02 c0       	push   0xc002ca9e
c001c52d:	e8 53 69 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001c532:	59                   	pop    ecx
c001c533:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c538:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c53b:	e8 49 e2 ff ff       	call   c001a789 <Krnl::getProcessTotalEnvCount(Process*)>
c001c540:	5a                   	pop    edx
c001c541:	89 c5                	mov    ebp,eax
c001c543:	59                   	pop    ecx
c001c544:	50                   	push   eax
c001c545:	68 a8 ca 02 c0       	push   0xc002caa8
c001c54a:	e8 36 69 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001c54f:	83 c4 10             	add    esp,0x10
c001c552:	39 ef                	cmp    edi,ebp
c001c554:	7c 15                	jl     c001c56b <sysCallGetEnv(regs*)+0x6e>
c001c556:	85 db                	test   ebx,ebx
c001c558:	75 0c                	jne    c001c566 <sysCallGetEnv(regs*)+0x69>
c001c55a:	83 c4 1c             	add    esp,0x1c
c001c55d:	31 c0                	xor    eax,eax
c001c55f:	5b                   	pop    ebx
c001c560:	31 d2                	xor    edx,edx
c001c562:	5e                   	pop    esi
c001c563:	5f                   	pop    edi
c001c564:	5d                   	pop    ebp
c001c565:	c3                   	ret    
c001c566:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c569:	eb ef                	jmp    c001c55a <sysCallGetEnv(regs*)+0x5d>
c001c56b:	83 ec 0c             	sub    esp,0xc
c001c56e:	68 b4 ca 02 c0       	push   0xc002cab4
c001c573:	e8 0d 69 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001c578:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c57c:	83 c4 0c             	add    esp,0xc
c001c57f:	57                   	push   edi
c001c580:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c586:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c589:	50                   	push   eax
c001c58a:	e8 1a e2 ff ff       	call   c001a7a9 <Krnl::getProcessEnvPair(Process*, int)>
c001c58f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c593:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c597:	68 73 ce 02 c0       	push   0xc002ce73
c001c59c:	e8 e4 68 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001c5a1:	83 c4 10             	add    esp,0x10
c001c5a4:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c5a7:	85 f6                	test   esi,esi
c001c5a9:	75 47                	jne    c001c5f2 <sysCallGetEnv(regs*)+0xf5>
c001c5ab:	83 ec 0c             	sub    esp,0xc
c001c5ae:	55                   	push   ebp
c001c5af:	e8 d4 41 fe ff       	call   c0000788 <strlen>
c001c5b4:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c5b7:	89 c3                	mov    ebx,eax
c001c5b9:	e8 ca 41 fe ff       	call   c0000788 <strlen>
c001c5be:	5a                   	pop    edx
c001c5bf:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c5c3:	59                   	pop    ecx
c001c5c4:	50                   	push   eax
c001c5c5:	68 b7 ca 02 c0       	push   0xc002cab7
c001c5ca:	e8 b6 68 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001c5cf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c5d2:	e8 b1 41 fe ff       	call   c0000788 <strlen>
c001c5d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c5da:	89 c3                	mov    ebx,eax
c001c5dc:	e8 a7 41 fe ff       	call   c0000788 <strlen>
c001c5e1:	83 c4 10             	add    esp,0x10
c001c5e4:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c5e8:	83 c4 1c             	add    esp,0x1c
c001c5eb:	31 d2                	xor    edx,edx
c001c5ed:	5b                   	pop    ebx
c001c5ee:	5e                   	pop    esi
c001c5ef:	5f                   	pop    edi
c001c5f0:	5d                   	pop    ebp
c001c5f1:	c3                   	ret    
c001c5f2:	83 ec 0c             	sub    esp,0xc
c001c5f5:	68 8d ce 02 c0       	push   0xc002ce8d
c001c5fa:	e8 86 68 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001c5ff:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c602:	58                   	pop    eax
c001c603:	5a                   	pop    edx
c001c604:	55                   	push   ebp
c001c605:	53                   	push   ebx
c001c606:	e8 1d 42 fe ff       	call   c0000828 <strcpy>
c001c60b:	59                   	pop    ecx
c001c60c:	5e                   	pop    esi
c001c60d:	68 c1 ca 02 c0       	push   0xc002cac1
c001c612:	53                   	push   ebx
c001c613:	e8 50 43 fe ff       	call   c0000968 <strcat>
c001c618:	5d                   	pop    ebp
c001c619:	58                   	pop    eax
c001c61a:	57                   	push   edi
c001c61b:	53                   	push   ebx
c001c61c:	e8 47 43 fe ff       	call   c0000968 <strcat>
c001c621:	c7 04 24 a7 ce 02 c0 	mov    DWORD PTR [esp],0xc002cea7
c001c628:	e8 58 68 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001c62d:	83 c4 10             	add    esp,0x10
c001c630:	e9 25 ff ff ff       	jmp    c001c55a <sysCallGetEnv(regs*)+0x5d>

c001c635 <sysAppSettings(regs*)>:
c001c635:	57                   	push   edi
c001c636:	56                   	push   esi
c001c637:	56                   	push   esi
c001c638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c63c:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c63f:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001c645:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c64a:	66 3d c0 09          	cmp    ax,0x9c0
c001c64e:	75 2e                	jne    c001c67e <sysAppSettings(regs*)+0x49>
c001c650:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001c656:	83 e0 1f             	and    eax,0x1f
c001c659:	3c 01                	cmp    al,0x1
c001c65b:	74 2c                	je     c001c689 <sysAppSettings(regs*)+0x54>
c001c65d:	3c 07                	cmp    al,0x7
c001c65f:	0f 84 b3 00 00 00    	je     c001c718 <sysAppSettings(regs*)+0xe3>
c001c665:	84 c0                	test   al,al
c001c667:	0f 84 d2 00 00 00    	je     c001c73f <sysAppSettings(regs*)+0x10a>
c001c66d:	3c 08                	cmp    al,0x8
c001c66f:	74 63                	je     c001c6d4 <sysAppSettings(regs*)+0x9f>
c001c671:	59                   	pop    ecx
c001c672:	0f b6 c0             	movzx  eax,al
c001c675:	5e                   	pop    esi
c001c676:	05 e8 03 00 00       	add    eax,0x3e8
c001c67b:	5f                   	pop    edi
c001c67c:	99                   	cdq    
c001c67d:	c3                   	ret    
c001c67e:	b8 01 00 00 00       	mov    eax,0x1
c001c683:	59                   	pop    ecx
c001c684:	31 d2                	xor    edx,edx
c001c686:	5e                   	pop    esi
c001c687:	5f                   	pop    edi
c001c688:	c3                   	ret    
c001c689:	50                   	push   eax
c001c68a:	68 00 01 00 00       	push   0x100
c001c68f:	6a 00                	push   0x0
c001c691:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c696:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c699:	83 c0 0c             	add    eax,0xc
c001c69c:	50                   	push   eax
c001c69d:	e8 ca 40 fe ff       	call   c000076c <memset>
c001c6a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c6a7:	b9 ff 00 00 00       	mov    ecx,0xff
c001c6ac:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001c6af:	83 c7 0c             	add    edi,0xc
c001c6b2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c6b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c6b9:	5a                   	pop    edx
c001c6ba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c6bd:	59                   	pop    ecx
c001c6be:	8d 50 0c             	lea    edx,[eax+0xc]
c001c6c1:	52                   	push   edx
c001c6c2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c6c8:	e8 87 44 ff ff       	call   c0010b54 <VgaText::setTitle(char*)>
c001c6cd:	83 c4 10             	add    esp,0x10
c001c6d0:	31 c0                	xor    eax,eax
c001c6d2:	eb af                	jmp    c001c683 <sysAppSettings(regs*)+0x4e>
c001c6d4:	83 ec 08             	sub    esp,0x8
c001c6d7:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c6dd:	83 e0 0f             	and    eax,0xf
c001c6e0:	50                   	push   eax
c001c6e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c6e6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c6e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c6ef:	e8 52 44 ff ff       	call   c0010b46 <VgaText::setTitleColour(VgaColour)>
c001c6f4:	5f                   	pop    edi
c001c6f5:	58                   	pop    eax
c001c6f6:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c6fc:	c1 e8 04             	shr    eax,0x4
c001c6ff:	83 e0 0f             	and    eax,0xf
c001c702:	50                   	push   eax
c001c703:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c708:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c70b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c711:	e8 22 44 ff ff       	call   c0010b38 <VgaText::setTitleTextColour(VgaColour)>
c001c716:	eb b5                	jmp    c001c6cd <sysAppSettings(regs*)+0x98>
c001c718:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c71d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c720:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c726:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001c72c:	c0 e8 06             	shr    al,0x6
c001c72f:	83 e0 01             	and    eax,0x1
c001c732:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c738:	31 c0                	xor    eax,eax
c001c73a:	e9 44 ff ff ff       	jmp    c001c683 <sysAppSettings(regs*)+0x4e>
c001c73f:	b8 02 00 00 00       	mov    eax,0x2
c001c744:	e9 3a ff ff ff       	jmp    c001c683 <sysAppSettings(regs*)+0x4e>

c001c749 <sysSetFatAttrib(regs*)>:
c001c749:	57                   	push   edi
c001c74a:	56                   	push   esi
c001c74b:	53                   	push   ebx
c001c74c:	83 ec 1c             	sub    esp,0x1c
c001c74f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c753:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c756:	68 14 01 00 00       	push   0x114
c001c75b:	e8 7a 31 ff ff       	call   c000f8da <malloc>
c001c760:	83 c4 0c             	add    esp,0xc
c001c763:	89 c3                	mov    ebx,eax
c001c765:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c76a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c76d:	57                   	push   edi
c001c76e:	53                   	push   ebx
c001c76f:	e8 70 6c ff ff       	call   c00133e4 <File::File(char const*, Process*)>
c001c774:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c777:	83 c4 0c             	add    esp,0xc
c001c77a:	0f b6 d4             	movzx  edx,ah
c001c77d:	0f b6 c0             	movzx  eax,al
c001c780:	52                   	push   edx
c001c781:	50                   	push   eax
c001c782:	53                   	push   ebx
c001c783:	e8 d2 6e ff ff       	call   c001365a <File::chfatattr(unsigned char, unsigned char)>
c001c788:	83 c4 10             	add    esp,0x10
c001c78b:	85 db                	test   ebx,ebx
c001c78d:	74 14                	je     c001c7a3 <sysSetFatAttrib(regs*)+0x5a>
c001c78f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c793:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c795:	83 ec 0c             	sub    esp,0xc
c001c798:	53                   	push   ebx
c001c799:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c79c:	83 c4 10             	add    esp,0x10
c001c79f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c7a3:	85 c0                	test   eax,eax
c001c7a5:	0f 95 c0             	setne  al
c001c7a8:	31 d2                	xor    edx,edx
c001c7aa:	0f b6 c0             	movzx  eax,al
c001c7ad:	f7 d8                	neg    eax
c001c7af:	83 d2 00             	adc    edx,0x0
c001c7b2:	83 c4 10             	add    esp,0x10
c001c7b5:	f7 da                	neg    edx
c001c7b7:	5b                   	pop    ebx
c001c7b8:	5e                   	pop    esi
c001c7b9:	5f                   	pop    edi
c001c7ba:	c3                   	ret    

c001c7bb <sysPipe(regs*)>:
c001c7bb:	57                   	push   edi
c001c7bc:	56                   	push   esi
c001c7bd:	53                   	push   ebx
c001c7be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7c2:	83 ec 0c             	sub    esp,0xc
c001c7c5:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c7c8:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c7cb:	6a 20                	push   0x20
c001c7cd:	e8 08 31 ff ff       	call   c000f8da <malloc>
c001c7d2:	89 c3                	mov    ebx,eax
c001c7d4:	58                   	pop    eax
c001c7d5:	5a                   	pop    edx
c001c7d6:	68 00 50 00 00       	push   0x5000
c001c7db:	53                   	push   ebx
c001c7dc:	e8 1b 3d ff ff       	call   c00104fc <Pipe::Pipe(int)>
c001c7e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c7e4:	e8 4b 4e ff ff       	call   c0011634 <UnixFile::getFileDescriptor()>
c001c7e9:	89 07                	mov    DWORD PTR [edi],eax
c001c7eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c7ee:	e8 41 4e ff ff       	call   c0011634 <UnixFile::getFileDescriptor()>
c001c7f3:	83 c4 10             	add    esp,0x10
c001c7f6:	89 06                	mov    DWORD PTR [esi],eax
c001c7f8:	31 d2                	xor    edx,edx
c001c7fa:	5b                   	pop    ebx
c001c7fb:	31 c0                	xor    eax,eax
c001c7fd:	5e                   	pop    esi
c001c7fe:	5f                   	pop    edi
c001c7ff:	c3                   	ret    

c001c800 <sysGetUnixTime(regs*)>:
c001c800:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c001c805:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c80b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c80f:	e9 c2 75 ff ff       	jmp    c0013dd6 <Clock::timeInSecondsLocal()>

c001c814 <string_ends_with(char const*, char const*)>:
c001c814:	57                   	push   edi
c001c815:	56                   	push   esi
c001c816:	53                   	push   ebx
c001c817:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c81b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c81f:	83 ec 0c             	sub    esp,0xc
c001c822:	53                   	push   ebx
c001c823:	e8 60 3f fe ff       	call   c0000788 <strlen>
c001c828:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c82b:	89 c6                	mov    esi,eax
c001c82d:	e8 56 3f fe ff       	call   c0000788 <strlen>
c001c832:	83 c4 10             	add    esp,0x10
c001c835:	39 c6                	cmp    esi,eax
c001c837:	7d 06                	jge    c001c83f <string_ends_with(char const*, char const*)+0x2b>
c001c839:	5b                   	pop    ebx
c001c83a:	31 c0                	xor    eax,eax
c001c83c:	5e                   	pop    esi
c001c83d:	5f                   	pop    edi
c001c83e:	c3                   	ret    
c001c83f:	83 ec 08             	sub    esp,0x8
c001c842:	29 c6                	sub    esi,eax
c001c844:	57                   	push   edi
c001c845:	01 f3                	add    ebx,esi
c001c847:	53                   	push   ebx
c001c848:	e8 67 40 fe ff       	call   c00008b4 <strcmp>
c001c84d:	83 c4 10             	add    esp,0x10
c001c850:	85 c0                	test   eax,eax
c001c852:	5b                   	pop    ebx
c001c853:	0f 94 c0             	sete   al
c001c856:	5e                   	pop    esi
c001c857:	0f b6 c0             	movzx  eax,al
c001c85a:	5f                   	pop    edi
c001c85b:	c3                   	ret    

c001c85c <sysCallOpen(regs*)>:
c001c85c:	56                   	push   esi
c001c85d:	53                   	push   ebx
c001c85e:	81 ec 04 01 00 00    	sub    esp,0x104
c001c864:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c86b:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c86e:	85 c9                	test   ecx,ecx
c001c870:	0f 84 b3 00 00 00    	je     c001c929 <sysCallOpen(regs*)+0xcd>
c001c876:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c879:	85 c0                	test   eax,eax
c001c87b:	0f 84 a8 00 00 00    	je     c001c929 <sysCallOpen(regs*)+0xcd>
c001c881:	52                   	push   edx
c001c882:	68 c3 ca 02 c0       	push   0xc002cac3
c001c887:	50                   	push   eax
c001c888:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c88c:	56                   	push   esi
c001c88d:	e8 a8 69 ff ff       	call   c001323a <Fs::standardiseFiles(char*, char const*, char const*)>
c001c892:	89 34 24             	mov    DWORD PTR [esp],esi
c001c895:	e8 ee 3e fe ff       	call   c0000788 <strlen>
c001c89a:	83 c4 10             	add    esp,0x10
c001c89d:	48                   	dec    eax
c001c89e:	74 1d                	je     c001c8bd <sysCallOpen(regs*)+0x61>
c001c8a0:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c8a3:	eb 0f                	jmp    c001c8b4 <sysCallOpen(regs*)+0x58>
c001c8a5:	80 fa 3a             	cmp    dl,0x3a
c001c8a8:	74 0f                	je     c001c8b9 <sysCallOpen(regs*)+0x5d>
c001c8aa:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c8ae:	48                   	dec    eax
c001c8af:	74 0c                	je     c001c8bd <sysCallOpen(regs*)+0x61>
c001c8b1:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c8b4:	80 fa 2e             	cmp    dl,0x2e
c001c8b7:	75 ec                	jne    c001c8a5 <sysCallOpen(regs*)+0x49>
c001c8b9:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c8bd:	83 ec 08             	sub    esp,0x8
c001c8c0:	68 c7 ca 02 c0       	push   0xc002cac7
c001c8c5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c8c8:	e8 47 ff ff ff       	call   c001c814 <string_ends_with(char const*, char const*)>
c001c8cd:	83 c4 10             	add    esp,0x10
c001c8d0:	85 c0                	test   eax,eax
c001c8d2:	75 17                	jne    c001c8eb <sysCallOpen(regs*)+0x8f>
c001c8d4:	83 ec 08             	sub    esp,0x8
c001c8d7:	68 e8 ca 02 c0       	push   0xc002cae8
c001c8dc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c8df:	e8 30 ff ff ff       	call   c001c814 <string_ends_with(char const*, char const*)>
c001c8e4:	83 c4 10             	add    esp,0x10
c001c8e7:	85 c0                	test   eax,eax
c001c8e9:	74 51                	je     c001c93c <sysCallOpen(regs*)+0xe0>
c001c8eb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c8ee:	83 ec 08             	sub    esp,0x8
c001c8f1:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c8f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c8fe:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c901:	ff 30                	push   DWORD PTR [eax]
c001c903:	68 cc ca 02 c0       	push   0xc002cacc
c001c908:	e8 78 65 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001c90d:	c7 04 24 db ca 02 c0 	mov    DWORD PTR [esp],0xc002cadb
c001c914:	e8 6c 65 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001c919:	83 c4 10             	add    esp,0x10
c001c91c:	81 c4 04 01 00 00    	add    esp,0x104
c001c922:	31 c0                	xor    eax,eax
c001c924:	31 d2                	xor    edx,edx
c001c926:	5b                   	pop    ebx
c001c927:	5e                   	pop    esi
c001c928:	c3                   	ret    
c001c929:	81 c4 04 01 00 00    	add    esp,0x104
c001c92f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c934:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c939:	5b                   	pop    ebx
c001c93a:	5e                   	pop    esi
c001c93b:	c3                   	ret    
c001c93c:	83 ec 08             	sub    esp,0x8
c001c93f:	68 c8 ca 02 c0       	push   0xc002cac8
c001c944:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c947:	e8 68 3f fe ff       	call   c00008b4 <strcmp>
c001c94c:	83 c4 10             	add    esp,0x10
c001c94f:	85 c0                	test   eax,eax
c001c951:	74 98                	je     c001c8eb <sysCallOpen(regs*)+0x8f>
c001c953:	83 ec 08             	sub    esp,0x8
c001c956:	68 c7 ca 02 c0       	push   0xc002cac7
c001c95b:	56                   	push   esi
c001c95c:	e8 b3 fe ff ff       	call   c001c814 <string_ends_with(char const*, char const*)>
c001c961:	83 c4 10             	add    esp,0x10
c001c964:	85 c0                	test   eax,eax
c001c966:	75 83                	jne    c001c8eb <sysCallOpen(regs*)+0x8f>
c001c968:	83 ec 08             	sub    esp,0x8
c001c96b:	68 ed ca 02 c0       	push   0xc002caed
c001c970:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c973:	e8 9c fe ff ff       	call   c001c814 <string_ends_with(char const*, char const*)>
c001c978:	83 c4 10             	add    esp,0x10
c001c97b:	85 c0                	test   eax,eax
c001c97d:	0f 85 d9 00 00 00    	jne    c001ca5c <sysCallOpen(regs*)+0x200>
c001c983:	83 ec 08             	sub    esp,0x8
c001c986:	68 f2 ca 02 c0       	push   0xc002caf2
c001c98b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c98e:	e8 81 fe ff ff       	call   c001c814 <string_ends_with(char const*, char const*)>
c001c993:	83 c4 10             	add    esp,0x10
c001c996:	85 c0                	test   eax,eax
c001c998:	0f 85 be 00 00 00    	jne    c001ca5c <sysCallOpen(regs*)+0x200>
c001c99e:	83 ec 08             	sub    esp,0x8
c001c9a1:	68 ee ca 02 c0       	push   0xc002caee
c001c9a6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c9a9:	e8 06 3f fe ff       	call   c00008b4 <strcmp>
c001c9ae:	83 c4 10             	add    esp,0x10
c001c9b1:	85 c0                	test   eax,eax
c001c9b3:	0f 84 a3 00 00 00    	je     c001ca5c <sysCallOpen(regs*)+0x200>
c001c9b9:	83 ec 08             	sub    esp,0x8
c001c9bc:	68 ed ca 02 c0       	push   0xc002caed
c001c9c1:	56                   	push   esi
c001c9c2:	e8 4d fe ff ff       	call   c001c814 <string_ends_with(char const*, char const*)>
c001c9c7:	83 c4 10             	add    esp,0x10
c001c9ca:	85 c0                	test   eax,eax
c001c9cc:	0f 85 8a 00 00 00    	jne    c001ca5c <sysCallOpen(regs*)+0x200>
c001c9d2:	83 ec 0c             	sub    esp,0xc
c001c9d5:	68 14 01 00 00       	push   0x114
c001c9da:	e8 fb 2e ff ff       	call   c000f8da <malloc>
c001c9df:	83 c4 0c             	add    esp,0xc
c001c9e2:	89 c6                	mov    esi,eax
c001c9e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9e9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c9ec:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c9ef:	56                   	push   esi
c001c9f0:	e8 ef 69 ff ff       	call   c00133e4 <File::File(char const*, Process*)>
c001c9f5:	83 c4 10             	add    esp,0x10
c001c9f8:	85 f6                	test   esi,esi
c001c9fa:	0f 84 29 ff ff ff    	je     c001c929 <sysCallOpen(regs*)+0xcd>
c001ca00:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001ca03:	0f b6 c2             	movzx  eax,dl
c001ca06:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001ca09:	89 d0                	mov    eax,edx
c001ca0b:	83 e0 01             	and    eax,0x1
c001ca0e:	f6 c2 02             	test   dl,0x2
c001ca11:	74 03                	je     c001ca16 <sysCallOpen(regs*)+0x1ba>
c001ca13:	83 c8 02             	or     eax,0x2
c001ca16:	f6 c2 04             	test   dl,0x4
c001ca19:	74 03                	je     c001ca1e <sysCallOpen(regs*)+0x1c2>
c001ca1b:	83 c8 04             	or     eax,0x4
c001ca1e:	f6 c2 08             	test   dl,0x8
c001ca21:	74 03                	je     c001ca26 <sysCallOpen(regs*)+0x1ca>
c001ca23:	83 c8 0a             	or     eax,0xa
c001ca26:	83 e2 10             	and    edx,0x10
c001ca29:	74 03                	je     c001ca2e <sysCallOpen(regs*)+0x1d2>
c001ca2b:	83 c8 12             	or     eax,0x12
c001ca2e:	83 ec 08             	sub    esp,0x8
c001ca31:	50                   	push   eax
c001ca32:	56                   	push   esi
c001ca33:	e8 10 6a ff ff       	call   c0013448 <File::open(FileOpenMode)>
c001ca38:	83 c4 10             	add    esp,0x10
c001ca3b:	85 c0                	test   eax,eax
c001ca3d:	0f 85 e6 fe ff ff    	jne    c001c929 <sysCallOpen(regs*)+0xcd>
c001ca43:	83 ec 0c             	sub    esp,0xc
c001ca46:	56                   	push   esi
c001ca47:	e8 e8 4b ff ff       	call   c0011634 <UnixFile::getFileDescriptor()>
c001ca4c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001ca4f:	89 02                	mov    DWORD PTR [edx],eax
c001ca51:	c1 f8 1f             	sar    eax,0x1f
c001ca54:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ca57:	e9 bd fe ff ff       	jmp    c001c919 <sysCallOpen(regs*)+0xbd>
c001ca5c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ca5f:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001ca65:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ca6c:	e9 ab fe ff ff       	jmp    c001c91c <sysCallOpen(regs*)+0xc0>

c001ca71 <Sys::loadSyscalls()>:
c001ca71:	c7 05 e0 1b 03 c0 61 bb 01 c0 	mov    DWORD PTR ds:0xc0031be0,0xc001bb61
c001ca7b:	c7 05 e4 1b 03 c0 c6 b6 01 c0 	mov    DWORD PTR ds:0xc0031be4,0xc001b6c6
c001ca85:	c7 05 e8 1b 03 c0 b4 b8 01 c0 	mov    DWORD PTR ds:0xc0031be8,0xc001b8b4
c001ca8f:	c7 05 ec 1b 03 c0 97 ba 01 c0 	mov    DWORD PTR ds:0xc0031bec,0xc001ba97
c001ca99:	c7 05 f0 1b 03 c0 4c b8 01 c0 	mov    DWORD PTR ds:0xc0031bf0,0xc001b84c
c001caa3:	c7 05 f4 1b 03 c0 fd b6 01 c0 	mov    DWORD PTR ds:0xc0031bf4,0xc001b6fd
c001caad:	c7 05 f8 1b 03 c0 de b6 01 c0 	mov    DWORD PTR ds:0xc0031bf8,0xc001b6de
c001cab7:	c7 05 fc 1b 03 c0 09 b9 01 c0 	mov    DWORD PTR ds:0xc0031bfc,0xc001b909
c001cac1:	c7 05 04 1c 03 c0 9c c0 01 c0 	mov    DWORD PTR ds:0xc0031c04,0xc001c09c
c001cacb:	c7 05 00 1c 03 c0 5c c8 01 c0 	mov    DWORD PTR ds:0xc0031c00,0xc001c85c
c001cad5:	c7 05 08 1c 03 c0 24 c1 01 c0 	mov    DWORD PTR ds:0xc0031c08,0xc001c124
c001cadf:	c7 05 0c 1c 03 c0 8b bd 01 c0 	mov    DWORD PTR ds:0xc0031c0c,0xc001bd8b
c001cae9:	c7 05 10 1c 03 c0 a7 bb 01 c0 	mov    DWORD PTR ds:0xc0031c10,0xc001bba7
c001caf3:	c7 05 14 1c 03 c0 ac bb 01 c0 	mov    DWORD PTR ds:0xc0031c14,0xc001bbac
c001cafd:	c7 05 18 1c 03 c0 ff c1 01 c0 	mov    DWORD PTR ds:0xc0031c18,0xc001c1ff
c001cb07:	c7 05 1c 1c 03 c0 99 c1 01 c0 	mov    DWORD PTR ds:0xc0031c1c,0xc001c199
c001cb11:	c7 05 20 1c 03 c0 73 be 01 c0 	mov    DWORD PTR ds:0xc0031c20,0xc001be73
c001cb1b:	c7 05 24 1c 03 c0 dc be 01 c0 	mov    DWORD PTR ds:0xc0031c24,0xc001bedc
c001cb25:	c7 05 28 1c 03 c0 59 bf 01 c0 	mov    DWORD PTR ds:0xc0031c28,0xc001bf59
c001cb2f:	c7 05 2c 1c 03 c0 b1 bb 01 c0 	mov    DWORD PTR ds:0xc0031c2c,0xc001bbb1
c001cb39:	c7 05 30 1c 03 c0 6f c2 01 c0 	mov    DWORD PTR ds:0xc0031c30,0xc001c26f
c001cb43:	c7 05 34 1c 03 c0 89 c2 01 c0 	mov    DWORD PTR ds:0xc0031c34,0xc001c289
c001cb4d:	c7 05 38 1c 03 c0 89 c2 01 c0 	mov    DWORD PTR ds:0xc0031c38,0xc001c289
c001cb57:	c7 05 3c 1c 03 c0 ca c2 01 c0 	mov    DWORD PTR ds:0xc0031c3c,0xc001c2ca
c001cb61:	c7 05 40 1c 03 c0 2e c3 01 c0 	mov    DWORD PTR ds:0xc0031c40,0xc001c32e
c001cb6b:	c7 05 44 1c 03 c0 5d bd 01 c0 	mov    DWORD PTR ds:0xc0031c44,0xc001bd5d
c001cb75:	c7 05 48 1c 03 c0 92 c3 01 c0 	mov    DWORD PTR ds:0xc0031c48,0xc001c392
c001cb7f:	c7 05 4c 1c 03 c0 1a bd 01 c0 	mov    DWORD PTR ds:0xc0031c4c,0xc001bd1a
c001cb89:	c7 05 50 1c 03 c0 de c3 01 c0 	mov    DWORD PTR ds:0xc0031c50,0xc001c3de
c001cb93:	c7 05 54 1c 03 c0 19 be 01 c0 	mov    DWORD PTR ds:0xc0031c54,0xc001be19
c001cb9d:	c7 05 58 1c 03 c0 61 c4 01 c0 	mov    DWORD PTR ds:0xc0031c58,0xc001c461
c001cba7:	c7 05 5c 1c 03 c0 dc bf 01 c0 	mov    DWORD PTR ds:0xc0031c5c,0xc001bfdc
c001cbb1:	c7 05 60 1c 03 c0 88 c4 01 c0 	mov    DWORD PTR ds:0xc0031c60,0xc001c488
c001cbbb:	c7 05 64 1c 03 c0 fd c4 01 c0 	mov    DWORD PTR ds:0xc0031c64,0xc001c4fd
c001cbc5:	c7 05 68 1c 03 c0 35 c6 01 c0 	mov    DWORD PTR ds:0xc0031c68,0xc001c635
c001cbcf:	c7 05 6c 1c 03 c0 bb bb 01 c0 	mov    DWORD PTR ds:0xc0031c6c,0xc001bbbb
c001cbd9:	c7 05 70 1c 03 c0 25 bc 01 c0 	mov    DWORD PTR ds:0xc0031c70,0xc001bc25
c001cbe3:	c7 05 74 1c 03 c0 6b bc 01 c0 	mov    DWORD PTR ds:0xc0031c74,0xc001bc6b
c001cbed:	c7 05 78 1c 03 c0 49 c7 01 c0 	mov    DWORD PTR ds:0xc0031c78,0xc001c749
c001cbf7:	c7 05 7c 1c 03 c0 a4 c2 01 c0 	mov    DWORD PTR ds:0xc0031c7c,0xc001c2a4
c001cc01:	c7 05 80 1c 03 c0 bc bc 01 c0 	mov    DWORD PTR ds:0xc0031c80,0xc001bcbc
c001cc0b:	c7 05 84 1c 03 c0 bb c7 01 c0 	mov    DWORD PTR ds:0xc0031c84,0xc001c7bb
c001cc15:	c7 05 88 1c 03 c0 00 c8 01 c0 	mov    DWORD PTR ds:0xc0031c88,0xc001c800
c001cc1f:	c7 05 8c 1c 03 c0 a4 b7 01 c0 	mov    DWORD PTR ds:0xc0031c8c,0xc001b7a4
c001cc29:	c7 05 90 1c 03 c0 25 b9 01 c0 	mov    DWORD PTR ds:0xc0031c90,0xc001b925
c001cc33:	c7 05 94 1c 03 c0 4d ba 01 c0 	mov    DWORD PTR ds:0xc0031c94,0xc001ba4d
c001cc3d:	c7 05 98 1c 03 c0 90 b6 01 c0 	mov    DWORD PTR ds:0xc0031c98,0xc001b690
c001cc47:	c7 05 9c 1c 03 c0 ff ba 01 c0 	mov    DWORD PTR ds:0xc0031c9c,0xc001baff
c001cc51:	c7 05 a0 1c 03 c0 09 b7 01 c0 	mov    DWORD PTR ds:0xc0031ca0,0xc001b709
c001cc5b:	c7 05 a4 1c 03 c0 20 b7 01 c0 	mov    DWORD PTR ds:0xc0031ca4,0xc001b720
c001cc65:	c3                   	ret    

c001cc66 <Sys::systemCall(regs*, void*)>:
c001cc66:	53                   	push   ebx
c001cc67:	83 ec 08             	sub    esp,0x8
c001cc6a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cc6e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001cc71:	83 f8 7f             	cmp    eax,0x7f
c001cc74:	77 16                	ja     c001cc8c <Sys::systemCall(regs*, void*)+0x26>
c001cc76:	8b 14 85 e0 1b 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce420]
c001cc7d:	85 d2                	test   edx,edx
c001cc7f:	74 0b                	je     c001cc8c <Sys::systemCall(regs*, void*)+0x26>
c001cc81:	83 ec 0c             	sub    esp,0xc
c001cc84:	53                   	push   ebx
c001cc85:	ff d2                	call   edx
c001cc87:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001cc8a:	eb 0d                	jmp    c001cc99 <Sys::systemCall(regs*, void*)+0x33>
c001cc8c:	52                   	push   edx
c001cc8d:	52                   	push   edx
c001cc8e:	50                   	push   eax
c001cc8f:	68 f7 ca 02 c0       	push   0xc002caf7
c001cc94:	e8 ec 61 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001cc99:	83 c4 10             	add    esp,0x10
c001cc9c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cca1:	31 d2                	xor    edx,edx
c001cca3:	83 c4 08             	add    esp,0x8
c001cca6:	5b                   	pop    ebx
c001cca7:	c3                   	ret    

c001cca8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001cca8:	55                   	push   ebp
c001cca9:	57                   	push   edi
c001ccaa:	56                   	push   esi
c001ccab:	53                   	push   ebx
c001ccac:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001ccb2:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001ccb9:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001ccc0:	85 c0                	test   eax,eax
c001ccc2:	0f 95 c1             	setne  cl
c001ccc5:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001cccd:	0f 94 c2             	sete   dl
c001ccd0:	84 d1                	test   cl,dl
c001ccd2:	74 23                	je     c001ccf7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001ccd4:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001ccda:	74 1b                	je     c001ccf7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001ccdc:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cce2:	89 da                	mov    edx,ebx
c001cce4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001ccea:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001ccf0:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001ccf7:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001ccfe:	05 ff 0f 00 00       	add    eax,0xfff
c001cd03:	83 ec 0c             	sub    esp,0xc
c001cd06:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cd0a:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001cd10:	c1 e8 0c             	shr    eax,0xc
c001cd13:	89 fe                	mov    esi,edi
c001cd15:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cd19:	c1 ee 0c             	shr    esi,0xc
c001cd1c:	6a 01                	push   0x1
c001cd1e:	e8 5c 4d ff ff       	call   c0011a7f <Virt::allocateKernelVirtualPages(int)>
c001cd23:	89 c5                	mov    ebp,eax
c001cd25:	58                   	pop    eax
c001cd26:	5a                   	pop    edx
c001cd27:	56                   	push   esi
c001cd28:	68 7b cb 02 c0       	push   0xc002cb7b
c001cd2d:	e8 53 61 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001cd32:	59                   	pop    ecx
c001cd33:	58                   	pop    eax
c001cd34:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cd38:	68 8d cb 02 c0       	push   0xc002cb8d
c001cd3d:	e8 43 61 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001cd42:	83 c4 10             	add    esp,0x10
c001cd45:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001cd4b:	0f 86 31 01 00 00    	jbe    c001ce82 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001cd51:	c1 e6 0c             	shl    esi,0xc
c001cd54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd57:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001cd5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cd5e:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001cd65:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001cd68:	01 df                	add    edi,ebx
c001cd6a:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001cd6d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001cd71:	0f 84 08 01 00 00    	je     c001ce7f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001cd77:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001cd7d:	76 05                	jbe    c001cd84 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001cd7f:	bf 00 10 00 00       	mov    edi,0x1000
c001cd84:	83 ec 0c             	sub    esp,0xc
c001cd87:	31 d2                	xor    edx,edx
c001cd89:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001cd90:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cd92:	8d 44 24 28          	lea    eax,[esp+0x28]
c001cd96:	50                   	push   eax
c001cd97:	8d 74 24 30          	lea    esi,[esp+0x30]
c001cd9b:	56                   	push   esi
c001cd9c:	52                   	push   edx
c001cd9d:	57                   	push   edi
c001cd9e:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001cda5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cda8:	83 c4 20             	add    esp,0x20
c001cdab:	85 c0                	test   eax,eax
c001cdad:	74 0a                	je     c001cdb9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001cdaf:	53                   	push   ebx
c001cdb0:	53                   	push   ebx
c001cdb1:	50                   	push   eax
c001cdb2:	68 9f cb 02 c0       	push   0xc002cb9f
c001cdb7:	eb 0f                	jmp    c001cdc8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001cdb9:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001cdbd:	74 20                	je     c001cddf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001cdbf:	51                   	push   ecx
c001cdc0:	51                   	push   ecx
c001cdc1:	6a 00                	push   0x0
c001cdc3:	68 ca cb 02 c0       	push   0xc002cbca
c001cdc8:	e8 b8 60 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001cdcd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cdd0:	e8 6a 51 ff ff       	call   c0011f3f <Virt::freeKernelVirtualPages(unsigned long)>
c001cdd5:	83 c4 10             	add    esp,0x10
c001cdd8:	31 c0                	xor    eax,eax
c001cdda:	e9 68 01 00 00       	jmp    c001cf47 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001cddf:	fa                   	cli    
c001cde0:	ff 05 a8 25 03 c0    	inc    DWORD PTR ds:0xc00325a8
c001cde6:	e8 5b 31 ff ff       	call   c000ff46 <Phys::allocatePage()>
c001cdeb:	6a 07                	push   0x7
c001cded:	89 c7                	mov    edi,eax
c001cdef:	55                   	push   ebp
c001cdf0:	50                   	push   eax
c001cdf1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cdf6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cdf9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cdff:	e8 b2 54 ff ff       	call   c00122b6 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ce04:	83 c4 0c             	add    esp,0xc
c001ce07:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001ce0e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ce14:	6a 00                	push   0x0
c001ce16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ce1b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ce1e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ce24:	e8 e7 52 ff ff       	call   c0012110 <VAS::mapOtherVASIn(bool, VAS*)>
c001ce29:	58                   	pop    eax
c001ce2a:	5a                   	pop    edx
c001ce2b:	68 07 0c 00 00       	push   0xc07
c001ce30:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ce34:	57                   	push   edi
c001ce35:	89 ef                	mov    edi,ebp
c001ce37:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ce3e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ce44:	6a 00                	push   0x0
c001ce46:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ce4b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ce4e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ce54:	e8 19 58 ff ff       	call   c0012672 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ce59:	b9 00 10 00 00       	mov    ecx,0x1000
c001ce5e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ce60:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c001ce65:	83 c4 20             	add    esp,0x20
c001ce68:	48                   	dec    eax
c001ce69:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c001ce6e:	85 c0                	test   eax,eax
c001ce70:	75 01                	jne    c001ce73 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001ce72:	fb                   	sti    
c001ce73:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001ce7a:	e9 df fe ff ff       	jmp    c001cd5e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001ce7f:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001ce82:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001ce8a:	0f 86 a9 00 00 00    	jbe    c001cf39 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001ce90:	fa                   	cli    
c001ce91:	ff 05 a8 25 03 c0    	inc    DWORD PTR ds:0xc00325a8
c001ce97:	51                   	push   ecx
c001ce98:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001ce9f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cea5:	6a 00                	push   0x0
c001cea7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ceac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ceaf:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ceb5:	e8 56 52 ff ff       	call   c0012110 <VAS::mapOtherVASIn(bool, VAS*)>
c001ceba:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001cebe:	c1 e6 0c             	shl    esi,0xc
c001cec1:	01 de                	add    esi,ebx
c001cec3:	83 c4 10             	add    esp,0x10
c001cec6:	39 de                	cmp    esi,ebx
c001cec8:	74 61                	je     c001cf2b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001ceca:	e8 77 30 ff ff       	call   c000ff46 <Phys::allocatePage()>
c001cecf:	6a 07                	push   0x7
c001ced1:	89 c7                	mov    edi,eax
c001ced3:	55                   	push   ebp
c001ced4:	50                   	push   eax
c001ced5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ceda:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cedd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cee3:	e8 ce 53 ff ff       	call   c00122b6 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cee8:	58                   	pop    eax
c001cee9:	5a                   	pop    edx
c001ceea:	68 07 0c 00 00       	push   0xc07
c001ceef:	53                   	push   ebx
c001cef0:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cef6:	57                   	push   edi
c001cef7:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cefe:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cf04:	6a 00                	push   0x0
c001cf06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cf0b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cf0e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cf14:	e8 59 57 ff ff       	call   c0012672 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cf19:	83 c4 1c             	add    esp,0x1c
c001cf1c:	68 00 10 00 00       	push   0x1000
c001cf21:	6a 00                	push   0x0
c001cf23:	55                   	push   ebp
c001cf24:	e8 43 38 fe ff       	call   c000076c <memset>
c001cf29:	eb 98                	jmp    c001cec3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001cf2b:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c001cf30:	48                   	dec    eax
c001cf31:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c001cf36:	75 01                	jne    c001cf39 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001cf38:	fb                   	sti    
c001cf39:	83 ec 0c             	sub    esp,0xc
c001cf3c:	55                   	push   ebp
c001cf3d:	e8 fd 4f ff ff       	call   c0011f3f <Virt::freeKernelVirtualPages(unsigned long)>
c001cf42:	83 c4 10             	add    esp,0x10
c001cf45:	b0 01                	mov    al,0x1
c001cf47:	81 c4 2c 10 00 00    	add    esp,0x102c
c001cf4d:	5b                   	pop    ebx
c001cf4e:	5e                   	pop    esi
c001cf4f:	5f                   	pop    edi
c001cf50:	5d                   	pop    ebp
c001cf51:	c3                   	ret    

c001cf52 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001cf52:	55                   	push   ebp
c001cf53:	57                   	push   edi
c001cf54:	56                   	push   esi
c001cf55:	53                   	push   ebx
c001cf56:	83 ec 48             	sub    esp,0x48
c001cf59:	68 14 01 00 00       	push   0x114
c001cf5e:	e8 77 29 ff ff       	call   c000f8da <malloc>
c001cf63:	83 c4 0c             	add    esp,0xc
c001cf66:	89 c6                	mov    esi,eax
c001cf68:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cf6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cf70:	50                   	push   eax
c001cf71:	e8 6e 64 ff ff       	call   c00133e4 <File::File(char const*, Process*)>
c001cf76:	58                   	pop    eax
c001cf77:	5a                   	pop    edx
c001cf78:	6a 01                	push   0x1
c001cf7a:	56                   	push   esi
c001cf7b:	e8 c8 64 ff ff       	call   c0013448 <File::open(FileOpenMode)>
c001cf80:	83 c4 10             	add    esp,0x10
c001cf83:	85 c0                	test   eax,eax
c001cf85:	0f 85 47 01 00 00    	jne    c001d0d2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cf8b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cf93:	83 ec 0c             	sub    esp,0xc
c001cf96:	6a 34                	push   0x34
c001cf98:	e8 3d 29 ff ff       	call   c000f8da <malloc>
c001cf9d:	89 c3                	mov    ebx,eax
c001cf9f:	58                   	pop    eax
c001cfa0:	8b 06                	mov    eax,DWORD PTR [esi]
c001cfa2:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001cfa6:	57                   	push   edi
c001cfa7:	53                   	push   ebx
c001cfa8:	6a 00                	push   0x0
c001cfaa:	6a 34                	push   0x34
c001cfac:	56                   	push   esi
c001cfad:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cfb0:	83 c4 20             	add    esp,0x20
c001cfb3:	85 c0                	test   eax,eax
c001cfb5:	0f 85 17 01 00 00    	jne    c001d0d2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cfbb:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cfc1:	0f 85 0b 01 00 00    	jne    c001d0d2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cfc7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cfca:	85 c0                	test   eax,eax
c001cfcc:	0f 84 00 01 00 00    	je     c001d0d2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cfd2:	31 d2                	xor    edx,edx
c001cfd4:	55                   	push   ebp
c001cfd5:	52                   	push   edx
c001cfd6:	50                   	push   eax
c001cfd7:	56                   	push   esi
c001cfd8:	e8 29 65 ff ff       	call   c0013506 <File::seek(unsigned long long)>
c001cfdd:	83 c4 10             	add    esp,0x10
c001cfe0:	85 c0                	test   eax,eax
c001cfe2:	0f 85 ea 00 00 00    	jne    c001d0d2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cfe8:	83 ec 0c             	sub    esp,0xc
c001cfeb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cfee:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cff2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cff6:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cffa:	0f af c2             	imul   eax,edx
c001cffd:	50                   	push   eax
c001cffe:	e8 d7 28 ff ff       	call   c000f8da <malloc>
c001d003:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001d005:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d009:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d00c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d010:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001d014:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001d018:	0f af c2             	imul   eax,edx
c001d01b:	99                   	cdq    
c001d01c:	52                   	push   edx
c001d01d:	50                   	push   eax
c001d01e:	56                   	push   esi
c001d01f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d022:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001d025:	83 c4 20             	add    esp,0x20
c001d028:	85 c0                	test   eax,eax
c001d02a:	0f 84 a2 00 00 00    	je     c001d0d2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d030:	31 d2                	xor    edx,edx
c001d032:	51                   	push   ecx
c001d033:	52                   	push   edx
c001d034:	50                   	push   eax
c001d035:	56                   	push   esi
c001d036:	e8 cb 64 ff ff       	call   c0013506 <File::seek(unsigned long long)>
c001d03b:	83 c4 10             	add    esp,0x10
c001d03e:	85 c0                	test   eax,eax
c001d040:	0f 85 8c 00 00 00    	jne    c001d0d2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d046:	83 ec 0c             	sub    esp,0xc
c001d049:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001d04d:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001d051:	31 ed                	xor    ebp,ebp
c001d053:	0f af c2             	imul   eax,edx
c001d056:	50                   	push   eax
c001d057:	e8 7e 28 ff ff       	call   c000f8da <malloc>
c001d05c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001d05e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d062:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d065:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d069:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001d06d:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001d071:	0f af c2             	imul   eax,edx
c001d074:	99                   	cdq    
c001d075:	52                   	push   edx
c001d076:	50                   	push   eax
c001d077:	56                   	push   esi
c001d078:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d07b:	83 c4 20             	add    esp,0x20
c001d07e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001d086:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001d08a:	0f 86 80 00 00 00    	jbe    c001d110 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001d090:	0f b7 fd             	movzx  edi,bp
c001d093:	c1 e7 05             	shl    edi,0x5
c001d096:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001d09a:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001d09d:	75 6b                	jne    c001d10a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001d09f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001d0a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d0a6:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001d0a9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d0ad:	52                   	push   edx
c001d0ae:	31 d2                	xor    edx,edx
c001d0b0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001d0b3:	52                   	push   edx
c001d0b4:	50                   	push   eax
c001d0b5:	56                   	push   esi
c001d0b6:	e8 4b 64 ff ff       	call   c0013506 <File::seek(unsigned long long)>
c001d0bb:	83 c4 10             	add    esp,0x10
c001d0be:	85 c0                	test   eax,eax
c001d0c0:	74 17                	je     c001d0d9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001d0c2:	83 ec 0c             	sub    esp,0xc
c001d0c5:	68 f6 cb 02 c0       	push   0xc002cbf6
c001d0ca:	e8 b6 5d ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001d0cf:	83 c4 10             	add    esp,0x10
c001d0d2:	31 c0                	xor    eax,eax
c001d0d4:	e9 87 00 00 00       	jmp    c001d160 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001d0d9:	83 ec 0c             	sub    esp,0xc
c001d0dc:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001d0df:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001d0e2:	50                   	push   eax
c001d0e3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d0e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d0eb:	56                   	push   esi
c001d0ec:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001d0f0:	e8 b3 fb ff ff       	call   c001cca8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001d0f5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d0f9:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001d0fd:	83 c4 20             	add    esp,0x20
c001d100:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001d104:	73 04                	jae    c001d10a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001d106:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d10a:	45                   	inc    ebp
c001d10b:	e9 76 ff ff ff       	jmp    c001d086 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001d110:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d114:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d118:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d11c:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001d122:	83 ec 0c             	sub    esp,0xc
c001d125:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001d12b:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d130:	05 00 10 00 00       	add    eax,0x1000
c001d135:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001d138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d13c:	e8 a9 27 ff ff       	call   c000f8ea <free>
c001d141:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d144:	e8 a1 27 ff ff       	call   c000f8ea <free>
c001d149:	58                   	pop    eax
c001d14a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d14e:	e8 97 27 ff ff       	call   c000f8ea <free>
c001d153:	89 34 24             	mov    DWORD PTR [esp],esi
c001d156:	e8 4b 63 ff ff       	call   c00134a6 <File::close()>
c001d15b:	83 c4 10             	add    esp,0x10
c001d15e:	b0 01                	mov    al,0x1
c001d160:	83 c4 3c             	add    esp,0x3c
c001d163:	5b                   	pop    ebx
c001d164:	5e                   	pop    esi
c001d165:	5f                   	pop    edi
c001d166:	5d                   	pop    ebp
c001d167:	c3                   	ret    

c001d168 <Thr::runtimeReferenceHelper()>:
c001d168:	83 ec 18             	sub    esp,0x18
c001d16b:	68 fe cb 02 c0       	push   0xc002cbfe
c001d170:	e8 10 5d ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001d175:	fa                   	cli    
c001d176:	83 c4 10             	add    esp,0x10
c001d179:	eb fe                	jmp    c001d179 <Thr::runtimeReferenceHelper()+0x11>

c001d17b <Thr::getAddressOfKernelSymbol(char const*)>:
c001d17b:	57                   	push   edi
c001d17c:	56                   	push   esi
c001d17d:	53                   	push   ebx
c001d17e:	31 db                	xor    ebx,ebx
c001d180:	39 1d 80 25 03 c0    	cmp    DWORD PTR ds:0xc0032580,ebx
c001d186:	7e 3c                	jle    c001d1c4 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001d188:	8b 34 9d 00 25 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcdb00]
c001d18f:	31 ff                	xor    edi,edi
c001d191:	39 3c 9d 00 24 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcdc00],edi
c001d198:	7e 27                	jle    c001d1c1 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001d19a:	50                   	push   eax
c001d19b:	50                   	push   eax
c001d19c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d1a0:	8b 06                	mov    eax,DWORD PTR [esi]
c001d1a2:	03 04 9d 80 24 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcdb80]
c001d1a9:	50                   	push   eax
c001d1aa:	e8 05 37 fe ff       	call   c00008b4 <strcmp>
c001d1af:	83 c4 10             	add    esp,0x10
c001d1b2:	85 c0                	test   eax,eax
c001d1b4:	75 05                	jne    c001d1bb <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001d1b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001d1b9:	eb 0b                	jmp    c001d1c6 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001d1bb:	83 c6 10             	add    esi,0x10
c001d1be:	47                   	inc    edi
c001d1bf:	eb d0                	jmp    c001d191 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001d1c1:	43                   	inc    ebx
c001d1c2:	eb bc                	jmp    c001d180 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001d1c4:	31 c0                	xor    eax,eax
c001d1c6:	5b                   	pop    ebx
c001d1c7:	5e                   	pop    esi
c001d1c8:	5f                   	pop    edi
c001d1c9:	c3                   	ret    

c001d1ca <Thr::loadKernelSymbolTable(char const*)>:
c001d1ca:	55                   	push   ebp
c001d1cb:	57                   	push   edi
c001d1cc:	56                   	push   esi
c001d1cd:	53                   	push   ebx
c001d1ce:	83 ec 68             	sub    esp,0x68
c001d1d1:	8b 35 d0 25 03 c0    	mov    esi,DWORD PTR ds:0xc00325d0
c001d1d7:	68 14 01 00 00       	push   0x114
c001d1dc:	e8 f9 26 ff ff       	call   c000f8da <malloc>
c001d1e1:	83 c4 0c             	add    esp,0xc
c001d1e4:	89 c3                	mov    ebx,eax
c001d1e6:	56                   	push   esi
c001d1e7:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001d1eb:	50                   	push   eax
c001d1ec:	e8 f3 61 ff ff       	call   c00133e4 <File::File(char const*, Process*)>
c001d1f1:	5e                   	pop    esi
c001d1f2:	5f                   	pop    edi
c001d1f3:	6a 01                	push   0x1
c001d1f5:	53                   	push   ebx
c001d1f6:	e8 4d 62 ff ff       	call   c0013448 <File::open(FileOpenMode)>
c001d1fb:	83 c4 10             	add    esp,0x10
c001d1fe:	85 c0                	test   eax,eax
c001d200:	74 0a                	je     c001d20c <Thr::loadKernelSymbolTable(char const*)+0x42>
c001d202:	83 ec 0c             	sub    esp,0xc
c001d205:	68 20 cc 02 c0       	push   0xc002cc20
c001d20a:	eb 34                	jmp    c001d240 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001d20c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001d214:	83 ec 0c             	sub    esp,0xc
c001d217:	6a 34                	push   0x34
c001d219:	e8 bc 26 ff ff       	call   c000f8da <malloc>
c001d21e:	59                   	pop    ecx
c001d21f:	89 c7                	mov    edi,eax
c001d221:	8d 74 24 34          	lea    esi,[esp+0x34]
c001d225:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d227:	56                   	push   esi
c001d228:	57                   	push   edi
c001d229:	6a 00                	push   0x0
c001d22b:	6a 34                	push   0x34
c001d22d:	53                   	push   ebx
c001d22e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d231:	83 c4 20             	add    esp,0x20
c001d234:	85 c0                	test   eax,eax
c001d236:	74 17                	je     c001d24f <Thr::loadKernelSymbolTable(char const*)+0x85>
c001d238:	83 ec 0c             	sub    esp,0xc
c001d23b:	68 37 cc 02 c0       	push   0xc002cc37
c001d240:	e8 28 d6 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c001d245:	83 c4 10             	add    esp,0x10
c001d248:	31 c0                	xor    eax,eax
c001d24a:	e9 31 02 00 00       	jmp    c001d480 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001d24f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d255:	75 e1                	jne    c001d238 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d257:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d25a:	85 c0                	test   eax,eax
c001d25c:	74 da                	je     c001d238 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d25e:	52                   	push   edx
c001d25f:	31 d2                	xor    edx,edx
c001d261:	52                   	push   edx
c001d262:	50                   	push   eax
c001d263:	53                   	push   ebx
c001d264:	e8 9d 62 ff ff       	call   c0013506 <File::seek(unsigned long long)>
c001d269:	83 c4 10             	add    esp,0x10
c001d26c:	85 c0                	test   eax,eax
c001d26e:	75 c8                	jne    c001d238 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d270:	83 ec 0c             	sub    esp,0xc
c001d273:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d277:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d27b:	31 ed                	xor    ebp,ebp
c001d27d:	0f af c2             	imul   eax,edx
c001d280:	50                   	push   eax
c001d281:	e8 54 26 ff ff       	call   c000f8da <malloc>
c001d286:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d288:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d28c:	89 34 24             	mov    DWORD PTR [esp],esi
c001d28f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d293:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d297:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d29b:	0f af c2             	imul   eax,edx
c001d29e:	99                   	cdq    
c001d29f:	52                   	push   edx
c001d2a0:	50                   	push   eax
c001d2a1:	53                   	push   ebx
c001d2a2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d2a5:	83 c4 20             	add    esp,0x20
c001d2a8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d2b0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d2b8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d2c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d2c8:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001d2cc:	0f 86 aa 00 00 00    	jbe    c001d37c <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001d2d2:	0f b7 f5             	movzx  esi,bp
c001d2d5:	6b f6 28             	imul   esi,esi,0x28
c001d2d8:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d2dc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d2df:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d2e3:	50                   	push   eax
c001d2e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d2e8:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001d2ec:	8b 16                	mov    edx,DWORD PTR [esi]
c001d2ee:	6b c0 28             	imul   eax,eax,0x28
c001d2f1:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001d2f5:	89 d0                	mov    eax,edx
c001d2f7:	31 d2                	xor    edx,edx
c001d2f9:	52                   	push   edx
c001d2fa:	50                   	push   eax
c001d2fb:	53                   	push   ebx
c001d2fc:	e8 05 62 ff ff       	call   c0013506 <File::seek(unsigned long long)>
c001d301:	83 c4 0c             	add    esp,0xc
c001d304:	6a 20                	push   0x20
c001d306:	6a 00                	push   0x0
c001d308:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d30c:	52                   	push   edx
c001d30d:	e8 5a 34 fe ff       	call   c000076c <memset>
c001d312:	58                   	pop    eax
c001d313:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d315:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001d319:	51                   	push   ecx
c001d31a:	8d 54 24 40          	lea    edx,[esp+0x40]
c001d31e:	52                   	push   edx
c001d31f:	6a 00                	push   0x0
c001d321:	6a 1f                	push   0x1f
c001d323:	53                   	push   ebx
c001d324:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d327:	83 c4 18             	add    esp,0x18
c001d32a:	68 4e cc 02 c0       	push   0xc002cc4e
c001d32f:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d333:	52                   	push   edx
c001d334:	e8 7b 35 fe ff       	call   c00008b4 <strcmp>
c001d339:	83 c4 10             	add    esp,0x10
c001d33c:	85 c0                	test   eax,eax
c001d33e:	75 0f                	jne    c001d34f <Thr::loadKernelSymbolTable(char const*)+0x185>
c001d340:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d343:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d347:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d34b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d34f:	50                   	push   eax
c001d350:	50                   	push   eax
c001d351:	68 56 cc 02 c0       	push   0xc002cc56
c001d356:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d35a:	50                   	push   eax
c001d35b:	e8 54 35 fe ff       	call   c00008b4 <strcmp>
c001d360:	83 c4 10             	add    esp,0x10
c001d363:	85 c0                	test   eax,eax
c001d365:	75 0f                	jne    c001d376 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001d367:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d36a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d36e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d372:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d376:	45                   	inc    ebp
c001d377:	e9 4c ff ff ff       	jmp    c001d2c8 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001d37c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d381:	75 10                	jne    c001d393 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001d383:	83 ec 0c             	sub    esp,0xc
c001d386:	68 5e cc 02 c0       	push   0xc002cc5e
c001d38b:	e8 dd d4 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c001d390:	83 c4 10             	add    esp,0x10
c001d393:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001d398:	75 10                	jne    c001d3aa <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001d39a:	83 ec 0c             	sub    esp,0xc
c001d39d:	68 5e cc 02 c0       	push   0xc002cc5e
c001d3a2:	e8 c6 d4 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c001d3a7:	83 c4 10             	add    esp,0x10
c001d3aa:	31 d2                	xor    edx,edx
c001d3ac:	50                   	push   eax
c001d3ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3b1:	52                   	push   edx
c001d3b2:	50                   	push   eax
c001d3b3:	53                   	push   ebx
c001d3b4:	e8 4d 61 ff ff       	call   c0013506 <File::seek(unsigned long long)>
c001d3b9:	5a                   	pop    edx
c001d3ba:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d3be:	e8 17 25 ff ff       	call   c000f8da <malloc>
c001d3c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d3c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d3cb:	31 c9                	xor    ecx,ecx
c001d3cd:	5e                   	pop    esi
c001d3ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d3d0:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001d3d4:	55                   	push   ebp
c001d3d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3d9:	51                   	push   ecx
c001d3da:	52                   	push   edx
c001d3db:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001d3df:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001d3e3:	53                   	push   ebx
c001d3e4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d3e7:	83 c4 14             	add    esp,0x14
c001d3ea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d3ee:	e8 e7 24 ff ff       	call   c000f8da <malloc>
c001d3f3:	89 c6                	mov    esi,eax
c001d3f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d3f7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d3fa:	56                   	push   esi
c001d3fb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d3ff:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d403:	51                   	push   ecx
c001d404:	52                   	push   edx
c001d405:	53                   	push   ebx
c001d406:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d409:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d40d:	8b 15 80 25 03 c0    	mov    edx,DWORD PTR ds:0xc0032580
c001d413:	83 c4 1c             	add    esp,0x1c
c001d416:	c1 e8 04             	shr    eax,0x4
c001d419:	89 04 95 00 24 03 c0 	mov    DWORD PTR [edx*4-0x3ffcdc00],eax
c001d420:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d424:	31 d2                	xor    edx,edx
c001d426:	52                   	push   edx
c001d427:	50                   	push   eax
c001d428:	53                   	push   ebx
c001d429:	e8 d8 60 ff ff       	call   c0013506 <File::seek(unsigned long long)>
c001d42e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d430:	31 d2                	xor    edx,edx
c001d432:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d435:	56                   	push   esi
c001d436:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d43a:	52                   	push   edx
c001d43b:	50                   	push   eax
c001d43c:	53                   	push   ebx
c001d43d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d440:	83 c4 14             	add    esp,0x14
c001d443:	53                   	push   ebx
c001d444:	e8 5d 60 ff ff       	call   c00134a6 <File::close()>
c001d449:	5d                   	pop    ebp
c001d44a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d44e:	e8 97 24 ff ff       	call   c000f8ea <free>
c001d453:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d456:	e8 8f 24 ff ff       	call   c000f8ea <free>
c001d45b:	a1 80 25 03 c0       	mov    eax,ds:0xc0032580
c001d460:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d464:	8d 50 01             	lea    edx,[eax+0x1]
c001d467:	89 0c 85 00 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb00],ecx
c001d46e:	89 34 85 80 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb80],esi
c001d475:	89 15 80 25 03 c0    	mov    DWORD PTR ds:0xc0032580,edx
c001d47b:	83 c4 10             	add    esp,0x10
c001d47e:	b0 01                	mov    al,0x1
c001d480:	83 c4 5c             	add    esp,0x5c
c001d483:	5b                   	pop    ebx
c001d484:	5e                   	pop    esi
c001d485:	5f                   	pop    edi
c001d486:	5d                   	pop    ebp
c001d487:	c3                   	ret    

c001d488 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d488:	55                   	push   ebp
c001d489:	57                   	push   edi
c001d48a:	56                   	push   esi
c001d48b:	53                   	push   ebx
c001d48c:	81 ec 68 03 00 00    	sub    esp,0x368
c001d492:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d499:	8b 1d d0 25 03 c0    	mov    ebx,DWORD PTR ds:0xc00325d0
c001d49f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d4a3:	68 14 01 00 00       	push   0x114
c001d4a8:	e8 2d 24 ff ff       	call   c000f8da <malloc>
c001d4ad:	83 c4 0c             	add    esp,0xc
c001d4b0:	89 c5                	mov    ebp,eax
c001d4b2:	53                   	push   ebx
c001d4b3:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d4ba:	50                   	push   eax
c001d4bb:	e8 24 5f ff ff       	call   c00133e4 <File::File(char const*, Process*)>
c001d4c0:	5e                   	pop    esi
c001d4c1:	5f                   	pop    edi
c001d4c2:	6a 01                	push   0x1
c001d4c4:	55                   	push   ebp
c001d4c5:	e8 7e 5f ff ff       	call   c0013448 <File::open(FileOpenMode)>
c001d4ca:	83 c4 10             	add    esp,0x10
c001d4cd:	85 c0                	test   eax,eax
c001d4cf:	0f 85 a7 06 00 00    	jne    c001db7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d4d5:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d4dd:	83 ec 0c             	sub    esp,0xc
c001d4e0:	6a 34                	push   0x34
c001d4e2:	e8 f3 23 ff ff       	call   c000f8da <malloc>
c001d4e7:	5b                   	pop    ebx
c001d4e8:	89 c7                	mov    edi,eax
c001d4ea:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d4ee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d4f1:	53                   	push   ebx
c001d4f2:	57                   	push   edi
c001d4f3:	6a 00                	push   0x0
c001d4f5:	6a 34                	push   0x34
c001d4f7:	55                   	push   ebp
c001d4f8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d4fb:	83 c4 20             	add    esp,0x20
c001d4fe:	85 c0                	test   eax,eax
c001d500:	0f 85 76 06 00 00    	jne    c001db7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d506:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d50c:	0f 85 6a 06 00 00    	jne    c001db7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d512:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d515:	85 c0                	test   eax,eax
c001d517:	0f 84 5f 06 00 00    	je     c001db7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d51d:	31 d2                	xor    edx,edx
c001d51f:	51                   	push   ecx
c001d520:	52                   	push   edx
c001d521:	50                   	push   eax
c001d522:	55                   	push   ebp
c001d523:	e8 de 5f ff ff       	call   c0013506 <File::seek(unsigned long long)>
c001d528:	83 c4 10             	add    esp,0x10
c001d52b:	85 c0                	test   eax,eax
c001d52d:	0f 85 49 06 00 00    	jne    c001db7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d533:	83 ec 0c             	sub    esp,0xc
c001d536:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d539:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d53d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d541:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d545:	0f af c2             	imul   eax,edx
c001d548:	50                   	push   eax
c001d549:	e8 8c 23 ff ff       	call   c000f8da <malloc>
c001d54e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d551:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d555:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d558:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d55c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d560:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d564:	0f af c2             	imul   eax,edx
c001d567:	99                   	cdq    
c001d568:	52                   	push   edx
c001d569:	50                   	push   eax
c001d56a:	55                   	push   ebp
c001d56b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d56e:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d571:	83 c4 20             	add    esp,0x20
c001d574:	85 c0                	test   eax,eax
c001d576:	0f 84 00 06 00 00    	je     c001db7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d57c:	52                   	push   edx
c001d57d:	31 d2                	xor    edx,edx
c001d57f:	52                   	push   edx
c001d580:	50                   	push   eax
c001d581:	55                   	push   ebp
c001d582:	e8 7f 5f ff ff       	call   c0013506 <File::seek(unsigned long long)>
c001d587:	83 c4 10             	add    esp,0x10
c001d58a:	85 c0                	test   eax,eax
c001d58c:	0f 85 ea 05 00 00    	jne    c001db7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d592:	83 ec 0c             	sub    esp,0xc
c001d595:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d599:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d59d:	31 f6                	xor    esi,esi
c001d59f:	0f af c2             	imul   eax,edx
c001d5a2:	50                   	push   eax
c001d5a3:	e8 32 23 ff ff       	call   c000f8da <malloc>
c001d5a8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d5ab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d5af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d5b2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d5b6:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d5ba:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d5be:	0f af c2             	imul   eax,edx
c001d5c1:	99                   	cdq    
c001d5c2:	52                   	push   edx
c001d5c3:	50                   	push   eax
c001d5c4:	55                   	push   ebp
c001d5c5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d5c8:	83 c4 20             	add    esp,0x20
c001d5cb:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d5cf:	0f 86 8a 00 00 00    	jbe    c001d65f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d5d5:	0f b7 de             	movzx  ebx,si
c001d5d8:	c1 e3 05             	shl    ebx,0x5
c001d5db:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d5df:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d5e2:	75 75                	jne    c001d659 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d5e4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d5e7:	31 d2                	xor    edx,edx
c001d5e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d5ed:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d5f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d5f4:	50                   	push   eax
c001d5f5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d5f8:	52                   	push   edx
c001d5f9:	50                   	push   eax
c001d5fa:	55                   	push   ebp
c001d5fb:	e8 06 5f ff ff       	call   c0013506 <File::seek(unsigned long long)>
c001d600:	83 c4 10             	add    esp,0x10
c001d603:	85 c0                	test   eax,eax
c001d605:	0f 85 71 05 00 00    	jne    c001db7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d60b:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d612:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d615:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d619:	31 d2                	xor    edx,edx
c001d61b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d61f:	83 ec 0c             	sub    esp,0xc
c001d622:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d626:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d62d:	50                   	push   eax
c001d62e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d632:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d636:	52                   	push   edx
c001d637:	50                   	push   eax
c001d638:	55                   	push   ebp
c001d639:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d63c:	83 c4 1c             	add    esp,0x1c
c001d63f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d642:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d645:	50                   	push   eax
c001d646:	6a 00                	push   0x0
c001d648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d64c:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d650:	50                   	push   eax
c001d651:	e8 16 31 fe ff       	call   c000076c <memset>
c001d656:	83 c4 10             	add    esp,0x10
c001d659:	46                   	inc    esi
c001d65a:	e9 6c ff ff ff       	jmp    c001d5cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d65f:	53                   	push   ebx
c001d660:	31 db                	xor    ebx,ebx
c001d662:	68 00 01 00 00       	push   0x100
c001d667:	6a 00                	push   0x0
c001d669:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d66d:	50                   	push   eax
c001d66e:	e8 f9 30 fe ff       	call   c000076c <memset>
c001d673:	83 c4 0c             	add    esp,0xc
c001d676:	68 00 01 00 00       	push   0x100
c001d67b:	6a 00                	push   0x0
c001d67d:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d684:	50                   	push   eax
c001d685:	e8 e2 30 fe ff       	call   c000076c <memset>
c001d68a:	83 c4 10             	add    esp,0x10
c001d68d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d695:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d69d:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d6a5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d6ad:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d6b5:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d6b9:	0f 86 30 01 00 00    	jbe    c001d7ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d6bf:	0f b7 f3             	movzx  esi,bx
c001d6c2:	6b f6 28             	imul   esi,esi,0x28
c001d6c5:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d6c9:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d6cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d6d0:	52                   	push   edx
c001d6d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d6d5:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d6d9:	8b 06                	mov    eax,DWORD PTR [esi]
c001d6db:	6b d2 28             	imul   edx,edx,0x28
c001d6de:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d6e2:	31 d2                	xor    edx,edx
c001d6e4:	52                   	push   edx
c001d6e5:	50                   	push   eax
c001d6e6:	55                   	push   ebp
c001d6e7:	e8 1a 5e ff ff       	call   c0013506 <File::seek(unsigned long long)>
c001d6ec:	83 c4 0c             	add    esp,0xc
c001d6ef:	6a 20                	push   0x20
c001d6f1:	6a 00                	push   0x0
c001d6f3:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d6fa:	51                   	push   ecx
c001d6fb:	e8 6c 30 fe ff       	call   c000076c <memset>
c001d700:	59                   	pop    ecx
c001d701:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d704:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d708:	52                   	push   edx
c001d709:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d710:	51                   	push   ecx
c001d711:	6a 00                	push   0x0
c001d713:	6a 1f                	push   0x1f
c001d715:	55                   	push   ebp
c001d716:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d719:	83 c4 1c             	add    esp,0x1c
c001d71c:	6a 09                	push   0x9
c001d71e:	68 78 cc 02 c0       	push   0xc002cc78
c001d723:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d72a:	51                   	push   ecx
c001d72b:	e8 38 2f fe ff       	call   c0000668 <memcmp>
c001d730:	83 c4 10             	add    esp,0x10
c001d733:	85 c0                	test   eax,eax
c001d735:	75 21                	jne    c001d758 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d737:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d73b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d73f:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d743:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d747:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d74a:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d751:	89 d0                	mov    eax,edx
c001d753:	40                   	inc    eax
c001d754:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d758:	50                   	push   eax
c001d759:	6a 09                	push   0x9
c001d75b:	68 82 cc 02 c0       	push   0xc002cc82
c001d760:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d767:	50                   	push   eax
c001d768:	e8 fb 2e fe ff       	call   c0000668 <memcmp>
c001d76d:	83 c4 10             	add    esp,0x10
c001d770:	85 c0                	test   eax,eax
c001d772:	75 21                	jne    c001d795 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d774:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d778:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d77c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d784:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d787:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d78e:	89 d0                	mov    eax,edx
c001d790:	40                   	inc    eax
c001d791:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d795:	50                   	push   eax
c001d796:	50                   	push   eax
c001d797:	68 4e cc 02 c0       	push   0xc002cc4e
c001d79c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d7a3:	50                   	push   eax
c001d7a4:	e8 0b 31 fe ff       	call   c00008b4 <strcmp>
c001d7a9:	83 c4 10             	add    esp,0x10
c001d7ac:	85 c0                	test   eax,eax
c001d7ae:	75 0f                	jne    c001d7bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d7b0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d7b3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d7b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d7bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d7bf:	50                   	push   eax
c001d7c0:	50                   	push   eax
c001d7c1:	68 56 cc 02 c0       	push   0xc002cc56
c001d7c6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d7cd:	50                   	push   eax
c001d7ce:	e8 e1 30 fe ff       	call   c00008b4 <strcmp>
c001d7d3:	83 c4 10             	add    esp,0x10
c001d7d6:	85 c0                	test   eax,eax
c001d7d8:	75 0f                	jne    c001d7e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d7da:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d7dd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d7e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d7e5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d7e9:	43                   	inc    ebx
c001d7ea:	e9 c6 fe ff ff       	jmp    c001d6b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d7ef:	31 d2                	xor    edx,edx
c001d7f1:	50                   	push   eax
c001d7f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d7f6:	52                   	push   edx
c001d7f7:	50                   	push   eax
c001d7f8:	55                   	push   ebp
c001d7f9:	e8 08 5d ff ff       	call   c0013506 <File::seek(unsigned long long)>
c001d7fe:	58                   	pop    eax
c001d7ff:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d803:	e8 d2 20 ff ff       	call   c000f8da <malloc>
c001d808:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d80b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d80f:	31 d2                	xor    edx,edx
c001d811:	58                   	pop    eax
c001d812:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d816:	53                   	push   ebx
c001d817:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d81b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d81f:	52                   	push   edx
c001d820:	50                   	push   eax
c001d821:	55                   	push   ebp
c001d822:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d825:	83 c4 14             	add    esp,0x14
c001d828:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d82c:	e8 a9 20 ff ff       	call   c000f8da <malloc>
c001d831:	31 d2                	xor    edx,edx
c001d833:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d837:	83 c4 0c             	add    esp,0xc
c001d83a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d83e:	52                   	push   edx
c001d83f:	50                   	push   eax
c001d840:	55                   	push   ebp
c001d841:	e8 c0 5c ff ff       	call   c0013506 <File::seek(unsigned long long)>
c001d846:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d849:	31 d2                	xor    edx,edx
c001d84b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d84e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d852:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d856:	52                   	push   edx
c001d857:	50                   	push   eax
c001d858:	55                   	push   ebp
c001d859:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d85c:	83 c4 20             	add    esp,0x20
c001d85f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d867:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d86b:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d86f:	0f 84 0b 03 00 00    	je     c001db80 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d875:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d87c:	31 d2                	xor    edx,edx
c001d87e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d882:	c1 e8 03             	shr    eax,0x3
c001d885:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d889:	51                   	push   ecx
c001d88a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d88e:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d892:	52                   	push   edx
c001d893:	50                   	push   eax
c001d894:	55                   	push   ebp
c001d895:	e8 6c 5c ff ff       	call   c0013506 <File::seek(unsigned long long)>
c001d89a:	5b                   	pop    ebx
c001d89b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d89f:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d8a6:	e8 2f 20 ff ff       	call   c000f8da <malloc>
c001d8ab:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d8ae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d8b2:	31 d2                	xor    edx,edx
c001d8b4:	5e                   	pop    esi
c001d8b5:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d8b9:	50                   	push   eax
c001d8ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d8be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d8c2:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d8c9:	52                   	push   edx
c001d8ca:	50                   	push   eax
c001d8cb:	55                   	push   ebp
c001d8cc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d8cf:	83 c4 20             	add    esp,0x20
c001d8d2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d8da:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d8de:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d8e2:	0f 8d 7c 02 00 00    	jge    c001db64 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d8e8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d8ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d8f0:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d8f5:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d8f8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d8fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d900:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d904:	89 d8                	mov    eax,ebx
c001d906:	c1 e8 08             	shr    eax,0x8
c001d909:	89 c6                	mov    esi,eax
c001d90b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d90f:	c1 e6 04             	shl    esi,0x4
c001d912:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d916:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d919:	85 d2                	test   edx,edx
c001d91b:	0f 85 bf 00 00 00    	jne    c001d9e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d921:	83 ec 0c             	sub    esp,0xc
c001d924:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d928:	03 06                	add    eax,DWORD PTR [esi]
c001d92a:	50                   	push   eax
c001d92b:	e8 4b f8 ff ff       	call   c001d17b <Thr::getAddressOfKernelSymbol(char const*)>
c001d930:	83 c4 10             	add    esp,0x10
c001d933:	89 c2                	mov    edx,eax
c001d935:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d93a:	85 c0                	test   eax,eax
c001d93c:	0f 85 9e 00 00 00    	jne    c001d9e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d942:	83 ec 0c             	sub    esp,0xc
c001d945:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d949:	03 06                	add    eax,DWORD PTR [esi]
c001d94b:	50                   	push   eax
c001d94c:	e8 0a 0c ff ff       	call   c000e55b <Krnl::resolveCompatibilitySymbol(char*)>
c001d951:	83 c4 10             	add    esp,0x10
c001d954:	89 c2                	mov    edx,eax
c001d956:	85 c0                	test   eax,eax
c001d958:	0f 85 82 00 00 00    	jne    c001d9e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d95e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d962:	50                   	push   eax
c001d963:	50                   	push   eax
c001d964:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d968:	03 06                	add    eax,DWORD PTR [esi]
c001d96a:	50                   	push   eax
c001d96b:	68 8c cc 02 c0       	push   0xc002cc8c
c001d970:	e8 10 55 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001d975:	58                   	pop    eax
c001d976:	5a                   	pop    edx
c001d977:	68 a6 cc 02 c0       	push   0xc002cca6
c001d97c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d983:	50                   	push   eax
c001d984:	e8 9f 2e fe ff       	call   c0000828 <strcpy>
c001d989:	59                   	pop    ecx
c001d98a:	58                   	pop    eax
c001d98b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d98f:	03 06                	add    eax,DWORD PTR [esi]
c001d991:	50                   	push   eax
c001d992:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d999:	50                   	push   eax
c001d99a:	e8 c9 2f fe ff       	call   c0000968 <strcat>
c001d99f:	58                   	pop    eax
c001d9a0:	5a                   	pop    edx
c001d9a1:	68 3c cd 02 c0       	push   0xc002cd3c
c001d9a6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d9ad:	50                   	push   eax
c001d9ae:	e8 b5 2f fe ff       	call   c0000968 <strcat>
c001d9b3:	83 c4 10             	add    esp,0x10
c001d9b6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d9bb:	0f 84 5d 01 00 00    	je     c001db1e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d9c1:	83 ec 0c             	sub    esp,0xc
c001d9c4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d9cb:	50                   	push   eax
c001d9cc:	e8 9c ce ff ff       	call   c001a86d <Krnl::panic(char const*)>
c001d9d1:	83 c4 10             	add    esp,0x10
c001d9d4:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d9d8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d9dc:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d9e0:	80 fb 01             	cmp    bl,0x1
c001d9e3:	0f 85 88 00 00 00    	jne    c001da71 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001d9e9:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d9f0:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d9f4:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d9f8:	01 ce                	add    esi,ecx
c001d9fa:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001da00:	0f 94 c0             	sete   al
c001da03:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001da09:	0f 94 c3             	sete   bl
c001da0c:	09 c3                	or     ebx,eax
c001da0e:	8b 06                	mov    eax,DWORD PTR [esi]
c001da10:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001da15:	74 41                	je     c001da58 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001da17:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001da1a:	84 db                	test   bl,bl
c001da1c:	75 15                	jne    c001da33 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001da1e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001da22:	66 83 f8 0c          	cmp    ax,0xc
c001da26:	76 05                	jbe    c001da2d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001da28:	b8 0c 00 00 00       	mov    eax,0xc
c001da2d:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001da31:	76 37                	jbe    c001da6a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001da33:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001da37:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001da3c:	0f 84 dc 00 00 00    	je     c001db1e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001da42:	83 ec 0c             	sub    esp,0xc
c001da45:	68 bd cc 02 c0       	push   0xc002ccbd
c001da4a:	e8 1e ce ff ff       	call   c001a86d <Krnl::panic(char const*)>
c001da4f:	83 c4 10             	add    esp,0x10
c001da52:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001da56:	eb 12                	jmp    c001da6a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001da58:	01 c1                	add    ecx,eax
c001da5a:	84 db                	test   bl,bl
c001da5c:	75 0c                	jne    c001da6a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001da5e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001da62:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001da66:	77 02                	ja     c001da6a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001da68:	01 d1                	add    ecx,edx
c001da6a:	89 0e                	mov    DWORD PTR [esi],ecx
c001da6c:	e9 ea 00 00 00       	jmp    c001db5b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001da71:	80 fb 02             	cmp    bl,0x2
c001da74:	75 7c                	jne    c001daf2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001da76:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001da7d:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001da81:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001da85:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001da8b:	74 20                	je     c001daad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001da8d:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001da93:	74 18                	je     c001daad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001da95:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001da99:	b9 0a 00 00 00       	mov    ecx,0xa
c001da9e:	66 83 f8 0e          	cmp    ax,0xe
c001daa2:	77 03                	ja     c001daa7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001daa4:	8d 48 fc             	lea    ecx,[eax-0x4]
c001daa7:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001daab:	76 1f                	jbe    c001dacc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001daad:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001dab1:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001dab6:	74 66                	je     c001db1e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001dab8:	83 ec 0c             	sub    esp,0xc
c001dabb:	68 d9 cc 02 c0       	push   0xc002ccd9
c001dac0:	e8 a8 cd ff ff       	call   c001a86d <Krnl::panic(char const*)>
c001dac5:	83 c4 10             	add    esp,0x10
c001dac8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dacc:	8b 06                	mov    eax,DWORD PTR [esi]
c001dace:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001dad3:	74 13                	je     c001dae8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001dad5:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001dad9:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001dae0:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001dae4:	01 c8                	add    eax,ecx
c001dae6:	eb 04                	jmp    c001daec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001dae8:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001daec:	01 c2                	add    edx,eax
c001daee:	89 16                	mov    DWORD PTR [esi],edx
c001daf0:	eb 69                	jmp    c001db5b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001daf2:	0f b6 db             	movzx  ebx,bl
c001daf5:	50                   	push   eax
c001daf6:	50                   	push   eax
c001daf7:	53                   	push   ebx
c001daf8:	68 f5 cc 02 c0       	push   0xc002ccf5
c001dafd:	e8 83 53 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001db02:	83 c4 10             	add    esp,0x10
c001db05:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001db0a:	74 12                	je     c001db1e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001db0c:	83 ec 0c             	sub    esp,0xc
c001db0f:	68 00 cd 02 c0       	push   0xc002cd00
c001db14:	e8 54 cd ff ff       	call   c001a86d <Krnl::panic(char const*)>
c001db19:	83 c4 10             	add    esp,0x10
c001db1c:	eb 3d                	jmp    c001db5b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001db1e:	83 ec 0c             	sub    esp,0xc
c001db21:	55                   	push   ebp
c001db22:	e8 7f 59 ff ff       	call   c00134a6 <File::close()>
c001db27:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001db2a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001db2d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001db30:	59                   	pop    ecx
c001db31:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001db35:	e8 b0 1d ff ff       	call   c000f8ea <free>
c001db3a:	5b                   	pop    ebx
c001db3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001db3f:	e8 a6 1d ff ff       	call   c000f8ea <free>
c001db44:	89 3c 24             	mov    DWORD PTR [esp],edi
c001db47:	e8 9e 1d ff ff       	call   c000f8ea <free>
c001db4c:	5e                   	pop    esi
c001db4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001db51:	e8 94 1d ff ff       	call   c000f8ea <free>
c001db56:	83 c4 10             	add    esp,0x10
c001db59:	eb 21                	jmp    c001db7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001db5b:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001db5f:	e9 76 fd ff ff       	jmp    c001d8da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001db64:	83 ec 0c             	sub    esp,0xc
c001db67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001db6b:	e8 7a 1d ff ff       	call   c000f8ea <free>
c001db70:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001db74:	83 c4 10             	add    esp,0x10
c001db77:	e9 eb fc ff ff       	jmp    c001d867 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001db7c:	31 c0                	xor    eax,eax
c001db7e:	eb 33                	jmp    c001dbb3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001db80:	83 ec 0c             	sub    esp,0xc
c001db83:	55                   	push   ebp
c001db84:	e8 1d 59 ff ff       	call   c00134a6 <File::close()>
c001db89:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001db8c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001db8f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001db92:	58                   	pop    eax
c001db93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001db97:	e8 4e 1d ff ff       	call   c000f8ea <free>
c001db9c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001db9f:	e8 46 1d ff ff       	call   c000f8ea <free>
c001dba4:	5a                   	pop    edx
c001dba5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dba9:	e8 3c 1d ff ff       	call   c000f8ea <free>
c001dbae:	83 c4 10             	add    esp,0x10
c001dbb1:	b0 01                	mov    al,0x1
c001dbb3:	81 c4 5c 03 00 00    	add    esp,0x35c
c001dbb9:	5b                   	pop    ebx
c001dbba:	5e                   	pop    esi
c001dbbb:	5f                   	pop    edi
c001dbbc:	5d                   	pop    ebp
c001dbbd:	c3                   	ret    

c001dbbe <Thr::getDriverBaseFromAddress(unsigned long)>:
c001dbbe:	56                   	push   esi
c001dbbf:	31 d2                	xor    edx,edx
c001dbc1:	53                   	push   ebx
c001dbc2:	8b 1d e0 1d 03 c0    	mov    ebx,DWORD PTR ds:0xc0031de0
c001dbc8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dbcc:	39 d3                	cmp    ebx,edx
c001dbce:	7e 1b                	jle    c001dbeb <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001dbd0:	8b 04 95 00 20 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffce000]
c001dbd7:	39 c8                	cmp    eax,ecx
c001dbd9:	77 0d                	ja     c001dbe8 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001dbdb:	8b 34 95 00 1e 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffce200]
c001dbe2:	01 c6                	add    esi,eax
c001dbe4:	39 ce                	cmp    esi,ecx
c001dbe6:	77 05                	ja     c001dbed <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001dbe8:	42                   	inc    edx
c001dbe9:	eb e1                	jmp    c001dbcc <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001dbeb:	31 c0                	xor    eax,eax
c001dbed:	5b                   	pop    ebx
c001dbee:	5e                   	pop    esi
c001dbef:	c3                   	ret    

c001dbf0 <Thr::getDriverNameFromAddress(unsigned long)>:
c001dbf0:	53                   	push   ebx
c001dbf1:	31 c0                	xor    eax,eax
c001dbf3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dbf7:	8b 1d e0 1d 03 c0    	mov    ebx,DWORD PTR ds:0xc0031de0
c001dbfd:	39 c3                	cmp    ebx,eax
c001dbff:	7e 22                	jle    c001dc23 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001dc01:	8b 14 85 00 20 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce000]
c001dc08:	39 ca                	cmp    edx,ecx
c001dc0a:	77 14                	ja     c001dc20 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001dc0c:	03 14 85 00 1e 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffce200]
c001dc13:	39 ca                	cmp    edx,ecx
c001dc15:	76 09                	jbe    c001dc20 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001dc17:	8b 04 85 00 22 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcde00]
c001dc1e:	eb 05                	jmp    c001dc25 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001dc20:	40                   	inc    eax
c001dc21:	eb da                	jmp    c001dbfd <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001dc23:	31 c0                	xor    eax,eax
c001dc25:	5b                   	pop    ebx
c001dc26:	c3                   	ret    

c001dc27 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001dc27:	53                   	push   ebx
c001dc28:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001dc2c:	53                   	push   ebx
c001dc2d:	e8 8c ff ff ff       	call   c001dbbe <Thr::getDriverBaseFromAddress(unsigned long)>
c001dc32:	5a                   	pop    edx
c001dc33:	31 d2                	xor    edx,edx
c001dc35:	85 c0                	test   eax,eax
c001dc37:	74 04                	je     c001dc3d <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001dc39:	89 da                	mov    edx,ebx
c001dc3b:	29 c2                	sub    edx,eax
c001dc3d:	89 d0                	mov    eax,edx
c001dc3f:	5b                   	pop    ebx
c001dc40:	c3                   	ret    

c001dc41 <Thr::loadDLL(char const*, bool)>:
c001dc41:	55                   	push   ebp
c001dc42:	57                   	push   edi
c001dc43:	56                   	push   esi
c001dc44:	53                   	push   ebx
c001dc45:	81 ec 34 01 00 00    	sub    esp,0x134
c001dc4b:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001dc52:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001dc59:	56                   	push   esi
c001dc5a:	68 18 cd 02 c0       	push   0xc002cd18
c001dc5f:	e8 21 52 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001dc64:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001dc6b:	e8 6a 1c ff ff       	call   c000f8da <malloc>
c001dc70:	83 c4 0c             	add    esp,0xc
c001dc73:	89 c3                	mov    ebx,eax
c001dc75:	ff 35 d0 25 03 c0    	push   DWORD PTR ds:0xc00325d0
c001dc7b:	56                   	push   esi
c001dc7c:	50                   	push   eax
c001dc7d:	e8 62 57 ff ff       	call   c00133e4 <File::File(char const*, Process*)>
c001dc82:	83 c4 10             	add    esp,0x10
c001dc85:	85 db                	test   ebx,ebx
c001dc87:	75 3c                	jne    c001dcc5 <Thr::loadDLL(char const*, bool)+0x84>
c001dc89:	89 f8                	mov    eax,edi
c001dc8b:	84 c0                	test   al,al
c001dc8d:	0f 84 cc 01 00 00    	je     c001de5f <Thr::loadDLL(char const*, bool)+0x21e>
c001dc93:	55                   	push   ebp
c001dc94:	55                   	push   ebp
c001dc95:	68 29 cd 02 c0       	push   0xc002cd29
c001dc9a:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001dc9e:	55                   	push   ebp
c001dc9f:	e8 84 2b fe ff       	call   c0000828 <strcpy>
c001dca4:	58                   	pop    eax
c001dca5:	5a                   	pop    edx
c001dca6:	56                   	push   esi
c001dca7:	55                   	push   ebp
c001dca8:	e8 bb 2c fe ff       	call   c0000968 <strcat>
c001dcad:	59                   	pop    ecx
c001dcae:	58                   	pop    eax
c001dcaf:	68 3c cd 02 c0       	push   0xc002cd3c
c001dcb4:	55                   	push   ebp
c001dcb5:	e8 ae 2c fe ff       	call   c0000968 <strcat>
c001dcba:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001dcbd:	e8 ab cb ff ff       	call   c001a86d <Krnl::panic(char const*)>
c001dcc2:	83 c4 10             	add    esp,0x10
c001dcc5:	51                   	push   ecx
c001dcc6:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001dcca:	50                   	push   eax
c001dccb:	8d 44 24 20          	lea    eax,[esp+0x20]
c001dccf:	50                   	push   eax
c001dcd0:	53                   	push   ebx
c001dcd1:	e8 1e 5a ff ff       	call   c00136f4 <File::stat(unsigned long long*, bool*)>
c001dcd6:	83 c4 10             	add    esp,0x10
c001dcd9:	85 db                	test   ebx,ebx
c001dcdb:	74 0c                	je     c001dce9 <Thr::loadDLL(char const*, bool)+0xa8>
c001dcdd:	83 ec 0c             	sub    esp,0xc
c001dce0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dce2:	53                   	push   ebx
c001dce3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dce6:	83 c4 10             	add    esp,0x10
c001dce9:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001dcee:	75 0a                	jne    c001dcfa <Thr::loadDLL(char const*, bool)+0xb9>
c001dcf0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dcf4:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001dcf8:	75 3c                	jne    c001dd36 <Thr::loadDLL(char const*, bool)+0xf5>
c001dcfa:	89 f8                	mov    eax,edi
c001dcfc:	84 c0                	test   al,al
c001dcfe:	0f 84 43 01 00 00    	je     c001de47 <Thr::loadDLL(char const*, bool)+0x206>
c001dd04:	51                   	push   ecx
c001dd05:	51                   	push   ecx
c001dd06:	68 29 cd 02 c0       	push   0xc002cd29
c001dd0b:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001dd0f:	53                   	push   ebx
c001dd10:	e8 13 2b fe ff       	call   c0000828 <strcpy>
c001dd15:	5d                   	pop    ebp
c001dd16:	58                   	pop    eax
c001dd17:	56                   	push   esi
c001dd18:	53                   	push   ebx
c001dd19:	e8 4a 2c fe ff       	call   c0000968 <strcat>
c001dd1e:	58                   	pop    eax
c001dd1f:	5a                   	pop    edx
c001dd20:	68 3c cd 02 c0       	push   0xc002cd3c
c001dd25:	53                   	push   ebx
c001dd26:	e8 3d 2c fe ff       	call   c0000968 <strcat>
c001dd2b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dd2e:	e8 3a cb ff ff       	call   c001a86d <Krnl::panic(char const*)>
c001dd33:	83 c4 10             	add    esp,0x10
c001dd36:	52                   	push   edx
c001dd37:	6a 03                	push   0x3
c001dd39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd3d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001dd41:	05 ff 0f 00 00       	add    eax,0xfff
c001dd46:	83 d2 00             	adc    edx,0x0
c001dd49:	0f ac d0 0c          	shrd   eax,edx,0xc
c001dd4d:	50                   	push   eax
c001dd4e:	ff 35 f0 f1 02 c0    	push   DWORD PTR ds:0xc002f1f0
c001dd54:	e8 5f 46 ff ff       	call   c00123b8 <VAS::allocatePages(int, int)>
c001dd59:	59                   	pop    ecx
c001dd5a:	89 c3                	mov    ebx,eax
c001dd5c:	5d                   	pop    ebp
c001dd5d:	50                   	push   eax
c001dd5e:	68 3e cd 02 c0       	push   0xc002cd3e
c001dd63:	e8 1d 51 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001dd68:	89 34 24             	mov    DWORD PTR [esp],esi
c001dd6b:	e8 18 2a fe ff       	call   c0000788 <strlen>
c001dd70:	8b 2d e0 1d 03 c0    	mov    ebp,DWORD PTR ds:0xc0031de0
c001dd76:	40                   	inc    eax
c001dd77:	89 04 24             	mov    DWORD PTR [esp],eax
c001dd7a:	e8 5b 1b ff ff       	call   c000f8da <malloc>
c001dd7f:	89 04 ad 00 22 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcde00],eax
c001dd86:	58                   	pop    eax
c001dd87:	a1 e0 1d 03 c0       	mov    eax,ds:0xc0031de0
c001dd8c:	5a                   	pop    edx
c001dd8d:	56                   	push   esi
c001dd8e:	ff 34 85 00 22 03 c0 	push   DWORD PTR [eax*4-0x3ffcde00]
c001dd95:	e8 8e 2a fe ff       	call   c0000828 <strcpy>
c001dd9a:	a1 e0 1d 03 c0       	mov    eax,ds:0xc0031de0
c001dd9f:	8d 50 01             	lea    edx,[eax+0x1]
c001dda2:	89 1c 85 00 20 03 c0 	mov    DWORD PTR [eax*4-0x3ffce000],ebx
c001dda9:	89 15 e0 1d 03 c0    	mov    DWORD PTR ds:0xc0031de0,edx
c001ddaf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ddb3:	83 c4 0c             	add    esp,0xc
c001ddb6:	89 14 85 00 1e 03 c0 	mov    DWORD PTR [eax*4-0x3ffce200],edx
c001ddbd:	6a 01                	push   0x1
c001ddbf:	53                   	push   ebx
c001ddc0:	56                   	push   esi
c001ddc1:	e8 c2 f6 ff ff       	call   c001d488 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001ddc6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ddca:	83 c4 10             	add    esp,0x10
c001ddcd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ddd2:	0f 85 83 00 00 00    	jne    c001de5b <Thr::loadDLL(char const*, bool)+0x21a>
c001ddd8:	89 f8                	mov    eax,edi
c001ddda:	84 c0                	test   al,al
c001dddc:	74 6d                	je     c001de4b <Thr::loadDLL(char const*, bool)+0x20a>
c001ddde:	83 ec 0c             	sub    esp,0xc
c001dde1:	68 4b cd 02 c0       	push   0xc002cd4b
c001dde6:	e8 82 ca ff ff       	call   c001a86d <Krnl::panic(char const*)>
c001ddeb:	83 c4 10             	add    esp,0x10
c001ddee:	eb 5b                	jmp    c001de4b <Thr::loadDLL(char const*, bool)+0x20a>
c001ddf0:	89 ee                	mov    esi,ebp
c001ddf2:	50                   	push   eax
c001ddf3:	c1 e6 0c             	shl    esi,0xc
c001ddf6:	50                   	push   eax
c001ddf7:	01 de                	add    esi,ebx
c001ddf9:	56                   	push   esi
c001ddfa:	ff 35 f0 f1 02 c0    	push   DWORD PTR ds:0xc002f1f0
c001de00:	e8 1b 41 ff ff       	call   c0011f20 <VAS::getPageTableEntry(unsigned long)>
c001de05:	83 c4 10             	add    esp,0x10
c001de08:	f6 00 60             	test   BYTE PTR [eax],0x60
c001de0b:	75 0c                	jne    c001de19 <Thr::loadDLL(char const*, bool)+0x1d8>
c001de0d:	83 ec 0c             	sub    esp,0xc
c001de10:	56                   	push   esi
c001de11:	e8 a6 20 ff ff       	call   c000febc <Phys::freePage(unsigned long)>
c001de16:	83 c4 10             	add    esp,0x10
c001de19:	45                   	inc    ebp
c001de1a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001de1e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001de22:	05 ff 0f 00 00       	add    eax,0xfff
c001de27:	bf 00 00 00 00       	mov    edi,0x0
c001de2c:	83 d2 00             	adc    edx,0x0
c001de2f:	0f ac d0 0c          	shrd   eax,edx,0xc
c001de33:	c1 ea 0c             	shr    edx,0xc
c001de36:	39 c5                	cmp    ebp,eax
c001de38:	89 d1                	mov    ecx,edx
c001de3a:	89 f8                	mov    eax,edi
c001de3c:	19 c8                	sbb    eax,ecx
c001de3e:	72 b0                	jb     c001ddf0 <Thr::loadDLL(char const*, bool)+0x1af>
c001de40:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001de45:	75 18                	jne    c001de5f <Thr::loadDLL(char const*, bool)+0x21e>
c001de47:	31 db                	xor    ebx,ebx
c001de49:	eb 14                	jmp    c001de5f <Thr::loadDLL(char const*, bool)+0x21e>
c001de4b:	83 ec 0c             	sub    esp,0xc
c001de4e:	68 6a cd 02 c0       	push   0xc002cd6a
c001de53:	e8 15 ca ff ff       	call   c001a86d <Krnl::panic(char const*)>
c001de58:	83 c4 10             	add    esp,0x10
c001de5b:	31 ed                	xor    ebp,ebp
c001de5d:	eb bb                	jmp    c001de1a <Thr::loadDLL(char const*, bool)+0x1d9>
c001de5f:	81 c4 2c 01 00 00    	add    esp,0x12c
c001de65:	89 d8                	mov    eax,ebx
c001de67:	5b                   	pop    ebx
c001de68:	5e                   	pop    esi
c001de69:	5f                   	pop    edi
c001de6a:	5d                   	pop    ebp
c001de6b:	c3                   	ret    

c001de6c <Thr::executeDLL(unsigned long, void*)>:
c001de6c:	56                   	push   esi
c001de6d:	53                   	push   ebx
c001de6e:	52                   	push   edx
c001de6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001de73:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001de77:	85 db                	test   ebx,ebx
c001de79:	75 10                	jne    c001de8b <Thr::executeDLL(unsigned long, void*)+0x1f>
c001de7b:	83 ec 0c             	sub    esp,0xc
c001de7e:	68 86 cd 02 c0       	push   0xc002cd86
c001de83:	e8 e5 c9 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c001de88:	83 c4 10             	add    esp,0x10
c001de8b:	50                   	push   eax
c001de8c:	50                   	push   eax
c001de8d:	53                   	push   ebx
c001de8e:	68 b0 cd 02 c0       	push   0xc002cdb0
c001de93:	e8 ed 4f ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001de98:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001de9c:	89 d8                	mov    eax,ebx
c001de9e:	83 c4 14             	add    esp,0x14
c001dea1:	5b                   	pop    ebx
c001dea2:	5e                   	pop    esi
c001dea3:	ff e0                	jmp    eax
c001dea5:	90                   	nop

c001dea6 <userModeEntryPoint(void*)>:
c001dea6:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c001deab:	48                   	dec    eax
c001deac:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c001deb1:	75 01                	jne    c001deb4 <userModeEntryPoint(void*)+0xe>
c001deb3:	fb                   	sti    
c001deb4:	fb                   	sti    
c001deb5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001deba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001debd:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001dec3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dec7:	e9 5e 24 fe ff       	jmp    c000032a <goToUsermode>

c001decc <changeTSS>:
c001decc:	83 ec 14             	sub    esp,0x14
c001decf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ded4:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001ded7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001dedc:	c1 e2 15             	shl    edx,0x15
c001dedf:	29 d0                	sub    eax,edx
c001dee1:	50                   	push   eax
c001dee2:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c001dee7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001deed:	05 7c 11 00 00       	add    eax,0x117c
c001def2:	50                   	push   eax
c001def3:	e8 c6 34 ff ff       	call   c00113be <TSS::setESP(unsigned long)>
c001def8:	83 c4 1c             	add    esp,0x1c
c001defb:	c3                   	ret    

c001defc <switchToThread(ThreadControlBlock*)>:
c001defc:	57                   	push   edi
c001defd:	a1 a4 25 03 c0       	mov    eax,ds:0xc00325a4
c001df02:	56                   	push   esi
c001df03:	85 c0                	test   eax,eax
c001df05:	53                   	push   ebx
c001df06:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001df0a:	0f 85 88 00 00 00    	jne    c001df98 <switchToThread(ThreadControlBlock*)+0x9c>
c001df10:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001df13:	3c ff                	cmp    al,0xff
c001df15:	74 7d                	je     c001df94 <switchToThread(ThreadControlBlock*)+0x98>
c001df17:	0f b6 d0             	movzx  edx,al
c001df1a:	b8 84 03 00 00       	mov    eax,0x384
c001df1f:	29 d0                	sub    eax,edx
c001df21:	c1 e0 10             	shl    eax,0x10
c001df24:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001df27:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001df2a:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c001df2f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001df35:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001df3c:	74 4a                	je     c001df88 <switchToThread(ThreadControlBlock*)+0x8c>
c001df3e:	0f 31                	rdtsc  
c001df40:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001df45:	89 c6                	mov    esi,eax
c001df47:	89 d7                	mov    edi,edx
c001df49:	2b 35 d8 25 03 c0    	sub    esi,DWORD PTR ds:0xc00325d8
c001df4f:	89 15 ec 25 03 c0    	mov    DWORD PTR ds:0xc00325ec,edx
c001df55:	1b 3d dc 25 03 c0    	sbb    edi,DWORD PTR ds:0xc00325dc
c001df5b:	89 35 e0 25 03 c0    	mov    DWORD PTR ds:0xc00325e0,esi
c001df61:	a3 d8 25 03 c0       	mov    ds:0xc00325d8,eax
c001df66:	89 3d e4 25 03 c0    	mov    DWORD PTR ds:0xc00325e4,edi
c001df6c:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001df72:	89 15 dc 25 03 c0    	mov    DWORD PTR ds:0xc00325dc,edx
c001df78:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001df7b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001df7e:	01 c6                	add    esi,eax
c001df80:	11 d7                	adc    edi,edx
c001df82:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001df85:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001df88:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001df8c:	5b                   	pop    ebx
c001df8d:	5e                   	pop    esi
c001df8e:	5f                   	pop    edi
c001df8f:	e9 ce 23 fe ff       	jmp    c0000362 <switchToThreadASM>
c001df94:	31 c0                	xor    eax,eax
c001df96:	eb 8f                	jmp    c001df27 <switchToThread(ThreadControlBlock*)+0x2b>
c001df98:	5b                   	pop    ebx
c001df99:	c7 05 a0 25 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00325a0,0x1
c001dfa3:	5e                   	pop    esi
c001dfa4:	5f                   	pop    edi
c001dfa5:	c3                   	ret    

c001dfa6 <Process::addArgs(char**)>:
c001dfa6:	57                   	push   edi
c001dfa7:	56                   	push   esi
c001dfa8:	53                   	push   ebx
c001dfa9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dfad:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001dfb1:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001dfbb:	85 ff                	test   edi,edi
c001dfbd:	74 3d                	je     c001dffc <Process::addArgs(char**)+0x56>
c001dfbf:	8b 07                	mov    eax,DWORD PTR [edi]
c001dfc1:	85 c0                	test   eax,eax
c001dfc3:	74 37                	je     c001dffc <Process::addArgs(char**)+0x56>
c001dfc5:	31 db                	xor    ebx,ebx
c001dfc7:	83 ec 0c             	sub    esp,0xc
c001dfca:	50                   	push   eax
c001dfcb:	e8 b8 27 fe ff       	call   c0000788 <strlen>
c001dfd0:	40                   	inc    eax
c001dfd1:	89 04 24             	mov    DWORD PTR [esp],eax
c001dfd4:	e8 01 19 ff ff       	call   c000f8da <malloc>
c001dfd9:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001dfe0:	5a                   	pop    edx
c001dfe1:	59                   	pop    ecx
c001dfe2:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001dfe5:	43                   	inc    ebx
c001dfe6:	50                   	push   eax
c001dfe7:	e8 3c 28 fe ff       	call   c0000828 <strcpy>
c001dfec:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001dff2:	83 c4 10             	add    esp,0x10
c001dff5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001dff8:	85 c0                	test   eax,eax
c001dffa:	75 cb                	jne    c001dfc7 <Process::addArgs(char**)+0x21>
c001dffc:	5b                   	pop    ebx
c001dffd:	5e                   	pop    esi
c001dffe:	5f                   	pop    edi
c001dfff:	c3                   	ret    

c001e000 <Process::Process(char const*, Process*, char**)>:
c001e000:	56                   	push   esi
c001e001:	53                   	push   ebx
c001e002:	83 ec 14             	sub    esp,0x14
c001e005:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e009:	05 0c 02 00 00       	add    eax,0x20c
c001e00e:	bb 07 00 00 00       	mov    ebx,0x7
c001e013:	89 c6                	mov    esi,eax
c001e015:	85 db                	test   ebx,ebx
c001e017:	78 12                	js     c001e02b <Process::Process(char const*, Process*, char**)+0x2b>
c001e019:	83 ec 0c             	sub    esp,0xc
c001e01c:	56                   	push   esi
c001e01d:	e8 f0 b6 00 00       	call   c0029712 <ThreadControlBlock::ThreadControlBlock()>
c001e022:	83 c4 10             	add    esp,0x10
c001e025:	83 c6 63             	add    esi,0x63
c001e028:	4b                   	dec    ebx
c001e029:	eb ea                	jmp    c001e015 <Process::Process(char const*, Process*, char**)+0x15>
c001e02b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e02f:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001e036:	83 ec 0c             	sub    esp,0xc
c001e039:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e03d:	e8 84 c6 ff ff       	call   c001a6c6 <Krnl::newProcessEnv(Process*)>
c001e042:	83 c4 10             	add    esp,0x10
c001e045:	89 c2                	mov    edx,eax
c001e047:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e04b:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001e051:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e055:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001e05e:	a1 f0 e5 02 c0       	mov    eax,ds:0xc002e5f0
c001e063:	8d 50 01             	lea    edx,[eax+0x1]
c001e066:	89 15 f0 e5 02 c0    	mov    DWORD PTR ds:0xc002e5f0,edx
c001e06c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e070:	89 02                	mov    DWORD PTR [edx],eax
c001e072:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001e07a:	83 ec 0c             	sub    esp,0xc
c001e07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e081:	e8 54 18 ff ff       	call   c000f8da <malloc>
c001e086:	83 c4 10             	add    esp,0x10
c001e089:	89 c3                	mov    ebx,eax
c001e08b:	83 ec 08             	sub    esp,0x8
c001e08e:	6a 00                	push   0x0
c001e090:	53                   	push   ebx
c001e091:	e8 ca 46 ff ff       	call   c0012760 <VAS::VAS(bool)>
c001e096:	83 c4 10             	add    esp,0x10
c001e099:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e09d:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001e0a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e0a7:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e0b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e0b5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e0b9:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001e0bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e0c3:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e0c9:	85 c0                	test   eax,eax
c001e0cb:	74 42                	je     c001e10f <Process::Process(char const*, Process*, char**)+0x10f>
c001e0cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e0d1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e0d7:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e0dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e0e1:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001e0e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e0eb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e0f1:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001e0f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e0fb:	05 0c 01 00 00       	add    eax,0x10c
c001e100:	83 ec 08             	sub    esp,0x8
c001e103:	52                   	push   edx
c001e104:	50                   	push   eax
c001e105:	e8 1e 27 fe ff       	call   c0000828 <strcpy>
c001e10a:	83 c4 10             	add    esp,0x10
c001e10d:	eb 63                	jmp    c001e172 <Process::Process(char const*, Process*, char**)+0x172>
c001e10f:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001e117:	83 ec 0c             	sub    esp,0xc
c001e11a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e11e:	e8 b7 17 ff ff       	call   c000f8da <malloc>
c001e123:	83 c4 10             	add    esp,0x10
c001e126:	89 c3                	mov    ebx,eax
c001e128:	83 ec 08             	sub    esp,0x8
c001e12b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e12f:	53                   	push   ebx
c001e130:	e8 6b 2f ff ff       	call   c00110a0 <VgaText::VgaText(char const*)>
c001e135:	83 c4 10             	add    esp,0x10
c001e138:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e13c:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001e142:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e146:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e14c:	83 ec 0c             	sub    esp,0xc
c001e14f:	50                   	push   eax
c001e150:	e8 82 24 ff ff       	call   c00105d7 <addToTerminalCycle(VgaText*)>
c001e155:	83 c4 10             	add    esp,0x10
c001e158:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e15c:	05 0c 01 00 00       	add    eax,0x10c
c001e161:	83 ec 08             	sub    esp,0x8
c001e164:	68 cf cd 02 c0       	push   0xc002cdcf
c001e169:	50                   	push   eax
c001e16a:	e8 b9 26 fe ff       	call   c0000828 <strcpy>
c001e16f:	83 c4 10             	add    esp,0x10
c001e172:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e176:	83 c0 0c             	add    eax,0xc
c001e179:	83 ec 08             	sub    esp,0x8
c001e17c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e180:	50                   	push   eax
c001e181:	e8 a2 26 fe ff       	call   c0000828 <strcpy>
c001e186:	83 c4 10             	add    esp,0x10
c001e189:	83 ec 08             	sub    esp,0x8
c001e18c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e190:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e194:	e8 0d fe ff ff       	call   c001dfa6 <Process::addArgs(char**)>
c001e199:	83 c4 10             	add    esp,0x10
c001e19c:	83 ec 08             	sub    esp,0x8
c001e19f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e1a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e1a7:	e8 a6 ed ff ff       	call   c001cf52 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001e1ac:	83 c4 10             	add    esp,0x10
c001e1af:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e1b3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e1b7:	83 f0 01             	xor    eax,0x1
c001e1ba:	88 c2                	mov    dl,al
c001e1bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1c0:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001e1c6:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001e1cb:	83 ec 08             	sub    esp,0x8
c001e1ce:	50                   	push   eax
c001e1cf:	68 fc ce 02 c0       	push   0xc002cefc
c001e1d4:	e8 ac 4c ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001e1d9:	83 c4 10             	add    esp,0x10
c001e1dc:	90                   	nop
c001e1dd:	83 c4 14             	add    esp,0x14
c001e1e0:	5b                   	pop    ebx
c001e1e1:	5e                   	pop    esi
c001e1e2:	c3                   	ret    
c001e1e3:	90                   	nop

c001e1e4 <Process::Process(bool, char const*, Process*, char**)>:
c001e1e4:	56                   	push   esi
c001e1e5:	53                   	push   ebx
c001e1e6:	83 ec 24             	sub    esp,0x24
c001e1e9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e1ed:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e1f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1f5:	05 0c 02 00 00       	add    eax,0x20c
c001e1fa:	bb 07 00 00 00       	mov    ebx,0x7
c001e1ff:	89 c6                	mov    esi,eax
c001e201:	85 db                	test   ebx,ebx
c001e203:	78 12                	js     c001e217 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001e205:	83 ec 0c             	sub    esp,0xc
c001e208:	56                   	push   esi
c001e209:	e8 04 b5 00 00       	call   c0029712 <ThreadControlBlock::ThreadControlBlock()>
c001e20e:	83 c4 10             	add    esp,0x10
c001e211:	83 c6 63             	add    esi,0x63
c001e214:	4b                   	dec    ebx
c001e215:	eb ea                	jmp    c001e201 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001e217:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e21b:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001e222:	83 ec 0c             	sub    esp,0xc
c001e225:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e229:	e8 98 c4 ff ff       	call   c001a6c6 <Krnl::newProcessEnv(Process*)>
c001e22e:	83 c4 10             	add    esp,0x10
c001e231:	89 c2                	mov    edx,eax
c001e233:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e237:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001e23d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e241:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001e24a:	a1 f0 e5 02 c0       	mov    eax,ds:0xc002e5f0
c001e24f:	8d 50 01             	lea    edx,[eax+0x1]
c001e252:	89 15 f0 e5 02 c0    	mov    DWORD PTR ds:0xc002e5f0,edx
c001e258:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e25c:	89 02                	mov    DWORD PTR [edx],eax
c001e25e:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001e266:	83 ec 0c             	sub    esp,0xc
c001e269:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001e26d:	e8 68 16 ff ff       	call   c000f8da <malloc>
c001e272:	83 c4 10             	add    esp,0x10
c001e275:	89 c3                	mov    ebx,eax
c001e277:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e27c:	83 ec 08             	sub    esp,0x8
c001e27f:	50                   	push   eax
c001e280:	53                   	push   ebx
c001e281:	e8 da 44 ff ff       	call   c0012760 <VAS::VAS(bool)>
c001e286:	83 c4 10             	add    esp,0x10
c001e289:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e28d:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001e293:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e297:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e2a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e2a5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e2a9:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001e2af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e2b3:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e2b9:	85 c0                	test   eax,eax
c001e2bb:	74 42                	je     c001e2ff <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001e2bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e2c1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e2c7:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e2cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e2d1:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001e2d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e2db:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e2e1:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001e2e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e2eb:	05 0c 01 00 00       	add    eax,0x10c
c001e2f0:	83 ec 08             	sub    esp,0x8
c001e2f3:	52                   	push   edx
c001e2f4:	50                   	push   eax
c001e2f5:	e8 2e 25 fe ff       	call   c0000828 <strcpy>
c001e2fa:	83 c4 10             	add    esp,0x10
c001e2fd:	eb 63                	jmp    c001e362 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001e2ff:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001e307:	83 ec 0c             	sub    esp,0xc
c001e30a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e30e:	e8 c7 15 ff ff       	call   c000f8da <malloc>
c001e313:	83 c4 10             	add    esp,0x10
c001e316:	89 c3                	mov    ebx,eax
c001e318:	83 ec 08             	sub    esp,0x8
c001e31b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e31f:	53                   	push   ebx
c001e320:	e8 7b 2d ff ff       	call   c00110a0 <VgaText::VgaText(char const*)>
c001e325:	83 c4 10             	add    esp,0x10
c001e328:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e32c:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001e332:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e336:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e33c:	83 ec 0c             	sub    esp,0xc
c001e33f:	50                   	push   eax
c001e340:	e8 92 22 ff ff       	call   c00105d7 <addToTerminalCycle(VgaText*)>
c001e345:	83 c4 10             	add    esp,0x10
c001e348:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e34c:	05 0c 01 00 00       	add    eax,0x10c
c001e351:	83 ec 08             	sub    esp,0x8
c001e354:	68 cf cd 02 c0       	push   0xc002cdcf
c001e359:	50                   	push   eax
c001e35a:	e8 c9 24 fe ff       	call   c0000828 <strcpy>
c001e35f:	83 c4 10             	add    esp,0x10
c001e362:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e366:	83 c0 0c             	add    eax,0xc
c001e369:	83 ec 08             	sub    esp,0x8
c001e36c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e370:	50                   	push   eax
c001e371:	e8 b2 24 fe ff       	call   c0000828 <strcpy>
c001e376:	83 c4 10             	add    esp,0x10
c001e379:	83 ec 08             	sub    esp,0x8
c001e37c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e380:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e384:	e8 1d fc ff ff       	call   c001dfa6 <Process::addArgs(char**)>
c001e389:	83 c4 10             	add    esp,0x10
c001e38c:	90                   	nop
c001e38d:	83 c4 24             	add    esp,0x24
c001e390:	5b                   	pop    ebx
c001e391:	5e                   	pop    esi
c001e392:	c3                   	ret    

c001e393 <taskStartupFunction>:
c001e393:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e398:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001e39b:	c3                   	ret    

c001e39c <Semaphore::Semaphore(int)>:
c001e39c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e3a4:	89 10                	mov    DWORD PTR [eax],edx
c001e3a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3aa:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001e3b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3b5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e3bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3c0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e3c7:	90                   	nop
c001e3c8:	c3                   	ret    
c001e3c9:	90                   	nop

c001e3ca <Mutex::Mutex()>:
c001e3ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3ce:	6a 01                	push   0x1
c001e3d0:	50                   	push   eax
c001e3d1:	e8 c6 ff ff ff       	call   c001e39c <Semaphore::Semaphore(int)>
c001e3d6:	83 c4 08             	add    esp,0x8
c001e3d9:	90                   	nop
c001e3da:	c3                   	ret    
c001e3db:	90                   	nop

c001e3dc <Process::createThread(void (*)(void*), void*, int)>:
c001e3dc:	55                   	push   ebp
c001e3dd:	31 c9                	xor    ecx,ecx
c001e3df:	57                   	push   edi
c001e3e0:	56                   	push   esi
c001e3e1:	53                   	push   ebx
c001e3e2:	83 ec 1c             	sub    esp,0x1c
c001e3e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e3e9:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001e3f0:	89 f2                	mov    edx,esi
c001e3f2:	0f b7 c2             	movzx  eax,dx
c001e3f5:	83 e2 01             	and    edx,0x1
c001e3f8:	74 16                	je     c001e410 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001e3fa:	d1 f8                	sar    eax,1
c001e3fc:	41                   	inc    ecx
c001e3fd:	89 c2                	mov    edx,eax
c001e3ff:	83 f9 10             	cmp    ecx,0x10
c001e402:	75 ee                	jne    c001e3f2 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001e404:	83 c4 1c             	add    esp,0x1c
c001e407:	31 db                	xor    ebx,ebx
c001e409:	89 d8                	mov    eax,ebx
c001e40b:	5b                   	pop    ebx
c001e40c:	5e                   	pop    esi
c001e40d:	5f                   	pop    edi
c001e40e:	5d                   	pop    ebp
c001e40f:	c3                   	ret    
c001e410:	b8 01 00 00 00       	mov    eax,0x1
c001e415:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e418:	d3 e0                	shl    eax,cl
c001e41a:	09 c6                	or     esi,eax
c001e41c:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001e41f:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001e426:	89 c6                	mov    esi,eax
c001e428:	c1 e6 05             	shl    esi,0x5
c001e42b:	01 f0                	add    eax,esi
c001e42d:	01 d8                	add    eax,ebx
c001e42f:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001e436:	75 0a                	jne    c001e442 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001e438:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001e442:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e448:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e44c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001e44f:	01 ca                	add    edx,ecx
c001e451:	83 ec 08             	sub    esp,0x8
c001e454:	89 d0                	mov    eax,edx
c001e456:	c1 e0 05             	shl    eax,0x5
c001e459:	01 d0                	add    eax,edx
c001e45b:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001e45f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e463:	01 d8                	add    eax,ebx
c001e465:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001e46b:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001e471:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001e477:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001e47d:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e483:	89 cd                	mov    ebp,ecx
c001e485:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001e489:	f7 dd                	neg    ebp
c001e48b:	c1 e5 15             	shl    ebp,0x15
c001e48e:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001e494:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001e49a:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e4a4:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001e4aa:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e4b4:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e4be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e4c2:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001e4c9:	53                   	push   ebx
c001e4ca:	68 c4 25 03 c0       	push   0xc00325c4
c001e4cf:	e8 f8 af 00 00       	call   c00294cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e4d4:	89 d8                	mov    eax,ebx
c001e4d6:	83 c4 10             	add    esp,0x10
c001e4d9:	83 c4 1c             	add    esp,0x1c
c001e4dc:	5b                   	pop    ebx
c001e4dd:	5e                   	pop    esi
c001e4de:	5f                   	pop    edi
c001e4df:	5d                   	pop    ebp
c001e4e0:	c3                   	ret    
c001e4e1:	90                   	nop

c001e4e2 <Process::createUserThread()>:
c001e4e2:	83 ec 0c             	sub    esp,0xc
c001e4e5:	68 80 00 00 00       	push   0x80
c001e4ea:	6a 00                	push   0x0
c001e4ec:	68 a6 de 01 c0       	push   0xc001dea6
c001e4f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e4f5:	e8 e2 fe ff ff       	call   c001e3dc <Process::createThread(void (*)(void*), void*, int)>
c001e4fa:	83 c4 1c             	add    esp,0x1c
c001e4fd:	c3                   	ret    

c001e4fe <setupMultitasking(void (*)())>:
c001e4fe:	56                   	push   esi
c001e4ff:	53                   	push   ebx
c001e500:	51                   	push   ecx
c001e501:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e505:	eb 10                	jmp    c001e517 <setupMultitasking(void (*)())+0x19>
c001e507:	83 ec 0c             	sub    esp,0xc
c001e50a:	68 c4 25 03 c0       	push   0xc00325c4
c001e50f:	e8 0a af 00 00       	call   c002941e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e514:	83 c4 10             	add    esp,0x10
c001e517:	83 ec 0c             	sub    esp,0xc
c001e51a:	68 c4 25 03 c0       	push   0xc00325c4
c001e51f:	e8 d6 ae 00 00       	call   c00293fa <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e524:	83 c4 10             	add    esp,0x10
c001e527:	84 c0                	test   al,al
c001e529:	74 dc                	je     c001e507 <setupMultitasking(void (*)())+0x9>
c001e52b:	83 ec 0c             	sub    esp,0xc
c001e52e:	68 3f 07 00 00       	push   0x73f
c001e533:	e8 a2 13 ff ff       	call   c000f8da <malloc>
c001e538:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e53f:	89 c3                	mov    ebx,eax
c001e541:	6a 00                	push   0x0
c001e543:	68 d3 cd 02 c0       	push   0xc002cdd3
c001e548:	6a 01                	push   0x1
c001e54a:	50                   	push   eax
c001e54b:	e8 94 fc ff ff       	call   c001e1e4 <Process::Process(bool, char const*, Process*, char**)>
c001e550:	83 c4 18             	add    esp,0x18
c001e553:	89 1d d0 25 03 c0    	mov    DWORD PTR ds:0xc00325d0,ebx
c001e559:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e55f:	68 24 cf 02 c0       	push   0xc002cf24
c001e564:	e8 1c 49 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001e569:	58                   	pop    eax
c001e56a:	5a                   	pop    edx
c001e56b:	6a 63                	push   0x63
c001e56d:	68 58 cf 02 c0       	push   0xc002cf58
c001e572:	e8 0e 49 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001e577:	59                   	pop    ecx
c001e578:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e57e:	e8 25 27 ff ff       	call   c0010ca8 <setActiveTerminal(VgaText*)>
c001e583:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e58b:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001e595:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e59b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e59e:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e5a8:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e5ae:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e5b4:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e5be:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e5c8:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e5d2:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e5d8:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e5e2:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e5e8:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e5f2:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e5f8:	58                   	pop    eax
c001e5f9:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e5ff:	5a                   	pop    edx
c001e600:	68 cf cd 02 c0       	push   0xc002cdcf
c001e605:	50                   	push   eax
c001e606:	e8 1d 22 fe ff       	call   c0000828 <strcpy>
c001e60b:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e612:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e616:	83 c4 14             	add    esp,0x14
c001e619:	5b                   	pop    ebx
c001e61a:	5e                   	pop    esi
c001e61b:	e9 34 1d fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e620 <schedule()>:
c001e620:	a1 a4 25 03 c0       	mov    eax,ds:0xc00325a4
c001e625:	85 c0                	test   eax,eax
c001e627:	74 0b                	je     c001e634 <schedule()+0x14>
c001e629:	c7 05 a0 25 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00325a0,0x1
c001e633:	c3                   	ret    
c001e634:	53                   	push   ebx
c001e635:	83 ec 14             	sub    esp,0x14
c001e638:	68 c4 25 03 c0       	push   0xc00325c4
c001e63d:	e8 b8 ad 00 00       	call   c00293fa <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e642:	83 c4 10             	add    esp,0x10
c001e645:	84 c0                	test   al,al
c001e647:	75 38                	jne    c001e681 <schedule()+0x61>
c001e649:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e64e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e651:	4a                   	dec    edx
c001e652:	74 32                	je     c001e686 <schedule()+0x66>
c001e654:	83 ec 0c             	sub    esp,0xc
c001e657:	68 c4 25 03 c0       	push   0xc00325c4
c001e65c:	e8 b5 ad 00 00       	call   c0029416 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e661:	c7 04 24 c4 25 03 c0 	mov    DWORD PTR [esp],0xc00325c4
c001e668:	89 c3                	mov    ebx,eax
c001e66a:	e8 af ad 00 00       	call   c002941e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e66f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e676:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e679:	e8 7e f8 ff ff       	call   c001defc <switchToThread(ThreadControlBlock*)>
c001e67e:	83 c4 10             	add    esp,0x10
c001e681:	83 c4 08             	add    esp,0x8
c001e684:	5b                   	pop    ebx
c001e685:	c3                   	ret    
c001e686:	83 ec 08             	sub    esp,0x8
c001e689:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e690:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e696:	68 c4 25 03 c0       	push   0xc00325c4
c001e69b:	e8 2c ae 00 00       	call   c00294cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e6a0:	83 c4 10             	add    esp,0x10
c001e6a3:	eb af                	jmp    c001e654 <schedule()+0x34>
c001e6a5:	90                   	nop

c001e6a6 <Semaphore::tryAcquire()>:
c001e6a6:	53                   	push   ebx
c001e6a7:	83 ec 08             	sub    esp,0x8
c001e6aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e6ae:	fa                   	cli    
c001e6af:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c001e6b4:	8d 50 01             	lea    edx,[eax+0x1]
c001e6b7:	89 15 a8 25 03 c0    	mov    DWORD PTR ds:0xc00325a8,edx
c001e6bd:	8b 15 a4 25 03 c0    	mov    edx,DWORD PTR ds:0xc00325a4
c001e6c3:	8d 5a 01             	lea    ebx,[edx+0x1]
c001e6c6:	89 1d a4 25 03 c0    	mov    DWORD PTR ds:0xc00325a4,ebx
c001e6cc:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001e6cf:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001e6d1:	7c 2a                	jl     c001e6fd <Semaphore::tryAcquire()+0x57>
c001e6d3:	89 15 a4 25 03 c0    	mov    DWORD PTR ds:0xc00325a4,edx
c001e6d9:	85 d2                	test   edx,edx
c001e6db:	75 0a                	jne    c001e6e7 <Semaphore::tryAcquire()+0x41>
c001e6dd:	8b 15 a0 25 03 c0    	mov    edx,DWORD PTR ds:0xc00325a0
c001e6e3:	85 d2                	test   edx,edx
c001e6e5:	75 5b                	jne    c001e742 <Semaphore::tryAcquire()+0x9c>
c001e6e7:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c001e6ec:	85 c0                	test   eax,eax
c001e6ee:	74 07                	je     c001e6f7 <Semaphore::tryAcquire()+0x51>
c001e6f0:	31 c0                	xor    eax,eax
c001e6f2:	83 c4 08             	add    esp,0x8
c001e6f5:	5b                   	pop    ebx
c001e6f6:	c3                   	ret    
c001e6f7:	fb                   	sti    
c001e6f8:	83 c4 08             	add    esp,0x8
c001e6fb:	5b                   	pop    ebx
c001e6fc:	c3                   	ret    
c001e6fd:	43                   	inc    ebx
c001e6fe:	89 15 a4 25 03 c0    	mov    DWORD PTR ds:0xc00325a4,edx
c001e704:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001e707:	85 d2                	test   edx,edx
c001e709:	75 1f                	jne    c001e72a <Semaphore::tryAcquire()+0x84>
c001e70b:	8b 0d a0 25 03 c0    	mov    ecx,DWORD PTR ds:0xc00325a0
c001e711:	85 c9                	test   ecx,ecx
c001e713:	74 15                	je     c001e72a <Semaphore::tryAcquire()+0x84>
c001e715:	c7 05 a0 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325a0,0x0
c001e71f:	e8 fc fe ff ff       	call   c001e620 <schedule()>
c001e724:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c001e729:	48                   	dec    eax
c001e72a:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c001e72f:	85 c0                	test   eax,eax
c001e731:	75 08                	jne    c001e73b <Semaphore::tryAcquire()+0x95>
c001e733:	fb                   	sti    
c001e734:	b0 01                	mov    al,0x1
c001e736:	83 c4 08             	add    esp,0x8
c001e739:	5b                   	pop    ebx
c001e73a:	c3                   	ret    
c001e73b:	b0 01                	mov    al,0x1
c001e73d:	83 c4 08             	add    esp,0x8
c001e740:	5b                   	pop    ebx
c001e741:	c3                   	ret    
c001e742:	c7 05 a0 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325a0,0x0
c001e74c:	e8 cf fe ff ff       	call   c001e620 <schedule()>
c001e751:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c001e756:	48                   	dec    eax
c001e757:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c001e75c:	85 c0                	test   eax,eax
c001e75e:	75 90                	jne    c001e6f0 <Semaphore::tryAcquire()+0x4a>
c001e760:	eb 95                	jmp    c001e6f7 <Semaphore::tryAcquire()+0x51>

c001e762 <Semaphore::assertLocked(char const*)>:
c001e762:	83 ec 0c             	sub    esp,0xc
c001e765:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e769:	fa                   	cli    
c001e76a:	ff 05 a8 25 03 c0    	inc    DWORD PTR ds:0xc00325a8
c001e770:	a1 a4 25 03 c0       	mov    eax,ds:0xc00325a4
c001e775:	8d 48 01             	lea    ecx,[eax+0x1]
c001e778:	89 0d a4 25 03 c0    	mov    DWORD PTR ds:0xc00325a4,ecx
c001e77e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001e780:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001e783:	7c 24                	jl     c001e7a9 <Semaphore::assertLocked(char const*)+0x47>
c001e785:	a3 a4 25 03 c0       	mov    ds:0xc00325a4,eax
c001e78a:	85 c0                	test   eax,eax
c001e78c:	75 09                	jne    c001e797 <Semaphore::assertLocked(char const*)+0x35>
c001e78e:	a1 a0 25 03 c0       	mov    eax,ds:0xc00325a0
c001e793:	85 c0                	test   eax,eax
c001e795:	75 29                	jne    c001e7c0 <Semaphore::assertLocked(char const*)+0x5e>
c001e797:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c001e79c:	48                   	dec    eax
c001e79d:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c001e7a2:	75 01                	jne    c001e7a5 <Semaphore::assertLocked(char const*)+0x43>
c001e7a4:	fb                   	sti    
c001e7a5:	83 c4 0c             	add    esp,0xc
c001e7a8:	c3                   	ret    
c001e7a9:	83 ec 0c             	sub    esp,0xc
c001e7ac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e7b0:	e8 b8 c0 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c001e7b5:	a1 a4 25 03 c0       	mov    eax,ds:0xc00325a4
c001e7ba:	83 c4 10             	add    esp,0x10
c001e7bd:	48                   	dec    eax
c001e7be:	eb c5                	jmp    c001e785 <Semaphore::assertLocked(char const*)+0x23>
c001e7c0:	c7 05 a0 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325a0,0x0
c001e7ca:	e8 51 fe ff ff       	call   c001e620 <schedule()>
c001e7cf:	eb c6                	jmp    c001e797 <Semaphore::assertLocked(char const*)+0x35>

c001e7d1 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e7d1:	83 ec 14             	sub    esp,0x14
c001e7d4:	ff 35 a8 25 03 c0    	push   DWORD PTR ds:0xc00325a8
c001e7da:	68 7c cf 02 c0       	push   0xc002cf7c
c001e7df:	e8 a1 46 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001e7e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7e9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e7ed:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e7f0:	e8 2b fe ff ff       	call   c001e620 <schedule()>
c001e7f5:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c001e7fa:	83 c4 10             	add    esp,0x10
c001e7fd:	48                   	dec    eax
c001e7fe:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c001e803:	85 c0                	test   eax,eax
c001e805:	75 06                	jne    c001e80d <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x3c>
c001e807:	fb                   	sti    
c001e808:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c001e80d:	83 ec 08             	sub    esp,0x8
c001e810:	50                   	push   eax
c001e811:	68 b0 cf 02 c0       	push   0xc002cfb0
c001e816:	e8 6a 46 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001e81b:	83 c4 1c             	add    esp,0x1c
c001e81e:	c3                   	ret    

c001e81f <blockTask(TaskState)>:
c001e81f:	83 ec 0c             	sub    esp,0xc
c001e822:	fa                   	cli    
c001e823:	ff 05 a8 25 03 c0    	inc    DWORD PTR ds:0xc00325a8
c001e829:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e82d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e832:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e835:	e8 e6 fd ff ff       	call   c001e620 <schedule()>
c001e83a:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c001e83f:	48                   	dec    eax
c001e840:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c001e845:	75 01                	jne    c001e848 <blockTask(TaskState)+0x29>
c001e847:	fb                   	sti    
c001e848:	83 c4 0c             	add    esp,0xc
c001e84b:	c3                   	ret    

c001e84c <waitTask(int, int*, int)>:
c001e84c:	83 ec 18             	sub    esp,0x18
c001e84f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e854:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e858:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e85b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e85f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e864:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e867:	6a 07                	push   0x7
c001e869:	e8 b1 ff ff ff       	call   c001e81f <blockTask(TaskState)>
c001e86e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e873:	83 c4 10             	add    esp,0x10
c001e876:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e879:	85 d2                	test   edx,edx
c001e87b:	74 0a                	je     c001e887 <waitTask(int, int*, int)+0x3b>
c001e87d:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e880:	89 02                	mov    DWORD PTR [edx],eax
c001e882:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e887:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e88a:	83 c4 0c             	add    esp,0xc
c001e88d:	c3                   	ret    

c001e88e <nanoSleepUntil(unsigned long long)>:
c001e88e:	83 ec 0c             	sub    esp,0xc
c001e891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e895:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e899:	3b 05 f0 f6 02 c0    	cmp    eax,DWORD PTR ds:0xc002f6f0
c001e89f:	89 d1                	mov    ecx,edx
c001e8a1:	1b 0d f4 f6 02 c0    	sbb    ecx,DWORD PTR ds:0xc002f6f4
c001e8a7:	73 04                	jae    c001e8ad <nanoSleepUntil(unsigned long long)+0x1f>
c001e8a9:	83 c4 0c             	add    esp,0xc
c001e8ac:	c3                   	ret    
c001e8ad:	fa                   	cli    
c001e8ae:	ff 05 a8 25 03 c0    	inc    DWORD PTR ds:0xc00325a8
c001e8b4:	83 ec 08             	sub    esp,0x8
c001e8b7:	ff 05 a4 25 03 c0    	inc    DWORD PTR ds:0xc00325a4
c001e8bd:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e8c3:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e8c6:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e8c9:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e8cf:	68 b8 25 03 c0       	push   0xc00325b8
c001e8d4:	e8 f3 ab 00 00       	call   c00294cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e8d9:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e8e0:	e8 3a ff ff ff       	call   c001e81f <blockTask(TaskState)>
c001e8e5:	a1 a4 25 03 c0       	mov    eax,ds:0xc00325a4
c001e8ea:	83 c4 10             	add    esp,0x10
c001e8ed:	48                   	dec    eax
c001e8ee:	a3 a4 25 03 c0       	mov    ds:0xc00325a4,eax
c001e8f3:	85 c0                	test   eax,eax
c001e8f5:	75 09                	jne    c001e900 <nanoSleepUntil(unsigned long long)+0x72>
c001e8f7:	a1 a0 25 03 c0       	mov    eax,ds:0xc00325a0
c001e8fc:	85 c0                	test   eax,eax
c001e8fe:	75 12                	jne    c001e912 <nanoSleepUntil(unsigned long long)+0x84>
c001e900:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c001e905:	48                   	dec    eax
c001e906:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c001e90b:	75 9c                	jne    c001e8a9 <nanoSleepUntil(unsigned long long)+0x1b>
c001e90d:	fb                   	sti    
c001e90e:	83 c4 0c             	add    esp,0xc
c001e911:	c3                   	ret    
c001e912:	c7 05 a0 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325a0,0x0
c001e91c:	e8 ff fc ff ff       	call   c001e620 <schedule()>
c001e921:	eb dd                	jmp    c001e900 <nanoSleepUntil(unsigned long long)+0x72>

c001e923 <nanoSleep(unsigned long long)>:
c001e923:	a1 f0 f6 02 c0       	mov    eax,ds:0xc002f6f0
c001e928:	8b 15 f4 f6 02 c0    	mov    edx,DWORD PTR ds:0xc002f6f4
c001e92e:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e932:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e936:	e9 53 ff ff ff       	jmp    c001e88e <nanoSleepUntil(unsigned long long)>

c001e93b <sleep(unsigned long long)>:
c001e93b:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e943:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e948:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e94c:	01 ca                	add    edx,ecx
c001e94e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e952:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e956:	eb cb                	jmp    c001e923 <nanoSleep(unsigned long long)>

c001e958 <Semaphore::acquire()>:
c001e958:	83 ec 0c             	sub    esp,0xc
c001e95b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e95f:	fa                   	cli    
c001e960:	a1 a4 25 03 c0       	mov    eax,ds:0xc00325a4
c001e965:	ff 05 a8 25 03 c0    	inc    DWORD PTR ds:0xc00325a8
c001e96b:	8d 48 01             	lea    ecx,[eax+0x1]
c001e96e:	89 0d a4 25 03 c0    	mov    DWORD PTR ds:0xc00325a4,ecx
c001e974:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001e977:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001e979:	7d 28                	jge    c001e9a3 <Semaphore::acquire()+0x4b>
c001e97b:	41                   	inc    ecx
c001e97c:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001e97f:	a3 a4 25 03 c0       	mov    ds:0xc00325a4,eax
c001e984:	85 c0                	test   eax,eax
c001e986:	75 09                	jne    c001e991 <Semaphore::acquire()+0x39>
c001e988:	a1 a0 25 03 c0       	mov    eax,ds:0xc00325a0
c001e98d:	85 c0                	test   eax,eax
c001e98f:	75 4e                	jne    c001e9df <Semaphore::acquire()+0x87>
c001e991:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c001e996:	48                   	dec    eax
c001e997:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c001e99c:	75 01                	jne    c001e99f <Semaphore::acquire()+0x47>
c001e99e:	fb                   	sti    
c001e99f:	83 c4 0c             	add    esp,0xc
c001e9a2:	c3                   	ret    
c001e9a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e9a8:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e9af:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e9b2:	85 c9                	test   ecx,ecx
c001e9b4:	74 3a                	je     c001e9f0 <Semaphore::acquire()+0x98>
c001e9b6:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001e9b9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e9bf:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001e9c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e9c7:	83 ec 0c             	sub    esp,0xc
c001e9ca:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001e9cd:	6a 05                	push   0x5
c001e9cf:	e8 4b fe ff ff       	call   c001e81f <blockTask(TaskState)>
c001e9d4:	a1 a4 25 03 c0       	mov    eax,ds:0xc00325a4
c001e9d9:	83 c4 10             	add    esp,0x10
c001e9dc:	48                   	dec    eax
c001e9dd:	eb a0                	jmp    c001e97f <Semaphore::acquire()+0x27>
c001e9df:	c7 05 a0 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325a0,0x0
c001e9e9:	e8 32 fc ff ff       	call   c001e620 <schedule()>
c001e9ee:	eb a1                	jmp    c001e991 <Semaphore::acquire()+0x39>
c001e9f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e9f5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e9f8:	eb c8                	jmp    c001e9c2 <Semaphore::acquire()+0x6a>

c001e9fa <taskReturned>:
c001e9fa:	83 ec 18             	sub    esp,0x18
c001e9fd:	68 e4 cf 02 c0       	push   0xc002cfe4
c001ea02:	e8 66 be ff ff       	call   c001a86d <Krnl::panic(char const*)>
c001ea07:	83 c4 10             	add    esp,0x10
c001ea0a:	83 ec 0c             	sub    esp,0xc
c001ea0d:	6a 02                	push   0x2
c001ea0f:	e8 0b fe ff ff       	call   c001e81f <blockTask(TaskState)>
c001ea14:	fa                   	cli    
c001ea15:	ff 05 a8 25 03 c0    	inc    DWORD PTR ds:0xc00325a8
c001ea1b:	e8 00 fc ff ff       	call   c001e620 <schedule()>
c001ea20:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c001ea25:	83 c4 10             	add    esp,0x10
c001ea28:	48                   	dec    eax
c001ea29:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c001ea2e:	85 c0                	test   eax,eax
c001ea30:	75 d8                	jne    c001ea0a <taskReturned+0x10>
c001ea32:	fb                   	sti    
c001ea33:	eb d5                	jmp    c001ea0a <taskReturned+0x10>

c001ea35 <Thr::processFromPID(int)>:
c001ea35:	57                   	push   edi
c001ea36:	56                   	push   esi
c001ea37:	53                   	push   ebx
c001ea38:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ea3c:	83 ec 0c             	sub    esp,0xc
c001ea3f:	68 da cd 02 c0       	push   0xc002cdda
c001ea44:	e8 3c 44 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001ea49:	fa                   	cli    
c001ea4a:	ff 05 a8 25 03 c0    	inc    DWORD PTR ds:0xc00325a8
c001ea50:	c7 04 24 c4 25 03 c0 	mov    DWORD PTR [esp],0xc00325c4
c001ea57:	e8 ba a9 00 00       	call   c0029416 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ea5c:	83 c4 10             	add    esp,0x10
c001ea5f:	89 c7                	mov    edi,eax
c001ea61:	eb 14                	jmp    c001ea77 <Thr::processFromPID(int)+0x42>
c001ea63:	83 ec 0c             	sub    esp,0xc
c001ea66:	68 c4 25 03 c0       	push   0xc00325c4
c001ea6b:	e8 a6 a9 00 00       	call   c0029416 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ea70:	83 c4 10             	add    esp,0x10
c001ea73:	39 f8                	cmp    eax,edi
c001ea75:	74 49                	je     c001eac0 <Thr::processFromPID(int)+0x8b>
c001ea77:	83 ec 0c             	sub    esp,0xc
c001ea7a:	68 c4 25 03 c0       	push   0xc00325c4
c001ea7f:	e8 92 a9 00 00       	call   c0029416 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ea84:	c7 04 24 c4 25 03 c0 	mov    DWORD PTR [esp],0xc00325c4
c001ea8b:	89 c3                	mov    ebx,eax
c001ea8d:	e8 8c a9 00 00       	call   c002941e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ea92:	58                   	pop    eax
c001ea93:	5a                   	pop    edx
c001ea94:	53                   	push   ebx
c001ea95:	68 c4 25 03 c0       	push   0xc00325c4
c001ea9a:	e8 2d aa 00 00       	call   c00294cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ea9f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eaa2:	83 c4 10             	add    esp,0x10
c001eaa5:	39 30                	cmp    DWORD PTR [eax],esi
c001eaa7:	75 ba                	jne    c001ea63 <Thr::processFromPID(int)+0x2e>
c001eaa9:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c001eaae:	48                   	dec    eax
c001eaaf:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c001eab4:	74 07                	je     c001eabd <Thr::processFromPID(int)+0x88>
c001eab6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eab9:	5b                   	pop    ebx
c001eaba:	5e                   	pop    esi
c001eabb:	5f                   	pop    edi
c001eabc:	c3                   	ret    
c001eabd:	fb                   	sti    
c001eabe:	eb f6                	jmp    c001eab6 <Thr::processFromPID(int)+0x81>
c001eac0:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c001eac5:	48                   	dec    eax
c001eac6:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c001eacb:	75 01                	jne    c001eace <Thr::processFromPID(int)+0x99>
c001eacd:	fb                   	sti    
c001eace:	83 ec 0c             	sub    esp,0xc
c001ead1:	68 f5 cd 02 c0       	push   0xc002cdf5
c001ead6:	e8 aa 43 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001eadb:	83 c4 10             	add    esp,0x10
c001eade:	31 c0                	xor    eax,eax
c001eae0:	5b                   	pop    ebx
c001eae1:	5e                   	pop    esi
c001eae2:	5f                   	pop    edi
c001eae3:	c3                   	ret    

c001eae4 <unblockTask(ThreadControlBlock*)>:
c001eae4:	53                   	push   ebx
c001eae5:	83 ec 08             	sub    esp,0x8
c001eae8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eaec:	fa                   	cli    
c001eaed:	ff 05 a8 25 03 c0    	inc    DWORD PTR ds:0xc00325a8
c001eaf3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001eaf6:	85 c0                	test   eax,eax
c001eaf8:	74 66                	je     c001eb60 <unblockTask(ThreadControlBlock*)+0x7c>
c001eafa:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001eafd:	48                   	dec    eax
c001eafe:	74 31                	je     c001eb31 <unblockTask(ThreadControlBlock*)+0x4d>
c001eb00:	83 ec 0c             	sub    esp,0xc
c001eb03:	68 c4 25 03 c0       	push   0xc00325c4
c001eb08:	e8 09 a9 00 00       	call   c0029416 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eb0d:	83 c4 10             	add    esp,0x10
c001eb10:	85 c0                	test   eax,eax
c001eb12:	75 17                	jne    c001eb2b <unblockTask(ThreadControlBlock*)+0x47>
c001eb14:	eb 68                	jmp    c001eb7e <unblockTask(ThreadControlBlock*)+0x9a>
c001eb16:	83 ec 08             	sub    esp,0x8
c001eb19:	50                   	push   eax
c001eb1a:	68 c4 25 03 c0       	push   0xc00325c4
c001eb1f:	e8 90 ac 00 00       	call   c00297b4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001eb24:	83 c4 10             	add    esp,0x10
c001eb27:	85 c0                	test   eax,eax
c001eb29:	74 53                	je     c001eb7e <unblockTask(ThreadControlBlock*)+0x9a>
c001eb2b:	39 c3                	cmp    ebx,eax
c001eb2d:	75 e7                	jne    c001eb16 <unblockTask(ThreadControlBlock*)+0x32>
c001eb2f:	eb 1c                	jmp    c001eb4d <unblockTask(ThreadControlBlock*)+0x69>
c001eb31:	83 ec 0c             	sub    esp,0xc
c001eb34:	68 d4 d0 02 c0       	push   0xc002d0d4
c001eb39:	e8 47 43 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001eb3e:	c7 04 24 60 d0 02 c0 	mov    DWORD PTR [esp],0xc002d060
c001eb45:	e8 3b 43 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001eb4a:	83 c4 10             	add    esp,0x10
c001eb4d:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c001eb52:	48                   	dec    eax
c001eb53:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c001eb58:	75 01                	jne    c001eb5b <unblockTask(ThreadControlBlock*)+0x77>
c001eb5a:	fb                   	sti    
c001eb5b:	83 c4 08             	add    esp,0x8
c001eb5e:	5b                   	pop    ebx
c001eb5f:	c3                   	ret    
c001eb60:	83 ec 0c             	sub    esp,0xc
c001eb63:	68 18 d0 02 c0       	push   0xc002d018
c001eb68:	e8 18 43 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001eb6d:	c7 04 24 60 d0 02 c0 	mov    DWORD PTR [esp],0xc002d060
c001eb74:	e8 0c 43 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001eb79:	83 c4 10             	add    esp,0x10
c001eb7c:	eb cf                	jmp    c001eb4d <unblockTask(ThreadControlBlock*)+0x69>
c001eb7e:	83 ec 08             	sub    esp,0x8
c001eb81:	53                   	push   ebx
c001eb82:	68 c4 25 03 c0       	push   0xc00325c4
c001eb87:	e8 40 a9 00 00       	call   c00294cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001eb8c:	83 c4 10             	add    esp,0x10
c001eb8f:	eb bc                	jmp    c001eb4d <unblockTask(ThreadControlBlock*)+0x69>

c001eb91 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001eb91:	55                   	push   ebp
c001eb92:	57                   	push   edi
c001eb93:	56                   	push   esi
c001eb94:	53                   	push   ebx
c001eb95:	83 ec 1c             	sub    esp,0x1c
c001eb98:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001eb9c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eb9f:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001eba5:	85 ff                	test   edi,edi
c001eba7:	7e 20                	jle    c001ebc9 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001eba9:	31 f6                	xor    esi,esi
c001ebab:	83 ec 0c             	sub    esp,0xc
c001ebae:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001ebb5:	46                   	inc    esi
c001ebb6:	e8 2f 0d ff ff       	call   c000f8ea <free>
c001ebbb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ebbe:	83 c4 10             	add    esp,0x10
c001ebc1:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001ebc7:	7f e2                	jg     c001ebab <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001ebc9:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001ebd3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ebd8:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001ebdb:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001ebde:	d3 c0                	rol    eax,cl
c001ebe0:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001ebe7:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ebea:	89 f7                	mov    edi,esi
c001ebec:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001ebf4:	0f 85 74 01 00 00    	jne    c001ed6e <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001ebfa:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001ec00:	85 ed                	test   ebp,ebp
c001ec02:	74 1b                	je     c001ec1f <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001ec04:	83 ec 0c             	sub    esp,0xc
c001ec07:	55                   	push   ebp
c001ec08:	e8 d5 b9 ff ff       	call   c001a5e2 <EnvVarContainer::~EnvVarContainer()>
c001ec0d:	59                   	pop    ecx
c001ec0e:	5e                   	pop    esi
c001ec0f:	6a 0c                	push   0xc
c001ec11:	55                   	push   ebp
c001ec12:	e8 8e 41 ff ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c001ec17:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ec1a:	83 c4 10             	add    esp,0x10
c001ec1d:	89 f7                	mov    edi,esi
c001ec1f:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ec25:	85 c0                	test   eax,eax
c001ec27:	0f 84 aa 00 00 00    	je     c001ecd7 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001ec2d:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001ec30:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ec34:	31 c9                	xor    ecx,ecx
c001ec36:	eb 10                	jmp    c001ec48 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001ec38:	41                   	inc    ecx
c001ec39:	83 f9 10             	cmp    ecx,0x10
c001ec3c:	0f 84 95 00 00 00    	je     c001ecd7 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001ec42:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ec48:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001ec4f:	d3 fa                	sar    edx,cl
c001ec51:	83 e2 01             	and    edx,0x1
c001ec54:	74 e2                	je     c001ec38 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ec56:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001ec59:	01 ca                	add    edx,ecx
c001ec5b:	89 d5                	mov    ebp,edx
c001ec5d:	c1 e5 05             	shl    ebp,0x5
c001ec60:	01 ea                	add    edx,ebp
c001ec62:	01 d0                	add    eax,edx
c001ec64:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001ec6a:	83 fd 07             	cmp    ebp,0x7
c001ec6d:	75 c9                	jne    c001ec38 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ec6f:	05 40 02 00 00       	add    eax,0x240
c001ec74:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001ec77:	83 fd ff             	cmp    ebp,0xffffffff
c001ec7a:	0f 8c 08 01 00 00    	jl     c001ed88 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001ec80:	0f 84 b9 01 00 00    	je     c001ee3f <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001ec86:	85 ed                	test   ebp,ebp
c001ec88:	0f 84 a0 01 00 00    	je     c001ee2e <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001ec8e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001ec90:	75 a6                	jne    c001ec38 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ec92:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ec98:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ec9c:	01 d0                	add    eax,edx
c001ec9e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001eca2:	83 ec 0c             	sub    esp,0xc
c001eca5:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001ecab:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ecae:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ecb4:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001ecbb:	50                   	push   eax
c001ecbc:	e8 23 fe ff ff       	call   c001eae4 <unblockTask(ThreadControlBlock*)>
c001ecc1:	83 c4 10             	add    esp,0x10
c001ecc4:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ecc7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eccb:	89 f7                	mov    edi,esi
c001eccd:	41                   	inc    ecx
c001ecce:	83 f9 10             	cmp    ecx,0x10
c001ecd1:	0f 85 6b ff ff ff    	jne    c001ec42 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001ecd7:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001ecdd:	85 c0                	test   eax,eax
c001ecdf:	74 5d                	je     c001ed3e <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001ece1:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001ece7:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001eced:	74 4f                	je     c001ed3e <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001ecef:	83 ec 0c             	sub    esp,0xc
c001ecf2:	68 c4 25 03 c0       	push   0xc00325c4
c001ecf7:	e8 1a a7 00 00       	call   c0029416 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ecfc:	c7 04 24 c4 25 03 c0 	mov    DWORD PTR [esp],0xc00325c4
c001ed03:	89 c7                	mov    edi,eax
c001ed05:	e8 f0 a6 00 00       	call   c00293fa <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ed0a:	83 c4 10             	add    esp,0x10
c001ed0d:	84 c0                	test   al,al
c001ed0f:	0f 84 e4 00 00 00    	je     c001edf9 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001ed15:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ed18:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ed1e:	85 d2                	test   edx,edx
c001ed20:	74 0f                	je     c001ed31 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001ed22:	83 ec 0c             	sub    esp,0xc
c001ed25:	8b 02                	mov    eax,DWORD PTR [edx]
c001ed27:	52                   	push   edx
c001ed28:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ed2b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ed2e:	83 c4 10             	add    esp,0x10
c001ed31:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001ed3b:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001ed3e:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001ed44:	85 db                	test   ebx,ebx
c001ed46:	74 16                	je     c001ed5e <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001ed48:	83 ec 0c             	sub    esp,0xc
c001ed4b:	53                   	push   ebx
c001ed4c:	e8 e9 33 ff ff       	call   c001213a <VAS::~VAS()>
c001ed51:	58                   	pop    eax
c001ed52:	5a                   	pop    edx
c001ed53:	6a 14                	push   0x14
c001ed55:	53                   	push   ebx
c001ed56:	e8 4a 40 ff ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c001ed5b:	83 c4 10             	add    esp,0x10
c001ed5e:	83 ec 0c             	sub    esp,0xc
c001ed61:	68 0c ce 02 c0       	push   0xc002ce0c
c001ed66:	e8 1a 41 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001ed6b:	83 c4 10             	add    esp,0x10
c001ed6e:	83 ec 08             	sub    esp,0x8
c001ed71:	68 3f 07 00 00       	push   0x73f
c001ed76:	68 1a ce 02 c0       	push   0xc002ce1a
c001ed7b:	e8 05 41 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001ed80:	83 c4 2c             	add    esp,0x2c
c001ed83:	5b                   	pop    ebx
c001ed84:	5e                   	pop    esi
c001ed85:	5f                   	pop    edi
c001ed86:	5d                   	pop    ebp
c001ed87:	c3                   	ret    
c001ed88:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ed8c:	83 ec 0c             	sub    esp,0xc
c001ed8f:	68 18 d1 02 c0       	push   0xc002d118
c001ed94:	e8 d4 ba ff ff       	call   c001a86d <Krnl::panic(char const*)>
c001ed99:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ed9c:	83 c4 10             	add    esp,0x10
c001ed9f:	89 f7                	mov    edi,esi
c001eda1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eda5:	e9 8e fe ff ff       	jmp    c001ec38 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001edaa:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001edb0:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001edb6:	75 1c                	jne    c001edd4 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001edb8:	83 ec 0c             	sub    esp,0xc
c001edbb:	68 80 d1 02 c0       	push   0xc002d180
c001edc0:	e8 c0 40 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001edc5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001edcc:	e8 4e fa ff ff       	call   c001e81f <blockTask(TaskState)>
c001edd1:	83 c4 10             	add    esp,0x10
c001edd4:	83 ec 08             	sub    esp,0x8
c001edd7:	56                   	push   esi
c001edd8:	68 c4 25 03 c0       	push   0xc00325c4
c001eddd:	e8 ea a6 00 00       	call   c00294cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ede2:	c7 04 24 c4 25 03 c0 	mov    DWORD PTR [esp],0xc00325c4
c001ede9:	e8 28 a6 00 00       	call   c0029416 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001edee:	83 c4 10             	add    esp,0x10
c001edf1:	39 f8                	cmp    eax,edi
c001edf3:	0f 84 1c ff ff ff    	je     c001ed15 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001edf9:	83 ec 0c             	sub    esp,0xc
c001edfc:	68 c4 25 03 c0       	push   0xc00325c4
c001ee01:	e8 10 a6 00 00       	call   c0029416 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ee06:	c7 04 24 c4 25 03 c0 	mov    DWORD PTR [esp],0xc00325c4
c001ee0d:	89 c6                	mov    esi,eax
c001ee0f:	e8 0a a6 00 00       	call   c002941e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ee14:	83 c4 10             	add    esp,0x10
c001ee17:	39 f3                	cmp    ebx,esi
c001ee19:	74 b9                	je     c001edd4 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ee1b:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001ee1e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ee21:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001ee27:	75 ab                	jne    c001edd4 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ee29:	e9 7c ff ff ff       	jmp    c001edaa <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001ee2e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ee32:	83 ec 0c             	sub    esp,0xc
c001ee35:	68 4c d1 02 c0       	push   0xc002d14c
c001ee3a:	e9 55 ff ff ff       	jmp    c001ed94 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001ee3f:	8b 36                	mov    esi,DWORD PTR [esi]
c001ee41:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ee45:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001ee48:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ee4b:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001ee51:	01 d7                	add    edi,edx
c001ee53:	89 f8                	mov    eax,edi
c001ee55:	e9 44 fe ff ff       	jmp    c001ec9e <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001ee5a <cleanerTaskFunction(void*)>:
c001ee5a:	53                   	push   ebx
c001ee5b:	83 ec 08             	sub    esp,0x8
c001ee5e:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c001ee63:	48                   	dec    eax
c001ee64:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c001ee69:	75 01                	jne    c001ee6c <cleanerTaskFunction(void*)+0x12>
c001ee6b:	fb                   	sti    
c001ee6c:	fa                   	cli    
c001ee6d:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c001ee72:	80 3d 8c 25 03 c0 00 	cmp    BYTE PTR ds:0xc003258c,0x0
c001ee79:	8d 50 01             	lea    edx,[eax+0x1]
c001ee7c:	89 15 a8 25 03 c0    	mov    DWORD PTR ds:0xc00325a8,edx
c001ee82:	0f 84 b9 00 00 00    	je     c001ef41 <cleanerTaskFunction(void*)+0xe7>
c001ee88:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c001ee8d:	85 c0                	test   eax,eax
c001ee8f:	75 01                	jne    c001ee92 <cleanerTaskFunction(void*)+0x38>
c001ee91:	fb                   	sti    
c001ee92:	c6 05 8c 25 03 c0 00 	mov    BYTE PTR ds:0xc003258c,0x0
c001ee99:	fa                   	cli    
c001ee9a:	ff 05 a8 25 03 c0    	inc    DWORD PTR ds:0xc00325a8
c001eea0:	ff 05 a4 25 03 c0    	inc    DWORD PTR ds:0xc00325a4
c001eea6:	fa                   	cli    
c001eea7:	ff 05 a8 25 03 c0    	inc    DWORD PTR ds:0xc00325a8
c001eead:	eb 3e                	jmp    c001eeed <cleanerTaskFunction(void*)+0x93>
c001eeaf:	83 ec 0c             	sub    esp,0xc
c001eeb2:	68 ac 25 03 c0       	push   0xc00325ac
c001eeb7:	e8 5a a5 00 00       	call   c0029416 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eebc:	c7 04 24 ac 25 03 c0 	mov    DWORD PTR [esp],0xc00325ac
c001eec3:	89 c3                	mov    ebx,eax
c001eec5:	e8 54 a5 00 00       	call   c002941e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001eeca:	c7 04 24 30 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce30
c001eed1:	e8 af 3f ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001eed6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001eed9:	e8 b3 fc ff ff       	call   c001eb91 <cleanupTerminatedTask(ThreadControlBlock*)>
c001eede:	c7 04 24 49 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce49
c001eee5:	e8 9b 3f ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001eeea:	83 c4 10             	add    esp,0x10
c001eeed:	83 ec 0c             	sub    esp,0xc
c001eef0:	68 ac 25 03 c0       	push   0xc00325ac
c001eef5:	e8 00 a5 00 00       	call   c00293fa <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001eefa:	83 c4 10             	add    esp,0x10
c001eefd:	84 c0                	test   al,al
c001eeff:	74 ae                	je     c001eeaf <cleanerTaskFunction(void*)+0x55>
c001ef01:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c001ef06:	48                   	dec    eax
c001ef07:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c001ef0c:	75 01                	jne    c001ef0f <cleanerTaskFunction(void*)+0xb5>
c001ef0e:	fb                   	sti    
c001ef0f:	a1 a4 25 03 c0       	mov    eax,ds:0xc00325a4
c001ef14:	48                   	dec    eax
c001ef15:	a3 a4 25 03 c0       	mov    ds:0xc00325a4,eax
c001ef1a:	0f 85 3e ff ff ff    	jne    c001ee5e <cleanerTaskFunction(void*)+0x4>
c001ef20:	a1 a0 25 03 c0       	mov    eax,ds:0xc00325a0
c001ef25:	85 c0                	test   eax,eax
c001ef27:	0f 84 31 ff ff ff    	je     c001ee5e <cleanerTaskFunction(void*)+0x4>
c001ef2d:	c7 05 a0 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325a0,0x0
c001ef37:	e8 e4 f6 ff ff       	call   c001e620 <schedule()>
c001ef3c:	e9 1d ff ff ff       	jmp    c001ee5e <cleanerTaskFunction(void*)+0x4>
c001ef41:	83 ec 0c             	sub    esp,0xc
c001ef44:	6a 02                	push   0x2
c001ef46:	e8 86 f8 ff ff       	call   c001e7d1 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ef4b:	83 c4 10             	add    esp,0x10
c001ef4e:	e9 3f ff ff ff       	jmp    c001ee92 <cleanerTaskFunction(void*)+0x38>

c001ef53 <terminateTask(int)>:
c001ef53:	83 ec 14             	sub    esp,0x14
c001ef56:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ef5b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ef5e:	83 c0 0c             	add    eax,0xc
c001ef61:	50                   	push   eax
c001ef62:	68 a8 d1 02 c0       	push   0xc002d1a8
c001ef67:	e8 19 3f ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001ef6c:	fa                   	cli    
c001ef6d:	ff 05 a8 25 03 c0    	inc    DWORD PTR ds:0xc00325a8
c001ef73:	ff 05 a4 25 03 c0    	inc    DWORD PTR ds:0xc00325a4
c001ef79:	fa                   	cli    
c001ef7a:	ff 05 a8 25 03 c0    	inc    DWORD PTR ds:0xc00325a8
c001ef80:	c7 04 24 5c ce 02 c0 	mov    DWORD PTR [esp],0xc002ce5c
c001ef87:	e8 f9 3e ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001ef8c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ef90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ef95:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001ef98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ef9d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001efa0:	5a                   	pop    edx
c001efa1:	59                   	pop    ecx
c001efa2:	50                   	push   eax
c001efa3:	68 ac 25 03 c0       	push   0xc00325ac
c001efa8:	e8 1f a5 00 00       	call   c00294cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001efad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001efb2:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001efb9:	c7 04 24 76 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce76
c001efc0:	e8 c0 3e ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001efc5:	83 c4 10             	add    esp,0x10
c001efc8:	a1 88 25 03 c0       	mov    eax,ds:0xc0032588
c001efcd:	85 c0                	test   eax,eax
c001efcf:	0f 84 8d 00 00 00    	je     c001f062 <terminateTask(int)+0x10f>
c001efd5:	83 ec 0c             	sub    esp,0xc
c001efd8:	68 90 ce 02 c0       	push   0xc002ce90
c001efdd:	e8 a3 3e ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001efe2:	58                   	pop    eax
c001efe3:	c6 05 8c 25 03 c0 01 	mov    BYTE PTR ds:0xc003258c,0x1
c001efea:	ff 35 88 25 03 c0    	push   DWORD PTR ds:0xc0032588
c001eff0:	e8 ef fa ff ff       	call   c001eae4 <unblockTask(ThreadControlBlock*)>
c001eff5:	c7 04 24 aa ce 02 c0 	mov    DWORD PTR [esp],0xc002ceaa
c001effc:	e8 84 3e ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001f001:	83 c4 10             	add    esp,0x10
c001f004:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c001f009:	48                   	dec    eax
c001f00a:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c001f00f:	75 01                	jne    c001f012 <terminateTask(int)+0xbf>
c001f011:	fb                   	sti    
c001f012:	a1 a4 25 03 c0       	mov    eax,ds:0xc00325a4
c001f017:	48                   	dec    eax
c001f018:	a3 a4 25 03 c0       	mov    ds:0xc00325a4,eax
c001f01d:	75 09                	jne    c001f028 <terminateTask(int)+0xd5>
c001f01f:	83 3d a0 25 03 c0 00 	cmp    DWORD PTR ds:0xc00325a0,0x0
c001f026:	75 4c                	jne    c001f074 <terminateTask(int)+0x121>
c001f028:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c001f02d:	48                   	dec    eax
c001f02e:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c001f033:	75 01                	jne    c001f036 <terminateTask(int)+0xe3>
c001f035:	fb                   	sti    
c001f036:	83 ec 0c             	sub    esp,0xc
c001f039:	68 e2 ce 02 c0       	push   0xc002cee2
c001f03e:	e8 42 3e ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001f043:	83 c4 10             	add    esp,0x10
c001f046:	fa                   	cli    
c001f047:	ff 05 a8 25 03 c0    	inc    DWORD PTR ds:0xc00325a8
c001f04d:	e8 ce f5 ff ff       	call   c001e620 <schedule()>
c001f052:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c001f057:	48                   	dec    eax
c001f058:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c001f05d:	75 e7                	jne    c001f046 <terminateTask(int)+0xf3>
c001f05f:	fb                   	sti    
c001f060:	eb e4                	jmp    c001f046 <terminateTask(int)+0xf3>
c001f062:	83 ec 0c             	sub    esp,0xc
c001f065:	68 c4 ce 02 c0       	push   0xc002cec4
c001f06a:	e8 16 3e ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001f06f:	83 c4 10             	add    esp,0x10
c001f072:	eb 90                	jmp    c001f004 <terminateTask(int)+0xb1>
c001f074:	c7 05 a0 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325a0,0x0
c001f07e:	e8 9d f5 ff ff       	call   c001e620 <schedule()>
c001f083:	eb a3                	jmp    c001f028 <terminateTask(int)+0xd5>

c001f085 <Thr::terminateFromIRQ(int)>:
c001f085:	83 ec 18             	sub    esp,0x18
c001f088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f08c:	e8 c2 fe ff ff       	call   c001ef53 <terminateTask(int)>
c001f091:	90                   	nop

c001f092 <Semaphore::release()>:
c001f092:	83 ec 0c             	sub    esp,0xc
c001f095:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f099:	fa                   	cli    
c001f09a:	a1 a4 25 03 c0       	mov    eax,ds:0xc00325a4
c001f09f:	ff 05 a8 25 03 c0    	inc    DWORD PTR ds:0xc00325a8
c001f0a5:	8d 48 01             	lea    ecx,[eax+0x1]
c001f0a8:	89 0d a4 25 03 c0    	mov    DWORD PTR ds:0xc00325a4,ecx
c001f0ae:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001f0b1:	85 c9                	test   ecx,ecx
c001f0b3:	74 3c                	je     c001f0f1 <Semaphore::release()+0x5f>
c001f0b5:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001f0b8:	83 ec 0c             	sub    esp,0xc
c001f0bb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001f0be:	51                   	push   ecx
c001f0bf:	e8 20 fa ff ff       	call   c001eae4 <unblockTask(ThreadControlBlock*)>
c001f0c4:	a1 a4 25 03 c0       	mov    eax,ds:0xc00325a4
c001f0c9:	83 c4 10             	add    esp,0x10
c001f0cc:	48                   	dec    eax
c001f0cd:	a3 a4 25 03 c0       	mov    ds:0xc00325a4,eax
c001f0d2:	85 c0                	test   eax,eax
c001f0d4:	75 09                	jne    c001f0df <Semaphore::release()+0x4d>
c001f0d6:	a1 a0 25 03 c0       	mov    eax,ds:0xc00325a0
c001f0db:	85 c0                	test   eax,eax
c001f0dd:	75 17                	jne    c001f0f6 <Semaphore::release()+0x64>
c001f0df:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c001f0e4:	48                   	dec    eax
c001f0e5:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c001f0ea:	75 01                	jne    c001f0ed <Semaphore::release()+0x5b>
c001f0ec:	fb                   	sti    
c001f0ed:	83 c4 0c             	add    esp,0xc
c001f0f0:	c3                   	ret    
c001f0f1:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001f0f4:	eb d7                	jmp    c001f0cd <Semaphore::release()+0x3b>
c001f0f6:	c7 05 a0 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325a0,0x0
c001f100:	e8 1b f5 ff ff       	call   c001e620 <schedule()>
c001f105:	eb d8                	jmp    c001f0df <Semaphore::release()+0x4d>

c001f107 <__static_initialization_and_destruction_0(int, int)>:
c001f107:	83 ec 0c             	sub    esp,0xc
c001f10a:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001f10f:	0f 85 88 00 00 00    	jne    c001f19d <__static_initialization_and_destruction_0(int, int)+0x96>
c001f115:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001f11d:	75 7e                	jne    c001f19d <__static_initialization_and_destruction_0(int, int)+0x96>
c001f11f:	83 ec 0c             	sub    esp,0xc
c001f122:	68 c4 25 03 c0       	push   0xc00325c4
c001f127:	e8 30 a6 00 00       	call   c002975c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001f12c:	83 c4 10             	add    esp,0x10
c001f12f:	83 ec 04             	sub    esp,0x4
c001f132:	68 90 df 02 c0       	push   0xc002df90
c001f137:	68 c4 25 03 c0       	push   0xc00325c4
c001f13c:	68 10 97 02 c0       	push   0xc0029710
c001f141:	e8 d9 3b ff ff       	call   c0012d1f <__cxa_atexit>
c001f146:	83 c4 10             	add    esp,0x10
c001f149:	83 ec 0c             	sub    esp,0xc
c001f14c:	68 b8 25 03 c0       	push   0xc00325b8
c001f151:	e8 06 a6 00 00       	call   c002975c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001f156:	83 c4 10             	add    esp,0x10
c001f159:	83 ec 04             	sub    esp,0x4
c001f15c:	68 90 df 02 c0       	push   0xc002df90
c001f161:	68 b8 25 03 c0       	push   0xc00325b8
c001f166:	68 10 97 02 c0       	push   0xc0029710
c001f16b:	e8 af 3b ff ff       	call   c0012d1f <__cxa_atexit>
c001f170:	83 c4 10             	add    esp,0x10
c001f173:	83 ec 0c             	sub    esp,0xc
c001f176:	68 ac 25 03 c0       	push   0xc00325ac
c001f17b:	e8 dc a5 00 00       	call   c002975c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001f180:	83 c4 10             	add    esp,0x10
c001f183:	83 ec 04             	sub    esp,0x4
c001f186:	68 90 df 02 c0       	push   0xc002df90
c001f18b:	68 ac 25 03 c0       	push   0xc00325ac
c001f190:	68 10 97 02 c0       	push   0xc0029710
c001f195:	e8 85 3b ff ff       	call   c0012d1f <__cxa_atexit>
c001f19a:	83 c4 10             	add    esp,0x10
c001f19d:	90                   	nop
c001f19e:	83 c4 0c             	add    esp,0xc
c001f1a1:	c3                   	ret    

c001f1a2 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001f1a2:	83 ec 0c             	sub    esp,0xc
c001f1a5:	83 ec 08             	sub    esp,0x8
c001f1a8:	68 ff ff 00 00       	push   0xffff
c001f1ad:	6a 01                	push   0x1
c001f1af:	e8 53 ff ff ff       	call   c001f107 <__static_initialization_and_destruction_0(int, int)>
c001f1b4:	83 c4 10             	add    esp,0x10
c001f1b7:	83 c4 0c             	add    esp,0xc
c001f1ba:	c3                   	ret    

c001f1bb <Vm::inbv(unsigned short)>:
c001f1bb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f1bf:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f1c4:	75 06                	jne    c001f1cc <Vm::inbv(unsigned short)+0x11>
c001f1c6:	a0 0c 26 03 c0       	mov    al,ds:0xc003260c
c001f1cb:	c3                   	ret    
c001f1cc:	ec                   	in     al,dx
c001f1cd:	c3                   	ret    

c001f1ce <Vm::outbv(unsigned short, unsigned char)>:
c001f1ce:	53                   	push   ebx
c001f1cf:	83 ec 08             	sub    esp,0x8
c001f1d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f1d6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f1da:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f1df:	75 38                	jne    c001f219 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001f1e1:	0f b6 c3             	movzx  eax,bl
c001f1e4:	51                   	push   ecx
c001f1e5:	51                   	push   ecx
c001f1e6:	50                   	push   eax
c001f1e7:	68 c7 d1 02 c0       	push   0xc002d1c7
c001f1ec:	e8 94 3c ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001f1f1:	8b 15 0c 26 03 c0    	mov    edx,DWORD PTR ds:0xc003260c
c001f1f7:	83 c4 10             	add    esp,0x10
c001f1fa:	8d 42 01             	lea    eax,[edx+0x1]
c001f1fd:	88 9a 20 26 03 c0    	mov    BYTE PTR [edx-0x3ffcd9e0],bl
c001f203:	a3 0c 26 03 c0       	mov    ds:0xc003260c,eax
c001f208:	83 f8 20             	cmp    eax,0x20
c001f20b:	75 0f                	jne    c001f21c <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001f20d:	c7 05 0c 26 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003260c,0x1f
c001f217:	eb 03                	jmp    c001f21c <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001f219:	88 d8                	mov    al,bl
c001f21b:	ee                   	out    dx,al
c001f21c:	83 c4 08             	add    esp,0x8
c001f21f:	5b                   	pop    ebx
c001f220:	c3                   	ret    

c001f221 <Vm::realToLinear(unsigned short, unsigned short)>:
c001f221:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f226:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f22b:	c1 e0 04             	shl    eax,0x4
c001f22e:	01 d0                	add    eax,edx
c001f230:	c3                   	ret    

c001f231 <Vm::getSegment(unsigned int)>:
c001f231:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f235:	c1 e8 10             	shr    eax,0x10
c001f238:	c3                   	ret    

c001f239 <Vm::getOffset(unsigned int)>:
c001f239:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f23d:	c3                   	ret    

c001f23e <Vm::mainloop2()>:
c001f23e:	83 ec 18             	sub    esp,0x18
c001f241:	fa                   	cli    
c001f242:	ff 05 a8 25 03 c0    	inc    DWORD PTR ds:0xc00325a8
c001f248:	6a 02                	push   0x2
c001f24a:	c6 05 05 26 03 c0 01 	mov    BYTE PTR ds:0xc0032605,0x1
c001f251:	e8 7b f5 ff ff       	call   c001e7d1 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f256:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f25b:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001f25f:	52                   	push   edx
c001f260:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001f264:	52                   	push   edx
c001f265:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001f269:	52                   	push   edx
c001f26a:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001f26e:	50                   	push   eax
c001f26f:	e8 86 10 fe ff       	call   c00002fa <goToVM86>
c001f274:	83 c4 2c             	add    esp,0x2c
c001f277:	c3                   	ret    

c001f278 <Vm::mainVm8086Loop(void*)>:
c001f278:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c001f27d:	48                   	dec    eax
c001f27e:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c001f283:	75 01                	jne    c001f286 <Vm::mainVm8086Loop(void*)+0xe>
c001f285:	fb                   	sti    
c001f286:	eb b6                	jmp    c001f23e <Vm::mainloop2()>

c001f288 <Vm::mainloop3(unsigned long)>:
c001f288:	83 ec 18             	sub    esp,0x18
c001f28b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f28f:	fa                   	cli    
c001f290:	ff 05 a8 25 03 c0    	inc    DWORD PTR ds:0xc00325a8
c001f296:	6a 02                	push   0x2
c001f298:	c6 05 04 26 03 c0 01 	mov    BYTE PTR ds:0xc0032604,0x1
c001f29f:	a3 00 26 03 c0       	mov    ds:0xc0032600,eax
c001f2a4:	e8 28 f5 ff ff       	call   c001e7d1 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f2a9:	83 c4 1c             	add    esp,0x1c
c001f2ac:	eb 90                	jmp    c001f23e <Vm::mainloop2()>

c001f2ae <Vm::initialise8086()>:
c001f2ae:	83 ec 0c             	sub    esp,0xc
c001f2b1:	68 80 00 00 00       	push   0x80
c001f2b6:	6a 00                	push   0x0
c001f2b8:	68 78 f2 01 c0       	push   0xc001f278
c001f2bd:	ff 35 d0 25 03 c0    	push   DWORD PTR ds:0xc00325d0
c001f2c3:	e8 14 f1 ff ff       	call   c001e3dc <Process::createThread(void (*)(void*), void*, int)>
c001f2c8:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001f2cf:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c001f2d4:	68 00 01 00 00       	push   0x100
c001f2d9:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c001f2de:	6a 00                	push   0x0
c001f2e0:	6a 00                	push   0x0
c001f2e2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001f2e8:	e8 bf 32 ff ff       	call   c00125ac <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f2ed:	83 c4 2c             	add    esp,0x2c
c001f2f0:	c3                   	ret    

c001f2f1 <Vm::finish8086()>:
c001f2f1:	53                   	push   ebx
c001f2f2:	83 ec 08             	sub    esp,0x8
c001f2f5:	fa                   	cli    
c001f2f6:	ff 05 a8 25 03 c0    	inc    DWORD PTR ds:0xc00325a8
c001f2fc:	80 3d 04 26 03 c0 00 	cmp    BYTE PTR ds:0xc0032604,0x0
c001f303:	75 15                	jne    c001f31a <Vm::finish8086()+0x29>
c001f305:	e8 16 f3 ff ff       	call   c001e620 <schedule()>
c001f30a:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c001f30f:	48                   	dec    eax
c001f310:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c001f315:	75 de                	jne    c001f2f5 <Vm::finish8086()+0x4>
c001f317:	fb                   	sti    
c001f318:	eb db                	jmp    c001f2f5 <Vm::finish8086()+0x4>
c001f31a:	83 ec 0c             	sub    esp,0xc
c001f31d:	8b 1d 00 26 03 c0    	mov    ebx,DWORD PTR ds:0xc0032600
c001f323:	ff 35 08 26 03 c0    	push   DWORD PTR ds:0xc0032608
c001f329:	c6 05 04 26 03 c0 00 	mov    BYTE PTR ds:0xc0032604,0x0
c001f330:	e8 af f7 ff ff       	call   c001eae4 <unblockTask(ThreadControlBlock*)>
c001f335:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c001f33a:	83 c4 10             	add    esp,0x10
c001f33d:	8d 50 ff             	lea    edx,[eax-0x1]
c001f340:	89 15 a8 25 03 c0    	mov    DWORD PTR ds:0xc00325a8,edx
c001f346:	85 d2                	test   edx,edx
c001f348:	75 01                	jne    c001f34b <Vm::finish8086()+0x5a>
c001f34a:	fb                   	sti    
c001f34b:	89 d8                	mov    eax,ebx
c001f34d:	83 c4 08             	add    esp,0x8
c001f350:	5b                   	pop    ebx
c001f351:	c3                   	ret    

c001f352 <Vm::getOutput8086(unsigned char*)>:
c001f352:	57                   	push   edi
c001f353:	8b 0d 0c 26 03 c0    	mov    ecx,DWORD PTR ds:0xc003260c
c001f359:	56                   	push   esi
c001f35a:	be 20 26 03 c0       	mov    esi,0xc0032620
c001f35f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f363:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f365:	a1 0c 26 03 c0       	mov    eax,ds:0xc003260c
c001f36a:	5e                   	pop    esi
c001f36b:	c7 05 0c 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003260c,0x0
c001f375:	5f                   	pop    edi
c001f376:	c3                   	ret    

c001f377 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001f377:	55                   	push   ebp
c001f378:	57                   	push   edi
c001f379:	56                   	push   esi
c001f37a:	53                   	push   ebx
c001f37b:	83 ec 2c             	sub    esp,0x2c
c001f37e:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f382:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f386:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f38a:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001f38e:	fa                   	cli    
c001f38f:	ff 05 a8 25 03 c0    	inc    DWORD PTR ds:0xc00325a8
c001f395:	0f b6 35 05 26 03 c0 	movzx  esi,BYTE PTR ds:0xc0032605
c001f39c:	89 f0                	mov    eax,esi
c001f39e:	84 c0                	test   al,al
c001f3a0:	75 1d                	jne    c001f3bf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001f3a2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f3a6:	e8 75 f2 ff ff       	call   c001e620 <schedule()>
c001f3ab:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c001f3b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f3b4:	48                   	dec    eax
c001f3b5:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c001f3ba:	75 d2                	jne    c001f38e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f3bc:	fb                   	sti    
c001f3bd:	eb cf                	jmp    c001f38e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f3bf:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c001f3c4:	c7 05 0c 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003260c,0x0
c001f3ce:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001f3d2:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001f3d6:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001f3da:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001f3de:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001f3e2:	50                   	push   eax
c001f3e3:	6a 20                	push   0x20
c001f3e5:	6a 00                	push   0x0
c001f3e7:	68 20 26 03 c0       	push   0xc0032620
c001f3ec:	e8 7b 13 fe ff       	call   c000076c <memset>
c001f3f1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001f3f8:	e8 dd 04 ff ff       	call   c000f8da <malloc>
c001f3fd:	83 c4 0c             	add    esp,0xc
c001f400:	89 c3                	mov    ebx,eax
c001f402:	ff 35 d0 25 03 c0    	push   DWORD PTR ds:0xc00325d0
c001f408:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f40c:	50                   	push   eax
c001f40d:	e8 d2 3f ff ff       	call   c00133e4 <File::File(char const*, Process*)>
c001f412:	83 c4 10             	add    esp,0x10
c001f415:	85 db                	test   ebx,ebx
c001f417:	75 0a                	jne    c001f423 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001f419:	83 ec 0c             	sub    esp,0xc
c001f41c:	68 e3 d1 02 c0       	push   0xc002d1e3
c001f421:	eb 3e                	jmp    c001f461 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f423:	50                   	push   eax
c001f424:	8d 44 24 17          	lea    eax,[esp+0x17]
c001f428:	50                   	push   eax
c001f429:	8d 44 24 20          	lea    eax,[esp+0x20]
c001f42d:	50                   	push   eax
c001f42e:	53                   	push   ebx
c001f42f:	e8 c0 42 ff ff       	call   c00136f4 <File::stat(unsigned long long*, bool*)>
c001f434:	83 c4 10             	add    esp,0x10
c001f437:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001f43c:	74 0a                	je     c001f448 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001f43e:	83 ec 0c             	sub    esp,0xc
c001f441:	68 f7 d1 02 c0       	push   0xc002d1f7
c001f446:	eb 19                	jmp    c001f461 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f448:	51                   	push   ecx
c001f449:	51                   	push   ecx
c001f44a:	6a 01                	push   0x1
c001f44c:	53                   	push   ebx
c001f44d:	e8 f6 3f ff ff       	call   c0013448 <File::open(FileOpenMode)>
c001f452:	83 c4 10             	add    esp,0x10
c001f455:	85 c0                	test   eax,eax
c001f457:	74 24                	je     c001f47d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001f459:	83 ec 0c             	sub    esp,0xc
c001f45c:	68 10 d2 02 c0       	push   0xc002d210
c001f461:	e8 07 b4 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c001f466:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c001f46b:	83 c4 10             	add    esp,0x10
c001f46e:	48                   	dec    eax
c001f46f:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c001f474:	85 c0                	test   eax,eax
c001f476:	75 01                	jne    c001f479 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001f478:	fb                   	sti    
c001f479:	31 f6                	xor    esi,esi
c001f47b:	eb 58                	jmp    c001f4d5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001f47d:	0f b7 ed             	movzx  ebp,bp
c001f480:	50                   	push   eax
c001f481:	0f b7 ff             	movzx  edi,di
c001f484:	50                   	push   eax
c001f485:	55                   	push   ebp
c001f486:	57                   	push   edi
c001f487:	e8 95 fd ff ff       	call   c001f221 <Vm::realToLinear(unsigned short, unsigned short)>
c001f48c:	5a                   	pop    edx
c001f48d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001f48f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001f493:	51                   	push   ecx
c001f494:	50                   	push   eax
c001f495:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f499:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f49d:	53                   	push   ebx
c001f49e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001f4a1:	83 c4 14             	add    esp,0x14
c001f4a4:	53                   	push   ebx
c001f4a5:	e8 fc 3f ff ff       	call   c00134a6 <File::close()>
c001f4aa:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c001f4af:	83 c4 10             	add    esp,0x10
c001f4b2:	48                   	dec    eax
c001f4b3:	c6 05 05 26 03 c0 00 	mov    BYTE PTR ds:0xc0032605,0x0
c001f4ba:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c001f4bf:	85 c0                	test   eax,eax
c001f4c1:	75 01                	jne    c001f4c4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001f4c3:	fb                   	sti    
c001f4c4:	83 ec 0c             	sub    esp,0xc
c001f4c7:	ff 35 08 26 03 c0    	push   DWORD PTR ds:0xc0032608
c001f4cd:	e8 12 f6 ff ff       	call   c001eae4 <unblockTask(ThreadControlBlock*)>
c001f4d2:	83 c4 10             	add    esp,0x10
c001f4d5:	83 c4 2c             	add    esp,0x2c
c001f4d8:	89 f0                	mov    eax,esi
c001f4da:	5b                   	pop    ebx
c001f4db:	5e                   	pop    esi
c001f4dc:	5f                   	pop    edi
c001f4dd:	5d                   	pop    ebp
c001f4de:	c3                   	ret    

c001f4df <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001f4df:	57                   	push   edi
c001f4e0:	56                   	push   esi
c001f4e1:	53                   	push   ebx
c001f4e2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f4e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f4ea:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f4ee:	83 e8 06             	sub    eax,0x6
c001f4f1:	0f b7 c0             	movzx  eax,ax
c001f4f4:	50                   	push   eax
c001f4f5:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001f4fa:	50                   	push   eax
c001f4fb:	e8 21 fd ff ff       	call   c001f221 <Vm::realToLinear(unsigned short, unsigned short)>
c001f500:	5a                   	pop    edx
c001f501:	5e                   	pop    esi
c001f502:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001f505:	8d 56 fa             	lea    edx,[esi-0x6]
c001f508:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f50e:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001f511:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001f514:	83 c2 02             	add    edx,0x2
c001f517:	66 89 10             	mov    WORD PTR [eax],dx
c001f51a:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001f51d:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001f521:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001f524:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001f528:	89 d6                	mov    esi,edx
c001f52a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001f530:	66 81 e6 ff fd       	and    si,0xfdff
c001f535:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001f539:	74 07                	je     c001f542 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001f53b:	89 d6                	mov    esi,edx
c001f53d:	66 81 ce 00 02       	or     si,0x200
c001f542:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001f546:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f54b:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f54f:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001f557:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001f55a:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001f562:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001f565:	5b                   	pop    ebx
c001f566:	5e                   	pop    esi
c001f567:	5f                   	pop    edi
c001f568:	c3                   	ret    

c001f569 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001f569:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f56e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f573:	c1 e0 04             	shl    eax,0x4
c001f576:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001f579:	c3                   	ret    

c001f57a <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001f57a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f57f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f584:	c1 e0 04             	shl    eax,0x4
c001f587:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001f58b:	c3                   	ret    

c001f58c <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001f58c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f591:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f596:	c1 e0 04             	shl    eax,0x4
c001f599:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001f59c:	c3                   	ret    

c001f59d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001f59d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f5a2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f5a7:	c1 e0 04             	shl    eax,0x4
c001f5aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f5ae:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001f5b1:	c3                   	ret    

c001f5b2 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001f5b2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f5b7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f5bc:	c1 e0 04             	shl    eax,0x4
c001f5bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f5c3:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001f5c7:	c3                   	ret    

c001f5c8 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001f5c8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f5cd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f5d2:	c1 e0 04             	shl    eax,0x4
c001f5d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f5d9:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001f5dc:	c3                   	ret    

c001f5dd <Vm::faultHandler(regs*)>:
c001f5dd:	55                   	push   ebp
c001f5de:	57                   	push   edi
c001f5df:	56                   	push   esi
c001f5e0:	53                   	push   ebx
c001f5e1:	83 ec 1c             	sub    esp,0x1c
c001f5e4:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f5e8:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001f5eb:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001f5ee:	0f b7 c1             	movzx  eax,cx
c001f5f1:	50                   	push   eax
c001f5f2:	0f b7 c3             	movzx  eax,bx
c001f5f5:	c1 e3 04             	shl    ebx,0x4
c001f5f8:	50                   	push   eax
c001f5f9:	e8 23 fc ff ff       	call   c001f221 <Vm::realToLinear(unsigned short, unsigned short)>
c001f5fe:	5a                   	pop    edx
c001f5ff:	89 c5                	mov    ebp,eax
c001f601:	5e                   	pop    esi
c001f602:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001f606:	50                   	push   eax
c001f607:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f60b:	50                   	push   eax
c001f60c:	e8 10 fc ff ff       	call   c001f221 <Vm::realToLinear(unsigned short, unsigned short)>
c001f611:	01 cb                	add    ebx,ecx
c001f613:	89 c6                	mov    esi,eax
c001f615:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001f619:	50                   	push   eax
c001f61a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f61e:	50                   	push   eax
c001f61f:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f623:	50                   	push   eax
c001f624:	55                   	push   ebp
c001f625:	53                   	push   ebx
c001f626:	b3 06                	mov    bl,0x6
c001f628:	68 29 d2 02 c0       	push   0xc002d229
c001f62d:	e8 53 38 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001f632:	83 c4 20             	add    esp,0x20
c001f635:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001f63a:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f63f:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f643:	3c 9d                	cmp    al,0x9d
c001f645:	0f 84 d7 02 00 00    	je     c001f922 <Vm::faultHandler(regs*)+0x345>
c001f64b:	0f 87 a3 00 00 00    	ja     c001f6f4 <Vm::faultHandler(regs*)+0x117>
c001f651:	3c 66                	cmp    al,0x66
c001f653:	0f 84 15 02 00 00    	je     c001f86e <Vm::faultHandler(regs*)+0x291>
c001f659:	77 5f                	ja     c001f6ba <Vm::faultHandler(regs*)+0xdd>
c001f65b:	3c 36                	cmp    al,0x36
c001f65d:	0f 84 f1 01 00 00    	je     c001f854 <Vm::faultHandler(regs*)+0x277>
c001f663:	77 28                	ja     c001f68d <Vm::faultHandler(regs*)+0xb0>
c001f665:	3c 26                	cmp    al,0x26
c001f667:	0f 84 99 01 00 00    	je     c001f806 <Vm::faultHandler(regs*)+0x229>
c001f66d:	3c 2e                	cmp    al,0x2e
c001f66f:	0f 85 3b 07 00 00    	jne    c001fdb0 <Vm::faultHandler(regs*)+0x7d3>
c001f675:	83 ec 0c             	sub    esp,0xc
c001f678:	31 db                	xor    ebx,ebx
c001f67a:	68 3e d2 02 c0       	push   0xc002d23e
c001f67f:	e8 01 38 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001f684:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f687:	83 c4 10             	add    esp,0x10
c001f68a:	45                   	inc    ebp
c001f68b:	eb b2                	jmp    c001f63f <Vm::faultHandler(regs*)+0x62>
c001f68d:	3c 64                	cmp    al,0x64
c001f68f:	0f 84 8b 01 00 00    	je     c001f820 <Vm::faultHandler(regs*)+0x243>
c001f695:	0f 87 9f 01 00 00    	ja     c001f83a <Vm::faultHandler(regs*)+0x25d>
c001f69b:	3c 3e                	cmp    al,0x3e
c001f69d:	0f 85 0d 07 00 00    	jne    c001fdb0 <Vm::faultHandler(regs*)+0x7d3>
c001f6a3:	83 ec 0c             	sub    esp,0xc
c001f6a6:	b3 01                	mov    bl,0x1
c001f6a8:	68 42 d2 02 c0       	push   0xc002d242
c001f6ad:	e8 d3 37 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001f6b2:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f6b5:	83 c4 10             	add    esp,0x10
c001f6b8:	eb d0                	jmp    c001f68a <Vm::faultHandler(regs*)+0xad>
c001f6ba:	3c 6d                	cmp    al,0x6d
c001f6bc:	0f 84 af 03 00 00    	je     c001fa71 <Vm::faultHandler(regs*)+0x494>
c001f6c2:	77 15                	ja     c001f6d9 <Vm::faultHandler(regs*)+0xfc>
c001f6c4:	3c 67                	cmp    al,0x67
c001f6c6:	0f 84 bf 01 00 00    	je     c001f88b <Vm::faultHandler(regs*)+0x2ae>
c001f6cc:	3c 6c                	cmp    al,0x6c
c001f6ce:	0f 84 3f 03 00 00    	je     c001fa13 <Vm::faultHandler(regs*)+0x436>
c001f6d4:	e9 d7 06 00 00       	jmp    c001fdb0 <Vm::faultHandler(regs*)+0x7d3>
c001f6d9:	3c 6f                	cmp    al,0x6f
c001f6db:	0f 84 a4 04 00 00    	je     c001fb85 <Vm::faultHandler(regs*)+0x5a8>
c001f6e1:	0f 82 11 04 00 00    	jb     c001faf8 <Vm::faultHandler(regs*)+0x51b>
c001f6e7:	3c 9c                	cmp    al,0x9c
c001f6e9:	0f 84 ba 01 00 00    	je     c001f8a9 <Vm::faultHandler(regs*)+0x2cc>
c001f6ef:	e9 bc 06 00 00       	jmp    c001fdb0 <Vm::faultHandler(regs*)+0x7d3>
c001f6f4:	3c ec                	cmp    al,0xec
c001f6f6:	0f 84 24 06 00 00    	je     c001fd20 <Vm::faultHandler(regs*)+0x743>
c001f6fc:	0f 87 93 00 00 00    	ja     c001f795 <Vm::faultHandler(regs*)+0x1b8>
c001f702:	3c e4                	cmp    al,0xe4
c001f704:	0f 84 5c 05 00 00    	je     c001fc66 <Vm::faultHandler(regs*)+0x689>
c001f70a:	77 6a                	ja     c001f776 <Vm::faultHandler(regs*)+0x199>
c001f70c:	3c cd                	cmp    al,0xcd
c001f70e:	0f 84 7e 02 00 00    	je     c001f992 <Vm::faultHandler(regs*)+0x3b5>
c001f714:	3c cf                	cmp    al,0xcf
c001f716:	0f 85 94 06 00 00    	jne    c001fdb0 <Vm::faultHandler(regs*)+0x7d3>
c001f71c:	83 ec 0c             	sub    esp,0xc
c001f71f:	68 86 d2 02 c0       	push   0xc002d286
c001f724:	e8 5c 37 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001f729:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001f72c:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001f72f:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001f733:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001f736:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001f73a:	0d 00 02 02 00       	or     eax,0x20200
c001f73f:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f742:	56                   	push   esi
c001f743:	53                   	push   ebx
c001f744:	52                   	push   edx
c001f745:	68 8c d2 02 c0       	push   0xc002d28c
c001f74a:	e8 36 37 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001f74f:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001f753:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f759:	66 c1 e8 09          	shr    ax,0x9
c001f75d:	83 e0 01             	and    eax,0x1
c001f760:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f763:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f766:	83 c0 06             	add    eax,0x6
c001f769:	25 ff ff 00 00       	and    eax,0xffff
c001f76e:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f771:	e9 95 02 00 00       	jmp    c001fa0b <Vm::faultHandler(regs*)+0x42e>
c001f776:	3c e6                	cmp    al,0xe6
c001f778:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001f77c:	0f 84 4e 05 00 00    	je     c001fcd0 <Vm::faultHandler(regs*)+0x6f3>
c001f782:	0f 82 0a 05 00 00    	jb     c001fc92 <Vm::faultHandler(regs*)+0x6b5>
c001f788:	3c e7                	cmp    al,0xe7
c001f78a:	0f 84 69 05 00 00    	je     c001fcf9 <Vm::faultHandler(regs*)+0x71c>
c001f790:	e9 1b 06 00 00       	jmp    c001fdb0 <Vm::faultHandler(regs*)+0x7d3>
c001f795:	3c ef                	cmp    al,0xef
c001f797:	0f 84 e6 05 00 00    	je     c001fd83 <Vm::faultHandler(regs*)+0x7a6>
c001f79d:	77 37                	ja     c001f7d6 <Vm::faultHandler(regs*)+0x1f9>
c001f79f:	3c ed                	cmp    al,0xed
c001f7a1:	0f 84 a3 05 00 00    	je     c001fd4a <Vm::faultHandler(regs*)+0x76d>
c001f7a7:	3c ee                	cmp    al,0xee
c001f7a9:	0f 85 01 06 00 00    	jne    c001fdb0 <Vm::faultHandler(regs*)+0x7d3>
c001f7af:	52                   	push   edx
c001f7b0:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f7b3:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f7b6:	68 27 d3 02 c0       	push   0xc002d327
c001f7bb:	e8 c5 36 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001f7c0:	59                   	pop    ecx
c001f7c1:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f7c5:	5b                   	pop    ebx
c001f7c6:	50                   	push   eax
c001f7c7:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f7cb:	50                   	push   eax
c001f7cc:	e8 fd f9 ff ff       	call   c001f1ce <Vm::outbv(unsigned short, unsigned char)>
c001f7d1:	e9 a5 05 00 00       	jmp    c001fd7b <Vm::faultHandler(regs*)+0x79e>
c001f7d6:	3c fa                	cmp    al,0xfa
c001f7d8:	0f 84 f7 01 00 00    	je     c001f9d5 <Vm::faultHandler(regs*)+0x3f8>
c001f7de:	3c fb                	cmp    al,0xfb
c001f7e0:	0f 84 0a 02 00 00    	je     c001f9f0 <Vm::faultHandler(regs*)+0x413>
c001f7e6:	3c f3                	cmp    al,0xf3
c001f7e8:	0f 85 c2 05 00 00    	jne    c001fdb0 <Vm::faultHandler(regs*)+0x7d3>
c001f7ee:	83 ec 0c             	sub    esp,0xc
c001f7f1:	68 5f d2 02 c0       	push   0xc002d25f
c001f7f6:	e8 8a 36 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001f7fb:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f7fe:	83 c4 10             	add    esp,0x10
c001f801:	e9 84 fe ff ff       	jmp    c001f68a <Vm::faultHandler(regs*)+0xad>
c001f806:	83 ec 0c             	sub    esp,0xc
c001f809:	b3 02                	mov    bl,0x2
c001f80b:	68 3a d2 02 c0       	push   0xc002d23a
c001f810:	e8 70 36 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001f815:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f818:	83 c4 10             	add    esp,0x10
c001f81b:	e9 6a fe ff ff       	jmp    c001f68a <Vm::faultHandler(regs*)+0xad>
c001f820:	83 ec 0c             	sub    esp,0xc
c001f823:	b3 03                	mov    bl,0x3
c001f825:	68 46 d2 02 c0       	push   0xc002d246
c001f82a:	e8 56 36 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001f82f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f832:	83 c4 10             	add    esp,0x10
c001f835:	e9 50 fe ff ff       	jmp    c001f68a <Vm::faultHandler(regs*)+0xad>
c001f83a:	83 ec 0c             	sub    esp,0xc
c001f83d:	b3 04                	mov    bl,0x4
c001f83f:	68 4a d2 02 c0       	push   0xc002d24a
c001f844:	e8 3c 36 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001f849:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f84c:	83 c4 10             	add    esp,0x10
c001f84f:	e9 36 fe ff ff       	jmp    c001f68a <Vm::faultHandler(regs*)+0xad>
c001f854:	83 ec 0c             	sub    esp,0xc
c001f857:	b3 05                	mov    bl,0x5
c001f859:	68 4e d2 02 c0       	push   0xc002d24e
c001f85e:	e8 22 36 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001f863:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f866:	83 c4 10             	add    esp,0x10
c001f869:	e9 1c fe ff ff       	jmp    c001f68a <Vm::faultHandler(regs*)+0xad>
c001f86e:	83 ec 0c             	sub    esp,0xc
c001f871:	68 52 d2 02 c0       	push   0xc002d252
c001f876:	e8 0a 36 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001f87b:	83 c4 10             	add    esp,0x10
c001f87e:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f881:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f886:	e9 ff fd ff ff       	jmp    c001f68a <Vm::faultHandler(regs*)+0xad>
c001f88b:	50                   	push   eax
c001f88c:	50                   	push   eax
c001f88d:	6a 01                	push   0x1
c001f88f:	68 57 d2 02 c0       	push   0xc002d257
c001f894:	e8 ec 35 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001f899:	83 c4 10             	add    esp,0x10
c001f89c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f89f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f8a4:	e9 e1 fd ff ff       	jmp    c001f68a <Vm::faultHandler(regs*)+0xad>
c001f8a9:	83 ec 0c             	sub    esp,0xc
c001f8ac:	68 65 d2 02 c0       	push   0xc002d265
c001f8b1:	e8 cf 35 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001f8b6:	83 c4 10             	add    esp,0x10
c001f8b9:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f8bc:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f8c1:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f8c4:	74 2f                	je     c001f8f5 <Vm::faultHandler(regs*)+0x318>
c001f8c6:	83 ea 04             	sub    edx,0x4
c001f8c9:	25 ff 0d 00 00       	and    eax,0xdff
c001f8ce:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f8d4:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f8d7:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f8da:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f8e0:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f8e4:	0f 84 bf 04 00 00    	je     c001fda9 <Vm::faultHandler(regs*)+0x7cc>
c001f8ea:	80 cc 02             	or     ah,0x2
c001f8ed:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f8f0:	e9 b4 04 00 00       	jmp    c001fda9 <Vm::faultHandler(regs*)+0x7cc>
c001f8f5:	83 ea 02             	sub    edx,0x2
c001f8f8:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f8fe:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f901:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f905:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f90b:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f90f:	74 05                	je     c001f916 <Vm::faultHandler(regs*)+0x339>
c001f911:	80 cc 02             	or     ah,0x2
c001f914:	eb 03                	jmp    c001f919 <Vm::faultHandler(regs*)+0x33c>
c001f916:	80 e4 fd             	and    ah,0xfd
c001f919:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f91d:	e9 87 04 00 00       	jmp    c001fda9 <Vm::faultHandler(regs*)+0x7cc>
c001f922:	83 ec 0c             	sub    esp,0xc
c001f925:	68 6c d2 02 c0       	push   0xc002d26c
c001f92a:	e8 56 35 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001f92f:	83 c4 10             	add    esp,0x10
c001f932:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f937:	74 28                	je     c001f961 <Vm::faultHandler(regs*)+0x384>
c001f939:	8b 06                	mov    eax,DWORD PTR [esi]
c001f93b:	25 ff 0d 00 00       	and    eax,0xdff
c001f940:	0d 00 02 02 00       	or     eax,0x20200
c001f945:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f948:	8b 06                	mov    eax,DWORD PTR [esi]
c001f94a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f950:	c1 e8 09             	shr    eax,0x9
c001f953:	83 e0 01             	and    eax,0x1
c001f956:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f959:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f95c:	83 c0 04             	add    eax,0x4
c001f95f:	eb 24                	jmp    c001f985 <Vm::faultHandler(regs*)+0x3a8>
c001f961:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f964:	0d 00 02 02 00       	or     eax,0x20200
c001f969:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f96c:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f96f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f975:	66 c1 e8 09          	shr    ax,0x9
c001f979:	83 e0 01             	and    eax,0x1
c001f97c:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f97f:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f982:	83 c0 02             	add    eax,0x2
c001f985:	25 ff ff 00 00       	and    eax,0xffff
c001f98a:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f98d:	e9 17 04 00 00       	jmp    c001fda9 <Vm::faultHandler(regs*)+0x7cc>
c001f992:	53                   	push   ebx
c001f993:	53                   	push   ebx
c001f994:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f998:	50                   	push   eax
c001f999:	68 72 d2 02 c0       	push   0xc002d272
c001f99e:	e8 e2 34 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001f9a3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9a7:	83 c4 10             	add    esp,0x10
c001f9aa:	3c ee                	cmp    al,0xee
c001f9ac:	75 10                	jne    c001f9be <Vm::faultHandler(regs*)+0x3e1>
c001f9ae:	83 ec 0c             	sub    esp,0xc
c001f9b1:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f9b4:	e8 cf f8 ff ff       	call   c001f288 <Vm::mainloop3(unsigned long)>
c001f9b9:	e9 c0 03 00 00       	jmp    c001fd7e <Vm::faultHandler(regs*)+0x7a1>
c001f9be:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f9c2:	83 ec 0c             	sub    esp,0xc
c001f9c5:	53                   	push   ebx
c001f9c6:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f9ca:	53                   	push   ebx
c001f9cb:	55                   	push   ebp
c001f9cc:	50                   	push   eax
c001f9cd:	57                   	push   edi
c001f9ce:	e8 0c fb ff ff       	call   c001f4df <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f9d3:	eb 36                	jmp    c001fa0b <Vm::faultHandler(regs*)+0x42e>
c001f9d5:	83 ec 0c             	sub    esp,0xc
c001f9d8:	68 7c d2 02 c0       	push   0xc002d27c
c001f9dd:	e8 a3 34 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001f9e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f9e7:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f9eb:	e9 8b 03 00 00       	jmp    c001fd7b <Vm::faultHandler(regs*)+0x79e>
c001f9f0:	83 ec 0c             	sub    esp,0xc
c001f9f3:	68 81 d2 02 c0       	push   0xc002d281
c001f9f8:	e8 88 34 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001f9fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001fa02:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001fa06:	e9 70 03 00 00       	jmp    c001fd7b <Vm::faultHandler(regs*)+0x79e>
c001fa0b:	83 c4 20             	add    esp,0x20
c001fa0e:	e9 99 03 00 00       	jmp    c001fdac <Vm::faultHandler(regs*)+0x7cf>
c001fa13:	83 ec 0c             	sub    esp,0xc
c001fa16:	68 bf d2 02 c0       	push   0xc002d2bf
c001fa1b:	e8 65 34 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001fa20:	83 c4 10             	add    esp,0x10
c001fa23:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001fa26:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fa2b:	74 0d                	je     c001fa3a <Vm::faultHandler(regs*)+0x45d>
c001fa2d:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001fa34:	0f 87 9e 01 00 00    	ja     c001fbd8 <Vm::faultHandler(regs*)+0x5fb>
c001fa3a:	83 ec 0c             	sub    esp,0xc
c001fa3d:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001fa41:	0f b7 db             	movzx  ebx,bx
c001fa44:	50                   	push   eax
c001fa45:	e8 71 f7 ff ff       	call   c001f1bb <Vm::inbv(unsigned short)>
c001fa4a:	83 c4 0c             	add    esp,0xc
c001fa4d:	0f b6 c0             	movzx  eax,al
c001fa50:	50                   	push   eax
c001fa51:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001fa55:	50                   	push   eax
c001fa56:	53                   	push   ebx
c001fa57:	e8 41 fb ff ff       	call   c001f59d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001fa5c:	83 c4 10             	add    esp,0x10
c001fa5f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001fa62:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001fa66:	74 03                	je     c001fa6b <Vm::faultHandler(regs*)+0x48e>
c001fa68:	48                   	dec    eax
c001fa69:	eb 01                	jmp    c001fa6c <Vm::faultHandler(regs*)+0x48f>
c001fa6b:	40                   	inc    eax
c001fa6c:	0f b7 c0             	movzx  eax,ax
c001fa6f:	eb 7f                	jmp    c001faf0 <Vm::faultHandler(regs*)+0x513>
c001fa71:	83 ec 0c             	sub    esp,0xc
c001fa74:	68 f1 d2 02 c0       	push   0xc002d2f1
c001fa79:	e8 07 34 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001fa7e:	83 c4 10             	add    esp,0x10
c001fa81:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001fa84:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fa89:	74 0d                	je     c001fa98 <Vm::faultHandler(regs*)+0x4bb>
c001fa8b:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001fa92:	0f 87 40 01 00 00    	ja     c001fbd8 <Vm::faultHandler(regs*)+0x5fb>
c001fa98:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fa9b:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001fa9f:	0f b7 db             	movzx  ebx,bx
c001faa2:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001faa7:	74 20                	je     c001fac9 <Vm::faultHandler(regs*)+0x4ec>
c001faa9:	ed                   	in     eax,dx
c001faaa:	51                   	push   ecx
c001faab:	50                   	push   eax
c001faac:	56                   	push   esi
c001faad:	53                   	push   ebx
c001faae:	e8 15 fb ff ff       	call   c001f5c8 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001fab3:	83 c4 10             	add    esp,0x10
c001fab6:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001fab9:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001fabd:	74 05                	je     c001fac4 <Vm::faultHandler(regs*)+0x4e7>
c001fabf:	83 e8 04             	sub    eax,0x4
c001fac2:	eb 27                	jmp    c001faeb <Vm::faultHandler(regs*)+0x50e>
c001fac4:	83 c0 04             	add    eax,0x4
c001fac7:	eb 22                	jmp    c001faeb <Vm::faultHandler(regs*)+0x50e>
c001fac9:	66 ed                	in     ax,dx
c001facb:	0f b7 c0             	movzx  eax,ax
c001face:	52                   	push   edx
c001facf:	50                   	push   eax
c001fad0:	56                   	push   esi
c001fad1:	53                   	push   ebx
c001fad2:	e8 db fa ff ff       	call   c001f5b2 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001fad7:	83 c4 10             	add    esp,0x10
c001fada:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001fadd:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001fae1:	74 05                	je     c001fae8 <Vm::faultHandler(regs*)+0x50b>
c001fae3:	83 e8 02             	sub    eax,0x2
c001fae6:	eb 03                	jmp    c001faeb <Vm::faultHandler(regs*)+0x50e>
c001fae8:	83 c0 02             	add    eax,0x2
c001faeb:	25 ff ff 00 00       	and    eax,0xffff
c001faf0:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001faf3:	e9 b1 02 00 00       	jmp    c001fda9 <Vm::faultHandler(regs*)+0x7cc>
c001faf8:	83 ec 0c             	sub    esp,0xc
c001fafb:	4b                   	dec    ebx
c001fafc:	68 f7 d2 02 c0       	push   0xc002d2f7
c001fb01:	e8 7f 33 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001fb06:	83 c4 10             	add    esp,0x10
c001fb09:	80 fb 05             	cmp    bl,0x5
c001fb0c:	77 0a                	ja     c001fb18 <Vm::faultHandler(regs*)+0x53b>
c001fb0e:	0f b6 db             	movzx  ebx,bl
c001fb11:	ff 24 9d 68 d3 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd2c98]
c001fb18:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001fb1c:	eb 1b                	jmp    c001fb39 <Vm::faultHandler(regs*)+0x55c>
c001fb1e:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001fb22:	eb 15                	jmp    c001fb39 <Vm::faultHandler(regs*)+0x55c>
c001fb24:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001fb28:	eb 0f                	jmp    c001fb39 <Vm::faultHandler(regs*)+0x55c>
c001fb2a:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001fb2e:	eb 09                	jmp    c001fb39 <Vm::faultHandler(regs*)+0x55c>
c001fb30:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001fb33:	eb 04                	jmp    c001fb39 <Vm::faultHandler(regs*)+0x55c>
c001fb35:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001fb39:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fb3e:	74 0d                	je     c001fb4d <Vm::faultHandler(regs*)+0x570>
c001fb40:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001fb47:	0f 87 8b 00 00 00    	ja     c001fbd8 <Vm::faultHandler(regs*)+0x5fb>
c001fb4d:	53                   	push   ebx
c001fb4e:	53                   	push   ebx
c001fb4f:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001fb53:	52                   	push   edx
c001fb54:	50                   	push   eax
c001fb55:	e8 0f fa ff ff       	call   c001f569 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001fb5a:	5e                   	pop    esi
c001fb5b:	0f b6 c0             	movzx  eax,al
c001fb5e:	5d                   	pop    ebp
c001fb5f:	50                   	push   eax
c001fb60:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001fb64:	50                   	push   eax
c001fb65:	e8 64 f6 ff ff       	call   c001f1ce <Vm::outbv(unsigned short, unsigned char)>
c001fb6a:	83 c4 10             	add    esp,0x10
c001fb6d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001fb70:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001fb74:	74 03                	je     c001fb79 <Vm::faultHandler(regs*)+0x59c>
c001fb76:	48                   	dec    eax
c001fb77:	eb 01                	jmp    c001fb7a <Vm::faultHandler(regs*)+0x59d>
c001fb79:	40                   	inc    eax
c001fb7a:	0f b7 c0             	movzx  eax,ax
c001fb7d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001fb80:	e9 24 02 00 00       	jmp    c001fda9 <Vm::faultHandler(regs*)+0x7cc>
c001fb85:	83 ec 0c             	sub    esp,0xc
c001fb88:	4b                   	dec    ebx
c001fb89:	68 f7 d2 02 c0       	push   0xc002d2f7
c001fb8e:	e8 f2 32 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001fb93:	83 c4 10             	add    esp,0x10
c001fb96:	80 fb 05             	cmp    bl,0x5
c001fb99:	77 0a                	ja     c001fba5 <Vm::faultHandler(regs*)+0x5c8>
c001fb9b:	0f b6 db             	movzx  ebx,bl
c001fb9e:	ff 24 9d 80 d3 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd2c80]
c001fba5:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001fba9:	eb 1b                	jmp    c001fbc6 <Vm::faultHandler(regs*)+0x5e9>
c001fbab:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001fbaf:	eb 15                	jmp    c001fbc6 <Vm::faultHandler(regs*)+0x5e9>
c001fbb1:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001fbb5:	eb 0f                	jmp    c001fbc6 <Vm::faultHandler(regs*)+0x5e9>
c001fbb7:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001fbbb:	eb 09                	jmp    c001fbc6 <Vm::faultHandler(regs*)+0x5e9>
c001fbbd:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001fbc0:	eb 04                	jmp    c001fbc6 <Vm::faultHandler(regs*)+0x5e9>
c001fbc2:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001fbc6:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001fbc9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fbce:	74 39                	je     c001fc09 <Vm::faultHandler(regs*)+0x62c>
c001fbd0:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001fbd6:	76 31                	jbe    c001fc09 <Vm::faultHandler(regs*)+0x62c>
c001fbd8:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001fbdc:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001fbe0:	51                   	push   ecx
c001fbe1:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001fbe5:	51                   	push   ecx
c001fbe6:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001fbea:	51                   	push   ecx
c001fbeb:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001fbef:	51                   	push   ecx
c001fbf0:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fbf4:	52                   	push   edx
c001fbf5:	50                   	push   eax
c001fbf6:	50                   	push   eax
c001fbf7:	68 c4 d2 02 c0       	push   0xc002d2c4
c001fbfc:	e8 84 32 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001fc01:	83 c4 20             	add    esp,0x20
c001fc04:	e9 fb 01 00 00       	jmp    c001fe04 <Vm::faultHandler(regs*)+0x827>
c001fc09:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001fc0c:	0f b7 d3             	movzx  edx,bx
c001fc0f:	81 e6 00 04 00 00    	and    esi,0x400
c001fc15:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001fc18:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fc1d:	74 1d                	je     c001fc3c <Vm::faultHandler(regs*)+0x65f>
c001fc1f:	51                   	push   ecx
c001fc20:	51                   	push   ecx
c001fc21:	52                   	push   edx
c001fc22:	50                   	push   eax
c001fc23:	e8 64 f9 ff ff       	call   c001f58c <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001fc28:	83 c4 10             	add    esp,0x10
c001fc2b:	89 ea                	mov    edx,ebp
c001fc2d:	ef                   	out    dx,eax
c001fc2e:	85 f6                	test   esi,esi
c001fc30:	74 05                	je     c001fc37 <Vm::faultHandler(regs*)+0x65a>
c001fc32:	83 eb 04             	sub    ebx,0x4
c001fc35:	eb 21                	jmp    c001fc58 <Vm::faultHandler(regs*)+0x67b>
c001fc37:	83 c3 04             	add    ebx,0x4
c001fc3a:	eb 1c                	jmp    c001fc58 <Vm::faultHandler(regs*)+0x67b>
c001fc3c:	51                   	push   ecx
c001fc3d:	51                   	push   ecx
c001fc3e:	52                   	push   edx
c001fc3f:	50                   	push   eax
c001fc40:	e8 35 f9 ff ff       	call   c001f57a <Vm::readWordFromReal(unsigned short, unsigned short)>
c001fc45:	83 c4 10             	add    esp,0x10
c001fc48:	89 ea                	mov    edx,ebp
c001fc4a:	66 ef                	out    dx,ax
c001fc4c:	85 f6                	test   esi,esi
c001fc4e:	74 05                	je     c001fc55 <Vm::faultHandler(regs*)+0x678>
c001fc50:	83 eb 02             	sub    ebx,0x2
c001fc53:	eb 03                	jmp    c001fc58 <Vm::faultHandler(regs*)+0x67b>
c001fc55:	83 c3 02             	add    ebx,0x2
c001fc58:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001fc5e:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001fc61:	e9 43 01 00 00       	jmp    c001fda9 <Vm::faultHandler(regs*)+0x7cc>
c001fc66:	53                   	push   ebx
c001fc67:	53                   	push   ebx
c001fc68:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc6c:	50                   	push   eax
c001fc6d:	68 fd d2 02 c0       	push   0xc002d2fd
c001fc72:	e8 0e 32 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001fc77:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001fc7e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc82:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc85:	e8 31 f5 ff ff       	call   c001f1bb <Vm::inbv(unsigned short)>
c001fc8a:	0f b6 c0             	movzx  eax,al
c001fc8d:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001fc90:	eb 5e                	jmp    c001fcf0 <Vm::faultHandler(regs*)+0x713>
c001fc92:	51                   	push   ecx
c001fc93:	51                   	push   ecx
c001fc94:	53                   	push   ebx
c001fc95:	68 03 d3 02 c0       	push   0xc002d303
c001fc9a:	e8 e6 31 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001fc9f:	83 c4 10             	add    esp,0x10
c001fca2:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fca7:	74 07                	je     c001fcb0 <Vm::faultHandler(regs*)+0x6d3>
c001fca9:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fcad:	ed                   	in     eax,dx
c001fcae:	eb 14                	jmp    c001fcc4 <Vm::faultHandler(regs*)+0x6e7>
c001fcb0:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001fcb3:	66 31 db             	xor    bx,bx
c001fcb6:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001fcb9:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fcbd:	66 ed                	in     ax,dx
c001fcbf:	0f b7 c0             	movzx  eax,ax
c001fcc2:	09 d8                	or     eax,ebx
c001fcc4:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001fcc7:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001fccb:	e9 dc 00 00 00       	jmp    c001fdac <Vm::faultHandler(regs*)+0x7cf>
c001fcd0:	50                   	push   eax
c001fcd1:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fcd4:	53                   	push   ebx
c001fcd5:	68 09 d3 02 c0       	push   0xc002d309
c001fcda:	e8 a6 31 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001fcdf:	58                   	pop    eax
c001fce0:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001fce4:	5a                   	pop    edx
c001fce5:	50                   	push   eax
c001fce6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcea:	50                   	push   eax
c001fceb:	e8 de f4 ff ff       	call   c001f1ce <Vm::outbv(unsigned short, unsigned char)>
c001fcf0:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001fcf4:	e9 85 00 00 00       	jmp    c001fd7e <Vm::faultHandler(regs*)+0x7a1>
c001fcf9:	50                   	push   eax
c001fcfa:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fcfd:	53                   	push   ebx
c001fcfe:	68 12 d3 02 c0       	push   0xc002d312
c001fd03:	e8 7d 31 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001fd08:	83 c4 10             	add    esp,0x10
c001fd0b:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fd0f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fd14:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001fd17:	74 03                	je     c001fd1c <Vm::faultHandler(regs*)+0x73f>
c001fd19:	ef                   	out    dx,eax
c001fd1a:	eb ab                	jmp    c001fcc7 <Vm::faultHandler(regs*)+0x6ea>
c001fd1c:	66 ef                	out    dx,ax
c001fd1e:	eb a7                	jmp    c001fcc7 <Vm::faultHandler(regs*)+0x6ea>
c001fd20:	55                   	push   ebp
c001fd21:	55                   	push   ebp
c001fd22:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fd25:	68 1b d3 02 c0       	push   0xc002d31b
c001fd2a:	e8 56 31 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001fd2f:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001fd36:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001fd3a:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd3d:	e8 79 f4 ff ff       	call   c001f1bb <Vm::inbv(unsigned short)>
c001fd42:	0f b6 c0             	movzx  eax,al
c001fd45:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001fd48:	eb 31                	jmp    c001fd7b <Vm::faultHandler(regs*)+0x79e>
c001fd4a:	56                   	push   esi
c001fd4b:	56                   	push   esi
c001fd4c:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fd4f:	68 21 d3 02 c0       	push   0xc002d321
c001fd54:	e8 2c 31 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001fd59:	83 c4 10             	add    esp,0x10
c001fd5c:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fd5f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fd64:	74 03                	je     c001fd69 <Vm::faultHandler(regs*)+0x78c>
c001fd66:	ed                   	in     eax,dx
c001fd67:	eb 0d                	jmp    c001fd76 <Vm::faultHandler(regs*)+0x799>
c001fd69:	66 ed                	in     ax,dx
c001fd6b:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001fd6e:	0f b7 c0             	movzx  eax,ax
c001fd71:	66 31 d2             	xor    dx,dx
c001fd74:	09 d0                	or     eax,edx
c001fd76:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001fd79:	eb 2e                	jmp    c001fda9 <Vm::faultHandler(regs*)+0x7cc>
c001fd7b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001fd7e:	83 c4 10             	add    esp,0x10
c001fd81:	eb 29                	jmp    c001fdac <Vm::faultHandler(regs*)+0x7cf>
c001fd83:	50                   	push   eax
c001fd84:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fd87:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fd8a:	68 30 d3 02 c0       	push   0xc002d330
c001fd8f:	e8 f1 30 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001fd94:	83 c4 10             	add    esp,0x10
c001fd97:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fd9a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fd9f:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001fda2:	74 03                	je     c001fda7 <Vm::faultHandler(regs*)+0x7ca>
c001fda4:	ef                   	out    dx,eax
c001fda5:	eb 02                	jmp    c001fda9 <Vm::faultHandler(regs*)+0x7cc>
c001fda7:	66 ef                	out    dx,ax
c001fda9:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001fdac:	b0 01                	mov    al,0x1
c001fdae:	eb 56                	jmp    c001fe06 <Vm::faultHandler(regs*)+0x829>
c001fdb0:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001fdb4:	51                   	push   ecx
c001fdb5:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001fdb9:	51                   	push   ecx
c001fdba:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001fdbe:	51                   	push   ecx
c001fdbf:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001fdc3:	51                   	push   ecx
c001fdc4:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fdc8:	52                   	push   edx
c001fdc9:	50                   	push   eax
c001fdca:	50                   	push   eax
c001fdcb:	68 39 d3 02 c0       	push   0xc002d339
c001fdd0:	e8 b0 30 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c001fdd5:	83 c4 20             	add    esp,0x20
c001fdd8:	83 ec 0c             	sub    esp,0xc
c001fddb:	6a 60                	push   0x60
c001fddd:	e8 d9 f3 ff ff       	call   c001f1bb <Vm::inbv(unsigned short)>
c001fde2:	83 c4 10             	add    esp,0x10
c001fde5:	3c 1c                	cmp    al,0x1c
c001fde7:	74 04                	je     c001fded <Vm::faultHandler(regs*)+0x810>
c001fde9:	3c 5a                	cmp    al,0x5a
c001fdeb:	75 eb                	jne    c001fdd8 <Vm::faultHandler(regs*)+0x7fb>
c001fded:	3c 1c                	cmp    al,0x1c
c001fdef:	74 04                	je     c001fdf5 <Vm::faultHandler(regs*)+0x818>
c001fdf1:	3c 5a                	cmp    al,0x5a
c001fdf3:	75 0f                	jne    c001fe04 <Vm::faultHandler(regs*)+0x827>
c001fdf5:	83 ec 0c             	sub    esp,0xc
c001fdf8:	6a 60                	push   0x60
c001fdfa:	e8 bc f3 ff ff       	call   c001f1bb <Vm::inbv(unsigned short)>
c001fdff:	83 c4 10             	add    esp,0x10
c001fe02:	eb e9                	jmp    c001fded <Vm::faultHandler(regs*)+0x810>
c001fe04:	31 c0                	xor    eax,eax
c001fe06:	83 c4 1c             	add    esp,0x1c
c001fe09:	5b                   	pop    ebx
c001fe0a:	5e                   	pop    esi
c001fe0b:	5f                   	pop    edi
c001fe0c:	5d                   	pop    ebp
c001fe0d:	c3                   	ret    

c001fe0e <Vm::fpuInternalTo32(unsigned long long)>:
c001fe0e:	57                   	push   edi
c001fe0f:	56                   	push   esi
c001fe10:	53                   	push   ebx
c001fe11:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe19:	89 d6                	mov    esi,edx
c001fe1b:	89 d7                	mov    edi,edx
c001fe1d:	89 c1                	mov    ecx,eax
c001fe1f:	c1 ef 14             	shr    edi,0x14
c001fe22:	89 d3                	mov    ebx,edx
c001fe24:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001fe2a:	31 d2                	xor    edx,edx
c001fe2c:	89 f8                	mov    eax,edi
c001fe2e:	81 e6 00 00 00 80    	and    esi,0x80000000
c001fe34:	bf ff 00 00 00       	mov    edi,0xff
c001fe39:	05 80 fc ff ff       	add    eax,0xfffffc80
c001fe3e:	83 d2 ff             	adc    edx,0xffffffff
c001fe41:	39 c7                	cmp    edi,eax
c001fe43:	bf 00 00 00 00       	mov    edi,0x0
c001fe48:	19 d7                	sbb    edi,edx
c001fe4a:	72 15                	jb     c001fe61 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001fe4c:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001fe50:	c1 e0 17             	shl    eax,0x17
c001fe53:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001fe59:	09 f1                	or     ecx,esi
c001fe5b:	09 c1                	or     ecx,eax
c001fe5d:	89 cf                	mov    edi,ecx
c001fe5f:	eb 02                	jmp    c001fe63 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001fe61:	31 ff                	xor    edi,edi
c001fe63:	89 f8                	mov    eax,edi
c001fe65:	5b                   	pop    ebx
c001fe66:	5e                   	pop    esi
c001fe67:	5f                   	pop    edi
c001fe68:	c3                   	ret    

c001fe69 <Vm::fpuInternalTo64(unsigned long long)>:
c001fe69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe6d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fe71:	c3                   	ret    

c001fe72 <Vm::fpu32ToInternal(unsigned int)>:
c001fe72:	57                   	push   edi
c001fe73:	31 ff                	xor    edi,edi
c001fe75:	56                   	push   esi
c001fe76:	53                   	push   ebx
c001fe77:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fe7b:	89 cb                	mov    ebx,ecx
c001fe7d:	89 ce                	mov    esi,ecx
c001fe7f:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001fe85:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001fe8b:	c1 e9 17             	shr    ecx,0x17
c001fe8e:	89 f0                	mov    eax,esi
c001fe90:	0f b6 d1             	movzx  edx,cl
c001fe93:	81 c2 80 03 00 00    	add    edx,0x380
c001fe99:	89 d1                	mov    ecx,edx
c001fe9b:	89 fa                	mov    edx,edi
c001fe9d:	c1 e1 14             	shl    ecx,0x14
c001fea0:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001fea4:	c1 e0 1d             	shl    eax,0x1d
c001fea7:	89 d7                	mov    edi,edx
c001fea9:	89 c6                	mov    esi,eax
c001feab:	89 ca                	mov    edx,ecx
c001fead:	89 f0                	mov    eax,esi
c001feaf:	09 fa                	or     edx,edi
c001feb1:	09 da                	or     edx,ebx
c001feb3:	5b                   	pop    ebx
c001feb4:	5e                   	pop    esi
c001feb5:	5f                   	pop    edi
c001feb6:	c3                   	ret    

c001feb7 <Vm::fpu64ToInternal(unsigned long long)>:
c001feb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001febb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001febf:	c3                   	ret    

c001fec0 <Vm::fpuFloatToLong(unsigned long long)>:
c001fec0:	57                   	push   edi
c001fec1:	31 c0                	xor    eax,eax
c001fec3:	56                   	push   esi
c001fec4:	31 d2                	xor    edx,edx
c001fec6:	53                   	push   ebx
c001fec7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fecb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fecf:	89 d9                	mov    ecx,ebx
c001fed1:	c1 e9 14             	shr    ecx,0x14
c001fed4:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001feda:	89 cf                	mov    edi,ecx
c001fedc:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001fee2:	78 33                	js     c001ff17 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001fee4:	89 d9                	mov    ecx,ebx
c001fee6:	89 f0                	mov    eax,esi
c001fee8:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001feee:	81 c9 00 00 10 00    	or     ecx,0x100000
c001fef4:	89 ca                	mov    edx,ecx
c001fef6:	b9 34 00 00 00       	mov    ecx,0x34
c001fefb:	29 f9                	sub    ecx,edi
c001fefd:	0f ad d0             	shrd   eax,edx,cl
c001ff00:	d3 fa                	sar    edx,cl
c001ff02:	f6 c1 20             	test   cl,0x20
c001ff05:	74 05                	je     c001ff0c <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001ff07:	89 d0                	mov    eax,edx
c001ff09:	c1 fa 1f             	sar    edx,0x1f
c001ff0c:	85 db                	test   ebx,ebx
c001ff0e:	79 07                	jns    c001ff17 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ff10:	f7 d8                	neg    eax
c001ff12:	83 d2 00             	adc    edx,0x0
c001ff15:	f7 da                	neg    edx
c001ff17:	5b                   	pop    ebx
c001ff18:	5e                   	pop    esi
c001ff19:	5f                   	pop    edi
c001ff1a:	c3                   	ret    

c001ff1b <Vm::fpuULongToFloat(unsigned long long)>:
c001ff1b:	57                   	push   edi
c001ff1c:	31 c9                	xor    ecx,ecx
c001ff1e:	56                   	push   esi
c001ff1f:	53                   	push   ebx
c001ff20:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ff24:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ff28:	0f ba e7 14          	bt     edi,0x14
c001ff2c:	72 07                	jb     c001ff35 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001ff2e:	01 f6                	add    esi,esi
c001ff30:	11 ff                	adc    edi,edi
c001ff32:	41                   	inc    ecx
c001ff33:	eb f3                	jmp    c001ff28 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001ff35:	89 fa                	mov    edx,edi
c001ff37:	89 f0                	mov    eax,esi
c001ff39:	bb 33 04 00 00       	mov    ebx,0x433
c001ff3e:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001ff44:	29 cb                	sub    ebx,ecx
c001ff46:	89 d9                	mov    ecx,ebx
c001ff48:	5b                   	pop    ebx
c001ff49:	c1 e1 14             	shl    ecx,0x14
c001ff4c:	5e                   	pop    esi
c001ff4d:	09 ca                	or     edx,ecx
c001ff4f:	5f                   	pop    edi
c001ff50:	c3                   	ret    

c001ff51 <Vm::fpuLongToFloat(long long)>:
c001ff51:	56                   	push   esi
c001ff52:	31 c0                	xor    eax,eax
c001ff54:	53                   	push   ebx
c001ff55:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ff59:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ff5d:	39 c8                	cmp    eax,ecx
c001ff5f:	19 d8                	sbb    eax,ebx
c001ff61:	7d 04                	jge    c001ff67 <Vm::fpuLongToFloat(long long)+0x16>
c001ff63:	31 f6                	xor    esi,esi
c001ff65:	eb 0c                	jmp    c001ff73 <Vm::fpuLongToFloat(long long)+0x22>
c001ff67:	f7 d9                	neg    ecx
c001ff69:	be 01 00 00 00       	mov    esi,0x1
c001ff6e:	83 d3 00             	adc    ebx,0x0
c001ff71:	f7 db                	neg    ebx
c001ff73:	31 c0                	xor    eax,eax
c001ff75:	0f ba e3 14          	bt     ebx,0x14
c001ff79:	72 07                	jb     c001ff82 <Vm::fpuLongToFloat(long long)+0x31>
c001ff7b:	01 c9                	add    ecx,ecx
c001ff7d:	11 db                	adc    ebx,ebx
c001ff7f:	40                   	inc    eax
c001ff80:	eb f3                	jmp    c001ff75 <Vm::fpuLongToFloat(long long)+0x24>
c001ff82:	ba 33 04 00 00       	mov    edx,0x433
c001ff87:	29 c2                	sub    edx,eax
c001ff89:	89 c8                	mov    eax,ecx
c001ff8b:	c1 e2 14             	shl    edx,0x14
c001ff8e:	89 d9                	mov    ecx,ebx
c001ff90:	89 f3                	mov    ebx,esi
c001ff92:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001ff98:	09 ca                	or     edx,ecx
c001ff9a:	84 db                	test   bl,bl
c001ff9c:	74 06                	je     c001ffa4 <Vm::fpuLongToFloat(long long)+0x53>
c001ff9e:	81 ca 00 00 00 80    	or     edx,0x80000000
c001ffa4:	5b                   	pop    ebx
c001ffa5:	5e                   	pop    esi
c001ffa6:	c3                   	ret    

c001ffa7 <Vm::fpuGet0()>:
c001ffa7:	31 c0                	xor    eax,eax
c001ffa9:	31 d2                	xor    edx,edx
c001ffab:	c3                   	ret    

c001ffac <Vm::fpuGet1()>:
c001ffac:	b8 01 00 00 00       	mov    eax,0x1
c001ffb1:	31 d2                	xor    edx,edx
c001ffb3:	c3                   	ret    

c001ffb4 <Vm::fpuGetPi()>:
c001ffb4:	b8 03 00 00 00       	mov    eax,0x3
c001ffb9:	31 d2                	xor    edx,edx
c001ffbb:	c3                   	ret    

c001ffbc <Vm::fpuGetLog2E()>:
c001ffbc:	83 ec 18             	sub    esp,0x18
c001ffbf:	68 98 d3 02 c0       	push   0xc002d398
c001ffc4:	e8 a4 a8 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c001ffc9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ffce:	31 d2                	xor    edx,edx
c001ffd0:	83 c4 1c             	add    esp,0x1c
c001ffd3:	c3                   	ret    

c001ffd4 <Vm::fpuGetLogE2()>:
c001ffd4:	83 ec 18             	sub    esp,0x18
c001ffd7:	68 a4 d3 02 c0       	push   0xc002d3a4
c001ffdc:	e8 8c a8 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c001ffe1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ffe6:	31 d2                	xor    edx,edx
c001ffe8:	83 c4 1c             	add    esp,0x1c
c001ffeb:	c3                   	ret    

c001ffec <Vm::fpuGetLog210()>:
c001ffec:	83 ec 18             	sub    esp,0x18
c001ffef:	68 b0 d3 02 c0       	push   0xc002d3b0
c001fff4:	e8 74 a8 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c001fff9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fffe:	31 d2                	xor    edx,edx
c0020000:	83 c4 1c             	add    esp,0x1c
c0020003:	c3                   	ret    

c0020004 <Vm::fpuGetLog102()>:
c0020004:	83 ec 18             	sub    esp,0x18
c0020007:	68 bd d3 02 c0       	push   0xc002d3bd
c002000c:	e8 5c a8 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c0020011:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0020016:	31 d2                	xor    edx,edx
c0020018:	83 c4 1c             	add    esp,0x1c
c002001b:	c3                   	ret    

c002001c <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c002001c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020020:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0020024:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020028:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c002002c:	0f 92 c0             	setb   al
c002002f:	c3                   	ret    

c0020030 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c0020030:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020038:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c002003c:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c0020040:	09 c2                	or     edx,eax
c0020042:	0f 94 c0             	sete   al
c0020045:	c3                   	ret    

c0020046 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c0020046:	57                   	push   edi
c0020047:	56                   	push   esi
c0020048:	53                   	push   ebx
c0020049:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002004d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0020051:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0020055:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020059:	57                   	push   edi
c002005a:	56                   	push   esi
c002005b:	53                   	push   ebx
c002005c:	51                   	push   ecx
c002005d:	e8 ce ff ff ff       	call   c0020030 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c0020062:	83 c4 10             	add    esp,0x10
c0020065:	88 c2                	mov    dl,al
c0020067:	31 c0                	xor    eax,eax
c0020069:	84 d2                	test   dl,dl
c002006b:	75 0c                	jne    c0020079 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c002006d:	57                   	push   edi
c002006e:	56                   	push   esi
c002006f:	53                   	push   ebx
c0020070:	51                   	push   ecx
c0020071:	e8 a6 ff ff ff       	call   c002001c <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c0020076:	83 c4 10             	add    esp,0x10
c0020079:	83 e0 01             	and    eax,0x1
c002007c:	5b                   	pop    ebx
c002007d:	88 c1                	mov    cl,al
c002007f:	83 e2 01             	and    edx,0x1
c0020082:	a0 41 26 03 c0       	mov    al,ds:0xc0032641
c0020087:	c1 e2 06             	shl    edx,0x6
c002008a:	83 e0 ba             	and    eax,0xffffffba
c002008d:	5e                   	pop    esi
c002008e:	09 c8                	or     eax,ecx
c0020090:	5f                   	pop    edi
c0020091:	09 d0                	or     eax,edx
c0020093:	a2 41 26 03 c0       	mov    ds:0xc0032641,al
c0020098:	c3                   	ret    

c0020099 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c0020099:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002009d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00200a1:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00200a5:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c00200a9:	c3                   	ret    

c00200aa <Vm::fpuAbs(unsigned long long)>:
c00200aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00200b2:	c3                   	ret    

c00200b3 <Vm::fpuChs(unsigned long long)>:
c00200b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200b7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00200bb:	f7 d8                	neg    eax
c00200bd:	83 d2 00             	adc    edx,0x0
c00200c0:	f7 da                	neg    edx
c00200c2:	c3                   	ret    

c00200c3 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c00200c3:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c00200c7:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c00200cc:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c00200d0:	eb c7                	jmp    c0020099 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c00200d2 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c00200d2:	53                   	push   ebx
c00200d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00200d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00200db:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00200df:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00200e3:	0f af ca             	imul   ecx,edx
c00200e6:	0f af d8             	imul   ebx,eax
c00200e9:	f7 e2                	mul    edx
c00200eb:	01 d9                	add    ecx,ebx
c00200ed:	5b                   	pop    ebx
c00200ee:	01 ca                	add    edx,ecx
c00200f0:	c3                   	ret    

c00200f1 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c00200f1:	83 ec 0c             	sub    esp,0xc
c00200f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020100:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020104:	e8 6b 72 00 00       	call   c0027374 <__udivdi3>
c0020109:	83 c4 1c             	add    esp,0x1c
c002010c:	c3                   	ret    

c002010d <Vm::fpuSquare(unsigned long long)>:
c002010d:	50                   	push   eax
c002010e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020112:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020116:	52                   	push   edx
c0020117:	50                   	push   eax
c0020118:	52                   	push   edx
c0020119:	50                   	push   eax
c002011a:	e8 b3 ff ff ff       	call   c00200d2 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002011f:	83 c4 14             	add    esp,0x14
c0020122:	c3                   	ret    

c0020123 <Vm::fpuGetReg(int)>:
c0020123:	83 ec 0c             	sub    esp,0xc
c0020126:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c002012b:	76 10                	jbe    c002013d <Vm::fpuGetReg(int)+0x1a>
c002012d:	83 ec 0c             	sub    esp,0xc
c0020130:	68 ca d3 02 c0       	push   0xc002d3ca
c0020135:	e8 33 a7 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c002013a:	83 c4 10             	add    esp,0x10
c002013d:	a0 41 26 03 c0       	mov    al,ds:0xc0032641
c0020142:	b9 08 00 00 00       	mov    ecx,0x8
c0020147:	c0 e8 03             	shr    al,0x3
c002014a:	83 e0 07             	and    eax,0x7
c002014d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020151:	99                   	cdq    
c0020152:	f7 f9                	idiv   ecx
c0020154:	8b 04 d5 44 26 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcd9bc]
c002015b:	8b 14 d5 48 26 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcd9b8]
c0020162:	83 c4 0c             	add    esp,0xc
c0020165:	c3                   	ret    

c0020166 <Vm::fpuSetReg(int, unsigned long long)>:
c0020166:	57                   	push   edi
c0020167:	56                   	push   esi
c0020168:	52                   	push   edx
c0020169:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002016d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0020171:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0020176:	76 10                	jbe    c0020188 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c0020178:	83 ec 0c             	sub    esp,0xc
c002017b:	68 dd d3 02 c0       	push   0xc002d3dd
c0020180:	e8 e8 a6 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c0020185:	83 c4 10             	add    esp,0x10
c0020188:	a0 41 26 03 c0       	mov    al,ds:0xc0032641
c002018d:	b9 08 00 00 00       	mov    ecx,0x8
c0020192:	c0 e8 03             	shr    al,0x3
c0020195:	83 e0 07             	and    eax,0x7
c0020198:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002019c:	99                   	cdq    
c002019d:	f7 f9                	idiv   ecx
c002019f:	89 34 d5 44 26 03 c0 	mov    DWORD PTR [edx*8-0x3ffcd9bc],esi
c00201a6:	89 3c d5 48 26 03 c0 	mov    DWORD PTR [edx*8-0x3ffcd9b8],edi
c00201ad:	58                   	pop    eax
c00201ae:	5e                   	pop    esi
c00201af:	5f                   	pop    edi
c00201b0:	c3                   	ret    

c00201b1 <Vm::fpuPush(unsigned long long)>:
c00201b1:	a0 41 26 03 c0       	mov    al,ds:0xc0032641
c00201b6:	c0 e8 03             	shr    al,0x3
c00201b9:	83 e0 07             	and    eax,0x7
c00201bc:	83 c0 07             	add    eax,0x7
c00201bf:	88 c2                	mov    dl,al
c00201c1:	83 e0 07             	and    eax,0x7
c00201c4:	83 e2 07             	and    edx,0x7
c00201c7:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c00201ce:	8a 15 41 26 03 c0    	mov    dl,BYTE PTR ds:0xc0032641
c00201d4:	83 e2 c7             	and    edx,0xffffffc7
c00201d7:	09 ca                	or     edx,ecx
c00201d9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00201dd:	88 15 41 26 03 c0    	mov    BYTE PTR ds:0xc0032641,dl
c00201e3:	89 0c c5 48 26 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd9b8],ecx
c00201ea:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00201ee:	89 14 c5 44 26 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd9bc],edx
c00201f5:	a1 84 26 03 c0       	mov    eax,ds:0xc0032684
c00201fa:	83 f8 08             	cmp    eax,0x8
c00201fd:	75 08                	jne    c0020207 <Vm::fpuPush(unsigned long long)+0x56>
c00201ff:	80 0d 40 26 03 c0 40 	or     BYTE PTR ds:0xc0032640,0x40
c0020206:	c3                   	ret    
c0020207:	40                   	inc    eax
c0020208:	a3 84 26 03 c0       	mov    ds:0xc0032684,eax
c002020d:	c3                   	ret    

c002020e <Vm::fpuPop()>:
c002020e:	8a 0d 41 26 03 c0    	mov    cl,BYTE PTR ds:0xc0032641
c0020214:	53                   	push   ebx
c0020215:	c0 e9 03             	shr    cl,0x3
c0020218:	8a 1d 41 26 03 c0    	mov    bl,BYTE PTR ds:0xc0032641
c002021e:	83 e1 07             	and    ecx,0x7
c0020221:	83 e3 c7             	and    ebx,0xffffffc7
c0020224:	8b 04 cd 44 26 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcd9bc]
c002022b:	8b 14 cd 48 26 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcd9b8]
c0020232:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c0020239:	83 e1 38             	and    ecx,0x38
c002023c:	09 d9                	or     ecx,ebx
c002023e:	88 0d 41 26 03 c0    	mov    BYTE PTR ds:0xc0032641,cl
c0020244:	8b 0d 84 26 03 c0    	mov    ecx,DWORD PTR ds:0xc0032684
c002024a:	85 c9                	test   ecx,ecx
c002024c:	74 09                	je     c0020257 <Vm::fpuPop()+0x49>
c002024e:	49                   	dec    ecx
c002024f:	89 0d 84 26 03 c0    	mov    DWORD PTR ds:0xc0032684,ecx
c0020255:	eb 07                	jmp    c002025e <Vm::fpuPop()+0x50>
c0020257:	80 0d 40 26 03 c0 40 	or     BYTE PTR ds:0xc0032640,0x40
c002025e:	5b                   	pop    ebx
c002025f:	c3                   	ret    

c0020260 <Vm::x87Handler(regs*)>:
c0020260:	55                   	push   ebp
c0020261:	57                   	push   edi
c0020262:	56                   	push   esi
c0020263:	53                   	push   ebx
c0020264:	83 ec 1c             	sub    esp,0x1c
c0020267:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002026b:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c0020270:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0020273:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c002027b:	8d 44 24 0b          	lea    eax,[esp+0xb]
c002027f:	50                   	push   eax
c0020280:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0020284:	50                   	push   eax
c0020285:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020289:	50                   	push   eax
c002028a:	53                   	push   ebx
c002028b:	e8 aa 9c ff ff       	call   c0019f3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0020290:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0020293:	83 c4 10             	add    esp,0x10
c0020296:	89 c6                	mov    esi,eax
c0020298:	80 fa d9             	cmp    dl,0xd9
c002029b:	0f 85 52 01 00 00    	jne    c00203f3 <Vm::x87Handler(regs*)+0x193>
c00202a1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00202a5:	8d 50 20             	lea    edx,[eax+0x20]
c00202a8:	80 fa 0e             	cmp    dl,0xe
c00202ab:	0f 87 86 00 00 00    	ja     c0020337 <Vm::x87Handler(regs*)+0xd7>
c00202b1:	0f b6 d2             	movzx  edx,dl
c00202b4:	ff 24 95 f0 d3 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd2c10]
c00202bb:	e8 e7 fc ff ff       	call   c001ffa7 <Vm::fpuGet0()>
c00202c0:	eb 05                	jmp    c00202c7 <Vm::x87Handler(regs*)+0x67>
c00202c2:	e8 e5 fc ff ff       	call   c001ffac <Vm::fpuGet1()>
c00202c7:	57                   	push   edi
c00202c8:	57                   	push   edi
c00202c9:	52                   	push   edx
c00202ca:	50                   	push   eax
c00202cb:	e8 e1 fe ff ff       	call   c00201b1 <Vm::fpuPush(unsigned long long)>
c00202d0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00202d4:	83 c4 10             	add    esp,0x10
c00202d7:	b0 01                	mov    al,0x1
c00202d9:	e9 e3 09 00 00       	jmp    c0020cc1 <Vm::x87Handler(regs*)+0xa61>
c00202de:	83 ec 0c             	sub    esp,0xc
c00202e1:	6a 00                	push   0x0
c00202e3:	e8 3b fe ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c00202e8:	59                   	pop    ecx
c00202e9:	5e                   	pop    esi
c00202ea:	52                   	push   edx
c00202eb:	50                   	push   eax
c00202ec:	e8 c2 fd ff ff       	call   c00200b3 <Vm::fpuChs(unsigned long long)>
c00202f1:	eb 13                	jmp    c0020306 <Vm::x87Handler(regs*)+0xa6>
c00202f3:	83 ec 0c             	sub    esp,0xc
c00202f6:	6a 00                	push   0x0
c00202f8:	e8 26 fe ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c00202fd:	5f                   	pop    edi
c00202fe:	5d                   	pop    ebp
c00202ff:	52                   	push   edx
c0020300:	50                   	push   eax
c0020301:	e8 a4 fd ff ff       	call   c00200aa <Vm::fpuAbs(unsigned long long)>
c0020306:	83 c4 0c             	add    esp,0xc
c0020309:	52                   	push   edx
c002030a:	50                   	push   eax
c002030b:	6a 00                	push   0x0
c002030d:	e8 54 fe ff ff       	call   c0020166 <Vm::fpuSetReg(int, unsigned long long)>
c0020312:	eb bc                	jmp    c00202d0 <Vm::x87Handler(regs*)+0x70>
c0020314:	e8 d3 fc ff ff       	call   c001ffec <Vm::fpuGetLog210()>
c0020319:	eb ac                	jmp    c00202c7 <Vm::x87Handler(regs*)+0x67>
c002031b:	e8 9c fc ff ff       	call   c001ffbc <Vm::fpuGetLog2E()>
c0020320:	eb a5                	jmp    c00202c7 <Vm::x87Handler(regs*)+0x67>
c0020322:	e8 8d fc ff ff       	call   c001ffb4 <Vm::fpuGetPi()>
c0020327:	eb 9e                	jmp    c00202c7 <Vm::x87Handler(regs*)+0x67>
c0020329:	e8 d6 fc ff ff       	call   c0020004 <Vm::fpuGetLog102()>
c002032e:	eb 97                	jmp    c00202c7 <Vm::x87Handler(regs*)+0x67>
c0020330:	e8 9f fc ff ff       	call   c001ffd4 <Vm::fpuGetLogE2()>
c0020335:	eb 90                	jmp    c00202c7 <Vm::x87Handler(regs*)+0x67>
c0020337:	8d 50 40             	lea    edx,[eax+0x40]
c002033a:	80 fa 07             	cmp    dl,0x7
c002033d:	77 15                	ja     c0020354 <Vm::x87Handler(regs*)+0xf4>
c002033f:	83 ec 0c             	sub    esp,0xc
c0020342:	2d c0 00 00 00       	sub    eax,0xc0
c0020347:	50                   	push   eax
c0020348:	e8 d6 fd ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c002034d:	59                   	pop    ecx
c002034e:	5e                   	pop    esi
c002034f:	e9 75 ff ff ff       	jmp    c00202c9 <Vm::x87Handler(regs*)+0x69>
c0020354:	8d 50 38             	lea    edx,[eax+0x38]
c0020357:	80 fa 07             	cmp    dl,0x7
c002035a:	77 3c                	ja     c0020398 <Vm::x87Handler(regs*)+0x138>
c002035c:	83 ec 0c             	sub    esp,0xc
c002035f:	2d c8 00 00 00       	sub    eax,0xc8
c0020364:	50                   	push   eax
c0020365:	e8 b9 fd ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c002036a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020371:	89 c6                	mov    esi,eax
c0020373:	89 d7                	mov    edi,edx
c0020375:	e8 a9 fd ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c002037a:	83 c4 0c             	add    esp,0xc
c002037d:	52                   	push   edx
c002037e:	50                   	push   eax
c002037f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020383:	2d c8 00 00 00       	sub    eax,0xc8
c0020388:	50                   	push   eax
c0020389:	e8 d8 fd ff ff       	call   c0020166 <Vm::fpuSetReg(int, unsigned long long)>
c002038e:	83 c4 0c             	add    esp,0xc
c0020391:	57                   	push   edi
c0020392:	56                   	push   esi
c0020393:	e9 73 ff ff ff       	jmp    c002030b <Vm::x87Handler(regs*)+0xab>
c0020398:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002039c:	84 d2                	test   dl,dl
c002039e:	75 0f                	jne    c00203af <Vm::x87Handler(regs*)+0x14f>
c00203a0:	83 ec 0c             	sub    esp,0xc
c00203a3:	ff 36                	push   DWORD PTR [esi]
c00203a5:	e8 c8 fa ff ff       	call   c001fe72 <Vm::fpu32ToInternal(unsigned int)>
c00203aa:	e9 bf 00 00 00       	jmp    c002046e <Vm::x87Handler(regs*)+0x20e>
c00203af:	80 fa 03             	cmp    dl,0x3
c00203b2:	75 13                	jne    c00203c7 <Vm::x87Handler(regs*)+0x167>
c00203b4:	e8 55 fe ff ff       	call   c002020e <Vm::fpuPop()>
c00203b9:	55                   	push   ebp
c00203ba:	55                   	push   ebp
c00203bb:	52                   	push   edx
c00203bc:	50                   	push   eax
c00203bd:	e8 4c fa ff ff       	call   c001fe0e <Vm::fpuInternalTo32(unsigned long long)>
c00203c2:	e9 88 00 00 00       	jmp    c002044f <Vm::x87Handler(regs*)+0x1ef>
c00203c7:	80 fa 05             	cmp    dl,0x5
c00203ca:	75 0e                	jne    c00203da <Vm::x87Handler(regs*)+0x17a>
c00203cc:	66 8b 06             	mov    ax,WORD PTR [esi]
c00203cf:	66 a3 42 26 03 c0    	mov    ds:0xc0032642,ax
c00203d5:	e9 df 00 00 00       	jmp    c00204b9 <Vm::x87Handler(regs*)+0x259>
c00203da:	31 c0                	xor    eax,eax
c00203dc:	80 fa 07             	cmp    dl,0x7
c00203df:	0f 85 dc 08 00 00    	jne    c0020cc1 <Vm::x87Handler(regs*)+0xa61>
c00203e5:	66 a1 42 26 03 c0    	mov    ax,ds:0xc0032642
c00203eb:	66 89 06             	mov    WORD PTR [esi],ax
c00203ee:	e9 c6 00 00 00       	jmp    c00204b9 <Vm::x87Handler(regs*)+0x259>
c00203f3:	80 fa d8             	cmp    dl,0xd8
c00203f6:	0f 84 c9 00 00 00    	je     c00204c5 <Vm::x87Handler(regs*)+0x265>
c00203fc:	80 fa dc             	cmp    dl,0xdc
c00203ff:	0f 84 0d 02 00 00    	je     c0020612 <Vm::x87Handler(regs*)+0x3b2>
c0020405:	80 fa de             	cmp    dl,0xde
c0020408:	0f 84 cd 02 00 00    	je     c00206db <Vm::x87Handler(regs*)+0x47b>
c002040e:	80 fa dd             	cmp    dl,0xdd
c0020411:	0f 84 5f 04 00 00    	je     c0020876 <Vm::x87Handler(regs*)+0x616>
c0020417:	80 fa da             	cmp    dl,0xda
c002041a:	0f 84 24 05 00 00    	je     c0020944 <Vm::x87Handler(regs*)+0x6e4>
c0020420:	80 fa df             	cmp    dl,0xdf
c0020423:	0f 84 68 05 00 00    	je     c0020991 <Vm::x87Handler(regs*)+0x731>
c0020429:	31 c0                	xor    eax,eax
c002042b:	80 fa db             	cmp    dl,0xdb
c002042e:	0f 85 8d 08 00 00    	jne    c0020cc1 <Vm::x87Handler(regs*)+0xa61>
c0020434:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020438:	80 fa 03             	cmp    dl,0x3
c002043b:	0f 85 70 06 00 00    	jne    c0020ab1 <Vm::x87Handler(regs*)+0x851>
c0020441:	e8 c8 fd ff ff       	call   c002020e <Vm::fpuPop()>
c0020446:	55                   	push   ebp
c0020447:	55                   	push   ebp
c0020448:	52                   	push   edx
c0020449:	50                   	push   eax
c002044a:	e8 71 fa ff ff       	call   c001fec0 <Vm::fpuFloatToLong(unsigned long long)>
c002044f:	83 c4 10             	add    esp,0x10
c0020452:	89 06                	mov    DWORD PTR [esi],eax
c0020454:	eb 63                	jmp    c00204b9 <Vm::x87Handler(regs*)+0x259>
c0020456:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002045a:	84 d2                	test   dl,dl
c002045c:	0f 85 e6 05 00 00    	jne    c0020a48 <Vm::x87Handler(regs*)+0x7e8>
c0020462:	57                   	push   edi
c0020463:	57                   	push   edi
c0020464:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020467:	ff 36                	push   DWORD PTR [esi]
c0020469:	e8 49 fa ff ff       	call   c001feb7 <Vm::fpu64ToInternal(unsigned long long)>
c002046e:	5e                   	pop    esi
c002046f:	5f                   	pop    edi
c0020470:	52                   	push   edx
c0020471:	50                   	push   eax
c0020472:	e8 3a fd ff ff       	call   c00201b1 <Vm::fpuPush(unsigned long long)>
c0020477:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002047b:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c002047e:	e9 51 fe ff ff       	jmp    c00202d4 <Vm::x87Handler(regs*)+0x74>
c0020483:	80 fa 03             	cmp    dl,0x3
c0020486:	0f 85 d7 06 00 00    	jne    c0020b63 <Vm::x87Handler(regs*)+0x903>
c002048c:	57                   	push   edi
c002048d:	57                   	push   edi
c002048e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020491:	ff 36                	push   DWORD PTR [esi]
c0020493:	e8 1f fa ff ff       	call   c001feb7 <Vm::fpu64ToInternal(unsigned long long)>
c0020498:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002049f:	89 c6                	mov    esi,eax
c00204a1:	89 d7                	mov    edi,edx
c00204a3:	e8 7b fc ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c00204a8:	57                   	push   edi
c00204a9:	56                   	push   esi
c00204aa:	52                   	push   edx
c00204ab:	50                   	push   eax
c00204ac:	e8 95 fb ff ff       	call   c0020046 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00204b1:	83 c4 20             	add    esp,0x20
c00204b4:	e8 55 fd ff ff       	call   c002020e <Vm::fpuPop()>
c00204b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00204bd:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00204c0:	e9 12 fe ff ff       	jmp    c00202d7 <Vm::x87Handler(regs*)+0x77>
c00204c5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00204c9:	8d 50 40             	lea    edx,[eax+0x40]
c00204cc:	80 fa 07             	cmp    dl,0x7
c00204cf:	77 29                	ja     c00204fa <Vm::x87Handler(regs*)+0x29a>
c00204d1:	83 ec 0c             	sub    esp,0xc
c00204d4:	2d c0 00 00 00       	sub    eax,0xc0
c00204d9:	50                   	push   eax
c00204da:	e8 44 fc ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c00204df:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204e6:	89 c6                	mov    esi,eax
c00204e8:	89 d7                	mov    edi,edx
c00204ea:	e8 34 fc ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c00204ef:	57                   	push   edi
c00204f0:	56                   	push   esi
c00204f1:	52                   	push   edx
c00204f2:	50                   	push   eax
c00204f3:	e8 a1 fb ff ff       	call   c0020099 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00204f8:	eb 2f                	jmp    c0020529 <Vm::x87Handler(regs*)+0x2c9>
c00204fa:	8d 50 38             	lea    edx,[eax+0x38]
c00204fd:	80 fa 07             	cmp    dl,0x7
c0020500:	77 2f                	ja     c0020531 <Vm::x87Handler(regs*)+0x2d1>
c0020502:	83 ec 0c             	sub    esp,0xc
c0020505:	2d c8 00 00 00       	sub    eax,0xc8
c002050a:	50                   	push   eax
c002050b:	e8 13 fc ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c0020510:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020517:	89 c6                	mov    esi,eax
c0020519:	89 d7                	mov    edi,edx
c002051b:	e8 03 fc ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c0020520:	57                   	push   edi
c0020521:	56                   	push   esi
c0020522:	52                   	push   edx
c0020523:	50                   	push   eax
c0020524:	e8 a9 fb ff ff       	call   c00200d2 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020529:	83 c4 1c             	add    esp,0x1c
c002052c:	e9 d8 fd ff ff       	jmp    c0020309 <Vm::x87Handler(regs*)+0xa9>
c0020531:	8d 50 30             	lea    edx,[eax+0x30]
c0020534:	80 fa 07             	cmp    dl,0x7
c0020537:	77 0d                	ja     c0020546 <Vm::x87Handler(regs*)+0x2e6>
c0020539:	83 ec 0c             	sub    esp,0xc
c002053c:	2d d0 00 00 00       	sub    eax,0xd0
c0020541:	e9 99 03 00 00       	jmp    c00208df <Vm::x87Handler(regs*)+0x67f>
c0020546:	8d 50 28             	lea    edx,[eax+0x28]
c0020549:	80 fa 07             	cmp    dl,0x7
c002054c:	77 0d                	ja     c002055b <Vm::x87Handler(regs*)+0x2fb>
c002054e:	83 ec 0c             	sub    esp,0xc
c0020551:	2d d8 00 00 00       	sub    eax,0xd8
c0020556:	e9 c0 03 00 00       	jmp    c002091b <Vm::x87Handler(regs*)+0x6bb>
c002055b:	8d 50 20             	lea    edx,[eax+0x20]
c002055e:	80 fa 07             	cmp    dl,0x7
c0020561:	77 1b                	ja     c002057e <Vm::x87Handler(regs*)+0x31e>
c0020563:	83 ec 0c             	sub    esp,0xc
c0020566:	2d e0 00 00 00       	sub    eax,0xe0
c002056b:	50                   	push   eax
c002056c:	e8 b2 fb ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c0020571:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020578:	89 c6                	mov    esi,eax
c002057a:	89 d7                	mov    edi,edx
c002057c:	eb 22                	jmp    c00205a0 <Vm::x87Handler(regs*)+0x340>
c002057e:	8d 50 18             	lea    edx,[eax+0x18]
c0020581:	80 fa 07             	cmp    dl,0x7
c0020584:	77 2d                	ja     c00205b3 <Vm::x87Handler(regs*)+0x353>
c0020586:	83 ec 0c             	sub    esp,0xc
c0020589:	6a 00                	push   0x0
c002058b:	e8 93 fb ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c0020590:	89 c6                	mov    esi,eax
c0020592:	89 d7                	mov    edi,edx
c0020594:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020598:	2d e8 00 00 00       	sub    eax,0xe8
c002059d:	89 04 24             	mov    DWORD PTR [esp],eax
c00205a0:	e8 7e fb ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c00205a5:	57                   	push   edi
c00205a6:	56                   	push   esi
c00205a7:	52                   	push   edx
c00205a8:	50                   	push   eax
c00205a9:	e8 15 fb ff ff       	call   c00200c3 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00205ae:	e9 76 ff ff ff       	jmp    c0020529 <Vm::x87Handler(regs*)+0x2c9>
c00205b3:	8d 50 10             	lea    edx,[eax+0x10]
c00205b6:	80 fa 07             	cmp    dl,0x7
c00205b9:	77 1b                	ja     c00205d6 <Vm::x87Handler(regs*)+0x376>
c00205bb:	83 ec 0c             	sub    esp,0xc
c00205be:	2d f0 00 00 00       	sub    eax,0xf0
c00205c3:	50                   	push   eax
c00205c4:	e8 5a fb ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c00205c9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00205d0:	89 c6                	mov    esi,eax
c00205d2:	89 d7                	mov    edi,edx
c00205d4:	eb 22                	jmp    c00205f8 <Vm::x87Handler(regs*)+0x398>
c00205d6:	3c f7                	cmp    al,0xf7
c00205d8:	0f 86 d1 03 00 00    	jbe    c00209af <Vm::x87Handler(regs*)+0x74f>
c00205de:	83 ec 0c             	sub    esp,0xc
c00205e1:	6a 00                	push   0x0
c00205e3:	e8 3b fb ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c00205e8:	89 c6                	mov    esi,eax
c00205ea:	89 d7                	mov    edi,edx
c00205ec:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00205f0:	2d f8 00 00 00       	sub    eax,0xf8
c00205f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00205f8:	e8 26 fb ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c00205fd:	57                   	push   edi
c00205fe:	56                   	push   esi
c00205ff:	52                   	push   edx
c0020600:	50                   	push   eax
c0020601:	e8 eb fa ff ff       	call   c00200f1 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020606:	83 c4 1c             	add    esp,0x1c
c0020609:	52                   	push   edx
c002060a:	50                   	push   eax
c002060b:	6a 00                	push   0x0
c002060d:	e9 51 02 00 00       	jmp    c0020863 <Vm::x87Handler(regs*)+0x603>
c0020612:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020616:	8d 50 40             	lea    edx,[eax+0x40]
c0020619:	80 fa 07             	cmp    dl,0x7
c002061c:	77 37                	ja     c0020655 <Vm::x87Handler(regs*)+0x3f5>
c002061e:	83 ec 0c             	sub    esp,0xc
c0020621:	2d c0 00 00 00       	sub    eax,0xc0
c0020626:	50                   	push   eax
c0020627:	e8 f7 fa ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c002062c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020633:	89 c6                	mov    esi,eax
c0020635:	89 d7                	mov    edi,edx
c0020637:	e8 e7 fa ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c002063c:	57                   	push   edi
c002063d:	56                   	push   esi
c002063e:	52                   	push   edx
c002063f:	50                   	push   eax
c0020640:	e8 54 fa ff ff       	call   c0020099 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020645:	83 c4 1c             	add    esp,0x1c
c0020648:	52                   	push   edx
c0020649:	50                   	push   eax
c002064a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002064e:	2d c0 00 00 00       	sub    eax,0xc0
c0020653:	eb 3d                	jmp    c0020692 <Vm::x87Handler(regs*)+0x432>
c0020655:	8d 50 38             	lea    edx,[eax+0x38]
c0020658:	80 fa 07             	cmp    dl,0x7
c002065b:	77 3b                	ja     c0020698 <Vm::x87Handler(regs*)+0x438>
c002065d:	83 ec 0c             	sub    esp,0xc
c0020660:	2d c8 00 00 00       	sub    eax,0xc8
c0020665:	50                   	push   eax
c0020666:	e8 b8 fa ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c002066b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020672:	89 c6                	mov    esi,eax
c0020674:	89 d7                	mov    edi,edx
c0020676:	e8 a8 fa ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c002067b:	57                   	push   edi
c002067c:	56                   	push   esi
c002067d:	52                   	push   edx
c002067e:	50                   	push   eax
c002067f:	e8 4e fa ff ff       	call   c00200d2 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020684:	83 c4 1c             	add    esp,0x1c
c0020687:	52                   	push   edx
c0020688:	50                   	push   eax
c0020689:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002068d:	2d c8 00 00 00       	sub    eax,0xc8
c0020692:	50                   	push   eax
c0020693:	e9 75 fc ff ff       	jmp    c002030d <Vm::x87Handler(regs*)+0xad>
c0020698:	83 c0 18             	add    eax,0x18
c002069b:	3c 07                	cmp    al,0x7
c002069d:	0f 87 3b 04 00 00    	ja     c0020ade <Vm::x87Handler(regs*)+0x87e>
c00206a3:	83 ec 0c             	sub    esp,0xc
c00206a6:	6a 00                	push   0x0
c00206a8:	e8 76 fa ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c00206ad:	89 c6                	mov    esi,eax
c00206af:	89 d7                	mov    edi,edx
c00206b1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206b5:	2d e8 00 00 00       	sub    eax,0xe8
c00206ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00206bd:	e8 61 fa ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c00206c2:	57                   	push   edi
c00206c3:	56                   	push   esi
c00206c4:	52                   	push   edx
c00206c5:	50                   	push   eax
c00206c6:	e8 f8 f9 ff ff       	call   c00200c3 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00206cb:	83 c4 1c             	add    esp,0x1c
c00206ce:	52                   	push   edx
c00206cf:	50                   	push   eax
c00206d0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206d4:	2d e8 00 00 00       	sub    eax,0xe8
c00206d9:	eb b7                	jmp    c0020692 <Vm::x87Handler(regs*)+0x432>
c00206db:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206df:	8d 50 40             	lea    edx,[eax+0x40]
c00206e2:	80 fa 07             	cmp    dl,0x7
c00206e5:	77 3a                	ja     c0020721 <Vm::x87Handler(regs*)+0x4c1>
c00206e7:	83 ec 0c             	sub    esp,0xc
c00206ea:	2d c0 00 00 00       	sub    eax,0xc0
c00206ef:	50                   	push   eax
c00206f0:	e8 2e fa ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c00206f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00206fc:	89 c6                	mov    esi,eax
c00206fe:	89 d7                	mov    edi,edx
c0020700:	e8 1e fa ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c0020705:	57                   	push   edi
c0020706:	56                   	push   esi
c0020707:	52                   	push   edx
c0020708:	50                   	push   eax
c0020709:	e8 8b f9 ff ff       	call   c0020099 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c002070e:	83 c4 1c             	add    esp,0x1c
c0020711:	52                   	push   edx
c0020712:	50                   	push   eax
c0020713:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020717:	2d c0 00 00 00       	sub    eax,0xc0
c002071c:	e9 9e 01 00 00       	jmp    c00208bf <Vm::x87Handler(regs*)+0x65f>
c0020721:	8d 50 20             	lea    edx,[eax+0x20]
c0020724:	80 fa 07             	cmp    dl,0x7
c0020727:	77 3a                	ja     c0020763 <Vm::x87Handler(regs*)+0x503>
c0020729:	83 ec 0c             	sub    esp,0xc
c002072c:	2d e0 00 00 00       	sub    eax,0xe0
c0020731:	50                   	push   eax
c0020732:	e8 ec f9 ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c0020737:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002073e:	89 c6                	mov    esi,eax
c0020740:	89 d7                	mov    edi,edx
c0020742:	e8 dc f9 ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c0020747:	57                   	push   edi
c0020748:	56                   	push   esi
c0020749:	52                   	push   edx
c002074a:	50                   	push   eax
c002074b:	e8 73 f9 ff ff       	call   c00200c3 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020750:	83 c4 1c             	add    esp,0x1c
c0020753:	52                   	push   edx
c0020754:	50                   	push   eax
c0020755:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020759:	2d e0 00 00 00       	sub    eax,0xe0
c002075e:	e9 5c 01 00 00       	jmp    c00208bf <Vm::x87Handler(regs*)+0x65f>
c0020763:	8d 50 18             	lea    edx,[eax+0x18]
c0020766:	80 fa 07             	cmp    dl,0x7
c0020769:	77 3b                	ja     c00207a6 <Vm::x87Handler(regs*)+0x546>
c002076b:	83 ec 0c             	sub    esp,0xc
c002076e:	6a 00                	push   0x0
c0020770:	e8 ae f9 ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c0020775:	89 c6                	mov    esi,eax
c0020777:	89 d7                	mov    edi,edx
c0020779:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002077d:	2d e8 00 00 00       	sub    eax,0xe8
c0020782:	89 04 24             	mov    DWORD PTR [esp],eax
c0020785:	e8 99 f9 ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c002078a:	57                   	push   edi
c002078b:	56                   	push   esi
c002078c:	52                   	push   edx
c002078d:	50                   	push   eax
c002078e:	e8 30 f9 ff ff       	call   c00200c3 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020793:	83 c4 1c             	add    esp,0x1c
c0020796:	52                   	push   edx
c0020797:	50                   	push   eax
c0020798:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002079c:	2d e8 00 00 00       	sub    eax,0xe8
c00207a1:	e9 19 01 00 00       	jmp    c00208bf <Vm::x87Handler(regs*)+0x65f>
c00207a6:	8d 50 38             	lea    edx,[eax+0x38]
c00207a9:	80 fa 07             	cmp    dl,0x7
c00207ac:	77 37                	ja     c00207e5 <Vm::x87Handler(regs*)+0x585>
c00207ae:	83 ec 0c             	sub    esp,0xc
c00207b1:	2d c8 00 00 00       	sub    eax,0xc8
c00207b6:	50                   	push   eax
c00207b7:	e8 67 f9 ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c00207bc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00207c3:	89 c6                	mov    esi,eax
c00207c5:	89 d7                	mov    edi,edx
c00207c7:	e8 57 f9 ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c00207cc:	57                   	push   edi
c00207cd:	56                   	push   esi
c00207ce:	52                   	push   edx
c00207cf:	50                   	push   eax
c00207d0:	e8 fd f8 ff ff       	call   c00200d2 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00207d5:	83 c4 1c             	add    esp,0x1c
c00207d8:	52                   	push   edx
c00207d9:	50                   	push   eax
c00207da:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00207de:	2d c8 00 00 00       	sub    eax,0xc8
c00207e3:	eb 7d                	jmp    c0020862 <Vm::x87Handler(regs*)+0x602>
c00207e5:	3c f7                	cmp    al,0xf7
c00207e7:	76 38                	jbe    c0020821 <Vm::x87Handler(regs*)+0x5c1>
c00207e9:	83 ec 0c             	sub    esp,0xc
c00207ec:	6a 00                	push   0x0
c00207ee:	e8 30 f9 ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c00207f3:	89 c6                	mov    esi,eax
c00207f5:	89 d7                	mov    edi,edx
c00207f7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00207fb:	2d f8 00 00 00       	sub    eax,0xf8
c0020800:	89 04 24             	mov    DWORD PTR [esp],eax
c0020803:	e8 1b f9 ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c0020808:	57                   	push   edi
c0020809:	56                   	push   esi
c002080a:	52                   	push   edx
c002080b:	50                   	push   eax
c002080c:	e8 e0 f8 ff ff       	call   c00200f1 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020811:	83 c4 1c             	add    esp,0x1c
c0020814:	52                   	push   edx
c0020815:	50                   	push   eax
c0020816:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002081a:	2d f8 00 00 00       	sub    eax,0xf8
c002081f:	eb 41                	jmp    c0020862 <Vm::x87Handler(regs*)+0x602>
c0020821:	8d 50 10             	lea    edx,[eax+0x10]
c0020824:	80 fa 07             	cmp    dl,0x7
c0020827:	0f 87 5a 01 00 00    	ja     c0020987 <Vm::x87Handler(regs*)+0x727>
c002082d:	83 ec 0c             	sub    esp,0xc
c0020830:	2d f0 00 00 00       	sub    eax,0xf0
c0020835:	50                   	push   eax
c0020836:	e8 e8 f8 ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c002083b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020842:	89 c6                	mov    esi,eax
c0020844:	89 d7                	mov    edi,edx
c0020846:	e8 d8 f8 ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c002084b:	57                   	push   edi
c002084c:	56                   	push   esi
c002084d:	52                   	push   edx
c002084e:	50                   	push   eax
c002084f:	e8 9d f8 ff ff       	call   c00200f1 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020854:	83 c4 1c             	add    esp,0x1c
c0020857:	52                   	push   edx
c0020858:	50                   	push   eax
c0020859:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002085d:	2d f0 00 00 00       	sub    eax,0xf0
c0020862:	50                   	push   eax
c0020863:	e8 fe f8 ff ff       	call   c0020166 <Vm::fpuSetReg(int, unsigned long long)>
c0020868:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002086c:	e8 9d f9 ff ff       	call   c002020e <Vm::fpuPop()>
c0020871:	e9 5e fa ff ff       	jmp    c00202d4 <Vm::x87Handler(regs*)+0x74>
c0020876:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002087a:	8d 50 30             	lea    edx,[eax+0x30]
c002087d:	80 fa 07             	cmp    dl,0x7
c0020880:	77 1d                	ja     c002089f <Vm::x87Handler(regs*)+0x63f>
c0020882:	83 ec 0c             	sub    esp,0xc
c0020885:	6a 00                	push   0x0
c0020887:	e8 97 f8 ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c002088c:	83 c4 0c             	add    esp,0xc
c002088f:	52                   	push   edx
c0020890:	50                   	push   eax
c0020891:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020895:	2d d0 00 00 00       	sub    eax,0xd0
c002089a:	e9 f3 fd ff ff       	jmp    c0020692 <Vm::x87Handler(regs*)+0x432>
c002089f:	8d 50 28             	lea    edx,[eax+0x28]
c00208a2:	80 fa 07             	cmp    dl,0x7
c00208a5:	77 28                	ja     c00208cf <Vm::x87Handler(regs*)+0x66f>
c00208a7:	83 ec 0c             	sub    esp,0xc
c00208aa:	6a 00                	push   0x0
c00208ac:	e8 72 f8 ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c00208b1:	83 c4 0c             	add    esp,0xc
c00208b4:	52                   	push   edx
c00208b5:	50                   	push   eax
c00208b6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00208ba:	2d d8 00 00 00       	sub    eax,0xd8
c00208bf:	50                   	push   eax
c00208c0:	e8 a1 f8 ff ff       	call   c0020166 <Vm::fpuSetReg(int, unsigned long long)>
c00208c5:	e8 44 f9 ff ff       	call   c002020e <Vm::fpuPop()>
c00208ca:	e9 01 fa ff ff       	jmp    c00202d0 <Vm::x87Handler(regs*)+0x70>
c00208cf:	8d 50 20             	lea    edx,[eax+0x20]
c00208d2:	80 fa 07             	cmp    dl,0x7
c00208d5:	77 30                	ja     c0020907 <Vm::x87Handler(regs*)+0x6a7>
c00208d7:	83 ec 0c             	sub    esp,0xc
c00208da:	2d e0 00 00 00       	sub    eax,0xe0
c00208df:	50                   	push   eax
c00208e0:	e8 3e f8 ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c00208e5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00208ec:	89 c6                	mov    esi,eax
c00208ee:	89 d7                	mov    edi,edx
c00208f0:	e8 2e f8 ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c00208f5:	57                   	push   edi
c00208f6:	56                   	push   esi
c00208f7:	52                   	push   edx
c00208f8:	50                   	push   eax
c00208f9:	e8 48 f7 ff ff       	call   c0020046 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00208fe:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020902:	e9 54 02 00 00       	jmp    c0020b5b <Vm::x87Handler(regs*)+0x8fb>
c0020907:	8d 50 18             	lea    edx,[eax+0x18]
c002090a:	80 fa 07             	cmp    dl,0x7
c002090d:	0f 87 43 fb ff ff    	ja     c0020456 <Vm::x87Handler(regs*)+0x1f6>
c0020913:	83 ec 0c             	sub    esp,0xc
c0020916:	2d e8 00 00 00       	sub    eax,0xe8
c002091b:	50                   	push   eax
c002091c:	e8 02 f8 ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c0020921:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020928:	89 c6                	mov    esi,eax
c002092a:	89 d7                	mov    edi,edx
c002092c:	e8 f2 f7 ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c0020931:	57                   	push   edi
c0020932:	56                   	push   esi
c0020933:	52                   	push   edx
c0020934:	50                   	push   eax
c0020935:	e8 0c f7 ff ff       	call   c0020046 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002093a:	83 c4 20             	add    esp,0x20
c002093d:	e8 cc f8 ff ff       	call   c002020e <Vm::fpuPop()>
c0020942:	eb 62                	jmp    c00209a6 <Vm::x87Handler(regs*)+0x746>
c0020944:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020948:	0f 85 0f 01 00 00    	jne    c0020a5d <Vm::x87Handler(regs*)+0x7fd>
c002094e:	83 ec 0c             	sub    esp,0xc
c0020951:	6a 01                	push   0x1
c0020953:	e8 cb f7 ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c0020958:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002095f:	89 c6                	mov    esi,eax
c0020961:	89 d7                	mov    edi,edx
c0020963:	e8 bb f7 ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c0020968:	57                   	push   edi
c0020969:	56                   	push   esi
c002096a:	52                   	push   edx
c002096b:	50                   	push   eax
c002096c:	e8 d5 f6 ff ff       	call   c0020046 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020971:	83 c4 20             	add    esp,0x20
c0020974:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020978:	e8 91 f8 ff ff       	call   c002020e <Vm::fpuPop()>
c002097d:	e8 8c f8 ff ff       	call   c002020e <Vm::fpuPop()>
c0020982:	e9 50 f9 ff ff       	jmp    c00202d7 <Vm::x87Handler(regs*)+0x77>
c0020987:	3c d9                	cmp    al,0xd9
c0020989:	0f 85 b5 02 00 00    	jne    c0020c44 <Vm::x87Handler(regs*)+0x9e4>
c002098f:	eb bd                	jmp    c002094e <Vm::x87Handler(regs*)+0x6ee>
c0020991:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0020995:	0f 85 ea 02 00 00    	jne    c0020c85 <Vm::x87Handler(regs*)+0xa25>
c002099b:	0f b7 05 40 26 03 c0 	movzx  eax,WORD PTR ds:0xc0032640
c00209a2:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c00209a6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00209aa:	e9 28 f9 ff ff       	jmp    c00202d7 <Vm::x87Handler(regs*)+0x77>
c00209af:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00209b3:	84 d2                	test   dl,dl
c00209b5:	75 0f                	jne    c00209c6 <Vm::x87Handler(regs*)+0x766>
c00209b7:	83 ec 0c             	sub    esp,0xc
c00209ba:	ff 36                	push   DWORD PTR [esi]
c00209bc:	e8 b1 f4 ff ff       	call   c001fe72 <Vm::fpu32ToInternal(unsigned int)>
c00209c1:	e9 2c 01 00 00       	jmp    c0020af2 <Vm::x87Handler(regs*)+0x892>
c00209c6:	80 fa 01             	cmp    dl,0x1
c00209c9:	75 0f                	jne    c00209da <Vm::x87Handler(regs*)+0x77a>
c00209cb:	83 ec 0c             	sub    esp,0xc
c00209ce:	ff 36                	push   DWORD PTR [esi]
c00209d0:	e8 9d f4 ff ff       	call   c001fe72 <Vm::fpu32ToInternal(unsigned int)>
c00209d5:	e9 81 02 00 00       	jmp    c0020c5b <Vm::x87Handler(regs*)+0x9fb>
c00209da:	80 fa 04             	cmp    dl,0x4
c00209dd:	75 0f                	jne    c00209ee <Vm::x87Handler(regs*)+0x78e>
c00209df:	83 ec 0c             	sub    esp,0xc
c00209e2:	ff 36                	push   DWORD PTR [esi]
c00209e4:	e8 89 f4 ff ff       	call   c001fe72 <Vm::fpu32ToInternal(unsigned int)>
c00209e9:	e9 86 01 00 00       	jmp    c0020b74 <Vm::x87Handler(regs*)+0x914>
c00209ee:	80 fa 05             	cmp    dl,0x5
c00209f1:	75 1b                	jne    c0020a0e <Vm::x87Handler(regs*)+0x7ae>
c00209f3:	83 ec 0c             	sub    esp,0xc
c00209f6:	6a 00                	push   0x0
c00209f8:	e8 26 f7 ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c00209fd:	89 c7                	mov    edi,eax
c00209ff:	89 d5                	mov    ebp,edx
c0020a01:	58                   	pop    eax
c0020a02:	ff 36                	push   DWORD PTR [esi]
c0020a04:	e8 69 f4 ff ff       	call   c001fe72 <Vm::fpu32ToInternal(unsigned int)>
c0020a09:	e9 a3 01 00 00       	jmp    c0020bb1 <Vm::x87Handler(regs*)+0x951>
c0020a0e:	80 fa 06             	cmp    dl,0x6
c0020a11:	75 0f                	jne    c0020a22 <Vm::x87Handler(regs*)+0x7c2>
c0020a13:	83 ec 0c             	sub    esp,0xc
c0020a16:	ff 36                	push   DWORD PTR [esi]
c0020a18:	e8 55 f4 ff ff       	call   c001fe72 <Vm::fpu32ToInternal(unsigned int)>
c0020a1d:	e9 ae 01 00 00       	jmp    c0020bd0 <Vm::x87Handler(regs*)+0x970>
c0020a22:	31 c0                	xor    eax,eax
c0020a24:	80 fa 07             	cmp    dl,0x7
c0020a27:	0f 85 94 02 00 00    	jne    c0020cc1 <Vm::x87Handler(regs*)+0xa61>
c0020a2d:	83 ec 0c             	sub    esp,0xc
c0020a30:	6a 00                	push   0x0
c0020a32:	e8 ec f6 ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c0020a37:	89 c7                	mov    edi,eax
c0020a39:	89 d5                	mov    ebp,edx
c0020a3b:	58                   	pop    eax
c0020a3c:	ff 36                	push   DWORD PTR [esi]
c0020a3e:	e8 2f f4 ff ff       	call   c001fe72 <Vm::fpu32ToInternal(unsigned int)>
c0020a43:	e9 cb 01 00 00       	jmp    c0020c13 <Vm::x87Handler(regs*)+0x9b3>
c0020a48:	80 fa 03             	cmp    dl,0x3
c0020a4b:	0f 85 d3 01 00 00    	jne    c0020c24 <Vm::x87Handler(regs*)+0x9c4>
c0020a51:	e8 b8 f7 ff ff       	call   c002020e <Vm::fpuPop()>
c0020a56:	51                   	push   ecx
c0020a57:	51                   	push   ecx
c0020a58:	e9 de 01 00 00       	jmp    c0020c3b <Vm::x87Handler(regs*)+0x9db>
c0020a5d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020a61:	80 fa 01             	cmp    dl,0x1
c0020a64:	75 09                	jne    c0020a6f <Vm::x87Handler(regs*)+0x80f>
c0020a66:	57                   	push   edi
c0020a67:	57                   	push   edi
c0020a68:	8b 06                	mov    eax,DWORD PTR [esi]
c0020a6a:	e9 e3 01 00 00       	jmp    c0020c52 <Vm::x87Handler(regs*)+0x9f2>
c0020a6f:	80 fa 04             	cmp    dl,0x4
c0020a72:	75 12                	jne    c0020a86 <Vm::x87Handler(regs*)+0x826>
c0020a74:	31 d2                	xor    edx,edx
c0020a76:	51                   	push   ecx
c0020a77:	51                   	push   ecx
c0020a78:	8b 06                	mov    eax,DWORD PTR [esi]
c0020a7a:	52                   	push   edx
c0020a7b:	50                   	push   eax
c0020a7c:	e8 d0 f4 ff ff       	call   c001ff51 <Vm::fpuLongToFloat(long long)>
c0020a81:	e9 ee 00 00 00       	jmp    c0020b74 <Vm::x87Handler(regs*)+0x914>
c0020a86:	31 c0                	xor    eax,eax
c0020a88:	80 fa 07             	cmp    dl,0x7
c0020a8b:	0f 85 30 02 00 00    	jne    c0020cc1 <Vm::x87Handler(regs*)+0xa61>
c0020a91:	83 ec 0c             	sub    esp,0xc
c0020a94:	6a 00                	push   0x0
c0020a96:	e8 88 f6 ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c0020a9b:	89 c7                	mov    edi,eax
c0020a9d:	89 d5                	mov    ebp,edx
c0020a9f:	58                   	pop    eax
c0020aa0:	8b 06                	mov    eax,DWORD PTR [esi]
c0020aa2:	5a                   	pop    edx
c0020aa3:	31 d2                	xor    edx,edx
c0020aa5:	52                   	push   edx
c0020aa6:	50                   	push   eax
c0020aa7:	e8 a5 f4 ff ff       	call   c001ff51 <Vm::fpuLongToFloat(long long)>
c0020aac:	e9 62 01 00 00       	jmp    c0020c13 <Vm::x87Handler(regs*)+0x9b3>
c0020ab1:	84 d2                	test   dl,dl
c0020ab3:	75 0d                	jne    c0020ac2 <Vm::x87Handler(regs*)+0x862>
c0020ab5:	31 d2                	xor    edx,edx
c0020ab7:	55                   	push   ebp
c0020ab8:	55                   	push   ebp
c0020ab9:	8b 06                	mov    eax,DWORD PTR [esi]
c0020abb:	52                   	push   edx
c0020abc:	50                   	push   eax
c0020abd:	e9 d3 01 00 00       	jmp    c0020c95 <Vm::x87Handler(regs*)+0xa35>
c0020ac2:	31 c0                	xor    eax,eax
c0020ac4:	80 fa 02             	cmp    dl,0x2
c0020ac7:	0f 85 f4 01 00 00    	jne    c0020cc1 <Vm::x87Handler(regs*)+0xa61>
c0020acd:	83 ec 0c             	sub    esp,0xc
c0020ad0:	6a 00                	push   0x0
c0020ad2:	e8 4c f6 ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c0020ad7:	59                   	pop    ecx
c0020ad8:	5f                   	pop    edi
c0020ad9:	e9 6a f9 ff ff       	jmp    c0020448 <Vm::x87Handler(regs*)+0x1e8>
c0020ade:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020ae2:	84 d2                	test   dl,dl
c0020ae4:	75 2a                	jne    c0020b10 <Vm::x87Handler(regs*)+0x8b0>
c0020ae6:	50                   	push   eax
c0020ae7:	50                   	push   eax
c0020ae8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020aeb:	ff 36                	push   DWORD PTR [esi]
c0020aed:	e8 c5 f3 ff ff       	call   c001feb7 <Vm::fpu64ToInternal(unsigned long long)>
c0020af2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020af9:	89 c6                	mov    esi,eax
c0020afb:	89 d7                	mov    edi,edx
c0020afd:	e8 21 f6 ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c0020b02:	57                   	push   edi
c0020b03:	56                   	push   esi
c0020b04:	52                   	push   edx
c0020b05:	50                   	push   eax
c0020b06:	e8 8e f5 ff ff       	call   c0020099 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020b0b:	e9 64 01 00 00       	jmp    c0020c74 <Vm::x87Handler(regs*)+0xa14>
c0020b10:	80 fa 01             	cmp    dl,0x1
c0020b13:	75 11                	jne    c0020b26 <Vm::x87Handler(regs*)+0x8c6>
c0020b15:	50                   	push   eax
c0020b16:	50                   	push   eax
c0020b17:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020b1a:	ff 36                	push   DWORD PTR [esi]
c0020b1c:	e8 96 f3 ff ff       	call   c001feb7 <Vm::fpu64ToInternal(unsigned long long)>
c0020b21:	e9 35 01 00 00       	jmp    c0020c5b <Vm::x87Handler(regs*)+0x9fb>
c0020b26:	80 fa 02             	cmp    dl,0x2
c0020b29:	0f 85 54 f9 ff ff    	jne    c0020483 <Vm::x87Handler(regs*)+0x223>
c0020b2f:	55                   	push   ebp
c0020b30:	55                   	push   ebp
c0020b31:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020b34:	ff 36                	push   DWORD PTR [esi]
c0020b36:	e8 7c f3 ff ff       	call   c001feb7 <Vm::fpu64ToInternal(unsigned long long)>
c0020b3b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020b42:	89 c6                	mov    esi,eax
c0020b44:	89 d7                	mov    edi,edx
c0020b46:	e8 d8 f5 ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c0020b4b:	57                   	push   edi
c0020b4c:	56                   	push   esi
c0020b4d:	52                   	push   edx
c0020b4e:	50                   	push   eax
c0020b4f:	e8 f2 f4 ff ff       	call   c0020046 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020b54:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020b58:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020b5b:	83 c4 20             	add    esp,0x20
c0020b5e:	e9 74 f7 ff ff       	jmp    c00202d7 <Vm::x87Handler(regs*)+0x77>
c0020b63:	80 fa 04             	cmp    dl,0x4
c0020b66:	75 2a                	jne    c0020b92 <Vm::x87Handler(regs*)+0x932>
c0020b68:	51                   	push   ecx
c0020b69:	51                   	push   ecx
c0020b6a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020b6d:	ff 36                	push   DWORD PTR [esi]
c0020b6f:	e8 43 f3 ff ff       	call   c001feb7 <Vm::fpu64ToInternal(unsigned long long)>
c0020b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020b7b:	89 c6                	mov    esi,eax
c0020b7d:	89 d7                	mov    edi,edx
c0020b7f:	e8 9f f5 ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c0020b84:	57                   	push   edi
c0020b85:	56                   	push   esi
c0020b86:	52                   	push   edx
c0020b87:	50                   	push   eax
c0020b88:	e8 36 f5 ff ff       	call   c00200c3 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020b8d:	e9 e2 00 00 00       	jmp    c0020c74 <Vm::x87Handler(regs*)+0xa14>
c0020b92:	80 fa 05             	cmp    dl,0x5
c0020b95:	75 28                	jne    c0020bbf <Vm::x87Handler(regs*)+0x95f>
c0020b97:	83 ec 0c             	sub    esp,0xc
c0020b9a:	6a 00                	push   0x0
c0020b9c:	e8 82 f5 ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c0020ba1:	89 c7                	mov    edi,eax
c0020ba3:	89 d5                	mov    ebp,edx
c0020ba5:	58                   	pop    eax
c0020ba6:	5a                   	pop    edx
c0020ba7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020baa:	ff 36                	push   DWORD PTR [esi]
c0020bac:	e8 06 f3 ff ff       	call   c001feb7 <Vm::fpu64ToInternal(unsigned long long)>
c0020bb1:	83 c4 10             	add    esp,0x10
c0020bb4:	55                   	push   ebp
c0020bb5:	57                   	push   edi
c0020bb6:	52                   	push   edx
c0020bb7:	50                   	push   eax
c0020bb8:	e8 06 f5 ff ff       	call   c00200c3 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020bbd:	eb 60                	jmp    c0020c1f <Vm::x87Handler(regs*)+0x9bf>
c0020bbf:	80 fa 06             	cmp    dl,0x6
c0020bc2:	75 2a                	jne    c0020bee <Vm::x87Handler(regs*)+0x98e>
c0020bc4:	51                   	push   ecx
c0020bc5:	51                   	push   ecx
c0020bc6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020bc9:	ff 36                	push   DWORD PTR [esi]
c0020bcb:	e8 e7 f2 ff ff       	call   c001feb7 <Vm::fpu64ToInternal(unsigned long long)>
c0020bd0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020bd7:	89 c6                	mov    esi,eax
c0020bd9:	89 d7                	mov    edi,edx
c0020bdb:	e8 43 f5 ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c0020be0:	57                   	push   edi
c0020be1:	56                   	push   esi
c0020be2:	52                   	push   edx
c0020be3:	50                   	push   eax
c0020be4:	e8 08 f5 ff ff       	call   c00200f1 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020be9:	e9 86 00 00 00       	jmp    c0020c74 <Vm::x87Handler(regs*)+0xa14>
c0020bee:	31 c0                	xor    eax,eax
c0020bf0:	80 fa 07             	cmp    dl,0x7
c0020bf3:	0f 85 c8 00 00 00    	jne    c0020cc1 <Vm::x87Handler(regs*)+0xa61>
c0020bf9:	83 ec 0c             	sub    esp,0xc
c0020bfc:	6a 00                	push   0x0
c0020bfe:	e8 20 f5 ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c0020c03:	89 c7                	mov    edi,eax
c0020c05:	89 d5                	mov    ebp,edx
c0020c07:	58                   	pop    eax
c0020c08:	5a                   	pop    edx
c0020c09:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020c0c:	ff 36                	push   DWORD PTR [esi]
c0020c0e:	e8 a4 f2 ff ff       	call   c001feb7 <Vm::fpu64ToInternal(unsigned long long)>
c0020c13:	83 c4 10             	add    esp,0x10
c0020c16:	55                   	push   ebp
c0020c17:	57                   	push   edi
c0020c18:	52                   	push   edx
c0020c19:	50                   	push   eax
c0020c1a:	e8 d2 f4 ff ff       	call   c00200f1 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020c1f:	83 c4 0c             	add    esp,0xc
c0020c22:	eb 53                	jmp    c0020c77 <Vm::x87Handler(regs*)+0xa17>
c0020c24:	31 c0                	xor    eax,eax
c0020c26:	80 fa 02             	cmp    dl,0x2
c0020c29:	0f 85 92 00 00 00    	jne    c0020cc1 <Vm::x87Handler(regs*)+0xa61>
c0020c2f:	83 ec 0c             	sub    esp,0xc
c0020c32:	6a 00                	push   0x0
c0020c34:	e8 ea f4 ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c0020c39:	59                   	pop    ecx
c0020c3a:	5f                   	pop    edi
c0020c3b:	52                   	push   edx
c0020c3c:	50                   	push   eax
c0020c3d:	e8 27 f2 ff ff       	call   c001fe69 <Vm::fpuInternalTo64(unsigned long long)>
c0020c42:	eb 70                	jmp    c0020cb4 <Vm::x87Handler(regs*)+0xa54>
c0020c44:	31 c0                	xor    eax,eax
c0020c46:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020c4b:	75 74                	jne    c0020cc1 <Vm::x87Handler(regs*)+0xa61>
c0020c4d:	50                   	push   eax
c0020c4e:	50                   	push   eax
c0020c4f:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020c52:	31 d2                	xor    edx,edx
c0020c54:	52                   	push   edx
c0020c55:	50                   	push   eax
c0020c56:	e8 f6 f2 ff ff       	call   c001ff51 <Vm::fpuLongToFloat(long long)>
c0020c5b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020c62:	89 c6                	mov    esi,eax
c0020c64:	89 d7                	mov    edi,edx
c0020c66:	e8 b8 f4 ff ff       	call   c0020123 <Vm::fpuGetReg(int)>
c0020c6b:	57                   	push   edi
c0020c6c:	56                   	push   esi
c0020c6d:	52                   	push   edx
c0020c6e:	50                   	push   eax
c0020c6f:	e8 5e f4 ff ff       	call   c00200d2 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020c74:	83 c4 1c             	add    esp,0x1c
c0020c77:	52                   	push   edx
c0020c78:	50                   	push   eax
c0020c79:	6a 00                	push   0x0
c0020c7b:	e8 e6 f4 ff ff       	call   c0020166 <Vm::fpuSetReg(int, unsigned long long)>
c0020c80:	e9 f2 f7 ff ff       	jmp    c0020477 <Vm::x87Handler(regs*)+0x217>
c0020c85:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020c89:	80 fa 05             	cmp    dl,0x5
c0020c8c:	75 11                	jne    c0020c9f <Vm::x87Handler(regs*)+0xa3f>
c0020c8e:	55                   	push   ebp
c0020c8f:	55                   	push   ebp
c0020c90:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020c93:	ff 36                	push   DWORD PTR [esi]
c0020c95:	e8 81 f2 ff ff       	call   c001ff1b <Vm::fpuULongToFloat(unsigned long long)>
c0020c9a:	e9 cf f7 ff ff       	jmp    c002046e <Vm::x87Handler(regs*)+0x20e>
c0020c9f:	31 c0                	xor    eax,eax
c0020ca1:	80 fa 07             	cmp    dl,0x7
c0020ca4:	75 1b                	jne    c0020cc1 <Vm::x87Handler(regs*)+0xa61>
c0020ca6:	e8 63 f5 ff ff       	call   c002020e <Vm::fpuPop()>
c0020cab:	51                   	push   ecx
c0020cac:	51                   	push   ecx
c0020cad:	52                   	push   edx
c0020cae:	50                   	push   eax
c0020caf:	e8 0c f2 ff ff       	call   c001fec0 <Vm::fpuFloatToLong(unsigned long long)>
c0020cb4:	83 c4 10             	add    esp,0x10
c0020cb7:	89 06                	mov    DWORD PTR [esi],eax
c0020cb9:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020cbc:	e9 f8 f7 ff ff       	jmp    c00204b9 <Vm::x87Handler(regs*)+0x259>
c0020cc1:	83 c4 1c             	add    esp,0x1c
c0020cc4:	5b                   	pop    ebx
c0020cc5:	5e                   	pop    esi
c0020cc6:	5f                   	pop    edi
c0020cc7:	5d                   	pop    ebp
c0020cc8:	c3                   	ret    

c0020cc9 <__static_initialization_and_destruction_0(int, int)>:
c0020cc9:	83 ec 0c             	sub    esp,0xc
c0020ccc:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020cd1:	75 1a                	jne    c0020ced <__static_initialization_and_destruction_0(int, int)+0x24>
c0020cd3:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020cdb:	75 10                	jne    c0020ced <__static_initialization_and_destruction_0(int, int)+0x24>
c0020cdd:	83 ec 0c             	sub    esp,0xc
c0020ce0:	68 40 26 03 c0       	push   0xc0032640
c0020ce5:	e8 d2 8a 00 00       	call   c00297bc <Vm::_FPUState::_FPUState()>
c0020cea:	83 c4 10             	add    esp,0x10
c0020ced:	90                   	nop
c0020cee:	83 c4 0c             	add    esp,0xc
c0020cf1:	c3                   	ret    

c0020cf2 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020cf2:	83 ec 0c             	sub    esp,0xc
c0020cf5:	83 ec 08             	sub    esp,0x8
c0020cf8:	68 ff ff 00 00       	push   0xffff
c0020cfd:	6a 01                	push   0x1
c0020cff:	e8 c5 ff ff ff       	call   c0020cc9 <__static_initialization_and_destruction_0(int, int)>
c0020d04:	83 c4 10             	add    esp,0x10
c0020d07:	83 c4 0c             	add    esp,0xc
c0020d0a:	c3                   	ret    
c0020d0b:	90                   	nop

c0020d0c <FAT::getName()>:
c0020d0c:	b8 2c d4 02 c0       	mov    eax,0xc002d42c
c0020d11:	c3                   	ret    

c0020d12 <FAT::tell(void*, unsigned long long*)>:
c0020d12:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020d17:	75 06                	jne    c0020d1f <FAT::tell(void*, unsigned long long*)+0xd>
c0020d19:	b8 04 00 00 00       	mov    eax,0x4
c0020d1e:	c3                   	ret    
c0020d1f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020d24:	75 06                	jne    c0020d2c <FAT::tell(void*, unsigned long long*)+0x1a>
c0020d26:	b8 04 00 00 00       	mov    eax,0x4
c0020d2b:	c3                   	ret    
c0020d2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d30:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020d33:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020d36:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020d3a:	89 01                	mov    DWORD PTR [ecx],eax
c0020d3c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020d3f:	b8 00 00 00 00       	mov    eax,0x0
c0020d44:	c3                   	ret    
c0020d45:	90                   	nop

c0020d46 <FAT::stat(void*, unsigned long long*)>:
c0020d46:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020d4b:	75 06                	jne    c0020d53 <FAT::stat(void*, unsigned long long*)+0xd>
c0020d4d:	b8 04 00 00 00       	mov    eax,0x4
c0020d52:	c3                   	ret    
c0020d53:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020d58:	75 06                	jne    c0020d60 <FAT::stat(void*, unsigned long long*)+0x1a>
c0020d5a:	b8 04 00 00 00       	mov    eax,0x4
c0020d5f:	c3                   	ret    
c0020d60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d64:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020d67:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020d6a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020d6e:	89 01                	mov    DWORD PTR [ecx],eax
c0020d70:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020d73:	b8 00 00 00 00       	mov    eax,0x0
c0020d78:	c3                   	ret    
c0020d79:	90                   	nop

c0020d7a <FAT::~FAT()>:
c0020d7a:	83 ec 0c             	sub    esp,0xc
c0020d7d:	ba bc d4 02 c0       	mov    edx,0xc002d4bc
c0020d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d86:	89 10                	mov    DWORD PTR [eax],edx
c0020d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d8c:	83 ec 0c             	sub    esp,0xc
c0020d8f:	50                   	push   eax
c0020d90:	e8 1f 24 ff ff       	call   c00131b4 <Filesystem::~Filesystem()>
c0020d95:	83 c4 10             	add    esp,0x10
c0020d98:	90                   	nop
c0020d99:	83 c4 0c             	add    esp,0xc
c0020d9c:	c3                   	ret    
c0020d9d:	90                   	nop

c0020d9e <FAT::~FAT()>:
c0020d9e:	83 ec 0c             	sub    esp,0xc
c0020da1:	83 ec 0c             	sub    esp,0xc
c0020da4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020da8:	e8 cd ff ff ff       	call   c0020d7a <FAT::~FAT()>
c0020dad:	83 c4 10             	add    esp,0x10
c0020db0:	83 ec 08             	sub    esp,0x8
c0020db3:	6a 08                	push   0x8
c0020db5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020db9:	e8 e7 1f ff ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c0020dbe:	83 c4 10             	add    esp,0x10
c0020dc1:	83 c4 0c             	add    esp,0xc
c0020dc4:	c3                   	ret    
c0020dc5:	90                   	nop

c0020dc6 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020dc6:	83 ec 1c             	sub    esp,0x1c
c0020dc9:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020dd0:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020dd5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020dd9:	8b 04 85 c0 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd940]
c0020de0:	83 f8 ff             	cmp    eax,0xffffffff
c0020de3:	75 34                	jne    c0020e19 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020de5:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020de9:	88 c2                	mov    dl,al
c0020deb:	a1 a0 26 03 c0       	mov    eax,ds:0xc00326a0
c0020df0:	01 d0                	add    eax,edx
c0020df2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020df6:	8b 15 a0 26 03 c0    	mov    edx,DWORD PTR ds:0xc00326a0
c0020dfc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e00:	89 14 85 c0 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd940],edx
c0020e07:	a1 a0 26 03 c0       	mov    eax,ds:0xc00326a0
c0020e0c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020e10:	89 14 85 40 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd8c0],edx
c0020e17:	eb 17                	jmp    c0020e30 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020e19:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020e1d:	88 c2                	mov    dl,al
c0020e1f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e23:	8b 04 85 c0 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd940]
c0020e2a:	01 d0                	add    eax,edx
c0020e2c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020e30:	83 ec 04             	sub    esp,0x4
c0020e33:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020e37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020e3b:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020e3f:	50                   	push   eax
c0020e40:	e8 d5 5e fe ff       	call   c0006d1a <f_getlabel>
c0020e45:	83 c4 10             	add    esp,0x10
c0020e48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e4c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020e51:	75 07                	jne    c0020e5a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020e53:	b8 00 00 00 00       	mov    eax,0x0
c0020e58:	eb 05                	jmp    c0020e5f <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020e5a:	b8 01 00 00 00       	mov    eax,0x1
c0020e5f:	83 c4 1c             	add    esp,0x1c
c0020e62:	c3                   	ret    
c0020e63:	90                   	nop

c0020e64 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020e64:	57                   	push   edi
c0020e65:	83 ec 58             	sub    esp,0x58
c0020e68:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020e70:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020e74:	b9 0f 00 00 00       	mov    ecx,0xf
c0020e79:	b8 00 00 00 00       	mov    eax,0x0
c0020e7e:	fc                   	cld    
c0020e7f:	89 d7                	mov    edi,edx
c0020e81:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020e83:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020e87:	8b 04 85 c0 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd940]
c0020e8e:	83 f8 ff             	cmp    eax,0xffffffff
c0020e91:	75 34                	jne    c0020ec7 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020e93:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020e97:	88 c2                	mov    dl,al
c0020e99:	a1 a0 26 03 c0       	mov    eax,ds:0xc00326a0
c0020e9e:	01 d0                	add    eax,edx
c0020ea0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020ea4:	8b 15 a0 26 03 c0    	mov    edx,DWORD PTR ds:0xc00326a0
c0020eaa:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020eae:	89 14 85 c0 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd940],edx
c0020eb5:	a1 a0 26 03 c0       	mov    eax,ds:0xc00326a0
c0020eba:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020ebe:	89 14 85 40 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd8c0],edx
c0020ec5:	eb 17                	jmp    c0020ede <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020ec7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020ecb:	88 c2                	mov    dl,al
c0020ecd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020ed1:	8b 04 85 c0 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd940]
c0020ed8:	01 d0                	add    eax,edx
c0020eda:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020ede:	83 ec 08             	sub    esp,0x8
c0020ee1:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020ee5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020ee9:	50                   	push   eax
c0020eea:	e8 79 fa fd ff       	call   c0000968 <strcat>
c0020eef:	83 c4 10             	add    esp,0x10
c0020ef2:	83 ec 0c             	sub    esp,0xc
c0020ef5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020ef9:	50                   	push   eax
c0020efa:	e8 09 60 fe ff       	call   c0006f08 <f_setlabel>
c0020eff:	83 c4 10             	add    esp,0x10
c0020f02:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020f06:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020f0b:	75 07                	jne    c0020f14 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020f0d:	b8 00 00 00 00       	mov    eax,0x0
c0020f12:	eb 05                	jmp    c0020f19 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020f14:	b8 01 00 00 00       	mov    eax,0x1
c0020f19:	83 c4 58             	add    esp,0x58
c0020f1c:	5f                   	pop    edi
c0020f1d:	c3                   	ret    

c0020f1e <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020f1e:	83 ec 2c             	sub    esp,0x2c
c0020f21:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020f29:	83 ec 08             	sub    esp,0x8
c0020f2c:	68 50 d4 02 c0       	push   0xc002d450
c0020f31:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020f35:	e8 7a f9 fd ff       	call   c00008b4 <strcmp>
c0020f3a:	83 c4 10             	add    esp,0x10
c0020f3d:	85 c0                	test   eax,eax
c0020f3f:	0f 94 c0             	sete   al
c0020f42:	84 c0                	test   al,al
c0020f44:	74 0d                	je     c0020f53 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020f46:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020f4e:	e9 a6 00 00 00       	jmp    c0020ff9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020f53:	83 ec 08             	sub    esp,0x8
c0020f56:	68 42 d4 02 c0       	push   0xc002d442
c0020f5b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020f5f:	e8 50 f9 fd ff       	call   c00008b4 <strcmp>
c0020f64:	83 c4 10             	add    esp,0x10
c0020f67:	85 c0                	test   eax,eax
c0020f69:	0f 94 c0             	sete   al
c0020f6c:	84 c0                	test   al,al
c0020f6e:	74 0a                	je     c0020f7a <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020f70:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020f78:	eb 7f                	jmp    c0020ff9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020f7a:	83 ec 08             	sub    esp,0x8
c0020f7d:	68 48 d4 02 c0       	push   0xc002d448
c0020f82:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020f86:	e8 29 f9 fd ff       	call   c00008b4 <strcmp>
c0020f8b:	83 c4 10             	add    esp,0x10
c0020f8e:	85 c0                	test   eax,eax
c0020f90:	0f 94 c0             	sete   al
c0020f93:	84 c0                	test   al,al
c0020f95:	74 0a                	je     c0020fa1 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020f97:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020f9f:	eb 58                	jmp    c0020ff9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020fa1:	83 ec 08             	sub    esp,0x8
c0020fa4:	68 2c 9f 02 c0       	push   0xc0029f2c
c0020fa9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020fad:	e8 02 f9 fd ff       	call   c00008b4 <strcmp>
c0020fb2:	83 c4 10             	add    esp,0x10
c0020fb5:	85 c0                	test   eax,eax
c0020fb7:	0f 94 c0             	sete   al
c0020fba:	84 c0                	test   al,al
c0020fbc:	74 0a                	je     c0020fc8 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020fbe:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020fc6:	eb 31                	jmp    c0020ff9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020fc8:	83 ec 08             	sub    esp,0x8
c0020fcb:	68 4e d4 02 c0       	push   0xc002d44e
c0020fd0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020fd4:	e8 db f8 fd ff       	call   c00008b4 <strcmp>
c0020fd9:	83 c4 10             	add    esp,0x10
c0020fdc:	85 c0                	test   eax,eax
c0020fde:	0f 94 c0             	sete   al
c0020fe1:	84 c0                	test   al,al
c0020fe3:	74 0a                	je     c0020fef <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020fe5:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020fed:	eb 0a                	jmp    c0020ff9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020fef:	b8 08 00 00 00       	mov    eax,0x8
c0020ff4:	e9 04 01 00 00       	jmp    c00210fd <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020ff9:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0021000:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0021005:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021009:	8b 04 85 c0 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd940]
c0021010:	83 f8 ff             	cmp    eax,0xffffffff
c0021013:	75 34                	jne    c0021049 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0021015:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0021019:	88 c2                	mov    dl,al
c002101b:	a1 a0 26 03 c0       	mov    eax,ds:0xc00326a0
c0021020:	01 d0                	add    eax,edx
c0021022:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0021026:	8b 15 a0 26 03 c0    	mov    edx,DWORD PTR ds:0xc00326a0
c002102c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021030:	89 14 85 c0 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd940],edx
c0021037:	a1 a0 26 03 c0       	mov    eax,ds:0xc00326a0
c002103c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0021040:	89 14 85 40 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd8c0],edx
c0021047:	eb 17                	jmp    c0021060 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0021049:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002104d:	88 c2                	mov    dl,al
c002104f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021053:	8b 04 85 c0 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd940]
c002105a:	01 d0                	add    eax,edx
c002105c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0021060:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021064:	88 04 24             	mov    BYTE PTR [esp],al
c0021067:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002106b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002106f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0021077:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c002107c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021084:	83 ec 0c             	sub    esp,0xc
c0021087:	68 00 20 00 00       	push   0x2000
c002108c:	e8 49 e8 fe ff       	call   c000f8da <malloc>
c0021091:	83 c4 10             	add    esp,0x10
c0021094:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021098:	68 00 20 00 00       	push   0x2000
c002109d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00210a1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00210a5:	50                   	push   eax
c00210a6:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00210aa:	50                   	push   eax
c00210ab:	e8 a3 62 fe ff       	call   c0007353 <f_mkfs>
c00210b0:	83 c4 10             	add    esp,0x10
c00210b3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00210b7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00210bc:	75 07                	jne    c00210c5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00210be:	b8 00 00 00 00       	mov    eax,0x0
c00210c3:	eb 38                	jmp    c00210fd <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00210c5:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00210ca:	75 17                	jne    c00210e3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c00210cc:	83 ec 0c             	sub    esp,0xc
c00210cf:	68 8c d4 02 c0       	push   0xc002d48c
c00210d4:	e8 ac 1d ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00210d9:	83 c4 10             	add    esp,0x10
c00210dc:	b8 09 00 00 00       	mov    eax,0x9
c00210e1:	eb 1a                	jmp    c00210fd <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00210e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00210e7:	83 ec 08             	sub    esp,0x8
c00210ea:	50                   	push   eax
c00210eb:	68 54 d4 02 c0       	push   0xc002d454
c00210f0:	e8 90 1d ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00210f5:	83 c4 10             	add    esp,0x10
c00210f8:	b8 01 00 00 00       	mov    eax,0x1
c00210fd:	83 c4 2c             	add    esp,0x2c
c0021100:	c3                   	ret    
c0021101:	90                   	nop

c0021102 <FAT::tryMount(LogicalDisk*, int)>:
c0021102:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0021108:	a1 a0 26 03 c0       	mov    eax,ds:0xc00326a0
c002110d:	83 f8 14             	cmp    eax,0x14
c0021110:	75 17                	jne    c0021129 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0021112:	83 ec 0c             	sub    esp,0xc
c0021115:	68 66 d4 02 c0       	push   0xc002d466
c002111a:	e8 4e 97 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c002111f:	83 c4 10             	add    esp,0x10
c0021122:	b0 00                	mov    al,0x0
c0021124:	e9 d7 01 00 00       	jmp    c0021300 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0021129:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0021130:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0021136:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002113c:	3d 00 02 00 00       	cmp    eax,0x200
c0021141:	74 07                	je     c002114a <FAT::tryMount(LogicalDisk*, int)+0x48>
c0021143:	b0 00                	mov    al,0x0
c0021145:	e9 b6 01 00 00       	jmp    c0021300 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002114a:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0021152:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0021159:	8b 04 85 c0 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd940]
c0021160:	83 f8 ff             	cmp    eax,0xffffffff
c0021163:	74 07                	je     c002116c <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0021165:	b0 01                	mov    al,0x1
c0021167:	e9 94 01 00 00       	jmp    c0021300 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002116c:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0021176:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c002117e:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0021185:	88 c2                	mov    dl,al
c0021187:	a1 a0 26 03 c0       	mov    eax,ds:0xc00326a0
c002118c:	01 d0                	add    eax,edx
c002118e:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0021195:	8b 15 a0 26 03 c0    	mov    edx,DWORD PTR ds:0xc00326a0
c002119b:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00211a2:	89 14 85 c0 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd940],edx
c00211a9:	a1 a0 26 03 c0       	mov    eax,ds:0xc00326a0
c00211ae:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00211b5:	89 14 85 40 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd8c0],edx
c00211bc:	83 ec 0c             	sub    esp,0xc
c00211bf:	68 54 02 00 00       	push   0x254
c00211c4:	e8 11 e7 fe ff       	call   c000f8da <malloc>
c00211c9:	83 c4 10             	add    esp,0x10
c00211cc:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00211d3:	83 ec 04             	sub    esp,0x4
c00211d6:	6a 00                	push   0x0
c00211d8:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00211df:	50                   	push   eax
c00211e0:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00211e7:	e8 25 3d fe ff       	call   c0004f11 <f_mount>
c00211ec:	83 c4 10             	add    esp,0x10
c00211ef:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00211f6:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00211fe:	74 19                	je     c0021219 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0021200:	83 ec 0c             	sub    esp,0xc
c0021203:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002120a:	e8 eb e6 fe ff       	call   c000f8fa <rfree>
c002120f:	83 c4 10             	add    esp,0x10
c0021212:	b0 00                	mov    al,0x0
c0021214:	e9 e7 00 00 00       	jmp    c0021300 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0021219:	83 ec 04             	sub    esp,0x4
c002121c:	68 00 01 00 00       	push   0x100
c0021221:	6a 00                	push   0x0
c0021223:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002122a:	50                   	push   eax
c002122b:	e8 3c f5 fd ff       	call   c000076c <memset>
c0021230:	83 c4 10             	add    esp,0x10
c0021233:	83 ec 08             	sub    esp,0x8
c0021236:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002123d:	50                   	push   eax
c002123e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0021245:	50                   	push   eax
c0021246:	e8 1d f7 fd ff       	call   c0000968 <strcat>
c002124b:	83 c4 10             	add    esp,0x10
c002124e:	83 ec 08             	sub    esp,0x8
c0021251:	68 74 d4 02 c0       	push   0xc002d474
c0021256:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002125d:	50                   	push   eax
c002125e:	e8 05 f7 fd ff       	call   c0000968 <strcat>
c0021263:	83 c4 10             	add    esp,0x10
c0021266:	83 ec 04             	sub    esp,0x4
c0021269:	6a 01                	push   0x1
c002126b:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0021272:	50                   	push   eax
c0021273:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021277:	50                   	push   eax
c0021278:	e8 f6 3c fe ff       	call   c0004f73 <f_open>
c002127d:	83 c4 10             	add    esp,0x10
c0021280:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0021287:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c002128e:	85 c0                	test   eax,eax
c0021290:	74 0a                	je     c002129c <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0021292:	78 2d                	js     c00212c1 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0021294:	83 e8 04             	sub    eax,0x4
c0021297:	83 f8 01             	cmp    eax,0x1
c002129a:	77 25                	ja     c00212c1 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002129c:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00212a4:	83 ec 0c             	sub    esp,0xc
c00212a7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00212ab:	50                   	push   eax
c00212ac:	e8 14 48 fe ff       	call   c0005ac5 <f_close>
c00212b1:	83 c4 10             	add    esp,0x10
c00212b4:	90                   	nop
c00212b5:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00212bd:	74 3a                	je     c00212f9 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00212bf:	eb 2d                	jmp    c00212ee <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00212c1:	83 ec 0c             	sub    esp,0xc
c00212c4:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00212cb:	e8 2a e6 fe ff       	call   c000f8fa <rfree>
c00212d0:	83 c4 10             	add    esp,0x10
c00212d3:	83 ec 04             	sub    esp,0x4
c00212d6:	6a 00                	push   0x0
c00212d8:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00212df:	50                   	push   eax
c00212e0:	6a 00                	push   0x0
c00212e2:	e8 2a 3c fe ff       	call   c0004f11 <f_mount>
c00212e7:	83 c4 10             	add    esp,0x10
c00212ea:	b0 00                	mov    al,0x0
c00212ec:	eb 12                	jmp    c0021300 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00212ee:	a1 a0 26 03 c0       	mov    eax,ds:0xc00326a0
c00212f3:	40                   	inc    eax
c00212f4:	a3 a0 26 03 c0       	mov    ds:0xc00326a0,eax
c00212f9:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0021300:	81 c4 6c 03 00 00    	add    esp,0x36c
c0021306:	c3                   	ret    
c0021307:	90                   	nop

c0021308 <FAT::getFileFirstSector(char const*)>:
c0021308:	53                   	push   ebx
c0021309:	83 ec 28             	sub    esp,0x28
c002130c:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c0021314:	83 ec 0c             	sub    esp,0xc
c0021317:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002131b:	e8 ba e5 fe ff       	call   c000f8da <malloc>
c0021320:	83 c4 10             	add    esp,0x10
c0021323:	89 c3                	mov    ebx,eax
c0021325:	a1 d0 25 03 c0       	mov    eax,ds:0xc00325d0
c002132a:	83 ec 04             	sub    esp,0x4
c002132d:	50                   	push   eax
c002132e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021332:	53                   	push   ebx
c0021333:	e8 ac 20 ff ff       	call   c00133e4 <File::File(char const*, Process*)>
c0021338:	83 c4 10             	add    esp,0x10
c002133b:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c002133f:	83 ec 08             	sub    esp,0x8
c0021342:	6a 01                	push   0x1
c0021344:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021348:	e8 fb 20 ff ff       	call   c0013448 <File::open(FileOpenMode)>
c002134d:	83 c4 10             	add    esp,0x10
c0021350:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021354:	8b 00                	mov    eax,DWORD PTR [eax]
c0021356:	83 c0 0c             	add    eax,0xc
c0021359:	8b 00                	mov    eax,DWORD PTR [eax]
c002135b:	83 ec 0c             	sub    esp,0xc
c002135e:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021362:	52                   	push   edx
c0021363:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021367:	52                   	push   edx
c0021368:	6a 00                	push   0x0
c002136a:	6a 04                	push   0x4
c002136c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0021370:	ff d0                	call   eax
c0021372:	83 c4 20             	add    esp,0x20
c0021375:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021379:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c002137f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021383:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021387:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c002138a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002138d:	83 ec 04             	sub    esp,0x4
c0021390:	52                   	push   edx
c0021391:	50                   	push   eax
c0021392:	68 7f d4 02 c0       	push   0xc002d47f
c0021397:	e8 e9 1a ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c002139c:	83 c4 10             	add    esp,0x10
c002139f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00213a3:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00213a6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00213a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00213ad:	83 ec 0c             	sub    esp,0xc
c00213b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00213b4:	e8 ed 20 ff ff       	call   c00134a6 <File::close()>
c00213b9:	83 c4 10             	add    esp,0x10
c00213bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00213c0:	ba 00 00 00 00       	mov    edx,0x0
c00213c5:	83 c4 28             	add    esp,0x28
c00213c8:	5b                   	pop    ebx
c00213c9:	c3                   	ret    

c00213ca <FAT::readDir(void*, unsigned long, void*, int*)>:
c00213ca:	57                   	push   edi
c00213cb:	56                   	push   esi
c00213cc:	53                   	push   ebx
c00213cd:	81 ec 50 02 00 00    	sub    esp,0x250
c00213d3:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00213db:	74 0a                	je     c00213e7 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c00213dd:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00213e5:	75 0a                	jne    c00213f1 <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c00213e7:	b8 04 00 00 00       	mov    eax,0x4
c00213ec:	e9 29 01 00 00       	jmp    c002151a <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00213f1:	83 ec 08             	sub    esp,0x8
c00213f4:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00213fb:	50                   	push   eax
c00213fc:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0021403:	e8 c7 4c fe ff       	call   c00060cf <f_readdir>
c0021408:	83 c4 10             	add    esp,0x10
c002140b:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0021412:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0021419:	83 ec 0c             	sub    esp,0xc
c002141c:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0021423:	83 c0 1a             	add    eax,0x1a
c0021426:	50                   	push   eax
c0021427:	e8 5c f3 fd ff       	call   c0000788 <strlen>
c002142c:	83 c4 10             	add    esp,0x10
c002142f:	ba 00 00 00 00       	mov    edx,0x0
c0021434:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021438:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002143c:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0021443:	0f b6 c0             	movzx  eax,al
c0021446:	83 e0 10             	and    eax,0x10
c0021449:	74 07                	je     c0021452 <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c002144b:	b8 02 00 00 00       	mov    eax,0x2
c0021450:	eb 05                	jmp    c0021457 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c0021452:	b8 01 00 00 00       	mov    eax,0x1
c0021457:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002145b:	83 ec 08             	sub    esp,0x8
c002145e:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0021465:	83 c0 1a             	add    eax,0x1a
c0021468:	50                   	push   eax
c0021469:	8d 44 24 10          	lea    eax,[esp+0x10]
c002146d:	83 c0 10             	add    eax,0x10
c0021470:	50                   	push   eax
c0021471:	e8 b2 f3 fd ff       	call   c0000828 <strcpy>
c0021476:	83 c4 10             	add    esp,0x10
c0021479:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0021480:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0021487:	8d 44 24 04          	lea    eax,[esp+0x4]
c002148b:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0021492:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0021499:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00214a0:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00214a7:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00214ae:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00214b5:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00214bc:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00214c3:	89 c6                	mov    esi,eax
c00214c5:	89 d7                	mov    edi,edx
c00214c7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00214c9:	89 c8                	mov    eax,ecx
c00214cb:	89 fa                	mov    edx,edi
c00214cd:	89 f3                	mov    ebx,esi
c00214cf:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00214d6:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00214dd:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00214e4:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00214eb:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00214f1:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00214f8:	84 c0                	test   al,al
c00214fa:	75 07                	jne    c0021503 <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c00214fc:	b8 07 00 00 00       	mov    eax,0x7
c0021501:	eb 17                	jmp    c002151a <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0021503:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c002150a:	85 c0                	test   eax,eax
c002150c:	75 07                	jne    c0021515 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c002150e:	b8 00 00 00 00       	mov    eax,0x0
c0021513:	eb 05                	jmp    c002151a <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0021515:	b8 01 00 00 00       	mov    eax,0x1
c002151a:	81 c4 50 02 00 00    	add    esp,0x250
c0021520:	5b                   	pop    ebx
c0021521:	5e                   	pop    esi
c0021522:	5f                   	pop    edi
c0021523:	c3                   	ret    

c0021524 <FAT::read(void*, unsigned long, void*, int*)>:
c0021524:	83 ec 1c             	sub    esp,0x1c
c0021527:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002152c:	74 07                	je     c0021535 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c002152e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0021533:	75 07                	jne    c002153c <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0021535:	b8 04 00 00 00       	mov    eax,0x4
c002153a:	eb 3d                	jmp    c0021579 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c002153c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021540:	50                   	push   eax
c0021541:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021545:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0021549:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002154d:	e8 5d 3e fe ff       	call   c00053af <f_read>
c0021552:	83 c4 10             	add    esp,0x10
c0021555:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021559:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002155d:	89 c2                	mov    edx,eax
c002155f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021563:	89 10                	mov    DWORD PTR [eax],edx
c0021565:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021569:	85 c0                	test   eax,eax
c002156b:	75 07                	jne    c0021574 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c002156d:	b8 00 00 00 00       	mov    eax,0x0
c0021572:	eb 05                	jmp    c0021579 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0021574:	b8 01 00 00 00       	mov    eax,0x1
c0021579:	83 c4 1c             	add    esp,0x1c
c002157c:	c3                   	ret    
c002157d:	90                   	nop

c002157e <FAT::write(void*, unsigned long, void*, int*)>:
c002157e:	83 ec 1c             	sub    esp,0x1c
c0021581:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021586:	74 07                	je     c002158f <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0021588:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002158d:	75 07                	jne    c0021596 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c002158f:	b8 04 00 00 00       	mov    eax,0x4
c0021594:	eb 3d                	jmp    c00215d3 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0021596:	8d 44 24 08          	lea    eax,[esp+0x8]
c002159a:	50                   	push   eax
c002159b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002159f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00215a3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00215a7:	e8 83 40 fe ff       	call   c000562f <f_write>
c00215ac:	83 c4 10             	add    esp,0x10
c00215af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00215b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00215b7:	89 c2                	mov    edx,eax
c00215b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00215bd:	89 10                	mov    DWORD PTR [eax],edx
c00215bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00215c3:	85 c0                	test   eax,eax
c00215c5:	75 07                	jne    c00215ce <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00215c7:	b8 00 00 00 00       	mov    eax,0x0
c00215cc:	eb 05                	jmp    c00215d3 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00215ce:	b8 01 00 00 00       	mov    eax,0x1
c00215d3:	83 c4 1c             	add    esp,0x1c
c00215d6:	c3                   	ret    
c00215d7:	90                   	nop

c00215d8 <FAT::close(void*)>:
c00215d8:	83 ec 1c             	sub    esp,0x1c
c00215db:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00215e0:	75 07                	jne    c00215e9 <FAT::close(void*)+0x11>
c00215e2:	b8 04 00 00 00       	mov    eax,0x4
c00215e7:	eb 36                	jmp    c002161f <FAT::close(void*)+0x47>
c00215e9:	83 ec 0c             	sub    esp,0xc
c00215ec:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00215f0:	e8 d0 44 fe ff       	call   c0005ac5 <f_close>
c00215f5:	83 c4 10             	add    esp,0x10
c00215f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00215fc:	83 ec 0c             	sub    esp,0xc
c00215ff:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021603:	e8 e2 e2 fe ff       	call   c000f8ea <free>
c0021608:	83 c4 10             	add    esp,0x10
c002160b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002160f:	85 c0                	test   eax,eax
c0021611:	75 07                	jne    c002161a <FAT::close(void*)+0x42>
c0021613:	b8 00 00 00 00       	mov    eax,0x0
c0021618:	eb 05                	jmp    c002161f <FAT::close(void*)+0x47>
c002161a:	b8 01 00 00 00       	mov    eax,0x1
c002161f:	83 c4 1c             	add    esp,0x1c
c0021622:	c3                   	ret    
c0021623:	90                   	nop

c0021624 <FAT::closeDir(void*)>:
c0021624:	83 ec 1c             	sub    esp,0x1c
c0021627:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002162c:	75 07                	jne    c0021635 <FAT::closeDir(void*)+0x11>
c002162e:	b8 04 00 00 00       	mov    eax,0x4
c0021633:	eb 36                	jmp    c002166b <FAT::closeDir(void*)+0x47>
c0021635:	83 ec 0c             	sub    esp,0xc
c0021638:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002163c:	e8 6c 4a fe ff       	call   c00060ad <f_closedir>
c0021641:	83 c4 10             	add    esp,0x10
c0021644:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021648:	83 ec 0c             	sub    esp,0xc
c002164b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002164f:	e8 96 e2 fe ff       	call   c000f8ea <free>
c0021654:	83 c4 10             	add    esp,0x10
c0021657:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002165b:	85 c0                	test   eax,eax
c002165d:	75 07                	jne    c0021666 <FAT::closeDir(void*)+0x42>
c002165f:	b8 00 00 00 00       	mov    eax,0x0
c0021664:	eb 05                	jmp    c002166b <FAT::closeDir(void*)+0x47>
c0021666:	b8 01 00 00 00       	mov    eax,0x1
c002166b:	83 c4 1c             	add    esp,0x1c
c002166e:	c3                   	ret    
c002166f:	90                   	nop

c0021670 <FAT::seek(void*, unsigned long long)>:
c0021670:	83 ec 2c             	sub    esp,0x2c
c0021673:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021677:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002167b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002167f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021683:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0021688:	75 07                	jne    c0021691 <FAT::seek(void*, unsigned long long)+0x21>
c002168a:	b8 04 00 00 00       	mov    eax,0x4
c002168f:	eb 2f                	jmp    c00216c0 <FAT::seek(void*, unsigned long long)+0x50>
c0021691:	83 ec 04             	sub    esp,0x4
c0021694:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021698:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002169c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00216a0:	e8 4f 44 fe ff       	call   c0005af4 <f_lseek>
c00216a5:	83 c4 10             	add    esp,0x10
c00216a8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00216ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00216b0:	85 c0                	test   eax,eax
c00216b2:	75 07                	jne    c00216bb <FAT::seek(void*, unsigned long long)+0x4b>
c00216b4:	b8 00 00 00 00       	mov    eax,0x0
c00216b9:	eb 05                	jmp    c00216c0 <FAT::seek(void*, unsigned long long)+0x50>
c00216bb:	b8 01 00 00 00       	mov    eax,0x1
c00216c0:	83 c4 2c             	add    esp,0x2c
c00216c3:	c3                   	ret    

c00216c4 <fatWrapperReadDisk>:
c00216c4:	83 ec 1c             	sub    esp,0x1c
c00216c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00216cb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00216cf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00216d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00216d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00216da:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00216de:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00216e3:	8b 04 85 80 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0980]
c00216ea:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00216ee:	83 ec 0c             	sub    esp,0xc
c00216f1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00216f5:	52                   	push   edx
c00216f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00216fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00216fe:	50                   	push   eax
c00216ff:	e8 f8 50 ff ff       	call   c00167fc <LogicalDisk::read(unsigned long long, int, void*)>
c0021704:	83 c4 20             	add    esp,0x20
c0021707:	83 c4 1c             	add    esp,0x1c
c002170a:	c3                   	ret    

c002170b <fatWrapperWriteDisk>:
c002170b:	83 ec 1c             	sub    esp,0x1c
c002170e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021712:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021716:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002171a:	89 04 24             	mov    DWORD PTR [esp],eax
c002171d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0021721:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021725:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002172a:	8b 04 85 80 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0980]
c0021731:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021735:	83 ec 0c             	sub    esp,0xc
c0021738:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002173c:	52                   	push   edx
c002173d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021741:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021745:	50                   	push   eax
c0021746:	e8 1d 51 ff ff       	call   c0016868 <LogicalDisk::write(unsigned long long, int, void*)>
c002174b:	83 c4 20             	add    esp,0x20
c002174e:	83 c4 1c             	add    esp,0x1c
c0021751:	c3                   	ret    

c0021752 <fatWrapperIoctl>:
c0021752:	53                   	push   ebx
c0021753:	83 ec 28             	sub    esp,0x28
c0021756:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002175a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002175e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021762:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021766:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c002176b:	75 31                	jne    c002179e <fatWrapperIoctl+0x4c>
c002176d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021771:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021775:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002177a:	8b 04 85 80 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0980]
c0021781:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0021787:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002178d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021791:	66 89 02             	mov    WORD PTR [edx],ax
c0021794:	b8 00 00 00 00       	mov    eax,0x0
c0021799:	e9 b2 00 00 00       	jmp    c0021850 <fatWrapperIoctl+0xfe>
c002179e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00217a3:	75 6a                	jne    c002180f <fatWrapperIoctl+0xbd>
c00217a5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00217a9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00217ad:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00217b2:	8b 04 85 80 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0980]
c00217b9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00217bf:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00217c5:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00217cb:	89 c8                	mov    eax,ecx
c00217cd:	89 da                	mov    edx,ebx
c00217cf:	0f a4 c2 0a          	shld   edx,eax,0xa
c00217d3:	c1 e0 0a             	shl    eax,0xa
c00217d6:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00217db:	8b 0c 8d 80 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0980]
c00217e2:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00217e8:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00217ee:	89 cb                	mov    ebx,ecx
c00217f0:	c1 fb 1f             	sar    ebx,0x1f
c00217f3:	53                   	push   ebx
c00217f4:	51                   	push   ecx
c00217f5:	52                   	push   edx
c00217f6:	50                   	push   eax
c00217f7:	e8 78 5b 00 00       	call   c0027374 <__udivdi3>
c00217fc:	83 c4 10             	add    esp,0x10
c00217ff:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021803:	89 01                	mov    DWORD PTR [ecx],eax
c0021805:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021808:	b8 00 00 00 00       	mov    eax,0x0
c002180d:	eb 41                	jmp    c0021850 <fatWrapperIoctl+0xfe>
c002180f:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0021814:	75 07                	jne    c002181d <fatWrapperIoctl+0xcb>
c0021816:	b8 00 00 00 00       	mov    eax,0x0
c002181b:	eb 33                	jmp    c0021850 <fatWrapperIoctl+0xfe>
c002181d:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0021822:	75 19                	jne    c002183d <fatWrapperIoctl+0xeb>
c0021824:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021828:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002182c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021830:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0021836:	b8 00 00 00 00       	mov    eax,0x0
c002183b:	eb 13                	jmp    c0021850 <fatWrapperIoctl+0xfe>
c002183d:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0021842:	75 07                	jne    c002184b <fatWrapperIoctl+0xf9>
c0021844:	b8 00 00 00 00       	mov    eax,0x0
c0021849:	eb 05                	jmp    c0021850 <fatWrapperIoctl+0xfe>
c002184b:	b8 04 00 00 00       	mov    eax,0x4
c0021850:	83 c4 28             	add    esp,0x28
c0021853:	5b                   	pop    ebx
c0021854:	c3                   	ret    
c0021855:	90                   	nop

c0021856 <FAT::FAT()>:
c0021856:	83 ec 1c             	sub    esp,0x1c
c0021859:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002185d:	83 ec 0c             	sub    esp,0xc
c0021860:	50                   	push   eax
c0021861:	e8 2a 19 ff ff       	call   c0013190 <Filesystem::Filesystem()>
c0021866:	83 c4 10             	add    esp,0x10
c0021869:	ba bc d4 02 c0       	mov    edx,0xc002d4bc
c002186e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021872:	89 10                	mov    DWORD PTR [eax],edx
c0021874:	c7 05 a0 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00326a0,0x0
c002187e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021886:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c002188b:	7f 15                	jg     c00218a2 <FAT::FAT()+0x4c>
c002188d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021891:	c7 04 85 c0 26 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcd940],0xffffffff
c002189c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00218a0:	eb e4                	jmp    c0021886 <FAT::FAT()+0x30>
c00218a2:	90                   	nop
c00218a3:	83 c4 1c             	add    esp,0x1c
c00218a6:	c3                   	ret    
c00218a7:	90                   	nop

c00218a8 <FAT::fixFilepath(char*)>:
c00218a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218ac:	8a 00                	mov    al,BYTE PTR [eax]
c00218ae:	3c 40                	cmp    al,0x40
c00218b0:	7e 2c                	jle    c00218de <FAT::fixFilepath(char*)+0x36>
c00218b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218b6:	8a 00                	mov    al,BYTE PTR [eax]
c00218b8:	83 e8 41             	sub    eax,0x41
c00218bb:	88 c2                	mov    dl,al
c00218bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218c1:	88 10                	mov    BYTE PTR [eax],dl
c00218c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218c7:	8a 00                	mov    al,BYTE PTR [eax]
c00218c9:	0f be c0             	movsx  eax,al
c00218cc:	8b 04 85 c0 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd940]
c00218d3:	83 c0 30             	add    eax,0x30
c00218d6:	88 c2                	mov    dl,al
c00218d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218dc:	88 10                	mov    BYTE PTR [eax],dl
c00218de:	90                   	nop
c00218df:	c3                   	ret    

c00218e0 <FAT::open(char const*, void**, FileOpenMode)>:
c00218e0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00218e6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00218ee:	74 0a                	je     c00218fa <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00218f0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00218f8:	75 0a                	jne    c0021904 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00218fa:	b8 04 00 00 00       	mov    eax,0x4
c00218ff:	e9 fd 00 00 00       	jmp    c0021a01 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021904:	83 ec 08             	sub    esp,0x8
c0021907:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002190e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021912:	50                   	push   eax
c0021913:	e8 10 ef fd ff       	call   c0000828 <strcpy>
c0021918:	83 c4 10             	add    esp,0x10
c002191b:	83 ec 08             	sub    esp,0x8
c002191e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021922:	50                   	push   eax
c0021923:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002192a:	e8 79 ff ff ff       	call   c00218a8 <FAT::fixFilepath(char*)>
c002192f:	83 c4 10             	add    esp,0x10
c0021932:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c002193a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021941:	83 e0 01             	and    eax,0x1
c0021944:	74 08                	je     c002194e <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0021946:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c002194e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021955:	83 e0 04             	and    eax,0x4
c0021958:	74 10                	je     c002196a <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c002195a:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021962:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002196a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021971:	83 e0 02             	and    eax,0x2
c0021974:	74 08                	je     c002197e <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0021976:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002197e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021985:	83 e0 08             	and    eax,0x8
c0021988:	74 08                	je     c0021992 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c002198a:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0021992:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021999:	83 e0 10             	and    eax,0x10
c002199c:	74 08                	je     c00219a6 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c002199e:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00219a6:	83 ec 0c             	sub    esp,0xc
c00219a9:	68 50 02 00 00       	push   0x250
c00219ae:	e8 27 df fe ff       	call   c000f8da <malloc>
c00219b3:	83 c4 10             	add    esp,0x10
c00219b6:	89 c2                	mov    edx,eax
c00219b8:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00219bf:	89 10                	mov    DWORD PTR [eax],edx
c00219c1:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00219c9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00219d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00219d2:	83 ec 04             	sub    esp,0x4
c00219d5:	52                   	push   edx
c00219d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00219da:	52                   	push   edx
c00219db:	50                   	push   eax
c00219dc:	e8 92 35 fe ff       	call   c0004f73 <f_open>
c00219e1:	83 c4 10             	add    esp,0x10
c00219e4:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00219eb:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00219f3:	74 07                	je     c00219fc <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00219f5:	b8 01 00 00 00       	mov    eax,0x1
c00219fa:	eb 05                	jmp    c0021a01 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00219fc:	b8 00 00 00 00       	mov    eax,0x0
c0021a01:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021a07:	c3                   	ret    

c0021a08 <FAT::openDir(char const*, void**)>:
c0021a08:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021a0e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021a16:	74 0a                	je     c0021a22 <FAT::openDir(char const*, void**)+0x1a>
c0021a18:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021a20:	75 07                	jne    c0021a29 <FAT::openDir(char const*, void**)+0x21>
c0021a22:	b8 04 00 00 00       	mov    eax,0x4
c0021a27:	eb 7d                	jmp    c0021aa6 <FAT::openDir(char const*, void**)+0x9e>
c0021a29:	83 ec 08             	sub    esp,0x8
c0021a2c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021a33:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021a37:	50                   	push   eax
c0021a38:	e8 eb ed fd ff       	call   c0000828 <strcpy>
c0021a3d:	83 c4 10             	add    esp,0x10
c0021a40:	83 ec 08             	sub    esp,0x8
c0021a43:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021a47:	50                   	push   eax
c0021a48:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021a4f:	e8 54 fe ff ff       	call   c00218a8 <FAT::fixFilepath(char*)>
c0021a54:	83 c4 10             	add    esp,0x10
c0021a57:	83 ec 0c             	sub    esp,0xc
c0021a5a:	6a 4c                	push   0x4c
c0021a5c:	e8 79 de fe ff       	call   c000f8da <malloc>
c0021a61:	83 c4 10             	add    esp,0x10
c0021a64:	89 c2                	mov    edx,eax
c0021a66:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021a6d:	89 10                	mov    DWORD PTR [eax],edx
c0021a6f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021a76:	8b 00                	mov    eax,DWORD PTR [eax]
c0021a78:	83 ec 08             	sub    esp,0x8
c0021a7b:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021a7f:	52                   	push   edx
c0021a80:	50                   	push   eax
c0021a81:	e8 25 45 fe ff       	call   c0005fab <f_opendir>
c0021a86:	83 c4 10             	add    esp,0x10
c0021a89:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021a90:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021a98:	74 07                	je     c0021aa1 <FAT::openDir(char const*, void**)+0x99>
c0021a9a:	b8 01 00 00 00       	mov    eax,0x1
c0021a9f:	eb 05                	jmp    c0021aa6 <FAT::openDir(char const*, void**)+0x9e>
c0021aa1:	b8 00 00 00 00       	mov    eax,0x0
c0021aa6:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021aac:	c3                   	ret    
c0021aad:	90                   	nop

c0021aae <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021aae:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021ab4:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0021abc:	75 0a                	jne    c0021ac8 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021abe:	b8 04 00 00 00       	mov    eax,0x4
c0021ac3:	e9 c9 00 00 00       	jmp    c0021b91 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021ac8:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021ad0:	75 0a                	jne    c0021adc <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021ad2:	b8 04 00 00 00       	mov    eax,0x4
c0021ad7:	e9 b5 00 00 00       	jmp    c0021b91 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021adc:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021ae4:	75 0a                	jne    c0021af0 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021ae6:	b8 04 00 00 00       	mov    eax,0x4
c0021aeb:	e9 a1 00 00 00       	jmp    c0021b91 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021af0:	83 ec 08             	sub    esp,0x8
c0021af3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021afa:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021b01:	50                   	push   eax
c0021b02:	e8 21 ed fd ff       	call   c0000828 <strcpy>
c0021b07:	83 c4 10             	add    esp,0x10
c0021b0a:	83 ec 08             	sub    esp,0x8
c0021b0d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021b14:	50                   	push   eax
c0021b15:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021b1c:	e8 87 fd ff ff       	call   c00218a8 <FAT::fixFilepath(char*)>
c0021b21:	83 c4 10             	add    esp,0x10
c0021b24:	83 ec 08             	sub    esp,0x8
c0021b27:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021b2b:	50                   	push   eax
c0021b2c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021b33:	50                   	push   eax
c0021b34:	e8 31 46 fe ff       	call   c000616a <f_stat>
c0021b39:	83 c4 10             	add    esp,0x10
c0021b3c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021b43:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021b4a:	85 c0                	test   eax,eax
c0021b4c:	74 07                	je     c0021b55 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021b4e:	83 f8 04             	cmp    eax,0x4
c0021b51:	74 32                	je     c0021b85 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021b53:	eb 37                	jmp    c0021b8c <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021b55:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021b59:	0f b6 c0             	movzx  eax,al
c0021b5c:	83 e0 10             	and    eax,0x10
c0021b5f:	0f 95 c2             	setne  dl
c0021b62:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021b69:	88 10                	mov    BYTE PTR [eax],dl
c0021b6b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021b6e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021b72:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021b79:	89 01                	mov    DWORD PTR [ecx],eax
c0021b7b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021b7e:	b8 00 00 00 00       	mov    eax,0x0
c0021b83:	eb 0c                	jmp    c0021b91 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021b85:	b8 02 00 00 00       	mov    eax,0x2
c0021b8a:	eb 05                	jmp    c0021b91 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021b8c:	b8 01 00 00 00       	mov    eax,0x1
c0021b91:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021b97:	c3                   	ret    

c0021b98 <FAT::unlink(char const*)>:
c0021b98:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021b9e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021ba6:	75 07                	jne    c0021baf <FAT::unlink(char const*)+0x17>
c0021ba8:	b8 04 00 00 00       	mov    eax,0x4
c0021bad:	eb 5c                	jmp    c0021c0b <FAT::unlink(char const*)+0x73>
c0021baf:	83 ec 08             	sub    esp,0x8
c0021bb2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021bb9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021bbd:	50                   	push   eax
c0021bbe:	e8 65 ec fd ff       	call   c0000828 <strcpy>
c0021bc3:	83 c4 10             	add    esp,0x10
c0021bc6:	83 ec 08             	sub    esp,0x8
c0021bc9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021bcd:	50                   	push   eax
c0021bce:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021bd5:	e8 ce fc ff ff       	call   c00218a8 <FAT::fixFilepath(char*)>
c0021bda:	83 c4 10             	add    esp,0x10
c0021bdd:	83 ec 0c             	sub    esp,0xc
c0021be0:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021be4:	50                   	push   eax
c0021be5:	e8 d2 48 fe ff       	call   c00064bc <f_unlink>
c0021bea:	83 c4 10             	add    esp,0x10
c0021bed:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021bf4:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021bfb:	85 c0                	test   eax,eax
c0021bfd:	75 07                	jne    c0021c06 <FAT::unlink(char const*)+0x6e>
c0021bff:	b8 00 00 00 00       	mov    eax,0x0
c0021c04:	eb 05                	jmp    c0021c0b <FAT::unlink(char const*)+0x73>
c0021c06:	b8 01 00 00 00       	mov    eax,0x1
c0021c0b:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021c11:	c3                   	ret    

c0021c12 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021c12:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021c18:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021c1f:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021c26:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021c2a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021c2e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021c36:	75 0a                	jne    c0021c42 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021c38:	b8 04 00 00 00       	mov    eax,0x4
c0021c3d:	e9 1c 01 00 00       	jmp    c0021d5e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021c42:	83 ec 08             	sub    esp,0x8
c0021c45:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021c50:	50                   	push   eax
c0021c51:	e8 d2 eb fd ff       	call   c0000828 <strcpy>
c0021c56:	83 c4 10             	add    esp,0x10
c0021c59:	83 ec 08             	sub    esp,0x8
c0021c5c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021c60:	50                   	push   eax
c0021c61:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021c68:	e8 3b fc ff ff       	call   c00218a8 <FAT::fixFilepath(char*)>
c0021c6d:	83 c4 10             	add    esp,0x10
c0021c70:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021c78:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021c80:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021c85:	83 e0 01             	and    eax,0x1
c0021c88:	74 08                	je     c0021c92 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021c8a:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021c92:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021c97:	83 e0 02             	and    eax,0x2
c0021c9a:	74 08                	je     c0021ca4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021c9c:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021ca4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021ca9:	83 e0 04             	and    eax,0x4
c0021cac:	74 08                	je     c0021cb6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021cae:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021cb6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021cbb:	83 e0 08             	and    eax,0x8
c0021cbe:	74 08                	je     c0021cc8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021cc0:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021cc8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021ccd:	83 e0 01             	and    eax,0x1
c0021cd0:	74 08                	je     c0021cda <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021cd2:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021cda:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021cdf:	83 e0 02             	and    eax,0x2
c0021ce2:	74 08                	je     c0021cec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021ce4:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021cec:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021cf1:	83 e0 04             	and    eax,0x4
c0021cf4:	74 08                	je     c0021cfe <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021cf6:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021cfe:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021d03:	83 e0 08             	and    eax,0x8
c0021d06:	74 08                	je     c0021d10 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021d08:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021d10:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021d17:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021d1e:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021d26:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021d2e:	83 ec 04             	sub    esp,0x4
c0021d31:	52                   	push   edx
c0021d32:	50                   	push   eax
c0021d33:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021d37:	50                   	push   eax
c0021d38:	e8 21 4e fe ff       	call   c0006b5e <f_chmod>
c0021d3d:	83 c4 10             	add    esp,0x10
c0021d40:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021d47:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021d4e:	85 c0                	test   eax,eax
c0021d50:	75 07                	jne    c0021d59 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021d52:	b8 00 00 00 00       	mov    eax,0x0
c0021d57:	eb 05                	jmp    c0021d5e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021d59:	b8 01 00 00 00       	mov    eax,0x1
c0021d5e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021d64:	c3                   	ret    
c0021d65:	90                   	nop

c0021d66 <FAT::rename(char const*, char const*)>:
c0021d66:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021d6c:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021d74:	74 0a                	je     c0021d80 <FAT::rename(char const*, char const*)+0x1a>
c0021d76:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021d7e:	75 0a                	jne    c0021d8a <FAT::rename(char const*, char const*)+0x24>
c0021d80:	b8 04 00 00 00       	mov    eax,0x4
c0021d85:	e9 98 00 00 00       	jmp    c0021e22 <FAT::rename(char const*, char const*)+0xbc>
c0021d8a:	83 ec 08             	sub    esp,0x8
c0021d8d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021d94:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021d9b:	50                   	push   eax
c0021d9c:	e8 87 ea fd ff       	call   c0000828 <strcpy>
c0021da1:	83 c4 10             	add    esp,0x10
c0021da4:	83 ec 08             	sub    esp,0x8
c0021da7:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021dae:	50                   	push   eax
c0021daf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021db6:	e8 ed fa ff ff       	call   c00218a8 <FAT::fixFilepath(char*)>
c0021dbb:	83 c4 10             	add    esp,0x10
c0021dbe:	83 ec 08             	sub    esp,0x8
c0021dc1:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021dc8:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021dcc:	50                   	push   eax
c0021dcd:	e8 56 ea fd ff       	call   c0000828 <strcpy>
c0021dd2:	83 c4 10             	add    esp,0x10
c0021dd5:	83 ec 08             	sub    esp,0x8
c0021dd8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021ddc:	50                   	push   eax
c0021ddd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021de4:	e8 bf fa ff ff       	call   c00218a8 <FAT::fixFilepath(char*)>
c0021de9:	83 c4 10             	add    esp,0x10
c0021dec:	83 ec 08             	sub    esp,0x8
c0021def:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021df3:	50                   	push   eax
c0021df4:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021dfb:	50                   	push   eax
c0021dfc:	e8 6a 4a fe ff       	call   c000686b <f_rename>
c0021e01:	83 c4 10             	add    esp,0x10
c0021e04:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021e0b:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021e12:	85 c0                	test   eax,eax
c0021e14:	75 07                	jne    c0021e1d <FAT::rename(char const*, char const*)+0xb7>
c0021e16:	b8 00 00 00 00       	mov    eax,0x0
c0021e1b:	eb 05                	jmp    c0021e22 <FAT::rename(char const*, char const*)+0xbc>
c0021e1d:	b8 01 00 00 00       	mov    eax,0x1
c0021e22:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021e28:	c3                   	ret    
c0021e29:	90                   	nop

c0021e2a <FAT::mkdir(char const*)>:
c0021e2a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021e30:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021e38:	75 07                	jne    c0021e41 <FAT::mkdir(char const*)+0x17>
c0021e3a:	b8 04 00 00 00       	mov    eax,0x4
c0021e3f:	eb 5c                	jmp    c0021e9d <FAT::mkdir(char const*)+0x73>
c0021e41:	83 ec 08             	sub    esp,0x8
c0021e44:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021e4b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021e4f:	50                   	push   eax
c0021e50:	e8 d3 e9 fd ff       	call   c0000828 <strcpy>
c0021e55:	83 c4 10             	add    esp,0x10
c0021e58:	83 ec 08             	sub    esp,0x8
c0021e5b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021e5f:	50                   	push   eax
c0021e60:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021e67:	e8 3c fa ff ff       	call   c00218a8 <FAT::fixFilepath(char*)>
c0021e6c:	83 c4 10             	add    esp,0x10
c0021e6f:	83 ec 0c             	sub    esp,0xc
c0021e72:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021e76:	50                   	push   eax
c0021e77:	e8 c3 47 fe ff       	call   c000663f <f_mkdir>
c0021e7c:	83 c4 10             	add    esp,0x10
c0021e7f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021e86:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021e8d:	85 c0                	test   eax,eax
c0021e8f:	75 07                	jne    c0021e98 <FAT::mkdir(char const*)+0x6e>
c0021e91:	b8 00 00 00 00       	mov    eax,0x0
c0021e96:	eb 05                	jmp    c0021e9d <FAT::mkdir(char const*)+0x73>
c0021e98:	b8 01 00 00 00       	mov    eax,0x1
c0021e9d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021ea3:	c3                   	ret    

c0021ea4 <FAT::exists(char const*)>:
c0021ea4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021eaa:	83 ec 08             	sub    esp,0x8
c0021ead:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021eb4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021eb8:	50                   	push   eax
c0021eb9:	e8 6a e9 fd ff       	call   c0000828 <strcpy>
c0021ebe:	83 c4 10             	add    esp,0x10
c0021ec1:	83 ec 08             	sub    esp,0x8
c0021ec4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021ec8:	50                   	push   eax
c0021ec9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021ed0:	e8 d3 f9 ff ff       	call   c00218a8 <FAT::fixFilepath(char*)>
c0021ed5:	83 c4 10             	add    esp,0x10
c0021ed8:	83 ec 08             	sub    esp,0x8
c0021edb:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021ee2:	50                   	push   eax
c0021ee3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021ee7:	50                   	push   eax
c0021ee8:	e8 7d 42 fe ff       	call   c000616a <f_stat>
c0021eed:	83 c4 10             	add    esp,0x10
c0021ef0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021ef7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021efe:	85 c0                	test   eax,eax
c0021f00:	75 04                	jne    c0021f06 <FAT::exists(char const*)+0x62>
c0021f02:	b0 01                	mov    al,0x1
c0021f04:	eb 02                	jmp    c0021f08 <FAT::exists(char const*)+0x64>
c0021f06:	b0 00                	mov    al,0x0
c0021f08:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021f0e:	c3                   	ret    
c0021f0f:	90                   	nop

c0021f10 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021f10:	b8 08 00 00 00       	mov    eax,0x8
c0021f15:	c3                   	ret    

c0021f16 <ISO9660::seek(void*, unsigned long long)>:
c0021f16:	53                   	push   ebx
c0021f17:	b8 04 00 00 00       	mov    eax,0x4
c0021f1c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021f20:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021f24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021f28:	85 d2                	test   edx,edx
c0021f2a:	74 17                	je     c0021f43 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021f2c:	89 c8                	mov    eax,ecx
c0021f2e:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021f31:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021f34:	b8 01 00 00 00       	mov    eax,0x1
c0021f39:	73 08                	jae    c0021f43 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021f3b:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021f3e:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021f41:	31 c0                	xor    eax,eax
c0021f43:	5b                   	pop    ebx
c0021f44:	c3                   	ret    
c0021f45:	90                   	nop

c0021f46 <ISO9660::tell(void*, unsigned long long*)>:
c0021f46:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021f4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f4e:	85 d2                	test   edx,edx
c0021f50:	74 12                	je     c0021f64 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021f52:	85 c0                	test   eax,eax
c0021f54:	74 0e                	je     c0021f64 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021f56:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021f59:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021f5c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021f5f:	89 10                	mov    DWORD PTR [eax],edx
c0021f61:	31 c0                	xor    eax,eax
c0021f63:	c3                   	ret    
c0021f64:	b8 04 00 00 00       	mov    eax,0x4
c0021f69:	c3                   	ret    

c0021f6a <ISO9660::getName()>:
c0021f6a:	b8 1c d5 02 c0       	mov    eax,0xc002d51c
c0021f6f:	c3                   	ret    

c0021f70 <ISO9660::stat(void*, unsigned long long*)>:
c0021f70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021f74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f78:	85 d2                	test   edx,edx
c0021f7a:	74 12                	je     c0021f8e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021f7c:	85 c0                	test   eax,eax
c0021f7e:	74 0e                	je     c0021f8e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021f80:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021f83:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021f86:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021f89:	89 10                	mov    DWORD PTR [eax],edx
c0021f8b:	31 c0                	xor    eax,eax
c0021f8d:	c3                   	ret    
c0021f8e:	b8 04 00 00 00       	mov    eax,0x4
c0021f93:	c3                   	ret    

c0021f94 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021f94:	b8 01 00 00 00       	mov    eax,0x1
c0021f99:	c3                   	ret    

c0021f9a <ISO9660::unlink(char const*)>:
c0021f9a:	b8 01 00 00 00       	mov    eax,0x1
c0021f9f:	c3                   	ret    

c0021fa0 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021fa0:	b8 01 00 00 00       	mov    eax,0x1
c0021fa5:	c3                   	ret    

c0021fa6 <ISO9660::rename(char const*, char const*)>:
c0021fa6:	b8 01 00 00 00       	mov    eax,0x1
c0021fab:	c3                   	ret    

c0021fac <ISO9660::mkdir(char const*)>:
c0021fac:	b8 01 00 00 00       	mov    eax,0x1
c0021fb1:	c3                   	ret    

c0021fb2 <ISO9660::close(void*)>:
c0021fb2:	83 ec 0c             	sub    esp,0xc
c0021fb5:	b8 04 00 00 00       	mov    eax,0x4
c0021fba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021fbe:	85 d2                	test   edx,edx
c0021fc0:	74 0e                	je     c0021fd0 <ISO9660::close(void*)+0x1e>
c0021fc2:	83 ec 0c             	sub    esp,0xc
c0021fc5:	52                   	push   edx
c0021fc6:	e8 1f d9 fe ff       	call   c000f8ea <free>
c0021fcb:	83 c4 10             	add    esp,0x10
c0021fce:	31 c0                	xor    eax,eax
c0021fd0:	83 c4 0c             	add    esp,0xc
c0021fd3:	c3                   	ret    

c0021fd4 <ISO9660::closeDir(void*)>:
c0021fd4:	83 ec 0c             	sub    esp,0xc
c0021fd7:	b8 04 00 00 00       	mov    eax,0x4
c0021fdc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021fe0:	85 d2                	test   edx,edx
c0021fe2:	74 0e                	je     c0021ff2 <ISO9660::closeDir(void*)+0x1e>
c0021fe4:	83 ec 0c             	sub    esp,0xc
c0021fe7:	52                   	push   edx
c0021fe8:	e8 fd d8 fe ff       	call   c000f8ea <free>
c0021fed:	83 c4 10             	add    esp,0x10
c0021ff0:	31 c0                	xor    eax,eax
c0021ff2:	83 c4 0c             	add    esp,0xc
c0021ff5:	c3                   	ret    

c0021ff6 <ISO9660::~ISO9660()>:
c0021ff6:	83 ec 0c             	sub    esp,0xc
c0021ff9:	ba 80 d5 02 c0       	mov    edx,0xc002d580
c0021ffe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022002:	89 10                	mov    DWORD PTR [eax],edx
c0022004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022008:	83 ec 0c             	sub    esp,0xc
c002200b:	50                   	push   eax
c002200c:	e8 a3 11 ff ff       	call   c00131b4 <Filesystem::~Filesystem()>
c0022011:	83 c4 10             	add    esp,0x10
c0022014:	90                   	nop
c0022015:	83 c4 0c             	add    esp,0xc
c0022018:	c3                   	ret    
c0022019:	90                   	nop

c002201a <ISO9660::~ISO9660()>:
c002201a:	83 ec 0c             	sub    esp,0xc
c002201d:	83 ec 0c             	sub    esp,0xc
c0022020:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022024:	e8 cd ff ff ff       	call   c0021ff6 <ISO9660::~ISO9660()>
c0022029:	83 c4 10             	add    esp,0x10
c002202c:	83 ec 08             	sub    esp,0x8
c002202f:	6a 08                	push   0x8
c0022031:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022035:	e8 6b 0d ff ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c002203a:	83 c4 10             	add    esp,0x10
c002203d:	83 c4 0c             	add    esp,0xc
c0022040:	c3                   	ret    

c0022041 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0022041:	55                   	push   ebp
c0022042:	31 c9                	xor    ecx,ecx
c0022044:	57                   	push   edi
c0022045:	56                   	push   esi
c0022046:	53                   	push   ebx
c0022047:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c002204b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002204f:	89 eb                	mov    ebx,ebp
c0022051:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0022055:	39 ce                	cmp    esi,ecx
c0022057:	7e 17                	jle    c0022070 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0022059:	31 d2                	xor    edx,edx
c002205b:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c002205f:	7d 13                	jge    c0022074 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0022061:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022065:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0022068:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c002206b:	75 0d                	jne    c002207a <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c002206d:	42                   	inc    edx
c002206e:	eb eb                	jmp    c002205b <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0022070:	31 c0                	xor    eax,eax
c0022072:	eb 0a                	jmp    c002207e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0022074:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0022078:	eb 04                	jmp    c002207e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002207a:	41                   	inc    ecx
c002207b:	43                   	inc    ebx
c002207c:	eb d7                	jmp    c0022055 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c002207e:	5b                   	pop    ebx
c002207f:	5e                   	pop    esi
c0022080:	5f                   	pop    edi
c0022081:	5d                   	pop    ebp
c0022082:	c3                   	ret    

c0022083 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0022083:	57                   	push   edi
c0022084:	56                   	push   esi
c0022085:	53                   	push   ebx
c0022086:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002208a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002208e:	39 0d a0 27 03 c0    	cmp    DWORD PTR ds:0xc00327a0,ecx
c0022094:	75 08                	jne    c002209e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c0022096:	38 05 f4 e5 02 c0    	cmp    BYTE PTR ds:0xc002e5f4,al
c002209c:	74 2b                	je     c00220c9 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c002209e:	83 ec 0c             	sub    esp,0xc
c00220a1:	a2 f4 e5 02 c0       	mov    ds:0xc002e5f4,al
c00220a6:	68 c0 27 03 c0       	push   0xc00327c0
c00220ab:	0f be c0             	movsx  eax,al
c00220ae:	6a 01                	push   0x1
c00220b0:	89 0d a0 27 03 c0    	mov    DWORD PTR ds:0xc00327a0,ecx
c00220b6:	31 db                	xor    ebx,ebx
c00220b8:	53                   	push   ebx
c00220b9:	51                   	push   ecx
c00220ba:	ff 34 85 7c f5 02 c0 	push   DWORD PTR [eax*4-0x3ffd0a84]
c00220c1:	e8 36 47 ff ff       	call   c00167fc <LogicalDisk::read(unsigned long long, int, void*)>
c00220c6:	83 c4 20             	add    esp,0x20
c00220c9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00220cd:	be c0 27 03 c0       	mov    esi,0xc00327c0
c00220d2:	b9 00 08 00 00       	mov    ecx,0x800
c00220d7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00220d9:	5b                   	pop    ebx
c00220da:	5e                   	pop    esi
c00220db:	5f                   	pop    edi
c00220dc:	c3                   	ret    
c00220dd:	90                   	nop

c00220de <ISO9660::tryMount(LogicalDisk*, int)>:
c00220de:	81 ec 10 08 00 00    	sub    esp,0x810
c00220e4:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00220eb:	83 c0 41             	add    eax,0x41
c00220ee:	0f be c0             	movsx  eax,al
c00220f1:	50                   	push   eax
c00220f2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00220f6:	50                   	push   eax
c00220f7:	6a 10                	push   0x10
c00220f9:	e8 85 ff ff ff       	call   c0022083 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00220fe:	83 c4 10             	add    esp,0x10
c0022101:	31 c0                	xor    eax,eax
c0022103:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0022108:	75 1d                	jne    c0022127 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002210a:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c002210f:	75 16                	jne    c0022127 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0022111:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0022116:	75 0f                	jne    c0022127 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0022118:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c002211d:	75 08                	jne    c0022127 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002211f:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0022124:	0f 94 c0             	sete   al
c0022127:	81 c4 0c 08 00 00    	add    esp,0x80c
c002212d:	c3                   	ret    

c002212e <ISO9660::read(void*, unsigned long, void*, int*)>:
c002212e:	55                   	push   ebp
c002212f:	57                   	push   edi
c0022130:	56                   	push   esi
c0022131:	53                   	push   ebx
c0022132:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0022138:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c002213f:	85 ed                	test   ebp,ebp
c0022141:	0f 84 da 01 00 00    	je     c0022321 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0022147:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c002214f:	0f 84 cc 01 00 00    	je     c0022321 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0022155:	b8 01 00 00 00       	mov    eax,0x1
c002215a:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c002215e:	0f 85 c2 01 00 00    	jne    c0022326 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0022164:	31 d2                	xor    edx,edx
c0022166:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002216d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0022170:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0022173:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0022176:	89 04 24             	mov    DWORD PTR [esp],eax
c0022179:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002217d:	01 c8                	add    eax,ecx
c002217f:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0022182:	11 da                	adc    edx,ebx
c0022184:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0022188:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002218c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0022190:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022194:	19 d7                	sbb    edi,edx
c0022196:	72 11                	jb     c00221a9 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0022198:	8b 34 24             	mov    esi,DWORD PTR [esp]
c002219b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c002219f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00221a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00221a7:	eb 0c                	jmp    c00221b5 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00221a9:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00221ad:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00221b1:	29 ce                	sub    esi,ecx
c00221b3:	19 df                	sbb    edi,ebx
c00221b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00221b8:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00221bb:	0f a4 c2 0b          	shld   edx,eax,0xb
c00221bf:	c1 e0 0b             	shl    eax,0xb
c00221c2:	01 c8                	add    eax,ecx
c00221c4:	11 da                	adc    edx,ebx
c00221c6:	89 04 24             	mov    DWORD PTR [esp],eax
c00221c9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00221cd:	51                   	push   ecx
c00221ce:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00221d2:	50                   	push   eax
c00221d3:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00221d7:	53                   	push   ebx
c00221d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00221dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00221e0:	0f ac d0 0b          	shrd   eax,edx,0xb
c00221e4:	50                   	push   eax
c00221e5:	e8 99 fe ff ff       	call   c0022083 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00221ea:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00221ed:	b8 00 08 00 00       	mov    eax,0x800
c00221f2:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00221f8:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c00221fc:	29 d0                	sub    eax,edx
c00221fe:	83 c4 10             	add    esp,0x10
c0022201:	89 f9                	mov    ecx,edi
c0022203:	39 c6                	cmp    esi,eax
c0022205:	83 d9 00             	sbb    ecx,0x0
c0022208:	7d 1b                	jge    c0022225 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c002220a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c002220f:	75 12                	jne    c0022223 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0022211:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0022218:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002221e:	e9 fa 00 00 00       	jmp    c002231d <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0022223:	89 f0                	mov    eax,esi
c0022225:	01 d3                	add    ebx,edx
c0022227:	31 d2                	xor    edx,edx
c0022229:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c002222d:	39 c2                	cmp    edx,eax
c002222f:	7d 14                	jge    c0022245 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0022231:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0022238:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002223c:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c002223f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0022242:	42                   	inc    edx
c0022243:	eb e8                	jmp    c002222d <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0022245:	89 c2                	mov    edx,eax
c0022247:	85 c0                	test   eax,eax
c0022249:	79 02                	jns    c002224d <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c002224b:	31 d2                	xor    edx,edx
c002224d:	01 c2                	add    edx,eax
c002224f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0022252:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0022259:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c002225d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0022261:	99                   	cdq    
c0022262:	01 c1                	add    ecx,eax
c0022264:	11 d3                	adc    ebx,edx
c0022266:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c002226a:	29 c6                	sub    esi,eax
c002226c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0022270:	19 d7                	sbb    edi,edx
c0022272:	89 34 24             	mov    DWORD PTR [esp],esi
c0022275:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0022279:	b8 ff 07 00 00       	mov    eax,0x7ff
c002227e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0022281:	b8 00 00 00 00       	mov    eax,0x0
c0022286:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c002228a:	7d 43                	jge    c00222cf <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c002228c:	52                   	push   edx
c002228d:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0022291:	50                   	push   eax
c0022292:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022296:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002229a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002229e:	0f ac d0 0b          	shrd   eax,edx,0xb
c00222a2:	50                   	push   eax
c00222a3:	e8 db fd ff ff       	call   c0022083 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00222a8:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00222b0:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00222b5:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c00222bd:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00222c5:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00222ca:	83 c4 10             	add    esp,0x10
c00222cd:	eb aa                	jmp    c0022279 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c00222cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222d3:	0b 04 24             	or     eax,DWORD PTR [esp]
c00222d6:	74 2a                	je     c0022302 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c00222d8:	50                   	push   eax
c00222d9:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00222dd:	50                   	push   eax
c00222de:	8d 74 24 28          	lea    esi,[esp+0x28]
c00222e2:	56                   	push   esi
c00222e3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00222e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00222eb:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c00222ef:	51                   	push   ecx
c00222f0:	e8 8e fd ff ff       	call   c0022083 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00222f5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00222f9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00222fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00222ff:	83 c4 10             	add    esp,0x10
c0022302:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0022309:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002230d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022311:	89 18                	mov    DWORD PTR [eax],ebx
c0022313:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022317:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c002231a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002231d:	31 c0                	xor    eax,eax
c002231f:	eb 05                	jmp    c0022326 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0022321:	b8 04 00 00 00       	mov    eax,0x4
c0022326:	81 c4 2c 08 00 00    	add    esp,0x82c
c002232c:	5b                   	pop    ebx
c002232d:	5e                   	pop    esi
c002232e:	5f                   	pop    edi
c002232f:	5d                   	pop    ebp
c0022330:	c3                   	ret    
c0022331:	90                   	nop

c0022332 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0022332:	55                   	push   ebp
c0022333:	57                   	push   edi
c0022334:	56                   	push   esi
c0022335:	53                   	push   ebx
c0022336:	81 ec 5c 09 00 00    	sub    esp,0x95c
c002233c:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0022343:	85 ed                	test   ebp,ebp
c0022345:	0f 84 51 02 00 00    	je     c002259c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c002234b:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0022353:	0f 84 43 02 00 00    	je     c002259c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0022359:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002235c:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c002235f:	75 0a                	jne    c002236b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0022361:	b8 07 00 00 00       	mov    eax,0x7
c0022366:	e9 36 02 00 00       	jmp    c00225a1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c002236b:	50                   	push   eax
c002236c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0022370:	50                   	push   eax
c0022371:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0022378:	53                   	push   ebx
c0022379:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002237c:	c1 e0 0b             	shl    eax,0xb
c002237f:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0022382:	c1 e8 0b             	shr    eax,0xb
c0022385:	50                   	push   eax
c0022386:	e8 f8 fc ff ff       	call   c0022083 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002238b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002238e:	83 c4 10             	add    esp,0x10
c0022391:	89 c1                	mov    ecx,eax
c0022393:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0022396:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002239c:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c002239f:	84 db                	test   bl,bl
c00223a1:	0f 85 8b 00 00 00    	jne    c0022432 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c00223a7:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c00223ad:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00223b0:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00223b6:	29 c6                	sub    esi,eax
c00223b8:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00223bc:	89 f3                	mov    ebx,esi
c00223be:	89 f1                	mov    ecx,esi
c00223c0:	c1 fb 1f             	sar    ebx,0x1f
c00223c3:	01 f0                	add    eax,esi
c00223c5:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00223c8:	11 da                	adc    edx,ebx
c00223ca:	89 04 24             	mov    DWORD PTR [esp],eax
c00223cd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00223d1:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00223d4:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00223d7:	89 d8                	mov    eax,ebx
c00223d9:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c00223dd:	ba 00 00 00 00       	mov    edx,0x0
c00223e2:	19 f8                	sbb    eax,edi
c00223e4:	b8 00 00 00 00       	mov    eax,0x0
c00223e9:	73 08                	jae    c00223f3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c00223eb:	89 f0                	mov    eax,esi
c00223ed:	89 fa                	mov    edx,edi
c00223ef:	29 c8                	sub    eax,ecx
c00223f1:	19 da                	sbb    edx,ebx
c00223f3:	89 d7                	mov    edi,edx
c00223f5:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c00223f8:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00223fb:	09 c7                	or     edi,eax
c00223fd:	0f 84 5e ff ff ff    	je     c0022361 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0022403:	57                   	push   edi
c0022404:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0022408:	50                   	push   eax
c0022409:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0022410:	53                   	push   ebx
c0022411:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022414:	c1 e0 0b             	shl    eax,0xb
c0022417:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c002241b:	c1 e8 0b             	shr    eax,0xb
c002241e:	50                   	push   eax
c002241f:	e8 5f fc ff ff       	call   c0022083 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022424:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022427:	83 c4 10             	add    esp,0x10
c002242a:	25 ff 07 00 00       	and    eax,0x7ff
c002242f:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0022432:	31 ff                	xor    edi,edi
c0022434:	56                   	push   esi
c0022435:	6a 28                	push   0x28
c0022437:	6a 00                	push   0x0
c0022439:	8d 44 24 24          	lea    eax,[esp+0x24]
c002243d:	50                   	push   eax
c002243e:	e8 29 e3 fd ff       	call   c000076c <memset>
c0022443:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022446:	25 ff 07 00 00       	and    eax,0x7ff
c002244b:	89 c6                	mov    esi,eax
c002244d:	83 c6 21             	add    esi,0x21
c0022450:	83 d7 00             	adc    edi,0x0
c0022453:	83 c4 10             	add    esp,0x10
c0022456:	31 c9                	xor    ecx,ecx
c0022458:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c002245f:	83 f9 28             	cmp    ecx,0x28
c0022462:	88 04 24             	mov    BYTE PTR [esp],al
c0022465:	0f 94 c2             	sete   dl
c0022468:	88 d0                	mov    al,dl
c002246a:	ba ff 07 00 00       	mov    edx,0x7ff
c002246f:	39 f2                	cmp    edx,esi
c0022471:	ba 00 00 00 00       	mov    edx,0x0
c0022476:	19 fa                	sbb    edx,edi
c0022478:	0f 92 c2             	setb   dl
c002247b:	09 c2                	or     edx,eax
c002247d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0022481:	0f 94 c0             	sete   al
c0022484:	08 d0                	or     al,dl
c0022486:	75 16                	jne    c002249e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0022488:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c002248c:	74 10                	je     c002249e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c002248e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0022491:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0022495:	41                   	inc    ecx
c0022496:	83 c6 01             	add    esi,0x1
c0022499:	83 d7 00             	adc    edi,0x0
c002249c:	eb ba                	jmp    c0022458 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c002249e:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c00224a5:	83 ec 0c             	sub    esp,0xc
c00224a8:	8d 74 24 24          	lea    esi,[esp+0x24]
c00224ac:	56                   	push   esi
c00224ad:	e8 d6 e2 fd ff       	call   c0000788 <strlen>
c00224b2:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c00224b9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00224bd:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00224c5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00224c8:	5a                   	pop    edx
c00224c9:	25 ff 07 00 00       	and    eax,0x7ff
c00224ce:	59                   	pop    ecx
c00224cf:	01 f8                	add    eax,edi
c00224d1:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c00224d7:	83 e0 02             	and    eax,0x2
c00224da:	3c 01                	cmp    al,0x1
c00224dc:	19 c0                	sbb    eax,eax
c00224de:	83 c0 02             	add    eax,0x2
c00224e1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00224e5:	56                   	push   esi
c00224e6:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00224ea:	50                   	push   eax
c00224eb:	e8 38 e3 fd ff       	call   c0000828 <strcpy>
c00224f0:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c00224f4:	83 c4 10             	add    esp,0x10
c00224f7:	84 c0                	test   al,al
c00224f9:	75 21                	jne    c002251c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c00224fb:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0022503:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002250b:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0022513:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c002251a:	eb 28                	jmp    c0022544 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c002251c:	fe c8                	dec    al
c002251e:	75 24                	jne    c0022544 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0022520:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0022528:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0022530:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0022538:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c002253f:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0022544:	8d 74 24 40          	lea    esi,[esp+0x40]
c0022548:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c002254f:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0022556:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022558:	0f b6 f3             	movzx  esi,bl
c002255b:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0022562:	31 db                	xor    ebx,ebx
c0022564:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c002256a:	89 df                	mov    edi,ebx
c002256c:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c002256f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022572:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0022575:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022578:	39 c6                	cmp    esi,eax
c002257a:	19 d7                	sbb    edi,edx
c002257c:	72 10                	jb     c002258e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c002257e:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0022585:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c002258c:	eb 0a                	jmp    c0022598 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c002258e:	29 f0                	sub    eax,esi
c0022590:	19 da                	sbb    edx,ebx
c0022592:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0022595:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0022598:	31 c0                	xor    eax,eax
c002259a:	eb 05                	jmp    c00225a1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c002259c:	b8 04 00 00 00       	mov    eax,0x4
c00225a1:	81 c4 5c 09 00 00    	add    esp,0x95c
c00225a7:	5b                   	pop    ebx
c00225a8:	5e                   	pop    esi
c00225a9:	5f                   	pop    edi
c00225aa:	5d                   	pop    ebp
c00225ab:	c3                   	ret    

c00225ac <readRoot(unsigned int*, unsigned int*, char)>:
c00225ac:	57                   	push   edi
c00225ad:	56                   	push   esi
c00225ae:	81 ec 38 08 00 00    	sub    esp,0x838
c00225b4:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c00225bc:	50                   	push   eax
c00225bd:	8d 44 24 38          	lea    eax,[esp+0x38]
c00225c1:	50                   	push   eax
c00225c2:	6a 10                	push   0x10
c00225c4:	e8 ba fa ff ff       	call   c0022083 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00225c9:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c00225d0:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c00225d4:	b9 22 00 00 00       	mov    ecx,0x22
c00225d9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00225db:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00225e2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00225e6:	89 10                	mov    DWORD PTR [eax],edx
c00225e8:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c00225ef:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00225f3:	89 10                	mov    DWORD PTR [eax],edx
c00225f5:	81 c4 44 08 00 00    	add    esp,0x844
c00225fb:	b0 01                	mov    al,0x1
c00225fd:	5e                   	pop    esi
c00225fe:	5f                   	pop    edi
c00225ff:	c3                   	ret    

c0022600 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0022600:	55                   	push   ebp
c0022601:	57                   	push   edi
c0022602:	56                   	push   esi
c0022603:	53                   	push   ebx
c0022604:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002260a:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0022611:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0022618:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002261c:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0022620:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0022624:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022628:	75 03                	jne    c002262d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c002262a:	83 c3 02             	add    ebx,0x2
c002262d:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0022630:	75 03                	jne    c0022635 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0022632:	43                   	inc    ebx
c0022633:	eb f8                	jmp    c002262d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0022635:	51                   	push   ecx
c0022636:	68 00 01 00 00       	push   0x100
c002263b:	6a 00                	push   0x0
c002263d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022641:	50                   	push   eax
c0022642:	e8 25 e1 fd ff       	call   c000076c <memset>
c0022647:	83 c4 10             	add    esp,0x10
c002264a:	31 d2                	xor    edx,edx
c002264c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002264f:	84 c0                	test   al,al
c0022651:	74 21                	je     c0022674 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0022653:	3c 2f                	cmp    al,0x2f
c0022655:	75 0b                	jne    c0022662 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0022657:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c002265b:	bd 01 00 00 00       	mov    ebp,0x1
c0022660:	eb 14                	jmp    c0022676 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0022662:	8d 48 9f             	lea    ecx,[eax-0x61]
c0022665:	80 f9 19             	cmp    cl,0x19
c0022668:	77 03                	ja     c002266d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c002266a:	83 e8 20             	sub    eax,0x20
c002266d:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0022671:	42                   	inc    edx
c0022672:	eb d8                	jmp    c002264c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0022674:	31 ed                	xor    ebp,ebp
c0022676:	83 ec 0c             	sub    esp,0xc
c0022679:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0022680:	e8 55 d2 fe ff       	call   c000f8da <malloc>
c0022685:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c002268c:	89 c6                	mov    esi,eax
c002268e:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0022694:	c1 ef 0b             	shr    edi,0xb
c0022697:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c002269e:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00226a2:	83 c4 10             	add    esp,0x10
c00226a5:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c00226aa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00226ae:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c00226b5:	74 28                	je     c00226df <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c00226b7:	52                   	push   edx
c00226b8:	57                   	push   edi
c00226b9:	50                   	push   eax
c00226ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00226be:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00226c5:	e8 b9 f9 ff ff       	call   c0022083 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00226ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00226ce:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c00226d5:	05 00 08 00 00       	add    eax,0x800
c00226da:	83 c4 10             	add    esp,0x10
c00226dd:	eb cb                	jmp    c00226aa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c00226df:	83 ec 0c             	sub    esp,0xc
c00226e2:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00226e6:	57                   	push   edi
c00226e7:	e8 9c e0 fd ff       	call   c0000788 <strlen>
c00226ec:	50                   	push   eax
c00226ed:	57                   	push   edi
c00226ee:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00226f5:	56                   	push   esi
c00226f6:	e8 46 f9 ff ff       	call   c0022041 <__memmem(unsigned char*, int, unsigned char*, int)>
c00226fb:	83 c4 20             	add    esp,0x20
c00226fe:	85 c0                	test   eax,eax
c0022700:	75 13                	jne    c0022715 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0022702:	83 ec 0c             	sub    esp,0xc
c0022705:	56                   	push   esi
c0022706:	e8 df d1 fe ff       	call   c000f8ea <free>
c002270b:	83 c4 10             	add    esp,0x10
c002270e:	31 c0                	xor    eax,eax
c0022710:	e9 b3 00 00 00       	jmp    c00227c8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0022715:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0022719:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c002271d:	c1 e7 08             	shl    edi,0x8
c0022720:	c1 e2 10             	shl    edx,0x10
c0022723:	09 d7                	or     edi,edx
c0022725:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0022729:	09 d7                	or     edi,edx
c002272b:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c002272f:	c1 e2 18             	shl    edx,0x18
c0022732:	09 d7                	or     edi,edx
c0022734:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0022738:	89 d1                	mov    ecx,edx
c002273a:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c002273e:	c1 e1 08             	shl    ecx,0x8
c0022741:	c1 e2 10             	shl    edx,0x10
c0022744:	09 ca                	or     edx,ecx
c0022746:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c002274a:	09 ca                	or     edx,ecx
c002274c:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0022750:	c1 e1 18             	shl    ecx,0x18
c0022753:	09 ca                	or     edx,ecx
c0022755:	89 e9                	mov    ecx,ebp
c0022757:	84 c9                	test   cl,cl
c0022759:	74 3c                	je     c0022797 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c002275b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002275f:	83 ec 0c             	sub    esp,0xc
c0022762:	56                   	push   esi
c0022763:	e8 82 d1 fe ff       	call   c000f8ea <free>
c0022768:	83 c4 0c             	add    esp,0xc
c002276b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0022772:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0022777:	50                   	push   eax
c0022778:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002277f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0022786:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002278a:	52                   	push   edx
c002278b:	57                   	push   edi
c002278c:	53                   	push   ebx
c002278d:	e8 6e fe ff ff       	call   c0022600 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022792:	83 c4 20             	add    esp,0x20
c0022795:	eb 31                	jmp    c00227c8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0022797:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c002279a:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c00227a1:	d0 e8                	shr    al,1
c00227a3:	89 3b                	mov    DWORD PTR [ebx],edi
c00227a5:	83 e0 01             	and    eax,0x1
c00227a8:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00227af:	83 ec 0c             	sub    esp,0xc
c00227b2:	89 13                	mov    DWORD PTR [ebx],edx
c00227b4:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00227bb:	89 03                	mov    DWORD PTR [ebx],eax
c00227bd:	56                   	push   esi
c00227be:	e8 27 d1 fe ff       	call   c000f8ea <free>
c00227c3:	83 c4 10             	add    esp,0x10
c00227c6:	b0 01                	mov    al,0x1
c00227c8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00227ce:	5b                   	pop    ebx
c00227cf:	5e                   	pop    esi
c00227d0:	5f                   	pop    edi
c00227d1:	5d                   	pop    ebp
c00227d2:	c3                   	ret    

c00227d3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c00227d3:	55                   	push   ebp
c00227d4:	57                   	push   edi
c00227d5:	56                   	push   esi
c00227d6:	53                   	push   ebx
c00227d7:	83 ec 20             	sub    esp,0x20
c00227da:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00227de:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00227e2:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00227e6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00227ee:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00227f6:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c00227fb:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0022801:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0022807:	57                   	push   edi
c0022808:	8d 44 24 14          	lea    eax,[esp+0x14]
c002280c:	50                   	push   eax
c002280d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022811:	50                   	push   eax
c0022812:	e8 95 fd ff ff       	call   c00225ac <readRoot(unsigned int*, unsigned int*, char)>
c0022817:	5a                   	pop    edx
c0022818:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002281c:	e8 67 df fd ff       	call   c0000788 <strlen>
c0022821:	83 c4 10             	add    esp,0x10
c0022824:	83 f8 03             	cmp    eax,0x3
c0022827:	77 17                	ja     c0022840 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0022829:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002282d:	89 03                	mov    DWORD PTR [ebx],eax
c002282f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022833:	89 06                	mov    DWORD PTR [esi],eax
c0022835:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c002283c:	b0 01                	mov    al,0x1
c002283e:	eb 19                	jmp    c0022859 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0022840:	50                   	push   eax
c0022841:	55                   	push   ebp
c0022842:	57                   	push   edi
c0022843:	56                   	push   esi
c0022844:	53                   	push   ebx
c0022845:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022849:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002284d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022851:	e8 aa fd ff ff       	call   c0022600 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022856:	83 c4 20             	add    esp,0x20
c0022859:	83 c4 1c             	add    esp,0x1c
c002285c:	5b                   	pop    ebx
c002285d:	5e                   	pop    esi
c002285e:	5f                   	pop    edi
c002285f:	5d                   	pop    ebp
c0022860:	c3                   	ret    
c0022861:	90                   	nop

c0022862 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0022862:	57                   	push   edi
c0022863:	56                   	push   esi
c0022864:	53                   	push   ebx
c0022865:	83 ec 10             	sub    esp,0x10
c0022868:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002286c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022870:	85 ff                	test   edi,edi
c0022872:	0f 84 9d 00 00 00    	je     c0022915 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022878:	85 f6                	test   esi,esi
c002287a:	0f 84 95 00 00 00    	je     c0022915 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022880:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0022885:	74 17                	je     c002289e <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0022887:	83 ec 0c             	sub    esp,0xc
c002288a:	68 37 d5 02 c0       	push   0xc002d537
c002288f:	e8 f1 05 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0022894:	83 c4 10             	add    esp,0x10
c0022897:	b8 03 00 00 00       	mov    eax,0x3
c002289c:	eb 7c                	jmp    c002291a <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002289e:	83 ec 0c             	sub    esp,0xc
c00228a1:	6a 1c                	push   0x1c
c00228a3:	e8 32 d0 fe ff       	call   c000f8da <malloc>
c00228a8:	89 07                	mov    DWORD PTR [edi],eax
c00228aa:	89 c3                	mov    ebx,eax
c00228ac:	58                   	pop    eax
c00228ad:	8d 44 24 18          	lea    eax,[esp+0x18]
c00228b1:	50                   	push   eax
c00228b2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00228b5:	50                   	push   eax
c00228b6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00228ba:	50                   	push   eax
c00228bb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00228bf:	50                   	push   eax
c00228c0:	56                   	push   esi
c00228c1:	e8 0d ff ff ff       	call   c00227d3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00228c6:	83 c4 20             	add    esp,0x20
c00228c9:	84 c0                	test   al,al
c00228cb:	74 07                	je     c00228d4 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c00228cd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00228d2:	74 0b                	je     c00228df <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c00228d4:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00228d8:	b8 01 00 00 00       	mov    eax,0x1
c00228dd:	eb 3b                	jmp    c002291a <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00228df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00228e3:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00228e7:	89 03                	mov    DWORD PTR [ebx],eax
c00228e9:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00228f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00228f4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00228fb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022902:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022905:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002290c:	8a 06                	mov    al,BYTE PTR [esi]
c002290e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022911:	31 c0                	xor    eax,eax
c0022913:	eb 05                	jmp    c002291a <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022915:	b8 04 00 00 00       	mov    eax,0x4
c002291a:	83 c4 10             	add    esp,0x10
c002291d:	5b                   	pop    ebx
c002291e:	5e                   	pop    esi
c002291f:	5f                   	pop    edi
c0022920:	c3                   	ret    
c0022921:	90                   	nop

c0022922 <ISO9660::exists(char const*)>:
c0022922:	83 ec 28             	sub    esp,0x28
c0022925:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022929:	8d 54 24 18          	lea    edx,[esp+0x18]
c002292d:	52                   	push   edx
c002292e:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0022931:	52                   	push   edx
c0022932:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022936:	52                   	push   edx
c0022937:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002293b:	52                   	push   edx
c002293c:	50                   	push   eax
c002293d:	e8 91 fe ff ff       	call   c00227d3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022942:	83 c4 3c             	add    esp,0x3c
c0022945:	c3                   	ret    

c0022946 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022946:	56                   	push   esi
c0022947:	53                   	push   ebx
c0022948:	83 ec 14             	sub    esp,0x14
c002294b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002294f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022953:	85 db                	test   ebx,ebx
c0022955:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022959:	0f 94 c2             	sete   dl
c002295c:	85 f6                	test   esi,esi
c002295e:	0f 94 c0             	sete   al
c0022961:	08 c2                	or     dl,al
c0022963:	75 68                	jne    c00229cd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022965:	85 c9                	test   ecx,ecx
c0022967:	74 64                	je     c00229cd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022969:	83 ec 0c             	sub    esp,0xc
c002296c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002296f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022973:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022979:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022980:	50                   	push   eax
c0022981:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022984:	50                   	push   eax
c0022985:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022989:	50                   	push   eax
c002298a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002298e:	50                   	push   eax
c002298f:	51                   	push   ecx
c0022990:	e8 3e fe ff ff       	call   c00227d3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022995:	83 c4 20             	add    esp,0x20
c0022998:	ba 01 00 00 00       	mov    edx,0x1
c002299d:	84 c0                	test   al,al
c002299f:	74 31                	je     c00229d2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00229a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00229a5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00229ac:	89 03                	mov    DWORD PTR [ebx],eax
c00229ae:	ba 00 00 00 00       	mov    edx,0x0
c00229b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00229b7:	85 c0                	test   eax,eax
c00229b9:	0f 95 06             	setne  BYTE PTR [esi]
c00229bc:	74 14                	je     c00229d2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00229be:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00229c4:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00229cb:	eb 05                	jmp    c00229d2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00229cd:	ba 04 00 00 00       	mov    edx,0x4
c00229d2:	83 c4 14             	add    esp,0x14
c00229d5:	89 d0                	mov    eax,edx
c00229d7:	5b                   	pop    ebx
c00229d8:	5e                   	pop    esi
c00229d9:	c3                   	ret    

c00229da <ISO9660::openDir(char const*, void**)>:
c00229da:	57                   	push   edi
c00229db:	56                   	push   esi
c00229dc:	53                   	push   ebx
c00229dd:	83 ec 10             	sub    esp,0x10
c00229e0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00229e4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00229e8:	85 ff                	test   edi,edi
c00229ea:	0f 84 95 00 00 00    	je     c0022a85 <ISO9660::openDir(char const*, void**)+0xab>
c00229f0:	85 f6                	test   esi,esi
c00229f2:	0f 84 8d 00 00 00    	je     c0022a85 <ISO9660::openDir(char const*, void**)+0xab>
c00229f8:	83 ec 0c             	sub    esp,0xc
c00229fb:	6a 1c                	push   0x1c
c00229fd:	e8 d8 ce fe ff       	call   c000f8da <malloc>
c0022a02:	89 07                	mov    DWORD PTR [edi],eax
c0022a04:	89 c3                	mov    ebx,eax
c0022a06:	59                   	pop    ecx
c0022a07:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022a0b:	50                   	push   eax
c0022a0c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022a0f:	50                   	push   eax
c0022a10:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022a14:	50                   	push   eax
c0022a15:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022a19:	50                   	push   eax
c0022a1a:	56                   	push   esi
c0022a1b:	e8 b3 fd ff ff       	call   c00227d3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022a20:	83 c4 20             	add    esp,0x20
c0022a23:	84 c0                	test   al,al
c0022a25:	74 07                	je     c0022a2e <ISO9660::openDir(char const*, void**)+0x54>
c0022a27:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022a2c:	75 21                	jne    c0022a4f <ISO9660::openDir(char const*, void**)+0x75>
c0022a2e:	0f b6 c0             	movzx  eax,al
c0022a31:	52                   	push   edx
c0022a32:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022a36:	50                   	push   eax
c0022a37:	68 5d d5 02 c0       	push   0xc002d55d
c0022a3c:	e8 44 04 ff ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0022a41:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022a45:	83 c4 10             	add    esp,0x10
c0022a48:	b8 01 00 00 00       	mov    eax,0x1
c0022a4d:	eb 3b                	jmp    c0022a8a <ISO9660::openDir(char const*, void**)+0xb0>
c0022a4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a53:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022a57:	89 03                	mov    DWORD PTR [ebx],eax
c0022a59:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022a60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022a64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022a6b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022a72:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022a75:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022a7c:	8a 06                	mov    al,BYTE PTR [esi]
c0022a7e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022a81:	31 c0                	xor    eax,eax
c0022a83:	eb 05                	jmp    c0022a8a <ISO9660::openDir(char const*, void**)+0xb0>
c0022a85:	b8 04 00 00 00       	mov    eax,0x4
c0022a8a:	83 c4 10             	add    esp,0x10
c0022a8d:	5b                   	pop    ebx
c0022a8e:	5e                   	pop    esi
c0022a8f:	5f                   	pop    edi
c0022a90:	c3                   	ret    
c0022a91:	90                   	nop

c0022a92 <ISO9660::ISO9660()>:
c0022a92:	83 ec 0c             	sub    esp,0xc
c0022a95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a99:	83 ec 0c             	sub    esp,0xc
c0022a9c:	50                   	push   eax
c0022a9d:	e8 ee 06 ff ff       	call   c0013190 <Filesystem::Filesystem()>
c0022aa2:	83 c4 10             	add    esp,0x10
c0022aa5:	ba 80 d5 02 c0       	mov    edx,0xc002d580
c0022aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aae:	89 10                	mov    DWORD PTR [eax],edx
c0022ab0:	90                   	nop
c0022ab1:	83 c4 0c             	add    esp,0xc
c0022ab4:	c3                   	ret    
c0022ab5:	90                   	nop

c0022ab6 <SoundChannel::~SoundChannel()>:
c0022ab6:	83 ec 0c             	sub    esp,0xc
c0022ab9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022abd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0022ac0:	83 ec 0c             	sub    esp,0xc
c0022ac3:	50                   	push   eax
c0022ac4:	e8 21 ce fe ff       	call   c000f8ea <free>
c0022ac9:	83 c4 10             	add    esp,0x10
c0022acc:	90                   	nop
c0022acd:	83 c4 0c             	add    esp,0xc
c0022ad0:	c3                   	ret    
c0022ad1:	90                   	nop

c0022ad2 <SoundChannel::setSpeed(float)>:
c0022ad2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ad6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022ada:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0022add:	c3                   	ret    

c0022ade <SoundChannel::getSpeed()>:
c0022ade:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ae2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0022ae5:	c3                   	ret    

c0022ae6 <SoundChannel::setVolume(int)>:
c0022ae6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022aea:	83 f8 64             	cmp    eax,0x64
c0022aed:	7e 05                	jle    c0022af4 <SoundChannel::setVolume(int)+0xe>
c0022aef:	b8 64 00 00 00       	mov    eax,0x64
c0022af4:	85 c0                	test   eax,eax
c0022af6:	79 02                	jns    c0022afa <SoundChannel::setVolume(int)+0x14>
c0022af8:	31 c0                	xor    eax,eax
c0022afa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022afe:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0022b01:	c3                   	ret    

c0022b02 <SoundChannel::getVolume()>:
c0022b02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b06:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0022b09:	c3                   	ret    

c0022b0a <SoundChannel::pause()>:
c0022b0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b0e:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0022b12:	c3                   	ret    
c0022b13:	90                   	nop

c0022b14 <SoundChannel::SoundChannel(int, int, int, int)>:
c0022b14:	83 ec 1c             	sub    esp,0x1c
c0022b17:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022b1b:	e8 ea ff ff ff       	call   c0022b0a <SoundChannel::pause()>
c0022b20:	83 c4 04             	add    esp,0x4
c0022b23:	6a 50                	push   0x50
c0022b25:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022b29:	e8 b8 ff ff ff       	call   c0022ae6 <SoundChannel::setVolume(int)>
c0022b2e:	83 c4 08             	add    esp,0x8
c0022b31:	a1 fc d5 02 c0       	mov    eax,ds:0xc002d5fc
c0022b36:	50                   	push   eax
c0022b37:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022b3b:	e8 92 ff ff ff       	call   c0022ad2 <SoundChannel::setSpeed(float)>
c0022b40:	83 c4 08             	add    esp,0x8
c0022b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022b47:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022b4b:	89 10                	mov    DWORD PTR [eax],edx
c0022b4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022b51:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022b55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022b58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022b5c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022b60:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022b63:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022b68:	75 23                	jne    c0022b8d <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0022b6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022b6e:	8b 10                	mov    edx,DWORD PTR [eax]
c0022b70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022b74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b77:	0f af c2             	imul   eax,edx
c0022b7a:	85 c0                	test   eax,eax
c0022b7c:	79 03                	jns    c0022b81 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0022b7e:	83 c0 03             	add    eax,0x3
c0022b81:	c1 f8 02             	sar    eax,0x2
c0022b84:	05 a0 0f 00 00       	add    eax,0xfa0
c0022b89:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022b8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022b91:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022b95:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022b98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022b9c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022ba3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022ba7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0022bae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022bb2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022bb5:	c1 e0 02             	shl    eax,0x2
c0022bb8:	83 ec 0c             	sub    esp,0xc
c0022bbb:	50                   	push   eax
c0022bbc:	e8 19 cd fe ff       	call   c000f8da <malloc>
c0022bc1:	83 c4 10             	add    esp,0x10
c0022bc4:	89 c2                	mov    edx,eax
c0022bc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022bca:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0022bcd:	83 ec 04             	sub    esp,0x4
c0022bd0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022bd4:	50                   	push   eax
c0022bd5:	6a 01                	push   0x1
c0022bd7:	6a 04                	push   0x4
c0022bd9:	e8 a3 5f fe ff       	call   c0008b81 <src_new>
c0022bde:	83 c4 10             	add    esp,0x10
c0022be1:	89 c2                	mov    edx,eax
c0022be3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022be7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022bea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022bee:	85 c0                	test   eax,eax
c0022bf0:	74 10                	je     c0022c02 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0022bf2:	83 ec 0c             	sub    esp,0xc
c0022bf5:	68 e0 d5 02 c0       	push   0xc002d5e0
c0022bfa:	e8 6e 7c ff ff       	call   c001a86d <Krnl::panic(char const*)>
c0022bff:	83 c4 10             	add    esp,0x10
c0022c02:	a0 c0 33 03 c0       	mov    al,ds:0xc00333c0
c0022c07:	83 f0 01             	xor    eax,0x1
c0022c0a:	84 c0                	test   al,al
c0022c0c:	74 57                	je     c0022c65 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0022c0e:	a1 00 d6 02 c0       	mov    eax,ds:0xc002d600
c0022c13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022c17:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022c1f:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022c27:	7f 35                	jg     c0022c5e <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0022c29:	83 ec 0c             	sub    esp,0xc
c0022c2c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022c30:	e8 6a 50 00 00       	call   c0027c9f <__floatsisf>
c0022c35:	83 c4 10             	add    esp,0x10
c0022c38:	8b 15 00 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d600
c0022c3e:	83 ec 08             	sub    esp,0x8
c0022c41:	52                   	push   edx
c0022c42:	50                   	push   eax
c0022c43:	e8 69 4c 00 00       	call   c00278b1 <__mulsf3>
c0022c48:	83 c4 10             	add    esp,0x10
c0022c4b:	89 c2                	mov    edx,eax
c0022c4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022c51:	89 14 85 c0 2f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd040],edx
c0022c58:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022c5c:	eb c1                	jmp    c0022c1f <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0022c5e:	c6 05 c0 33 03 c0 01 	mov    BYTE PTR ds:0xc00333c0,0x1
c0022c65:	90                   	nop
c0022c66:	83 c4 1c             	add    esp,0x1c
c0022c69:	c3                   	ret    

c0022c6a <SoundChannel::play()>:
c0022c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c6e:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022c72:	c3                   	ret    
c0022c73:	90                   	nop

c0022c74 <SoundChannel::paused()>:
c0022c74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c78:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022c7b:	c3                   	ret    

c0022c7c <SoundChannel::getSampleRate()>:
c0022c7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c80:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c82:	c3                   	ret    
c0022c83:	90                   	nop

c0022c84 <SoundChannel::getBits()>:
c0022c84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022c8b:	c3                   	ret    

c0022c8c <SoundChannel::getBufferUsed()>:
c0022c8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c90:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022c93:	c3                   	ret    

c0022c94 <SoundChannel::getBufferSize()>:
c0022c94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c98:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022c9b:	c3                   	ret    

c0022c9c <SoundChannel::unbuffer(float*, int, int)>:
c0022c9c:	56                   	push   esi
c0022c9d:	53                   	push   ebx
c0022c9e:	83 ec 40             	sub    esp,0x40
c0022ca1:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022ca5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022ca8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022cac:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022caf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022cb3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022cb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022cbb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022cbf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022cc3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022cc7:	e8 d3 4f 00 00       	call   c0027c9f <__floatsisf>
c0022ccc:	5a                   	pop    edx
c0022ccd:	89 c6                	mov    esi,eax
c0022ccf:	ff 33                	push   DWORD PTR [ebx]
c0022cd1:	e8 c9 4f 00 00       	call   c0027c9f <__floatsisf>
c0022cd6:	59                   	pop    ecx
c0022cd7:	5a                   	pop    edx
c0022cd8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022cdb:	50                   	push   eax
c0022cdc:	e8 d0 4b 00 00       	call   c00278b1 <__mulsf3>
c0022ce1:	59                   	pop    ecx
c0022ce2:	5a                   	pop    edx
c0022ce3:	50                   	push   eax
c0022ce4:	56                   	push   esi
c0022ce5:	e8 8a 4d 00 00       	call   c0027a74 <__divsf3>
c0022cea:	89 04 24             	mov    DWORD PTR [esp],eax
c0022ced:	e8 7d 62 00 00       	call   c0028f6f <__extendsfdf2>
c0022cf2:	59                   	pop    ecx
c0022cf3:	5e                   	pop    esi
c0022cf4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022cf8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022cfc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022d04:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022d08:	50                   	push   eax
c0022d09:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022d0c:	e8 65 5a fe ff       	call   c0008776 <src_process>
c0022d11:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022d15:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022d18:	83 c4 0c             	add    esp,0xc
c0022d1b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022d1e:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022d21:	29 d0                	sub    eax,edx
c0022d23:	c1 e0 02             	shl    eax,0x2
c0022d26:	50                   	push   eax
c0022d27:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022d2a:	50                   	push   eax
c0022d2b:	51                   	push   ecx
c0022d2c:	e8 73 d9 fd ff       	call   c00006a4 <memmove>
c0022d31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022d35:	83 c4 44             	add    esp,0x44
c0022d38:	5b                   	pop    ebx
c0022d39:	5e                   	pop    esi
c0022d3a:	c3                   	ret    
c0022d3b:	90                   	nop

c0022d3c <SoundChannel::buffer8(unsigned char*, int)>:
c0022d3c:	55                   	push   ebp
c0022d3d:	57                   	push   edi
c0022d3e:	56                   	push   esi
c0022d3f:	53                   	push   ebx
c0022d40:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022d44:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022d48:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022d4b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022d4f:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022d52:	74 7a                	je     c0022dce <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022d54:	85 ff                	test   edi,edi
c0022d56:	7e 76                	jle    c0022dce <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022d58:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022d5c:	8d 70 01             	lea    esi,[eax+0x1]
c0022d5f:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022d62:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022d65:	8b 1c 9d c0 2f 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd040]
c0022d6c:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022d6f:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022d72:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022d75:	74 5e                	je     c0022dd5 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022d77:	83 ff 01             	cmp    edi,0x1
c0022d7a:	74 4b                	je     c0022dc7 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022d7c:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022d80:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022d83:	8d 70 01             	lea    esi,[eax+0x1]
c0022d86:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022d89:	8b 1c 9d c0 2f 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd040]
c0022d90:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022d93:	b8 02 00 00 00       	mov    eax,0x2
c0022d98:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022d9b:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022d9e:	75 23                	jne    c0022dc3 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022da0:	eb 27                	jmp    c0022dc9 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022da2:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022da7:	8d 71 01             	lea    esi,[ecx+0x1]
c0022daa:	40                   	inc    eax
c0022dab:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022dae:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022db1:	8b 1c 9d c0 2f 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd040]
c0022db8:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022dbb:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022dbe:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022dc1:	74 06                	je     c0022dc9 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022dc3:	39 c7                	cmp    edi,eax
c0022dc5:	75 db                	jne    c0022da2 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022dc7:	89 f8                	mov    eax,edi
c0022dc9:	5b                   	pop    ebx
c0022dca:	5e                   	pop    esi
c0022dcb:	5f                   	pop    edi
c0022dcc:	5d                   	pop    ebp
c0022dcd:	c3                   	ret    
c0022dce:	5b                   	pop    ebx
c0022dcf:	31 c0                	xor    eax,eax
c0022dd1:	5e                   	pop    esi
c0022dd2:	5f                   	pop    edi
c0022dd3:	5d                   	pop    ebp
c0022dd4:	c3                   	ret    
c0022dd5:	b8 01 00 00 00       	mov    eax,0x1
c0022dda:	eb ed                	jmp    c0022dc9 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022ddc <SoundDevice::SoundDevice(char const*)>:
c0022ddc:	83 ec 1c             	sub    esp,0x1c
c0022ddf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022de3:	83 ec 08             	sub    esp,0x8
c0022de6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022dea:	50                   	push   eax
c0022deb:	e8 a6 16 ff ff       	call   c0014496 <Device::Device(char const*)>
c0022df0:	83 c4 10             	add    esp,0x10
c0022df3:	ba 0c d6 02 c0       	mov    edx,0xc002d60c
c0022df8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022dfc:	89 10                	mov    DWORD PTR [eax],edx
c0022dfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022e02:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022e0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022e10:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022e1a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022e22:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022e27:	7f 19                	jg     c0022e42 <SoundDevice::SoundDevice(char const*)+0x66>
c0022e29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022e2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022e31:	83 c2 54             	add    edx,0x54
c0022e34:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022e3c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022e40:	eb e0                	jmp    c0022e22 <SoundDevice::SoundDevice(char const*)+0x46>
c0022e42:	90                   	nop
c0022e43:	83 c4 1c             	add    esp,0x1c
c0022e46:	c3                   	ret    
c0022e47:	90                   	nop

c0022e48 <SoundDevice::~SoundDevice()>:
c0022e48:	53                   	push   ebx
c0022e49:	83 ec 18             	sub    esp,0x18
c0022e4c:	ba 0c d6 02 c0       	mov    edx,0xc002d60c
c0022e51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022e55:	89 10                	mov    DWORD PTR [eax],edx
c0022e57:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022e5f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022e64:	7f 46                	jg     c0022eac <SoundDevice::~SoundDevice()+0x64>
c0022e66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022e6a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022e6e:	83 c2 54             	add    edx,0x54
c0022e71:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022e75:	85 c0                	test   eax,eax
c0022e77:	74 2d                	je     c0022ea6 <SoundDevice::~SoundDevice()+0x5e>
c0022e79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022e7d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022e81:	83 c2 54             	add    edx,0x54
c0022e84:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022e88:	85 db                	test   ebx,ebx
c0022e8a:	74 1a                	je     c0022ea6 <SoundDevice::~SoundDevice()+0x5e>
c0022e8c:	83 ec 0c             	sub    esp,0xc
c0022e8f:	53                   	push   ebx
c0022e90:	e8 21 fc ff ff       	call   c0022ab6 <SoundChannel::~SoundChannel()>
c0022e95:	83 c4 10             	add    esp,0x10
c0022e98:	83 ec 08             	sub    esp,0x8
c0022e9b:	6a 2c                	push   0x2c
c0022e9d:	53                   	push   ebx
c0022e9e:	e8 02 ff fe ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c0022ea3:	83 c4 10             	add    esp,0x10
c0022ea6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022eaa:	eb b3                	jmp    c0022e5f <SoundDevice::~SoundDevice()+0x17>
c0022eac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022eb0:	83 ec 0c             	sub    esp,0xc
c0022eb3:	50                   	push   eax
c0022eb4:	e8 d3 12 ff ff       	call   c001418c <Device::~Device()>
c0022eb9:	83 c4 10             	add    esp,0x10
c0022ebc:	90                   	nop
c0022ebd:	83 c4 18             	add    esp,0x18
c0022ec0:	5b                   	pop    ebx
c0022ec1:	c3                   	ret    

c0022ec2 <SoundDevice::~SoundDevice()>:
c0022ec2:	83 ec 0c             	sub    esp,0xc
c0022ec5:	83 ec 0c             	sub    esp,0xc
c0022ec8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ecc:	e8 77 ff ff ff       	call   c0022e48 <SoundDevice::~SoundDevice()>
c0022ed1:	83 c4 10             	add    esp,0x10
c0022ed4:	83 ec 08             	sub    esp,0x8
c0022ed7:	68 e4 01 00 00       	push   0x1e4
c0022edc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ee0:	e8 c0 fe fe ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c0022ee5:	83 c4 10             	add    esp,0x10
c0022ee8:	83 c4 0c             	add    esp,0xc
c0022eeb:	c3                   	ret    

c0022eec <SoundDevice::getFreeChannelNum()>:
c0022eec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022ef0:	31 c0                	xor    eax,eax
c0022ef2:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022efa:	74 09                	je     c0022f05 <SoundDevice::getFreeChannelNum()+0x19>
c0022efc:	40                   	inc    eax
c0022efd:	83 f8 20             	cmp    eax,0x20
c0022f00:	75 f0                	jne    c0022ef2 <SoundDevice::getFreeChannelNum()+0x6>
c0022f02:	83 c8 ff             	or     eax,0xffffffff
c0022f05:	c3                   	ret    

c0022f06 <SoundDevice::addChannel(SoundChannel*)>:
c0022f06:	56                   	push   esi
c0022f07:	53                   	push   ebx
c0022f08:	51                   	push   ecx
c0022f09:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022f0d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022f11:	53                   	push   ebx
c0022f12:	e8 d5 ff ff ff       	call   c0022eec <SoundDevice::getFreeChannelNum()>
c0022f17:	5a                   	pop    edx
c0022f18:	83 f8 ff             	cmp    eax,0xffffffff
c0022f1b:	74 51                	je     c0022f6e <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022f1d:	85 f6                	test   esi,esi
c0022f1f:	74 4d                	je     c0022f6e <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022f21:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022f28:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022f2f:	75 30                	jne    c0022f61 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022f31:	83 ec 0c             	sub    esp,0xc
c0022f34:	56                   	push   esi
c0022f35:	e8 42 fd ff ff       	call   c0022c7c <SoundChannel::getSampleRate()>
c0022f3a:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022f40:	89 34 24             	mov    DWORD PTR [esp],esi
c0022f43:	e8 3c fd ff ff       	call   c0022c84 <SoundChannel::getBits()>
c0022f48:	83 c4 0c             	add    esp,0xc
c0022f4b:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022f51:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022f53:	50                   	push   eax
c0022f54:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022f5a:	53                   	push   ebx
c0022f5b:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0022f5e:	83 c4 10             	add    esp,0x10
c0022f61:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022f67:	b8 01 00 00 00       	mov    eax,0x1
c0022f6c:	eb 03                	jmp    c0022f71 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022f6e:	83 c8 ff             	or     eax,0xffffffff
c0022f71:	5a                   	pop    edx
c0022f72:	5b                   	pop    ebx
c0022f73:	5e                   	pop    esi
c0022f74:	c3                   	ret    
c0022f75:	90                   	nop

c0022f76 <SoundDevice::removeChannel(int)>:
c0022f76:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022f7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f7e:	83 fa 1f             	cmp    edx,0x1f
c0022f81:	77 23                	ja     c0022fa6 <SoundDevice::removeChannel(int)+0x30>
c0022f83:	8d 14 90             	lea    edx,[eax+edx*4]
c0022f86:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022f8d:	74 17                	je     c0022fa6 <SoundDevice::removeChannel(int)+0x30>
c0022f8f:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022f99:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022f9f:	75 05                	jne    c0022fa6 <SoundDevice::removeChannel(int)+0x30>
c0022fa1:	8b 00                	mov    eax,DWORD PTR [eax]
c0022fa3:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0022fa6:	c3                   	ret    
c0022fa7:	90                   	nop

c0022fa8 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022fa8:	57                   	push   edi
c0022fa9:	56                   	push   esi
c0022faa:	53                   	push   ebx
c0022fab:	31 db                	xor    ebx,ebx
c0022fad:	83 ec 10             	sub    esp,0x10
c0022fb0:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022fb4:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022fb8:	0f 8d cb 00 00 00    	jge    c0023089 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022fbe:	83 ec 0c             	sub    esp,0xc
c0022fc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022fc5:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022fc8:	e8 a2 5f 00 00       	call   c0028f6f <__extendsfdf2>
c0022fcd:	83 c4 10             	add    esp,0x10
c0022fd0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022fd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022fd8:	68 00 00 f0 3f       	push   0x3ff00000
c0022fdd:	6a 00                	push   0x0
c0022fdf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022fe3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022fe7:	e8 0f 4f 00 00       	call   c0027efb <__adddf3>
c0022fec:	83 c4 10             	add    esp,0x10
c0022fef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022ff3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022ff7:	68 00 00 e0 3f       	push   0x3fe00000
c0022ffc:	6a 00                	push   0x0
c0022ffe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023002:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023006:	e8 6d 55 00 00       	call   c0028578 <__muldf3>
c002300b:	83 c4 10             	add    esp,0x10
c002300e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023012:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023016:	68 00 00 60 40       	push   0x40600000
c002301b:	6a 00                	push   0x0
c002301d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023021:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023025:	e8 4e 55 00 00       	call   c0028578 <__muldf3>
c002302a:	59                   	pop    ecx
c002302b:	5f                   	pop    edi
c002302c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023030:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0023034:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023038:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002303c:	e8 0a 5e 00 00       	call   c0028e4b <__truncdfsf2>
c0023041:	5a                   	pop    edx
c0023042:	89 c7                	mov    edi,eax
c0023044:	59                   	pop    ecx
c0023045:	68 00 00 fe 42       	push   0x42fe0000
c002304a:	50                   	push   eax
c002304b:	e8 a5 4e 00 00       	call   c0027ef5 <__gesf2>
c0023050:	83 c4 10             	add    esp,0x10
c0023053:	85 c0                	test   eax,eax
c0023055:	78 06                	js     c002305d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0023057:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c002305b:	eb 26                	jmp    c0023083 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002305d:	50                   	push   eax
c002305e:	50                   	push   eax
c002305f:	6a 00                	push   0x0
c0023061:	57                   	push   edi
c0023062:	e8 92 4e 00 00       	call   c0027ef9 <__lesf2>
c0023067:	83 c4 10             	add    esp,0x10
c002306a:	85 c0                	test   eax,eax
c002306c:	7f 06                	jg     c0023074 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c002306e:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0023072:	eb 0f                	jmp    c0023083 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0023074:	83 ec 0c             	sub    esp,0xc
c0023077:	57                   	push   edi
c0023078:	e8 8f 5f 00 00       	call   c002900c <lrintf>
c002307d:	83 c4 10             	add    esp,0x10
c0023080:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0023083:	43                   	inc    ebx
c0023084:	e9 2b ff ff ff       	jmp    c0022fb4 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0023089:	83 c4 10             	add    esp,0x10
c002308c:	5b                   	pop    ebx
c002308d:	5e                   	pop    esi
c002308e:	5f                   	pop    edi
c002308f:	c3                   	ret    

c0023090 <SoundDevice::getAudio(int, float*, float*)>:
c0023090:	55                   	push   ebp
c0023091:	57                   	push   edi
c0023092:	56                   	push   esi
c0023093:	53                   	push   ebx
c0023094:	31 db                	xor    ebx,ebx
c0023096:	83 ec 20             	sub    esp,0x20
c0023099:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002309d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00230a1:	c1 e0 02             	shl    eax,0x2
c00230a4:	50                   	push   eax
c00230a5:	6a 00                	push   0x0
c00230a7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00230ab:	e8 bc d6 fd ff       	call   c000076c <memset>
c00230b0:	83 c4 10             	add    esp,0x10
c00230b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00230b7:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c00230be:	85 c0                	test   eax,eax
c00230c0:	0f 84 d7 00 00 00    	je     c002319d <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00230c6:	83 ec 0c             	sub    esp,0xc
c00230c9:	50                   	push   eax
c00230ca:	e8 a5 fb ff ff       	call   c0022c74 <SoundChannel::paused()>
c00230cf:	83 c4 10             	add    esp,0x10
c00230d2:	84 c0                	test   al,al
c00230d4:	0f 85 c3 00 00 00    	jne    c002319d <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00230da:	83 ec 0c             	sub    esp,0xc
c00230dd:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00230e4:	e8 19 fa ff ff       	call   c0022b02 <SoundChannel::getVolume()>
c00230e9:	83 c4 10             	add    esp,0x10
c00230ec:	85 c0                	test   eax,eax
c00230ee:	0f 84 a9 00 00 00    	je     c002319d <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00230f4:	83 ec 0c             	sub    esp,0xc
c00230f7:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00230fe:	e8 ff f9 ff ff       	call   c0022b02 <SoundChannel::getVolume()>
c0023103:	83 ec 0c             	sub    esp,0xc
c0023106:	50                   	push   eax
c0023107:	e8 93 4b 00 00       	call   c0027c9f <__floatsisf>
c002310c:	59                   	pop    ecx
c002310d:	5d                   	pop    ebp
c002310e:	31 ed                	xor    ebp,ebp
c0023110:	68 00 00 c8 42       	push   0x42c80000
c0023115:	50                   	push   eax
c0023116:	e8 59 49 00 00       	call   c0027a74 <__divsf3>
c002311b:	83 c4 10             	add    esp,0x10
c002311e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0023126:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c002312c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0023130:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0023137:	e8 60 fb ff ff       	call   c0022c9c <SoundChannel::unbuffer(float*, int, int)>
c002313c:	83 c4 20             	add    esp,0x20
c002313f:	89 c1                	mov    ecx,eax
c0023141:	39 cd                	cmp    ebp,ecx
c0023143:	7d 52                	jge    c0023197 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0023145:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023149:	50                   	push   eax
c002314a:	50                   	push   eax
c002314b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002314f:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0023152:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0023156:	e8 56 47 00 00       	call   c00278b1 <__mulsf3>
c002315b:	5a                   	pop    edx
c002315c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023160:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0023166:	e8 34 4b 00 00       	call   c0027c9f <__floatsisf>
c002316b:	59                   	pop    ecx
c002316c:	5a                   	pop    edx
c002316d:	50                   	push   eax
c002316e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023172:	e8 fd 48 00 00       	call   c0027a74 <__divsf3>
c0023177:	59                   	pop    ecx
c0023178:	5a                   	pop    edx
c0023179:	50                   	push   eax
c002317a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002317e:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0023181:	e8 08 44 00 00       	call   c002758e <__addsf3>
c0023186:	83 c4 10             	add    esp,0x10
c0023189:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002318d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0023191:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0023194:	45                   	inc    ebp
c0023195:	eb aa                	jmp    c0023141 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0023197:	39 cf                	cmp    edi,ecx
c0023199:	7e 02                	jle    c002319d <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002319b:	89 cf                	mov    edi,ecx
c002319d:	43                   	inc    ebx
c002319e:	83 fb 20             	cmp    ebx,0x20
c00231a1:	0f 85 10 ff ff ff    	jne    c00230b7 <SoundDevice::getAudio(int, float*, float*)+0x27>
c00231a7:	83 c4 1c             	add    esp,0x1c
c00231aa:	89 f8                	mov    eax,edi
c00231ac:	5b                   	pop    ebx
c00231ad:	5e                   	pop    esi
c00231ae:	5f                   	pop    edi
c00231af:	5d                   	pop    ebp
c00231b0:	c3                   	ret    
c00231b1:	90                   	nop

c00231b2 <PCI::open(int, int, void*)>:
c00231b2:	83 ec 18             	sub    esp,0x18
c00231b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00231b9:	8b 10                	mov    edx,DWORD PTR [eax]
c00231bb:	50                   	push   eax
c00231bc:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00231bf:	31 c0                	xor    eax,eax
c00231c1:	83 c4 1c             	add    esp,0x1c
c00231c4:	c3                   	ret    
c00231c5:	90                   	nop

c00231c6 <PCI::close(int, int, void*)>:
c00231c6:	31 c0                	xor    eax,eax
c00231c8:	c3                   	ret    
c00231c9:	90                   	nop

c00231ca <PCI::PCI()>:
c00231ca:	83 ec 0c             	sub    esp,0xc
c00231cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231d1:	83 ec 08             	sub    esp,0x8
c00231d4:	68 3c d6 02 c0       	push   0xc002d63c
c00231d9:	50                   	push   eax
c00231da:	e8 47 09 ff ff       	call   c0013b26 <Bus::Bus(char const*)>
c00231df:	83 c4 10             	add    esp,0x10
c00231e2:	ba c4 d6 02 c0       	mov    edx,0xc002d6c4
c00231e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231eb:	89 10                	mov    DWORD PTR [eax],edx
c00231ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231f1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00231f7:	0f b6 d0             	movzx  edx,al
c00231fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231fe:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0023205:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023209:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002320f:	0f b6 d0             	movzx  edx,al
c0023212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023216:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002321b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002321f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023225:	8d 50 01             	lea    edx,[eax+0x1]
c0023228:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002322c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0023232:	0f b6 d0             	movzx  edx,al
c0023235:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023239:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002323d:	83 c9 c0             	or     ecx,0xffffffc0
c0023240:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0023244:	90                   	nop
c0023245:	83 c4 0c             	add    esp,0xc
c0023248:	c3                   	ret    
c0023249:	90                   	nop

c002324a <PCI::readBAR8(unsigned int, int)>:
c002324a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002324e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023252:	f6 c2 01             	test   dl,0x1
c0023255:	74 07                	je     c002325e <PCI::readBAR8(unsigned int, int)+0x14>
c0023257:	83 e2 fc             	and    edx,0xfffffffc
c002325a:	01 c2                	add    edx,eax
c002325c:	ec                   	in     al,dx
c002325d:	c3                   	ret    
c002325e:	83 e2 f0             	and    edx,0xfffffff0
c0023261:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0023264:	c3                   	ret    
c0023265:	90                   	nop

c0023266 <PCI::readBAR16(unsigned int, int)>:
c0023266:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002326a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002326e:	f6 c2 01             	test   dl,0x1
c0023271:	74 08                	je     c002327b <PCI::readBAR16(unsigned int, int)+0x15>
c0023273:	83 e2 fc             	and    edx,0xfffffffc
c0023276:	01 c2                	add    edx,eax
c0023278:	66 ed                	in     ax,dx
c002327a:	c3                   	ret    
c002327b:	83 e2 f0             	and    edx,0xfffffff0
c002327e:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0023282:	c3                   	ret    
c0023283:	90                   	nop

c0023284 <PCI::readBAR32(unsigned int, int)>:
c0023284:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023288:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002328c:	f6 c2 01             	test   dl,0x1
c002328f:	74 07                	je     c0023298 <PCI::readBAR32(unsigned int, int)+0x14>
c0023291:	83 e2 fc             	and    edx,0xfffffffc
c0023294:	01 c2                	add    edx,eax
c0023296:	ed                   	in     eax,dx
c0023297:	c3                   	ret    
c0023298:	83 e2 f0             	and    edx,0xfffffff0
c002329b:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c002329e:	c3                   	ret    
c002329f:	90                   	nop

c00232a0 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c00232a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00232a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00232a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00232ac:	f6 c2 01             	test   dl,0x1
c00232af:	74 07                	je     c00232b8 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00232b1:	83 e2 fc             	and    edx,0xfffffffc
c00232b4:	01 ca                	add    edx,ecx
c00232b6:	ee                   	out    dx,al
c00232b7:	c3                   	ret    
c00232b8:	83 e2 f0             	and    edx,0xfffffff0
c00232bb:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00232be:	c3                   	ret    
c00232bf:	90                   	nop

c00232c0 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c00232c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00232c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00232c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00232cc:	f6 c2 01             	test   dl,0x1
c00232cf:	74 08                	je     c00232d9 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c00232d1:	83 e2 fc             	and    edx,0xfffffffc
c00232d4:	01 ca                	add    edx,ecx
c00232d6:	66 ef                	out    dx,ax
c00232d8:	c3                   	ret    
c00232d9:	83 e2 f0             	and    edx,0xfffffff0
c00232dc:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00232e0:	c3                   	ret    
c00232e1:	90                   	nop

c00232e2 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00232e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00232e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00232ea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00232ee:	f6 c2 01             	test   dl,0x1
c00232f1:	74 07                	je     c00232fa <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00232f3:	83 e2 fc             	and    edx,0xfffffffc
c00232f6:	01 ca                	add    edx,ecx
c00232f8:	ef                   	out    dx,eax
c00232f9:	c3                   	ret    
c00232fa:	83 e2 f0             	and    edx,0xfffffff0
c00232fd:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0023300:	c3                   	ret    
c0023301:	90                   	nop

c0023302 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0023302:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0023306:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002330b:	89 ca                	mov    edx,ecx
c002330d:	c1 e0 10             	shl    eax,0x10
c0023310:	81 e2 fc 00 00 00    	and    edx,0xfc
c0023316:	09 d0                	or     eax,edx
c0023318:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c002331d:	c1 e2 08             	shl    edx,0x8
c0023320:	09 d0                	or     eax,edx
c0023322:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0023327:	c1 e2 0b             	shl    edx,0xb
c002332a:	09 d0                	or     eax,edx
c002332c:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023331:	0d 00 00 00 80       	or     eax,0x80000000
c0023336:	ef                   	out    dx,eax
c0023337:	ba fc 0c 00 00       	mov    edx,0xcfc
c002333c:	ed                   	in     eax,dx
c002333d:	83 e1 02             	and    ecx,0x2
c0023340:	0f b6 c9             	movzx  ecx,cl
c0023343:	c1 e1 03             	shl    ecx,0x3
c0023346:	d3 e8                	shr    eax,cl
c0023348:	c3                   	ret    
c0023349:	90                   	nop

c002334a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002334a:	6a 00                	push   0x0
c002334c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023351:	50                   	push   eax
c0023352:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023357:	50                   	push   eax
c0023358:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002335d:	50                   	push   eax
c002335e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023362:	e8 9b ff ff ff       	call   c0023302 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023367:	83 c4 14             	add    esp,0x14
c002336a:	c3                   	ret    
c002336b:	90                   	nop

c002336c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002336c:	6a 0e                	push   0xe
c002336e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023373:	50                   	push   eax
c0023374:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023379:	50                   	push   eax
c002337a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002337f:	50                   	push   eax
c0023380:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023384:	e8 79 ff ff ff       	call   c0023302 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023389:	83 c4 14             	add    esp,0x14
c002338c:	0f b6 c0             	movzx  eax,al
c002338f:	c3                   	ret    

c0023390 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0023390:	55                   	push   ebp
c0023391:	57                   	push   edi
c0023392:	56                   	push   esi
c0023393:	53                   	push   ebx
c0023394:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0023399:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c002339e:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00233a3:	6a 0a                	push   0xa
c00233a5:	56                   	push   esi
c00233a6:	55                   	push   ebp
c00233a7:	57                   	push   edi
c00233a8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00233ac:	e8 51 ff ff ff       	call   c0023302 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00233b1:	6a 0a                	push   0xa
c00233b3:	89 c3                	mov    ebx,eax
c00233b5:	56                   	push   esi
c00233b6:	0f b6 db             	movzx  ebx,bl
c00233b9:	55                   	push   ebp
c00233ba:	57                   	push   edi
c00233bb:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00233bf:	e8 3e ff ff ff       	call   c0023302 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00233c4:	83 c4 28             	add    esp,0x28
c00233c7:	25 00 ff 00 00       	and    eax,0xff00
c00233cc:	09 d8                	or     eax,ebx
c00233ce:	5b                   	pop    ebx
c00233cf:	5e                   	pop    esi
c00233d0:	5f                   	pop    edi
c00233d1:	5d                   	pop    ebp
c00233d2:	c3                   	ret    
c00233d3:	90                   	nop

c00233d4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00233d4:	6a 08                	push   0x8
c00233d6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00233db:	50                   	push   eax
c00233dc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00233e1:	50                   	push   eax
c00233e2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00233e7:	50                   	push   eax
c00233e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00233ec:	e8 11 ff ff ff       	call   c0023302 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00233f1:	83 c4 14             	add    esp,0x14
c00233f4:	0f b6 c4             	movzx  eax,ah
c00233f7:	c3                   	ret    

c00233f8 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00233f8:	6a 08                	push   0x8
c00233fa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00233ff:	50                   	push   eax
c0023400:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023405:	50                   	push   eax
c0023406:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002340b:	50                   	push   eax
c002340c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023410:	e8 ed fe ff ff       	call   c0023302 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023415:	83 c4 14             	add    esp,0x14
c0023418:	c3                   	ret    
c0023419:	90                   	nop

c002341a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002341a:	6a 3c                	push   0x3c
c002341c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023421:	50                   	push   eax
c0023422:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023427:	50                   	push   eax
c0023428:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002342d:	50                   	push   eax
c002342e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023432:	e8 cb fe ff ff       	call   c0023302 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023437:	83 c4 14             	add    esp,0x14
c002343a:	c3                   	ret    
c002343b:	90                   	nop

c002343c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002343c:	6a 18                	push   0x18
c002343e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023443:	50                   	push   eax
c0023444:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023449:	50                   	push   eax
c002344a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002344f:	50                   	push   eax
c0023450:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023454:	e8 a9 fe ff ff       	call   c0023302 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023459:	83 c4 14             	add    esp,0x14
c002345c:	0f b6 c4             	movzx  eax,ah
c002345f:	c3                   	ret    

c0023460 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0023460:	55                   	push   ebp
c0023461:	57                   	push   edi
c0023462:	56                   	push   esi
c0023463:	53                   	push   ebx
c0023464:	50                   	push   eax
c0023465:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0023469:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c002346e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0023473:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0023478:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002347f:	8d 43 12             	lea    eax,[ebx+0x12]
c0023482:	83 c3 10             	add    ebx,0x10
c0023485:	0f b6 c0             	movzx  eax,al
c0023488:	0f b6 db             	movzx  ebx,bl
c002348b:	50                   	push   eax
c002348c:	51                   	push   ecx
c002348d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023491:	57                   	push   edi
c0023492:	55                   	push   ebp
c0023493:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0023497:	e8 66 fe ff ff       	call   c0023302 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002349c:	53                   	push   ebx
c002349d:	89 c6                	mov    esi,eax
c002349f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00234a3:	c1 e6 10             	shl    esi,0x10
c00234a6:	51                   	push   ecx
c00234a7:	57                   	push   edi
c00234a8:	55                   	push   ebp
c00234a9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00234ad:	e8 50 fe ff ff       	call   c0023302 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00234b2:	83 c4 2c             	add    esp,0x2c
c00234b5:	0f b7 c0             	movzx  eax,ax
c00234b8:	5b                   	pop    ebx
c00234b9:	09 f0                	or     eax,esi
c00234bb:	5e                   	pop    esi
c00234bc:	5f                   	pop    edi
c00234bd:	5d                   	pop    ebp
c00234be:	c3                   	ret    
c00234bf:	90                   	nop

c00234c0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00234c0:	53                   	push   ebx
c00234c1:	ba f8 0c 00 00       	mov    edx,0xcf8
c00234c6:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00234cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00234cf:	c1 e1 10             	shl    ecx,0x10
c00234d2:	25 fc 00 00 00       	and    eax,0xfc
c00234d7:	09 c1                	or     ecx,eax
c00234d9:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00234de:	c1 e0 08             	shl    eax,0x8
c00234e1:	09 c1                	or     ecx,eax
c00234e3:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00234e8:	c1 e0 0b             	shl    eax,0xb
c00234eb:	09 c1                	or     ecx,eax
c00234ed:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00234f3:	89 c8                	mov    eax,ecx
c00234f5:	ef                   	out    dx,eax
c00234f6:	ba fc 0c 00 00       	mov    edx,0xcfc
c00234fb:	ed                   	in     eax,dx
c00234fc:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0023501:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0023506:	74 0a                	je     c0023512 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0023508:	0f b7 d8             	movzx  ebx,ax
c002350b:	89 d0                	mov    eax,edx
c002350d:	c1 e0 10             	shl    eax,0x10
c0023510:	eb 05                	jmp    c0023517 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0023512:	66 31 c0             	xor    ax,ax
c0023515:	89 d3                	mov    ebx,edx
c0023517:	09 c3                	or     ebx,eax
c0023519:	ba f8 0c 00 00       	mov    edx,0xcf8
c002351e:	89 c8                	mov    eax,ecx
c0023520:	ef                   	out    dx,eax
c0023521:	ba fc 0c 00 00       	mov    edx,0xcfc
c0023526:	89 d8                	mov    eax,ebx
c0023528:	ef                   	out    dx,eax
c0023529:	5b                   	pop    ebx
c002352a:	c3                   	ret    
c002352b:	90                   	nop

c002352c <PCI::pciDetailsToFilepath(PCIDeviceInfo)>:
c002352c:	31 c0                	xor    eax,eax
c002352e:	c3                   	ret    
c002352f:	90                   	nop

c0023530 <PCI::checkBus(unsigned char)>:
c0023530:	56                   	push   esi
c0023531:	53                   	push   ebx
c0023532:	31 db                	xor    ebx,ebx
c0023534:	51                   	push   ecx
c0023535:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002353a:	52                   	push   edx
c002353b:	53                   	push   ebx
c002353c:	43                   	inc    ebx
c002353d:	56                   	push   esi
c002353e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023542:	e8 41 03 00 00       	call   c0023888 <PCI::checkDevice(unsigned char, unsigned char)>
c0023547:	83 c4 10             	add    esp,0x10
c002354a:	83 fb 20             	cmp    ebx,0x20
c002354d:	75 eb                	jne    c002353a <PCI::checkBus(unsigned char)+0xa>
c002354f:	58                   	pop    eax
c0023550:	5b                   	pop    ebx
c0023551:	5e                   	pop    esi
c0023552:	c3                   	ret    
c0023553:	90                   	nop

c0023554 <PCI::foundDevice(PCIDeviceInfo)>:
c0023554:	55                   	push   ebp
c0023555:	57                   	push   edi
c0023556:	56                   	push   esi
c0023557:	53                   	push   ebx
c0023558:	83 ec 1c             	sub    esp,0x1c
c002355b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002355f:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0023565:	0f 84 68 01 00 00    	je     c00236d3 <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c002356b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002356f:	66 81 f9 06 04       	cmp    cx,0x406
c0023574:	75 2c                	jne    c00235a2 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0023576:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c002357b:	50                   	push   eax
c002357c:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0023581:	50                   	push   eax
c0023582:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0023587:	50                   	push   eax
c0023588:	56                   	push   esi
c0023589:	e8 ae fe ff ff       	call   c002343c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c002358e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023592:	0f b6 c0             	movzx  eax,al
c0023595:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0023599:	83 c4 2c             	add    esp,0x2c
c002359c:	5b                   	pop    ebx
c002359d:	5e                   	pop    esi
c002359e:	5f                   	pop    edi
c002359f:	5d                   	pop    ebp
c00235a0:	eb 8e                	jmp    c0023530 <PCI::checkBus(unsigned char)>
c00235a2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00235a6:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00235ac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00235b0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00235b4:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c00235b8:	88 d3                	mov    bl,dl
c00235ba:	85 c0                	test   eax,eax
c00235bc:	74 33                	je     c00235f1 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c00235be:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00235c1:	85 d2                	test   edx,edx
c00235c3:	74 28                	je     c00235ed <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00235c5:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c00235cb:	31 ef                	xor    edi,ebp
c00235cd:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c00235d3:	75 18                	jne    c00235ed <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00235d5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00235d9:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c00235df:	75 0c                	jne    c00235ed <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00235e1:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c00235e7:	0f 84 e6 00 00 00    	je     c00236d3 <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c00235ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00235ef:	eb c9                	jmp    c00235ba <PCI::foundDevice(PCIDeviceInfo)+0x66>
c00235f1:	66 81 f9 01 06       	cmp    cx,0x601
c00235f6:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00235fa:	75 19                	jne    c0023615 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c00235fc:	83 ec 0c             	sub    esp,0xc
c00235ff:	68 64 01 00 00       	push   0x164
c0023604:	e8 d1 c2 fe ff       	call   c000f8da <malloc>
c0023609:	89 c5                	mov    ebp,eax
c002360b:	89 04 24             	mov    DWORD PTR [esp],eax
c002360e:	e8 ab 0f 00 00       	call   c00245be <SATABus::SATABus()>
c0023613:	eb 1e                	jmp    c0023633 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0023615:	66 81 f9 01 01       	cmp    cx,0x101
c002361a:	75 60                	jne    c002367c <PCI::foundDevice(PCIDeviceInfo)+0x128>
c002361c:	83 ec 0c             	sub    esp,0xc
c002361f:	68 70 02 00 00       	push   0x270
c0023624:	e8 b1 c2 fe ff       	call   c000f8da <malloc>
c0023629:	89 c5                	mov    ebp,eax
c002362b:	89 04 24             	mov    DWORD PTR [esp],eax
c002362e:	e8 19 03 00 00       	call   c002394c <IDE::IDE()>
c0023633:	58                   	pop    eax
c0023634:	5a                   	pop    edx
c0023635:	55                   	push   ebp
c0023636:	56                   	push   esi
c0023637:	e8 6a 0c ff ff       	call   c00142a6 <Device::addChild(Device*)>
c002363c:	83 ec 1c             	sub    esp,0x1c
c002363f:	b9 09 00 00 00       	mov    ecx,0x9
c0023644:	fc                   	cld    
c0023645:	89 e7                	mov    edi,esp
c0023647:	89 de                	mov    esi,ebx
c0023649:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002364b:	55                   	push   ebp
c002364c:	e8 73 0b ff ff       	call   c00141c4 <Device::preOpenPCI(PCIDeviceInfo)>
c0023651:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023654:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0023658:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0023660:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0023668:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0023670:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023673:	83 c4 4c             	add    esp,0x4c
c0023676:	5b                   	pop    ebx
c0023677:	5e                   	pop    esi
c0023678:	5f                   	pop    edi
c0023679:	5d                   	pop    ebp
c002367a:	ff e0                	jmp    eax
c002367c:	50                   	push   eax
c002367d:	0f b6 44 24 39       	movzx  eax,BYTE PTR [esp+0x39]
c0023682:	50                   	push   eax
c0023683:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0023688:	50                   	push   eax
c0023689:	68 44 d6 02 c0       	push   0xc002d644
c002368e:	e8 f2 f7 fe ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0023693:	c7 04 24 58 01 00 00 	mov    DWORD PTR [esp],0x158
c002369a:	e8 3b c2 fe ff       	call   c000f8da <malloc>
c002369f:	5a                   	pop    edx
c00236a0:	89 c5                	mov    ebp,eax
c00236a2:	59                   	pop    ecx
c00236a3:	68 60 d6 02 c0       	push   0xc002d660
c00236a8:	50                   	push   eax
c00236a9:	e8 ee 0e ff ff       	call   c001459c <DriverlessDevice::DriverlessDevice(char const*)>
c00236ae:	5f                   	pop    edi
c00236af:	58                   	pop    eax
c00236b0:	55                   	push   ebp
c00236b1:	56                   	push   esi
c00236b2:	e8 ef 0b ff ff       	call   c00142a6 <Device::addChild(Device*)>
c00236b7:	b9 09 00 00 00       	mov    ecx,0x9
c00236bc:	fc                   	cld    
c00236bd:	89 df                	mov    edi,ebx
c00236bf:	89 de                	mov    esi,ebx
c00236c1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00236c3:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00236c7:	83 c4 2c             	add    esp,0x2c
c00236ca:	5b                   	pop    ebx
c00236cb:	5e                   	pop    esi
c00236cc:	5f                   	pop    edi
c00236cd:	5d                   	pop    ebp
c00236ce:	e9 f1 0a ff ff       	jmp    c00141c4 <Device::preOpenPCI(PCIDeviceInfo)>
c00236d3:	83 c4 1c             	add    esp,0x1c
c00236d6:	5b                   	pop    ebx
c00236d7:	5e                   	pop    esi
c00236d8:	5f                   	pop    edi
c00236d9:	5d                   	pop    ebp
c00236da:	c3                   	ret    
c00236db:	90                   	nop

c00236dc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c00236dc:	55                   	push   ebp
c00236dd:	57                   	push   edi
c00236de:	56                   	push   esi
c00236df:	53                   	push   ebx
c00236e0:	83 ec 5c             	sub    esp,0x5c
c00236e3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00236e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00236eb:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00236ef:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c00236f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00236f8:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c00236fc:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0023701:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023705:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c002370a:	6a 0c                	push   0xc
c002370c:	55                   	push   ebp
c002370d:	53                   	push   ebx
c002370e:	57                   	push   edi
c002370f:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0023716:	e8 e7 fb ff ff       	call   c0023302 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002371b:	55                   	push   ebp
c002371c:	53                   	push   ebx
c002371d:	57                   	push   edi
c002371e:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0023725:	e8 66 fc ff ff       	call   c0023390 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002372a:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c002372f:	83 c4 24             	add    esp,0x24
c0023732:	55                   	push   ebp
c0023733:	53                   	push   ebx
c0023734:	57                   	push   edi
c0023735:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0023739:	e8 dc fc ff ff       	call   c002341a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002373e:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0023742:	6a 3c                	push   0x3c
c0023744:	55                   	push   ebp
c0023745:	53                   	push   ebx
c0023746:	57                   	push   edi
c0023747:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c002374e:	e8 af fb ff ff       	call   c0023302 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023753:	0f b6 c4             	movzx  eax,ah
c0023756:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002375a:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c002375e:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0023762:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c0023767:	83 c4 24             	add    esp,0x24
c002376a:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0023770:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0023777:	74 6c                	je     c00237e5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0023779:	31 f6                	xor    esi,esi
c002377b:	8b 15 68 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f068
c0023781:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023787:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c002378d:	7e 56                	jle    c00237e5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c002378f:	8d 14 f2             	lea    edx,[edx+esi*8]
c0023792:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0023799:	39 cb                	cmp    ebx,ecx
c002379b:	75 45                	jne    c00237e2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c002379d:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c00237a4:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c00237a8:	75 38                	jne    c00237e2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00237aa:	83 ec 0c             	sub    esp,0xc
c00237ad:	68 7a d6 02 c0       	push   0xc002d67a
c00237b2:	e8 ce f6 fe ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00237b7:	8b 15 68 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f068
c00237bd:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00237c3:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c00237cb:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c00237cf:	52                   	push   edx
c00237d0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00237d4:	53                   	push   ebx
c00237d5:	68 9f d6 02 c0       	push   0xc002d69f
c00237da:	e8 a6 f6 fe ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00237df:	83 c4 20             	add    esp,0x20
c00237e2:	46                   	inc    esi
c00237e3:	eb 96                	jmp    c002377b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c00237e5:	31 d2                	xor    edx,edx
c00237e7:	83 ec 0c             	sub    esp,0xc
c00237ea:	55                   	push   ebp
c00237eb:	53                   	push   ebx
c00237ec:	57                   	push   edi
c00237ed:	52                   	push   edx
c00237ee:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00237f2:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00237f9:	e8 62 fc ff ff       	call   c0023460 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c00237fe:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0023802:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0023806:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002380a:	42                   	inc    edx
c002380b:	83 c4 20             	add    esp,0x20
c002380e:	83 fa 06             	cmp    edx,0x6
c0023811:	75 d4                	jne    c00237e7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0023813:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0023817:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c002381b:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c002381f:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0023823:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0023827:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c002382b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0023830:	86 e0                	xchg   al,ah
c0023832:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0023837:	55                   	push   ebp
c0023838:	53                   	push   ebx
c0023839:	57                   	push   edi
c002383a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c002383e:	e8 91 fb ff ff       	call   c00233d4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0023843:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0023847:	55                   	push   ebp
c0023848:	53                   	push   ebx
c0023849:	57                   	push   edi
c002384a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0023851:	e8 f4 fa ff ff       	call   c002334a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023856:	83 ec 0c             	sub    esp,0xc
c0023859:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c002385e:	b9 09 00 00 00       	mov    ecx,0x9
c0023863:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0023867:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c002386b:	fc                   	cld    
c002386c:	89 e7                	mov    edi,esp
c002386e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023870:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0023877:	e8 d8 fc ff ff       	call   c0023554 <PCI::foundDevice(PCIDeviceInfo)>
c002387c:	81 c4 8c 00 00 00    	add    esp,0x8c
c0023882:	5b                   	pop    ebx
c0023883:	5e                   	pop    esi
c0023884:	5f                   	pop    edi
c0023885:	5d                   	pop    ebp
c0023886:	c3                   	ret    
c0023887:	90                   	nop

c0023888 <PCI::checkDevice(unsigned char, unsigned char)>:
c0023888:	55                   	push   ebp
c0023889:	57                   	push   edi
c002388a:	56                   	push   esi
c002388b:	53                   	push   ebx
c002388c:	83 ec 0c             	sub    esp,0xc
c002388f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0023893:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0023898:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002389d:	6a 00                	push   0x0
c002389f:	56                   	push   esi
c00238a0:	57                   	push   edi
c00238a1:	55                   	push   ebp
c00238a2:	e8 a3 fa ff ff       	call   c002334a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00238a7:	6a 00                	push   0x0
c00238a9:	56                   	push   esi
c00238aa:	57                   	push   edi
c00238ab:	55                   	push   ebp
c00238ac:	e8 2b fe ff ff       	call   c00236dc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00238b1:	83 c4 20             	add    esp,0x20
c00238b4:	6a 00                	push   0x0
c00238b6:	56                   	push   esi
c00238b7:	57                   	push   edi
c00238b8:	55                   	push   ebp
c00238b9:	e8 ae fa ff ff       	call   c002336c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00238be:	83 c4 10             	add    esp,0x10
c00238c1:	84 c0                	test   al,al
c00238c3:	79 27                	jns    c00238ec <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00238c5:	bb 01 00 00 00       	mov    ebx,0x1
c00238ca:	53                   	push   ebx
c00238cb:	56                   	push   esi
c00238cc:	57                   	push   edi
c00238cd:	55                   	push   ebp
c00238ce:	e8 77 fa ff ff       	call   c002334a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00238d3:	83 c4 10             	add    esp,0x10
c00238d6:	66 40                	inc    ax
c00238d8:	74 0c                	je     c00238e6 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c00238da:	53                   	push   ebx
c00238db:	56                   	push   esi
c00238dc:	57                   	push   edi
c00238dd:	55                   	push   ebp
c00238de:	e8 f9 fd ff ff       	call   c00236dc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00238e3:	83 c4 10             	add    esp,0x10
c00238e6:	43                   	inc    ebx
c00238e7:	83 fb 08             	cmp    ebx,0x8
c00238ea:	75 de                	jne    c00238ca <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c00238ec:	83 c4 0c             	add    esp,0xc
c00238ef:	5b                   	pop    ebx
c00238f0:	5e                   	pop    esi
c00238f1:	5f                   	pop    edi
c00238f2:	5d                   	pop    ebp
c00238f3:	c3                   	ret    

c00238f4 <PCI::detect()>:
c00238f4:	56                   	push   esi
c00238f5:	53                   	push   ebx
c00238f6:	53                   	push   ebx
c00238f7:	31 db                	xor    ebx,ebx
c00238f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00238fd:	6a 00                	push   0x0
c00238ff:	6a 00                	push   0x0
c0023901:	6a 00                	push   0x0
c0023903:	56                   	push   esi
c0023904:	e8 63 fa ff ff       	call   c002336c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023909:	83 c4 10             	add    esp,0x10
c002390c:	a8 80                	test   al,0x80
c002390e:	75 21                	jne    c0023931 <PCI::detect()+0x3d>
c0023910:	51                   	push   ecx
c0023911:	51                   	push   ecx
c0023912:	6a 00                	push   0x0
c0023914:	56                   	push   esi
c0023915:	e8 16 fc ff ff       	call   c0023530 <PCI::checkBus(unsigned char)>
c002391a:	83 c4 10             	add    esp,0x10
c002391d:	eb 24                	jmp    c0023943 <PCI::detect()+0x4f>
c002391f:	52                   	push   edx
c0023920:	52                   	push   edx
c0023921:	53                   	push   ebx
c0023922:	43                   	inc    ebx
c0023923:	56                   	push   esi
c0023924:	e8 07 fc ff ff       	call   c0023530 <PCI::checkBus(unsigned char)>
c0023929:	83 c4 10             	add    esp,0x10
c002392c:	83 fb 08             	cmp    ebx,0x8
c002392f:	74 12                	je     c0023943 <PCI::detect()+0x4f>
c0023931:	53                   	push   ebx
c0023932:	6a 00                	push   0x0
c0023934:	6a 00                	push   0x0
c0023936:	56                   	push   esi
c0023937:	e8 0e fa ff ff       	call   c002334a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002393c:	83 c4 10             	add    esp,0x10
c002393f:	66 40                	inc    ax
c0023941:	74 dc                	je     c002391f <PCI::detect()+0x2b>
c0023943:	58                   	pop    eax
c0023944:	5b                   	pop    ebx
c0023945:	5e                   	pop    esi
c0023946:	c3                   	ret    
c0023947:	90                   	nop

c0023948 <IDE::close(int, int, void*)>:
c0023948:	83 c8 ff             	or     eax,0xffffffff
c002394b:	c3                   	ret    

c002394c <IDE::IDE()>:
c002394c:	83 ec 0c             	sub    esp,0xc
c002394f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023953:	83 ec 08             	sub    esp,0x8
c0023956:	68 e8 d6 02 c0       	push   0xc002d6e8
c002395b:	50                   	push   eax
c002395c:	e8 df 0c ff ff       	call   c0014640 <HardDiskController::HardDiskController(char const*)>
c0023961:	83 c4 10             	add    esp,0x10
c0023964:	ba 28 d9 02 c0       	mov    edx,0xc002d928
c0023969:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002396d:	89 10                	mov    DWORD PTR [eax],edx
c002396f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023973:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002397a:	90                   	nop
c002397b:	83 c4 0c             	add    esp,0xc
c002397e:	c3                   	ret    
c002397f:	90                   	nop

c0023980 <IDE::prepareInterrupt(unsigned char)>:
c0023980:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023985:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023989:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0023991:	c3                   	ret    

c0023992 <selectDrive(unsigned char, unsigned char)>:
c0023992:	c3                   	ret    
c0023993:	90                   	nop

c0023994 <IDE::getBase(unsigned char)>:
c0023994:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023999:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002399d:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00239a5:	c3                   	ret    

c00239a6 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00239a6:	55                   	push   ebp
c00239a7:	57                   	push   edi
c00239a8:	56                   	push   esi
c00239a9:	53                   	push   ebx
c00239aa:	83 ec 1c             	sub    esp,0x1c
c00239ad:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00239b1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00239b5:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00239b8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00239bc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00239c0:	80 f9 03             	cmp    cl,0x3
c00239c3:	77 51                	ja     c0023a16 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00239c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00239c9:	0f b6 f2             	movzx  esi,dl
c00239cc:	0f b6 db             	movzx  ebx,bl
c00239cf:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00239d2:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00239d6:	83 ca 80             	or     edx,0xffffff80
c00239d9:	0f b6 d2             	movzx  edx,dl
c00239dc:	52                   	push   edx
c00239dd:	6a 0c                	push   0xc
c00239df:	56                   	push   esi
c00239e0:	57                   	push   edi
c00239e1:	e8 c0 ff ff ff       	call   c00239a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239e6:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00239eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00239ef:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00239f3:	ee                   	out    dx,al
c00239f4:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00239f9:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00239fd:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023a01:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023a05:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023a0d:	83 c4 2c             	add    esp,0x2c
c0023a10:	5b                   	pop    ebx
c0023a11:	5e                   	pop    esi
c0023a12:	5f                   	pop    edi
c0023a13:	5d                   	pop    ebp
c0023a14:	eb 90                	jmp    c00239a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a16:	80 fb 07             	cmp    bl,0x7
c0023a19:	77 12                	ja     c0023a2d <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023a1b:	0f b6 d2             	movzx  edx,dl
c0023a1e:	0f b6 db             	movzx  ebx,bl
c0023a21:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023a29:	89 da                	mov    edx,ebx
c0023a2b:	eb 2f                	jmp    c0023a5c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023a2d:	80 fb 0d             	cmp    bl,0xd
c0023a30:	77 13                	ja     c0023a45 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023a32:	0f b6 d2             	movzx  edx,dl
c0023a35:	0f b6 db             	movzx  ebx,bl
c0023a38:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023a3f:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023a43:	eb 17                	jmp    c0023a5c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023a45:	80 fb 15             	cmp    bl,0x15
c0023a48:	77 13                	ja     c0023a5d <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023a4a:	0f b6 d2             	movzx  edx,dl
c0023a4d:	0f b6 db             	movzx  ebx,bl
c0023a50:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023a58:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023a5c:	ee                   	out    dx,al
c0023a5d:	83 c4 1c             	add    esp,0x1c
c0023a60:	5b                   	pop    ebx
c0023a61:	5e                   	pop    esi
c0023a62:	5f                   	pop    edi
c0023a63:	5d                   	pop    ebp
c0023a64:	c3                   	ret    
c0023a65:	90                   	nop

c0023a66 <IDE::read(unsigned char, unsigned char)>:
c0023a66:	55                   	push   ebp
c0023a67:	57                   	push   edi
c0023a68:	56                   	push   esi
c0023a69:	53                   	push   ebx
c0023a6a:	83 ec 1c             	sub    esp,0x1c
c0023a6d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023a71:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023a75:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023a78:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023a7c:	3c 03                	cmp    al,0x3
c0023a7e:	77 43                	ja     c0023ac3 <IDE::read(unsigned char, unsigned char)+0x5d>
c0023a80:	0f b6 f2             	movzx  esi,dl
c0023a83:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023a86:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023a8a:	83 c8 80             	or     eax,0xffffff80
c0023a8d:	0f b6 c0             	movzx  eax,al
c0023a90:	50                   	push   eax
c0023a91:	6a 0c                	push   0xc
c0023a93:	56                   	push   esi
c0023a94:	57                   	push   edi
c0023a95:	e8 0c ff ff ff       	call   c00239a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a9a:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023a9f:	0f b6 c3             	movzx  eax,bl
c0023aa2:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023aa6:	ec                   	in     al,dx
c0023aa7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023aab:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023ab0:	52                   	push   edx
c0023ab1:	6a 0c                	push   0xc
c0023ab3:	56                   	push   esi
c0023ab4:	57                   	push   edi
c0023ab5:	e8 ec fe ff ff       	call   c00239a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023aba:	83 c4 20             	add    esp,0x20
c0023abd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023ac1:	eb 49                	jmp    c0023b0c <IDE::read(unsigned char, unsigned char)+0xa6>
c0023ac3:	80 fb 07             	cmp    bl,0x7
c0023ac6:	77 12                	ja     c0023ada <IDE::read(unsigned char, unsigned char)+0x74>
c0023ac8:	0f b6 d2             	movzx  edx,dl
c0023acb:	0f b6 c3             	movzx  eax,bl
c0023ace:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023ad6:	89 c2                	mov    edx,eax
c0023ad8:	eb 31                	jmp    c0023b0b <IDE::read(unsigned char, unsigned char)+0xa5>
c0023ada:	80 fb 0d             	cmp    bl,0xd
c0023add:	77 13                	ja     c0023af2 <IDE::read(unsigned char, unsigned char)+0x8c>
c0023adf:	0f b6 d2             	movzx  edx,dl
c0023ae2:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023ae9:	0f b6 d3             	movzx  edx,bl
c0023aec:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023af0:	eb 19                	jmp    c0023b0b <IDE::read(unsigned char, unsigned char)+0xa5>
c0023af2:	31 c0                	xor    eax,eax
c0023af4:	80 fb 15             	cmp    bl,0x15
c0023af7:	77 13                	ja     c0023b0c <IDE::read(unsigned char, unsigned char)+0xa6>
c0023af9:	0f b6 d2             	movzx  edx,dl
c0023afc:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023b04:	0f b6 d3             	movzx  edx,bl
c0023b07:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023b0b:	ec                   	in     al,dx
c0023b0c:	83 c4 1c             	add    esp,0x1c
c0023b0f:	5b                   	pop    ebx
c0023b10:	5e                   	pop    esi
c0023b11:	5f                   	pop    edi
c0023b12:	5d                   	pop    ebp
c0023b13:	c3                   	ret    

c0023b14 <IDE::waitInterrupt(unsigned char)>:
c0023b14:	55                   	push   ebp
c0023b15:	57                   	push   edi
c0023b16:	56                   	push   esi
c0023b17:	53                   	push   ebx
c0023b18:	31 db                	xor    ebx,ebx
c0023b1a:	83 ec 0c             	sub    esp,0xc
c0023b1d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023b21:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023b26:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023b2e:	89 e8                	mov    eax,ebp
c0023b30:	84 c0                	test   al,al
c0023b32:	75 34                	jne    c0023b68 <IDE::waitInterrupt(unsigned char)+0x54>
c0023b34:	52                   	push   edx
c0023b35:	6a 0c                	push   0xc
c0023b37:	56                   	push   esi
c0023b38:	57                   	push   edi
c0023b39:	e8 28 ff ff ff       	call   c0023a66 <IDE::read(unsigned char, unsigned char)>
c0023b3e:	83 c4 10             	add    esp,0x10
c0023b41:	a8 01                	test   al,0x1
c0023b43:	75 2b                	jne    c0023b70 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023b45:	f6 c3 04             	test   bl,0x4
c0023b48:	75 16                	jne    c0023b60 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023b4a:	83 fb 32             	cmp    ebx,0x32
c0023b4d:	7e 11                	jle    c0023b60 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023b4f:	50                   	push   eax
c0023b50:	50                   	push   eax
c0023b51:	6a 00                	push   0x0
c0023b53:	68 80 96 98 00       	push   0x989680
c0023b58:	e8 c6 ad ff ff       	call   c001e923 <nanoSleep(unsigned long long)>
c0023b5d:	83 c4 10             	add    esp,0x10
c0023b60:	83 fb 3c             	cmp    ebx,0x3c
c0023b63:	74 0b                	je     c0023b70 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023b65:	43                   	inc    ebx
c0023b66:	eb be                	jmp    c0023b26 <IDE::waitInterrupt(unsigned char)+0x12>
c0023b68:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023b70:	83 c4 0c             	add    esp,0xc
c0023b73:	89 e8                	mov    eax,ebp
c0023b75:	5b                   	pop    ebx
c0023b76:	5e                   	pop    esi
c0023b77:	5f                   	pop    edi
c0023b78:	5d                   	pop    ebp
c0023b79:	c3                   	ret    

c0023b7a <ideChannel0IRQHandler(regs*, void*)>:
c0023b7a:	83 ec 10             	sub    esp,0x10
c0023b7d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023b81:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023b88:	6a 07                	push   0x7
c0023b8a:	6a 00                	push   0x0
c0023b8c:	50                   	push   eax
c0023b8d:	e8 d4 fe ff ff       	call   c0023a66 <IDE::read(unsigned char, unsigned char)>
c0023b92:	83 c4 1c             	add    esp,0x1c
c0023b95:	c3                   	ret    

c0023b96 <ideChannel1IRQHandler(regs*, void*)>:
c0023b96:	83 ec 10             	sub    esp,0x10
c0023b99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023b9d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023ba4:	6a 07                	push   0x7
c0023ba6:	6a 01                	push   0x1
c0023ba8:	50                   	push   eax
c0023ba9:	e8 b8 fe ff ff       	call   c0023a66 <IDE::read(unsigned char, unsigned char)>
c0023bae:	83 c4 1c             	add    esp,0x1c
c0023bb1:	c3                   	ret    

c0023bb2 <IDE::enableIRQs(unsigned char, bool)>:
c0023bb2:	57                   	push   edi
c0023bb3:	56                   	push   esi
c0023bb4:	be 04 00 00 00       	mov    esi,0x4
c0023bb9:	53                   	push   ebx
c0023bba:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023bbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023bc3:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023bc8:	0f 94 c0             	sete   al
c0023bcb:	d1 e0                	shl    eax,1
c0023bcd:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023bd4:	0f b6 c0             	movzx  eax,al
c0023bd7:	50                   	push   eax
c0023bd8:	6a 0c                	push   0xc
c0023bda:	57                   	push   edi
c0023bdb:	53                   	push   ebx
c0023bdc:	e8 c5 fd ff ff       	call   c00239a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023be1:	83 c4 10             	add    esp,0x10
c0023be4:	50                   	push   eax
c0023be5:	6a 0c                	push   0xc
c0023be7:	57                   	push   edi
c0023be8:	53                   	push   ebx
c0023be9:	e8 78 fe ff ff       	call   c0023a66 <IDE::read(unsigned char, unsigned char)>
c0023bee:	83 c4 10             	add    esp,0x10
c0023bf1:	4e                   	dec    esi
c0023bf2:	75 f0                	jne    c0023be4 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023bf4:	5b                   	pop    ebx
c0023bf5:	5e                   	pop    esi
c0023bf6:	5f                   	pop    edi
c0023bf7:	c3                   	ret    

c0023bf8 <IDE::open(int, int, void*)>:
c0023bf8:	55                   	push   ebp
c0023bf9:	57                   	push   edi
c0023bfa:	56                   	push   esi
c0023bfb:	53                   	push   ebx
c0023bfc:	83 ec 1c             	sub    esp,0x1c
c0023bff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023c03:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023c0c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023c15:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023c1c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023c23:	0f 85 b0 02 00 00    	jne    c0023ed9 <IDE::open(int, int, void*)+0x2e1>
c0023c29:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023c2f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023c33:	83 e0 7f             	and    eax,0x7f
c0023c36:	3c 05                	cmp    al,0x5
c0023c38:	74 04                	je     c0023c3e <IDE::open(int, int, void*)+0x46>
c0023c3a:	3c 0f                	cmp    al,0xf
c0023c3c:	75 32                	jne    c0023c70 <IDE::open(int, int, void*)+0x78>
c0023c3e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023c44:	83 e0 fc             	and    eax,0xfffffffc
c0023c47:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023c4e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023c54:	83 e0 fc             	and    eax,0xfffffffc
c0023c57:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023c5e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023c64:	83 e0 fc             	and    eax,0xfffffffc
c0023c67:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023c6e:	eb 14                	jmp    c0023c84 <IDE::open(int, int, void*)+0x8c>
c0023c70:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023c7a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023c84:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023c8b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023c92:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023c96:	89 c6                	mov    esi,eax
c0023c98:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023c9d:	c1 e6 10             	shl    esi,0x10
c0023ca0:	89 e8                	mov    eax,ebp
c0023ca2:	89 fa                	mov    edx,edi
c0023ca4:	c1 e0 0b             	shl    eax,0xb
c0023ca7:	09 f0                	or     eax,esi
c0023ca9:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023cb0:	c1 e6 08             	shl    esi,0x8
c0023cb3:	09 c6                	or     esi,eax
c0023cb5:	89 f0                	mov    eax,esi
c0023cb7:	0d 08 00 00 80       	or     eax,0x80000008
c0023cbc:	ef                   	out    dx,eax
c0023cbd:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023cc2:	89 ca                	mov    edx,ecx
c0023cc4:	ed                   	in     eax,dx
c0023cc5:	c1 e8 10             	shr    eax,0x10
c0023cc8:	3d ff ff 00 00       	cmp    eax,0xffff
c0023ccd:	0f 84 f5 00 00 00    	je     c0023dc8 <IDE::open(int, int, void*)+0x1d0>
c0023cd3:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023cd9:	89 fa                	mov    edx,edi
c0023cdb:	89 f0                	mov    eax,esi
c0023cdd:	ef                   	out    dx,eax
c0023cde:	b0 fe                	mov    al,0xfe
c0023ce0:	89 ca                	mov    edx,ecx
c0023ce2:	ee                   	out    dx,al
c0023ce3:	89 f0                	mov    eax,esi
c0023ce5:	89 fa                	mov    edx,edi
c0023ce7:	ef                   	out    dx,eax
c0023ce8:	89 ca                	mov    edx,ecx
c0023cea:	ed                   	in     eax,dx
c0023ceb:	3c fe                	cmp    al,0xfe
c0023ced:	0f 85 a9 00 00 00    	jne    c0023d9c <IDE::open(int, int, void*)+0x1a4>
c0023cf3:	8b 15 68 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f068
c0023cf9:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023d00:	74 33                	je     c0023d35 <IDE::open(int, int, void*)+0x13d>
c0023d02:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023d08:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023d0c:	40                   	inc    eax
c0023d0d:	83 ec 0c             	sub    esp,0xc
c0023d10:	0f b6 c0             	movzx  eax,al
c0023d13:	50                   	push   eax
c0023d14:	55                   	push   ebp
c0023d15:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023d19:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023d1f:	51                   	push   ecx
c0023d20:	e8 59 46 ff ff       	call   c001837e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023d25:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023d2a:	83 c4 1c             	add    esp,0x1c
c0023d2d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023d33:	eb 0a                	jmp    c0023d3f <IDE::open(int, int, void*)+0x147>
c0023d35:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023d3f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023d46:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023d4d:	c1 e1 10             	shl    ecx,0x10
c0023d50:	c1 e0 08             	shl    eax,0x8
c0023d53:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023d58:	09 c1                	or     ecx,eax
c0023d5a:	89 fa                	mov    edx,edi
c0023d5c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023d63:	c1 e0 0b             	shl    eax,0xb
c0023d66:	09 c1                	or     ecx,eax
c0023d68:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023d6e:	89 c8                	mov    eax,ecx
c0023d70:	ef                   	out    dx,eax
c0023d71:	be fc 0c 00 00       	mov    esi,0xcfc
c0023d76:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023d7c:	89 f2                	mov    edx,esi
c0023d7e:	ee                   	out    dx,al
c0023d7f:	89 c8                	mov    eax,ecx
c0023d81:	89 fa                	mov    edx,edi
c0023d83:	ef                   	out    dx,eax
c0023d84:	89 f2                	mov    edx,esi
c0023d86:	ed                   	in     eax,dx
c0023d87:	0f b6 c0             	movzx  eax,al
c0023d8a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023d90:	74 46                	je     c0023dd8 <IDE::open(int, int, void*)+0x1e0>
c0023d92:	83 ec 0c             	sub    esp,0xc
c0023d95:	68 00 d7 02 c0       	push   0xc002d700
c0023d9a:	eb 34                	jmp    c0023dd0 <IDE::open(int, int, void*)+0x1d8>
c0023d9c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023da5:	75 17                	jne    c0023dbe <IDE::open(int, int, void*)+0x1c6>
c0023da7:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023dac:	74 07                	je     c0023db5 <IDE::open(int, int, void*)+0x1bd>
c0023dae:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023db3:	75 09                	jne    c0023dbe <IDE::open(int, int, void*)+0x1c6>
c0023db5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023dbc:	eb 1a                	jmp    c0023dd8 <IDE::open(int, int, void*)+0x1e0>
c0023dbe:	83 ec 0c             	sub    esp,0xc
c0023dc1:	68 08 d7 02 c0       	push   0xc002d708
c0023dc6:	eb 08                	jmp    c0023dd0 <IDE::open(int, int, void*)+0x1d8>
c0023dc8:	83 ec 0c             	sub    esp,0xc
c0023dcb:	68 39 d7 02 c0       	push   0xc002d739
c0023dd0:	e8 98 6a ff ff       	call   c001a86d <Krnl::panic(char const*)>
c0023dd5:	83 c4 10             	add    esp,0x10
c0023dd8:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023ddf:	79 1a                	jns    c0023dfb <IDE::open(int, int, void*)+0x203>
c0023de1:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023de7:	83 e0 fc             	and    eax,0xfffffffc
c0023dea:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023df1:	83 c0 08             	add    eax,0x8
c0023df4:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023dfb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023e01:	89 c2                	mov    edx,eax
c0023e03:	83 e2 0f             	and    edx,0xf
c0023e06:	66 83 fa 08          	cmp    dx,0x8
c0023e0a:	75 0a                	jne    c0023e16 <IDE::open(int, int, void*)+0x21e>
c0023e0c:	83 e8 02             	sub    eax,0x2
c0023e0f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023e16:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023e1c:	89 c2                	mov    edx,eax
c0023e1e:	83 e2 0f             	and    edx,0xf
c0023e21:	66 83 fa 08          	cmp    dx,0x8
c0023e25:	75 0a                	jne    c0023e31 <IDE::open(int, int, void*)+0x239>
c0023e27:	83 e8 02             	sub    eax,0x2
c0023e2a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023e31:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023e38:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023e3f:	89 d0                	mov    eax,edx
c0023e41:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023e44:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023e48:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023e4c:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023e4f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023e54:	0f b6 c9             	movzx  ecx,cl
c0023e57:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023e5e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023e61:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023e65:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023e69:	8d 50 02             	lea    edx,[eax+0x2]
c0023e6c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023e71:	0f b6 d2             	movzx  edx,dl
c0023e74:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023e7a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023e7d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023e81:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023e85:	8d 48 03             	lea    ecx,[eax+0x3]
c0023e88:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023e8d:	0f b6 c9             	movzx  ecx,cl
c0023e90:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023e96:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023e99:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023e9d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023ea1:	8d 50 04             	lea    edx,[eax+0x4]
c0023ea4:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023eaa:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023eaf:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023eb6:	66 85 f6             	test   si,si
c0023eb9:	74 3e                	je     c0023ef9 <IDE::open(int, int, void*)+0x301>
c0023ebb:	0f b6 d2             	movzx  edx,dl
c0023ebe:	83 c0 05             	add    eax,0x5
c0023ec1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023ec4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023ec8:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023ecc:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023ed2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023ed7:	eb 20                	jmp    c0023ef9 <IDE::open(int, int, void*)+0x301>
c0023ed9:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023ee3:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023eed:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023ef4:	e9 02 ff ff ff       	jmp    c0023dfb <IDE::open(int, int, void*)+0x203>
c0023ef9:	52                   	push   edx
c0023efa:	52                   	push   edx
c0023efb:	6a 00                	push   0x0
c0023efd:	53                   	push   ebx
c0023efe:	e8 7d fa ff ff       	call   c0023980 <IDE::prepareInterrupt(unsigned char)>
c0023f03:	59                   	pop    ecx
c0023f04:	5e                   	pop    esi
c0023f05:	6a 01                	push   0x1
c0023f07:	53                   	push   ebx
c0023f08:	e8 73 fa ff ff       	call   c0023980 <IDE::prepareInterrupt(unsigned char)>
c0023f0d:	83 c4 0c             	add    esp,0xc
c0023f10:	6a 00                	push   0x0
c0023f12:	6a 00                	push   0x0
c0023f14:	53                   	push   ebx
c0023f15:	e8 98 fc ff ff       	call   c0023bb2 <IDE::enableIRQs(unsigned char, bool)>
c0023f1a:	83 c4 0c             	add    esp,0xc
c0023f1d:	6a 00                	push   0x0
c0023f1f:	6a 01                	push   0x1
c0023f21:	53                   	push   ebx
c0023f22:	e8 8b fc ff ff       	call   c0023bb2 <IDE::enableIRQs(unsigned char, bool)>
c0023f27:	83 c4 10             	add    esp,0x10
c0023f2a:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023f31:	74 40                	je     c0023f73 <IDE::open(int, int, void*)+0x37b>
c0023f33:	83 ec 0c             	sub    esp,0xc
c0023f36:	68 63 d7 02 c0       	push   0xc002d763
c0023f3b:	e8 45 ef fe ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0023f40:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023f43:	6a 01                	push   0x1
c0023f45:	68 7a 3b 02 c0       	push   0xc0023b7a
c0023f4a:	6a 0e                	push   0xe
c0023f4c:	53                   	push   ebx
c0023f4d:	e8 d8 02 ff ff       	call   c001422a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023f52:	83 c4 14             	add    esp,0x14
c0023f55:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023f5b:	53                   	push   ebx
c0023f5c:	6a 01                	push   0x1
c0023f5e:	68 96 3b 02 c0       	push   0xc0023b96
c0023f63:	6a 0f                	push   0xf
c0023f65:	53                   	push   ebx
c0023f66:	e8 bf 02 ff ff       	call   c001422a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023f6b:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023f71:	eb 4a                	jmp    c0023fbd <IDE::open(int, int, void*)+0x3c5>
c0023f73:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023f7d:	50                   	push   eax
c0023f7e:	6a 0f                	push   0xf
c0023f80:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023f86:	68 7f d7 02 c0       	push   0xc002d77f
c0023f8b:	e8 f5 ee fe ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0023f90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023f93:	6a 00                	push   0x0
c0023f95:	68 7a 3b 02 c0       	push   0xc0023b7a
c0023f9a:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023fa0:	53                   	push   ebx
c0023fa1:	e8 84 02 ff ff       	call   c001422a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023fa6:	83 c4 14             	add    esp,0x14
c0023fa9:	53                   	push   ebx
c0023faa:	6a 00                	push   0x0
c0023fac:	68 96 3b 02 c0       	push   0xc0023b96
c0023fb1:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023fb7:	53                   	push   ebx
c0023fb8:	e8 6d 02 ff ff       	call   c001422a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023fbd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023fbf:	83 c4 20             	add    esp,0x20
c0023fc2:	83 ec 0c             	sub    esp,0xc
c0023fc5:	53                   	push   ebx
c0023fc6:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023fc9:	83 c4 0c             	add    esp,0xc
c0023fcc:	6a 07                	push   0x7
c0023fce:	6a 00                	push   0x0
c0023fd0:	53                   	push   ebx
c0023fd1:	e8 90 fa ff ff       	call   c0023a66 <IDE::read(unsigned char, unsigned char)>
c0023fd6:	83 c4 0c             	add    esp,0xc
c0023fd9:	6a 07                	push   0x7
c0023fdb:	6a 01                	push   0x1
c0023fdd:	53                   	push   ebx
c0023fde:	e8 83 fa ff ff       	call   c0023a66 <IDE::read(unsigned char, unsigned char)>
c0023fe3:	83 c4 0c             	add    esp,0xc
c0023fe6:	6a 01                	push   0x1
c0023fe8:	6a 00                	push   0x0
c0023fea:	53                   	push   ebx
c0023feb:	e8 c2 fb ff ff       	call   c0023bb2 <IDE::enableIRQs(unsigned char, bool)>
c0023ff0:	83 c4 0c             	add    esp,0xc
c0023ff3:	6a 01                	push   0x1
c0023ff5:	6a 01                	push   0x1
c0023ff7:	53                   	push   ebx
c0023ff8:	e8 b5 fb ff ff       	call   c0023bb2 <IDE::enableIRQs(unsigned char, bool)>
c0023ffd:	83 c4 2c             	add    esp,0x2c
c0024000:	31 c0                	xor    eax,eax
c0024002:	5b                   	pop    ebx
c0024003:	5e                   	pop    esi
c0024004:	5f                   	pop    edi
c0024005:	5d                   	pop    ebp
c0024006:	c3                   	ret    
c0024007:	90                   	nop

c0024008 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0024008:	55                   	push   ebp
c0024009:	57                   	push   edi
c002400a:	56                   	push   esi
c002400b:	53                   	push   ebx
c002400c:	83 ec 1c             	sub    esp,0x1c
c002400f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0024013:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024017:	8d 50 f8             	lea    edx,[eax-0x8]
c002401a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002401e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0024022:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0024026:	80 fa 03             	cmp    dl,0x3
c0024029:	77 5d                	ja     c0024088 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c002402b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002402f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024033:	0f b6 db             	movzx  ebx,bl
c0024036:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0024039:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c002403d:	83 ca 80             	or     edx,0xffffff80
c0024040:	0f b6 d2             	movzx  edx,dl
c0024043:	52                   	push   edx
c0024044:	6a 0c                	push   0xc
c0024046:	53                   	push   ebx
c0024047:	56                   	push   esi
c0024048:	e8 59 f9 ff ff       	call   c00239a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002404d:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0024052:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024056:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002405a:	0f b6 c0             	movzx  eax,al
c002405d:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0024061:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0024063:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0024068:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002406c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0024070:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0024074:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002407c:	83 c4 2c             	add    esp,0x2c
c002407f:	5b                   	pop    ebx
c0024080:	5e                   	pop    esi
c0024081:	5f                   	pop    edi
c0024082:	5d                   	pop    ebp
c0024083:	e9 1e f9 ff ff       	jmp    c00239a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024088:	3c 07                	cmp    al,0x7
c002408a:	77 10                	ja     c002409c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c002408c:	0f b6 db             	movzx  ebx,bl
c002408f:	0f b6 d0             	movzx  edx,al
c0024092:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c002409a:	eb 2d                	jmp    c00240c9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002409c:	3c 0d                	cmp    al,0xd
c002409e:	77 13                	ja     c00240b3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00240a0:	0f b6 db             	movzx  ebx,bl
c00240a3:	0f b6 c0             	movzx  eax,al
c00240a6:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00240ad:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00240b1:	eb 16                	jmp    c00240c9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00240b3:	3c 15                	cmp    al,0x15
c00240b5:	77 14                	ja     c00240cb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00240b7:	0f b6 db             	movzx  ebx,bl
c00240ba:	0f b6 c0             	movzx  eax,al
c00240bd:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00240c5:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00240c9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00240cb:	83 c4 1c             	add    esp,0x1c
c00240ce:	5b                   	pop    ebx
c00240cf:	5e                   	pop    esi
c00240d0:	5f                   	pop    edi
c00240d1:	5d                   	pop    ebp
c00240d2:	c3                   	ret    
c00240d3:	90                   	nop

c00240d4 <IDE::detect()>:
c00240d4:	55                   	push   ebp
c00240d5:	57                   	push   edi
c00240d6:	56                   	push   esi
c00240d7:	53                   	push   ebx
c00240d8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00240de:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00240e5:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00240ec:	0f 85 be 02 00 00    	jne    c00243b0 <IDE::detect()+0x2dc>
c00240f2:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00240f9:	31 f6                	xor    esi,esi
c00240fb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0024103:	31 ed                	xor    ebp,ebp
c0024105:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024109:	c1 e0 06             	shl    eax,0x6
c002410c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0024114:	89 e8                	mov    eax,ebp
c0024116:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002411a:	c1 e0 04             	shl    eax,0x4
c002411d:	83 c8 a0             	or     eax,0xffffffa0
c0024120:	0f b6 c0             	movzx  eax,al
c0024123:	50                   	push   eax
c0024124:	6a 06                	push   0x6
c0024126:	56                   	push   esi
c0024127:	53                   	push   ebx
c0024128:	e8 79 f8 ff ff       	call   c00239a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002412d:	83 c4 0c             	add    esp,0xc
c0024130:	6a 0c                	push   0xc
c0024132:	56                   	push   esi
c0024133:	53                   	push   ebx
c0024134:	e8 2d f9 ff ff       	call   c0023a66 <IDE::read(unsigned char, unsigned char)>
c0024139:	83 c4 0c             	add    esp,0xc
c002413c:	6a 0c                	push   0xc
c002413e:	56                   	push   esi
c002413f:	53                   	push   ebx
c0024140:	e8 21 f9 ff ff       	call   c0023a66 <IDE::read(unsigned char, unsigned char)>
c0024145:	83 c4 0c             	add    esp,0xc
c0024148:	6a 0c                	push   0xc
c002414a:	56                   	push   esi
c002414b:	53                   	push   ebx
c002414c:	e8 15 f9 ff ff       	call   c0023a66 <IDE::read(unsigned char, unsigned char)>
c0024151:	83 c4 0c             	add    esp,0xc
c0024154:	6a 0c                	push   0xc
c0024156:	56                   	push   esi
c0024157:	53                   	push   ebx
c0024158:	e8 09 f9 ff ff       	call   c0023a66 <IDE::read(unsigned char, unsigned char)>
c002415d:	68 ec 00 00 00       	push   0xec
c0024162:	6a 07                	push   0x7
c0024164:	56                   	push   esi
c0024165:	53                   	push   ebx
c0024166:	e8 3b f8 ff ff       	call   c00239a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002416b:	83 c4 1c             	add    esp,0x1c
c002416e:	6a 0c                	push   0xc
c0024170:	56                   	push   esi
c0024171:	53                   	push   ebx
c0024172:	e8 ef f8 ff ff       	call   c0023a66 <IDE::read(unsigned char, unsigned char)>
c0024177:	83 c4 0c             	add    esp,0xc
c002417a:	6a 0c                	push   0xc
c002417c:	56                   	push   esi
c002417d:	53                   	push   ebx
c002417e:	e8 e3 f8 ff ff       	call   c0023a66 <IDE::read(unsigned char, unsigned char)>
c0024183:	83 c4 0c             	add    esp,0xc
c0024186:	6a 0c                	push   0xc
c0024188:	56                   	push   esi
c0024189:	53                   	push   ebx
c002418a:	e8 d7 f8 ff ff       	call   c0023a66 <IDE::read(unsigned char, unsigned char)>
c002418f:	83 c4 0c             	add    esp,0xc
c0024192:	6a 0c                	push   0xc
c0024194:	56                   	push   esi
c0024195:	53                   	push   ebx
c0024196:	e8 cb f8 ff ff       	call   c0023a66 <IDE::read(unsigned char, unsigned char)>
c002419b:	83 c4 0c             	add    esp,0xc
c002419e:	6a 0c                	push   0xc
c00241a0:	56                   	push   esi
c00241a1:	53                   	push   ebx
c00241a2:	e8 bf f8 ff ff       	call   c0023a66 <IDE::read(unsigned char, unsigned char)>
c00241a7:	83 c4 10             	add    esp,0x10
c00241aa:	84 c0                	test   al,al
c00241ac:	0f 84 8b 01 00 00    	je     c002433d <IDE::detect()+0x269>
c00241b2:	31 ff                	xor    edi,edi
c00241b4:	50                   	push   eax
c00241b5:	6a 0c                	push   0xc
c00241b7:	56                   	push   esi
c00241b8:	53                   	push   ebx
c00241b9:	e8 a8 f8 ff ff       	call   c0023a66 <IDE::read(unsigned char, unsigned char)>
c00241be:	83 c4 10             	add    esp,0x10
c00241c1:	a8 01                	test   al,0x1
c00241c3:	0f 85 8e 01 00 00    	jne    c0024357 <IDE::detect()+0x283>
c00241c9:	84 c0                	test   al,al
c00241cb:	78 04                	js     c00241d1 <IDE::detect()+0xfd>
c00241cd:	a8 08                	test   al,0x8
c00241cf:	75 27                	jne    c00241f8 <IDE::detect()+0x124>
c00241d1:	47                   	inc    edi
c00241d2:	81 ff 17 01 00 00    	cmp    edi,0x117
c00241d8:	7e da                	jle    c00241b4 <IDE::detect()+0xe0>
c00241da:	50                   	push   eax
c00241db:	50                   	push   eax
c00241dc:	6a 00                	push   0x0
c00241de:	68 40 4b 4c 00       	push   0x4c4b40
c00241e3:	e8 3b a7 ff ff       	call   c001e923 <nanoSleep(unsigned long long)>
c00241e8:	83 c4 10             	add    esp,0x10
c00241eb:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00241f1:	75 c1                	jne    c00241b4 <IDE::detect()+0xe0>
c00241f3:	e9 5f 01 00 00       	jmp    c0024357 <IDE::detect()+0x283>
c00241f8:	31 c9                	xor    ecx,ecx
c00241fa:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00241fe:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0024202:	83 ec 0c             	sub    esp,0xc
c0024205:	68 80 00 00 00       	push   0x80
c002420a:	57                   	push   edi
c002420b:	6a 00                	push   0x0
c002420d:	56                   	push   esi
c002420e:	53                   	push   ebx
c002420f:	e8 f4 fd ff ff       	call   c0024008 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0024214:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0024219:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002421d:	89 d1                	mov    ecx,edx
c002421f:	c1 e0 06             	shl    eax,0x6
c0024222:	01 d8                	add    eax,ebx
c0024224:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002422b:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0024232:	89 f2                	mov    edx,esi
c0024234:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002423a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002423e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0024244:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024248:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002424f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0024257:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002425e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0024266:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002426c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0024273:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0024279:	8d 54 24 58          	lea    edx,[esp+0x58]
c002427d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0024281:	83 c4 20             	add    esp,0x20
c0024284:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0024287:	83 c0 02             	add    eax,0x2
c002428a:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0024290:	83 c7 02             	add    edi,0x2
c0024293:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0024296:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002429c:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00242a0:	75 e2                	jne    c0024284 <IDE::detect()+0x1b0>
c00242a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00242a6:	c1 e0 06             	shl    eax,0x6
c00242a9:	01 d8                	add    eax,ebx
c00242ab:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00242b1:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00242b8:	66 c1 ea 09          	shr    dx,0x9
c00242bc:	83 e2 01             	and    edx,0x1
c00242bf:	84 c9                	test   cl,cl
c00242c1:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00242c7:	75 2f                	jne    c00242f8 <IDE::detect()+0x224>
c00242c9:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00242cf:	85 c0                	test   eax,eax
c00242d1:	74 66                	je     c0024339 <IDE::detect()+0x265>
c00242d3:	50                   	push   eax
c00242d4:	55                   	push   ebp
c00242d5:	56                   	push   esi
c00242d6:	68 9b d7 02 c0       	push   0xc002d79b
c00242db:	e8 a5 eb fe ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00242e0:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00242e7:	e8 ee b5 fe ff       	call   c000f8da <malloc>
c00242ec:	89 c7                	mov    edi,eax
c00242ee:	89 04 24             	mov    DWORD PTR [esp],eax
c00242f1:	e8 78 06 00 00       	call   c002496e <ATA::ATA()>
c00242f6:	eb 28                	jmp    c0024320 <IDE::detect()+0x24c>
c00242f8:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00242fe:	55                   	push   ebp
c00242ff:	56                   	push   esi
c0024300:	68 ca d7 02 c0       	push   0xc002d7ca
c0024305:	e8 7b eb fe ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c002430a:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0024311:	e8 c4 b5 fe ff       	call   c000f8da <malloc>
c0024316:	89 c7                	mov    edi,eax
c0024318:	89 04 24             	mov    DWORD PTR [esp],eax
c002431b:	e8 8e 0c 00 00       	call   c0024fae <ATAPI::ATAPI()>
c0024320:	5a                   	pop    edx
c0024321:	59                   	pop    ecx
c0024322:	57                   	push   edi
c0024323:	53                   	push   ebx
c0024324:	e8 7d ff fe ff       	call   c00142a6 <Device::addChild(Device*)>
c0024329:	8b 07                	mov    eax,DWORD PTR [edi]
c002432b:	53                   	push   ebx
c002432c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024330:	6a 00                	push   0x0
c0024332:	57                   	push   edi
c0024333:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024336:	83 c4 20             	add    esp,0x20
c0024339:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c002433d:	4d                   	dec    ebp
c002433e:	74 0a                	je     c002434a <IDE::detect()+0x276>
c0024340:	bd 01 00 00 00       	mov    ebp,0x1
c0024345:	e9 bb fd ff ff       	jmp    c0024105 <IDE::detect()+0x31>
c002434a:	4e                   	dec    esi
c002434b:	74 63                	je     c00243b0 <IDE::detect()+0x2dc>
c002434d:	be 01 00 00 00       	mov    esi,0x1
c0024352:	e9 ac fd ff ff       	jmp    c0024103 <IDE::detect()+0x2f>
c0024357:	50                   	push   eax
c0024358:	6a 04                	push   0x4
c002435a:	56                   	push   esi
c002435b:	53                   	push   ebx
c002435c:	e8 05 f7 ff ff       	call   c0023a66 <IDE::read(unsigned char, unsigned char)>
c0024361:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0024365:	83 c4 0c             	add    esp,0xc
c0024368:	6a 05                	push   0x5
c002436a:	56                   	push   esi
c002436b:	53                   	push   ebx
c002436c:	e8 f5 f6 ff ff       	call   c0023a66 <IDE::read(unsigned char, unsigned char)>
c0024371:	83 c4 10             	add    esp,0x10
c0024374:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0024378:	80 fa 14             	cmp    dl,0x14
c002437b:	75 04                	jne    c0024381 <IDE::detect()+0x2ad>
c002437d:	3c eb                	cmp    al,0xeb
c002437f:	eb 07                	jmp    c0024388 <IDE::detect()+0x2b4>
c0024381:	3c 96                	cmp    al,0x96
c0024383:	75 b8                	jne    c002433d <IDE::detect()+0x269>
c0024385:	80 fa 69             	cmp    dl,0x69
c0024388:	75 b3                	jne    c002433d <IDE::detect()+0x269>
c002438a:	68 a1 00 00 00       	push   0xa1
c002438f:	6a 07                	push   0x7
c0024391:	56                   	push   esi
c0024392:	53                   	push   ebx
c0024393:	e8 0e f6 ff ff       	call   c00239a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024398:	5f                   	pop    edi
c0024399:	58                   	pop    eax
c002439a:	6a 00                	push   0x0
c002439c:	68 40 42 0f 00       	push   0xf4240
c00243a1:	e8 7d a5 ff ff       	call   c001e923 <nanoSleep(unsigned long long)>
c00243a6:	83 c4 10             	add    esp,0x10
c00243a9:	b1 01                	mov    cl,0x1
c00243ab:	e9 4a fe ff ff       	jmp    c00241fa <IDE::detect()+0x126>
c00243b0:	81 c4 1c 02 00 00    	add    esp,0x21c
c00243b6:	5b                   	pop    ebx
c00243b7:	5e                   	pop    esi
c00243b8:	5f                   	pop    edi
c00243b9:	5d                   	pop    ebp
c00243ba:	c3                   	ret    
c00243bb:	90                   	nop

c00243bc <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00243bc:	55                   	push   ebp
c00243bd:	57                   	push   edi
c00243be:	56                   	push   esi
c00243bf:	53                   	push   ebx
c00243c0:	83 ec 1c             	sub    esp,0x1c
c00243c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00243c7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00243cb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00243cf:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00243d3:	88 c3                	mov    bl,al
c00243d5:	84 c0                	test   al,al
c00243d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00243db:	0f 84 67 01 00 00    	je     c0024548 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00243e1:	83 ec 0c             	sub    esp,0xc
c00243e4:	68 fb d7 02 c0       	push   0xc002d7fb
c00243e9:	e8 97 ea fe ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00243ee:	83 c4 10             	add    esp,0x10
c00243f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00243f5:	3c 01                	cmp    al,0x1
c00243f7:	75 17                	jne    c0024410 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c00243f9:	83 ec 0c             	sub    esp,0xc
c00243fc:	b3 13                	mov    bl,0x13
c00243fe:	68 07 d8 02 c0       	push   0xc002d807
c0024403:	e8 7d ea fe ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0024408:	83 c4 10             	add    esp,0x10
c002440b:	e9 25 01 00 00       	jmp    c0024535 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024410:	3c 02                	cmp    al,0x2
c0024412:	0f 85 ef 00 00 00    	jne    c0024507 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0024418:	d1 e6                	shl    esi,1
c002441a:	09 ee                	or     esi,ebp
c002441c:	52                   	push   edx
c002441d:	89 f0                	mov    eax,esi
c002441f:	6a 01                	push   0x1
c0024421:	0f b6 f0             	movzx  esi,al
c0024424:	c1 e6 06             	shl    esi,0x6
c0024427:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c002442f:	50                   	push   eax
c0024430:	57                   	push   edi
c0024431:	e8 30 f6 ff ff       	call   c0023a66 <IDE::read(unsigned char, unsigned char)>
c0024436:	83 c4 10             	add    esp,0x10
c0024439:	89 c6                	mov    esi,eax
c002443b:	a8 01                	test   al,0x1
c002443d:	74 12                	je     c0024451 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c002443f:	83 ec 0c             	sub    esp,0xc
c0024442:	b3 07                	mov    bl,0x7
c0024444:	68 1c d8 02 c0       	push   0xc002d81c
c0024449:	e8 37 ea fe ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c002444e:	83 c4 10             	add    esp,0x10
c0024451:	f7 c6 02 00 00 00    	test   esi,0x2
c0024457:	74 12                	je     c002446b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0024459:	83 ec 0c             	sub    esp,0xc
c002445c:	b3 03                	mov    bl,0x3
c002445e:	68 3a d8 02 c0       	push   0xc002d83a
c0024463:	e8 1d ea fe ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0024468:	83 c4 10             	add    esp,0x10
c002446b:	f7 c6 04 00 00 00    	test   esi,0x4
c0024471:	74 12                	je     c0024485 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0024473:	83 ec 0c             	sub    esp,0xc
c0024476:	b3 14                	mov    bl,0x14
c0024478:	68 5a d8 02 c0       	push   0xc002d85a
c002447d:	e8 03 ea fe ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0024482:	83 c4 10             	add    esp,0x10
c0024485:	f7 c6 08 00 00 00    	test   esi,0x8
c002448b:	74 12                	je     c002449f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c002448d:	83 ec 0c             	sub    esp,0xc
c0024490:	b3 03                	mov    bl,0x3
c0024492:	68 3a d8 02 c0       	push   0xc002d83a
c0024497:	e8 e9 e9 fe ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c002449c:	83 c4 10             	add    esp,0x10
c002449f:	f7 c6 10 00 00 00    	test   esi,0x10
c00244a5:	74 12                	je     c00244b9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c00244a7:	83 ec 0c             	sub    esp,0xc
c00244aa:	b3 15                	mov    bl,0x15
c00244ac:	68 72 d8 02 c0       	push   0xc002d872
c00244b1:	e8 cf e9 fe ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00244b6:	83 c4 10             	add    esp,0x10
c00244b9:	f7 c6 20 00 00 00    	test   esi,0x20
c00244bf:	74 12                	je     c00244d3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00244c1:	83 ec 0c             	sub    esp,0xc
c00244c4:	b3 03                	mov    bl,0x3
c00244c6:	68 3a d8 02 c0       	push   0xc002d83a
c00244cb:	e8 b5 e9 fe ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00244d0:	83 c4 10             	add    esp,0x10
c00244d3:	f7 c6 40 00 00 00    	test   esi,0x40
c00244d9:	74 12                	je     c00244ed <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c00244db:	83 ec 0c             	sub    esp,0xc
c00244de:	b3 16                	mov    bl,0x16
c00244e0:	68 8c d8 02 c0       	push   0xc002d88c
c00244e5:	e8 9b e9 fe ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00244ea:	83 c4 10             	add    esp,0x10
c00244ed:	89 f0                	mov    eax,esi
c00244ef:	84 c0                	test   al,al
c00244f1:	79 42                	jns    c0024535 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00244f3:	83 ec 0c             	sub    esp,0xc
c00244f6:	b3 0d                	mov    bl,0xd
c00244f8:	68 ad d8 02 c0       	push   0xc002d8ad
c00244fd:	e8 83 e9 fe ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0024502:	83 c4 10             	add    esp,0x10
c0024505:	eb 2e                	jmp    c0024535 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024507:	3c 03                	cmp    al,0x3
c0024509:	75 14                	jne    c002451f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c002450b:	83 ec 0c             	sub    esp,0xc
c002450e:	b3 17                	mov    bl,0x17
c0024510:	68 c1 d8 02 c0       	push   0xc002d8c1
c0024515:	e8 6b e9 fe ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c002451a:	83 c4 10             	add    esp,0x10
c002451d:	eb 16                	jmp    c0024535 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002451f:	3c 04                	cmp    al,0x4
c0024521:	75 12                	jne    c0024535 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024523:	83 ec 0c             	sub    esp,0xc
c0024526:	b3 08                	mov    bl,0x8
c0024528:	68 d7 d8 02 c0       	push   0xc002d8d7
c002452d:	e8 53 e9 fe ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0024532:	83 c4 10             	add    esp,0x10
c0024535:	50                   	push   eax
c0024536:	50                   	push   eax
c0024537:	0f b6 c3             	movzx  eax,bl
c002453a:	50                   	push   eax
c002453b:	68 ef d8 02 c0       	push   0xc002d8ef
c0024540:	e8 40 e9 fe ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0024545:	83 c4 10             	add    esp,0x10
c0024548:	83 c4 1c             	add    esp,0x1c
c002454b:	88 d8                	mov    al,bl
c002454d:	5b                   	pop    ebx
c002454e:	5e                   	pop    esi
c002454f:	5f                   	pop    edi
c0024550:	5d                   	pop    ebp
c0024551:	c3                   	ret    

c0024552 <IDE::polling(unsigned char, unsigned int)>:
c0024552:	57                   	push   edi
c0024553:	56                   	push   esi
c0024554:	53                   	push   ebx
c0024555:	bb 04 00 00 00       	mov    ebx,0x4
c002455a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002455e:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0024563:	52                   	push   edx
c0024564:	6a 0c                	push   0xc
c0024566:	56                   	push   esi
c0024567:	57                   	push   edi
c0024568:	e8 f9 f4 ff ff       	call   c0023a66 <IDE::read(unsigned char, unsigned char)>
c002456d:	83 c4 10             	add    esp,0x10
c0024570:	4b                   	dec    ebx
c0024571:	75 f0                	jne    c0024563 <IDE::polling(unsigned char, unsigned int)+0x11>
c0024573:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024578:	50                   	push   eax
c0024579:	6a 0c                	push   0xc
c002457b:	56                   	push   esi
c002457c:	57                   	push   edi
c002457d:	e8 e4 f4 ff ff       	call   c0023a66 <IDE::read(unsigned char, unsigned char)>
c0024582:	83 c4 10             	add    esp,0x10
c0024585:	a8 01                	test   al,0x1
c0024587:	74 12                	je     c002459b <IDE::polling(unsigned char, unsigned int)+0x49>
c0024589:	83 ec 0c             	sub    esp,0xc
c002458c:	68 09 d9 02 c0       	push   0xc002d909
c0024591:	e8 ef e8 fe ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0024596:	83 c4 10             	add    esp,0x10
c0024599:	eb 17                	jmp    c00245b2 <IDE::polling(unsigned char, unsigned int)+0x60>
c002459b:	a8 20                	test   al,0x20
c002459d:	75 0f                	jne    c00245ae <IDE::polling(unsigned char, unsigned int)+0x5c>
c002459f:	4b                   	dec    ebx
c00245a0:	74 10                	je     c00245b2 <IDE::polling(unsigned char, unsigned int)+0x60>
c00245a2:	84 c0                	test   al,al
c00245a4:	78 d2                	js     c0024578 <IDE::polling(unsigned char, unsigned int)+0x26>
c00245a6:	a8 08                	test   al,0x8
c00245a8:	74 ce                	je     c0024578 <IDE::polling(unsigned char, unsigned int)+0x26>
c00245aa:	31 c0                	xor    eax,eax
c00245ac:	eb 06                	jmp    c00245b4 <IDE::polling(unsigned char, unsigned int)+0x62>
c00245ae:	b0 01                	mov    al,0x1
c00245b0:	eb 02                	jmp    c00245b4 <IDE::polling(unsigned char, unsigned int)+0x62>
c00245b2:	b0 02                	mov    al,0x2
c00245b4:	5b                   	pop    ebx
c00245b5:	5e                   	pop    esi
c00245b6:	5f                   	pop    edi
c00245b7:	c3                   	ret    

c00245b8 <SATABus::close(int, int, void*)>:
c00245b8:	31 c0                	xor    eax,eax
c00245ba:	c3                   	ret    
c00245bb:	90                   	nop

c00245bc <SATABus::detect()>:
c00245bc:	c3                   	ret    
c00245bd:	90                   	nop

c00245be <SATABus::SATABus()>:
c00245be:	83 ec 0c             	sub    esp,0xc
c00245c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245c5:	83 ec 08             	sub    esp,0x8
c00245c8:	68 4c d9 02 c0       	push   0xc002d94c
c00245cd:	50                   	push   eax
c00245ce:	e8 6d 00 ff ff       	call   c0014640 <HardDiskController::HardDiskController(char const*)>
c00245d3:	83 c4 10             	add    esp,0x10
c00245d6:	ba 08 da 02 c0       	mov    edx,0xc002da08
c00245db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245df:	89 10                	mov    DWORD PTR [eax],edx
c00245e1:	83 ec 0c             	sub    esp,0xc
c00245e4:	6a 50                	push   0x50
c00245e6:	e8 40 ba fe ff       	call   c001002b <Phys::allocateContiguousPages(int)>
c00245eb:	83 c4 10             	add    esp,0x10
c00245ee:	89 c2                	mov    edx,eax
c00245f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245f4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00245fa:	83 ec 0c             	sub    esp,0xc
c00245fd:	6a 50                	push   0x50
c00245ff:	e8 7b d4 fe ff       	call   c0011a7f <Virt::allocateKernelVirtualPages(int)>
c0024604:	83 c4 10             	add    esp,0x10
c0024607:	89 c2                	mov    edx,eax
c0024609:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002460d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024613:	a1 f0 f1 02 c0       	mov    eax,ds:0xc002f1f0
c0024618:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002461c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0024622:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024626:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002462c:	83 ec 0c             	sub    esp,0xc
c002462f:	6a 03                	push   0x3
c0024631:	6a 50                	push   0x50
c0024633:	51                   	push   ecx
c0024634:	52                   	push   edx
c0024635:	50                   	push   eax
c0024636:	e8 71 df fe ff       	call   c00125ac <VAS::mapRange(unsigned long, unsigned long, int, int)>
c002463b:	83 c4 20             	add    esp,0x20
c002463e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024642:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0024648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002464c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024652:	83 ec 04             	sub    esp,0x4
c0024655:	52                   	push   edx
c0024656:	50                   	push   eax
c0024657:	68 70 d9 02 c0       	push   0xc002d970
c002465c:	e8 24 e8 fe ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0024661:	83 c4 10             	add    esp,0x10
c0024664:	90                   	nop
c0024665:	83 c4 0c             	add    esp,0xc
c0024668:	c3                   	ret    
c0024669:	90                   	nop

c002466a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c002466a:	83 ec 0c             	sub    esp,0xc
c002466d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024671:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0024674:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0024677:	09 c2                	or     edx,eax
c0024679:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002467d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024683:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024685:	31 c0                	xor    eax,eax
c0024687:	c1 e9 08             	shr    ecx,0x8
c002468a:	83 e1 0f             	and    ecx,0xf
c002468d:	39 c8                	cmp    eax,ecx
c002468f:	74 0a                	je     c002469b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0024691:	f6 c2 01             	test   dl,0x1
c0024694:	74 18                	je     c00246ae <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0024696:	d1 ea                	shr    edx,1
c0024698:	40                   	inc    eax
c0024699:	eb f2                	jmp    c002468d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c002469b:	83 ec 0c             	sub    esp,0xc
c002469e:	68 94 d9 02 c0       	push   0xc002d994
c00246a3:	e8 c5 61 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c00246a8:	83 c4 10             	add    esp,0x10
c00246ab:	83 c8 ff             	or     eax,0xffffffff
c00246ae:	83 c4 0c             	add    esp,0xc
c00246b1:	c3                   	ret    

c00246b2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c00246b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00246b6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00246b9:	89 c2                	mov    edx,eax
c00246bb:	c1 ea 08             	shr    edx,0x8
c00246be:	83 e2 0f             	and    edx,0xf
c00246c1:	fe ca                	dec    dl
c00246c3:	75 31                	jne    c00246f6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00246c5:	83 e0 0f             	and    eax,0xf
c00246c8:	3c 03                	cmp    al,0x3
c00246ca:	75 2a                	jne    c00246f6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00246cc:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c00246cf:	b8 02 00 00 00       	mov    eax,0x2
c00246d4:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c00246da:	74 1c                	je     c00246f8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00246dc:	b8 04 00 00 00       	mov    eax,0x4
c00246e1:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c00246e7:	74 0f                	je     c00246f8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00246e9:	31 c0                	xor    eax,eax
c00246eb:	83 fa 03             	cmp    edx,0x3
c00246ee:	0f 94 c0             	sete   al
c00246f1:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c00246f5:	c3                   	ret    
c00246f6:	31 c0                	xor    eax,eax
c00246f8:	c3                   	ret    
c00246f9:	90                   	nop

c00246fa <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c00246fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00246fe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024701:	0f ba e2 0f          	bt     edx,0xf
c0024705:	72 f7                	jb     c00246fe <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0024707:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002470a:	83 ca 10             	or     edx,0x10
c002470d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024710:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024713:	83 ca 01             	or     edx,0x1
c0024716:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024719:	c3                   	ret    

c002471a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c002471a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002471e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024721:	83 e2 fe             	and    edx,0xfffffffe
c0024724:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024727:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002472a:	83 e2 ef             	and    edx,0xffffffef
c002472d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024730:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024733:	0f ba e2 0e          	bt     edx,0xe
c0024737:	72 f7                	jb     c0024730 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024739:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002473c:	0f ba e2 0f          	bt     edx,0xf
c0024740:	72 ee                	jb     c0024730 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024742:	c3                   	ret    
c0024743:	90                   	nop

c0024744 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0024744:	55                   	push   ebp
c0024745:	57                   	push   edi
c0024746:	56                   	push   esi
c0024747:	53                   	push   ebx
c0024748:	83 ec 1c             	sub    esp,0x1c
c002474b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002474f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024753:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0024757:	53                   	push   ebx
c0024758:	89 fd                	mov    ebp,edi
c002475a:	56                   	push   esi
c002475b:	c1 e5 0a             	shl    ebp,0xa
c002475e:	e8 b7 ff ff ff       	call   c002471a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0024763:	83 ec 0c             	sub    esp,0xc
c0024766:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002476c:	01 e8                	add    eax,ebp
c002476e:	89 03                	mov    DWORD PTR [ebx],eax
c0024770:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024772:	68 00 04 00 00       	push   0x400
c0024777:	6a 00                	push   0x0
c0024779:	50                   	push   eax
c002477a:	e8 ed bf fd ff       	call   c000076c <memset>
c002477f:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0024785:	89 fa                	mov    edx,edi
c0024787:	01 e8                	add    eax,ebp
c0024789:	c1 e7 0d             	shl    edi,0xd
c002478c:	89 03                	mov    DWORD PTR [ebx],eax
c002478e:	c1 e2 08             	shl    edx,0x8
c0024791:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0024798:	81 c2 00 80 00 00    	add    edx,0x8000
c002479e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00247a2:	89 d0                	mov    eax,edx
c00247a4:	83 c4 1c             	add    esp,0x1c
c00247a7:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00247ad:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00247b0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00247b3:	68 00 01 00 00       	push   0x100
c00247b8:	6a 00                	push   0x0
c00247ba:	50                   	push   eax
c00247bb:	e8 ac bf fd ff       	call   c000076c <memset>
c00247c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00247c4:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c00247ca:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c00247d0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00247d4:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00247d7:	83 c4 10             	add    esp,0x10
c00247da:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00247e1:	31 ff                	xor    edi,edi
c00247e3:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c00247e9:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c00247ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00247f3:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00247f9:	83 c5 20             	add    ebp,0x20
c00247fc:	01 f8                	add    eax,edi
c00247fe:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024801:	52                   	push   edx
c0024802:	68 00 01 00 00       	push   0x100
c0024807:	6a 00                	push   0x0
c0024809:	50                   	push   eax
c002480a:	e8 5d bf fd ff       	call   c000076c <memset>
c002480f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024813:	83 c4 10             	add    esp,0x10
c0024816:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c002481c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0024823:	01 f8                	add    eax,edi
c0024825:	81 c7 00 01 00 00    	add    edi,0x100
c002482b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002482e:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0024834:	75 b3                	jne    c00247e9 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0024836:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c002483a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c002483e:	83 c4 1c             	add    esp,0x1c
c0024841:	5b                   	pop    ebx
c0024842:	5e                   	pop    esi
c0024843:	5f                   	pop    edi
c0024844:	5d                   	pop    ebp
c0024845:	e9 b0 fe ff ff       	jmp    c00246fa <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c002484a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c002484a:	55                   	push   ebp
c002484b:	57                   	push   edi
c002484c:	56                   	push   esi
c002484d:	53                   	push   ebx
c002484e:	31 db                	xor    ebx,ebx
c0024850:	83 ec 0c             	sub    esp,0xc
c0024853:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024857:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002485b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002485e:	f7 c7 01 00 00 00    	test   edi,0x1
c0024864:	0f 84 aa 00 00 00    	je     c0024914 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c002486a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002486e:	89 d8                	mov    eax,ebx
c0024870:	c1 e0 07             	shl    eax,0x7
c0024873:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c002487a:	55                   	push   ebp
c002487b:	56                   	push   esi
c002487c:	e8 31 fe ff ff       	call   c00246b2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0024881:	5a                   	pop    edx
c0024882:	83 f8 01             	cmp    eax,0x1
c0024885:	59                   	pop    ecx
c0024886:	75 30                	jne    c00248b8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0024888:	50                   	push   eax
c0024889:	50                   	push   eax
c002488a:	53                   	push   ebx
c002488b:	68 b9 d9 02 c0       	push   0xc002d9b9
c0024890:	e8 f0 e5 fe ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0024895:	83 c4 0c             	add    esp,0xc
c0024898:	53                   	push   ebx
c0024899:	55                   	push   ebp
c002489a:	56                   	push   esi
c002489b:	e8 a4 fe ff ff       	call   c0024744 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00248a0:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00248a7:	e8 2e b0 fe ff       	call   c000f8da <malloc>
c00248ac:	89 c5                	mov    ebp,eax
c00248ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00248b1:	e8 5c 0d 00 00       	call   c0025612 <SATA::SATA()>
c00248b6:	eb 33                	jmp    c00248eb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c00248b8:	83 f8 04             	cmp    eax,0x4
c00248bb:	75 47                	jne    c0024904 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c00248bd:	50                   	push   eax
c00248be:	50                   	push   eax
c00248bf:	53                   	push   ebx
c00248c0:	68 d0 d9 02 c0       	push   0xc002d9d0
c00248c5:	e8 bb e5 fe ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00248ca:	83 c4 0c             	add    esp,0xc
c00248cd:	53                   	push   ebx
c00248ce:	55                   	push   ebp
c00248cf:	56                   	push   esi
c00248d0:	e8 6f fe ff ff       	call   c0024744 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00248d5:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00248dc:	e8 f9 af fe ff       	call   c000f8da <malloc>
c00248e1:	89 c5                	mov    ebp,eax
c00248e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00248e6:	e8 d3 10 00 00       	call   c00259be <SATAPI::SATAPI()>
c00248eb:	5a                   	pop    edx
c00248ec:	59                   	pop    ecx
c00248ed:	55                   	push   ebp
c00248ee:	56                   	push   esi
c00248ef:	e8 b2 f9 fe ff       	call   c00142a6 <Device::addChild(Device*)>
c00248f4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00248f7:	56                   	push   esi
c00248f8:	6a 00                	push   0x0
c00248fa:	53                   	push   ebx
c00248fb:	55                   	push   ebp
c00248fc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00248ff:	83 c4 20             	add    esp,0x20
c0024902:	eb 10                	jmp    c0024914 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024904:	50                   	push   eax
c0024905:	50                   	push   eax
c0024906:	53                   	push   ebx
c0024907:	68 e9 d9 02 c0       	push   0xc002d9e9
c002490c:	e8 74 e5 fe ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0024911:	83 c4 10             	add    esp,0x10
c0024914:	d1 ef                	shr    edi,1
c0024916:	43                   	inc    ebx
c0024917:	83 fb 20             	cmp    ebx,0x20
c002491a:	0f 85 3e ff ff ff    	jne    c002485e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0024920:	83 c4 0c             	add    esp,0xc
c0024923:	5b                   	pop    ebx
c0024924:	5e                   	pop    esi
c0024925:	5f                   	pop    edi
c0024926:	5d                   	pop    ebp
c0024927:	c3                   	ret    

c0024928 <SATABus::open(int, int, void*)>:
c0024928:	83 ec 14             	sub    esp,0x14
c002492b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002492f:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0024935:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002493b:	52                   	push   edx
c002493c:	50                   	push   eax
c002493d:	e8 08 ff ff ff       	call   c002484a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0024942:	31 c0                	xor    eax,eax
c0024944:	83 c4 1c             	add    esp,0x1c
c0024947:	c3                   	ret    

c0024948 <ATA::close(int, int, void*)>:
c0024948:	83 ec 0c             	sub    esp,0xc
c002494b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002494f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024955:	85 c0                	test   eax,eax
c0024957:	74 0c                	je     c0024965 <ATA::close(int, int, void*)+0x1d>
c0024959:	83 ec 0c             	sub    esp,0xc
c002495c:	8b 10                	mov    edx,DWORD PTR [eax]
c002495e:	50                   	push   eax
c002495f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024962:	83 c4 10             	add    esp,0x10
c0024965:	31 c0                	xor    eax,eax
c0024967:	83 c4 0c             	add    esp,0xc
c002496a:	c3                   	ret    
c002496b:	90                   	nop

c002496c <ATA::powerSaving(PowerSavingLevel)>:
c002496c:	c3                   	ret    
c002496d:	90                   	nop

c002496e <ATA::ATA()>:
c002496e:	83 ec 0c             	sub    esp,0xc
c0024971:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024975:	83 ec 04             	sub    esp,0x4
c0024978:	68 00 02 00 00       	push   0x200
c002497d:	68 d1 da 02 c0       	push   0xc002dad1
c0024982:	50                   	push   eax
c0024983:	e8 50 fd fe ff       	call   c00146d8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024988:	83 c4 10             	add    esp,0x10
c002498b:	ba 54 da 02 c0       	mov    edx,0xc002da54
c0024990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024994:	89 10                	mov    DWORD PTR [eax],edx
c0024996:	90                   	nop
c0024997:	83 c4 0c             	add    esp,0xc
c002499a:	c3                   	ret    
c002499b:	90                   	nop

c002499c <ATA::flush(bool)>:
c002499c:	53                   	push   ebx
c002499d:	83 ec 08             	sub    esp,0x8
c00249a0:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00249a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00249a9:	19 c0                	sbb    eax,eax
c00249ab:	83 e0 fd             	and    eax,0xfffffffd
c00249ae:	05 ea 00 00 00       	add    eax,0xea
c00249b3:	50                   	push   eax
c00249b4:	6a 07                	push   0x7
c00249b6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00249bd:	50                   	push   eax
c00249be:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00249c4:	e8 dd ef ff ff       	call   c00239a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249c9:	83 c4 0c             	add    esp,0xc
c00249cc:	6a 00                	push   0x0
c00249ce:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00249d5:	50                   	push   eax
c00249d6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00249dc:	e8 71 fb ff ff       	call   c0024552 <IDE::polling(unsigned char, unsigned int)>
c00249e1:	83 c4 18             	add    esp,0x18
c00249e4:	5b                   	pop    ebx
c00249e5:	c3                   	ret    

c00249e6 <ATA::readyForCommand()>:
c00249e6:	56                   	push   esi
c00249e7:	53                   	push   ebx
c00249e8:	31 db                	xor    ebx,ebx
c00249ea:	50                   	push   eax
c00249eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00249ef:	50                   	push   eax
c00249f0:	6a 0c                	push   0xc
c00249f2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00249f9:	50                   	push   eax
c00249fa:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024a00:	e8 61 f0 ff ff       	call   c0023a66 <IDE::read(unsigned char, unsigned char)>
c0024a05:	83 c4 10             	add    esp,0x10
c0024a08:	a8 88                	test   al,0x88
c0024a0a:	74 23                	je     c0024a2f <ATA::readyForCommand()+0x49>
c0024a0c:	43                   	inc    ebx
c0024a0d:	83 fb 63             	cmp    ebx,0x63
c0024a10:	7e dd                	jle    c00249ef <ATA::readyForCommand()+0x9>
c0024a12:	51                   	push   ecx
c0024a13:	51                   	push   ecx
c0024a14:	6a 00                	push   0x0
c0024a16:	68 40 42 0f 00       	push   0xf4240
c0024a1b:	e8 03 9f ff ff       	call   c001e923 <nanoSleep(unsigned long long)>
c0024a20:	83 c4 10             	add    esp,0x10
c0024a23:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024a29:	75 c4                	jne    c00249ef <ATA::readyForCommand()+0x9>
c0024a2b:	31 c0                	xor    eax,eax
c0024a2d:	eb 02                	jmp    c0024a31 <ATA::readyForCommand()+0x4b>
c0024a2f:	b0 01                	mov    al,0x1
c0024a31:	5a                   	pop    edx
c0024a32:	5b                   	pop    ebx
c0024a33:	5e                   	pop    esi
c0024a34:	c3                   	ret    
c0024a35:	90                   	nop

c0024a36 <ATA::access(unsigned long long, int, void*, bool)>:
c0024a36:	55                   	push   ebp
c0024a37:	57                   	push   edi
c0024a38:	56                   	push   esi
c0024a39:	53                   	push   ebx
c0024a3a:	83 ec 2c             	sub    esp,0x2c
c0024a3d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024a41:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024a45:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024a49:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024a4d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0024a51:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024a55:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024a59:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024a5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024a63:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024a69:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024a6d:	c1 e0 06             	shl    eax,0x6
c0024a70:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024a78:	74 5d                	je     c0024ad7 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024a7a:	89 fa                	mov    edx,edi
c0024a7c:	89 f0                	mov    eax,esi
c0024a7e:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024a82:	c1 ea 1c             	shr    edx,0x1c
c0024a85:	89 d1                	mov    ecx,edx
c0024a87:	09 c1                	or     ecx,eax
c0024a89:	74 25                	je     c0024ab0 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024a8b:	31 ed                	xor    ebp,ebp
c0024a8d:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024a94:	89 fa                	mov    edx,edi
c0024a96:	89 f0                	mov    eax,esi
c0024a98:	0f ad d0             	shrd   eax,edx,cl
c0024a9b:	d3 ea                	shr    edx,cl
c0024a9d:	f6 c1 20             	test   cl,0x20
c0024aa0:	74 02                	je     c0024aa4 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0024aa2:	89 d0                	mov    eax,edx
c0024aa4:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024aa8:	45                   	inc    ebp
c0024aa9:	83 fd 06             	cmp    ebp,0x6
c0024aac:	75 df                	jne    c0024a8d <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0024aae:	eb 76                	jmp    c0024b26 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0024ab0:	89 f0                	mov    eax,esi
c0024ab2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024ab7:	89 fa                	mov    edx,edi
c0024ab9:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024ac0:	0f ac d0 10          	shrd   eax,edx,0x10
c0024ac4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024ac9:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024acd:	c1 ee 18             	shr    esi,0x18
c0024ad0:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024ad5:	eb 56                	jmp    c0024b2d <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024ad7:	6a 00                	push   0x0
c0024ad9:	6a 3f                	push   0x3f
c0024adb:	57                   	push   edi
c0024adc:	56                   	push   esi
c0024add:	e8 92 29 00 00       	call   c0027474 <__umoddi3>
c0024ae2:	83 c4 10             	add    esp,0x10
c0024ae5:	40                   	inc    eax
c0024ae6:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024aea:	6a 00                	push   0x0
c0024aec:	68 f0 03 00 00       	push   0x3f0
c0024af1:	57                   	push   edi
c0024af2:	56                   	push   esi
c0024af3:	e8 7c 28 00 00       	call   c0027374 <__udivdi3>
c0024af8:	83 c4 10             	add    esp,0x10
c0024afb:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024b00:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024b07:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024b0c:	6a 00                	push   0x0
c0024b0e:	6a 3f                	push   0x3f
c0024b10:	57                   	push   edi
c0024b11:	56                   	push   esi
c0024b12:	e8 5d 28 00 00       	call   c0027374 <__udivdi3>
c0024b17:	83 c4 10             	add    esp,0x10
c0024b1a:	89 c6                	mov    esi,eax
c0024b1c:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024b21:	83 e6 0f             	and    esi,0xf
c0024b24:	eb 07                	jmp    c0024b2d <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024b26:	31 f6                	xor    esi,esi
c0024b28:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024b2d:	bf 01 00 00 00       	mov    edi,0x1
c0024b32:	50                   	push   eax
c0024b33:	6a 00                	push   0x0
c0024b35:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b3c:	50                   	push   eax
c0024b3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024b41:	e8 6c f0 ff ff       	call   c0023bb2 <IDE::enableIRQs(unsigned char, bool)>
c0024b46:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024b49:	e8 98 fe ff ff       	call   c00249e6 <ATA::readyForCommand()>
c0024b4e:	83 c4 10             	add    esp,0x10
c0024b51:	84 c0                	test   al,al
c0024b53:	0f 84 5a 02 00 00    	je     c0024db3 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024b59:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024b5f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024b65:	c1 e0 04             	shl    eax,0x4
c0024b68:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024b6f:	09 c6                	or     esi,eax
c0024b71:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024b76:	75 05                	jne    c0024b7d <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024b78:	83 ce a0             	or     esi,0xffffffa0
c0024b7b:	eb 03                	jmp    c0024b80 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024b7d:	83 ce e0             	or     esi,0xffffffe0
c0024b80:	89 f0                	mov    eax,esi
c0024b82:	0f b6 f0             	movzx  esi,al
c0024b85:	56                   	push   esi
c0024b86:	6a 06                	push   0x6
c0024b88:	51                   	push   ecx
c0024b89:	52                   	push   edx
c0024b8a:	e8 17 ee ff ff       	call   c00239a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b8f:	83 c4 10             	add    esp,0x10
c0024b92:	6a 00                	push   0x0
c0024b94:	6a 01                	push   0x1
c0024b96:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b9d:	50                   	push   eax
c0024b9e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ba4:	e8 fd ed ff ff       	call   c00239a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ba9:	83 c4 10             	add    esp,0x10
c0024bac:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024bb1:	75 6e                	jne    c0024c21 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024bb3:	6a 00                	push   0x0
c0024bb5:	6a 08                	push   0x8
c0024bb7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024bbe:	50                   	push   eax
c0024bbf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024bc5:	e8 dc ed ff ff       	call   c00239a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024bca:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024bcf:	50                   	push   eax
c0024bd0:	6a 09                	push   0x9
c0024bd2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024bd9:	50                   	push   eax
c0024bda:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024be0:	e8 c1 ed ff ff       	call   c00239a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024be5:	83 c4 20             	add    esp,0x20
c0024be8:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024bed:	50                   	push   eax
c0024bee:	6a 0a                	push   0xa
c0024bf0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024bf7:	50                   	push   eax
c0024bf8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024bfe:	e8 a3 ed ff ff       	call   c00239a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c03:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024c08:	50                   	push   eax
c0024c09:	6a 0b                	push   0xb
c0024c0b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c12:	50                   	push   eax
c0024c13:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c19:	e8 88 ed ff ff       	call   c00239a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c1e:	83 c4 20             	add    esp,0x20
c0024c21:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024c26:	50                   	push   eax
c0024c27:	6a 02                	push   0x2
c0024c29:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c30:	50                   	push   eax
c0024c31:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c37:	e8 6a ed ff ff       	call   c00239a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c3c:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024c41:	50                   	push   eax
c0024c42:	6a 03                	push   0x3
c0024c44:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c4b:	50                   	push   eax
c0024c4c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c52:	e8 4f ed ff ff       	call   c00239a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c57:	83 c4 20             	add    esp,0x20
c0024c5a:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024c5f:	50                   	push   eax
c0024c60:	6a 04                	push   0x4
c0024c62:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c69:	50                   	push   eax
c0024c6a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c70:	e8 31 ed ff ff       	call   c00239a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c75:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024c7a:	50                   	push   eax
c0024c7b:	6a 05                	push   0x5
c0024c7d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c84:	50                   	push   eax
c0024c85:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c8b:	e8 16 ed ff ff       	call   c00239a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c90:	83 c4 20             	add    esp,0x20
c0024c93:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024c98:	0f 94 c0             	sete   al
c0024c9b:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024ca0:	74 09                	je     c0024cab <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024ca2:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024ca9:	eb 07                	jmp    c0024cb2 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024cab:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024cb2:	0f b6 c0             	movzx  eax,al
c0024cb5:	50                   	push   eax
c0024cb6:	6a 07                	push   0x7
c0024cb8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024cbf:	50                   	push   eax
c0024cc0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024cc6:	e8 db ec ff ff       	call   c00239a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ccb:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024ccf:	83 c4 10             	add    esp,0x10
c0024cd2:	85 f6                	test   esi,esi
c0024cd4:	0f 84 ba 00 00 00    	je     c0024d94 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024cda:	50                   	push   eax
c0024cdb:	6a 01                	push   0x1
c0024cdd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ce4:	50                   	push   eax
c0024ce5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ceb:	e8 62 f8 ff ff       	call   c0024552 <IDE::polling(unsigned char, unsigned int)>
c0024cf0:	83 c4 10             	add    esp,0x10
c0024cf3:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024cf9:	84 c0                	test   al,al
c0024cfb:	74 2c                	je     c0024d29 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024cfd:	0f b6 f8             	movzx  edi,al
c0024d00:	0f b6 d2             	movzx  edx,dl
c0024d03:	57                   	push   edi
c0024d04:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024d0b:	50                   	push   eax
c0024d0c:	52                   	push   edx
c0024d0d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d13:	e8 a4 f6 ff ff       	call   c00243bc <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024d18:	c7 04 24 2c da 02 c0 	mov    DWORD PTR [esp],0xc002da2c
c0024d1f:	e8 61 e1 fe ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0024d24:	e9 87 00 00 00       	jmp    c0024db0 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024d29:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024d2e:	74 33                	je     c0024d63 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024d30:	31 ed                	xor    ebp,ebp
c0024d32:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024d36:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024d3a:	50                   	push   eax
c0024d3b:	50                   	push   eax
c0024d3c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024d43:	50                   	push   eax
c0024d44:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d4a:	e8 45 ec ff ff       	call   c0023994 <IDE::getBase(unsigned char)>
c0024d4f:	89 c2                	mov    edx,eax
c0024d51:	89 f8                	mov    eax,edi
c0024d53:	66 ef                	out    dx,ax
c0024d55:	45                   	inc    ebp
c0024d56:	83 c4 10             	add    esp,0x10
c0024d59:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024d5f:	75 d1                	jne    c0024d32 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024d61:	eb 23                	jmp    c0024d86 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024d63:	0f b6 d2             	movzx  edx,dl
c0024d66:	51                   	push   ecx
c0024d67:	51                   	push   ecx
c0024d68:	52                   	push   edx
c0024d69:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d6f:	e8 20 ec ff ff       	call   c0023994 <IDE::getBase(unsigned char)>
c0024d74:	b9 00 01 00 00       	mov    ecx,0x100
c0024d79:	89 c2                	mov    edx,eax
c0024d7b:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024d7f:	fc                   	cld    
c0024d80:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024d83:	83 c4 10             	add    esp,0x10
c0024d86:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024d8e:	4e                   	dec    esi
c0024d8f:	e9 3e ff ff ff       	jmp    c0024cd2 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024d94:	31 ff                	xor    edi,edi
c0024d96:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024d9b:	74 16                	je     c0024db3 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024d9d:	50                   	push   eax
c0024d9e:	50                   	push   eax
c0024d9f:	31 c0                	xor    eax,eax
c0024da1:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024da6:	0f 94 c0             	sete   al
c0024da9:	50                   	push   eax
c0024daa:	53                   	push   ebx
c0024dab:	e8 ec fb ff ff       	call   c002499c <ATA::flush(bool)>
c0024db0:	83 c4 10             	add    esp,0x10
c0024db3:	83 c4 2c             	add    esp,0x2c
c0024db6:	89 f8                	mov    eax,edi
c0024db8:	5b                   	pop    ebx
c0024db9:	5e                   	pop    esi
c0024dba:	5f                   	pop    edi
c0024dbb:	5d                   	pop    ebp
c0024dbc:	c3                   	ret    
c0024dbd:	90                   	nop

c0024dbe <ATA::read(unsigned long long, int, void*)>:
c0024dbe:	57                   	push   edi
c0024dbf:	b8 04 00 00 00       	mov    eax,0x4
c0024dc4:	56                   	push   esi
c0024dc5:	53                   	push   ebx
c0024dc6:	83 ec 10             	sub    esp,0x10
c0024dc9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024dcd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024dd1:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024dd4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024dd8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024ddc:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024de2:	77 3b                	ja     c0024e1f <ATA::read(unsigned long long, int, void*)+0x61>
c0024de4:	b8 06 00 00 00       	mov    eax,0x6
c0024de9:	85 d2                	test   edx,edx
c0024deb:	74 32                	je     c0024e1f <ATA::read(unsigned long long, int, void*)+0x61>
c0024ded:	50                   	push   eax
c0024dee:	50                   	push   eax
c0024def:	6a 00                	push   0x0
c0024df1:	52                   	push   edx
c0024df2:	53                   	push   ebx
c0024df3:	57                   	push   edi
c0024df4:	56                   	push   esi
c0024df5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024df9:	e8 38 fc ff ff       	call   c0024a36 <ATA::access(unsigned long long, int, void*, bool)>
c0024dfe:	83 c4 20             	add    esp,0x20
c0024e01:	85 c0                	test   eax,eax
c0024e03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024e07:	75 11                	jne    c0024e1a <ATA::read(unsigned long long, int, void*)+0x5c>
c0024e09:	01 1d c8 33 03 c0    	add    DWORD PTR ds:0xc00333c8,ebx
c0024e0f:	e8 76 bb fe ff       	call   c001098a <VgaText::updateDiskUsage()>
c0024e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024e18:	eb 05                	jmp    c0024e1f <ATA::read(unsigned long long, int, void*)+0x61>
c0024e1a:	b8 01 00 00 00       	mov    eax,0x1
c0024e1f:	83 c4 10             	add    esp,0x10
c0024e22:	5b                   	pop    ebx
c0024e23:	5e                   	pop    esi
c0024e24:	5f                   	pop    edi
c0024e25:	c3                   	ret    

c0024e26 <ATA::write(unsigned long long, int, void*)>:
c0024e26:	57                   	push   edi
c0024e27:	b8 04 00 00 00       	mov    eax,0x4
c0024e2c:	56                   	push   esi
c0024e2d:	53                   	push   ebx
c0024e2e:	83 ec 10             	sub    esp,0x10
c0024e31:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024e39:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024e3c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024e40:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024e44:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024e4a:	77 3b                	ja     c0024e87 <ATA::write(unsigned long long, int, void*)+0x61>
c0024e4c:	b8 06 00 00 00       	mov    eax,0x6
c0024e51:	85 d2                	test   edx,edx
c0024e53:	74 32                	je     c0024e87 <ATA::write(unsigned long long, int, void*)+0x61>
c0024e55:	50                   	push   eax
c0024e56:	50                   	push   eax
c0024e57:	6a 01                	push   0x1
c0024e59:	52                   	push   edx
c0024e5a:	53                   	push   ebx
c0024e5b:	57                   	push   edi
c0024e5c:	56                   	push   esi
c0024e5d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024e61:	e8 d0 fb ff ff       	call   c0024a36 <ATA::access(unsigned long long, int, void*, bool)>
c0024e66:	83 c4 20             	add    esp,0x20
c0024e69:	85 c0                	test   eax,eax
c0024e6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024e6f:	75 11                	jne    c0024e82 <ATA::write(unsigned long long, int, void*)+0x5c>
c0024e71:	01 1d c4 33 03 c0    	add    DWORD PTR ds:0xc00333c4,ebx
c0024e77:	e8 0e bb fe ff       	call   c001098a <VgaText::updateDiskUsage()>
c0024e7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024e80:	eb 05                	jmp    c0024e87 <ATA::write(unsigned long long, int, void*)+0x61>
c0024e82:	b8 01 00 00 00       	mov    eax,0x1
c0024e87:	83 c4 10             	add    esp,0x10
c0024e8a:	5b                   	pop    ebx
c0024e8b:	5e                   	pop    esi
c0024e8c:	5f                   	pop    edi
c0024e8d:	c3                   	ret    

c0024e8e <ATA::detectCHS()>:
c0024e8e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024e92:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024e98:	c1 e0 06             	shl    eax,0x6
c0024e9b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024ea1:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024eab:	c7 44 24 04 37 da 02 c0 	mov    DWORD PTR [esp+0x4],0xc002da37
c0024eb3:	e9 b5 59 ff ff       	jmp    c001a86d <Krnl::panic(char const*)>

c0024eb8 <ATA::open(int, int, void*)>:
c0024eb8:	53                   	push   ebx
c0024eb9:	83 ec 08             	sub    esp,0x8
c0024ebc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024ec0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024ec4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024ec8:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024ece:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024ed4:	c1 e0 06             	shl    eax,0x6
c0024ed7:	01 d0                	add    eax,edx
c0024ed9:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024ee0:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024ee6:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024eed:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024ef7:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024efd:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024f04:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024f0b:	75 0c                	jne    c0024f19 <ATA::open(int, int, void*)+0x61>
c0024f0d:	83 ec 0c             	sub    esp,0xc
c0024f10:	53                   	push   ebx
c0024f11:	e8 78 ff ff ff       	call   c0024e8e <ATA::detectCHS()>
c0024f16:	83 c4 10             	add    esp,0x10
c0024f19:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024f1f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024f25:	c1 e0 06             	shl    eax,0x6
c0024f28:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024f2f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024f39:	d1 e8                	shr    eax,1
c0024f3b:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024f41:	6a 04                	push   0x4
c0024f43:	6a 0c                	push   0xc
c0024f45:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024f4c:	50                   	push   eax
c0024f4d:	52                   	push   edx
c0024f4e:	e8 53 ea ff ff       	call   c00239a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f53:	90                   	nop
c0024f54:	90                   	nop
c0024f55:	6a 00                	push   0x0
c0024f57:	6a 0c                	push   0xc
c0024f59:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024f60:	50                   	push   eax
c0024f61:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024f67:	e8 3a ea ff ff       	call   c00239a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f6c:	83 c4 14             	add    esp,0x14
c0024f6f:	53                   	push   ebx
c0024f70:	e8 cb f7 fe ff       	call   c0014740 <PhysicalDisk::startCache()>
c0024f75:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024f78:	e8 a3 1a ff ff       	call   c0016a20 <createPartitionsForDisk(PhysicalDisk*)>
c0024f7d:	31 c0                	xor    eax,eax
c0024f7f:	83 c4 18             	add    esp,0x18
c0024f82:	5b                   	pop    ebx
c0024f83:	c3                   	ret    

c0024f84 <ATAPI::write(unsigned long long, int, void*)>:
c0024f84:	b8 03 00 00 00       	mov    eax,0x3
c0024f89:	c3                   	ret    

c0024f8a <ATAPI::close(int, int, void*)>:
c0024f8a:	83 ec 0c             	sub    esp,0xc
c0024f8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f91:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024f97:	85 c0                	test   eax,eax
c0024f99:	74 0c                	je     c0024fa7 <ATAPI::close(int, int, void*)+0x1d>
c0024f9b:	83 ec 0c             	sub    esp,0xc
c0024f9e:	8b 10                	mov    edx,DWORD PTR [eax]
c0024fa0:	50                   	push   eax
c0024fa1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024fa4:	83 c4 10             	add    esp,0x10
c0024fa7:	31 c0                	xor    eax,eax
c0024fa9:	83 c4 0c             	add    esp,0xc
c0024fac:	c3                   	ret    
c0024fad:	90                   	nop

c0024fae <ATAPI::ATAPI()>:
c0024fae:	83 ec 0c             	sub    esp,0xc
c0024fb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fb5:	83 ec 04             	sub    esp,0x4
c0024fb8:	68 00 08 00 00       	push   0x800
c0024fbd:	68 71 db 02 c0       	push   0xc002db71
c0024fc2:	50                   	push   eax
c0024fc3:	e8 10 f7 fe ff       	call   c00146d8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024fc8:	83 c4 10             	add    esp,0x10
c0024fcb:	ba 8c da 02 c0       	mov    edx,0xc002da8c
c0024fd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fd4:	89 10                	mov    DWORD PTR [eax],edx
c0024fd6:	90                   	nop
c0024fd7:	83 c4 0c             	add    esp,0xc
c0024fda:	c3                   	ret    
c0024fdb:	90                   	nop

c0024fdc <ATAPI::readyForCommand()>:
c0024fdc:	56                   	push   esi
c0024fdd:	53                   	push   ebx
c0024fde:	31 db                	xor    ebx,ebx
c0024fe0:	50                   	push   eax
c0024fe1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024fe5:	50                   	push   eax
c0024fe6:	6a 0c                	push   0xc
c0024fe8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024fef:	50                   	push   eax
c0024ff0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024ff6:	e8 6b ea ff ff       	call   c0023a66 <IDE::read(unsigned char, unsigned char)>
c0024ffb:	83 c4 10             	add    esp,0x10
c0024ffe:	a8 88                	test   al,0x88
c0025000:	74 23                	je     c0025025 <ATAPI::readyForCommand()+0x49>
c0025002:	43                   	inc    ebx
c0025003:	83 fb 63             	cmp    ebx,0x63
c0025006:	7e dd                	jle    c0024fe5 <ATAPI::readyForCommand()+0x9>
c0025008:	51                   	push   ecx
c0025009:	51                   	push   ecx
c002500a:	6a 00                	push   0x0
c002500c:	68 40 42 0f 00       	push   0xf4240
c0025011:	e8 0d 99 ff ff       	call   c001e923 <nanoSleep(unsigned long long)>
c0025016:	83 c4 10             	add    esp,0x10
c0025019:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002501f:	75 c4                	jne    c0024fe5 <ATAPI::readyForCommand()+0x9>
c0025021:	31 c0                	xor    eax,eax
c0025023:	eb 02                	jmp    c0025027 <ATAPI::readyForCommand()+0x4b>
c0025025:	b0 01                	mov    al,0x1
c0025027:	5a                   	pop    edx
c0025028:	5b                   	pop    ebx
c0025029:	5e                   	pop    esi
c002502a:	c3                   	ret    
c002502b:	90                   	nop

c002502c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002502c:	55                   	push   ebp
c002502d:	57                   	push   edi
c002502e:	56                   	push   esi
c002502f:	53                   	push   ebx
c0025030:	83 ec 20             	sub    esp,0x20
c0025033:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0025037:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002503b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002503f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025043:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025047:	6a 01                	push   0x1
c0025049:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025050:	50                   	push   eax
c0025051:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025057:	e8 56 eb ff ff       	call   c0023bb2 <IDE::enableIRQs(unsigned char, bool)>
c002505c:	5e                   	pop    esi
c002505d:	58                   	pop    eax
c002505e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025065:	50                   	push   eax
c0025066:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002506c:	e8 0f e9 ff ff       	call   c0023980 <IDE::prepareInterrupt(unsigned char)>
c0025071:	89 3c 24             	mov    DWORD PTR [esp],edi
c0025074:	e8 63 ff ff ff       	call   c0024fdc <ATAPI::readyForCommand()>
c0025079:	83 c4 10             	add    esp,0x10
c002507c:	84 c0                	test   al,al
c002507e:	75 0a                	jne    c002508a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0025080:	bb 01 00 00 00       	mov    ebx,0x1
c0025085:	e9 57 02 00 00       	jmp    c00252e1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002508a:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0025090:	c1 e0 04             	shl    eax,0x4
c0025093:	0f b6 c0             	movzx  eax,al
c0025096:	50                   	push   eax
c0025097:	6a 06                	push   0x6
c0025099:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00250a0:	50                   	push   eax
c00250a1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00250a7:	e8 fa e8 ff ff       	call   c00239a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00250ac:	6a 00                	push   0x0
c00250ae:	6a 01                	push   0x1
c00250b0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00250b7:	50                   	push   eax
c00250b8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00250be:	e8 e3 e8 ff ff       	call   c00239a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00250c3:	83 c4 20             	add    esp,0x20
c00250c6:	0f b6 c3             	movzx  eax,bl
c00250c9:	0f b6 df             	movzx  ebx,bh
c00250cc:	50                   	push   eax
c00250cd:	6a 04                	push   0x4
c00250cf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00250d6:	50                   	push   eax
c00250d7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00250dd:	e8 c4 e8 ff ff       	call   c00239a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00250e2:	53                   	push   ebx
c00250e3:	6a 05                	push   0x5
c00250e5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00250ec:	50                   	push   eax
c00250ed:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00250f3:	e8 ae e8 ff ff       	call   c00239a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00250f8:	83 c4 20             	add    esp,0x20
c00250fb:	68 a0 00 00 00       	push   0xa0
c0025100:	6a 07                	push   0x7
c0025102:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025109:	50                   	push   eax
c002510a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025110:	e8 91 e8 ff ff       	call   c00239a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025115:	83 c4 0c             	add    esp,0xc
c0025118:	6a 01                	push   0x1
c002511a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025121:	50                   	push   eax
c0025122:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025128:	e8 25 f4 ff ff       	call   c0024552 <IDE::polling(unsigned char, unsigned int)>
c002512d:	83 c4 10             	add    esp,0x10
c0025130:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0025136:	84 c0                	test   al,al
c0025138:	74 23                	je     c002515d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002513a:	0f b6 d8             	movzx  ebx,al
c002513d:	0f b6 d2             	movzx  edx,dl
c0025140:	53                   	push   ebx
c0025141:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0025148:	50                   	push   eax
c0025149:	52                   	push   edx
c002514a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025150:	e8 67 f2 ff ff       	call   c00243bc <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0025155:	83 c4 10             	add    esp,0x10
c0025158:	e9 84 01 00 00       	jmp    c00252e1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002515d:	0f b6 d2             	movzx  edx,dl
c0025160:	53                   	push   ebx
c0025161:	53                   	push   ebx
c0025162:	52                   	push   edx
c0025163:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025169:	e8 26 e8 ff ff       	call   c0023994 <IDE::getBase(unsigned char)>
c002516e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0025172:	b9 06 00 00 00       	mov    ecx,0x6
c0025177:	89 c2                	mov    edx,eax
c0025179:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002517c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0025180:	83 c4 10             	add    esp,0x10
c0025183:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0025189:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025190:	85 db                	test   ebx,ebx
c0025192:	0f 84 ec 00 00 00    	je     c0025284 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0025198:	51                   	push   ecx
c0025199:	51                   	push   ecx
c002519a:	52                   	push   edx
c002519b:	50                   	push   eax
c002519c:	e8 73 e9 ff ff       	call   c0023b14 <IDE::waitInterrupt(unsigned char)>
c00251a1:	83 c4 10             	add    esp,0x10
c00251a4:	84 c0                	test   al,al
c00251a6:	0f 84 d4 fe ff ff    	je     c0025080 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00251ac:	56                   	push   esi
c00251ad:	56                   	push   esi
c00251ae:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00251b5:	50                   	push   eax
c00251b6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00251bc:	e8 bf e7 ff ff       	call   c0023980 <IDE::prepareInterrupt(unsigned char)>
c00251c1:	83 c4 0c             	add    esp,0xc
c00251c4:	6a 04                	push   0x4
c00251c6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00251cd:	50                   	push   eax
c00251ce:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00251d4:	e8 8d e8 ff ff       	call   c0023a66 <IDE::read(unsigned char, unsigned char)>
c00251d9:	83 c4 0c             	add    esp,0xc
c00251dc:	89 c6                	mov    esi,eax
c00251de:	6a 05                	push   0x5
c00251e0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00251e7:	50                   	push   eax
c00251e8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00251ee:	e8 73 e8 ff ff       	call   c0023a66 <IDE::read(unsigned char, unsigned char)>
c00251f3:	89 f1                	mov    ecx,esi
c00251f5:	0f b6 c0             	movzx  eax,al
c00251f8:	0f b6 f1             	movzx  esi,cl
c00251fb:	c1 e0 08             	shl    eax,0x8
c00251fe:	09 c6                	or     esi,eax
c0025200:	d1 fe                	sar    esi,1
c0025202:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0025206:	83 c4 10             	add    esp,0x10
c0025209:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002520e:	74 41                	je     c0025251 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0025210:	31 c9                	xor    ecx,ecx
c0025212:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0025218:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002521f:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0025223:	75 0a                	jne    c002522f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0025225:	01 c9                	add    ecx,ecx
c0025227:	01 cd                	add    ebp,ecx
c0025229:	4b                   	dec    ebx
c002522a:	e9 54 ff ff ff       	jmp    c0025183 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c002522f:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0025234:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025238:	51                   	push   ecx
c0025239:	51                   	push   ecx
c002523a:	52                   	push   edx
c002523b:	50                   	push   eax
c002523c:	e8 53 e7 ff ff       	call   c0023994 <IDE::getBase(unsigned char)>
c0025241:	89 c2                	mov    edx,eax
c0025243:	89 f0                	mov    eax,esi
c0025245:	66 ef                	out    dx,ax
c0025247:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002524b:	83 c4 10             	add    esp,0x10
c002524e:	41                   	inc    ecx
c002524f:	eb c1                	jmp    c0025212 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0025251:	31 f6                	xor    esi,esi
c0025253:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0025259:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025260:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0025264:	75 06                	jne    c002526c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0025266:	01 f6                	add    esi,esi
c0025268:	01 f5                	add    ebp,esi
c002526a:	eb bd                	jmp    c0025229 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c002526c:	51                   	push   ecx
c002526d:	51                   	push   ecx
c002526e:	52                   	push   edx
c002526f:	50                   	push   eax
c0025270:	e8 1f e7 ff ff       	call   c0023994 <IDE::getBase(unsigned char)>
c0025275:	89 c2                	mov    edx,eax
c0025277:	66 ed                	in     ax,dx
c0025279:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002527e:	83 c4 10             	add    esp,0x10
c0025281:	46                   	inc    esi
c0025282:	eb cf                	jmp    c0025253 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0025284:	51                   	push   ecx
c0025285:	51                   	push   ecx
c0025286:	52                   	push   edx
c0025287:	50                   	push   eax
c0025288:	e8 87 e8 ff ff       	call   c0023b14 <IDE::waitInterrupt(unsigned char)>
c002528d:	83 c4 10             	add    esp,0x10
c0025290:	84 c0                	test   al,al
c0025292:	0f 84 e8 fd ff ff    	je     c0025080 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0025298:	bb a0 86 01 00       	mov    ebx,0x186a0
c002529d:	52                   	push   edx
c002529e:	52                   	push   edx
c002529f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00252a6:	50                   	push   eax
c00252a7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00252ad:	e8 ce e6 ff ff       	call   c0023980 <IDE::prepareInterrupt(unsigned char)>
c00252b2:	83 c4 10             	add    esp,0x10
c00252b5:	50                   	push   eax
c00252b6:	50                   	push   eax
c00252b7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00252be:	50                   	push   eax
c00252bf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00252c5:	e8 ca e6 ff ff       	call   c0023994 <IDE::getBase(unsigned char)>
c00252ca:	8d 50 07             	lea    edx,[eax+0x7]
c00252cd:	ec                   	in     al,dx
c00252ce:	83 c4 10             	add    esp,0x10
c00252d1:	a8 88                	test   al,0x88
c00252d3:	74 0a                	je     c00252df <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00252d5:	4b                   	dec    ebx
c00252d6:	75 dd                	jne    c00252b5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00252d8:	bb 02 00 00 00       	mov    ebx,0x2
c00252dd:	eb 02                	jmp    c00252e1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00252df:	31 db                	xor    ebx,ebx
c00252e1:	83 c4 1c             	add    esp,0x1c
c00252e4:	89 d8                	mov    eax,ebx
c00252e6:	5b                   	pop    ebx
c00252e7:	5e                   	pop    esi
c00252e8:	5f                   	pop    edi
c00252e9:	5d                   	pop    ebp
c00252ea:	c3                   	ret    
c00252eb:	90                   	nop

c00252ec <ATAPI::diskRemoved()>:
c00252ec:	83 ec 18             	sub    esp,0x18
c00252ef:	68 7d db 02 c0       	push   0xc002db7d
c00252f4:	e8 8c db fe ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00252f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00252fd:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0025304:	83 c4 1c             	add    esp,0x1c
c0025307:	c3                   	ret    

c0025308 <ATAPI::eject()>:
c0025308:	57                   	push   edi
c0025309:	b9 03 00 00 00       	mov    ecx,0x3
c002530e:	53                   	push   ebx
c002530f:	83 ec 14             	sub    esp,0x14
c0025312:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025316:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002531a:	fc                   	cld    
c002531b:	31 c0                	xor    eax,eax
c002531d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002531f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025324:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025329:	50                   	push   eax
c002532a:	50                   	push   eax
c002532b:	6a 00                	push   0x0
c002532d:	6a 00                	push   0x0
c002532f:	6a 00                	push   0x0
c0025331:	6a 02                	push   0x2
c0025333:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025337:	50                   	push   eax
c0025338:	53                   	push   ebx
c0025339:	e8 ee fc ff ff       	call   c002502c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002533e:	83 c4 14             	add    esp,0x14
c0025341:	53                   	push   ebx
c0025342:	e8 a5 ff ff ff       	call   c00252ec <ATAPI::diskRemoved()>
c0025347:	83 c4 24             	add    esp,0x24
c002534a:	31 c0                	xor    eax,eax
c002534c:	5b                   	pop    ebx
c002534d:	5f                   	pop    edi
c002534e:	c3                   	ret    
c002534f:	90                   	nop

c0025350 <ATAPI::diskInserted()>:
c0025350:	53                   	push   ebx
c0025351:	83 ec 14             	sub    esp,0x14
c0025354:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025358:	68 94 db 02 c0       	push   0xc002db94
c002535d:	e8 23 db fe ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0025362:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0025369:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002536c:	e8 cf f3 fe ff       	call   c0014740 <PhysicalDisk::startCache()>
c0025371:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025375:	83 c4 18             	add    esp,0x18
c0025378:	5b                   	pop    ebx
c0025379:	e9 a2 16 ff ff       	jmp    c0016a20 <createPartitionsForDisk(PhysicalDisk*)>

c002537e <ATAPI::detectMedia()>:
c002537e:	56                   	push   esi
c002537f:	53                   	push   ebx
c0025380:	83 ec 28             	sub    esp,0x28
c0025383:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025387:	6a 0c                	push   0xc
c0025389:	6a 00                	push   0x0
c002538b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002538f:	56                   	push   esi
c0025390:	e8 d7 b3 fd ff       	call   c000076c <memset>
c0025395:	58                   	pop    eax
c0025396:	5a                   	pop    edx
c0025397:	6a 00                	push   0x0
c0025399:	6a 00                	push   0x0
c002539b:	6a 00                	push   0x0
c002539d:	6a 00                	push   0x0
c002539f:	56                   	push   esi
c00253a0:	53                   	push   ebx
c00253a1:	e8 86 fc ff ff       	call   c002502c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00253a6:	83 c4 1c             	add    esp,0x1c
c00253a9:	6a 0c                	push   0xc
c00253ab:	6a 00                	push   0x0
c00253ad:	56                   	push   esi
c00253ae:	e8 b9 b3 fd ff       	call   c000076c <memset>
c00253b3:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00253b8:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00253bd:	59                   	pop    ecx
c00253be:	58                   	pop    eax
c00253bf:	6a 01                	push   0x1
c00253c1:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00253c5:	50                   	push   eax
c00253c6:	6a 00                	push   0x0
c00253c8:	6a 12                	push   0x12
c00253ca:	56                   	push   esi
c00253cb:	53                   	push   ebx
c00253cc:	e8 5b fc ff ff       	call   c002502c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00253d1:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00253d5:	83 c4 20             	add    esp,0x20
c00253d8:	83 e0 7f             	and    eax,0x7f
c00253db:	3c 70                	cmp    al,0x70
c00253dd:	74 15                	je     c00253f4 <ATAPI::detectMedia()+0x76>
c00253df:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00253e6:	75 0c                	jne    c00253f4 <ATAPI::detectMedia()+0x76>
c00253e8:	83 ec 0c             	sub    esp,0xc
c00253eb:	53                   	push   ebx
c00253ec:	e8 5f ff ff ff       	call   c0025350 <ATAPI::diskInserted()>
c00253f1:	83 c4 10             	add    esp,0x10
c00253f4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00253f8:	83 e0 0f             	and    eax,0xf
c00253fb:	3c 02                	cmp    al,0x2
c00253fd:	75 1b                	jne    c002541a <ATAPI::detectMedia()+0x9c>
c00253ff:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025404:	75 2d                	jne    c0025433 <ATAPI::detectMedia()+0xb5>
c0025406:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002540d:	74 24                	je     c0025433 <ATAPI::detectMedia()+0xb5>
c002540f:	83 ec 0c             	sub    esp,0xc
c0025412:	53                   	push   ebx
c0025413:	e8 d4 fe ff ff       	call   c00252ec <ATAPI::diskRemoved()>
c0025418:	eb 16                	jmp    c0025430 <ATAPI::detectMedia()+0xb2>
c002541a:	84 c0                	test   al,al
c002541c:	75 15                	jne    c0025433 <ATAPI::detectMedia()+0xb5>
c002541e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0025425:	75 0c                	jne    c0025433 <ATAPI::detectMedia()+0xb5>
c0025427:	83 ec 0c             	sub    esp,0xc
c002542a:	53                   	push   ebx
c002542b:	e8 20 ff ff ff       	call   c0025350 <ATAPI::diskInserted()>
c0025430:	83 c4 10             	add    esp,0x10
c0025433:	83 c4 24             	add    esp,0x24
c0025436:	5b                   	pop    ebx
c0025437:	5e                   	pop    esi
c0025438:	c3                   	ret    
c0025439:	90                   	nop

c002543a <ATAPI::open(int, int, void*)>:
c002543a:	53                   	push   ebx
c002543b:	83 ec 08             	sub    esp,0x8
c002543e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025442:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025446:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002544a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025450:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0025456:	c1 e0 06             	shl    eax,0x6
c0025459:	01 d0                	add    eax,edx
c002545b:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0025462:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0025468:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002546f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025479:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002547f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025486:	6a 04                	push   0x4
c0025488:	6a 0c                	push   0xc
c002548a:	51                   	push   ecx
c002548b:	52                   	push   edx
c002548c:	e8 15 e5 ff ff       	call   c00239a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025491:	90                   	nop
c0025492:	90                   	nop
c0025493:	6a 00                	push   0x0
c0025495:	6a 0c                	push   0xc
c0025497:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002549e:	50                   	push   eax
c002549f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00254a5:	e8 fc e4 ff ff       	call   c00239a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00254aa:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00254b1:	83 c4 14             	add    esp,0x14
c00254b4:	53                   	push   ebx
c00254b5:	e8 c4 fe ff ff       	call   c002537e <ATAPI::detectMedia()>
c00254ba:	31 c0                	xor    eax,eax
c00254bc:	83 c4 18             	add    esp,0x18
c00254bf:	5b                   	pop    ebx
c00254c0:	c3                   	ret    
c00254c1:	90                   	nop

c00254c2 <ATAPI::read(unsigned long long, int, void*)>:
c00254c2:	55                   	push   ebp
c00254c3:	57                   	push   edi
c00254c4:	56                   	push   esi
c00254c5:	53                   	push   ebx
c00254c6:	83 ec 1c             	sub    esp,0x1c
c00254c9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00254cd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00254d1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00254d5:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00254dc:	74 41                	je     c002551f <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00254de:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00254e2:	b9 03 00 00 00       	mov    ecx,0x3
c00254e7:	fc                   	cld    
c00254e8:	31 c0                	xor    eax,eax
c00254ea:	86 fb                	xchg   bl,bh
c00254ec:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00254ee:	c1 c3 10             	rol    ebx,0x10
c00254f1:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00254f6:	89 e8                	mov    eax,ebp
c00254f8:	86 fb                	xchg   bl,bh
c00254fa:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00254fe:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0025502:	50                   	push   eax
c0025503:	50                   	push   eax
c0025504:	55                   	push   ebp
c0025505:	c1 e5 0b             	shl    ebp,0xb
c0025508:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002550c:	6a 00                	push   0x0
c002550e:	55                   	push   ebp
c002550f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025513:	50                   	push   eax
c0025514:	56                   	push   esi
c0025515:	e8 12 fb ff ff       	call   c002502c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002551a:	83 c4 20             	add    esp,0x20
c002551d:	eb 1a                	jmp    c0025539 <ATAPI::read(unsigned long long, int, void*)+0x77>
c002551f:	83 ec 0c             	sub    esp,0xc
c0025522:	56                   	push   esi
c0025523:	e8 56 fe ff ff       	call   c002537e <ATAPI::detectMedia()>
c0025528:	83 c4 10             	add    esp,0x10
c002552b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0025532:	75 aa                	jne    c00254de <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0025534:	b8 02 00 00 00       	mov    eax,0x2
c0025539:	83 c4 1c             	add    esp,0x1c
c002553c:	5b                   	pop    ebx
c002553d:	5e                   	pop    esi
c002553e:	5f                   	pop    edi
c002553f:	5d                   	pop    ebp
c0025540:	c3                   	ret    
c0025541:	90                   	nop

c0025542 <SATA::close(int, int, void*)>:
c0025542:	83 ec 0c             	sub    esp,0xc
c0025545:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025549:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002554f:	85 c0                	test   eax,eax
c0025551:	74 0c                	je     c002555f <SATA::close(int, int, void*)+0x1d>
c0025553:	83 ec 0c             	sub    esp,0xc
c0025556:	8b 10                	mov    edx,DWORD PTR [eax]
c0025558:	50                   	push   eax
c0025559:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002555c:	83 c4 10             	add    esp,0x10
c002555f:	31 c0                	xor    eax,eax
c0025561:	83 c4 0c             	add    esp,0xc
c0025564:	c3                   	ret    
c0025565:	90                   	nop

c0025566 <SATA::powerSaving(PowerSavingLevel)>:
c0025566:	c3                   	ret    
c0025567:	90                   	nop

c0025568 <SATA::open(int, int, void*)>:
c0025568:	56                   	push   esi
c0025569:	53                   	push   ebx
c002556a:	50                   	push   eax
c002556b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002556f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025573:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002557d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025583:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002558d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025591:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002559b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00255a1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00255a8:	e8 99 a9 fe ff       	call   c000ff46 <Phys::allocatePage()>
c00255ad:	89 c6                	mov    esi,eax
c00255af:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00255b5:	81 c6 00 10 00 00    	add    esi,0x1000
c00255bb:	e8 86 a9 fe ff       	call   c000ff46 <Phys::allocatePage()>
c00255c0:	39 c6                	cmp    esi,eax
c00255c2:	74 10                	je     c00255d4 <SATA::open(int, int, void*)+0x6c>
c00255c4:	83 ec 0c             	sub    esp,0xc
c00255c7:	68 bc da 02 c0       	push   0xc002dabc
c00255cc:	e8 9c 52 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c00255d1:	83 c4 10             	add    esp,0x10
c00255d4:	83 ec 0c             	sub    esp,0xc
c00255d7:	6a 02                	push   0x2
c00255d9:	e8 a1 c4 fe ff       	call   c0011a7f <Virt::allocateKernelVirtualPages(int)>
c00255de:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00255e4:	6a 03                	push   0x3
c00255e6:	50                   	push   eax
c00255e7:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00255ed:	ff 35 f0 f1 02 c0    	push   DWORD PTR ds:0xc002f1f0
c00255f3:	e8 be cc fe ff       	call   c00122b6 <VAS::mapPage(unsigned long, unsigned long, int)>
c00255f8:	83 c4 14             	add    esp,0x14
c00255fb:	53                   	push   ebx
c00255fc:	e8 3f f1 fe ff       	call   c0014740 <PhysicalDisk::startCache()>
c0025601:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025604:	e8 17 14 ff ff       	call   c0016a20 <createPartitionsForDisk(PhysicalDisk*)>
c0025609:	83 c4 14             	add    esp,0x14
c002560c:	31 c0                	xor    eax,eax
c002560e:	5b                   	pop    ebx
c002560f:	5e                   	pop    esi
c0025610:	c3                   	ret    
c0025611:	90                   	nop

c0025612 <SATA::SATA()>:
c0025612:	83 ec 0c             	sub    esp,0xc
c0025615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025619:	83 ec 04             	sub    esp,0x4
c002561c:	68 00 02 00 00       	push   0x200
c0025621:	68 d0 da 02 c0       	push   0xc002dad0
c0025626:	50                   	push   eax
c0025627:	e8 ac f0 fe ff       	call   c00146d8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002562c:	83 c4 10             	add    esp,0x10
c002562f:	ba 40 db 02 c0       	mov    edx,0xc002db40
c0025634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025638:	89 10                	mov    DWORD PTR [eax],edx
c002563a:	90                   	nop
c002563b:	83 c4 0c             	add    esp,0xc
c002563e:	c3                   	ret    
c002563f:	90                   	nop

c0025640 <SATA::access(unsigned long long, int, void*, bool)>:
c0025640:	55                   	push   ebp
c0025641:	57                   	push   edi
c0025642:	56                   	push   esi
c0025643:	53                   	push   ebx
c0025644:	83 ec 2c             	sub    esp,0x2c
c0025647:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002564b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002564f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025653:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025657:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002565b:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0025660:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025664:	7e 10                	jle    c0025676 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0025666:	83 ec 0c             	sub    esp,0xc
c0025669:	68 e0 da 02 c0       	push   0xc002dae0
c002566e:	e8 fa 51 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c0025673:	83 c4 10             	add    esp,0x10
c0025676:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002567c:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0025682:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025688:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002568c:	89 d0                	mov    eax,edx
c002568e:	c1 e0 07             	shl    eax,0x7
c0025691:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025695:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002569f:	51                   	push   ecx
c00256a0:	8d 42 02             	lea    eax,[edx+0x2]
c00256a3:	51                   	push   ecx
c00256a4:	c1 e0 07             	shl    eax,0x7
c00256a7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00256ab:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00256af:	50                   	push   eax
c00256b0:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c00256b6:	e8 af ef ff ff       	call   c002466a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00256bb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00256bf:	83 c4 10             	add    esp,0x10
c00256c2:	b8 01 00 00 00       	mov    eax,0x1
c00256c7:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00256cc:	0f 84 cb 01 00 00    	je     c002589d <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00256d2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00256d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00256da:	c1 e0 09             	shl    eax,0x9
c00256dd:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00256e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00256e6:	74 0e                	je     c00256f6 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c00256e8:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c00256ee:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00256f2:	89 c1                	mov    ecx,eax
c00256f4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00256f6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00256fa:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0025700:	8d 42 02             	lea    eax,[edx+0x2]
c0025703:	c1 e0 07             	shl    eax,0x7
c0025706:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002570a:	8b 00                	mov    eax,DWORD PTR [eax]
c002570c:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025712:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025718:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002571c:	c1 e1 05             	shl    ecx,0x5
c002571f:	01 c8                	add    eax,ecx
c0025721:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0025725:	83 e1 01             	and    ecx,0x1
c0025728:	89 ce                	mov    esi,ecx
c002572a:	8a 08                	mov    cl,BYTE PTR [eax]
c002572c:	c1 e6 06             	shl    esi,0x6
c002572f:	83 e1 bf             	and    ecx,0xffffffbf
c0025732:	09 f1                	or     ecx,esi
c0025734:	88 08                	mov    BYTE PTR [eax],cl
c0025736:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025738:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c002573e:	81 c9 05 00 01 00    	or     ecx,0x10005
c0025744:	89 08                	mov    DWORD PTR [eax],ecx
c0025746:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002574c:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0025752:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0025758:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c002575b:	50                   	push   eax
c002575c:	68 90 00 00 00       	push   0x90
c0025761:	6a 00                	push   0x0
c0025763:	56                   	push   esi
c0025764:	e8 03 b0 fd ff       	call   c000076c <memset>
c0025769:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002576f:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0025773:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0025779:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002577d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0025781:	83 c4 10             	add    esp,0x10
c0025784:	48                   	dec    eax
c0025785:	25 ff ff 3f 00       	and    eax,0x3fffff
c002578a:	89 c1                	mov    ecx,eax
c002578c:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0025792:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025797:	09 c8                	or     eax,ecx
c0025799:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c002579f:	66 8b 06             	mov    ax,WORD PTR [esi]
c00257a2:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c00257a9:	66 25 00 7f          	and    ax,0x7f00
c00257ad:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00257b1:	66 0d 27 80          	or     ax,0x8027
c00257b5:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c00257ba:	66 89 06             	mov    WORD PTR [esi],ax
c00257bd:	19 c0                	sbb    eax,eax
c00257bf:	83 e0 f0             	and    eax,0xfffffff0
c00257c2:	83 c0 35             	add    eax,0x35
c00257c5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00257c8:	89 e8                	mov    eax,ebp
c00257ca:	c1 e8 10             	shr    eax,0x10
c00257cd:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c00257d0:	89 e8                	mov    eax,ebp
c00257d2:	c1 e8 18             	shr    eax,0x18
c00257d5:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c00257d8:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00257dc:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c00257df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00257e3:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c00257e6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00257ea:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c00257ee:	89 d6                	mov    esi,edx
c00257f0:	31 c0                	xor    eax,eax
c00257f2:	c1 e6 07             	shl    esi,0x7
c00257f5:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00257f9:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c00257ff:	80 e1 88             	and    cl,0x88
c0025802:	74 0a                	je     c002580e <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0025804:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025809:	74 0a                	je     c0025815 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c002580b:	40                   	inc    eax
c002580c:	eb eb                	jmp    c00257f9 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c002580e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025813:	75 0a                	jne    c002581f <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0025815:	83 ec 0c             	sub    esp,0xc
c0025818:	68 19 db 02 c0       	push   0xc002db19
c002581d:	eb 56                	jmp    c0025875 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c002581f:	b8 01 00 00 00       	mov    eax,0x1
c0025824:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025828:	c1 e2 07             	shl    edx,0x7
c002582b:	d3 e0                	shl    eax,cl
c002582d:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0025831:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0025837:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c002583d:	85 c8                	test   eax,ecx
c002583f:	74 20                	je     c0025861 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0025841:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0025847:	0f ba e1 1e          	bt     ecx,0x1e
c002584b:	73 ea                	jae    c0025837 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c002584d:	83 ec 0c             	sub    esp,0xc
c0025850:	68 27 db 02 c0       	push   0xc002db27
c0025855:	e8 13 50 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c002585a:	83 c4 10             	add    esp,0x10
c002585d:	31 c0                	xor    eax,eax
c002585f:	eb 3c                	jmp    c002589d <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025861:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0025867:	0f ba e0 1e          	bt     eax,0x1e
c002586b:	73 17                	jae    c0025884 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c002586d:	83 ec 0c             	sub    esp,0xc
c0025870:	68 27 db 02 c0       	push   0xc002db27
c0025875:	e8 f3 4f ff ff       	call   c001a86d <Krnl::panic(char const*)>
c002587a:	83 c4 10             	add    esp,0x10
c002587d:	b8 01 00 00 00       	mov    eax,0x1
c0025882:	eb 19                	jmp    c002589d <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025884:	31 c0                	xor    eax,eax
c0025886:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002588b:	75 10                	jne    c002589d <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c002588d:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0025893:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0025897:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002589b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002589d:	83 c4 2c             	add    esp,0x2c
c00258a0:	5b                   	pop    ebx
c00258a1:	5e                   	pop    esi
c00258a2:	5f                   	pop    edi
c00258a3:	5d                   	pop    ebp
c00258a4:	c3                   	ret    
c00258a5:	90                   	nop

c00258a6 <SATA::read(unsigned long long, int, void*)>:
c00258a6:	57                   	push   edi
c00258a7:	b8 04 00 00 00       	mov    eax,0x4
c00258ac:	56                   	push   esi
c00258ad:	53                   	push   ebx
c00258ae:	83 ec 10             	sub    esp,0x10
c00258b1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00258b5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00258b9:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00258bc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00258c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00258c4:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00258ca:	77 3b                	ja     c0025907 <SATA::read(unsigned long long, int, void*)+0x61>
c00258cc:	b8 06 00 00 00       	mov    eax,0x6
c00258d1:	85 d2                	test   edx,edx
c00258d3:	74 32                	je     c0025907 <SATA::read(unsigned long long, int, void*)+0x61>
c00258d5:	50                   	push   eax
c00258d6:	50                   	push   eax
c00258d7:	6a 00                	push   0x0
c00258d9:	52                   	push   edx
c00258da:	53                   	push   ebx
c00258db:	57                   	push   edi
c00258dc:	56                   	push   esi
c00258dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00258e1:	e8 5a fd ff ff       	call   c0025640 <SATA::access(unsigned long long, int, void*, bool)>
c00258e6:	83 c4 20             	add    esp,0x20
c00258e9:	85 c0                	test   eax,eax
c00258eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00258ef:	75 11                	jne    c0025902 <SATA::read(unsigned long long, int, void*)+0x5c>
c00258f1:	01 1d c8 33 03 c0    	add    DWORD PTR ds:0xc00333c8,ebx
c00258f7:	e8 8e b0 fe ff       	call   c001098a <VgaText::updateDiskUsage()>
c00258fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025900:	eb 05                	jmp    c0025907 <SATA::read(unsigned long long, int, void*)+0x61>
c0025902:	b8 01 00 00 00       	mov    eax,0x1
c0025907:	83 c4 10             	add    esp,0x10
c002590a:	5b                   	pop    ebx
c002590b:	5e                   	pop    esi
c002590c:	5f                   	pop    edi
c002590d:	c3                   	ret    

c002590e <SATA::write(unsigned long long, int, void*)>:
c002590e:	55                   	push   ebp
c002590f:	b8 04 00 00 00       	mov    eax,0x4
c0025914:	57                   	push   edi
c0025915:	56                   	push   esi
c0025916:	53                   	push   ebx
c0025917:	83 ec 1c             	sub    esp,0x1c
c002591a:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002591e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0025922:	8d 75 ff             	lea    esi,[ebp-0x1]
c0025925:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0025929:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c002592d:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025933:	77 56                	ja     c002598b <SATA::write(unsigned long long, int, void*)+0x7d>
c0025935:	b8 06 00 00 00       	mov    eax,0x6
c002593a:	85 ff                	test   edi,edi
c002593c:	74 4d                	je     c002598b <SATA::write(unsigned long long, int, void*)+0x7d>
c002593e:	89 ee                	mov    esi,ebp
c0025940:	c1 e6 09             	shl    esi,0x9
c0025943:	01 fe                	add    esi,edi
c0025945:	89 c8                	mov    eax,ecx
c0025947:	89 da                	mov    edx,ebx
c0025949:	83 c0 01             	add    eax,0x1
c002594c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025950:	83 d2 00             	adc    edx,0x0
c0025953:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025957:	50                   	push   eax
c0025958:	50                   	push   eax
c0025959:	6a 01                	push   0x1
c002595b:	57                   	push   edi
c002595c:	81 c7 00 02 00 00    	add    edi,0x200
c0025962:	6a 01                	push   0x1
c0025964:	53                   	push   ebx
c0025965:	51                   	push   ecx
c0025966:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002596a:	e8 d1 fc ff ff       	call   c0025640 <SATA::access(unsigned long long, int, void*, bool)>
c002596f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0025973:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025977:	83 c4 20             	add    esp,0x20
c002597a:	39 f7                	cmp    edi,esi
c002597c:	75 c7                	jne    c0025945 <SATA::write(unsigned long long, int, void*)+0x37>
c002597e:	01 2d c4 33 03 c0    	add    DWORD PTR ds:0xc00333c4,ebp
c0025984:	e8 01 b0 fe ff       	call   c001098a <VgaText::updateDiskUsage()>
c0025989:	31 c0                	xor    eax,eax
c002598b:	83 c4 1c             	add    esp,0x1c
c002598e:	5b                   	pop    ebx
c002598f:	5e                   	pop    esi
c0025990:	5f                   	pop    edi
c0025991:	5d                   	pop    ebp
c0025992:	c3                   	ret    
c0025993:	90                   	nop

c0025994 <SATAPI::write(unsigned long long, int, void*)>:
c0025994:	b8 03 00 00 00       	mov    eax,0x3
c0025999:	c3                   	ret    

c002599a <SATAPI::close(int, int, void*)>:
c002599a:	83 ec 0c             	sub    esp,0xc
c002599d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259a1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00259a7:	85 c0                	test   eax,eax
c00259a9:	74 0c                	je     c00259b7 <SATAPI::close(int, int, void*)+0x1d>
c00259ab:	83 ec 0c             	sub    esp,0xc
c00259ae:	8b 10                	mov    edx,DWORD PTR [eax]
c00259b0:	50                   	push   eax
c00259b1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00259b4:	83 c4 10             	add    esp,0x10
c00259b7:	31 c0                	xor    eax,eax
c00259b9:	83 c4 0c             	add    esp,0xc
c00259bc:	c3                   	ret    
c00259bd:	90                   	nop

c00259be <SATAPI::SATAPI()>:
c00259be:	83 ec 0c             	sub    esp,0xc
c00259c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259c5:	83 ec 04             	sub    esp,0x4
c00259c8:	68 00 08 00 00       	push   0x800
c00259cd:	68 70 db 02 c0       	push   0xc002db70
c00259d2:	50                   	push   eax
c00259d3:	e8 00 ed fe ff       	call   c00146d8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00259d8:	83 c4 10             	add    esp,0x10
c00259db:	ba 1c dc 02 c0       	mov    edx,0xc002dc1c
c00259e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259e4:	89 10                	mov    DWORD PTR [eax],edx
c00259e6:	90                   	nop
c00259e7:	83 c4 0c             	add    esp,0xc
c00259ea:	c3                   	ret    
c00259eb:	90                   	nop

c00259ec <SATAPI::diskRemoved()>:
c00259ec:	83 ec 18             	sub    esp,0x18
c00259ef:	68 7c db 02 c0       	push   0xc002db7c
c00259f4:	e8 8c d4 fe ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00259f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00259fd:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025a04:	83 c4 1c             	add    esp,0x1c
c0025a07:	c3                   	ret    

c0025a08 <SATAPI::diskInserted()>:
c0025a08:	53                   	push   ebx
c0025a09:	83 ec 14             	sub    esp,0x14
c0025a0c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025a10:	68 93 db 02 c0       	push   0xc002db93
c0025a15:	e8 6b d4 fe ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0025a1a:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025a21:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025a24:	e8 17 ed fe ff       	call   c0014740 <PhysicalDisk::startCache()>
c0025a29:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025a2d:	83 c4 18             	add    esp,0x18
c0025a30:	5b                   	pop    ebx
c0025a31:	e9 ea 0f ff ff       	jmp    c0016a20 <createPartitionsForDisk(PhysicalDisk*)>

c0025a36 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025a36:	55                   	push   ebp
c0025a37:	57                   	push   edi
c0025a38:	56                   	push   esi
c0025a39:	53                   	push   ebx
c0025a3a:	83 ec 34             	sub    esp,0x34
c0025a3d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0025a41:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025a45:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0025a49:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025a4d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0025a51:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0025a57:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025a5d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025a61:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0025a67:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025a6b:	c1 e0 07             	shl    eax,0x7
c0025a6e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0025a72:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025a76:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025a80:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025a84:	8d 58 02             	lea    ebx,[eax+0x2]
c0025a87:	c1 e3 07             	shl    ebx,0x7
c0025a8a:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0025a8e:	53                   	push   ebx
c0025a8f:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0025a95:	e8 d0 eb ff ff       	call   c002466a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025a9a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025a9e:	83 c4 10             	add    esp,0x10
c0025aa1:	b8 01 00 00 00       	mov    eax,0x1
c0025aa6:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025aab:	0f 84 85 01 00 00    	je     c0025c36 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025ab1:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025ab7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025ab9:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025abf:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025ac5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025ac9:	c1 e1 05             	shl    ecx,0x5
c0025acc:	01 c8                	add    eax,ecx
c0025ace:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025ad0:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025ad6:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025adc:	89 08                	mov    DWORD PTR [eax],ecx
c0025ade:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025ae4:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025aea:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025af0:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025af3:	8d 7b 40             	lea    edi,[ebx+0x40]
c0025af6:	50                   	push   eax
c0025af7:	68 90 00 00 00       	push   0x90
c0025afc:	6a 00                	push   0x0
c0025afe:	53                   	push   ebx
c0025aff:	e8 68 ac fd ff       	call   c000076c <memset>
c0025b04:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0025b08:	b9 0c 00 00 00       	mov    ecx,0xc
c0025b0d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025b0f:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0025b15:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025b19:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025b1f:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025b23:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025b27:	48                   	dec    eax
c0025b28:	25 ff ff 3f 00       	and    eax,0x3fffff
c0025b2d:	89 c1                	mov    ecx,eax
c0025b2f:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025b35:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025b3a:	09 c8                	or     eax,ecx
c0025b3c:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025b42:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025b45:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025b4c:	66 25 00 7f          	and    ax,0x7f00
c0025b50:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0025b54:	66 0d 27 80          	or     ax,0x8027
c0025b58:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0025b5c:	66 89 03             	mov    WORD PTR [ebx],ax
c0025b5f:	89 d0                	mov    eax,edx
c0025b61:	c1 ea 18             	shr    edx,0x18
c0025b64:	c1 e8 10             	shr    eax,0x10
c0025b67:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025b6a:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025b6d:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0025b71:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025b74:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0025b78:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025b7b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0025b7f:	83 c4 10             	add    esp,0x10
c0025b82:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025b86:	31 c0                	xor    eax,eax
c0025b88:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0025b8c:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0025b92:	80 e2 88             	and    dl,0x88
c0025b95:	74 0a                	je     c0025ba1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025b97:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025b9c:	74 0a                	je     c0025ba8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0025b9e:	40                   	inc    eax
c0025b9f:	eb eb                	jmp    c0025b8c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0025ba1:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025ba6:	75 0f                	jne    c0025bb7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0025ba8:	83 ec 0c             	sub    esp,0xc
c0025bab:	68 19 db 02 c0       	push   0xc002db19
c0025bb0:	e8 b8 4c ff ff       	call   c001a86d <Krnl::panic(char const*)>
c0025bb5:	eb 3f                	jmp    c0025bf6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0025bb7:	ba 01 00 00 00       	mov    edx,0x1
c0025bbc:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025bc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025bc4:	d3 e2                	shl    edx,cl
c0025bc6:	c1 e0 07             	shl    eax,0x7
c0025bc9:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0025bcf:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025bd3:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0025bd9:	85 ca                	test   edx,ecx
c0025bdb:	74 23                	je     c0025c00 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0025bdd:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0025be3:	0f ba e1 1e          	bt     ecx,0x1e
c0025be7:	73 ea                	jae    c0025bd3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0025be9:	83 ec 0c             	sub    esp,0xc
c0025bec:	68 ab db 02 c0       	push   0xc002dbab
c0025bf1:	e8 8f d2 fe ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0025bf6:	83 c4 10             	add    esp,0x10
c0025bf9:	b8 01 00 00 00       	mov    eax,0x1
c0025bfe:	eb 36                	jmp    c0025c36 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025c00:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0025c06:	0f ba e0 1e          	bt     eax,0x1e
c0025c0a:	73 0a                	jae    c0025c16 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0025c0c:	83 ec 0c             	sub    esp,0xc
c0025c0f:	68 be db 02 c0       	push   0xc002dbbe
c0025c14:	eb db                	jmp    c0025bf1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0025c16:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0025c1b:	74 17                	je     c0025c34 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025c1d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0025c22:	74 10                	je     c0025c34 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025c24:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0025c2a:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0025c2e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0025c32:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025c34:	31 c0                	xor    eax,eax
c0025c36:	83 c4 2c             	add    esp,0x2c
c0025c39:	5b                   	pop    ebx
c0025c3a:	5e                   	pop    esi
c0025c3b:	5f                   	pop    edi
c0025c3c:	5d                   	pop    ebp
c0025c3d:	c3                   	ret    

c0025c3e <SATAPI::eject()>:
c0025c3e:	57                   	push   edi
c0025c3f:	b9 03 00 00 00       	mov    ecx,0x3
c0025c44:	53                   	push   ebx
c0025c45:	83 ec 14             	sub    esp,0x14
c0025c48:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025c4c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025c50:	fc                   	cld    
c0025c51:	31 c0                	xor    eax,eax
c0025c53:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025c55:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025c5a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025c5f:	50                   	push   eax
c0025c60:	6a 00                	push   0x0
c0025c62:	6a 00                	push   0x0
c0025c64:	6a 00                	push   0x0
c0025c66:	6a 00                	push   0x0
c0025c68:	6a 02                	push   0x2
c0025c6a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025c6e:	50                   	push   eax
c0025c6f:	53                   	push   ebx
c0025c70:	e8 c1 fd ff ff       	call   c0025a36 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025c75:	83 c4 14             	add    esp,0x14
c0025c78:	53                   	push   ebx
c0025c79:	e8 6e fd ff ff       	call   c00259ec <SATAPI::diskRemoved()>
c0025c7e:	83 c4 24             	add    esp,0x24
c0025c81:	31 c0                	xor    eax,eax
c0025c83:	5b                   	pop    ebx
c0025c84:	5f                   	pop    edi
c0025c85:	c3                   	ret    

c0025c86 <SATAPI::detectMedia()>:
c0025c86:	56                   	push   esi
c0025c87:	53                   	push   ebx
c0025c88:	83 ec 28             	sub    esp,0x28
c0025c8b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025c8f:	6a 0c                	push   0xc
c0025c91:	6a 00                	push   0x0
c0025c93:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025c97:	56                   	push   esi
c0025c98:	e8 cf aa fd ff       	call   c000076c <memset>
c0025c9d:	83 c4 0c             	add    esp,0xc
c0025ca0:	6a 00                	push   0x0
c0025ca2:	6a 00                	push   0x0
c0025ca4:	6a 00                	push   0x0
c0025ca6:	6a 00                	push   0x0
c0025ca8:	6a 00                	push   0x0
c0025caa:	56                   	push   esi
c0025cab:	53                   	push   ebx
c0025cac:	e8 85 fd ff ff       	call   c0025a36 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025cb1:	83 c4 1c             	add    esp,0x1c
c0025cb4:	6a 0c                	push   0xc
c0025cb6:	6a 00                	push   0x0
c0025cb8:	56                   	push   esi
c0025cb9:	e8 ae aa fd ff       	call   c000076c <memset>
c0025cbe:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025cc3:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025cc8:	83 c4 0c             	add    esp,0xc
c0025ccb:	6a 01                	push   0x1
c0025ccd:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025cd1:	50                   	push   eax
c0025cd2:	6a 00                	push   0x0
c0025cd4:	6a 00                	push   0x0
c0025cd6:	6a 12                	push   0x12
c0025cd8:	56                   	push   esi
c0025cd9:	53                   	push   ebx
c0025cda:	e8 57 fd ff ff       	call   c0025a36 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025cdf:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025ce3:	83 c4 20             	add    esp,0x20
c0025ce6:	83 e0 7f             	and    eax,0x7f
c0025ce9:	3c 70                	cmp    al,0x70
c0025ceb:	74 15                	je     c0025d02 <SATAPI::detectMedia()+0x7c>
c0025ced:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025cf4:	75 0c                	jne    c0025d02 <SATAPI::detectMedia()+0x7c>
c0025cf6:	83 ec 0c             	sub    esp,0xc
c0025cf9:	53                   	push   ebx
c0025cfa:	e8 09 fd ff ff       	call   c0025a08 <SATAPI::diskInserted()>
c0025cff:	83 c4 10             	add    esp,0x10
c0025d02:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025d06:	83 e0 0f             	and    eax,0xf
c0025d09:	3c 02                	cmp    al,0x2
c0025d0b:	75 1b                	jne    c0025d28 <SATAPI::detectMedia()+0xa2>
c0025d0d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025d12:	75 2d                	jne    c0025d41 <SATAPI::detectMedia()+0xbb>
c0025d14:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025d1b:	74 24                	je     c0025d41 <SATAPI::detectMedia()+0xbb>
c0025d1d:	83 ec 0c             	sub    esp,0xc
c0025d20:	53                   	push   ebx
c0025d21:	e8 c6 fc ff ff       	call   c00259ec <SATAPI::diskRemoved()>
c0025d26:	eb 16                	jmp    c0025d3e <SATAPI::detectMedia()+0xb8>
c0025d28:	84 c0                	test   al,al
c0025d2a:	75 15                	jne    c0025d41 <SATAPI::detectMedia()+0xbb>
c0025d2c:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025d33:	75 0c                	jne    c0025d41 <SATAPI::detectMedia()+0xbb>
c0025d35:	83 ec 0c             	sub    esp,0xc
c0025d38:	53                   	push   ebx
c0025d39:	e8 ca fc ff ff       	call   c0025a08 <SATAPI::diskInserted()>
c0025d3e:	83 c4 10             	add    esp,0x10
c0025d41:	83 c4 24             	add    esp,0x24
c0025d44:	5b                   	pop    ebx
c0025d45:	5e                   	pop    esi
c0025d46:	c3                   	ret    
c0025d47:	90                   	nop

c0025d48 <SATAPI::open(int, int, void*)>:
c0025d48:	56                   	push   esi
c0025d49:	53                   	push   ebx
c0025d4a:	50                   	push   eax
c0025d4b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025d4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025d53:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025d5d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025d63:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025d6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d71:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025d7b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025d81:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025d88:	e8 b9 a1 fe ff       	call   c000ff46 <Phys::allocatePage()>
c0025d8d:	89 c6                	mov    esi,eax
c0025d8f:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025d95:	81 c6 00 10 00 00    	add    esi,0x1000
c0025d9b:	e8 a6 a1 fe ff       	call   c000ff46 <Phys::allocatePage()>
c0025da0:	39 c6                	cmp    esi,eax
c0025da2:	74 10                	je     c0025db4 <SATAPI::open(int, int, void*)+0x6c>
c0025da4:	83 ec 0c             	sub    esp,0xc
c0025da7:	68 d3 db 02 c0       	push   0xc002dbd3
c0025dac:	e8 bc 4a ff ff       	call   c001a86d <Krnl::panic(char const*)>
c0025db1:	83 c4 10             	add    esp,0x10
c0025db4:	83 ec 0c             	sub    esp,0xc
c0025db7:	6a 02                	push   0x2
c0025db9:	e8 c1 bc fe ff       	call   c0011a7f <Virt::allocateKernelVirtualPages(int)>
c0025dbe:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025dc4:	6a 03                	push   0x3
c0025dc6:	50                   	push   eax
c0025dc7:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025dcd:	ff 35 f0 f1 02 c0    	push   DWORD PTR ds:0xc002f1f0
c0025dd3:	e8 de c4 fe ff       	call   c00122b6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025dd8:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025ddf:	83 c4 14             	add    esp,0x14
c0025de2:	53                   	push   ebx
c0025de3:	e8 9e fe ff ff       	call   c0025c86 <SATAPI::detectMedia()>
c0025de8:	83 c4 14             	add    esp,0x14
c0025deb:	31 c0                	xor    eax,eax
c0025ded:	5b                   	pop    ebx
c0025dee:	5e                   	pop    esi
c0025def:	c3                   	ret    

c0025df0 <SATAPI::read(unsigned long long, int, void*)>:
c0025df0:	55                   	push   ebp
c0025df1:	57                   	push   edi
c0025df2:	56                   	push   esi
c0025df3:	53                   	push   ebx
c0025df4:	83 ec 1c             	sub    esp,0x1c
c0025df7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025dfb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025dff:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025e03:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025e0a:	74 19                	je     c0025e25 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025e0c:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025e11:	7e 2e                	jle    c0025e41 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025e13:	83 ec 0c             	sub    esp,0xc
c0025e16:	68 e9 db 02 c0       	push   0xc002dbe9
c0025e1b:	e8 4d 4a ff ff       	call   c001a86d <Krnl::panic(char const*)>
c0025e20:	83 c4 10             	add    esp,0x10
c0025e23:	eb 1c                	jmp    c0025e41 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025e25:	83 ec 0c             	sub    esp,0xc
c0025e28:	55                   	push   ebp
c0025e29:	e8 58 fe ff ff       	call   c0025c86 <SATAPI::detectMedia()>
c0025e2e:	83 c4 10             	add    esp,0x10
c0025e31:	b8 02 00 00 00       	mov    eax,0x2
c0025e36:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025e3d:	75 cd                	jne    c0025e0c <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025e3f:	eb 49                	jmp    c0025e8a <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025e41:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025e45:	b9 03 00 00 00       	mov    ecx,0x3
c0025e4a:	fc                   	cld    
c0025e4b:	31 c0                	xor    eax,eax
c0025e4d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025e4f:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025e54:	89 d8                	mov    eax,ebx
c0025e56:	86 e0                	xchg   al,ah
c0025e58:	c1 c0 10             	rol    eax,0x10
c0025e5b:	86 e0                	xchg   al,ah
c0025e5d:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025e61:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025e65:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025e69:	50                   	push   eax
c0025e6a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025e6e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025e72:	56                   	push   esi
c0025e73:	53                   	push   ebx
c0025e74:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025e78:	c1 e0 0b             	shl    eax,0xb
c0025e7b:	50                   	push   eax
c0025e7c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025e80:	50                   	push   eax
c0025e81:	55                   	push   ebp
c0025e82:	e8 af fb ff ff       	call   c0025a36 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025e87:	83 c4 20             	add    esp,0x20
c0025e8a:	83 c4 1c             	add    esp,0x1c
c0025e8d:	5b                   	pop    ebx
c0025e8e:	5e                   	pop    esi
c0025e8f:	5f                   	pop    edi
c0025e90:	5d                   	pop    ebp
c0025e91:	c3                   	ret    

c0025e92 <AVX::open(int, int, void*)>:
c0025e92:	83 ec 0c             	sub    esp,0xc
c0025e95:	e8 3e 11 00 00       	call   c0026fd8 <avxInit>
c0025e9a:	b8 00 00 00 00       	mov    eax,0x0
c0025e9f:	83 c4 0c             	add    esp,0xc
c0025ea2:	c3                   	ret    
c0025ea3:	90                   	nop

c0025ea4 <AVX::close(int, int, void*)>:
c0025ea4:	83 ec 0c             	sub    esp,0xc
c0025ea7:	e8 2d 11 00 00       	call   c0026fd9 <avxClose>
c0025eac:	b8 00 00 00 00       	mov    eax,0x0
c0025eb1:	83 c4 0c             	add    esp,0xc
c0025eb4:	c3                   	ret    
c0025eb5:	90                   	nop

c0025eb6 <AVX::available()>:
c0025eb6:	83 ec 0c             	sub    esp,0xc
c0025eb9:	e8 12 11 00 00       	call   c0026fd0 <avxDetect>
c0025ebe:	85 c0                	test   eax,eax
c0025ec0:	0f 95 c0             	setne  al
c0025ec3:	83 c4 0c             	add    esp,0xc
c0025ec6:	c3                   	ret    
c0025ec7:	90                   	nop

c0025ec8 <AVX::save(void*)>:
c0025ec8:	83 ec 0c             	sub    esp,0xc
c0025ecb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025ecf:	83 ec 0c             	sub    esp,0xc
c0025ed2:	50                   	push   eax
c0025ed3:	e8 fe 10 00 00       	call   c0026fd6 <avxSave>
c0025ed8:	83 c4 10             	add    esp,0x10
c0025edb:	90                   	nop
c0025edc:	83 c4 0c             	add    esp,0xc
c0025edf:	c3                   	ret    

c0025ee0 <AVX::load(void*)>:
c0025ee0:	83 ec 0c             	sub    esp,0xc
c0025ee3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025ee7:	83 ec 0c             	sub    esp,0xc
c0025eea:	50                   	push   eax
c0025eeb:	e8 e7 10 00 00       	call   c0026fd7 <avxLoad>
c0025ef0:	83 c4 10             	add    esp,0x10
c0025ef3:	90                   	nop
c0025ef4:	83 c4 0c             	add    esp,0xc
c0025ef7:	c3                   	ret    

c0025ef8 <AVX::AVX()>:
c0025ef8:	83 ec 0c             	sub    esp,0xc
c0025efb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eff:	83 ec 08             	sub    esp,0x8
c0025f02:	68 4c dc 02 c0       	push   0xc002dc4c
c0025f07:	50                   	push   eax
c0025f08:	e8 a9 e8 fe ff       	call   c00147b6 <FPU::FPU(char const*)>
c0025f0d:	83 c4 10             	add    esp,0x10
c0025f10:	ba 5c dc 02 c0       	mov    edx,0xc002dc5c
c0025f15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f19:	89 10                	mov    DWORD PTR [eax],edx
c0025f1b:	90                   	nop
c0025f1c:	83 c4 0c             	add    esp,0xc
c0025f1f:	c3                   	ret    

c0025f20 <MMX::available()>:
c0025f20:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c0025f25:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025f2b:	83 e0 20             	and    eax,0x20
c0025f2e:	84 c0                	test   al,al
c0025f30:	0f 95 c0             	setne  al
c0025f33:	c3                   	ret    

c0025f34 <MMX::open(int, int, void*)>:
c0025f34:	83 ec 0c             	sub    esp,0xc
c0025f37:	e8 26 11 00 00       	call   c0027062 <x87Init>
c0025f3c:	b8 00 00 00 00       	mov    eax,0x0
c0025f41:	83 c4 0c             	add    esp,0xc
c0025f44:	c3                   	ret    
c0025f45:	90                   	nop

c0025f46 <MMX::close(int, int, void*)>:
c0025f46:	83 ec 0c             	sub    esp,0xc
c0025f49:	e8 2e 11 00 00       	call   c002707c <x87Close>
c0025f4e:	b8 00 00 00 00       	mov    eax,0x0
c0025f53:	83 c4 0c             	add    esp,0xc
c0025f56:	c3                   	ret    
c0025f57:	90                   	nop

c0025f58 <MMX::save(void*)>:
c0025f58:	83 ec 0c             	sub    esp,0xc
c0025f5b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f5f:	83 ec 0c             	sub    esp,0xc
c0025f62:	50                   	push   eax
c0025f63:	e8 e9 10 00 00       	call   c0027051 <x87Save>
c0025f68:	83 c4 10             	add    esp,0x10
c0025f6b:	90                   	nop
c0025f6c:	83 c4 0c             	add    esp,0xc
c0025f6f:	c3                   	ret    

c0025f70 <MMX::load(void*)>:
c0025f70:	83 ec 0c             	sub    esp,0xc
c0025f73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f77:	83 ec 0c             	sub    esp,0xc
c0025f7a:	50                   	push   eax
c0025f7b:	e8 da 10 00 00       	call   c002705a <x87Load>
c0025f80:	83 c4 10             	add    esp,0x10
c0025f83:	90                   	nop
c0025f84:	83 c4 0c             	add    esp,0xc
c0025f87:	c3                   	ret    

c0025f88 <MMX::MMX()>:
c0025f88:	83 ec 0c             	sub    esp,0xc
c0025f8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f8f:	83 ec 08             	sub    esp,0x8
c0025f92:	68 8c dc 02 c0       	push   0xc002dc8c
c0025f97:	50                   	push   eax
c0025f98:	e8 19 e8 fe ff       	call   c00147b6 <FPU::FPU(char const*)>
c0025f9d:	83 c4 10             	add    esp,0x10
c0025fa0:	ba 9c dc 02 c0       	mov    edx,0xc002dc9c
c0025fa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fa9:	89 10                	mov    DWORD PTR [eax],edx
c0025fab:	90                   	nop
c0025fac:	83 c4 0c             	add    esp,0xc
c0025faf:	c3                   	ret    

c0025fb0 <SSE::open(int, int, void*)>:
c0025fb0:	83 ec 0c             	sub    esp,0xc
c0025fb3:	e8 5c 10 00 00       	call   c0027014 <sseInit>
c0025fb8:	b8 00 00 00 00       	mov    eax,0x0
c0025fbd:	83 c4 0c             	add    esp,0xc
c0025fc0:	c3                   	ret    
c0025fc1:	90                   	nop

c0025fc2 <SSE::close(int, int, void*)>:
c0025fc2:	83 ec 0c             	sub    esp,0xc
c0025fc5:	e8 5a 10 00 00       	call   c0027024 <sseClose>
c0025fca:	b8 00 00 00 00       	mov    eax,0x0
c0025fcf:	83 c4 0c             	add    esp,0xc
c0025fd2:	c3                   	ret    
c0025fd3:	90                   	nop

c0025fd4 <SSE::available()>:
c0025fd4:	83 ec 1c             	sub    esp,0x1c
c0025fd7:	e8 14 10 00 00       	call   c0026ff0 <absolutelyNoChanceInHell>
c0025fdc:	85 c0                	test   eax,eax
c0025fde:	0f 95 c0             	setne  al
c0025fe1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025fe5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025fe9:	83 c4 1c             	add    esp,0x1c
c0025fec:	c3                   	ret    
c0025fed:	90                   	nop

c0025fee <SSE::save(void*)>:
c0025fee:	83 ec 0c             	sub    esp,0xc
c0025ff1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025ff5:	83 ec 0c             	sub    esp,0xc
c0025ff8:	50                   	push   eax
c0025ff9:	e8 0a 10 00 00       	call   c0027008 <sseSave>
c0025ffe:	83 c4 10             	add    esp,0x10
c0026001:	90                   	nop
c0026002:	83 c4 0c             	add    esp,0xc
c0026005:	c3                   	ret    

c0026006 <SSE::load(void*)>:
c0026006:	83 ec 0c             	sub    esp,0xc
c0026009:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002600d:	83 ec 0c             	sub    esp,0xc
c0026010:	50                   	push   eax
c0026011:	e8 f8 0f 00 00       	call   c002700e <sseLoad>
c0026016:	83 c4 10             	add    esp,0x10
c0026019:	90                   	nop
c002601a:	83 c4 0c             	add    esp,0xc
c002601d:	c3                   	ret    

c002601e <SSE::SSE()>:
c002601e:	83 ec 0c             	sub    esp,0xc
c0026021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026025:	83 ec 08             	sub    esp,0x8
c0026028:	68 cc dc 02 c0       	push   0xc002dccc
c002602d:	50                   	push   eax
c002602e:	e8 83 e7 fe ff       	call   c00147b6 <FPU::FPU(char const*)>
c0026033:	83 c4 10             	add    esp,0x10
c0026036:	ba dc dc 02 c0       	mov    edx,0xc002dcdc
c002603b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002603f:	89 10                	mov    DWORD PTR [eax],edx
c0026041:	90                   	nop
c0026042:	83 c4 0c             	add    esp,0xc
c0026045:	c3                   	ret    

c0026046 <x87::open(int, int, void*)>:
c0026046:	83 ec 0c             	sub    esp,0xc
c0026049:	e8 14 10 00 00       	call   c0027062 <x87Init>
c002604e:	b8 00 00 00 00       	mov    eax,0x0
c0026053:	83 c4 0c             	add    esp,0xc
c0026056:	c3                   	ret    
c0026057:	90                   	nop

c0026058 <x87::close(int, int, void*)>:
c0026058:	83 ec 0c             	sub    esp,0xc
c002605b:	e8 1c 10 00 00       	call   c002707c <x87Close>
c0026060:	b8 00 00 00 00       	mov    eax,0x0
c0026065:	83 c4 0c             	add    esp,0xc
c0026068:	c3                   	ret    
c0026069:	90                   	nop

c002606a <x87::available()>:
c002606a:	83 ec 0c             	sub    esp,0xc
c002606d:	e8 c4 0f 00 00       	call   c0027036 <x87Detect>
c0026072:	85 c0                	test   eax,eax
c0026074:	0f 95 c0             	setne  al
c0026077:	83 c4 0c             	add    esp,0xc
c002607a:	c3                   	ret    
c002607b:	90                   	nop

c002607c <x87::save(void*)>:
c002607c:	83 ec 0c             	sub    esp,0xc
c002607f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026083:	83 ec 0c             	sub    esp,0xc
c0026086:	50                   	push   eax
c0026087:	e8 c5 0f 00 00       	call   c0027051 <x87Save>
c002608c:	83 c4 10             	add    esp,0x10
c002608f:	90                   	nop
c0026090:	83 c4 0c             	add    esp,0xc
c0026093:	c3                   	ret    

c0026094 <x87::load(void*)>:
c0026094:	83 ec 0c             	sub    esp,0xc
c0026097:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002609b:	83 ec 0c             	sub    esp,0xc
c002609e:	50                   	push   eax
c002609f:	e8 b6 0f 00 00       	call   c002705a <x87Load>
c00260a4:	83 c4 10             	add    esp,0x10
c00260a7:	90                   	nop
c00260a8:	83 c4 0c             	add    esp,0xc
c00260ab:	c3                   	ret    

c00260ac <x87::x87()>:
c00260ac:	83 ec 0c             	sub    esp,0xc
c00260af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260b3:	83 ec 08             	sub    esp,0x8
c00260b6:	68 0c dd 02 c0       	push   0xc002dd0c
c00260bb:	50                   	push   eax
c00260bc:	e8 f5 e6 fe ff       	call   c00147b6 <FPU::FPU(char const*)>
c00260c1:	83 c4 10             	add    esp,0x10
c00260c4:	ba 1c dd 02 c0       	mov    edx,0xc002dd1c
c00260c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260cd:	89 10                	mov    DWORD PTR [eax],edx
c00260cf:	90                   	nop
c00260d0:	83 c4 0c             	add    esp,0xc
c00260d3:	c3                   	ret    

c00260d4 <APIC::disable()>:
c00260d4:	90                   	nop
c00260d5:	c3                   	ret    

c00260d6 <APIC::close(int, int, void*)>:
c00260d6:	55                   	push   ebp
c00260d7:	89 e5                	mov    ebp,esp
c00260d9:	83 ec 08             	sub    esp,0x8
c00260dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00260df:	8b 00                	mov    eax,DWORD PTR [eax]
c00260e1:	83 c0 3c             	add    eax,0x3c
c00260e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00260e6:	83 ec 0c             	sub    esp,0xc
c00260e9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260ec:	ff d0                	call   eax
c00260ee:	83 c4 10             	add    esp,0x10
c00260f1:	b8 00 00 00 00       	mov    eax,0x0
c00260f6:	c9                   	leave  
c00260f7:	c3                   	ret    

c00260f8 <IOAPIC::close(int, int, void*)>:
c00260f8:	b8 00 00 00 00       	mov    eax,0x0
c00260fd:	c3                   	ret    

c00260fe <APIC::io_wait()>:
c00260fe:	eb 00                	jmp    c0026100 <APIC::io_wait()+0x2>
c0026100:	eb 00                	jmp    c0026102 <APIC::io_wait()+0x4>
c0026102:	90                   	nop
c0026103:	c3                   	ret    

c0026104 <APIC::getBase()>:
c0026104:	55                   	push   ebp
c0026105:	89 e5                	mov    ebp,esp
c0026107:	83 ec 18             	sub    esp,0x18
c002610a:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c002610f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0026115:	83 e0 08             	and    eax,0x8
c0026118:	84 c0                	test   al,al
c002611a:	75 07                	jne    c0026123 <APIC::getBase()+0x1f>
c002611c:	b8 00 00 00 00       	mov    eax,0x0
c0026121:	eb 21                	jmp    c0026144 <APIC::getBase()+0x40>
c0026123:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c0026128:	83 ec 08             	sub    esp,0x8
c002612b:	6a 1b                	push   0x1b
c002612d:	50                   	push   eax
c002612e:	e8 4d 8d fe ff       	call   c000ee80 <Computer::rdmsr(unsigned int)>
c0026133:	83 c4 10             	add    esp,0x10
c0026136:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026139:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002613c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002613f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0026144:	c9                   	leave  
c0026145:	c3                   	ret    

c0026146 <APIC::eoi(unsigned char)>:
c0026146:	55                   	push   ebp
c0026147:	89 e5                	mov    ebp,esp
c0026149:	83 ec 28             	sub    esp,0x28
c002614c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002614f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0026152:	83 ec 0c             	sub    esp,0xc
c0026155:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026158:	e8 a7 ff ff ff       	call   c0026104 <APIC::getBase()>
c002615d:	83 c4 10             	add    esp,0x10
c0026160:	05 b0 00 00 00       	add    eax,0xb0
c0026165:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0026168:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002616b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0026171:	90                   	nop
c0026172:	c9                   	leave  
c0026173:	c3                   	ret    

c0026174 <APIC::open(int, int, void*)>:
c0026174:	55                   	push   ebp
c0026175:	89 e5                	mov    ebp,esp
c0026177:	57                   	push   edi
c0026178:	56                   	push   esi
c0026179:	53                   	push   ebx
c002617a:	83 ec 2c             	sub    esp,0x2c
c002617d:	83 ec 0c             	sub    esp,0xc
c0026180:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026183:	e8 7c ff ff ff       	call   c0026104 <APIC::getBase()>
c0026188:	83 c4 10             	add    esp,0x10
c002618b:	89 c2                	mov    edx,eax
c002618d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026190:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026196:	0f b6 f8             	movzx  edi,al
c0026199:	89 d0                	mov    eax,edx
c002619b:	ba 00 00 00 00       	mov    edx,0x0
c00261a0:	89 c1                	mov    ecx,eax
c00261a2:	80 e5 ff             	and    ch,0xff
c00261a5:	89 cb                	mov    ebx,ecx
c00261a7:	0f b6 f2             	movzx  esi,dl
c00261aa:	89 d8                	mov    eax,ebx
c00261ac:	89 f2                	mov    edx,esi
c00261ae:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00261b1:	8d 5f 08             	lea    ebx,[edi+0x8]
c00261b4:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00261b8:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00261bc:	83 e0 00             	and    eax,0x0
c00261bf:	09 d0                	or     eax,edx
c00261c1:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00261c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00261c8:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00261ce:	8d 50 01             	lea    edx,[eax+0x1]
c00261d1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00261d4:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00261da:	0f b6 d0             	movzx  edx,al
c00261dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00261e0:	83 c2 08             	add    edx,0x8
c00261e3:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00261e7:	0f b6 c9             	movzx  ecx,cl
c00261ea:	81 c9 00 00 01 00    	or     ecx,0x10000
c00261f0:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00261f4:	83 ec 0c             	sub    esp,0xc
c00261f7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261fa:	e8 05 ff ff ff       	call   c0026104 <APIC::getBase()>
c00261ff:	83 c4 10             	add    esp,0x10
c0026202:	05 f0 00 00 00       	add    eax,0xf0
c0026207:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002620a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002620d:	8b 00                	mov    eax,DWORD PTR [eax]
c002620f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026212:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0026219:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0026220:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026223:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026226:	89 10                	mov    DWORD PTR [eax],edx
c0026228:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c002622f:	a1 50 19 03 c0       	mov    eax,ds:0xc0031950
c0026234:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0026237:	7d 7c                	jge    c00262b5 <APIC::open(int, int, void*)+0x141>
c0026239:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002623c:	8b 04 85 60 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce6a0]
c0026243:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0026246:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026249:	8b 04 85 60 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce6a0]
c0026250:	c1 e8 08             	shr    eax,0x8
c0026253:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0026257:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002625a:	8b 04 85 60 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce6a0]
c0026261:	c1 e8 18             	shr    eax,0x18
c0026264:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0026267:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002626b:	75 40                	jne    c00262ad <APIC::open(int, int, void*)+0x139>
c002626d:	83 ec 0c             	sub    esp,0xc
c0026270:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026273:	e8 8c fe ff ff       	call   c0026104 <APIC::getBase()>
c0026278:	83 c4 10             	add    esp,0x10
c002627b:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c002627f:	75 07                	jne    c0026288 <APIC::open(int, int, void*)+0x114>
c0026281:	ba 60 03 00 00       	mov    edx,0x360
c0026286:	eb 05                	jmp    c002628d <APIC::open(int, int, void*)+0x119>
c0026288:	ba 50 03 00 00       	mov    edx,0x350
c002628d:	01 d0                	add    eax,edx
c002628f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026292:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026295:	8b 00                	mov    eax,DWORD PTR [eax]
c0026297:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002629a:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00262a1:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00262a5:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00262a8:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00262ab:	89 10                	mov    DWORD PTR [eax],edx
c00262ad:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00262b0:	e9 7a ff ff ff       	jmp    c002622f <APIC::open(int, int, void*)+0xbb>
c00262b5:	b8 00 00 00 00       	mov    eax,0x0
c00262ba:	8d 65 f4             	lea    esp,[ebp-0xc]
c00262bd:	5b                   	pop    ebx
c00262be:	5e                   	pop    esi
c00262bf:	5f                   	pop    edi
c00262c0:	5d                   	pop    ebp
c00262c1:	c3                   	ret    

c00262c2 <IOAPIC::IOAPIC()>:
c00262c2:	83 ec 0c             	sub    esp,0xc
c00262c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262c9:	83 ec 08             	sub    esp,0x8
c00262cc:	68 4c dd 02 c0       	push   0xc002dd4c
c00262d1:	50                   	push   eax
c00262d2:	e8 bf e1 fe ff       	call   c0014496 <Device::Device(char const*)>
c00262d7:	83 c4 10             	add    esp,0x10
c00262da:	ba 74 de 02 c0       	mov    edx,0xc002de74
c00262df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262e3:	89 10                	mov    DWORD PTR [eax],edx
c00262e5:	90                   	nop
c00262e6:	83 c4 0c             	add    esp,0xc
c00262e9:	c3                   	ret    

c00262ea <APIC::APIC()>:
c00262ea:	53                   	push   ebx
c00262eb:	83 ec 18             	sub    esp,0x18
c00262ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00262f2:	83 ec 08             	sub    esp,0x8
c00262f5:	68 54 dd 02 c0       	push   0xc002dd54
c00262fa:	50                   	push   eax
c00262fb:	e8 10 e9 fe ff       	call   c0014c10 <InterruptController::InterruptController(char const*)>
c0026300:	83 c4 10             	add    esp,0x10
c0026303:	ba 2c de 02 c0       	mov    edx,0xc002de2c
c0026308:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002630c:	89 10                	mov    DWORD PTR [eax],edx
c002630e:	a0 20 34 03 c0       	mov    al,ds:0xc0033420
c0026313:	83 f0 01             	xor    eax,0x1
c0026316:	84 c0                	test   al,al
c0026318:	0f 84 a1 00 00 00    	je     c00263bf <APIC::APIC()+0xd5>
c002631e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0026323:	a0 00 1a 03 c0       	mov    al,ds:0xc0031a00
c0026328:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c002632c:	0f 83 86 00 00 00    	jae    c00263b8 <APIC::APIC()+0xce>
c0026332:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c002633a:	83 ec 0c             	sub    esp,0xc
c002633d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026341:	e8 94 95 fe ff       	call   c000f8da <malloc>
c0026346:	83 c4 10             	add    esp,0x10
c0026349:	89 c3                	mov    ebx,eax
c002634b:	83 ec 0c             	sub    esp,0xc
c002634e:	53                   	push   ebx
c002634f:	e8 6e ff ff ff       	call   c00262c2 <IOAPIC::IOAPIC()>
c0026354:	83 c4 10             	add    esp,0x10
c0026357:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c002635b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0026360:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0026364:	89 14 85 00 34 03 c0 	mov    DWORD PTR [eax*4-0x3ffccc00],edx
c002636b:	a1 e0 33 03 c0       	mov    eax,ds:0xc00333e0
c0026370:	40                   	inc    eax
c0026371:	a3 e0 33 03 c0       	mov    ds:0xc00333e0,eax
c0026376:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c002637b:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0026381:	83 ec 08             	sub    esp,0x8
c0026384:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026388:	50                   	push   eax
c0026389:	e8 18 df fe ff       	call   c00142a6 <Device::addChild(Device*)>
c002638e:	83 c4 10             	add    esp,0x10
c0026391:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026395:	8b 00                	mov    eax,DWORD PTR [eax]
c0026397:	83 c0 08             	add    eax,0x8
c002639a:	8b 00                	mov    eax,DWORD PTR [eax]
c002639c:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00263a1:	6a 00                	push   0x0
c00263a3:	6a 00                	push   0x0
c00263a5:	52                   	push   edx
c00263a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00263aa:	ff d0                	call   eax
c00263ac:	83 c4 10             	add    esp,0x10
c00263af:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00263b3:	e9 6b ff ff ff       	jmp    c0026323 <APIC::APIC()+0x39>
c00263b8:	c6 05 20 34 03 c0 01 	mov    BYTE PTR ds:0xc0033420,0x1
c00263bf:	90                   	nop
c00263c0:	83 c4 18             	add    esp,0x18
c00263c3:	5b                   	pop    ebx
c00263c4:	c3                   	ret    
c00263c5:	90                   	nop

c00263c6 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00263c6:	55                   	push   ebp
c00263c7:	89 e5                	mov    ebp,esp
c00263c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263cc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00263d2:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00263d5:	72 1d                	jb     c00263f4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00263d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263da:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00263e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263e3:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00263e9:	01 d0                	add    eax,edx
c00263eb:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00263ee:	73 04                	jae    c00263f4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00263f0:	b0 01                	mov    al,0x1
c00263f2:	eb 02                	jmp    c00263f6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00263f4:	b0 00                	mov    al,0x0
c00263f6:	5d                   	pop    ebp
c00263f7:	c3                   	ret    

c00263f8 <IOAPIC::read(int)>:
c00263f8:	55                   	push   ebp
c00263f9:	89 e5                	mov    ebp,esp
c00263fb:	83 ec 10             	sub    esp,0x10
c00263fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026401:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026407:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002640a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002640d:	0f b6 d0             	movzx  edx,al
c0026410:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026413:	89 10                	mov    DWORD PTR [eax],edx
c0026415:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026418:	83 c0 10             	add    eax,0x10
c002641b:	8b 00                	mov    eax,DWORD PTR [eax]
c002641d:	c9                   	leave  
c002641e:	c3                   	ret    
c002641f:	90                   	nop

c0026420 <IOAPIC::open(int, int, void*)>:
c0026420:	55                   	push   ebp
c0026421:	89 e5                	mov    ebp,esp
c0026423:	57                   	push   edi
c0026424:	56                   	push   esi
c0026425:	53                   	push   ebx
c0026426:	83 ec 0c             	sub    esp,0xc
c0026429:	83 ec 0c             	sub    esp,0xc
c002642c:	68 7f dd 02 c0       	push   0xc002dd7f
c0026431:	e8 4f ca fe ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c0026436:	83 c4 10             	add    esp,0x10
c0026439:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002643c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002643f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026445:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026448:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002644e:	8b 14 85 40 1a 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce5c0]
c0026455:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026458:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002645e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026461:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0026467:	8b 14 85 c0 1a 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce540]
c002646e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026471:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0026477:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002647a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0026480:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026483:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026489:	0f b6 f8             	movzx  edi,al
c002648c:	89 d0                	mov    eax,edx
c002648e:	ba 00 00 00 00       	mov    edx,0x0
c0026493:	89 c1                	mov    ecx,eax
c0026495:	80 e5 ff             	and    ch,0xff
c0026498:	89 cb                	mov    ebx,ecx
c002649a:	0f b6 f2             	movzx  esi,dl
c002649d:	89 d8                	mov    eax,ebx
c002649f:	89 f2                	mov    edx,esi
c00264a1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00264a4:	8d 5f 08             	lea    ebx,[edi+0x8]
c00264a7:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00264ab:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00264af:	83 e0 00             	and    eax,0x0
c00264b2:	09 d0                	or     eax,edx
c00264b4:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00264b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00264bb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00264c1:	8d 50 01             	lea    edx,[eax+0x1]
c00264c4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00264c7:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00264cd:	0f b6 d0             	movzx  edx,al
c00264d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00264d3:	83 c2 08             	add    edx,0x8
c00264d6:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00264da:	0f b6 c9             	movzx  ecx,cl
c00264dd:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00264e3:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00264e7:	83 ec 08             	sub    esp,0x8
c00264ea:	6a 01                	push   0x1
c00264ec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00264ef:	e8 04 ff ff ff       	call   c00263f8 <IOAPIC::read(int)>
c00264f4:	83 c4 10             	add    esp,0x10
c00264f7:	c1 f8 10             	sar    eax,0x10
c00264fa:	0f b6 c0             	movzx  eax,al
c00264fd:	8d 50 01             	lea    edx,[eax+0x1]
c0026500:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026503:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0026509:	b8 00 00 00 00       	mov    eax,0x0
c002650e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026511:	5b                   	pop    ebx
c0026512:	5e                   	pop    esi
c0026513:	5f                   	pop    edi
c0026514:	5d                   	pop    ebp
c0026515:	c3                   	ret    

c0026516 <IOAPIC::write(int, int)>:
c0026516:	55                   	push   ebp
c0026517:	89 e5                	mov    ebp,esp
c0026519:	83 ec 10             	sub    esp,0x10
c002651c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002651f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026525:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0026528:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002652b:	0f b6 d0             	movzx  edx,al
c002652e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026531:	89 10                	mov    DWORD PTR [eax],edx
c0026533:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026536:	8d 50 10             	lea    edx,[eax+0x10]
c0026539:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002653c:	89 02                	mov    DWORD PTR [edx],eax
c002653e:	90                   	nop
c002653f:	c9                   	leave  
c0026540:	c3                   	ret    
c0026541:	90                   	nop

c0026542 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0026542:	55                   	push   ebp
c0026543:	89 e5                	mov    ebp,esp
c0026545:	53                   	push   ebx
c0026546:	83 ec 2c             	sub    esp,0x2c
c0026549:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002654c:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002654f:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0026552:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0026555:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0026558:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002655b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002655e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026561:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026564:	88 d8                	mov    al,bl
c0026566:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0026569:	88 c8                	mov    al,cl
c002656b:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002656e:	88 d0                	mov    al,dl
c0026570:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0026573:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026577:	83 c0 08             	add    eax,0x8
c002657a:	01 c0                	add    eax,eax
c002657c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002657f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026583:	83 c0 08             	add    eax,0x8
c0026586:	01 c0                	add    eax,eax
c0026588:	40                   	inc    eax
c0026589:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002658c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002658f:	50                   	push   eax
c0026590:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026593:	e8 60 fe ff ff       	call   c00263f8 <IOAPIC::read(int)>
c0026598:	83 c4 08             	add    esp,0x8
c002659b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002659e:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00265a5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00265a8:	c1 e0 18             	shl    eax,0x18
c00265ab:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00265ae:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00265b1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00265b4:	52                   	push   edx
c00265b5:	50                   	push   eax
c00265b6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00265b9:	e8 58 ff ff ff       	call   c0026516 <IOAPIC::write(int, int)>
c00265be:	83 c4 0c             	add    esp,0xc
c00265c1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00265c4:	50                   	push   eax
c00265c5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00265c8:	e8 2b fe ff ff       	call   c00263f8 <IOAPIC::read(int)>
c00265cd:	83 c4 08             	add    esp,0x8
c00265d0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00265d3:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00265da:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00265e1:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00265e8:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00265ec:	74 09                	je     c00265f7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00265ee:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00265f5:	eb 07                	jmp    c00265fe <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00265f7:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00265fe:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0026602:	74 09                	je     c002660d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0026604:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002660b:	eb 07                	jmp    c0026614 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c002660d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0026614:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002661b:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002661f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0026622:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0026625:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026628:	52                   	push   edx
c0026629:	50                   	push   eax
c002662a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002662d:	e8 e4 fe ff ff       	call   c0026516 <IOAPIC::write(int, int)>
c0026632:	83 c4 0c             	add    esp,0xc
c0026635:	90                   	nop
c0026636:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0026639:	c9                   	leave  
c002663a:	c3                   	ret    
c002663b:	90                   	nop

c002663c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c002663c:	55                   	push   ebp
c002663d:	89 e5                	mov    ebp,esp
c002663f:	57                   	push   edi
c0026640:	56                   	push   esi
c0026641:	53                   	push   ebx
c0026642:	83 ec 2c             	sub    esp,0x2c
c0026645:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026648:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002664b:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002664f:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0026653:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0026657:	74 5a                	je     c00266b3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026659:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c002665d:	7f 44                	jg     c00266a3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c002665f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026662:	05 c0 e2 02 c0       	add    eax,0xc002e2c0
c0026667:	8a 00                	mov    al,BYTE PTR [eax]
c0026669:	0f b6 c0             	movzx  eax,al
c002666c:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002666f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026672:	66 8b 84 00 e0 19 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce620]
c002667a:	0f b7 c0             	movzx  eax,ax
c002667d:	83 e0 02             	and    eax,0x2
c0026680:	85 c0                	test   eax,eax
c0026682:	74 04                	je     c0026688 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0026684:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0026688:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002668b:	66 8b 84 00 e0 19 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce620]
c0026693:	0f b7 c0             	movzx  eax,ax
c0026696:	83 e0 08             	and    eax,0x8
c0026699:	85 c0                	test   eax,eax
c002669b:	74 16                	je     c00266b3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002669d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00266a1:	eb 10                	jmp    c00266b3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00266a3:	83 ec 0c             	sub    esp,0xc
c00266a6:	68 90 dd 02 c0       	push   0xc002dd90
c00266ab:	e8 bd 41 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c00266b0:	83 c4 10             	add    esp,0x10
c00266b3:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00266b7:	a1 e0 33 03 c0       	mov    eax,ds:0xc00333e0
c00266bc:	83 ec 08             	sub    esp,0x8
c00266bf:	50                   	push   eax
c00266c0:	68 c8 dd 02 c0       	push   0xc002ddc8
c00266c5:	e8 bb c7 fe ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00266ca:	83 c4 10             	add    esp,0x10
c00266cd:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00266d4:	a1 e0 33 03 c0       	mov    eax,ds:0xc00333e0
c00266d9:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00266dc:	7d 67                	jge    c0026745 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00266de:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00266e1:	8b 04 85 00 34 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccc00]
c00266e8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00266eb:	83 ec 08             	sub    esp,0x8
c00266ee:	52                   	push   edx
c00266ef:	50                   	push   eax
c00266f0:	e8 d1 fc ff ff       	call   c00263c6 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00266f5:	83 c4 10             	add    esp,0x10
c00266f8:	84 c0                	test   al,al
c00266fa:	74 44                	je     c0026740 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00266fc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00266ff:	8b 1c 85 00 34 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffccc00]
c0026706:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c002670a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002670d:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0026711:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026714:	83 c0 20             	add    eax,0x20
c0026717:	0f b6 f0             	movzx  esi,al
c002671a:	b8 00 00 00 00       	mov    eax,0x0
c002671f:	99                   	cdq    
c0026720:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026723:	0f b6 c9             	movzx  ecx,cl
c0026726:	83 ec 04             	sub    esp,0x4
c0026729:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002672c:	57                   	push   edi
c002672d:	56                   	push   esi
c002672e:	52                   	push   edx
c002672f:	50                   	push   eax
c0026730:	51                   	push   ecx
c0026731:	53                   	push   ebx
c0026732:	e8 0b fe ff ff       	call   c0026542 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0026737:	83 c4 20             	add    esp,0x20
c002673a:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c002673e:	eb 05                	jmp    c0026745 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0026740:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0026743:	eb 8f                	jmp    c00266d4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0026745:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0026748:	83 f0 01             	xor    eax,0x1
c002674b:	84 c0                	test   al,al
c002674d:	74 10                	je     c002675f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c002674f:	83 ec 0c             	sub    esp,0xc
c0026752:	68 df dd 02 c0       	push   0xc002dddf
c0026757:	e8 11 41 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c002675c:	83 c4 10             	add    esp,0x10
c002675f:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0026763:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c002676a:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c002676e:	7f 65                	jg     c00267d5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0026770:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026773:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026776:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002677d:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026780:	01 ca                	add    edx,ecx
c0026782:	83 c2 54             	add    edx,0x54
c0026785:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0026789:	85 c0                	test   eax,eax
c002678b:	75 43                	jne    c00267d0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c002678d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026790:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026793:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002679a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002679d:	01 ca                	add    edx,ecx
c002679f:	8d 4a 54             	lea    ecx,[edx+0x54]
c00267a2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00267a5:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00267a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00267ac:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00267af:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00267b6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00267b9:	01 ca                	add    edx,ecx
c00267bb:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00267c1:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00267c4:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00267c8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00267cb:	83 e8 20             	sub    eax,0x20
c00267ce:	eb 1a                	jmp    c00267ea <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00267d0:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00267d3:	eb 95                	jmp    c002676a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00267d5:	83 ec 0c             	sub    esp,0xc
c00267d8:	68 ec dd 02 c0       	push   0xc002ddec
c00267dd:	e8 8b 40 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c00267e2:	83 c4 10             	add    esp,0x10
c00267e5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00267ea:	8d 65 f4             	lea    esp,[ebp-0xc]
c00267ed:	5b                   	pop    ebx
c00267ee:	5e                   	pop    esi
c00267ef:	5f                   	pop    edi
c00267f0:	5d                   	pop    ebp
c00267f1:	c3                   	ret    

c00267f2 <PIC::disable()>:
c00267f2:	55                   	push   ebp
c00267f3:	89 e5                	mov    ebp,esp
c00267f5:	83 ec 10             	sub    esp,0x10
c00267f8:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00267fe:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0026802:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026805:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026809:	ee                   	out    dx,al
c002680a:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0026810:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0026814:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026817:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c002681b:	ee                   	out    dx,al
c002681c:	90                   	nop
c002681d:	c9                   	leave  
c002681e:	c3                   	ret    
c002681f:	90                   	nop

c0026820 <PIC::close(int, int, void*)>:
c0026820:	55                   	push   ebp
c0026821:	89 e5                	mov    ebp,esp
c0026823:	83 ec 08             	sub    esp,0x8
c0026826:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026829:	8b 00                	mov    eax,DWORD PTR [eax]
c002682b:	83 c0 3c             	add    eax,0x3c
c002682e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026830:	83 ec 0c             	sub    esp,0xc
c0026833:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026836:	ff d0                	call   eax
c0026838:	83 c4 10             	add    esp,0x10
c002683b:	b8 00 00 00 00       	mov    eax,0x0
c0026840:	c9                   	leave  
c0026841:	c3                   	ret    

c0026842 <PIC::PIC()>:
c0026842:	83 ec 0c             	sub    esp,0xc
c0026845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026849:	83 ec 08             	sub    esp,0x8
c002684c:	68 98 de 02 c0       	push   0xc002de98
c0026851:	50                   	push   eax
c0026852:	e8 b9 e3 fe ff       	call   c0014c10 <InterruptController::InterruptController(char const*)>
c0026857:	83 c4 10             	add    esp,0x10
c002685a:	ba c4 de 02 c0       	mov    edx,0xc002dec4
c002685f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026863:	89 10                	mov    DWORD PTR [eax],edx
c0026865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026869:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002686f:	0f b6 d0             	movzx  edx,al
c0026872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026876:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c002687d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026881:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026887:	0f b6 d0             	movzx  edx,al
c002688a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002688e:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026897:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002689d:	8d 50 01             	lea    edx,[eax+0x1]
c00268a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00268a4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00268aa:	0f b6 d0             	movzx  edx,al
c00268ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268b1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00268b5:	83 e1 3f             	and    ecx,0x3f
c00268b8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00268bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268c0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00268c6:	0f b6 d0             	movzx  edx,al
c00268c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268cd:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00268d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268d8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00268de:	0f b6 d0             	movzx  edx,al
c00268e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268e5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00268ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268ee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00268f4:	8d 50 01             	lea    edx,[eax+0x1]
c00268f7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00268fb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026901:	0f b6 d0             	movzx  edx,al
c0026904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026908:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002690c:	83 e1 3f             	and    ecx,0x3f
c002690f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026913:	90                   	nop
c0026914:	83 c4 0c             	add    esp,0xc
c0026917:	c3                   	ret    

c0026918 <PIC::ioWait()>:
c0026918:	eb 00                	jmp    c002691a <PIC::ioWait()+0x2>
c002691a:	eb 00                	jmp    c002691c <PIC::ioWait()+0x4>
c002691c:	90                   	nop
c002691d:	c3                   	ret    

c002691e <PIC::getIRQReg(int)>:
c002691e:	55                   	push   ebp
c002691f:	89 e5                	mov    ebp,esp
c0026921:	83 ec 10             	sub    esp,0x10
c0026924:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026927:	0f b6 c0             	movzx  eax,al
c002692a:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026930:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0026933:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026936:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002693a:	ee                   	out    dx,al
c002693b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002693e:	0f b6 c0             	movzx  eax,al
c0026941:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026947:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c002694a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002694d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026951:	ee                   	out    dx,al
c0026952:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0026958:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c002695c:	89 c2                	mov    edx,eax
c002695e:	ec                   	in     al,dx
c002695f:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0026962:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026965:	0f b6 c0             	movzx  eax,al
c0026968:	c1 e0 08             	shl    eax,0x8
c002696b:	89 c1                	mov    ecx,eax
c002696d:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0026973:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0026977:	89 c2                	mov    edx,eax
c0026979:	ec                   	in     al,dx
c002697a:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c002697d:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026980:	0f b6 c0             	movzx  eax,al
c0026983:	09 c8                	or     eax,ecx
c0026985:	c9                   	leave  
c0026986:	c3                   	ret    
c0026987:	90                   	nop

c0026988 <PIC::eoi(unsigned char)>:
c0026988:	55                   	push   ebp
c0026989:	89 e5                	mov    ebp,esp
c002698b:	83 ec 14             	sub    esp,0x14
c002698e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026991:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0026994:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026998:	75 1e                	jne    c00269b8 <PIC::eoi(unsigned char)+0x30>
c002699a:	6a 0b                	push   0xb
c002699c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002699f:	e8 7a ff ff ff       	call   c002691e <PIC::getIRQReg(int)>
c00269a4:	83 c4 08             	add    esp,0x8
c00269a7:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00269ab:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00269af:	25 80 00 00 00       	and    eax,0x80
c00269b4:	85 c0                	test   eax,eax
c00269b6:	74 5f                	je     c0026a17 <PIC::eoi(unsigned char)+0x8f>
c00269b8:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00269bc:	75 2d                	jne    c00269eb <PIC::eoi(unsigned char)+0x63>
c00269be:	6a 0b                	push   0xb
c00269c0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269c3:	e8 56 ff ff ff       	call   c002691e <PIC::getIRQReg(int)>
c00269c8:	83 c4 08             	add    esp,0x8
c00269cb:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00269cf:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00269d2:	66 85 c0             	test   ax,ax
c00269d5:	78 14                	js     c00269eb <PIC::eoi(unsigned char)+0x63>
c00269d7:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00269dd:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00269e1:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00269e4:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00269e8:	ee                   	out    dx,al
c00269e9:	eb 2d                	jmp    c0026a18 <PIC::eoi(unsigned char)+0x90>
c00269eb:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00269ef:	76 12                	jbe    c0026a03 <PIC::eoi(unsigned char)+0x7b>
c00269f1:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00269f7:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00269fb:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00269fe:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026a02:	ee                   	out    dx,al
c0026a03:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026a09:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026a0d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026a10:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026a14:	ee                   	out    dx,al
c0026a15:	eb 01                	jmp    c0026a18 <PIC::eoi(unsigned char)+0x90>
c0026a17:	90                   	nop
c0026a18:	c9                   	leave  
c0026a19:	c3                   	ret    

c0026a1a <PIC::remap()>:
c0026a1a:	55                   	push   ebp
c0026a1b:	89 e5                	mov    ebp,esp
c0026a1d:	83 ec 48             	sub    esp,0x48
c0026a20:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026a27:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026a2e:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026a34:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026a37:	89 c2                	mov    edx,eax
c0026a39:	ec                   	in     al,dx
c0026a3a:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0026a3d:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026a40:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026a43:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026a49:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026a4c:	89 c2                	mov    edx,eax
c0026a4e:	ec                   	in     al,dx
c0026a4f:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026a52:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026a55:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0026a58:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0026a5e:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026a62:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026a65:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0026a68:	ee                   	out    dx,al
c0026a69:	83 ec 0c             	sub    esp,0xc
c0026a6c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a6f:	e8 a4 fe ff ff       	call   c0026918 <PIC::ioWait()>
c0026a74:	83 c4 10             	add    esp,0x10
c0026a77:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0026a7d:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026a81:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026a84:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026a87:	ee                   	out    dx,al
c0026a88:	83 ec 0c             	sub    esp,0xc
c0026a8b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a8e:	e8 85 fe ff ff       	call   c0026918 <PIC::ioWait()>
c0026a93:	83 c4 10             	add    esp,0x10
c0026a96:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026a99:	0f b6 c0             	movzx  eax,al
c0026a9c:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026aa2:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026aa5:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0026aa8:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0026aab:	ee                   	out    dx,al
c0026aac:	83 ec 0c             	sub    esp,0xc
c0026aaf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026ab2:	e8 61 fe ff ff       	call   c0026918 <PIC::ioWait()>
c0026ab7:	83 c4 10             	add    esp,0x10
c0026aba:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026abd:	0f b6 c0             	movzx  eax,al
c0026ac0:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026ac6:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026ac9:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026acc:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026acf:	ee                   	out    dx,al
c0026ad0:	83 ec 0c             	sub    esp,0xc
c0026ad3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026ad6:	e8 3d fe ff ff       	call   c0026918 <PIC::ioWait()>
c0026adb:	83 c4 10             	add    esp,0x10
c0026ade:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026ae4:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026ae8:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026aeb:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026aee:	ee                   	out    dx,al
c0026aef:	83 ec 0c             	sub    esp,0xc
c0026af2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026af5:	e8 1e fe ff ff       	call   c0026918 <PIC::ioWait()>
c0026afa:	83 c4 10             	add    esp,0x10
c0026afd:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026b03:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026b07:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026b0a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026b0d:	ee                   	out    dx,al
c0026b0e:	83 ec 0c             	sub    esp,0xc
c0026b11:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026b14:	e8 ff fd ff ff       	call   c0026918 <PIC::ioWait()>
c0026b19:	83 c4 10             	add    esp,0x10
c0026b1c:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026b22:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026b26:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026b29:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026b2c:	ee                   	out    dx,al
c0026b2d:	83 ec 0c             	sub    esp,0xc
c0026b30:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026b33:	e8 e0 fd ff ff       	call   c0026918 <PIC::ioWait()>
c0026b38:	83 c4 10             	add    esp,0x10
c0026b3b:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026b41:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026b45:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026b48:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026b4b:	ee                   	out    dx,al
c0026b4c:	83 ec 0c             	sub    esp,0xc
c0026b4f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026b52:	e8 c1 fd ff ff       	call   c0026918 <PIC::ioWait()>
c0026b57:	83 c4 10             	add    esp,0x10
c0026b5a:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026b5e:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026b64:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026b67:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026b6a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026b6d:	ee                   	out    dx,al
c0026b6e:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026b72:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026b78:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026b7b:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026b7e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026b81:	ee                   	out    dx,al
c0026b82:	90                   	nop
c0026b83:	c9                   	leave  
c0026b84:	c3                   	ret    
c0026b85:	90                   	nop

c0026b86 <PIC::open(int, int, void*)>:
c0026b86:	55                   	push   ebp
c0026b87:	89 e5                	mov    ebp,esp
c0026b89:	83 ec 18             	sub    esp,0x18
c0026b8c:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026b92:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026b96:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026b99:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026b9d:	ee                   	out    dx,al
c0026b9e:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026ba4:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026ba8:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026bab:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026baf:	ee                   	out    dx,al
c0026bb0:	83 ec 0c             	sub    esp,0xc
c0026bb3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026bb6:	e8 5f fe ff ff       	call   c0026a1a <PIC::remap()>
c0026bbb:	83 c4 10             	add    esp,0x10
c0026bbe:	b8 00 00 00 00       	mov    eax,0x0
c0026bc3:	c9                   	leave  
c0026bc4:	c3                   	ret    
c0026bc5:	90                   	nop

c0026bc6 <APICTimer::close(int, int, void*)>:
c0026bc6:	b8 00 00 00 00       	mov    eax,0x0
c0026bcb:	c3                   	ret    

c0026bcc <apicTimerHandler(regs*, void*)>:
c0026bcc:	83 ec 0c             	sub    esp,0xc
c0026bcf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026bd3:	8b 00                	mov    eax,DWORD PTR [eax]
c0026bd5:	99                   	cdq    
c0026bd6:	52                   	push   edx
c0026bd7:	50                   	push   eax
c0026bd8:	6a 00                	push   0x0
c0026bda:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026bdf:	e8 90 07 00 00       	call   c0027374 <__udivdi3>
c0026be4:	83 c4 10             	add    esp,0x10
c0026be7:	83 ec 08             	sub    esp,0x8
c0026bea:	52                   	push   edx
c0026beb:	50                   	push   eax
c0026bec:	e8 d4 01 ff ff       	call   c0016dc5 <timerHandler(unsigned long long)>
c0026bf1:	83 c4 10             	add    esp,0x10
c0026bf4:	90                   	nop
c0026bf5:	83 c4 0c             	add    esp,0xc
c0026bf8:	c3                   	ret    
c0026bf9:	90                   	nop

c0026bfa <APICTimer::write(int)>:
c0026bfa:	53                   	push   ebx
c0026bfb:	83 ec 28             	sub    esp,0x28
c0026bfe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026c02:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026c06:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026c0c:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c0026c11:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026c17:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026c1d:	83 ec 0c             	sub    esp,0xc
c0026c20:	50                   	push   eax
c0026c21:	e8 de f4 ff ff       	call   c0026104 <APIC::getBase()>
c0026c26:	83 c4 10             	add    esp,0x10
c0026c29:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026c2d:	a1 f0 f6 02 c0       	mov    eax,ds:0xc002f6f0
c0026c32:	8b 15 f4 f6 02 c0    	mov    edx,DWORD PTR ds:0xc002f6f4
c0026c38:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026c3c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026c40:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026c44:	05 e0 03 00 00       	add    eax,0x3e0
c0026c49:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026c4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026c53:	05 80 03 00 00       	add    eax,0x380
c0026c58:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026c5e:	fb                   	sti    
c0026c5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026c67:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026c6c:	83 d2 00             	adc    edx,0x0
c0026c6f:	89 c1                	mov    ecx,eax
c0026c71:	89 d3                	mov    ebx,edx
c0026c73:	a1 f0 f6 02 c0       	mov    eax,ds:0xc002f6f0
c0026c78:	8b 15 f4 f6 02 c0    	mov    edx,DWORD PTR ds:0xc002f6f4
c0026c7e:	39 c8                	cmp    eax,ecx
c0026c80:	89 d0                	mov    eax,edx
c0026c82:	19 d8                	sbb    eax,ebx
c0026c84:	73 02                	jae    c0026c88 <APICTimer::write(int)+0x8e>
c0026c86:	eb d7                	jmp    c0026c5f <APICTimer::write(int)+0x65>
c0026c88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026c8c:	05 20 03 00 00       	add    eax,0x320
c0026c91:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026c9b:	05 90 03 00 00       	add    eax,0x390
c0026ca0:	8b 00                	mov    eax,DWORD PTR [eax]
c0026ca2:	f7 d0                	not    eax
c0026ca4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026ca8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026cac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026cb0:	ba 00 00 00 00       	mov    edx,0x0
c0026cb5:	f7 f3                	div    ebx
c0026cb7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026cbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026cbf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026cc5:	0d 00 00 02 00       	or     eax,0x20000
c0026cca:	89 c2                	mov    edx,eax
c0026ccc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026cd0:	05 20 03 00 00       	add    eax,0x320
c0026cd5:	89 10                	mov    DWORD PTR [eax],edx
c0026cd7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026cdb:	05 e0 03 00 00       	add    eax,0x3e0
c0026ce0:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026ce6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026cea:	05 80 03 00 00       	add    eax,0x380
c0026cef:	89 c2                	mov    edx,eax
c0026cf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026cf5:	89 02                	mov    DWORD PTR [edx],eax
c0026cf7:	90                   	nop
c0026cf8:	83 c4 28             	add    esp,0x28
c0026cfb:	5b                   	pop    ebx
c0026cfc:	c3                   	ret    
c0026cfd:	90                   	nop

c0026cfe <APICTimer::open(int, int, void*)>:
c0026cfe:	57                   	push   edi
c0026cff:	56                   	push   esi
c0026d00:	53                   	push   ebx
c0026d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d05:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d07:	83 c0 24             	add    eax,0x24
c0026d0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d0c:	83 ec 08             	sub    esp,0x8
c0026d0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d17:	ff d0                	call   eax
c0026d19:	83 c4 10             	add    esp,0x10
c0026d1c:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c0026d21:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026d27:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026d2d:	83 ec 0c             	sub    esp,0xc
c0026d30:	50                   	push   eax
c0026d31:	e8 ce f3 ff ff       	call   c0026104 <APIC::getBase()>
c0026d36:	83 c4 10             	add    esp,0x10
c0026d39:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026d3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d43:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026d49:	0f b6 f8             	movzx  edi,al
c0026d4c:	89 d0                	mov    eax,edx
c0026d4e:	ba 00 00 00 00       	mov    edx,0x0
c0026d53:	89 c1                	mov    ecx,eax
c0026d55:	80 e5 ff             	and    ch,0xff
c0026d58:	89 cb                	mov    ebx,ecx
c0026d5a:	0f b6 f2             	movzx  esi,dl
c0026d5d:	89 d8                	mov    eax,ebx
c0026d5f:	89 f2                	mov    edx,esi
c0026d61:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026d65:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026d68:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026d6c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026d70:	83 e0 00             	and    eax,0x0
c0026d73:	09 d0                	or     eax,edx
c0026d75:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026d79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d7d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026d83:	8d 50 01             	lea    edx,[eax+0x1]
c0026d86:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026d8a:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026d90:	0f b6 d0             	movzx  edx,al
c0026d93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d97:	83 c2 08             	add    edx,0x8
c0026d9a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026d9e:	0f b6 c9             	movzx  ecx,cl
c0026da1:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026da7:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026dab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026daf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026db3:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026db9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dbd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026dc1:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026dc7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026dcb:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026dd1:	83 ec 0c             	sub    esp,0xc
c0026dd4:	51                   	push   ecx
c0026dd5:	6a 01                	push   0x1
c0026dd7:	68 cc 6b 02 c0       	push   0xc0026bcc
c0026ddc:	52                   	push   edx
c0026ddd:	50                   	push   eax
c0026dde:	e8 47 d4 fe ff       	call   c001422a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026de3:	83 c4 20             	add    esp,0x20
c0026de6:	89 c2                	mov    edx,eax
c0026de8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dec:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026df2:	b8 00 00 00 00       	mov    eax,0x0
c0026df7:	5b                   	pop    ebx
c0026df8:	5e                   	pop    esi
c0026df9:	5f                   	pop    edi
c0026dfa:	c3                   	ret    
c0026dfb:	90                   	nop

c0026dfc <APICTimer::APICTimer()>:
c0026dfc:	83 ec 0c             	sub    esp,0xc
c0026dff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e03:	83 ec 08             	sub    esp,0x8
c0026e06:	68 04 df 02 c0       	push   0xc002df04
c0026e0b:	50                   	push   eax
c0026e0c:	e8 25 ff fe ff       	call   c0016d36 <Timer::Timer(char const*)>
c0026e11:	83 c4 10             	add    esp,0x10
c0026e14:	ba 18 df 02 c0       	mov    edx,0xc002df18
c0026e19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e1d:	89 10                	mov    DWORD PTR [eax],edx
c0026e1f:	90                   	nop
c0026e20:	83 c4 0c             	add    esp,0xc
c0026e23:	c3                   	ret    

c0026e24 <PIT::write(int)>:
c0026e24:	83 ec 10             	sub    esp,0x10
c0026e27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026e2b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026e2f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026e35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026e39:	a3 24 34 03 c0       	mov    ds:0xc0033424,eax
c0026e3e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026e43:	99                   	cdq    
c0026e44:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026e48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026e4c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026e53:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026e58:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026e5c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026e61:	ee                   	out    dx,al
c0026e62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026e66:	0f b6 c0             	movzx  eax,al
c0026e69:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026e70:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026e74:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026e78:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026e7d:	ee                   	out    dx,al
c0026e7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026e82:	c1 f8 08             	sar    eax,0x8
c0026e85:	0f b6 c0             	movzx  eax,al
c0026e88:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026e8f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026e93:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026e97:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026e9c:	ee                   	out    dx,al
c0026e9d:	90                   	nop
c0026e9e:	83 c4 10             	add    esp,0x10
c0026ea1:	c3                   	ret    

c0026ea2 <pitHandler(regs*, void*)>:
c0026ea2:	83 ec 0c             	sub    esp,0xc
c0026ea5:	a1 24 34 03 c0       	mov    eax,ds:0xc0033424
c0026eaa:	99                   	cdq    
c0026eab:	52                   	push   edx
c0026eac:	50                   	push   eax
c0026ead:	6a 00                	push   0x0
c0026eaf:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026eb4:	e8 bb 04 00 00       	call   c0027374 <__udivdi3>
c0026eb9:	83 c4 10             	add    esp,0x10
c0026ebc:	83 ec 08             	sub    esp,0x8
c0026ebf:	52                   	push   edx
c0026ec0:	50                   	push   eax
c0026ec1:	e8 ff fe fe ff       	call   c0016dc5 <timerHandler(unsigned long long)>
c0026ec6:	83 c4 10             	add    esp,0x10
c0026ec9:	90                   	nop
c0026eca:	83 c4 0c             	add    esp,0xc
c0026ecd:	c3                   	ret    

c0026ece <PIT::open(int, int, void*)>:
c0026ece:	83 ec 0c             	sub    esp,0xc
c0026ed1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ed5:	8b 00                	mov    eax,DWORD PTR [eax]
c0026ed7:	83 c0 24             	add    eax,0x24
c0026eda:	8b 00                	mov    eax,DWORD PTR [eax]
c0026edc:	83 ec 08             	sub    esp,0x8
c0026edf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026ee3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026ee7:	ff d0                	call   eax
c0026ee9:	83 c4 10             	add    esp,0x10
c0026eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ef0:	83 ec 0c             	sub    esp,0xc
c0026ef3:	6a 00                	push   0x0
c0026ef5:	6a 01                	push   0x1
c0026ef7:	68 a2 6e 02 c0       	push   0xc0026ea2
c0026efc:	6a 00                	push   0x0
c0026efe:	50                   	push   eax
c0026eff:	e8 26 d3 fe ff       	call   c001422a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026f04:	83 c4 20             	add    esp,0x20
c0026f07:	89 c2                	mov    edx,eax
c0026f09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f0d:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026f13:	b8 00 00 00 00       	mov    eax,0x0
c0026f18:	83 c4 0c             	add    esp,0xc
c0026f1b:	c3                   	ret    

c0026f1c <PIT::close(int, int, void*)>:
c0026f1c:	83 ec 0c             	sub    esp,0xc
c0026f1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f23:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026f2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f31:	6a 01                	push   0x1
c0026f33:	68 a2 6e 02 c0       	push   0xc0026ea2
c0026f38:	6a 00                	push   0x0
c0026f3a:	50                   	push   eax
c0026f3b:	e8 28 d3 fe ff       	call   c0014268 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026f40:	83 c4 10             	add    esp,0x10
c0026f43:	b8 00 00 00 00       	mov    eax,0x0
c0026f48:	83 c4 0c             	add    esp,0xc
c0026f4b:	c3                   	ret    

c0026f4c <PIT::PIT()>:
c0026f4c:	83 ec 0c             	sub    esp,0xc
c0026f4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f53:	83 ec 08             	sub    esp,0x8
c0026f56:	68 40 df 02 c0       	push   0xc002df40
c0026f5b:	50                   	push   eax
c0026f5c:	e8 d5 fd fe ff       	call   c0016d36 <Timer::Timer(char const*)>
c0026f61:	83 c4 10             	add    esp,0x10
c0026f64:	ba 68 df 02 c0       	mov    edx,0xc002df68
c0026f69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f6d:	89 10                	mov    DWORD PTR [eax],edx
c0026f6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f73:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026f79:	0f b6 d0             	movzx  edx,al
c0026f7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f80:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026f87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f8b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026f91:	0f b6 d0             	movzx  edx,al
c0026f94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f98:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026f9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fa1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026fa7:	8d 50 01             	lea    edx,[eax+0x1]
c0026faa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026fae:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026fb4:	0f b6 d0             	movzx  edx,al
c0026fb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fbb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026fbf:	83 e1 3f             	and    ecx,0x3f
c0026fc2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026fc6:	90                   	nop
c0026fc7:	83 c4 0c             	add    esp,0xc
c0026fca:	c3                   	ret    
c0026fcb:	66 90                	xchg   ax,ax
c0026fcd:	66 90                	xchg   ax,ax
c0026fcf:	90                   	nop

c0026fd0 <avxDetect>:
c0026fd0:	b8 00 00 00 00       	mov    eax,0x0
c0026fd5:	c3                   	ret    

c0026fd6 <avxSave>:
c0026fd6:	c3                   	ret    

c0026fd7 <avxLoad>:
c0026fd7:	c3                   	ret    

c0026fd8 <avxInit>:
c0026fd8:	c3                   	ret    

c0026fd9 <avxClose>:
c0026fd9:	c3                   	ret    

c0026fda <wouldSheSayYes>:
c0026fda:	c3                   	ret    
c0026fdb:	49                   	dec    ecx
c0026fdc:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026fe0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026fe4:	75 20                	jne    c0027006 <sseDetect.noSSE+0x1>
c0026fe6:	4e                   	dec    esi
c0026fe7:	79 61                	jns    c002704a <x87Detect+0x14>
c0026fe9:	68 2e 2e 2e 00       	push   0x2e2e2e
c0026fee:	66 90                	xchg   ax,ax

c0026ff0 <absolutelyNoChanceInHell>:
c0026ff0:	b8 01 00 00 00       	mov    eax,0x1
c0026ff5:	0f a2                	cpuid  
c0026ff7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0026ffd:	74 06                	je     c0027005 <sseDetect.noSSE>
c0026fff:	b8 01 00 00 00       	mov    eax,0x1
c0027004:	c3                   	ret    

c0027005 <sseDetect.noSSE>:
c0027005:	31 c0                	xor    eax,eax
c0027007:	c3                   	ret    

c0027008 <sseSave>:
c0027008:	0f ae 44 24 04       	fxsave [esp+0x4]
c002700d:	c3                   	ret    

c002700e <sseLoad>:
c002700e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0027013:	c3                   	ret    

c0027014 <sseInit>:
c0027014:	e8 49 00 00 00       	call   c0027062 <x87Init>
c0027019:	0f 20 e0             	mov    eax,cr4
c002701c:	66 0d 00 06          	or     ax,0x600
c0027020:	0f 22 e0             	mov    cr4,eax
c0027023:	c3                   	ret    

c0027024 <sseClose>:
c0027024:	c3                   	ret    
c0027025:	66 90                	xchg   ax,ax
c0027027:	66 90                	xchg   ax,ax
c0027029:	66 90                	xchg   ax,ax
c002702b:	66 90                	xchg   ax,ax
c002702d:	66 90                	xchg   ax,ax
c002702f:	90                   	nop

c0027030 <value_37F>:
c0027030:	7f 03                	jg     c0027035 <value_37A+0x1>

c0027032 <value_37E>:
c0027032:	7e 03                	jle    c0027037 <x87Detect+0x1>

c0027034 <value_37A>:
c0027034:	7a 03                	jp     c0027039 <x87Detect+0x3>

c0027036 <x87Detect>:
c0027036:	b8 01 00 00 00       	mov    eax,0x1
c002703b:	0f a2                	cpuid  
c002703d:	f7 c2 01 00 00 00    	test   edx,0x1
c0027043:	74 06                	je     c002704b <x87Detect.nox87>
c0027045:	b8 01 00 00 00       	mov    eax,0x1
c002704a:	c3                   	ret    

c002704b <x87Detect.nox87>:
c002704b:	b8 00 00 00 00       	mov    eax,0x0
c0027050:	c3                   	ret    

c0027051 <x87Save>:
c0027051:	55                   	push   ebp
c0027052:	89 e5                	mov    ebp,esp
c0027054:	9b dd 75 08          	fsave  [ebp+0x8]
c0027058:	c9                   	leave  
c0027059:	c3                   	ret    

c002705a <x87Load>:
c002705a:	55                   	push   ebp
c002705b:	89 e5                	mov    ebp,esp
c002705d:	dd 65 08             	frstor [ebp+0x8]
c0027060:	c9                   	leave  
c0027061:	c3                   	ret    

c0027062 <x87Init>:
c0027062:	9b db e3             	finit  
c0027065:	0f 20 c0             	mov    eax,cr0
c0027068:	66 25 fb ff          	and    ax,0xfffb
c002706c:	66 0d 22 00          	or     ax,0x22
c0027070:	0f 22 c0             	mov    cr0,eax
c0027073:	0f 06                	clts   
c0027075:	d9 2d 34 70 02 c0    	fldcw  WORD PTR ds:0xc0027034
c002707b:	c3                   	ret    

c002707c <x87Close>:
c002707c:	c3                   	ret    
c002707d:	66 90                	xchg   ax,ax
c002707f:	90                   	nop

c0027080 <__do_global_ctors_aux>:
c0027080:	a1 b8 9c 02 c0       	mov    eax,ds:0xc0029cb8
c0027085:	83 f8 ff             	cmp    eax,0xffffffff
c0027088:	74 1a                	je     c00270a4 <__do_global_ctors_aux+0x24>
c002708a:	55                   	push   ebp
c002708b:	89 e5                	mov    ebp,esp
c002708d:	53                   	push   ebx
c002708e:	52                   	push   edx
c002708f:	bb b8 9c 02 c0       	mov    ebx,0xc0029cb8
c0027094:	ff d0                	call   eax
c0027096:	83 eb 04             	sub    ebx,0x4
c0027099:	8b 03                	mov    eax,DWORD PTR [ebx]
c002709b:	83 f8 ff             	cmp    eax,0xffffffff
c002709e:	75 f4                	jne    c0027094 <__do_global_ctors_aux+0x14>
c00270a0:	58                   	pop    eax
c00270a1:	5b                   	pop    ebx
c00270a2:	5d                   	pop    ebp
c00270a3:	c3                   	ret    
c00270a4:	c3                   	ret    
c00270a5:	66 90                	xchg   ax,ax
c00270a7:	90                   	nop

c00270a8 <__divdi3>:
c00270a8:	55                   	push   ebp
c00270a9:	57                   	push   edi
c00270aa:	56                   	push   esi
c00270ab:	53                   	push   ebx
c00270ac:	83 ec 1c             	sub    esp,0x1c
c00270af:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00270b3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00270b7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00270ba:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00270be:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00270c2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00270c6:	85 db                	test   ebx,ebx
c00270c8:	0f 88 8e 00 00 00    	js     c002715c <__divdi3+0xb4>
c00270ce:	89 dd                	mov    ebp,ebx
c00270d0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00270d8:	89 d3                	mov    ebx,edx
c00270da:	85 d2                	test   edx,edx
c00270dc:	79 0d                	jns    c00270eb <__divdi3+0x43>
c00270de:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00270e2:	f7 d8                	neg    eax
c00270e4:	83 d2 00             	adc    edx,0x0
c00270e7:	f7 da                	neg    edx
c00270e9:	89 d3                	mov    ebx,edx
c00270eb:	89 c7                	mov    edi,eax
c00270ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00270f0:	85 db                	test   ebx,ebx
c00270f2:	75 48                	jne    c002713c <__divdi3+0x94>
c00270f4:	39 ef                	cmp    edi,ebp
c00270f6:	76 24                	jbe    c002711c <__divdi3+0x74>
c00270f8:	89 ea                	mov    edx,ebp
c00270fa:	f7 f7                	div    edi
c00270fc:	89 c1                	mov    ecx,eax
c00270fe:	31 f6                	xor    esi,esi
c0027100:	89 c8                	mov    eax,ecx
c0027102:	89 f2                	mov    edx,esi
c0027104:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027108:	85 c9                	test   ecx,ecx
c002710a:	74 07                	je     c0027113 <__divdi3+0x6b>
c002710c:	f7 d8                	neg    eax
c002710e:	83 d2 00             	adc    edx,0x0
c0027111:	f7 da                	neg    edx
c0027113:	83 c4 1c             	add    esp,0x1c
c0027116:	5b                   	pop    ebx
c0027117:	5e                   	pop    esi
c0027118:	5f                   	pop    edi
c0027119:	5d                   	pop    ebp
c002711a:	c3                   	ret    
c002711b:	90                   	nop
c002711c:	85 ff                	test   edi,edi
c002711e:	75 0b                	jne    c002712b <__divdi3+0x83>
c0027120:	b8 01 00 00 00       	mov    eax,0x1
c0027125:	31 d2                	xor    edx,edx
c0027127:	f7 f3                	div    ebx
c0027129:	89 c7                	mov    edi,eax
c002712b:	31 d2                	xor    edx,edx
c002712d:	89 e8                	mov    eax,ebp
c002712f:	f7 f7                	div    edi
c0027131:	89 c6                	mov    esi,eax
c0027133:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0027136:	f7 f7                	div    edi
c0027138:	89 c1                	mov    ecx,eax
c002713a:	eb c4                	jmp    c0027100 <__divdi3+0x58>
c002713c:	39 eb                	cmp    ebx,ebp
c002713e:	77 3c                	ja     c002717c <__divdi3+0xd4>
c0027140:	0f bd f3             	bsr    esi,ebx
c0027143:	83 f6 1f             	xor    esi,0x1f
c0027146:	75 40                	jne    c0027188 <__divdi3+0xe0>
c0027148:	39 eb                	cmp    ebx,ebp
c002714a:	72 09                	jb     c0027155 <__divdi3+0xad>
c002714c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002714f:	0f 87 97 00 00 00    	ja     c00271ec <__divdi3+0x144>
c0027155:	b9 01 00 00 00       	mov    ecx,0x1
c002715a:	eb a4                	jmp    c0027100 <__divdi3+0x58>
c002715c:	f7 d9                	neg    ecx
c002715e:	83 d3 00             	adc    ebx,0x0
c0027161:	f7 db                	neg    ebx
c0027163:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0027166:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002716a:	89 dd                	mov    ebp,ebx
c002716c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0027174:	e9 5f ff ff ff       	jmp    c00270d8 <__divdi3+0x30>
c0027179:	8d 76 00             	lea    esi,[esi+0x0]
c002717c:	31 f6                	xor    esi,esi
c002717e:	31 c9                	xor    ecx,ecx
c0027180:	e9 7b ff ff ff       	jmp    c0027100 <__divdi3+0x58>
c0027185:	8d 76 00             	lea    esi,[esi+0x0]
c0027188:	b8 20 00 00 00       	mov    eax,0x20
c002718d:	29 f0                	sub    eax,esi
c002718f:	89 f1                	mov    ecx,esi
c0027191:	d3 e3                	shl    ebx,cl
c0027193:	89 fa                	mov    edx,edi
c0027195:	88 c1                	mov    cl,al
c0027197:	d3 ea                	shr    edx,cl
c0027199:	09 da                	or     edx,ebx
c002719b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002719f:	89 f1                	mov    ecx,esi
c00271a1:	d3 e7                	shl    edi,cl
c00271a3:	89 eb                	mov    ebx,ebp
c00271a5:	88 c1                	mov    cl,al
c00271a7:	d3 eb                	shr    ebx,cl
c00271a9:	89 f1                	mov    ecx,esi
c00271ab:	d3 e5                	shl    ebp,cl
c00271ad:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00271b0:	88 c1                	mov    cl,al
c00271b2:	d3 ea                	shr    edx,cl
c00271b4:	09 d5                	or     ebp,edx
c00271b6:	89 e8                	mov    eax,ebp
c00271b8:	89 da                	mov    edx,ebx
c00271ba:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00271be:	89 d3                	mov    ebx,edx
c00271c0:	89 c5                	mov    ebp,eax
c00271c2:	f7 e7                	mul    edi
c00271c4:	39 d3                	cmp    ebx,edx
c00271c6:	72 18                	jb     c00271e0 <__divdi3+0x138>
c00271c8:	74 0a                	je     c00271d4 <__divdi3+0x12c>
c00271ca:	89 e9                	mov    ecx,ebp
c00271cc:	31 f6                	xor    esi,esi
c00271ce:	e9 2d ff ff ff       	jmp    c0027100 <__divdi3+0x58>
c00271d3:	90                   	nop
c00271d4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00271d7:	89 f1                	mov    ecx,esi
c00271d9:	d3 e7                	shl    edi,cl
c00271db:	39 c7                	cmp    edi,eax
c00271dd:	73 eb                	jae    c00271ca <__divdi3+0x122>
c00271df:	90                   	nop
c00271e0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00271e3:	31 f6                	xor    esi,esi
c00271e5:	e9 16 ff ff ff       	jmp    c0027100 <__divdi3+0x58>
c00271ea:	66 90                	xchg   ax,ax
c00271ec:	31 c9                	xor    ecx,ecx
c00271ee:	e9 0d ff ff ff       	jmp    c0027100 <__divdi3+0x58>
c00271f3:	90                   	nop

c00271f4 <__moddi3>:
c00271f4:	55                   	push   ebp
c00271f5:	57                   	push   edi
c00271f6:	56                   	push   esi
c00271f7:	53                   	push   ebx
c00271f8:	83 ec 2c             	sub    esp,0x2c
c00271fb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00271ff:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0027203:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0027207:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002720b:	85 db                	test   ebx,ebx
c002720d:	0f 88 85 00 00 00    	js     c0027298 <__moddi3+0xa4>
c0027213:	89 de                	mov    esi,ebx
c0027215:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002721d:	89 d7                	mov    edi,edx
c002721f:	85 d2                	test   edx,edx
c0027221:	79 09                	jns    c002722c <__moddi3+0x38>
c0027223:	f7 d8                	neg    eax
c0027225:	83 d2 00             	adc    edx,0x0
c0027228:	f7 da                	neg    edx
c002722a:	89 d7                	mov    edi,edx
c002722c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027230:	89 cd                	mov    ebp,ecx
c0027232:	85 ff                	test   edi,edi
c0027234:	75 52                	jne    c0027288 <__moddi3+0x94>
c0027236:	89 c3                	mov    ebx,eax
c0027238:	39 f0                	cmp    eax,esi
c002723a:	76 24                	jbe    c0027260 <__moddi3+0x6c>
c002723c:	89 c8                	mov    eax,ecx
c002723e:	89 f2                	mov    edx,esi
c0027240:	f7 f3                	div    ebx
c0027242:	89 d6                	mov    esi,edx
c0027244:	89 f0                	mov    eax,esi
c0027246:	31 d2                	xor    edx,edx
c0027248:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002724c:	85 c9                	test   ecx,ecx
c002724e:	74 07                	je     c0027257 <__moddi3+0x63>
c0027250:	f7 d8                	neg    eax
c0027252:	83 d2 00             	adc    edx,0x0
c0027255:	f7 da                	neg    edx
c0027257:	83 c4 2c             	add    esp,0x2c
c002725a:	5b                   	pop    ebx
c002725b:	5e                   	pop    esi
c002725c:	5f                   	pop    edi
c002725d:	5d                   	pop    ebp
c002725e:	c3                   	ret    
c002725f:	90                   	nop
c0027260:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0027264:	85 db                	test   ebx,ebx
c0027266:	75 0d                	jne    c0027275 <__moddi3+0x81>
c0027268:	b8 01 00 00 00       	mov    eax,0x1
c002726d:	31 d2                	xor    edx,edx
c002726f:	f7 f7                	div    edi
c0027271:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027275:	89 f0                	mov    eax,esi
c0027277:	31 d2                	xor    edx,edx
c0027279:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002727d:	f7 f7                	div    edi
c002727f:	89 e8                	mov    eax,ebp
c0027281:	f7 f7                	div    edi
c0027283:	89 d6                	mov    esi,edx
c0027285:	eb bd                	jmp    c0027244 <__moddi3+0x50>
c0027287:	90                   	nop
c0027288:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002728c:	39 f7                	cmp    edi,esi
c002728e:	76 20                	jbe    c00272b0 <__moddi3+0xbc>
c0027290:	89 c8                	mov    eax,ecx
c0027292:	89 f2                	mov    edx,esi
c0027294:	eb b2                	jmp    c0027248 <__moddi3+0x54>
c0027296:	66 90                	xchg   ax,ax
c0027298:	f7 d9                	neg    ecx
c002729a:	83 d3 00             	adc    ebx,0x0
c002729d:	f7 db                	neg    ebx
c002729f:	89 de                	mov    esi,ebx
c00272a1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00272a9:	e9 6f ff ff ff       	jmp    c002721d <__moddi3+0x29>
c00272ae:	66 90                	xchg   ax,ax
c00272b0:	0f bd c7             	bsr    eax,edi
c00272b3:	83 f0 1f             	xor    eax,0x1f
c00272b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00272ba:	75 24                	jne    c00272e0 <__moddi3+0xec>
c00272bc:	39 f7                	cmp    edi,esi
c00272be:	72 06                	jb     c00272c6 <__moddi3+0xd2>
c00272c0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00272c4:	77 0c                	ja     c00272d2 <__moddi3+0xde>
c00272c6:	89 e9                	mov    ecx,ebp
c00272c8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00272cc:	19 fe                	sbb    esi,edi
c00272ce:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00272d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00272d6:	89 f2                	mov    edx,esi
c00272d8:	e9 6b ff ff ff       	jmp    c0027248 <__moddi3+0x54>
c00272dd:	8d 76 00             	lea    esi,[esi+0x0]
c00272e0:	b8 20 00 00 00       	mov    eax,0x20
c00272e5:	89 c2                	mov    edx,eax
c00272e7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00272eb:	29 da                	sub    edx,ebx
c00272ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00272f1:	88 d9                	mov    cl,bl
c00272f3:	d3 e7                	shl    edi,cl
c00272f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00272f9:	88 d1                	mov    cl,dl
c00272fb:	d3 e8                	shr    eax,cl
c00272fd:	09 c7                	or     edi,eax
c00272ff:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0027303:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0027307:	89 d8                	mov    eax,ebx
c0027309:	88 d9                	mov    cl,bl
c002730b:	d3 e7                	shl    edi,cl
c002730d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027311:	89 f3                	mov    ebx,esi
c0027313:	88 d1                	mov    cl,dl
c0027315:	d3 eb                	shr    ebx,cl
c0027317:	89 c7                	mov    edi,eax
c0027319:	88 c1                	mov    cl,al
c002731b:	d3 e6                	shl    esi,cl
c002731d:	89 e8                	mov    eax,ebp
c002731f:	88 d1                	mov    cl,dl
c0027321:	d3 e8                	shr    eax,cl
c0027323:	09 f0                	or     eax,esi
c0027325:	89 f9                	mov    ecx,edi
c0027327:	d3 e5                	shl    ebp,cl
c0027329:	89 da                	mov    edx,ebx
c002732b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002732f:	89 d3                	mov    ebx,edx
c0027331:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027335:	89 c6                	mov    esi,eax
c0027337:	89 d1                	mov    ecx,edx
c0027339:	39 d3                	cmp    ebx,edx
c002733b:	72 27                	jb     c0027364 <__moddi3+0x170>
c002733d:	74 21                	je     c0027360 <__moddi3+0x16c>
c002733f:	29 f5                	sub    ebp,esi
c0027341:	19 cb                	sbb    ebx,ecx
c0027343:	89 de                	mov    esi,ebx
c0027345:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0027349:	d3 e6                	shl    esi,cl
c002734b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002734f:	89 f9                	mov    ecx,edi
c0027351:	d3 ed                	shr    ebp,cl
c0027353:	09 ee                	or     esi,ebp
c0027355:	89 f0                	mov    eax,esi
c0027357:	d3 eb                	shr    ebx,cl
c0027359:	89 da                	mov    edx,ebx
c002735b:	e9 e8 fe ff ff       	jmp    c0027248 <__moddi3+0x54>
c0027360:	39 c5                	cmp    ebp,eax
c0027362:	73 db                	jae    c002733f <__moddi3+0x14b>
c0027364:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0027368:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002736c:	89 d1                	mov    ecx,edx
c002736e:	89 c6                	mov    esi,eax
c0027370:	eb cd                	jmp    c002733f <__moddi3+0x14b>
c0027372:	66 90                	xchg   ax,ax

c0027374 <__udivdi3>:
c0027374:	55                   	push   ebp
c0027375:	57                   	push   edi
c0027376:	56                   	push   esi
c0027377:	53                   	push   ebx
c0027378:	83 ec 1c             	sub    esp,0x1c
c002737b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002737f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0027383:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027387:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002738b:	85 d2                	test   edx,edx
c002738d:	75 41                	jne    c00273d0 <__udivdi3+0x5c>
c002738f:	39 f7                	cmp    edi,esi
c0027391:	76 15                	jbe    c00273a8 <__udivdi3+0x34>
c0027393:	89 e8                	mov    eax,ebp
c0027395:	89 f2                	mov    edx,esi
c0027397:	f7 f7                	div    edi
c0027399:	31 db                	xor    ebx,ebx
c002739b:	89 da                	mov    edx,ebx
c002739d:	83 c4 1c             	add    esp,0x1c
c00273a0:	5b                   	pop    ebx
c00273a1:	5e                   	pop    esi
c00273a2:	5f                   	pop    edi
c00273a3:	5d                   	pop    ebp
c00273a4:	c3                   	ret    
c00273a5:	8d 76 00             	lea    esi,[esi+0x0]
c00273a8:	89 f9                	mov    ecx,edi
c00273aa:	85 ff                	test   edi,edi
c00273ac:	75 0b                	jne    c00273b9 <__udivdi3+0x45>
c00273ae:	b8 01 00 00 00       	mov    eax,0x1
c00273b3:	31 d2                	xor    edx,edx
c00273b5:	f7 f7                	div    edi
c00273b7:	89 c1                	mov    ecx,eax
c00273b9:	31 d2                	xor    edx,edx
c00273bb:	89 f0                	mov    eax,esi
c00273bd:	f7 f1                	div    ecx
c00273bf:	89 c3                	mov    ebx,eax
c00273c1:	89 e8                	mov    eax,ebp
c00273c3:	f7 f1                	div    ecx
c00273c5:	89 da                	mov    edx,ebx
c00273c7:	83 c4 1c             	add    esp,0x1c
c00273ca:	5b                   	pop    ebx
c00273cb:	5e                   	pop    esi
c00273cc:	5f                   	pop    edi
c00273cd:	5d                   	pop    ebp
c00273ce:	c3                   	ret    
c00273cf:	90                   	nop
c00273d0:	39 f2                	cmp    edx,esi
c00273d2:	77 1c                	ja     c00273f0 <__udivdi3+0x7c>
c00273d4:	0f bd da             	bsr    ebx,edx
c00273d7:	83 f3 1f             	xor    ebx,0x1f
c00273da:	75 24                	jne    c0027400 <__udivdi3+0x8c>
c00273dc:	39 f2                	cmp    edx,esi
c00273de:	72 08                	jb     c00273e8 <__udivdi3+0x74>
c00273e0:	39 ef                	cmp    edi,ebp
c00273e2:	0f 87 84 00 00 00    	ja     c002746c <__udivdi3+0xf8>
c00273e8:	b8 01 00 00 00       	mov    eax,0x1
c00273ed:	eb ac                	jmp    c002739b <__udivdi3+0x27>
c00273ef:	90                   	nop
c00273f0:	31 db                	xor    ebx,ebx
c00273f2:	31 c0                	xor    eax,eax
c00273f4:	89 da                	mov    edx,ebx
c00273f6:	83 c4 1c             	add    esp,0x1c
c00273f9:	5b                   	pop    ebx
c00273fa:	5e                   	pop    esi
c00273fb:	5f                   	pop    edi
c00273fc:	5d                   	pop    ebp
c00273fd:	c3                   	ret    
c00273fe:	66 90                	xchg   ax,ax
c0027400:	b8 20 00 00 00       	mov    eax,0x20
c0027405:	29 d8                	sub    eax,ebx
c0027407:	88 d9                	mov    cl,bl
c0027409:	d3 e2                	shl    edx,cl
c002740b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002740f:	89 fa                	mov    edx,edi
c0027411:	88 c1                	mov    cl,al
c0027413:	d3 ea                	shr    edx,cl
c0027415:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027419:	09 d1                	or     ecx,edx
c002741b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002741f:	88 d9                	mov    cl,bl
c0027421:	d3 e7                	shl    edi,cl
c0027423:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027427:	89 f7                	mov    edi,esi
c0027429:	88 c1                	mov    cl,al
c002742b:	d3 ef                	shr    edi,cl
c002742d:	88 d9                	mov    cl,bl
c002742f:	d3 e6                	shl    esi,cl
c0027431:	89 ea                	mov    edx,ebp
c0027433:	88 c1                	mov    cl,al
c0027435:	d3 ea                	shr    edx,cl
c0027437:	09 d6                	or     esi,edx
c0027439:	89 f0                	mov    eax,esi
c002743b:	89 fa                	mov    edx,edi
c002743d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0027441:	89 d7                	mov    edi,edx
c0027443:	89 c6                	mov    esi,eax
c0027445:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027449:	39 d7                	cmp    edi,edx
c002744b:	72 13                	jb     c0027460 <__udivdi3+0xec>
c002744d:	74 09                	je     c0027458 <__udivdi3+0xe4>
c002744f:	89 f0                	mov    eax,esi
c0027451:	31 db                	xor    ebx,ebx
c0027453:	e9 43 ff ff ff       	jmp    c002739b <__udivdi3+0x27>
c0027458:	88 d9                	mov    cl,bl
c002745a:	d3 e5                	shl    ebp,cl
c002745c:	39 c5                	cmp    ebp,eax
c002745e:	73 ef                	jae    c002744f <__udivdi3+0xdb>
c0027460:	8d 46 ff             	lea    eax,[esi-0x1]
c0027463:	31 db                	xor    ebx,ebx
c0027465:	e9 31 ff ff ff       	jmp    c002739b <__udivdi3+0x27>
c002746a:	66 90                	xchg   ax,ax
c002746c:	31 c0                	xor    eax,eax
c002746e:	e9 28 ff ff ff       	jmp    c002739b <__udivdi3+0x27>
c0027473:	90                   	nop

c0027474 <__umoddi3>:
c0027474:	55                   	push   ebp
c0027475:	57                   	push   edi
c0027476:	56                   	push   esi
c0027477:	53                   	push   ebx
c0027478:	83 ec 1c             	sub    esp,0x1c
c002747b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002747f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0027483:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027487:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002748b:	89 da                	mov    edx,ebx
c002748d:	85 c0                	test   eax,eax
c002748f:	75 37                	jne    c00274c8 <__umoddi3+0x54>
c0027491:	39 df                	cmp    edi,ebx
c0027493:	76 13                	jbe    c00274a8 <__umoddi3+0x34>
c0027495:	89 f0                	mov    eax,esi
c0027497:	f7 f7                	div    edi
c0027499:	89 d0                	mov    eax,edx
c002749b:	31 d2                	xor    edx,edx
c002749d:	83 c4 1c             	add    esp,0x1c
c00274a0:	5b                   	pop    ebx
c00274a1:	5e                   	pop    esi
c00274a2:	5f                   	pop    edi
c00274a3:	5d                   	pop    ebp
c00274a4:	c3                   	ret    
c00274a5:	8d 76 00             	lea    esi,[esi+0x0]
c00274a8:	89 fd                	mov    ebp,edi
c00274aa:	85 ff                	test   edi,edi
c00274ac:	75 0b                	jne    c00274b9 <__umoddi3+0x45>
c00274ae:	b8 01 00 00 00       	mov    eax,0x1
c00274b3:	31 d2                	xor    edx,edx
c00274b5:	f7 f7                	div    edi
c00274b7:	89 c5                	mov    ebp,eax
c00274b9:	89 d8                	mov    eax,ebx
c00274bb:	31 d2                	xor    edx,edx
c00274bd:	f7 f5                	div    ebp
c00274bf:	89 f0                	mov    eax,esi
c00274c1:	f7 f5                	div    ebp
c00274c3:	89 d0                	mov    eax,edx
c00274c5:	eb d4                	jmp    c002749b <__umoddi3+0x27>
c00274c7:	90                   	nop
c00274c8:	89 f1                	mov    ecx,esi
c00274ca:	39 d8                	cmp    eax,ebx
c00274cc:	76 0a                	jbe    c00274d8 <__umoddi3+0x64>
c00274ce:	89 f0                	mov    eax,esi
c00274d0:	83 c4 1c             	add    esp,0x1c
c00274d3:	5b                   	pop    ebx
c00274d4:	5e                   	pop    esi
c00274d5:	5f                   	pop    edi
c00274d6:	5d                   	pop    ebp
c00274d7:	c3                   	ret    
c00274d8:	0f bd e8             	bsr    ebp,eax
c00274db:	83 f5 1f             	xor    ebp,0x1f
c00274de:	75 1c                	jne    c00274fc <__umoddi3+0x88>
c00274e0:	39 d8                	cmp    eax,ebx
c00274e2:	72 04                	jb     c00274e8 <__umoddi3+0x74>
c00274e4:	39 f7                	cmp    edi,esi
c00274e6:	77 08                	ja     c00274f0 <__umoddi3+0x7c>
c00274e8:	89 da                	mov    edx,ebx
c00274ea:	29 fe                	sub    esi,edi
c00274ec:	19 c2                	sbb    edx,eax
c00274ee:	89 f1                	mov    ecx,esi
c00274f0:	89 c8                	mov    eax,ecx
c00274f2:	83 c4 1c             	add    esp,0x1c
c00274f5:	5b                   	pop    ebx
c00274f6:	5e                   	pop    esi
c00274f7:	5f                   	pop    edi
c00274f8:	5d                   	pop    ebp
c00274f9:	c3                   	ret    
c00274fa:	66 90                	xchg   ax,ax
c00274fc:	ba 20 00 00 00       	mov    edx,0x20
c0027501:	29 ea                	sub    edx,ebp
c0027503:	89 e9                	mov    ecx,ebp
c0027505:	d3 e0                	shl    eax,cl
c0027507:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002750b:	89 f8                	mov    eax,edi
c002750d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0027511:	88 d1                	mov    cl,dl
c0027513:	d3 e8                	shr    eax,cl
c0027515:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027519:	09 c1                	or     ecx,eax
c002751b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002751f:	89 e9                	mov    ecx,ebp
c0027521:	d3 e7                	shl    edi,cl
c0027523:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027527:	89 d8                	mov    eax,ebx
c0027529:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002752d:	88 d1                	mov    cl,dl
c002752f:	d3 e8                	shr    eax,cl
c0027531:	89 c7                	mov    edi,eax
c0027533:	89 e9                	mov    ecx,ebp
c0027535:	d3 e3                	shl    ebx,cl
c0027537:	89 f0                	mov    eax,esi
c0027539:	88 d1                	mov    cl,dl
c002753b:	d3 e8                	shr    eax,cl
c002753d:	09 d8                	or     eax,ebx
c002753f:	89 e9                	mov    ecx,ebp
c0027541:	d3 e6                	shl    esi,cl
c0027543:	89 f3                	mov    ebx,esi
c0027545:	89 fa                	mov    edx,edi
c0027547:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002754b:	89 d1                	mov    ecx,edx
c002754d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027551:	89 c6                	mov    esi,eax
c0027553:	89 d7                	mov    edi,edx
c0027555:	39 d1                	cmp    ecx,edx
c0027557:	72 27                	jb     c0027580 <__umoddi3+0x10c>
c0027559:	74 21                	je     c002757c <__umoddi3+0x108>
c002755b:	89 ca                	mov    edx,ecx
c002755d:	29 f3                	sub    ebx,esi
c002755f:	19 fa                	sbb    edx,edi
c0027561:	89 d0                	mov    eax,edx
c0027563:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0027567:	d3 e0                	shl    eax,cl
c0027569:	89 e9                	mov    ecx,ebp
c002756b:	d3 eb                	shr    ebx,cl
c002756d:	09 d8                	or     eax,ebx
c002756f:	d3 ea                	shr    edx,cl
c0027571:	83 c4 1c             	add    esp,0x1c
c0027574:	5b                   	pop    ebx
c0027575:	5e                   	pop    esi
c0027576:	5f                   	pop    edi
c0027577:	5d                   	pop    ebp
c0027578:	c3                   	ret    
c0027579:	8d 76 00             	lea    esi,[esi+0x0]
c002757c:	39 c3                	cmp    ebx,eax
c002757e:	73 db                	jae    c002755b <__umoddi3+0xe7>
c0027580:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0027584:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0027588:	89 d7                	mov    edi,edx
c002758a:	89 c6                	mov    esi,eax
c002758c:	eb cd                	jmp    c002755b <__umoddi3+0xe7>

c002758e <__addsf3>:
c002758e:	55                   	push   ebp
c002758f:	89 e5                	mov    ebp,esp
c0027591:	57                   	push   edi
c0027592:	56                   	push   esi
c0027593:	53                   	push   ebx
c0027594:	83 ec 08             	sub    esp,0x8
c0027597:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002759a:	89 fa                	mov    edx,edi
c002759c:	89 f8                	mov    eax,edi
c002759e:	c1 f8 17             	sar    eax,0x17
c00275a1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00275a4:	c1 e2 08             	shl    edx,0x8
c00275a7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00275ad:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00275b0:	89 de                	mov    esi,ebx
c00275b2:	c1 fe 17             	sar    esi,0x17
c00275b5:	c1 e3 08             	shl    ebx,0x8
c00275b8:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00275be:	31 f0                	xor    eax,esi
c00275c0:	0f 88 3b 01 00 00    	js     c0027701 <__addsf3+0x173>
c00275c6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00275c9:	29 f1                	sub    ecx,esi
c00275cb:	85 c9                	test   ecx,ecx
c00275cd:	7e 54                	jle    c0027623 <__addsf3+0x95>
c00275cf:	89 f0                	mov    eax,esi
c00275d1:	84 c0                	test   al,al
c00275d3:	75 10                	jne    c00275e5 <__addsf3+0x57>
c00275d5:	85 db                	test   ebx,ebx
c00275d7:	0f 84 aa 02 00 00    	je     c0027887 <__addsf3+0x2f9>
c00275dd:	49                   	dec    ecx
c00275de:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00275e1:	74 38                	je     c002761b <__addsf3+0x8d>
c00275e3:	eb 13                	jmp    c00275f8 <__addsf3+0x6a>
c00275e5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00275e8:	f7 d0                	not    eax
c00275ea:	84 c0                	test   al,al
c00275ec:	0f 84 95 02 00 00    	je     c0027887 <__addsf3+0x2f9>
c00275f2:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00275f8:	83 f9 1f             	cmp    ecx,0x1f
c00275fb:	0f 8f 86 02 00 00    	jg     c0027887 <__addsf3+0x2f9>
c0027601:	89 de                	mov    esi,ebx
c0027603:	d3 ee                	shr    esi,cl
c0027605:	b8 20 00 00 00       	mov    eax,0x20
c002760a:	29 c8                	sub    eax,ecx
c002760c:	89 c1                	mov    ecx,eax
c002760e:	d3 e3                	shl    ebx,cl
c0027610:	31 c0                	xor    eax,eax
c0027612:	85 db                	test   ebx,ebx
c0027614:	0f 95 c0             	setne  al
c0027617:	09 f0                	or     eax,esi
c0027619:	01 d0                	add    eax,edx
c002761b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002761e:	e9 b6 00 00 00       	jmp    c00276d9 <__addsf3+0x14b>
c0027623:	74 5c                	je     c0027681 <__addsf3+0xf3>
c0027625:	89 f1                	mov    ecx,esi
c0027627:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c002762a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002762d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027631:	75 14                	jne    c0027647 <__addsf3+0xb9>
c0027633:	85 d2                	test   edx,edx
c0027635:	0f 84 4c 02 00 00    	je     c0027887 <__addsf3+0x2f9>
c002763b:	49                   	dec    ecx
c002763c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002763f:	0f 84 94 00 00 00    	je     c00276d9 <__addsf3+0x14b>
c0027645:	eb 12                	jmp    c0027659 <__addsf3+0xcb>
c0027647:	89 f0                	mov    eax,esi
c0027649:	f7 d0                	not    eax
c002764b:	84 c0                	test   al,al
c002764d:	0f 84 34 02 00 00    	je     c0027887 <__addsf3+0x2f9>
c0027653:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027659:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002765c:	83 f9 1f             	cmp    ecx,0x1f
c002765f:	0f 8f 22 02 00 00    	jg     c0027887 <__addsf3+0x2f9>
c0027665:	89 d7                	mov    edi,edx
c0027667:	d3 ef                	shr    edi,cl
c0027669:	b8 20 00 00 00       	mov    eax,0x20
c002766e:	29 c8                	sub    eax,ecx
c0027670:	89 c1                	mov    ecx,eax
c0027672:	d3 e2                	shl    edx,cl
c0027674:	31 c0                	xor    eax,eax
c0027676:	85 d2                	test   edx,edx
c0027678:	0f 95 c0             	setne  al
c002767b:	09 f8                	or     eax,edi
c002767d:	01 d8                	add    eax,ebx
c002767f:	eb 58                	jmp    c00276d9 <__addsf3+0x14b>
c0027681:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027684:	8d 70 01             	lea    esi,[eax+0x1]
c0027687:	f7 c6 fe 00 00 00    	test   esi,0xfe
c002768d:	75 32                	jne    c00276c1 <__addsf3+0x133>
c002768f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027693:	75 1f                	jne    c00276b4 <__addsf3+0x126>
c0027695:	85 d2                	test   edx,edx
c0027697:	0f 84 e0 01 00 00    	je     c002787d <__addsf3+0x2ef>
c002769d:	85 db                	test   ebx,ebx
c002769f:	0f 84 e2 01 00 00    	je     c0027887 <__addsf3+0x2f9>
c00276a5:	89 d0                	mov    eax,edx
c00276a7:	01 d8                	add    eax,ebx
c00276a9:	0f 89 a9 01 00 00    	jns    c0027858 <__addsf3+0x2ca>
c00276af:	e9 9d 01 00 00       	jmp    c0027851 <__addsf3+0x2c3>
c00276b4:	85 d2                	test   edx,edx
c00276b6:	0f 85 cb 01 00 00    	jne    c0027887 <__addsf3+0x2f9>
c00276bc:	e9 bc 01 00 00       	jmp    c002787d <__addsf3+0x2ef>
c00276c1:	31 c0                	xor    eax,eax
c00276c3:	89 f1                	mov    ecx,esi
c00276c5:	f7 d1                	not    ecx
c00276c7:	84 c9                	test   cl,cl
c00276c9:	0f 84 90 01 00 00    	je     c002785f <__addsf3+0x2d1>
c00276cf:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00276d2:	d1 e8                	shr    eax,1
c00276d4:	e9 86 01 00 00       	jmp    c002785f <__addsf3+0x2d1>
c00276d9:	85 c0                	test   eax,eax
c00276db:	0f 89 7e 01 00 00    	jns    c002785f <__addsf3+0x2d1>
c00276e1:	46                   	inc    esi
c00276e2:	89 f2                	mov    edx,esi
c00276e4:	f7 d2                	not    edx
c00276e6:	84 d2                	test   dl,dl
c00276e8:	0f 84 6f 01 00 00    	je     c002785d <__addsf3+0x2cf>
c00276ee:	89 c2                	mov    edx,eax
c00276f0:	83 e2 01             	and    edx,0x1
c00276f3:	d1 e8                	shr    eax,1
c00276f5:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00276fa:	09 d0                	or     eax,edx
c00276fc:	e9 5e 01 00 00       	jmp    c002785f <__addsf3+0x2d1>
c0027701:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0027705:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027708:	89 f0                	mov    eax,esi
c002770a:	0f b6 c0             	movzx  eax,al
c002770d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027710:	29 c1                	sub    ecx,eax
c0027712:	85 c9                	test   ecx,ecx
c0027714:	7e 55                	jle    c002776b <__addsf3+0x1dd>
c0027716:	85 c0                	test   eax,eax
c0027718:	75 11                	jne    c002772b <__addsf3+0x19d>
c002771a:	85 db                	test   ebx,ebx
c002771c:	0f 84 65 01 00 00    	je     c0027887 <__addsf3+0x2f9>
c0027722:	49                   	dec    ecx
c0027723:	75 19                	jne    c002773e <__addsf3+0x1b0>
c0027725:	89 d0                	mov    eax,edx
c0027727:	29 d8                	sub    eax,ebx
c0027729:	eb 38                	jmp    c0027763 <__addsf3+0x1d5>
c002772b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002772e:	f7 d0                	not    eax
c0027730:	84 c0                	test   al,al
c0027732:	0f 84 4f 01 00 00    	je     c0027887 <__addsf3+0x2f9>
c0027738:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002773e:	83 f9 1f             	cmp    ecx,0x1f
c0027741:	0f 8f 40 01 00 00    	jg     c0027887 <__addsf3+0x2f9>
c0027747:	89 de                	mov    esi,ebx
c0027749:	d3 ee                	shr    esi,cl
c002774b:	b8 20 00 00 00       	mov    eax,0x20
c0027750:	29 c8                	sub    eax,ecx
c0027752:	89 c1                	mov    ecx,eax
c0027754:	d3 e3                	shl    ebx,cl
c0027756:	31 c0                	xor    eax,eax
c0027758:	85 db                	test   ebx,ebx
c002775a:	0f 95 c0             	setne  al
c002775d:	09 f0                	or     eax,esi
c002775f:	29 c2                	sub    edx,eax
c0027761:	89 d0                	mov    eax,edx
c0027763:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027766:	e9 af 00 00 00       	jmp    c002781a <__addsf3+0x28c>
c002776b:	74 5c                	je     c00277c9 <__addsf3+0x23b>
c002776d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0027770:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027773:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027777:	75 14                	jne    c002778d <__addsf3+0x1ff>
c0027779:	85 d2                	test   edx,edx
c002777b:	0f 84 06 01 00 00    	je     c0027887 <__addsf3+0x2f9>
c0027781:	48                   	dec    eax
c0027782:	75 1b                	jne    c002779f <__addsf3+0x211>
c0027784:	89 d8                	mov    eax,ebx
c0027786:	29 d0                	sub    eax,edx
c0027788:	e9 8d 00 00 00       	jmp    c002781a <__addsf3+0x28c>
c002778d:	89 f1                	mov    ecx,esi
c002778f:	f7 d1                	not    ecx
c0027791:	84 c9                	test   cl,cl
c0027793:	0f 84 ee 00 00 00    	je     c0027887 <__addsf3+0x2f9>
c0027799:	81 ca 00 00 00 80    	or     edx,0x80000000
c002779f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00277a2:	83 f8 1f             	cmp    eax,0x1f
c00277a5:	0f 8f dc 00 00 00    	jg     c0027887 <__addsf3+0x2f9>
c00277ab:	89 d7                	mov    edi,edx
c00277ad:	88 c1                	mov    cl,al
c00277af:	d3 ef                	shr    edi,cl
c00277b1:	b9 20 00 00 00       	mov    ecx,0x20
c00277b6:	29 c1                	sub    ecx,eax
c00277b8:	d3 e2                	shl    edx,cl
c00277ba:	31 c0                	xor    eax,eax
c00277bc:	85 d2                	test   edx,edx
c00277be:	0f 95 c0             	setne  al
c00277c1:	09 f8                	or     eax,edi
c00277c3:	29 c3                	sub    ebx,eax
c00277c5:	89 d8                	mov    eax,ebx
c00277c7:	eb 51                	jmp    c002781a <__addsf3+0x28c>
c00277c9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00277cc:	40                   	inc    eax
c00277cd:	a8 fe                	test   al,0xfe
c00277cf:	75 3d                	jne    c002780e <__addsf3+0x280>
c00277d1:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00277d5:	0f 85 a7 00 00 00    	jne    c0027882 <__addsf3+0x2f4>
c00277db:	85 d2                	test   edx,edx
c00277dd:	75 12                	jne    c00277f1 <__addsf3+0x263>
c00277df:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00277e2:	85 db                	test   ebx,ebx
c00277e4:	0f 85 9d 00 00 00    	jne    c0027887 <__addsf3+0x2f9>
c00277ea:	31 ff                	xor    edi,edi
c00277ec:	e9 96 00 00 00       	jmp    c0027887 <__addsf3+0x2f9>
c00277f1:	85 db                	test   ebx,ebx
c00277f3:	0f 84 8e 00 00 00    	je     c0027887 <__addsf3+0x2f9>
c00277f9:	89 d0                	mov    eax,edx
c00277fb:	29 d8                	sub    eax,ebx
c00277fd:	79 06                	jns    c0027805 <__addsf3+0x277>
c00277ff:	89 d8                	mov    eax,ebx
c0027801:	29 d0                	sub    eax,edx
c0027803:	eb 5a                	jmp    c002785f <__addsf3+0x2d1>
c0027805:	bf 00 00 00 00       	mov    edi,0x0
c002780a:	74 7b                	je     c0027887 <__addsf3+0x2f9>
c002780c:	eb 4a                	jmp    c0027858 <__addsf3+0x2ca>
c002780e:	89 d0                	mov    eax,edx
c0027810:	29 d8                	sub    eax,ebx
c0027812:	79 12                	jns    c0027826 <__addsf3+0x298>
c0027814:	89 d8                	mov    eax,ebx
c0027816:	29 d0                	sub    eax,edx
c0027818:	eb 09                	jmp    c0027823 <__addsf3+0x295>
c002781a:	85 c0                	test   eax,eax
c002781c:	79 41                	jns    c002785f <__addsf3+0x2d1>
c002781e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027823:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0027826:	31 f6                	xor    esi,esi
c0027828:	85 c0                	test   eax,eax
c002782a:	74 33                	je     c002785f <__addsf3+0x2d1>
c002782c:	0f bd c8             	bsr    ecx,eax
c002782f:	83 f1 1f             	xor    ecx,0x1f
c0027832:	d3 e0                	shl    eax,cl
c0027834:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0027838:	39 ca                	cmp    edx,ecx
c002783a:	7f 10                	jg     c002784c <__addsf3+0x2be>
c002783c:	29 d1                	sub    ecx,edx
c002783e:	41                   	inc    ecx
c002783f:	d3 e8                	shr    eax,cl
c0027841:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027844:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c002784a:	eb 13                	jmp    c002785f <__addsf3+0x2d1>
c002784c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002784f:	29 ce                	sub    esi,ecx
c0027851:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027856:	eb 07                	jmp    c002785f <__addsf3+0x2d1>
c0027858:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002785b:	eb 02                	jmp    c002785f <__addsf3+0x2d1>
c002785d:	31 c0                	xor    eax,eax
c002785f:	89 c2                	mov    edx,eax
c0027861:	c1 ea 08             	shr    edx,0x8
c0027864:	a8 7f                	test   al,0x7f
c0027866:	0f 95 c1             	setne  cl
c0027869:	09 d1                	or     ecx,edx
c002786b:	83 e1 01             	and    ecx,0x1
c002786e:	c1 e8 07             	shr    eax,0x7
c0027871:	21 c8                	and    eax,ecx
c0027873:	c1 e6 17             	shl    esi,0x17
c0027876:	09 d6                	or     esi,edx
c0027878:	8d 3c 30             	lea    edi,[eax+esi*1]
c002787b:	eb 0a                	jmp    c0027887 <__addsf3+0x2f9>
c002787d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027880:	eb 05                	jmp    c0027887 <__addsf3+0x2f9>
c0027882:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0027887:	89 f8                	mov    eax,edi
c0027889:	5a                   	pop    edx
c002788a:	59                   	pop    ecx
c002788b:	5b                   	pop    ebx
c002788c:	5e                   	pop    esi
c002788d:	5f                   	pop    edi
c002788e:	5d                   	pop    ebp
c002788f:	c3                   	ret    

c0027890 <__subsf3>:
c0027890:	55                   	push   ebp
c0027891:	89 e5                	mov    ebp,esp
c0027893:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027896:	05 00 00 00 80       	add    eax,0x80000000
c002789b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002789e:	5d                   	pop    ebp
c002789f:	e9 ea fc ff ff       	jmp    c002758e <__addsf3>

c00278a4 <__negsf2>:
c00278a4:	55                   	push   ebp
c00278a5:	89 e5                	mov    ebp,esp
c00278a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00278aa:	05 00 00 00 80       	add    eax,0x80000000
c00278af:	5d                   	pop    ebp
c00278b0:	c3                   	ret    

c00278b1 <__mulsf3>:
c00278b1:	55                   	push   ebp
c00278b2:	89 e5                	mov    ebp,esp
c00278b4:	57                   	push   edi
c00278b5:	56                   	push   esi
c00278b6:	53                   	push   ebx
c00278b7:	83 ec 1c             	sub    esp,0x1c
c00278ba:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00278bd:	89 f0                	mov    eax,esi
c00278bf:	89 f1                	mov    ecx,esi
c00278c1:	c1 f9 17             	sar    ecx,0x17
c00278c4:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00278c7:	c1 e0 08             	shl    eax,0x8
c00278ca:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00278cf:	89 c1                	mov    ecx,eax
c00278d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00278d4:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00278d7:	89 c7                	mov    edi,eax
c00278d9:	c1 ff 17             	sar    edi,0x17
c00278dc:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00278e0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00278e3:	89 f8                	mov    eax,edi
c00278e5:	0f b6 c0             	movzx  eax,al
c00278e8:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00278eb:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c00278ef:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00278f2:	42                   	inc    edx
c00278f3:	80 e2 fe             	and    dl,0xfe
c00278f6:	75 7b                	jne    c0027973 <__mulsf3+0xc2>
c00278f8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00278fc:	74 54                	je     c0027952 <__mulsf3+0xa1>
c00278fe:	85 c9                	test   ecx,ecx
c0027900:	0f 85 64 01 00 00    	jne    c0027a6a <__mulsf3+0x1b9>
c0027906:	8d 57 01             	lea    edx,[edi+0x1]
c0027909:	80 e2 fe             	and    dl,0xfe
c002790c:	75 1f                	jne    c002792d <__mulsf3+0x7c>
c002790e:	85 c0                	test   eax,eax
c0027910:	b8 00 00 00 00       	mov    eax,0x0
c0027915:	74 29                	je     c0027940 <__mulsf3+0x8f>
c0027917:	53                   	push   ebx
c0027918:	53                   	push   ebx
c0027919:	50                   	push   eax
c002791a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002791d:	e8 96 05 00 00       	call   c0027eb8 <__nesf2>
c0027922:	83 c4 10             	add    esp,0x10
c0027925:	85 c0                	test   eax,eax
c0027927:	0f 85 3a 01 00 00    	jne    c0027a67 <__mulsf3+0x1b6>
c002792d:	85 ff                	test   edi,edi
c002792f:	0f 89 35 01 00 00    	jns    c0027a6a <__mulsf3+0x1b9>
c0027935:	81 c6 00 00 00 80    	add    esi,0x80000000
c002793b:	e9 2a 01 00 00       	jmp    c0027a6a <__mulsf3+0x1b9>
c0027940:	51                   	push   ecx
c0027941:	51                   	push   ecx
c0027942:	50                   	push   eax
c0027943:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027946:	e8 6d 05 00 00       	call   c0027eb8 <__nesf2>
c002794b:	83 c4 10             	add    esp,0x10
c002794e:	85 c0                	test   eax,eax
c0027950:	eb 15                	jmp    c0027967 <__mulsf3+0xb6>
c0027952:	85 c9                	test   ecx,ecx
c0027954:	74 0b                	je     c0027961 <__mulsf3+0xb0>
c0027956:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027959:	01 c9                	add    ecx,ecx
c002795b:	78 16                	js     c0027973 <__mulsf3+0xc2>
c002795d:	89 d3                	mov    ebx,edx
c002795f:	eb f5                	jmp    c0027956 <__mulsf3+0xa5>
c0027961:	89 f8                	mov    eax,edi
c0027963:	f7 d0                	not    eax
c0027965:	84 c0                	test   al,al
c0027967:	75 c4                	jne    c002792d <__mulsf3+0x7c>
c0027969:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c002796e:	e9 f7 00 00 00       	jmp    c0027a6a <__mulsf3+0x1b9>
c0027973:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027976:	c1 e6 08             	shl    esi,0x8
c0027979:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c002797f:	8d 57 01             	lea    edx,[edi+0x1]
c0027982:	80 e2 fe             	and    dl,0xfe
c0027985:	75 63                	jne    c00279ea <__mulsf3+0x139>
c0027987:	85 c0                	test   eax,eax
c0027989:	74 2f                	je     c00279ba <__mulsf3+0x109>
c002798b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002798f:	0f 89 d2 00 00 00    	jns    c0027a67 <__mulsf3+0x1b6>
c0027995:	52                   	push   edx
c0027996:	52                   	push   edx
c0027997:	6a 00                	push   0x0
c0027999:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002799c:	e8 dc 04 00 00       	call   c0027e7d <__eqsf2>
c00279a1:	83 c4 10             	add    esp,0x10
c00279a4:	85 c0                	test   eax,eax
c00279a6:	0f 85 bb 00 00 00    	jne    c0027a67 <__mulsf3+0x1b6>
c00279ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00279af:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c00279b5:	e9 b0 00 00 00       	jmp    c0027a6a <__mulsf3+0x1b9>
c00279ba:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00279bd:	50                   	push   eax
c00279be:	50                   	push   eax
c00279bf:	6a 00                	push   0x0
c00279c1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00279c4:	e8 b4 04 00 00       	call   c0027e7d <__eqsf2>
c00279c9:	83 c4 10             	add    esp,0x10
c00279cc:	85 c0                	test   eax,eax
c00279ce:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00279d1:	75 0c                	jne    c00279df <__mulsf3+0x12e>
c00279d3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00279d7:	0f 89 8a 00 00 00    	jns    c0027a67 <__mulsf3+0x1b6>
c00279dd:	eb cd                	jmp    c00279ac <__mulsf3+0xfb>
c00279df:	8d 43 ff             	lea    eax,[ebx-0x1]
c00279e2:	01 f6                	add    esi,esi
c00279e4:	78 04                	js     c00279ea <__mulsf3+0x139>
c00279e6:	89 c3                	mov    ebx,eax
c00279e8:	eb f5                	jmp    c00279df <__mulsf3+0x12e>
c00279ea:	89 c8                	mov    eax,ecx
c00279ec:	0d 00 00 00 80       	or     eax,0x80000000
c00279f1:	81 ce 00 00 00 80    	or     esi,0x80000000
c00279f7:	f7 e6                	mul    esi
c00279f9:	85 c0                	test   eax,eax
c00279fb:	0f 95 c0             	setne  al
c00279fe:	0f b6 c0             	movzx  eax,al
c0027a01:	09 c2                	or     edx,eax
c0027a03:	78 03                	js     c0027a08 <__mulsf3+0x157>
c0027a05:	01 d2                	add    edx,edx
c0027a07:	4b                   	dec    ebx
c0027a08:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027a0e:	7f 22                	jg     c0027a32 <__mulsf3+0x181>
c0027a10:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027a16:	85 db                	test   ebx,ebx
c0027a18:	7f 23                	jg     c0027a3d <__mulsf3+0x18c>
c0027a1a:	83 fb e9             	cmp    ebx,0xffffffe9
c0027a1d:	7c 1a                	jl     c0027a39 <__mulsf3+0x188>
c0027a1f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027a25:	b9 01 00 00 00       	mov    ecx,0x1
c0027a2a:	29 d9                	sub    ecx,ebx
c0027a2c:	d3 ea                	shr    edx,cl
c0027a2e:	31 db                	xor    ebx,ebx
c0027a30:	eb 0b                	jmp    c0027a3d <__mulsf3+0x18c>
c0027a32:	bb ff 00 00 00       	mov    ebx,0xff
c0027a37:	eb 02                	jmp    c0027a3b <__mulsf3+0x18a>
c0027a39:	31 db                	xor    ebx,ebx
c0027a3b:	31 d2                	xor    edx,edx
c0027a3d:	89 d0                	mov    eax,edx
c0027a3f:	c1 e8 08             	shr    eax,0x8
c0027a42:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027a45:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027a4b:	09 fb                	or     ebx,edi
c0027a4d:	c1 e3 17             	shl    ebx,0x17
c0027a50:	09 c3                	or     ebx,eax
c0027a52:	f6 c2 7f             	test   dl,0x7f
c0027a55:	0f 95 c1             	setne  cl
c0027a58:	09 c8                	or     eax,ecx
c0027a5a:	83 e0 01             	and    eax,0x1
c0027a5d:	c1 ea 07             	shr    edx,0x7
c0027a60:	21 c2                	and    edx,eax
c0027a62:	8d 34 13             	lea    esi,[ebx+edx*1]
c0027a65:	eb 03                	jmp    c0027a6a <__mulsf3+0x1b9>
c0027a67:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0027a6a:	89 f0                	mov    eax,esi
c0027a6c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027a6f:	5b                   	pop    ebx
c0027a70:	5e                   	pop    esi
c0027a71:	5f                   	pop    edi
c0027a72:	5d                   	pop    ebp
c0027a73:	c3                   	ret    

c0027a74 <__divsf3>:
c0027a74:	55                   	push   ebp
c0027a75:	89 e5                	mov    ebp,esp
c0027a77:	57                   	push   edi
c0027a78:	56                   	push   esi
c0027a79:	53                   	push   ebx
c0027a7a:	83 ec 1c             	sub    esp,0x1c
c0027a7d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027a80:	89 d8                	mov    eax,ebx
c0027a82:	89 d9                	mov    ecx,ebx
c0027a84:	c1 f9 17             	sar    ecx,0x17
c0027a87:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027a8a:	c1 e0 08             	shl    eax,0x8
c0027a8d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027a92:	89 c1                	mov    ecx,eax
c0027a94:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027a97:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027a9a:	89 c7                	mov    edi,eax
c0027a9c:	c1 ff 17             	sar    edi,0x17
c0027a9f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027aa3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027aa6:	89 f8                	mov    eax,edi
c0027aa8:	0f b6 c0             	movzx  eax,al
c0027aab:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027aae:	29 c6                	sub    esi,eax
c0027ab0:	83 c6 7f             	add    esi,0x7f
c0027ab3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027ab6:	42                   	inc    edx
c0027ab7:	80 e2 fe             	and    dl,0xfe
c0027aba:	0f 85 9c 00 00 00    	jne    c0027b5c <__divsf3+0xe8>
c0027ac0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027ac4:	74 33                	je     c0027af9 <__divsf3+0x85>
c0027ac6:	85 c9                	test   ecx,ecx
c0027ac8:	0f 85 c7 01 00 00    	jne    c0027c95 <__divsf3+0x221>
c0027ace:	8d 57 01             	lea    edx,[edi+0x1]
c0027ad1:	80 e2 fe             	and    dl,0xfe
c0027ad4:	75 2f                	jne    c0027b05 <__divsf3+0x91>
c0027ad6:	85 c0                	test   eax,eax
c0027ad8:	74 2b                	je     c0027b05 <__divsf3+0x91>
c0027ada:	51                   	push   ecx
c0027adb:	51                   	push   ecx
c0027adc:	6a 00                	push   0x0
c0027ade:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027ae1:	e8 d2 03 00 00       	call   c0027eb8 <__nesf2>
c0027ae6:	83 c4 10             	add    esp,0x10
c0027ae9:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027aec:	85 c0                	test   eax,eax
c0027aee:	0f 85 a1 01 00 00    	jne    c0027c95 <__divsf3+0x221>
c0027af4:	e9 92 01 00 00       	jmp    c0027c8b <__divsf3+0x217>
c0027af9:	85 c9                	test   ecx,ecx
c0027afb:	75 1b                	jne    c0027b18 <__divsf3+0xa4>
c0027afd:	8d 57 01             	lea    edx,[edi+0x1]
c0027b00:	80 e2 fe             	and    dl,0xfe
c0027b03:	74 1e                	je     c0027b23 <__divsf3+0xaf>
c0027b05:	85 ff                	test   edi,edi
c0027b07:	0f 89 88 01 00 00    	jns    c0027c95 <__divsf3+0x221>
c0027b0d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027b13:	e9 7d 01 00 00       	jmp    c0027c95 <__divsf3+0x221>
c0027b18:	8d 56 ff             	lea    edx,[esi-0x1]
c0027b1b:	01 c9                	add    ecx,ecx
c0027b1d:	78 3d                	js     c0027b5c <__divsf3+0xe8>
c0027b1f:	89 d6                	mov    esi,edx
c0027b21:	eb f5                	jmp    c0027b18 <__divsf3+0xa4>
c0027b23:	85 c0                	test   eax,eax
c0027b25:	b8 00 00 00 00       	mov    eax,0x0
c0027b2a:	74 18                	je     c0027b44 <__divsf3+0xd0>
c0027b2c:	52                   	push   edx
c0027b2d:	52                   	push   edx
c0027b2e:	50                   	push   eax
c0027b2f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027b32:	e8 81 03 00 00       	call   c0027eb8 <__nesf2>
c0027b37:	83 c4 10             	add    esp,0x10
c0027b3a:	85 c0                	test   eax,eax
c0027b3c:	0f 85 50 01 00 00    	jne    c0027c92 <__divsf3+0x21e>
c0027b42:	eb c1                	jmp    c0027b05 <__divsf3+0x91>
c0027b44:	56                   	push   esi
c0027b45:	56                   	push   esi
c0027b46:	50                   	push   eax
c0027b47:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027b4a:	e8 69 03 00 00       	call   c0027eb8 <__nesf2>
c0027b4f:	83 c4 10             	add    esp,0x10
c0027b52:	85 c0                	test   eax,eax
c0027b54:	0f 84 31 01 00 00    	je     c0027c8b <__divsf3+0x217>
c0027b5a:	eb a9                	jmp    c0027b05 <__divsf3+0x91>
c0027b5c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027b5f:	c1 e3 08             	shl    ebx,0x8
c0027b62:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027b68:	8d 57 01             	lea    edx,[edi+0x1]
c0027b6b:	80 e2 fe             	and    dl,0xfe
c0027b6e:	75 71                	jne    c0027be1 <__divsf3+0x16d>
c0027b70:	85 c0                	test   eax,eax
c0027b72:	ba 00 00 00 00       	mov    edx,0x0
c0027b77:	74 2f                	je     c0027ba8 <__divsf3+0x134>
c0027b79:	51                   	push   ecx
c0027b7a:	51                   	push   ecx
c0027b7b:	52                   	push   edx
c0027b7c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027b7f:	e8 f9 02 00 00       	call   c0027e7d <__eqsf2>
c0027b84:	83 c4 10             	add    esp,0x10
c0027b87:	85 c0                	test   eax,eax
c0027b89:	0f 85 03 01 00 00    	jne    c0027c92 <__divsf3+0x21e>
c0027b8f:	31 d2                	xor    edx,edx
c0027b91:	89 d3                	mov    ebx,edx
c0027b93:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b96:	31 f8                	xor    eax,edi
c0027b98:	0f 89 f7 00 00 00    	jns    c0027c95 <__divsf3+0x221>
c0027b9e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027ba3:	e9 ed 00 00 00       	jmp    c0027c95 <__divsf3+0x221>
c0027ba8:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027bab:	50                   	push   eax
c0027bac:	50                   	push   eax
c0027bad:	52                   	push   edx
c0027bae:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027bb1:	e8 c7 02 00 00       	call   c0027e7d <__eqsf2>
c0027bb6:	83 c4 10             	add    esp,0x10
c0027bb9:	85 c0                	test   eax,eax
c0027bbb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027bbe:	75 16                	jne    c0027bd6 <__divsf3+0x162>
c0027bc0:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027bc3:	31 fb                	xor    ebx,edi
c0027bc5:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027bcb:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027bd1:	e9 bf 00 00 00       	jmp    c0027c95 <__divsf3+0x221>
c0027bd6:	8d 46 01             	lea    eax,[esi+0x1]
c0027bd9:	01 db                	add    ebx,ebx
c0027bdb:	78 04                	js     c0027be1 <__divsf3+0x16d>
c0027bdd:	89 c6                	mov    esi,eax
c0027bdf:	eb f5                	jmp    c0027bd6 <__divsf3+0x162>
c0027be1:	89 c8                	mov    eax,ecx
c0027be3:	0d 00 00 00 80       	or     eax,0x80000000
c0027be8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027bee:	31 d2                	xor    edx,edx
c0027bf0:	39 d8                	cmp    eax,ebx
c0027bf2:	72 07                	jb     c0027bfb <__divsf3+0x187>
c0027bf4:	29 d8                	sub    eax,ebx
c0027bf6:	ba 01 00 00 00       	mov    edx,0x1
c0027bfb:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027c02:	01 d2                	add    edx,edx
c0027c04:	89 c1                	mov    ecx,eax
c0027c06:	01 c0                	add    eax,eax
c0027c08:	85 c9                	test   ecx,ecx
c0027c0a:	78 04                	js     c0027c10 <__divsf3+0x19c>
c0027c0c:	39 c3                	cmp    ebx,eax
c0027c0e:	77 05                	ja     c0027c15 <__divsf3+0x1a1>
c0027c10:	29 d8                	sub    eax,ebx
c0027c12:	83 ca 01             	or     edx,0x1
c0027c15:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027c18:	75 e8                	jne    c0027c02 <__divsf3+0x18e>
c0027c1a:	85 c0                	test   eax,eax
c0027c1c:	0f 95 c0             	setne  al
c0027c1f:	0f b6 c0             	movzx  eax,al
c0027c22:	c1 e2 06             	shl    edx,0x6
c0027c25:	09 c2                	or     edx,eax
c0027c27:	78 03                	js     c0027c2c <__divsf3+0x1b8>
c0027c29:	01 d2                	add    edx,edx
c0027c2b:	4e                   	dec    esi
c0027c2c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027c32:	7f 22                	jg     c0027c56 <__divsf3+0x1e2>
c0027c34:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027c3a:	85 f6                	test   esi,esi
c0027c3c:	7f 23                	jg     c0027c61 <__divsf3+0x1ed>
c0027c3e:	83 fe e9             	cmp    esi,0xffffffe9
c0027c41:	7c 1a                	jl     c0027c5d <__divsf3+0x1e9>
c0027c43:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027c49:	b9 01 00 00 00       	mov    ecx,0x1
c0027c4e:	29 f1                	sub    ecx,esi
c0027c50:	d3 ea                	shr    edx,cl
c0027c52:	31 f6                	xor    esi,esi
c0027c54:	eb 0b                	jmp    c0027c61 <__divsf3+0x1ed>
c0027c56:	be ff 00 00 00       	mov    esi,0xff
c0027c5b:	eb 02                	jmp    c0027c5f <__divsf3+0x1eb>
c0027c5d:	31 f6                	xor    esi,esi
c0027c5f:	31 d2                	xor    edx,edx
c0027c61:	89 d0                	mov    eax,edx
c0027c63:	c1 e8 08             	shr    eax,0x8
c0027c66:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027c69:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027c6f:	09 fe                	or     esi,edi
c0027c71:	c1 e6 17             	shl    esi,0x17
c0027c74:	09 c6                	or     esi,eax
c0027c76:	f6 c2 7f             	test   dl,0x7f
c0027c79:	0f 95 c1             	setne  cl
c0027c7c:	09 c8                	or     eax,ecx
c0027c7e:	83 e0 01             	and    eax,0x1
c0027c81:	c1 ea 07             	shr    edx,0x7
c0027c84:	21 c2                	and    edx,eax
c0027c86:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027c89:	eb 0a                	jmp    c0027c95 <__divsf3+0x221>
c0027c8b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027c90:	eb 03                	jmp    c0027c95 <__divsf3+0x221>
c0027c92:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027c95:	89 d8                	mov    eax,ebx
c0027c97:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027c9a:	5b                   	pop    ebx
c0027c9b:	5e                   	pop    esi
c0027c9c:	5f                   	pop    edi
c0027c9d:	5d                   	pop    ebp
c0027c9e:	c3                   	ret    

c0027c9f <__floatsisf>:
c0027c9f:	55                   	push   ebp
c0027ca0:	89 e5                	mov    ebp,esp
c0027ca2:	53                   	push   ebx
c0027ca3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027ca6:	85 d2                	test   edx,edx
c0027ca8:	7e 2b                	jle    c0027cd5 <__floatsisf+0x36>
c0027caa:	0f bd ca             	bsr    ecx,edx
c0027cad:	83 f1 1f             	xor    ecx,0x1f
c0027cb0:	d3 e2                	shl    edx,cl
c0027cb2:	89 d0                	mov    eax,edx
c0027cb4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027cb9:	89 c3                	mov    ebx,eax
c0027cbb:	c1 eb 08             	shr    ebx,0x8
c0027cbe:	80 e2 7f             	and    dl,0x7f
c0027cc1:	0f 95 c2             	setne  dl
c0027cc4:	09 da                	or     edx,ebx
c0027cc6:	83 e2 01             	and    edx,0x1
c0027cc9:	c1 e8 07             	shr    eax,0x7
c0027ccc:	21 c2                	and    edx,eax
c0027cce:	b8 9e 00 00 00       	mov    eax,0x9e
c0027cd3:	eb 32                	jmp    c0027d07 <__floatsisf+0x68>
c0027cd5:	b8 00 00 00 00       	mov    eax,0x0
c0027cda:	74 34                	je     c0027d10 <__floatsisf+0x71>
c0027cdc:	f7 da                	neg    edx
c0027cde:	0f bd ca             	bsr    ecx,edx
c0027ce1:	83 f1 1f             	xor    ecx,0x1f
c0027ce4:	d3 e2                	shl    edx,cl
c0027ce6:	89 d0                	mov    eax,edx
c0027ce8:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027ced:	89 c3                	mov    ebx,eax
c0027cef:	c1 eb 08             	shr    ebx,0x8
c0027cf2:	80 e2 7f             	and    dl,0x7f
c0027cf5:	0f 95 c2             	setne  dl
c0027cf8:	09 da                	or     edx,ebx
c0027cfa:	83 e2 01             	and    edx,0x1
c0027cfd:	c1 e8 07             	shr    eax,0x7
c0027d00:	21 c2                	and    edx,eax
c0027d02:	b8 9e 01 00 00       	mov    eax,0x19e
c0027d07:	29 c8                	sub    eax,ecx
c0027d09:	c1 e0 17             	shl    eax,0x17
c0027d0c:	09 d8                	or     eax,ebx
c0027d0e:	01 d0                	add    eax,edx
c0027d10:	5b                   	pop    ebx
c0027d11:	5d                   	pop    ebp
c0027d12:	c3                   	ret    

c0027d13 <__floatunsisf>:
c0027d13:	55                   	push   ebp
c0027d14:	89 e5                	mov    ebp,esp
c0027d16:	53                   	push   ebx
c0027d17:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027d1a:	31 c0                	xor    eax,eax
c0027d1c:	85 d2                	test   edx,edx
c0027d1e:	74 32                	je     c0027d52 <__floatunsisf+0x3f>
c0027d20:	0f bd ca             	bsr    ecx,edx
c0027d23:	83 f1 1f             	xor    ecx,0x1f
c0027d26:	d3 e2                	shl    edx,cl
c0027d28:	89 d0                	mov    eax,edx
c0027d2a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027d2f:	89 c3                	mov    ebx,eax
c0027d31:	c1 eb 08             	shr    ebx,0x8
c0027d34:	80 e2 7f             	and    dl,0x7f
c0027d37:	0f 95 c2             	setne  dl
c0027d3a:	09 da                	or     edx,ebx
c0027d3c:	83 e2 01             	and    edx,0x1
c0027d3f:	c1 e8 07             	shr    eax,0x7
c0027d42:	21 c2                	and    edx,eax
c0027d44:	b8 9e 00 00 00       	mov    eax,0x9e
c0027d49:	29 c8                	sub    eax,ecx
c0027d4b:	c1 e0 17             	shl    eax,0x17
c0027d4e:	09 d8                	or     eax,ebx
c0027d50:	01 d0                	add    eax,edx
c0027d52:	5b                   	pop    ebx
c0027d53:	5d                   	pop    ebp
c0027d54:	c3                   	ret    

c0027d55 <__fixsfsi>:
c0027d55:	55                   	push   ebp
c0027d56:	89 e5                	mov    ebp,esp
c0027d58:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027d5b:	89 d1                	mov    ecx,edx
c0027d5d:	c1 e1 08             	shl    ecx,0x8
c0027d60:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027d66:	c1 fa 17             	sar    edx,0x17
c0027d69:	78 1c                	js     c0027d87 <__fixsfsi+0x32>
c0027d6b:	83 ea 7f             	sub    edx,0x7f
c0027d6e:	31 c0                	xor    eax,eax
c0027d70:	83 fa 1e             	cmp    edx,0x1e
c0027d73:	77 40                	ja     c0027db5 <__fixsfsi+0x60>
c0027d75:	89 c8                	mov    eax,ecx
c0027d77:	0d 00 00 00 80       	or     eax,0x80000000
c0027d7c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027d81:	29 d1                	sub    ecx,edx
c0027d83:	d3 e8                	shr    eax,cl
c0027d85:	eb 2e                	jmp    c0027db5 <__fixsfsi+0x60>
c0027d87:	31 c0                	xor    eax,eax
c0027d89:	81 c2 81 00 00 00    	add    edx,0x81
c0027d8f:	78 24                	js     c0027db5 <__fixsfsi+0x60>
c0027d91:	83 fa 1e             	cmp    edx,0x1e
c0027d94:	7e 09                	jle    c0027d9f <__fixsfsi+0x4a>
c0027d96:	83 fa 1f             	cmp    edx,0x1f
c0027d99:	75 18                	jne    c0027db3 <__fixsfsi+0x5e>
c0027d9b:	85 c9                	test   ecx,ecx
c0027d9d:	75 14                	jne    c0027db3 <__fixsfsi+0x5e>
c0027d9f:	89 c8                	mov    eax,ecx
c0027da1:	0d 00 00 00 80       	or     eax,0x80000000
c0027da6:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027dab:	29 d1                	sub    ecx,edx
c0027dad:	d3 e8                	shr    eax,cl
c0027daf:	f7 d8                	neg    eax
c0027db1:	eb 02                	jmp    c0027db5 <__fixsfsi+0x60>
c0027db3:	31 c0                	xor    eax,eax
c0027db5:	5d                   	pop    ebp
c0027db6:	c3                   	ret    

c0027db7 <__fixunssfsi>:
c0027db7:	55                   	push   ebp
c0027db8:	89 e5                	mov    ebp,esp
c0027dba:	53                   	push   ebx
c0027dbb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027dbe:	89 d3                	mov    ebx,edx
c0027dc0:	c1 fb 17             	sar    ebx,0x17
c0027dc3:	83 eb 7f             	sub    ebx,0x7f
c0027dc6:	31 c0                	xor    eax,eax
c0027dc8:	83 fb 1f             	cmp    ebx,0x1f
c0027dcb:	77 18                	ja     c0027de5 <__fixunssfsi+0x2e>
c0027dcd:	89 d0                	mov    eax,edx
c0027dcf:	c1 e0 08             	shl    eax,0x8
c0027dd2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027dd7:	0d 00 00 00 80       	or     eax,0x80000000
c0027ddc:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027de1:	29 d9                	sub    ecx,ebx
c0027de3:	d3 e8                	shr    eax,cl
c0027de5:	5b                   	pop    ebx
c0027de6:	5d                   	pop    ebp
c0027de7:	c3                   	ret    

c0027de8 <__cmpsf2>:
c0027de8:	55                   	push   ebp
c0027de9:	89 e5                	mov    ebp,esp
c0027deb:	57                   	push   edi
c0027dec:	56                   	push   esi
c0027ded:	53                   	push   ebx
c0027dee:	83 ec 24             	sub    esp,0x24
c0027df1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027df4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027df7:	e8 4f 10 00 00       	call   c0028e4b <__truncdfsf2>
c0027dfc:	5a                   	pop    edx
c0027dfd:	59                   	pop    ecx
c0027dfe:	89 c3                	mov    ebx,eax
c0027e00:	c1 e8 17             	shr    eax,0x17
c0027e03:	0f b6 f0             	movzx  esi,al
c0027e06:	89 d8                	mov    eax,ebx
c0027e08:	c1 e8 1f             	shr    eax,0x1f
c0027e0b:	31 c6                	xor    esi,eax
c0027e0d:	c1 e3 08             	shl    ebx,0x8
c0027e10:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027e13:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027e16:	e8 30 10 00 00       	call   c0028e4b <__truncdfsf2>
c0027e1b:	83 c4 10             	add    esp,0x10
c0027e1e:	89 c1                	mov    ecx,eax
c0027e20:	c1 e9 17             	shr    ecx,0x17
c0027e23:	0f b6 c9             	movzx  ecx,cl
c0027e26:	89 c7                	mov    edi,eax
c0027e28:	c1 ef 1f             	shr    edi,0x1f
c0027e2b:	89 ca                	mov    edx,ecx
c0027e2d:	31 fa                	xor    edx,edi
c0027e2f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027e32:	c1 e0 08             	shl    eax,0x8
c0027e35:	89 c2                	mov    edx,eax
c0027e37:	89 d8                	mov    eax,ebx
c0027e39:	09 d0                	or     eax,edx
c0027e3b:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027e40:	09 f0                	or     eax,esi
c0027e42:	75 08                	jne    c0027e4c <__cmpsf2+0x64>
c0027e44:	31 c0                	xor    eax,eax
c0027e46:	39 f9                	cmp    ecx,edi
c0027e48:	75 0c                	jne    c0027e56 <__cmpsf2+0x6e>
c0027e4a:	eb 29                	jmp    c0027e75 <__cmpsf2+0x8d>
c0027e4c:	b8 01 00 00 00       	mov    eax,0x1
c0027e51:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027e54:	7f 1f                	jg     c0027e75 <__cmpsf2+0x8d>
c0027e56:	83 c8 ff             	or     eax,0xffffffff
c0027e59:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027e5c:	7c 17                	jl     c0027e75 <__cmpsf2+0x8d>
c0027e5e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027e64:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027e6a:	b8 01 00 00 00       	mov    eax,0x1
c0027e6f:	39 d3                	cmp    ebx,edx
c0027e71:	77 02                	ja     c0027e75 <__cmpsf2+0x8d>
c0027e73:	19 c0                	sbb    eax,eax
c0027e75:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027e78:	5b                   	pop    ebx
c0027e79:	5e                   	pop    esi
c0027e7a:	5f                   	pop    edi
c0027e7b:	5d                   	pop    ebp
c0027e7c:	c3                   	ret    

c0027e7d <__eqsf2>:
c0027e7d:	55                   	push   ebp
c0027e7e:	89 e5                	mov    ebp,esp
c0027e80:	83 ec 24             	sub    esp,0x24
c0027e83:	6a 01                	push   0x1
c0027e85:	83 ec 0c             	sub    esp,0xc
c0027e88:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027e8b:	e8 df 10 00 00       	call   c0028f6f <__extendsfdf2>
c0027e90:	83 c4 10             	add    esp,0x10
c0027e93:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027e96:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027e99:	52                   	push   edx
c0027e9a:	50                   	push   eax
c0027e9b:	50                   	push   eax
c0027e9c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027e9f:	e8 cb 10 00 00       	call   c0028f6f <__extendsfdf2>
c0027ea4:	59                   	pop    ecx
c0027ea5:	59                   	pop    ecx
c0027ea6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027ea9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027eac:	52                   	push   edx
c0027ead:	50                   	push   eax
c0027eae:	e8 35 ff ff ff       	call   c0027de8 <__cmpsf2>
c0027eb3:	83 c4 20             	add    esp,0x20
c0027eb6:	c9                   	leave  
c0027eb7:	c3                   	ret    

c0027eb8 <__nesf2>:
c0027eb8:	eb c3                	jmp    c0027e7d <__eqsf2>

c0027eba <__gtsf2>:
c0027eba:	55                   	push   ebp
c0027ebb:	89 e5                	mov    ebp,esp
c0027ebd:	83 ec 24             	sub    esp,0x24
c0027ec0:	6a ff                	push   0xffffffff
c0027ec2:	83 ec 0c             	sub    esp,0xc
c0027ec5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027ec8:	e8 a2 10 00 00       	call   c0028f6f <__extendsfdf2>
c0027ecd:	83 c4 10             	add    esp,0x10
c0027ed0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027ed3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027ed6:	52                   	push   edx
c0027ed7:	50                   	push   eax
c0027ed8:	50                   	push   eax
c0027ed9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027edc:	e8 8e 10 00 00       	call   c0028f6f <__extendsfdf2>
c0027ee1:	59                   	pop    ecx
c0027ee2:	59                   	pop    ecx
c0027ee3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027ee6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027ee9:	52                   	push   edx
c0027eea:	50                   	push   eax
c0027eeb:	e8 f8 fe ff ff       	call   c0027de8 <__cmpsf2>
c0027ef0:	83 c4 20             	add    esp,0x20
c0027ef3:	c9                   	leave  
c0027ef4:	c3                   	ret    

c0027ef5 <__gesf2>:
c0027ef5:	eb c3                	jmp    c0027eba <__gtsf2>

c0027ef7 <__ltsf2>:
c0027ef7:	eb 84                	jmp    c0027e7d <__eqsf2>

c0027ef9 <__lesf2>:
c0027ef9:	eb 82                	jmp    c0027e7d <__eqsf2>

c0027efb <__adddf3>:
c0027efb:	55                   	push   ebp
c0027efc:	89 e5                	mov    ebp,esp
c0027efe:	57                   	push   edi
c0027eff:	56                   	push   esi
c0027f00:	53                   	push   ebx
c0027f01:	83 ec 24             	sub    esp,0x24
c0027f04:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027f07:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027f0a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027f0d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027f10:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027f13:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027f16:	89 c8                	mov    eax,ecx
c0027f18:	89 ce                	mov    esi,ecx
c0027f1a:	c1 fe 14             	sar    esi,0x14
c0027f1d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027f20:	89 fb                	mov    ebx,edi
c0027f22:	89 fa                	mov    edx,edi
c0027f24:	c1 e2 0b             	shl    edx,0xb
c0027f27:	c1 e0 0b             	shl    eax,0xb
c0027f2a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027f2f:	c1 eb 15             	shr    ebx,0x15
c0027f32:	09 d8                	or     eax,ebx
c0027f34:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027f37:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027f3a:	c1 fe 14             	sar    esi,0x14
c0027f3d:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027f40:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027f43:	89 f3                	mov    ebx,esi
c0027f45:	c1 e3 0b             	shl    ebx,0xb
c0027f48:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027f4b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027f4e:	c1 e3 0b             	shl    ebx,0xb
c0027f51:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027f57:	c1 ee 15             	shr    esi,0x15
c0027f5a:	09 f3                	or     ebx,esi
c0027f5c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027f5f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027f62:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027f65:	0f 88 5f 02 00 00    	js     c00281ca <__adddf3+0x2cf>
c0027f6b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027f6e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027f71:	85 db                	test   ebx,ebx
c0027f73:	0f 8e c7 00 00 00    	jle    c0028040 <__adddf3+0x145>
c0027f79:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027f80:	75 1a                	jne    c0027f9c <__adddf3+0xa1>
c0027f82:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027f85:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027f88:	0f 84 b2 05 00 00    	je     c0028540 <__adddf3+0x645>
c0027f8e:	4b                   	dec    ebx
c0027f8f:	75 23                	jne    c0027fb4 <__adddf3+0xb9>
c0027f91:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027f94:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027f97:	e9 99 00 00 00       	jmp    c0028035 <__adddf3+0x13a>
c0027f9c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027f9f:	f7 d6                	not    esi
c0027fa1:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027fa7:	0f 84 93 05 00 00    	je     c0028540 <__adddf3+0x645>
c0027fad:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027fb4:	83 fb 1f             	cmp    ebx,0x1f
c0027fb7:	7e 42                	jle    c0027ffb <__adddf3+0x100>
c0027fb9:	83 fb 3f             	cmp    ebx,0x3f
c0027fbc:	0f 8f 7e 05 00 00    	jg     c0028540 <__adddf3+0x645>
c0027fc2:	83 e3 1f             	and    ebx,0x1f
c0027fc5:	89 d9                	mov    ecx,ebx
c0027fc7:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027fca:	d3 ef                	shr    edi,cl
c0027fcc:	31 db                	xor    ebx,ebx
c0027fce:	85 c9                	test   ecx,ecx
c0027fd0:	74 15                	je     c0027fe7 <__adddf3+0xec>
c0027fd2:	be 20 00 00 00       	mov    esi,0x20
c0027fd7:	29 ce                	sub    esi,ecx
c0027fd9:	89 f1                	mov    ecx,esi
c0027fdb:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027fde:	d3 e6                	shl    esi,cl
c0027fe0:	31 db                	xor    ebx,ebx
c0027fe2:	85 f6                	test   esi,esi
c0027fe4:	0f 95 c3             	setne  bl
c0027fe7:	31 c9                	xor    ecx,ecx
c0027fe9:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027fed:	0f 95 c1             	setne  cl
c0027ff0:	09 cf                	or     edi,ecx
c0027ff2:	09 fb                	or     ebx,edi
c0027ff4:	01 da                	add    edx,ebx
c0027ff6:	83 d0 00             	adc    eax,0x0
c0027ff9:	eb 3a                	jmp    c0028035 <__adddf3+0x13a>
c0027ffb:	bf 20 00 00 00       	mov    edi,0x20
c0028000:	29 df                	sub    edi,ebx
c0028002:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028005:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028008:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002800b:	d3 e6                	shl    esi,cl
c002800d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028010:	88 d9                	mov    cl,bl
c0028012:	d3 ef                	shr    edi,cl
c0028014:	09 fe                	or     esi,edi
c0028016:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028019:	88 d9                	mov    cl,bl
c002801b:	d3 ef                	shr    edi,cl
c002801d:	89 fb                	mov    ebx,edi
c002801f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028022:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0028025:	d3 e7                	shl    edi,cl
c0028027:	85 ff                	test   edi,edi
c0028029:	0f 95 c1             	setne  cl
c002802c:	0f b6 c9             	movzx  ecx,cl
c002802f:	09 ce                	or     esi,ecx
c0028031:	01 f2                	add    edx,esi
c0028033:	11 d8                	adc    eax,ebx
c0028035:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028038:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002803b:	e9 52 01 00 00       	jmp    c0028192 <__adddf3+0x297>
c0028040:	0f 84 d5 00 00 00    	je     c002811b <__adddf3+0x220>
c0028046:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028049:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c002804c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002804f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028052:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0028059:	75 20                	jne    c002807b <__adddf3+0x180>
c002805b:	89 d6                	mov    esi,edx
c002805d:	09 c6                	or     esi,eax
c002805f:	0f 84 db 04 00 00    	je     c0028540 <__adddf3+0x645>
c0028065:	4b                   	dec    ebx
c0028066:	75 29                	jne    c0028091 <__adddf3+0x196>
c0028068:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002806b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002806e:	01 d1                	add    ecx,edx
c0028070:	11 c6                	adc    esi,eax
c0028072:	89 f0                	mov    eax,esi
c0028074:	89 ca                	mov    edx,ecx
c0028076:	e9 17 01 00 00       	jmp    c0028192 <__adddf3+0x297>
c002807b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002807e:	f7 d6                	not    esi
c0028080:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028086:	0f 84 b4 04 00 00    	je     c0028540 <__adddf3+0x645>
c002808c:	0d 00 00 00 80       	or     eax,0x80000000
c0028091:	83 fb 1f             	cmp    ebx,0x1f
c0028094:	7e 48                	jle    c00280de <__adddf3+0x1e3>
c0028096:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028099:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002809c:	83 fb 3f             	cmp    ebx,0x3f
c002809f:	0f 8f 9b 04 00 00    	jg     c0028540 <__adddf3+0x645>
c00280a5:	83 e3 1f             	and    ebx,0x1f
c00280a8:	89 d9                	mov    ecx,ebx
c00280aa:	89 c7                	mov    edi,eax
c00280ac:	d3 ef                	shr    edi,cl
c00280ae:	31 db                	xor    ebx,ebx
c00280b0:	85 c9                	test   ecx,ecx
c00280b2:	74 12                	je     c00280c6 <__adddf3+0x1cb>
c00280b4:	be 20 00 00 00       	mov    esi,0x20
c00280b9:	29 ce                	sub    esi,ecx
c00280bb:	89 f1                	mov    ecx,esi
c00280bd:	d3 e0                	shl    eax,cl
c00280bf:	31 db                	xor    ebx,ebx
c00280c1:	85 c0                	test   eax,eax
c00280c3:	0f 95 c3             	setne  bl
c00280c6:	31 c0                	xor    eax,eax
c00280c8:	85 d2                	test   edx,edx
c00280ca:	0f 95 c0             	setne  al
c00280cd:	09 c7                	or     edi,eax
c00280cf:	09 fb                	or     ebx,edi
c00280d1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00280d4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00280d7:	01 da                	add    edx,ebx
c00280d9:	83 d6 00             	adc    esi,0x0
c00280dc:	eb 39                	jmp    c0028117 <__adddf3+0x21c>
c00280de:	be 20 00 00 00       	mov    esi,0x20
c00280e3:	29 de                	sub    esi,ebx
c00280e5:	89 c7                	mov    edi,eax
c00280e7:	89 f1                	mov    ecx,esi
c00280e9:	d3 e7                	shl    edi,cl
c00280eb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00280ee:	89 d7                	mov    edi,edx
c00280f0:	88 d9                	mov    cl,bl
c00280f2:	d3 ef                	shr    edi,cl
c00280f4:	89 f9                	mov    ecx,edi
c00280f6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00280f9:	09 cf                	or     edi,ecx
c00280fb:	88 d9                	mov    cl,bl
c00280fd:	d3 e8                	shr    eax,cl
c00280ff:	89 f1                	mov    ecx,esi
c0028101:	d3 e2                	shl    edx,cl
c0028103:	85 d2                	test   edx,edx
c0028105:	0f 95 c2             	setne  dl
c0028108:	0f b6 d2             	movzx  edx,dl
c002810b:	09 d7                	or     edi,edx
c002810d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028110:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028113:	01 fa                	add    edx,edi
c0028115:	11 c6                	adc    esi,eax
c0028117:	89 f0                	mov    eax,esi
c0028119:	eb 77                	jmp    c0028192 <__adddf3+0x297>
c002811b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002811e:	46                   	inc    esi
c002811f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0028122:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028128:	75 41                	jne    c002816b <__adddf3+0x270>
c002812a:	89 d3                	mov    ebx,edx
c002812c:	09 c3                	or     ebx,eax
c002812e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0028135:	75 27                	jne    c002815e <__adddf3+0x263>
c0028137:	85 db                	test   ebx,ebx
c0028139:	0f 84 fb 03 00 00    	je     c002853a <__adddf3+0x63f>
c002813f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028142:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0028145:	0f 84 f5 03 00 00    	je     c0028540 <__adddf3+0x645>
c002814b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002814e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0028151:	85 c0                	test   eax,eax
c0028153:	0f 89 91 03 00 00    	jns    c00284ea <__adddf3+0x5ef>
c0028159:	e9 85 03 00 00       	jmp    c00284e3 <__adddf3+0x5e8>
c002815e:	85 db                	test   ebx,ebx
c0028160:	0f 85 da 03 00 00    	jne    c0028540 <__adddf3+0x645>
c0028166:	e9 cf 03 00 00       	jmp    c002853a <__adddf3+0x63f>
c002816b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002816e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0028171:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028174:	f7 d1                	not    ecx
c0028176:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002817c:	0f 84 70 03 00 00    	je     c00284f2 <__adddf3+0x5f7>
c0028182:	d1 ea                	shr    edx,1
c0028184:	89 c1                	mov    ecx,eax
c0028186:	c1 e1 1f             	shl    ecx,0x1f
c0028189:	09 ca                	or     edx,ecx
c002818b:	d1 e8                	shr    eax,1
c002818d:	e9 6f 03 00 00       	jmp    c0028501 <__adddf3+0x606>
c0028192:	85 c0                	test   eax,eax
c0028194:	0f 89 67 03 00 00    	jns    c0028501 <__adddf3+0x606>
c002819a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002819d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00281a0:	f7 d1                	not    ecx
c00281a2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00281a8:	0f 84 44 03 00 00    	je     c00284f2 <__adddf3+0x5f7>
c00281ae:	89 d1                	mov    ecx,edx
c00281b0:	d1 e9                	shr    ecx,1
c00281b2:	83 e2 01             	and    edx,0x1
c00281b5:	09 ca                	or     edx,ecx
c00281b7:	89 c1                	mov    ecx,eax
c00281b9:	c1 e1 1f             	shl    ecx,0x1f
c00281bc:	09 ca                	or     edx,ecx
c00281be:	d1 e8                	shr    eax,1
c00281c0:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00281c5:	e9 37 03 00 00       	jmp    c0028501 <__adddf3+0x606>
c00281ca:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00281cd:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00281d3:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00281d6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00281d9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00281df:	29 de                	sub    esi,ebx
c00281e1:	85 f6                	test   esi,esi
c00281e3:	0f 8e bd 00 00 00    	jle    c00282a6 <__adddf3+0x3ab>
c00281e9:	85 db                	test   ebx,ebx
c00281eb:	75 17                	jne    c0028204 <__adddf3+0x309>
c00281ed:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00281f0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00281f3:	0f 84 47 03 00 00    	je     c0028540 <__adddf3+0x645>
c00281f9:	4e                   	dec    esi
c00281fa:	75 20                	jne    c002821c <__adddf3+0x321>
c00281fc:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00281ff:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0028202:	eb 5b                	jmp    c002825f <__adddf3+0x364>
c0028204:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028207:	f7 d3                	not    ebx
c0028209:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002820f:	0f 84 2b 03 00 00    	je     c0028540 <__adddf3+0x645>
c0028215:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002821c:	83 fe 1f             	cmp    esi,0x1f
c002821f:	7e 49                	jle    c002826a <__adddf3+0x36f>
c0028221:	83 fe 3f             	cmp    esi,0x3f
c0028224:	0f 8f 16 03 00 00    	jg     c0028540 <__adddf3+0x645>
c002822a:	83 e6 1f             	and    esi,0x1f
c002822d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028230:	89 f1                	mov    ecx,esi
c0028232:	d3 ef                	shr    edi,cl
c0028234:	31 db                	xor    ebx,ebx
c0028236:	85 f6                	test   esi,esi
c0028238:	74 13                	je     c002824d <__adddf3+0x352>
c002823a:	b9 20 00 00 00       	mov    ecx,0x20
c002823f:	29 f1                	sub    ecx,esi
c0028241:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028244:	d3 e6                	shl    esi,cl
c0028246:	31 db                	xor    ebx,ebx
c0028248:	85 f6                	test   esi,esi
c002824a:	0f 95 c3             	setne  bl
c002824d:	31 c9                	xor    ecx,ecx
c002824f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0028253:	0f 95 c1             	setne  cl
c0028256:	09 cf                	or     edi,ecx
c0028258:	09 fb                	or     ebx,edi
c002825a:	29 da                	sub    edx,ebx
c002825c:	83 d8 00             	sbb    eax,0x0
c002825f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028262:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028265:	e9 aa 01 00 00       	jmp    c0028414 <__adddf3+0x519>
c002826a:	bf 20 00 00 00       	mov    edi,0x20
c002826f:	29 f7                	sub    edi,esi
c0028271:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028274:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028277:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002827a:	d3 e3                	shl    ebx,cl
c002827c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002827f:	89 f1                	mov    ecx,esi
c0028281:	d3 ef                	shr    edi,cl
c0028283:	09 fb                	or     ebx,edi
c0028285:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028288:	89 f1                	mov    ecx,esi
c002828a:	d3 ef                	shr    edi,cl
c002828c:	89 fe                	mov    esi,edi
c002828e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028291:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0028294:	d3 e7                	shl    edi,cl
c0028296:	85 ff                	test   edi,edi
c0028298:	0f 95 c1             	setne  cl
c002829b:	0f b6 c9             	movzx  ecx,cl
c002829e:	09 cb                	or     ebx,ecx
c00282a0:	29 da                	sub    edx,ebx
c00282a2:	19 f0                	sbb    eax,esi
c00282a4:	eb b9                	jmp    c002825f <__adddf3+0x364>
c00282a6:	0f 84 cd 00 00 00    	je     c0028379 <__adddf3+0x47e>
c00282ac:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00282af:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00282b2:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00282b5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00282b9:	75 1b                	jne    c00282d6 <__adddf3+0x3db>
c00282bb:	89 d6                	mov    esi,edx
c00282bd:	09 c6                	or     esi,eax
c00282bf:	0f 84 7b 02 00 00    	je     c0028540 <__adddf3+0x645>
c00282c5:	4b                   	dec    ebx
c00282c6:	75 24                	jne    c00282ec <__adddf3+0x3f1>
c00282c8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00282cb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00282ce:	29 d1                	sub    ecx,edx
c00282d0:	19 c6                	sbb    esi,eax
c00282d2:	89 ca                	mov    edx,ecx
c00282d4:	eb 61                	jmp    c0028337 <__adddf3+0x43c>
c00282d6:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00282d9:	f7 d6                	not    esi
c00282db:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00282e1:	0f 84 59 02 00 00    	je     c0028540 <__adddf3+0x645>
c00282e7:	0d 00 00 00 80       	or     eax,0x80000000
c00282ec:	83 fb 1f             	cmp    ebx,0x1f
c00282ef:	7e 4d                	jle    c002833e <__adddf3+0x443>
c00282f1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00282f4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00282f7:	83 fb 3f             	cmp    ebx,0x3f
c00282fa:	0f 8f 40 02 00 00    	jg     c0028540 <__adddf3+0x645>
c0028300:	83 e3 1f             	and    ebx,0x1f
c0028303:	89 d9                	mov    ecx,ebx
c0028305:	89 c7                	mov    edi,eax
c0028307:	d3 ef                	shr    edi,cl
c0028309:	31 db                	xor    ebx,ebx
c002830b:	85 c9                	test   ecx,ecx
c002830d:	74 12                	je     c0028321 <__adddf3+0x426>
c002830f:	be 20 00 00 00       	mov    esi,0x20
c0028314:	29 ce                	sub    esi,ecx
c0028316:	89 f1                	mov    ecx,esi
c0028318:	d3 e0                	shl    eax,cl
c002831a:	31 db                	xor    ebx,ebx
c002831c:	85 c0                	test   eax,eax
c002831e:	0f 95 c3             	setne  bl
c0028321:	31 c0                	xor    eax,eax
c0028323:	85 d2                	test   edx,edx
c0028325:	0f 95 c0             	setne  al
c0028328:	09 c7                	or     edi,eax
c002832a:	09 fb                	or     ebx,edi
c002832c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002832f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028332:	29 da                	sub    edx,ebx
c0028334:	83 de 00             	sbb    esi,0x0
c0028337:	89 f0                	mov    eax,esi
c0028339:	e9 d6 00 00 00       	jmp    c0028414 <__adddf3+0x519>
c002833e:	be 20 00 00 00       	mov    esi,0x20
c0028343:	29 de                	sub    esi,ebx
c0028345:	89 c7                	mov    edi,eax
c0028347:	89 f1                	mov    ecx,esi
c0028349:	d3 e7                	shl    edi,cl
c002834b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002834e:	89 d7                	mov    edi,edx
c0028350:	88 d9                	mov    cl,bl
c0028352:	d3 ef                	shr    edi,cl
c0028354:	89 f9                	mov    ecx,edi
c0028356:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028359:	09 cf                	or     edi,ecx
c002835b:	88 d9                	mov    cl,bl
c002835d:	d3 e8                	shr    eax,cl
c002835f:	89 f1                	mov    ecx,esi
c0028361:	d3 e2                	shl    edx,cl
c0028363:	85 d2                	test   edx,edx
c0028365:	0f 95 c2             	setne  dl
c0028368:	0f b6 d2             	movzx  edx,dl
c002836b:	09 d7                	or     edi,edx
c002836d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028370:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028373:	29 fa                	sub    edx,edi
c0028375:	19 c6                	sbb    esi,eax
c0028377:	eb be                	jmp    c0028337 <__adddf3+0x43c>
c0028379:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002837c:	8d 5e 01             	lea    ebx,[esi+0x1]
c002837f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0028385:	75 6a                	jne    c00283f1 <__adddf3+0x4f6>
c0028387:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002838b:	75 58                	jne    c00283e5 <__adddf3+0x4ea>
c002838d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028390:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028393:	89 d6                	mov    esi,edx
c0028395:	09 c6                	or     esi,eax
c0028397:	75 17                	jne    c00283b0 <__adddf3+0x4b5>
c0028399:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002839c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002839f:	85 db                	test   ebx,ebx
c00283a1:	0f 85 99 01 00 00    	jne    c0028540 <__adddf3+0x645>
c00283a7:	31 ff                	xor    edi,edi
c00283a9:	31 c9                	xor    ecx,ecx
c00283ab:	e9 90 01 00 00       	jmp    c0028540 <__adddf3+0x645>
c00283b0:	85 db                	test   ebx,ebx
c00283b2:	0f 84 88 01 00 00    	je     c0028540 <__adddf3+0x645>
c00283b8:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00283bb:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00283be:	85 c0                	test   eax,eax
c00283c0:	79 10                	jns    c00283d2 <__adddf3+0x4d7>
c00283c2:	31 c9                	xor    ecx,ecx
c00283c4:	f7 da                	neg    edx
c00283c6:	0f 95 c1             	setne  cl
c00283c9:	01 c8                	add    eax,ecx
c00283cb:	f7 d8                	neg    eax
c00283cd:	e9 2f 01 00 00       	jmp    c0028501 <__adddf3+0x606>
c00283d2:	31 ff                	xor    edi,edi
c00283d4:	31 c9                	xor    ecx,ecx
c00283d6:	89 c3                	mov    ebx,eax
c00283d8:	09 d3                	or     ebx,edx
c00283da:	0f 84 60 01 00 00    	je     c0028540 <__adddf3+0x645>
c00283e0:	e9 05 01 00 00       	jmp    c00284ea <__adddf3+0x5ef>
c00283e5:	31 ff                	xor    edi,edi
c00283e7:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00283ec:	e9 4f 01 00 00       	jmp    c0028540 <__adddf3+0x645>
c00283f1:	89 c1                	mov    ecx,eax
c00283f3:	89 d0                	mov    eax,edx
c00283f5:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00283f8:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00283fb:	89 ca                	mov    edx,ecx
c00283fd:	85 c9                	test   ecx,ecx
c00283ff:	79 2c                	jns    c002842d <__adddf3+0x532>
c0028401:	31 c9                	xor    ecx,ecx
c0028403:	f7 d8                	neg    eax
c0028405:	0f 95 c1             	setne  cl
c0028408:	01 ca                	add    edx,ecx
c002840a:	f7 da                	neg    edx
c002840c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002840f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0028412:	eb 19                	jmp    c002842d <__adddf3+0x532>
c0028414:	85 c0                	test   eax,eax
c0028416:	0f 89 e5 00 00 00    	jns    c0028501 <__adddf3+0x606>
c002841c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028421:	89 c1                	mov    ecx,eax
c0028423:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028426:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0028429:	89 d0                	mov    eax,edx
c002842b:	89 ca                	mov    edx,ecx
c002842d:	85 d2                	test   edx,edx
c002842f:	74 59                	je     c002848a <__adddf3+0x58f>
c0028431:	0f bd da             	bsr    ebx,edx
c0028434:	83 f3 1f             	xor    ebx,0x1f
c0028437:	88 d9                	mov    cl,bl
c0028439:	d3 e2                	shl    edx,cl
c002843b:	bf 20 00 00 00       	mov    edi,0x20
c0028440:	89 f9                	mov    ecx,edi
c0028442:	29 d9                	sub    ecx,ebx
c0028444:	89 c6                	mov    esi,eax
c0028446:	d3 ee                	shr    esi,cl
c0028448:	09 d6                	or     esi,edx
c002844a:	88 d9                	mov    cl,bl
c002844c:	d3 e0                	shl    eax,cl
c002844e:	89 c2                	mov    edx,eax
c0028450:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028453:	25 ff 07 00 00       	and    eax,0x7ff
c0028458:	39 d8                	cmp    eax,ebx
c002845a:	7f 22                	jg     c002847e <__adddf3+0x583>
c002845c:	29 c3                	sub    ebx,eax
c002845e:	43                   	inc    ebx
c002845f:	88 d9                	mov    cl,bl
c0028461:	d3 ea                	shr    edx,cl
c0028463:	29 df                	sub    edi,ebx
c0028465:	89 f9                	mov    ecx,edi
c0028467:	89 f0                	mov    eax,esi
c0028469:	d3 e0                	shl    eax,cl
c002846b:	09 c2                	or     edx,eax
c002846d:	89 f0                	mov    eax,esi
c002846f:	88 d9                	mov    cl,bl
c0028471:	d3 e8                	shr    eax,cl
c0028473:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028476:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c002847c:	eb 6f                	jmp    c00284ed <__adddf3+0x5f2>
c002847e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028481:	29 d8                	sub    eax,ebx
c0028483:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028486:	89 f0                	mov    eax,esi
c0028488:	eb 59                	jmp    c00284e3 <__adddf3+0x5e8>
c002848a:	85 c0                	test   eax,eax
c002848c:	74 6a                	je     c00284f8 <__adddf3+0x5fd>
c002848e:	0f bd c8             	bsr    ecx,eax
c0028491:	83 f1 1f             	xor    ecx,0x1f
c0028494:	d3 e0                	shl    eax,cl
c0028496:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028499:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002849f:	83 c1 20             	add    ecx,0x20
c00284a2:	39 cb                	cmp    ebx,ecx
c00284a4:	7f 35                	jg     c00284db <__adddf3+0x5e0>
c00284a6:	29 d9                	sub    ecx,ebx
c00284a8:	8d 71 01             	lea    esi,[ecx+0x1]
c00284ab:	83 fe 1f             	cmp    esi,0x1f
c00284ae:	7e 09                	jle    c00284b9 <__adddf3+0x5be>
c00284b0:	83 e9 1f             	sub    ecx,0x1f
c00284b3:	d3 e8                	shr    eax,cl
c00284b5:	89 c3                	mov    ebx,eax
c00284b7:	eb 11                	jmp    c00284ca <__adddf3+0x5cf>
c00284b9:	b9 20 00 00 00       	mov    ecx,0x20
c00284be:	29 f1                	sub    ecx,esi
c00284c0:	89 c3                	mov    ebx,eax
c00284c2:	d3 e3                	shl    ebx,cl
c00284c4:	89 f1                	mov    ecx,esi
c00284c6:	d3 e8                	shr    eax,cl
c00284c8:	89 c2                	mov    edx,eax
c00284ca:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00284cd:	25 00 f8 ff ff       	and    eax,0xfffff800
c00284d2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00284d5:	89 d0                	mov    eax,edx
c00284d7:	89 da                	mov    edx,ebx
c00284d9:	eb 26                	jmp    c0028501 <__adddf3+0x606>
c00284db:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00284de:	29 cf                	sub    edi,ecx
c00284e0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00284e3:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00284e8:	eb 17                	jmp    c0028501 <__adddf3+0x606>
c00284ea:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00284ed:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00284f0:	eb 0f                	jmp    c0028501 <__adddf3+0x606>
c00284f2:	31 d2                	xor    edx,edx
c00284f4:	31 c0                	xor    eax,eax
c00284f6:	eb 09                	jmp    c0028501 <__adddf3+0x606>
c00284f8:	89 c2                	mov    edx,eax
c00284fa:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0028501:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028504:	c1 e1 14             	shl    ecx,0x14
c0028507:	89 c3                	mov    ebx,eax
c0028509:	c1 eb 0b             	shr    ebx,0xb
c002850c:	09 d9                	or     ecx,ebx
c002850e:	89 d3                	mov    ebx,edx
c0028510:	c1 eb 0b             	shr    ebx,0xb
c0028513:	c1 e0 15             	shl    eax,0x15
c0028516:	09 d8                	or     eax,ebx
c0028518:	89 c7                	mov    edi,eax
c002851a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0028520:	0f 95 c0             	setne  al
c0028523:	89 c6                	mov    esi,eax
c0028525:	09 f3                	or     ebx,esi
c0028527:	83 e3 01             	and    ebx,0x1
c002852a:	c1 ea 0a             	shr    edx,0xa
c002852d:	21 da                	and    edx,ebx
c002852f:	89 f8                	mov    eax,edi
c0028531:	01 d0                	add    eax,edx
c0028533:	83 d1 00             	adc    ecx,0x0
c0028536:	89 c7                	mov    edi,eax
c0028538:	eb 06                	jmp    c0028540 <__adddf3+0x645>
c002853a:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002853d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028540:	89 f8                	mov    eax,edi
c0028542:	89 ca                	mov    edx,ecx
c0028544:	83 c4 24             	add    esp,0x24
c0028547:	5b                   	pop    ebx
c0028548:	5e                   	pop    esi
c0028549:	5f                   	pop    edi
c002854a:	5d                   	pop    ebp
c002854b:	c3                   	ret    

c002854c <__subdf3>:
c002854c:	55                   	push   ebp
c002854d:	89 e5                	mov    ebp,esp
c002854f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0028552:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028555:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002855b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002855e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0028561:	5d                   	pop    ebp
c0028562:	e9 94 f9 ff ff       	jmp    c0027efb <__adddf3>

c0028567 <__negdf2>:
c0028567:	55                   	push   ebp
c0028568:	89 e5                	mov    ebp,esp
c002856a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002856d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028570:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028576:	5d                   	pop    ebp
c0028577:	c3                   	ret    

c0028578 <__muldf3>:
c0028578:	55                   	push   ebp
c0028579:	89 e5                	mov    ebp,esp
c002857b:	57                   	push   edi
c002857c:	56                   	push   esi
c002857d:	53                   	push   ebx
c002857e:	83 ec 24             	sub    esp,0x24
c0028581:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028584:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0028587:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002858a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002858d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0028590:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0028593:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028596:	89 c8                	mov    eax,ecx
c0028598:	c1 f8 14             	sar    eax,0x14
c002859b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002859e:	89 f8                	mov    eax,edi
c00285a0:	89 fb                	mov    ebx,edi
c00285a2:	c1 e3 0b             	shl    ebx,0xb
c00285a5:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c00285a8:	c1 e1 0b             	shl    ecx,0xb
c00285ab:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00285b1:	c1 e8 15             	shr    eax,0x15
c00285b4:	09 c1                	or     ecx,eax
c00285b6:	89 d6                	mov    esi,edx
c00285b8:	89 d0                	mov    eax,edx
c00285ba:	c1 f8 14             	sar    eax,0x14
c00285bd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00285c0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00285c3:	89 c3                	mov    ebx,eax
c00285c5:	c1 e3 0b             	shl    ebx,0xb
c00285c8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00285cb:	c1 e6 0b             	shl    esi,0xb
c00285ce:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00285d4:	c1 e8 15             	shr    eax,0x15
c00285d7:	09 c6                	or     esi,eax
c00285d9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00285dc:	25 ff 07 00 00       	and    eax,0x7ff
c00285e1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00285e4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00285e7:	25 ff 07 00 00       	and    eax,0x7ff
c00285ec:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00285ef:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00285f2:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00285f5:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c00285fc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00285ff:	40                   	inc    eax
c0028600:	a9 fe 07 00 00       	test   eax,0x7fe
c0028605:	0f 85 8d 00 00 00    	jne    c0028698 <__muldf3+0x120>
c002860b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002860e:	09 c8                	or     eax,ecx
c0028610:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0028614:	74 44                	je     c002865a <__muldf3+0xe2>
c0028616:	85 c0                	test   eax,eax
c0028618:	0f 85 31 02 00 00    	jne    c002884f <__muldf3+0x2d7>
c002861e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028621:	40                   	inc    eax
c0028622:	a9 fe 07 00 00       	test   eax,0x7fe
c0028627:	75 13                	jne    c002863c <__muldf3+0xc4>
c0028629:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002862c:	09 f1                	or     ecx,esi
c002862e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028632:	74 22                	je     c0028656 <__muldf3+0xde>
c0028634:	85 c9                	test   ecx,ecx
c0028636:	0f 85 0d 02 00 00    	jne    c0028849 <__muldf3+0x2d1>
c002863c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0028640:	0f 89 09 02 00 00    	jns    c002884f <__muldf3+0x2d7>
c0028646:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028649:	05 00 00 00 80       	add    eax,0x80000000
c002864e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028651:	e9 f9 01 00 00       	jmp    c002884f <__muldf3+0x2d7>
c0028656:	85 c9                	test   ecx,ecx
c0028658:	eb 2e                	jmp    c0028688 <__muldf3+0x110>
c002865a:	85 c0                	test   eax,eax
c002865c:	74 20                	je     c002867e <__muldf3+0x106>
c002865e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0028661:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028664:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028667:	c1 ef 1f             	shr    edi,0x1f
c002866a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c002866d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0028670:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028673:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028676:	09 f9                	or     ecx,edi
c0028678:	78 1e                	js     c0028698 <__muldf3+0x120>
c002867a:	89 c3                	mov    ebx,eax
c002867c:	eb e0                	jmp    c002865e <__muldf3+0xe6>
c002867e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028681:	f7 d0                	not    eax
c0028683:	a9 ff 07 00 00       	test   eax,0x7ff
c0028688:	75 b2                	jne    c002863c <__muldf3+0xc4>
c002868a:	31 ff                	xor    edi,edi
c002868c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0028693:	e9 b7 01 00 00       	jmp    c002884f <__muldf3+0x2d7>
c0028698:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002869b:	40                   	inc    eax
c002869c:	a9 fe 07 00 00       	test   eax,0x7fe
c00286a1:	75 57                	jne    c00286fa <__muldf3+0x182>
c00286a3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00286a6:	09 f0                	or     eax,esi
c00286a8:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00286ac:	74 23                	je     c00286d1 <__muldf3+0x159>
c00286ae:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00286b2:	0f 89 91 01 00 00    	jns    c0028849 <__muldf3+0x2d1>
c00286b8:	85 c0                	test   eax,eax
c00286ba:	0f 85 89 01 00 00    	jne    c0028849 <__muldf3+0x2d1>
c00286c0:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00286c3:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c00286c9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00286cc:	e9 7e 01 00 00       	jmp    c002884f <__muldf3+0x2d7>
c00286d1:	85 c0                	test   eax,eax
c00286d3:	75 0c                	jne    c00286e1 <__muldf3+0x169>
c00286d5:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00286d9:	0f 89 6a 01 00 00    	jns    c0028849 <__muldf3+0x2d1>
c00286df:	eb df                	jmp    c00286c0 <__muldf3+0x148>
c00286e1:	01 f6                	add    esi,esi
c00286e3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00286e6:	c1 ea 1f             	shr    edx,0x1f
c00286e9:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00286ec:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c00286ef:	8d 43 ff             	lea    eax,[ebx-0x1]
c00286f2:	09 d6                	or     esi,edx
c00286f4:	78 04                	js     c00286fa <__muldf3+0x182>
c00286f6:	89 c3                	mov    ebx,eax
c00286f8:	eb e7                	jmp    c00286e1 <__muldf3+0x169>
c00286fa:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0028700:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028706:	89 c8                	mov    eax,ecx
c0028708:	f7 e6                	mul    esi
c002870a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c002870d:	89 c7                	mov    edi,eax
c002870f:	89 c8                	mov    eax,ecx
c0028711:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028714:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0028717:	89 c1                	mov    ecx,eax
c0028719:	89 f0                	mov    eax,esi
c002871b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c002871e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0028721:	89 c6                	mov    esi,eax
c0028723:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028726:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028729:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002872c:	31 c0                	xor    eax,eax
c002872e:	01 f1                	add    ecx,esi
c0028730:	0f 92 c0             	setb   al
c0028733:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0028736:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0028739:	83 d6 00             	adc    esi,0x0
c002873c:	01 c7                	add    edi,eax
c002873e:	83 d6 00             	adc    esi,0x0
c0028741:	01 ca                	add    edx,ecx
c0028743:	0f 92 c1             	setb   cl
c0028746:	0f b6 c9             	movzx  ecx,cl
c0028749:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c002874c:	83 d6 00             	adc    esi,0x0
c002874f:	01 cf                	add    edi,ecx
c0028751:	83 d6 00             	adc    esi,0x0
c0028754:	31 c9                	xor    ecx,ecx
c0028756:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0028759:	0f 95 c1             	setne  cl
c002875c:	09 cf                	or     edi,ecx
c002875e:	85 f6                	test   esi,esi
c0028760:	78 0c                	js     c002876e <__muldf3+0x1f6>
c0028762:	01 f6                	add    esi,esi
c0028764:	89 f8                	mov    eax,edi
c0028766:	c1 e8 1f             	shr    eax,0x1f
c0028769:	09 c6                	or     esi,eax
c002876b:	01 ff                	add    edi,edi
c002876d:	4b                   	dec    ebx
c002876e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0028774:	0f 8f 85 00 00 00    	jg     c00287ff <__muldf3+0x287>
c002877a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0028780:	85 db                	test   ebx,ebx
c0028782:	0f 8f 84 00 00 00    	jg     c002880c <__muldf3+0x294>
c0028788:	83 fb cc             	cmp    ebx,0xffffffcc
c002878b:	7c 79                	jl     c0028806 <__muldf3+0x28e>
c002878d:	ba 01 00 00 00       	mov    edx,0x1
c0028792:	29 da                	sub    edx,ebx
c0028794:	81 ce 00 00 00 80    	or     esi,0x80000000
c002879a:	83 fa 1f             	cmp    edx,0x1f
c002879d:	7e 30                	jle    c00287cf <__muldf3+0x257>
c002879f:	83 fa 20             	cmp    edx,0x20
c00287a2:	75 0b                	jne    c00287af <__muldf3+0x237>
c00287a4:	31 c0                	xor    eax,eax
c00287a6:	85 ff                	test   edi,edi
c00287a8:	0f 95 c0             	setne  al
c00287ab:	89 c7                	mov    edi,eax
c00287ad:	eb 1a                	jmp    c00287c9 <__muldf3+0x251>
c00287af:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c00287b2:	89 f0                	mov    eax,esi
c00287b4:	d3 e0                	shl    eax,cl
c00287b6:	09 f8                	or     eax,edi
c00287b8:	0f 95 c0             	setne  al
c00287bb:	0f b6 c0             	movzx  eax,al
c00287be:	89 c7                	mov    edi,eax
c00287c0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00287c5:	29 d9                	sub    ecx,ebx
c00287c7:	d3 ee                	shr    esi,cl
c00287c9:	09 f7                	or     edi,esi
c00287cb:	31 db                	xor    ebx,ebx
c00287cd:	eb 3b                	jmp    c002880a <__muldf3+0x292>
c00287cf:	83 c3 1f             	add    ebx,0x1f
c00287d2:	89 f0                	mov    eax,esi
c00287d4:	88 d9                	mov    cl,bl
c00287d6:	d3 e0                	shl    eax,cl
c00287d8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00287db:	89 f8                	mov    eax,edi
c00287dd:	88 d1                	mov    cl,dl
c00287df:	d3 e8                	shr    eax,cl
c00287e1:	89 c1                	mov    ecx,eax
c00287e3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00287e6:	09 c8                	or     eax,ecx
c00287e8:	88 d9                	mov    cl,bl
c00287ea:	d3 e7                	shl    edi,cl
c00287ec:	31 db                	xor    ebx,ebx
c00287ee:	85 ff                	test   edi,edi
c00287f0:	0f 95 c3             	setne  bl
c00287f3:	89 df                	mov    edi,ebx
c00287f5:	09 c7                	or     edi,eax
c00287f7:	88 d1                	mov    cl,dl
c00287f9:	d3 ee                	shr    esi,cl
c00287fb:	31 db                	xor    ebx,ebx
c00287fd:	eb 0d                	jmp    c002880c <__muldf3+0x294>
c00287ff:	bb ff 07 00 00       	mov    ebx,0x7ff
c0028804:	eb 02                	jmp    c0028808 <__muldf3+0x290>
c0028806:	31 db                	xor    ebx,ebx
c0028808:	31 ff                	xor    edi,edi
c002880a:	31 f6                	xor    esi,esi
c002880c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002880f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0028812:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028817:	09 c3                	or     ebx,eax
c0028819:	c1 e3 14             	shl    ebx,0x14
c002881c:	89 f0                	mov    eax,esi
c002881e:	c1 e8 0b             	shr    eax,0xb
c0028821:	09 c3                	or     ebx,eax
c0028823:	89 f8                	mov    eax,edi
c0028825:	c1 e8 0b             	shr    eax,0xb
c0028828:	c1 e6 15             	shl    esi,0x15
c002882b:	09 c6                	or     esi,eax
c002882d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0028833:	0f 95 c1             	setne  cl
c0028836:	09 c8                	or     eax,ecx
c0028838:	83 e0 01             	and    eax,0x1
c002883b:	c1 ef 0a             	shr    edi,0xa
c002883e:	21 c7                	and    edi,eax
c0028840:	01 f7                	add    edi,esi
c0028842:	83 d3 00             	adc    ebx,0x0
c0028845:	89 da                	mov    edx,ebx
c0028847:	eb 03                	jmp    c002884c <__muldf3+0x2d4>
c0028849:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002884c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002884f:	89 f8                	mov    eax,edi
c0028851:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028854:	83 c4 24             	add    esp,0x24
c0028857:	5b                   	pop    ebx
c0028858:	5e                   	pop    esi
c0028859:	5f                   	pop    edi
c002885a:	5d                   	pop    ebp
c002885b:	c3                   	ret    

c002885c <__divdf3>:
c002885c:	55                   	push   ebp
c002885d:	89 e5                	mov    ebp,esp
c002885f:	57                   	push   edi
c0028860:	56                   	push   esi
c0028861:	53                   	push   ebx
c0028862:	83 ec 2c             	sub    esp,0x2c
c0028865:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028868:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002886b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002886e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0028871:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0028874:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028877:	89 ce                	mov    esi,ecx
c0028879:	89 c8                	mov    eax,ecx
c002887b:	c1 f8 14             	sar    eax,0x14
c002887e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0028881:	89 f8                	mov    eax,edi
c0028883:	89 fb                	mov    ebx,edi
c0028885:	c1 e3 0b             	shl    ebx,0xb
c0028888:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002888b:	c1 e6 0b             	shl    esi,0xb
c002888e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028894:	c1 e8 15             	shr    eax,0x15
c0028897:	09 c6                	or     esi,eax
c0028899:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c002889c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002889f:	89 c2                	mov    edx,eax
c00288a1:	c1 fa 14             	sar    edx,0x14
c00288a4:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00288a7:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00288aa:	89 de                	mov    esi,ebx
c00288ac:	c1 e6 0b             	shl    esi,0xb
c00288af:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00288b2:	c1 e0 0b             	shl    eax,0xb
c00288b5:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00288ba:	c1 eb 15             	shr    ebx,0x15
c00288bd:	09 d8                	or     eax,ebx
c00288bf:	89 c2                	mov    edx,eax
c00288c1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00288c4:	25 ff 07 00 00       	and    eax,0x7ff
c00288c9:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00288cc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00288cf:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00288d5:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c00288d8:	29 d8                	sub    eax,ebx
c00288da:	05 ff 03 00 00       	add    eax,0x3ff
c00288df:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00288e2:	46                   	inc    esi
c00288e3:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00288e9:	0f 85 a5 00 00 00    	jne    c0028994 <__divdf3+0x138>
c00288ef:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00288f2:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c00288f5:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c00288f9:	74 2a                	je     c0028925 <__divdf3+0xc9>
c00288fb:	85 f6                	test   esi,esi
c00288fd:	0f 85 cc 02 00 00    	jne    c0028bcf <__divdf3+0x373>
c0028903:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028906:	40                   	inc    eax
c0028907:	a9 fe 07 00 00       	test   eax,0x7fe
c002890c:	75 26                	jne    c0028934 <__divdf3+0xd8>
c002890e:	85 db                	test   ebx,ebx
c0028910:	74 22                	je     c0028934 <__divdf3+0xd8>
c0028912:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028915:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028918:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002891b:	09 d0                	or     eax,edx
c002891d:	0f 85 ac 02 00 00    	jne    c0028bcf <__divdf3+0x373>
c0028923:	eb 63                	jmp    c0028988 <__divdf3+0x12c>
c0028925:	85 f6                	test   esi,esi
c0028927:	75 22                	jne    c002894b <__divdf3+0xef>
c0028929:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002892c:	40                   	inc    eax
c002892d:	a9 fe 07 00 00       	test   eax,0x7fe
c0028932:	74 36                	je     c002896a <__divdf3+0x10e>
c0028934:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028938:	0f 89 91 02 00 00    	jns    c0028bcf <__divdf3+0x373>
c002893e:	89 f8                	mov    eax,edi
c0028940:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028946:	e9 80 02 00 00       	jmp    c0028bcb <__divdf3+0x36f>
c002894b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002894e:	01 f6                	add    esi,esi
c0028950:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028953:	c1 ef 1f             	shr    edi,0x1f
c0028956:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028959:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c002895c:	8d 48 ff             	lea    ecx,[eax-0x1]
c002895f:	09 f7                	or     edi,esi
c0028961:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0028964:	78 2e                	js     c0028994 <__divdf3+0x138>
c0028966:	89 c8                	mov    eax,ecx
c0028968:	eb e1                	jmp    c002894b <__divdf3+0xef>
c002896a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002896d:	09 d0                	or     eax,edx
c002896f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028973:	74 0f                	je     c0028984 <__divdf3+0x128>
c0028975:	85 c0                	test   eax,eax
c0028977:	74 bb                	je     c0028934 <__divdf3+0xd8>
c0028979:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002897c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002897f:	e9 4b 02 00 00       	jmp    c0028bcf <__divdf3+0x373>
c0028984:	85 c0                	test   eax,eax
c0028986:	75 ac                	jne    c0028934 <__divdf3+0xd8>
c0028988:	31 ff                	xor    edi,edi
c002898a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002898f:	e9 3b 02 00 00       	jmp    c0028bcf <__divdf3+0x373>
c0028994:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028997:	8d 4f 01             	lea    ecx,[edi+0x1]
c002899a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00289a0:	75 6b                	jne    c0028a0d <__divdf3+0x1b1>
c00289a2:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00289a5:	09 d6                	or     esi,edx
c00289a7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00289ab:	74 28                	je     c00289d5 <__divdf3+0x179>
c00289ad:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00289b0:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00289b3:	85 f6                	test   esi,esi
c00289b5:	0f 85 14 02 00 00    	jne    c0028bcf <__divdf3+0x373>
c00289bb:	31 ff                	xor    edi,edi
c00289bd:	31 c9                	xor    ecx,ecx
c00289bf:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00289c2:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00289c5:	0f 89 04 02 00 00    	jns    c0028bcf <__divdf3+0x373>
c00289cb:	b9 00 00 00 80       	mov    ecx,0x80000000
c00289d0:	e9 fa 01 00 00       	jmp    c0028bcf <__divdf3+0x373>
c00289d5:	85 f6                	test   esi,esi
c00289d7:	75 1b                	jne    c00289f4 <__divdf3+0x198>
c00289d9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00289dc:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00289df:	25 00 00 00 80       	and    eax,0x80000000
c00289e4:	31 c9                	xor    ecx,ecx
c00289e6:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c00289eb:	89 cf                	mov    edi,ecx
c00289ed:	89 c1                	mov    ecx,eax
c00289ef:	e9 db 01 00 00       	jmp    c0028bcf <__divdf3+0x373>
c00289f4:	01 d2                	add    edx,edx
c00289f6:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00289f9:	c1 eb 1f             	shr    ebx,0x1f
c00289fc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00289ff:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028a02:	8d 48 01             	lea    ecx,[eax+0x1]
c0028a05:	09 da                	or     edx,ebx
c0028a07:	78 04                	js     c0028a0d <__divdf3+0x1b1>
c0028a09:	89 c8                	mov    eax,ecx
c0028a0b:	eb e7                	jmp    c00289f4 <__divdf3+0x198>
c0028a0d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028a10:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028a16:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028a1c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028a1f:	39 d6                	cmp    esi,edx
c0028a21:	77 0d                	ja     c0028a30 <__divdf3+0x1d4>
c0028a23:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0028a26:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028a29:	72 1b                	jb     c0028a46 <__divdf3+0x1ea>
c0028a2b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0028a2e:	75 16                	jne    c0028a46 <__divdf3+0x1ea>
c0028a30:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028a33:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028a36:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028a39:	83 de 00             	sbb    esi,0x0
c0028a3c:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0028a3f:	ba 01 00 00 00       	mov    edx,0x1
c0028a44:	eb 02                	jmp    c0028a48 <__divdf3+0x1ec>
c0028a46:	31 d2                	xor    edx,edx
c0028a48:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0028a4f:	31 ff                	xor    edi,edi
c0028a51:	01 ff                	add    edi,edi
c0028a53:	89 d1                	mov    ecx,edx
c0028a55:	c1 e9 1f             	shr    ecx,0x1f
c0028a58:	09 cf                	or     edi,ecx
c0028a5a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0028a5d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028a60:	89 da                	mov    edx,ebx
c0028a62:	89 f3                	mov    ebx,esi
c0028a64:	8d 34 36             	lea    esi,[esi+esi*1]
c0028a67:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028a6a:	c1 e9 1f             	shr    ecx,0x1f
c0028a6d:	09 ce                	or     esi,ecx
c0028a6f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028a72:	01 c9                	add    ecx,ecx
c0028a74:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0028a77:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028a7a:	85 db                	test   ebx,ebx
c0028a7c:	78 29                	js     c0028aa7 <__divdf3+0x24b>
c0028a7e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028a81:	72 07                	jb     c0028a8a <__divdf3+0x22e>
c0028a83:	75 3c                	jne    c0028ac1 <__divdf3+0x265>
c0028a85:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028a88:	77 37                	ja     c0028ac1 <__divdf3+0x265>
c0028a8a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028a8d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028a90:	31 d2                	xor    edx,edx
c0028a92:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0028a95:	0f 97 c2             	seta   dl
c0028a98:	29 d6                	sub    esi,edx
c0028a9a:	89 d9                	mov    ecx,ebx
c0028a9c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0028a9f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028aa2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0028aa5:	eb 17                	jmp    c0028abe <__divdf3+0x262>
c0028aa7:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028aaa:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028aad:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028ab0:	0f 97 c1             	seta   cl
c0028ab3:	0f b6 c9             	movzx  ecx,cl
c0028ab6:	29 ce                	sub    esi,ecx
c0028ab8:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0028abb:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0028abe:	83 ca 01             	or     edx,0x1
c0028ac1:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028ac4:	75 8b                	jne    c0028a51 <__divdf3+0x1f5>
c0028ac6:	c1 e7 09             	shl    edi,0x9
c0028ac9:	89 d1                	mov    ecx,edx
c0028acb:	c1 e9 17             	shr    ecx,0x17
c0028ace:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028ad1:	09 f3                	or     ebx,esi
c0028ad3:	0f 95 c3             	setne  bl
c0028ad6:	0f b6 db             	movzx  ebx,bl
c0028ad9:	c1 e2 09             	shl    edx,0x9
c0028adc:	09 d3                	or     ebx,edx
c0028ade:	89 ca                	mov    edx,ecx
c0028ae0:	09 fa                	or     edx,edi
c0028ae2:	78 0c                	js     c0028af0 <__divdf3+0x294>
c0028ae4:	01 d2                	add    edx,edx
c0028ae6:	89 d9                	mov    ecx,ebx
c0028ae8:	c1 e9 1f             	shr    ecx,0x1f
c0028aeb:	09 ca                	or     edx,ecx
c0028aed:	01 db                	add    ebx,ebx
c0028aef:	48                   	dec    eax
c0028af0:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028af5:	0f 8f 83 00 00 00    	jg     c0028b7e <__divdf3+0x322>
c0028afb:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028b01:	85 c0                	test   eax,eax
c0028b03:	0f 8f 82 00 00 00    	jg     c0028b8b <__divdf3+0x32f>
c0028b09:	83 f8 cc             	cmp    eax,0xffffffcc
c0028b0c:	7c 77                	jl     c0028b85 <__divdf3+0x329>
c0028b0e:	be 01 00 00 00       	mov    esi,0x1
c0028b13:	29 c6                	sub    esi,eax
c0028b15:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028b1b:	83 fe 1f             	cmp    esi,0x1f
c0028b1e:	7e 2f                	jle    c0028b4f <__divdf3+0x2f3>
c0028b20:	83 fe 20             	cmp    esi,0x20
c0028b23:	75 0a                	jne    c0028b2f <__divdf3+0x2d3>
c0028b25:	85 db                	test   ebx,ebx
c0028b27:	0f 95 c3             	setne  bl
c0028b2a:	0f b6 db             	movzx  ebx,bl
c0028b2d:	eb 1a                	jmp    c0028b49 <__divdf3+0x2ed>
c0028b2f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0028b32:	89 d7                	mov    edi,edx
c0028b34:	d3 e7                	shl    edi,cl
c0028b36:	89 f9                	mov    ecx,edi
c0028b38:	09 d9                	or     ecx,ebx
c0028b3a:	0f 95 c3             	setne  bl
c0028b3d:	0f b6 db             	movzx  ebx,bl
c0028b40:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028b45:	29 c1                	sub    ecx,eax
c0028b47:	d3 ea                	shr    edx,cl
c0028b49:	09 d3                	or     ebx,edx
c0028b4b:	31 c0                	xor    eax,eax
c0028b4d:	eb 3a                	jmp    c0028b89 <__divdf3+0x32d>
c0028b4f:	83 c0 1f             	add    eax,0x1f
c0028b52:	89 d7                	mov    edi,edx
c0028b54:	88 c1                	mov    cl,al
c0028b56:	d3 e7                	shl    edi,cl
c0028b58:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028b5b:	89 df                	mov    edi,ebx
c0028b5d:	89 f1                	mov    ecx,esi
c0028b5f:	d3 ef                	shr    edi,cl
c0028b61:	89 f9                	mov    ecx,edi
c0028b63:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028b66:	09 cf                	or     edi,ecx
c0028b68:	88 c1                	mov    cl,al
c0028b6a:	d3 e3                	shl    ebx,cl
c0028b6c:	85 db                	test   ebx,ebx
c0028b6e:	0f 95 c3             	setne  bl
c0028b71:	0f b6 db             	movzx  ebx,bl
c0028b74:	09 fb                	or     ebx,edi
c0028b76:	89 f1                	mov    ecx,esi
c0028b78:	d3 ea                	shr    edx,cl
c0028b7a:	31 c0                	xor    eax,eax
c0028b7c:	eb 0d                	jmp    c0028b8b <__divdf3+0x32f>
c0028b7e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0028b83:	eb 02                	jmp    c0028b87 <__divdf3+0x32b>
c0028b85:	31 c0                	xor    eax,eax
c0028b87:	31 db                	xor    ebx,ebx
c0028b89:	31 d2                	xor    edx,edx
c0028b8b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028b8e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028b91:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0028b97:	09 c8                	or     eax,ecx
c0028b99:	c1 e0 14             	shl    eax,0x14
c0028b9c:	89 d1                	mov    ecx,edx
c0028b9e:	c1 e9 0b             	shr    ecx,0xb
c0028ba1:	09 c8                	or     eax,ecx
c0028ba3:	89 c6                	mov    esi,eax
c0028ba5:	89 d9                	mov    ecx,ebx
c0028ba7:	c1 e9 0b             	shr    ecx,0xb
c0028baa:	c1 e2 15             	shl    edx,0x15
c0028bad:	09 ca                	or     edx,ecx
c0028baf:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028bb5:	0f 95 c0             	setne  al
c0028bb8:	09 c1                	or     ecx,eax
c0028bba:	83 e1 01             	and    ecx,0x1
c0028bbd:	c1 eb 0a             	shr    ebx,0xa
c0028bc0:	21 cb                	and    ebx,ecx
c0028bc2:	01 d3                	add    ebx,edx
c0028bc4:	89 d8                	mov    eax,ebx
c0028bc6:	83 d6 00             	adc    esi,0x0
c0028bc9:	89 f2                	mov    edx,esi
c0028bcb:	89 c7                	mov    edi,eax
c0028bcd:	89 d1                	mov    ecx,edx
c0028bcf:	89 f8                	mov    eax,edi
c0028bd1:	89 ca                	mov    edx,ecx
c0028bd3:	83 c4 2c             	add    esp,0x2c
c0028bd6:	5b                   	pop    ebx
c0028bd7:	5e                   	pop    esi
c0028bd8:	5f                   	pop    edi
c0028bd9:	5d                   	pop    ebp
c0028bda:	c3                   	ret    

c0028bdb <__floatsidf>:
c0028bdb:	55                   	push   ebp
c0028bdc:	89 e5                	mov    ebp,esp
c0028bde:	56                   	push   esi
c0028bdf:	53                   	push   ebx
c0028be0:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028be3:	85 db                	test   ebx,ebx
c0028be5:	7e 15                	jle    c0028bfc <__floatsidf+0x21>
c0028be7:	0f bd cb             	bsr    ecx,ebx
c0028bea:	83 f1 1f             	xor    ecx,0x1f
c0028bed:	d3 e3                	shl    ebx,cl
c0028bef:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028bf5:	b8 1e 04 00 00       	mov    eax,0x41e
c0028bfa:	eb 21                	jmp    c0028c1d <__floatsidf+0x42>
c0028bfc:	b8 00 00 00 00       	mov    eax,0x0
c0028c01:	ba 00 00 00 00       	mov    edx,0x0
c0028c06:	74 2a                	je     c0028c32 <__floatsidf+0x57>
c0028c08:	f7 db                	neg    ebx
c0028c0a:	0f bd cb             	bsr    ecx,ebx
c0028c0d:	83 f1 1f             	xor    ecx,0x1f
c0028c10:	d3 e3                	shl    ebx,cl
c0028c12:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028c18:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028c1d:	29 c8                	sub    eax,ecx
c0028c1f:	c1 e0 14             	shl    eax,0x14
c0028c22:	89 c1                	mov    ecx,eax
c0028c24:	89 de                	mov    esi,ebx
c0028c26:	c1 ee 0b             	shr    esi,0xb
c0028c29:	09 f1                	or     ecx,esi
c0028c2b:	89 ca                	mov    edx,ecx
c0028c2d:	c1 e3 15             	shl    ebx,0x15
c0028c30:	89 d8                	mov    eax,ebx
c0028c32:	5b                   	pop    ebx
c0028c33:	5e                   	pop    esi
c0028c34:	5d                   	pop    ebp
c0028c35:	c3                   	ret    

c0028c36 <__floatunsidf>:
c0028c36:	55                   	push   ebp
c0028c37:	89 e5                	mov    ebp,esp
c0028c39:	56                   	push   esi
c0028c3a:	53                   	push   ebx
c0028c3b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028c3e:	85 db                	test   ebx,ebx
c0028c40:	74 2a                	je     c0028c6c <__floatunsidf+0x36>
c0028c42:	0f bd cb             	bsr    ecx,ebx
c0028c45:	83 f1 1f             	xor    ecx,0x1f
c0028c48:	d3 e3                	shl    ebx,cl
c0028c4a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028c50:	b8 1e 04 00 00       	mov    eax,0x41e
c0028c55:	29 c8                	sub    eax,ecx
c0028c57:	c1 e0 14             	shl    eax,0x14
c0028c5a:	89 c1                	mov    ecx,eax
c0028c5c:	89 de                	mov    esi,ebx
c0028c5e:	c1 ee 0b             	shr    esi,0xb
c0028c61:	09 f1                	or     ecx,esi
c0028c63:	89 ca                	mov    edx,ecx
c0028c65:	c1 e3 15             	shl    ebx,0x15
c0028c68:	89 d8                	mov    eax,ebx
c0028c6a:	eb 04                	jmp    c0028c70 <__floatunsidf+0x3a>
c0028c6c:	31 c0                	xor    eax,eax
c0028c6e:	31 d2                	xor    edx,edx
c0028c70:	5b                   	pop    ebx
c0028c71:	5e                   	pop    esi
c0028c72:	5d                   	pop    ebp
c0028c73:	c3                   	ret    

c0028c74 <__fixdfsi>:
c0028c74:	55                   	push   ebp
c0028c75:	89 e5                	mov    ebp,esp
c0028c77:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028c7a:	89 d1                	mov    ecx,edx
c0028c7c:	c1 e1 0b             	shl    ecx,0xb
c0028c7f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028c85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028c88:	c1 e8 15             	shr    eax,0x15
c0028c8b:	09 c1                	or     ecx,eax
c0028c8d:	c1 fa 14             	sar    edx,0x14
c0028c90:	78 1f                	js     c0028cb1 <__fixdfsi+0x3d>
c0028c92:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028c98:	31 c0                	xor    eax,eax
c0028c9a:	83 fa 1e             	cmp    edx,0x1e
c0028c9d:	77 40                	ja     c0028cdf <__fixdfsi+0x6b>
c0028c9f:	89 c8                	mov    eax,ecx
c0028ca1:	0d 00 00 00 80       	or     eax,0x80000000
c0028ca6:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028cab:	29 d1                	sub    ecx,edx
c0028cad:	d3 e8                	shr    eax,cl
c0028caf:	eb 2e                	jmp    c0028cdf <__fixdfsi+0x6b>
c0028cb1:	31 c0                	xor    eax,eax
c0028cb3:	81 c2 01 04 00 00    	add    edx,0x401
c0028cb9:	78 24                	js     c0028cdf <__fixdfsi+0x6b>
c0028cbb:	83 fa 1e             	cmp    edx,0x1e
c0028cbe:	7e 09                	jle    c0028cc9 <__fixdfsi+0x55>
c0028cc0:	83 fa 1f             	cmp    edx,0x1f
c0028cc3:	75 18                	jne    c0028cdd <__fixdfsi+0x69>
c0028cc5:	85 c9                	test   ecx,ecx
c0028cc7:	75 14                	jne    c0028cdd <__fixdfsi+0x69>
c0028cc9:	89 c8                	mov    eax,ecx
c0028ccb:	0d 00 00 00 80       	or     eax,0x80000000
c0028cd0:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028cd5:	29 d1                	sub    ecx,edx
c0028cd7:	d3 e8                	shr    eax,cl
c0028cd9:	f7 d8                	neg    eax
c0028cdb:	eb 02                	jmp    c0028cdf <__fixdfsi+0x6b>
c0028cdd:	31 c0                	xor    eax,eax
c0028cdf:	5d                   	pop    ebp
c0028ce0:	c3                   	ret    

c0028ce1 <__fixunsdfsi>:
c0028ce1:	55                   	push   ebp
c0028ce2:	89 e5                	mov    ebp,esp
c0028ce4:	53                   	push   ebx
c0028ce5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028ce8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028ceb:	89 d3                	mov    ebx,edx
c0028ced:	c1 fb 14             	sar    ebx,0x14
c0028cf0:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028cf6:	31 c0                	xor    eax,eax
c0028cf8:	83 fb 1f             	cmp    ebx,0x1f
c0028cfb:	77 1d                	ja     c0028d1a <__fixunsdfsi+0x39>
c0028cfd:	89 d0                	mov    eax,edx
c0028cff:	c1 e0 0b             	shl    eax,0xb
c0028d02:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028d07:	c1 e9 15             	shr    ecx,0x15
c0028d0a:	09 c8                	or     eax,ecx
c0028d0c:	0d 00 00 00 80       	or     eax,0x80000000
c0028d11:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028d16:	29 d9                	sub    ecx,ebx
c0028d18:	d3 e8                	shr    eax,cl
c0028d1a:	5b                   	pop    ebx
c0028d1b:	5d                   	pop    ebp
c0028d1c:	c3                   	ret    

c0028d1d <__cmpdf2>:
c0028d1d:	55                   	push   ebp
c0028d1e:	89 e5                	mov    ebp,esp
c0028d20:	57                   	push   edi
c0028d21:	56                   	push   esi
c0028d22:	53                   	push   ebx
c0028d23:	83 ec 0c             	sub    esp,0xc
c0028d26:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028d29:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028d2c:	89 ca                	mov    edx,ecx
c0028d2e:	c1 ea 14             	shr    edx,0x14
c0028d31:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028d37:	89 cb                	mov    ebx,ecx
c0028d39:	c1 fb 1f             	sar    ebx,0x1f
c0028d3c:	31 da                	xor    edx,ebx
c0028d3e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028d41:	89 df                	mov    edi,ebx
c0028d43:	c1 e7 0b             	shl    edi,0xb
c0028d46:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028d49:	c1 e1 0b             	shl    ecx,0xb
c0028d4c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028d52:	c1 eb 15             	shr    ebx,0x15
c0028d55:	09 d9                	or     ecx,ebx
c0028d57:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028d5a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028d5d:	89 ce                	mov    esi,ecx
c0028d5f:	c1 ee 14             	shr    esi,0x14
c0028d62:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028d68:	89 cb                	mov    ebx,ecx
c0028d6a:	c1 fb 1f             	sar    ebx,0x1f
c0028d6d:	31 de                	xor    esi,ebx
c0028d6f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028d72:	89 df                	mov    edi,ebx
c0028d74:	c1 e7 0b             	shl    edi,0xb
c0028d77:	c1 e1 0b             	shl    ecx,0xb
c0028d7a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028d80:	c1 eb 15             	shr    ebx,0x15
c0028d83:	09 d9                	or     ecx,ebx
c0028d85:	89 d3                	mov    ebx,edx
c0028d87:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028d8d:	43                   	inc    ebx
c0028d8e:	83 fb 01             	cmp    ebx,0x1
c0028d91:	77 08                	ja     c0028d9b <__cmpdf2+0x7e>
c0028d93:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028d96:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028d99:	75 68                	jne    c0028e03 <__cmpdf2+0xe6>
c0028d9b:	89 f3                	mov    ebx,esi
c0028d9d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028da3:	43                   	inc    ebx
c0028da4:	83 fb 01             	cmp    ebx,0x1
c0028da7:	77 06                	ja     c0028daf <__cmpdf2+0x92>
c0028da9:	89 fb                	mov    ebx,edi
c0028dab:	09 cb                	or     ebx,ecx
c0028dad:	75 54                	jne    c0028e03 <__cmpdf2+0xe6>
c0028daf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028db2:	09 f8                	or     eax,edi
c0028db4:	09 c8                	or     eax,ecx
c0028db6:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028db9:	75 12                	jne    c0028dcd <__cmpdf2+0xb0>
c0028dbb:	8d 42 01             	lea    eax,[edx+0x1]
c0028dbe:	83 f8 01             	cmp    eax,0x1
c0028dc1:	77 0a                	ja     c0028dcd <__cmpdf2+0xb0>
c0028dc3:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028dc6:	31 c0                	xor    eax,eax
c0028dc8:	83 fb 01             	cmp    ebx,0x1
c0028dcb:	76 36                	jbe    c0028e03 <__cmpdf2+0xe6>
c0028dcd:	b8 01 00 00 00       	mov    eax,0x1
c0028dd2:	39 f2                	cmp    edx,esi
c0028dd4:	7f 2d                	jg     c0028e03 <__cmpdf2+0xe6>
c0028dd6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028ddb:	7c 26                	jl     c0028e03 <__cmpdf2+0xe6>
c0028ddd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028de0:	77 07                	ja     c0028de9 <__cmpdf2+0xcc>
c0028de2:	72 16                	jb     c0028dfa <__cmpdf2+0xdd>
c0028de4:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028de7:	76 0a                	jbe    c0028df3 <__cmpdf2+0xd6>
c0028de9:	89 d0                	mov    eax,edx
c0028deb:	c1 f8 1f             	sar    eax,0x1f
c0028dee:	83 c8 01             	or     eax,0x1
c0028df1:	eb 10                	jmp    c0028e03 <__cmpdf2+0xe6>
c0028df3:	b8 00 00 00 00       	mov    eax,0x0
c0028df8:	73 09                	jae    c0028e03 <__cmpdf2+0xe6>
c0028dfa:	89 d0                	mov    eax,edx
c0028dfc:	c1 f8 1f             	sar    eax,0x1f
c0028dff:	83 e0 02             	and    eax,0x2
c0028e02:	48                   	dec    eax
c0028e03:	83 c4 0c             	add    esp,0xc
c0028e06:	5b                   	pop    ebx
c0028e07:	5e                   	pop    esi
c0028e08:	5f                   	pop    edi
c0028e09:	5d                   	pop    ebp
c0028e0a:	c3                   	ret    

c0028e0b <__eqdf2>:
c0028e0b:	55                   	push   ebp
c0028e0c:	89 e5                	mov    ebp,esp
c0028e0e:	50                   	push   eax
c0028e0f:	6a 01                	push   0x1
c0028e11:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028e14:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028e17:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028e1a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028e1d:	e8 fb fe ff ff       	call   c0028d1d <__cmpdf2>
c0028e22:	83 c4 18             	add    esp,0x18
c0028e25:	c9                   	leave  
c0028e26:	c3                   	ret    

c0028e27 <__nedf2>:
c0028e27:	eb e2                	jmp    c0028e0b <__eqdf2>

c0028e29 <__gtdf2>:
c0028e29:	55                   	push   ebp
c0028e2a:	89 e5                	mov    ebp,esp
c0028e2c:	50                   	push   eax
c0028e2d:	6a ff                	push   0xffffffff
c0028e2f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028e32:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028e35:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028e38:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028e3b:	e8 dd fe ff ff       	call   c0028d1d <__cmpdf2>
c0028e40:	83 c4 18             	add    esp,0x18
c0028e43:	c9                   	leave  
c0028e44:	c3                   	ret    

c0028e45 <__gedf2>:
c0028e45:	eb e2                	jmp    c0028e29 <__gtdf2>

c0028e47 <__ltdf2>:
c0028e47:	eb c2                	jmp    c0028e0b <__eqdf2>

c0028e49 <__ledf2>:
c0028e49:	eb c0                	jmp    c0028e0b <__eqdf2>

c0028e4b <__truncdfsf2>:
c0028e4b:	55                   	push   ebp
c0028e4c:	89 e5                	mov    ebp,esp
c0028e4e:	57                   	push   edi
c0028e4f:	56                   	push   esi
c0028e50:	53                   	push   ebx
c0028e51:	83 ec 0c             	sub    esp,0xc
c0028e54:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028e57:	89 d1                	mov    ecx,edx
c0028e59:	c1 f9 14             	sar    ecx,0x14
c0028e5c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028e5f:	89 df                	mov    edi,ebx
c0028e61:	c1 e7 0b             	shl    edi,0xb
c0028e64:	89 d0                	mov    eax,edx
c0028e66:	c1 e0 0b             	shl    eax,0xb
c0028e69:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028e6e:	c1 eb 15             	shr    ebx,0x15
c0028e71:	09 d8                	or     eax,ebx
c0028e73:	89 cb                	mov    ebx,ecx
c0028e75:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028e7b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028e81:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028e87:	0f 86 9e 00 00 00    	jbe    c0028f2b <__truncdfsf2+0xe0>
c0028e8d:	85 db                	test   ebx,ebx
c0028e8f:	75 0a                	jne    c0028e9b <__truncdfsf2+0x50>
c0028e91:	c1 fa 17             	sar    edx,0x17
c0028e94:	30 d2                	xor    dl,dl
c0028e96:	e9 84 00 00 00       	jmp    c0028f1f <__truncdfsf2+0xd4>
c0028e9b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028ea1:	83 fe 83             	cmp    esi,0xffffff83
c0028ea4:	7d 4b                	jge    c0028ef1 <__truncdfsf2+0xa6>
c0028ea6:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028eab:	29 f1                	sub    ecx,esi
c0028ead:	83 f9 1f             	cmp    ecx,0x1f
c0028eb0:	7f 6b                	jg     c0028f1d <__truncdfsf2+0xd2>
c0028eb2:	0d 00 00 00 80       	or     eax,0x80000000
c0028eb7:	89 c3                	mov    ebx,eax
c0028eb9:	d3 eb                	shr    ebx,cl
c0028ebb:	be 01 00 00 00       	mov    esi,0x1
c0028ec0:	d3 e6                	shl    esi,cl
c0028ec2:	4e                   	dec    esi
c0028ec3:	21 f0                	and    eax,esi
c0028ec5:	09 f8                	or     eax,edi
c0028ec7:	0f 95 c0             	setne  al
c0028eca:	0f b6 c0             	movzx  eax,al
c0028ecd:	09 c3                	or     ebx,eax
c0028ecf:	89 d9                	mov    ecx,ebx
c0028ed1:	c1 e9 08             	shr    ecx,0x8
c0028ed4:	f6 c3 7f             	test   bl,0x7f
c0028ed7:	0f 95 c0             	setne  al
c0028eda:	09 c8                	or     eax,ecx
c0028edc:	83 e0 01             	and    eax,0x1
c0028edf:	c1 eb 07             	shr    ebx,0x7
c0028ee2:	21 c3                	and    ebx,eax
c0028ee4:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028eea:	09 d1                	or     ecx,edx
c0028eec:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028eef:	eb 76                	jmp    c0028f67 <__truncdfsf2+0x11c>
c0028ef1:	83 c6 80             	add    esi,0xffffff80
c0028ef4:	7e 1d                	jle    c0028f13 <__truncdfsf2+0xc8>
c0028ef6:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028efc:	75 0b                	jne    c0028f09 <__truncdfsf2+0xbe>
c0028efe:	09 f8                	or     eax,edi
c0028f00:	74 09                	je     c0028f0b <__truncdfsf2+0xc0>
c0028f02:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028f07:	eb 02                	jmp    c0028f0b <__truncdfsf2+0xc0>
c0028f09:	31 c0                	xor    eax,eax
c0028f0b:	c1 fa 17             	sar    edx,0x17
c0028f0e:	80 ca ff             	or     dl,0xff
c0028f11:	eb 0e                	jmp    c0028f21 <__truncdfsf2+0xd6>
c0028f13:	c1 fa 1f             	sar    edx,0x1f
c0028f16:	c1 e2 08             	shl    edx,0x8
c0028f19:	09 ca                	or     edx,ecx
c0028f1b:	eb 04                	jmp    c0028f21 <__truncdfsf2+0xd6>
c0028f1d:	31 d2                	xor    edx,edx
c0028f1f:	31 c0                	xor    eax,eax
c0028f21:	c1 e2 17             	shl    edx,0x17
c0028f24:	c1 e8 08             	shr    eax,0x8
c0028f27:	09 d0                	or     eax,edx
c0028f29:	eb 3c                	jmp    c0028f67 <__truncdfsf2+0x11c>
c0028f2b:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028f31:	89 ca                	mov    edx,ecx
c0028f33:	c1 fa 0b             	sar    edx,0xb
c0028f36:	c1 e2 08             	shl    edx,0x8
c0028f39:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028f3c:	31 db                	xor    ebx,ebx
c0028f3e:	85 ff                	test   edi,edi
c0028f40:	0f 95 c3             	setne  bl
c0028f43:	09 d8                	or     eax,ebx
c0028f45:	89 c3                	mov    ebx,eax
c0028f47:	c1 eb 08             	shr    ebx,0x8
c0028f4a:	a8 7f                	test   al,0x7f
c0028f4c:	0f 95 c2             	setne  dl
c0028f4f:	89 d6                	mov    esi,edx
c0028f51:	09 de                	or     esi,ebx
c0028f53:	83 e6 01             	and    esi,0x1
c0028f56:	c1 e8 07             	shr    eax,0x7
c0028f59:	21 f0                	and    eax,esi
c0028f5b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028f5e:	09 ca                	or     edx,ecx
c0028f60:	c1 e2 17             	shl    edx,0x17
c0028f63:	09 da                	or     edx,ebx
c0028f65:	01 d0                	add    eax,edx
c0028f67:	83 c4 0c             	add    esp,0xc
c0028f6a:	5b                   	pop    ebx
c0028f6b:	5e                   	pop    esi
c0028f6c:	5f                   	pop    edi
c0028f6d:	5d                   	pop    ebp
c0028f6e:	c3                   	ret    

c0028f6f <__extendsfdf2>:
c0028f6f:	55                   	push   ebp
c0028f70:	89 e5                	mov    ebp,esp
c0028f72:	57                   	push   edi
c0028f73:	56                   	push   esi
c0028f74:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028f77:	89 d1                	mov    ecx,edx
c0028f79:	c1 f9 17             	sar    ecx,0x17
c0028f7c:	c1 e2 08             	shl    edx,0x8
c0028f7f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028f85:	89 c8                	mov    eax,ecx
c0028f87:	80 e4 f8             	and    ah,0xf8
c0028f8a:	8d 71 01             	lea    esi,[ecx+0x1]
c0028f8d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028f93:	75 27                	jne    c0028fbc <__extendsfdf2+0x4d>
c0028f95:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028f9b:	75 18                	jne    c0028fb5 <__extendsfdf2+0x46>
c0028f9d:	85 d2                	test   edx,edx
c0028f9f:	74 20                	je     c0028fc1 <__extendsfdf2+0x52>
c0028fa1:	41                   	inc    ecx
c0028fa2:	01 d2                	add    edx,edx
c0028fa4:	79 fb                	jns    c0028fa1 <__extendsfdf2+0x32>
c0028fa6:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028fac:	29 c8                	sub    eax,ecx
c0028fae:	05 81 03 00 00       	add    eax,0x381
c0028fb3:	eb 0c                	jmp    c0028fc1 <__extendsfdf2+0x52>
c0028fb5:	05 00 07 00 00       	add    eax,0x700
c0028fba:	eb 05                	jmp    c0028fc1 <__extendsfdf2+0x52>
c0028fbc:	05 80 03 00 00       	add    eax,0x380
c0028fc1:	c1 e0 14             	shl    eax,0x14
c0028fc4:	89 c1                	mov    ecx,eax
c0028fc6:	89 d0                	mov    eax,edx
c0028fc8:	c1 e8 0b             	shr    eax,0xb
c0028fcb:	09 c1                	or     ecx,eax
c0028fcd:	c1 e2 15             	shl    edx,0x15
c0028fd0:	89 d0                	mov    eax,edx
c0028fd2:	89 ca                	mov    edx,ecx
c0028fd4:	5e                   	pop    esi
c0028fd5:	5f                   	pop    edi
c0028fd6:	5d                   	pop    ebp
c0028fd7:	c3                   	ret    
c0028fd8:	66 90                	xchg   ax,ax
c0028fda:	66 90                	xchg   ax,ax
c0028fdc:	66 90                	xchg   ax,ax
c0028fde:	66 90                	xchg   ax,ax

c0028fe0 <fabs>:
c0028fe0:	83 ec 0c             	sub    esp,0xc
c0028fe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fe7:	89 04 24             	mov    DWORD PTR [esp],eax
c0028fea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028fee:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028ff3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028ff7:	dd 04 24             	fld    QWORD PTR [esp]
c0028ffa:	83 c4 0c             	add    esp,0xc
c0028ffd:	c3                   	ret    
c0028ffe:	66 90                	xchg   ax,ax

c0029000 <lrint>:
c0029000:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0029004:	83 ec 04             	sub    esp,0x4
c0029007:	db 1c 24             	fistp  DWORD PTR [esp]
c002900a:	58                   	pop    eax
c002900b:	c3                   	ret    

c002900c <lrintf>:
c002900c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0029010:	83 ec 04             	sub    esp,0x4
c0029013:	db 1c 24             	fistp  DWORD PTR [esp]
c0029016:	58                   	pop    eax
c0029017:	c3                   	ret    

Disassembly of section .init:

c0029018 <_init>:
c0029018:	55                   	push   ebp
c0029019:	89 e5                	mov    ebp,esp
c002901b:	e8 f8 70 fd ff       	call   c0000118 <frame_dummy>
c0029020:	e8 5b e0 ff ff       	call   c0027080 <__do_global_ctors_aux>
c0029025:	5d                   	pop    ebp
c0029026:	c3                   	ret    

Disassembly of section .fini:

c0029027 <_fini>:
c0029027:	55                   	push   ebp
c0029028:	89 e5                	mov    ebp,esp
c002902a:	e8 79 70 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002902f:	5d                   	pop    ebp
c0029030:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0029032 <Computer::~Computer()>:
c0029032:	83 ec 0c             	sub    esp,0xc
c0029035:	ba cc ac 02 c0       	mov    edx,0xc002accc
c002903a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002903e:	89 10                	mov    DWORD PTR [eax],edx
c0029040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029044:	83 ec 0c             	sub    esp,0xc
c0029047:	50                   	push   eax
c0029048:	e8 3f b1 fe ff       	call   c001418c <Device::~Device()>
c002904d:	83 c4 10             	add    esp,0x10
c0029050:	90                   	nop
c0029051:	83 c4 0c             	add    esp,0xc
c0029054:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0029056 <Computer::~Computer()>:
c0029056:	83 ec 0c             	sub    esp,0xc
c0029059:	83 ec 0c             	sub    esp,0xc
c002905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029060:	e8 cd ff ff ff       	call   c0029032 <Computer::~Computer()>
c0029065:	83 c4 10             	add    esp,0x10
c0029068:	83 ec 08             	sub    esp,0x8
c002906b:	68 ec 01 00 00       	push   0x1ec
c0029070:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029074:	e8 2c 9d fe ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c0029079:	83 c4 10             	add    esp,0x10
c002907c:	83 c4 0c             	add    esp,0xc
c002907f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0029080 <idleCommon()>:
c0029080:	83 ec 0c             	sub    esp,0xc
c0029083:	fa                   	cli    
c0029084:	ff 05 a8 25 03 c0    	inc    DWORD PTR ds:0xc00325a8
c002908a:	e8 91 55 ff ff       	call   c001e620 <schedule()>
c002908f:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c0029094:	48                   	dec    eax
c0029095:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c002909a:	75 01                	jne    c002909d <idleCommon()+0x1d>
c002909c:	fb                   	sti    
c002909d:	83 c4 0c             	add    esp,0xc
c00290a0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00290a2 <LinkedList<UnixFile>::~LinkedList()>:
c00290a2:	90                   	nop
c00290a3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00290a4 <LinkedList<UnixFile>::LinkedList()>:
c00290a4:	83 ec 0c             	sub    esp,0xc
c00290a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ab:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00290b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290b5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00290bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290c0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00290c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290cb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00290d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290d5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00290dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290e0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00290e7:	83 ec 0c             	sub    esp,0xc
c00290ea:	68 8a af 02 c0       	push   0xc002af8a
c00290ef:	e8 91 9d fe ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00290f4:	83 c4 10             	add    esp,0x10
c00290f7:	90                   	nop
c00290f8:	83 c4 0c             	add    esp,0xc
c00290fb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00290fc <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00290fc:	83 ec 0c             	sub    esp,0xc
c00290ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029104:	75 10                	jne    c0029116 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0029106:	83 ec 0c             	sub    esp,0xc
c0029109:	68 a4 af 02 c0       	push   0xc002afa4
c002910e:	e8 5a 17 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c0029113:	83 c4 10             	add    esp,0x10
c0029116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002911a:	8b 00                	mov    eax,DWORD PTR [eax]
c002911c:	85 c0                	test   eax,eax
c002911e:	74 34                	je     c0029154 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0029120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029124:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029127:	85 c0                	test   eax,eax
c0029129:	74 29                	je     c0029154 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002912b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002912f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029132:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029136:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002913d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029141:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029148:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002914b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029152:	eb 65                	jmp    c00291b9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029158:	8b 00                	mov    eax,DWORD PTR [eax]
c002915a:	85 c0                	test   eax,eax
c002915c:	75 4b                	jne    c00291a9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002915e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029162:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029165:	85 c0                	test   eax,eax
c0029167:	75 40                	jne    c00291a9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0029169:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002916d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029171:	89 10                	mov    DWORD PTR [eax],edx
c0029173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029177:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002917b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002917e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029182:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029185:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002918c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029190:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029193:	85 c0                	test   eax,eax
c0029195:	74 22                	je     c00291b9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029197:	83 ec 0c             	sub    esp,0xc
c002919a:	68 c6 af 02 c0       	push   0xc002afc6
c002919f:	e8 c9 16 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c00291a4:	83 c4 10             	add    esp,0x10
c00291a7:	eb 10                	jmp    c00291b9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00291a9:	83 ec 0c             	sub    esp,0xc
c00291ac:	68 d0 af 02 c0       	push   0xc002afd0
c00291b1:	e8 b7 16 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c00291b6:	83 c4 10             	add    esp,0x10
c00291b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291bd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00291c0:	8d 50 01             	lea    edx,[eax+0x1]
c00291c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291c7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00291ca:	90                   	nop
c00291cb:	83 c4 0c             	add    esp,0xc
c00291ce:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00291d0 <LinkedList<UnixFile>::getFirstElement()>:
c00291d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00291d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00291d6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00291d8 <LinkedList<UnixFile>::removeFirst()>:
c00291d8:	83 ec 0c             	sub    esp,0xc
c00291db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291df:	8b 00                	mov    eax,DWORD PTR [eax]
c00291e1:	85 c0                	test   eax,eax
c00291e3:	75 12                	jne    c00291f7 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00291e5:	83 ec 0c             	sub    esp,0xc
c00291e8:	68 dc af 02 c0       	push   0xc002afdc
c00291ed:	e8 7b 16 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c00291f2:	83 c4 10             	add    esp,0x10
c00291f5:	eb 7e                	jmp    c0029275 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00291f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291fb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00291fe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029201:	85 c0                	test   eax,eax
c0029203:	74 10                	je     c0029215 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0029205:	83 ec 0c             	sub    esp,0xc
c0029208:	68 27 b0 02 c0       	push   0xc002b027
c002920d:	e8 5b 16 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c0029212:	83 c4 10             	add    esp,0x10
c0029215:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029219:	8b 00                	mov    eax,DWORD PTR [eax]
c002921b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002921e:	85 c0                	test   eax,eax
c0029220:	75 33                	jne    c0029255 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0029222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029226:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002922c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029230:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002923b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002923e:	83 f8 01             	cmp    eax,0x1
c0029241:	74 21                	je     c0029264 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0029243:	83 ec 0c             	sub    esp,0xc
c0029246:	68 00 b0 02 c0       	push   0xc002b000
c002924b:	e8 1d 16 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c0029250:	83 c4 10             	add    esp,0x10
c0029253:	eb 0f                	jmp    c0029264 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0029255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029259:	8b 00                	mov    eax,DWORD PTR [eax]
c002925b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002925e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029262:	89 10                	mov    DWORD PTR [eax],edx
c0029264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029268:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002926b:	8d 50 ff             	lea    edx,[eax-0x1]
c002926e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029272:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029275:	83 c4 0c             	add    esp,0xc
c0029278:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002927a <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002927a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002927e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029281:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0029282 <DriverlessDevice::~DriverlessDevice()>:
c0029282:	ba a4 b7 02 c0       	mov    edx,0xc002b7a4
c0029287:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002928b:	89 10                	mov    DWORD PTR [eax],edx
c002928d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029291:	50                   	push   eax
c0029292:	e8 f5 ae fe ff       	call   c001418c <Device::~Device()>
c0029297:	83 c4 04             	add    esp,0x4
c002929a:	90                   	nop
c002929b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002929c <DriverlessDevice::~DriverlessDevice()>:
c002929c:	83 ec 0c             	sub    esp,0xc
c002929f:	83 ec 0c             	sub    esp,0xc
c00292a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292a6:	e8 d7 ff ff ff       	call   c0029282 <DriverlessDevice::~DriverlessDevice()>
c00292ab:	83 c4 10             	add    esp,0x10
c00292ae:	83 ec 08             	sub    esp,0x8
c00292b1:	68 58 01 00 00       	push   0x158
c00292b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292ba:	e8 e6 9a fe ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c00292bf:	83 c4 10             	add    esp,0x10
c00292c2:	83 c4 0c             	add    esp,0xc
c00292c5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00292c6 <LinkedList<Device>::addElement(Device*)>:
c00292c6:	83 ec 0c             	sub    esp,0xc
c00292c9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00292ce:	75 10                	jne    c00292e0 <LinkedList<Device>::addElement(Device*)+0x1a>
c00292d0:	83 ec 0c             	sub    esp,0xc
c00292d3:	68 a4 af 02 c0       	push   0xc002afa4
c00292d8:	e8 90 15 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c00292dd:	83 c4 10             	add    esp,0x10
c00292e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00292e6:	85 c0                	test   eax,eax
c00292e8:	74 3a                	je     c0029324 <LinkedList<Device>::addElement(Device*)+0x5e>
c00292ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00292f1:	85 c0                	test   eax,eax
c00292f3:	74 2f                	je     c0029324 <LinkedList<Device>::addElement(Device*)+0x5e>
c00292f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292f9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00292fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029300:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0029306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002930a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002930e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029311:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029315:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029318:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0029322:	eb 68                	jmp    c002938c <LinkedList<Device>::addElement(Device*)+0xc6>
c0029324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029328:	8b 00                	mov    eax,DWORD PTR [eax]
c002932a:	85 c0                	test   eax,eax
c002932c:	75 4e                	jne    c002937c <LinkedList<Device>::addElement(Device*)+0xb6>
c002932e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029332:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029335:	85 c0                	test   eax,eax
c0029337:	75 43                	jne    c002937c <LinkedList<Device>::addElement(Device*)+0xb6>
c0029339:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002933d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029341:	89 10                	mov    DWORD PTR [eax],edx
c0029343:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029347:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002934b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002934e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029352:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029355:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002935f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029363:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029366:	85 c0                	test   eax,eax
c0029368:	74 22                	je     c002938c <LinkedList<Device>::addElement(Device*)+0xc6>
c002936a:	83 ec 0c             	sub    esp,0xc
c002936d:	68 c6 af 02 c0       	push   0xc002afc6
c0029372:	e8 f6 14 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c0029377:	83 c4 10             	add    esp,0x10
c002937a:	eb 10                	jmp    c002938c <LinkedList<Device>::addElement(Device*)+0xc6>
c002937c:	83 ec 0c             	sub    esp,0xc
c002937f:	68 d0 af 02 c0       	push   0xc002afd0
c0029384:	e8 e4 14 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c0029389:	83 c4 10             	add    esp,0x10
c002938c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029390:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029393:	8d 50 01             	lea    edx,[eax+0x1]
c0029396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002939a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002939d:	90                   	nop
c002939e:	83 c4 0c             	add    esp,0xc
c00293a1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00293a2 <LinkedList<Device>::LinkedList()>:
c00293a2:	83 ec 0c             	sub    esp,0xc
c00293a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293a9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00293af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293b3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00293ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293be:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00293c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293c9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00293cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293d3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00293da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293de:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00293e5:	83 ec 0c             	sub    esp,0xc
c00293e8:	68 8a af 02 c0       	push   0xc002af8a
c00293ed:	e8 93 9a fe ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00293f2:	83 c4 10             	add    esp,0x10
c00293f5:	90                   	nop
c00293f6:	83 c4 0c             	add    esp,0xc
c00293f9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00293fa <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00293fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00293fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0029400:	85 c0                	test   eax,eax
c0029402:	75 0e                	jne    c0029412 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0029404:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029408:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002940b:	85 c0                	test   eax,eax
c002940d:	75 03                	jne    c0029412 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002940f:	b0 01                	mov    al,0x1
c0029411:	c3                   	ret    
c0029412:	b0 00                	mov    al,0x0
c0029414:	90                   	nop
c0029415:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0029416 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0029416:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002941a:	8b 00                	mov    eax,DWORD PTR [eax]
c002941c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002941e <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002941e:	83 ec 0c             	sub    esp,0xc
c0029421:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029425:	8b 00                	mov    eax,DWORD PTR [eax]
c0029427:	85 c0                	test   eax,eax
c0029429:	75 15                	jne    c0029440 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002942b:	83 ec 0c             	sub    esp,0xc
c002942e:	68 dc af 02 c0       	push   0xc002afdc
c0029433:	e8 35 14 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c0029438:	83 c4 10             	add    esp,0x10
c002943b:	e9 88 00 00 00       	jmp    c00294c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0029440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029444:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029447:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002944a:	85 c0                	test   eax,eax
c002944c:	0f 95 c0             	setne  al
c002944f:	84 c0                	test   al,al
c0029451:	74 10                	je     c0029463 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0029453:	83 ec 0c             	sub    esp,0xc
c0029456:	68 27 b0 02 c0       	push   0xc002b027
c002945b:	e8 0d 14 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c0029460:	83 c4 10             	add    esp,0x10
c0029463:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029467:	8b 00                	mov    eax,DWORD PTR [eax]
c0029469:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002946c:	85 c0                	test   eax,eax
c002946e:	0f 94 c0             	sete   al
c0029471:	84 c0                	test   al,al
c0029473:	74 33                	je     c00294a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0029475:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029479:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002947f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029483:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002948a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002948e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029491:	83 f8 01             	cmp    eax,0x1
c0029494:	74 21                	je     c00294b7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029496:	83 ec 0c             	sub    esp,0xc
c0029499:	68 00 b0 02 c0       	push   0xc002b000
c002949e:	e8 ca 13 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c00294a3:	83 c4 10             	add    esp,0x10
c00294a6:	eb 0f                	jmp    c00294b7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00294a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00294ae:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00294b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294b5:	89 10                	mov    DWORD PTR [eax],edx
c00294b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294bb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00294be:	8d 50 ff             	lea    edx,[eax-0x1]
c00294c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294c5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00294c8:	83 c4 0c             	add    esp,0xc
c00294cb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00294cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00294cc:	83 ec 0c             	sub    esp,0xc
c00294cf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00294d4:	75 10                	jne    c00294e6 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c00294d6:	83 ec 0c             	sub    esp,0xc
c00294d9:	68 a4 af 02 c0       	push   0xc002afa4
c00294de:	e8 8a 13 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c00294e3:	83 c4 10             	add    esp,0x10
c00294e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00294ec:	85 c0                	test   eax,eax
c00294ee:	74 34                	je     c0029524 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00294f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00294f7:	85 c0                	test   eax,eax
c00294f9:	74 29                	je     c0029524 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00294fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029502:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029506:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0029509:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002950d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029511:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029518:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002951b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0029522:	eb 65                	jmp    c0029589 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029524:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029528:	8b 00                	mov    eax,DWORD PTR [eax]
c002952a:	85 c0                	test   eax,eax
c002952c:	75 4b                	jne    c0029579 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002952e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029532:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029535:	85 c0                	test   eax,eax
c0029537:	75 40                	jne    c0029579 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0029539:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002953d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029541:	89 10                	mov    DWORD PTR [eax],edx
c0029543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029547:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002954b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002954e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029552:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029555:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002955c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029560:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029563:	85 c0                	test   eax,eax
c0029565:	74 22                	je     c0029589 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029567:	83 ec 0c             	sub    esp,0xc
c002956a:	68 c6 af 02 c0       	push   0xc002afc6
c002956f:	e8 f9 12 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c0029574:	83 c4 10             	add    esp,0x10
c0029577:	eb 10                	jmp    c0029589 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029579:	83 ec 0c             	sub    esp,0xc
c002957c:	68 d0 af 02 c0       	push   0xc002afd0
c0029581:	e8 e7 12 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c0029586:	83 c4 10             	add    esp,0x10
c0029589:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002958d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029590:	8d 50 01             	lea    edx,[eax+0x1]
c0029593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029597:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002959a:	90                   	nop
c002959b:	83 c4 0c             	add    esp,0xc
c002959e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00295a0 <ACPI::~ACPI()>:
c00295a0:	83 ec 0c             	sub    esp,0xc
c00295a3:	ba d0 c1 02 c0       	mov    edx,0xc002c1d0
c00295a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295ac:	89 10                	mov    DWORD PTR [eax],edx
c00295ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295b2:	83 ec 0c             	sub    esp,0xc
c00295b5:	50                   	push   eax
c00295b6:	e8 d1 ab fe ff       	call   c001418c <Device::~Device()>
c00295bb:	83 c4 10             	add    esp,0x10
c00295be:	90                   	nop
c00295bf:	83 c4 0c             	add    esp,0xc
c00295c2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00295c4 <ACPI::~ACPI()>:
c00295c4:	83 ec 0c             	sub    esp,0xc
c00295c7:	83 ec 0c             	sub    esp,0xc
c00295ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00295ce:	e8 cd ff ff ff       	call   c00295a0 <ACPI::~ACPI()>
c00295d3:	83 c4 10             	add    esp,0x10
c00295d6:	83 ec 08             	sub    esp,0x8
c00295d9:	68 68 12 00 00       	push   0x1268
c00295de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00295e2:	e8 be 97 fe ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c00295e7:	83 c4 10             	add    esp,0x10
c00295ea:	83 c4 0c             	add    esp,0xc
c00295ed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00295ee <LinkedList<Device>::~LinkedList()>:
c00295ee:	90                   	nop
c00295ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c00295f0 <LinkedList<Device>::isEmpty()>:
c00295f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00295f6:	85 c0                	test   eax,eax
c00295f8:	75 0e                	jne    c0029608 <LinkedList<Device>::isEmpty()+0x18>
c00295fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029601:	85 c0                	test   eax,eax
c0029603:	75 03                	jne    c0029608 <LinkedList<Device>::isEmpty()+0x18>
c0029605:	b0 01                	mov    al,0x1
c0029607:	c3                   	ret    
c0029608:	b0 00                	mov    al,0x0
c002960a:	90                   	nop
c002960b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002960c <LinkedList<Device>::getFirstElement()>:
c002960c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029610:	8b 00                	mov    eax,DWORD PTR [eax]
c0029612:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0029614 <LinkedList<Device>::removeFirst()>:
c0029614:	83 ec 0c             	sub    esp,0xc
c0029617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002961b:	8b 00                	mov    eax,DWORD PTR [eax]
c002961d:	85 c0                	test   eax,eax
c002961f:	75 15                	jne    c0029636 <LinkedList<Device>::removeFirst()+0x22>
c0029621:	83 ec 0c             	sub    esp,0xc
c0029624:	68 dc af 02 c0       	push   0xc002afdc
c0029629:	e8 3f 12 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c002962e:	83 c4 10             	add    esp,0x10
c0029631:	e9 87 00 00 00       	jmp    c00296bd <LinkedList<Device>::removeFirst()+0xa9>
c0029636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002963a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002963d:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029643:	85 c0                	test   eax,eax
c0029645:	74 10                	je     c0029657 <LinkedList<Device>::removeFirst()+0x43>
c0029647:	83 ec 0c             	sub    esp,0xc
c002964a:	68 27 b0 02 c0       	push   0xc002b027
c002964f:	e8 19 12 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c0029654:	83 c4 10             	add    esp,0x10
c0029657:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002965b:	8b 00                	mov    eax,DWORD PTR [eax]
c002965d:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029663:	85 c0                	test   eax,eax
c0029665:	75 33                	jne    c002969a <LinkedList<Device>::removeFirst()+0x86>
c0029667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002966b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029675:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002967c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029680:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029683:	83 f8 01             	cmp    eax,0x1
c0029686:	74 24                	je     c00296ac <LinkedList<Device>::removeFirst()+0x98>
c0029688:	83 ec 0c             	sub    esp,0xc
c002968b:	68 00 b0 02 c0       	push   0xc002b000
c0029690:	e8 d8 11 ff ff       	call   c001a86d <Krnl::panic(char const*)>
c0029695:	83 c4 10             	add    esp,0x10
c0029698:	eb 12                	jmp    c00296ac <LinkedList<Device>::removeFirst()+0x98>
c002969a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002969e:	8b 00                	mov    eax,DWORD PTR [eax]
c00296a0:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00296a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296aa:	89 10                	mov    DWORD PTR [eax],edx
c00296ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296b0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00296b3:	8d 50 ff             	lea    edx,[eax-0x1]
c00296b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296ba:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00296bd:	83 c4 0c             	add    esp,0xc
c00296c0:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00296c2 <CPU::~CPU()>:
c00296c2:	83 ec 0c             	sub    esp,0xc
c00296c5:	ba c0 c5 02 c0       	mov    edx,0xc002c5c0
c00296ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296ce:	89 10                	mov    DWORD PTR [eax],edx
c00296d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296d4:	83 ec 0c             	sub    esp,0xc
c00296d7:	50                   	push   eax
c00296d8:	e8 af aa fe ff       	call   c001418c <Device::~Device()>
c00296dd:	83 c4 10             	add    esp,0x10
c00296e0:	90                   	nop
c00296e1:	83 c4 0c             	add    esp,0xc
c00296e4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00296e6 <CPU::~CPU()>:
c00296e6:	83 ec 0c             	sub    esp,0xc
c00296e9:	83 ec 0c             	sub    esp,0xc
c00296ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296f0:	e8 cd ff ff ff       	call   c00296c2 <CPU::~CPU()>
c00296f5:	83 c4 10             	add    esp,0x10
c00296f8:	83 ec 08             	sub    esp,0x8
c00296fb:	68 98 11 00 00       	push   0x1198
c0029700:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029704:	e8 9c 96 fe ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c0029709:	83 c4 10             	add    esp,0x10
c002970c:	83 c4 0c             	add    esp,0xc
c002970f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0029710 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0029710:	90                   	nop
c0029711:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0029712 <ThreadControlBlock::ThreadControlBlock()>:
c0029712:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029716:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002971d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029721:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0029728:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002972c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0029733:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029737:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002973e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029742:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0029749:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002974d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0029751:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029755:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0029759:	90                   	nop
c002975a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002975c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002975c:	83 ec 0c             	sub    esp,0xc
c002975f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029763:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002976d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029778:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002977f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029783:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002978d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029798:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002979f:	83 ec 0c             	sub    esp,0xc
c00297a2:	68 8a af 02 c0       	push   0xc002af8a
c00297a7:	e8 d9 96 fe ff       	call   c0012e85 <Dbg::kprintf(char const*, ...)>
c00297ac:	83 c4 10             	add    esp,0x10
c00297af:	90                   	nop
c00297b0:	83 c4 0c             	add    esp,0xc
c00297b3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00297b4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00297b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00297b8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00297bb:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00297bc <Vm::_FPUState::_FPUState()>:
c00297bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00297c0:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00297c7:	90                   	nop
c00297c8:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00297ca <PCI::~PCI()>:
c00297ca:	83 ec 0c             	sub    esp,0xc
c00297cd:	ba c4 d6 02 c0       	mov    edx,0xc002d6c4
c00297d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297d6:	89 10                	mov    DWORD PTR [eax],edx
c00297d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297dc:	83 ec 0c             	sub    esp,0xc
c00297df:	50                   	push   eax
c00297e0:	e8 77 a3 fe ff       	call   c0013b5c <Bus::~Bus()>
c00297e5:	83 c4 10             	add    esp,0x10
c00297e8:	90                   	nop
c00297e9:	83 c4 0c             	add    esp,0xc
c00297ec:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00297ee <PCI::~PCI()>:
c00297ee:	83 ec 0c             	sub    esp,0xc
c00297f1:	83 ec 0c             	sub    esp,0xc
c00297f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297f8:	e8 cd ff ff ff       	call   c00297ca <PCI::~PCI()>
c00297fd:	83 c4 10             	add    esp,0x10
c0029800:	83 ec 08             	sub    esp,0x8
c0029803:	68 58 01 00 00       	push   0x158
c0029808:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002980c:	e8 94 95 fe ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c0029811:	83 c4 10             	add    esp,0x10
c0029814:	83 c4 0c             	add    esp,0xc
c0029817:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0029818 <IDE::~IDE()>:
c0029818:	83 ec 0c             	sub    esp,0xc
c002981b:	ba 28 d9 02 c0       	mov    edx,0xc002d928
c0029820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029824:	89 10                	mov    DWORD PTR [eax],edx
c0029826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002982a:	83 ec 0c             	sub    esp,0xc
c002982d:	50                   	push   eax
c002982e:	e8 43 ae fe ff       	call   c0014676 <HardDiskController::~HardDiskController()>
c0029833:	83 c4 10             	add    esp,0x10
c0029836:	90                   	nop
c0029837:	83 c4 0c             	add    esp,0xc
c002983a:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002983c <IDE::~IDE()>:
c002983c:	83 ec 0c             	sub    esp,0xc
c002983f:	83 ec 0c             	sub    esp,0xc
c0029842:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029846:	e8 cd ff ff ff       	call   c0029818 <IDE::~IDE()>
c002984b:	83 c4 10             	add    esp,0x10
c002984e:	83 ec 08             	sub    esp,0x8
c0029851:	68 70 02 00 00       	push   0x270
c0029856:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002985a:	e8 46 95 fe ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c002985f:	83 c4 10             	add    esp,0x10
c0029862:	83 c4 0c             	add    esp,0xc
c0029865:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0029866 <SATABus::~SATABus()>:
c0029866:	83 ec 0c             	sub    esp,0xc
c0029869:	ba 08 da 02 c0       	mov    edx,0xc002da08
c002986e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029872:	89 10                	mov    DWORD PTR [eax],edx
c0029874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029878:	83 ec 0c             	sub    esp,0xc
c002987b:	50                   	push   eax
c002987c:	e8 f5 ad fe ff       	call   c0014676 <HardDiskController::~HardDiskController()>
c0029881:	83 c4 10             	add    esp,0x10
c0029884:	90                   	nop
c0029885:	83 c4 0c             	add    esp,0xc
c0029888:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002988a <SATABus::~SATABus()>:
c002988a:	83 ec 0c             	sub    esp,0xc
c002988d:	83 ec 0c             	sub    esp,0xc
c0029890:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029894:	e8 cd ff ff ff       	call   c0029866 <SATABus::~SATABus()>
c0029899:	83 c4 10             	add    esp,0x10
c002989c:	83 ec 08             	sub    esp,0x8
c002989f:	68 64 01 00 00       	push   0x164
c00298a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298a8:	e8 f8 94 fe ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c00298ad:	83 c4 10             	add    esp,0x10
c00298b0:	83 c4 0c             	add    esp,0xc
c00298b3:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00298b4 <ATA::~ATA()>:
c00298b4:	83 ec 0c             	sub    esp,0xc
c00298b7:	ba 54 da 02 c0       	mov    edx,0xc002da54
c00298bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298c0:	89 10                	mov    DWORD PTR [eax],edx
c00298c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298c6:	83 ec 0c             	sub    esp,0xc
c00298c9:	50                   	push   eax
c00298ca:	e8 99 ae fe ff       	call   c0014768 <PhysicalDisk::~PhysicalDisk()>
c00298cf:	83 c4 10             	add    esp,0x10
c00298d2:	90                   	nop
c00298d3:	83 c4 0c             	add    esp,0xc
c00298d6:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00298d8 <ATA::~ATA()>:
c00298d8:	83 ec 0c             	sub    esp,0xc
c00298db:	83 ec 0c             	sub    esp,0xc
c00298de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298e2:	e8 cd ff ff ff       	call   c00298b4 <ATA::~ATA()>
c00298e7:	83 c4 10             	add    esp,0x10
c00298ea:	83 ec 08             	sub    esp,0x8
c00298ed:	68 7c 01 00 00       	push   0x17c
c00298f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298f6:	e8 aa 94 fe ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c00298fb:	83 c4 10             	add    esp,0x10
c00298fe:	83 c4 0c             	add    esp,0xc
c0029901:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0029902 <ATAPI::~ATAPI()>:
c0029902:	83 ec 0c             	sub    esp,0xc
c0029905:	ba 8c da 02 c0       	mov    edx,0xc002da8c
c002990a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002990e:	89 10                	mov    DWORD PTR [eax],edx
c0029910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029914:	83 ec 0c             	sub    esp,0xc
c0029917:	50                   	push   eax
c0029918:	e8 4b ae fe ff       	call   c0014768 <PhysicalDisk::~PhysicalDisk()>
c002991d:	83 c4 10             	add    esp,0x10
c0029920:	90                   	nop
c0029921:	83 c4 0c             	add    esp,0xc
c0029924:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0029926 <ATAPI::~ATAPI()>:
c0029926:	83 ec 0c             	sub    esp,0xc
c0029929:	83 ec 0c             	sub    esp,0xc
c002992c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029930:	e8 cd ff ff ff       	call   c0029902 <ATAPI::~ATAPI()>
c0029935:	83 c4 10             	add    esp,0x10
c0029938:	83 ec 08             	sub    esp,0x8
c002993b:	68 80 01 00 00       	push   0x180
c0029940:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029944:	e8 5c 94 fe ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c0029949:	83 c4 10             	add    esp,0x10
c002994c:	83 c4 0c             	add    esp,0xc
c002994f:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0029950 <SATA::~SATA()>:
c0029950:	83 ec 0c             	sub    esp,0xc
c0029953:	ba 40 db 02 c0       	mov    edx,0xc002db40
c0029958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002995c:	89 10                	mov    DWORD PTR [eax],edx
c002995e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029962:	83 ec 0c             	sub    esp,0xc
c0029965:	50                   	push   eax
c0029966:	e8 fd ad fe ff       	call   c0014768 <PhysicalDisk::~PhysicalDisk()>
c002996b:	83 c4 10             	add    esp,0x10
c002996e:	90                   	nop
c002996f:	83 c4 0c             	add    esp,0xc
c0029972:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0029974 <SATA::~SATA()>:
c0029974:	83 ec 0c             	sub    esp,0xc
c0029977:	83 ec 0c             	sub    esp,0xc
c002997a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002997e:	e8 cd ff ff ff       	call   c0029950 <SATA::~SATA()>
c0029983:	83 c4 10             	add    esp,0x10
c0029986:	83 ec 08             	sub    esp,0x8
c0029989:	68 7c 01 00 00       	push   0x17c
c002998e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029992:	e8 0e 94 fe ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c0029997:	83 c4 10             	add    esp,0x10
c002999a:	83 c4 0c             	add    esp,0xc
c002999d:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002999e <SATAPI::~SATAPI()>:
c002999e:	83 ec 0c             	sub    esp,0xc
c00299a1:	ba 1c dc 02 c0       	mov    edx,0xc002dc1c
c00299a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299aa:	89 10                	mov    DWORD PTR [eax],edx
c00299ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299b0:	83 ec 0c             	sub    esp,0xc
c00299b3:	50                   	push   eax
c00299b4:	e8 af ad fe ff       	call   c0014768 <PhysicalDisk::~PhysicalDisk()>
c00299b9:	83 c4 10             	add    esp,0x10
c00299bc:	90                   	nop
c00299bd:	83 c4 0c             	add    esp,0xc
c00299c0:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00299c2 <SATAPI::~SATAPI()>:
c00299c2:	83 ec 0c             	sub    esp,0xc
c00299c5:	83 ec 0c             	sub    esp,0xc
c00299c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299cc:	e8 cd ff ff ff       	call   c002999e <SATAPI::~SATAPI()>
c00299d1:	83 c4 10             	add    esp,0x10
c00299d4:	83 ec 08             	sub    esp,0x8
c00299d7:	68 80 01 00 00       	push   0x180
c00299dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299e0:	e8 c0 93 fe ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c00299e5:	83 c4 10             	add    esp,0x10
c00299e8:	83 c4 0c             	add    esp,0xc
c00299eb:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00299ec <AVX::~AVX()>:
c00299ec:	83 ec 0c             	sub    esp,0xc
c00299ef:	ba 5c dc 02 c0       	mov    edx,0xc002dc5c
c00299f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299f8:	89 10                	mov    DWORD PTR [eax],edx
c00299fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299fe:	83 ec 0c             	sub    esp,0xc
c0029a01:	50                   	push   eax
c0029a02:	e8 e5 ad fe ff       	call   c00147ec <FPU::~FPU()>
c0029a07:	83 c4 10             	add    esp,0x10
c0029a0a:	90                   	nop
c0029a0b:	83 c4 0c             	add    esp,0xc
c0029a0e:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029a10 <AVX::~AVX()>:
c0029a10:	83 ec 0c             	sub    esp,0xc
c0029a13:	83 ec 0c             	sub    esp,0xc
c0029a16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a1a:	e8 cd ff ff ff       	call   c00299ec <AVX::~AVX()>
c0029a1f:	83 c4 10             	add    esp,0x10
c0029a22:	83 ec 08             	sub    esp,0x8
c0029a25:	68 58 01 00 00       	push   0x158
c0029a2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a2e:	e8 72 93 fe ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c0029a33:	83 c4 10             	add    esp,0x10
c0029a36:	83 c4 0c             	add    esp,0xc
c0029a39:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0029a3a <MMX::~MMX()>:
c0029a3a:	83 ec 0c             	sub    esp,0xc
c0029a3d:	ba 9c dc 02 c0       	mov    edx,0xc002dc9c
c0029a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a46:	89 10                	mov    DWORD PTR [eax],edx
c0029a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a4c:	83 ec 0c             	sub    esp,0xc
c0029a4f:	50                   	push   eax
c0029a50:	e8 97 ad fe ff       	call   c00147ec <FPU::~FPU()>
c0029a55:	83 c4 10             	add    esp,0x10
c0029a58:	90                   	nop
c0029a59:	83 c4 0c             	add    esp,0xc
c0029a5c:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0029a5e <MMX::~MMX()>:
c0029a5e:	83 ec 0c             	sub    esp,0xc
c0029a61:	83 ec 0c             	sub    esp,0xc
c0029a64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a68:	e8 cd ff ff ff       	call   c0029a3a <MMX::~MMX()>
c0029a6d:	83 c4 10             	add    esp,0x10
c0029a70:	83 ec 08             	sub    esp,0x8
c0029a73:	68 58 01 00 00       	push   0x158
c0029a78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a7c:	e8 24 93 fe ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c0029a81:	83 c4 10             	add    esp,0x10
c0029a84:	83 c4 0c             	add    esp,0xc
c0029a87:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0029a88 <SSE::~SSE()>:
c0029a88:	83 ec 0c             	sub    esp,0xc
c0029a8b:	ba dc dc 02 c0       	mov    edx,0xc002dcdc
c0029a90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a94:	89 10                	mov    DWORD PTR [eax],edx
c0029a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a9a:	83 ec 0c             	sub    esp,0xc
c0029a9d:	50                   	push   eax
c0029a9e:	e8 49 ad fe ff       	call   c00147ec <FPU::~FPU()>
c0029aa3:	83 c4 10             	add    esp,0x10
c0029aa6:	90                   	nop
c0029aa7:	83 c4 0c             	add    esp,0xc
c0029aaa:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0029aac <SSE::~SSE()>:
c0029aac:	83 ec 0c             	sub    esp,0xc
c0029aaf:	83 ec 0c             	sub    esp,0xc
c0029ab2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ab6:	e8 cd ff ff ff       	call   c0029a88 <SSE::~SSE()>
c0029abb:	83 c4 10             	add    esp,0x10
c0029abe:	83 ec 08             	sub    esp,0x8
c0029ac1:	68 58 01 00 00       	push   0x158
c0029ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029aca:	e8 d6 92 fe ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c0029acf:	83 c4 10             	add    esp,0x10
c0029ad2:	83 c4 0c             	add    esp,0xc
c0029ad5:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029ad6 <x87::~x87()>:
c0029ad6:	83 ec 0c             	sub    esp,0xc
c0029ad9:	ba 1c dd 02 c0       	mov    edx,0xc002dd1c
c0029ade:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ae2:	89 10                	mov    DWORD PTR [eax],edx
c0029ae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ae8:	83 ec 0c             	sub    esp,0xc
c0029aeb:	50                   	push   eax
c0029aec:	e8 fb ac fe ff       	call   c00147ec <FPU::~FPU()>
c0029af1:	83 c4 10             	add    esp,0x10
c0029af4:	90                   	nop
c0029af5:	83 c4 0c             	add    esp,0xc
c0029af8:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0029afa <x87::~x87()>:
c0029afa:	83 ec 0c             	sub    esp,0xc
c0029afd:	83 ec 0c             	sub    esp,0xc
c0029b00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b04:	e8 cd ff ff ff       	call   c0029ad6 <x87::~x87()>
c0029b09:	83 c4 10             	add    esp,0x10
c0029b0c:	83 ec 08             	sub    esp,0x8
c0029b0f:	68 58 01 00 00       	push   0x158
c0029b14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b18:	e8 88 92 fe ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c0029b1d:	83 c4 10             	add    esp,0x10
c0029b20:	83 c4 0c             	add    esp,0xc
c0029b23:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029b24 <IOAPIC::~IOAPIC()>:
c0029b24:	83 ec 0c             	sub    esp,0xc
c0029b27:	ba 74 de 02 c0       	mov    edx,0xc002de74
c0029b2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b30:	89 10                	mov    DWORD PTR [eax],edx
c0029b32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b36:	83 ec 0c             	sub    esp,0xc
c0029b39:	50                   	push   eax
c0029b3a:	e8 4d a6 fe ff       	call   c001418c <Device::~Device()>
c0029b3f:	83 c4 10             	add    esp,0x10
c0029b42:	90                   	nop
c0029b43:	83 c4 0c             	add    esp,0xc
c0029b46:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029b48 <IOAPIC::~IOAPIC()>:
c0029b48:	83 ec 0c             	sub    esp,0xc
c0029b4b:	83 ec 0c             	sub    esp,0xc
c0029b4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b52:	e8 cd ff ff ff       	call   c0029b24 <IOAPIC::~IOAPIC()>
c0029b57:	83 c4 10             	add    esp,0x10
c0029b5a:	83 ec 08             	sub    esp,0x8
c0029b5d:	68 68 01 00 00       	push   0x168
c0029b62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b66:	e8 3a 92 fe ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c0029b6b:	83 c4 10             	add    esp,0x10
c0029b6e:	83 c4 0c             	add    esp,0xc
c0029b71:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029b72 <APIC::~APIC()>:
c0029b72:	83 ec 0c             	sub    esp,0xc
c0029b75:	ba 2c de 02 c0       	mov    edx,0xc002de2c
c0029b7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b7e:	89 10                	mov    DWORD PTR [eax],edx
c0029b80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b84:	83 ec 0c             	sub    esp,0xc
c0029b87:	50                   	push   eax
c0029b88:	e8 29 b1 fe ff       	call   c0014cb6 <InterruptController::~InterruptController()>
c0029b8d:	83 c4 10             	add    esp,0x10
c0029b90:	90                   	nop
c0029b91:	83 c4 0c             	add    esp,0xc
c0029b94:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0029b96 <APIC::~APIC()>:
c0029b96:	83 ec 0c             	sub    esp,0xc
c0029b99:	83 ec 0c             	sub    esp,0xc
c0029b9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ba0:	e8 cd ff ff ff       	call   c0029b72 <APIC::~APIC()>
c0029ba5:	83 c4 10             	add    esp,0x10
c0029ba8:	83 ec 08             	sub    esp,0x8
c0029bab:	68 58 21 00 00       	push   0x2158
c0029bb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029bb4:	e8 ec 91 fe ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c0029bb9:	83 c4 10             	add    esp,0x10
c0029bbc:	83 c4 0c             	add    esp,0xc
c0029bbf:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029bc0 <PIC::~PIC()>:
c0029bc0:	83 ec 0c             	sub    esp,0xc
c0029bc3:	ba c4 de 02 c0       	mov    edx,0xc002dec4
c0029bc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bcc:	89 10                	mov    DWORD PTR [eax],edx
c0029bce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bd2:	83 ec 0c             	sub    esp,0xc
c0029bd5:	50                   	push   eax
c0029bd6:	e8 db b0 fe ff       	call   c0014cb6 <InterruptController::~InterruptController()>
c0029bdb:	83 c4 10             	add    esp,0x10
c0029bde:	90                   	nop
c0029bdf:	83 c4 0c             	add    esp,0xc
c0029be2:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029be4 <PIC::~PIC()>:
c0029be4:	83 ec 0c             	sub    esp,0xc
c0029be7:	83 ec 0c             	sub    esp,0xc
c0029bea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029bee:	e8 cd ff ff ff       	call   c0029bc0 <PIC::~PIC()>
c0029bf3:	83 c4 10             	add    esp,0x10
c0029bf6:	83 ec 08             	sub    esp,0x8
c0029bf9:	68 58 21 00 00       	push   0x2158
c0029bfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c02:	e8 9e 91 fe ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c0029c07:	83 c4 10             	add    esp,0x10
c0029c0a:	83 c4 0c             	add    esp,0xc
c0029c0d:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029c0e <APICTimer::~APICTimer()>:
c0029c0e:	83 ec 0c             	sub    esp,0xc
c0029c11:	ba 18 df 02 c0       	mov    edx,0xc002df18
c0029c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c1a:	89 10                	mov    DWORD PTR [eax],edx
c0029c1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c20:	83 ec 0c             	sub    esp,0xc
c0029c23:	50                   	push   eax
c0029c24:	e8 43 d1 fe ff       	call   c0016d6c <Timer::~Timer()>
c0029c29:	83 c4 10             	add    esp,0x10
c0029c2c:	90                   	nop
c0029c2d:	83 c4 0c             	add    esp,0xc
c0029c30:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029c32 <APICTimer::~APICTimer()>:
c0029c32:	83 ec 0c             	sub    esp,0xc
c0029c35:	83 ec 0c             	sub    esp,0xc
c0029c38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c3c:	e8 cd ff ff ff       	call   c0029c0e <APICTimer::~APICTimer()>
c0029c41:	83 c4 10             	add    esp,0x10
c0029c44:	83 ec 08             	sub    esp,0x8
c0029c47:	68 60 01 00 00       	push   0x160
c0029c4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c50:	e8 50 91 fe ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c0029c55:	83 c4 10             	add    esp,0x10
c0029c58:	83 c4 0c             	add    esp,0xc
c0029c5b:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029c5c <PIT::~PIT()>:
c0029c5c:	83 ec 0c             	sub    esp,0xc
c0029c5f:	ba 68 df 02 c0       	mov    edx,0xc002df68
c0029c64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c68:	89 10                	mov    DWORD PTR [eax],edx
c0029c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c6e:	83 ec 0c             	sub    esp,0xc
c0029c71:	50                   	push   eax
c0029c72:	e8 f5 d0 fe ff       	call   c0016d6c <Timer::~Timer()>
c0029c77:	83 c4 10             	add    esp,0x10
c0029c7a:	90                   	nop
c0029c7b:	83 c4 0c             	add    esp,0xc
c0029c7e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029c80 <PIT::~PIT()>:
c0029c80:	83 ec 0c             	sub    esp,0xc
c0029c83:	83 ec 0c             	sub    esp,0xc
c0029c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c8a:	e8 cd ff ff ff       	call   c0029c5c <PIT::~PIT()>
c0029c8f:	83 c4 10             	add    esp,0x10
c0029c92:	83 ec 08             	sub    esp,0x8
c0029c95:	68 5c 01 00 00       	push   0x15c
c0029c9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c9e:	e8 02 91 fe ff       	call   c0012da5 <operator delete(void*, unsigned long)>
c0029ca3:	83 c4 10             	add    esp,0x10
c0029ca6:	83 c4 0c             	add    esp,0xc
c0029ca9:	c3                   	ret    
