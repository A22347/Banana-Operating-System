
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 3f f6 00 00       	call   c000f65f <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 93 83 02 00       	call   c00283b8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 0c 90 02 c0       	mov    ebx,0xc002900c
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 18 90 02 c0    	cmp    ebx,0xc0029018
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 b8 ce 02 c0       	mov    eax,0xc002ceb8
c0000049:	3d b8 ce 02 c0       	cmp    eax,0xc002ceb8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 b8 ce 02 c0       	push   0xc002ceb8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 b8 ce 02 c0       	mov    eax,0xc002ceb8
c0000075:	2d b8 ce 02 c0       	sub    eax,0xc002ceb8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 b8 ce 02 c0       	push   0xc002ceb8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d e8 d4 02 c0 00 	cmp    BYTE PTR ds:0xc002d4e8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 20 90 02 c0       	mov    ebx,0xc0029020
c00000bb:	81 eb 1c 90 02 c0    	sub    ebx,0xc002901c
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 1c 90 02 c0       	mov    esi,0xc002901c
c00000ca:	a1 ec d4 02 c0       	mov    eax,ds:0xc002d4ec
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 ec d4 02 c0       	mov    ds:0xc002d4ec,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 ec d4 02 c0       	mov    eax,ds:0xc002d4ec
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 b8 ce 02 c0       	push   0xc002ceb8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 e8 d4 02 c0 01 	mov    BYTE PTR ds:0xc002d4e8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 f0 d4 02 c0       	push   0xc002d4f0
c000012c:	68 b8 ce 02 c0       	push   0xc002ceb8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 eb ce 01 00       	call   c001d28e <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 88 20 01 00       	call   c0012443 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 c9 ce 01 00       	call   c001d28e <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 71 d3 01 00       	call   c001d755 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 87 d9 01 00       	call   c001dd74 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 30 d9 02 c0 	lgdtd  ds:0xc002d930
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 f1 3d 01 00       	call   c00143d3 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 08 d5 02 c0       	mov    ds:0xc002d508,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 08 d5 02 c0    	mov    DWORD PTR ds:0xc002d508,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d 08 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d508
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 40 90 02 c0 02 	test   BYTE PTR [edx-0x3ffd6fc0],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 40 90 02 c0 01 	test   BYTE PTR [edx-0x3ffd6fc0],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 40 90 02 c0 08 	test   BYTE PTR [edx-0x3ffd6fc0],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 40 90 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6fc0],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 40 90 02 c0 01 	test   BYTE PTR [edx-0x3ffd6fc0],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d 20 d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d520
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d 20 d5 02 c0    	mov    DWORD PTR ds:0xc002d520,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 24 d5 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2adc]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 24 d5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2adc],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d 20 d5 02 c0    	mov    DWORD PTR ds:0xc002d520,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 4c d5 02 c0    	cmp    DWORD PTR ds:0xc002d54c,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d 5c d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d55c
c0000e38:	c7 42 0c 54 d5 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d554
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 5c d5 02 c0    	mov    DWORD PTR ds:0xc002d55c,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 4c d5 02 c0    	mov    DWORD PTR ds:0xc002d54c,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 20 d5 02 c0 02 	test   BYTE PTR ds:0xc002d520,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 20 d5 02 c0       	mov    eax,0xc002d520
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 df e4 00 00       	call   c000f3f8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 21 e4 00 00       	call   c000f3f8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 0b e4 00 00       	call   c000f3f8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 e7 e3 00 00       	call   c000f3f8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d 20 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d520
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 20 d5 02 c0       	mov    eax,0xc002d520
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 24 d5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2adc]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 24 d5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2adc],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 54 d5 02 c0 	lea    edx,[eax*8-0x3ffd2aac]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 20 d5 02 c0       	mov    eax,0xc002d520
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d 60 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d560
c00011ba:	81 fb 54 d5 02 c0    	cmp    ebx,0xc002d554
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d 54 d5 02 c0       	cmp    eax,0xc002d554
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d 50 d5 02 c0    	cmp    DWORD PTR ds:0xc002d550,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 5c d5 02 c0       	mov    ds:0xc002d55c,eax
c00011f6:	a3 60 d5 02 c0       	mov    ds:0xc002d560,eax
c00011fb:	a3 50 d5 02 c0       	mov    ds:0xc002d550,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 54 d5 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d554
c0001209:	c7 40 0c 54 d5 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d554
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 60 d5 02 c0       	mov    ds:0xc002d560,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 54 d5 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d554
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 18 d5 02 c0 	lea    ebp,[edx*4-0x3ffd2ae8]
c000125a:	8b 14 95 20 d5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2ae0]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 20 d5 02 c0 	lea    ecx,[edx*4-0x3ffd2ae0]
c0001275:	8b 14 95 20 d5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2ae0]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd 54 d8 02 c0 	or     DWORD PTR [edi*4-0x3ffd27ac],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 54 d5 02 c0 	lea    eax,[eax*8-0x3ffd2aac]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d 5c d5 02 c0    	mov    DWORD PTR ds:0xc002d55c,ecx
c000132f:	89 0d 60 d5 02 c0    	mov    DWORD PTR ds:0xc002d560,ecx
c0001335:	c7 41 08 54 d5 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d554
c000133c:	c7 41 0c 54 d5 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d554
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd 4c d5 02 c0 	lea    edx,[ecx*8-0x3ffd2ab4]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d 54 d8 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd27ac]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d 54 d8 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd27ac]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 4c d5 02 c0 	lea    edx,[eax*4-0x3ffd2ab4]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d 54 d8 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd27ac],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d 5c d5 02 c0    	mov    DWORD PTR ds:0xc002d55c,edi
c0001402:	89 3d 60 d5 02 c0    	mov    DWORD PTR ds:0xc002d560,edi
c0001408:	c7 47 08 54 d5 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d554
c000140f:	c7 47 0c 54 d5 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d554
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d 50 d5 02 c0    	mov    DWORD PTR ds:0xc002d550,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 4c d5 02 c0       	mov    eax,ds:0xc002d54c
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d 4c d5 02 c0    	mov    DWORD PTR ds:0xc002d54c,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba 20 d5 02 c0       	mov    edx,0xc002d520
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d 20 d5 02 c0 00 	cmp    DWORD PTR ds:0xc002d520,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 20 d5 02 c0       	mov    eax,0xc002d520
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d 74 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d874
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 74 d8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d874,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d 74 d8 02 c0    	mov    DWORD PTR ds:0xc002d874,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 4c d5 02 c0    	cmp    DWORD PTR ds:0xc002d54c,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d 4c d5 02 c0    	mov    DWORD PTR ds:0xc002d54c,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 20 d5 02 c0 00 	cmp    DWORD PTR ds:0xc002d520,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 20 d5 02 c0       	mov    eax,0xc002d520
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 7c d8 02 c0    	push   DWORD PTR ds:0xc002d87c
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d 20 d5 02 c0 00 	cmp    DWORD PTR ds:0xc002d520,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 20 d5 02 c0       	mov    eax,0xc002d520
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 7c d8 02 c0       	mov    eax,ds:0xc002d87c
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 20 d5 02 c0       	mov    eax,0xc002d520
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d 4c d5 02 c0 00 	cmp    DWORD PTR ds:0xc002d54c,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 20 d5 02 c0       	mov    eax,0xc002d520
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 4c d5 02 c0       	mov    eax,ds:0xc002d54c
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 24 d5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2adc]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 54 d5 02 c0       	mov    eax,0xc002d554
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d 4c d8 02 c0       	cmp    eax,0xc002d84c
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 70 d8 02 c0    	mov    esi,DWORD PTR ds:0xc002d870
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 84 d8 02 c0    	mov    esi,DWORD PTR ds:0xc002d884
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 94 d8 02 c0    	mov    esi,DWORD PTR ds:0xc002d894
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 20 d5 02 c0       	mov    eax,0xc002d520
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 44 91 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6ebc]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 20 d5 02 c0       	mov    eax,ds:0xc002d520
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 20 d5 02 c0       	mov    ds:0xc002d520,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d 64 d8 02 c0    	mov    DWORD PTR ds:0xc002d864,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d 68 d8 02 c0    	mov    DWORD PTR ds:0xc002d868,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d 6c d8 02 c0    	mov    DWORD PTR ds:0xc002d86c,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 74 d8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d874,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 e0 0f 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf020]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 b2 eb 01 00       	jmp    c00207a4 <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 e0 0f 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf020]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 e3 eb 01 00       	jmp    c00207eb <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 e0 0f 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf020]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 0b ec 01 00       	jmp    c0020832 <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 0a 48 02 00       	call   c0026714 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 60 92 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6da0]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 60 92 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6da0]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 60 91 02 c0       	mov    edx,0xc0029160
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba 80 92 02 c0       	mov    edx,0xc0029280
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba f4 bd 02 c0       	mov    edx,0xc002bdf4
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba 8c 92 02 c0       	mov    edx,0xc002928c
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 70 92 02 c0       	mov    edx,0xc0029270
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 c0 d8 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd2740]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 a0 d8 02 c0    	mov    ax,ds:0xc002d8a0
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 a0 d8 02 c0    	mov    ds:0xc002d8a0,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 07 36 02 00       	call   c0026714 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 92 92 02 c0       	mov    eax,0xc0029292
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad e0 91 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6e20]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 9b 92 02 c0       	mov    eax,0xc002929b
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 60 92 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6da0]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 d2 1f 02 00       	call   c0026714 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 70 92 02 c0       	mov    edx,0xc0029270
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 60 91 02 c0       	mov    edx,0xc0029160
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 70 91 02 c0       	mov    edx,0xc0029170
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 c0 d8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2740]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 c0 d8 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2740],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 99 09 02 00       	call   c0026714 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 7f 09 02 00       	call   c0026714 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 b7 91 02 c0       	mov    eax,0xc00291b7
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 b0 91 02 c0       	mov    eax,0xc00291b0
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 c0 d8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2740]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be a0 91 02 c0       	mov    esi,0xc00291a0
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 c2 f0 01 00       	call   c0026714 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba 80 92 02 c0       	mov    edx,0xc0029280
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba 80 91 02 c0       	mov    edx,0xc0029180
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba 90 91 02 c0       	mov    edx,0xc0029190
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba a2 92 02 c0       	mov    edx,0xc00292a2
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba ae 92 02 c0       	mov    edx,0xc00292ae
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba c2 92 02 c0       	mov    edx,0xc00292c2
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 30 71 00 00       	call   c000f599 <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 2a 71 00 00       	call   c000f5a9 <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c e0 95 02 c0 	mov    DWORD PTR [esp+0xc],0xc00295e0
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 e0 95 02 c0 	mov    DWORD PTR [esp+0x10],0xc00295e0
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 e0 93 02 c0       	mov    eax,0xc00293e0
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 20 93 02 c0       	mov    eax,0xc0029320
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 e0 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6d20]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 6f 6e 00 00       	call   c000f5a9 <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 59 6e 00 00       	call   c000f5a9 <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 16 fa 01 00       	call   c00281e7 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 d9 f9 01 00       	call   c00281c9 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 ad f9 01 00       	call   c00281e7 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 60 f0 01 00       	call   c00278ec <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 e2 fa 01 00       	call   c0028380 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 27 f9 01 00       	call   c00281e7 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 69 f8 01 00       	call   c00281e7 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 36 f8 01 00       	call   c00281c9 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 23 f7 01 00       	call   c00281e7 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 eb f6 01 00       	call   c00281c9 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 38 6a 00 00       	call   c000f5c9 <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 d3 69 00 00       	call   c000f5a9 <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 e0 96 02 c0       	mov    eax,0xc00296e0
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 f7 f4 01 00       	call   c00281e7 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 bc f4 01 00       	call   c00281c9 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 40 9b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd64c0]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 cc f1 01 00       	call   c0027f7b <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 4a eb 01 00       	call   c0027918 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 06 f4 01 00       	call   c00281eb <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 f4 f4 01 00       	call   c002830f <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 de ea 01 00       	call   c0027918 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 89 f3 01 00       	call   c00281e5 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 6a f3 01 00       	call   c00281e9 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 00 f5 01 00       	call   c00283a0 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 aa f0 01 00       	call   c0027f7b <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 28 ea 01 00       	call   c0027918 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 e4 f2 01 00       	call   c00281eb <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 d2 f3 01 00       	call   c002830f <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 bc e9 01 00       	call   c0027918 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 67 f2 01 00       	call   c00281e5 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 47 f2 01 00       	call   c00281e9 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 dc f3 01 00       	call   c00283a0 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 82 f1 01 00       	call   c00281e7 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 40 f1 01 00       	call   c00281c9 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 28 f1 01 00       	call   c00281e7 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 9a ee 01 00       	call   c0027f7b <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 9c e1 01 00       	call   c002729b <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 ff e7 01 00       	call   c0027918 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 51 ee 01 00       	call   c0027f7b <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 57 e1 01 00       	call   c002729b <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 26 ee 01 00       	call   c0027f7b <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 76 f0 01 00       	call   c00281e5 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 53 e7 01 00       	call   c00278ec <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 d5 f1 01 00       	call   c0028380 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 fc ef 01 00       	call   c00281c9 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 f7 e6 01 00       	call   c00278ec <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 75 ed 01 00       	call   c0027f7b <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 f8 e6 01 00       	call   c0027918 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 4a ed 01 00       	call   c0027f7b <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 b1 e9 01 00       	call   c0027bfc <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 30 e0 01 00       	call   c002729b <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 90 d9 01 00       	call   c0026c30 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 67 f0 01 00       	call   c002830f <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 50 e6 01 00       	call   c0027918 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 37 f0 01 00       	call   c002830f <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 a9 df 01 00       	call   c002729b <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 e2 ee 01 00       	call   c00281eb <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 ca e8 01 00       	call   c0027bfc <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 50 df 01 00       	call   c002729b <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 3e f0 01 00       	call   c00283a0 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 10 ec 01 00       	call   c0027f7b <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 67 e5 01 00       	call   c00278ec <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 46 ee 01 00       	call   c00281e7 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 df de 01 00       	call   c002729b <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 0b e5 01 00       	call   c00278ec <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 ad ef 01 00       	call   c00283a0 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 5e eb 01 00       	call   c0027f7b <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 db e4 01 00       	call   c0027918 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 2e eb 01 00       	call   c0027f7b <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 34 de 01 00       	call   c002729b <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 04 eb 01 00       	call   c0027f7b <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 56 ed 01 00       	call   c00281e7 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 2d e4 01 00       	call   c00278ec <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 af ee 01 00       	call   c0028380 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 d6 ec 01 00       	call   c00281c9 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 d0 e3 01 00       	call   c00278ec <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 4e ea 01 00       	call   c0027f7b <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 d1 e3 01 00       	call   c0027918 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 23 ea 01 00       	call   c0027f7b <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 8a e6 01 00       	call   c0027bfc <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 09 dd 01 00       	call   c002729b <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 59 d6 01 00       	call   c0026c30 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 30 ed 01 00       	call   c002830f <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 19 e3 01 00       	call   c0027918 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 00 ed 01 00       	call   c002830f <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 72 dc 01 00       	call   c002729b <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 ab eb 01 00       	call   c00281eb <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 92 e5 01 00       	call   c0027bfc <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 11 dc 01 00       	call   c002729b <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 ff ec 01 00       	call   c00283a0 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 d1 e8 01 00       	call   c0027f7b <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 28 e2 01 00       	call   c00278ec <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 07 eb 01 00       	call   c00281e7 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 a0 db 01 00       	call   c002729b <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 cc e1 01 00       	call   c00278ec <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 41 e8 01 00       	call   c0027f7b <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 47 db 01 00       	call   c002729b <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 a0 9b 02 c0       	mov    eax,0xc0029ba0
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 b4 9b 02 c0       	mov    eax,0xc0029bb4
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 6c 5d 00 00       	call   c000f5a9 <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 6e 5d 00 00       	call   c000f5c9 <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 bc e6 01 00       	call   c0027f7b <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 3a e0 01 00       	call   c0027918 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 cc d2 01 00       	call   c0026c30 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 a3 e9 01 00       	call   c002830f <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 8c df 01 00       	call   c0027918 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 6f e9 01 00       	call   c002830f <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 e1 d8 01 00       	call   c002729b <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 41 e9 01 00       	call   c002830f <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 30 df 01 00       	call   c0027918 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 99 d8 01 00       	call   c002729b <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 ba d1 01 00       	call   c0026c30 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 91 e8 01 00       	call   c002830f <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 7a de 01 00       	call   c0027918 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 5d e8 01 00       	call   c002830f <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 cf d7 01 00       	call   c002729b <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 2f e8 01 00       	call   c002830f <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 1e de 01 00       	call   c0027918 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 87 d7 01 00       	call   c002729b <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 65 d7 01 00       	call   c002729b <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 41 d0 01 00       	call   c0026c30 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 18 e7 01 00       	call   c002830f <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 01 dd 01 00       	call   c0027918 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 e4 e6 01 00       	call   c002830f <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 56 d6 01 00       	call   c002729b <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 b6 e6 01 00       	call   c002830f <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 9f dc 01 00       	call   c0027918 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 08 d6 01 00       	call   c002729b <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 68 e6 01 00       	call   c002830f <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 51 dc 01 00       	call   c0027918 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 ba d5 01 00       	call   c002729b <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 cf ce 01 00       	call   c0026c30 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 a6 e5 01 00       	call   c002830f <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 8f db 01 00       	call   c0027918 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 76 e5 01 00       	call   c002830f <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 e8 d4 01 00       	call   c002729b <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 48 e5 01 00       	call   c002830f <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 31 db 01 00       	call   c0027918 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 9a d4 01 00       	call   c002729b <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 fa e4 01 00       	call   c002830f <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 e3 da 01 00       	call   c0027918 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 4c d4 01 00       	call   c002729b <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 20 d4 01 00       	call   c002729b <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 7d da 01 00       	call   c0027918 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 39 e3 01 00       	call   c00281eb <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 c8 d3 01 00       	call   c002729b <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 25 da 01 00       	call   c0027918 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 e1 e2 01 00       	call   c00281eb <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 5b cc 01 00       	call   c0026c30 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 32 e3 01 00       	call   c002830f <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 1b d9 01 00       	call   c0027918 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 fe e2 01 00       	call   c002830f <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 70 d2 01 00       	call   c002729b <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 d0 e2 01 00       	call   c002830f <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 b9 d8 01 00       	call   c0027918 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 22 d2 01 00       	call   c002729b <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 82 e2 01 00       	call   c002830f <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 6b d8 01 00       	call   c0027918 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 d4 d1 01 00       	call   c002729b <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 34 e2 01 00       	call   c002830f <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 1d d8 01 00       	call   c0027918 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 86 d1 01 00       	call   c002729b <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 e6 e1 01 00       	call   c002830f <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 cf d7 01 00       	call   c0027918 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 38 d1 01 00       	call   c002729b <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 3a ca 01 00       	call   c0026c30 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 11 e1 01 00       	call   c002830f <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 fa d6 01 00       	call   c0027918 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 e1 e0 01 00       	call   c002830f <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 53 d0 01 00       	call   c002729b <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 b3 e0 01 00       	call   c002830f <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 9c d6 01 00       	call   c0027918 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 05 d0 01 00       	call   c002729b <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 65 e0 01 00       	call   c002830f <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 4e d6 01 00       	call   c0027918 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 b7 cf 01 00       	call   c002729b <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 17 e0 01 00       	call   c002830f <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 00 d6 01 00       	call   c0027918 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 69 cf 01 00       	call   c002729b <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 c9 df 01 00       	call   c002830f <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 b2 d5 01 00       	call   c0027918 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 1b cf 01 00       	call   c002729b <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 ef ce 01 00       	call   c002729b <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 4c d5 01 00       	call   c0027918 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 08 de 01 00       	call   c00281eb <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 97 ce 01 00       	call   c002729b <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 f4 d4 01 00       	call   c0027918 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 b0 dd 01 00       	call   c00281eb <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 3e ce 01 00       	call   c002729b <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 9b d4 01 00       	call   c0027918 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 57 dd 01 00       	call   c00281eb <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 e5 cd 01 00       	call   c002729b <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 42 d4 01 00       	call   c0027918 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 fe dc 01 00       	call   c00281eb <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 5c c6 01 00       	call   c0026c30 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 33 dd 01 00       	call   c002830f <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 1c d3 01 00       	call   c0027918 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 ff dc 01 00       	call   c002830f <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 71 cc 01 00       	call   c002729b <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 d1 dc 01 00       	call   c002830f <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 ba d2 01 00       	call   c0027918 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 23 cc 01 00       	call   c002729b <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 83 dc 01 00       	call   c002830f <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 6c d2 01 00       	call   c0027918 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 d5 cb 01 00       	call   c002729b <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 35 dc 01 00       	call   c002830f <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 1e d2 01 00       	call   c0027918 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 87 cb 01 00       	call   c002729b <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 e7 db 01 00       	call   c002830f <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 d0 d1 01 00       	call   c0027918 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 39 cb 01 00       	call   c002729b <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 99 db 01 00       	call   c002830f <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 82 d1 01 00       	call   c0027918 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 e8 ca 01 00       	call   c002729b <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 48 db 01 00       	call   c002830f <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 31 d1 01 00       	call   c0027918 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 9a ca 01 00       	call   c002729b <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 94 c3 01 00       	call   c0026c30 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 6b da 01 00       	call   c002830f <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 54 d0 01 00       	call   c0027918 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 34 da 01 00       	call   c002830f <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 a6 c9 01 00       	call   c002729b <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 06 da 01 00       	call   c002830f <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 ef cf 01 00       	call   c0027918 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 58 c9 01 00       	call   c002729b <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 b8 d9 01 00       	call   c002830f <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 a1 cf 01 00       	call   c0027918 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 0a c9 01 00       	call   c002729b <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 6a d9 01 00       	call   c002830f <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 53 cf 01 00       	call   c0027918 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 bc c8 01 00       	call   c002729b <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 1c d9 01 00       	call   c002830f <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 05 cf 01 00       	call   c0027918 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 6e c8 01 00       	call   c002729b <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 ce d8 01 00       	call   c002830f <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 b7 ce 01 00       	call   c0027918 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 1d c8 01 00       	call   c002729b <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 7d d8 01 00       	call   c002830f <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 66 ce 01 00       	call   c0027918 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 d5 c7 01 00       	call   c002729b <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 ae c7 01 00       	call   c002729b <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 0c ce 01 00       	call   c0027918 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 c8 d6 01 00       	call   c00281eb <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 57 c7 01 00       	call   c002729b <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 b5 cd 01 00       	call   c0027918 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 71 d6 01 00       	call   c00281eb <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 ff c6 01 00       	call   c002729b <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 5d cd 01 00       	call   c0027918 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 19 d6 01 00       	call   c00281eb <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 a7 c6 01 00       	call   c002729b <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 05 cd 01 00       	call   c0027918 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 c1 d5 01 00       	call   c00281eb <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 4f c6 01 00       	call   c002729b <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 ad cc 01 00       	call   c0027918 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 69 d5 01 00       	call   c00281eb <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 fd c5 01 00       	call   c002729b <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 5b cc 01 00       	call   c0027918 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 17 d5 01 00       	call   c00281eb <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 2b be 01 00       	call   c0026c30 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 02 d5 01 00       	call   c002830f <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 eb ca 01 00       	call   c0027918 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 d2 d4 01 00       	call   c002830f <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 44 c4 01 00       	call   c002729b <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 e4 9b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd641c]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 78 d4 01 00       	call   c002830f <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 61 ca 01 00       	call   c0027918 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 cc c3 01 00       	call   c002729b <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 19 d4 01 00       	call   c002830f <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 02 ca 01 00       	call   c0027918 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 6d c3 01 00       	call   c002729b <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 ba d3 01 00       	call   c002830f <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 a3 c9 01 00       	call   c0027918 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 0e c3 01 00       	call   c002729b <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 5b d3 01 00       	call   c002830f <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 44 c9 01 00       	call   c0027918 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 af c2 01 00       	call   c002729b <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 fc d2 01 00       	call   c002830f <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 e5 c8 01 00       	call   c0027918 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 50 c2 01 00       	call   c002729b <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 9d d2 01 00       	call   c002830f <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 86 c8 01 00       	call   c0027918 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 f1 c1 01 00       	call   c002729b <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 3e d2 01 00       	call   c002830f <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 27 c8 01 00       	call   c0027918 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 92 c1 01 00       	call   c002729b <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 df d1 01 00       	call   c002830f <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 c8 c7 01 00       	call   c0027918 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 33 c1 01 00       	call   c002729b <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 3d ba 01 00       	call   c0026c30 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 14 d1 01 00       	call   c002830f <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 fd c6 01 00       	call   c0027918 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 e4 d0 01 00       	call   c002830f <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 56 c0 01 00       	call   c002729b <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 00 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6400]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 89 d0 01 00       	call   c002830f <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 72 c6 01 00       	call   c0027918 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 dd bf 01 00       	call   c002729b <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 29 d0 01 00       	call   c002830f <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 12 c6 01 00       	call   c0027918 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 7d bf 01 00       	call   c002729b <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 c9 cf 01 00       	call   c002830f <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 b2 c5 01 00       	call   c0027918 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 1d bf 01 00       	call   c002729b <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 69 cf 01 00       	call   c002830f <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 52 c5 01 00       	call   c0027918 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 bd be 01 00       	call   c002729b <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 09 cf 01 00       	call   c002830f <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 f2 c4 01 00       	call   c0027918 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 5d be 01 00       	call   c002729b <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 a9 ce 01 00       	call   c002830f <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 92 c4 01 00       	call   c0027918 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 fd bd 01 00       	call   c002729b <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 49 ce 01 00       	call   c002830f <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 32 c4 01 00       	call   c0027918 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 9d bd 01 00       	call   c002729b <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 e9 cd 01 00       	call   c002830f <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 d2 c3 01 00       	call   c0027918 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 3d bd 01 00       	call   c002729b <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 1c 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd63e4]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 e2 bc 01 00       	call   c002729b <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 3f c3 01 00       	call   c0027918 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 fb cb 01 00       	call   c00281eb <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 85 bc 01 00       	call   c002729b <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 e2 c2 01 00       	call   c0027918 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 9e cb 01 00       	call   c00281eb <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 28 bc 01 00       	call   c002729b <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 85 c2 01 00       	call   c0027918 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 41 cb 01 00       	call   c00281eb <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 cb bb 01 00       	call   c002729b <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 28 c2 01 00       	call   c0027918 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 e4 ca 01 00       	call   c00281eb <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 6e bb 01 00       	call   c002729b <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 cb c1 01 00       	call   c0027918 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 87 ca 01 00       	call   c00281eb <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 11 bb 01 00       	call   c002729b <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 6e c1 01 00       	call   c0027918 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 2a ca 01 00       	call   c00281eb <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 b4 ba 01 00       	call   c002729b <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 11 c1 01 00       	call   c0027918 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 cd c9 01 00       	call   c00281eb <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 57 ba 01 00       	call   c002729b <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 b4 c0 01 00       	call   c0027918 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 70 c9 01 00       	call   c00281eb <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 6c c0 01 00       	call   c0027918 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 e4 ca 01 00       	jmp    c00283a0 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 4e c7 01 00       	call   c00281e7 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 0c c7 01 00       	call   c00281c9 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 a3 c4 01 00       	call   c0027f7b <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 a4 b7 01 00       	call   c002729b <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 73 c4 01 00       	call   c0027f7b <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 da c0 01 00       	call   c0027bfc <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 79 c6 01 00       	call   c00281c9 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 7c c6 01 00       	call   c00281e7 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 4f c6 01 00       	call   c00281e7 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 48 c0 01 00       	call   c0027bfc <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 d2 c7 01 00       	call   c00283a0 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 ad c7 01 00       	call   c00283a0 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 7f c3 01 00       	call   c0027f7b <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 d6 bc 01 00       	call   c00278ec <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 b5 c5 01 00       	call   c00281e7 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 4e b6 01 00       	call   c002729b <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 72 bc 01 00       	call   c00278ec <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 14 c7 01 00       	call   c00283a0 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 4c bf 01 00       	call   c0027bfc <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 c9 b5 01 00       	call   c002729b <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 f5 c1 01 00       	call   c0027f7b <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 f5 b4 01 00       	call   c002729b <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 d5 b4 01 00       	call   c002729b <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 a5 c1 01 00       	call   c0027f7b <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 f5 c3 01 00       	call   c00281e5 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 d4 ba 01 00       	call   c00278ec <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 56 c5 01 00       	call   c0028380 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 7d c3 01 00       	call   c00281c9 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 7b ba 01 00       	call   c00278ec <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 f9 c0 01 00       	call   c0027f7b <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 7c ba 01 00       	call   c0027918 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 ce c0 01 00       	call   c0027f7b <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 35 bd 01 00       	call   c0027bfc <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 b4 b3 01 00       	call   c002729b <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 7e c0 01 00       	call   c0027f7b <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 ca c2 01 00       	call   c00281e7 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 bf b9 01 00       	call   c0027918 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 91 b9 01 00       	call   c0027918 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 ca bf 01 00       	call   c0027f7b <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 2e bc 01 00       	call   c0027bfc <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 f6 bb 01 00       	call   c0027bfc <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 75 b2 01 00       	call   c002729b <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 62 c3 01 00       	call   c00283a0 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 34 bf 01 00       	call   c0027f7b <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 8b b8 01 00       	call   c00278ec <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 6a c1 01 00       	call   c00281e7 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 02 b2 01 00       	call   c002729b <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 26 b8 01 00       	call   c00278ec <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 c8 c2 01 00       	call   c00283a0 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 89 c0 01 00       	call   c00281e7 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 47 c0 01 00       	call   c00281c9 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 de bd 01 00       	call   c0027f7b <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 df b0 01 00       	call   c002729b <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 ae bd 01 00       	call   c0027f7b <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 15 ba 01 00       	call   c0027bfc <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 b4 bf 01 00       	call   c00281c9 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 b7 bf 01 00       	call   c00281e7 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 8a bf 01 00       	call   c00281e7 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 83 b9 01 00       	call   c0027bfc <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 0d c1 01 00       	call   c00283a0 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 e8 c0 01 00       	call   c00283a0 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 ba bc 01 00       	call   c0027f7b <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 11 b6 01 00       	call   c00278ec <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 f0 be 01 00       	call   c00281e7 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 89 af 01 00       	call   c002729b <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 ad b5 01 00       	call   c00278ec <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 4f c0 01 00       	call   c00283a0 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 87 b8 01 00       	call   c0027bfc <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 04 af 01 00       	call   c002729b <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 2f bb 01 00       	call   c0027f7b <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 2f ae 01 00       	call   c002729b <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 0f ae 01 00       	call   c002729b <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 df ba 01 00       	call   c0027f7b <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 2f bd 01 00       	call   c00281e5 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 0d b4 01 00       	call   c00278ec <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 8f be 01 00       	call   c0028380 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 b6 bc 01 00       	call   c00281c9 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 b3 b3 01 00       	call   c00278ec <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 31 ba 01 00       	call   c0027f7b <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 b4 b3 01 00       	call   c0027918 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 06 ba 01 00       	call   c0027f7b <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 6d b6 01 00       	call   c0027bfc <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 ec ac 01 00       	call   c002729b <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 b6 b9 01 00       	call   c0027f7b <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 02 bc 01 00       	call   c00281e7 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 f7 b2 01 00       	call   c0027918 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 c9 b2 01 00       	call   c0027918 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 00 b9 01 00       	call   c0027f7b <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 64 b5 01 00       	call   c0027bfc <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 31 b5 01 00       	call   c0027bfc <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 b0 ab 01 00       	call   c002729b <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 9d bc 01 00       	call   c00283a0 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 6f b8 01 00       	call   c0027f7b <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 c6 b1 01 00       	call   c00278ec <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 a5 ba 01 00       	call   c00281e7 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 3d ab 01 00       	call   c002729b <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 61 b1 01 00       	call   c00278ec <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 03 bc 01 00       	call   c00283a0 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 c4 b9 01 00       	call   c00281e7 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 82 b9 01 00       	call   c00281c9 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 19 b7 01 00       	call   c0027f7b <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 1a aa 01 00       	call   c002729b <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 e9 b6 01 00       	call   c0027f7b <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 50 b3 01 00       	call   c0027bfc <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 ef b8 01 00       	call   c00281c9 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 f2 b8 01 00       	call   c00281e7 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 c5 b8 01 00       	call   c00281e7 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 be b2 01 00       	call   c0027bfc <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 48 ba 01 00       	call   c00283a0 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 23 ba 01 00       	call   c00283a0 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 f5 b5 01 00       	call   c0027f7b <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 4c af 01 00       	call   c00278ec <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 2b b8 01 00       	call   c00281e7 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 c4 a8 01 00       	call   c002729b <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 e8 ae 01 00       	call   c00278ec <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 8a b9 01 00       	call   c00283a0 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 c2 b1 01 00       	call   c0027bfc <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 3f a8 01 00       	call   c002729b <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 6a b4 01 00       	call   c0027f7b <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 6a a7 01 00       	call   c002729b <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 4a a7 01 00       	call   c002729b <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 1a b4 01 00       	call   c0027f7b <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 6a b6 01 00       	call   c00281e5 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 48 ad 01 00       	call   c00278ec <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 ca b7 01 00       	call   c0028380 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 f1 b5 01 00       	call   c00281c9 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 ee ac 01 00       	call   c00278ec <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 6c b3 01 00       	call   c0027f7b <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 ef ac 01 00       	call   c0027918 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 41 b3 01 00       	call   c0027f7b <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 a8 af 01 00       	call   c0027bfc <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 27 a6 01 00       	call   c002729b <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 f1 b2 01 00       	call   c0027f7b <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 3d b5 01 00       	call   c00281e7 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 32 ac 01 00       	call   c0027918 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 04 ac 01 00       	call   c0027918 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 3b b2 01 00       	call   c0027f7b <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 9f ae 01 00       	call   c0027bfc <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 6c ae 01 00       	call   c0027bfc <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 eb a4 01 00       	call   c002729b <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 d8 b5 01 00       	call   c00283a0 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 aa b1 01 00       	call   c0027f7b <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 01 ab 01 00       	call   c00278ec <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 e0 b3 01 00       	call   c00281e7 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 78 a4 01 00       	call   c002729b <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 9c aa 01 00       	call   c00278ec <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 3e b5 01 00       	call   c00283a0 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 ff b2 01 00       	call   c00281e7 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 bd b2 01 00       	call   c00281c9 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 54 b0 01 00       	call   c0027f7b <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 55 a3 01 00       	call   c002729b <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 24 b0 01 00       	call   c0027f7b <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 8b ac 01 00       	call   c0027bfc <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 2a b2 01 00       	call   c00281c9 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 2d b2 01 00       	call   c00281e7 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 00 b2 01 00       	call   c00281e7 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 f9 ab 01 00       	call   c0027bfc <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 83 b3 01 00       	call   c00283a0 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 5e b3 01 00       	call   c00283a0 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 30 af 01 00       	call   c0027f7b <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 87 a8 01 00       	call   c00278ec <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 66 b1 01 00       	call   c00281e7 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 ff a1 01 00       	call   c002729b <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 23 a8 01 00       	call   c00278ec <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 c5 b2 01 00       	call   c00283a0 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 fd aa 01 00       	call   c0027bfc <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 7a a1 01 00       	call   c002729b <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 a5 ad 01 00       	call   c0027f7b <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 a5 a0 01 00       	call   c002729b <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 85 a0 01 00       	call   c002729b <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 55 ad 01 00       	call   c0027f7b <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 a5 af 01 00       	call   c00281e5 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 83 a6 01 00       	call   c00278ec <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 05 b1 01 00       	call   c0028380 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 2c af 01 00       	call   c00281c9 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 29 a6 01 00       	call   c00278ec <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 a7 ac 01 00       	call   c0027f7b <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 2a a6 01 00       	call   c0027918 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 7c ac 01 00       	call   c0027f7b <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 e3 a8 01 00       	call   c0027bfc <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 62 9f 01 00       	call   c002729b <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 2c ac 01 00       	call   c0027f7b <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 78 ae 01 00       	call   c00281e7 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 6d a5 01 00       	call   c0027918 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 3f a5 01 00       	call   c0027918 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 76 ab 01 00       	call   c0027f7b <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 da a7 01 00       	call   c0027bfc <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 a7 a7 01 00       	call   c0027bfc <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 26 9e 01 00       	call   c002729b <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 13 af 01 00       	call   c00283a0 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 e5 aa 01 00       	call   c0027f7b <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 3c a4 01 00       	call   c00278ec <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 1b ad 01 00       	call   c00281e7 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 b3 9d 01 00       	call   c002729b <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 d7 a3 01 00       	call   c00278ec <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 79 ae 01 00       	call   c00283a0 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 37 ac 01 00       	call   c00281e7 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 f5 ab 01 00       	call   c00281c9 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 8c a9 01 00       	call   c0027f7b <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 8d 9c 01 00       	call   c002729b <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 5c a9 01 00       	call   c0027f7b <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 c3 a5 01 00       	call   c0027bfc <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 62 ab 01 00       	call   c00281c9 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 65 ab 01 00       	call   c00281e7 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 38 ab 01 00       	call   c00281e7 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 31 a5 01 00       	call   c0027bfc <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 bb ac 01 00       	call   c00283a0 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 92 ac 01 00       	call   c00283a0 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 64 a8 01 00       	call   c0027f7b <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 bb a1 01 00       	call   c00278ec <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 9a aa 01 00       	call   c00281e7 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 33 9b 01 00       	call   c002729b <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 5b a1 01 00       	call   c00278ec <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 fd ab 01 00       	call   c00283a0 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 36 a4 01 00       	call   c0027bfc <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 b3 9a 01 00       	call   c002729b <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 df a6 01 00       	call   c0027f7b <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 df 99 01 00       	call   c002729b <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 bf 99 01 00       	call   c002729b <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 8f a6 01 00       	call   c0027f7b <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 c3 a8 01 00       	call   c00281c9 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 ba 9f 01 00       	call   c00278ec <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 3c aa 01 00       	call   c0028380 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 63 a8 01 00       	call   c00281c9 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 5d 9f 01 00       	call   c00278ec <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 db a5 01 00       	call   c0027f7b <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 5e 9f 01 00       	call   c0027918 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 b0 a5 01 00       	call   c0027f7b <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 17 a2 01 00       	call   c0027bfc <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 96 98 01 00       	call   c002729b <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 60 a5 01 00       	call   c0027f7b <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 ac a7 01 00       	call   c00281e7 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 a1 9e 01 00       	call   c0027918 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 73 9e 01 00       	call   c0027918 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 b7 a4 01 00       	call   c0027f7b <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 1e a1 01 00       	call   c0027bfc <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 07 9e 01 00       	call   c0027918 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 c3 a6 01 00       	call   c00281eb <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 b6 a0 01 00       	call   c0027bfc <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 35 97 01 00       	call   c002729b <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 22 a8 01 00       	call   c00283a0 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 f4 a3 01 00       	call   c0027f7b <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 4b 9d 01 00       	call   c00278ec <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 2a a6 01 00       	call   c00281e7 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 c2 96 01 00       	call   c002729b <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 ea 9c 01 00       	call   c00278ec <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 8c a7 01 00       	call   c00283a0 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 44 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd63bc]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 38 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd63c8]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 32 19 00 00       	call   c000f5a9 <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 3f a4 01 00       	call   c00281e7 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 fd a3 01 00       	call   c00281c9 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 e9 a3 01 00       	call   c00281e7 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 5b a1 01 00       	call   c0027f7b <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 d9 9a 01 00       	call   c0027918 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 2b a1 01 00       	call   c0027f7b <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 31 94 01 00       	call   c002729b <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 00 a1 01 00       	call   c0027f7b <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 50 a3 01 00       	call   c00281e5 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 31 9a 01 00       	call   c00278ec <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 b3 a4 01 00       	call   c0028380 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 da a2 01 00       	call   c00281c9 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 d9 99 01 00       	call   c00278ec <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 57 a0 01 00       	call   c0027f7b <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 da 99 01 00       	call   c0027918 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 2c a0 01 00       	call   c0027f7b <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 93 9c 01 00       	call   c0027bfc <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 12 93 01 00       	call   c002729b <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 3a 9c 01 00       	call   c0027bfc <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 c0 92 01 00       	call   c002729b <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 ae a3 01 00       	call   c00283a0 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 80 9f 01 00       	call   c0027f7b <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 d7 98 01 00       	call   c00278ec <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 b6 a1 01 00       	call   c00281e7 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 4f 92 01 00       	call   c002729b <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 7b 98 01 00       	call   c00278ec <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 1d a3 01 00       	call   c00283a0 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 ca 9e 01 00       	call   c0027f7b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 47 98 01 00       	call   c0027918 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 98 9e 01 00       	call   c0027f7b <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 9e 91 01 00       	call   c002729b <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 6e 9e 01 00       	call   c0027f7b <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 c2 a0 01 00       	call   c00281e9 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 9b 97 01 00       	call   c00278ec <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 1d a2 01 00       	call   c0028380 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 44 a0 01 00       	call   c00281c9 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 42 97 01 00       	call   c00278ec <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 c0 9d 01 00       	call   c0027f7b <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 43 97 01 00       	call   c0027918 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 95 9d 01 00       	call   c0027f7b <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 fc 99 01 00       	call   c0027bfc <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 7b 90 01 00       	call   c002729b <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 97 99 01 00       	call   c0027bfc <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 16 90 01 00       	call   c002729b <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 04 a1 01 00       	call   c00283a0 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 d6 9c 01 00       	call   c0027f7b <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 2d 96 01 00       	call   c00278ec <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 0c 9f 01 00       	call   c00281e7 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 a5 8f 01 00       	call   c002729b <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 d1 95 01 00       	call   c00278ec <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 42 9c 01 00       	call   c0027f7b <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 48 8f 01 00       	call   c002729b <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 5e 9d 02 c0       	mov    eax,0xc0029d5e
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 6f 9d 02 c0       	mov    eax,0xc0029d6f
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 74 11 00 00       	call   c000f5a9 <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 76 11 00 00       	call   c000f5c9 <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 f0 10 00 00       	jmp    c000f599 <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 0b 11 00 00       	jmp    c000f5b9 <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c000e4e3:	ff 05 44 0e 03 c0    	inc    DWORD PTR ds:0xc0030e44
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 44 0e 03 c0       	mov    eax,ds:0xc0030e44
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 44 0e 03 c0       	mov    ds:0xc0030e44,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d 40 0e 03 c0 00 	cmp    DWORD PTR ds:0xc0030e40,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 40 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e40,0x0
c000e50d:	e8 b1 f4 00 00       	call   c001d9c3 <schedule()>
c000e512:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c000e517:	48                   	dec    eax
c000e518:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 90 da 02 c0       	mov    eax,ds:0xc002da90
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 a6 9d 02 c0       	push   0xc0029da6
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 28 d9 02 c0       	mov    eax,0xc002d928
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 af 9d 02 c0       	push   0xc0029daf
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 14 67 02 c0       	mov    eax,0xc0026714
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 b9 9d 02 c0       	push   0xc0029db9
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 48 64 02 c0       	mov    eax,0xc0026448
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 c2 9d 02 c0       	push   0xc0029dc2
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 14 68 02 c0       	mov    eax,0xc0026814
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 cc 9d 02 c0       	push   0xc0029dcc
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 94 65 02 c0       	mov    eax,0xc0026594
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 d5 9d 02 c0       	push   0xc0029dd5
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 2c d9 02 c0       	mov    eax,0xc002d92c
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 e2 9d 02 c0       	push   0xc0029de2
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 2d d9 02 c0       	mov    eax,0xc002d92d
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 23 56 00 00       	call   c0013c90 <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 ef 9d 02 c0       	push   0xc0029def
c000e69e:	e8 50 0f 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e6a3:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e6aa:	e8 ea 0e 00 00       	call   c000f599 <malloc>
c000e6af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6b6:	89 c3                	mov    ebx,eax
c000e6b8:	ff 35 70 0e 03 c0    	push   DWORD PTR ds:0xc0030e70
c000e6be:	68 08 9e 02 c0       	push   0xc0029e08
c000e6c3:	6a 01                	push   0x1
c000e6c5:	50                   	push   eax
c000e6c6:	e8 db ee 00 00       	call   c001d5a6 <Process::Process(bool, char const*, Process*, char**)>
c000e6cb:	83 c4 20             	add    esp,0x20
c000e6ce:	68 ff 00 00 00       	push   0xff
c000e6d3:	6a 00                	push   0x0
c000e6d5:	68 2f ef 00 c0       	push   0xc000ef2f
c000e6da:	53                   	push   ebx
c000e6db:	e8 be f0 00 00       	call   c001d79e <Process::createThread(void (*)(void*), void*, int)>
c000e6e0:	6a 7a                	push   0x7a
c000e6e2:	6a 00                	push   0x0
c000e6e4:	68 82 e1 01 c0       	push   0xc001e182
c000e6e9:	ff 35 70 0e 03 c0    	push   DWORD PTR ds:0xc0030e70
c000e6ef:	e8 aa f0 00 00       	call   c001d79e <Process::createThread(void (*)(void*), void*, int)>
c000e6f4:	83 c4 14             	add    esp,0x14
c000e6f7:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c000e6fc:	68 ec 9e 02 c0       	push   0xc0029eec
c000e701:	c6 05 2d d9 02 c0 01 	mov    BYTE PTR ds:0xc002d92d,0x1
c000e708:	e8 e6 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e70d:	e8 1b fe 00 00       	call   c001e52d <Vm::initialise8086()>
c000e712:	e8 41 43 00 00       	call   c0012a58 <Fs::initVFS()>
c000e717:	c7 04 24 15 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e15
c000e71e:	e8 d0 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e723:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c000e728:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e72e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e730:	6a 00                	push   0x0
c000e732:	6a 00                	push   0x0
c000e734:	6a 00                	push   0x0
c000e736:	50                   	push   eax
c000e737:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e73a:	83 c4 14             	add    esp,0x14
c000e73d:	68 ec 9e 02 c0       	push   0xc0029eec
c000e742:	e8 ac 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e747:	e8 e7 d6 00 00       	call   c001be33 <Sys::loadSyscalls()>
c000e74c:	e8 df b5 00 00       	call   c0019d30 <Krnl::loadSystemEnv()>
c000e751:	83 c4 0c             	add    esp,0xc
c000e754:	6a 3a                	push   0x3a
c000e756:	68 2f 9e 02 c0       	push   0xc0029e2f
c000e75b:	68 38 9e 02 c0       	push   0xc0029e38
c000e760:	e8 90 c4 00 00       	call   c001abf5 <Reg::readIntWithDefault(char*, char*, int)>
c000e765:	89 04 24             	mov    DWORD PTR [esp],eax
c000e768:	e8 db 4d 00 00       	call   c0013548 <User::loadClockSettings(int)>
c000e76d:	c7 04 24 10 9f 02 c0 	mov    DWORD PTR [esp],0xc0029f10
c000e774:	e8 7a 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e779:	58                   	pop    eax
c000e77a:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c000e77f:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e785:	e8 c6 54 00 00       	call   c0013c50 <Device::loadDriversForAll()>
c000e78a:	c7 04 24 40 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e40
c000e791:	e8 5d 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e796:	e8 fd b0 00 00       	call   c0019898 <Krnl::startCPUs()>
c000e79b:	c7 04 24 5a 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e5a
c000e7a2:	e8 4c 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e7a7:	5a                   	pop    edx
c000e7a8:	8b 1d 28 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d928
c000e7ae:	59                   	pop    ecx
c000e7af:	6a 01                	push   0x1
c000e7b1:	68 6b 9e 02 c0       	push   0xc0029e6b
c000e7b6:	e8 48 e8 00 00       	call   c001d003 <Thr::loadDLL(char const*, bool)>
c000e7bb:	5a                   	pop    edx
c000e7bc:	59                   	pop    ecx
c000e7bd:	53                   	push   ebx
c000e7be:	50                   	push   eax
c000e7bf:	e8 6a ea 00 00       	call   c001d22e <Thr::executeDLL(unsigned long, void*)>
c000e7c4:	83 c4 10             	add    esp,0x10
c000e7c7:	83 ec 0c             	sub    esp,0xc
c000e7ca:	6a 02                	push   0x2
c000e7cc:	e8 c8 f3 00 00       	call   c001db99 <blockTask(TaskState)>
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	eb f1                	jmp    c000e7c7 <Krnl::firstTask()+0x133>

c000e7d6 <Computer::Computer()>:
c000e7d6:	83 ec 0c             	sub    esp,0xc
c000e7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7dd:	83 ec 08             	sub    esp,0x8
c000e7e0:	68 87 9e 02 c0       	push   0xc0029e87
c000e7e5:	50                   	push   eax
c000e7e6:	e8 1f 55 00 00       	call   c0013d0a <Device::Device(char const*)>
c000e7eb:	83 c4 10             	add    esp,0x10
c000e7ee:	ba 5c 9f 02 c0       	mov    edx,0xc0029f5c
c000e7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f7:	89 10                	mov    DWORD PTR [eax],edx
c000e7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fd:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e819:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e81f:	83 ca 04             	or     edx,0x4
c000e822:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e832:	0f b6 d0             	movzx  edx,al
c000e835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e839:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e844:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84a:	0f b6 d0             	movzx  edx,al
c000e84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e851:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e860:	8d 50 01             	lea    edx,[eax+0x1]
c000e863:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e867:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e86d:	0f b6 d0             	movzx  edx,al
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e878:	83 e1 3f             	and    ecx,0x3f
c000e87b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e883:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e889:	0f b6 d0             	movzx  edx,al
c000e88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e890:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a1:	0f b6 d0             	movzx  edx,al
c000e8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a8:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e8ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8be:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c4:	0f b6 d0             	movzx  edx,al
c000e8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8cf:	83 e1 3f             	and    ecx,0x3f
c000e8d2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8e0:	0f b6 d0             	movzx  edx,al
c000e8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e7:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8f8:	0f b6 d0             	movzx  edx,al
c000e8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ff:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e908:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e90e:	8d 50 01             	lea    edx,[eax+0x1]
c000e911:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e915:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e91b:	0f b6 d0             	movzx  edx,al
c000e91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e922:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e926:	83 e1 3f             	and    ecx,0x3f
c000e929:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e92d:	90                   	nop
c000e92e:	83 c4 0c             	add    esp,0xc
c000e931:	c3                   	ret    

c000e932 <Computer::setBootMessage(char const*)>:
c000e932:	c3                   	ret    
c000e933:	90                   	nop

c000e934 <Computer::detectFeatures()>:
c000e934:	55                   	push   ebp
c000e935:	57                   	push   edi
c000e936:	56                   	push   esi
c000e937:	53                   	push   ebx
c000e938:	83 ec 1c             	sub    esp,0x1c
c000e93b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e93f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e949:	e8 96 19 ff ff       	call   c00002e4 <detectCPUID>
c000e94e:	85 c0                	test   eax,eax
c000e950:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e956:	0f 95 c2             	setne  dl
c000e959:	83 e0 fd             	and    eax,0xfffffffd
c000e95c:	d1 e2                	shl    edx,1
c000e95e:	09 d0                	or     eax,edx
c000e960:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e966:	a8 02                	test   al,0x2
c000e968:	75 46                	jne    c000e9b0 <Computer::detectFeatures()+0x7c>
c000e96a:	f6 05 41 d9 02 c0 04 	test   BYTE PTR ds:0xc002d941,0x4
c000e971:	74 07                	je     c000e97a <Computer::detectFeatures()+0x46>
c000e973:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e97a:	e8 57 7a 01 00       	call   c00263d6 <x87Detect>
c000e97f:	83 e0 01             	and    eax,0x1
c000e982:	c1 e0 04             	shl    eax,0x4
c000e985:	88 c2                	mov    dl,al
c000e987:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e98d:	83 e0 ef             	and    eax,0xffffffef
c000e990:	09 d0                	or     eax,edx
c000e992:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e998:	a8 10                	test   al,0x10
c000e99a:	0f 85 2a 01 00 00    	jne    c000eaca <Computer::detectFeatures()+0x196>
c000e9a0:	84 c0                	test   al,al
c000e9a2:	0f 88 45 01 00 00    	js     c000eaed <Computer::detectFeatures()+0x1b9>
c000e9a8:	83 c4 1c             	add    esp,0x1c
c000e9ab:	5b                   	pop    ebx
c000e9ac:	5e                   	pop    esi
c000e9ad:	5f                   	pop    edi
c000e9ae:	5d                   	pop    ebp
c000e9af:	c3                   	ret    
c000e9b0:	83 ec 0c             	sub    esp,0xc
c000e9b3:	6a 20                	push   0x20
c000e9b5:	e8 70 9e 00 00       	call   c001882a <CPU::cpuidCheckEDX(unsigned int)>
c000e9ba:	83 e0 01             	and    eax,0x1
c000e9bd:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9c4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9ca:	83 e0 f7             	and    eax,0xfffffff7
c000e9cd:	09 d0                	or     eax,edx
c000e9cf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d5:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9dc:	e8 49 9e 00 00       	call   c001882a <CPU::cpuidCheckEDX(unsigned int)>
c000e9e1:	83 e0 01             	and    eax,0x1
c000e9e4:	88 c2                	mov    dl,al
c000e9e6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9ec:	83 e0 fe             	and    eax,0xfffffffe
c000e9ef:	09 d0                	or     eax,edx
c000e9f1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9f7:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9fe:	e8 27 9e 00 00       	call   c001882a <CPU::cpuidCheckEDX(unsigned int)>
c000ea03:	c1 e0 07             	shl    eax,0x7
c000ea06:	88 c2                	mov    dl,al
c000ea08:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea0e:	83 e0 7f             	and    eax,0x7f
c000ea11:	09 d0                	or     eax,edx
c000ea13:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea19:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea20:	e8 05 9e 00 00       	call   c001882a <CPU::cpuidCheckEDX(unsigned int)>
c000ea25:	83 c4 10             	add    esp,0x10
c000ea28:	83 e0 01             	and    eax,0x1
c000ea2b:	c1 e0 05             	shl    eax,0x5
c000ea2e:	88 c2                	mov    dl,al
c000ea30:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea36:	83 e0 df             	and    eax,0xffffffdf
c000ea39:	09 d0                	or     eax,edx
c000ea3b:	f7 05 40 d9 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002d940,0x401
c000ea45:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea4b:	0f 84 c2 00 00 00    	je     c000eb13 <Computer::detectFeatures()+0x1df>
c000ea51:	83 e0 fe             	and    eax,0xfffffffe
c000ea54:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea5a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea60:	88 c2                	mov    dl,al
c000ea62:	83 e2 09             	and    edx,0x9
c000ea65:	fe ca                	dec    dl
c000ea67:	75 09                	jne    c000ea72 <Computer::detectFeatures()+0x13e>
c000ea69:	83 e0 fe             	and    eax,0xfffffffe
c000ea6c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea72:	83 ec 0c             	sub    esp,0xc
c000ea75:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea79:	50                   	push   eax
c000ea7a:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea7e:	55                   	push   ebp
c000ea7f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea83:	57                   	push   edi
c000ea84:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea88:	56                   	push   esi
c000ea89:	68 00 00 00 80       	push   0x80000000
c000ea8e:	e8 13 9d 00 00       	call   c00187a6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea93:	83 c4 20             	add    esp,0x20
c000ea96:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eaa1:	0f 86 c3 fe ff ff    	jbe    c000e96a <Computer::detectFeatures()+0x36>
c000eaa7:	83 ec 0c             	sub    esp,0xc
c000eaaa:	50                   	push   eax
c000eaab:	55                   	push   ebp
c000eaac:	57                   	push   edi
c000eaad:	56                   	push   esi
c000eaae:	68 01 00 00 80       	push   0x80000001
c000eab3:	e8 ee 9c 00 00       	call   c00187a6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eab8:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eac2:	83 c4 20             	add    esp,0x20
c000eac5:	e9 a0 fe ff ff       	jmp    c000e96a <Computer::detectFeatures()+0x36>
c000eaca:	e8 c1 78 01 00       	call   c0026390 <absolutelyNoChanceInHell>
c000eacf:	88 c2                	mov    dl,al
c000ead1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ead7:	c1 e2 07             	shl    edx,0x7
c000eada:	83 e0 7f             	and    eax,0x7f
c000eadd:	09 d0                	or     eax,edx
c000eadf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae5:	84 c0                	test   al,al
c000eae7:	0f 89 bb fe ff ff    	jns    c000e9a8 <Computer::detectFeatures()+0x74>
c000eaed:	e8 7e 78 01 00       	call   c0026370 <avxDetect>
c000eaf2:	83 e0 01             	and    eax,0x1
c000eaf5:	c1 e0 05             	shl    eax,0x5
c000eaf8:	88 c2                	mov    dl,al
c000eafa:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb00:	83 e0 df             	and    eax,0xffffffdf
c000eb03:	09 d0                	or     eax,edx
c000eb05:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb0b:	83 c4 1c             	add    esp,0x1c
c000eb0e:	5b                   	pop    ebx
c000eb0f:	5e                   	pop    esi
c000eb10:	5f                   	pop    edi
c000eb11:	5d                   	pop    ebp
c000eb12:	c3                   	ret    
c000eb13:	83 ec 0c             	sub    esp,0xc
c000eb16:	68 00 02 00 00       	push   0x200
c000eb1b:	e8 0a 9d 00 00       	call   c001882a <CPU::cpuidCheckEDX(unsigned int)>
c000eb20:	83 c4 10             	add    esp,0x10
c000eb23:	83 e0 01             	and    eax,0x1
c000eb26:	88 c2                	mov    dl,al
c000eb28:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb2e:	83 e0 fe             	and    eax,0xfffffffe
c000eb31:	09 d0                	or     eax,edx
c000eb33:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb39:	e9 1c ff ff ff       	jmp    c000ea5a <Computer::detectFeatures()+0x126>

c000eb3e <Computer::displayFeatures()>:
c000eb3e:	c3                   	ret    
c000eb3f:	90                   	nop

c000eb40 <Computer::rdmsr(unsigned int)>:
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb47:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb4e:	74 0a                	je     c000eb5a <Computer::rdmsr(unsigned int)+0x1a>
c000eb50:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb54:	0f 32                	rdmsr  
c000eb56:	83 c4 0c             	add    esp,0xc
c000eb59:	c3                   	ret    
c000eb5a:	83 ec 0c             	sub    esp,0xc
c000eb5d:	68 90 9e 02 c0       	push   0xc0029e90
c000eb62:	e8 d2 b2 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	eb e4                	jmp    c000eb50 <Computer::rdmsr(unsigned int)+0x10>

c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eb6c:	57                   	push   edi
c000eb6d:	56                   	push   esi
c000eb6e:	52                   	push   edx
c000eb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb73:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eb77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eb7b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb82:	74 0e                	je     c000eb92 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eb84:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb88:	89 f0                	mov    eax,esi
c000eb8a:	89 fa                	mov    edx,edi
c000eb8c:	0f 30                	wrmsr  
c000eb8e:	58                   	pop    eax
c000eb8f:	5e                   	pop    esi
c000eb90:	5f                   	pop    edi
c000eb91:	c3                   	ret    
c000eb92:	83 ec 0c             	sub    esp,0xc
c000eb95:	68 96 9e 02 c0       	push   0xc0029e96
c000eb9a:	e8 9a b2 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c000eb9f:	83 c4 10             	add    esp,0x10
c000eba2:	eb e0                	jmp    c000eb84 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eba4 <Computer::nmiEnabled()>:
c000eba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eba8:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ebae:	c3                   	ret    
c000ebaf:	90                   	nop

c000ebb0 <Computer::readCMOS(unsigned char)>:
c000ebb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebb4:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ebbb:	19 c0                	sbb    eax,eax
c000ebbd:	83 e0 80             	and    eax,0xffffff80
c000ebc0:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ebc4:	e6 70                	out    0x70,al
c000ebc6:	e4 71                	in     al,0x71
c000ebc8:	c3                   	ret    
c000ebc9:	90                   	nop

c000ebca <Computer::enableNMI(bool)>:
c000ebca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ebce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebd2:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ebd8:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ebe0:	eb ce                	jmp    c000ebb0 <Computer::readCMOS(unsigned char)>

c000ebe2 <Computer::open(int, int, void*)>:
c000ebe2:	56                   	push   esi
c000ebe3:	53                   	push   ebx
c000ebe4:	83 ec 10             	sub    esp,0x10
c000ebe7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ebeb:	68 30 9f 02 c0       	push   0xc0029f30
c000ebf0:	e8 fe 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ebf5:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ebfc:	f6 05 40 d9 02 c0 04 	test   BYTE PTR ds:0xc002d940,0x4
c000ec03:	0f 94 05 60 c8 02 c0 	sete   BYTE PTR ds:0xc002c860
c000ec0a:	e8 8a 09 00 00       	call   c000f599 <malloc>
c000ec0f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec12:	89 c6                	mov    esi,eax
c000ec14:	e8 85 8e 00 00       	call   c0017a9e <ACPI::ACPI()>
c000ec19:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec1f:	58                   	pop    eax
c000ec20:	5a                   	pop    edx
c000ec21:	56                   	push   esi
c000ec22:	53                   	push   ebx
c000ec23:	e8 de 4e 00 00       	call   c0013b06 <Device::addChild(Device*)>
c000ec28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec2b:	e8 04 fd ff ff       	call   c000e934 <Computer::detectFeatures()>
c000ec30:	59                   	pop    ecx
c000ec31:	5e                   	pop    esi
c000ec32:	6a 01                	push   0x1
c000ec34:	53                   	push   ebx
c000ec35:	e8 90 ff ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ec3a:	c7 04 24 40 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e40
c000ec41:	e8 ad 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ec46:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ec4d:	e8 47 09 00 00       	call   c000f599 <malloc>
c000ec52:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec55:	89 c6                	mov    esi,eax
c000ec57:	e8 86 9c 00 00       	call   c00188e2 <CPU::CPU()>
c000ec5c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ec62:	58                   	pop    eax
c000ec63:	5a                   	pop    edx
c000ec64:	56                   	push   esi
c000ec65:	53                   	push   ebx
c000ec66:	e8 9b 4e 00 00       	call   c0013b06 <Device::addChild(Device*)>
c000ec6b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ec71:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec77:	6a 00                	push   0x0
c000ec79:	6a 00                	push   0x0
c000ec7b:	50                   	push   eax
c000ec7c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ec7f:	83 c4 20             	add    esp,0x20
c000ec82:	e8 17 54 00 00       	call   c001409e <setupFPU()>
c000ec87:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ec8d:	85 c0                	test   eax,eax
c000ec8f:	74 1f                	je     c000ecb0 <Computer::open(int, int, void*)+0xce>
c000ec91:	83 ec 08             	sub    esp,0x8
c000ec94:	50                   	push   eax
c000ec95:	53                   	push   ebx
c000ec96:	e8 6b 4e 00 00       	call   c0013b06 <Device::addChild(Device*)>
c000ec9b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000eca1:	8b 10                	mov    edx,DWORD PTR [eax]
c000eca3:	6a 00                	push   0x0
c000eca5:	6a 00                	push   0x0
c000eca7:	6a 00                	push   0x0
c000eca9:	50                   	push   eax
c000ecaa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecad:	83 c4 20             	add    esp,0x20
c000ecb0:	83 ec 0c             	sub    esp,0xc
c000ecb3:	68 9c 9e 02 c0       	push   0xc0029e9c
c000ecb8:	e8 36 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ecbd:	c7 04 24 94 e6 00 c0 	mov    DWORD PTR [esp],0xc000e694
c000ecc4:	e8 f7 eb 00 00       	call   c001d8c0 <setupMultitasking(void (*)())>
c000ecc9:	83 c4 14             	add    esp,0x14
c000eccc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecd1:	5b                   	pop    ebx
c000ecd2:	5e                   	pop    esi
c000ecd3:	c3                   	ret    

c000ecd4 <Computer::disableNMI()>:
c000ecd4:	6a 00                	push   0x0
c000ecd6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ecda:	e8 eb fe ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ecdf:	58                   	pop    eax
c000ece0:	5a                   	pop    edx
c000ece1:	c3                   	ret    

c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ece2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ece6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eced:	19 c0                	sbb    eax,eax
c000ecef:	83 e0 80             	and    eax,0xffffff80
c000ecf2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ecf6:	e6 70                	out    0x70,al
c000ecf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecfc:	e6 71                	out    0x71,al
c000ecfe:	c3                   	ret    
c000ecff:	90                   	nop

c000ed00 <Computer::handleNMI()>:
c000ed00:	56                   	push   esi
c000ed01:	53                   	push   ebx
c000ed02:	83 ec 10             	sub    esp,0x10
c000ed05:	e4 92                	in     al,0x92
c000ed07:	89 c6                	mov    esi,eax
c000ed09:	e4 61                	in     al,0x61
c000ed0b:	68 b7 9e 02 c0       	push   0xc0029eb7
c000ed10:	88 c3                	mov    bl,al
c000ed12:	e8 b6 39 00 00       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c000ed17:	83 c4 10             	add    esp,0x10
c000ed1a:	83 e6 10             	and    esi,0x10
c000ed1d:	75 0d                	jne    c000ed2c <Computer::handleNMI()+0x2c>
c000ed1f:	f6 c3 40             	test   bl,0x40
c000ed22:	75 1d                	jne    c000ed41 <Computer::handleNMI()+0x41>
c000ed24:	84 db                	test   bl,bl
c000ed26:	78 2d                	js     c000ed55 <Computer::handleNMI()+0x55>
c000ed28:	58                   	pop    eax
c000ed29:	5b                   	pop    ebx
c000ed2a:	5e                   	pop    esi
c000ed2b:	c3                   	ret    
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	68 c8 9e 02 c0       	push   0xc0029ec8
c000ed34:	e8 00 b1 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c000ed39:	83 c4 10             	add    esp,0x10
c000ed3c:	f6 c3 40             	test   bl,0x40
c000ed3f:	74 e3                	je     c000ed24 <Computer::handleNMI()+0x24>
c000ed41:	83 ec 0c             	sub    esp,0xc
c000ed44:	68 d5 9e 02 c0       	push   0xc0029ed5
c000ed49:	e8 eb b0 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c000ed4e:	83 c4 10             	add    esp,0x10
c000ed51:	84 db                	test   bl,bl
c000ed53:	79 d3                	jns    c000ed28 <Computer::handleNMI()+0x28>
c000ed55:	c7 44 24 10 df 9e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029edf
c000ed5d:	5a                   	pop    edx
c000ed5e:	5b                   	pop    ebx
c000ed5f:	5e                   	pop    esi
c000ed60:	e9 d4 b0 00 00       	jmp    c0019e39 <Krnl::panic(char const*)>
c000ed65:	90                   	nop

c000ed66 <Computer::setDiskActivityLight(int, bool)>:
c000ed66:	56                   	push   esi
c000ed67:	53                   	push   ebx
c000ed68:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ed6c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ed71:	77 1b                	ja     c000ed8e <Computer::setDiskActivityLight(int, bool)+0x28>
c000ed73:	e4 92                	in     al,0x92
c000ed75:	bb 40 00 00 00       	mov    ebx,0x40
c000ed7a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ed7e:	89 da                	mov    edx,ebx
c000ed80:	d3 e2                	shl    edx,cl
c000ed82:	89 f1                	mov    ecx,esi
c000ed84:	f7 d2                	not    edx
c000ed86:	d3 e3                	shl    ebx,cl
c000ed88:	21 d0                	and    eax,edx
c000ed8a:	09 d8                	or     eax,ebx
c000ed8c:	e6 92                	out    0x92,al
c000ed8e:	5b                   	pop    ebx
c000ed8f:	5e                   	pop    esi
c000ed90:	c3                   	ret    
c000ed91:	90                   	nop

c000ed92 <GDTEntry::setBase(unsigned int)>:
c000ed92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ed9a:	89 c1                	mov    ecx,eax
c000ed9c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000eda0:	c1 e9 10             	shr    ecx,0x10
c000eda3:	c1 e8 18             	shr    eax,0x18
c000eda6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000eda9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000edac:	c3                   	ret    
c000edad:	90                   	nop

c000edae <GDTEntry::setLimit(unsigned int)>:
c000edae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000edb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edb6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000edb9:	66 89 01             	mov    WORD PTR [ecx],ax
c000edbc:	83 e2 f0             	and    edx,0xfffffff0
c000edbf:	c1 e8 10             	shr    eax,0x10
c000edc2:	83 e0 0f             	and    eax,0xf
c000edc5:	09 d0                	or     eax,edx
c000edc7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000edca:	c3                   	ret    
c000edcb:	90                   	nop

c000edcc <GDT::GDT()>:
c000edcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000edd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ede0:	90                   	nop
c000ede1:	c3                   	ret    

c000ede2 <GDT::addEntry(GDTEntry)>:
c000ede2:	53                   	push   ebx
c000ede3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ede7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edeb:	8b 02                	mov    eax,DWORD PTR [edx]
c000eded:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000edf1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000edf5:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000edf9:	8d 48 01             	lea    ecx,[eax+0x1]
c000edfc:	c1 e0 03             	shl    eax,0x3
c000edff:	89 0a                	mov    DWORD PTR [edx],ecx
c000ee01:	5b                   	pop    ebx
c000ee02:	c3                   	ret    
c000ee03:	90                   	nop

c000ee04 <GDT::getNumberOfEntries()>:
c000ee04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee08:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee0a:	c3                   	ret    
c000ee0b:	90                   	nop

c000ee0c <GDT::flush()>:
c000ee0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee10:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee12:	83 c0 04             	add    eax,0x4
c000ee15:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ee1c:	a3 32 d9 02 c0       	mov    ds:0xc002d932,eax
c000ee21:	66 89 15 30 d9 02 c0 	mov    WORD PTR ds:0xc002d930,dx
c000ee28:	e9 23 16 ff ff       	jmp    c0000450 <loadGDT>
c000ee2d:	90                   	nop

c000ee2e <GDT::setup()>:
c000ee2e:	55                   	push   ebp
c000ee2f:	57                   	push   edi
c000ee30:	56                   	push   esi
c000ee31:	53                   	push   ebx
c000ee32:	83 ec 3c             	sub    esp,0x3c
c000ee35:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ee39:	6a 00                	push   0x0
c000ee3b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ee3f:	53                   	push   ebx
c000ee40:	e8 4d ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee45:	6a 00                	push   0x0
c000ee47:	53                   	push   ebx
c000ee48:	e8 61 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee4d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ee55:	6a 00                	push   0x0
c000ee57:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ee5b:	53                   	push   ebx
c000ee5c:	e8 31 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee61:	68 ff ff ff 00       	push   0xffffff
c000ee66:	53                   	push   ebx
c000ee67:	e8 42 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee6c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee70:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ee75:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ee7a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ee7e:	83 c4 20             	add    esp,0x20
c000ee81:	6a 00                	push   0x0
c000ee83:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ee87:	53                   	push   ebx
c000ee88:	e8 05 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee8d:	68 ff ff ff 00       	push   0xffffff
c000ee92:	53                   	push   ebx
c000ee93:	e8 16 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee98:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee9c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eea0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000eea4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000eea8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eeac:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eeb1:	0d 00 92 c0 00       	or     eax,0xc09200
c000eeb6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eeba:	89 d8                	mov    eax,ebx
c000eebc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eec0:	80 cc 60             	or     ah,0x60
c000eec3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eec7:	83 c4 0c             	add    esp,0xc
c000eeca:	89 f8                	mov    eax,edi
c000eecc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed0:	80 cc 60             	or     ah,0x60
c000eed3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed7:	89 c7                	mov    edi,eax
c000eed9:	55                   	push   ebp
c000eeda:	e8 03 ff ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eedf:	83 c4 0c             	add    esp,0xc
c000eee2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eee6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eeea:	55                   	push   ebp
c000eeeb:	e8 f2 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eef0:	83 c4 0c             	add    esp,0xc
c000eef3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eef7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eefb:	55                   	push   ebp
c000eefc:	e8 e1 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef01:	83 c4 0c             	add    esp,0xc
c000ef04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef0c:	53                   	push   ebx
c000ef0d:	51                   	push   ecx
c000ef0e:	55                   	push   ebp
c000ef0f:	e8 ce fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef14:	83 c4 0c             	add    esp,0xc
c000ef17:	57                   	push   edi
c000ef18:	56                   	push   esi
c000ef19:	55                   	push   ebp
c000ef1a:	e8 c3 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef1f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ef22:	e8 e5 fe ff ff       	call   c000ee0c <GDT::flush()>
c000ef27:	83 c4 4c             	add    esp,0x4c
c000ef2a:	5b                   	pop    ebx
c000ef2b:	5e                   	pop    esi
c000ef2c:	5f                   	pop    edi
c000ef2d:	5d                   	pop    ebp
c000ef2e:	c3                   	ret    

c000ef2f <idleFunction(void*)>:
c000ef2f:	53                   	push   ebx
c000ef30:	83 ec 08             	sub    esp,0x8
c000ef33:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c000ef38:	48                   	dec    eax
c000ef39:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c000ef3e:	75 01                	jne    c000ef41 <idleFunction(void*)+0x12>
c000ef40:	fb                   	sti    
c000ef41:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c000ef46:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ef4c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ef53:	74 3c                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef55:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ef5c:	74 33                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef5e:	31 db                	xor    ebx,ebx
c000ef60:	52                   	push   edx
c000ef61:	52                   	push   edx
c000ef62:	68 e1 00 00 00       	push   0xe1
c000ef67:	50                   	push   eax
c000ef68:	e8 d3 fb ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c000ef6d:	53                   	push   ebx
c000ef6e:	83 e0 02             	and    eax,0x2
c000ef71:	50                   	push   eax
c000ef72:	68 e1 00 00 00       	push   0xe1
c000ef77:	ff 35 28 d9 02 c0    	push   DWORD PTR ds:0xc002d928
c000ef7d:	e8 ea fb ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c000ef82:	83 c4 20             	add    esp,0x20
c000ef85:	e8 f5 12 ff ff       	call   c000027f <doTPAUSE>
c000ef8a:	e8 91 94 01 00       	call   c0028420 <idleCommon()>
c000ef8f:	eb f4                	jmp    c000ef85 <idleFunction(void*)+0x56>
c000ef91:	fb                   	sti    
c000ef92:	f4                   	hlt    
c000ef93:	e8 88 94 01 00       	call   c0028420 <idleCommon()>
c000ef98:	eb f7                	jmp    c000ef91 <idleFunction(void*)+0x62>

c000ef9a <IDTEntry::IDTEntry(bool)>:
c000ef9a:	83 ec 04             	sub    esp,0x4
c000ef9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efa1:	88 04 24             	mov    BYTE PTR [esp],al
c000efa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efa8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000efae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efb2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000efb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efbd:	83 e2 f0             	and    edx,0xfffffff0
c000efc0:	83 ca 0e             	or     edx,0xe
c000efc3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efca:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efcd:	83 e2 ef             	and    edx,0xffffffef
c000efd0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efd3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000efd7:	74 04                	je     c000efdd <IDTEntry::IDTEntry(bool)+0x43>
c000efd9:	b2 03                	mov    dl,0x3
c000efdb:	eb 02                	jmp    c000efdf <IDTEntry::IDTEntry(bool)+0x45>
c000efdd:	b2 00                	mov    dl,0x0
c000efdf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efe3:	83 e2 03             	and    edx,0x3
c000efe6:	88 d1                	mov    cl,dl
c000efe8:	c1 e1 05             	shl    ecx,0x5
c000efeb:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efee:	83 e2 9f             	and    edx,0xffffff9f
c000eff1:	09 ca                	or     edx,ecx
c000eff3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000effa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000effd:	83 ca 80             	or     edx,0xffffff80
c000f000:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f003:	90                   	nop
c000f004:	83 c4 04             	add    esp,0x4
c000f007:	c3                   	ret    

c000f008 <IDTEntry::setOffset(unsigned int)>:
c000f008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f00c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f010:	66 89 02             	mov    WORD PTR [edx],ax
c000f013:	c1 e8 10             	shr    eax,0x10
c000f016:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f01a:	c3                   	ret    
c000f01b:	90                   	nop

c000f01c <IDT::IDT()>:
c000f01c:	90                   	nop
c000f01d:	c3                   	ret    

c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f01e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f022:	83 c0 30             	add    eax,0x30
c000f025:	c3                   	ret    

c000f026 <IDT::addEntry(IDTEntry, int)>:
c000f026:	53                   	push   ebx
c000f027:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f02f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f033:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f037:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f03a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f03e:	5b                   	pop    ebx
c000f03f:	c3                   	ret    

c000f040 <IDT::addEntry(int, void (*)(), bool)>:
c000f040:	53                   	push   ebx
c000f041:	83 ec 10             	sub    esp,0x10
c000f044:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f049:	50                   	push   eax
c000f04a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f04e:	53                   	push   ebx
c000f04f:	e8 46 ff ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f054:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f058:	53                   	push   ebx
c000f059:	e8 aa ff ff ff       	call   c000f008 <IDTEntry::setOffset(unsigned int)>
c000f05e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f062:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f066:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f06a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f06e:	e8 b3 ff ff ff       	call   c000f026 <IDT::addEntry(IDTEntry, int)>
c000f073:	83 c4 30             	add    esp,0x30
c000f076:	5b                   	pop    ebx
c000f077:	c3                   	ret    

c000f078 <IDT::flush()>:
c000f078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f07c:	66 c7 05 38 d9 02 c0 ff 07 	mov    WORD PTR ds:0xc002d938,0x7ff
c000f085:	a3 3a d9 02 c0       	mov    ds:0xc002d93a,eax
c000f08a:	0f 01 1d 38 d9 02 c0 	lidtd  ds:0xc002d938
c000f091:	c3                   	ret    

c000f092 <IDT::setup()>:
c000f092:	57                   	push   edi
c000f093:	56                   	push   esi
c000f094:	53                   	push   ebx
c000f095:	83 ec 10             	sub    esp,0x10
c000f098:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f09c:	6a 00                	push   0x0
c000f09e:	68 70 04 00 c0       	push   0xc0000470
c000f0a3:	6a 00                	push   0x0
c000f0a5:	53                   	push   ebx
c000f0a6:	e8 95 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ab:	6a 00                	push   0x0
c000f0ad:	68 80 04 00 c0       	push   0xc0000480
c000f0b2:	6a 01                	push   0x1
c000f0b4:	53                   	push   ebx
c000f0b5:	e8 86 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ba:	83 c4 20             	add    esp,0x20
c000f0bd:	6a 00                	push   0x0
c000f0bf:	68 8a 04 00 c0       	push   0xc000048a
c000f0c4:	6a 02                	push   0x2
c000f0c6:	53                   	push   ebx
c000f0c7:	e8 74 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0cc:	6a 00                	push   0x0
c000f0ce:	68 94 04 00 c0       	push   0xc0000494
c000f0d3:	6a 03                	push   0x3
c000f0d5:	53                   	push   ebx
c000f0d6:	e8 65 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0db:	83 c4 20             	add    esp,0x20
c000f0de:	6a 00                	push   0x0
c000f0e0:	68 9e 04 00 c0       	push   0xc000049e
c000f0e5:	6a 04                	push   0x4
c000f0e7:	53                   	push   ebx
c000f0e8:	e8 53 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ed:	6a 00                	push   0x0
c000f0ef:	68 a8 04 00 c0       	push   0xc00004a8
c000f0f4:	6a 05                	push   0x5
c000f0f6:	53                   	push   ebx
c000f0f7:	e8 44 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0fc:	83 c4 20             	add    esp,0x20
c000f0ff:	6a 00                	push   0x0
c000f101:	68 b2 04 00 c0       	push   0xc00004b2
c000f106:	6a 06                	push   0x6
c000f108:	53                   	push   ebx
c000f109:	e8 32 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f10e:	6a 00                	push   0x0
c000f110:	68 bc 04 00 c0       	push   0xc00004bc
c000f115:	6a 07                	push   0x7
c000f117:	53                   	push   ebx
c000f118:	e8 23 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f11d:	83 c4 20             	add    esp,0x20
c000f120:	6a 00                	push   0x0
c000f122:	68 c6 04 00 c0       	push   0xc00004c6
c000f127:	6a 08                	push   0x8
c000f129:	53                   	push   ebx
c000f12a:	e8 11 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f12f:	6a 00                	push   0x0
c000f131:	68 ce 04 00 c0       	push   0xc00004ce
c000f136:	6a 09                	push   0x9
c000f138:	53                   	push   ebx
c000f139:	e8 02 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f13e:	83 c4 20             	add    esp,0x20
c000f141:	6a 00                	push   0x0
c000f143:	68 d8 04 00 c0       	push   0xc00004d8
c000f148:	6a 0a                	push   0xa
c000f14a:	53                   	push   ebx
c000f14b:	e8 f0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f150:	6a 00                	push   0x0
c000f152:	68 e0 04 00 c0       	push   0xc00004e0
c000f157:	6a 0b                	push   0xb
c000f159:	53                   	push   ebx
c000f15a:	e8 e1 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f15f:	83 c4 20             	add    esp,0x20
c000f162:	6a 00                	push   0x0
c000f164:	68 e8 04 00 c0       	push   0xc00004e8
c000f169:	6a 0c                	push   0xc
c000f16b:	53                   	push   ebx
c000f16c:	e8 cf fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f171:	6a 00                	push   0x0
c000f173:	68 f0 04 00 c0       	push   0xc00004f0
c000f178:	6a 0d                	push   0xd
c000f17a:	53                   	push   ebx
c000f17b:	e8 c0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f180:	83 c4 20             	add    esp,0x20
c000f183:	6a 00                	push   0x0
c000f185:	68 f8 04 00 c0       	push   0xc00004f8
c000f18a:	6a 0e                	push   0xe
c000f18c:	53                   	push   ebx
c000f18d:	e8 ae fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f192:	6a 00                	push   0x0
c000f194:	68 00 05 00 c0       	push   0xc0000500
c000f199:	6a 0f                	push   0xf
c000f19b:	53                   	push   ebx
c000f19c:	e8 9f fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1a1:	83 c4 20             	add    esp,0x20
c000f1a4:	6a 00                	push   0x0
c000f1a6:	68 0a 05 00 c0       	push   0xc000050a
c000f1ab:	6a 10                	push   0x10
c000f1ad:	53                   	push   ebx
c000f1ae:	e8 8d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1b3:	6a 00                	push   0x0
c000f1b5:	68 14 05 00 c0       	push   0xc0000514
c000f1ba:	6a 11                	push   0x11
c000f1bc:	53                   	push   ebx
c000f1bd:	e8 7e fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1c2:	83 c4 20             	add    esp,0x20
c000f1c5:	6a 00                	push   0x0
c000f1c7:	68 1e 05 00 c0       	push   0xc000051e
c000f1cc:	6a 12                	push   0x12
c000f1ce:	53                   	push   ebx
c000f1cf:	e8 6c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1d4:	6a 01                	push   0x1
c000f1d6:	68 b8 05 00 c0       	push   0xc00005b8
c000f1db:	6a 60                	push   0x60
c000f1dd:	53                   	push   ebx
c000f1de:	e8 5d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1e3:	83 c4 20             	add    esp,0x20
c000f1e6:	6a 00                	push   0x0
c000f1e8:	68 bf 05 00 c0       	push   0xc00005bf
c000f1ed:	6a 20                	push   0x20
c000f1ef:	53                   	push   ebx
c000f1f0:	e8 4b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1f5:	6a 00                	push   0x0
c000f1f7:	68 aa 05 00 c0       	push   0xc00005aa
c000f1fc:	6a 21                	push   0x21
c000f1fe:	53                   	push   ebx
c000f1ff:	e8 3c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f204:	83 c4 20             	add    esp,0x20
c000f207:	6a 00                	push   0x0
c000f209:	68 b1 05 00 c0       	push   0xc00005b1
c000f20e:	6a 22                	push   0x22
c000f210:	53                   	push   ebx
c000f211:	e8 2a fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f216:	6a 00                	push   0x0
c000f218:	68 28 05 00 c0       	push   0xc0000528
c000f21d:	6a 23                	push   0x23
c000f21f:	53                   	push   ebx
c000f220:	e8 1b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f225:	83 c4 20             	add    esp,0x20
c000f228:	6a 00                	push   0x0
c000f22a:	68 32 05 00 c0       	push   0xc0000532
c000f22f:	6a 24                	push   0x24
c000f231:	53                   	push   ebx
c000f232:	e8 09 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f237:	6a 00                	push   0x0
c000f239:	68 3c 05 00 c0       	push   0xc000053c
c000f23e:	6a 25                	push   0x25
c000f240:	53                   	push   ebx
c000f241:	e8 fa fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f246:	83 c4 20             	add    esp,0x20
c000f249:	6a 00                	push   0x0
c000f24b:	68 46 05 00 c0       	push   0xc0000546
c000f250:	6a 26                	push   0x26
c000f252:	53                   	push   ebx
c000f253:	e8 e8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f258:	6a 00                	push   0x0
c000f25a:	68 50 05 00 c0       	push   0xc0000550
c000f25f:	6a 27                	push   0x27
c000f261:	53                   	push   ebx
c000f262:	e8 d9 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f267:	83 c4 20             	add    esp,0x20
c000f26a:	6a 00                	push   0x0
c000f26c:	68 5a 05 00 c0       	push   0xc000055a
c000f271:	6a 28                	push   0x28
c000f273:	53                   	push   ebx
c000f274:	e8 c7 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f279:	6a 00                	push   0x0
c000f27b:	68 64 05 00 c0       	push   0xc0000564
c000f280:	6a 29                	push   0x29
c000f282:	53                   	push   ebx
c000f283:	e8 b8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f288:	83 c4 20             	add    esp,0x20
c000f28b:	6a 00                	push   0x0
c000f28d:	68 6e 05 00 c0       	push   0xc000056e
c000f292:	6a 2a                	push   0x2a
c000f294:	53                   	push   ebx
c000f295:	e8 a6 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f29a:	6a 00                	push   0x0
c000f29c:	68 78 05 00 c0       	push   0xc0000578
c000f2a1:	6a 2b                	push   0x2b
c000f2a3:	53                   	push   ebx
c000f2a4:	e8 97 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2a9:	83 c4 20             	add    esp,0x20
c000f2ac:	6a 00                	push   0x0
c000f2ae:	68 82 05 00 c0       	push   0xc0000582
c000f2b3:	6a 2c                	push   0x2c
c000f2b5:	53                   	push   ebx
c000f2b6:	e8 85 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2bb:	6a 00                	push   0x0
c000f2bd:	68 8c 05 00 c0       	push   0xc000058c
c000f2c2:	6a 2d                	push   0x2d
c000f2c4:	53                   	push   ebx
c000f2c5:	e8 76 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2ca:	83 c4 20             	add    esp,0x20
c000f2cd:	6a 00                	push   0x0
c000f2cf:	68 96 05 00 c0       	push   0xc0000596
c000f2d4:	6a 2e                	push   0x2e
c000f2d6:	53                   	push   ebx
c000f2d7:	e8 64 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2dc:	6a 00                	push   0x0
c000f2de:	68 a0 05 00 c0       	push   0xc00005a0
c000f2e3:	6a 2f                	push   0x2f
c000f2e5:	53                   	push   ebx
c000f2e6:	e8 55 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2eb:	83 c4 20             	add    esp,0x20
c000f2ee:	6a 00                	push   0x0
c000f2f0:	68 f6 05 00 c0       	push   0xc00005f6
c000f2f5:	6a 30                	push   0x30
c000f2f7:	53                   	push   ebx
c000f2f8:	e8 43 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2fd:	6a 00                	push   0x0
c000f2ff:	68 00 06 00 c0       	push   0xc0000600
c000f304:	6a 31                	push   0x31
c000f306:	53                   	push   ebx
c000f307:	e8 34 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f30c:	83 c4 20             	add    esp,0x20
c000f30f:	6a 00                	push   0x0
c000f311:	68 0a 06 00 c0       	push   0xc000060a
c000f316:	6a 32                	push   0x32
c000f318:	53                   	push   ebx
c000f319:	e8 22 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f31e:	6a 00                	push   0x0
c000f320:	68 14 06 00 c0       	push   0xc0000614
c000f325:	6a 33                	push   0x33
c000f327:	53                   	push   ebx
c000f328:	e8 13 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f32d:	83 c4 20             	add    esp,0x20
c000f330:	6a 00                	push   0x0
c000f332:	68 1e 06 00 c0       	push   0xc000061e
c000f337:	6a 34                	push   0x34
c000f339:	53                   	push   ebx
c000f33a:	e8 01 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f33f:	6a 00                	push   0x0
c000f341:	68 28 06 00 c0       	push   0xc0000628
c000f346:	6a 35                	push   0x35
c000f348:	53                   	push   ebx
c000f349:	e8 f2 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f34e:	83 c4 20             	add    esp,0x20
c000f351:	6a 00                	push   0x0
c000f353:	68 32 06 00 c0       	push   0xc0000632
c000f358:	6a 36                	push   0x36
c000f35a:	53                   	push   ebx
c000f35b:	e8 e0 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f360:	6a 00                	push   0x0
c000f362:	68 3c 06 00 c0       	push   0xc000063c
c000f367:	6a 37                	push   0x37
c000f369:	53                   	push   ebx
c000f36a:	e8 d1 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f36f:	83 c4 1c             	add    esp,0x1c
c000f372:	6a 03                	push   0x3
c000f374:	6a 02                	push   0x2
c000f376:	ff 35 90 da 02 c0    	push   DWORD PTR ds:0xc002da90
c000f37c:	e8 5f 27 00 00       	call   c0011ae0 <VAS::allocatePages(int, int)>
c000f381:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f388:	89 c6                	mov    esi,eax
c000f38a:	e8 0a 02 00 00       	call   c000f599 <malloc>
c000f38f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f395:	89 04 24             	mov    DWORD PTR [esp],eax
c000f398:	89 c7                	mov    edi,eax
c000f39a:	e8 c9 17 00 00       	call   c0010b68 <TSS::TSS()>
c000f39f:	83 c4 0c             	add    esp,0xc
c000f3a2:	68 c6 04 00 c0       	push   0xc00004c6
c000f3a7:	56                   	push   esi
c000f3a8:	57                   	push   edi
c000f3a9:	e8 fa 17 00 00       	call   c0010ba8 <TSS::setup(unsigned long, unsigned long)>
c000f3ae:	89 c6                	mov    esi,eax
c000f3b0:	58                   	pop    eax
c000f3b1:	5a                   	pop    edx
c000f3b2:	6a 00                	push   0x0
c000f3b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f3b8:	50                   	push   eax
c000f3b9:	e8 dc fb ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f3be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3c2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f3c7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f3ce:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f3d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3d8:	80 ce 05             	or     dh,0x5
c000f3db:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f3de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f3e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3e6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f3e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3ec:	e8 87 fc ff ff       	call   c000f078 <IDT::flush()>
c000f3f1:	83 c4 20             	add    esp,0x20
c000f3f4:	5b                   	pop    ebx
c000f3f5:	5e                   	pop    esi
c000f3f6:	5f                   	pop    edi
c000f3f7:	c3                   	ret    

c000f3f8 <sbrk>:
c000f3f8:	55                   	push   ebp
c000f3f9:	57                   	push   edi
c000f3fa:	56                   	push   esi
c000f3fb:	53                   	push   ebx
c000f3fc:	83 ec 1c             	sub    esp,0x1c
c000f3ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f403:	85 c0                	test   eax,eax
c000f405:	74 3e                	je     c000f445 <sbrk+0x4d>
c000f407:	78 43                	js     c000f44c <sbrk+0x54>
c000f409:	8b 15 28 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d928
c000f40f:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f415:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f41b:	83 e2 01             	and    edx,0x1
c000f41e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f422:	8b 0d fc c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6fc
c000f428:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f42c:	05 ff 0f 00 00       	add    eax,0xfff
c000f431:	89 c2                	mov    edx,eax
c000f433:	78 2f                	js     c000f464 <sbrk+0x6c>
c000f435:	c1 fa 0c             	sar    edx,0xc
c000f438:	89 d7                	mov    edi,edx
c000f43a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f43e:	be 00 00 00 00       	mov    esi,0x0
c000f443:	eb 36                	jmp    c000f47b <sbrk+0x83>
c000f445:	a1 fc c6 02 c0       	mov    eax,ds:0xc002c6fc
c000f44a:	eb 73                	jmp    c000f4bf <sbrk+0xc7>
c000f44c:	83 ec 08             	sub    esp,0x8
c000f44f:	50                   	push   eax
c000f450:	68 80 9f 02 c0       	push   0xc0029f80
c000f455:	e8 73 32 00 00       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c000f45a:	83 c4 10             	add    esp,0x10
c000f45d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f462:	eb 5b                	jmp    c000f4bf <sbrk+0xc7>
c000f464:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f46a:	eb c9                	jmp    c000f435 <sbrk+0x3d>
c000f46c:	81 05 fc c6 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002c6fc,0x1000
c000f476:	46                   	inc    esi
c000f477:	39 f7                	cmp    edi,esi
c000f479:	74 33                	je     c000f4ae <sbrk+0xb6>
c000f47b:	8b 1d 90 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da90
c000f481:	8b 2d fc c6 02 c0    	mov    ebp,DWORD PTR ds:0xc002c6fc
c000f487:	e8 e5 04 00 00       	call   c000f971 <Phys::allocatePage()>
c000f48c:	68 01 0c 00 00       	push   0xc01
c000f491:	55                   	push   ebp
c000f492:	50                   	push   eax
c000f493:	53                   	push   ebx
c000f494:	e8 45 25 00 00       	call   c00119de <VAS::mapPage(unsigned long, unsigned long, int)>
c000f499:	83 c4 10             	add    esp,0x10
c000f49c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4a1:	74 c9                	je     c000f46c <sbrk+0x74>
c000f4a3:	8b 1d fc c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6fc
c000f4a9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4ac:	eb be                	jmp    c000f46c <sbrk+0x74>
c000f4ae:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4b3:	75 12                	jne    c000f4c7 <sbrk+0xcf>
c000f4b5:	0f 20 d8             	mov    eax,cr3
c000f4b8:	0f 22 d8             	mov    cr3,eax
c000f4bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f4bf:	83 c4 1c             	add    esp,0x1c
c000f4c2:	5b                   	pop    ebx
c000f4c3:	5e                   	pop    esi
c000f4c4:	5f                   	pop    edi
c000f4c5:	5d                   	pop    ebp
c000f4c6:	c3                   	ret    
c000f4c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f4cb:	89 cb                	mov    ebx,ecx
c000f4cd:	c1 eb 0a             	shr    ebx,0xa
c000f4d0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f4d6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f4dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4e0:	c1 e0 0c             	shl    eax,0xc
c000f4e3:	01 c8                	add    eax,ecx
c000f4e5:	c1 e8 0a             	shr    eax,0xa
c000f4e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f4ed:	2d 00 00 40 00       	sub    eax,0x400000
c000f4f2:	39 c3                	cmp    ebx,eax
c000f4f4:	77 c5                	ja     c000f4bb <sbrk+0xc3>
c000f4f6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4f9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f4ff:	39 d8                	cmp    eax,ebx
c000f501:	73 f3                	jae    c000f4f6 <sbrk+0xfe>
c000f503:	eb b6                	jmp    c000f4bb <sbrk+0xc3>

c000f505 <mmap>:
c000f505:	83 ec 18             	sub    esp,0x18
c000f508:	68 b0 9f 02 c0       	push   0xc0029fb0
c000f50d:	e8 27 a9 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c000f512:	b8 00 00 00 00       	mov    eax,0x0
c000f517:	83 c4 1c             	add    esp,0x1c
c000f51a:	c3                   	ret    

c000f51b <munmap>:
c000f51b:	83 ec 18             	sub    esp,0x18
c000f51e:	68 b5 9f 02 c0       	push   0xc0029fb5
c000f523:	e8 11 a9 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c000f528:	b8 00 00 00 00       	mov    eax,0x0
c000f52d:	83 c4 1c             	add    esp,0x1c
c000f530:	c3                   	ret    

c000f531 <liballoc_lock()>:
c000f531:	fa                   	cli    
c000f532:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c000f538:	b8 00 00 00 00       	mov    eax,0x0
c000f53d:	c3                   	ret    

c000f53e <liballoc_unlock()>:
c000f53e:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c000f543:	48                   	dec    eax
c000f544:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c000f549:	75 01                	jne    c000f54c <liballoc_unlock()+0xe>
c000f54b:	fb                   	sti    
c000f54c:	b8 00 00 00 00       	mov    eax,0x0
c000f551:	c3                   	ret    

c000f552 <liballoc_alloc(int)>:
c000f552:	83 ec 10             	sub    esp,0x10
c000f555:	6a 01                	push   0x1
c000f557:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f55b:	ff 35 90 da 02 c0    	push   DWORD PTR ds:0xc002da90
c000f561:	e8 7a 25 00 00       	call   c0011ae0 <VAS::allocatePages(int, int)>
c000f566:	83 c4 1c             	add    esp,0x1c
c000f569:	c3                   	ret    

c000f56a <liballoc_free(void*, int)>:
c000f56a:	83 ec 14             	sub    esp,0x14
c000f56d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f571:	ff 35 90 da 02 c0    	push   DWORD PTR ds:0xc002da90
c000f577:	e8 0e 22 00 00       	call   c001178a <VAS::freeAllocatedPages(unsigned long)>
c000f57c:	b8 00 00 00 00       	mov    eax,0x0
c000f581:	83 c4 1c             	add    esp,0x1c
c000f584:	c3                   	ret    

c000f585 <realloc>:
c000f585:	83 ec 14             	sub    esp,0x14
c000f588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f58c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f590:	e8 97 20 ff ff       	call   c000162c <dlrealloc>
c000f595:	83 c4 1c             	add    esp,0x1c
c000f598:	c3                   	ret    

c000f599 <malloc>:
c000f599:	83 ec 18             	sub    esp,0x18
c000f59c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5a0:	e8 4a 1b ff ff       	call   c00010ef <dlmalloc>
c000f5a5:	83 c4 1c             	add    esp,0x1c
c000f5a8:	c3                   	ret    

c000f5a9 <free>:
c000f5a9:	83 ec 18             	sub    esp,0x18
c000f5ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5b0:	e8 df 17 ff ff       	call   c0000d94 <dlfree>
c000f5b5:	83 c4 1c             	add    esp,0x1c
c000f5b8:	c3                   	ret    

c000f5b9 <rfree>:
c000f5b9:	83 ec 18             	sub    esp,0x18
c000f5bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5c0:	e8 cf 17 ff ff       	call   c0000d94 <dlfree>
c000f5c5:	83 c4 1c             	add    esp,0x1c
c000f5c8:	c3                   	ret    

c000f5c9 <calloc>:
c000f5c9:	56                   	push   esi
c000f5ca:	53                   	push   ebx
c000f5cb:	83 ec 10             	sub    esp,0x10
c000f5ce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f5d2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 bc ff ff ff       	call   c000f599 <malloc>
c000f5dd:	89 c6                	mov    esi,eax
c000f5df:	83 c4 0c             	add    esp,0xc
c000f5e2:	53                   	push   ebx
c000f5e3:	6a 00                	push   0x0
c000f5e5:	50                   	push   eax
c000f5e6:	e8 65 11 ff ff       	call   c0000750 <memset>
c000f5eb:	89 f0                	mov    eax,esi
c000f5ed:	83 c4 14             	add    esp,0x14
c000f5f0:	5b                   	pop    ebx
c000f5f1:	5e                   	pop    esi
c000f5f2:	c3                   	ret    

c000f5f3 <Krnl::setBootMessage(char const*)>:
c000f5f3:	57                   	push   edi
c000f5f4:	56                   	push   esi
c000f5f5:	53                   	push   ebx
c000f5f6:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f5fc:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f603:	68 9e 00 00 00       	push   0x9e
c000f608:	6a 00                	push   0x0
c000f60a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f60e:	56                   	push   esi
c000f60f:	e8 3c 11 ff ff       	call   c0000750 <memset>
c000f614:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f617:	e8 50 11 ff ff       	call   c000076c <strlen>
c000f61c:	ba 50 00 00 00       	mov    edx,0x50
c000f621:	83 c4 10             	add    esp,0x10
c000f624:	29 c2                	sub    edx,eax
c000f626:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f62a:	d1 ea                	shr    edx,1
c000f62c:	84 c0                	test   al,al
c000f62e:	74 19                	je     c000f649 <Krnl::setBootMessage(char const*)+0x56>
c000f630:	01 d2                	add    edx,edx
c000f632:	43                   	inc    ebx
c000f633:	01 f2                	add    edx,esi
c000f635:	80 cc 0f             	or     ah,0xf
c000f638:	83 c2 02             	add    edx,0x2
c000f63b:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f63f:	43                   	inc    ebx
c000f640:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000f645:	84 c0                	test   al,al
c000f647:	75 ec                	jne    c000f635 <Krnl::setBootMessage(char const*)+0x42>
c000f649:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000f64e:	b9 9e 00 00 00       	mov    ecx,0x9e
c000f653:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f655:	81 c4 a0 00 00 00    	add    esp,0xa0
c000f65b:	5b                   	pop    ebx
c000f65c:	5e                   	pop    esi
c000f65d:	5f                   	pop    edi
c000f65e:	c3                   	ret    

c000f65f <kernel_main>:
c000f65f:	57                   	push   edi
c000f660:	bf f9 03 00 00       	mov    edi,0x3f9
c000f665:	56                   	push   esi
c000f666:	89 fa                	mov    edx,edi
c000f668:	53                   	push   ebx
c000f669:	31 f6                	xor    esi,esi
c000f66b:	83 ec 2c             	sub    esp,0x2c
c000f66e:	89 f0                	mov    eax,esi
c000f670:	ee                   	out    dx,al
c000f671:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f676:	b0 80                	mov    al,0x80
c000f678:	89 da                	mov    edx,ebx
c000f67a:	ee                   	out    dx,al
c000f67b:	b1 03                	mov    cl,0x3
c000f67d:	ba f8 03 00 00       	mov    edx,0x3f8
c000f682:	88 c8                	mov    al,cl
c000f684:	ee                   	out    dx,al
c000f685:	89 f0                	mov    eax,esi
c000f687:	89 fa                	mov    edx,edi
c000f689:	ee                   	out    dx,al
c000f68a:	88 c8                	mov    al,cl
c000f68c:	89 da                	mov    edx,ebx
c000f68e:	ee                   	out    dx,al
c000f68f:	b0 c7                	mov    al,0xc7
c000f691:	ba fa 03 00 00       	mov    edx,0x3fa
c000f696:	ee                   	out    dx,al
c000f697:	b0 0b                	mov    al,0xb
c000f699:	ba fc 03 00 00       	mov    edx,0x3fc
c000f69e:	ee                   	out    dx,al
c000f69f:	68 bc 9f 02 c0       	push   0xc0029fbc
c000f6a4:	e8 24 30 00 00       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c000f6a9:	e8 bc 09 00 00       	call   c001006a <installVgaTextImplementation()>
c000f6ae:	0f b6 05 00 c7 02 c0 	movzx  eax,BYTE PTR ds:0xc002c700
c000f6b5:	83 c4 10             	add    esp,0x10
c000f6b8:	84 c0                	test   al,al
c000f6ba:	74 6c                	je     c000f728 <kernel_main+0xc9>
c000f6bc:	31 db                	xor    ebx,ebx
c000f6be:	bf 0a 00 00 00       	mov    edi,0xa
c000f6c3:	be 05 00 00 00       	mov    esi,0x5
c000f6c8:	31 c9                	xor    ecx,ecx
c000f6ca:	eb 2a                	jmp    c000f6f6 <kernel_main+0x97>
c000f6cc:	3c 0d                	cmp    al,0xd
c000f6ce:	74 1a                	je     c000f6ea <kernel_main+0x8b>
c000f6d0:	3c 0a                	cmp    al,0xa
c000f6d2:	74 40                	je     c000f714 <kernel_main+0xb5>
c000f6d4:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f6d7:	80 cc 0e             	or     ah,0xe
c000f6da:	c1 e2 04             	shl    edx,0x4
c000f6dd:	01 ca                	add    edx,ecx
c000f6df:	41                   	inc    ecx
c000f6e0:	01 fa                	add    edx,edi
c000f6e2:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f6ea:	43                   	inc    ebx
c000f6eb:	0f b6 83 00 c7 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3900]
c000f6f2:	84 c0                	test   al,al
c000f6f4:	74 32                	je     c000f728 <kernel_main+0xc9>
c000f6f6:	80 b9 36 c7 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd38ca],0xdb
c000f6fd:	75 cd                	jne    c000f6cc <kernel_main+0x6d>
c000f6ff:	0f b6 91 35 c7 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd38cb]
c000f706:	83 e2 fe             	and    edx,0xfffffffe
c000f709:	81 fa ba 00 00 00    	cmp    edx,0xba
c000f70f:	75 bb                	jne    c000f6cc <kernel_main+0x6d>
c000f711:	47                   	inc    edi
c000f712:	eb b8                	jmp    c000f6cc <kernel_main+0x6d>
c000f714:	43                   	inc    ebx
c000f715:	46                   	inc    esi
c000f716:	31 c9                	xor    ecx,ecx
c000f718:	0f b6 83 00 c7 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3900]
c000f71f:	bf 0a 00 00 00       	mov    edi,0xa
c000f724:	84 c0                	test   al,al
c000f726:	75 ce                	jne    c000f6f6 <kernel_main+0x97>
c000f728:	83 ec 0c             	sub    esp,0xc
c000f72b:	68 d4 9f 02 c0       	push   0xc0029fd4
c000f730:	e8 be fe ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000f735:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f73a:	a3 40 d9 02 c0       	mov    ds:0xc002d940,eax
c000f73f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f744:	05 ff 0f 00 00       	add    eax,0xfff
c000f749:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f74e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f751:	e8 a7 03 00 00       	call   c000fafd <Phys::physicalMemorySetup(unsigned int)>
c000f756:	e8 85 1c 00 00       	call   c00113e0 <Virt::virtualMemorySetup()>
c000f75b:	58                   	pop    eax
c000f75c:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f760:	53                   	push   ebx
c000f761:	e8 4c 1e 00 00       	call   c00115b2 <VAS::VAS()>
c000f766:	89 1d 90 da 02 c0    	mov    DWORD PTR ds:0xc002da90,ebx
c000f76c:	e8 af 08 ff ff       	call   c0000020 <callGlobalConstructors>
c000f771:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f778:	e8 1c fe ff ff       	call   c000f599 <malloc>
c000f77d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f780:	89 c6                	mov    esi,eax
c000f782:	e8 4f f0 ff ff       	call   c000e7d6 <Computer::Computer()>
c000f787:	6a 00                	push   0x0
c000f789:	89 35 28 d9 02 c0    	mov    DWORD PTR ds:0xc002d928,esi
c000f78f:	6a 00                	push   0x0
c000f791:	6a 00                	push   0x0
c000f793:	56                   	push   esi
c000f794:	e8 49 f4 ff ff       	call   c000ebe2 <Computer::open(int, int, void*)>
c000f799:	83 c4 14             	add    esp,0x14
c000f79c:	53                   	push   ebx
c000f79d:	e8 c0 20 00 00       	call   c0011862 <VAS::~VAS()>
c000f7a2:	83 c4 30             	add    esp,0x30
c000f7a5:	5b                   	pop    ebx
c000f7a6:	5e                   	pop    esi
c000f7a7:	5f                   	pop    edi
c000f7a8:	c3                   	ret    

c000f7a9 <Phys::allocateDMA(unsigned long)>:
c000f7a9:	55                   	push   ebp
c000f7aa:	31 d2                	xor    edx,edx
c000f7ac:	57                   	push   edi
c000f7ad:	31 ed                	xor    ebp,ebp
c000f7af:	56                   	push   esi
c000f7b0:	31 c9                	xor    ecx,ecx
c000f7b2:	53                   	push   ebx
c000f7b3:	31 db                	xor    ebx,ebx
c000f7b5:	83 ec 0c             	sub    esp,0xc
c000f7b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7bc:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f7c2:	c1 ee 0c             	shr    esi,0xc
c000f7c5:	eb 17                	jmp    c000f7de <Phys::allocateDMA(unsigned long)+0x35>
c000f7c7:	85 c9                	test   ecx,ecx
c000f7c9:	75 04                	jne    c000f7cf <Phys::allocateDMA(unsigned long)+0x26>
c000f7cb:	89 d5                	mov    ebp,edx
c000f7cd:	89 d3                	mov    ebx,edx
c000f7cf:	8d 41 01             	lea    eax,[ecx+0x1]
c000f7d2:	39 c6                	cmp    esi,eax
c000f7d4:	74 23                	je     c000f7f9 <Phys::allocateDMA(unsigned long)+0x50>
c000f7d6:	42                   	inc    edx
c000f7d7:	89 c1                	mov    ecx,eax
c000f7d9:	83 fa 2f             	cmp    edx,0x2f
c000f7dc:	7f 11                	jg     c000f7ef <Phys::allocateDMA(unsigned long)+0x46>
c000f7de:	80 ba 80 d9 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd2680],0x0
c000f7e5:	74 e0                	je     c000f7c7 <Phys::allocateDMA(unsigned long)+0x1e>
c000f7e7:	31 c9                	xor    ecx,ecx
c000f7e9:	42                   	inc    edx
c000f7ea:	83 fa 2f             	cmp    edx,0x2f
c000f7ed:	7e ef                	jle    c000f7de <Phys::allocateDMA(unsigned long)+0x35>
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	31 c0                	xor    eax,eax
c000f7f4:	5b                   	pop    ebx
c000f7f5:	5e                   	pop    esi
c000f7f6:	5f                   	pop    edi
c000f7f7:	5d                   	pop    ebp
c000f7f8:	c3                   	ret    
c000f7f9:	8d 14 33             	lea    edx,[ebx+esi*1]
c000f7fc:	89 d7                	mov    edi,edx
c000f7fe:	4f                   	dec    edi
c000f7ff:	79 03                	jns    c000f804 <Phys::allocateDMA(unsigned long)+0x5b>
c000f801:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f804:	c1 ff 04             	sar    edi,0x4
c000f807:	89 da                	mov    edx,ebx
c000f809:	c1 fa 04             	sar    edx,0x4
c000f80c:	39 fa                	cmp    edx,edi
c000f80e:	75 43                	jne    c000f853 <Phys::allocateDMA(unsigned long)+0xaa>
c000f810:	85 c0                	test   eax,eax
c000f812:	74 1a                	je     c000f82e <Phys::allocateDMA(unsigned long)+0x85>
c000f814:	be 80 d9 02 c0       	mov    esi,0xc002d980
c000f819:	8d 93 80 d9 02 c0    	lea    edx,[ebx-0x3ffd2680]
c000f81f:	f7 d6                	not    esi
c000f821:	29 de                	sub    esi,ebx
c000f823:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f826:	42                   	inc    edx
c000f827:	8d 04 16             	lea    eax,[esi+edx*1]
c000f82a:	39 c1                	cmp    ecx,eax
c000f82c:	7f f5                	jg     c000f823 <Phys::allocateDMA(unsigned long)+0x7a>
c000f82e:	83 ec 0c             	sub    esp,0xc
c000f831:	68 f3 9f 02 c0       	push   0xc0029ff3
c000f836:	e8 92 2e 00 00       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c000f83b:	83 c4 10             	add    esp,0x10
c000f83e:	85 ff                	test   edi,edi
c000f840:	74 17                	je     c000f859 <Phys::allocateDMA(unsigned long)+0xb0>
c000f842:	83 c4 0c             	add    esp,0xc
c000f845:	8d 83 50 20 0c 00    	lea    eax,[ebx+0xc2050]
c000f84b:	5b                   	pop    ebx
c000f84c:	c1 e0 0c             	shl    eax,0xc
c000f84f:	5e                   	pop    esi
c000f850:	5f                   	pop    edi
c000f851:	5d                   	pop    ebp
c000f852:	c3                   	ret    
c000f853:	89 ea                	mov    edx,ebp
c000f855:	31 c9                	xor    ecx,ecx
c000f857:	eb 90                	jmp    c000f7e9 <Phys::allocateDMA(unsigned long)+0x40>
c000f859:	83 c4 0c             	add    esp,0xc
c000f85c:	c1 e3 0c             	shl    ebx,0xc
c000f85f:	8d 83 00 00 01 c2    	lea    eax,[ebx-0x3dff0000]
c000f865:	5b                   	pop    ebx
c000f866:	5e                   	pop    esi
c000f867:	5f                   	pop    edi
c000f868:	5d                   	pop    ebp
c000f869:	c3                   	ret    

c000f86a <Phys::freeDMA(unsigned long, unsigned long)>:
c000f86a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f86e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f872:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f878:	c1 e9 0c             	shr    ecx,0xc
c000f87b:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f880:	76 25                	jbe    c000f8a7 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f882:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f887:	c1 e8 0c             	shr    eax,0xc
c000f88a:	8d 50 10             	lea    edx,[eax+0x10]
c000f88d:	85 c9                	test   ecx,ecx
c000f88f:	74 15                	je     c000f8a6 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f891:	8d 82 80 d9 02 c0    	lea    eax,[edx-0x3ffd2680]
c000f897:	8d 94 11 80 d9 02 c0 	lea    edx,[ecx+edx*1-0x3ffd2680]
c000f89e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f8a1:	40                   	inc    eax
c000f8a2:	39 d0                	cmp    eax,edx
c000f8a4:	75 f8                	jne    c000f89e <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f8a6:	c3                   	ret    
c000f8a7:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f8ad:	c1 ea 0c             	shr    edx,0xc
c000f8b0:	eb db                	jmp    c000f88d <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f8b2 <Phys::setPageState(unsigned long, bool)>:
c000f8b2:	56                   	push   esi
c000f8b3:	ba 01 00 00 00       	mov    edx,0x1
c000f8b8:	53                   	push   ebx
c000f8b9:	8b 35 44 c8 02 c0    	mov    esi,DWORD PTR ds:0xc002c844
c000f8bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f8c7:	89 c8                	mov    eax,ecx
c000f8c9:	83 e1 07             	and    ecx,0x7
c000f8cc:	c1 e8 03             	shr    eax,0x3
c000f8cf:	d3 e3                	shl    ebx,cl
c000f8d1:	01 c6                	add    esi,eax
c000f8d3:	d3 e2                	shl    edx,cl
c000f8d5:	f7 d2                	not    edx
c000f8d7:	20 16                	and    BYTE PTR [esi],dl
c000f8d9:	03 05 44 c8 02 c0    	add    eax,DWORD PTR ds:0xc002c844
c000f8df:	08 18                	or     BYTE PTR [eax],bl
c000f8e1:	5b                   	pop    ebx
c000f8e2:	5e                   	pop    esi
c000f8e3:	c3                   	ret    

c000f8e4 <Phys::getPageState(unsigned long)>:
c000f8e4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f8e8:	8b 15 44 c8 02 c0    	mov    edx,DWORD PTR ds:0xc002c844
c000f8ee:	89 c8                	mov    eax,ecx
c000f8f0:	83 e1 07             	and    ecx,0x7
c000f8f3:	c1 e8 03             	shr    eax,0x3
c000f8f6:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f8fa:	d3 f8                	sar    eax,cl
c000f8fc:	83 e0 01             	and    eax,0x1
c000f8ff:	c3                   	ret    

c000f900 <Phys::freePage(unsigned long)>:
c000f900:	53                   	push   ebx
c000f901:	83 ec 10             	sub    esp,0x10
c000f904:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f908:	53                   	push   ebx
c000f909:	68 0a a0 02 c0       	push   0xc002a00a
c000f90e:	e8 ba 2d 00 00       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c000f913:	83 c4 10             	add    esp,0x10
c000f916:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f91c:	76 3d                	jbe    c000f95b <Phys::freePage(unsigned long)+0x5b>
c000f91e:	83 ec 0c             	sub    esp,0xc
c000f921:	c1 eb 0c             	shr    ebx,0xc
c000f924:	53                   	push   ebx
c000f925:	e8 ba ff ff ff       	call   c000f8e4 <Phys::getPageState(unsigned long)>
c000f92a:	83 c4 10             	add    esp,0x10
c000f92d:	84 c0                	test   al,al
c000f92f:	74 19                	je     c000f94a <Phys::freePage(unsigned long)+0x4a>
c000f931:	83 ec 08             	sub    esp,0x8
c000f934:	ff 0d 70 d9 02 c0    	dec    DWORD PTR ds:0xc002d970
c000f93a:	6a 00                	push   0x0
c000f93c:	53                   	push   ebx
c000f93d:	e8 70 ff ff ff       	call   c000f8b2 <Phys::setPageState(unsigned long, bool)>
c000f942:	83 c4 10             	add    esp,0x10
c000f945:	83 c4 08             	add    esp,0x8
c000f948:	5b                   	pop    ebx
c000f949:	c3                   	ret    
c000f94a:	c7 44 24 10 1d a0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a01d
c000f952:	83 c4 08             	add    esp,0x8
c000f955:	5b                   	pop    ebx
c000f956:	e9 de a4 00 00       	jmp    c0019e39 <Krnl::panic(char const*)>
c000f95b:	83 ec 08             	sub    esp,0x8
c000f95e:	68 00 10 00 00       	push   0x1000
c000f963:	53                   	push   ebx
c000f964:	e8 01 ff ff ff       	call   c000f86a <Phys::freeDMA(unsigned long, unsigned long)>
c000f969:	83 c4 10             	add    esp,0x10
c000f96c:	83 c4 08             	add    esp,0x8
c000f96f:	5b                   	pop    ebx
c000f970:	c3                   	ret    

c000f971 <Phys::allocatePage()>:
c000f971:	56                   	push   esi
c000f972:	53                   	push   ebx
c000f973:	83 ec 14             	sub    esp,0x14
c000f976:	8b 35 64 d9 02 c0    	mov    esi,DWORD PTR ds:0xc002d964
c000f97c:	89 f3                	mov    ebx,esi
c000f97e:	eb 0a                	jmp    c000f98a <Phys::allocatePage()+0x19>
c000f980:	89 1d 64 d9 02 c0    	mov    DWORD PTR ds:0xc002d964,ebx
c000f986:	39 de                	cmp    esi,ebx
c000f988:	74 24                	je     c000f9ae <Phys::allocatePage()+0x3d>
c000f98a:	53                   	push   ebx
c000f98b:	e8 54 ff ff ff       	call   c000f8e4 <Phys::getPageState(unsigned long)>
c000f990:	5a                   	pop    edx
c000f991:	84 c0                	test   al,al
c000f993:	74 76                	je     c000fa0b <Phys::allocatePage()+0x9a>
c000f995:	43                   	inc    ebx
c000f996:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f99c:	75 e2                	jne    c000f980 <Phys::allocatePage()+0xf>
c000f99e:	31 db                	xor    ebx,ebx
c000f9a0:	c7 05 64 d9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d964,0x0
c000f9aa:	39 de                	cmp    esi,ebx
c000f9ac:	75 dc                	jne    c000f98a <Phys::allocatePage()+0x19>
c000f9ae:	83 ec 0c             	sub    esp,0xc
c000f9b1:	68 51 a0 02 c0       	push   0xc002a051
c000f9b6:	e8 12 2d 00 00       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c000f9bb:	58                   	pop    eax
c000f9bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f9c1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f9c4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000f9ca:	e8 c3 29 00 00       	call   c0012392 <VAS::scanForEviction()>
c000f9cf:	83 c4 10             	add    esp,0x10
c000f9d2:	85 c0                	test   eax,eax
c000f9d4:	75 76                	jne    c000fa4c <Phys::allocatePage()+0xdb>
c000f9d6:	83 ec 0c             	sub    esp,0xc
c000f9d9:	68 00 10 00 00       	push   0x1000
c000f9de:	e8 c6 fd ff ff       	call   c000f7a9 <Phys::allocateDMA(unsigned long)>
c000f9e3:	83 c4 10             	add    esp,0x10
c000f9e6:	85 c0                	test   eax,eax
c000f9e8:	75 5c                	jne    c000fa46 <Phys::allocatePage()+0xd5>
c000f9ea:	83 ec 0c             	sub    esp,0xc
c000f9ed:	68 69 a0 02 c0       	push   0xc002a069
c000f9f2:	e8 42 a4 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c000f9f7:	83 c4 10             	add    esp,0x10
c000f9fa:	8b 1d 64 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d964
c000fa00:	53                   	push   ebx
c000fa01:	e8 de fe ff ff       	call   c000f8e4 <Phys::getPageState(unsigned long)>
c000fa06:	5a                   	pop    edx
c000fa07:	84 c0                	test   al,al
c000fa09:	75 8a                	jne    c000f995 <Phys::allocatePage()+0x24>
c000fa0b:	6a 01                	push   0x1
c000fa0d:	53                   	push   ebx
c000fa0e:	e8 9f fe ff ff       	call   c000f8b2 <Phys::setPageState(unsigned long, bool)>
c000fa13:	5a                   	pop    edx
c000fa14:	a1 70 d9 02 c0       	mov    eax,ds:0xc002d970
c000fa19:	59                   	pop    ecx
c000fa1a:	40                   	inc    eax
c000fa1b:	8b 15 64 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d964
c000fa21:	a3 70 d9 02 c0       	mov    ds:0xc002d970,eax
c000fa26:	c1 e2 0c             	shl    edx,0xc
c000fa29:	52                   	push   edx
c000fa2a:	ff 35 74 d9 02 c0    	push   DWORD PTR ds:0xc002d974
c000fa30:	50                   	push   eax
c000fa31:	68 33 a0 02 c0       	push   0xc002a033
c000fa36:	e8 92 2c 00 00       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c000fa3b:	a1 64 d9 02 c0       	mov    eax,ds:0xc002d964
c000fa40:	83 c4 10             	add    esp,0x10
c000fa43:	c1 e0 0c             	shl    eax,0xc
c000fa46:	83 c4 14             	add    esp,0x14
c000fa49:	5b                   	pop    ebx
c000fa4a:	5e                   	pop    esi
c000fa4b:	c3                   	ret    
c000fa4c:	83 ec 08             	sub    esp,0x8
c000fa4f:	89 c2                	mov    edx,eax
c000fa51:	6a 01                	push   0x1
c000fa53:	c1 ea 0c             	shr    edx,0xc
c000fa56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fa5a:	52                   	push   edx
c000fa5b:	e8 52 fe ff ff       	call   c000f8b2 <Phys::setPageState(unsigned long, bool)>
c000fa60:	83 c4 10             	add    esp,0x10
c000fa63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa67:	eb dd                	jmp    c000fa46 <Phys::allocatePage()+0xd5>

c000fa69 <Phys::allocateContiguousPages(int)>:
c000fa69:	57                   	push   edi
c000fa6a:	56                   	push   esi
c000fa6b:	53                   	push   ebx
c000fa6c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fa70:	fa                   	cli    
c000fa71:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c000fa77:	31 db                	xor    ebx,ebx
c000fa79:	85 db                	test   ebx,ebx
c000fa7b:	75 11                	jne    c000fa8e <Phys::allocateContiguousPages(int)+0x25>
c000fa7d:	e8 ef fe ff ff       	call   c000f971 <Phys::allocatePage()>
c000fa82:	83 fe 01             	cmp    esi,0x1
c000fa85:	89 c7                	mov    edi,eax
c000fa87:	74 21                	je     c000faaa <Phys::allocateContiguousPages(int)+0x41>
c000fa89:	bb 01 00 00 00       	mov    ebx,0x1
c000fa8e:	e8 de fe ff ff       	call   c000f971 <Phys::allocatePage()>
c000fa93:	89 da                	mov    edx,ebx
c000fa95:	c1 e2 0c             	shl    edx,0xc
c000fa98:	01 fa                	add    edx,edi
c000fa9a:	39 c2                	cmp    edx,eax
c000fa9c:	74 20                	je     c000fabe <Phys::allocateContiguousPages(int)+0x55>
c000fa9e:	bb 01 00 00 00       	mov    ebx,0x1
c000faa3:	89 c7                	mov    edi,eax
c000faa5:	83 fe 01             	cmp    esi,0x1
c000faa8:	75 e4                	jne    c000fa8e <Phys::allocateContiguousPages(int)+0x25>
c000faaa:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c000faaf:	48                   	dec    eax
c000fab0:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c000fab5:	75 01                	jne    c000fab8 <Phys::allocateContiguousPages(int)+0x4f>
c000fab7:	fb                   	sti    
c000fab8:	89 f8                	mov    eax,edi
c000faba:	5b                   	pop    ebx
c000fabb:	5e                   	pop    esi
c000fabc:	5f                   	pop    edi
c000fabd:	c3                   	ret    
c000fabe:	43                   	inc    ebx
c000fabf:	39 f3                	cmp    ebx,esi
c000fac1:	75 b6                	jne    c000fa79 <Phys::allocateContiguousPages(int)+0x10>
c000fac3:	eb e5                	jmp    c000faaa <Phys::allocateContiguousPages(int)+0x41>

c000fac5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fac5:	56                   	push   esi
c000fac6:	53                   	push   ebx
c000fac7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000facb:	39 1d 68 d9 02 c0    	cmp    DWORD PTR ds:0xc002d968,ebx
c000fad1:	73 06                	jae    c000fad9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fad3:	89 1d 68 d9 02 c0    	mov    DWORD PTR ds:0xc002d968,ebx
c000fad9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fadd:	c1 eb 0c             	shr    ebx,0xc
c000fae0:	c1 e8 0c             	shr    eax,0xc
c000fae3:	39 d8                	cmp    eax,ebx
c000fae5:	73 13                	jae    c000fafa <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fae7:	6a 00                	push   0x0
c000fae9:	8d 70 01             	lea    esi,[eax+0x1]
c000faec:	50                   	push   eax
c000faed:	e8 c0 fd ff ff       	call   c000f8b2 <Phys::setPageState(unsigned long, bool)>
c000faf2:	5a                   	pop    edx
c000faf3:	89 f0                	mov    eax,esi
c000faf5:	59                   	pop    ecx
c000faf6:	39 f3                	cmp    ebx,esi
c000faf8:	75 ed                	jne    c000fae7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fafa:	5b                   	pop    ebx
c000fafb:	5e                   	pop    esi
c000fafc:	c3                   	ret    

c000fafd <Phys::physicalMemorySetup(unsigned int)>:
c000fafd:	55                   	push   ebp
c000fafe:	57                   	push   edi
c000faff:	56                   	push   esi
c000fb00:	53                   	push   ebx
c000fb01:	31 db                	xor    ebx,ebx
c000fb03:	83 ec 40             	sub    esp,0x40
c000fb06:	6a 30                	push   0x30
c000fb08:	6a 00                	push   0x0
c000fb0a:	68 80 d9 02 c0       	push   0xc002d980
c000fb0f:	e8 3c 0c ff ff       	call   c0000750 <memset>
c000fb14:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fb18:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fb1d:	05 00 10 00 00       	add    eax,0x1000
c000fb22:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fb26:	5a                   	pop    edx
c000fb27:	59                   	pop    ecx
c000fb28:	50                   	push   eax
c000fb29:	68 77 a0 02 c0       	push   0xc002a077
c000fb2e:	e8 9a 2b 00 00       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c000fb33:	83 c4 10             	add    esp,0x10
c000fb36:	83 ec 08             	sub    esp,0x8
c000fb39:	6a 01                	push   0x1
c000fb3b:	53                   	push   ebx
c000fb3c:	43                   	inc    ebx
c000fb3d:	e8 70 fd ff ff       	call   c000f8b2 <Phys::setPageState(unsigned long, bool)>
c000fb42:	83 c4 10             	add    esp,0x10
c000fb45:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fb4b:	75 e9                	jne    c000fb36 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000fb4d:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fb54:	66 85 c0             	test   ax,ax
c000fb57:	0f 84 b5 01 00 00    	je     c000fd12 <Phys::physicalMemorySetup(unsigned int)+0x215>
c000fb5d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fb61:	8b 15 04 06 00 c2    	mov    edx,DWORD PTR ds:0xc2000604
c000fb67:	a1 00 06 00 c2       	mov    eax,ds:0xc2000600
c000fb6c:	8b 0d 08 06 00 c2    	mov    ecx,DWORD PTR ds:0xc2000608
c000fb72:	8b 1d 0c 06 00 c2    	mov    ebx,DWORD PTR ds:0xc200060c
c000fb78:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000fb7c:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c000fb80:	01 c1                	add    ecx,eax
c000fb82:	11 d3                	adc    ebx,edx
c000fb84:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000fb88:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000fb8c:	31 ff                	xor    edi,edi
c000fb8e:	89 d3                	mov    ebx,edx
c000fb90:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000fb94:	8b 35 10 06 00 c2    	mov    esi,DWORD PTR ds:0xc2000610
c000fb9a:	09 cb                	or     ebx,ecx
c000fb9c:	0f 85 80 01 00 00    	jne    c000fd22 <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fba2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000fba6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fbae:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fbb3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000fbb7:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fbbf:	eb 49                	jmp    c000fc0a <Phys::physicalMemorySetup(unsigned int)+0x10d>
c000fbc1:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000fbc5:	83 c3 18             	add    ebx,0x18
c000fbc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fbcc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fbd0:	39 d0                	cmp    eax,edx
c000fbd2:	0f 84 4a 01 00 00    	je     c000fd22 <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fbd8:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000fbdb:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c000fbde:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000fbe1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fbe3:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fbe7:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000fbeb:	01 c6                	add    esi,eax
c000fbed:	89 d5                	mov    ebp,edx
c000fbef:	11 d7                	adc    edi,edx
c000fbf1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000fbf5:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c000fbf9:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fbfc:	31 ff                	xor    edi,edi
c000fbfe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000fc02:	09 cd                	or     ebp,ecx
c000fc04:	0f 85 18 01 00 00    	jne    c000fd22 <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fc0a:	89 f1                	mov    ecx,esi
c000fc0c:	83 f1 01             	xor    ecx,0x1
c000fc0f:	09 f9                	or     ecx,edi
c000fc11:	75 ae                	jne    c000fbc1 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc13:	be 00 00 08 00       	mov    esi,0x80000
c000fc18:	89 cf                	mov    edi,ecx
c000fc1a:	39 c6                	cmp    esi,eax
c000fc1c:	19 d7                	sbb    edi,edx
c000fc1e:	0f 82 98 00 00 00    	jb     c000fcbc <Phys::physicalMemorySetup(unsigned int)+0x1bf>
c000fc24:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000fc28:	89 cd                	mov    ebp,ecx
c000fc2a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fc2e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fc32:	19 fd                	sbb    ebp,edi
c000fc34:	0f 83 82 00 00 00    	jae    c000fcbc <Phys::physicalMemorySetup(unsigned int)+0x1bf>
c000fc3a:	b8 00 00 0a 00       	mov    eax,0xa0000
c000fc3f:	39 f0                	cmp    eax,esi
c000fc41:	19 f9                	sbb    ecx,edi
c000fc43:	0f 82 03 01 00 00    	jb     c000fd4c <Phys::physicalMemorySetup(unsigned int)+0x24f>
c000fc49:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fc4e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fc52:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fc56:	81 c6 00 00 f8 ff    	add    esi,0xfff80000
c000fc5c:	83 d7 ff             	adc    edi,0xffffffff
c000fc5f:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fc63:	31 c0                	xor    eax,eax
c000fc65:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000fc69:	39 f2                	cmp    edx,esi
c000fc6b:	89 c2                	mov    edx,eax
c000fc6d:	19 fa                	sbb    edx,edi
c000fc6f:	0f 83 4c ff ff ff    	jae    c000fbc1 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc75:	b8 00 00 08 00       	mov    eax,0x80000
c000fc7a:	83 ec 08             	sub    esp,0x8
c000fc7d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc81:	50                   	push   eax
c000fc82:	e8 3e fe ff ff       	call   c000fac5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fc87:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fc8b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc8f:	83 c4 0c             	add    esp,0xc
c000fc92:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fc96:	03 05 74 d9 02 c0    	add    eax,DWORD PTR ds:0xc002d974
c000fc9c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fca3:	a3 74 d9 02 c0       	mov    ds:0xc002d974,eax
c000fca8:	52                   	push   edx
c000fca9:	50                   	push   eax
c000fcaa:	68 9d a0 02 c0       	push   0xc002a09d
c000fcaf:	e8 19 2a 00 00       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c000fcb4:	83 c4 10             	add    esp,0x10
c000fcb7:	e9 05 ff ff ff       	jmp    c000fbc1 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fcbc:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fcc0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fcc4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fcc8:	39 ee                	cmp    esi,ebp
c000fcca:	1b 7c 24 2c          	sbb    edi,DWORD PTR [esp+0x2c]
c000fcce:	0f 82 ed fe ff ff    	jb     c000fbc1 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fcd4:	be ff 1f 00 00       	mov    esi,0x1fff
c000fcd9:	3b 74 24 18          	cmp    esi,DWORD PTR [esp+0x18]
c000fcdd:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000fce1:	0f 83 da fe ff ff    	jae    c000fbc1 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fce7:	39 e8                	cmp    eax,ebp
c000fce9:	89 d1                	mov    ecx,edx
c000fceb:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fcef:	73 89                	jae    c000fc7a <Phys::physicalMemorySetup(unsigned int)+0x17d>
c000fcf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcf5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000fcf9:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fcfd:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fd01:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd05:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd09:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd0d:	e9 68 ff ff ff       	jmp    c000fc7a <Phys::physicalMemorySetup(unsigned int)+0x17d>
c000fd12:	83 ec 0c             	sub    esp,0xc
c000fd15:	68 8f a0 02 c0       	push   0xc002a08f
c000fd1a:	e8 1a a1 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c000fd1f:	83 c4 10             	add    esp,0x10
c000fd22:	bb 40 01 00 00       	mov    ebx,0x140
c000fd27:	83 ec 08             	sub    esp,0x8
c000fd2a:	6a 00                	push   0x0
c000fd2c:	53                   	push   ebx
c000fd2d:	43                   	inc    ebx
c000fd2e:	e8 7f fb ff ff       	call   c000f8b2 <Phys::setPageState(unsigned long, bool)>
c000fd33:	ff 05 74 d9 02 c0    	inc    DWORD PTR ds:0xc002d974
c000fd39:	83 c4 10             	add    esp,0x10
c000fd3c:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fd42:	75 e3                	jne    c000fd27 <Phys::physicalMemorySetup(unsigned int)+0x22a>
c000fd44:	83 c4 3c             	add    esp,0x3c
c000fd47:	5b                   	pop    ebx
c000fd48:	5e                   	pop    esi
c000fd49:	5f                   	pop    edi
c000fd4a:	5d                   	pop    ebp
c000fd4b:	c3                   	ret    
c000fd4c:	c7 44 24 10 00 00 0a 00 	mov    DWORD PTR [esp+0x10],0xa0000
c000fd54:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fd5c:	e9 e8 fe ff ff       	jmp    c000fc49 <Phys::physicalMemorySetup(unsigned int)+0x14c>
c000fd61:	90                   	nop

c000fd62 <Pipe::isAtty()>:
c000fd62:	31 c0                	xor    eax,eax
c000fd64:	c3                   	ret    
c000fd65:	90                   	nop

c000fd66 <Pipe::~Pipe()>:
c000fd66:	83 ec 0c             	sub    esp,0xc
c000fd69:	ba fc a0 02 c0       	mov    edx,0xc002a0fc
c000fd6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd72:	89 10                	mov    DWORD PTR [eax],edx
c000fd74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd78:	83 ec 0c             	sub    esp,0xc
c000fd7b:	50                   	push   eax
c000fd7c:	e8 3f 12 00 00       	call   c0010fc0 <UnixFile::~UnixFile()>
c000fd81:	83 c4 10             	add    esp,0x10
c000fd84:	90                   	nop
c000fd85:	83 c4 0c             	add    esp,0xc
c000fd88:	c3                   	ret    
c000fd89:	90                   	nop

c000fd8a <Pipe::~Pipe()>:
c000fd8a:	83 ec 0c             	sub    esp,0xc
c000fd8d:	83 ec 0c             	sub    esp,0xc
c000fd90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd94:	e8 cd ff ff ff       	call   c000fd66 <Pipe::~Pipe()>
c000fd99:	83 c4 10             	add    esp,0x10
c000fd9c:	83 ec 08             	sub    esp,0x8
c000fd9f:	6a 20                	push   0x20
c000fda1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fda5:	e8 4b 28 00 00       	call   c00125f5 <operator delete(void*, unsigned long)>
c000fdaa:	83 c4 10             	add    esp,0x10
c000fdad:	83 c4 0c             	add    esp,0xc
c000fdb0:	c3                   	ret    
c000fdb1:	90                   	nop

c000fdb2 <Pipe::read(unsigned long long, void*, int*)>:
c000fdb2:	55                   	push   ebp
c000fdb3:	57                   	push   edi
c000fdb4:	56                   	push   esi
c000fdb5:	53                   	push   ebx
c000fdb6:	83 ec 1c             	sub    esp,0x1c
c000fdb9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fdbd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fdc1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fdc5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fdc8:	89 c8                	mov    eax,ecx
c000fdca:	99                   	cdq    
c000fdcb:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fdcf:	74 24                	je     c000fdf5 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fdd1:	39 f9                	cmp    ecx,edi
c000fdd3:	89 d1                	mov    ecx,edx
c000fdd5:	19 f1                	sbb    ecx,esi
c000fdd7:	73 1c                	jae    c000fdf5 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fdd9:	fa                   	cli    
c000fdda:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c000fde0:	e8 de db 00 00       	call   c001d9c3 <schedule()>
c000fde5:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c000fdea:	48                   	dec    eax
c000fdeb:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c000fdf0:	75 d3                	jne    c000fdc5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fdf2:	fb                   	sti    
c000fdf3:	eb d0                	jmp    c000fdc5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fdf5:	39 f8                	cmp    eax,edi
c000fdf7:	89 d1                	mov    ecx,edx
c000fdf9:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fdfc:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000fe00:	19 f1                	sbb    ecx,esi
c000fe02:	73 07                	jae    c000fe0b <Pipe::read(unsigned long long, void*, int*)+0x59>
c000fe04:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe07:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fe0b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fe0e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000fe11:	29 f7                	sub    edi,esi
c000fe13:	89 f8                	mov    eax,edi
c000fe15:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000fe19:	99                   	cdq    
c000fe1a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000fe1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe21:	19 d0                	sbb    eax,edx
c000fe23:	73 07                	jae    c000fe2c <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000fe25:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fe28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe2c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000fe2f:	89 ea                	mov    edx,ebp
c000fe31:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000fe35:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000fe3a:	74 0d                	je     c000fe49 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000fe3c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000fe3f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000fe43:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe47:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe49:	85 d2                	test   edx,edx
c000fe4b:	74 11                	je     c000fe5e <Pipe::read(unsigned long long, void*, int*)+0xac>
c000fe4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe51:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000fe54:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000fe58:	89 d1                	mov    ecx,edx
c000fe5a:	89 c7                	mov    edi,eax
c000fe5c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe5e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fe61:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000fe64:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fe67:	99                   	cdq    
c000fe68:	89 f7                	mov    edi,esi
c000fe6a:	03 04 24             	add    eax,DWORD PTR [esp]
c000fe6d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000fe71:	c1 ff 1f             	sar    edi,0x1f
c000fe74:	57                   	push   edi
c000fe75:	56                   	push   esi
c000fe76:	52                   	push   edx
c000fe77:	50                   	push   eax
c000fe78:	e8 97 69 01 00       	call   c0026814 <__umoddi3>
c000fe7d:	83 c4 10             	add    esp,0x10
c000fe80:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fe83:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fe88:	75 10                	jne    c000fe9a <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000fe8a:	83 ec 0c             	sub    esp,0xc
c000fe8d:	68 b9 a0 02 c0       	push   0xc002a0b9
c000fe92:	e8 a2 9f 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c000fe97:	83 c4 10             	add    esp,0x10
c000fe9a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fe9e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fea1:	89 10                	mov    DWORD PTR [eax],edx
c000fea3:	83 c4 1c             	add    esp,0x1c
c000fea6:	31 c0                	xor    eax,eax
c000fea8:	5b                   	pop    ebx
c000fea9:	5e                   	pop    esi
c000feaa:	5f                   	pop    edi
c000feab:	5d                   	pop    ebp
c000feac:	c3                   	ret    
c000fead:	90                   	nop

c000feae <Pipe::write(unsigned long long, void*, int*)>:
c000feae:	55                   	push   ebp
c000feaf:	57                   	push   edi
c000feb0:	56                   	push   esi
c000feb1:	53                   	push   ebx
c000feb2:	83 ec 1c             	sub    esp,0x1c
c000feb5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000feb9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000febd:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000fec0:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fec4:	89 04 24             	mov    DWORD PTR [esp],eax
c000fec7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fecb:	89 d8                	mov    eax,ebx
c000fecd:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000fed0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fed4:	89 d6                	mov    esi,edx
c000fed6:	89 d7                	mov    edi,edx
c000fed8:	c1 ff 1f             	sar    edi,0x1f
c000fedb:	03 34 24             	add    esi,DWORD PTR [esp]
c000fede:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000fee2:	c1 f8 1f             	sar    eax,0x1f
c000fee5:	39 f3                	cmp    ebx,esi
c000fee7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000feeb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000feef:	19 f8                	sbb    eax,edi
c000fef1:	b8 01 00 00 00       	mov    eax,0x1
c000fef6:	72 6e                	jb     c000ff66 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000fef8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fefb:	01 d0                	add    eax,edx
c000fefd:	99                   	cdq    
c000fefe:	f7 fb                	idiv   ebx
c000ff00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff04:	29 d3                	sub    ebx,edx
c000ff06:	89 d7                	mov    edi,edx
c000ff08:	89 de                	mov    esi,ebx
c000ff0a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000ff0d:	c1 fb 1f             	sar    ebx,0x1f
c000ff10:	39 f2                	cmp    edx,esi
c000ff12:	19 d8                	sbb    eax,ebx
c000ff14:	b8 00 00 00 00       	mov    eax,0x0
c000ff19:	72 04                	jb     c000ff1f <Pipe::write(unsigned long long, void*, int*)+0x71>
c000ff1b:	89 d0                	mov    eax,edx
c000ff1d:	29 f0                	sub    eax,esi
c000ff1f:	89 d3                	mov    ebx,edx
c000ff21:	29 c3                	sub    ebx,eax
c000ff23:	74 0b                	je     c000ff30 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000ff25:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000ff28:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ff2c:	89 d9                	mov    ecx,ebx
c000ff2e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff30:	85 c0                	test   eax,eax
c000ff32:	74 0d                	je     c000ff41 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000ff34:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ff38:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000ff3b:	89 de                	mov    esi,ebx
c000ff3d:	89 c1                	mov    ecx,eax
c000ff3f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff41:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000ff44:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ff49:	75 10                	jne    c000ff5b <Pipe::write(unsigned long long, void*, int*)+0xad>
c000ff4b:	83 ec 0c             	sub    esp,0xc
c000ff4e:	68 d5 a0 02 c0       	push   0xc002a0d5
c000ff53:	e8 e1 9e 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c000ff58:	83 c4 10             	add    esp,0x10
c000ff5b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ff5f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000ff62:	89 08                	mov    DWORD PTR [eax],ecx
c000ff64:	31 c0                	xor    eax,eax
c000ff66:	83 c4 1c             	add    esp,0x1c
c000ff69:	5b                   	pop    ebx
c000ff6a:	5e                   	pop    esi
c000ff6b:	5f                   	pop    edi
c000ff6c:	5d                   	pop    ebp
c000ff6d:	c3                   	ret    

c000ff6e <Pipe::Pipe(int)>:
c000ff6e:	83 ec 0c             	sub    esp,0xc
c000ff71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff75:	83 ec 08             	sub    esp,0x8
c000ff78:	6a 00                	push   0x0
c000ff7a:	50                   	push   eax
c000ff7b:	e8 5e 0e 00 00       	call   c0010dde <UnixFile::UnixFile(int)>
c000ff80:	83 c4 10             	add    esp,0x10
c000ff83:	ba fc a0 02 c0       	mov    edx,0xc002a0fc
c000ff88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff8c:	89 10                	mov    DWORD PTR [eax],edx
c000ff8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff92:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ff96:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ff99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff9d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ffa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffa8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ffaf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffb3:	83 ec 0c             	sub    esp,0xc
c000ffb6:	50                   	push   eax
c000ffb7:	e8 dd f5 ff ff       	call   c000f599 <malloc>
c000ffbc:	83 c4 10             	add    esp,0x10
c000ffbf:	89 c2                	mov    edx,eax
c000ffc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ffc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffcc:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ffd0:	90                   	nop
c000ffd1:	83 c4 0c             	add    esp,0xc
c000ffd4:	c3                   	ret    
c000ffd5:	90                   	nop

c000ffd6 <VgaText::isAtty()>:
c000ffd6:	b0 01                	mov    al,0x1
c000ffd8:	c3                   	ret    
c000ffd9:	90                   	nop

c000ffda <VgaText::~VgaText()>:
c000ffda:	83 ec 0c             	sub    esp,0xc
c000ffdd:	ba 84 a1 02 c0       	mov    edx,0xc002a184
c000ffe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe6:	89 10                	mov    DWORD PTR [eax],edx
c000ffe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffec:	83 ec 0c             	sub    esp,0xc
c000ffef:	50                   	push   eax
c000fff0:	e8 cb 0f 00 00       	call   c0010fc0 <UnixFile::~UnixFile()>
c000fff5:	83 c4 10             	add    esp,0x10
c000fff8:	90                   	nop
c000fff9:	83 c4 0c             	add    esp,0xc
c000fffc:	c3                   	ret    
c000fffd:	90                   	nop

c000fffe <VgaText::~VgaText()>:
c000fffe:	83 ec 0c             	sub    esp,0xc
c0010001:	83 ec 0c             	sub    esp,0xc
c0010004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010008:	e8 cd ff ff ff       	call   c000ffda <VgaText::~VgaText()>
c001000d:	83 c4 10             	add    esp,0x10
c0010010:	83 ec 08             	sub    esp,0x8
c0010013:	68 c4 02 00 00       	push   0x2c4
c0010018:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001001c:	e8 d4 25 00 00       	call   c00125f5 <operator delete(void*, unsigned long)>
c0010021:	83 c4 10             	add    esp,0x10
c0010024:	83 c4 0c             	add    esp,0xc
c0010027:	c3                   	ret    

c0010028 <VgaText::read(unsigned long long, void*, int*)>:
c0010028:	83 ec 10             	sub    esp,0x10
c001002b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001002f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010033:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010037:	e8 58 5b 00 00       	call   c0015b94 <readKeyboard(VgaText*, char*, unsigned long)>
c001003c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010040:	89 02                	mov    DWORD PTR [edx],eax
c0010042:	31 c0                	xor    eax,eax
c0010044:	83 c4 1c             	add    esp,0x1c
c0010047:	c3                   	ret    

c0010048 <setTerminalScrollLock(bool)>:
c0010048:	c3                   	ret    

c0010049 <addToTerminalCycle(VgaText*)>:
c0010049:	8b 15 e0 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d9e0
c001004f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010053:	85 d2                	test   edx,edx
c0010055:	75 09                	jne    c0010060 <addToTerminalCycle(VgaText*)+0x17>
c0010057:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c001005a:	a3 e0 d9 02 c0       	mov    ds:0xc002d9e0,eax
c001005f:	c3                   	ret    
c0010060:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c0010063:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0010066:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c0010069:	c3                   	ret    

c001006a <installVgaTextImplementation()>:
c001006a:	83 ec 10             	sub    esp,0x10
c001006d:	6a 20                	push   0x20
c001006f:	6a 00                	push   0x0
c0010071:	68 c0 d9 02 c0       	push   0xc002d9c0
c0010076:	e8 d5 06 ff ff       	call   c0000750 <memset>
c001007b:	83 c4 1c             	add    esp,0x1c
c001007e:	c3                   	ret    

c001007f <scrollTerminalScrollLock(int)>:
c001007f:	c3                   	ret    

c0010080 <VgaText::updateTitle()>:
c0010080:	53                   	push   ebx
c0010081:	31 c0                	xor    eax,eax
c0010083:	83 ec 58             	sub    esp,0x58
c0010086:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c001008a:	89 e1                	mov    ecx,esp
c001008c:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010090:	40                   	inc    eax
c0010091:	83 f8 50             	cmp    eax,0x50
c0010094:	75 f6                	jne    c001008c <VgaText::updateTitle()+0xc>
c0010096:	31 c0                	xor    eax,eax
c0010098:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c001009f:	84 db                	test   bl,bl
c00100a1:	74 06                	je     c00100a9 <VgaText::updateTitle()+0x29>
c00100a3:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00100a6:	40                   	inc    eax
c00100a7:	eb ef                	jmp    c0010098 <VgaText::updateTitle()+0x18>
c00100a9:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c00100ac:	85 c0                	test   eax,eax
c00100ae:	74 09                	je     c00100b9 <VgaText::updateTitle()+0x39>
c00100b0:	53                   	push   ebx
c00100b1:	53                   	push   ebx
c00100b2:	51                   	push   ecx
c00100b3:	52                   	push   edx
c00100b4:	ff d0                	call   eax
c00100b6:	83 c4 10             	add    esp,0x10
c00100b9:	83 c4 58             	add    esp,0x58
c00100bc:	5b                   	pop    ebx
c00100bd:	c3                   	ret    

c00100be <VgaText::load()>:
c00100be:	53                   	push   ebx
c00100bf:	31 c0                	xor    eax,eax
c00100c1:	83 ec 58             	sub    esp,0x58
c00100c4:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00100c8:	89 e2                	mov    edx,esp
c00100ca:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00100ce:	40                   	inc    eax
c00100cf:	83 f8 50             	cmp    eax,0x50
c00100d2:	75 f6                	jne    c00100ca <VgaText::load()+0xc>
c00100d4:	31 c0                	xor    eax,eax
c00100d6:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c00100dd:	84 c9                	test   cl,cl
c00100df:	74 06                	je     c00100e7 <VgaText::load()+0x29>
c00100e1:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00100e4:	40                   	inc    eax
c00100e5:	eb ef                	jmp    c00100d6 <VgaText::load()+0x18>
c00100e7:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00100ea:	85 c0                	test   eax,eax
c00100ec:	74 09                	je     c00100f7 <VgaText::load()+0x39>
c00100ee:	51                   	push   ecx
c00100ef:	51                   	push   ecx
c00100f0:	52                   	push   edx
c00100f1:	53                   	push   ebx
c00100f2:	ff d0                	call   eax
c00100f4:	83 c4 10             	add    esp,0x10
c00100f7:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00100fa:	85 c0                	test   eax,eax
c00100fc:	74 09                	je     c0010107 <VgaText::load()+0x49>
c00100fe:	83 ec 0c             	sub    esp,0xc
c0010101:	53                   	push   ebx
c0010102:	ff d0                	call   eax
c0010104:	83 c4 10             	add    esp,0x10
c0010107:	83 c4 58             	add    esp,0x58
c001010a:	5b                   	pop    ebx
c001010b:	c3                   	ret    

c001010c <VgaText::updateCursor()>:
c001010c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010110:	39 05 e4 d9 02 c0    	cmp    DWORD PTR ds:0xc002d9e4,eax
c0010116:	75 09                	jne    c0010121 <VgaText::updateCursor()+0x15>
c0010118:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c001011b:	85 c0                	test   eax,eax
c001011d:	74 02                	je     c0010121 <VgaText::updateCursor()+0x15>
c001011f:	ff e0                	jmp    eax
c0010121:	c3                   	ret    

c0010122 <VgaText::doANSI_SGR(int)>:
c0010122:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010126:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001012a:	85 d2                	test   edx,edx
c001012c:	75 0b                	jne    c0010139 <VgaText::doANSI_SGR(int)+0x17>
c001012e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0010131:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010134:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010137:	eb 59                	jmp    c0010192 <VgaText::doANSI_SGR(int)+0x70>
c0010139:	83 fa 07             	cmp    edx,0x7
c001013c:	75 0b                	jne    c0010149 <VgaText::doANSI_SGR(int)+0x27>
c001013e:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0010141:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010144:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010147:	eb 49                	jmp    c0010192 <VgaText::doANSI_SGR(int)+0x70>
c0010149:	83 fa 1b             	cmp    edx,0x1b
c001014c:	74 e0                	je     c001012e <VgaText::doANSI_SGR(int)+0xc>
c001014e:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010151:	83 f9 07             	cmp    ecx,0x7
c0010154:	77 09                	ja     c001015f <VgaText::doANSI_SGR(int)+0x3d>
c0010156:	8b 14 8d 80 c8 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3780]
c001015d:	eb 20                	jmp    c001017f <VgaText::doANSI_SGR(int)+0x5d>
c001015f:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010162:	83 f9 07             	cmp    ecx,0x7
c0010165:	77 09                	ja     c0010170 <VgaText::doANSI_SGR(int)+0x4e>
c0010167:	8b 14 8d 80 c8 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3780]
c001016e:	eb 22                	jmp    c0010192 <VgaText::doANSI_SGR(int)+0x70>
c0010170:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010173:	83 f9 07             	cmp    ecx,0x7
c0010176:	77 0b                	ja     c0010183 <VgaText::doANSI_SGR(int)+0x61>
c0010178:	8b 14 95 38 c7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd38c8]
c001017f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010182:	c3                   	ret    
c0010183:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010186:	83 f9 07             	cmp    ecx,0x7
c0010189:	77 0a                	ja     c0010195 <VgaText::doANSI_SGR(int)+0x73>
c001018b:	8b 14 95 10 c7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd38f0]
c0010192:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010195:	c3                   	ret    

c0010196 <VgaText::setDefaultBgColour(VgaColour)>:
c0010196:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001019a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001019e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00101a1:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00101a4:	c3                   	ret    
c00101a5:	90                   	nop

c00101a6 <VgaText::setDefaultFgColour(VgaColour)>:
c00101a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101ae:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00101b1:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00101b4:	c3                   	ret    
c00101b5:	90                   	nop

c00101b6 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00101b6:	53                   	push   ebx
c00101b7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00101bb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00101bf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00101c3:	51                   	push   ecx
c00101c4:	e8 cd ff ff ff       	call   c0010196 <VgaText::setDefaultBgColour(VgaColour)>
c00101c9:	58                   	pop    eax
c00101ca:	5a                   	pop    edx
c00101cb:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00101cf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00101d3:	5b                   	pop    ebx
c00101d4:	eb d0                	jmp    c00101a6 <VgaText::setDefaultFgColour(VgaColour)>

c00101d6 <VgaText::setTitleTextColour(VgaColour)>:
c00101d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101de:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00101e1:	e9 9a fe ff ff       	jmp    c0010080 <VgaText::updateTitle()>

c00101e6 <VgaText::setTitleColour(VgaColour)>:
c00101e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101ee:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00101f1:	e9 8a fe ff ff       	jmp    c0010080 <VgaText::updateTitle()>

c00101f6 <VgaText::setTitle(char*)>:
c00101f6:	53                   	push   ebx
c00101f7:	83 ec 10             	sub    esp,0x10
c00101fa:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00101fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010202:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010208:	50                   	push   eax
c0010209:	e8 fe 05 ff ff       	call   c000080c <strcpy>
c001020e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010212:	83 c4 18             	add    esp,0x18
c0010215:	5b                   	pop    ebx
c0010216:	e9 65 fe ff ff       	jmp    c0010080 <VgaText::updateTitle()>
c001021b:	90                   	nop

c001021c <VgaText::combineColours(unsigned char, unsigned char)>:
c001021c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010220:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010225:	83 e0 0f             	and    eax,0xf
c0010228:	c1 e2 04             	shl    edx,0x4
c001022b:	09 d0                	or     eax,edx
c001022d:	c3                   	ret    

c001022e <VgaText::scrollScreen()>:
c001022e:	55                   	push   ebp
c001022f:	b9 01 00 00 00       	mov    ecx,0x1
c0010234:	57                   	push   edi
c0010235:	56                   	push   esi
c0010236:	53                   	push   ebx
c0010237:	83 ec 0c             	sub    esp,0xc
c001023a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001023e:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0010244:	31 ff                	xor    edi,edi
c0010246:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0010249:	83 f9 17             	cmp    ecx,0x17
c001024c:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c001024f:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0010256:	75 27                	jne    c001027f <VgaText::scrollScreen()+0x51>
c0010258:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c001025b:	01 f5                	add    ebp,esi
c001025d:	f7 c7 01 00 00 00    	test   edi,0x1
c0010263:	74 16                	je     c001027b <VgaText::scrollScreen()+0x4d>
c0010265:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010269:	50                   	push   eax
c001026a:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001026e:	50                   	push   eax
c001026f:	e8 a8 ff ff ff       	call   c001021c <VgaText::combineColours(unsigned char, unsigned char)>
c0010274:	5a                   	pop    edx
c0010275:	5a                   	pop    edx
c0010276:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010279:	eb 04                	jmp    c001027f <VgaText::scrollScreen()+0x51>
c001027b:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c001027f:	47                   	inc    edi
c0010280:	46                   	inc    esi
c0010281:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010287:	75 bd                	jne    c0010246 <VgaText::scrollScreen()+0x18>
c0010289:	41                   	inc    ecx
c001028a:	83 f9 18             	cmp    ecx,0x18
c001028d:	75 af                	jne    c001023e <VgaText::scrollScreen()+0x10>
c001028f:	39 1d e4 d9 02 c0    	cmp    DWORD PTR ds:0xc002d9e4,ebx
c0010295:	75 1b                	jne    c00102b2 <VgaText::scrollScreen()+0x84>
c0010297:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001029b:	74 05                	je     c00102a2 <VgaText::scrollScreen()+0x74>
c001029d:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00102a0:	eb 10                	jmp    c00102b2 <VgaText::scrollScreen()+0x84>
c00102a2:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c00102a5:	85 c0                	test   eax,eax
c00102a7:	74 09                	je     c00102b2 <VgaText::scrollScreen()+0x84>
c00102a9:	83 ec 0c             	sub    esp,0xc
c00102ac:	53                   	push   ebx
c00102ad:	ff d0                	call   eax
c00102af:	83 c4 10             	add    esp,0x10
c00102b2:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00102b6:	83 c4 0c             	add    esp,0xc
c00102b9:	5b                   	pop    ebx
c00102ba:	5e                   	pop    esi
c00102bb:	5f                   	pop    edi
c00102bc:	5d                   	pop    ebp
c00102bd:	e9 4a fe ff ff       	jmp    c001010c <VgaText::updateCursor()>

c00102c2 <VgaText::combineCharAndColour(char, unsigned char)>:
c00102c2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00102c7:	c1 e0 08             	shl    eax,0x8
c00102ca:	89 c2                	mov    edx,eax
c00102cc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00102d1:	09 d0                	or     eax,edx
c00102d3:	c3                   	ret    

c00102d4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00102d4:	56                   	push   esi
c00102d5:	53                   	push   ebx
c00102d6:	51                   	push   ecx
c00102d7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00102db:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102e0:	50                   	push   eax
c00102e1:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102e6:	50                   	push   eax
c00102e7:	e8 30 ff ff ff       	call   c001021c <VgaText::combineColours(unsigned char, unsigned char)>
c00102ec:	5b                   	pop    ebx
c00102ed:	0f b6 c0             	movzx  eax,al
c00102f0:	5e                   	pop    esi
c00102f1:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00102f6:	50                   	push   eax
c00102f7:	53                   	push   ebx
c00102f8:	e8 c5 ff ff ff       	call   c00102c2 <VgaText::combineCharAndColour(char, unsigned char)>
c00102fd:	5a                   	pop    edx
c00102fe:	5e                   	pop    esi
c00102ff:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c0010302:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010308:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c001030c:	0f b7 d2             	movzx  edx,dx
c001030f:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c0010313:	39 0d e4 d9 02 c0    	cmp    DWORD PTR ds:0xc002d9e4,ecx
c0010319:	75 10                	jne    c001032b <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001031b:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c001031e:	85 c0                	test   eax,eax
c0010320:	74 09                	je     c001032b <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010322:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010326:	5a                   	pop    edx
c0010327:	5b                   	pop    ebx
c0010328:	5e                   	pop    esi
c0010329:	ff e0                	jmp    eax
c001032b:	58                   	pop    eax
c001032c:	5b                   	pop    ebx
c001032d:	5e                   	pop    esi
c001032e:	c3                   	ret    
c001032f:	90                   	nop

c0010330 <VgaText::getCursorX()>:
c0010330:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010334:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010337:	c3                   	ret    

c0010338 <VgaText::getCursorY()>:
c0010338:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001033c:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001033f:	c3                   	ret    

c0010340 <VgaText::setCursor(int, int)>:
c0010340:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010344:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010348:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001034b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001034f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010352:	e9 b5 fd ff ff       	jmp    c001010c <VgaText::updateCursor()>

c0010357 <setActiveTerminal(VgaText*)>:
c0010357:	53                   	push   ebx
c0010358:	83 ec 08             	sub    esp,0x8
c001035b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001035f:	85 db                	test   ebx,ebx
c0010361:	75 11                	jne    c0010374 <setActiveTerminal(VgaText*)+0x1d>
c0010363:	c7 44 24 10 10 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a110
c001036b:	83 c4 08             	add    esp,0x8
c001036e:	5b                   	pop    ebx
c001036f:	e9 c5 9a 00 00       	jmp    c0019e39 <Krnl::panic(char const*)>
c0010374:	a1 e4 d9 02 c0       	mov    eax,ds:0xc002d9e4
c0010379:	85 c0                	test   eax,eax
c001037b:	74 0c                	je     c0010389 <setActiveTerminal(VgaText*)+0x32>
c001037d:	83 ec 0c             	sub    esp,0xc
c0010380:	50                   	push   eax
c0010381:	e8 86 fd ff ff       	call   c001010c <VgaText::updateCursor()>
c0010386:	83 c4 10             	add    esp,0x10
c0010389:	89 1d e4 d9 02 c0    	mov    DWORD PTR ds:0xc002d9e4,ebx
c001038f:	51                   	push   ecx
c0010390:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010393:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010396:	53                   	push   ebx
c0010397:	e8 a4 ff ff ff       	call   c0010340 <VgaText::setCursor(int, int)>
c001039c:	83 c4 10             	add    esp,0x10
c001039f:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00103a3:	75 07                	jne    c00103ac <setActiveTerminal(VgaText*)+0x55>
c00103a5:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c00103ac:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103b0:	83 c4 08             	add    esp,0x8
c00103b3:	5b                   	pop    ebx
c00103b4:	e9 05 fd ff ff       	jmp    c00100be <VgaText::load()>

c00103b9 <doTerminalCycle()>:
c00103b9:	83 ec 18             	sub    esp,0x18
c00103bc:	a1 e0 d9 02 c0       	mov    eax,ds:0xc002d9e0
c00103c1:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00103c4:	50                   	push   eax
c00103c5:	a3 e0 d9 02 c0       	mov    ds:0xc002d9e0,eax
c00103ca:	e8 88 ff ff ff       	call   c0010357 <setActiveTerminal(VgaText*)>
c00103cf:	83 c4 1c             	add    esp,0x1c
c00103d2:	c3                   	ret    
c00103d3:	90                   	nop

c00103d4 <VgaText::setCursorX(int)>:
c00103d4:	83 ec 10             	sub    esp,0x10
c00103d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103db:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00103de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103e2:	50                   	push   eax
c00103e3:	e8 58 ff ff ff       	call   c0010340 <VgaText::setCursor(int, int)>
c00103e8:	83 c4 1c             	add    esp,0x1c
c00103eb:	c3                   	ret    

c00103ec <VgaText::setCursorY(int)>:
c00103ec:	83 ec 10             	sub    esp,0x10
c00103ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00103f7:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00103fa:	50                   	push   eax
c00103fb:	e8 40 ff ff ff       	call   c0010340 <VgaText::setCursor(int, int)>
c0010400:	83 c4 1c             	add    esp,0x1c
c0010403:	c3                   	ret    

c0010404 <VgaText::incrementCursor(bool)>:
c0010404:	56                   	push   esi
c0010405:	53                   	push   ebx
c0010406:	51                   	push   ecx
c0010407:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001040b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001040f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0010412:	40                   	inc    eax
c0010413:	83 f8 50             	cmp    eax,0x50
c0010416:	74 05                	je     c001041d <VgaText::incrementCursor(bool)+0x19>
c0010418:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001041b:	eb 24                	jmp    c0010441 <VgaText::incrementCursor(bool)+0x3d>
c001041d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010420:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010427:	8d 50 01             	lea    edx,[eax+0x1]
c001042a:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001042d:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010430:	75 0f                	jne    c0010441 <VgaText::incrementCursor(bool)+0x3d>
c0010432:	83 ec 0c             	sub    esp,0xc
c0010435:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010438:	53                   	push   ebx
c0010439:	e8 f0 fd ff ff       	call   c001022e <VgaText::scrollScreen()>
c001043e:	83 c4 10             	add    esp,0x10
c0010441:	89 f0                	mov    eax,esi
c0010443:	84 c0                	test   al,al
c0010445:	74 0c                	je     c0010453 <VgaText::incrementCursor(bool)+0x4f>
c0010447:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001044b:	5a                   	pop    edx
c001044c:	5b                   	pop    ebx
c001044d:	5e                   	pop    esi
c001044e:	e9 b9 fc ff ff       	jmp    c001010c <VgaText::updateCursor()>
c0010453:	58                   	pop    eax
c0010454:	5b                   	pop    ebx
c0010455:	5e                   	pop    esi
c0010456:	c3                   	ret    
c0010457:	90                   	nop

c0010458 <VgaText::decrementCursor(bool)>:
c0010458:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001045c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010460:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010463:	85 c0                	test   eax,eax
c0010465:	74 04                	je     c001046b <VgaText::decrementCursor(bool)+0x13>
c0010467:	48                   	dec    eax
c0010468:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c001046b:	84 c9                	test   cl,cl
c001046d:	74 09                	je     c0010478 <VgaText::decrementCursor(bool)+0x20>
c001046f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010473:	e9 94 fc ff ff       	jmp    c001010c <VgaText::updateCursor()>
c0010478:	c3                   	ret    
c0010479:	90                   	nop

c001047a <VgaText::putchar(char, VgaColour, VgaColour)>:
c001047a:	53                   	push   ebx
c001047b:	83 ec 08             	sub    esp,0x8
c001047e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010482:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010486:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001048a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001048e:	3c 07                	cmp    al,0x7
c0010490:	75 2a                	jne    c00104bc <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010492:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c0010497:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001049f:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c00104a7:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c00104af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00104b3:	83 c4 08             	add    esp,0x8
c00104b6:	5b                   	pop    ebx
c00104b7:	e9 1e 30 00 00       	jmp    c00134da <Buzzer::beep(int, int, bool)>
c00104bc:	3c 0d                	cmp    al,0xd
c00104be:	75 09                	jne    c00104c9 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c00104c0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00104c7:	eb 2c                	jmp    c00104f5 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c00104c9:	3c 0a                	cmp    al,0xa
c00104cb:	75 31                	jne    c00104fe <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c00104cd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00104d0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00104d7:	8d 50 01             	lea    edx,[eax+0x1]
c00104da:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00104dd:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00104e0:	75 0f                	jne    c00104f1 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c00104e2:	83 ec 0c             	sub    esp,0xc
c00104e5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00104e8:	53                   	push   ebx
c00104e9:	e8 40 fd ff ff       	call   c001022e <VgaText::scrollScreen()>
c00104ee:	83 c4 10             	add    esp,0x10
c00104f1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00104f5:	83 c4 08             	add    esp,0x8
c00104f8:	5b                   	pop    ebx
c00104f9:	e9 0e fc ff ff       	jmp    c001010c <VgaText::updateCursor()>
c00104fe:	3c 08                	cmp    al,0x8
c0010500:	75 25                	jne    c0010527 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c0010502:	50                   	push   eax
c0010503:	50                   	push   eax
c0010504:	6a 01                	push   0x1
c0010506:	53                   	push   ebx
c0010507:	e8 4c ff ff ff       	call   c0010458 <VgaText::decrementCursor(bool)>
c001050c:	5a                   	pop    edx
c001050d:	59                   	pop    ecx
c001050e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010511:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010514:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010517:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001051a:	6a 20                	push   0x20
c001051c:	53                   	push   ebx
c001051d:	e8 b2 fd ff ff       	call   c00102d4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010522:	83 c4 28             	add    esp,0x28
c0010525:	5b                   	pop    ebx
c0010526:	c3                   	ret    
c0010527:	83 ec 08             	sub    esp,0x8
c001052a:	0f be c0             	movsx  eax,al
c001052d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010530:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010533:	51                   	push   ecx
c0010534:	52                   	push   edx
c0010535:	50                   	push   eax
c0010536:	53                   	push   ebx
c0010537:	e8 98 fd ff ff       	call   c00102d4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001053c:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010540:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010548:	83 c4 28             	add    esp,0x28
c001054b:	5b                   	pop    ebx
c001054c:	e9 b3 fe ff ff       	jmp    c0010404 <VgaText::incrementCursor(bool)>
c0010551:	90                   	nop

c0010552 <VgaText::doUpdate()>:
c0010552:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010556:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010559:	85 c0                	test   eax,eax
c001055b:	74 02                	je     c001055f <VgaText::doUpdate()+0xd>
c001055d:	ff e0                	jmp    eax
c001055f:	c3                   	ret    

c0010560 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010560:	55                   	push   ebp
c0010561:	31 ed                	xor    ebp,ebp
c0010563:	57                   	push   edi
c0010564:	56                   	push   esi
c0010565:	53                   	push   ebx
c0010566:	83 ec 1c             	sub    esp,0x1c
c0010569:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001056d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010572:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010579:	50                   	push   eax
c001057a:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001057f:	50                   	push   eax
c0010580:	e8 97 fc ff ff       	call   c001021c <VgaText::combineColours(unsigned char, unsigned char)>
c0010585:	59                   	pop    ecx
c0010586:	0f b6 c0             	movzx  eax,al
c0010589:	5e                   	pop    esi
c001058a:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001058f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010593:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010596:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001059a:	0f b7 f6             	movzx  esi,si
c001059d:	01 f6                	add    esi,esi
c001059f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00105a2:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00105a5:	84 c0                	test   al,al
c00105a7:	0f 84 fd 00 00 00    	je     c00106aa <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c00105ad:	3c 0d                	cmp    al,0xd
c00105af:	75 0c                	jne    c00105bd <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c00105b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00105b8:	e9 e7 00 00 00       	jmp    c00106a4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00105bd:	3c 0a                	cmp    al,0xa
c00105bf:	75 47                	jne    c0010608 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c00105c1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00105c4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00105cb:	8d 48 01             	lea    ecx,[eax+0x1]
c00105ce:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00105d1:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00105d4:	75 0f                	jne    c00105e5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c00105d6:	83 ec 0c             	sub    esp,0xc
c00105d9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00105dc:	53                   	push   ebx
c00105dd:	e8 4c fc ff ff       	call   c001022e <VgaText::scrollScreen()>
c00105e2:	83 c4 10             	add    esp,0x10
c00105e5:	83 ec 0c             	sub    esp,0xc
c00105e8:	31 ed                	xor    ebp,ebp
c00105ea:	53                   	push   ebx
c00105eb:	e8 1c fb ff ff       	call   c001010c <VgaText::updateCursor()>
c00105f0:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00105f5:	83 c4 10             	add    esp,0x10
c00105f8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00105fb:	0f b7 f6             	movzx  esi,si
c00105fe:	01 f6                	add    esi,esi
c0010600:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010603:	e9 9c 00 00 00       	jmp    c00106a4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010608:	3c 08                	cmp    al,0x8
c001060a:	75 35                	jne    c0010641 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c001060c:	56                   	push   esi
c001060d:	56                   	push   esi
c001060e:	6a 01                	push   0x1
c0010610:	53                   	push   ebx
c0010611:	e8 42 fe ff ff       	call   c0010458 <VgaText::decrementCursor(bool)>
c0010616:	58                   	pop    eax
c0010617:	5a                   	pop    edx
c0010618:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001061b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001061e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010621:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010624:	6a 20                	push   0x20
c0010626:	53                   	push   ebx
c0010627:	e8 a8 fc ff ff       	call   c00102d4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001062c:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010631:	83 c4 20             	add    esp,0x20
c0010634:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010637:	0f b7 f6             	movzx  esi,si
c001063a:	01 f6                	add    esi,esi
c001063c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001063f:	eb 63                	jmp    c00106a4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010641:	51                   	push   ecx
c0010642:	51                   	push   ecx
c0010643:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010647:	50                   	push   eax
c0010648:	e8 75 fc ff ff       	call   c00102c2 <VgaText::combineCharAndColour(char, unsigned char)>
c001064d:	83 c4 10             	add    esp,0x10
c0010650:	66 89 06             	mov    WORD PTR [esi],ax
c0010653:	39 1d e4 d9 02 c0    	cmp    DWORD PTR ds:0xc002d9e4,ebx
c0010659:	75 21                	jne    c001067c <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c001065b:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c001065e:	85 c0                	test   eax,eax
c0010660:	74 1a                	je     c001067c <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010662:	52                   	push   edx
c0010663:	52                   	push   edx
c0010664:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010667:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001066a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001066e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010672:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010675:	51                   	push   ecx
c0010676:	53                   	push   ebx
c0010677:	ff d0                	call   eax
c0010679:	83 c4 20             	add    esp,0x20
c001067c:	83 c6 02             	add    esi,0x2
c001067f:	50                   	push   eax
c0010680:	50                   	push   eax
c0010681:	6a 00                	push   0x0
c0010683:	53                   	push   ebx
c0010684:	e8 7b fd ff ff       	call   c0010404 <VgaText::incrementCursor(bool)>
c0010689:	83 c4 10             	add    esp,0x10
c001068c:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010690:	75 0d                	jne    c001069f <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010692:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010697:	0f b7 f6             	movzx  esi,si
c001069a:	01 f6                	add    esi,esi
c001069c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001069f:	bd 01 00 00 00       	mov    ebp,0x1
c00106a4:	47                   	inc    edi
c00106a5:	e9 f8 fe ff ff       	jmp    c00105a2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c00106aa:	83 ec 0c             	sub    esp,0xc
c00106ad:	53                   	push   ebx
c00106ae:	e8 59 fa ff ff       	call   c001010c <VgaText::updateCursor()>
c00106b3:	83 c4 10             	add    esp,0x10
c00106b6:	89 e8                	mov    eax,ebp
c00106b8:	84 c0                	test   al,al
c00106ba:	74 0c                	je     c00106c8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c00106bc:	83 ec 0c             	sub    esp,0xc
c00106bf:	53                   	push   ebx
c00106c0:	e8 8d fe ff ff       	call   c0010552 <VgaText::doUpdate()>
c00106c5:	83 c4 10             	add    esp,0x10
c00106c8:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00106cf:	83 c4 1c             	add    esp,0x1c
c00106d2:	5b                   	pop    ebx
c00106d3:	5e                   	pop    esi
c00106d4:	5f                   	pop    edi
c00106d5:	5d                   	pop    ebp
c00106d6:	c3                   	ret    
c00106d7:	90                   	nop

c00106d8 <VgaText::clearScreen()>:
c00106d8:	57                   	push   edi
c00106d9:	56                   	push   esi
c00106da:	31 f6                	xor    esi,esi
c00106dc:	53                   	push   ebx
c00106dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106e1:	52                   	push   edx
c00106e2:	6a 00                	push   0x0
c00106e4:	6a 00                	push   0x0
c00106e6:	53                   	push   ebx
c00106e7:	e8 54 fc ff ff       	call   c0010340 <VgaText::setCursor(int, int)>
c00106ec:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00106f3:	83 c4 10             	add    esp,0x10
c00106f6:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00106f9:	7e 20                	jle    c001071b <VgaText::clearScreen()+0x43>
c00106fb:	31 ff                	xor    edi,edi
c00106fd:	50                   	push   eax
c00106fe:	50                   	push   eax
c00106ff:	56                   	push   esi
c0010700:	57                   	push   edi
c0010701:	47                   	inc    edi
c0010702:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010705:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010708:	6a 20                	push   0x20
c001070a:	53                   	push   ebx
c001070b:	e8 c4 fb ff ff       	call   c00102d4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010710:	83 c4 20             	add    esp,0x20
c0010713:	83 ff 50             	cmp    edi,0x50
c0010716:	75 e5                	jne    c00106fd <VgaText::clearScreen()+0x25>
c0010718:	46                   	inc    esi
c0010719:	eb db                	jmp    c00106f6 <VgaText::clearScreen()+0x1e>
c001071b:	83 ec 0c             	sub    esp,0xc
c001071e:	53                   	push   ebx
c001071f:	e8 2e fe ff ff       	call   c0010552 <VgaText::doUpdate()>
c0010724:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c001072b:	83 c4 10             	add    esp,0x10
c001072e:	5b                   	pop    ebx
c001072f:	5e                   	pop    esi
c0010730:	5f                   	pop    edi
c0010731:	c3                   	ret    

c0010732 <VgaText::putchar(char)>:
c0010732:	56                   	push   esi
c0010733:	53                   	push   ebx
c0010734:	83 ec 14             	sub    esp,0x14
c0010737:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001073b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001073f:	3c 5b                	cmp    al,0x5b
c0010741:	75 18                	jne    c001075b <VgaText::putchar(char)+0x29>
c0010743:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010747:	74 1f                	je     c0010768 <VgaText::putchar(char)+0x36>
c0010749:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c001074f:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010756:	e9 bd 00 00 00       	jmp    c0010818 <VgaText::putchar(char)+0xe6>
c001075b:	3c 1b                	cmp    al,0x1b
c001075d:	75 09                	jne    c0010768 <VgaText::putchar(char)+0x36>
c001075f:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010763:	e9 b0 00 00 00       	jmp    c0010818 <VgaText::putchar(char)+0xe6>
c0010768:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c001076b:	84 c9                	test   cl,cl
c001076d:	0f 84 92 00 00 00    	je     c0010805 <VgaText::putchar(char)+0xd3>
c0010773:	8d 50 c0             	lea    edx,[eax-0x40]
c0010776:	80 fa 3e             	cmp    dl,0x3e
c0010779:	77 76                	ja     c00107f1 <VgaText::putchar(char)+0xbf>
c001077b:	3c 6d                	cmp    al,0x6d
c001077d:	75 47                	jne    c00107c6 <VgaText::putchar(char)+0x94>
c001077f:	31 f6                	xor    esi,esi
c0010781:	31 d2                	xor    edx,edx
c0010783:	31 c0                	xor    eax,eax
c0010785:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010788:	7e 2d                	jle    c00107b7 <VgaText::putchar(char)+0x85>
c001078a:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c001078f:	80 fa 3b             	cmp    dl,0x3b
c0010792:	75 17                	jne    c00107ab <VgaText::putchar(char)+0x79>
c0010794:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010798:	50                   	push   eax
c0010799:	53                   	push   ebx
c001079a:	e8 83 f9 ff ff       	call   c0010122 <VgaText::doANSI_SGR(int)>
c001079f:	59                   	pop    ecx
c00107a0:	31 d2                	xor    edx,edx
c00107a2:	58                   	pop    eax
c00107a3:	31 c0                	xor    eax,eax
c00107a5:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00107a9:	eb 09                	jmp    c00107b4 <VgaText::putchar(char)+0x82>
c00107ab:	6b c0 0a             	imul   eax,eax,0xa
c00107ae:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00107b2:	88 ca                	mov    dl,cl
c00107b4:	46                   	inc    esi
c00107b5:	eb ce                	jmp    c0010785 <VgaText::putchar(char)+0x53>
c00107b7:	84 d2                	test   dl,dl
c00107b9:	74 2e                	je     c00107e9 <VgaText::putchar(char)+0xb7>
c00107bb:	50                   	push   eax
c00107bc:	53                   	push   ebx
c00107bd:	e8 60 f9 ff ff       	call   c0010122 <VgaText::doANSI_SGR(int)>
c00107c2:	58                   	pop    eax
c00107c3:	5a                   	pop    edx
c00107c4:	eb 23                	jmp    c00107e9 <VgaText::putchar(char)+0xb7>
c00107c6:	3c 4a                	cmp    al,0x4a
c00107c8:	75 1f                	jne    c00107e9 <VgaText::putchar(char)+0xb7>
c00107ca:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00107ce:	75 19                	jne    c00107e9 <VgaText::putchar(char)+0xb7>
c00107d0:	83 ec 0c             	sub    esp,0xc
c00107d3:	53                   	push   ebx
c00107d4:	e8 ff fe ff ff       	call   c00106d8 <VgaText::clearScreen()>
c00107d9:	83 c4 0c             	add    esp,0xc
c00107dc:	6a 00                	push   0x0
c00107de:	6a 00                	push   0x0
c00107e0:	53                   	push   ebx
c00107e1:	e8 5a fb ff ff       	call   c0010340 <VgaText::setCursor(int, int)>
c00107e6:	83 c4 10             	add    esp,0x10
c00107e9:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00107ef:	eb 27                	jmp    c0010818 <VgaText::putchar(char)+0xe6>
c00107f1:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00107f4:	83 fa 0e             	cmp    edx,0xe
c00107f7:	7f 1f                	jg     c0010818 <VgaText::putchar(char)+0xe6>
c00107f9:	8d 4a 01             	lea    ecx,[edx+0x1]
c00107fc:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00107ff:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010803:	eb 13                	jmp    c0010818 <VgaText::putchar(char)+0xe6>
c0010805:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010808:	0f be c0             	movsx  eax,al
c001080b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001080e:	50                   	push   eax
c001080f:	53                   	push   ebx
c0010810:	e8 65 fc ff ff       	call   c001047a <VgaText::putchar(char, VgaColour, VgaColour)>
c0010815:	83 c4 10             	add    esp,0x10
c0010818:	83 c4 14             	add    esp,0x14
c001081b:	5b                   	pop    ebx
c001081c:	5e                   	pop    esi
c001081d:	c3                   	ret    

c001081e <VgaText::putx(unsigned int)>:
c001081e:	57                   	push   edi
c001081f:	b9 11 00 00 00       	mov    ecx,0x11
c0010824:	56                   	push   esi
c0010825:	be 1e a1 02 c0       	mov    esi,0xc002a11e
c001082a:	53                   	push   ebx
c001082b:	83 ec 20             	sub    esp,0x20
c001082e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010832:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010836:	fc                   	cld    
c0010837:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010839:	be 08 00 00 00       	mov    esi,0x8
c001083e:	50                   	push   eax
c001083f:	50                   	push   eax
c0010840:	89 d8                	mov    eax,ebx
c0010842:	c1 e3 04             	shl    ebx,0x4
c0010845:	c1 e8 1c             	shr    eax,0x1c
c0010848:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001084d:	50                   	push   eax
c001084e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010852:	e8 db fe ff ff       	call   c0010732 <VgaText::putchar(char)>
c0010857:	83 c4 10             	add    esp,0x10
c001085a:	4e                   	dec    esi
c001085b:	75 e1                	jne    c001083e <VgaText::putx(unsigned int)+0x20>
c001085d:	83 c4 20             	add    esp,0x20
c0010860:	5b                   	pop    ebx
c0010861:	5e                   	pop    esi
c0010862:	5f                   	pop    edi
c0010863:	c3                   	ret    

c0010864 <VgaText::puts(char const*)>:
c0010864:	53                   	push   ebx
c0010865:	83 ec 08             	sub    esp,0x8
c0010868:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001086c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001086f:	84 c0                	test   al,al
c0010871:	74 12                	je     c0010885 <VgaText::puts(char const*)+0x21>
c0010873:	43                   	inc    ebx
c0010874:	51                   	push   ecx
c0010875:	51                   	push   ecx
c0010876:	50                   	push   eax
c0010877:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001087b:	e8 b2 fe ff ff       	call   c0010732 <VgaText::putchar(char)>
c0010880:	83 c4 10             	add    esp,0x10
c0010883:	eb e7                	jmp    c001086c <VgaText::puts(char const*)+0x8>
c0010885:	83 c4 08             	add    esp,0x8
c0010888:	5b                   	pop    ebx
c0010889:	c3                   	ret    

c001088a <VgaText::VgaText(char const*)>:
c001088a:	57                   	push   edi
c001088b:	56                   	push   esi
c001088c:	53                   	push   ebx
c001088d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010891:	83 ec 08             	sub    esp,0x8
c0010894:	6a 00                	push   0x0
c0010896:	50                   	push   eax
c0010897:	e8 42 05 00 00       	call   c0010dde <UnixFile::UnixFile(int)>
c001089c:	83 c4 10             	add    esp,0x10
c001089f:	ba 84 a1 02 c0       	mov    edx,0xc002a184
c00108a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a8:	89 10                	mov    DWORD PTR [eax],edx
c00108aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ae:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00108b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b9:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00108c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c4:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00108c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108cc:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00108d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d4:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00108db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108df:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00108e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ea:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00108f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f5:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00108fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010900:	8d 50 60             	lea    edx,[eax+0x60]
c0010903:	bb c0 d9 02 c0       	mov    ebx,0xc002d9c0
c0010908:	b8 08 00 00 00       	mov    eax,0x8
c001090d:	fc                   	cld    
c001090e:	89 d7                	mov    edi,edx
c0010910:	89 de                	mov    esi,ebx
c0010912:	89 c1                	mov    ecx,eax
c0010914:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001091a:	05 82 00 00 00       	add    eax,0x82
c001091f:	83 ec 08             	sub    esp,0x8
c0010922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010926:	50                   	push   eax
c0010927:	e8 e0 fe fe ff       	call   c000080c <strcpy>
c001092c:	83 c4 10             	add    esp,0x10
c001092f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010933:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c001093a:	83 ec 0c             	sub    esp,0xc
c001093d:	6a 01                	push   0x1
c001093f:	e8 dd 08 00 00       	call   c0011221 <Virt::allocateKernelVirtualPages(int)>
c0010944:	83 c4 10             	add    esp,0x10
c0010947:	89 c2                	mov    edx,eax
c0010949:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001094d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010950:	8b 1d 90 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da90
c0010956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001095a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001095d:	89 c6                	mov    esi,eax
c001095f:	e8 0d f0 ff ff       	call   c000f971 <Phys::allocatePage()>
c0010964:	6a 05                	push   0x5
c0010966:	56                   	push   esi
c0010967:	50                   	push   eax
c0010968:	53                   	push   ebx
c0010969:	e8 70 10 00 00       	call   c00119de <VAS::mapPage(unsigned long, unsigned long, int)>
c001096e:	83 c4 10             	add    esp,0x10
c0010971:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010975:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010978:	83 ec 04             	sub    esp,0x4
c001097b:	68 00 0f 00 00       	push   0xf00
c0010980:	6a 00                	push   0x0
c0010982:	50                   	push   eax
c0010983:	e8 c8 fd fe ff       	call   c0000750 <memset>
c0010988:	83 c4 10             	add    esp,0x10
c001098b:	83 ec 04             	sub    esp,0x4
c001098e:	6a 00                	push   0x0
c0010990:	6a 07                	push   0x7
c0010992:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010996:	e8 1b f8 ff ff       	call   c00101b6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001099b:	83 c4 10             	add    esp,0x10
c001099e:	83 ec 04             	sub    esp,0x4
c00109a1:	6a 00                	push   0x0
c00109a3:	6a 00                	push   0x0
c00109a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109a9:	e8 92 f9 ff ff       	call   c0010340 <VgaText::setCursor(int, int)>
c00109ae:	83 c4 10             	add    esp,0x10
c00109b1:	83 ec 0c             	sub    esp,0xc
c00109b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109b8:	e8 1b fd ff ff       	call   c00106d8 <VgaText::clearScreen()>
c00109bd:	83 c4 10             	add    esp,0x10
c00109c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c4:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00109c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109cc:	05 02 01 00 00       	add    eax,0x102
c00109d1:	83 ec 04             	sub    esp,0x4
c00109d4:	68 96 00 00 00       	push   0x96
c00109d9:	6a 00                	push   0x0
c00109db:	50                   	push   eax
c00109dc:	e8 6f fd fe ff       	call   c0000750 <memset>
c00109e1:	83 c4 10             	add    esp,0x10
c00109e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109e8:	05 98 01 00 00       	add    eax,0x198
c00109ed:	83 ec 04             	sub    esp,0x4
c00109f0:	68 2c 01 00 00       	push   0x12c
c00109f5:	6a 00                	push   0x0
c00109f7:	50                   	push   eax
c00109f8:	e8 53 fd fe ff       	call   c0000750 <memset>
c00109fd:	83 c4 10             	add    esp,0x10
c0010a00:	90                   	nop
c0010a01:	5b                   	pop    ebx
c0010a02:	5e                   	pop    esi
c0010a03:	5f                   	pop    edi
c0010a04:	c3                   	ret    
c0010a05:	90                   	nop

c0010a06 <VgaText::receiveKey(unsigned char)>:
c0010a06:	55                   	push   ebp
c0010a07:	57                   	push   edi
c0010a08:	56                   	push   esi
c0010a09:	53                   	push   ebx
c0010a0a:	83 ec 1c             	sub    esp,0x1c
c0010a0d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010a11:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010a15:	84 db                	test   bl,bl
c0010a17:	0f 84 c9 00 00 00    	je     c0010ae6 <VgaText::receiveKey(unsigned char)+0xe0>
c0010a1d:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010a23:	80 fb 08             	cmp    bl,0x8
c0010a26:	75 2c                	jne    c0010a54 <VgaText::receiveKey(unsigned char)+0x4e>
c0010a28:	83 ec 0c             	sub    esp,0xc
c0010a2b:	57                   	push   edi
c0010a2c:	e8 3b fd fe ff       	call   c000076c <strlen>
c0010a31:	83 c4 10             	add    esp,0x10
c0010a34:	85 c0                	test   eax,eax
c0010a36:	74 41                	je     c0010a79 <VgaText::receiveKey(unsigned char)+0x73>
c0010a38:	50                   	push   eax
c0010a39:	50                   	push   eax
c0010a3a:	6a 08                	push   0x8
c0010a3c:	56                   	push   esi
c0010a3d:	e8 f0 fc ff ff       	call   c0010732 <VgaText::putchar(char)>
c0010a42:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a45:	e8 22 fd fe ff       	call   c000076c <strlen>
c0010a4a:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010a52:	eb 22                	jmp    c0010a76 <VgaText::receiveKey(unsigned char)+0x70>
c0010a54:	0f be c3             	movsx  eax,bl
c0010a57:	52                   	push   edx
c0010a58:	52                   	push   edx
c0010a59:	50                   	push   eax
c0010a5a:	56                   	push   esi
c0010a5b:	e8 d2 fc ff ff       	call   c0010732 <VgaText::putchar(char)>
c0010a60:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010a64:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010a69:	59                   	pop    ecx
c0010a6a:	5d                   	pop    ebp
c0010a6b:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010a6f:	50                   	push   eax
c0010a70:	57                   	push   edi
c0010a71:	e8 d6 fe fe ff       	call   c000094c <strcat>
c0010a76:	83 c4 10             	add    esp,0x10
c0010a79:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010a80:	75 05                	jne    c0010a87 <VgaText::receiveKey(unsigned char)+0x81>
c0010a82:	80 fb 0a             	cmp    bl,0xa
c0010a85:	75 53                	jne    c0010ada <VgaText::receiveKey(unsigned char)+0xd4>
c0010a87:	83 ec 0c             	sub    esp,0xc
c0010a8a:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010a90:	53                   	push   ebx
c0010a91:	e8 d6 fc fe ff       	call   c000076c <strlen>
c0010a96:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a99:	89 c5                	mov    ebp,eax
c0010a9b:	e8 cc fc fe ff       	call   c000076c <strlen>
c0010aa0:	83 c4 10             	add    esp,0x10
c0010aa3:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010aa7:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010aac:	76 10                	jbe    c0010abe <VgaText::receiveKey(unsigned char)+0xb8>
c0010aae:	83 ec 0c             	sub    esp,0xc
c0010ab1:	68 2f a1 02 c0       	push   0xc002a12f
c0010ab6:	e8 7e 93 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c0010abb:	83 c4 10             	add    esp,0x10
c0010abe:	50                   	push   eax
c0010abf:	50                   	push   eax
c0010ac0:	57                   	push   edi
c0010ac1:	53                   	push   ebx
c0010ac2:	e8 85 fe fe ff       	call   c000094c <strcat>
c0010ac7:	83 c4 0c             	add    esp,0xc
c0010aca:	68 96 00 00 00       	push   0x96
c0010acf:	6a 00                	push   0x0
c0010ad1:	57                   	push   edi
c0010ad2:	e8 79 fc fe ff       	call   c0000750 <memset>
c0010ad7:	83 c4 10             	add    esp,0x10
c0010ada:	83 ec 0c             	sub    esp,0xc
c0010add:	56                   	push   esi
c0010ade:	e8 6f fa ff ff       	call   c0010552 <VgaText::doUpdate()>
c0010ae3:	83 c4 10             	add    esp,0x10
c0010ae6:	83 c4 1c             	add    esp,0x1c
c0010ae9:	5b                   	pop    ebx
c0010aea:	5e                   	pop    esi
c0010aeb:	5f                   	pop    edi
c0010aec:	5d                   	pop    ebp
c0010aed:	c3                   	ret    

c0010aee <VgaText::write(unsigned long long, void*, int*)>:
c0010aee:	55                   	push   ebp
c0010aef:	57                   	push   edi
c0010af0:	56                   	push   esi
c0010af1:	53                   	push   ebx
c0010af2:	83 ec 0c             	sub    esp,0xc
c0010af5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010af9:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010afd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010b01:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010b08:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010b0b:	39 eb                	cmp    ebx,ebp
c0010b0d:	74 13                	je     c0010b22 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010b0f:	43                   	inc    ebx
c0010b10:	50                   	push   eax
c0010b11:	50                   	push   eax
c0010b12:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010b16:	50                   	push   eax
c0010b17:	56                   	push   esi
c0010b18:	e8 15 fc ff ff       	call   c0010732 <VgaText::putchar(char)>
c0010b1d:	83 c4 10             	add    esp,0x10
c0010b20:	eb e9                	jmp    c0010b0b <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010b22:	83 ec 0c             	sub    esp,0xc
c0010b25:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010b2c:	56                   	push   esi
c0010b2d:	e8 20 fa ff ff       	call   c0010552 <VgaText::doUpdate()>
c0010b32:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010b36:	89 38                	mov    DWORD PTR [eax],edi
c0010b38:	83 c4 1c             	add    esp,0x1c
c0010b3b:	31 c0                	xor    eax,eax
c0010b3d:	5b                   	pop    ebx
c0010b3e:	5e                   	pop    esi
c0010b3f:	5f                   	pop    edi
c0010b40:	5d                   	pop    ebp
c0010b41:	c3                   	ret    

c0010b42 <newTerminal(char*)>:
c0010b42:	83 ec 28             	sub    esp,0x28
c0010b45:	68 c4 02 00 00       	push   0x2c4
c0010b4a:	e8 4a ea ff ff       	call   c000f599 <malloc>
c0010b4f:	5a                   	pop    edx
c0010b50:	59                   	pop    ecx
c0010b51:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010b55:	50                   	push   eax
c0010b56:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010b5a:	e8 2b fd ff ff       	call   c001088a <VgaText::VgaText(char const*)>
c0010b5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010b63:	83 c4 2c             	add    esp,0x2c
c0010b66:	c3                   	ret    
c0010b67:	90                   	nop

c0010b68 <TSS::TSS()>:
c0010b68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b6c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b73:	90                   	nop
c0010b74:	c3                   	ret    
c0010b75:	90                   	nop

c0010b76 <TSS::setESP(unsigned long)>:
c0010b76:	55                   	push   ebp
c0010b77:	89 e5                	mov    ebp,esp
c0010b79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b7f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010b82:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b85:	90                   	nop
c0010b86:	5d                   	pop    ebp
c0010b87:	c3                   	ret    

c0010b88 <TSS::flush()>:
c0010b88:	55                   	push   ebp
c0010b89:	89 e5                	mov    ebp,esp
c0010b8b:	83 ec 10             	sub    esp,0x10
c0010b8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b91:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b93:	83 c8 03             	or     eax,0x3
c0010b96:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010b9a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010b9e:	66 89 d0             	mov    ax,dx
c0010ba1:	0f 00 d8             	ltr    ax
c0010ba4:	90                   	nop
c0010ba5:	c9                   	leave  
c0010ba6:	c3                   	ret    
c0010ba7:	90                   	nop

c0010ba8 <TSS::setup(unsigned long, unsigned long)>:
c0010ba8:	55                   	push   ebp
c0010ba9:	89 e5                	mov    ebp,esp
c0010bab:	83 ec 18             	sub    esp,0x18
c0010bae:	83 ec 0c             	sub    esp,0xc
c0010bb1:	6a 68                	push   0x68
c0010bb3:	e8 e1 e9 ff ff       	call   c000f599 <malloc>
c0010bb8:	83 c4 10             	add    esp,0x10
c0010bbb:	89 c2                	mov    edx,eax
c0010bbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bc0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bc6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bc9:	83 ec 04             	sub    esp,0x4
c0010bcc:	6a 68                	push   0x68
c0010bce:	6a 00                	push   0x0
c0010bd0:	50                   	push   eax
c0010bd1:	e8 7a fb fe ff       	call   c0000750 <memset>
c0010bd6:	83 c4 10             	add    esp,0x10
c0010bd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bdc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bdf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010be5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010be8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010beb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010bf1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bf4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bf7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010bfa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c03:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010c09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c0f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010c15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c1b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010c21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c27:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010c2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c30:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c33:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010c39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c3f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010c45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c48:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c4b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010c4e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010c51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c57:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010c5a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010c5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c63:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010c6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c6d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c70:	0f 20 da             	mov    edx,cr3
c0010c73:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010c76:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010c79:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010c7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c7f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c82:	83 ec 08             	sub    esp,0x8
c0010c85:	50                   	push   eax
c0010c86:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c89:	50                   	push   eax
c0010c8a:	e8 03 e1 ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c0010c8f:	83 c4 10             	add    esp,0x10
c0010c92:	83 ec 08             	sub    esp,0x8
c0010c95:	6a 68                	push   0x68
c0010c97:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c9a:	50                   	push   eax
c0010c9b:	e8 0e e1 ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c0010ca0:	83 c4 10             	add    esp,0x10
c0010ca3:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010ca7:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010caa:	83 e0 0f             	and    eax,0xf
c0010cad:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010cb0:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010cb3:	83 c8 40             	or     eax,0x40
c0010cb6:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010cb9:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0010cbe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010cc4:	05 78 01 00 00       	add    eax,0x178
c0010cc9:	83 ec 04             	sub    esp,0x4
c0010ccc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010ccf:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010cd2:	50                   	push   eax
c0010cd3:	e8 0a e1 ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c0010cd8:	83 c4 10             	add    esp,0x10
c0010cdb:	89 c2                	mov    edx,eax
c0010cdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ce0:	89 10                	mov    DWORD PTR [eax],edx
c0010ce2:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0010ce7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010ced:	05 78 01 00 00       	add    eax,0x178
c0010cf2:	83 ec 0c             	sub    esp,0xc
c0010cf5:	50                   	push   eax
c0010cf6:	e8 11 e1 ff ff       	call   c000ee0c <GDT::flush()>
c0010cfb:	83 c4 10             	add    esp,0x10
c0010cfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d01:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d03:	c9                   	leave  
c0010d04:	c3                   	ret    
c0010d05:	90                   	nop

c0010d06 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010d06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d11:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d16:	75 08                	jne    c0010d20 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010d18:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d1e:	eb 38                	jmp    c0010d58 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010d20:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d25:	75 17                	jne    c0010d3e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010d27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d2c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010d2f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010d35:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d37:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d3b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010d3e:	89 c1                	mov    ecx,eax
c0010d40:	83 e1 fd             	and    ecx,0xfffffffd
c0010d43:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010d49:	74 cd                	je     c0010d18 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010d4b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010d50:	83 e0 ef             	and    eax,0xffffffef
c0010d53:	83 f8 08             	cmp    eax,0x8
c0010d56:	76 c0                	jbe    c0010d18 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010d58:	31 c0                	xor    eax,eax
c0010d5a:	c3                   	ret    
c0010d5b:	90                   	nop

c0010d5c <ReservedFilename::isAtty()>:
c0010d5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d60:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010d63:	31 c0                	xor    eax,eax
c0010d65:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010d6b:	74 09                	je     c0010d76 <ReservedFilename::isAtty()+0x1a>
c0010d6d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010d73:	0f 94 c0             	sete   al
c0010d76:	c3                   	ret    
c0010d77:	90                   	nop

c0010d78 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010d78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d7c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010d80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d83:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d87:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d8c:	75 08                	jne    c0010d96 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010d8e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d94:	eb 3d                	jmp    c0010dd3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d96:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d9b:	75 17                	jne    c0010db4 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010d9d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010da2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010da5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010dab:	8b 10                	mov    edx,DWORD PTR [eax]
c0010dad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010db1:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010db4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010db9:	75 04                	jne    c0010dbf <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010dbb:	89 0a                	mov    DWORD PTR [edx],ecx
c0010dbd:	eb 14                	jmp    c0010dd3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010dbf:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010dc4:	74 c8                	je     c0010d8e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010dc6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010dcb:	83 e0 ef             	and    eax,0xffffffef
c0010dce:	83 f8 08             	cmp    eax,0x8
c0010dd1:	76 bb                	jbe    c0010d8e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010dd3:	31 c0                	xor    eax,eax
c0010dd5:	c3                   	ret    

c0010dd6 <UnixFile::getFileDescriptor()>:
c0010dd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ddd:	c3                   	ret    

c0010dde <UnixFile::UnixFile(int)>:
c0010dde:	53                   	push   ebx
c0010ddf:	83 ec 28             	sub    esp,0x28
c0010de2:	ba 4c a2 02 c0       	mov    edx,0xc002a24c
c0010de7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010deb:	89 10                	mov    DWORD PTR [eax],edx
c0010ded:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0010df5:	0f 8f 8c 01 00 00    	jg     c0010f87 <UnixFile::UnixFile(int)+0x1a9>
c0010dfb:	a1 c0 c8 02 c0       	mov    eax,ds:0xc002c8c0
c0010e00:	8d 50 01             	lea    edx,[eax+0x1]
c0010e03:	89 15 c0 c8 02 c0    	mov    DWORD PTR ds:0xc002c8c0,edx
c0010e09:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010e0d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010e10:	83 ec 08             	sub    esp,0x8
c0010e13:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010e17:	68 78 da 02 c0       	push   0xc002da78
c0010e1c:	e8 65 76 01 00       	call   c0028486 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010e21:	83 c4 10             	add    esp,0x10
c0010e24:	a0 74 da 02 c0       	mov    al,ds:0xc002da74
c0010e29:	83 f0 01             	xor    eax,0x1
c0010e2c:	84 c0                	test   al,al
c0010e2e:	0f 84 54 01 00 00    	je     c0010f88 <UnixFile::UnixFile(int)+0x1aa>
c0010e34:	c6 05 74 da 02 c0 01 	mov    BYTE PTR ds:0xc002da74,0x1
c0010e3b:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0010e43:	83 ec 0c             	sub    esp,0xc
c0010e46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e4a:	e8 4a e7 ff ff       	call   c000f599 <malloc>
c0010e4f:	83 c4 10             	add    esp,0x10
c0010e52:	89 c3                	mov    ebx,eax
c0010e54:	83 ec 08             	sub    esp,0x8
c0010e57:	68 03 ff ff 0f       	push   0xfffff03
c0010e5c:	53                   	push   ebx
c0010e5d:	e8 2c 01 00 00       	call   c0010f8e <ReservedFilename::ReservedFilename(int)>
c0010e62:	83 c4 10             	add    esp,0x10
c0010e65:	89 1d 6c da 02 c0    	mov    DWORD PTR ds:0xc002da6c,ebx
c0010e6b:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0010e73:	83 ec 0c             	sub    esp,0xc
c0010e76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e7a:	e8 1a e7 ff ff       	call   c000f599 <malloc>
c0010e7f:	83 c4 10             	add    esp,0x10
c0010e82:	89 c3                	mov    ebx,eax
c0010e84:	83 ec 08             	sub    esp,0x8
c0010e87:	68 01 ff ff 0f       	push   0xfffff01
c0010e8c:	53                   	push   ebx
c0010e8d:	e8 fc 00 00 00       	call   c0010f8e <ReservedFilename::ReservedFilename(int)>
c0010e92:	83 c4 10             	add    esp,0x10
c0010e95:	89 1d 70 da 02 c0    	mov    DWORD PTR ds:0xc002da70,ebx
c0010e9b:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0010ea3:	83 ec 0c             	sub    esp,0xc
c0010ea6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010eaa:	e8 ea e6 ff ff       	call   c000f599 <malloc>
c0010eaf:	83 c4 10             	add    esp,0x10
c0010eb2:	89 c3                	mov    ebx,eax
c0010eb4:	83 ec 08             	sub    esp,0x8
c0010eb7:	68 00 ff ff 0f       	push   0xfffff00
c0010ebc:	53                   	push   ebx
c0010ebd:	e8 cc 00 00 00       	call   c0010f8e <ReservedFilename::ReservedFilename(int)>
c0010ec2:	83 c4 10             	add    esp,0x10
c0010ec5:	89 1d 64 da 02 c0    	mov    DWORD PTR ds:0xc002da64,ebx
c0010ecb:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0010ed3:	83 ec 0c             	sub    esp,0xc
c0010ed6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010eda:	e8 ba e6 ff ff       	call   c000f599 <malloc>
c0010edf:	83 c4 10             	add    esp,0x10
c0010ee2:	89 c3                	mov    ebx,eax
c0010ee4:	83 ec 08             	sub    esp,0x8
c0010ee7:	68 02 ff ff 0f       	push   0xfffff02
c0010eec:	53                   	push   ebx
c0010eed:	e8 9c 00 00 00       	call   c0010f8e <ReservedFilename::ReservedFilename(int)>
c0010ef2:	83 c4 10             	add    esp,0x10
c0010ef5:	89 1d 68 da 02 c0    	mov    DWORD PTR ds:0xc002da68,ebx
c0010efb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010f03:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0010f08:	7f 7e                	jg     c0010f88 <UnixFile::UnixFile(int)+0x1aa>
c0010f0a:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0010f12:	83 ec 0c             	sub    esp,0xc
c0010f15:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f19:	e8 7b e6 ff ff       	call   c000f599 <malloc>
c0010f1e:	83 c4 10             	add    esp,0x10
c0010f21:	89 c3                	mov    ebx,eax
c0010f23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f27:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010f2c:	83 ec 08             	sub    esp,0x8
c0010f2f:	50                   	push   eax
c0010f30:	53                   	push   ebx
c0010f31:	e8 58 00 00 00       	call   c0010f8e <ReservedFilename::ReservedFilename(int)>
c0010f36:	83 c4 10             	add    esp,0x10
c0010f39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f3d:	89 1c 85 40 da 02 c0 	mov    DWORD PTR [eax*4-0x3ffd25c0],ebx
c0010f44:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0010f4c:	83 ec 0c             	sub    esp,0xc
c0010f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010f53:	e8 41 e6 ff ff       	call   c000f599 <malloc>
c0010f58:	83 c4 10             	add    esp,0x10
c0010f5b:	89 c3                	mov    ebx,eax
c0010f5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f61:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010f66:	83 ec 08             	sub    esp,0x8
c0010f69:	50                   	push   eax
c0010f6a:	53                   	push   ebx
c0010f6b:	e8 1e 00 00 00       	call   c0010f8e <ReservedFilename::ReservedFilename(int)>
c0010f70:	83 c4 10             	add    esp,0x10
c0010f73:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f77:	89 1c 85 00 da 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2600],ebx
c0010f7e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0010f82:	e9 7c ff ff ff       	jmp    c0010f03 <UnixFile::UnixFile(int)+0x125>
c0010f87:	90                   	nop
c0010f88:	83 c4 28             	add    esp,0x28
c0010f8b:	5b                   	pop    ebx
c0010f8c:	c3                   	ret    
c0010f8d:	90                   	nop

c0010f8e <ReservedFilename::ReservedFilename(int)>:
c0010f8e:	83 ec 0c             	sub    esp,0xc
c0010f91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f95:	83 ec 08             	sub    esp,0x8
c0010f98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f9c:	50                   	push   eax
c0010f9d:	e8 3c fe ff ff       	call   c0010dde <UnixFile::UnixFile(int)>
c0010fa2:	83 c4 10             	add    esp,0x10
c0010fa5:	ba 68 a2 02 c0       	mov    edx,0xc002a268
c0010faa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fae:	89 10                	mov    DWORD PTR [eax],edx
c0010fb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fb4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010fb8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010fbb:	90                   	nop
c0010fbc:	83 c4 0c             	add    esp,0xc
c0010fbf:	c3                   	ret    

c0010fc0 <UnixFile::~UnixFile()>:
c0010fc0:	83 ec 1c             	sub    esp,0x1c
c0010fc3:	ba 4c a2 02 c0       	mov    edx,0xc002a24c
c0010fc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fcc:	89 10                	mov    DWORD PTR [eax],edx
c0010fce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fd2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fd5:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0010fda:	7f 73                	jg     c001104f <UnixFile::~UnixFile()+0x8f>
c0010fdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010fe4:	83 ec 0c             	sub    esp,0xc
c0010fe7:	68 78 da 02 c0       	push   0xc002da78
c0010fec:	e8 69 75 01 00       	call   c002855a <LinkedList<UnixFile>::getFirstElement()>
c0010ff1:	83 c4 10             	add    esp,0x10
c0010ff4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ff8:	83 ec 0c             	sub    esp,0xc
c0010ffb:	68 78 da 02 c0       	push   0xc002da78
c0011000:	e8 5d 75 01 00       	call   c0028562 <LinkedList<UnixFile>::removeFirst()>
c0011005:	83 c4 10             	add    esp,0x10
c0011008:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001100c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011010:	74 40                	je     c0011052 <UnixFile::~UnixFile()+0x92>
c0011012:	83 ec 08             	sub    esp,0x8
c0011015:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011019:	68 78 da 02 c0       	push   0xc002da78
c001101e:	e8 63 74 01 00       	call   c0028486 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011023:	83 c4 10             	add    esp,0x10
c0011026:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001102a:	8d 50 01             	lea    edx,[eax+0x1]
c001102d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011031:	3d 88 13 00 00       	cmp    eax,0x1388
c0011036:	0f 94 c0             	sete   al
c0011039:	84 c0                	test   al,al
c001103b:	74 a7                	je     c0010fe4 <UnixFile::~UnixFile()+0x24>
c001103d:	83 ec 0c             	sub    esp,0xc
c0011040:	68 24 a2 02 c0       	push   0xc002a224
c0011045:	e8 ef 8d 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c001104a:	83 c4 10             	add    esp,0x10
c001104d:	eb 95                	jmp    c0010fe4 <UnixFile::~UnixFile()+0x24>
c001104f:	90                   	nop
c0011050:	eb 01                	jmp    c0011053 <UnixFile::~UnixFile()+0x93>
c0011052:	90                   	nop
c0011053:	90                   	nop
c0011054:	83 c4 1c             	add    esp,0x1c
c0011057:	c3                   	ret    

c0011058 <UnixFile::~UnixFile()>:
c0011058:	83 ec 0c             	sub    esp,0xc
c001105b:	83 ec 0c             	sub    esp,0xc
c001105e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011062:	e8 59 ff ff ff       	call   c0010fc0 <UnixFile::~UnixFile()>
c0011067:	83 c4 10             	add    esp,0x10
c001106a:	83 ec 08             	sub    esp,0x8
c001106d:	6a 0c                	push   0xc
c001106f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011073:	e8 7d 15 00 00       	call   c00125f5 <operator delete(void*, unsigned long)>
c0011078:	83 c4 10             	add    esp,0x10
c001107b:	83 c4 0c             	add    esp,0xc
c001107e:	c3                   	ret    
c001107f:	90                   	nop

c0011080 <ReservedFilename::~ReservedFilename()>:
c0011080:	83 ec 0c             	sub    esp,0xc
c0011083:	ba 68 a2 02 c0       	mov    edx,0xc002a268
c0011088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001108c:	89 10                	mov    DWORD PTR [eax],edx
c001108e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011092:	83 ec 0c             	sub    esp,0xc
c0011095:	50                   	push   eax
c0011096:	e8 25 ff ff ff       	call   c0010fc0 <UnixFile::~UnixFile()>
c001109b:	83 c4 10             	add    esp,0x10
c001109e:	90                   	nop
c001109f:	83 c4 0c             	add    esp,0xc
c00110a2:	c3                   	ret    
c00110a3:	90                   	nop

c00110a4 <ReservedFilename::~ReservedFilename()>:
c00110a4:	83 ec 0c             	sub    esp,0xc
c00110a7:	83 ec 0c             	sub    esp,0xc
c00110aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110ae:	e8 cd ff ff ff       	call   c0011080 <ReservedFilename::~ReservedFilename()>
c00110b3:	83 c4 10             	add    esp,0x10
c00110b6:	83 ec 08             	sub    esp,0x8
c00110b9:	6a 0c                	push   0xc
c00110bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110bf:	e8 31 15 00 00       	call   c00125f5 <operator delete(void*, unsigned long)>
c00110c4:	83 c4 10             	add    esp,0x10
c00110c7:	83 c4 0c             	add    esp,0xc
c00110ca:	c3                   	ret    

c00110cb <getFromFileDescriptor(int)>:
c00110cb:	53                   	push   ebx
c00110cc:	83 ec 08             	sub    esp,0x8
c00110cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00110d3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00110d9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00110df:	7f 2c                	jg     c001110d <getFromFileDescriptor(int)+0x42>
c00110e1:	83 ec 0c             	sub    esp,0xc
c00110e4:	68 78 da 02 c0       	push   0xc002da78
c00110e9:	e8 6c 74 01 00       	call   c002855a <LinkedList<UnixFile>::getFirstElement()>
c00110ee:	83 c4 10             	add    esp,0x10
c00110f1:	85 c0                	test   eax,eax
c00110f3:	75 04                	jne    c00110f9 <getFromFileDescriptor(int)+0x2e>
c00110f5:	31 c0                	xor    eax,eax
c00110f7:	eb 6e                	jmp    c0011167 <getFromFileDescriptor(int)+0x9c>
c00110f9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00110fc:	74 69                	je     c0011167 <getFromFileDescriptor(int)+0x9c>
c00110fe:	52                   	push   edx
c00110ff:	52                   	push   edx
c0011100:	50                   	push   eax
c0011101:	68 78 da 02 c0       	push   0xc002da78
c0011106:	e8 f9 74 01 00       	call   c0028604 <LinkedList<UnixFile>::getNext(UnixFile*)>
c001110b:	eb e1                	jmp    c00110ee <getFromFileDescriptor(int)+0x23>
c001110d:	a1 6c da 02 c0       	mov    eax,ds:0xc002da6c
c0011112:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011118:	74 4d                	je     c0011167 <getFromFileDescriptor(int)+0x9c>
c001111a:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c001111f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011125:	74 40                	je     c0011167 <getFromFileDescriptor(int)+0x9c>
c0011127:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c001112c:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011132:	74 33                	je     c0011167 <getFromFileDescriptor(int)+0x9c>
c0011134:	a1 64 da 02 c0       	mov    eax,ds:0xc002da64
c0011139:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001113f:	74 26                	je     c0011167 <getFromFileDescriptor(int)+0x9c>
c0011141:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011147:	83 f8 08             	cmp    eax,0x8
c001114a:	77 09                	ja     c0011155 <getFromFileDescriptor(int)+0x8a>
c001114c:	8b 04 85 40 da 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd25c0]
c0011153:	eb 12                	jmp    c0011167 <getFromFileDescriptor(int)+0x9c>
c0011155:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001115b:	83 fb 08             	cmp    ebx,0x8
c001115e:	77 95                	ja     c00110f5 <getFromFileDescriptor(int)+0x2a>
c0011160:	8b 04 9d 00 da 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2600]
c0011167:	83 c4 08             	add    esp,0x8
c001116a:	5b                   	pop    ebx
c001116b:	c3                   	ret    

c001116c <__static_initialization_and_destruction_0(int, int)>:
c001116c:	83 ec 0c             	sub    esp,0xc
c001116f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011174:	75 34                	jne    c00111aa <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011176:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001117e:	75 2a                	jne    c00111aa <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011180:	83 ec 0c             	sub    esp,0xc
c0011183:	68 78 da 02 c0       	push   0xc002da78
c0011188:	e8 b7 72 01 00       	call   c0028444 <LinkedList<UnixFile>::LinkedList()>
c001118d:	83 c4 10             	add    esp,0x10
c0011190:	83 ec 04             	sub    esp,0x4
c0011193:	68 f8 c6 02 c0       	push   0xc002c6f8
c0011198:	68 78 da 02 c0       	push   0xc002da78
c001119d:	68 42 84 02 c0       	push   0xc0028442
c00111a2:	e8 c8 13 00 00       	call   c001256f <__cxa_atexit>
c00111a7:	83 c4 10             	add    esp,0x10
c00111aa:	90                   	nop
c00111ab:	83 c4 0c             	add    esp,0xc
c00111ae:	c3                   	ret    

c00111af <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00111af:	83 ec 0c             	sub    esp,0xc
c00111b2:	83 ec 08             	sub    esp,0x8
c00111b5:	68 ff ff 00 00       	push   0xffff
c00111ba:	6a 01                	push   0x1
c00111bc:	e8 ab ff ff ff       	call   c001116c <__static_initialization_and_destruction_0(int, int)>
c00111c1:	83 c4 10             	add    esp,0x10
c00111c4:	83 c4 0c             	add    esp,0xc
c00111c7:	c3                   	ret    

c00111c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00111c8:	53                   	push   ebx
c00111c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00111cd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00111d1:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00111d7:	89 c8                	mov    eax,ecx
c00111d9:	d1 e8                	shr    eax,1
c00111db:	03 05 c8 c8 02 c0    	add    eax,DWORD PTR ds:0xc002c8c8
c00111e1:	83 e1 01             	and    ecx,0x1
c00111e4:	8a 10                	mov    dl,BYTE PTR [eax]
c00111e6:	75 09                	jne    c00111f1 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00111e8:	83 e2 f0             	and    edx,0xfffffff0
c00111eb:	09 da                	or     edx,ebx
c00111ed:	88 10                	mov    BYTE PTR [eax],dl
c00111ef:	5b                   	pop    ebx
c00111f0:	c3                   	ret    
c00111f1:	c1 e3 04             	shl    ebx,0x4
c00111f4:	83 e2 0f             	and    edx,0xf
c00111f7:	09 da                	or     edx,ebx
c00111f9:	88 10                	mov    BYTE PTR [eax],dl
c00111fb:	5b                   	pop    ebx
c00111fc:	c3                   	ret    

c00111fd <Virt::getPageState(unsigned long)>:
c00111fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011201:	8b 0d c8 c8 02 c0    	mov    ecx,DWORD PTR ds:0xc002c8c8
c0011207:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001120d:	89 d0                	mov    eax,edx
c001120f:	d1 e8                	shr    eax,1
c0011211:	83 e2 01             	and    edx,0x1
c0011214:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011217:	75 04                	jne    c001121d <Virt::getPageState(unsigned long)+0x20>
c0011219:	83 e0 0f             	and    eax,0xf
c001121c:	c3                   	ret    
c001121d:	c0 e8 04             	shr    al,0x4
c0011220:	c3                   	ret    

c0011221 <Virt::allocateKernelVirtualPages(int)>:
c0011221:	55                   	push   ebp
c0011222:	31 ed                	xor    ebp,ebp
c0011224:	57                   	push   edi
c0011225:	56                   	push   esi
c0011226:	53                   	push   ebx
c0011227:	31 db                	xor    ebx,ebx
c0011229:	83 ec 1c             	sub    esp,0x1c
c001122c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011230:	8b 3d c4 c8 02 c0    	mov    edi,DWORD PTR ds:0xc002c8c4
c0011236:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001123b:	57                   	push   edi
c001123c:	e8 bc ff ff ff       	call   c00111fd <Virt::getPageState(unsigned long)>
c0011241:	5a                   	pop    edx
c0011242:	84 c0                	test   al,al
c0011244:	75 3a                	jne    c0011280 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011246:	85 db                	test   ebx,ebx
c0011248:	75 02                	jne    c001124c <Virt::allocateKernelVirtualPages(int)+0x2b>
c001124a:	89 fd                	mov    ebp,edi
c001124c:	43                   	inc    ebx
c001124d:	39 f3                	cmp    ebx,esi
c001124f:	74 5a                	je     c00112ab <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011251:	47                   	inc    edi
c0011252:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011258:	76 31                	jbe    c001128b <Virt::allocateKernelVirtualPages(int)+0x6a>
c001125a:	c7 05 c4 c8 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002c8c4,0xc8000
c0011264:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011269:	75 28                	jne    c0011293 <Virt::allocateKernelVirtualPages(int)+0x72>
c001126b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011270:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011275:	57                   	push   edi
c0011276:	e8 82 ff ff ff       	call   c00111fd <Virt::getPageState(unsigned long)>
c001127b:	5a                   	pop    edx
c001127c:	84 c0                	test   al,al
c001127e:	74 c6                	je     c0011246 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011280:	31 db                	xor    ebx,ebx
c0011282:	47                   	inc    edi
c0011283:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011289:	77 cf                	ja     c001125a <Virt::allocateKernelVirtualPages(int)+0x39>
c001128b:	89 3d c4 c8 02 c0    	mov    DWORD PTR ds:0xc002c8c4,edi
c0011291:	eb a8                	jmp    c001123b <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011293:	83 ec 0c             	sub    esp,0xc
c0011296:	68 7c a2 02 c0       	push   0xc002a27c
c001129b:	e8 99 8b 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c00112a0:	8b 3d c4 c8 02 c0    	mov    edi,DWORD PTR ds:0xc002c8c4
c00112a6:	83 c4 10             	add    esp,0x10
c00112a9:	eb 90                	jmp    c001123b <Virt::allocateKernelVirtualPages(int)+0x1a>
c00112ab:	89 2d c4 c8 02 c0    	mov    DWORD PTR ds:0xc002c8c4,ebp
c00112b1:	4b                   	dec    ebx
c00112b2:	74 5f                	je     c0011313 <Virt::allocateKernelVirtualPages(int)+0xf2>
c00112b4:	85 f6                	test   esi,esi
c00112b6:	74 3d                	je     c00112f5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00112b8:	89 e8                	mov    eax,ebp
c00112ba:	31 db                	xor    ebx,ebx
c00112bc:	8d 7e ff             	lea    edi,[esi-0x1]
c00112bf:	eb 14                	jmp    c00112d5 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00112c1:	6a 01                	push   0x1
c00112c3:	43                   	inc    ebx
c00112c4:	50                   	push   eax
c00112c5:	e8 fe fe ff ff       	call   c00111c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112ca:	58                   	pop    eax
c00112cb:	39 f3                	cmp    ebx,esi
c00112cd:	5a                   	pop    edx
c00112ce:	74 25                	je     c00112f5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00112d0:	a1 c4 c8 02 c0       	mov    eax,ds:0xc002c8c4
c00112d5:	8d 50 01             	lea    edx,[eax+0x1]
c00112d8:	85 db                	test   ebx,ebx
c00112da:	89 15 c4 c8 02 c0    	mov    DWORD PTR ds:0xc002c8c4,edx
c00112e0:	74 20                	je     c0011302 <Virt::allocateKernelVirtualPages(int)+0xe1>
c00112e2:	39 df                	cmp    edi,ebx
c00112e4:	75 db                	jne    c00112c1 <Virt::allocateKernelVirtualPages(int)+0xa0>
c00112e6:	6a 03                	push   0x3
c00112e8:	43                   	inc    ebx
c00112e9:	50                   	push   eax
c00112ea:	e8 d9 fe ff ff       	call   c00111c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112ef:	59                   	pop    ecx
c00112f0:	39 f3                	cmp    ebx,esi
c00112f2:	58                   	pop    eax
c00112f3:	75 db                	jne    c00112d0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00112f5:	83 c4 1c             	add    esp,0x1c
c00112f8:	89 e8                	mov    eax,ebp
c00112fa:	5b                   	pop    ebx
c00112fb:	c1 e0 0c             	shl    eax,0xc
c00112fe:	5e                   	pop    esi
c00112ff:	5f                   	pop    edi
c0011300:	5d                   	pop    ebp
c0011301:	c3                   	ret    
c0011302:	6a 02                	push   0x2
c0011304:	bb 01 00 00 00       	mov    ebx,0x1
c0011309:	50                   	push   eax
c001130a:	e8 b9 fe ff ff       	call   c00111c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001130f:	58                   	pop    eax
c0011310:	5a                   	pop    edx
c0011311:	eb bd                	jmp    c00112d0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011313:	6a 04                	push   0x4
c0011315:	8d 45 01             	lea    eax,[ebp+0x1]
c0011318:	55                   	push   ebp
c0011319:	a3 c4 c8 02 c0       	mov    ds:0xc002c8c4,eax
c001131e:	e8 a5 fe ff ff       	call   c00111c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011323:	59                   	pop    ecx
c0011324:	89 e8                	mov    eax,ebp
c0011326:	5b                   	pop    ebx
c0011327:	c1 e0 0c             	shl    eax,0xc
c001132a:	83 c4 1c             	add    esp,0x1c
c001132d:	5b                   	pop    ebx
c001132e:	5e                   	pop    esi
c001132f:	5f                   	pop    edi
c0011330:	5d                   	pop    ebp
c0011331:	c3                   	ret    

c0011332 <Virt::freeSwapfilePage(unsigned long)>:
c0011332:	53                   	push   ebx
c0011333:	8b 15 8c da 02 c0    	mov    edx,DWORD PTR ds:0xc002da8c
c0011339:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001133d:	b8 01 00 00 00       	mov    eax,0x1
c0011342:	89 cb                	mov    ebx,ecx
c0011344:	d3 e0                	shl    eax,cl
c0011346:	c1 eb 05             	shr    ebx,0x5
c0011349:	f7 d0                	not    eax
c001134b:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c001134e:	5b                   	pop    ebx
c001134f:	c3                   	ret    

c0011350 <Virt::swapIDToSector(unsigned long)>:
c0011350:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011354:	0f af 05 cc c8 02 c0 	imul   eax,DWORD PTR ds:0xc002c8cc
c001135b:	03 05 d4 c8 02 c0    	add    eax,DWORD PTR ds:0xc002c8d4
c0011361:	c3                   	ret    

c0011362 <Virt::allocateSwapfilePage()>:
c0011362:	55                   	push   ebp
c0011363:	31 d2                	xor    edx,edx
c0011365:	57                   	push   edi
c0011366:	56                   	push   esi
c0011367:	53                   	push   ebx
c0011368:	83 ec 0c             	sub    esp,0xc
c001136b:	8b 0d cc c8 02 c0    	mov    ecx,DWORD PTR ds:0xc002c8cc
c0011371:	a1 d0 c8 02 c0       	mov    eax,ds:0xc002c8d0
c0011376:	f7 f1                	div    ecx
c0011378:	39 0d d0 c8 02 c0    	cmp    DWORD PTR ds:0xc002c8d0,ecx
c001137e:	72 2d                	jb     c00113ad <Virt::allocateSwapfilePage()+0x4b>
c0011380:	8b 35 8c da 02 c0    	mov    esi,DWORD PTR ds:0xc002da8c
c0011386:	8b 16                	mov    edx,DWORD PTR [esi]
c0011388:	f6 c2 01             	test   dl,0x1
c001138b:	74 3c                	je     c00113c9 <Virt::allocateSwapfilePage()+0x67>
c001138d:	31 c9                	xor    ecx,ecx
c001138f:	bf 01 00 00 00       	mov    edi,0x1
c0011394:	eb 12                	jmp    c00113a8 <Virt::allocateSwapfilePage()+0x46>
c0011396:	89 fd                	mov    ebp,edi
c0011398:	89 ca                	mov    edx,ecx
c001139a:	d3 e5                	shl    ebp,cl
c001139c:	c1 ea 05             	shr    edx,0x5
c001139f:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00113a2:	8b 13                	mov    edx,DWORD PTR [ebx]
c00113a4:	85 ea                	test   edx,ebp
c00113a6:	74 2a                	je     c00113d2 <Virt::allocateSwapfilePage()+0x70>
c00113a8:	41                   	inc    ecx
c00113a9:	39 c8                	cmp    eax,ecx
c00113ab:	77 e9                	ja     c0011396 <Virt::allocateSwapfilePage()+0x34>
c00113ad:	83 ec 0c             	sub    esp,0xc
c00113b0:	68 34 a4 02 c0       	push   0xc002a434
c00113b5:	e8 7f 8a 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c00113ba:	83 c4 10             	add    esp,0x10
c00113bd:	31 c9                	xor    ecx,ecx
c00113bf:	83 c4 0c             	add    esp,0xc
c00113c2:	89 c8                	mov    eax,ecx
c00113c4:	5b                   	pop    ebx
c00113c5:	5e                   	pop    esi
c00113c6:	5f                   	pop    edi
c00113c7:	5d                   	pop    ebp
c00113c8:	c3                   	ret    
c00113c9:	89 f3                	mov    ebx,esi
c00113cb:	bd 01 00 00 00       	mov    ebp,0x1
c00113d0:	31 c9                	xor    ecx,ecx
c00113d2:	09 ea                	or     edx,ebp
c00113d4:	89 c8                	mov    eax,ecx
c00113d6:	89 13                	mov    DWORD PTR [ebx],edx
c00113d8:	83 c4 0c             	add    esp,0xc
c00113db:	5b                   	pop    ebx
c00113dc:	5e                   	pop    esi
c00113dd:	5f                   	pop    edi
c00113de:	5d                   	pop    ebp
c00113df:	c3                   	ret    

c00113e0 <Virt::virtualMemorySetup()>:
c00113e0:	53                   	push   ebx
c00113e1:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113e6:	6a 0f                	push   0xf
c00113e8:	53                   	push   ebx
c00113e9:	43                   	inc    ebx
c00113ea:	e8 d9 fd ff ff       	call   c00111c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113ef:	58                   	pop    eax
c00113f0:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113f6:	5a                   	pop    edx
c00113f7:	75 ed                	jne    c00113e6 <Virt::virtualMemorySetup()+0x6>
c00113f9:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113fe:	6a 00                	push   0x0
c0011400:	53                   	push   ebx
c0011401:	43                   	inc    ebx
c0011402:	e8 c1 fd ff ff       	call   c00111c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011407:	59                   	pop    ecx
c0011408:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001140e:	58                   	pop    eax
c001140f:	75 ed                	jne    c00113fe <Virt::virtualMemorySetup()+0x1e>
c0011411:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011416:	6a 0f                	push   0xf
c0011418:	53                   	push   ebx
c0011419:	43                   	inc    ebx
c001141a:	e8 a9 fd ff ff       	call   c00111c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001141f:	58                   	pop    eax
c0011420:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011426:	5a                   	pop    edx
c0011427:	75 ed                	jne    c0011416 <Virt::virtualMemorySetup()+0x36>
c0011429:	5b                   	pop    ebx
c001142a:	c3                   	ret    

c001142b <Virt::setupPageSwapping(int)>:
c001142b:	57                   	push   edi
c001142c:	56                   	push   esi
c001142d:	53                   	push   ebx
c001142e:	83 ec 1c             	sub    esp,0x1c
c0011431:	68 14 01 00 00       	push   0x114
c0011436:	e8 5e e1 ff ff       	call   c000f599 <malloc>
c001143b:	83 c4 0c             	add    esp,0xc
c001143e:	89 c6                	mov    esi,eax
c0011440:	ff 35 70 0e 03 c0    	push   DWORD PTR ds:0xc0030e70
c0011446:	68 4b a4 02 c0       	push   0xc002a44b
c001144b:	50                   	push   eax
c001144c:	e8 db 17 00 00       	call   c0012c2c <File::File(char const*, Process*)>
c0011451:	89 34 24             	mov    DWORD PTR [esp],esi
c0011454:	e8 af 19 00 00       	call   c0012e08 <File::unlink()>
c0011459:	58                   	pop    eax
c001145a:	5a                   	pop    edx
c001145b:	6a 12                	push   0x12
c001145d:	56                   	push   esi
c001145e:	e8 2d 18 00 00       	call   c0012c90 <File::open(FileOpenMode)>
c0011463:	83 c4 10             	add    esp,0x10
c0011466:	85 c0                	test   eax,eax
c0011468:	0f 85 2f 01 00 00    	jne    c001159d <Virt::setupPageSwapping(int)+0x172>
c001146e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011472:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001147a:	c1 e3 08             	shl    ebx,0x8
c001147d:	83 ec 0c             	sub    esp,0xc
c0011480:	68 00 00 01 00       	push   0x10000
c0011485:	e8 0f e1 ff ff       	call   c000f599 <malloc>
c001148a:	83 c4 0c             	add    esp,0xc
c001148d:	89 c7                	mov    edi,eax
c001148f:	68 00 00 01 00       	push   0x10000
c0011494:	68 ee 00 00 00       	push   0xee
c0011499:	50                   	push   eax
c001149a:	e8 b1 f2 fe ff       	call   c0000750 <memset>
c001149f:	83 c4 10             	add    esp,0x10
c00114a2:	85 db                	test   ebx,ebx
c00114a4:	79 03                	jns    c00114a9 <Virt::setupPageSwapping(int)+0x7e>
c00114a6:	83 c3 0f             	add    ebx,0xf
c00114a9:	c1 fb 04             	sar    ebx,0x4
c00114ac:	4b                   	dec    ebx
c00114ad:	83 fb ff             	cmp    ebx,0xffffffff
c00114b0:	74 41                	je     c00114f3 <Virt::setupPageSwapping(int)+0xc8>
c00114b2:	83 ec 0c             	sub    esp,0xc
c00114b5:	8b 06                	mov    eax,DWORD PTR [esi]
c00114b7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00114bb:	52                   	push   edx
c00114bc:	57                   	push   edi
c00114bd:	6a 00                	push   0x0
c00114bf:	68 00 00 01 00       	push   0x10000
c00114c4:	56                   	push   esi
c00114c5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00114c8:	83 c4 20             	add    esp,0x20
c00114cb:	85 c0                	test   eax,eax
c00114cd:	0f 85 b5 00 00 00    	jne    c0011588 <Virt::setupPageSwapping(int)+0x15d>
c00114d3:	81 7c 24 0c 00 00 01 00 	cmp    DWORD PTR [esp+0xc],0x10000
c00114db:	74 cf                	je     c00114ac <Virt::setupPageSwapping(int)+0x81>
c00114dd:	83 ec 0c             	sub    esp,0xc
c00114e0:	4b                   	dec    ebx
c00114e1:	68 7d a4 02 c0       	push   0xc002a47d
c00114e6:	e8 4e 89 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c00114eb:	83 c4 10             	add    esp,0x10
c00114ee:	83 fb ff             	cmp    ebx,0xffffffff
c00114f1:	75 bf                	jne    c00114b2 <Virt::setupPageSwapping(int)+0x87>
c00114f3:	83 ec 0c             	sub    esp,0xc
c00114f6:	56                   	push   esi
c00114f7:	e8 f2 17 00 00       	call   c0012cee <File::close()>
c00114fc:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114ff:	e8 b5 e0 ff ff       	call   c000f5b9 <rfree>
c0011504:	83 c4 10             	add    esp,0x10
c0011507:	85 f6                	test   esi,esi
c0011509:	74 0c                	je     c0011517 <Virt::setupPageSwapping(int)+0xec>
c001150b:	83 ec 0c             	sub    esp,0xc
c001150e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011510:	56                   	push   esi
c0011511:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011514:	83 c4 10             	add    esp,0x10
c0011517:	83 ec 08             	sub    esp,0x8
c001151a:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c001151f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011525:	8b 10                	mov    edx,DWORD PTR [eax]
c0011527:	68 4b a4 02 c0       	push   0xc002a44b
c001152c:	50                   	push   eax
c001152d:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011530:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011534:	c6 05 d8 c8 02 c0 43 	mov    BYTE PTR ds:0xc002c8d8,0x43
c001153b:	c1 e2 0b             	shl    edx,0xb
c001153e:	a3 d4 c8 02 c0       	mov    ds:0xc002c8d4,eax
c0011543:	89 15 d0 c8 02 c0    	mov    DWORD PTR ds:0xc002c8d0,edx
c0011549:	c7 05 cc c8 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002c8cc,0x8
c0011553:	c1 ea 08             	shr    edx,0x8
c0011556:	89 14 24             	mov    DWORD PTR [esp],edx
c0011559:	e8 3b e0 ff ff       	call   c000f599 <malloc>
c001155e:	83 c4 0c             	add    esp,0xc
c0011561:	89 c1                	mov    ecx,eax
c0011563:	a3 8c da 02 c0       	mov    ds:0xc002da8c,eax
c0011568:	31 d2                	xor    edx,edx
c001156a:	a1 d0 c8 02 c0       	mov    eax,ds:0xc002c8d0
c001156f:	f7 35 cc c8 02 c0    	div    DWORD PTR ds:0xc002c8cc
c0011575:	c1 e8 05             	shr    eax,0x5
c0011578:	50                   	push   eax
c0011579:	6a 00                	push   0x0
c001157b:	51                   	push   ecx
c001157c:	e8 cf f1 fe ff       	call   c0000750 <memset>
c0011581:	83 c4 20             	add    esp,0x20
c0011584:	5b                   	pop    ebx
c0011585:	5e                   	pop    esi
c0011586:	5f                   	pop    edi
c0011587:	c3                   	ret    
c0011588:	83 ec 0c             	sub    esp,0xc
c001158b:	68 7d a4 02 c0       	push   0xc002a47d
c0011590:	e8 a4 88 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c0011595:	83 c4 10             	add    esp,0x10
c0011598:	e9 36 ff ff ff       	jmp    c00114d3 <Virt::setupPageSwapping(int)+0xa8>
c001159d:	83 ec 0c             	sub    esp,0xc
c00115a0:	68 62 a4 02 c0       	push   0xc002a462
c00115a5:	e8 8f 88 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c00115aa:	83 c4 10             	add    esp,0x10
c00115ad:	e9 bc fe ff ff       	jmp    c001146e <Virt::setupPageSwapping(int)+0x43>

c00115b2 <VAS::VAS()>:
c00115b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115b6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115c1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00115c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115cc:	a3 90 da 02 c0       	mov    ds:0xc002da90,eax
c00115d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115d5:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00115d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115dd:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00115e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115e4:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00115eb:	90                   	nop
c00115ec:	c3                   	ret    
c00115ed:	90                   	nop

c00115ee <VAS::VAS(VAS*)>:
c00115ee:	83 ec 0c             	sub    esp,0xc
c00115f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115f5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011600:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011607:	83 ec 0c             	sub    esp,0xc
c001160a:	68 9c a2 02 c0       	push   0xc002a29c
c001160f:	e8 25 88 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c0011614:	83 c4 10             	add    esp,0x10
c0011617:	90                   	nop
c0011618:	83 c4 0c             	add    esp,0xc
c001161b:	c3                   	ret    

c001161c <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001161c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011620:	89 c2                	mov    edx,eax
c0011622:	c1 e8 0a             	shr    eax,0xa
c0011625:	c1 ea 16             	shr    edx,0x16
c0011628:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001162d:	19 c9                	sbb    ecx,ecx
c001162f:	c1 e2 0c             	shl    edx,0xc
c0011632:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011638:	25 fc 0f 00 00       	and    eax,0xffc
c001163d:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011644:	01 d0                	add    eax,edx
c0011646:	c3                   	ret    
c0011647:	90                   	nop

c0011648 <VAS::getPageTableEntry(unsigned long)>:
c0011648:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001164c:	89 ca                	mov    edx,ecx
c001164e:	c1 e9 0a             	shr    ecx,0xa
c0011651:	c1 ea 16             	shr    edx,0x16
c0011654:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c001165a:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011660:	c1 e0 0c             	shl    eax,0xc
c0011663:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011666:	c3                   	ret    

c0011667 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011667:	57                   	push   edi
c0011668:	56                   	push   esi
c0011669:	be 01 00 00 00       	mov    esi,0x1
c001166e:	53                   	push   ebx
c001166f:	83 ec 10             	sub    esp,0x10
c0011672:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011676:	c1 eb 0c             	shr    ebx,0xc
c0011679:	eb 3f                	jmp    c00116ba <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c001167b:	83 ec 08             	sub    esp,0x8
c001167e:	57                   	push   edi
c001167f:	ff 35 90 da 02 c0    	push   DWORD PTR ds:0xc002da90
c0011685:	e8 be ff ff ff       	call   c0011648 <VAS::getPageTableEntry(unsigned long)>
c001168a:	83 c4 10             	add    esp,0x10
c001168d:	8b 00                	mov    eax,DWORD PTR [eax]
c001168f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011693:	f6 c4 04             	test   ah,0x4
c0011696:	75 5f                	jne    c00116f7 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011698:	80 fa 04             	cmp    dl,0x4
c001169b:	74 78                	je     c0011715 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c001169d:	80 fa 02             	cmp    dl,0x2
c00116a0:	0f 84 88 00 00 00    	je     c001172e <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00116a6:	80 fa 03             	cmp    dl,0x3
c00116a9:	0f 84 ad 00 00 00    	je     c001175c <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c00116af:	fe ca                	dec    dl
c00116b1:	0f 84 92 00 00 00    	je     c0011749 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00116b7:	43                   	inc    ebx
c00116b8:	31 f6                	xor    esi,esi
c00116ba:	53                   	push   ebx
c00116bb:	89 df                	mov    edi,ebx
c00116bd:	e8 3b fb ff ff       	call   c00111fd <Virt::getPageState(unsigned long)>
c00116c2:	c1 e7 0c             	shl    edi,0xc
c00116c5:	59                   	pop    ecx
c00116c6:	84 c0                	test   al,al
c00116c8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00116cc:	75 ad                	jne    c001167b <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00116ce:	83 ec 0c             	sub    esp,0xc
c00116d1:	68 83 a4 02 c0       	push   0xc002a483
c00116d6:	e8 5e 87 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c00116db:	58                   	pop    eax
c00116dc:	5a                   	pop    edx
c00116dd:	57                   	push   edi
c00116de:	ff 35 90 da 02 c0    	push   DWORD PTR ds:0xc002da90
c00116e4:	e8 5f ff ff ff       	call   c0011648 <VAS::getPageTableEntry(unsigned long)>
c00116e9:	83 c4 10             	add    esp,0x10
c00116ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00116ee:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00116f2:	f6 c4 04             	test   ah,0x4
c00116f5:	74 c0                	je     c00116b7 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116f7:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00116fb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011700:	83 ec 0c             	sub    esp,0xc
c0011703:	50                   	push   eax
c0011704:	e8 f7 e1 ff ff       	call   c000f900 <Phys::freePage(unsigned long)>
c0011709:	83 c4 10             	add    esp,0x10
c001170c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011710:	80 fa 04             	cmp    dl,0x4
c0011713:	75 88                	jne    c001169d <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011715:	89 f0                	mov    eax,esi
c0011717:	84 c0                	test   al,al
c0011719:	75 47                	jne    c0011762 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c001171b:	c7 44 24 20 c0 a2 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a2c0
c0011723:	83 c4 10             	add    esp,0x10
c0011726:	5b                   	pop    ebx
c0011727:	5e                   	pop    esi
c0011728:	5f                   	pop    edi
c0011729:	e9 0b 87 00 00       	jmp    c0019e39 <Krnl::panic(char const*)>
c001172e:	89 f0                	mov    eax,esi
c0011730:	84 c0                	test   al,al
c0011732:	75 15                	jne    c0011749 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011734:	83 ec 0c             	sub    esp,0xc
c0011737:	68 9f a4 02 c0       	push   0xc002a49f
c001173c:	e8 f8 86 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c0011741:	83 c4 10             	add    esp,0x10
c0011744:	e9 6e ff ff ff       	jmp    c00116b7 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011749:	83 ec 08             	sub    esp,0x8
c001174c:	6a 00                	push   0x0
c001174e:	53                   	push   ebx
c001174f:	e8 74 fa ff ff       	call   c00111c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011754:	83 c4 10             	add    esp,0x10
c0011757:	e9 5b ff ff ff       	jmp    c00116b7 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001175c:	89 f0                	mov    eax,esi
c001175e:	84 c0                	test   al,al
c0011760:	75 15                	jne    c0011777 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011762:	83 ec 08             	sub    esp,0x8
c0011765:	6a 00                	push   0x0
c0011767:	53                   	push   ebx
c0011768:	e8 5b fa ff ff       	call   c00111c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001176d:	83 c4 10             	add    esp,0x10
c0011770:	83 c4 10             	add    esp,0x10
c0011773:	5b                   	pop    ebx
c0011774:	5e                   	pop    esi
c0011775:	5f                   	pop    edi
c0011776:	c3                   	ret    
c0011777:	c7 44 24 20 bb a4 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a4bb
c001177f:	83 c4 10             	add    esp,0x10
c0011782:	5b                   	pop    ebx
c0011783:	5e                   	pop    esi
c0011784:	5f                   	pop    edi
c0011785:	e9 af 86 00 00       	jmp    c0019e39 <Krnl::panic(char const*)>

c001178a <VAS::freeAllocatedPages(unsigned long)>:
c001178a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001178e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011792:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011796:	74 09                	je     c00117a1 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011798:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001179c:	e9 c6 fe ff ff       	jmp    c0011667 <Virt::freeKernelVirtualPages(unsigned long)>
c00117a1:	c7 44 24 04 e4 a2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a2e4
c00117a9:	e9 1f 0f 00 00       	jmp    c00126cd <Dbg::kprintf(char const*, ...)>

c00117ae <VAS::virtualToPhysical(unsigned long)>:
c00117ae:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00117b2:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00117b6:	e8 8d fe ff ff       	call   c0011648 <VAS::getPageTableEntry(unsigned long)>
c00117bb:	5a                   	pop    edx
c00117bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00117be:	59                   	pop    ecx
c00117bf:	25 00 f0 ff ff       	and    eax,0xfffff000
c00117c4:	c3                   	ret    
c00117c5:	90                   	nop

c00117c6 <VAS::reflagRange(unsigned long, int, int, int)>:
c00117c6:	55                   	push   ebp
c00117c7:	57                   	push   edi
c00117c8:	56                   	push   esi
c00117c9:	53                   	push   ebx
c00117ca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00117ce:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00117d2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00117d6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00117da:	85 db                	test   ebx,ebx
c00117dc:	7e 22                	jle    c0011800 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00117de:	c1 e3 0c             	shl    ebx,0xc
c00117e1:	01 f3                	add    ebx,esi
c00117e3:	56                   	push   esi
c00117e4:	81 c6 00 10 00 00    	add    esi,0x1000
c00117ea:	55                   	push   ebp
c00117eb:	e8 58 fe ff ff       	call   c0011648 <VAS::getPageTableEntry(unsigned long)>
c00117f0:	5a                   	pop    edx
c00117f1:	59                   	pop    ecx
c00117f2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00117f4:	21 f9                	and    ecx,edi
c00117f6:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00117fa:	39 f3                	cmp    ebx,esi
c00117fc:	89 08                	mov    DWORD PTR [eax],ecx
c00117fe:	75 e3                	jne    c00117e3 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011800:	5b                   	pop    ebx
c0011801:	5e                   	pop    esi
c0011802:	5f                   	pop    edi
c0011803:	5d                   	pop    ebp
c0011804:	c3                   	ret    
c0011805:	90                   	nop

c0011806 <VAS::setToWriteCombining(unsigned long, int)>:
c0011806:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c001180b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011811:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011818:	75 01                	jne    c001181b <VAS::setToWriteCombining(unsigned long, int)+0x15>
c001181a:	c3                   	ret    
c001181b:	68 80 00 00 00       	push   0x80
c0011820:	6a ff                	push   0xffffffff
c0011822:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011826:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001182a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001182e:	e8 93 ff ff ff       	call   c00117c6 <VAS::reflagRange(unsigned long, int, int, int)>
c0011833:	83 c4 14             	add    esp,0x14
c0011836:	c3                   	ret    
c0011837:	90                   	nop

c0011838 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011838:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001183d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011841:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011844:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011848:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c001184b:	19 c0                	sbb    eax,eax
c001184d:	83 ca 03             	or     edx,0x3
c0011850:	83 e0 fc             	and    eax,0xfffffffc
c0011853:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c001185a:	0f 20 d8             	mov    eax,cr3
c001185d:	0f 22 d8             	mov    cr3,eax
c0011860:	c3                   	ret    
c0011861:	90                   	nop

c0011862 <VAS::~VAS()>:
c0011862:	83 ec 2c             	sub    esp,0x2c
c0011865:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001186d:	fa                   	cli    
c001186e:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c0011873:	40                   	inc    eax
c0011874:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c0011879:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001187e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011880:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011883:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011889:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001188d:	6a 01                	push   0x1
c001188f:	50                   	push   eax
c0011890:	e8 a3 ff ff ff       	call   c0011838 <VAS::mapOtherVASIn(bool, VAS*)>
c0011895:	83 c4 0c             	add    esp,0xc
c0011898:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00118a0:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00118a8:	0f 8f d4 00 00 00    	jg     c0011982 <VAS::~VAS()+0x120>
c00118ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118b2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00118b5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00118b9:	c1 e2 02             	shl    edx,0x2
c00118bc:	01 d0                	add    eax,edx
c00118be:	8b 00                	mov    eax,DWORD PTR [eax]
c00118c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00118c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118c8:	83 e0 01             	and    eax,0x1
c00118cb:	0f 84 a8 00 00 00    	je     c0011979 <VAS::~VAS()+0x117>
c00118d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00118d9:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00118e1:	7f 72                	jg     c0011955 <VAS::~VAS()+0xf3>
c00118e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00118e7:	c1 e0 0a             	shl    eax,0xa
c00118ea:	89 c2                	mov    edx,eax
c00118ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00118f0:	01 d0                	add    eax,edx
c00118f2:	c1 e0 0c             	shl    eax,0xc
c00118f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00118f9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00118fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0011900:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011903:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011909:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001190d:	6a 01                	push   0x1
c001190f:	50                   	push   eax
c0011910:	e8 07 fd ff ff       	call   c001161c <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011915:	83 c4 0c             	add    esp,0xc
c0011918:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001191c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011920:	8b 00                	mov    eax,DWORD PTR [eax]
c0011922:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011926:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001192a:	25 01 04 00 00       	and    eax,0x401
c001192f:	3d 01 04 00 00       	cmp    eax,0x401
c0011934:	75 19                	jne    c001194f <VAS::~VAS()+0xed>
c0011936:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001193a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001193f:	83 ec 0c             	sub    esp,0xc
c0011942:	50                   	push   eax
c0011943:	e8 b8 df ff ff       	call   c000f900 <Phys::freePage(unsigned long)>
c0011948:	83 c4 10             	add    esp,0x10
c001194b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001194f:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011953:	eb 84                	jmp    c00118d9 <VAS::~VAS()+0x77>
c0011955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011959:	25 00 04 00 00       	and    eax,0x400
c001195e:	74 19                	je     c0011979 <VAS::~VAS()+0x117>
c0011960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011964:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011969:	83 ec 0c             	sub    esp,0xc
c001196c:	50                   	push   eax
c001196d:	e8 8e df ff ff       	call   c000f900 <Phys::freePage(unsigned long)>
c0011972:	83 c4 10             	add    esp,0x10
c0011975:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011979:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001197d:	e9 1e ff ff ff       	jmp    c00118a0 <VAS::~VAS()+0x3e>
c0011982:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011986:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011989:	83 ec 0c             	sub    esp,0xc
c001198c:	50                   	push   eax
c001198d:	e8 d5 fc ff ff       	call   c0011667 <Virt::freeKernelVirtualPages(unsigned long)>
c0011992:	83 c4 10             	add    esp,0x10
c0011995:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011999:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001199c:	83 ec 0c             	sub    esp,0xc
c001199f:	50                   	push   eax
c00119a0:	e8 5b df ff ff       	call   c000f900 <Phys::freePage(unsigned long)>
c00119a5:	83 c4 10             	add    esp,0x10
c00119a8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00119ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00119b0:	c1 e0 02             	shl    eax,0x2
c00119b3:	83 ec 08             	sub    esp,0x8
c00119b6:	50                   	push   eax
c00119b7:	68 08 a3 02 c0       	push   0xc002a308
c00119bc:	e8 0c 0d 00 00       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c00119c1:	83 c4 10             	add    esp,0x10
c00119c4:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c00119c9:	48                   	dec    eax
c00119ca:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c00119cf:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c00119d4:	85 c0                	test   eax,eax
c00119d6:	75 01                	jne    c00119d9 <VAS::~VAS()+0x177>
c00119d8:	fb                   	sti    
c00119d9:	90                   	nop
c00119da:	83 c4 2c             	add    esp,0x2c
c00119dd:	c3                   	ret    

c00119de <VAS::mapPage(unsigned long, unsigned long, int)>:
c00119de:	55                   	push   ebp
c00119df:	57                   	push   edi
c00119e0:	56                   	push   esi
c00119e1:	53                   	push   ebx
c00119e2:	83 ec 1c             	sub    esp,0x1c
c00119e5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00119e9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00119ed:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00119f3:	77 08                	ja     c00119fd <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c00119f5:	0f 20 d8             	mov    eax,cr3
c00119f8:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c00119fb:	75 47                	jne    c0011a44 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00119fd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a01:	09 d8                	or     eax,ebx
c0011a03:	a9 ff 0f 00 00       	test   eax,0xfff
c0011a08:	75 57                	jne    c0011a61 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011a0a:	89 de                	mov    esi,ebx
c0011a0c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011a0f:	c1 ee 16             	shr    esi,0x16
c0011a12:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011a19:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011a1d:	74 54                	je     c0011a73 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011a1f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011a23:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011a29:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011a2d:	c1 e6 0c             	shl    esi,0xc
c0011a30:	c1 eb 0a             	shr    ebx,0xa
c0011a33:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011a39:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011a3c:	83 c4 1c             	add    esp,0x1c
c0011a3f:	5b                   	pop    ebx
c0011a40:	5e                   	pop    esi
c0011a41:	5f                   	pop    edi
c0011a42:	5d                   	pop    ebp
c0011a43:	c3                   	ret    
c0011a44:	83 ec 0c             	sub    esp,0xc
c0011a47:	68 28 a3 02 c0       	push   0xc002a328
c0011a4c:	e8 7c 0c 00 00       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0011a51:	83 c4 10             	add    esp,0x10
c0011a54:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a58:	09 d8                	or     eax,ebx
c0011a5a:	a9 ff 0f 00 00       	test   eax,0xfff
c0011a5f:	74 a9                	je     c0011a0a <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011a61:	83 ec 0c             	sub    esp,0xc
c0011a64:	68 90 a3 02 c0       	push   0xc002a390
c0011a69:	e8 cb 83 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c0011a6e:	83 c4 10             	add    esp,0x10
c0011a71:	eb 97                	jmp    c0011a0a <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011a73:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011a77:	e8 f5 de ff ff       	call   c000f971 <Phys::allocatePage()>
c0011a7c:	83 ec 0c             	sub    esp,0xc
c0011a7f:	89 c5                	mov    ebp,eax
c0011a81:	8b 0d 90 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da90
c0011a87:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011a8b:	6a 01                	push   0x1
c0011a8d:	e8 8f f7 ff ff       	call   c0011221 <Virt::allocateKernelVirtualPages(int)>
c0011a92:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011a99:	6a 01                	push   0x1
c0011a9b:	50                   	push   eax
c0011a9c:	55                   	push   ebp
c0011a9d:	81 cd 07 04 00 00    	or     ebp,0x407
c0011aa3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011aa7:	51                   	push   ecx
c0011aa8:	e8 27 02 00 00       	call   c0011cd4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011aad:	83 c4 1c             	add    esp,0x1c
c0011ab0:	68 00 10 00 00       	push   0x1000
c0011ab5:	6a 00                	push   0x0
c0011ab7:	50                   	push   eax
c0011ab8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011abc:	e8 8f ec fe ff       	call   c0000750 <memset>
c0011ac1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011ac5:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011ac8:	e8 9a fb ff ff       	call   c0011667 <Virt::freeKernelVirtualPages(unsigned long)>
c0011acd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011ad4:	83 c4 10             	add    esp,0x10
c0011ad7:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011ada:	e9 40 ff ff ff       	jmp    c0011a1f <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011adf:	90                   	nop

c0011ae0 <VAS::allocatePages(int, int)>:
c0011ae0:	55                   	push   ebp
c0011ae1:	57                   	push   edi
c0011ae2:	56                   	push   esi
c0011ae3:	53                   	push   ebx
c0011ae4:	83 ec 1c             	sub    esp,0x1c
c0011ae7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011aeb:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0011af0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011af6:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011afc:	83 e0 01             	and    eax,0x1
c0011aff:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011b03:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011b07:	0f 85 cc 00 00 00    	jne    c0011bd9 <VAS::allocatePages(int, int)+0xf9>
c0011b0d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011b10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011b14:	85 c0                	test   eax,eax
c0011b16:	0f 84 a1 00 00 00    	je     c0011bbd <VAS::allocatePages(int, int)+0xdd>
c0011b1c:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011b20:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011b24:	c1 e6 0c             	shl    esi,0xc
c0011b27:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011b2b:	85 c0                	test   eax,eax
c0011b2d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011b30:	7e 33                	jle    c0011b65 <VAS::allocatePages(int, int)+0x85>
c0011b32:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011b36:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b3a:	81 cd 00 04 00 00    	or     ebp,0x400
c0011b40:	e8 2c de ff ff       	call   c000f971 <Phys::allocatePage()>
c0011b45:	55                   	push   ebp
c0011b46:	53                   	push   ebx
c0011b47:	50                   	push   eax
c0011b48:	57                   	push   edi
c0011b49:	e8 90 fe ff ff       	call   c00119de <VAS::mapPage(unsigned long, unsigned long, int)>
c0011b4e:	83 c4 10             	add    esp,0x10
c0011b51:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b56:	74 03                	je     c0011b5b <VAS::allocatePages(int, int)+0x7b>
c0011b58:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b5b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b61:	39 de                	cmp    esi,ebx
c0011b63:	75 db                	jne    c0011b40 <VAS::allocatePages(int, int)+0x60>
c0011b65:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b6a:	75 12                	jne    c0011b7e <VAS::allocatePages(int, int)+0x9e>
c0011b6c:	0f 20 d8             	mov    eax,cr3
c0011b6f:	0f 22 d8             	mov    cr3,eax
c0011b72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b76:	83 c4 1c             	add    esp,0x1c
c0011b79:	5b                   	pop    ebx
c0011b7a:	5e                   	pop    esi
c0011b7b:	5f                   	pop    edi
c0011b7c:	5d                   	pop    ebp
c0011b7d:	c3                   	ret    
c0011b7e:	c1 ee 0a             	shr    esi,0xa
c0011b81:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b85:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011b8b:	c1 eb 0a             	shr    ebx,0xa
c0011b8e:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011b94:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011b9a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011ba0:	39 c3                	cmp    ebx,eax
c0011ba2:	77 ce                	ja     c0011b72 <VAS::allocatePages(int, int)+0x92>
c0011ba4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ba7:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bad:	39 d8                	cmp    eax,ebx
c0011baf:	73 f3                	jae    c0011ba4 <VAS::allocatePages(int, int)+0xc4>
c0011bb1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011bb5:	83 c4 1c             	add    esp,0x1c
c0011bb8:	5b                   	pop    ebx
c0011bb9:	5e                   	pop    esi
c0011bba:	5f                   	pop    edi
c0011bbb:	5d                   	pop    ebp
c0011bbc:	c3                   	ret    
c0011bbd:	83 ec 0c             	sub    esp,0xc
c0011bc0:	68 b4 a3 02 c0       	push   0xc002a3b4
c0011bc5:	e8 6f 82 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c0011bca:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011bcd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011bd1:	83 c4 10             	add    esp,0x10
c0011bd4:	e9 43 ff ff ff       	jmp    c0011b1c <VAS::allocatePages(int, int)+0x3c>
c0011bd9:	83 ec 0c             	sub    esp,0xc
c0011bdc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011be0:	e8 3c f6 ff ff       	call   c0011221 <Virt::allocateKernelVirtualPages(int)>
c0011be5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011be9:	83 c4 10             	add    esp,0x10
c0011bec:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011bf1:	0f 87 9b 00 00 00    	ja     c0011c92 <VAS::allocatePages(int, int)+0x1b2>
c0011bf7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011bfb:	85 d2                	test   edx,edx
c0011bfd:	7e 3c                	jle    c0011c3b <VAS::allocatePages(int, int)+0x15b>
c0011bff:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011c03:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011c07:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011c0b:	c1 e5 0c             	shl    ebp,0xc
c0011c0e:	81 ce 00 04 00 00    	or     esi,0x400
c0011c14:	01 dd                	add    ebp,ebx
c0011c16:	e8 56 dd ff ff       	call   c000f971 <Phys::allocatePage()>
c0011c1b:	56                   	push   esi
c0011c1c:	53                   	push   ebx
c0011c1d:	50                   	push   eax
c0011c1e:	57                   	push   edi
c0011c1f:	e8 ba fd ff ff       	call   c00119de <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c24:	83 c4 10             	add    esp,0x10
c0011c27:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c2c:	74 03                	je     c0011c31 <VAS::allocatePages(int, int)+0x151>
c0011c2e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c31:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c37:	39 dd                	cmp    ebp,ebx
c0011c39:	75 db                	jne    c0011c16 <VAS::allocatePages(int, int)+0x136>
c0011c3b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c40:	0f 84 26 ff ff ff    	je     c0011b6c <VAS::allocatePages(int, int)+0x8c>
c0011c46:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011c4a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c4e:	89 d3                	mov    ebx,edx
c0011c50:	c1 e0 0c             	shl    eax,0xc
c0011c53:	c1 eb 0a             	shr    ebx,0xa
c0011c56:	01 d0                	add    eax,edx
c0011c58:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011c5e:	c1 e8 0a             	shr    eax,0xa
c0011c61:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011c67:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c6c:	2d 00 00 40 00       	sub    eax,0x400000
c0011c71:	39 c3                	cmp    ebx,eax
c0011c73:	0f 87 f9 fe ff ff    	ja     c0011b72 <VAS::allocatePages(int, int)+0x92>
c0011c79:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c7c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c82:	39 d8                	cmp    eax,ebx
c0011c84:	73 f3                	jae    c0011c79 <VAS::allocatePages(int, int)+0x199>
c0011c86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c8a:	83 c4 1c             	add    esp,0x1c
c0011c8d:	5b                   	pop    ebx
c0011c8e:	5e                   	pop    esi
c0011c8f:	5f                   	pop    edi
c0011c90:	5d                   	pop    ebp
c0011c91:	c3                   	ret    
c0011c92:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0011c97:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c9d:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011ca4:	0f 84 4d ff ff ff    	je     c0011bf7 <VAS::allocatePages(int, int)+0x117>
c0011caa:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011cb2:	e9 40 ff ff ff       	jmp    c0011bf7 <VAS::allocatePages(int, int)+0x117>
c0011cb7:	90                   	nop

c0011cb8 <VAS::setCPUSpecific(unsigned long)>:
c0011cb8:	83 ec 0c             	sub    esp,0xc
c0011cbb:	6a 05                	push   0x5
c0011cbd:	68 00 00 40 c2       	push   0xc2400000
c0011cc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011cc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011cca:	e8 0f fd ff ff       	call   c00119de <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ccf:	83 c4 1c             	add    esp,0x1c
c0011cd2:	c3                   	ret    
c0011cd3:	90                   	nop

c0011cd4 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011cd4:	55                   	push   ebp
c0011cd5:	57                   	push   edi
c0011cd6:	56                   	push   esi
c0011cd7:	53                   	push   ebx
c0011cd8:	83 ec 1c             	sub    esp,0x1c
c0011cdb:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0011ce0:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011ce4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011cea:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011cee:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011cf4:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011cf8:	83 e0 01             	and    eax,0x1
c0011cfb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011cff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d03:	85 c0                	test   eax,eax
c0011d05:	7e 39                	jle    c0011d40 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011d07:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d0b:	89 f3                	mov    ebx,esi
c0011d0d:	c1 e0 0c             	shl    eax,0xc
c0011d10:	01 f0                	add    eax,esi
c0011d12:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d16:	55                   	push   ebp
c0011d17:	53                   	push   ebx
c0011d18:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d1c:	29 f0                	sub    eax,esi
c0011d1e:	01 d8                	add    eax,ebx
c0011d20:	50                   	push   eax
c0011d21:	57                   	push   edi
c0011d22:	e8 b7 fc ff ff       	call   c00119de <VAS::mapPage(unsigned long, unsigned long, int)>
c0011d27:	83 c4 10             	add    esp,0x10
c0011d2a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011d2f:	74 03                	je     c0011d34 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011d31:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d34:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d3a:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011d3e:	75 d6                	jne    c0011d16 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0011d40:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011d45:	75 10                	jne    c0011d57 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0011d47:	0f 20 d8             	mov    eax,cr3
c0011d4a:	0f 22 d8             	mov    cr3,eax
c0011d4d:	83 c4 1c             	add    esp,0x1c
c0011d50:	89 f0                	mov    eax,esi
c0011d52:	5b                   	pop    ebx
c0011d53:	5e                   	pop    esi
c0011d54:	5f                   	pop    edi
c0011d55:	5d                   	pop    ebp
c0011d56:	c3                   	ret    
c0011d57:	89 f3                	mov    ebx,esi
c0011d59:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d5d:	c1 eb 0a             	shr    ebx,0xa
c0011d60:	c1 e0 0c             	shl    eax,0xc
c0011d63:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011d69:	01 f0                	add    eax,esi
c0011d6b:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011d71:	c1 e8 0a             	shr    eax,0xa
c0011d74:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011d79:	2d 00 00 40 00       	sub    eax,0x400000
c0011d7e:	39 c3                	cmp    ebx,eax
c0011d80:	77 cb                	ja     c0011d4d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0011d82:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d85:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d8b:	39 d8                	cmp    eax,ebx
c0011d8d:	73 f3                	jae    c0011d82 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0011d8f:	83 c4 1c             	add    esp,0x1c
c0011d92:	89 f0                	mov    eax,esi
c0011d94:	5b                   	pop    ebx
c0011d95:	5e                   	pop    esi
c0011d96:	5f                   	pop    edi
c0011d97:	5d                   	pop    ebp
c0011d98:	c3                   	ret    
c0011d99:	90                   	nop

c0011d9a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011d9a:	55                   	push   ebp
c0011d9b:	57                   	push   edi
c0011d9c:	56                   	push   esi
c0011d9d:	53                   	push   ebx
c0011d9e:	83 ec 1c             	sub    esp,0x1c
c0011da1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011da5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011da9:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011dad:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011db1:	a9 ff 0f 00 00       	test   eax,0xfff
c0011db6:	75 4a                	jne    c0011e02 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011db8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011dbc:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011dbf:	c1 eb 16             	shr    ebx,0x16
c0011dc2:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011dc9:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011dcd:	74 4d                	je     c0011e1c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011dcf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011dd3:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011dd7:	c1 e8 0a             	shr    eax,0xa
c0011dda:	80 fa 01             	cmp    dl,0x1
c0011ddd:	19 d2                	sbb    edx,edx
c0011ddf:	c1 e3 0c             	shl    ebx,0xc
c0011de2:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011de6:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011dec:	25 fc 0f 00 00       	and    eax,0xffc
c0011df1:	01 d8                	add    eax,ebx
c0011df3:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011dfa:	83 c4 1c             	add    esp,0x1c
c0011dfd:	5b                   	pop    ebx
c0011dfe:	5e                   	pop    esi
c0011dff:	5f                   	pop    edi
c0011e00:	5d                   	pop    ebp
c0011e01:	c3                   	ret    
c0011e02:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011e06:	83 ec 0c             	sub    esp,0xc
c0011e09:	68 e0 a3 02 c0       	push   0xc002a3e0
c0011e0e:	e8 26 80 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c0011e13:	83 c4 10             	add    esp,0x10
c0011e16:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011e1a:	eb 9c                	jmp    c0011db8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011e1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011e20:	e8 4c db ff ff       	call   c000f971 <Phys::allocatePage()>
c0011e25:	83 ec 0c             	sub    esp,0xc
c0011e28:	89 c5                	mov    ebp,eax
c0011e2a:	8b 0d 90 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da90
c0011e30:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011e34:	6a 01                	push   0x1
c0011e36:	e8 e6 f3 ff ff       	call   c0011221 <Virt::allocateKernelVirtualPages(int)>
c0011e3b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011e42:	6a 01                	push   0x1
c0011e44:	50                   	push   eax
c0011e45:	55                   	push   ebp
c0011e46:	81 cd 07 04 00 00    	or     ebp,0x407
c0011e4c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011e50:	51                   	push   ecx
c0011e51:	e8 7e fe ff ff       	call   c0011cd4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e56:	83 c4 1c             	add    esp,0x1c
c0011e59:	68 00 10 00 00       	push   0x1000
c0011e5e:	6a 00                	push   0x0
c0011e60:	50                   	push   eax
c0011e61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e65:	e8 e6 e8 fe ff       	call   c0000750 <memset>
c0011e6a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011e6e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011e71:	e8 f1 f7 ff ff       	call   c0011667 <Virt::freeKernelVirtualPages(unsigned long)>
c0011e76:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011e79:	83 c4 10             	add    esp,0x10
c0011e7c:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011e7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011e83:	e9 47 ff ff ff       	jmp    c0011dcf <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0011e88 <VAS::VAS(bool)>:
c0011e88:	53                   	push   ebx
c0011e89:	83 ec 28             	sub    esp,0x28
c0011e8c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e90:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011e94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e98:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ea3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011eaa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011eae:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011eb2:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011eb5:	e8 b7 da ff ff       	call   c000f971 <Phys::allocatePage()>
c0011eba:	89 c2                	mov    edx,eax
c0011ebc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ec0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0011ec3:	8b 1d 90 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da90
c0011ec9:	83 ec 0c             	sub    esp,0xc
c0011ecc:	6a 01                	push   0x1
c0011ece:	e8 4e f3 ff ff       	call   c0011221 <Virt::allocateKernelVirtualPages(int)>
c0011ed3:	83 c4 10             	add    esp,0x10
c0011ed6:	89 c2                	mov    edx,eax
c0011ed8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011edc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011edf:	83 ec 0c             	sub    esp,0xc
c0011ee2:	6a 03                	push   0x3
c0011ee4:	6a 01                	push   0x1
c0011ee6:	52                   	push   edx
c0011ee7:	50                   	push   eax
c0011ee8:	53                   	push   ebx
c0011ee9:	e8 e6 fd ff ff       	call   c0011cd4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011eee:	83 c4 20             	add    esp,0x20
c0011ef1:	89 c2                	mov    edx,eax
c0011ef3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ef7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011efa:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011f02:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011f0a:	7f 1c                	jg     c0011f28 <VAS::VAS(bool)+0xa0>
c0011f0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f10:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f13:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011f17:	c1 e2 02             	shl    edx,0x2
c0011f1a:	01 d0                	add    eax,edx
c0011f1c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011f22:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f26:	eb da                	jmp    c0011f02 <VAS::VAS(bool)+0x7a>
c0011f28:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011f30:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011f38:	7f 7a                	jg     c0011fb4 <VAS::VAS(bool)+0x12c>
c0011f3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f3e:	2d 00 02 00 00       	sub    eax,0x200
c0011f43:	c1 e0 0c             	shl    eax,0xc
c0011f46:	83 c8 03             	or     eax,0x3
c0011f49:	89 c2                	mov    edx,eax
c0011f4b:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0011f50:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f56:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f5c:	83 e0 10             	and    eax,0x10
c0011f5f:	84 c0                	test   al,al
c0011f61:	74 07                	je     c0011f6a <VAS::VAS(bool)+0xe2>
c0011f63:	b8 00 01 00 00       	mov    eax,0x100
c0011f68:	eb 05                	jmp    c0011f6f <VAS::VAS(bool)+0xe7>
c0011f6a:	b8 00 00 00 00       	mov    eax,0x0
c0011f6f:	09 d0                	or     eax,edx
c0011f71:	89 c1                	mov    ecx,eax
c0011f73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f77:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f7a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f7e:	c1 e2 02             	shl    edx,0x2
c0011f81:	01 d0                	add    eax,edx
c0011f83:	89 ca                	mov    edx,ecx
c0011f85:	89 10                	mov    DWORD PTR [eax],edx
c0011f87:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f8b:	2d 40 03 00 00       	sub    eax,0x340
c0011f90:	83 f8 7f             	cmp    eax,0x7f
c0011f93:	77 16                	ja     c0011fab <VAS::VAS(bool)+0x123>
c0011f95:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f99:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f9c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011fa0:	c1 e2 02             	shl    edx,0x2
c0011fa3:	01 d0                	add    eax,edx
c0011fa5:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011fab:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011faf:	e9 7c ff ff ff       	jmp    c0011f30 <VAS::VAS(bool)+0xa8>
c0011fb4:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0011fb9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fbf:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011fc5:	83 e0 10             	and    eax,0x10
c0011fc8:	84 c0                	test   al,al
c0011fca:	74 07                	je     c0011fd3 <VAS::VAS(bool)+0x14b>
c0011fcc:	b8 03 41 00 00       	mov    eax,0x4103
c0011fd1:	eb 05                	jmp    c0011fd8 <VAS::VAS(bool)+0x150>
c0011fd3:	b8 03 40 00 00       	mov    eax,0x4003
c0011fd8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011fdc:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0011fdf:	81 c2 20 0c 00 00    	add    edx,0xc20
c0011fe5:	89 02                	mov    DWORD PTR [edx],eax
c0011fe7:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0011fec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011ff2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0011ff8:	83 ec 08             	sub    esp,0x8
c0011ffb:	50                   	push   eax
c0011ffc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012000:	e8 b3 fc ff ff       	call   c0011cb8 <VAS::setCPUSpecific(unsigned long)>
c0012005:	83 c4 10             	add    esp,0x10
c0012008:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001200c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001200f:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0012014:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001201a:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012020:	83 e0 10             	and    eax,0x10
c0012023:	84 c0                	test   al,al
c0012025:	74 07                	je     c001202e <VAS::VAS(bool)+0x1a6>
c0012027:	b8 00 01 00 00       	mov    eax,0x100
c001202c:	eb 05                	jmp    c0012033 <VAS::VAS(bool)+0x1ab>
c001202e:	b8 00 00 00 00       	mov    eax,0x0
c0012033:	09 c2                	or     edx,eax
c0012035:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012039:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001203c:	05 fc 0f 00 00       	add    eax,0xffc
c0012041:	83 ca 03             	or     edx,0x3
c0012044:	89 10                	mov    DWORD PTR [eax],edx
c0012046:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c001204b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012051:	83 ec 0c             	sub    esp,0xc
c0012054:	50                   	push   eax
c0012055:	e8 ac 1d 00 00       	call   c0013e06 <Device::getName()>
c001205a:	83 c4 10             	add    esp,0x10
c001205d:	83 ec 08             	sub    esp,0x8
c0012060:	68 d5 a4 02 c0       	push   0xc002a4d5
c0012065:	50                   	push   eax
c0012066:	e8 2d e8 fe ff       	call   c0000898 <strcmp>
c001206b:	83 c4 10             	add    esp,0x10
c001206e:	85 c0                	test   eax,eax
c0012070:	0f 94 c0             	sete   al
c0012073:	84 c0                	test   al,al
c0012075:	0f 84 87 00 00 00    	je     c0012102 <VAS::VAS(bool)+0x27a>
c001207b:	fa                   	cli    
c001207c:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c0012081:	40                   	inc    eax
c0012082:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c0012087:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c001208c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012092:	05 7c 09 00 00       	add    eax,0x97c
c0012097:	83 ec 0c             	sub    esp,0xc
c001209a:	50                   	push   eax
c001209b:	e8 7e cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00120a0:	83 c4 10             	add    esp,0x10
c00120a3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120a8:	89 c3                	mov    ebx,eax
c00120aa:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c00120af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120b5:	05 7c 09 00 00       	add    eax,0x97c
c00120ba:	83 ec 0c             	sub    esp,0xc
c00120bd:	50                   	push   eax
c00120be:	e8 5b cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00120c3:	83 c4 10             	add    esp,0x10
c00120c6:	83 ec 08             	sub    esp,0x8
c00120c9:	50                   	push   eax
c00120ca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00120ce:	e8 75 f5 ff ff       	call   c0011648 <VAS::getPageTableEntry(unsigned long)>
c00120d3:	83 c4 10             	add    esp,0x10
c00120d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00120d8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120dd:	6a 11                	push   0x11
c00120df:	53                   	push   ebx
c00120e0:	50                   	push   eax
c00120e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00120e5:	e8 f4 f8 ff ff       	call   c00119de <VAS::mapPage(unsigned long, unsigned long, int)>
c00120ea:	83 c4 10             	add    esp,0x10
c00120ed:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c00120f2:	48                   	dec    eax
c00120f3:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c00120f8:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c00120fd:	85 c0                	test   eax,eax
c00120ff:	75 01                	jne    c0012102 <VAS::VAS(bool)+0x27a>
c0012101:	fb                   	sti    
c0012102:	90                   	nop
c0012103:	83 c4 28             	add    esp,0x28
c0012106:	5b                   	pop    ebx
c0012107:	c3                   	ret    

c0012108 <VAS::evict(unsigned long)>:
c0012108:	55                   	push   ebp
c0012109:	57                   	push   edi
c001210a:	56                   	push   esi
c001210b:	53                   	push   ebx
c001210c:	83 ec 1c             	sub    esp,0x1c
c001210f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012113:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012117:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001211b:	e8 42 f2 ff ff       	call   c0011362 <Virt::allocateSwapfilePage()>
c0012120:	89 c7                	mov    edi,eax
c0012122:	a1 cc c8 02 c0       	mov    eax,ds:0xc002c8cc
c0012127:	85 c0                	test   eax,eax
c0012129:	7e 3d                	jle    c0012168 <VAS::evict(unsigned long)+0x60>
c001212b:	89 ee                	mov    esi,ebp
c001212d:	31 db                	xor    ebx,ebx
c001212f:	83 ec 0c             	sub    esp,0xc
c0012132:	57                   	push   edi
c0012133:	e8 18 f2 ff ff       	call   c0011350 <Virt::swapIDToSector(unsigned long)>
c0012138:	89 34 24             	mov    DWORD PTR [esp],esi
c001213b:	01 d8                	add    eax,ebx
c001213d:	6a 01                	push   0x1
c001213f:	31 d2                	xor    edx,edx
c0012141:	43                   	inc    ebx
c0012142:	52                   	push   edx
c0012143:	81 c6 00 02 00 00    	add    esi,0x200
c0012149:	50                   	push   eax
c001214a:	0f be 05 d8 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8d8
c0012151:	ff 34 85 1c de 02 c0 	push   DWORD PTR [eax*4-0x3ffd21e4]
c0012158:	e8 31 3f 00 00       	call   c001608e <LogicalDisk::write(unsigned long long, int, void*)>
c001215d:	83 c4 20             	add    esp,0x20
c0012160:	39 1d cc c8 02 c0    	cmp    DWORD PTR ds:0xc002c8cc,ebx
c0012166:	7f c7                	jg     c001212f <VAS::evict(unsigned long)+0x27>
c0012168:	83 ec 08             	sub    esp,0x8
c001216b:	c1 e7 0b             	shl    edi,0xb
c001216e:	55                   	push   ebp
c001216f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012173:	e8 d0 f4 ff ff       	call   c0011648 <VAS::getPageTableEntry(unsigned long)>
c0012178:	5a                   	pop    edx
c0012179:	89 c6                	mov    esi,eax
c001217b:	59                   	pop    ecx
c001217c:	ff 30                	push   DWORD PTR [eax]
c001217e:	68 e3 a4 02 c0       	push   0xc002a4e3
c0012183:	e8 45 05 00 00       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0012188:	8b 16                	mov    edx,DWORD PTR [esi]
c001218a:	89 d3                	mov    ebx,edx
c001218c:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012192:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012198:	09 d7                	or     edi,edx
c001219a:	89 3e                	mov    DWORD PTR [esi],edi
c001219c:	5e                   	pop    esi
c001219d:	58                   	pop    eax
c001219e:	57                   	push   edi
c001219f:	68 fc a4 02 c0       	push   0xc002a4fc
c00121a4:	e8 24 05 00 00       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c00121a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00121ac:	ff 05 88 da 02 c0    	inc    DWORD PTR ds:0xc002da88
c00121b2:	e8 49 d7 ff ff       	call   c000f900 <Phys::freePage(unsigned long)>
c00121b7:	0f 20 d8             	mov    eax,cr3
c00121ba:	0f 22 d8             	mov    cr3,eax
c00121bd:	ff 35 88 da 02 c0    	push   DWORD PTR ds:0xc002da88
c00121c3:	55                   	push   ebp
c00121c4:	53                   	push   ebx
c00121c5:	68 04 a4 02 c0       	push   0xc002a404
c00121ca:	e8 fe 04 00 00       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c00121cf:	a1 84 da 02 c0       	mov    eax,ds:0xc002da84
c00121d4:	c7 44 24 50 15 a5 02 c0 	mov    DWORD PTR [esp+0x50],0xc002a515
c00121dc:	8d 50 01             	lea    edx,[eax+0x1]
c00121df:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00121e3:	89 15 84 da 02 c0    	mov    DWORD PTR ds:0xc002da84,edx
c00121e9:	83 c4 3c             	add    esp,0x3c
c00121ec:	5b                   	pop    ebx
c00121ed:	5e                   	pop    esi
c00121ee:	5f                   	pop    edi
c00121ef:	5d                   	pop    ebp
c00121f0:	e9 d8 04 00 00       	jmp    c00126cd <Dbg::kprintf(char const*, ...)>
c00121f5:	90                   	nop

c00121f6 <VAS::tryLoadBackOffDisk(unsigned long)>:
c00121f6:	55                   	push   ebp
c00121f7:	57                   	push   edi
c00121f8:	56                   	push   esi
c00121f9:	53                   	push   ebx
c00121fa:	83 ec 24             	sub    esp,0x24
c00121fd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012201:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012205:	68 26 a5 02 c0       	push   0xc002a526
c001220a:	e8 be 04 00 00       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c001220f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0012213:	58                   	pop    eax
c0012214:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001221a:	5a                   	pop    edx
c001221b:	53                   	push   ebx
c001221c:	56                   	push   esi
c001221d:	e8 26 f4 ff ff       	call   c0011648 <VAS::getPageTableEntry(unsigned long)>
c0012222:	59                   	pop    ecx
c0012223:	89 c5                	mov    ebp,eax
c0012225:	5f                   	pop    edi
c0012226:	ff 30                	push   DWORD PTR [eax]
c0012228:	68 39 a5 02 c0       	push   0xc002a539
c001222d:	e8 9b 04 00 00       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0012232:	83 c4 10             	add    esp,0x10
c0012235:	85 db                	test   ebx,ebx
c0012237:	74 1d                	je     c0012256 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c0012239:	8b 7d 00             	mov    edi,DWORD PTR [ebp+0x0]
c001223c:	31 c0                	xor    eax,eax
c001223e:	89 fa                	mov    edx,edi
c0012240:	81 e2 01 04 00 00    	and    edx,0x401
c0012246:	81 fa 00 04 00 00    	cmp    edx,0x400
c001224c:	74 12                	je     c0012260 <VAS::tryLoadBackOffDisk(unsigned long)+0x6a>
c001224e:	83 c4 1c             	add    esp,0x1c
c0012251:	5b                   	pop    ebx
c0012252:	5e                   	pop    esi
c0012253:	5f                   	pop    edi
c0012254:	5d                   	pop    ebp
c0012255:	c3                   	ret    
c0012256:	83 c4 1c             	add    esp,0x1c
c0012259:	31 c0                	xor    eax,eax
c001225b:	5b                   	pop    ebx
c001225c:	5e                   	pop    esi
c001225d:	5f                   	pop    edi
c001225e:	5d                   	pop    ebp
c001225f:	c3                   	ret    
c0012260:	83 ec 08             	sub    esp,0x8
c0012263:	c1 ef 0b             	shr    edi,0xb
c0012266:	57                   	push   edi
c0012267:	68 47 a5 02 c0       	push   0xc002a547
c001226c:	e8 5c 04 00 00       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0012271:	e8 fb d6 ff ff       	call   c000f971 <Phys::allocatePage()>
c0012276:	59                   	pop    ecx
c0012277:	5a                   	pop    edx
c0012278:	50                   	push   eax
c0012279:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001227d:	68 52 a5 02 c0       	push   0xc002a552
c0012282:	e8 46 04 00 00       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0012287:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001228b:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001228e:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012294:	09 d0                	or     eax,edx
c0012296:	0d 01 08 00 00       	or     eax,0x801
c001229b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001229e:	59                   	pop    ecx
c001229f:	5d                   	pop    ebp
c00122a0:	50                   	push   eax
c00122a1:	68 67 a5 02 c0       	push   0xc002a567
c00122a6:	e8 22 04 00 00       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c00122ab:	0f 20 d8             	mov    eax,cr3
c00122ae:	83 c4 0c             	add    esp,0xc
c00122b1:	56                   	push   esi
c00122b2:	50                   	push   eax
c00122b3:	68 7f a5 02 c0       	push   0xc002a57f
c00122b8:	e8 10 04 00 00       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c00122bd:	c7 04 24 97 a5 02 c0 	mov    DWORD PTR [esp],0xc002a597
c00122c4:	e8 04 04 00 00       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c00122c9:	83 c4 10             	add    esp,0x10
c00122cc:	a1 cc c8 02 c0       	mov    eax,ds:0xc002c8cc
c00122d1:	85 c0                	test   eax,eax
c00122d3:	7e 3d                	jle    c0012312 <VAS::tryLoadBackOffDisk(unsigned long)+0x11c>
c00122d5:	89 dd                	mov    ebp,ebx
c00122d7:	31 f6                	xor    esi,esi
c00122d9:	83 ec 0c             	sub    esp,0xc
c00122dc:	57                   	push   edi
c00122dd:	e8 6e f0 ff ff       	call   c0011350 <Virt::swapIDToSector(unsigned long)>
c00122e2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00122e5:	01 f0                	add    eax,esi
c00122e7:	6a 01                	push   0x1
c00122e9:	31 d2                	xor    edx,edx
c00122eb:	46                   	inc    esi
c00122ec:	52                   	push   edx
c00122ed:	81 c5 00 02 00 00    	add    ebp,0x200
c00122f3:	50                   	push   eax
c00122f4:	0f be 05 d8 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8d8
c00122fb:	ff 34 85 1c de 02 c0 	push   DWORD PTR [eax*4-0x3ffd21e4]
c0012302:	e8 1b 3d 00 00       	call   c0016022 <LogicalDisk::read(unsigned long long, int, void*)>
c0012307:	83 c4 20             	add    esp,0x20
c001230a:	39 35 cc c8 02 c0    	cmp    DWORD PTR ds:0xc002c8cc,esi
c0012310:	7f c7                	jg     c00122d9 <VAS::tryLoadBackOffDisk(unsigned long)+0xe3>
c0012312:	a1 88 da 02 c0       	mov    eax,ds:0xc002da88
c0012317:	48                   	dec    eax
c0012318:	52                   	push   edx
c0012319:	a3 88 da 02 c0       	mov    ds:0xc002da88,eax
c001231e:	50                   	push   eax
c001231f:	53                   	push   ebx
c0012320:	68 a7 a5 02 c0       	push   0xc002a5a7
c0012325:	e8 a3 03 00 00       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c001232a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001232d:	e8 00 f0 ff ff       	call   c0011332 <Virt::freeSwapfilePage(unsigned long)>
c0012332:	c7 04 24 bc a5 02 c0 	mov    DWORD PTR [esp],0xc002a5bc
c0012339:	e8 8f 03 00 00       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c001233e:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c0012343:	83 c4 10             	add    esp,0x10
c0012346:	48                   	dec    eax
c0012347:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001234c:	85 c0                	test   eax,eax
c001234e:	74 2d                	je     c001237d <VAS::tryLoadBackOffDisk(unsigned long)+0x187>
c0012350:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012354:	25 ff 0f 00 00       	and    eax,0xfff
c0012359:	3d e0 0f 00 00       	cmp    eax,0xfe0
c001235e:	77 20                	ja     c0012380 <VAS::tryLoadBackOffDisk(unsigned long)+0x18a>
c0012360:	0f 20 d8             	mov    eax,cr3
c0012363:	0f 22 d8             	mov    cr3,eax
c0012366:	83 ec 0c             	sub    esp,0xc
c0012369:	68 e2 a5 02 c0       	push   0xc002a5e2
c001236e:	e8 5a 03 00 00       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0012373:	83 c4 10             	add    esp,0x10
c0012376:	b0 01                	mov    al,0x1
c0012378:	e9 d1 fe ff ff       	jmp    c001224e <VAS::tryLoadBackOffDisk(unsigned long)+0x58>
c001237d:	fb                   	sti    
c001237e:	eb d0                	jmp    c0012350 <VAS::tryLoadBackOffDisk(unsigned long)+0x15a>
c0012380:	83 ec 0c             	sub    esp,0xc
c0012383:	68 d2 a5 02 c0       	push   0xc002a5d2
c0012388:	e8 40 03 00 00       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c001238d:	83 c4 10             	add    esp,0x10
c0012390:	eb ce                	jmp    c0012360 <VAS::tryLoadBackOffDisk(unsigned long)+0x16a>

c0012392 <VAS::scanForEviction()>:
c0012392:	57                   	push   edi
c0012393:	56                   	push   esi
c0012394:	53                   	push   ebx
c0012395:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012399:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c001239c:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00123a2:	75 0e                	jne    c00123b2 <VAS::scanForEviction()+0x20>
c00123a4:	89 da                	mov    edx,ebx
c00123a6:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00123a9:	c1 ea 16             	shr    edx,0x16
c00123ac:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00123b0:	74 48                	je     c00123fa <VAS::scanForEviction()+0x68>
c00123b2:	53                   	push   ebx
c00123b3:	56                   	push   esi
c00123b4:	e8 8f f2 ff ff       	call   c0011648 <VAS::getPageTableEntry(unsigned long)>
c00123b9:	5a                   	pop    edx
c00123ba:	8b 38                	mov    edi,DWORD PTR [eax]
c00123bc:	59                   	pop    ecx
c00123bd:	89 fa                	mov    edx,edi
c00123bf:	81 e2 00 0c 00 00    	and    edx,0xc00
c00123c5:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c00123cb:	74 3d                	je     c001240a <VAS::scanForEviction()+0x78>
c00123cd:	81 c3 00 10 00 00    	add    ebx,0x1000
c00123d3:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c00123d9:	76 2a                	jbe    c0012405 <VAS::scanForEviction()+0x73>
c00123db:	31 db                	xor    ebx,ebx
c00123dd:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c00123e4:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00123ea:	75 c6                	jne    c00123b2 <VAS::scanForEviction()+0x20>
c00123ec:	89 da                	mov    edx,ebx
c00123ee:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00123f1:	c1 ea 16             	shr    edx,0x16
c00123f4:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00123f8:	75 b8                	jne    c00123b2 <VAS::scanForEviction()+0x20>
c00123fa:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012400:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012403:	eb 97                	jmp    c001239c <VAS::scanForEviction()+0xa>
c0012405:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012408:	eb 92                	jmp    c001239c <VAS::scanForEviction()+0xa>
c001240a:	f7 c7 01 00 00 00    	test   edi,0x1
c0012410:	74 bb                	je     c00123cd <VAS::scanForEviction()+0x3b>
c0012412:	f7 c7 20 00 00 00    	test   edi,0x20
c0012418:	74 0a                	je     c0012424 <VAS::scanForEviction()+0x92>
c001241a:	83 e7 df             	and    edi,0xffffffdf
c001241d:	89 38                	mov    DWORD PTR [eax],edi
c001241f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012422:	eb a9                	jmp    c00123cd <VAS::scanForEviction()+0x3b>
c0012424:	83 ec 08             	sub    esp,0x8
c0012427:	53                   	push   ebx
c0012428:	56                   	push   esi
c0012429:	e8 da fc ff ff       	call   c0012108 <VAS::evict(unsigned long)>
c001242e:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012435:	83 c4 10             	add    esp,0x10
c0012438:	89 f8                	mov    eax,edi
c001243a:	5b                   	pop    ebx
c001243b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012440:	5e                   	pop    esi
c0012441:	5f                   	pop    edi
c0012442:	c3                   	ret    

c0012443 <mapVASFirstTime>:
c0012443:	55                   	push   ebp
c0012444:	57                   	push   edi
c0012445:	56                   	push   esi
c0012446:	53                   	push   ebx
c0012447:	83 ec 0c             	sub    esp,0xc
c001244a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001244f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012452:	4a                   	dec    edx
c0012453:	0f 84 fe 00 00 00    	je     c0012557 <mapVASFirstTime+0x114>
c0012459:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001245c:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c001245f:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012464:	c1 e5 15             	shl    ebp,0x15
c0012467:	bf 00 90 e7 01       	mov    edi,0x1e79000
c001246c:	8b b2 32 05 00 00    	mov    esi,DWORD PTR [edx+0x532]
c0012472:	29 eb                	sub    ebx,ebp
c0012474:	29 ef                	sub    edi,ebp
c0012476:	83 ec 08             	sub    esp,0x8
c0012479:	53                   	push   ebx
c001247a:	68 09 a6 02 c0       	push   0xc002a609
c001247f:	e8 49 02 00 00       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0012484:	e8 e8 d4 ff ff       	call   c000f971 <Phys::allocatePage()>
c0012489:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c0012490:	6a 01                	push   0x1
c0012492:	53                   	push   ebx
c0012493:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012499:	50                   	push   eax
c001249a:	56                   	push   esi
c001249b:	e8 34 f8 ff ff       	call   c0011cd4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00124a0:	83 c4 20             	add    esp,0x20
c00124a3:	39 fb                	cmp    ebx,edi
c00124a5:	75 cf                	jne    c0012476 <mapVASFirstTime+0x33>
c00124a7:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c00124ac:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c00124b1:	29 eb                	sub    ebx,ebp
c00124b3:	29 ef                	sub    edi,ebp
c00124b5:	83 ec 08             	sub    esp,0x8
c00124b8:	53                   	push   ebx
c00124b9:	68 25 a6 02 c0       	push   0xc002a625
c00124be:	e8 0a 02 00 00       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c00124c3:	58                   	pop    eax
c00124c4:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c00124c8:	5a                   	pop    edx
c00124c9:	19 c0                	sbb    eax,eax
c00124cb:	83 e0 04             	and    eax,0x4
c00124ce:	05 03 04 00 00       	add    eax,0x403
c00124d3:	50                   	push   eax
c00124d4:	68 71 a5 02 c0       	push   0xc002a571
c00124d9:	e8 ef 01 00 00       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c00124de:	e8 8e d4 ff ff       	call   c000f971 <Phys::allocatePage()>
c00124e3:	59                   	pop    ecx
c00124e4:	89 c5                	mov    ebp,eax
c00124e6:	58                   	pop    eax
c00124e7:	55                   	push   ebp
c00124e8:	68 39 a6 02 c0       	push   0xc002a639
c00124ed:	e8 db 01 00 00       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c00124f2:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c00124f6:	19 d2                	sbb    edx,edx
c00124f8:	83 e2 04             	and    edx,0x4
c00124fb:	81 c2 03 0c 00 00    	add    edx,0xc03
c0012501:	89 14 24             	mov    DWORD PTR [esp],edx
c0012504:	6a 01                	push   0x1
c0012506:	53                   	push   ebx
c0012507:	55                   	push   ebp
c0012508:	56                   	push   esi
c0012509:	e8 c6 f7 ff ff       	call   c0011cd4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001250e:	83 c4 18             	add    esp,0x18
c0012511:	53                   	push   ebx
c0012512:	56                   	push   esi
c0012513:	e8 30 f1 ff ff       	call   c0011648 <VAS::getPageTableEntry(unsigned long)>
c0012518:	5a                   	pop    edx
c0012519:	59                   	pop    ecx
c001251a:	ff 30                	push   DWORD PTR [eax]
c001251c:	68 55 a6 02 c0       	push   0xc002a655
c0012521:	e8 a7 01 00 00       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0012526:	0f 20 d8             	mov    eax,cr3
c0012529:	83 c4 0c             	add    esp,0xc
c001252c:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012532:	56                   	push   esi
c0012533:	50                   	push   eax
c0012534:	68 7f a5 02 c0       	push   0xc002a57f
c0012539:	e8 8f 01 00 00       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c001253e:	83 c4 10             	add    esp,0x10
c0012541:	39 df                	cmp    edi,ebx
c0012543:	0f 85 6c ff ff ff    	jne    c00124b5 <mapVASFirstTime+0x72>
c0012549:	0f 20 d8             	mov    eax,cr3
c001254c:	0f 22 d8             	mov    cr3,eax
c001254f:	83 c4 0c             	add    esp,0xc
c0012552:	5b                   	pop    ebx
c0012553:	5e                   	pop    esi
c0012554:	5f                   	pop    edi
c0012555:	5d                   	pop    ebp
c0012556:	c3                   	ret    
c0012557:	83 ec 0c             	sub    esp,0xc
c001255a:	68 f0 a5 02 c0       	push   0xc002a5f0
c001255f:	e8 69 01 00 00       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0012564:	83 c4 10             	add    esp,0x10
c0012567:	83 c4 0c             	add    esp,0xc
c001256a:	5b                   	pop    ebx
c001256b:	5e                   	pop    esi
c001256c:	5f                   	pop    edi
c001256d:	5d                   	pop    ebp
c001256e:	c3                   	ret    

c001256f <__cxa_atexit>:
c001256f:	31 c0                	xor    eax,eax
c0012571:	c3                   	ret    

c0012572 <__cxa_finalize>:
c0012572:	c3                   	ret    

c0012573 <__stack_chk_fail>:
c0012573:	55                   	push   ebp
c0012574:	89 e5                	mov    ebp,esp
c0012576:	83 ec 14             	sub    esp,0x14
c0012579:	68 60 a6 02 c0       	push   0xc002a660
c001257e:	e8 4a 01 00 00       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0012583:	58                   	pop    eax
c0012584:	5a                   	pop    edx
c0012585:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012588:	68 b0 a6 02 c0       	push   0xc002a6b0
c001258d:	e8 3b 01 00 00       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0012592:	59                   	pop    ecx
c0012593:	58                   	pop    eax
c0012594:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012597:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001259a:	68 b0 a6 02 c0       	push   0xc002a6b0
c001259f:	e8 29 01 00 00       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c00125a4:	5a                   	pop    edx
c00125a5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00125a8:	59                   	pop    ecx
c00125a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00125ab:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00125ae:	68 b0 a6 02 c0       	push   0xc002a6b0
c00125b3:	e8 15 01 00 00       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c00125b8:	5a                   	pop    edx
c00125b9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00125bc:	59                   	pop    ecx
c00125bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00125bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00125c1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00125c4:	68 b0 a6 02 c0       	push   0xc002a6b0
c00125c9:	e8 ff 00 00 00       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c00125ce:	c7 04 24 b8 a6 02 c0 	mov    DWORD PTR [esp],0xc002a6b8
c00125d5:	e8 5f 78 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c00125da:	83 c4 10             	add    esp,0x10
c00125dd:	c9                   	leave  
c00125de:	c3                   	ret    

c00125df <__cxa_pure_virtual>:
c00125df:	83 ec 18             	sub    esp,0x18
c00125e2:	68 d0 a6 02 c0       	push   0xc002a6d0
c00125e7:	e8 4d 78 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c00125ec:	83 c4 1c             	add    esp,0x1c
c00125ef:	c3                   	ret    

c00125f0 <operator new[](unsigned long)>:
c00125f0:	e9 a4 cf ff ff       	jmp    c000f599 <malloc>

c00125f5 <operator delete(void*, unsigned long)>:
c00125f5:	e9 bf cf ff ff       	jmp    c000f5b9 <rfree>

c00125fa <operator delete[](void*)>:
c00125fa:	e9 ba cf ff ff       	jmp    c000f5b9 <rfree>

c00125ff <operator delete[](void*, unsigned long)>:
c00125ff:	e9 b5 cf ff ff       	jmp    c000f5b9 <rfree>

c0012604 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012604:	55                   	push   ebp
c0012605:	b9 11 00 00 00       	mov    ecx,0x11
c001260a:	57                   	push   edi
c001260b:	56                   	push   esi
c001260c:	be 1e a1 02 c0       	mov    esi,0xc002a11e
c0012611:	53                   	push   ebx
c0012612:	83 ec 20             	sub    esp,0x20
c0012615:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012619:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001261d:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0012621:	fc                   	cld    
c0012622:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012624:	89 ee                	mov    esi,ebp
c0012626:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001262a:	eb 02                	jmp    c001262e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c001262c:	89 c6                	mov    esi,eax
c001262e:	31 d2                	xor    edx,edx
c0012630:	41                   	inc    ecx
c0012631:	89 f0                	mov    eax,esi
c0012633:	f7 f3                	div    ebx
c0012635:	39 de                	cmp    esi,ebx
c0012637:	73 f3                	jae    c001262c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c0012639:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001263c:	eb 02                	jmp    c0012640 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c001263e:	89 c5                	mov    ebp,eax
c0012640:	31 d2                	xor    edx,edx
c0012642:	49                   	dec    ecx
c0012643:	89 e8                	mov    eax,ebp
c0012645:	f7 f3                	div    ebx
c0012647:	39 dd                	cmp    ebp,ebx
c0012649:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c001264d:	88 11                	mov    BYTE PTR [ecx],dl
c001264f:	73 ed                	jae    c001263e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c0012651:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012655:	83 c4 20             	add    esp,0x20
c0012658:	5b                   	pop    ebx
c0012659:	5e                   	pop    esi
c001265a:	5f                   	pop    edi
c001265b:	5d                   	pop    ebp
c001265c:	c3                   	ret    

c001265d <Dbg::logc(char)>:
c001265d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012661:	ba fd 03 00 00       	mov    edx,0x3fd
c0012666:	ec                   	in     al,dx
c0012667:	a8 20                	test   al,0x20
c0012669:	74 fb                	je     c0012666 <Dbg::logc(char)+0x9>
c001266b:	ba f8 03 00 00       	mov    edx,0x3f8
c0012670:	88 c8                	mov    al,cl
c0012672:	ee                   	out    dx,al
c0012673:	c3                   	ret    

c0012674 <Dbg::logs(char*)>:
c0012674:	53                   	push   ebx
c0012675:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012679:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001267c:	84 c0                	test   al,al
c001267e:	74 0f                	je     c001268f <Dbg::logs(char*)+0x1b>
c0012680:	50                   	push   eax
c0012681:	43                   	inc    ebx
c0012682:	e8 d6 ff ff ff       	call   c001265d <Dbg::logc(char)>
c0012687:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001268a:	5a                   	pop    edx
c001268b:	84 c0                	test   al,al
c001268d:	75 f1                	jne    c0012680 <Dbg::logs(char*)+0xc>
c001268f:	5b                   	pop    ebx
c0012690:	c3                   	ret    

c0012691 <Dbg::logWriteInt(unsigned int)>:
c0012691:	83 ec 10             	sub    esp,0x10
c0012694:	6a 0a                	push   0xa
c0012696:	8d 44 24 08          	lea    eax,[esp+0x8]
c001269a:	50                   	push   eax
c001269b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001269f:	e8 60 ff ff ff       	call   c0012604 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00126a4:	50                   	push   eax
c00126a5:	e8 ca ff ff ff       	call   c0012674 <Dbg::logs(char*)>
c00126aa:	83 c4 20             	add    esp,0x20
c00126ad:	c3                   	ret    

c00126ae <Dbg::logWriteIntBase(unsigned int, int)>:
c00126ae:	83 ec 10             	sub    esp,0x10
c00126b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00126b5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00126b9:	50                   	push   eax
c00126ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126be:	e8 41 ff ff ff       	call   c0012604 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00126c3:	50                   	push   eax
c00126c4:	e8 ab ff ff ff       	call   c0012674 <Dbg::logs(char*)>
c00126c9:	83 c4 20             	add    esp,0x20
c00126cc:	c3                   	ret    

c00126cd <Dbg::kprintf(char const*, ...)>:
c00126cd:	55                   	push   ebp
c00126ce:	57                   	push   edi
c00126cf:	56                   	push   esi
c00126d0:	53                   	push   ebx
c00126d1:	83 ec 0c             	sub    esp,0xc
c00126d4:	8d 44 24 24          	lea    eax,[esp+0x24]
c00126d8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00126dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00126e0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00126e3:	84 c0                	test   al,al
c00126e5:	74 4a                	je     c0012731 <Dbg::kprintf(char const*, ...)+0x64>
c00126e7:	31 db                	xor    ebx,ebx
c00126e9:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00126ec:	3c 25                	cmp    al,0x25
c00126ee:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00126f1:	0f 85 e4 00 00 00    	jne    c00127db <Dbg::kprintf(char const*, ...)+0x10e>
c00126f7:	83 c3 02             	add    ebx,0x2
c00126fa:	8a 07                	mov    al,BYTE PTR [edi]
c00126fc:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00126ff:	83 e8 25             	sub    eax,0x25
c0012702:	3c 53                	cmp    al,0x53
c0012704:	0f 87 ba 00 00 00    	ja     c00127c4 <Dbg::kprintf(char const*, ...)+0xf7>
c001270a:	0f b6 c0             	movzx  eax,al
c001270d:	ff 24 85 e4 a6 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd591c]
c0012714:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012718:	89 c8                	mov    eax,ecx
c001271a:	83 c1 04             	add    ecx,0x4
c001271d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012721:	ff 30                	push   DWORD PTR [eax]
c0012723:	e8 69 ff ff ff       	call   c0012691 <Dbg::logWriteInt(unsigned int)>
c0012728:	5f                   	pop    edi
c0012729:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c001272d:	84 c0                	test   al,al
c001272f:	75 b8                	jne    c00126e9 <Dbg::kprintf(char const*, ...)+0x1c>
c0012731:	83 c4 0c             	add    esp,0xc
c0012734:	5b                   	pop    ebx
c0012735:	5e                   	pop    esi
c0012736:	5f                   	pop    edi
c0012737:	5d                   	pop    ebp
c0012738:	c3                   	ret    
c0012739:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001273d:	89 c8                	mov    eax,ecx
c001273f:	83 c1 04             	add    ecx,0x4
c0012742:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012746:	ff 30                	push   DWORD PTR [eax]
c0012748:	e8 27 ff ff ff       	call   c0012674 <Dbg::logs(char*)>
c001274d:	58                   	pop    eax
c001274e:	eb d9                	jmp    c0012729 <Dbg::kprintf(char const*, ...)+0x5c>
c0012750:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012754:	89 d0                	mov    eax,edx
c0012756:	83 c2 04             	add    edx,0x4
c0012759:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001275d:	ff 30                	push   DWORD PTR [eax]
c001275f:	e8 2d ff ff ff       	call   c0012691 <Dbg::logWriteInt(unsigned int)>
c0012764:	58                   	pop    eax
c0012765:	eb c2                	jmp    c0012729 <Dbg::kprintf(char const*, ...)+0x5c>
c0012767:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001276b:	89 d0                	mov    eax,edx
c001276d:	83 c2 04             	add    edx,0x4
c0012770:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012773:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012777:	50                   	push   eax
c0012778:	e8 e0 fe ff ff       	call   c001265d <Dbg::logc(char)>
c001277d:	58                   	pop    eax
c001277e:	eb a9                	jmp    c0012729 <Dbg::kprintf(char const*, ...)+0x5c>
c0012780:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012784:	89 c8                	mov    eax,ecx
c0012786:	83 c1 04             	add    ecx,0x4
c0012789:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001278d:	6a 10                	push   0x10
c001278f:	ff 30                	push   DWORD PTR [eax]
c0012791:	e8 18 ff ff ff       	call   c00126ae <Dbg::logWriteIntBase(unsigned int, int)>
c0012796:	59                   	pop    ecx
c0012797:	5f                   	pop    edi
c0012798:	eb 8f                	jmp    c0012729 <Dbg::kprintf(char const*, ...)+0x5c>
c001279a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001279e:	89 d0                	mov    eax,edx
c00127a0:	83 c2 08             	add    edx,0x8
c00127a3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00127a7:	6a 10                	push   0x10
c00127a9:	ff 30                	push   DWORD PTR [eax]
c00127ab:	e8 fe fe ff ff       	call   c00126ae <Dbg::logWriteIntBase(unsigned int, int)>
c00127b0:	58                   	pop    eax
c00127b1:	5a                   	pop    edx
c00127b2:	e9 72 ff ff ff       	jmp    c0012729 <Dbg::kprintf(char const*, ...)+0x5c>
c00127b7:	6a 25                	push   0x25
c00127b9:	e8 9f fe ff ff       	call   c001265d <Dbg::logc(char)>
c00127be:	58                   	pop    eax
c00127bf:	e9 65 ff ff ff       	jmp    c0012729 <Dbg::kprintf(char const*, ...)+0x5c>
c00127c4:	6a 25                	push   0x25
c00127c6:	e8 92 fe ff ff       	call   c001265d <Dbg::logc(char)>
c00127cb:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00127ce:	50                   	push   eax
c00127cf:	e8 89 fe ff ff       	call   c001265d <Dbg::logc(char)>
c00127d4:	5a                   	pop    edx
c00127d5:	59                   	pop    ecx
c00127d6:	e9 4e ff ff ff       	jmp    c0012729 <Dbg::kprintf(char const*, ...)+0x5c>
c00127db:	50                   	push   eax
c00127dc:	89 eb                	mov    ebx,ebp
c00127de:	e8 7a fe ff ff       	call   c001265d <Dbg::logc(char)>
c00127e3:	89 fd                	mov    ebp,edi
c00127e5:	58                   	pop    eax
c00127e6:	e9 3e ff ff ff       	jmp    c0012729 <Dbg::kprintf(char const*, ...)+0x5c>
c00127eb:	90                   	nop

c00127ec <File::read(unsigned long long, void*, int*)>:
c00127ec:	53                   	push   ebx
c00127ed:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127f1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00127f5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00127fc:	3c 19                	cmp    al,0x19
c00127fe:	77 35                	ja     c0012835 <File::read(unsigned long long, void*, int*)+0x49>
c0012800:	8b 04 85 20 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd20e0]
c0012807:	85 c0                	test   eax,eax
c0012809:	74 2a                	je     c0012835 <File::read(unsigned long long, void*, int*)+0x49>
c001280b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012811:	85 c0                	test   eax,eax
c0012813:	74 20                	je     c0012835 <File::read(unsigned long long, void*, int*)+0x49>
c0012815:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012819:	74 21                	je     c001283c <File::read(unsigned long long, void*, int*)+0x50>
c001281b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001281d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012821:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012827:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001282b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001282f:	5b                   	pop    ebx
c0012830:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012833:	ff e0                	jmp    eax
c0012835:	b8 0b 00 00 00       	mov    eax,0xb
c001283a:	eb 05                	jmp    c0012841 <File::read(unsigned long long, void*, int*)+0x55>
c001283c:	b8 05 00 00 00       	mov    eax,0x5
c0012841:	5b                   	pop    ebx
c0012842:	c3                   	ret    
c0012843:	90                   	nop

c0012844 <File::write(unsigned long long, void*, int*)>:
c0012844:	53                   	push   ebx
c0012845:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012849:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001284d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012854:	3c 19                	cmp    al,0x19
c0012856:	77 35                	ja     c001288d <File::write(unsigned long long, void*, int*)+0x49>
c0012858:	8b 04 85 20 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd20e0]
c001285f:	85 c0                	test   eax,eax
c0012861:	74 2a                	je     c001288d <File::write(unsigned long long, void*, int*)+0x49>
c0012863:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012869:	85 c0                	test   eax,eax
c001286b:	74 20                	je     c001288d <File::write(unsigned long long, void*, int*)+0x49>
c001286d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012871:	74 21                	je     c0012894 <File::write(unsigned long long, void*, int*)+0x50>
c0012873:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012875:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012879:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001287f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012883:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012887:	5b                   	pop    ebx
c0012888:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001288b:	ff e0                	jmp    eax
c001288d:	b8 0b 00 00 00       	mov    eax,0xb
c0012892:	eb 05                	jmp    c0012899 <File::write(unsigned long long, void*, int*)+0x55>
c0012894:	b8 05 00 00 00       	mov    eax,0x5
c0012899:	5b                   	pop    ebx
c001289a:	c3                   	ret    
c001289b:	90                   	nop

c001289c <Directory::read(unsigned long long, void*, int*)>:
c001289c:	53                   	push   ebx
c001289d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00128a1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00128a5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00128ac:	3c 19                	cmp    al,0x19
c00128ae:	77 35                	ja     c00128e5 <Directory::read(unsigned long long, void*, int*)+0x49>
c00128b0:	8b 04 85 20 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd20e0]
c00128b7:	85 c0                	test   eax,eax
c00128b9:	74 2a                	je     c00128e5 <Directory::read(unsigned long long, void*, int*)+0x49>
c00128bb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00128c1:	85 c0                	test   eax,eax
c00128c3:	74 20                	je     c00128e5 <Directory::read(unsigned long long, void*, int*)+0x49>
c00128c5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00128c9:	74 21                	je     c00128ec <Directory::read(unsigned long long, void*, int*)+0x50>
c00128cb:	8b 08                	mov    ecx,DWORD PTR [eax]
c00128cd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00128d1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00128d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00128db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00128df:	5b                   	pop    ebx
c00128e0:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00128e3:	ff e0                	jmp    eax
c00128e5:	b8 0b 00 00 00       	mov    eax,0xb
c00128ea:	eb 05                	jmp    c00128f1 <Directory::read(unsigned long long, void*, int*)+0x55>
c00128ec:	b8 05 00 00 00       	mov    eax,0x5
c00128f1:	5b                   	pop    ebx
c00128f2:	c3                   	ret    
c00128f3:	90                   	nop

c00128f4 <Directory::write(unsigned long long, void*, int*)>:
c00128f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128f8:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00128ff:	b8 0b 00 00 00       	mov    eax,0xb
c0012904:	80 fa 19             	cmp    dl,0x19
c0012907:	77 18                	ja     c0012921 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012909:	8b 14 95 20 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd20e0]
c0012910:	85 d2                	test   edx,edx
c0012912:	74 0d                	je     c0012921 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012914:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c001291b:	19 c0                	sbb    eax,eax
c001291d:	83 e0 0a             	and    eax,0xa
c0012920:	40                   	inc    eax
c0012921:	c3                   	ret    

c0012922 <File::isAtty()>:
c0012922:	31 c0                	xor    eax,eax
c0012924:	c3                   	ret    
c0012925:	90                   	nop

c0012926 <Directory::isAtty()>:
c0012926:	31 c0                	xor    eax,eax
c0012928:	c3                   	ret    
c0012929:	90                   	nop

c001292a <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001292a:	b8 0a 00 00 00       	mov    eax,0xa
c001292f:	c3                   	ret    

c0012930 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012930:	b8 0a 00 00 00       	mov    eax,0xa
c0012935:	c3                   	ret    

c0012936 <Filesystem::getFileFirstSector(char const*)>:
c0012936:	31 c0                	xor    eax,eax
c0012938:	31 d2                	xor    edx,edx
c001293a:	c3                   	ret    
c001293b:	90                   	nop

c001293c <File::~File()>:
c001293c:	83 ec 0c             	sub    esp,0xc
c001293f:	ba a4 a8 02 c0       	mov    edx,0xc002a8a4
c0012944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012948:	89 10                	mov    DWORD PTR [eax],edx
c001294a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001294e:	83 ec 0c             	sub    esp,0xc
c0012951:	50                   	push   eax
c0012952:	e8 69 e6 ff ff       	call   c0010fc0 <UnixFile::~UnixFile()>
c0012957:	83 c4 10             	add    esp,0x10
c001295a:	90                   	nop
c001295b:	83 c4 0c             	add    esp,0xc
c001295e:	c3                   	ret    
c001295f:	90                   	nop

c0012960 <File::~File()>:
c0012960:	83 ec 0c             	sub    esp,0xc
c0012963:	83 ec 0c             	sub    esp,0xc
c0012966:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001296a:	e8 cd ff ff ff       	call   c001293c <File::~File()>
c001296f:	83 c4 10             	add    esp,0x10
c0012972:	83 ec 08             	sub    esp,0x8
c0012975:	68 14 01 00 00       	push   0x114
c001297a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001297e:	e8 72 fc ff ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c0012983:	83 c4 10             	add    esp,0x10
c0012986:	83 c4 0c             	add    esp,0xc
c0012989:	c3                   	ret    

c001298a <Directory::~Directory()>:
c001298a:	83 ec 0c             	sub    esp,0xc
c001298d:	ba c0 a8 02 c0       	mov    edx,0xc002a8c0
c0012992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012996:	89 10                	mov    DWORD PTR [eax],edx
c0012998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001299c:	83 ec 0c             	sub    esp,0xc
c001299f:	50                   	push   eax
c00129a0:	e8 1b e6 ff ff       	call   c0010fc0 <UnixFile::~UnixFile()>
c00129a5:	83 c4 10             	add    esp,0x10
c00129a8:	90                   	nop
c00129a9:	83 c4 0c             	add    esp,0xc
c00129ac:	c3                   	ret    
c00129ad:	90                   	nop

c00129ae <Directory::~Directory()>:
c00129ae:	83 ec 0c             	sub    esp,0xc
c00129b1:	83 ec 0c             	sub    esp,0xc
c00129b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129b8:	e8 cd ff ff ff       	call   c001298a <Directory::~Directory()>
c00129bd:	83 c4 10             	add    esp,0x10
c00129c0:	83 ec 08             	sub    esp,0x8
c00129c3:	68 14 01 00 00       	push   0x114
c00129c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129cc:	e8 24 fc ff ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c00129d1:	83 c4 10             	add    esp,0x10
c00129d4:	83 c4 0c             	add    esp,0xc
c00129d7:	c3                   	ret    

c00129d8 <Filesystem::Filesystem()>:
c00129d8:	ba 3c a8 02 c0       	mov    edx,0xc002a83c
c00129dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129e1:	89 10                	mov    DWORD PTR [eax],edx
c00129e3:	8b 15 94 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da94
c00129e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129ed:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00129f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129f4:	a3 94 da 02 c0       	mov    ds:0xc002da94,eax
c00129f9:	90                   	nop
c00129fa:	c3                   	ret    
c00129fb:	90                   	nop

c00129fc <Filesystem::~Filesystem()>:
c00129fc:	ba 3c a8 02 c0       	mov    edx,0xc002a83c
c0012a01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a05:	89 10                	mov    DWORD PTR [eax],edx
c0012a07:	90                   	nop
c0012a08:	c3                   	ret    
c0012a09:	90                   	nop

c0012a0a <Filesystem::~Filesystem()>:
c0012a0a:	83 ec 0c             	sub    esp,0xc
c0012a0d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012a11:	e8 e6 ff ff ff       	call   c00129fc <Filesystem::~Filesystem()>
c0012a16:	83 c4 04             	add    esp,0x4
c0012a19:	83 ec 08             	sub    esp,0x8
c0012a1c:	6a 08                	push   0x8
c0012a1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a22:	e8 ce fb ff ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c0012a27:	83 c4 10             	add    esp,0x10
c0012a2a:	83 c4 0c             	add    esp,0xc
c0012a2d:	c3                   	ret    

c0012a2e <Fs::getcwd(Process*, char*, int)>:
c0012a2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a32:	31 c0                	xor    eax,eax
c0012a34:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012a37:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012a3b:	7d 15                	jge    c0012a52 <Fs::getcwd(Process*, char*, int)+0x24>
c0012a3d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012a41:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012a48:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012a4b:	84 c9                	test   cl,cl
c0012a4d:	74 06                	je     c0012a55 <Fs::getcwd(Process*, char*, int)+0x27>
c0012a4f:	40                   	inc    eax
c0012a50:	eb e2                	jmp    c0012a34 <Fs::getcwd(Process*, char*, int)+0x6>
c0012a52:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012a55:	31 c0                	xor    eax,eax
c0012a57:	c3                   	ret    

c0012a58 <Fs::initVFS()>:
c0012a58:	83 ec 18             	sub    esp,0x18
c0012a5b:	6a 08                	push   0x8
c0012a5d:	e8 37 cb ff ff       	call   c000f599 <malloc>
c0012a62:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a65:	e8 cc de 00 00       	call   c0020936 <FAT::FAT()>
c0012a6a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012a71:	e8 23 cb ff ff       	call   c000f599 <malloc>
c0012a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a79:	e8 c4 f0 00 00       	call   c0021b42 <ISO9660::ISO9660()>
c0012a7e:	83 c4 1c             	add    esp,0x1c
c0012a81:	c3                   	ret    

c0012a82 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012a82:	55                   	push   ebp
c0012a83:	57                   	push   edi
c0012a84:	56                   	push   esi
c0012a85:	53                   	push   ebx
c0012a86:	81 ec 10 04 00 00    	sub    esp,0x410
c0012a8c:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012a93:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012a9a:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012aa1:	68 00 04 00 00       	push   0x400
c0012aa6:	6a 00                	push   0x0
c0012aa8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012aac:	56                   	push   esi
c0012aad:	e8 9e dc fe ff       	call   c0000750 <memset>
c0012ab2:	83 c4 10             	add    esp,0x10
c0012ab5:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012ab9:	75 0b                	jne    c0012ac6 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012abb:	50                   	push   eax
c0012abc:	50                   	push   eax
c0012abd:	57                   	push   edi
c0012abe:	56                   	push   esi
c0012abf:	e8 48 dd fe ff       	call   c000080c <strcpy>
c0012ac4:	eb 41                	jmp    c0012b07 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012ac6:	8a 07                	mov    al,BYTE PTR [edi]
c0012ac8:	3c 5c                	cmp    al,0x5c
c0012aca:	74 04                	je     c0012ad0 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012acc:	3c 2f                	cmp    al,0x2f
c0012ace:	75 18                	jne    c0012ae8 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012ad0:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012ad3:	3c 60                	cmp    al,0x60
c0012ad5:	7e 03                	jle    c0012ada <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012ad7:	83 e8 20             	sub    eax,0x20
c0012ada:	88 04 24             	mov    BYTE PTR [esp],al
c0012add:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012ae4:	50                   	push   eax
c0012ae5:	50                   	push   eax
c0012ae6:	eb 18                	jmp    c0012b00 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012ae8:	50                   	push   eax
c0012ae9:	50                   	push   eax
c0012aea:	55                   	push   ebp
c0012aeb:	56                   	push   esi
c0012aec:	e8 1b dd fe ff       	call   c000080c <strcpy>
c0012af1:	5a                   	pop    edx
c0012af2:	59                   	pop    ecx
c0012af3:	68 2a bb 02 c0       	push   0xc002bb2a
c0012af8:	56                   	push   esi
c0012af9:	e8 4e de fe ff       	call   c000094c <strcat>
c0012afe:	5d                   	pop    ebp
c0012aff:	58                   	pop    eax
c0012b00:	57                   	push   edi
c0012b01:	56                   	push   esi
c0012b02:	e8 45 de fe ff       	call   c000094c <strcat>
c0012b07:	83 c4 10             	add    esp,0x10
c0012b0a:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012b0d:	3c 60                	cmp    al,0x60
c0012b0f:	7e 03                	jle    c0012b14 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012b11:	83 e8 20             	sub    eax,0x20
c0012b14:	88 04 24             	mov    BYTE PTR [esp],al
c0012b17:	88 03                	mov    BYTE PTR [ebx],al
c0012b19:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012b20:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012b26:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012b2a:	bf 03 00 00 00       	mov    edi,0x3
c0012b2f:	b8 03 00 00 00       	mov    eax,0x3
c0012b34:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012b37:	84 d2                	test   dl,dl
c0012b39:	0f 84 91 00 00 00    	je     c0012bd0 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012b3f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012b42:	80 fa 5c             	cmp    dl,0x5c
c0012b45:	74 05                	je     c0012b4c <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012b47:	80 fa 2f             	cmp    dl,0x2f
c0012b4a:	75 12                	jne    c0012b5e <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012b4c:	89 c5                	mov    ebp,eax
c0012b4e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012b53:	74 09                	je     c0012b5e <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012b55:	40                   	inc    eax
c0012b56:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012b5a:	89 cf                	mov    edi,ecx
c0012b5c:	eb d6                	jmp    c0012b34 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012b5e:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012b63:	75 5b                	jne    c0012bc0 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012b65:	80 fa 2e             	cmp    dl,0x2e
c0012b68:	75 56                	jne    c0012bc0 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012b6a:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012b6e:	74 19                	je     c0012b89 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012b70:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012b75:	74 53                	je     c0012bca <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012b77:	89 f9                	mov    ecx,edi
c0012b79:	41                   	inc    ecx
c0012b7a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012b7d:	80 fa 2f             	cmp    dl,0x2f
c0012b80:	74 f7                	je     c0012b79 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012b82:	80 fa 5c             	cmp    dl,0x5c
c0012b85:	74 f2                	je     c0012b79 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012b87:	eb d1                	jmp    c0012b5a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b89:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012b8e:	74 3a                	je     c0012bca <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012b90:	83 f8 03             	cmp    eax,0x3
c0012b93:	74 c5                	je     c0012b5a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b95:	41                   	inc    ecx
c0012b96:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012b99:	80 fa 2f             	cmp    dl,0x2f
c0012b9c:	74 f7                	je     c0012b95 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012b9e:	80 fa 5c             	cmp    dl,0x5c
c0012ba1:	74 f2                	je     c0012b95 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012ba3:	48                   	dec    eax
c0012ba4:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012ba8:	75 06                	jne    c0012bb0 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012baa:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012bae:	eb f3                	jmp    c0012ba3 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012bb0:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012bb4:	74 07                	je     c0012bbd <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012bb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012bba:	48                   	dec    eax
c0012bbb:	eb f3                	jmp    c0012bb0 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012bbd:	40                   	inc    eax
c0012bbe:	eb 9a                	jmp    c0012b5a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012bc0:	80 fa 2f             	cmp    dl,0x2f
c0012bc3:	74 95                	je     c0012b5a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012bc5:	80 fa 5c             	cmp    dl,0x5c
c0012bc8:	74 90                	je     c0012b5a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012bca:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012bcd:	40                   	inc    eax
c0012bce:	eb 8a                	jmp    c0012b5a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012bd0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012bd4:	83 ec 0c             	sub    esp,0xc
c0012bd7:	53                   	push   ebx
c0012bd8:	e8 8f db fe ff       	call   c000076c <strlen>
c0012bdd:	83 c4 10             	add    esp,0x10
c0012be0:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012be5:	75 26                	jne    c0012c0d <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012be7:	83 ec 0c             	sub    esp,0xc
c0012bea:	53                   	push   ebx
c0012beb:	e8 7c db fe ff       	call   c000076c <strlen>
c0012bf0:	83 c4 10             	add    esp,0x10
c0012bf3:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012bf8:	74 26                	je     c0012c20 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012bfa:	83 ec 0c             	sub    esp,0xc
c0012bfd:	53                   	push   ebx
c0012bfe:	e8 69 db fe ff       	call   c000076c <strlen>
c0012c03:	83 c4 10             	add    esp,0x10
c0012c06:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012c0b:	eb c7                	jmp    c0012bd4 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012c0d:	83 ec 0c             	sub    esp,0xc
c0012c10:	53                   	push   ebx
c0012c11:	e8 56 db fe ff       	call   c000076c <strlen>
c0012c16:	83 c4 10             	add    esp,0x10
c0012c19:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012c1e:	74 c7                	je     c0012be7 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012c20:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012c26:	5b                   	pop    ebx
c0012c27:	5e                   	pop    esi
c0012c28:	5f                   	pop    edi
c0012c29:	5d                   	pop    ebp
c0012c2a:	c3                   	ret    
c0012c2b:	90                   	nop

c0012c2c <File::File(char const*, Process*)>:
c0012c2c:	83 ec 0c             	sub    esp,0xc
c0012c2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c33:	83 ec 08             	sub    esp,0x8
c0012c36:	6a 00                	push   0x0
c0012c38:	50                   	push   eax
c0012c39:	e8 a0 e1 ff ff       	call   c0010dde <UnixFile::UnixFile(int)>
c0012c3e:	83 c4 10             	add    esp,0x10
c0012c41:	ba a4 a8 02 c0       	mov    edx,0xc002a8a4
c0012c46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c4a:	89 10                	mov    DWORD PTR [eax],edx
c0012c4c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012c50:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012c56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c5a:	83 c0 0d             	add    eax,0xd
c0012c5d:	83 ec 04             	sub    esp,0x4
c0012c60:	52                   	push   edx
c0012c61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c65:	50                   	push   eax
c0012c66:	e8 17 fe ff ff       	call   c0012a82 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012c6b:	83 c4 10             	add    esp,0x10
c0012c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c72:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012c75:	8d 50 bf             	lea    edx,[eax-0x41]
c0012c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c7c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c86:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012c8a:	90                   	nop
c0012c8b:	83 c4 0c             	add    esp,0xc
c0012c8e:	c3                   	ret    
c0012c8f:	90                   	nop

c0012c90 <File::open(FileOpenMode)>:
c0012c90:	53                   	push   ebx
c0012c91:	b8 0b 00 00 00       	mov    eax,0xb
c0012c96:	83 ec 08             	sub    esp,0x8
c0012c99:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012c9d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012ca4:	80 fa 19             	cmp    dl,0x19
c0012ca7:	77 40                	ja     c0012ce9 <File::open(FileOpenMode)+0x59>
c0012ca9:	8b 14 95 20 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd20e0]
c0012cb0:	85 d2                	test   edx,edx
c0012cb2:	74 35                	je     c0012ce9 <File::open(FileOpenMode)+0x59>
c0012cb4:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012cba:	85 d2                	test   edx,edx
c0012cbc:	74 2b                	je     c0012ce9 <File::open(FileOpenMode)+0x59>
c0012cbe:	b8 06 00 00 00       	mov    eax,0x6
c0012cc3:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012cc7:	75 20                	jne    c0012ce9 <File::open(FileOpenMode)+0x59>
c0012cc9:	8b 02                	mov    eax,DWORD PTR [edx]
c0012ccb:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012cd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012cd5:	51                   	push   ecx
c0012cd6:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012cd9:	51                   	push   ecx
c0012cda:	52                   	push   edx
c0012cdb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012cde:	83 c4 10             	add    esp,0x10
c0012ce1:	85 c0                	test   eax,eax
c0012ce3:	75 04                	jne    c0012ce9 <File::open(FileOpenMode)+0x59>
c0012ce5:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012ce9:	83 c4 08             	add    esp,0x8
c0012cec:	5b                   	pop    ebx
c0012ced:	c3                   	ret    

c0012cee <File::close()>:
c0012cee:	53                   	push   ebx
c0012cef:	b8 0b 00 00 00       	mov    eax,0xb
c0012cf4:	83 ec 08             	sub    esp,0x8
c0012cf7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012cfb:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012d02:	80 fa 19             	cmp    dl,0x19
c0012d05:	77 41                	ja     c0012d48 <File::close()+0x5a>
c0012d07:	8b 1c 95 20 df 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd20e0]
c0012d0e:	85 db                	test   ebx,ebx
c0012d10:	74 36                	je     c0012d48 <File::close()+0x5a>
c0012d12:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012d19:	74 2d                	je     c0012d48 <File::close()+0x5a>
c0012d1b:	b8 05 00 00 00       	mov    eax,0x5
c0012d20:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012d24:	74 22                	je     c0012d48 <File::close()+0x5a>
c0012d26:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012d2a:	8b 04 95 20 df 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd20e0]
c0012d31:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012d37:	53                   	push   ebx
c0012d38:	53                   	push   ebx
c0012d39:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d3b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d41:	50                   	push   eax
c0012d42:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012d45:	83 c4 10             	add    esp,0x10
c0012d48:	83 c4 08             	add    esp,0x8
c0012d4b:	5b                   	pop    ebx
c0012d4c:	c3                   	ret    
c0012d4d:	90                   	nop

c0012d4e <File::seek(unsigned long long)>:
c0012d4e:	56                   	push   esi
c0012d4f:	53                   	push   ebx
c0012d50:	b8 0b 00 00 00       	mov    eax,0xb
c0012d55:	51                   	push   ecx
c0012d56:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012d5a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012d5e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012d65:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012d69:	80 fa 19             	cmp    dl,0x19
c0012d6c:	77 31                	ja     c0012d9f <File::seek(unsigned long long)+0x51>
c0012d6e:	8b 14 95 20 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd20e0]
c0012d75:	85 d2                	test   edx,edx
c0012d77:	74 26                	je     c0012d9f <File::seek(unsigned long long)+0x51>
c0012d79:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d7f:	85 d2                	test   edx,edx
c0012d81:	74 1c                	je     c0012d9f <File::seek(unsigned long long)+0x51>
c0012d83:	b8 05 00 00 00       	mov    eax,0x5
c0012d88:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012d8c:	74 11                	je     c0012d9f <File::seek(unsigned long long)+0x51>
c0012d8e:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d90:	53                   	push   ebx
c0012d91:	51                   	push   ecx
c0012d92:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012d98:	52                   	push   edx
c0012d99:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012d9c:	83 c4 10             	add    esp,0x10
c0012d9f:	5a                   	pop    edx
c0012da0:	5b                   	pop    ebx
c0012da1:	5e                   	pop    esi
c0012da2:	c3                   	ret    
c0012da3:	90                   	nop

c0012da4 <File::tell(unsigned long long*)>:
c0012da4:	83 ec 0c             	sub    esp,0xc
c0012da7:	b8 0b 00 00 00       	mov    eax,0xb
c0012dac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012db0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012db7:	80 fa 19             	cmp    dl,0x19
c0012dba:	77 34                	ja     c0012df0 <File::tell(unsigned long long*)+0x4c>
c0012dbc:	8b 14 95 20 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd20e0]
c0012dc3:	85 d2                	test   edx,edx
c0012dc5:	74 29                	je     c0012df0 <File::tell(unsigned long long*)+0x4c>
c0012dc7:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012dcd:	85 d2                	test   edx,edx
c0012dcf:	74 1f                	je     c0012df0 <File::tell(unsigned long long*)+0x4c>
c0012dd1:	b8 05 00 00 00       	mov    eax,0x5
c0012dd6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012dda:	74 14                	je     c0012df0 <File::tell(unsigned long long*)+0x4c>
c0012ddc:	50                   	push   eax
c0012ddd:	8b 02                	mov    eax,DWORD PTR [edx]
c0012ddf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012de3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012de9:	52                   	push   edx
c0012dea:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012ded:	83 c4 10             	add    esp,0x10
c0012df0:	83 c4 0c             	add    esp,0xc
c0012df3:	c3                   	ret    

c0012df4 <File::rewind()>:
c0012df4:	83 ec 10             	sub    esp,0x10
c0012df7:	6a 00                	push   0x0
c0012df9:	6a 00                	push   0x0
c0012dfb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012dff:	e8 4a ff ff ff       	call   c0012d4e <File::seek(unsigned long long)>
c0012e04:	83 c4 1c             	add    esp,0x1c
c0012e07:	c3                   	ret    

c0012e08 <File::unlink()>:
c0012e08:	83 ec 0c             	sub    esp,0xc
c0012e0b:	b8 0b 00 00 00       	mov    eax,0xb
c0012e10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e14:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e1b:	80 f9 19             	cmp    cl,0x19
c0012e1e:	77 2f                	ja     c0012e4f <File::unlink()+0x47>
c0012e20:	8b 0c 8d 20 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd20e0]
c0012e27:	85 c9                	test   ecx,ecx
c0012e29:	74 24                	je     c0012e4f <File::unlink()+0x47>
c0012e2b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e31:	85 c9                	test   ecx,ecx
c0012e33:	74 1a                	je     c0012e4f <File::unlink()+0x47>
c0012e35:	b8 06 00 00 00       	mov    eax,0x6
c0012e3a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e3e:	75 0f                	jne    c0012e4f <File::unlink()+0x47>
c0012e40:	83 c2 0d             	add    edx,0xd
c0012e43:	50                   	push   eax
c0012e44:	50                   	push   eax
c0012e45:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e47:	52                   	push   edx
c0012e48:	51                   	push   ecx
c0012e49:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012e4c:	83 c4 10             	add    esp,0x10
c0012e4f:	83 c4 0c             	add    esp,0xc
c0012e52:	c3                   	ret    
c0012e53:	90                   	nop

c0012e54 <File::rename(char const*)>:
c0012e54:	83 ec 0c             	sub    esp,0xc
c0012e57:	b8 0b 00 00 00       	mov    eax,0xb
c0012e5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e60:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e67:	80 f9 19             	cmp    cl,0x19
c0012e6a:	77 32                	ja     c0012e9e <File::rename(char const*)+0x4a>
c0012e6c:	8b 0c 8d 20 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd20e0]
c0012e73:	85 c9                	test   ecx,ecx
c0012e75:	74 27                	je     c0012e9e <File::rename(char const*)+0x4a>
c0012e77:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e7d:	85 c9                	test   ecx,ecx
c0012e7f:	74 1d                	je     c0012e9e <File::rename(char const*)+0x4a>
c0012e81:	b8 06 00 00 00       	mov    eax,0x6
c0012e86:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e8a:	75 12                	jne    c0012e9e <File::rename(char const*)+0x4a>
c0012e8c:	83 c2 0d             	add    edx,0xd
c0012e8f:	50                   	push   eax
c0012e90:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e92:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e96:	52                   	push   edx
c0012e97:	51                   	push   ecx
c0012e98:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012e9b:	83 c4 10             	add    esp,0x10
c0012e9e:	83 c4 0c             	add    esp,0xc
c0012ea1:	c3                   	ret    

c0012ea2 <File::chfatattr(unsigned char, unsigned char)>:
c0012ea2:	57                   	push   edi
c0012ea3:	b8 0b 00 00 00       	mov    eax,0xb
c0012ea8:	56                   	push   esi
c0012ea9:	53                   	push   ebx
c0012eaa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012eae:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012eb2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012eb9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012ebd:	80 f9 19             	cmp    cl,0x19
c0012ec0:	77 37                	ja     c0012ef9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012ec2:	8b 0c 8d 20 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd20e0]
c0012ec9:	85 c9                	test   ecx,ecx
c0012ecb:	74 2c                	je     c0012ef9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012ecd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ed3:	85 c9                	test   ecx,ecx
c0012ed5:	74 22                	je     c0012ef9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012ed7:	b8 06 00 00 00       	mov    eax,0x6
c0012edc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ee0:	75 17                	jne    c0012ef9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012ee2:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012ee4:	89 f0                	mov    eax,esi
c0012ee6:	83 c2 0d             	add    edx,0xd
c0012ee9:	0f b6 f0             	movzx  esi,al
c0012eec:	0f b6 db             	movzx  ebx,bl
c0012eef:	56                   	push   esi
c0012ef0:	53                   	push   ebx
c0012ef1:	52                   	push   edx
c0012ef2:	51                   	push   ecx
c0012ef3:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012ef6:	83 c4 10             	add    esp,0x10
c0012ef9:	5b                   	pop    ebx
c0012efa:	5e                   	pop    esi
c0012efb:	5f                   	pop    edi
c0012efc:	c3                   	ret    
c0012efd:	90                   	nop

c0012efe <File::exists()>:
c0012efe:	83 ec 0c             	sub    esp,0xc
c0012f01:	31 c0                	xor    eax,eax
c0012f03:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f07:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f0e:	80 f9 19             	cmp    cl,0x19
c0012f11:	77 24                	ja     c0012f37 <File::exists()+0x39>
c0012f13:	8b 0c 8d 20 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd20e0]
c0012f1a:	85 c9                	test   ecx,ecx
c0012f1c:	74 19                	je     c0012f37 <File::exists()+0x39>
c0012f1e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f24:	85 c9                	test   ecx,ecx
c0012f26:	74 0f                	je     c0012f37 <File::exists()+0x39>
c0012f28:	83 c2 0d             	add    edx,0xd
c0012f2b:	50                   	push   eax
c0012f2c:	50                   	push   eax
c0012f2d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f2f:	52                   	push   edx
c0012f30:	51                   	push   ecx
c0012f31:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012f34:	83 c4 10             	add    esp,0x10
c0012f37:	83 c4 0c             	add    esp,0xc
c0012f3a:	c3                   	ret    
c0012f3b:	90                   	nop

c0012f3c <File::stat(unsigned long long*, bool*)>:
c0012f3c:	56                   	push   esi
c0012f3d:	53                   	push   ebx
c0012f3e:	50                   	push   eax
c0012f3f:	b8 0b 00 00 00       	mov    eax,0xb
c0012f44:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f48:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012f4c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f53:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012f57:	80 f9 19             	cmp    cl,0x19
c0012f5a:	77 3d                	ja     c0012f99 <File::stat(unsigned long long*, bool*)+0x5d>
c0012f5c:	8b 0c 8d 20 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd20e0]
c0012f63:	85 c9                	test   ecx,ecx
c0012f65:	74 32                	je     c0012f99 <File::stat(unsigned long long*, bool*)+0x5d>
c0012f67:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f6d:	85 c9                	test   ecx,ecx
c0012f6f:	74 28                	je     c0012f99 <File::stat(unsigned long long*, bool*)+0x5d>
c0012f71:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f73:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f77:	74 13                	je     c0012f8c <File::stat(unsigned long long*, bool*)+0x50>
c0012f79:	83 ec 04             	sub    esp,0x4
c0012f7c:	56                   	push   esi
c0012f7d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012f83:	51                   	push   ecx
c0012f84:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012f87:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012f8a:	eb 0a                	jmp    c0012f96 <File::stat(unsigned long long*, bool*)+0x5a>
c0012f8c:	53                   	push   ebx
c0012f8d:	83 c2 0d             	add    edx,0xd
c0012f90:	56                   	push   esi
c0012f91:	52                   	push   edx
c0012f92:	51                   	push   ecx
c0012f93:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012f96:	83 c4 10             	add    esp,0x10
c0012f99:	5a                   	pop    edx
c0012f9a:	5b                   	pop    ebx
c0012f9b:	5e                   	pop    esi
c0012f9c:	c3                   	ret    

c0012f9d <Fs::setcwd(Process*, char*)>:
c0012f9d:	55                   	push   ebp
c0012f9e:	57                   	push   edi
c0012f9f:	56                   	push   esi
c0012fa0:	53                   	push   ebx
c0012fa1:	81 ec 20 02 00 00    	sub    esp,0x220
c0012fa7:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012fae:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012fb4:	57                   	push   edi
c0012fb5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012fbc:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012fc0:	56                   	push   esi
c0012fc1:	e8 bc fa ff ff       	call   c0012a82 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012fc6:	89 34 24             	mov    DWORD PTR [esp],esi
c0012fc9:	e8 9e d7 fe ff       	call   c000076c <strlen>
c0012fce:	83 c4 10             	add    esp,0x10
c0012fd1:	83 f8 02             	cmp    eax,0x2
c0012fd4:	77 17                	ja     c0012fed <Fs::setcwd(Process*, char*)+0x50>
c0012fd6:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012fdb:	83 e8 41             	sub    eax,0x41
c0012fde:	83 f8 19             	cmp    eax,0x19
c0012fe1:	76 24                	jbe    c0013007 <Fs::setcwd(Process*, char*)+0x6a>
c0012fe3:	b8 03 00 00 00       	mov    eax,0x3
c0012fe8:	e9 e0 00 00 00       	jmp    c00130cd <Fs::setcwd(Process*, char*)+0x130>
c0012fed:	83 ec 0c             	sub    esp,0xc
c0012ff0:	56                   	push   esi
c0012ff1:	e8 76 d7 fe ff       	call   c000076c <strlen>
c0012ff6:	83 c4 10             	add    esp,0x10
c0012ff9:	83 f8 03             	cmp    eax,0x3
c0012ffc:	75 34                	jne    c0013032 <Fs::setcwd(Process*, char*)+0x95>
c0012ffe:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013003:	75 2d                	jne    c0013032 <Fs::setcwd(Process*, char*)+0x95>
c0013005:	eb cf                	jmp    c0012fd6 <Fs::setcwd(Process*, char*)+0x39>
c0013007:	8b 14 85 20 df 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd20e0]
c001300e:	b8 05 00 00 00       	mov    eax,0x5
c0013013:	85 d2                	test   edx,edx
c0013015:	0f 84 b2 00 00 00    	je     c00130cd <Fs::setcwd(Process*, char*)+0x130>
c001301b:	b8 06 00 00 00       	mov    eax,0x6
c0013020:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013027:	0f 85 92 00 00 00    	jne    c00130bf <Fs::setcwd(Process*, char*)+0x122>
c001302d:	e9 9b 00 00 00       	jmp    c00130cd <Fs::setcwd(Process*, char*)+0x130>
c0013032:	83 ec 0c             	sub    esp,0xc
c0013035:	68 14 01 00 00       	push   0x114
c001303a:	e8 5a c5 ff ff       	call   c000f599 <malloc>
c001303f:	83 c4 0c             	add    esp,0xc
c0013042:	89 c3                	mov    ebx,eax
c0013044:	55                   	push   ebp
c0013045:	56                   	push   esi
c0013046:	50                   	push   eax
c0013047:	e8 e0 fb ff ff       	call   c0012c2c <File::File(char const*, Process*)>
c001304c:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013051:	83 c4 0c             	add    esp,0xc
c0013054:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013058:	50                   	push   eax
c0013059:	8d 44 24 10          	lea    eax,[esp+0x10]
c001305d:	50                   	push   eax
c001305e:	53                   	push   ebx
c001305f:	e8 d8 fe ff ff       	call   c0012f3c <File::stat(unsigned long long*, bool*)>
c0013064:	83 c4 10             	add    esp,0x10
c0013067:	83 f8 02             	cmp    eax,0x2
c001306a:	74 04                	je     c0013070 <Fs::setcwd(Process*, char*)+0xd3>
c001306c:	85 c0                	test   eax,eax
c001306e:	74 1c                	je     c001308c <Fs::setcwd(Process*, char*)+0xef>
c0013070:	b8 01 00 00 00       	mov    eax,0x1
c0013075:	85 db                	test   ebx,ebx
c0013077:	74 54                	je     c00130cd <Fs::setcwd(Process*, char*)+0x130>
c0013079:	83 ec 0c             	sub    esp,0xc
c001307c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001307e:	53                   	push   ebx
c001307f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013082:	83 c4 10             	add    esp,0x10
c0013085:	b8 01 00 00 00       	mov    eax,0x1
c001308a:	eb 41                	jmp    c00130cd <Fs::setcwd(Process*, char*)+0x130>
c001308c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013091:	75 1c                	jne    c00130af <Fs::setcwd(Process*, char*)+0x112>
c0013093:	b8 02 00 00 00       	mov    eax,0x2
c0013098:	85 db                	test   ebx,ebx
c001309a:	74 31                	je     c00130cd <Fs::setcwd(Process*, char*)+0x130>
c001309c:	83 ec 0c             	sub    esp,0xc
c001309f:	8b 03                	mov    eax,DWORD PTR [ebx]
c00130a1:	53                   	push   ebx
c00130a2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00130a5:	83 c4 10             	add    esp,0x10
c00130a8:	b8 02 00 00 00       	mov    eax,0x2
c00130ad:	eb 1e                	jmp    c00130cd <Fs::setcwd(Process*, char*)+0x130>
c00130af:	85 db                	test   ebx,ebx
c00130b1:	74 0c                	je     c00130bf <Fs::setcwd(Process*, char*)+0x122>
c00130b3:	83 ec 0c             	sub    esp,0xc
c00130b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00130b8:	53                   	push   ebx
c00130b9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00130bc:	83 c4 10             	add    esp,0x10
c00130bf:	50                   	push   eax
c00130c0:	50                   	push   eax
c00130c1:	56                   	push   esi
c00130c2:	57                   	push   edi
c00130c3:	e8 44 d7 fe ff       	call   c000080c <strcpy>
c00130c8:	83 c4 10             	add    esp,0x10
c00130cb:	31 c0                	xor    eax,eax
c00130cd:	81 c4 1c 02 00 00    	add    esp,0x21c
c00130d3:	5b                   	pop    ebx
c00130d4:	5e                   	pop    esi
c00130d5:	5f                   	pop    edi
c00130d6:	5d                   	pop    ebp
c00130d7:	c3                   	ret    

c00130d8 <Directory::Directory(char const*, Process*)>:
c00130d8:	83 ec 0c             	sub    esp,0xc
c00130db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130df:	83 ec 08             	sub    esp,0x8
c00130e2:	6a 00                	push   0x0
c00130e4:	50                   	push   eax
c00130e5:	e8 f4 dc ff ff       	call   c0010dde <UnixFile::UnixFile(int)>
c00130ea:	83 c4 10             	add    esp,0x10
c00130ed:	ba c0 a8 02 c0       	mov    edx,0xc002a8c0
c00130f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130f6:	89 10                	mov    DWORD PTR [eax],edx
c00130f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130fc:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013106:	83 c0 0d             	add    eax,0xd
c0013109:	83 ec 04             	sub    esp,0x4
c001310c:	52                   	push   edx
c001310d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013111:	50                   	push   eax
c0013112:	e8 6b f9 ff ff       	call   c0012a82 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013117:	83 c4 10             	add    esp,0x10
c001311a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001311e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013121:	8d 50 bf             	lea    edx,[eax-0x41]
c0013124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013128:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001312e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013132:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013136:	90                   	nop
c0013137:	83 c4 0c             	add    esp,0xc
c001313a:	c3                   	ret    
c001313b:	90                   	nop

c001313c <Directory::open()>:
c001313c:	53                   	push   ebx
c001313d:	b8 0b 00 00 00       	mov    eax,0xb
c0013142:	83 ec 08             	sub    esp,0x8
c0013145:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013149:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013150:	80 fa 19             	cmp    dl,0x19
c0013153:	77 3d                	ja     c0013192 <Directory::open()+0x56>
c0013155:	8b 14 95 20 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd20e0]
c001315c:	85 d2                	test   edx,edx
c001315e:	74 32                	je     c0013192 <Directory::open()+0x56>
c0013160:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013166:	85 d2                	test   edx,edx
c0013168:	74 28                	je     c0013192 <Directory::open()+0x56>
c001316a:	b8 06 00 00 00       	mov    eax,0x6
c001316f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013173:	75 1d                	jne    c0013192 <Directory::open()+0x56>
c0013175:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001317b:	50                   	push   eax
c001317c:	8b 02                	mov    eax,DWORD PTR [edx]
c001317e:	51                   	push   ecx
c001317f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013182:	51                   	push   ecx
c0013183:	52                   	push   edx
c0013184:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013187:	83 c4 10             	add    esp,0x10
c001318a:	85 c0                	test   eax,eax
c001318c:	75 04                	jne    c0013192 <Directory::open()+0x56>
c001318e:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013192:	83 c4 08             	add    esp,0x8
c0013195:	5b                   	pop    ebx
c0013196:	c3                   	ret    
c0013197:	90                   	nop

c0013198 <Directory::close()>:
c0013198:	53                   	push   ebx
c0013199:	b8 0b 00 00 00       	mov    eax,0xb
c001319e:	83 ec 08             	sub    esp,0x8
c00131a1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00131a5:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00131ac:	80 fa 19             	cmp    dl,0x19
c00131af:	77 41                	ja     c00131f2 <Directory::close()+0x5a>
c00131b1:	8b 1c 95 20 df 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd20e0]
c00131b8:	85 db                	test   ebx,ebx
c00131ba:	74 36                	je     c00131f2 <Directory::close()+0x5a>
c00131bc:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00131c3:	74 2d                	je     c00131f2 <Directory::close()+0x5a>
c00131c5:	b8 05 00 00 00       	mov    eax,0x5
c00131ca:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00131ce:	74 22                	je     c00131f2 <Directory::close()+0x5a>
c00131d0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00131d4:	8b 04 95 20 df 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd20e0]
c00131db:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00131e1:	53                   	push   ebx
c00131e2:	53                   	push   ebx
c00131e3:	8b 10                	mov    edx,DWORD PTR [eax]
c00131e5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00131eb:	50                   	push   eax
c00131ec:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00131ef:	83 c4 10             	add    esp,0x10
c00131f2:	83 c4 08             	add    esp,0x8
c00131f5:	5b                   	pop    ebx
c00131f6:	c3                   	ret    
c00131f7:	90                   	nop

c00131f8 <Directory::unlink()>:
c00131f8:	83 ec 0c             	sub    esp,0xc
c00131fb:	b8 0b 00 00 00       	mov    eax,0xb
c0013200:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013204:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001320b:	80 f9 19             	cmp    cl,0x19
c001320e:	77 2f                	ja     c001323f <Directory::unlink()+0x47>
c0013210:	8b 0c 8d 20 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd20e0]
c0013217:	85 c9                	test   ecx,ecx
c0013219:	74 24                	je     c001323f <Directory::unlink()+0x47>
c001321b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013221:	85 c9                	test   ecx,ecx
c0013223:	74 1a                	je     c001323f <Directory::unlink()+0x47>
c0013225:	b8 06 00 00 00       	mov    eax,0x6
c001322a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001322e:	75 0f                	jne    c001323f <Directory::unlink()+0x47>
c0013230:	83 c2 0d             	add    edx,0xd
c0013233:	50                   	push   eax
c0013234:	50                   	push   eax
c0013235:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013237:	52                   	push   edx
c0013238:	51                   	push   ecx
c0013239:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001323c:	83 c4 10             	add    esp,0x10
c001323f:	83 c4 0c             	add    esp,0xc
c0013242:	c3                   	ret    
c0013243:	90                   	nop

c0013244 <Directory::rename(char const*)>:
c0013244:	83 ec 0c             	sub    esp,0xc
c0013247:	b8 0b 00 00 00       	mov    eax,0xb
c001324c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013250:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013257:	80 f9 19             	cmp    cl,0x19
c001325a:	77 32                	ja     c001328e <Directory::rename(char const*)+0x4a>
c001325c:	8b 0c 8d 20 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd20e0]
c0013263:	85 c9                	test   ecx,ecx
c0013265:	74 27                	je     c001328e <Directory::rename(char const*)+0x4a>
c0013267:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001326d:	85 c9                	test   ecx,ecx
c001326f:	74 1d                	je     c001328e <Directory::rename(char const*)+0x4a>
c0013271:	b8 06 00 00 00       	mov    eax,0x6
c0013276:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001327a:	75 12                	jne    c001328e <Directory::rename(char const*)+0x4a>
c001327c:	83 c2 0d             	add    edx,0xd
c001327f:	50                   	push   eax
c0013280:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013282:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013286:	52                   	push   edx
c0013287:	51                   	push   ecx
c0013288:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001328b:	83 c4 10             	add    esp,0x10
c001328e:	83 c4 0c             	add    esp,0xc
c0013291:	c3                   	ret    

c0013292 <Directory::exists()>:
c0013292:	83 ec 0c             	sub    esp,0xc
c0013295:	31 c0                	xor    eax,eax
c0013297:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001329b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132a2:	80 f9 19             	cmp    cl,0x19
c00132a5:	77 24                	ja     c00132cb <Directory::exists()+0x39>
c00132a7:	8b 0c 8d 20 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd20e0]
c00132ae:	85 c9                	test   ecx,ecx
c00132b0:	74 19                	je     c00132cb <Directory::exists()+0x39>
c00132b2:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132b8:	85 c9                	test   ecx,ecx
c00132ba:	74 0f                	je     c00132cb <Directory::exists()+0x39>
c00132bc:	83 c2 0d             	add    edx,0xd
c00132bf:	50                   	push   eax
c00132c0:	50                   	push   eax
c00132c1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132c3:	52                   	push   edx
c00132c4:	51                   	push   ecx
c00132c5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00132c8:	83 c4 10             	add    esp,0x10
c00132cb:	83 c4 0c             	add    esp,0xc
c00132ce:	c3                   	ret    
c00132cf:	90                   	nop

c00132d0 <Directory::read(dirent*)>:
c00132d0:	83 ec 1c             	sub    esp,0x1c
c00132d3:	b8 0b 00 00 00       	mov    eax,0xb
c00132d8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00132dc:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00132e3:	80 fa 19             	cmp    dl,0x19
c00132e6:	77 30                	ja     c0013318 <Directory::read(dirent*)+0x48>
c00132e8:	8b 14 95 20 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd20e0]
c00132ef:	85 d2                	test   edx,edx
c00132f1:	74 25                	je     c0013318 <Directory::read(dirent*)+0x48>
c00132f3:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00132fa:	74 1c                	je     c0013318 <Directory::read(dirent*)+0x48>
c00132fc:	83 ec 0c             	sub    esp,0xc
c00132ff:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013301:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013305:	52                   	push   edx
c0013306:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001330a:	6a 00                	push   0x0
c001330c:	68 10 01 00 00       	push   0x110
c0013311:	51                   	push   ecx
c0013312:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013315:	83 c4 20             	add    esp,0x20
c0013318:	83 c4 1c             	add    esp,0x1c
c001331b:	c3                   	ret    

c001331c <Directory::create()>:
c001331c:	83 ec 0c             	sub    esp,0xc
c001331f:	b8 0b 00 00 00       	mov    eax,0xb
c0013324:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013328:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001332f:	80 f9 19             	cmp    cl,0x19
c0013332:	77 2f                	ja     c0013363 <Directory::create()+0x47>
c0013334:	8b 0c 8d 20 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd20e0]
c001333b:	85 c9                	test   ecx,ecx
c001333d:	74 24                	je     c0013363 <Directory::create()+0x47>
c001333f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013345:	85 c9                	test   ecx,ecx
c0013347:	74 1a                	je     c0013363 <Directory::create()+0x47>
c0013349:	b8 06 00 00 00       	mov    eax,0x6
c001334e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013352:	75 0f                	jne    c0013363 <Directory::create()+0x47>
c0013354:	83 c2 0d             	add    edx,0xd
c0013357:	50                   	push   eax
c0013358:	50                   	push   eax
c0013359:	8b 01                	mov    eax,DWORD PTR [ecx]
c001335b:	52                   	push   edx
c001335c:	51                   	push   ecx
c001335d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013360:	83 c4 10             	add    esp,0x10
c0013363:	83 c4 0c             	add    esp,0xc
c0013366:	c3                   	ret    
c0013367:	90                   	nop

c0013368 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013368:	b8 0a 00 00 00       	mov    eax,0xa
c001336d:	c3                   	ret    

c001336e <Bus::Bus(char const*)>:
c001336e:	83 ec 0c             	sub    esp,0xc
c0013371:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013375:	83 ec 08             	sub    esp,0x8
c0013378:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001337c:	50                   	push   eax
c001337d:	e8 88 09 00 00       	call   c0013d0a <Device::Device(char const*)>
c0013382:	83 c4 10             	add    esp,0x10
c0013385:	ba dc a8 02 c0       	mov    edx,0xc002a8dc
c001338a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001338e:	89 10                	mov    DWORD PTR [eax],edx
c0013390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013394:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001339e:	90                   	nop
c001339f:	83 c4 0c             	add    esp,0xc
c00133a2:	c3                   	ret    
c00133a3:	90                   	nop

c00133a4 <Bus::~Bus()>:
c00133a4:	83 ec 0c             	sub    esp,0xc
c00133a7:	ba dc a8 02 c0       	mov    edx,0xc002a8dc
c00133ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133b0:	89 10                	mov    DWORD PTR [eax],edx
c00133b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133b6:	83 ec 0c             	sub    esp,0xc
c00133b9:	50                   	push   eax
c00133ba:	e8 15 06 00 00       	call   c00139d4 <Device::~Device()>
c00133bf:	83 c4 10             	add    esp,0x10
c00133c2:	90                   	nop
c00133c3:	83 c4 0c             	add    esp,0xc
c00133c6:	c3                   	ret    
c00133c7:	90                   	nop

c00133c8 <Bus::~Bus()>:
c00133c8:	83 ec 0c             	sub    esp,0xc
c00133cb:	83 ec 0c             	sub    esp,0xc
c00133ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133d2:	e8 cd ff ff ff       	call   c00133a4 <Bus::~Bus()>
c00133d7:	83 c4 10             	add    esp,0x10
c00133da:	83 ec 08             	sub    esp,0x8
c00133dd:	68 58 01 00 00       	push   0x158
c00133e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133e6:	e8 0a f2 ff ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c00133eb:	83 c4 10             	add    esp,0x10
c00133ee:	83 c4 0c             	add    esp,0xc
c00133f1:	c3                   	ret    

c00133f2 <Buzzer::Buzzer(char const*)>:
c00133f2:	83 ec 0c             	sub    esp,0xc
c00133f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f9:	83 ec 08             	sub    esp,0x8
c00133fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013400:	50                   	push   eax
c0013401:	e8 04 09 00 00       	call   c0013d0a <Device::Device(char const*)>
c0013406:	83 c4 10             	add    esp,0x10
c0013409:	ba 08 a9 02 c0       	mov    edx,0xc002a908
c001340e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013412:	89 10                	mov    DWORD PTR [eax],edx
c0013414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013418:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013426:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013430:	90                   	nop
c0013431:	83 c4 0c             	add    esp,0xc
c0013434:	c3                   	ret    
c0013435:	90                   	nop

c0013436 <Buzzer::~Buzzer()>:
c0013436:	83 ec 0c             	sub    esp,0xc
c0013439:	ba 08 a9 02 c0       	mov    edx,0xc002a908
c001343e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013442:	89 10                	mov    DWORD PTR [eax],edx
c0013444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013448:	83 ec 0c             	sub    esp,0xc
c001344b:	50                   	push   eax
c001344c:	e8 83 05 00 00       	call   c00139d4 <Device::~Device()>
c0013451:	83 c4 10             	add    esp,0x10
c0013454:	90                   	nop
c0013455:	83 c4 0c             	add    esp,0xc
c0013458:	c3                   	ret    
c0013459:	90                   	nop

c001345a <Buzzer::~Buzzer()>:
c001345a:	83 ec 0c             	sub    esp,0xc
c001345d:	83 ec 0c             	sub    esp,0xc
c0013460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013464:	e8 cd ff ff ff       	call   c0013436 <Buzzer::~Buzzer()>
c0013469:	83 c4 10             	add    esp,0x10
c001346c:	83 ec 08             	sub    esp,0x8
c001346f:	68 5c 01 00 00       	push   0x15c
c0013474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013478:	e8 78 f1 ff ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c001347d:	83 c4 10             	add    esp,0x10
c0013480:	83 c4 0c             	add    esp,0xc
c0013483:	c3                   	ret    

c0013484 <Buzzer::stop()>:
c0013484:	83 ec 14             	sub    esp,0x14
c0013487:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001348b:	8b 10                	mov    edx,DWORD PTR [eax]
c001348d:	6a 00                	push   0x0
c001348f:	50                   	push   eax
c0013490:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013493:	83 c4 1c             	add    esp,0x1c
c0013496:	c3                   	ret    

c0013497 <beepThread(void*)>:
c0013497:	53                   	push   ebx
c0013498:	83 ec 08             	sub    esp,0x8
c001349b:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c00134a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00134a4:	48                   	dec    eax
c00134a5:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c00134aa:	75 01                	jne    c00134ad <beepThread(void*)+0x16>
c00134ac:	fb                   	sti    
c00134ad:	50                   	push   eax
c00134ae:	50                   	push   eax
c00134af:	b8 40 42 0f 00       	mov    eax,0xf4240
c00134b4:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00134ba:	52                   	push   edx
c00134bb:	50                   	push   eax
c00134bc:	e8 dc a7 00 00       	call   c001dc9d <nanoSleep(unsigned long long)>
c00134c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00134c4:	e8 bb ff ff ff       	call   c0013484 <Buzzer::stop()>
c00134c9:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00134d1:	83 c4 18             	add    esp,0x18
c00134d4:	5b                   	pop    ebx
c00134d5:	e9 bf a6 00 00       	jmp    c001db99 <blockTask(TaskState)>

c00134da <Buzzer::beep(int, int, bool)>:
c00134da:	57                   	push   edi
c00134db:	56                   	push   esi
c00134dc:	53                   	push   ebx
c00134dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00134e1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00134e5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00134e9:	52                   	push   edx
c00134ea:	52                   	push   edx
c00134eb:	8b 06                	mov    eax,DWORD PTR [esi]
c00134ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134f1:	56                   	push   esi
c00134f2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00134f5:	83 c4 10             	add    esp,0x10
c00134f8:	89 f8                	mov    eax,edi
c00134fa:	84 c0                	test   al,al
c00134fc:	74 1f                	je     c001351d <Buzzer::beep(int, int, bool)+0x43>
c00134fe:	50                   	push   eax
c00134ff:	50                   	push   eax
c0013500:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013506:	99                   	cdq    
c0013507:	52                   	push   edx
c0013508:	50                   	push   eax
c0013509:	e8 8f a7 00 00       	call   c001dc9d <nanoSleep(unsigned long long)>
c001350e:	83 c4 10             	add    esp,0x10
c0013511:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013515:	5b                   	pop    ebx
c0013516:	5e                   	pop    esi
c0013517:	5f                   	pop    edi
c0013518:	e9 67 ff ff ff       	jmp    c0013484 <Buzzer::stop()>
c001351d:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013523:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0013528:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013530:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013534:	c7 44 24 14 97 34 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013497
c001353c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013540:	5b                   	pop    ebx
c0013541:	5e                   	pop    esi
c0013542:	5f                   	pop    edi
c0013543:	e9 56 a2 00 00       	jmp    c001d79e <Process::createThread(void (*)(void*), void*, int)>

c0013548 <User::loadClockSettings(int)>:
c0013548:	53                   	push   ebx
c0013549:	83 ec 14             	sub    esp,0x14
c001354c:	68 14 01 00 00       	push   0x114
c0013551:	e8 43 c0 ff ff       	call   c000f599 <malloc>
c0013556:	83 c4 0c             	add    esp,0xc
c0013559:	89 c3                	mov    ebx,eax
c001355b:	ff 35 70 0e 03 c0    	push   DWORD PTR ds:0xc0030e70
c0013561:	68 30 a9 02 c0       	push   0xc002a930
c0013566:	50                   	push   eax
c0013567:	e8 c0 f6 ff ff       	call   c0012c2c <File::File(char const*, Process*)>
c001356c:	58                   	pop    eax
c001356d:	5a                   	pop    edx
c001356e:	6a 01                	push   0x1
c0013570:	53                   	push   ebx
c0013571:	e8 1a f7 ff ff       	call   c0012c90 <File::open(FileOpenMode)>
c0013576:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013579:	e8 70 f7 ff ff       	call   c0012cee <File::close()>
c001357e:	83 c4 10             	add    esp,0x10
c0013581:	85 db                	test   ebx,ebx
c0013583:	74 0f                	je     c0013594 <User::loadClockSettings(int)+0x4c>
c0013585:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013587:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001358b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001358e:	83 c4 08             	add    esp,0x8
c0013591:	5b                   	pop    ebx
c0013592:	ff e0                	jmp    eax
c0013594:	83 c4 08             	add    esp,0x8
c0013597:	5b                   	pop    ebx
c0013598:	c3                   	ret    
c0013599:	90                   	nop

c001359a <Clock::Clock(char const*)>:
c001359a:	83 ec 0c             	sub    esp,0xc
c001359d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135a1:	83 ec 08             	sub    esp,0x8
c00135a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135a8:	50                   	push   eax
c00135a9:	e8 5c 07 00 00       	call   c0013d0a <Device::Device(char const*)>
c00135ae:	83 c4 10             	add    esp,0x10
c00135b1:	ba 58 a9 02 c0       	mov    edx,0xc002a958
c00135b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135ba:	89 10                	mov    DWORD PTR [eax],edx
c00135bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135c0:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00135ca:	90                   	nop
c00135cb:	83 c4 0c             	add    esp,0xc
c00135ce:	c3                   	ret    
c00135cf:	90                   	nop

c00135d0 <Clock::~Clock()>:
c00135d0:	83 ec 0c             	sub    esp,0xc
c00135d3:	ba 58 a9 02 c0       	mov    edx,0xc002a958
c00135d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135dc:	89 10                	mov    DWORD PTR [eax],edx
c00135de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135e2:	83 ec 0c             	sub    esp,0xc
c00135e5:	50                   	push   eax
c00135e6:	e8 e9 03 00 00       	call   c00139d4 <Device::~Device()>
c00135eb:	83 c4 10             	add    esp,0x10
c00135ee:	90                   	nop
c00135ef:	83 c4 0c             	add    esp,0xc
c00135f2:	c3                   	ret    
c00135f3:	90                   	nop

c00135f4 <Clock::~Clock()>:
c00135f4:	83 ec 0c             	sub    esp,0xc
c00135f7:	83 ec 0c             	sub    esp,0xc
c00135fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135fe:	e8 cd ff ff ff       	call   c00135d0 <Clock::~Clock()>
c0013603:	83 c4 10             	add    esp,0x10
c0013606:	83 ec 08             	sub    esp,0x8
c0013609:	68 58 01 00 00       	push   0x158
c001360e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013612:	e8 de ef ff ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c0013617:	83 c4 10             	add    esp,0x10
c001361a:	83 c4 0c             	add    esp,0xc
c001361d:	c3                   	ret    

c001361e <Clock::timeInSecondsLocal()>:
c001361e:	53                   	push   ebx
c001361f:	83 ec 14             	sub    esp,0x14
c0013622:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013626:	8b 10                	mov    edx,DWORD PTR [eax]
c0013628:	50                   	push   eax
c0013629:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001362c:	0f b6 0d 9c da 02 c0 	movzx  ecx,BYTE PTR ds:0xc002da9c
c0013633:	03 0d a0 da 02 c0    	add    ecx,DWORD PTR ds:0xc002daa0
c0013639:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001363f:	89 cb                	mov    ebx,ecx
c0013641:	c1 fb 1f             	sar    ebx,0x1f
c0013644:	01 c8                	add    eax,ecx
c0013646:	11 da                	adc    edx,ebx
c0013648:	83 c4 10             	add    esp,0x10
c001364b:	31 c9                	xor    ecx,ecx
c001364d:	80 3d 9d da 02 c0 00 	cmp    BYTE PTR ds:0xc002da9d,0x0
c0013654:	74 05                	je     c001365b <Clock::timeInSecondsLocal()+0x3d>
c0013656:	b9 08 07 00 00       	mov    ecx,0x708
c001365b:	31 db                	xor    ebx,ebx
c001365d:	01 c8                	add    eax,ecx
c001365f:	11 da                	adc    edx,ebx
c0013661:	83 c4 08             	add    esp,0x8
c0013664:	5b                   	pop    ebx
c0013665:	c3                   	ret    

c0013666 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013666:	57                   	push   edi
c0013667:	56                   	push   esi
c0013668:	53                   	push   ebx
c0013669:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001366d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013671:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013673:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013677:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001367a:	0f b6 05 9c da 02 c0 	movzx  eax,BYTE PTR ds:0xc002da9c
c0013681:	03 05 a0 da 02 c0    	add    eax,DWORD PTR ds:0xc002daa0
c0013687:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001368d:	99                   	cdq    
c001368e:	29 c6                	sub    esi,eax
c0013690:	19 d7                	sbb    edi,edx
c0013692:	89 f0                	mov    eax,esi
c0013694:	89 fa                	mov    edx,edi
c0013696:	31 f6                	xor    esi,esi
c0013698:	80 3d 9d da 02 c0 00 	cmp    BYTE PTR ds:0xc002da9d,0x0
c001369f:	74 05                	je     c00136a6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00136a1:	be 08 07 00 00       	mov    esi,0x708
c00136a6:	31 ff                	xor    edi,edi
c00136a8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00136ac:	29 f0                	sub    eax,esi
c00136ae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00136b2:	19 fa                	sbb    edx,edi
c00136b4:	89 d8                	mov    eax,ebx
c00136b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00136ba:	5b                   	pop    ebx
c00136bb:	5e                   	pop    esi
c00136bc:	5f                   	pop    edi
c00136bd:	ff e0                	jmp    eax

c00136bf <datetimeToSeconds(datetime_t)>:
c00136bf:	55                   	push   ebp
c00136c0:	57                   	push   edi
c00136c1:	56                   	push   esi
c00136c2:	53                   	push   ebx
c00136c3:	83 ec 14             	sub    esp,0x14
c00136c6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00136ca:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00136ce:	89 d3                	mov    ebx,edx
c00136d0:	0f b6 c6             	movzx  eax,dh
c00136d3:	c1 eb 10             	shr    ebx,0x10
c00136d6:	48                   	dec    eax
c00136d7:	66 81 eb 6c 07       	sub    bx,0x76c
c00136dc:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00136e0:	0f b6 f5             	movzx  esi,ch
c00136e3:	89 cf                	mov    edi,ecx
c00136e5:	6b f6 3c             	imul   esi,esi,0x3c
c00136e8:	c1 ef 10             	shr    edi,0x10
c00136eb:	0f b6 c9             	movzx  ecx,cl
c00136ee:	89 f8                	mov    eax,edi
c00136f0:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00136f6:	0f b6 f8             	movzx  edi,al
c00136f9:	0f b6 d2             	movzx  edx,dl
c00136fc:	01 fe                	add    esi,edi
c00136fe:	01 f1                	add    ecx,esi
c0013700:	0f b7 f3             	movzx  esi,bx
c0013703:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013707:	c1 f9 1f             	sar    ecx,0x1f
c001370a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001370f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013713:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013718:	8b 0c 8d a0 a9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5660]
c001371f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013723:	76 29                	jbe    c001374e <datetimeToSeconds(datetime_t)+0x8f>
c0013725:	f6 c3 03             	test   bl,0x3
c0013728:	75 24                	jne    c001374e <datetimeToSeconds(datetime_t)+0x8f>
c001372a:	31 d2                	xor    edx,edx
c001372c:	bf 64 00 00 00       	mov    edi,0x64
c0013731:	89 d8                	mov    eax,ebx
c0013733:	66 f7 f7             	div    di
c0013736:	66 85 d2             	test   dx,dx
c0013739:	75 12                	jne    c001374d <datetimeToSeconds(datetime_t)+0x8e>
c001373b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013741:	bf 90 01 00 00       	mov    edi,0x190
c0013746:	99                   	cdq    
c0013747:	f7 ff                	idiv   edi
c0013749:	85 d2                	test   edx,edx
c001374b:	75 01                	jne    c001374e <datetimeToSeconds(datetime_t)+0x8f>
c001374d:	41                   	inc    ecx
c001374e:	66 83 fb 46          	cmp    bx,0x46
c0013752:	76 45                	jbe    c0013799 <datetimeToSeconds(datetime_t)+0xda>
c0013754:	bb 46 00 00 00       	mov    ebx,0x46
c0013759:	bf 64 00 00 00       	mov    edi,0x64
c001375e:	bd 90 01 00 00       	mov    ebp,0x190
c0013763:	b8 6d 01 00 00       	mov    eax,0x16d
c0013768:	f6 c3 03             	test   bl,0x3
c001376b:	75 23                	jne    c0013790 <datetimeToSeconds(datetime_t)+0xd1>
c001376d:	89 d8                	mov    eax,ebx
c001376f:	99                   	cdq    
c0013770:	f7 ff                	idiv   edi
c0013772:	b8 6e 01 00 00       	mov    eax,0x16e
c0013777:	85 d2                	test   edx,edx
c0013779:	75 15                	jne    c0013790 <datetimeToSeconds(datetime_t)+0xd1>
c001377b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013781:	99                   	cdq    
c0013782:	f7 fd                	idiv   ebp
c0013784:	83 fa 01             	cmp    edx,0x1
c0013787:	19 c0                	sbb    eax,eax
c0013789:	f7 d0                	not    eax
c001378b:	05 6e 01 00 00       	add    eax,0x16e
c0013790:	01 c1                	add    ecx,eax
c0013792:	43                   	inc    ebx
c0013793:	39 f3                	cmp    ebx,esi
c0013795:	7c cc                	jl     c0013763 <datetimeToSeconds(datetime_t)+0xa4>
c0013797:	eb 35                	jmp    c00137ce <datetimeToSeconds(datetime_t)+0x10f>
c0013799:	74 33                	je     c00137ce <datetimeToSeconds(datetime_t)+0x10f>
c001379b:	b8 45 00 00 00       	mov    eax,0x45
c00137a0:	89 c2                	mov    edx,eax
c00137a2:	83 e2 03             	and    edx,0x3
c00137a5:	39 f0                	cmp    eax,esi
c00137a7:	7e 0f                	jle    c00137b8 <datetimeToSeconds(datetime_t)+0xf9>
c00137a9:	83 fa 01             	cmp    edx,0x1
c00137ac:	19 d2                	sbb    edx,edx
c00137ae:	48                   	dec    eax
c00137af:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00137b6:	eb e8                	jmp    c00137a0 <datetimeToSeconds(datetime_t)+0xe1>
c00137b8:	b8 6d 01 00 00       	mov    eax,0x16d
c00137bd:	85 d2                	test   edx,edx
c00137bf:	75 0b                	jne    c00137cc <datetimeToSeconds(datetime_t)+0x10d>
c00137c1:	66 83 fb 01          	cmp    bx,0x1
c00137c5:	19 c0                	sbb    eax,eax
c00137c7:	05 6e 01 00 00       	add    eax,0x16e
c00137cc:	29 c1                	sub    ecx,eax
c00137ce:	b8 80 51 01 00       	mov    eax,0x15180
c00137d3:	f7 e9                	imul   ecx
c00137d5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00137d9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00137dd:	83 c4 14             	add    esp,0x14
c00137e0:	5b                   	pop    ebx
c00137e1:	5e                   	pop    esi
c00137e2:	5f                   	pop    edi
c00137e3:	5d                   	pop    ebp
c00137e4:	c3                   	ret    
c00137e5:	90                   	nop

c00137e6 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00137e6:	57                   	push   edi
c00137e7:	56                   	push   esi
c00137e8:	53                   	push   ebx
c00137e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00137ed:	8b 06                	mov    eax,DWORD PTR [esi]
c00137ef:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00137f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137fa:	e8 c0 fe ff ff       	call   c00136bf <datetimeToSeconds(datetime_t)>
c00137ff:	59                   	pop    ecx
c0013800:	0f b6 0d 9c da 02 c0 	movzx  ecx,BYTE PTR ds:0xc002da9c
c0013807:	5b                   	pop    ebx
c0013808:	03 0d a0 da 02 c0    	add    ecx,DWORD PTR ds:0xc002daa0
c001380e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013814:	89 cb                	mov    ebx,ecx
c0013816:	c1 fb 1f             	sar    ebx,0x1f
c0013819:	29 c8                	sub    eax,ecx
c001381b:	19 da                	sbb    edx,ebx
c001381d:	31 c9                	xor    ecx,ecx
c001381f:	80 3d 9d da 02 c0 00 	cmp    BYTE PTR ds:0xc002da9d,0x0
c0013826:	74 05                	je     c001382d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013828:	b9 08 07 00 00       	mov    ecx,0x708
c001382d:	31 db                	xor    ebx,ebx
c001382f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013833:	29 c8                	sub    eax,ecx
c0013835:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013839:	19 da                	sbb    edx,ebx
c001383b:	89 f8                	mov    eax,edi
c001383d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013841:	5b                   	pop    ebx
c0013842:	5e                   	pop    esi
c0013843:	5f                   	pop    edi
c0013844:	ff e0                	jmp    eax

c0013846 <secondsToDatetime(unsigned long long)>:
c0013846:	55                   	push   ebp
c0013847:	57                   	push   edi
c0013848:	56                   	push   esi
c0013849:	53                   	push   ebx
c001384a:	83 ec 1c             	sub    esp,0x1c
c001384d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013851:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013855:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013859:	6a 00                	push   0x0
c001385b:	68 80 51 01 00       	push   0x15180
c0013860:	55                   	push   ebp
c0013861:	57                   	push   edi
c0013862:	e8 ad 2e 01 00       	call   c0026714 <__udivdi3>
c0013867:	83 c4 10             	add    esp,0x10
c001386a:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013870:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013874:	6a 00                	push   0x0
c0013876:	68 80 51 01 00       	push   0x15180
c001387b:	55                   	push   ebp
c001387c:	57                   	push   edi
c001387d:	bf 10 0e 00 00       	mov    edi,0xe10
c0013882:	e8 8d 2f 01 00       	call   c0026814 <__umoddi3>
c0013887:	83 c4 10             	add    esp,0x10
c001388a:	99                   	cdq    
c001388b:	f7 ff                	idiv   edi
c001388d:	bf 3c 00 00 00       	mov    edi,0x3c
c0013892:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013895:	89 d0                	mov    eax,edx
c0013897:	99                   	cdq    
c0013898:	f7 ff                	idiv   edi
c001389a:	85 db                	test   ebx,ebx
c001389c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001389f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00138a2:	79 11                	jns    c00138b5 <secondsToDatetime(unsigned long long)+0x6f>
c00138a4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00138a8:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00138ae:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00138b3:	eb 07                	jmp    c00138bc <secondsToDatetime(unsigned long long)+0x76>
c00138b5:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00138ba:	89 d8                	mov    eax,ebx
c00138bc:	bf b4 05 00 00       	mov    edi,0x5b4
c00138c1:	99                   	cdq    
c00138c2:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00138c7:	f7 f9                	idiv   ecx
c00138c9:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00138ce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138d2:	31 d2                	xor    edx,edx
c00138d4:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00138dc:	01 c3                	add    ebx,eax
c00138de:	89 d8                	mov    eax,ebx
c00138e0:	f7 f1                	div    ecx
c00138e2:	31 d2                	xor    edx,edx
c00138e4:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00138e7:	89 d8                	mov    eax,ebx
c00138e9:	f7 f7                	div    edi
c00138eb:	31 d2                	xor    edx,edx
c00138ed:	29 c1                	sub    ecx,eax
c00138ef:	89 d8                	mov    eax,ebx
c00138f1:	f7 f5                	div    ebp
c00138f3:	bd 6d 01 00 00       	mov    ebp,0x16d
c00138f8:	29 c1                	sub    ecx,eax
c00138fa:	31 d2                	xor    edx,edx
c00138fc:	89 c8                	mov    eax,ecx
c00138fe:	f7 f5                	div    ebp
c0013900:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013905:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013909:	31 d2                	xor    edx,edx
c001390b:	89 c8                	mov    eax,ecx
c001390d:	f7 f5                	div    ebp
c001390f:	31 d2                	xor    edx,edx
c0013911:	01 c3                	add    ebx,eax
c0013913:	89 c8                	mov    eax,ecx
c0013915:	f7 f7                	div    edi
c0013917:	bf 99 00 00 00       	mov    edi,0x99
c001391c:	29 c3                	sub    ebx,eax
c001391e:	31 d2                	xor    edx,edx
c0013920:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013928:	29 c3                	sub    ebx,eax
c001392a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001392d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013930:	bb 05 00 00 00       	mov    ebx,0x5
c0013935:	83 c1 02             	add    ecx,0x2
c0013938:	89 c8                	mov    eax,ecx
c001393a:	f7 f7                	div    edi
c001393c:	31 d2                	xor    edx,edx
c001393e:	89 c7                	mov    edi,eax
c0013940:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013946:	83 c0 02             	add    eax,0x2
c0013949:	f7 f3                	div    ebx
c001394b:	89 eb                	mov    ebx,ebp
c001394d:	29 c3                	sub    ebx,eax
c001394f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013955:	88 1e                	mov    BYTE PTR [esi],bl
c0013957:	19 c0                	sbb    eax,eax
c0013959:	31 d2                	xor    edx,edx
c001395b:	83 e0 0c             	and    eax,0xc
c001395e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013962:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001396a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001396e:	83 f9 01             	cmp    ecx,0x1
c0013971:	0f 96 c2             	setbe  dl
c0013974:	41                   	inc    ecx
c0013975:	01 d0                	add    eax,edx
c0013977:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001397a:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001397e:	83 c4 1c             	add    esp,0x1c
c0013981:	89 f0                	mov    eax,esi
c0013983:	5b                   	pop    ebx
c0013984:	5e                   	pop    esi
c0013985:	5f                   	pop    edi
c0013986:	5d                   	pop    ebp
c0013987:	c2 04 00             	ret    0x4

c001398a <Clock::timeInDatetimeLocal()>:
c001398a:	53                   	push   ebx
c001398b:	83 ec 14             	sub    esp,0x14
c001398e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013992:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013996:	e8 83 fc ff ff       	call   c001361e <Clock::timeInSecondsLocal()>
c001399b:	83 c4 0c             	add    esp,0xc
c001399e:	52                   	push   edx
c001399f:	50                   	push   eax
c00139a0:	53                   	push   ebx
c00139a1:	e8 a0 fe ff ff       	call   c0013846 <secondsToDatetime(unsigned long long)>
c00139a6:	89 d8                	mov    eax,ebx
c00139a8:	83 c4 14             	add    esp,0x14
c00139ab:	5b                   	pop    ebx
c00139ac:	c2 04 00             	ret    0x4
c00139af:	90                   	nop

c00139b0 <Device::hibernate()>:
c00139b0:	c3                   	ret    
c00139b1:	90                   	nop

c00139b2 <Device::wake()>:
c00139b2:	c3                   	ret    
c00139b3:	90                   	nop

c00139b4 <Device::detect()>:
c00139b4:	c3                   	ret    
c00139b5:	90                   	nop

c00139b6 <Device::disableLegacy()>:
c00139b6:	c3                   	ret    
c00139b7:	90                   	nop

c00139b8 <Device::powerSaving(PowerSavingLevel)>:
c00139b8:	c3                   	ret    
c00139b9:	90                   	nop

c00139ba <DriverlessDevice::close(int, int, void*)>:
c00139ba:	31 c0                	xor    eax,eax
c00139bc:	c3                   	ret    
c00139bd:	90                   	nop

c00139be <DriverlessDevice::detect()>:
c00139be:	c3                   	ret    
c00139bf:	90                   	nop

c00139c0 <DriverlessDevice::open(int, int, void*)>:
c00139c0:	83 ec 18             	sub    esp,0x18
c00139c3:	68 d0 a9 02 c0       	push   0xc002a9d0
c00139c8:	e8 6c 64 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c00139cd:	83 c8 ff             	or     eax,0xffffffff
c00139d0:	83 c4 1c             	add    esp,0x1c
c00139d3:	c3                   	ret    

c00139d4 <Device::~Device()>:
c00139d4:	ba 30 aa 02 c0       	mov    edx,0xc002aa30
c00139d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139dd:	89 10                	mov    DWORD PTR [eax],edx
c00139df:	90                   	nop
c00139e0:	c3                   	ret    
c00139e1:	90                   	nop

c00139e2 <Device::~Device()>:
c00139e2:	83 ec 0c             	sub    esp,0xc
c00139e5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00139e9:	e8 e6 ff ff ff       	call   c00139d4 <Device::~Device()>
c00139ee:	83 c4 04             	add    esp,0x4
c00139f1:	83 ec 08             	sub    esp,0x8
c00139f4:	68 58 01 00 00       	push   0x158
c00139f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139fd:	e8 f3 eb ff ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c0013a02:	83 c4 10             	add    esp,0x10
c0013a05:	83 c4 0c             	add    esp,0xc
c0013a08:	c3                   	ret    
c0013a09:	90                   	nop

c0013a0a <Device::findAndLoadDriver()>:
c0013a0a:	c7 44 24 04 ee a9 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a9ee
c0013a12:	e9 b6 ec ff ff       	jmp    c00126cd <Dbg::kprintf(char const*, ...)>
c0013a17:	90                   	nop

c0013a18 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013a18:	57                   	push   edi
c0013a19:	b9 09 00 00 00       	mov    ecx,0x9
c0013a1e:	56                   	push   esi
c0013a1f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013a23:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013a27:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013a31:	81 c7 18 01 00 00    	add    edi,0x118
c0013a37:	fc                   	cld    
c0013a38:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013a3a:	5e                   	pop    esi
c0013a3b:	5f                   	pop    edi
c0013a3c:	c3                   	ret    
c0013a3d:	90                   	nop

c0013a3e <Device::preOpenACPI(void*, char*, char*)>:
c0013a3e:	57                   	push   edi
c0013a3f:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013a44:	56                   	push   esi
c0013a45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a49:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a4d:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013a57:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013a5d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013a63:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013a67:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013a69:	b9 0e 00 00 00       	mov    ecx,0xe
c0013a6e:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013a74:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013a78:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013a7a:	5e                   	pop    esi
c0013a7b:	5f                   	pop    edi
c0013a7c:	c3                   	ret    
c0013a7d:	90                   	nop

c0013a7e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013a7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a82:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013a87:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013a8e:	75 0b                	jne    c0013a9b <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013a90:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a92:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a96:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013a99:	eb 1e                	jmp    c0013ab9 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013a9b:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0013aa0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013aa6:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013aac:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013aae:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013ab2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013ab6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013ab9:	ff e0                	jmp    eax
c0013abb:	90                   	nop

c0013abc <Device::getParent()>:
c0013abc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ac0:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013ac6:	c3                   	ret    
c0013ac7:	90                   	nop

c0013ac8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013ac8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013acc:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013ad1:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013ad8:	75 0b                	jne    c0013ae5 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013ada:	8b 00                	mov    eax,DWORD PTR [eax]
c0013adc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013ae0:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013ae3:	eb 1e                	jmp    c0013b03 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013ae5:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0013aea:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013af0:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013af6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013af8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013afc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b00:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013b03:	ff e0                	jmp    eax
c0013b05:	90                   	nop

c0013b06 <Device::addChild(Device*)>:
c0013b06:	53                   	push   ebx
c0013b07:	83 ec 08             	sub    esp,0x8
c0013b0a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b12:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013b18:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013b1e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013b20:	85 d2                	test   edx,edx
c0013b22:	74 04                	je     c0013b28 <Device::addChild(Device*)+0x22>
c0013b24:	89 d3                	mov    ebx,edx
c0013b26:	eb f6                	jmp    c0013b1e <Device::addChild(Device*)+0x18>
c0013b28:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013b2b:	83 ec 0c             	sub    esp,0xc
c0013b2e:	6a 08                	push   0x8
c0013b30:	e8 64 ba ff ff       	call   c000f599 <malloc>
c0013b35:	89 03                	mov    DWORD PTR [ebx],eax
c0013b37:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013b3d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013b44:	83 c4 18             	add    esp,0x18
c0013b47:	5b                   	pop    ebx
c0013b48:	c3                   	ret    
c0013b49:	90                   	nop

c0013b4a <Device::removeAllChildren()>:
c0013b4a:	56                   	push   esi
c0013b4b:	53                   	push   ebx
c0013b4c:	52                   	push   edx
c0013b4d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013b51:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013b57:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b5a:	74 17                	je     c0013b73 <Device::removeAllChildren()+0x29>
c0013b5c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013b5f:	85 c0                	test   eax,eax
c0013b61:	74 0c                	je     c0013b6f <Device::removeAllChildren()+0x25>
c0013b63:	83 ec 0c             	sub    esp,0xc
c0013b66:	8b 10                	mov    edx,DWORD PTR [eax]
c0013b68:	50                   	push   eax
c0013b69:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013b6c:	83 c4 10             	add    esp,0x10
c0013b6f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b71:	eb e4                	jmp    c0013b57 <Device::removeAllChildren()+0xd>
c0013b73:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013b79:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013b7f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013b85:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013b8c:	58                   	pop    eax
c0013b8d:	5b                   	pop    ebx
c0013b8e:	5e                   	pop    esi
c0013b8f:	c3                   	ret    

c0013b90 <Device::hibernateAll()>:
c0013b90:	53                   	push   ebx
c0013b91:	83 ec 14             	sub    esp,0x14
c0013b94:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b98:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b9a:	53                   	push   ebx
c0013b9b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013b9e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ba4:	83 c4 10             	add    esp,0x10
c0013ba7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013baa:	74 0f                	je     c0013bbb <Device::hibernateAll()+0x2b>
c0013bac:	83 ec 0c             	sub    esp,0xc
c0013baf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bb2:	e8 d9 ff ff ff       	call   c0013b90 <Device::hibernateAll()>
c0013bb7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bb9:	eb e9                	jmp    c0013ba4 <Device::hibernateAll()+0x14>
c0013bbb:	83 c4 08             	add    esp,0x8
c0013bbe:	5b                   	pop    ebx
c0013bbf:	c3                   	ret    

c0013bc0 <Device::wakeAll()>:
c0013bc0:	53                   	push   ebx
c0013bc1:	83 ec 14             	sub    esp,0x14
c0013bc4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013bc8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bca:	53                   	push   ebx
c0013bcb:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013bce:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013bd4:	83 c4 10             	add    esp,0x10
c0013bd7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bda:	74 0f                	je     c0013beb <Device::wakeAll()+0x2b>
c0013bdc:	83 ec 0c             	sub    esp,0xc
c0013bdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013be2:	e8 d9 ff ff ff       	call   c0013bc0 <Device::wakeAll()>
c0013be7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013be9:	eb e9                	jmp    c0013bd4 <Device::wakeAll()+0x14>
c0013beb:	83 c4 08             	add    esp,0x8
c0013bee:	5b                   	pop    ebx
c0013bef:	c3                   	ret    

c0013bf0 <Device::detectAll()>:
c0013bf0:	53                   	push   ebx
c0013bf1:	83 ec 14             	sub    esp,0x14
c0013bf4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013bf8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bfa:	53                   	push   ebx
c0013bfb:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013bfe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c04:	83 c4 10             	add    esp,0x10
c0013c07:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c0a:	74 0f                	je     c0013c1b <Device::detectAll()+0x2b>
c0013c0c:	83 ec 0c             	sub    esp,0xc
c0013c0f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c12:	e8 d9 ff ff ff       	call   c0013bf0 <Device::detectAll()>
c0013c17:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c19:	eb e9                	jmp    c0013c04 <Device::detectAll()+0x14>
c0013c1b:	83 c4 08             	add    esp,0x8
c0013c1e:	5b                   	pop    ebx
c0013c1f:	c3                   	ret    

c0013c20 <Device::disableLegacyAll()>:
c0013c20:	53                   	push   ebx
c0013c21:	83 ec 14             	sub    esp,0x14
c0013c24:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c28:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c2a:	53                   	push   ebx
c0013c2b:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013c2e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c34:	83 c4 10             	add    esp,0x10
c0013c37:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c3a:	74 0f                	je     c0013c4b <Device::disableLegacyAll()+0x2b>
c0013c3c:	83 ec 0c             	sub    esp,0xc
c0013c3f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c42:	e8 d9 ff ff ff       	call   c0013c20 <Device::disableLegacyAll()>
c0013c47:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c49:	eb e9                	jmp    c0013c34 <Device::disableLegacyAll()+0x14>
c0013c4b:	83 c4 08             	add    esp,0x8
c0013c4e:	5b                   	pop    ebx
c0013c4f:	c3                   	ret    

c0013c50 <Device::loadDriversForAll()>:
c0013c50:	53                   	push   ebx
c0013c51:	83 ec 08             	sub    esp,0x8
c0013c54:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c58:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013c5f:	75 0c                	jne    c0013c6d <Device::loadDriversForAll()+0x1d>
c0013c61:	83 ec 0c             	sub    esp,0xc
c0013c64:	53                   	push   ebx
c0013c65:	e8 a0 fd ff ff       	call   c0013a0a <Device::findAndLoadDriver()>
c0013c6a:	83 c4 10             	add    esp,0x10
c0013c6d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c73:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c76:	74 12                	je     c0013c8a <Device::loadDriversForAll()+0x3a>
c0013c78:	83 ec 0c             	sub    esp,0xc
c0013c7b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c7e:	e8 cd ff ff ff       	call   c0013c50 <Device::loadDriversForAll()>
c0013c83:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c85:	83 c4 10             	add    esp,0x10
c0013c88:	eb e9                	jmp    c0013c73 <Device::loadDriversForAll()+0x23>
c0013c8a:	83 c4 08             	add    esp,0x8
c0013c8d:	5b                   	pop    ebx
c0013c8e:	c3                   	ret    
c0013c8f:	90                   	nop

c0013c90 <Device::closeAll()>:
c0013c90:	53                   	push   ebx
c0013c91:	83 ec 08             	sub    esp,0x8
c0013c94:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c98:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c9a:	6a 00                	push   0x0
c0013c9c:	6a 00                	push   0x0
c0013c9e:	6a 00                	push   0x0
c0013ca0:	53                   	push   ebx
c0013ca1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ca4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013caa:	83 c4 10             	add    esp,0x10
c0013cad:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013cb0:	74 0f                	je     c0013cc1 <Device::closeAll()+0x31>
c0013cb2:	83 ec 0c             	sub    esp,0xc
c0013cb5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013cb8:	e8 d3 ff ff ff       	call   c0013c90 <Device::closeAll()>
c0013cbd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013cbf:	eb e9                	jmp    c0013caa <Device::closeAll()+0x1a>
c0013cc1:	83 c4 08             	add    esp,0x8
c0013cc4:	5b                   	pop    ebx
c0013cc5:	c3                   	ret    

c0013cc6 <Device::powerSavingAll(PowerSavingLevel)>:
c0013cc6:	56                   	push   esi
c0013cc7:	53                   	push   ebx
c0013cc8:	83 ec 0c             	sub    esp,0xc
c0013ccb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ccf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013cd3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cd5:	56                   	push   esi
c0013cd6:	53                   	push   ebx
c0013cd7:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013cda:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ce0:	83 c4 10             	add    esp,0x10
c0013ce3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ce6:	74 0f                	je     c0013cf7 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013ce8:	52                   	push   edx
c0013ce9:	52                   	push   edx
c0013cea:	56                   	push   esi
c0013ceb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013cee:	e8 d3 ff ff ff       	call   c0013cc6 <Device::powerSavingAll(PowerSavingLevel)>
c0013cf3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013cf5:	eb e9                	jmp    c0013ce0 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013cf7:	58                   	pop    eax
c0013cf8:	5b                   	pop    ebx
c0013cf9:	5e                   	pop    esi
c0013cfa:	c3                   	ret    
c0013cfb:	90                   	nop

c0013cfc <Device::setName(char const*)>:
c0013cfc:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013d04:	e9 03 cb fe ff       	jmp    c000080c <strcpy>
c0013d09:	90                   	nop

c0013d0a <Device::Device(char const*)>:
c0013d0a:	83 ec 1c             	sub    esp,0x1c
c0013d0d:	ba 30 aa 02 c0       	mov    edx,0xc002aa30
c0013d12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d16:	89 10                	mov    DWORD PTR [eax],edx
c0013d18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d1c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013d26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d2a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013d34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d38:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013d42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d46:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013d50:	83 ec 08             	sub    esp,0x8
c0013d53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d57:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d5b:	e8 9c ff ff ff       	call   c0013cfc <Device::setName(char const*)>
c0013d60:	83 c4 10             	add    esp,0x10
c0013d63:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013d6b:	83 ec 0c             	sub    esp,0xc
c0013d6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013d72:	e8 22 b8 ff ff       	call   c000f599 <malloc>
c0013d77:	83 c4 10             	add    esp,0x10
c0013d7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d80:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d87:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013d8b:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013d91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d95:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013d9b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013da1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013da5:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013dab:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013db2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013db6:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013dbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dc1:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013dc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dcc:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013dd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dda:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013de4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013de8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013df2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013df6:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0013e00:	90                   	nop
c0013e01:	83 c4 1c             	add    esp,0x1c
c0013e04:	c3                   	ret    
c0013e05:	90                   	nop

c0013e06 <Device::getName()>:
c0013e06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e0a:	05 d0 00 00 00       	add    eax,0xd0
c0013e0f:	c3                   	ret    

c0013e10 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013e10:	83 ec 0c             	sub    esp,0xc
c0013e13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e17:	83 ec 08             	sub    esp,0x8
c0013e1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e1e:	50                   	push   eax
c0013e1f:	e8 e6 fe ff ff       	call   c0013d0a <Device::Device(char const*)>
c0013e24:	83 c4 10             	add    esp,0x10
c0013e27:	ba 5c aa 02 c0       	mov    edx,0xc002aa5c
c0013e2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e30:	89 10                	mov    DWORD PTR [eax],edx
c0013e32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e36:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013e40:	90                   	nop
c0013e41:	83 c4 0c             	add    esp,0xc
c0013e44:	c3                   	ret    
c0013e45:	90                   	nop

c0013e46 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013e46:	57                   	push   edi
c0013e47:	56                   	push   esi
c0013e48:	53                   	push   ebx
c0013e49:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e4d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e51:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e55:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013e5b:	75 0c                	jne    c0013e69 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013e5d:	52                   	push   edx
c0013e5e:	52                   	push   edx
c0013e5f:	53                   	push   ebx
c0013e60:	56                   	push   esi
c0013e61:	e8 ea 47 01 00       	call   c0028650 <LinkedList<Device>::addElement(Device*)>
c0013e66:	83 c4 10             	add    esp,0x10
c0013e69:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e6f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e72:	74 12                	je     c0013e86 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013e74:	50                   	push   eax
c0013e75:	57                   	push   edi
c0013e76:	56                   	push   esi
c0013e77:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e7a:	e8 c7 ff ff ff       	call   c0013e46 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013e7f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e81:	83 c4 10             	add    esp,0x10
c0013e84:	eb e9                	jmp    c0013e6f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013e86:	5b                   	pop    ebx
c0013e87:	5e                   	pop    esi
c0013e88:	5f                   	pop    edi
c0013e89:	c3                   	ret    

c0013e8a <getDevicesOfType(DeviceType)>:
c0013e8a:	53                   	push   ebx
c0013e8b:	83 ec 14             	sub    esp,0x14
c0013e8e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e92:	53                   	push   ebx
c0013e93:	e8 94 48 01 00       	call   c002872c <LinkedList<Device>::LinkedList()>
c0013e98:	83 c4 0c             	add    esp,0xc
c0013e9b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e9f:	53                   	push   ebx
c0013ea0:	ff 35 28 d9 02 c0    	push   DWORD PTR ds:0xc002d928
c0013ea6:	e8 9b ff ff ff       	call   c0013e46 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013eab:	89 d8                	mov    eax,ebx
c0013ead:	83 c4 18             	add    esp,0x18
c0013eb0:	5b                   	pop    ebx
c0013eb1:	c2 04 00             	ret    0x4

c0013eb4 <HardDiskController::HardDiskController(char const*)>:
c0013eb4:	83 ec 0c             	sub    esp,0xc
c0013eb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ebb:	83 ec 08             	sub    esp,0x8
c0013ebe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ec2:	50                   	push   eax
c0013ec3:	e8 42 fe ff ff       	call   c0013d0a <Device::Device(char const*)>
c0013ec8:	83 c4 10             	add    esp,0x10
c0013ecb:	ba 88 aa 02 c0       	mov    edx,0xc002aa88
c0013ed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ed4:	89 10                	mov    DWORD PTR [eax],edx
c0013ed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eda:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013ee4:	90                   	nop
c0013ee5:	83 c4 0c             	add    esp,0xc
c0013ee8:	c3                   	ret    
c0013ee9:	90                   	nop

c0013eea <HardDiskController::~HardDiskController()>:
c0013eea:	83 ec 0c             	sub    esp,0xc
c0013eed:	ba 88 aa 02 c0       	mov    edx,0xc002aa88
c0013ef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ef6:	89 10                	mov    DWORD PTR [eax],edx
c0013ef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013efc:	83 ec 0c             	sub    esp,0xc
c0013eff:	50                   	push   eax
c0013f00:	e8 cf fa ff ff       	call   c00139d4 <Device::~Device()>
c0013f05:	83 c4 10             	add    esp,0x10
c0013f08:	90                   	nop
c0013f09:	83 c4 0c             	add    esp,0xc
c0013f0c:	c3                   	ret    
c0013f0d:	90                   	nop

c0013f0e <HardDiskController::~HardDiskController()>:
c0013f0e:	83 ec 0c             	sub    esp,0xc
c0013f11:	83 ec 0c             	sub    esp,0xc
c0013f14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f18:	e8 cd ff ff ff       	call   c0013eea <HardDiskController::~HardDiskController()>
c0013f1d:	83 c4 10             	add    esp,0x10
c0013f20:	83 ec 08             	sub    esp,0x8
c0013f23:	68 58 01 00 00       	push   0x158
c0013f28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f2c:	e8 c4 e6 ff ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c0013f31:	83 c4 10             	add    esp,0x10
c0013f34:	83 c4 0c             	add    esp,0xc
c0013f37:	c3                   	ret    

c0013f38 <PhysicalDisk::eject()>:
c0013f38:	83 c8 ff             	or     eax,0xffffffff
c0013f3b:	c3                   	ret    

c0013f3c <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013f3c:	83 ec 0c             	sub    esp,0xc
c0013f3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f43:	83 ec 08             	sub    esp,0x8
c0013f46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f4a:	50                   	push   eax
c0013f4b:	e8 ba fd ff ff       	call   c0013d0a <Device::Device(char const*)>
c0013f50:	83 c4 10             	add    esp,0x10
c0013f53:	ba b4 aa 02 c0       	mov    edx,0xc002aab4
c0013f58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f5c:	89 10                	mov    DWORD PTR [eax],edx
c0013f5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f62:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013f69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f6d:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013f74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f78:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013f82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f86:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013f8a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013f90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f94:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013f9e:	90                   	nop
c0013f9f:	83 c4 0c             	add    esp,0xc
c0013fa2:	c3                   	ret    
c0013fa3:	90                   	nop

c0013fa4 <PhysicalDisk::startCache()>:
c0013fa4:	56                   	push   esi
c0013fa5:	53                   	push   ebx
c0013fa6:	83 ec 10             	sub    esp,0x10
c0013fa9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013fad:	6a 44                	push   0x44
c0013faf:	e8 e5 b5 ff ff       	call   c000f599 <malloc>
c0013fb4:	89 c6                	mov    esi,eax
c0013fb6:	58                   	pop    eax
c0013fb7:	5a                   	pop    edx
c0013fb8:	53                   	push   ebx
c0013fb9:	56                   	push   esi
c0013fba:	e8 71 28 00 00       	call   c0016830 <VCache::VCache(PhysicalDisk*)>
c0013fbf:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013fc5:	83 c4 14             	add    esp,0x14
c0013fc8:	5b                   	pop    ebx
c0013fc9:	5e                   	pop    esi
c0013fca:	c3                   	ret    
c0013fcb:	90                   	nop

c0013fcc <PhysicalDisk::~PhysicalDisk()>:
c0013fcc:	83 ec 0c             	sub    esp,0xc
c0013fcf:	ba b4 aa 02 c0       	mov    edx,0xc002aab4
c0013fd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fd8:	89 10                	mov    DWORD PTR [eax],edx
c0013fda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fde:	83 ec 0c             	sub    esp,0xc
c0013fe1:	50                   	push   eax
c0013fe2:	e8 ed f9 ff ff       	call   c00139d4 <Device::~Device()>
c0013fe7:	83 c4 10             	add    esp,0x10
c0013fea:	90                   	nop
c0013feb:	83 c4 0c             	add    esp,0xc
c0013fee:	c3                   	ret    
c0013fef:	90                   	nop

c0013ff0 <PhysicalDisk::~PhysicalDisk()>:
c0013ff0:	83 ec 0c             	sub    esp,0xc
c0013ff3:	83 ec 0c             	sub    esp,0xc
c0013ff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ffa:	e8 cd ff ff ff       	call   c0013fcc <PhysicalDisk::~PhysicalDisk()>
c0013fff:	83 c4 10             	add    esp,0x10
c0014002:	83 ec 08             	sub    esp,0x8
c0014005:	68 6c 01 00 00       	push   0x16c
c001400a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001400e:	e8 e2 e5 ff ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c0014013:	83 c4 10             	add    esp,0x10
c0014016:	83 c4 0c             	add    esp,0xc
c0014019:	c3                   	ret    

c001401a <FPU::FPU(char const*)>:
c001401a:	83 ec 0c             	sub    esp,0xc
c001401d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014021:	83 ec 08             	sub    esp,0x8
c0014024:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014028:	50                   	push   eax
c0014029:	e8 dc fc ff ff       	call   c0013d0a <Device::Device(char const*)>
c001402e:	83 c4 10             	add    esp,0x10
c0014031:	ba f8 aa 02 c0       	mov    edx,0xc002aaf8
c0014036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001403a:	89 10                	mov    DWORD PTR [eax],edx
c001403c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014040:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001404a:	90                   	nop
c001404b:	83 c4 0c             	add    esp,0xc
c001404e:	c3                   	ret    
c001404f:	90                   	nop

c0014050 <FPU::~FPU()>:
c0014050:	83 ec 0c             	sub    esp,0xc
c0014053:	ba f8 aa 02 c0       	mov    edx,0xc002aaf8
c0014058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001405c:	89 10                	mov    DWORD PTR [eax],edx
c001405e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014062:	83 ec 0c             	sub    esp,0xc
c0014065:	50                   	push   eax
c0014066:	e8 69 f9 ff ff       	call   c00139d4 <Device::~Device()>
c001406b:	83 c4 10             	add    esp,0x10
c001406e:	90                   	nop
c001406f:	83 c4 0c             	add    esp,0xc
c0014072:	c3                   	ret    
c0014073:	90                   	nop

c0014074 <FPU::~FPU()>:
c0014074:	83 ec 0c             	sub    esp,0xc
c0014077:	83 ec 0c             	sub    esp,0xc
c001407a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001407e:	e8 cd ff ff ff       	call   c0014050 <FPU::~FPU()>
c0014083:	83 c4 10             	add    esp,0x10
c0014086:	83 ec 08             	sub    esp,0x8
c0014089:	68 58 01 00 00       	push   0x158
c001408e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014092:	e8 5e e5 ff ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c0014097:	83 c4 10             	add    esp,0x10
c001409a:	83 c4 0c             	add    esp,0xc
c001409d:	c3                   	ret    

c001409e <setupFPU()>:
c001409e:	53                   	push   ebx
c001409f:	83 ec 08             	sub    esp,0x8
c00140a2:	8b 15 28 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d928
c00140a8:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00140af:	74 19                	je     c00140ca <setupFPU()+0x2c>
c00140b1:	83 ec 0c             	sub    esp,0xc
c00140b4:	68 58 01 00 00       	push   0x158
c00140b9:	e8 db b4 ff ff       	call   c000f599 <malloc>
c00140be:	89 c3                	mov    ebx,eax
c00140c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00140c3:	e8 c6 11 01 00       	call   c002528e <AVX::AVX()>
c00140c8:	eb 5b                	jmp    c0014125 <setupFPU()+0x87>
c00140ca:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00140d0:	84 c0                	test   al,al
c00140d2:	79 19                	jns    c00140ed <setupFPU()+0x4f>
c00140d4:	83 ec 0c             	sub    esp,0xc
c00140d7:	68 58 01 00 00       	push   0x158
c00140dc:	e8 b8 b4 ff ff       	call   c000f599 <malloc>
c00140e1:	89 c3                	mov    ebx,eax
c00140e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00140e6:	e8 c9 12 01 00       	call   c00253b4 <SSE::SSE()>
c00140eb:	eb 38                	jmp    c0014125 <setupFPU()+0x87>
c00140ed:	a8 20                	test   al,0x20
c00140ef:	74 19                	je     c001410a <setupFPU()+0x6c>
c00140f1:	83 ec 0c             	sub    esp,0xc
c00140f4:	68 58 01 00 00       	push   0x158
c00140f9:	e8 9b b4 ff ff       	call   c000f599 <malloc>
c00140fe:	89 c3                	mov    ebx,eax
c0014100:	89 04 24             	mov    DWORD PTR [esp],eax
c0014103:	e8 16 12 01 00       	call   c002531e <MMX::MMX()>
c0014108:	eb 1b                	jmp    c0014125 <setupFPU()+0x87>
c001410a:	a8 10                	test   al,0x10
c001410c:	74 1c                	je     c001412a <setupFPU()+0x8c>
c001410e:	83 ec 0c             	sub    esp,0xc
c0014111:	68 58 01 00 00       	push   0x158
c0014116:	e8 7e b4 ff ff       	call   c000f599 <malloc>
c001411b:	89 c3                	mov    ebx,eax
c001411d:	89 04 24             	mov    DWORD PTR [esp],eax
c0014120:	e8 1d 13 01 00       	call   c0025442 <x87::x87()>
c0014125:	83 c4 10             	add    esp,0x10
c0014128:	eb 24                	jmp    c001414e <setupFPU()+0xb0>
c001412a:	83 e0 ef             	and    eax,0xffffffef
c001412d:	83 ec 0c             	sub    esp,0xc
c0014130:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014136:	68 e4 aa 02 c0       	push   0xc002aae4
c001413b:	e8 8d e5 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0014140:	0f 20 c0             	mov    eax,cr0
c0014143:	83 c8 04             	or     eax,0x4
c0014146:	0f 22 c0             	mov    cr0,eax
c0014149:	31 db                	xor    ebx,ebx
c001414b:	83 c4 10             	add    esp,0x10
c001414e:	89 d8                	mov    eax,ebx
c0014150:	83 c4 08             	add    esp,0x8
c0014153:	5b                   	pop    ebx
c0014154:	c3                   	ret    
c0014155:	90                   	nop

c0014156 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014156:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001415a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001415e:	c1 e0 04             	shl    eax,0x4
c0014161:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014165:	8d 50 10             	lea    edx,[eax+0x10]
c0014168:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c001416e:	74 08                	je     c0014178 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014170:	83 c0 04             	add    eax,0x4
c0014173:	39 d0                	cmp    eax,edx
c0014175:	75 f1                	jne    c0014168 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014177:	c3                   	ret    
c0014178:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014182:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001418c:	eb e2                	jmp    c0014170 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c001418e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c001418e:	57                   	push   edi
c001418f:	31 c0                	xor    eax,eax
c0014191:	56                   	push   esi
c0014192:	53                   	push   ebx
c0014193:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014197:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001419b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001419f:	89 da                	mov    edx,ebx
c00141a1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00141a5:	c1 e2 04             	shl    edx,0x4
c00141a8:	01 ca                	add    edx,ecx
c00141aa:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00141b2:	74 16                	je     c00141ca <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00141b4:	40                   	inc    eax
c00141b5:	83 f8 04             	cmp    eax,0x4
c00141b8:	75 f0                	jne    c00141aa <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00141ba:	c7 44 24 10 28 ab 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ab28
c00141c2:	5b                   	pop    ebx
c00141c3:	5e                   	pop    esi
c00141c4:	5f                   	pop    edi
c00141c5:	e9 6f 5c 00 00       	jmp    c0019e39 <Krnl::panic(char const*)>
c00141ca:	8d 04 98             	lea    eax,[eax+ebx*4]
c00141cd:	8d 04 81             	lea    eax,[ecx+eax*4]
c00141d0:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00141d6:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00141dc:	5b                   	pop    ebx
c00141dd:	5e                   	pop    esi
c00141de:	5f                   	pop    edi
c00141df:	c3                   	ret    

c00141e0 <doubleFault(regs*, void*)>:
c00141e0:	55                   	push   ebp
c00141e1:	89 e5                	mov    ebp,esp
c00141e3:	83 ec 08             	sub    esp,0x8
c00141e6:	83 ec 0c             	sub    esp,0xc
c00141e9:	68 35 ab 02 c0       	push   0xc002ab35
c00141ee:	e8 46 5c 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c00141f3:	83 c4 10             	add    esp,0x10
c00141f6:	90                   	nop
c00141f7:	c9                   	leave  
c00141f8:	c3                   	ret    
c00141f9:	90                   	nop

c00141fa <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00141fa:	56                   	push   esi
c00141fb:	53                   	push   ebx
c00141fc:	50                   	push   eax
c00141fd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014201:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014205:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001420a:	75 35                	jne    c0014241 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c001420c:	8d 43 20             	lea    eax,[ebx+0x20]
c001420f:	31 d2                	xor    edx,edx
c0014211:	89 c1                	mov    ecx,eax
c0014213:	c1 e1 04             	shl    ecx,0x4
c0014216:	01 f1                	add    ecx,esi
c0014218:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014220:	74 3e                	je     c0014260 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014222:	42                   	inc    edx
c0014223:	83 fa 04             	cmp    edx,0x4
c0014226:	75 f0                	jne    c0014218 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014228:	83 ec 0c             	sub    esp,0xc
c001422b:	68 4f ab 02 c0       	push   0xc002ab4f
c0014230:	e8 04 5c 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c0014235:	83 c4 10             	add    esp,0x10
c0014238:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001423d:	5a                   	pop    edx
c001423e:	5b                   	pop    ebx
c001423f:	5e                   	pop    esi
c0014240:	c3                   	ret    
c0014241:	83 ec 0c             	sub    esp,0xc
c0014244:	56                   	push   esi
c0014245:	e8 bc fb ff ff       	call   c0013e06 <Device::getName()>
c001424a:	83 c4 10             	add    esp,0x10
c001424d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014250:	75 ba                	jne    c001420c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014252:	83 fb 0f             	cmp    ebx,0xf
c0014255:	7f 29                	jg     c0014280 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014257:	0f b6 9b 80 cb 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd3480]
c001425e:	eb ac                	jmp    c001420c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014260:	8d 04 82             	lea    eax,[edx+eax*4]
c0014263:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014267:	8d 04 86             	lea    eax,[esi+eax*4]
c001426a:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014270:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014274:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c001427a:	89 d8                	mov    eax,ebx
c001427c:	5a                   	pop    edx
c001427d:	5b                   	pop    ebx
c001427e:	5e                   	pop    esi
c001427f:	c3                   	ret    
c0014280:	83 ec 0c             	sub    esp,0xc
c0014283:	68 42 ab 02 c0       	push   0xc002ab42
c0014288:	e8 ac 5b 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c001428d:	83 c4 10             	add    esp,0x10
c0014290:	e9 77 ff ff ff       	jmp    c001420c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014295:	90                   	nop

c0014296 <InterruptController::clearAllHandlers(int, bool)>:
c0014296:	56                   	push   esi
c0014297:	53                   	push   ebx
c0014298:	52                   	push   edx
c0014299:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001429d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00142a1:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00142a6:	75 61                	jne    c0014309 <InterruptController::clearAllHandlers(int, bool)+0x73>
c00142a8:	8d 46 20             	lea    eax,[esi+0x20]
c00142ab:	c1 e6 04             	shl    esi,0x4
c00142ae:	c1 e0 04             	shl    eax,0x4
c00142b1:	01 de                	add    esi,ebx
c00142b3:	01 d8                	add    eax,ebx
c00142b5:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00142bf:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00142c9:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00142d3:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00142dd:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00142e7:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00142f1:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00142fb:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014305:	58                   	pop    eax
c0014306:	5b                   	pop    ebx
c0014307:	5e                   	pop    esi
c0014308:	c3                   	ret    
c0014309:	83 ec 0c             	sub    esp,0xc
c001430c:	53                   	push   ebx
c001430d:	e8 f4 fa ff ff       	call   c0013e06 <Device::getName()>
c0014312:	83 c4 10             	add    esp,0x10
c0014315:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014318:	75 8e                	jne    c00142a8 <InterruptController::clearAllHandlers(int, bool)+0x12>
c001431a:	83 fe 0f             	cmp    esi,0xf
c001431d:	7f 09                	jg     c0014328 <InterruptController::clearAllHandlers(int, bool)+0x92>
c001431f:	0f b6 b6 80 cb 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd3480]
c0014326:	eb 80                	jmp    c00142a8 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014328:	83 ec 0c             	sub    esp,0xc
c001432b:	68 5c ab 02 c0       	push   0xc002ab5c
c0014330:	e8 04 5b 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c0014335:	83 c4 10             	add    esp,0x10
c0014338:	e9 6b ff ff ff       	jmp    c00142a8 <InterruptController::clearAllHandlers(int, bool)+0x12>
c001433d:	90                   	nop

c001433e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001433e:	56                   	push   esi
c001433f:	53                   	push   ebx
c0014340:	52                   	push   edx
c0014341:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014345:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014349:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001434e:	75 3a                	jne    c001438a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014350:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014354:	8d 50 20             	lea    edx,[eax+0x20]
c0014357:	c1 e2 04             	shl    edx,0x4
c001435a:	8d 04 16             	lea    eax,[esi+edx*1]
c001435d:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014361:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014367:	74 0b                	je     c0014374 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014369:	83 c0 04             	add    eax,0x4
c001436c:	39 d0                	cmp    eax,edx
c001436e:	75 f1                	jne    c0014361 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014370:	58                   	pop    eax
c0014371:	5b                   	pop    ebx
c0014372:	5e                   	pop    esi
c0014373:	c3                   	ret    
c0014374:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001437e:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014388:	eb df                	jmp    c0014369 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c001438a:	83 ec 0c             	sub    esp,0xc
c001438d:	56                   	push   esi
c001438e:	e8 73 fa ff ff       	call   c0013e06 <Device::getName()>
c0014393:	83 c4 10             	add    esp,0x10
c0014396:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014399:	75 b5                	jne    c0014350 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001439b:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00143a0:	7f 11                	jg     c00143b3 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00143a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00143a6:	0f b6 80 80 cb 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd3480]
c00143ad:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00143b1:	eb 9d                	jmp    c0014350 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00143b3:	83 ec 0c             	sub    esp,0xc
c00143b6:	68 69 ab 02 c0       	push   0xc002ab69
c00143bb:	e8 79 5a 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c00143c0:	83 c4 10             	add    esp,0x10
c00143c3:	eb 8b                	jmp    c0014350 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00143c5 <nmiHandler(regs*, void*)>:
c00143c5:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c00143ca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00143ce:	e9 2d a9 ff ff       	jmp    c000ed00 <Computer::handleNMI()>

c00143d3 <int_handler>:
c00143d3:	55                   	push   ebp
c00143d4:	57                   	push   edi
c00143d5:	56                   	push   esi
c00143d6:	53                   	push   ebx
c00143d7:	83 ec 0c             	sub    esp,0xc
c00143da:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00143de:	80 3d 64 04 03 c0 00 	cmp    BYTE PTR ds:0xc0030464,0x0
c00143e5:	74 0b                	je     c00143f2 <int_handler+0x1f>
c00143e7:	fa                   	cli    
c00143e8:	f4                   	hlt    
c00143e9:	80 3d 64 04 03 c0 00 	cmp    BYTE PTR ds:0xc0030464,0x0
c00143f0:	75 f5                	jne    c00143e7 <int_handler+0x14>
c00143f2:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c00143f7:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c00143fa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014400:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014406:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014409:	83 f8 17             	cmp    eax,0x17
c001440c:	77 13                	ja     c0014421 <int_handler+0x4e>
c001440e:	83 ec 08             	sub    esp,0x8
c0014411:	8b 17                	mov    edx,DWORD PTR [edi]
c0014413:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014416:	0f b6 c0             	movzx  eax,al
c0014419:	50                   	push   eax
c001441a:	57                   	push   edi
c001441b:	ff 52 38             	call   DWORD PTR [edx+0x38]
c001441e:	83 c4 10             	add    esp,0x10
c0014421:	83 c3 15             	add    ebx,0x15
c0014424:	c1 e3 04             	shl    ebx,0x4
c0014427:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c001442b:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014432:	31 db                	xor    ebx,ebx
c0014434:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014438:	85 c0                	test   eax,eax
c001443a:	74 13                	je     c001444f <int_handler+0x7c>
c001443c:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001443f:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014443:	74 1c                	je     c0014461 <int_handler+0x8e>
c0014445:	83 ec 08             	sub    esp,0x8
c0014448:	52                   	push   edx
c0014449:	56                   	push   esi
c001444a:	ff d0                	call   eax
c001444c:	83 c4 10             	add    esp,0x10
c001444f:	43                   	inc    ebx
c0014450:	83 fb 04             	cmp    ebx,0x4
c0014453:	75 df                	jne    c0014434 <int_handler+0x61>
c0014455:	83 c4 0c             	add    esp,0xc
c0014458:	31 c0                	xor    eax,eax
c001445a:	5b                   	pop    ebx
c001445b:	31 d2                	xor    edx,edx
c001445d:	5e                   	pop    esi
c001445e:	5f                   	pop    edi
c001445f:	5d                   	pop    ebp
c0014460:	c3                   	ret    
c0014461:	83 ec 08             	sub    esp,0x8
c0014464:	52                   	push   edx
c0014465:	56                   	push   esi
c0014466:	ff d0                	call   eax
c0014468:	83 c4 10             	add    esp,0x10
c001446b:	83 c4 0c             	add    esp,0xc
c001446e:	5b                   	pop    ebx
c001446f:	5e                   	pop    esi
c0014470:	5f                   	pop    edi
c0014471:	5d                   	pop    ebp
c0014472:	c3                   	ret    
c0014473:	90                   	nop

c0014474 <InterruptController::InterruptController(char const*)>:
c0014474:	83 ec 1c             	sub    esp,0x1c
c0014477:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001447b:	83 ec 08             	sub    esp,0x8
c001447e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014482:	50                   	push   eax
c0014483:	e8 82 f8 ff ff       	call   c0013d0a <Device::Device(char const*)>
c0014488:	83 c4 10             	add    esp,0x10
c001448b:	ba 24 ae 02 c0       	mov    edx,0xc002ae24
c0014490:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014494:	89 10                	mov    DWORD PTR [eax],edx
c0014496:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001449a:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00144a4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00144ac:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00144b4:	7f 5e                	jg     c0014514 <InterruptController::InterruptController(char const*)+0xa0>
c00144b6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00144be:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00144c3:	7f 49                	jg     c001450e <InterruptController::InterruptController(char const*)+0x9a>
c00144c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00144cd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00144d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00144d8:	01 ca                	add    edx,ecx
c00144da:	83 c2 54             	add    edx,0x54
c00144dd:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00144e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144e9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00144ed:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00144f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00144f8:	01 ca                	add    edx,ecx
c00144fa:	81 c2 54 04 00 00    	add    edx,0x454
c0014500:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014508:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001450c:	eb b0                	jmp    c00144be <InterruptController::InterruptController(char const*)+0x4a>
c001450e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014512:	eb 98                	jmp    c00144ac <InterruptController::InterruptController(char const*)+0x38>
c0014514:	90                   	nop
c0014515:	83 c4 1c             	add    esp,0x1c
c0014518:	c3                   	ret    
c0014519:	90                   	nop

c001451a <InterruptController::~InterruptController()>:
c001451a:	83 ec 0c             	sub    esp,0xc
c001451d:	ba 24 ae 02 c0       	mov    edx,0xc002ae24
c0014522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014526:	89 10                	mov    DWORD PTR [eax],edx
c0014528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001452c:	83 ec 0c             	sub    esp,0xc
c001452f:	50                   	push   eax
c0014530:	e8 9f f4 ff ff       	call   c00139d4 <Device::~Device()>
c0014535:	83 c4 10             	add    esp,0x10
c0014538:	90                   	nop
c0014539:	83 c4 0c             	add    esp,0xc
c001453c:	c3                   	ret    
c001453d:	90                   	nop

c001453e <InterruptController::~InterruptController()>:
c001453e:	83 ec 0c             	sub    esp,0xc
c0014541:	83 ec 0c             	sub    esp,0xc
c0014544:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014548:	e8 cd ff ff ff       	call   c001451a <InterruptController::~InterruptController()>
c001454d:	83 c4 10             	add    esp,0x10
c0014550:	83 ec 08             	sub    esp,0x8
c0014553:	68 58 21 00 00       	push   0x2158
c0014558:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001455c:	e8 94 e0 ff ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c0014561:	83 c4 10             	add    esp,0x10
c0014564:	83 c4 0c             	add    esp,0xc
c0014567:	c3                   	ret    

c0014568 <displayDebugInfo(regs*)>:
c0014568:	55                   	push   ebp
c0014569:	57                   	push   edi
c001456a:	56                   	push   esi
c001456b:	53                   	push   ebx
c001456c:	83 ec 24             	sub    esp,0x24
c001456f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014573:	0f 20 c2             	mov    edx,cr0
c0014576:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001457a:	0f 20 d7             	mov    edi,cr2
c001457d:	0f 20 de             	mov    esi,cr3
c0014580:	0f 20 e5             	mov    ebp,cr4
c0014583:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014586:	68 76 ab 02 c0       	push   0xc002ab76
c001458b:	e8 3d e1 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0014590:	59                   	pop    ecx
c0014591:	58                   	pop    eax
c0014592:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014595:	68 81 ab 02 c0       	push   0xc002ab81
c001459a:	e8 2e e1 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c001459f:	58                   	pop    eax
c00145a0:	5a                   	pop    edx
c00145a1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00145a4:	68 8c ab 02 c0       	push   0xc002ab8c
c00145a9:	e8 1f e1 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c00145ae:	59                   	pop    ecx
c00145af:	58                   	pop    eax
c00145b0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00145b3:	68 97 ab 02 c0       	push   0xc002ab97
c00145b8:	e8 10 e1 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c00145bd:	58                   	pop    eax
c00145be:	5a                   	pop    edx
c00145bf:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00145c2:	68 a2 ab 02 c0       	push   0xc002aba2
c00145c7:	e8 01 e1 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c00145cc:	59                   	pop    ecx
c00145cd:	58                   	pop    eax
c00145ce:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00145d1:	68 ad ab 02 c0       	push   0xc002abad
c00145d6:	e8 f2 e0 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c00145db:	58                   	pop    eax
c00145dc:	5a                   	pop    edx
c00145dd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00145e0:	68 b8 ab 02 c0       	push   0xc002abb8
c00145e5:	e8 e3 e0 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c00145ea:	59                   	pop    ecx
c00145eb:	58                   	pop    eax
c00145ec:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00145ef:	68 c3 ab 02 c0       	push   0xc002abc3
c00145f4:	e8 d4 e0 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c00145f9:	58                   	pop    eax
c00145fa:	5a                   	pop    edx
c00145fb:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00145fe:	68 ce ab 02 c0       	push   0xc002abce
c0014603:	e8 c5 e0 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0014608:	59                   	pop    ecx
c0014609:	58                   	pop    eax
c001460a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001460d:	68 dd ab 02 c0       	push   0xc002abdd
c0014612:	e8 b6 e0 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0014617:	58                   	pop    eax
c0014618:	5a                   	pop    edx
c0014619:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001461c:	68 e8 ab 02 c0       	push   0xc002abe8
c0014621:	e8 a7 e0 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0014626:	59                   	pop    ecx
c0014627:	58                   	pop    eax
c0014628:	57                   	push   edi
c0014629:	68 f3 ab 02 c0       	push   0xc002abf3
c001462e:	e8 9a e0 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0014633:	58                   	pop    eax
c0014634:	5a                   	pop    edx
c0014635:	56                   	push   esi
c0014636:	68 fe ab 02 c0       	push   0xc002abfe
c001463b:	e8 8d e0 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0014640:	59                   	pop    ecx
c0014641:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0014646:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001464c:	e8 06 bd ff ff       	call   c0010357 <setActiveTerminal(VgaText*)>
c0014651:	58                   	pop    eax
c0014652:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014655:	5a                   	pop    edx
c0014656:	c1 e0 05             	shl    eax,0x5
c0014659:	05 e0 c8 02 c0       	add    eax,0xc002c8e0
c001465e:	50                   	push   eax
c001465f:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0014664:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001466a:	e8 f5 c1 ff ff       	call   c0010864 <VgaText::puts(char const*)>
c001466f:	59                   	pop    ecx
c0014670:	58                   	pop    eax
c0014671:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0014676:	68 09 ac 02 c0       	push   0xc002ac09
c001467b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014681:	e8 de c1 ff ff       	call   c0010864 <VgaText::puts(char const*)>
c0014686:	58                   	pop    eax
c0014687:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001468c:	5a                   	pop    edx
c001468d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014690:	83 c0 0c             	add    eax,0xc
c0014693:	50                   	push   eax
c0014694:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0014699:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001469f:	e8 c0 c1 ff ff       	call   c0010864 <VgaText::puts(char const*)>
c00146a4:	59                   	pop    ecx
c00146a5:	58                   	pop    eax
c00146a6:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c00146ab:	68 12 ac 02 c0       	push   0xc002ac12
c00146b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146b6:	e8 a9 c1 ff ff       	call   c0010864 <VgaText::puts(char const*)>
c00146bb:	58                   	pop    eax
c00146bc:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c00146c1:	5a                   	pop    edx
c00146c2:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00146c5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146cb:	e8 4e c1 ff ff       	call   c001081e <VgaText::putx(unsigned int)>
c00146d0:	59                   	pop    ecx
c00146d1:	58                   	pop    eax
c00146d2:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c00146d7:	68 1a ac 02 c0       	push   0xc002ac1a
c00146dc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146e2:	e8 7d c1 ff ff       	call   c0010864 <VgaText::puts(char const*)>
c00146e7:	58                   	pop    eax
c00146e8:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c00146ed:	5a                   	pop    edx
c00146ee:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00146f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146f7:	e8 22 c1 ff ff       	call   c001081e <VgaText::putx(unsigned int)>
c00146fc:	59                   	pop    ecx
c00146fd:	58                   	pop    eax
c00146fe:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0014703:	68 22 ac 02 c0       	push   0xc002ac22
c0014708:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001470e:	e8 51 c1 ff ff       	call   c0010864 <VgaText::puts(char const*)>
c0014713:	58                   	pop    eax
c0014714:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0014719:	5a                   	pop    edx
c001471a:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001471d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014723:	e8 f6 c0 ff ff       	call   c001081e <VgaText::putx(unsigned int)>
c0014728:	59                   	pop    ecx
c0014729:	58                   	pop    eax
c001472a:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001472f:	68 2a ac 02 c0       	push   0xc002ac2a
c0014734:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001473a:	e8 25 c1 ff ff       	call   c0010864 <VgaText::puts(char const*)>
c001473f:	58                   	pop    eax
c0014740:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0014745:	5a                   	pop    edx
c0014746:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014749:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001474f:	e8 ca c0 ff ff       	call   c001081e <VgaText::putx(unsigned int)>
c0014754:	59                   	pop    ecx
c0014755:	58                   	pop    eax
c0014756:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001475b:	68 32 ac 02 c0       	push   0xc002ac32
c0014760:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014766:	e8 f9 c0 ff ff       	call   c0010864 <VgaText::puts(char const*)>
c001476b:	58                   	pop    eax
c001476c:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0014771:	5a                   	pop    edx
c0014772:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014775:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001477b:	e8 9e c0 ff ff       	call   c001081e <VgaText::putx(unsigned int)>
c0014780:	59                   	pop    ecx
c0014781:	58                   	pop    eax
c0014782:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0014787:	68 3a ac 02 c0       	push   0xc002ac3a
c001478c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014792:	e8 cd c0 ff ff       	call   c0010864 <VgaText::puts(char const*)>
c0014797:	58                   	pop    eax
c0014798:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001479d:	5a                   	pop    edx
c001479e:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00147a1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147a7:	e8 72 c0 ff ff       	call   c001081e <VgaText::putx(unsigned int)>
c00147ac:	59                   	pop    ecx
c00147ad:	58                   	pop    eax
c00147ae:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c00147b3:	68 42 ac 02 c0       	push   0xc002ac42
c00147b8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147be:	e8 a1 c0 ff ff       	call   c0010864 <VgaText::puts(char const*)>
c00147c3:	58                   	pop    eax
c00147c4:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c00147c9:	5a                   	pop    edx
c00147ca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00147ce:	52                   	push   edx
c00147cf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147d5:	e8 44 c0 ff ff       	call   c001081e <VgaText::putx(unsigned int)>
c00147da:	59                   	pop    ecx
c00147db:	58                   	pop    eax
c00147dc:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c00147e1:	68 4b ac 02 c0       	push   0xc002ac4b
c00147e6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147ec:	e8 73 c0 ff ff       	call   c0010864 <VgaText::puts(char const*)>
c00147f1:	58                   	pop    eax
c00147f2:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c00147f7:	5a                   	pop    edx
c00147f8:	57                   	push   edi
c00147f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147ff:	e8 1a c0 ff ff       	call   c001081e <VgaText::putx(unsigned int)>
c0014804:	59                   	pop    ecx
c0014805:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001480a:	5f                   	pop    edi
c001480b:	68 53 ac 02 c0       	push   0xc002ac53
c0014810:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014816:	e8 49 c0 ff ff       	call   c0010864 <VgaText::puts(char const*)>
c001481b:	58                   	pop    eax
c001481c:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0014821:	5a                   	pop    edx
c0014822:	56                   	push   esi
c0014823:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014829:	e8 f0 bf ff ff       	call   c001081e <VgaText::putx(unsigned int)>
c001482e:	59                   	pop    ecx
c001482f:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0014834:	5e                   	pop    esi
c0014835:	68 5b ac 02 c0       	push   0xc002ac5b
c001483a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014840:	e8 1f c0 ff ff       	call   c0010864 <VgaText::puts(char const*)>
c0014845:	5f                   	pop    edi
c0014846:	58                   	pop    eax
c0014847:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001484c:	55                   	push   ebp
c001484d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014853:	e8 c6 bf ff ff       	call   c001081e <VgaText::putx(unsigned int)>
c0014858:	58                   	pop    eax
c0014859:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001485e:	5a                   	pop    edx
c001485f:	68 63 ac 02 c0       	push   0xc002ac63
c0014864:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001486a:	e8 f5 bf ff ff       	call   c0010864 <VgaText::puts(char const*)>
c001486f:	0f 21 c0             	mov    eax,db0
c0014872:	59                   	pop    ecx
c0014873:	5e                   	pop    esi
c0014874:	50                   	push   eax
c0014875:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001487a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014880:	e8 99 bf ff ff       	call   c001081e <VgaText::putx(unsigned int)>
c0014885:	5f                   	pop    edi
c0014886:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001488b:	5d                   	pop    ebp
c001488c:	68 6c ac 02 c0       	push   0xc002ac6c
c0014891:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014897:	e8 c8 bf ff ff       	call   c0010864 <VgaText::puts(char const*)>
c001489c:	0f 21 c8             	mov    eax,db1
c001489f:	5a                   	pop    edx
c00148a0:	59                   	pop    ecx
c00148a1:	50                   	push   eax
c00148a2:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c00148a7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148ad:	e8 6c bf ff ff       	call   c001081e <VgaText::putx(unsigned int)>
c00148b2:	5e                   	pop    esi
c00148b3:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c00148b8:	5f                   	pop    edi
c00148b9:	68 74 ac 02 c0       	push   0xc002ac74
c00148be:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148c4:	e8 9b bf ff ff       	call   c0010864 <VgaText::puts(char const*)>
c00148c9:	0f 21 d0             	mov    eax,db2
c00148cc:	5d                   	pop    ebp
c00148cd:	5a                   	pop    edx
c00148ce:	50                   	push   eax
c00148cf:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c00148d4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148da:	e8 3f bf ff ff       	call   c001081e <VgaText::putx(unsigned int)>
c00148df:	59                   	pop    ecx
c00148e0:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c00148e5:	5e                   	pop    esi
c00148e6:	68 7c ac 02 c0       	push   0xc002ac7c
c00148eb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148f1:	e8 6e bf ff ff       	call   c0010864 <VgaText::puts(char const*)>
c00148f6:	0f 21 d8             	mov    eax,db3
c00148f9:	5f                   	pop    edi
c00148fa:	5d                   	pop    ebp
c00148fb:	50                   	push   eax
c00148fc:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0014901:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014907:	e8 12 bf ff ff       	call   c001081e <VgaText::putx(unsigned int)>
c001490c:	58                   	pop    eax
c001490d:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0014912:	5a                   	pop    edx
c0014913:	68 84 ac 02 c0       	push   0xc002ac84
c0014918:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001491e:	e8 41 bf ff ff       	call   c0010864 <VgaText::puts(char const*)>
c0014923:	0f 21 f0             	mov    eax,db6
c0014926:	59                   	pop    ecx
c0014927:	5e                   	pop    esi
c0014928:	50                   	push   eax
c0014929:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001492e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014934:	e8 e5 be ff ff       	call   c001081e <VgaText::putx(unsigned int)>
c0014939:	5f                   	pop    edi
c001493a:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001493f:	5d                   	pop    ebp
c0014940:	68 8c ac 02 c0       	push   0xc002ac8c
c0014945:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001494b:	e8 14 bf ff ff       	call   c0010864 <VgaText::puts(char const*)>
c0014950:	0f 21 f8             	mov    eax,db7
c0014953:	5a                   	pop    edx
c0014954:	59                   	pop    ecx
c0014955:	50                   	push   eax
c0014956:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001495b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014961:	e8 b8 be ff ff       	call   c001081e <VgaText::putx(unsigned int)>
c0014966:	5e                   	pop    esi
c0014967:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001496a:	e8 43 86 00 00       	call   c001cfb2 <Thr::getDriverNameFromAddress(unsigned long)>
c001496f:	83 c4 10             	add    esp,0x10
c0014972:	85 c0                	test   eax,eax
c0014974:	74 7d                	je     c00149f3 <displayDebugInfo(regs*)+0x48b>
c0014976:	89 c6                	mov    esi,eax
c0014978:	50                   	push   eax
c0014979:	50                   	push   eax
c001497a:	56                   	push   esi
c001497b:	68 94 ac 02 c0       	push   0xc002ac94
c0014980:	e8 48 dd ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0014985:	5a                   	pop    edx
c0014986:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001498b:	59                   	pop    ecx
c001498c:	68 a2 ac 02 c0       	push   0xc002aca2
c0014991:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014997:	e8 c8 be ff ff       	call   c0010864 <VgaText::puts(char const*)>
c001499c:	5f                   	pop    edi
c001499d:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c00149a2:	5d                   	pop    ebp
c00149a3:	56                   	push   esi
c00149a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149aa:	e8 b5 be ff ff       	call   c0010864 <VgaText::puts(char const*)>
c00149af:	58                   	pop    eax
c00149b0:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c00149b5:	5a                   	pop    edx
c00149b6:	68 ae ac 02 c0       	push   0xc002acae
c00149bb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149c1:	e8 9e be ff ff       	call   c0010864 <VgaText::puts(char const*)>
c00149c6:	59                   	pop    ecx
c00149c7:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c00149cc:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00149d2:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00149d5:	e8 0f 86 00 00       	call   c001cfe9 <Thr::getDriverOffsetFromAddress(unsigned long)>
c00149da:	5b                   	pop    ebx
c00149db:	5d                   	pop    ebp
c00149dc:	50                   	push   eax
c00149dd:	57                   	push   edi
c00149de:	e8 3b be ff ff       	call   c001081e <VgaText::putx(unsigned int)>
c00149e3:	58                   	pop    eax
c00149e4:	5a                   	pop    edx
c00149e5:	56                   	push   esi
c00149e6:	68 ba ac 02 c0       	push   0xc002acba
c00149eb:	e8 dd dc ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c00149f0:	83 c4 10             	add    esp,0x10
c00149f3:	fa                   	cli    
c00149f4:	f4                   	hlt    
c00149f5:	eb fe                	jmp    c00149f5 <displayDebugInfo(regs*)+0x48d>

c00149f7 <x87EmulHandler(regs*, void*)>:
c00149f7:	83 ec 0c             	sub    esp,0xc
c00149fa:	0f 20 c2             	mov    edx,cr0
c00149fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a02:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014a06:	75 4b                	jne    c0014a53 <x87EmulHandler(regs*, void*)+0x5c>
c0014a08:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0014a0d:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014a13:	85 c0                	test   eax,eax
c0014a15:	74 05                	je     c0014a1c <x87EmulHandler(regs*, void*)+0x25>
c0014a17:	83 e2 08             	and    edx,0x8
c0014a1a:	75 17                	jne    c0014a33 <x87EmulHandler(regs*, void*)+0x3c>
c0014a1c:	83 ec 0c             	sub    esp,0xc
c0014a1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a23:	e8 5b a9 00 00       	call   c001f383 <Vm::x87Handler(regs*)>
c0014a28:	83 c4 10             	add    esp,0x10
c0014a2b:	84 c0                	test   al,al
c0014a2d:	74 24                	je     c0014a53 <x87EmulHandler(regs*, void*)+0x5c>
c0014a2f:	83 c4 0c             	add    esp,0xc
c0014a32:	c3                   	ret    
c0014a33:	83 ec 0c             	sub    esp,0xc
c0014a36:	68 e0 ac 02 c0       	push   0xc002ace0
c0014a3b:	e8 8d dc ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0014a40:	0f 06                	clts   
c0014a42:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a47:	83 c4 10             	add    esp,0x10
c0014a4a:	a3 a8 da 02 c0       	mov    ds:0xc002daa8,eax
c0014a4f:	83 c4 0c             	add    esp,0xc
c0014a52:	c3                   	ret    
c0014a53:	83 ec 0c             	sub    esp,0xc
c0014a56:	68 ca ac 02 c0       	push   0xc002acca
c0014a5b:	e8 6d dc ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0014a60:	5a                   	pop    edx
c0014a61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a65:	e8 fe fa ff ff       	call   c0014568 <displayDebugInfo(regs*)>

c0014a6a <gpFault(regs*, void*)>:
c0014a6a:	53                   	push   ebx
c0014a6b:	83 ec 14             	sub    esp,0x14
c0014a6e:	c7 05 a4 da 02 c0 5c e8 01 c0 	mov    DWORD PTR ds:0xc002daa4,0xc001e85c
c0014a78:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014a7c:	53                   	push   ebx
c0014a7d:	e8 da 9d 00 00       	call   c001e85c <Vm::faultHandler(regs*)>
c0014a82:	83 c4 10             	add    esp,0x10
c0014a85:	84 c0                	test   al,al
c0014a87:	74 05                	je     c0014a8e <gpFault(regs*, void*)+0x24>
c0014a89:	83 c4 08             	add    esp,0x8
c0014a8c:	5b                   	pop    ebx
c0014a8d:	c3                   	ret    
c0014a8e:	83 ec 0c             	sub    esp,0xc
c0014a91:	68 ed ac 02 c0       	push   0xc002aced
c0014a96:	e8 32 dc ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0014a9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a9e:	e8 c5 fa ff ff       	call   c0014568 <displayDebugInfo(regs*)>

c0014aa3 <pgFault(regs*, void*)>:
c0014aa3:	83 ec 18             	sub    esp,0x18
c0014aa6:	68 08 ad 02 c0       	push   0xc002ad08
c0014aab:	e8 1d dc ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0014ab0:	0f 20 d0             	mov    eax,cr2
c0014ab3:	5a                   	pop    edx
c0014ab4:	59                   	pop    ecx
c0014ab5:	50                   	push   eax
c0014ab6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014abb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014abe:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0014ac4:	e8 2d d7 ff ff       	call   c00121f6 <VAS::tryLoadBackOffDisk(unsigned long)>
c0014ac9:	83 c4 10             	add    esp,0x10
c0014acc:	84 c0                	test   al,al
c0014ace:	74 04                	je     c0014ad4 <pgFault(regs*, void*)+0x31>
c0014ad0:	83 c4 0c             	add    esp,0xc
c0014ad3:	c3                   	ret    
c0014ad4:	83 ec 0c             	sub    esp,0xc
c0014ad7:	68 12 ad 02 c0       	push   0xc002ad12
c0014adc:	e8 ec db ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0014ae1:	58                   	pop    eax
c0014ae2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ae6:	e8 7d fa ff ff       	call   c0014568 <displayDebugInfo(regs*)>

c0014aeb <otherISRHandler(regs*, void*)>:
c0014aeb:	53                   	push   ebx
c0014aec:	83 ec 0c             	sub    esp,0xc
c0014aef:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014af3:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014af6:	50                   	push   eax
c0014af7:	50                   	push   eax
c0014af8:	68 1f ad 02 c0       	push   0xc002ad1f
c0014afd:	e8 cb db ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0014b02:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b05:	e8 5e fa ff ff       	call   c0014568 <displayDebugInfo(regs*)>

c0014b0a <opcodeFault(regs*, void*)>:
c0014b0a:	55                   	push   ebp
c0014b0b:	89 e5                	mov    ebp,esp
c0014b0d:	56                   	push   esi
c0014b0e:	53                   	push   ebx
c0014b0f:	83 ec 40             	sub    esp,0x40
c0014b12:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0014b17:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014b1d:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014b23:	84 c0                	test   al,al
c0014b25:	74 24                	je     c0014b4b <opcodeFault(regs*, void*)+0x41>
c0014b27:	83 ec 0c             	sub    esp,0xc
c0014b2a:	68 3c ad 02 c0       	push   0xc002ad3c
c0014b2f:	e8 99 db ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0014b34:	83 c4 10             	add    esp,0x10
c0014b37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b3a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b3d:	8d 50 19             	lea    edx,[eax+0x19]
c0014b40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b43:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b46:	e9 d5 05 00 00       	jmp    c0015120 <opcodeFault(regs*, void*)+0x616>
c0014b4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b4e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b51:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014b54:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014b58:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014b5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b5f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b62:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014b65:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b68:	8a 00                	mov    al,BYTE PTR [eax]
c0014b6a:	3c f0                	cmp    al,0xf0
c0014b6c:	75 17                	jne    c0014b85 <opcodeFault(regs*, void*)+0x7b>
c0014b6e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b74:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b77:	8d 50 01             	lea    edx,[eax+0x1]
c0014b7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b7d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b80:	e9 da 00 00 00       	jmp    c0014c5f <opcodeFault(regs*, void*)+0x155>
c0014b85:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b88:	8a 00                	mov    al,BYTE PTR [eax]
c0014b8a:	3c f2                	cmp    al,0xf2
c0014b8c:	74 09                	je     c0014b97 <opcodeFault(regs*, void*)+0x8d>
c0014b8e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b91:	8a 00                	mov    al,BYTE PTR [eax]
c0014b93:	3c f3                	cmp    al,0xf3
c0014b95:	75 1b                	jne    c0014bb2 <opcodeFault(regs*, void*)+0xa8>
c0014b97:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b9b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ba1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ba4:	8d 50 01             	lea    edx,[eax+0x1]
c0014ba7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014baa:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bad:	e9 ad 00 00 00       	jmp    c0014c5f <opcodeFault(regs*, void*)+0x155>
c0014bb2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bb5:	8a 00                	mov    al,BYTE PTR [eax]
c0014bb7:	3c 66                	cmp    al,0x66
c0014bb9:	75 1f                	jne    c0014bda <opcodeFault(regs*, void*)+0xd0>
c0014bbb:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014bbf:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014bc3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014bc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bc9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bcc:	8d 50 01             	lea    edx,[eax+0x1]
c0014bcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bd2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bd5:	e9 85 00 00 00       	jmp    c0014c5f <opcodeFault(regs*, void*)+0x155>
c0014bda:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bdd:	8a 00                	mov    al,BYTE PTR [eax]
c0014bdf:	3c 67                	cmp    al,0x67
c0014be1:	75 18                	jne    c0014bfb <opcodeFault(regs*, void*)+0xf1>
c0014be3:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014be7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014bea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bed:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bf0:	8d 50 01             	lea    edx,[eax+0x1]
c0014bf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bf6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bf9:	eb 64                	jmp    c0014c5f <opcodeFault(regs*, void*)+0x155>
c0014bfb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bfe:	8a 00                	mov    al,BYTE PTR [eax]
c0014c00:	3c 2e                	cmp    al,0x2e
c0014c02:	74 09                	je     c0014c0d <opcodeFault(regs*, void*)+0x103>
c0014c04:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c07:	8a 00                	mov    al,BYTE PTR [eax]
c0014c09:	3c 3e                	cmp    al,0x3e
c0014c0b:	75 18                	jne    c0014c25 <opcodeFault(regs*, void*)+0x11b>
c0014c0d:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c11:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c17:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c1a:	8d 50 01             	lea    edx,[eax+0x1]
c0014c1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c20:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c23:	eb 3a                	jmp    c0014c5f <opcodeFault(regs*, void*)+0x155>
c0014c25:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c28:	8a 00                	mov    al,BYTE PTR [eax]
c0014c2a:	3c 36                	cmp    al,0x36
c0014c2c:	74 1b                	je     c0014c49 <opcodeFault(regs*, void*)+0x13f>
c0014c2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c31:	8a 00                	mov    al,BYTE PTR [eax]
c0014c33:	3c 26                	cmp    al,0x26
c0014c35:	74 12                	je     c0014c49 <opcodeFault(regs*, void*)+0x13f>
c0014c37:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c3a:	8a 00                	mov    al,BYTE PTR [eax]
c0014c3c:	3c 64                	cmp    al,0x64
c0014c3e:	74 09                	je     c0014c49 <opcodeFault(regs*, void*)+0x13f>
c0014c40:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c43:	8a 00                	mov    al,BYTE PTR [eax]
c0014c45:	3c 65                	cmp    al,0x65
c0014c47:	75 16                	jne    c0014c5f <opcodeFault(regs*, void*)+0x155>
c0014c49:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c4d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c53:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c56:	8d 50 01             	lea    edx,[eax+0x1]
c0014c59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c5c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c5f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c62:	8a 00                	mov    al,BYTE PTR [eax]
c0014c64:	3c 0f                	cmp    al,0xf
c0014c66:	0f 85 ad 00 00 00    	jne    c0014d19 <opcodeFault(regs*, void*)+0x20f>
c0014c6c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c6f:	40                   	inc    eax
c0014c70:	8a 00                	mov    al,BYTE PTR [eax]
c0014c72:	3c c2                	cmp    al,0xc2
c0014c74:	74 0e                	je     c0014c84 <opcodeFault(regs*, void*)+0x17a>
c0014c76:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c79:	40                   	inc    eax
c0014c7a:	8a 00                	mov    al,BYTE PTR [eax]
c0014c7c:	3c c3                	cmp    al,0xc3
c0014c7e:	0f 85 95 00 00 00    	jne    c0014d19 <opcodeFault(regs*, void*)+0x20f>
c0014c84:	83 ec 0c             	sub    esp,0xc
c0014c87:	68 5f ad 02 c0       	push   0xc002ad5f
c0014c8c:	e8 3c da ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0014c91:	83 c4 10             	add    esp,0x10
c0014c94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c97:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c9a:	8d 50 01             	lea    edx,[eax+0x1]
c0014c9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ca0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ca3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ca6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ca9:	8a 00                	mov    al,BYTE PTR [eax]
c0014cab:	8d 50 fe             	lea    edx,[eax-0x2]
c0014cae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cb1:	88 10                	mov    BYTE PTR [eax],dl
c0014cb3:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014cb6:	50                   	push   eax
c0014cb7:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014cba:	50                   	push   eax
c0014cbb:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014cbe:	50                   	push   eax
c0014cbf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014cc2:	e8 8b 48 00 00       	call   c0019552 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014cc7:	83 c4 10             	add    esp,0x10
c0014cca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ccd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cd0:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014cd3:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014cd6:	01 d0                	add    eax,edx
c0014cd8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014cdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cde:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ce1:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014ce4:	48                   	dec    eax
c0014ce5:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014ce8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ceb:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014cee:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cf1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cf4:	83 ec 04             	sub    esp,0x4
c0014cf7:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014cfa:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014cfd:	50                   	push   eax
c0014cfe:	e8 b1 b4 fe ff       	call   c00001b4 <voodooXADD>
c0014d03:	83 c4 10             	add    esp,0x10
c0014d06:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014d09:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014d0c:	01 c2                	add    edx,eax
c0014d0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d11:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d14:	e9 07 04 00 00       	jmp    c0015120 <opcodeFault(regs*, void*)+0x616>
c0014d19:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d1c:	8a 00                	mov    al,BYTE PTR [eax]
c0014d1e:	3c 0f                	cmp    al,0xf
c0014d20:	0f 85 8b 01 00 00    	jne    c0014eb1 <opcodeFault(regs*, void*)+0x3a7>
c0014d26:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d29:	40                   	inc    eax
c0014d2a:	8a 00                	mov    al,BYTE PTR [eax]
c0014d2c:	3c c7                	cmp    al,0xc7
c0014d2e:	0f 86 7d 01 00 00    	jbe    c0014eb1 <opcodeFault(regs*, void*)+0x3a7>
c0014d34:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d37:	40                   	inc    eax
c0014d38:	8a 00                	mov    al,BYTE PTR [eax]
c0014d3a:	3c cf                	cmp    al,0xcf
c0014d3c:	0f 87 6f 01 00 00    	ja     c0014eb1 <opcodeFault(regs*, void*)+0x3a7>
c0014d42:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d45:	40                   	inc    eax
c0014d46:	8a 00                	mov    al,BYTE PTR [eax]
c0014d48:	83 c0 38             	add    eax,0x38
c0014d4b:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014d4e:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014d52:	75 0b                	jne    c0014d5f <opcodeFault(regs*, void*)+0x255>
c0014d54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d57:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014d5a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d5d:	eb 75                	jmp    c0014dd4 <opcodeFault(regs*, void*)+0x2ca>
c0014d5f:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014d63:	75 0b                	jne    c0014d70 <opcodeFault(regs*, void*)+0x266>
c0014d65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d68:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014d6b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d6e:	eb 64                	jmp    c0014dd4 <opcodeFault(regs*, void*)+0x2ca>
c0014d70:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014d74:	75 0b                	jne    c0014d81 <opcodeFault(regs*, void*)+0x277>
c0014d76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d79:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014d7c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d7f:	eb 53                	jmp    c0014dd4 <opcodeFault(regs*, void*)+0x2ca>
c0014d81:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014d85:	75 0b                	jne    c0014d92 <opcodeFault(regs*, void*)+0x288>
c0014d87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d8a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014d8d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d90:	eb 42                	jmp    c0014dd4 <opcodeFault(regs*, void*)+0x2ca>
c0014d92:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014d96:	75 0b                	jne    c0014da3 <opcodeFault(regs*, void*)+0x299>
c0014d98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d9b:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014d9e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014da1:	eb 31                	jmp    c0014dd4 <opcodeFault(regs*, void*)+0x2ca>
c0014da3:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014da7:	75 0b                	jne    c0014db4 <opcodeFault(regs*, void*)+0x2aa>
c0014da9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dac:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014daf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014db2:	eb 20                	jmp    c0014dd4 <opcodeFault(regs*, void*)+0x2ca>
c0014db4:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014db8:	75 0b                	jne    c0014dc5 <opcodeFault(regs*, void*)+0x2bb>
c0014dba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dbd:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014dc0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014dc3:	eb 0f                	jmp    c0014dd4 <opcodeFault(regs*, void*)+0x2ca>
c0014dc5:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014dc9:	75 09                	jne    c0014dd4 <opcodeFault(regs*, void*)+0x2ca>
c0014dcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014dd1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014dd4:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014dd8:	74 10                	je     c0014dea <opcodeFault(regs*, void*)+0x2e0>
c0014dda:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014de1:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014de8:	eb 2d                	jmp    c0014e17 <opcodeFault(regs*, void*)+0x30d>
c0014dea:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ded:	c1 e0 18             	shl    eax,0x18
c0014df0:	89 c2                	mov    edx,eax
c0014df2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014df5:	c1 e0 08             	shl    eax,0x8
c0014df8:	25 00 00 ff 00       	and    eax,0xff0000
c0014dfd:	09 c2                	or     edx,eax
c0014dff:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014e02:	c1 e8 08             	shr    eax,0x8
c0014e05:	25 00 ff 00 00       	and    eax,0xff00
c0014e0a:	09 c2                	or     edx,eax
c0014e0c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014e0f:	c1 e8 18             	shr    eax,0x18
c0014e12:	09 d0                	or     eax,edx
c0014e14:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e17:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014e1b:	75 0b                	jne    c0014e28 <opcodeFault(regs*, void*)+0x31e>
c0014e1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e20:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e23:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014e26:	eb 75                	jmp    c0014e9d <opcodeFault(regs*, void*)+0x393>
c0014e28:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014e2c:	75 0b                	jne    c0014e39 <opcodeFault(regs*, void*)+0x32f>
c0014e2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e31:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e34:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014e37:	eb 64                	jmp    c0014e9d <opcodeFault(regs*, void*)+0x393>
c0014e39:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014e3d:	75 0b                	jne    c0014e4a <opcodeFault(regs*, void*)+0x340>
c0014e3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e42:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e45:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014e48:	eb 53                	jmp    c0014e9d <opcodeFault(regs*, void*)+0x393>
c0014e4a:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014e4e:	75 0b                	jne    c0014e5b <opcodeFault(regs*, void*)+0x351>
c0014e50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e53:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e56:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014e59:	eb 42                	jmp    c0014e9d <opcodeFault(regs*, void*)+0x393>
c0014e5b:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014e5f:	75 0b                	jne    c0014e6c <opcodeFault(regs*, void*)+0x362>
c0014e61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e64:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e67:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014e6a:	eb 31                	jmp    c0014e9d <opcodeFault(regs*, void*)+0x393>
c0014e6c:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014e70:	75 0b                	jne    c0014e7d <opcodeFault(regs*, void*)+0x373>
c0014e72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e75:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e78:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014e7b:	eb 20                	jmp    c0014e9d <opcodeFault(regs*, void*)+0x393>
c0014e7d:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014e81:	75 0b                	jne    c0014e8e <opcodeFault(regs*, void*)+0x384>
c0014e83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e86:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e89:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014e8c:	eb 0f                	jmp    c0014e9d <opcodeFault(regs*, void*)+0x393>
c0014e8e:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014e92:	75 09                	jne    c0014e9d <opcodeFault(regs*, void*)+0x393>
c0014e94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e97:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e9a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014e9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ea0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ea3:	8d 50 02             	lea    edx,[eax+0x2]
c0014ea6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ea9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014eac:	e9 6f 02 00 00       	jmp    c0015120 <opcodeFault(regs*, void*)+0x616>
c0014eb1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eb4:	8a 00                	mov    al,BYTE PTR [eax]
c0014eb6:	3c 0f                	cmp    al,0xf
c0014eb8:	0f 85 8d 01 00 00    	jne    c001504b <opcodeFault(regs*, void*)+0x541>
c0014ebe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ec1:	40                   	inc    eax
c0014ec2:	8a 00                	mov    al,BYTE PTR [eax]
c0014ec4:	3c c7                	cmp    al,0xc7
c0014ec6:	0f 85 7f 01 00 00    	jne    c001504b <opcodeFault(regs*, void*)+0x541>
c0014ecc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ecf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ed2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ed5:	8d 50 01             	lea    edx,[eax+0x1]
c0014ed8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014edb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ede:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014ee1:	50                   	push   eax
c0014ee2:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014ee5:	50                   	push   eax
c0014ee6:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014ee9:	50                   	push   eax
c0014eea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014eed:	e8 60 46 00 00       	call   c0019552 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014ef2:	83 c4 10             	add    esp,0x10
c0014ef5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014ef8:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014efb:	83 f0 01             	xor    eax,0x1
c0014efe:	84 c0                	test   al,al
c0014f00:	0f 84 45 01 00 00    	je     c001504b <opcodeFault(regs*, void*)+0x541>
c0014f06:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014f09:	3c 01                	cmp    al,0x1
c0014f0b:	0f 85 3a 01 00 00    	jne    c001504b <opcodeFault(regs*, void*)+0x541>
c0014f11:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014f14:	83 f0 01             	xor    eax,0x1
c0014f17:	84 c0                	test   al,al
c0014f19:	0f 84 2c 01 00 00    	je     c001504b <opcodeFault(regs*, void*)+0x541>
c0014f1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f22:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014f25:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014f28:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014f2f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014f32:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014f35:	89 c2                	mov    edx,eax
c0014f37:	b8 00 00 00 00       	mov    eax,0x0
c0014f3c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014f3f:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014f42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f45:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014f48:	ba 00 00 00 00       	mov    edx,0x0
c0014f4d:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014f50:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014f53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f56:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014f59:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014f5c:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014f63:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014f66:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014f69:	89 c2                	mov    edx,eax
c0014f6b:	b8 00 00 00 00       	mov    eax,0x0
c0014f70:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014f73:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014f76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f79:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014f7c:	ba 00 00 00 00       	mov    edx,0x0
c0014f81:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014f84:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014f87:	fa                   	cli    
c0014f88:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c0014f8d:	40                   	inc    eax
c0014f8e:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c0014f93:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014f96:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014f99:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f9b:	89 c1                	mov    ecx,eax
c0014f9d:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014fa0:	89 cb                	mov    ebx,ecx
c0014fa2:	89 d0                	mov    eax,edx
c0014fa4:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014fa7:	89 c6                	mov    esi,eax
c0014fa9:	89 f0                	mov    eax,esi
c0014fab:	09 d8                	or     eax,ebx
c0014fad:	85 c0                	test   eax,eax
c0014faf:	75 21                	jne    c0014fd2 <opcodeFault(regs*, void*)+0x4c8>
c0014fb1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014fb4:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014fb7:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014fba:	89 01                	mov    DWORD PTR [ecx],eax
c0014fbc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014fbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fc2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014fc5:	83 c8 40             	or     eax,0x40
c0014fc8:	89 c2                	mov    edx,eax
c0014fca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fcd:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014fd0:	eb 3e                	jmp    c0015010 <opcodeFault(regs*, void*)+0x506>
c0014fd2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014fd5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014fd8:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fda:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014fdd:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014fe0:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014fe3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe6:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014fe9:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014fec:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014fef:	89 d0                	mov    eax,edx
c0014ff1:	31 d2                	xor    edx,edx
c0014ff3:	89 c3                	mov    ebx,eax
c0014ff5:	89 d6                	mov    esi,edx
c0014ff7:	89 da                	mov    edx,ebx
c0014ff9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ffc:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014fff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015002:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015005:	83 e0 bf             	and    eax,0xffffffbf
c0015008:	89 c2                	mov    edx,eax
c001500a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001500d:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015010:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c0015015:	48                   	dec    eax
c0015016:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001501b:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c0015020:	85 c0                	test   eax,eax
c0015022:	75 01                	jne    c0015025 <opcodeFault(regs*, void*)+0x51b>
c0015024:	fb                   	sti    
c0015025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015028:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001502b:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c001502e:	01 c2                	add    edx,eax
c0015030:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015033:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015036:	83 ec 0c             	sub    esp,0xc
c0015039:	68 6e ad 02 c0       	push   0xc002ad6e
c001503e:	e8 8a d6 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0015043:	83 c4 10             	add    esp,0x10
c0015046:	e9 d5 00 00 00       	jmp    c0015120 <opcodeFault(regs*, void*)+0x616>
c001504b:	83 ec 0c             	sub    esp,0xc
c001504e:	68 81 ad 02 c0       	push   0xc002ad81
c0015053:	e8 75 d6 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0015058:	83 c4 10             	add    esp,0x10
c001505b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001505e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015061:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015064:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015067:	c1 e0 04             	shl    eax,0x4
c001506a:	01 d0                	add    eax,edx
c001506c:	83 c0 03             	add    eax,0x3
c001506f:	8a 00                	mov    al,BYTE PTR [eax]
c0015071:	0f b6 d8             	movzx  ebx,al
c0015074:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015077:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001507a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001507d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015080:	c1 e0 04             	shl    eax,0x4
c0015083:	01 d0                	add    eax,edx
c0015085:	83 c0 02             	add    eax,0x2
c0015088:	8a 00                	mov    al,BYTE PTR [eax]
c001508a:	0f b6 c8             	movzx  ecx,al
c001508d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015090:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015093:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015096:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015099:	c1 e0 04             	shl    eax,0x4
c001509c:	01 d0                	add    eax,edx
c001509e:	40                   	inc    eax
c001509f:	8a 00                	mov    al,BYTE PTR [eax]
c00150a1:	0f b6 d0             	movzx  edx,al
c00150a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a7:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00150aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150ad:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00150b0:	c1 e0 04             	shl    eax,0x4
c00150b3:	01 f0                	add    eax,esi
c00150b5:	8a 00                	mov    al,BYTE PTR [eax]
c00150b7:	0f b6 c0             	movzx  eax,al
c00150ba:	83 ec 0c             	sub    esp,0xc
c00150bd:	53                   	push   ebx
c00150be:	51                   	push   ecx
c00150bf:	52                   	push   edx
c00150c0:	50                   	push   eax
c00150c1:	68 94 ad 02 c0       	push   0xc002ad94
c00150c6:	e8 02 d6 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c00150cb:	83 c4 20             	add    esp,0x20
c00150ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150d1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150d4:	83 c0 03             	add    eax,0x3
c00150d7:	8a 00                	mov    al,BYTE PTR [eax]
c00150d9:	0f b6 d8             	movzx  ebx,al
c00150dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150df:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150e2:	83 c0 02             	add    eax,0x2
c00150e5:	8a 00                	mov    al,BYTE PTR [eax]
c00150e7:	0f b6 c8             	movzx  ecx,al
c00150ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150ed:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150f0:	40                   	inc    eax
c00150f1:	8a 00                	mov    al,BYTE PTR [eax]
c00150f3:	0f b6 d0             	movzx  edx,al
c00150f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150f9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150fc:	8a 00                	mov    al,BYTE PTR [eax]
c00150fe:	0f b6 c0             	movzx  eax,al
c0015101:	83 ec 0c             	sub    esp,0xc
c0015104:	53                   	push   ebx
c0015105:	51                   	push   ecx
c0015106:	52                   	push   edx
c0015107:	50                   	push   eax
c0015108:	68 bc ad 02 c0       	push   0xc002adbc
c001510d:	e8 bb d5 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0015112:	83 c4 20             	add    esp,0x20
c0015115:	83 ec 0c             	sub    esp,0xc
c0015118:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001511b:	e8 48 f4 ff ff       	call   c0014568 <displayDebugInfo(regs*)>
c0015120:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015123:	5b                   	pop    ebx
c0015124:	5e                   	pop    esi
c0015125:	5d                   	pop    ebp
c0015126:	c3                   	ret    

c0015127 <displayProgramFault(char const*)>:
c0015127:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001512c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001512f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015135:	85 c0                	test   eax,eax
c0015137:	74 15                	je     c001514e <displayProgramFault(char const*)+0x27>
c0015139:	83 ec 0c             	sub    esp,0xc
c001513c:	6a 04                	push   0x4
c001513e:	6a 0f                	push   0xf
c0015140:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015144:	50                   	push   eax
c0015145:	e8 16 b4 ff ff       	call   c0010560 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001514a:	83 c4 1c             	add    esp,0x1c
c001514d:	c3                   	ret    
c001514e:	c3                   	ret    

c001514f <setupInterruptController()>:
c001514f:	55                   	push   ebp
c0015150:	89 e5                	mov    ebp,esp
c0015152:	53                   	push   ebx
c0015153:	83 ec 24             	sub    esp,0x24
c0015156:	b8 00 00 00 00       	mov    eax,0x0
c001515b:	85 c0                	test   eax,eax
c001515d:	0f 95 c0             	setne  al
c0015160:	84 c0                	test   al,al
c0015162:	74 5b                	je     c00151bf <setupInterruptController()+0x70>
c0015164:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c001516b:	83 ec 0c             	sub    esp,0xc
c001516e:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015171:	e8 23 a4 ff ff       	call   c000f599 <malloc>
c0015176:	83 c4 10             	add    esp,0x10
c0015179:	89 c3                	mov    ebx,eax
c001517b:	83 ec 0c             	sub    esp,0xc
c001517e:	53                   	push   ebx
c001517f:	e8 fc 04 01 00       	call   c0025680 <APIC::APIC()>
c0015184:	83 c4 10             	add    esp,0x10
c0015187:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c001518a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001518d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015190:	8b 00                	mov    eax,DWORD PTR [eax]
c0015192:	83 c0 08             	add    eax,0x8
c0015195:	8b 00                	mov    eax,DWORD PTR [eax]
c0015197:	6a 00                	push   0x0
c0015199:	6a 00                	push   0x0
c001519b:	6a 00                	push   0x0
c001519d:	52                   	push   edx
c001519e:	ff d0                	call   eax
c00151a0:	83 c4 10             	add    esp,0x10
c00151a3:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c00151a8:	83 ec 08             	sub    esp,0x8
c00151ab:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00151ae:	50                   	push   eax
c00151af:	e8 52 e9 ff ff       	call   c0013b06 <Device::addChild(Device*)>
c00151b4:	83 c4 10             	add    esp,0x10
c00151b7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00151ba:	e9 79 03 00 00       	jmp    c0015538 <setupInterruptController()+0x3e9>
c00151bf:	a0 a0 02 03 c0       	mov    al,ds:0xc00302a0
c00151c4:	84 c0                	test   al,al
c00151c6:	75 14                	jne    c00151dc <setupInterruptController()+0x8d>
c00151c8:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c00151cd:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00151d3:	83 e2 fe             	and    edx,0xfffffffe
c00151d6:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00151dc:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c00151e1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00151e7:	83 e0 01             	and    eax,0x1
c00151ea:	84 c0                	test   al,al
c00151ec:	0f 95 c0             	setne  al
c00151ef:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00151f2:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00151f9:	83 ec 0c             	sub    esp,0xc
c00151fc:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00151ff:	e8 95 a3 ff ff       	call   c000f599 <malloc>
c0015204:	83 c4 10             	add    esp,0x10
c0015207:	89 c3                	mov    ebx,eax
c0015209:	83 ec 0c             	sub    esp,0xc
c001520c:	53                   	push   ebx
c001520d:	e8 c6 09 01 00       	call   c0025bd8 <PIC::PIC()>
c0015212:	83 c4 10             	add    esp,0x10
c0015215:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015218:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001521b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001521e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015220:	83 c0 08             	add    eax,0x8
c0015223:	8b 00                	mov    eax,DWORD PTR [eax]
c0015225:	6a 00                	push   0x0
c0015227:	6a 00                	push   0x0
c0015229:	6a 00                	push   0x0
c001522b:	52                   	push   edx
c001522c:	ff d0                	call   eax
c001522e:	83 c4 10             	add    esp,0x10
c0015231:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015235:	74 73                	je     c00152aa <setupInterruptController()+0x15b>
c0015237:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001523a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001523d:	8b 00                	mov    eax,DWORD PTR [eax]
c001523f:	83 c0 0c             	add    eax,0xc
c0015242:	8b 00                	mov    eax,DWORD PTR [eax]
c0015244:	6a 00                	push   0x0
c0015246:	6a 00                	push   0x0
c0015248:	6a 00                	push   0x0
c001524a:	52                   	push   edx
c001524b:	ff d0                	call   eax
c001524d:	83 c4 10             	add    esp,0x10
c0015250:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015254:	74 15                	je     c001526b <setupInterruptController()+0x11c>
c0015256:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015259:	8b 00                	mov    eax,DWORD PTR [eax]
c001525b:	83 c0 04             	add    eax,0x4
c001525e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015260:	83 ec 0c             	sub    esp,0xc
c0015263:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015266:	ff d0                	call   eax
c0015268:	83 c4 10             	add    esp,0x10
c001526b:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015272:	83 ec 0c             	sub    esp,0xc
c0015275:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015278:	e8 1c a3 ff ff       	call   c000f599 <malloc>
c001527d:	83 c4 10             	add    esp,0x10
c0015280:	89 c3                	mov    ebx,eax
c0015282:	83 ec 0c             	sub    esp,0xc
c0015285:	53                   	push   ebx
c0015286:	e8 f5 03 01 00       	call   c0025680 <APIC::APIC()>
c001528b:	83 c4 10             	add    esp,0x10
c001528e:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015291:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015294:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015297:	8b 00                	mov    eax,DWORD PTR [eax]
c0015299:	83 c0 08             	add    eax,0x8
c001529c:	8b 00                	mov    eax,DWORD PTR [eax]
c001529e:	6a 00                	push   0x0
c00152a0:	6a 00                	push   0x0
c00152a2:	6a 00                	push   0x0
c00152a4:	52                   	push   edx
c00152a5:	ff d0                	call   eax
c00152a7:	83 c4 10             	add    esp,0x10
c00152aa:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c00152af:	83 ec 08             	sub    esp,0x8
c00152b2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152b5:	50                   	push   eax
c00152b6:	e8 4b e8 ff ff       	call   c0013b06 <Device::addChild(Device*)>
c00152bb:	83 c4 10             	add    esp,0x10
c00152be:	c7 05 a8 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002daa8,0x0
c00152c8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00152cd:	83 c0 24             	add    eax,0x24
c00152d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00152d2:	6a 00                	push   0x0
c00152d4:	68 eb 4a 01 c0       	push   0xc0014aeb
c00152d9:	6a 00                	push   0x0
c00152db:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152de:	ff d0                	call   eax
c00152e0:	83 c4 10             	add    esp,0x10
c00152e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00152e8:	83 c0 24             	add    eax,0x24
c00152eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ed:	6a 00                	push   0x0
c00152ef:	68 eb 4a 01 c0       	push   0xc0014aeb
c00152f4:	6a 01                	push   0x1
c00152f6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152f9:	ff d0                	call   eax
c00152fb:	83 c4 10             	add    esp,0x10
c00152fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015301:	8b 00                	mov    eax,DWORD PTR [eax]
c0015303:	83 c0 24             	add    eax,0x24
c0015306:	8b 00                	mov    eax,DWORD PTR [eax]
c0015308:	6a 00                	push   0x0
c001530a:	68 c5 43 01 c0       	push   0xc00143c5
c001530f:	6a 02                	push   0x2
c0015311:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015314:	ff d0                	call   eax
c0015316:	83 c4 10             	add    esp,0x10
c0015319:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001531c:	8b 00                	mov    eax,DWORD PTR [eax]
c001531e:	83 c0 24             	add    eax,0x24
c0015321:	8b 00                	mov    eax,DWORD PTR [eax]
c0015323:	6a 00                	push   0x0
c0015325:	68 eb 4a 01 c0       	push   0xc0014aeb
c001532a:	6a 03                	push   0x3
c001532c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001532f:	ff d0                	call   eax
c0015331:	83 c4 10             	add    esp,0x10
c0015334:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015337:	8b 00                	mov    eax,DWORD PTR [eax]
c0015339:	83 c0 24             	add    eax,0x24
c001533c:	8b 00                	mov    eax,DWORD PTR [eax]
c001533e:	6a 00                	push   0x0
c0015340:	68 eb 4a 01 c0       	push   0xc0014aeb
c0015345:	6a 04                	push   0x4
c0015347:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001534a:	ff d0                	call   eax
c001534c:	83 c4 10             	add    esp,0x10
c001534f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015352:	8b 00                	mov    eax,DWORD PTR [eax]
c0015354:	83 c0 24             	add    eax,0x24
c0015357:	8b 00                	mov    eax,DWORD PTR [eax]
c0015359:	6a 00                	push   0x0
c001535b:	68 eb 4a 01 c0       	push   0xc0014aeb
c0015360:	6a 05                	push   0x5
c0015362:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015365:	ff d0                	call   eax
c0015367:	83 c4 10             	add    esp,0x10
c001536a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001536d:	8b 00                	mov    eax,DWORD PTR [eax]
c001536f:	83 c0 24             	add    eax,0x24
c0015372:	8b 00                	mov    eax,DWORD PTR [eax]
c0015374:	6a 00                	push   0x0
c0015376:	68 0a 4b 01 c0       	push   0xc0014b0a
c001537b:	6a 06                	push   0x6
c001537d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015380:	ff d0                	call   eax
c0015382:	83 c4 10             	add    esp,0x10
c0015385:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015388:	8b 00                	mov    eax,DWORD PTR [eax]
c001538a:	83 c0 24             	add    eax,0x24
c001538d:	8b 00                	mov    eax,DWORD PTR [eax]
c001538f:	6a 00                	push   0x0
c0015391:	68 f7 49 01 c0       	push   0xc00149f7
c0015396:	6a 07                	push   0x7
c0015398:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001539b:	ff d0                	call   eax
c001539d:	83 c4 10             	add    esp,0x10
c00153a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a5:	83 c0 24             	add    eax,0x24
c00153a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00153aa:	6a 00                	push   0x0
c00153ac:	68 e0 41 01 c0       	push   0xc00141e0
c00153b1:	6a 08                	push   0x8
c00153b3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153b6:	ff d0                	call   eax
c00153b8:	83 c4 10             	add    esp,0x10
c00153bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153be:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c0:	83 c0 24             	add    eax,0x24
c00153c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c5:	6a 00                	push   0x0
c00153c7:	68 eb 4a 01 c0       	push   0xc0014aeb
c00153cc:	6a 09                	push   0x9
c00153ce:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153d1:	ff d0                	call   eax
c00153d3:	83 c4 10             	add    esp,0x10
c00153d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00153db:	83 c0 24             	add    eax,0x24
c00153de:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e0:	6a 00                	push   0x0
c00153e2:	68 eb 4a 01 c0       	push   0xc0014aeb
c00153e7:	6a 0a                	push   0xa
c00153e9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153ec:	ff d0                	call   eax
c00153ee:	83 c4 10             	add    esp,0x10
c00153f1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00153f6:	83 c0 24             	add    eax,0x24
c00153f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00153fb:	6a 00                	push   0x0
c00153fd:	68 eb 4a 01 c0       	push   0xc0014aeb
c0015402:	6a 0b                	push   0xb
c0015404:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015407:	ff d0                	call   eax
c0015409:	83 c4 10             	add    esp,0x10
c001540c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001540f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015411:	83 c0 24             	add    eax,0x24
c0015414:	8b 00                	mov    eax,DWORD PTR [eax]
c0015416:	6a 00                	push   0x0
c0015418:	68 eb 4a 01 c0       	push   0xc0014aeb
c001541d:	6a 0c                	push   0xc
c001541f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015422:	ff d0                	call   eax
c0015424:	83 c4 10             	add    esp,0x10
c0015427:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001542a:	8b 00                	mov    eax,DWORD PTR [eax]
c001542c:	83 c0 24             	add    eax,0x24
c001542f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015431:	6a 00                	push   0x0
c0015433:	68 6a 4a 01 c0       	push   0xc0014a6a
c0015438:	6a 0d                	push   0xd
c001543a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001543d:	ff d0                	call   eax
c001543f:	83 c4 10             	add    esp,0x10
c0015442:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015445:	8b 00                	mov    eax,DWORD PTR [eax]
c0015447:	83 c0 24             	add    eax,0x24
c001544a:	8b 00                	mov    eax,DWORD PTR [eax]
c001544c:	6a 00                	push   0x0
c001544e:	68 a3 4a 01 c0       	push   0xc0014aa3
c0015453:	6a 0e                	push   0xe
c0015455:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015458:	ff d0                	call   eax
c001545a:	83 c4 10             	add    esp,0x10
c001545d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015460:	8b 00                	mov    eax,DWORD PTR [eax]
c0015462:	83 c0 24             	add    eax,0x24
c0015465:	8b 00                	mov    eax,DWORD PTR [eax]
c0015467:	6a 00                	push   0x0
c0015469:	68 eb 4a 01 c0       	push   0xc0014aeb
c001546e:	6a 0f                	push   0xf
c0015470:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015473:	ff d0                	call   eax
c0015475:	83 c4 10             	add    esp,0x10
c0015478:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001547b:	8b 00                	mov    eax,DWORD PTR [eax]
c001547d:	83 c0 24             	add    eax,0x24
c0015480:	8b 00                	mov    eax,DWORD PTR [eax]
c0015482:	6a 00                	push   0x0
c0015484:	68 eb 4a 01 c0       	push   0xc0014aeb
c0015489:	6a 10                	push   0x10
c001548b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001548e:	ff d0                	call   eax
c0015490:	83 c4 10             	add    esp,0x10
c0015493:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015496:	8b 00                	mov    eax,DWORD PTR [eax]
c0015498:	83 c0 24             	add    eax,0x24
c001549b:	8b 00                	mov    eax,DWORD PTR [eax]
c001549d:	6a 00                	push   0x0
c001549f:	68 eb 4a 01 c0       	push   0xc0014aeb
c00154a4:	6a 11                	push   0x11
c00154a6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154a9:	ff d0                	call   eax
c00154ab:	83 c4 10             	add    esp,0x10
c00154ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00154b3:	83 c0 24             	add    eax,0x24
c00154b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00154b8:	6a 00                	push   0x0
c00154ba:	68 eb 4a 01 c0       	push   0xc0014aeb
c00154bf:	6a 12                	push   0x12
c00154c1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154c4:	ff d0                	call   eax
c00154c6:	83 c4 10             	add    esp,0x10
c00154c9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ce:	83 c0 24             	add    eax,0x24
c00154d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d3:	6a 00                	push   0x0
c00154d5:	68 eb 4a 01 c0       	push   0xc0014aeb
c00154da:	6a 13                	push   0x13
c00154dc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154df:	ff d0                	call   eax
c00154e1:	83 c4 10             	add    esp,0x10
c00154e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00154e9:	83 c0 24             	add    eax,0x24
c00154ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ee:	6a 00                	push   0x0
c00154f0:	68 eb 4a 01 c0       	push   0xc0014aeb
c00154f5:	6a 14                	push   0x14
c00154f7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154fa:	ff d0                	call   eax
c00154fc:	83 c4 10             	add    esp,0x10
c00154ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015502:	8b 00                	mov    eax,DWORD PTR [eax]
c0015504:	83 c0 24             	add    eax,0x24
c0015507:	8b 00                	mov    eax,DWORD PTR [eax]
c0015509:	6a 00                	push   0x0
c001550b:	68 eb 4a 01 c0       	push   0xc0014aeb
c0015510:	6a 1e                	push   0x1e
c0015512:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015515:	ff d0                	call   eax
c0015517:	83 c4 10             	add    esp,0x10
c001551a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001551d:	8b 00                	mov    eax,DWORD PTR [eax]
c001551f:	83 c0 24             	add    eax,0x24
c0015522:	8b 00                	mov    eax,DWORD PTR [eax]
c0015524:	6a 00                	push   0x0
c0015526:	68 28 c0 01 c0       	push   0xc001c028
c001552b:	6a 60                	push   0x60
c001552d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015530:	ff d0                	call   eax
c0015532:	83 c4 10             	add    esp,0x10
c0015535:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015538:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001553b:	c9                   	leave  
c001553c:	c3                   	ret    
c001553d:	90                   	nop

c001553e <InterruptController::convertLegacyIRQNumber(int)>:
c001553e:	55                   	push   ebp
c001553f:	89 e5                	mov    ebp,esp
c0015541:	83 ec 08             	sub    esp,0x8
c0015544:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015547:	83 ec 0c             	sub    esp,0xc
c001554a:	50                   	push   eax
c001554b:	e8 b6 e8 ff ff       	call   c0013e06 <Device::getName()>
c0015550:	83 c4 10             	add    esp,0x10
c0015553:	8a 00                	mov    al,BYTE PTR [eax]
c0015555:	3c 41                	cmp    al,0x41
c0015557:	0f 94 c0             	sete   al
c001555a:	84 c0                	test   al,al
c001555c:	74 28                	je     c0015586 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001555e:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015562:	7f 12                	jg     c0015576 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015564:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015567:	05 80 cb 02 c0       	add    eax,0xc002cb80
c001556c:	8a 00                	mov    al,BYTE PTR [eax]
c001556e:	0f b6 c0             	movzx  eax,al
c0015571:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015574:	eb 10                	jmp    c0015586 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015576:	83 ec 0c             	sub    esp,0xc
c0015579:	68 e4 ad 02 c0       	push   0xc002ade4
c001557e:	e8 b6 48 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c0015583:	83 c4 10             	add    esp,0x10
c0015586:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015589:	c9                   	leave  
c001558a:	c3                   	ret    
c001558b:	90                   	nop

c001558c <startGUI(void*)>:
c001558c:	55                   	push   ebp
c001558d:	89 e5                	mov    ebp,esp
c001558f:	53                   	push   ebx
c0015590:	83 ec 04             	sub    esp,0x4
c0015593:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c0015598:	48                   	dec    eax
c0015599:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001559e:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c00155a3:	85 c0                	test   eax,eax
c00155a5:	75 01                	jne    c00155a8 <startGUI(void*)+0x1c>
c00155a7:	fb                   	sti    
c00155a8:	8b 1d 28 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d928
c00155ae:	83 ec 08             	sub    esp,0x8
c00155b1:	6a 01                	push   0x1
c00155b3:	68 64 ae 02 c0       	push   0xc002ae64
c00155b8:	e8 46 7a 00 00       	call   c001d003 <Thr::loadDLL(char const*, bool)>
c00155bd:	83 c4 10             	add    esp,0x10
c00155c0:	83 ec 08             	sub    esp,0x8
c00155c3:	53                   	push   ebx
c00155c4:	50                   	push   eax
c00155c5:	e8 64 7c 00 00       	call   c001d22e <Thr::executeDLL(unsigned long, void*)>
c00155ca:	83 c4 10             	add    esp,0x10
c00155cd:	8b 1d 28 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d928
c00155d3:	83 ec 08             	sub    esp,0x8
c00155d6:	6a 01                	push   0x1
c00155d8:	68 7e ae 02 c0       	push   0xc002ae7e
c00155dd:	e8 21 7a 00 00       	call   c001d003 <Thr::loadDLL(char const*, bool)>
c00155e2:	83 c4 10             	add    esp,0x10
c00155e5:	83 ec 08             	sub    esp,0x8
c00155e8:	53                   	push   ebx
c00155e9:	50                   	push   eax
c00155ea:	e8 3f 7c 00 00       	call   c001d22e <Thr::executeDLL(unsigned long, void*)>
c00155ef:	83 c4 10             	add    esp,0x10
c00155f2:	90                   	nop
c00155f3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00155f6:	c9                   	leave  
c00155f7:	c3                   	ret    

c00155f8 <startGUIVESA(void*)>:
c00155f8:	55                   	push   ebp
c00155f9:	89 e5                	mov    ebp,esp
c00155fb:	53                   	push   ebx
c00155fc:	83 ec 04             	sub    esp,0x4
c00155ff:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c0015604:	48                   	dec    eax
c0015605:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001560a:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001560f:	85 c0                	test   eax,eax
c0015611:	75 01                	jne    c0015614 <startGUIVESA(void*)+0x1c>
c0015613:	fb                   	sti    
c0015614:	8b 1d 28 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d928
c001561a:	83 ec 08             	sub    esp,0x8
c001561d:	6a 01                	push   0x1
c001561f:	68 98 ae 02 c0       	push   0xc002ae98
c0015624:	e8 da 79 00 00       	call   c001d003 <Thr::loadDLL(char const*, bool)>
c0015629:	83 c4 10             	add    esp,0x10
c001562c:	83 ec 08             	sub    esp,0x8
c001562f:	53                   	push   ebx
c0015630:	50                   	push   eax
c0015631:	e8 f8 7b 00 00       	call   c001d22e <Thr::executeDLL(unsigned long, void*)>
c0015636:	83 c4 10             	add    esp,0x10
c0015639:	8b 1d 28 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d928
c001563f:	83 ec 08             	sub    esp,0x8
c0015642:	6a 01                	push   0x1
c0015644:	68 7e ae 02 c0       	push   0xc002ae7e
c0015649:	e8 b5 79 00 00       	call   c001d003 <Thr::loadDLL(char const*, bool)>
c001564e:	83 c4 10             	add    esp,0x10
c0015651:	83 ec 08             	sub    esp,0x8
c0015654:	53                   	push   ebx
c0015655:	50                   	push   eax
c0015656:	e8 d3 7b 00 00       	call   c001d22e <Thr::executeDLL(unsigned long, void*)>
c001565b:	83 c4 10             	add    esp,0x10
c001565e:	90                   	nop
c001565f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015662:	c9                   	leave  
c0015663:	c3                   	ret    

c0015664 <sendKeyToTerminal(unsigned char)>:
c0015664:	55                   	push   ebp
c0015665:	89 e5                	mov    ebp,esp
c0015667:	83 ec 28             	sub    esp,0x28
c001566a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001566d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015670:	a1 e4 d9 02 c0       	mov    eax,ds:0xc002d9e4
c0015675:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015679:	83 ec 08             	sub    esp,0x8
c001567c:	52                   	push   edx
c001567d:	50                   	push   eax
c001567e:	e8 83 b3 ff ff       	call   c0010a06 <VgaText::receiveKey(unsigned char)>
c0015683:	83 c4 10             	add    esp,0x10
c0015686:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c001568a:	0f 85 8f 00 00 00    	jne    c001571f <sendKeyToTerminal(unsigned char)+0xbb>
c0015690:	fa                   	cli    
c0015691:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c0015696:	40                   	inc    eax
c0015697:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001569c:	a1 44 0e 03 c0       	mov    eax,ds:0xc0030e44
c00156a1:	40                   	inc    eax
c00156a2:	a3 44 0e 03 c0       	mov    ds:0xc0030e44,eax
c00156a7:	a1 c0 da 02 c0       	mov    eax,ds:0xc002dac0
c00156ac:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00156af:	c7 05 c0 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dac0,0x0
c00156b9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00156bd:	74 1f                	je     c00156de <sendKeyToTerminal(unsigned char)+0x7a>
c00156bf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156c2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00156c5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00156c8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00156cb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00156ce:	83 ec 0c             	sub    esp,0xc
c00156d1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00156d4:	e8 6d 87 00 00       	call   c001de46 <unblockTask(ThreadControlBlock*)>
c00156d9:	83 c4 10             	add    esp,0x10
c00156dc:	eb db                	jmp    c00156b9 <sendKeyToTerminal(unsigned char)+0x55>
c00156de:	a1 44 0e 03 c0       	mov    eax,ds:0xc0030e44
c00156e3:	48                   	dec    eax
c00156e4:	a3 44 0e 03 c0       	mov    ds:0xc0030e44,eax
c00156e9:	a1 44 0e 03 c0       	mov    eax,ds:0xc0030e44
c00156ee:	85 c0                	test   eax,eax
c00156f0:	75 18                	jne    c001570a <sendKeyToTerminal(unsigned char)+0xa6>
c00156f2:	a1 40 0e 03 c0       	mov    eax,ds:0xc0030e40
c00156f7:	85 c0                	test   eax,eax
c00156f9:	74 0f                	je     c001570a <sendKeyToTerminal(unsigned char)+0xa6>
c00156fb:	c7 05 40 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e40,0x0
c0015705:	e8 b9 82 00 00       	call   c001d9c3 <schedule()>
c001570a:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001570f:	48                   	dec    eax
c0015710:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c0015715:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001571a:	85 c0                	test   eax,eax
c001571c:	75 01                	jne    c001571f <sendKeyToTerminal(unsigned char)+0xbb>
c001571e:	fb                   	sti    
c001571f:	90                   	nop
c0015720:	c9                   	leave  
c0015721:	c3                   	ret    

c0015722 <sendKeyboardToken(KeyboardToken)>:
c0015722:	55                   	push   ebp
c0015723:	89 e5                	mov    ebp,esp
c0015725:	83 ec 18             	sub    esp,0x18
c0015728:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001572b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001572e:	0f b7 c0             	movzx  eax,ax
c0015731:	83 f2 01             	xor    edx,0x1
c0015734:	88 90 e0 da 02 c0    	mov    BYTE PTR [eax-0x3ffd2520],dl
c001573a:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001573f:	85 c0                	test   eax,eax
c0015741:	74 24                	je     c0015767 <sendKeyboardToken(KeyboardToken)+0x45>
c0015743:	8b 0d c8 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002dac8
c0015749:	83 ec 04             	sub    esp,0x4
c001574c:	68 e0 da 02 c0       	push   0xc002dae0
c0015751:	83 ec 08             	sub    esp,0x8
c0015754:	89 e2                	mov    edx,esp
c0015756:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015759:	89 02                	mov    DWORD PTR [edx],eax
c001575b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001575e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015762:	ff d1                	call   ecx
c0015764:	83 c4 10             	add    esp,0x10
c0015767:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001576a:	66 3d 03 02          	cmp    ax,0x203
c001576e:	75 07                	jne    c0015777 <sendKeyboardToken(KeyboardToken)+0x55>
c0015770:	a0 e0 db 02 c0       	mov    al,ds:0xc002dbe0
c0015775:	84 c0                	test   al,al
c0015777:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001577b:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001577e:	a0 e8 de 02 c0       	mov    al,ds:0xc002dee8
c0015783:	38 c2                	cmp    dl,al
c0015785:	74 1c                	je     c00157a3 <sendKeyboardToken(KeyboardToken)+0x81>
c0015787:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001578a:	a2 e8 de 02 c0       	mov    ds:0xc002dee8,al
c001578f:	a0 e8 de 02 c0       	mov    al,ds:0xc002dee8
c0015794:	0f b6 c0             	movzx  eax,al
c0015797:	83 ec 0c             	sub    esp,0xc
c001579a:	50                   	push   eax
c001579b:	e8 a8 a8 ff ff       	call   c0010048 <setTerminalScrollLock(bool)>
c00157a0:	83 c4 10             	add    esp,0x10
c00157a3:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00157a6:	84 c0                	test   al,al
c00157a8:	0f 84 ae 00 00 00    	je     c001585c <sendKeyboardToken(KeyboardToken)+0x13a>
c00157ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b1:	66 3d 10 03          	cmp    ax,0x310
c00157b5:	75 06                	jne    c00157bd <sendKeyboardToken(KeyboardToken)+0x9b>
c00157b7:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00157bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c0:	66 3d 11 03          	cmp    ax,0x311
c00157c4:	75 06                	jne    c00157cc <sendKeyboardToken(KeyboardToken)+0xaa>
c00157c6:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00157cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157cf:	66 3d 12 03          	cmp    ax,0x312
c00157d3:	75 06                	jne    c00157db <sendKeyboardToken(KeyboardToken)+0xb9>
c00157d5:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00157db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157de:	66 3d 13 03          	cmp    ax,0x313
c00157e2:	75 06                	jne    c00157ea <sendKeyboardToken(KeyboardToken)+0xc8>
c00157e4:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00157ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ed:	66 3d 14 03          	cmp    ax,0x314
c00157f1:	75 06                	jne    c00157f9 <sendKeyboardToken(KeyboardToken)+0xd7>
c00157f3:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00157f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157fc:	66 3d 15 03          	cmp    ax,0x315
c0015800:	75 06                	jne    c0015808 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015802:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015808:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001580b:	66 3d 16 03          	cmp    ax,0x316
c001580f:	75 06                	jne    c0015817 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015811:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015817:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001581a:	66 3d 17 03          	cmp    ax,0x317
c001581e:	75 06                	jne    c0015826 <sendKeyboardToken(KeyboardToken)+0x104>
c0015820:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015826:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015829:	66 3d 18 03          	cmp    ax,0x318
c001582d:	75 06                	jne    c0015835 <sendKeyboardToken(KeyboardToken)+0x113>
c001582f:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015835:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015838:	66 3d 19 03          	cmp    ax,0x319
c001583c:	75 06                	jne    c0015844 <sendKeyboardToken(KeyboardToken)+0x122>
c001583e:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015844:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015847:	66 3d 1a 03          	cmp    ax,0x31a
c001584b:	0f 85 c9 00 00 00    	jne    c001591a <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015851:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015857:	e9 be 00 00 00       	jmp    c001591a <sendKeyboardToken(KeyboardToken)+0x1f8>
c001585c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001585f:	66 3d 10 03          	cmp    ax,0x310
c0015863:	75 0a                	jne    c001586f <sendKeyboardToken(KeyboardToken)+0x14d>
c0015865:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001586b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001586f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015872:	66 3d 11 03          	cmp    ax,0x311
c0015876:	75 0a                	jne    c0015882 <sendKeyboardToken(KeyboardToken)+0x160>
c0015878:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001587e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015882:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015885:	66 3d 12 03          	cmp    ax,0x312
c0015889:	75 0a                	jne    c0015895 <sendKeyboardToken(KeyboardToken)+0x173>
c001588b:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015891:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015895:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015898:	66 3d 13 03          	cmp    ax,0x313
c001589c:	75 0a                	jne    c00158a8 <sendKeyboardToken(KeyboardToken)+0x186>
c001589e:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00158a4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ab:	66 3d 14 03          	cmp    ax,0x314
c00158af:	75 0a                	jne    c00158bb <sendKeyboardToken(KeyboardToken)+0x199>
c00158b1:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00158b7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158be:	66 3d 15 03          	cmp    ax,0x315
c00158c2:	75 0a                	jne    c00158ce <sendKeyboardToken(KeyboardToken)+0x1ac>
c00158c4:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00158ca:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d1:	66 3d 16 03          	cmp    ax,0x316
c00158d5:	75 0a                	jne    c00158e1 <sendKeyboardToken(KeyboardToken)+0x1bf>
c00158d7:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00158dd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e4:	66 3d 17 03          	cmp    ax,0x317
c00158e8:	75 0a                	jne    c00158f4 <sendKeyboardToken(KeyboardToken)+0x1d2>
c00158ea:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00158f0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f7:	66 3d 18 03          	cmp    ax,0x318
c00158fb:	75 0a                	jne    c0015907 <sendKeyboardToken(KeyboardToken)+0x1e5>
c00158fd:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015903:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015907:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001590a:	66 3d 19 03          	cmp    ax,0x319
c001590e:	75 0a                	jne    c001591a <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015910:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015916:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001591a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001591d:	66 3d 00 02          	cmp    ax,0x200
c0015921:	75 2c                	jne    c001594f <sendKeyboardToken(KeyboardToken)+0x22d>
c0015923:	a0 e0 de 02 c0       	mov    al,ds:0xc002dee0
c0015928:	83 f0 01             	xor    eax,0x1
c001592b:	84 c0                	test   al,al
c001592d:	74 20                	je     c001594f <sendKeyboardToken(KeyboardToken)+0x22d>
c001592f:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0015934:	6a 01                	push   0x1
c0015936:	6a 00                	push   0x0
c0015938:	68 8c 55 01 c0       	push   0xc001558c
c001593d:	50                   	push   eax
c001593e:	e8 5b 7e 00 00       	call   c001d79e <Process::createThread(void (*)(void*), void*, int)>
c0015943:	83 c4 10             	add    esp,0x10
c0015946:	c6 05 e0 de 02 c0 01 	mov    BYTE PTR ds:0xc002dee0,0x1
c001594d:	eb 33                	jmp    c0015982 <sendKeyboardToken(KeyboardToken)+0x260>
c001594f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015952:	66 3d 01 02          	cmp    ax,0x201
c0015956:	75 2a                	jne    c0015982 <sendKeyboardToken(KeyboardToken)+0x260>
c0015958:	a0 e0 de 02 c0       	mov    al,ds:0xc002dee0
c001595d:	83 f0 01             	xor    eax,0x1
c0015960:	84 c0                	test   al,al
c0015962:	74 1e                	je     c0015982 <sendKeyboardToken(KeyboardToken)+0x260>
c0015964:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0015969:	6a 01                	push   0x1
c001596b:	6a 00                	push   0x0
c001596d:	68 f8 55 01 c0       	push   0xc00155f8
c0015972:	50                   	push   eax
c0015973:	e8 26 7e 00 00       	call   c001d79e <Process::createThread(void (*)(void*), void*, int)>
c0015978:	83 c4 10             	add    esp,0x10
c001597b:	c6 05 e0 de 02 c0 01 	mov    BYTE PTR ds:0xc002dee0,0x1
c0015982:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015985:	66 3d 1d 03          	cmp    ax,0x31d
c0015989:	75 06                	jne    c0015991 <sendKeyboardToken(KeyboardToken)+0x26f>
c001598b:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015991:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015994:	66 3d 1c 03          	cmp    ax,0x31c
c0015998:	75 06                	jne    c00159a0 <sendKeyboardToken(KeyboardToken)+0x27e>
c001599a:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00159a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159a3:	66 3d 1b 03          	cmp    ax,0x31b
c00159a7:	75 06                	jne    c00159af <sendKeyboardToken(KeyboardToken)+0x28d>
c00159a9:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00159af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159b2:	66 3d 1e 03          	cmp    ax,0x31e
c00159b6:	75 06                	jne    c00159be <sendKeyboardToken(KeyboardToken)+0x29c>
c00159b8:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00159be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159c1:	66 3d 1f 03          	cmp    ax,0x31f
c00159c5:	75 06                	jne    c00159cd <sendKeyboardToken(KeyboardToken)+0x2ab>
c00159c7:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00159cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159d0:	66 3d 1a 03          	cmp    ax,0x31a
c00159d4:	75 06                	jne    c00159dc <sendKeyboardToken(KeyboardToken)+0x2ba>
c00159d6:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00159dc:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00159e0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00159e3:	83 f0 01             	xor    eax,0x1
c00159e6:	84 c0                	test   al,al
c00159e8:	74 77                	je     c0015a61 <sendKeyboardToken(KeyboardToken)+0x33f>
c00159ea:	a0 e1 db 02 c0       	mov    al,ds:0xc002dbe1
c00159ef:	84 c0                	test   al,al
c00159f1:	74 41                	je     c0015a34 <sendKeyboardToken(KeyboardToken)+0x312>
c00159f3:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00159f7:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00159fb:	74 2b                	je     c0015a28 <sendKeyboardToken(KeyboardToken)+0x306>
c00159fd:	8b 15 e4 de 02 c0    	mov    edx,DWORD PTR ds:0xc002dee4
c0015a03:	89 d0                	mov    eax,edx
c0015a05:	c1 e0 02             	shl    eax,0x2
c0015a08:	01 d0                	add    eax,edx
c0015a0a:	01 c0                	add    eax,eax
c0015a0c:	a3 e4 de 02 c0       	mov    ds:0xc002dee4,eax
c0015a11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a14:	0f b7 c0             	movzx  eax,ax
c0015a17:	8d 50 d0             	lea    edx,[eax-0x30]
c0015a1a:	a1 e4 de 02 c0       	mov    eax,ds:0xc002dee4
c0015a1f:	01 d0                	add    eax,edx
c0015a21:	a3 e4 de 02 c0       	mov    ds:0xc002dee4,eax
c0015a26:	eb 6d                	jmp    c0015a95 <sendKeyboardToken(KeyboardToken)+0x373>
c0015a28:	c7 05 e4 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dee4,0x0
c0015a32:	eb 61                	jmp    c0015a95 <sendKeyboardToken(KeyboardToken)+0x373>
c0015a34:	a1 e4 de 02 c0       	mov    eax,ds:0xc002dee4
c0015a39:	85 c0                	test   eax,eax
c0015a3b:	74 18                	je     c0015a55 <sendKeyboardToken(KeyboardToken)+0x333>
c0015a3d:	a1 e4 de 02 c0       	mov    eax,ds:0xc002dee4
c0015a42:	0f b6 c0             	movzx  eax,al
c0015a45:	83 ec 0c             	sub    esp,0xc
c0015a48:	50                   	push   eax
c0015a49:	e8 16 fc ff ff       	call   c0015664 <sendKeyToTerminal(unsigned char)>
c0015a4e:	83 c4 10             	add    esp,0x10
c0015a51:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015a55:	c7 05 e4 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dee4,0x0
c0015a5f:	eb 34                	jmp    c0015a95 <sendKeyboardToken(KeyboardToken)+0x373>
c0015a61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a64:	66 3d 01 01          	cmp    ax,0x101
c0015a68:	75 2b                	jne    c0015a95 <sendKeyboardToken(KeyboardToken)+0x373>
c0015a6a:	a1 e4 de 02 c0       	mov    eax,ds:0xc002dee4
c0015a6f:	85 c0                	test   eax,eax
c0015a71:	74 18                	je     c0015a8b <sendKeyboardToken(KeyboardToken)+0x369>
c0015a73:	a1 e4 de 02 c0       	mov    eax,ds:0xc002dee4
c0015a78:	0f b6 c0             	movzx  eax,al
c0015a7b:	83 ec 0c             	sub    esp,0xc
c0015a7e:	50                   	push   eax
c0015a7f:	e8 e0 fb ff ff       	call   c0015664 <sendKeyToTerminal(unsigned char)>
c0015a84:	83 c4 10             	add    esp,0x10
c0015a87:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015a8b:	c7 05 e4 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dee4,0x0
c0015a95:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015a98:	83 f0 01             	xor    eax,0x1
c0015a9b:	84 c0                	test   al,al
c0015a9d:	74 4c                	je     c0015aeb <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015a9f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015aa2:	83 f0 01             	xor    eax,0x1
c0015aa5:	84 c0                	test   al,al
c0015aa7:	74 42                	je     c0015aeb <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015aa9:	a0 e0 db 02 c0       	mov    al,ds:0xc002dbe0
c0015aae:	83 f0 01             	xor    eax,0x1
c0015ab1:	84 c0                	test   al,al
c0015ab3:	74 36                	je     c0015aeb <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015ab5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ab8:	66 83 f8 1f          	cmp    ax,0x1f
c0015abc:	76 09                	jbe    c0015ac7 <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015abe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ac1:	66 83 f8 7e          	cmp    ax,0x7e
c0015ac5:	76 12                	jbe    c0015ad9 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015ac7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aca:	66 83 f8 0a          	cmp    ax,0xa
c0015ace:	74 09                	je     c0015ad9 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015ad0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ad3:	66 83 f8 08          	cmp    ax,0x8
c0015ad7:	75 12                	jne    c0015aeb <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015ad9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015adc:	0f b6 c0             	movzx  eax,al
c0015adf:	83 ec 0c             	sub    esp,0xc
c0015ae2:	50                   	push   eax
c0015ae3:	e8 7c fb ff ff       	call   c0015664 <sendKeyToTerminal(unsigned char)>
c0015ae8:	83 c4 10             	add    esp,0x10
c0015aeb:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015aee:	83 f0 01             	xor    eax,0x1
c0015af1:	84 c0                	test   al,al
c0015af3:	74 4f                	je     c0015b44 <sendKeyboardToken(KeyboardToken)+0x422>
c0015af5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015af8:	83 f0 01             	xor    eax,0x1
c0015afb:	84 c0                	test   al,al
c0015afd:	74 45                	je     c0015b44 <sendKeyboardToken(KeyboardToken)+0x422>
c0015aff:	a0 e0 db 02 c0       	mov    al,ds:0xc002dbe0
c0015b04:	84 c0                	test   al,al
c0015b06:	74 3c                	je     c0015b44 <sendKeyboardToken(KeyboardToken)+0x422>
c0015b08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b0b:	66 83 f8 3f          	cmp    ax,0x3f
c0015b0f:	76 33                	jbe    c0015b44 <sendKeyboardToken(KeyboardToken)+0x422>
c0015b11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b14:	66 83 f8 7f          	cmp    ax,0x7f
c0015b18:	77 2a                	ja     c0015b44 <sendKeyboardToken(KeyboardToken)+0x422>
c0015b1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b1d:	88 c2                	mov    dl,al
c0015b1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b22:	66 83 f8 5f          	cmp    ax,0x5f
c0015b26:	76 04                	jbe    c0015b2c <sendKeyboardToken(KeyboardToken)+0x40a>
c0015b28:	b0 20                	mov    al,0x20
c0015b2a:	eb 02                	jmp    c0015b2e <sendKeyboardToken(KeyboardToken)+0x40c>
c0015b2c:	b0 00                	mov    al,0x0
c0015b2e:	29 c2                	sub    edx,eax
c0015b30:	88 d0                	mov    al,dl
c0015b32:	83 e8 40             	sub    eax,0x40
c0015b35:	0f b6 c0             	movzx  eax,al
c0015b38:	83 ec 0c             	sub    esp,0xc
c0015b3b:	50                   	push   eax
c0015b3c:	e8 23 fb ff ff       	call   c0015664 <sendKeyToTerminal(unsigned char)>
c0015b41:	83 c4 10             	add    esp,0x10
c0015b44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b47:	66 3d 00 03          	cmp    ax,0x300
c0015b4b:	75 0f                	jne    c0015b5c <sendKeyboardToken(KeyboardToken)+0x43a>
c0015b4d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015b50:	83 f0 01             	xor    eax,0x1
c0015b53:	84 c0                	test   al,al
c0015b55:	74 05                	je     c0015b5c <sendKeyboardToken(KeyboardToken)+0x43a>
c0015b57:	e8 5d a8 ff ff       	call   c00103b9 <doTerminalCycle()>
c0015b5c:	90                   	nop
c0015b5d:	c9                   	leave  
c0015b5e:	c3                   	ret    

c0015b5f <clearInternalKeybuffer(VgaText*)>:
c0015b5f:	55                   	push   ebp
c0015b60:	89 e5                	mov    ebp,esp
c0015b62:	83 ec 08             	sub    esp,0x8
c0015b65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b68:	05 98 01 00 00       	add    eax,0x198
c0015b6d:	83 ec 0c             	sub    esp,0xc
c0015b70:	50                   	push   eax
c0015b71:	e8 f6 ab fe ff       	call   c000076c <strlen>
c0015b76:	83 c4 10             	add    esp,0x10
c0015b79:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015b7c:	81 c2 98 01 00 00    	add    edx,0x198
c0015b82:	83 ec 04             	sub    esp,0x4
c0015b85:	50                   	push   eax
c0015b86:	6a 00                	push   0x0
c0015b88:	52                   	push   edx
c0015b89:	e8 c2 ab fe ff       	call   c0000750 <memset>
c0015b8e:	83 c4 10             	add    esp,0x10
c0015b91:	90                   	nop
c0015b92:	c9                   	leave  
c0015b93:	c3                   	ret    

c0015b94 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015b94:	55                   	push   ebp
c0015b95:	89 e5                	mov    ebp,esp
c0015b97:	83 ec 18             	sub    esp,0x18
c0015b9a:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0015b9f:	85 c0                	test   eax,eax
c0015ba1:	74 2a                	je     c0015bcd <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015ba3:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015ba9:	8b 0d c8 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002dac8
c0015baf:	83 ec 04             	sub    esp,0x4
c0015bb2:	68 e0 da 02 c0       	push   0xc002dae0
c0015bb7:	83 ec 08             	sub    esp,0x8
c0015bba:	89 e2                	mov    edx,esp
c0015bbc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015bbf:	89 02                	mov    DWORD PTR [edx],eax
c0015bc1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015bc4:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015bc8:	ff d1                	call   ecx
c0015bca:	83 c4 10             	add    esp,0x10
c0015bcd:	fb                   	sti    
c0015bce:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015bd5:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015bd9:	0f 84 a1 00 00 00    	je     c0015c80 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0015bdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015be2:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015be8:	84 c0                	test   al,al
c0015bea:	75 28                	jne    c0015c14 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0015bec:	fa                   	cli    
c0015bed:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c0015bf2:	40                   	inc    eax
c0015bf3:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c0015bf8:	e8 c6 7d 00 00       	call   c001d9c3 <schedule()>
c0015bfd:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c0015c02:	48                   	dec    eax
c0015c03:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c0015c08:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c0015c0d:	85 c0                	test   eax,eax
c0015c0f:	75 ce                	jne    c0015bdf <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015c11:	fb                   	sti    
c0015c12:	eb cb                	jmp    c0015bdf <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015c14:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015c17:	8d 50 01             	lea    edx,[eax+0x1]
c0015c1a:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015c1d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c20:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015c26:	88 10                	mov    BYTE PTR [eax],dl
c0015c28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c2b:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015c31:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015c34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c37:	05 98 01 00 00       	add    eax,0x198
c0015c3c:	83 ec 0c             	sub    esp,0xc
c0015c3f:	50                   	push   eax
c0015c40:	e8 27 ab fe ff       	call   c000076c <strlen>
c0015c45:	83 c4 10             	add    esp,0x10
c0015c48:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c4b:	81 c2 98 01 00 00    	add    edx,0x198
c0015c51:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015c54:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c57:	81 c2 98 01 00 00    	add    edx,0x198
c0015c5d:	83 ec 04             	sub    esp,0x4
c0015c60:	50                   	push   eax
c0015c61:	51                   	push   ecx
c0015c62:	52                   	push   edx
c0015c63:	e8 20 aa fe ff       	call   c0000688 <memmove>
c0015c68:	83 c4 10             	add    esp,0x10
c0015c6b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015c6e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015c71:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015c75:	0f 85 5a ff ff ff    	jne    c0015bd5 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0015c7b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c7e:	eb 03                	jmp    c0015c83 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0015c80:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c83:	c9                   	leave  
c0015c84:	c3                   	ret    
c0015c85:	90                   	nop

c0015c86 <Keyboard::Keyboard(char const*)>:
c0015c86:	83 ec 0c             	sub    esp,0xc
c0015c89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c8d:	83 ec 08             	sub    esp,0x8
c0015c90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c94:	50                   	push   eax
c0015c95:	e8 70 e0 ff ff       	call   c0013d0a <Device::Device(char const*)>
c0015c9a:	83 c4 10             	add    esp,0x10
c0015c9d:	ba bc ae 02 c0       	mov    edx,0xc002aebc
c0015ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ca6:	89 10                	mov    DWORD PTR [eax],edx
c0015ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cac:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015cb6:	c6 05 c4 da 02 c0 01 	mov    BYTE PTR ds:0xc002dac4,0x1
c0015cbd:	90                   	nop
c0015cbe:	83 c4 0c             	add    esp,0xc
c0015cc1:	c3                   	ret    

c0015cc2 <Keyboard::~Keyboard()>:
c0015cc2:	83 ec 0c             	sub    esp,0xc
c0015cc5:	ba bc ae 02 c0       	mov    edx,0xc002aebc
c0015cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cce:	89 10                	mov    DWORD PTR [eax],edx
c0015cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cd4:	83 ec 0c             	sub    esp,0xc
c0015cd7:	50                   	push   eax
c0015cd8:	e8 f7 dc ff ff       	call   c00139d4 <Device::~Device()>
c0015cdd:	83 c4 10             	add    esp,0x10
c0015ce0:	90                   	nop
c0015ce1:	83 c4 0c             	add    esp,0xc
c0015ce4:	c3                   	ret    
c0015ce5:	90                   	nop

c0015ce6 <Keyboard::~Keyboard()>:
c0015ce6:	83 ec 0c             	sub    esp,0xc
c0015ce9:	83 ec 0c             	sub    esp,0xc
c0015cec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cf0:	e8 cd ff ff ff       	call   c0015cc2 <Keyboard::~Keyboard()>
c0015cf5:	83 c4 10             	add    esp,0x10
c0015cf8:	83 ec 08             	sub    esp,0x8
c0015cfb:	68 5c 01 00 00       	push   0x15c
c0015d00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d04:	e8 ec c8 ff ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c0015d09:	83 c4 10             	add    esp,0x10
c0015d0c:	83 c4 0c             	add    esp,0xc
c0015d0f:	c3                   	ret    

c0015d10 <LogicalDisk::close(int, int, void*)>:
c0015d10:	83 c8 ff             	or     eax,0xffffffff
c0015d13:	c3                   	ret    

c0015d14 <LogicalDisk::~LogicalDisk()>:
c0015d14:	83 ec 0c             	sub    esp,0xc
c0015d17:	ba 34 af 02 c0       	mov    edx,0xc002af34
c0015d1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d20:	89 10                	mov    DWORD PTR [eax],edx
c0015d22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d26:	83 ec 0c             	sub    esp,0xc
c0015d29:	50                   	push   eax
c0015d2a:	e8 a5 dc ff ff       	call   c00139d4 <Device::~Device()>
c0015d2f:	83 c4 10             	add    esp,0x10
c0015d32:	90                   	nop
c0015d33:	83 c4 0c             	add    esp,0xc
c0015d36:	c3                   	ret    
c0015d37:	90                   	nop

c0015d38 <LogicalDisk::~LogicalDisk()>:
c0015d38:	83 ec 0c             	sub    esp,0xc
c0015d3b:	83 ec 0c             	sub    esp,0xc
c0015d3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d42:	e8 cd ff ff ff       	call   c0015d14 <LogicalDisk::~LogicalDisk()>
c0015d47:	83 c4 10             	add    esp,0x10
c0015d4a:	83 ec 08             	sub    esp,0x8
c0015d4d:	68 74 01 00 00       	push   0x174
c0015d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d56:	e8 9a c8 ff ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c0015d5b:	83 c4 10             	add    esp,0x10
c0015d5e:	83 c4 0c             	add    esp,0xc
c0015d61:	c3                   	ret    

c0015d62 <LogicalDisk::open(int, int, void*)>:
c0015d62:	83 ec 18             	sub    esp,0x18
c0015d65:	68 e8 ae 02 c0       	push   0xc002aee8
c0015d6a:	e8 ca 40 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c0015d6f:	83 c8 ff             	or     eax,0xffffffff
c0015d72:	83 c4 1c             	add    esp,0x1c
c0015d75:	c3                   	ret    

c0015d76 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015d76:	53                   	push   ebx
c0015d77:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015d7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d7f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d83:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015d89:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015d8f:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015d95:	77 10                	ja     c0015da7 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015d97:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015d9d:	89 d3                	mov    ebx,edx
c0015d9f:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015da5:	72 05                	jb     c0015dac <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015da7:	83 c8 ff             	or     eax,0xffffffff
c0015daa:	89 c2                	mov    edx,eax
c0015dac:	5b                   	pop    ebx
c0015dad:	c3                   	ret    

c0015dae <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015dae:	56                   	push   esi
c0015daf:	83 c8 ff             	or     eax,0xffffffff
c0015db2:	53                   	push   ebx
c0015db3:	89 c2                	mov    edx,eax
c0015db5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015db9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015dbd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015dc1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015dc7:	77 27                	ja     c0015df0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015dc9:	89 d8                	mov    eax,ebx
c0015dcb:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015dd1:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015dd7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015ddc:	89 c2                	mov    edx,eax
c0015dde:	73 10                	jae    c0015df0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015de0:	89 c8                	mov    eax,ecx
c0015de2:	89 da                	mov    edx,ebx
c0015de4:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015dea:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015df0:	5b                   	pop    ebx
c0015df1:	5e                   	pop    esi
c0015df2:	c3                   	ret    
c0015df3:	90                   	nop

c0015df4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015df4:	83 ec 1c             	sub    esp,0x1c
c0015df7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015dfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015dff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015e07:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015e0b:	89 04 24             	mov    DWORD PTR [esp],eax
c0015e0e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015e12:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015e16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e1a:	83 ec 08             	sub    esp,0x8
c0015e1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015e21:	50                   	push   eax
c0015e22:	e8 e3 de ff ff       	call   c0013d0a <Device::Device(char const*)>
c0015e27:	83 c4 10             	add    esp,0x10
c0015e2a:	ba 34 af 02 c0       	mov    edx,0xc002af34
c0015e2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e33:	89 10                	mov    DWORD PTR [eax],edx
c0015e35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e39:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015e40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e44:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015e4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e4f:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015e59:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015e5d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e61:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e65:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015e6b:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015e71:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015e75:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015e78:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015e7c:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015e82:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015e88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e8c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015e90:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015e96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e9a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015ea4:	90                   	nop
c0015ea5:	83 c4 1c             	add    esp,0x1c
c0015ea8:	c3                   	ret    
c0015ea9:	90                   	nop

c0015eaa <LogicalDisk::assignDriveLetter()>:
c0015eaa:	55                   	push   ebp
c0015eab:	57                   	push   edi
c0015eac:	56                   	push   esi
c0015ead:	53                   	push   ebx
c0015eae:	83 ec 14             	sub    esp,0x14
c0015eb1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015eb5:	8b 3d 00 df 02 c0    	mov    edi,DWORD PTR ds:0xc002df00
c0015ebb:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015ec1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015ec5:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015ecb:	8b 3d 04 df 02 c0    	mov    edi,DWORD PTR ds:0xc002df04
c0015ed1:	3c 01                	cmp    al,0x1
c0015ed3:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015ed7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015edb:	19 c0                	sbb    eax,eax
c0015edd:	83 e0 02             	and    eax,0x2
c0015ee0:	83 c0 41             	add    eax,0x41
c0015ee3:	0f be e8             	movsx  ebp,al
c0015ee6:	3c 43                	cmp    al,0x43
c0015ee8:	75 10                	jne    c0015efa <LogicalDisk::assignDriveLetter()+0x50>
c0015eea:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015ef1:	75 5d                	jne    c0015f50 <LogicalDisk::assignDriveLetter()+0xa6>
c0015ef3:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015ef8:	75 56                	jne    c0015f50 <LogicalDisk::assignDriveLetter()+0xa6>
c0015efa:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015efd:	ba 01 00 00 00       	mov    edx,0x1
c0015f02:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015f06:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015f0a:	d3 e2                	shl    edx,cl
c0015f0c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015f10:	89 d7                	mov    edi,edx
c0015f12:	89 d6                	mov    esi,edx
c0015f14:	c1 ff 1f             	sar    edi,0x1f
c0015f17:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015f1b:	21 f9                	and    ecx,edi
c0015f1d:	09 d1                	or     ecx,edx
c0015f1f:	75 2f                	jne    c0015f50 <LogicalDisk::assignDriveLetter()+0xa6>
c0015f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015f25:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015f29:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015f2f:	09 f2                	or     edx,esi
c0015f31:	89 15 00 df 02 c0    	mov    DWORD PTR ds:0xc002df00,edx
c0015f37:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f3b:	09 fa                	or     edx,edi
c0015f3d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015f41:	89 15 04 df 02 c0    	mov    DWORD PTR ds:0xc002df04,edx
c0015f47:	89 1c bd 20 df 02 c0 	mov    DWORD PTR [edi*4-0x3ffd20e0],ebx
c0015f4e:	eb 08                	jmp    c0015f58 <LogicalDisk::assignDriveLetter()+0xae>
c0015f50:	45                   	inc    ebp
c0015f51:	40                   	inc    eax
c0015f52:	3c 5b                	cmp    al,0x5b
c0015f54:	75 90                	jne    c0015ee6 <LogicalDisk::assignDriveLetter()+0x3c>
c0015f56:	31 c0                	xor    eax,eax
c0015f58:	83 c4 14             	add    esp,0x14
c0015f5b:	5b                   	pop    ebx
c0015f5c:	5e                   	pop    esi
c0015f5d:	5f                   	pop    edi
c0015f5e:	5d                   	pop    ebp
c0015f5f:	c3                   	ret    

c0015f60 <LogicalDisk::mount()>:
c0015f60:	56                   	push   esi
c0015f61:	53                   	push   ebx
c0015f62:	53                   	push   ebx
c0015f63:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f67:	8b 1d 94 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da94
c0015f6d:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015f77:	85 db                	test   ebx,ebx
c0015f79:	74 27                	je     c0015fa2 <LogicalDisk::mount()+0x42>
c0015f7b:	51                   	push   ecx
c0015f7c:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015f83:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015f85:	83 e8 41             	sub    eax,0x41
c0015f88:	50                   	push   eax
c0015f89:	56                   	push   esi
c0015f8a:	53                   	push   ebx
c0015f8b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015f8e:	83 c4 10             	add    esp,0x10
c0015f91:	84 c0                	test   al,al
c0015f93:	74 08                	je     c0015f9d <LogicalDisk::mount()+0x3d>
c0015f95:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015f9b:	eb 07                	jmp    c0015fa4 <LogicalDisk::mount()+0x44>
c0015f9d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015fa0:	eb d5                	jmp    c0015f77 <LogicalDisk::mount()+0x17>
c0015fa2:	31 c0                	xor    eax,eax
c0015fa4:	5a                   	pop    edx
c0015fa5:	5b                   	pop    ebx
c0015fa6:	5e                   	pop    esi
c0015fa7:	c3                   	ret    

c0015fa8 <LogicalDisk::unmount()>:
c0015fa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015fac:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015fb6:	c3                   	ret    
c0015fb7:	90                   	nop

c0015fb8 <LogicalDisk::eject()>:
c0015fb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015fbc:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0015fc2:	8b 10                	mov    edx,DWORD PTR [eax]
c0015fc4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015fc8:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0015fcb:	90                   	nop

c0015fcc <LogicalDisk::unassignDriveLetter()>:
c0015fcc:	57                   	push   edi
c0015fcd:	56                   	push   esi
c0015fce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015fd2:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015fd9:	84 c9                	test   cl,cl
c0015fdb:	75 0f                	jne    c0015fec <LogicalDisk::unassignDriveLetter()+0x20>
c0015fdd:	c7 44 24 0c 0c af 02 c0 	mov    DWORD PTR [esp+0xc],0xc002af0c
c0015fe5:	5e                   	pop    esi
c0015fe6:	5f                   	pop    edi
c0015fe7:	e9 4d 3e 00 00       	jmp    c0019e39 <Krnl::panic(char const*)>
c0015fec:	83 e9 41             	sub    ecx,0x41
c0015fef:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015ff6:	b8 01 00 00 00       	mov    eax,0x1
c0015ffb:	c7 04 8d 20 df 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd20e0],0x0
c0016006:	d3 e0                	shl    eax,cl
c0016008:	89 c7                	mov    edi,eax
c001600a:	f7 d0                	not    eax
c001600c:	c1 ff 1f             	sar    edi,0x1f
c001600f:	21 05 00 df 02 c0    	and    DWORD PTR ds:0xc002df00,eax
c0016015:	89 fe                	mov    esi,edi
c0016017:	f7 d6                	not    esi
c0016019:	21 35 04 df 02 c0    	and    DWORD PTR ds:0xc002df04,esi
c001601f:	5e                   	pop    esi
c0016020:	5f                   	pop    edi
c0016021:	c3                   	ret    

c0016022 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016022:	57                   	push   edi
c0016023:	56                   	push   esi
c0016024:	53                   	push   ebx
c0016025:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016029:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001602d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016031:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016035:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001603b:	77 41                	ja     c001607e <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001603d:	99                   	cdq    
c001603e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016044:	01 c8                	add    eax,ecx
c0016046:	11 da                	adc    edx,ebx
c0016048:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001604e:	19 d7                	sbb    edi,edx
c0016050:	72 33                	jb     c0016085 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016052:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016058:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001605e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016062:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016066:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001606c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016072:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016076:	5b                   	pop    ebx
c0016077:	5e                   	pop    esi
c0016078:	5f                   	pop    edi
c0016079:	e9 cc 0a 00 00       	jmp    c0016b4a <VCache::read(unsigned long long, int, void*)>
c001607e:	b8 05 00 00 00       	mov    eax,0x5
c0016083:	eb 05                	jmp    c001608a <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016085:	b8 07 00 00 00       	mov    eax,0x7
c001608a:	5b                   	pop    ebx
c001608b:	5e                   	pop    esi
c001608c:	5f                   	pop    edi
c001608d:	c3                   	ret    

c001608e <LogicalDisk::write(unsigned long long, int, void*)>:
c001608e:	57                   	push   edi
c001608f:	56                   	push   esi
c0016090:	53                   	push   ebx
c0016091:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016095:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016099:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001609d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00160a1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00160a7:	77 41                	ja     c00160ea <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00160a9:	99                   	cdq    
c00160aa:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00160b0:	01 c8                	add    eax,ecx
c00160b2:	11 da                	adc    edx,ebx
c00160b4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00160ba:	19 d7                	sbb    edi,edx
c00160bc:	72 33                	jb     c00160f1 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00160be:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00160c4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00160ca:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00160ce:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00160d2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00160d8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00160de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00160e2:	5b                   	pop    ebx
c00160e3:	5e                   	pop    esi
c00160e4:	5f                   	pop    edi
c00160e5:	e9 76 09 00 00       	jmp    c0016a60 <VCache::write(unsigned long long, int, void*)>
c00160ea:	b8 05 00 00 00       	mov    eax,0x5
c00160ef:	eb 05                	jmp    c00160f6 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00160f1:	b8 07 00 00 00       	mov    eax,0x7
c00160f6:	5b                   	pop    ebx
c00160f7:	5e                   	pop    esi
c00160f8:	5f                   	pop    edi
c00160f9:	c3                   	ret    

c00160fa <Mouse::Mouse(char const*)>:
c00160fa:	83 ec 0c             	sub    esp,0xc
c00160fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016101:	83 ec 08             	sub    esp,0x8
c0016104:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016108:	50                   	push   eax
c0016109:	e8 fc db ff ff       	call   c0013d0a <Device::Device(char const*)>
c001610e:	83 c4 10             	add    esp,0x10
c0016111:	ba 60 af 02 c0       	mov    edx,0xc002af60
c0016116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001611a:	89 10                	mov    DWORD PTR [eax],edx
c001611c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016120:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001612a:	90                   	nop
c001612b:	83 c4 0c             	add    esp,0xc
c001612e:	c3                   	ret    
c001612f:	90                   	nop

c0016130 <Mouse::~Mouse()>:
c0016130:	83 ec 0c             	sub    esp,0xc
c0016133:	ba 60 af 02 c0       	mov    edx,0xc002af60
c0016138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001613c:	89 10                	mov    DWORD PTR [eax],edx
c001613e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016142:	83 ec 0c             	sub    esp,0xc
c0016145:	50                   	push   eax
c0016146:	e8 89 d8 ff ff       	call   c00139d4 <Device::~Device()>
c001614b:	83 c4 10             	add    esp,0x10
c001614e:	90                   	nop
c001614f:	83 c4 0c             	add    esp,0xc
c0016152:	c3                   	ret    
c0016153:	90                   	nop

c0016154 <Mouse::~Mouse()>:
c0016154:	83 ec 0c             	sub    esp,0xc
c0016157:	83 ec 0c             	sub    esp,0xc
c001615a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001615e:	e8 cd ff ff ff       	call   c0016130 <Mouse::~Mouse()>
c0016163:	83 c4 10             	add    esp,0x10
c0016166:	83 ec 08             	sub    esp,0x8
c0016169:	68 58 01 00 00       	push   0x158
c001616e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016172:	e8 7e c4 ff ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c0016177:	83 c4 10             	add    esp,0x10
c001617a:	83 c4 0c             	add    esp,0xc
c001617d:	c3                   	ret    

c001617e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001617e:	55                   	push   ebp
c001617f:	57                   	push   edi
c0016180:	56                   	push   esi
c0016181:	53                   	push   ebx
c0016182:	81 ec 28 01 00 00    	sub    esp,0x128
c0016188:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001618f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016196:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001619d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00161a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00161a8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00161ac:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00161b3:	e8 4e dc ff ff       	call   c0013e06 <Device::getName()>
c00161b8:	5a                   	pop    edx
c00161b9:	59                   	pop    ecx
c00161ba:	50                   	push   eax
c00161bb:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00161bf:	55                   	push   ebp
c00161c0:	e8 47 a6 fe ff       	call   c000080c <strcpy>
c00161c5:	5b                   	pop    ebx
c00161c6:	58                   	pop    eax
c00161c7:	68 84 af 02 c0       	push   0xc002af84
c00161cc:	55                   	push   ebp
c00161cd:	e8 7a a7 fe ff       	call   c000094c <strcat>
c00161d2:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00161d9:	e8 bb 93 ff ff       	call   c000f599 <malloc>
c00161de:	83 c4 0c             	add    esp,0xc
c00161e1:	89 c3                	mov    ebx,eax
c00161e3:	57                   	push   edi
c00161e4:	56                   	push   esi
c00161e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00161e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00161ed:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00161f4:	55                   	push   ebp
c00161f5:	50                   	push   eax
c00161f6:	e8 f9 fb ff ff       	call   c0015df4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00161fb:	83 c4 14             	add    esp,0x14
c00161fe:	53                   	push   ebx
c00161ff:	e8 a6 fc ff ff       	call   c0015eaa <LogicalDisk::assignDriveLetter()>
c0016204:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016207:	e8 54 fd ff ff       	call   c0015f60 <LogicalDisk::mount()>
c001620c:	58                   	pop    eax
c001620d:	5a                   	pop    edx
c001620e:	53                   	push   ebx
c001620f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016216:	e8 eb d8 ff ff       	call   c0013b06 <Device::addChild(Device*)>
c001621b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016221:	5b                   	pop    ebx
c0016222:	5e                   	pop    esi
c0016223:	5f                   	pop    edi
c0016224:	5d                   	pop    ebp
c0016225:	c3                   	ret    

c0016226 <createPartitionsForDisk(PhysicalDisk*)>:
c0016226:	55                   	push   ebp
c0016227:	57                   	push   edi
c0016228:	56                   	push   esi
c0016229:	53                   	push   ebx
c001622a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016230:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016237:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001623d:	3d 00 02 00 00       	cmp    eax,0x200
c0016242:	74 27                	je     c001626b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016244:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001624a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016250:	83 ec 10             	sub    esp,0x10
c0016253:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016257:	99                   	cdq    
c0016258:	c1 e6 0a             	shl    esi,0xa
c001625b:	52                   	push   edx
c001625c:	89 fd                	mov    ebp,edi
c001625e:	50                   	push   eax
c001625f:	55                   	push   ebp
c0016260:	56                   	push   esi
c0016261:	e8 ae 04 01 00       	call   c0026714 <__udivdi3>
c0016266:	e9 b1 00 00 00       	jmp    c001631c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001626b:	83 ec 0c             	sub    esp,0xc
c001626e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016270:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016274:	56                   	push   esi
c0016275:	6a 01                	push   0x1
c0016277:	6a 00                	push   0x0
c0016279:	6a 00                	push   0x0
c001627b:	53                   	push   ebx
c001627c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001627f:	83 c4 20             	add    esp,0x20
c0016282:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001628a:	75 0a                	jne    c0016296 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001628c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016294:	74 2c                	je     c00162c2 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016296:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001629c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00162a2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00162a8:	83 ec 10             	sub    esp,0x10
c00162ab:	0f a4 c2 0a          	shld   edx,eax,0xa
c00162af:	89 f7                	mov    edi,esi
c00162b1:	c1 e0 0a             	shl    eax,0xa
c00162b4:	c1 ff 1f             	sar    edi,0x1f
c00162b7:	57                   	push   edi
c00162b8:	56                   	push   esi
c00162b9:	52                   	push   edx
c00162ba:	50                   	push   eax
c00162bb:	e8 54 04 01 00       	call   c0026714 <__udivdi3>
c00162c0:	eb 5a                	jmp    c001631c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00162c2:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00162c9:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00162d0:	83 e1 7f             	and    ecx,0x7f
c00162d3:	83 e0 7f             	and    eax,0x7f
c00162d6:	01 c1                	add    ecx,eax
c00162d8:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00162df:	83 e0 7f             	and    eax,0x7f
c00162e2:	01 c1                	add    ecx,eax
c00162e4:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00162eb:	83 e0 7f             	and    eax,0x7f
c00162ee:	00 c1                	add    cl,al
c00162f0:	74 41                	je     c0016333 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00162f2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00162f8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00162fe:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016304:	83 ec 10             	sub    esp,0x10
c0016307:	0f a4 c2 0a          	shld   edx,eax,0xa
c001630b:	89 f7                	mov    edi,esi
c001630d:	c1 e0 0a             	shl    eax,0xa
c0016310:	c1 ff 1f             	sar    edi,0x1f
c0016313:	57                   	push   edi
c0016314:	56                   	push   esi
c0016315:	52                   	push   edx
c0016316:	50                   	push   eax
c0016317:	e8 f8 03 01 00       	call   c0026714 <__udivdi3>
c001631c:	83 c4 14             	add    esp,0x14
c001631f:	52                   	push   edx
c0016320:	50                   	push   eax
c0016321:	6a 00                	push   0x0
c0016323:	6a 00                	push   0x0
c0016325:	53                   	push   ebx
c0016326:	e8 53 fe ff ff       	call   c001617e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001632b:	83 c4 20             	add    esp,0x20
c001632e:	e9 79 01 00 00       	jmp    c00164ac <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016333:	89 f0                	mov    eax,esi
c0016335:	31 f6                	xor    esi,esi
c0016337:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001633e:	75 02                	jne    c0016342 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016340:	89 f1                	mov    ecx,esi
c0016342:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016349:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016350:	c1 e2 08             	shl    edx,0x8
c0016353:	c1 e7 10             	shl    edi,0x10
c0016356:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c001635e:	09 fa                	or     edx,edi
c0016360:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016368:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c001636f:	83 c0 10             	add    eax,0x10
c0016372:	09 fa                	or     edx,edi
c0016374:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c001637b:	c1 e7 18             	shl    edi,0x18
c001637e:	09 fa                	or     edx,edi
c0016380:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016387:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c001638b:	c1 e7 10             	shl    edi,0x10
c001638e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016395:	c1 e2 08             	shl    edx,0x8
c0016398:	09 fa                	or     edx,edi
c001639a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00163a1:	09 fa                	or     edx,edi
c00163a3:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00163aa:	c1 e7 18             	shl    edi,0x18
c00163ad:	09 fa                	or     edx,edi
c00163af:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00163b3:	46                   	inc    esi
c00163b4:	83 fe 04             	cmp    esi,0x4
c00163b7:	0f 85 7a ff ff ff    	jne    c0016337 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00163bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163c1:	83 f0 01             	xor    eax,0x1
c00163c4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00163c8:	75 57                	jne    c0016421 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00163ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00163ce:	83 f0 01             	xor    eax,0x1
c00163d1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00163d5:	75 4a                	jne    c0016421 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00163d7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00163db:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00163e3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00163eb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00163f1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00163f7:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00163fd:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016401:	89 f7                	mov    edi,esi
c0016403:	c1 e0 0a             	shl    eax,0xa
c0016406:	c1 ff 1f             	sar    edi,0x1f
c0016409:	57                   	push   edi
c001640a:	56                   	push   esi
c001640b:	52                   	push   edx
c001640c:	50                   	push   eax
c001640d:	e8 02 03 01 00       	call   c0026714 <__udivdi3>
c0016412:	83 c4 10             	add    esp,0x10
c0016415:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016419:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001641d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016421:	84 c9                	test   cl,cl
c0016423:	74 53                	je     c0016478 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016425:	0f b6 c9             	movzx  ecx,cl
c0016428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001642c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016430:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016434:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016438:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001643c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016440:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016444:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016448:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001644c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016450:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016454:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016458:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c001645c:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016460:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016464:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016468:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001646c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016470:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016474:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016478:	31 ed                	xor    ebp,ebp
c001647a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001647e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016482:	89 f8                	mov    eax,edi
c0016484:	09 f0                	or     eax,esi
c0016486:	74 1e                	je     c00164a6 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016488:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001648c:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016490:	89 d1                	mov    ecx,edx
c0016492:	09 c1                	or     ecx,eax
c0016494:	74 10                	je     c00164a6 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016496:	83 ec 0c             	sub    esp,0xc
c0016499:	57                   	push   edi
c001649a:	56                   	push   esi
c001649b:	52                   	push   edx
c001649c:	50                   	push   eax
c001649d:	53                   	push   ebx
c001649e:	e8 db fc ff ff       	call   c001617e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00164a3:	83 c4 20             	add    esp,0x20
c00164a6:	45                   	inc    ebp
c00164a7:	83 fd 04             	cmp    ebp,0x4
c00164aa:	75 ce                	jne    c001647a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00164ac:	81 c4 5c 02 00 00    	add    esp,0x25c
c00164b2:	5b                   	pop    ebx
c00164b3:	5e                   	pop    esi
c00164b4:	5f                   	pop    edi
c00164b5:	5d                   	pop    ebp
c00164b6:	c3                   	ret    
c00164b7:	90                   	nop

c00164b8 <Serial::Serial(char const*)>:
c00164b8:	83 ec 0c             	sub    esp,0xc
c00164bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164bf:	83 ec 08             	sub    esp,0x8
c00164c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164c6:	50                   	push   eax
c00164c7:	e8 3e d8 ff ff       	call   c0013d0a <Device::Device(char const*)>
c00164cc:	83 c4 10             	add    esp,0x10
c00164cf:	ba 98 af 02 c0       	mov    edx,0xc002af98
c00164d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164d8:	89 10                	mov    DWORD PTR [eax],edx
c00164da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164de:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00164e8:	90                   	nop
c00164e9:	83 c4 0c             	add    esp,0xc
c00164ec:	c3                   	ret    
c00164ed:	90                   	nop

c00164ee <Serial::~Serial()>:
c00164ee:	83 ec 0c             	sub    esp,0xc
c00164f1:	ba 98 af 02 c0       	mov    edx,0xc002af98
c00164f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164fa:	89 10                	mov    DWORD PTR [eax],edx
c00164fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016500:	83 ec 0c             	sub    esp,0xc
c0016503:	50                   	push   eax
c0016504:	e8 cb d4 ff ff       	call   c00139d4 <Device::~Device()>
c0016509:	83 c4 10             	add    esp,0x10
c001650c:	90                   	nop
c001650d:	83 c4 0c             	add    esp,0xc
c0016510:	c3                   	ret    
c0016511:	90                   	nop

c0016512 <Serial::~Serial()>:
c0016512:	83 ec 0c             	sub    esp,0xc
c0016515:	83 ec 0c             	sub    esp,0xc
c0016518:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001651c:	e8 cd ff ff ff       	call   c00164ee <Serial::~Serial()>
c0016521:	83 c4 10             	add    esp,0x10
c0016524:	83 ec 08             	sub    esp,0x8
c0016527:	68 58 01 00 00       	push   0x158
c001652c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016530:	e8 c0 c0 ff ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c0016535:	83 c4 10             	add    esp,0x10
c0016538:	83 c4 0c             	add    esp,0xc
c001653b:	c3                   	ret    

c001653c <Timer::Timer(char const*)>:
c001653c:	83 ec 0c             	sub    esp,0xc
c001653f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016543:	83 ec 08             	sub    esp,0x8
c0016546:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001654a:	50                   	push   eax
c001654b:	e8 ba d7 ff ff       	call   c0013d0a <Device::Device(char const*)>
c0016550:	83 c4 10             	add    esp,0x10
c0016553:	ba dc af 02 c0       	mov    edx,0xc002afdc
c0016558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001655c:	89 10                	mov    DWORD PTR [eax],edx
c001655e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016562:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c001656c:	90                   	nop
c001656d:	83 c4 0c             	add    esp,0xc
c0016570:	c3                   	ret    
c0016571:	90                   	nop

c0016572 <Timer::~Timer()>:
c0016572:	83 ec 0c             	sub    esp,0xc
c0016575:	ba dc af 02 c0       	mov    edx,0xc002afdc
c001657a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001657e:	89 10                	mov    DWORD PTR [eax],edx
c0016580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016584:	83 ec 0c             	sub    esp,0xc
c0016587:	50                   	push   eax
c0016588:	e8 47 d4 ff ff       	call   c00139d4 <Device::~Device()>
c001658d:	83 c4 10             	add    esp,0x10
c0016590:	90                   	nop
c0016591:	83 c4 0c             	add    esp,0xc
c0016594:	c3                   	ret    
c0016595:	90                   	nop

c0016596 <Timer::~Timer()>:
c0016596:	83 ec 0c             	sub    esp,0xc
c0016599:	83 ec 0c             	sub    esp,0xc
c001659c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165a0:	e8 cd ff ff ff       	call   c0016572 <Timer::~Timer()>
c00165a5:	83 c4 10             	add    esp,0x10
c00165a8:	83 ec 08             	sub    esp,0x8
c00165ab:	68 5c 01 00 00       	push   0x15c
c00165b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165b4:	e8 3c c0 ff ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c00165b9:	83 c4 10             	add    esp,0x10
c00165bc:	83 c4 0c             	add    esp,0xc
c00165bf:	c3                   	ret    

c00165c0 <Timer::read()>:
c00165c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00165c4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00165ca:	c3                   	ret    

c00165cb <timerHandler(unsigned long long)>:
c00165cb:	55                   	push   ebp
c00165cc:	57                   	push   edi
c00165cd:	56                   	push   esi
c00165ce:	53                   	push   ebx
c00165cf:	83 ec 0c             	sub    esp,0xc
c00165d2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00165d6:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00165da:	01 35 90 df 02 c0    	add    DWORD PTR ds:0xc002df90,esi
c00165e0:	11 3d 94 df 02 c0    	adc    DWORD PTR ds:0xc002df94,edi
c00165e6:	80 3d 2d d9 02 c0 00 	cmp    BYTE PTR ds:0xc002d92d,0x0
c00165ed:	0f 84 42 01 00 00    	je     c0016735 <timerHandler(unsigned long long)+0x16a>
c00165f3:	fa                   	cli    
c00165f4:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c00165fa:	83 ec 0c             	sub    esp,0xc
c00165fd:	ff 05 44 0e 03 c0    	inc    DWORD PTR ds:0xc0030e44
c0016603:	68 58 0e 03 c0       	push   0xc0030e58
c0016608:	e8 61 21 01 00       	call   c002876e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001660d:	83 c4 10             	add    esp,0x10
c0016610:	84 c0                	test   al,al
c0016612:	0f 85 a2 00 00 00    	jne    c00166ba <timerHandler(unsigned long long)+0xef>
c0016618:	83 ec 0c             	sub    esp,0xc
c001661b:	68 58 0e 03 c0       	push   0xc0030e58
c0016620:	e8 65 21 01 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016625:	83 c4 10             	add    esp,0x10
c0016628:	89 c3                	mov    ebx,eax
c001662a:	83 ec 0c             	sub    esp,0xc
c001662d:	68 58 0e 03 c0       	push   0xc0030e58
c0016632:	e8 53 21 01 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016637:	c7 04 24 58 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e58
c001663e:	89 c5                	mov    ebp,eax
c0016640:	e8 4d 21 01 00       	call   c0028792 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016645:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016648:	83 c4 10             	add    esp,0x10
c001664b:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c001664e:	39 15 90 df 02 c0    	cmp    DWORD PTR ds:0xc002df90,edx
c0016654:	a1 94 df 02 c0       	mov    eax,ds:0xc002df94
c0016659:	19 c8                	sbb    eax,ecx
c001665b:	72 21                	jb     c001667e <timerHandler(unsigned long long)+0xb3>
c001665d:	83 ec 0c             	sub    esp,0xc
c0016660:	55                   	push   ebp
c0016661:	e8 e0 77 00 00       	call   c001de46 <unblockTask(ThreadControlBlock*)>
c0016666:	83 c4 10             	add    esp,0x10
c0016669:	39 eb                	cmp    ebx,ebp
c001666b:	75 21                	jne    c001668e <timerHandler(unsigned long long)+0xc3>
c001666d:	83 ec 0c             	sub    esp,0xc
c0016670:	68 58 0e 03 c0       	push   0xc0030e58
c0016675:	e8 10 21 01 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001667a:	89 c3                	mov    ebx,eax
c001667c:	eb 0d                	jmp    c001668b <timerHandler(unsigned long long)+0xc0>
c001667e:	50                   	push   eax
c001667f:	50                   	push   eax
c0016680:	55                   	push   ebp
c0016681:	68 58 0e 03 c0       	push   0xc0030e58
c0016686:	e8 b5 21 01 00       	call   c0028840 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001668b:	83 c4 10             	add    esp,0x10
c001668e:	83 ec 0c             	sub    esp,0xc
c0016691:	68 58 0e 03 c0       	push   0xc0030e58
c0016696:	e8 d3 20 01 00       	call   c002876e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001669b:	83 c4 10             	add    esp,0x10
c001669e:	84 c0                	test   al,al
c00166a0:	75 18                	jne    c00166ba <timerHandler(unsigned long long)+0xef>
c00166a2:	83 ec 0c             	sub    esp,0xc
c00166a5:	68 58 0e 03 c0       	push   0xc0030e58
c00166aa:	e8 db 20 01 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166af:	83 c4 10             	add    esp,0x10
c00166b2:	39 d8                	cmp    eax,ebx
c00166b4:	0f 85 70 ff ff ff    	jne    c001662a <timerHandler(unsigned long long)+0x5f>
c00166ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166bf:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c00166c3:	74 3d                	je     c0016702 <timerHandler(unsigned long long)+0x137>
c00166c5:	80 3d 2c d9 02 c0 00 	cmp    BYTE PTR ds:0xc002d92c,0x0
c00166cc:	74 34                	je     c0016702 <timerHandler(unsigned long long)+0x137>
c00166ce:	fa                   	cli    
c00166cf:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c00166d5:	31 d2                	xor    edx,edx
c00166d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166dc:	89 f9                	mov    ecx,edi
c00166de:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00166e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166e6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00166e9:	39 c6                	cmp    esi,eax
c00166eb:	19 d1                	sbb    ecx,edx
c00166ed:	72 05                	jb     c00166f4 <timerHandler(unsigned long long)+0x129>
c00166ef:	e8 cf 72 00 00       	call   c001d9c3 <schedule()>
c00166f4:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c00166f9:	48                   	dec    eax
c00166fa:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c00166ff:	75 01                	jne    c0016702 <timerHandler(unsigned long long)+0x137>
c0016701:	fb                   	sti    
c0016702:	a1 44 0e 03 c0       	mov    eax,ds:0xc0030e44
c0016707:	48                   	dec    eax
c0016708:	a3 44 0e 03 c0       	mov    ds:0xc0030e44,eax
c001670d:	75 18                	jne    c0016727 <timerHandler(unsigned long long)+0x15c>
c001670f:	83 3d 40 0e 03 c0 00 	cmp    DWORD PTR ds:0xc0030e40,0x0
c0016716:	74 0f                	je     c0016727 <timerHandler(unsigned long long)+0x15c>
c0016718:	c7 05 40 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e40,0x0
c0016722:	e8 9c 72 00 00       	call   c001d9c3 <schedule()>
c0016727:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001672c:	48                   	dec    eax
c001672d:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c0016732:	75 01                	jne    c0016735 <timerHandler(unsigned long long)+0x16a>
c0016734:	fb                   	sti    
c0016735:	83 c4 0c             	add    esp,0xc
c0016738:	5b                   	pop    ebx
c0016739:	5e                   	pop    esi
c001673a:	5f                   	pop    edi
c001673b:	5d                   	pop    ebp
c001673c:	c3                   	ret    

c001673d <setupTimer(int)>:
c001673d:	57                   	push   edi
c001673e:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0016743:	56                   	push   esi
c0016744:	53                   	push   ebx
c0016745:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016749:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001674f:	83 ec 0c             	sub    esp,0xc
c0016752:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016758:	e8 a9 d6 ff ff       	call   c0013e06 <Device::getName()>
c001675d:	83 c4 10             	add    esp,0x10
c0016760:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016763:	0f 85 8d 00 00 00    	jne    c00167f6 <setupTimer(int)+0xb9>
c0016769:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c001676e:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016775:	74 7f                	je     c00167f6 <setupTimer(int)+0xb9>
c0016777:	83 ec 0c             	sub    esp,0xc
c001677a:	68 5c 01 00 00       	push   0x15c
c001677f:	e8 15 8e ff ff       	call   c000f599 <malloc>
c0016784:	89 04 24             	mov    DWORD PTR [esp],eax
c0016787:	89 c3                	mov    ebx,eax
c0016789:	e8 54 fb 00 00       	call   c00262e2 <PIT::PIT()>
c001678e:	59                   	pop    ecx
c001678f:	5f                   	pop    edi
c0016790:	53                   	push   ebx
c0016791:	ff 35 28 d9 02 c0    	push   DWORD PTR ds:0xc002d928
c0016797:	e8 6a d3 ff ff       	call   c0013b06 <Device::addChild(Device*)>
c001679c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001679e:	6a 00                	push   0x0
c00167a0:	6a 00                	push   0x0
c00167a2:	56                   	push   esi
c00167a3:	53                   	push   ebx
c00167a4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00167a7:	83 c4 14             	add    esp,0x14
c00167aa:	68 60 01 00 00       	push   0x160
c00167af:	e8 e5 8d ff ff       	call   c000f599 <malloc>
c00167b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00167b7:	89 c7                	mov    edi,eax
c00167b9:	e8 d4 f9 00 00       	call   c0026192 <APICTimer::APICTimer()>
c00167be:	6a 00                	push   0x0
c00167c0:	6a 00                	push   0x0
c00167c2:	56                   	push   esi
c00167c3:	57                   	push   edi
c00167c4:	e8 cb f8 00 00       	call   c0026094 <APICTimer::open(int, int, void*)>
c00167c9:	83 c4 20             	add    esp,0x20
c00167cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00167ce:	6a 00                	push   0x0
c00167d0:	6a 00                	push   0x0
c00167d2:	6a 00                	push   0x0
c00167d4:	53                   	push   ebx
c00167d5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00167d8:	58                   	pop    eax
c00167d9:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c00167de:	5a                   	pop    edx
c00167df:	57                   	push   edi
c00167e0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00167e6:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00167ec:	e8 15 d3 ff ff       	call   c0013b06 <Device::addChild(Device*)>
c00167f1:	83 c4 10             	add    esp,0x10
c00167f4:	eb 33                	jmp    c0016829 <setupTimer(int)+0xec>
c00167f6:	83 ec 0c             	sub    esp,0xc
c00167f9:	68 5c 01 00 00       	push   0x15c
c00167fe:	e8 96 8d ff ff       	call   c000f599 <malloc>
c0016803:	89 04 24             	mov    DWORD PTR [esp],eax
c0016806:	89 c3                	mov    ebx,eax
c0016808:	e8 d5 fa 00 00       	call   c00262e2 <PIT::PIT()>
c001680d:	58                   	pop    eax
c001680e:	5a                   	pop    edx
c001680f:	53                   	push   ebx
c0016810:	ff 35 28 d9 02 c0    	push   DWORD PTR ds:0xc002d928
c0016816:	e8 eb d2 ff ff       	call   c0013b06 <Device::addChild(Device*)>
c001681b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001681d:	6a 00                	push   0x0
c001681f:	6a 00                	push   0x0
c0016821:	56                   	push   esi
c0016822:	53                   	push   ebx
c0016823:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016826:	83 c4 20             	add    esp,0x20
c0016829:	89 d8                	mov    eax,ebx
c001682b:	5b                   	pop    ebx
c001682c:	5e                   	pop    esi
c001682d:	5f                   	pop    edi
c001682e:	c3                   	ret    
c001682f:	90                   	nop

c0016830 <VCache::VCache(PhysicalDisk*)>:
c0016830:	53                   	push   ebx
c0016831:	83 ec 18             	sub    esp,0x18
c0016834:	ba 0c b0 02 c0       	mov    edx,0xc002b00c
c0016839:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001683d:	89 10                	mov    DWORD PTR [eax],edx
c001683f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016843:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001684a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001684e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016855:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016859:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016860:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016867:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001686b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016872:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016879:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001687d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016884:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016888:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001688c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016890:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016897:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001689e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168a2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00168a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168aa:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c00168ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168b2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00168b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168ba:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00168c1:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00168c9:	83 ec 0c             	sub    esp,0xc
c00168cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00168d0:	e8 c4 8c ff ff       	call   c000f599 <malloc>
c00168d5:	83 c4 10             	add    esp,0x10
c00168d8:	89 c3                	mov    ebx,eax
c00168da:	83 ec 0c             	sub    esp,0xc
c00168dd:	53                   	push   ebx
c00168de:	e8 a9 6e 00 00       	call   c001d78c <Mutex::Mutex()>
c00168e3:	83 c4 10             	add    esp,0x10
c00168e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168ea:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00168ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168f1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00168f5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00168f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168fc:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016903:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016907:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001690d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016911:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016914:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016918:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001691e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016924:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016928:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001692b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001692e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016932:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016936:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001693a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016940:	05 00 01 00 00       	add    eax,0x100
c0016945:	c1 e0 04             	shl    eax,0x4
c0016948:	83 ec 0c             	sub    esp,0xc
c001694b:	50                   	push   eax
c001694c:	e8 48 8c ff ff       	call   c000f599 <malloc>
c0016951:	83 c4 10             	add    esp,0x10
c0016954:	89 c2                	mov    edx,eax
c0016956:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001695a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001695d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016961:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016968:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001696c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016970:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016974:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001697a:	c1 e0 07             	shl    eax,0x7
c001697d:	83 ec 0c             	sub    esp,0xc
c0016980:	50                   	push   eax
c0016981:	e8 13 8c ff ff       	call   c000f599 <malloc>
c0016986:	83 c4 10             	add    esp,0x10
c0016989:	89 c2                	mov    edx,eax
c001698b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001698f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016992:	90                   	nop
c0016993:	83 c4 18             	add    esp,0x18
c0016996:	5b                   	pop    ebx
c0016997:	c3                   	ret    

c0016998 <VCache::invalidateReadBuffer()>:
c0016998:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001699c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00169a2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00169a6:	c3                   	ret    
c00169a7:	90                   	nop

c00169a8 <VCache::writeWriteBuffer()>:
c00169a8:	53                   	push   ebx
c00169a9:	83 ec 14             	sub    esp,0x14
c00169ac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00169b0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00169b3:	8b 10                	mov    edx,DWORD PTR [eax]
c00169b5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00169b8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00169bb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00169be:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00169c1:	50                   	push   eax
c00169c2:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00169c5:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00169cc:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00169d3:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00169d7:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00169de:	83 c4 28             	add    esp,0x28
c00169e1:	5b                   	pop    ebx
c00169e2:	c3                   	ret    
c00169e3:	90                   	nop

c00169e4 <VCache::~VCache()>:
c00169e4:	83 ec 0c             	sub    esp,0xc
c00169e7:	ba 0c b0 02 c0       	mov    edx,0xc002b00c
c00169ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169f0:	89 10                	mov    DWORD PTR [eax],edx
c00169f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169f6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00169f9:	84 c0                	test   al,al
c00169fb:	74 0f                	je     c0016a0c <VCache::~VCache()+0x28>
c00169fd:	83 ec 0c             	sub    esp,0xc
c0016a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a04:	e8 9f ff ff ff       	call   c00169a8 <VCache::writeWriteBuffer()>
c0016a09:	83 c4 10             	add    esp,0x10
c0016a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a10:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016a13:	83 ec 0c             	sub    esp,0xc
c0016a16:	50                   	push   eax
c0016a17:	e8 8d 8b ff ff       	call   c000f5a9 <free>
c0016a1c:	83 c4 10             	add    esp,0x10
c0016a1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a23:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016a26:	83 ec 0c             	sub    esp,0xc
c0016a29:	50                   	push   eax
c0016a2a:	e8 7a 8b ff ff       	call   c000f5a9 <free>
c0016a2f:	83 c4 10             	add    esp,0x10
c0016a32:	90                   	nop
c0016a33:	83 c4 0c             	add    esp,0xc
c0016a36:	c3                   	ret    
c0016a37:	90                   	nop

c0016a38 <VCache::~VCache()>:
c0016a38:	83 ec 0c             	sub    esp,0xc
c0016a3b:	83 ec 0c             	sub    esp,0xc
c0016a3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a42:	e8 9d ff ff ff       	call   c00169e4 <VCache::~VCache()>
c0016a47:	83 c4 10             	add    esp,0x10
c0016a4a:	83 ec 08             	sub    esp,0x8
c0016a4d:	6a 44                	push   0x44
c0016a4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a53:	e8 9d bb ff ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c0016a58:	83 c4 10             	add    esp,0x10
c0016a5b:	83 c4 0c             	add    esp,0xc
c0016a5e:	c3                   	ret    
c0016a5f:	90                   	nop

c0016a60 <VCache::write(unsigned long long, int, void*)>:
c0016a60:	55                   	push   ebp
c0016a61:	57                   	push   edi
c0016a62:	56                   	push   esi
c0016a63:	53                   	push   ebx
c0016a64:	83 ec 18             	sub    esp,0x18
c0016a67:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016a6b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016a6f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016a73:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016a76:	e8 57 72 00 00       	call   c001dcd2 <Semaphore::acquire()>
c0016a7b:	83 c4 10             	add    esp,0x10
c0016a7e:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016a82:	74 0c                	je     c0016a90 <VCache::write(unsigned long long, int, void*)+0x30>
c0016a84:	83 ec 0c             	sub    esp,0xc
c0016a87:	53                   	push   ebx
c0016a88:	e8 0b ff ff ff       	call   c0016998 <VCache::invalidateReadBuffer()>
c0016a8d:	83 c4 10             	add    esp,0x10
c0016a90:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016a94:	74 5c                	je     c0016af2 <VCache::write(unsigned long long, int, void*)+0x92>
c0016a96:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0016a99:	89 e8                	mov    eax,ebp
c0016a9b:	99                   	cdq    
c0016a9c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016a9f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016aa2:	89 c1                	mov    ecx,eax
c0016aa4:	89 d0                	mov    eax,edx
c0016aa6:	31 f1                	xor    ecx,esi
c0016aa8:	31 f8                	xor    eax,edi
c0016aaa:	09 c1                	or     ecx,eax
c0016aac:	75 38                	jne    c0016ae6 <VCache::write(unsigned long long, int, void*)+0x86>
c0016aae:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0016ab3:	75 31                	jne    c0016ae6 <VCache::write(unsigned long long, int, void*)+0x86>
c0016ab5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ab8:	89 ef                	mov    edi,ebp
c0016aba:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016ac0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016ac4:	0f af f9             	imul   edi,ecx
c0016ac7:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016aca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016acc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016acf:	40                   	inc    eax
c0016ad0:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016ad3:	83 c0 80             	add    eax,0xffffff80
c0016ad6:	75 5c                	jne    c0016b34 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016ad8:	83 ec 0c             	sub    esp,0xc
c0016adb:	53                   	push   ebx
c0016adc:	e8 c7 fe ff ff       	call   c00169a8 <VCache::writeWriteBuffer()>
c0016ae1:	83 c4 10             	add    esp,0x10
c0016ae4:	eb 4e                	jmp    c0016b34 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016ae6:	83 ec 0c             	sub    esp,0xc
c0016ae9:	53                   	push   ebx
c0016aea:	e8 b9 fe ff ff       	call   c00169a8 <VCache::writeWriteBuffer()>
c0016aef:	83 c4 10             	add    esp,0x10
c0016af2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016af5:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0016afa:	7f 22                	jg     c0016b1e <VCache::write(unsigned long long, int, void*)+0xbe>
c0016afc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016aff:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016b02:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016b06:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016b0a:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0016b0d:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016b10:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016b16:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b1a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016b1c:	eb 16                	jmp    c0016b34 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016b1e:	83 ec 0c             	sub    esp,0xc
c0016b21:	8b 10                	mov    edx,DWORD PTR [eax]
c0016b23:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016b27:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016b2b:	57                   	push   edi
c0016b2c:	56                   	push   esi
c0016b2d:	50                   	push   eax
c0016b2e:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016b31:	83 c4 20             	add    esp,0x20
c0016b34:	83 ec 0c             	sub    esp,0xc
c0016b37:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016b3a:	e8 ef 77 00 00       	call   c001e32e <Semaphore::release()>
c0016b3f:	83 c4 1c             	add    esp,0x1c
c0016b42:	31 c0                	xor    eax,eax
c0016b44:	5b                   	pop    ebx
c0016b45:	5e                   	pop    esi
c0016b46:	5f                   	pop    edi
c0016b47:	5d                   	pop    ebp
c0016b48:	c3                   	ret    
c0016b49:	90                   	nop

c0016b4a <VCache::read(unsigned long long, int, void*)>:
c0016b4a:	55                   	push   ebp
c0016b4b:	57                   	push   edi
c0016b4c:	56                   	push   esi
c0016b4d:	53                   	push   ebx
c0016b4e:	83 ec 28             	sub    esp,0x28
c0016b51:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016b55:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016b59:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016b5d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016b61:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016b64:	e8 69 71 00 00       	call   c001dcd2 <Semaphore::acquire()>
c0016b69:	83 c4 10             	add    esp,0x10
c0016b6c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016b70:	74 0c                	je     c0016b7e <VCache::read(unsigned long long, int, void*)+0x34>
c0016b72:	83 ec 0c             	sub    esp,0xc
c0016b75:	53                   	push   ebx
c0016b76:	e8 2d fe ff ff       	call   c00169a8 <VCache::writeWriteBuffer()>
c0016b7b:	83 c4 10             	add    esp,0x10
c0016b7e:	83 fd 01             	cmp    ebp,0x1
c0016b81:	0f 85 80 00 00 00    	jne    c0016c07 <VCache::read(unsigned long long, int, void*)+0xbd>
c0016b87:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b8a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016b8e:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016b95:	75 70                	jne    c0016c07 <VCache::read(unsigned long long, int, void*)+0xbd>
c0016b97:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0016b9a:	89 e9                	mov    ecx,ebp
c0016b9c:	f7 d9                	neg    ecx
c0016b9e:	89 c8                	mov    eax,ecx
c0016ba0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016ba4:	c1 f8 1f             	sar    eax,0x1f
c0016ba7:	21 f1                	and    ecx,esi
c0016ba9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016bad:	89 c8                	mov    eax,ecx
c0016baf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016bb3:	21 f9                	and    ecx,edi
c0016bb5:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016bb9:	89 ca                	mov    edx,ecx
c0016bbb:	74 0a                	je     c0016bc7 <VCache::read(unsigned long long, int, void*)+0x7d>
c0016bbd:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016bc0:	75 05                	jne    c0016bc7 <VCache::read(unsigned long long, int, void*)+0x7d>
c0016bc2:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0016bc5:	74 23                	je     c0016bea <VCache::read(unsigned long long, int, void*)+0xa0>
c0016bc7:	83 ec 0c             	sub    esp,0xc
c0016bca:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016bce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016bd2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0016bd5:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0016bd8:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016bda:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016bdd:	55                   	push   ebp
c0016bde:	52                   	push   edx
c0016bdf:	50                   	push   eax
c0016be0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016be4:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016be7:	83 c4 20             	add    esp,0x20
c0016bea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016bed:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016bf1:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016bf7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016bfa:	48                   	dec    eax
c0016bfb:	21 c6                	and    esi,eax
c0016bfd:	0f af f1             	imul   esi,ecx
c0016c00:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016c03:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016c05:	eb 1d                	jmp    c0016c24 <VCache::read(unsigned long long, int, void*)+0xda>
c0016c07:	83 ec 0c             	sub    esp,0xc
c0016c0a:	53                   	push   ebx
c0016c0b:	e8 88 fd ff ff       	call   c0016998 <VCache::invalidateReadBuffer()>
c0016c10:	5a                   	pop    edx
c0016c11:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c14:	8b 10                	mov    edx,DWORD PTR [eax]
c0016c16:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016c1a:	55                   	push   ebp
c0016c1b:	57                   	push   edi
c0016c1c:	56                   	push   esi
c0016c1d:	50                   	push   eax
c0016c1e:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016c21:	83 c4 20             	add    esp,0x20
c0016c24:	83 ec 0c             	sub    esp,0xc
c0016c27:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016c2a:	e8 ff 76 00 00       	call   c001e32e <Semaphore::release()>
c0016c2f:	83 c4 2c             	add    esp,0x2c
c0016c32:	31 c0                	xor    eax,eax
c0016c34:	5b                   	pop    ebx
c0016c35:	5e                   	pop    esi
c0016c36:	5f                   	pop    edi
c0016c37:	5d                   	pop    ebp
c0016c38:	c3                   	ret    
c0016c39:	90                   	nop

c0016c3a <Video::putrect(int, int, int, int, unsigned int)>:
c0016c3a:	55                   	push   ebp
c0016c3b:	57                   	push   edi
c0016c3c:	56                   	push   esi
c0016c3d:	53                   	push   ebx
c0016c3e:	83 ec 1c             	sub    esp,0x1c
c0016c41:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016c45:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016c49:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016c4d:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016c51:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c59:	01 df                	add    edi,ebx
c0016c5b:	39 fb                	cmp    ebx,edi
c0016c5d:	7d 1f                	jge    c0016c7e <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016c5f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016c63:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016c67:	7d 12                	jge    c0016c7b <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016c69:	8b 16                	mov    edx,DWORD PTR [esi]
c0016c6b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016c6f:	53                   	push   ebx
c0016c70:	55                   	push   ebp
c0016c71:	45                   	inc    ebp
c0016c72:	56                   	push   esi
c0016c73:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016c76:	83 c4 10             	add    esp,0x10
c0016c79:	eb e8                	jmp    c0016c63 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016c7b:	43                   	inc    ebx
c0016c7c:	eb dd                	jmp    c0016c5b <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016c7e:	83 c4 1c             	add    esp,0x1c
c0016c81:	5b                   	pop    ebx
c0016c82:	5e                   	pop    esi
c0016c83:	5f                   	pop    edi
c0016c84:	5d                   	pop    ebp
c0016c85:	c3                   	ret    

c0016c86 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016c86:	55                   	push   ebp
c0016c87:	57                   	push   edi
c0016c88:	31 ff                	xor    edi,edi
c0016c8a:	56                   	push   esi
c0016c8b:	53                   	push   ebx
c0016c8c:	83 ec 1c             	sub    esp,0x1c
c0016c8f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016c93:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016c97:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016c9e:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016ca3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ca7:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016cab:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016caf:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016cb2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016cb6:	01 f9                	add    ecx,edi
c0016cb8:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016cbc:	7d 2f                	jge    c0016ced <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016cbe:	31 f6                	xor    esi,esi
c0016cc0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016cc4:	01 f2                	add    edx,esi
c0016cc6:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016cca:	7d 1a                	jge    c0016ce6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016ccc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016ccf:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016cd2:	46                   	inc    esi
c0016cd3:	51                   	push   ecx
c0016cd4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016cd8:	52                   	push   edx
c0016cd9:	55                   	push   ebp
c0016cda:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016cdd:	83 c4 10             	add    esp,0x10
c0016ce0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016ce4:	eb da                	jmp    c0016cc0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016ce6:	47                   	inc    edi
c0016ce7:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016ceb:	eb c5                	jmp    c0016cb2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016ced:	83 c4 1c             	add    esp,0x1c
c0016cf0:	5b                   	pop    ebx
c0016cf1:	5e                   	pop    esi
c0016cf2:	5f                   	pop    edi
c0016cf3:	5d                   	pop    ebp
c0016cf4:	c3                   	ret    
c0016cf5:	90                   	nop

c0016cf6 <Video::blit(unsigned int*, int, int, int, int)>:
c0016cf6:	55                   	push   ebp
c0016cf7:	57                   	push   edi
c0016cf8:	56                   	push   esi
c0016cf9:	53                   	push   ebx
c0016cfa:	83 ec 1c             	sub    esp,0x1c
c0016cfd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016d01:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016d05:	85 c0                	test   eax,eax
c0016d07:	79 02                	jns    c0016d0b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016d09:	31 c0                	xor    eax,eax
c0016d0b:	c1 e0 02             	shl    eax,0x2
c0016d0e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016d12:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d16:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016d1a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016d1e:	39 d8                	cmp    eax,ebx
c0016d20:	7e 49                	jle    c0016d6b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016d22:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016d28:	7c 41                	jl     c0016d6b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016d2a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016d2e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016d32:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016d36:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016d3a:	39 f9                	cmp    ecx,edi
c0016d3c:	7e 22                	jle    c0016d60 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016d3e:	83 c5 04             	add    ebp,0x4
c0016d41:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016d47:	7c 14                	jl     c0016d5d <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016d49:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016d4b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016d4e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016d52:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016d56:	56                   	push   esi
c0016d57:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016d5a:	83 c4 10             	add    esp,0x10
c0016d5d:	47                   	inc    edi
c0016d5e:	eb d2                	jmp    c0016d32 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d64:	43                   	inc    ebx
c0016d65:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016d69:	eb ab                	jmp    c0016d16 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016d6b:	83 c4 1c             	add    esp,0x1c
c0016d6e:	5b                   	pop    ebx
c0016d6f:	5e                   	pop    esi
c0016d70:	5f                   	pop    edi
c0016d71:	5d                   	pop    ebp
c0016d72:	c3                   	ret    
c0016d73:	90                   	nop

c0016d74 <Video::clearScreen(unsigned int)>:
c0016d74:	57                   	push   edi
c0016d75:	56                   	push   esi
c0016d76:	53                   	push   ebx
c0016d77:	31 db                	xor    ebx,ebx
c0016d79:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016d7d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016d83:	7e 1f                	jle    c0016da4 <Video::clearScreen(unsigned int)+0x30>
c0016d85:	31 ff                	xor    edi,edi
c0016d87:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016d8d:	7e 12                	jle    c0016da1 <Video::clearScreen(unsigned int)+0x2d>
c0016d8f:	8b 06                	mov    eax,DWORD PTR [esi]
c0016d91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016d95:	53                   	push   ebx
c0016d96:	57                   	push   edi
c0016d97:	47                   	inc    edi
c0016d98:	56                   	push   esi
c0016d99:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016d9c:	83 c4 10             	add    esp,0x10
c0016d9f:	eb e6                	jmp    c0016d87 <Video::clearScreen(unsigned int)+0x13>
c0016da1:	43                   	inc    ebx
c0016da2:	eb d9                	jmp    c0016d7d <Video::clearScreen(unsigned int)+0x9>
c0016da4:	5b                   	pop    ebx
c0016da5:	5e                   	pop    esi
c0016da6:	5f                   	pop    edi
c0016da7:	c3                   	ret    

c0016da8 <Video::putpixel(int, int, unsigned int)>:
c0016da8:	c7 44 24 04 14 b0 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b014
c0016db0:	e9 84 30 00 00       	jmp    c0019e39 <Krnl::panic(char const*)>
c0016db5:	90                   	nop

c0016db6 <Video::Video(char const*)>:
c0016db6:	83 ec 0c             	sub    esp,0xc
c0016db9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dbd:	83 ec 08             	sub    esp,0x8
c0016dc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016dc4:	50                   	push   eax
c0016dc5:	e8 40 cf ff ff       	call   c0013d0a <Device::Device(char const*)>
c0016dca:	83 c4 10             	add    esp,0x10
c0016dcd:	ba 84 b0 02 c0       	mov    edx,0xc002b084
c0016dd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dd6:	89 10                	mov    DWORD PTR [eax],edx
c0016dd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ddc:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016de6:	90                   	nop
c0016de7:	83 c4 0c             	add    esp,0xc
c0016dea:	c3                   	ret    
c0016deb:	90                   	nop

c0016dec <Video::~Video()>:
c0016dec:	83 ec 0c             	sub    esp,0xc
c0016def:	ba 84 b0 02 c0       	mov    edx,0xc002b084
c0016df4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016df8:	89 10                	mov    DWORD PTR [eax],edx
c0016dfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dfe:	83 ec 0c             	sub    esp,0xc
c0016e01:	50                   	push   eax
c0016e02:	e8 cd cb ff ff       	call   c00139d4 <Device::~Device()>
c0016e07:	83 c4 10             	add    esp,0x10
c0016e0a:	90                   	nop
c0016e0b:	83 c4 0c             	add    esp,0xc
c0016e0e:	c3                   	ret    
c0016e0f:	90                   	nop

c0016e10 <Video::~Video()>:
c0016e10:	83 ec 0c             	sub    esp,0xc
c0016e13:	83 ec 0c             	sub    esp,0xc
c0016e16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e1a:	e8 cd ff ff ff       	call   c0016dec <Video::~Video()>
c0016e1f:	83 c4 10             	add    esp,0x10
c0016e22:	83 ec 08             	sub    esp,0x8
c0016e25:	68 64 01 00 00       	push   0x164
c0016e2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e2e:	e8 c2 b7 ff ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c0016e33:	83 c4 10             	add    esp,0x10
c0016e36:	83 c4 0c             	add    esp,0xc
c0016e39:	c3                   	ret    

c0016e3a <Video::isMonochrome()>:
c0016e3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e3e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016e44:	c3                   	ret    
c0016e45:	90                   	nop

c0016e46 <Video::getWidth()>:
c0016e46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e4a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016e50:	c3                   	ret    
c0016e51:	90                   	nop

c0016e52 <Video::getHeight()>:
c0016e52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e56:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016e5c:	c3                   	ret    
c0016e5d:	90                   	nop

c0016e5e <Video::drawCursor(int, int, unsigned char*, int)>:
c0016e5e:	55                   	push   ebp
c0016e5f:	57                   	push   edi
c0016e60:	56                   	push   esi
c0016e61:	53                   	push   ebx
c0016e62:	83 ec 2c             	sub    esp,0x2c
c0016e65:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016e69:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016e6d:	83 f8 01             	cmp    eax,0x1
c0016e70:	19 c9                	sbb    ecx,ecx
c0016e72:	31 db                	xor    ebx,ebx
c0016e74:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016e78:	89 cd                	mov    ebp,ecx
c0016e7a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016e82:	f7 d5                	not    ebp
c0016e84:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016e8a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016e8e:	01 d8                	add    eax,ebx
c0016e90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e94:	56                   	push   esi
c0016e95:	e8 b8 ff ff ff       	call   c0016e52 <Video::getHeight()>
c0016e9a:	59                   	pop    ecx
c0016e9b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016e9f:	7e 70                	jle    c0016f11 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016ea1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016ea5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016ea9:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016eac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016eb0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016eb4:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016ebb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016ebf:	89 f8                	mov    eax,edi
c0016ec1:	83 c0 20             	add    eax,0x20
c0016ec4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016ec8:	56                   	push   esi
c0016ec9:	e8 78 ff ff ff       	call   c0016e46 <Video::getWidth()>
c0016ece:	5a                   	pop    edx
c0016ecf:	39 c7                	cmp    edi,eax
c0016ed1:	7d 34                	jge    c0016f07 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016ed3:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016ed8:	74 05                	je     c0016edf <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016eda:	8b 06                	mov    eax,DWORD PTR [esi]
c0016edc:	55                   	push   ebp
c0016edd:	eb 0d                	jmp    c0016eec <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016edf:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016ee4:	74 12                	je     c0016ef8 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016ee6:	8b 06                	mov    eax,DWORD PTR [esi]
c0016ee8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016eec:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016ef0:	57                   	push   edi
c0016ef1:	56                   	push   esi
c0016ef2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016ef5:	83 c4 10             	add    esp,0x10
c0016ef8:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016efc:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016f00:	47                   	inc    edi
c0016f01:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016f05:	75 c1                	jne    c0016ec8 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016f07:	43                   	inc    ebx
c0016f08:	83 fb 20             	cmp    ebx,0x20
c0016f0b:	0f 85 79 ff ff ff    	jne    c0016e8a <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016f11:	83 c4 2c             	add    esp,0x2c
c0016f14:	5b                   	pop    ebx
c0016f15:	5e                   	pop    esi
c0016f16:	5f                   	pop    edi
c0016f17:	5d                   	pop    ebp
c0016f18:	c3                   	ret    
c0016f19:	90                   	nop

c0016f1a <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016f1a:	55                   	push   ebp
c0016f1b:	57                   	push   edi
c0016f1c:	56                   	push   esi
c0016f1d:	53                   	push   ebx
c0016f1e:	83 ec 28             	sub    esp,0x28
c0016f21:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016f25:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016f29:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0016f2d:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016f31:	c1 e6 08             	shl    esi,0x8
c0016f34:	01 c6                	add    esi,eax
c0016f36:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016f3a:	c1 e0 08             	shl    eax,0x8
c0016f3d:	01 d0                	add    eax,edx
c0016f3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f47:	0f af c6             	imul   eax,esi
c0016f4a:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016f51:	50                   	push   eax
c0016f52:	e8 42 86 ff ff       	call   c000f599 <malloc>
c0016f57:	83 c4 10             	add    esp,0x10
c0016f5a:	89 c7                	mov    edi,eax
c0016f5c:	85 c0                	test   eax,eax
c0016f5e:	75 10                	jne    c0016f70 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0016f60:	83 ec 0c             	sub    esp,0xc
c0016f63:	68 35 b0 02 c0       	push   0xc002b035
c0016f68:	e8 cc 2e 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c0016f6d:	83 c4 10             	add    esp,0x10
c0016f70:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0016f73:	ba 12 00 00 00       	mov    edx,0x12
c0016f78:	84 c0                	test   al,al
c0016f7a:	74 11                	je     c0016f8d <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0016f7c:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0016f80:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0016f84:	c1 fa 03             	sar    edx,0x3
c0016f87:	0f af d1             	imul   edx,ecx
c0016f8a:	83 c2 12             	add    edx,0x12
c0016f8d:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016f91:	74 04                	je     c0016f97 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0016f93:	85 f6                	test   esi,esi
c0016f95:	75 12                	jne    c0016fa9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0016f97:	83 ec 0c             	sub    esp,0xc
c0016f9a:	68 45 b0 02 c0       	push   0xc002b045
c0016f9f:	e8 29 b7 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0016fa4:	e9 b8 00 00 00       	jmp    c0017061 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0016fa9:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0016fad:	80 f9 02             	cmp    cl,0x2
c0016fb0:	0f 85 96 00 00 00    	jne    c001704c <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0016fb6:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016fbb:	75 0e                	jne    c0016fcb <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016fbd:	84 c0                	test   al,al
c0016fbf:	75 0a                	jne    c0016fcb <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016fc1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016fc4:	83 e8 18             	sub    eax,0x18
c0016fc7:	a8 f7                	test   al,0xf7
c0016fc9:	74 0a                	je     c0016fd5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0016fcb:	83 ec 0c             	sub    esp,0xc
c0016fce:	68 5a b0 02 c0       	push   0xc002b05a
c0016fd3:	eb 7f                	jmp    c0017054 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0016fd5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016fdd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016fe5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0016fe9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016ff1:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016ff5:	75 0c                	jne    c0017003 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016ff7:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0016ffc:	c1 e0 18             	shl    eax,0x18
c0016fff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017003:	45                   	inc    ebp
c0017004:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0017009:	c1 e1 10             	shl    ecx,0x10
c001700c:	89 c8                	mov    eax,ecx
c001700e:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0017013:	c1 e1 08             	shl    ecx,0x8
c0017016:	09 c1                	or     ecx,eax
c0017018:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c001701c:	09 c1                	or     ecx,eax
c001701e:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0017022:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0017026:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001702a:	c1 f8 03             	sar    eax,0x3
c001702d:	01 c2                	add    edx,eax
c001702f:	89 e8                	mov    eax,ebp
c0017031:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017035:	39 c6                	cmp    esi,eax
c0017037:	7f b0                	jg     c0016fe9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0017039:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001703d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017041:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0017044:	7e 22                	jle    c0017068 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0017046:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c001704a:	eb 99                	jmp    c0016fe5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001704c:	50                   	push   eax
c001704d:	50                   	push   eax
c001704e:	51                   	push   ecx
c001704f:	68 68 b0 02 c0       	push   0xc002b068
c0017054:	e8 74 b6 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0017059:	89 3c 24             	mov    DWORD PTR [esp],edi
c001705c:	e8 48 85 ff ff       	call   c000f5a9 <free>
c0017061:	83 c4 10             	add    esp,0x10
c0017064:	31 ff                	xor    edi,edi
c0017066:	eb 0f                	jmp    c0017077 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0017068:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001706c:	89 30                	mov    DWORD PTR [eax],esi
c001706e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017072:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0017075:	89 30                	mov    DWORD PTR [eax],esi
c0017077:	83 c4 1c             	add    esp,0x1c
c001707a:	89 f8                	mov    eax,edi
c001707c:	5b                   	pop    ebx
c001707d:	5e                   	pop    esi
c001707e:	5f                   	pop    edi
c001707f:	5d                   	pop    ebp
c0017080:	c3                   	ret    
c0017081:	90                   	nop

c0017082 <Video::putTGA(int, int, unsigned char*, int)>:
c0017082:	55                   	push   ebp
c0017083:	57                   	push   edi
c0017084:	56                   	push   esi
c0017085:	53                   	push   ebx
c0017086:	83 ec 28             	sub    esp,0x28
c0017089:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001708d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017091:	50                   	push   eax
c0017092:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017096:	50                   	push   eax
c0017097:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001709b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001709f:	56                   	push   esi
c00170a0:	e8 75 fe ff ff       	call   c0016f1a <Video::tgaParse(unsigned char*, int, int*, int*)>
c00170a5:	83 c4 20             	add    esp,0x20
c00170a8:	85 c0                	test   eax,eax
c00170aa:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00170ae:	74 35                	je     c00170e5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00170b0:	89 c7                	mov    edi,eax
c00170b2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00170b6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00170ba:	39 d8                	cmp    eax,ebx
c00170bc:	7e 27                	jle    c00170e5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00170be:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00170c2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00170c6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00170ca:	39 e8                	cmp    eax,ebp
c00170cc:	7e 14                	jle    c00170e2 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00170ce:	8b 06                	mov    eax,DWORD PTR [esi]
c00170d0:	83 c7 04             	add    edi,0x4
c00170d3:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00170d6:	53                   	push   ebx
c00170d7:	55                   	push   ebp
c00170d8:	45                   	inc    ebp
c00170d9:	56                   	push   esi
c00170da:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00170dd:	83 c4 10             	add    esp,0x10
c00170e0:	eb e0                	jmp    c00170c2 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00170e2:	43                   	inc    ebx
c00170e3:	eb cd                	jmp    c00170b2 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00170e5:	83 c4 1c             	add    esp,0x1c
c00170e8:	5b                   	pop    ebx
c00170e9:	5e                   	pop    esi
c00170ea:	5f                   	pop    edi
c00170eb:	5d                   	pop    ebp
c00170ec:	c3                   	ret    
c00170ed:	90                   	nop

c00170ee <ACPI::close(int, int, void*)>:
c00170ee:	83 ec 1c             	sub    esp,0x1c
c00170f1:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00170f9:	74 0a                	je     c0017105 <ACPI::close(int, int, void*)+0x17>
c00170fb:	b8 00 00 00 00       	mov    eax,0x0
c0017100:	e9 8a 00 00 00       	jmp    c001718f <ACPI::close(int, int, void*)+0xa1>
c0017105:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001710a:	75 27                	jne    c0017133 <ACPI::close(int, int, void*)+0x45>
c001710c:	a1 c8 ff 02 c0       	mov    eax,ds:0xc002ffc8
c0017111:	85 c0                	test   eax,eax
c0017113:	74 07                	je     c001711c <ACPI::close(int, int, void*)+0x2e>
c0017115:	a1 c8 ff 02 c0       	mov    eax,ds:0xc002ffc8
c001711a:	ff d0                	call   eax
c001711c:	83 ec 0c             	sub    esp,0xc
c001711f:	68 c4 b0 02 c0       	push   0xc002b0c4
c0017124:	e8 10 2d 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c0017129:	83 c4 10             	add    esp,0x10
c001712c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017131:	eb 5c                	jmp    c001718f <ACPI::close(int, int, void*)+0xa1>
c0017133:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017138:	75 50                	jne    c001718a <ACPI::close(int, int, void*)+0x9c>
c001713a:	a1 c4 ff 02 c0       	mov    eax,ds:0xc002ffc4
c001713f:	85 c0                	test   eax,eax
c0017141:	74 07                	je     c001714a <ACPI::close(int, int, void*)+0x5c>
c0017143:	a1 c4 ff 02 c0       	mov    eax,ds:0xc002ffc4
c0017148:	ff d0                	call   eax
c001714a:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001714f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017154:	83 e0 02             	and    eax,0x2
c0017157:	74 1c                	je     c0017175 <ACPI::close(int, int, void*)+0x87>
c0017159:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017160:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017164:	89 c2                	mov    edx,eax
c0017166:	ec                   	in     al,dx
c0017167:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001716b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001716f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017173:	eb da                	jmp    c001714f <ACPI::close(int, int, void*)+0x61>
c0017175:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001717c:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017181:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017185:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017189:	ee                   	out    dx,al
c001718a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001718f:	83 c4 1c             	add    esp,0x1c
c0017192:	c3                   	ret    

c0017193 <findRSDP()>:
c0017193:	83 ec 1c             	sub    esp,0x1c
c0017196:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c001719b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00171a1:	83 e0 04             	and    eax,0x4
c00171a4:	84 c0                	test   al,al
c00171a6:	75 07                	jne    c00171af <findRSDP()+0x1c>
c00171a8:	b8 00 00 00 00       	mov    eax,0x0
c00171ad:	eb 6a                	jmp    c0017219 <findRSDP()+0x86>
c00171af:	a1 74 d9 02 c0       	mov    eax,ds:0xc002d974
c00171b4:	3d ff 07 00 00       	cmp    eax,0x7ff
c00171b9:	7f 1b                	jg     c00171d6 <findRSDP()+0x43>
c00171bb:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c00171c0:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00171c6:	83 e2 fb             	and    edx,0xfffffffb
c00171c9:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00171cf:	b8 00 00 00 00       	mov    eax,0x0
c00171d4:	eb 43                	jmp    c0017219 <findRSDP()+0x86>
c00171d6:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00171de:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00171e6:	77 2c                	ja     c0017214 <findRSDP()+0x81>
c00171e8:	83 ec 04             	sub    esp,0x4
c00171eb:	6a 08                	push   0x8
c00171ed:	68 5f b1 02 c0       	push   0xc002b15f
c00171f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00171f6:	e8 51 94 fe ff       	call   c000064c <memcmp>
c00171fb:	83 c4 10             	add    esp,0x10
c00171fe:	85 c0                	test   eax,eax
c0017200:	0f 94 c0             	sete   al
c0017203:	84 c0                	test   al,al
c0017205:	74 06                	je     c001720d <findRSDP()+0x7a>
c0017207:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001720b:	eb 0c                	jmp    c0017219 <findRSDP()+0x86>
c001720d:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017212:	eb ca                	jmp    c00171de <findRSDP()+0x4b>
c0017214:	b8 00 00 00 00       	mov    eax,0x0
c0017219:	83 c4 1c             	add    esp,0x1c
c001721c:	c3                   	ret    

c001721d <loadACPITables(unsigned char*)>:
c001721d:	57                   	push   edi
c001721e:	56                   	push   esi
c001721f:	53                   	push   ebx
c0017220:	83 ec 60             	sub    esp,0x60
c0017223:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0017228:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001722e:	83 e0 04             	and    eax,0x4
c0017231:	84 c0                	test   al,al
c0017233:	0f 84 33 02 00 00    	je     c001746c <loadACPITables(unsigned char*)+0x24f>
c0017239:	a0 e0 01 03 c0       	mov    al,ds:0xc00301e0
c001723e:	84 c0                	test   al,al
c0017240:	74 75                	je     c00172b7 <loadACPITables(unsigned char*)+0x9a>
c0017242:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017246:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001724a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001724e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017251:	83 e8 24             	sub    eax,0x24
c0017254:	c1 e8 03             	shr    eax,0x3
c0017257:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001725b:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0017263:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017267:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001726b:	0f 8d b2 00 00 00    	jge    c0017323 <loadACPITables(unsigned char*)+0x106>
c0017271:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017275:	83 c0 24             	add    eax,0x24
c0017278:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001727c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017280:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017284:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017288:	c1 e0 03             	shl    eax,0x3
c001728b:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001728f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017293:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017296:	8b 00                	mov    eax,DWORD PTR [eax]
c0017298:	89 c1                	mov    ecx,eax
c001729a:	a1 cc ff 02 c0       	mov    eax,ds:0xc002ffcc
c001729f:	8d 50 01             	lea    edx,[eax+0x1]
c00172a2:	89 15 cc ff 02 c0    	mov    DWORD PTR ds:0xc002ffcc,edx
c00172a8:	89 ca                	mov    edx,ecx
c00172aa:	89 14 c5 e4 ff 02 c0 	mov    DWORD PTR [eax*8-0x3ffd001c],edx
c00172b1:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00172b5:	eb ac                	jmp    c0017263 <loadACPITables(unsigned char*)+0x46>
c00172b7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00172bb:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00172bf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00172c3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00172c6:	83 e8 24             	sub    eax,0x24
c00172c9:	c1 e8 02             	shr    eax,0x2
c00172cc:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00172d0:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00172d8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00172dc:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c00172e0:	7d 41                	jge    c0017323 <loadACPITables(unsigned char*)+0x106>
c00172e2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00172e6:	83 c0 24             	add    eax,0x24
c00172e9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00172ed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00172f1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00172f5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00172f9:	c1 e0 02             	shl    eax,0x2
c00172fc:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017300:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017304:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017306:	a1 cc ff 02 c0       	mov    eax,ds:0xc002ffcc
c001730b:	8d 50 01             	lea    edx,[eax+0x1]
c001730e:	89 15 cc ff 02 c0    	mov    DWORD PTR ds:0xc002ffcc,edx
c0017314:	89 ca                	mov    edx,ecx
c0017316:	89 14 c5 e4 ff 02 c0 	mov    DWORD PTR [eax*8-0x3ffd001c],edx
c001731d:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0017321:	eb b5                	jmp    c00172d8 <loadACPITables(unsigned char*)+0xbb>
c0017323:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001732b:	a1 cc ff 02 c0       	mov    eax,ds:0xc002ffcc
c0017330:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0017334:	0f 8d 33 01 00 00    	jge    c001746d <loadACPITables(unsigned char*)+0x250>
c001733a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001733e:	8b 04 c5 e4 ff 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd001c]
c0017345:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017349:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001734d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017351:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017355:	25 ff 0f 00 00       	and    eax,0xfff
c001735a:	89 c6                	mov    esi,eax
c001735c:	8b 1d 90 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da90
c0017362:	83 ec 0c             	sub    esp,0xc
c0017365:	6a 01                	push   0x1
c0017367:	e8 b5 9e ff ff       	call   c0011221 <Virt::allocateKernelVirtualPages(int)>
c001736c:	83 c4 10             	add    esp,0x10
c001736f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017373:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017379:	83 ec 0c             	sub    esp,0xc
c001737c:	6a 01                	push   0x1
c001737e:	6a 01                	push   0x1
c0017380:	50                   	push   eax
c0017381:	52                   	push   edx
c0017382:	53                   	push   ebx
c0017383:	e8 4c a9 ff ff       	call   c0011cd4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017388:	83 c4 20             	add    esp,0x20
c001738b:	09 f0                	or     eax,esi
c001738d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017391:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017395:	c1 e0 03             	shl    eax,0x3
c0017398:	05 e0 ff 02 c0       	add    eax,0xc002ffe0
c001739d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00173a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00173a9:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c00173b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00173b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00173b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00173bd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00173c1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00173c5:	89 c6                	mov    esi,eax
c00173c7:	89 d7                	mov    edi,edx
c00173c9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00173cb:	89 c8                	mov    eax,ecx
c00173cd:	89 fa                	mov    edx,edi
c00173cf:	89 f3                	mov    ebx,esi
c00173d1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00173d5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00173d9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00173dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173e1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00173e4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00173e8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173ec:	05 00 10 00 00       	add    eax,0x1000
c00173f1:	c1 e8 0c             	shr    eax,0xc
c00173f4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00173f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173fc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017400:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017404:	25 ff 0f 00 00       	and    eax,0xfff
c0017409:	89 c6                	mov    esi,eax
c001740b:	8b 1d 90 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da90
c0017411:	83 ec 0c             	sub    esp,0xc
c0017414:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017418:	e8 04 9e ff ff       	call   c0011221 <Virt::allocateKernelVirtualPages(int)>
c001741d:	83 c4 10             	add    esp,0x10
c0017420:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017424:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001742a:	83 ec 0c             	sub    esp,0xc
c001742d:	6a 01                	push   0x1
c001742f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017433:	50                   	push   eax
c0017434:	52                   	push   edx
c0017435:	53                   	push   ebx
c0017436:	e8 99 a8 ff ff       	call   c0011cd4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001743b:	83 c4 20             	add    esp,0x20
c001743e:	09 f0                	or     eax,esi
c0017440:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017444:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017448:	83 ec 0c             	sub    esp,0xc
c001744b:	50                   	push   eax
c001744c:	e8 16 a2 ff ff       	call   c0011667 <Virt::freeKernelVirtualPages(unsigned long)>
c0017451:	83 c4 10             	add    esp,0x10
c0017454:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017458:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001745c:	89 14 c5 e4 ff 02 c0 	mov    DWORD PTR [eax*8-0x3ffd001c],edx
c0017463:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0017467:	e9 bf fe ff ff       	jmp    c001732b <loadACPITables(unsigned char*)+0x10e>
c001746c:	90                   	nop
c001746d:	83 c4 60             	add    esp,0x60
c0017470:	5b                   	pop    ebx
c0017471:	5e                   	pop    esi
c0017472:	5f                   	pop    edi
c0017473:	c3                   	ret    

c0017474 <findRSDT(unsigned char*)>:
c0017474:	57                   	push   edi
c0017475:	56                   	push   esi
c0017476:	53                   	push   ebx
c0017477:	83 ec 50             	sub    esp,0x50
c001747a:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c001747f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017485:	83 e0 04             	and    eax,0x4
c0017488:	84 c0                	test   al,al
c001748a:	75 0a                	jne    c0017496 <findRSDT(unsigned char*)+0x22>
c001748c:	b8 00 00 00 00       	mov    eax,0x0
c0017491:	e9 21 01 00 00       	jmp    c00175b7 <findRSDT(unsigned char*)+0x143>
c0017496:	89 e0                	mov    eax,esp
c0017498:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001749c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00174a0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00174a4:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c00174ac:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00174b0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00174b4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00174b8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00174bc:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00174c0:	89 c6                	mov    esi,eax
c00174c2:	89 d7                	mov    edi,edx
c00174c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00174c6:	89 c8                	mov    eax,ecx
c00174c8:	89 fa                	mov    edx,edi
c00174ca:	89 f3                	mov    ebx,esi
c00174cc:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00174d0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00174d4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00174d8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00174dc:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c00174e0:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c00174e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00174ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00174f0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00174f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174f8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00174fc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017500:	25 ff 0f 00 00       	and    eax,0xfff
c0017505:	89 c6                	mov    esi,eax
c0017507:	8b 1d 90 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da90
c001750d:	83 ec 0c             	sub    esp,0xc
c0017510:	6a 02                	push   0x2
c0017512:	e8 0a 9d ff ff       	call   c0011221 <Virt::allocateKernelVirtualPages(int)>
c0017517:	83 c4 10             	add    esp,0x10
c001751a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001751e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017524:	83 ec 0c             	sub    esp,0xc
c0017527:	6a 01                	push   0x1
c0017529:	6a 02                	push   0x2
c001752b:	50                   	push   eax
c001752c:	52                   	push   edx
c001752d:	53                   	push   ebx
c001752e:	e8 a1 a7 ff ff       	call   c0011cd4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017533:	83 c4 20             	add    esp,0x20
c0017536:	09 f0                	or     eax,esi
c0017538:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001753c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017540:	25 ff 0f 00 00       	and    eax,0xfff
c0017545:	89 c6                	mov    esi,eax
c0017547:	8b 1d 90 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da90
c001754d:	83 ec 0c             	sub    esp,0xc
c0017550:	6a 02                	push   0x2
c0017552:	e8 ca 9c ff ff       	call   c0011221 <Virt::allocateKernelVirtualPages(int)>
c0017557:	83 c4 10             	add    esp,0x10
c001755a:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001755e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017564:	83 ec 0c             	sub    esp,0xc
c0017567:	6a 01                	push   0x1
c0017569:	6a 02                	push   0x2
c001756b:	50                   	push   eax
c001756c:	52                   	push   edx
c001756d:	53                   	push   ebx
c001756e:	e8 61 a7 ff ff       	call   c0011cd4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017573:	83 c4 20             	add    esp,0x20
c0017576:	09 f0                	or     eax,esi
c0017578:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001757c:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0017581:	75 11                	jne    c0017594 <findRSDT(unsigned char*)+0x120>
c0017583:	c6 05 e0 01 03 c0 00 	mov    BYTE PTR ds:0xc00301e0,0x0
c001758a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001758e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017592:	eb 1f                	jmp    c00175b3 <findRSDT(unsigned char*)+0x13f>
c0017594:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0017599:	75 11                	jne    c00175ac <findRSDT(unsigned char*)+0x138>
c001759b:	c6 05 e0 01 03 c0 01 	mov    BYTE PTR ds:0xc00301e0,0x1
c00175a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00175a6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00175aa:	eb 07                	jmp    c00175b3 <findRSDT(unsigned char*)+0x13f>
c00175ac:	b8 00 00 00 00       	mov    eax,0x0
c00175b1:	eb 04                	jmp    c00175b7 <findRSDT(unsigned char*)+0x143>
c00175b3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00175b7:	83 c4 50             	add    esp,0x50
c00175ba:	5b                   	pop    ebx
c00175bb:	5e                   	pop    esi
c00175bc:	5f                   	pop    edi
c00175bd:	c3                   	ret    

c00175be <findDataTable(unsigned char*, char*)>:
c00175be:	83 ec 1c             	sub    esp,0x1c
c00175c1:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c00175c6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00175cc:	83 e0 04             	and    eax,0x4
c00175cf:	84 c0                	test   al,al
c00175d1:	75 07                	jne    c00175da <findDataTable(unsigned char*, char*)+0x1c>
c00175d3:	b8 00 00 00 00       	mov    eax,0x0
c00175d8:	eb 52                	jmp    c001762c <findDataTable(unsigned char*, char*)+0x6e>
c00175da:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00175e2:	a1 cc ff 02 c0       	mov    eax,ds:0xc002ffcc
c00175e7:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00175eb:	7d 3a                	jge    c0017627 <findDataTable(unsigned char*, char*)+0x69>
c00175ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175f1:	c1 e0 03             	shl    eax,0x3
c00175f4:	05 e0 ff 02 c0       	add    eax,0xc002ffe0
c00175f9:	83 ec 04             	sub    esp,0x4
c00175fc:	6a 04                	push   0x4
c00175fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017602:	50                   	push   eax
c0017603:	e8 44 90 fe ff       	call   c000064c <memcmp>
c0017608:	83 c4 10             	add    esp,0x10
c001760b:	85 c0                	test   eax,eax
c001760d:	0f 94 c0             	sete   al
c0017610:	84 c0                	test   al,al
c0017612:	74 0d                	je     c0017621 <findDataTable(unsigned char*, char*)+0x63>
c0017614:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017618:	8b 04 c5 e4 ff 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd001c]
c001761f:	eb 0b                	jmp    c001762c <findDataTable(unsigned char*, char*)+0x6e>
c0017621:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017625:	eb bb                	jmp    c00175e2 <findDataTable(unsigned char*, char*)+0x24>
c0017627:	b8 00 00 00 00       	mov    eax,0x0
c001762c:	83 c4 1c             	add    esp,0x1c
c001762f:	c3                   	ret    

c0017630 <scanMADT()>:
c0017630:	53                   	push   ebx
c0017631:	83 ec 38             	sub    esp,0x38
c0017634:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0017639:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001763f:	83 e0 04             	and    eax,0x4
c0017642:	84 c0                	test   al,al
c0017644:	0f 84 4a 04 00 00    	je     c0017a94 <scanMADT()+0x464>
c001764a:	e8 44 fb ff ff       	call   c0017193 <findRSDP()>
c001764f:	a3 ec 01 03 c0       	mov    ds:0xc00301ec,eax
c0017654:	a1 ec 01 03 c0       	mov    eax,ds:0xc00301ec
c0017659:	85 c0                	test   eax,eax
c001765b:	75 19                	jne    c0017676 <scanMADT()+0x46>
c001765d:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0017662:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017668:	83 e2 fb             	and    edx,0xfffffffb
c001766b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017671:	e9 22 04 00 00       	jmp    c0017a98 <scanMADT()+0x468>
c0017676:	a1 ec 01 03 c0       	mov    eax,ds:0xc00301ec
c001767b:	83 ec 0c             	sub    esp,0xc
c001767e:	50                   	push   eax
c001767f:	e8 f0 fd ff ff       	call   c0017474 <findRSDT(unsigned char*)>
c0017684:	83 c4 10             	add    esp,0x10
c0017687:	a3 e8 01 03 c0       	mov    ds:0xc00301e8,eax
c001768c:	a1 e8 01 03 c0       	mov    eax,ds:0xc00301e8
c0017691:	85 c0                	test   eax,eax
c0017693:	75 19                	jne    c00176ae <scanMADT()+0x7e>
c0017695:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c001769a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00176a0:	83 e2 fb             	and    edx,0xfffffffb
c00176a3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00176a9:	e9 ea 03 00 00       	jmp    c0017a98 <scanMADT()+0x468>
c00176ae:	a1 e8 01 03 c0       	mov    eax,ds:0xc00301e8
c00176b3:	83 ec 0c             	sub    esp,0xc
c00176b6:	50                   	push   eax
c00176b7:	e8 61 fb ff ff       	call   c001721d <loadACPITables(unsigned char*)>
c00176bc:	83 c4 10             	add    esp,0x10
c00176bf:	a1 e8 01 03 c0       	mov    eax,ds:0xc00301e8
c00176c4:	83 ec 08             	sub    esp,0x8
c00176c7:	68 68 b1 02 c0       	push   0xc002b168
c00176cc:	50                   	push   eax
c00176cd:	e8 ec fe ff ff       	call   c00175be <findDataTable(unsigned char*, char*)>
c00176d2:	83 c4 10             	add    esp,0x10
c00176d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00176d9:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00176de:	75 19                	jne    c00176f9 <scanMADT()+0xc9>
c00176e0:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c00176e5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00176eb:	83 e2 fe             	and    edx,0xfffffffe
c00176ee:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00176f4:	e9 9f 03 00 00       	jmp    c0017a98 <scanMADT()+0x468>
c00176f9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017701:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017705:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017708:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001770c:	0f 87 86 03 00 00    	ja     c0017a98 <scanMADT()+0x468>
c0017712:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c001771a:	0f 87 78 03 00 00    	ja     c0017a98 <scanMADT()+0x468>
c0017720:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017724:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017728:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001772c:	8d 50 01             	lea    edx,[eax+0x1]
c001772f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017733:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017737:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001773b:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001773f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017743:	8d 50 01             	lea    edx,[eax+0x1]
c0017746:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001774a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001774e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017752:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017756:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c001775b:	0f 86 36 03 00 00    	jbe    c0017a97 <scanMADT()+0x467>
c0017761:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017766:	75 57                	jne    c00177bf <scanMADT()+0x18f>
c0017768:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001776c:	8d 50 01             	lea    edx,[eax+0x1]
c001776f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017773:	8a 15 e0 03 03 c0    	mov    dl,BYTE PTR ds:0xc00303e0
c0017779:	0f b6 d2             	movzx  edx,dl
c001777c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017780:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017784:	88 82 20 04 03 c0    	mov    BYTE PTR [edx-0x3ffcfbe0],al
c001778a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001778e:	8d 50 01             	lea    edx,[eax+0x1]
c0017791:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017795:	8a 15 e0 03 03 c0    	mov    dl,BYTE PTR ds:0xc00303e0
c001779b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001779e:	88 0d e0 03 03 c0    	mov    BYTE PTR ds:0xc00303e0,cl
c00177a4:	0f b6 d2             	movzx  edx,dl
c00177a7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00177ab:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00177af:	88 82 00 04 03 c0    	mov    BYTE PTR [edx-0x3ffcfc00],al
c00177b5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00177ba:	e9 c1 02 00 00       	jmp    c0017a80 <scanMADT()+0x450>
c00177bf:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c00177c4:	0f 85 14 01 00 00    	jne    c00178de <scanMADT()+0x2ae>
c00177ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177ce:	8d 50 01             	lea    edx,[eax+0x1]
c00177d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00177d5:	8a 15 a0 02 03 c0    	mov    dl,BYTE PTR ds:0xc00302a0
c00177db:	0f b6 d2             	movzx  edx,dl
c00177de:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00177e2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00177e6:	88 82 c0 02 03 c0    	mov    BYTE PTR [edx-0x3ffcfd40],al
c00177ec:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00177f0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177f8:	01 d0                	add    eax,edx
c00177fa:	83 c0 2c             	add    eax,0x2c
c00177fd:	8a 00                	mov    al,BYTE PTR [eax]
c00177ff:	0f b6 d0             	movzx  edx,al
c0017802:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017806:	8d 48 01             	lea    ecx,[eax+0x1]
c0017809:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001780d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017811:	0f b6 c0             	movzx  eax,al
c0017814:	c1 e0 08             	shl    eax,0x8
c0017817:	89 d1                	mov    ecx,edx
c0017819:	09 c1                	or     ecx,eax
c001781b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001781f:	8d 50 02             	lea    edx,[eax+0x2]
c0017822:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017826:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001782a:	0f b6 c0             	movzx  eax,al
c001782d:	c1 e0 10             	shl    eax,0x10
c0017830:	09 c1                	or     ecx,eax
c0017832:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017836:	8d 50 03             	lea    edx,[eax+0x3]
c0017839:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001783d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017841:	0f b6 c0             	movzx  eax,al
c0017844:	c1 e0 18             	shl    eax,0x18
c0017847:	09 c1                	or     ecx,eax
c0017849:	89 ca                	mov    edx,ecx
c001784b:	a0 a0 02 03 c0       	mov    al,ds:0xc00302a0
c0017850:	0f b6 c0             	movzx  eax,al
c0017853:	89 14 85 e0 02 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfd20],edx
c001785a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001785f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017863:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017867:	01 d0                	add    eax,edx
c0017869:	83 c0 2c             	add    eax,0x2c
c001786c:	8a 00                	mov    al,BYTE PTR [eax]
c001786e:	0f b6 d0             	movzx  edx,al
c0017871:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017875:	8d 48 01             	lea    ecx,[eax+0x1]
c0017878:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001787c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017880:	0f b6 c0             	movzx  eax,al
c0017883:	c1 e0 08             	shl    eax,0x8
c0017886:	89 d1                	mov    ecx,edx
c0017888:	09 c1                	or     ecx,eax
c001788a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001788e:	8d 50 02             	lea    edx,[eax+0x2]
c0017891:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017895:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017899:	0f b6 c0             	movzx  eax,al
c001789c:	c1 e0 10             	shl    eax,0x10
c001789f:	09 c1                	or     ecx,eax
c00178a1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178a5:	8d 50 03             	lea    edx,[eax+0x3]
c00178a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178ac:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00178b0:	0f b6 c0             	movzx  eax,al
c00178b3:	c1 e0 18             	shl    eax,0x18
c00178b6:	09 c1                	or     ecx,eax
c00178b8:	89 ca                	mov    edx,ecx
c00178ba:	a0 a0 02 03 c0       	mov    al,ds:0xc00302a0
c00178bf:	0f b6 c0             	movzx  eax,al
c00178c2:	89 14 85 60 03 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfca0],edx
c00178c9:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00178ce:	a0 a0 02 03 c0       	mov    al,ds:0xc00302a0
c00178d3:	40                   	inc    eax
c00178d4:	a2 a0 02 03 c0       	mov    ds:0xc00302a0,al
c00178d9:	e9 a2 01 00 00       	jmp    c0017a80 <scanMADT()+0x450>
c00178de:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00178e3:	0f 85 e9 00 00 00    	jne    c00179d2 <scanMADT()+0x3a2>
c00178e9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178ed:	8d 50 01             	lea    edx,[eax+0x1]
c00178f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00178f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178f8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00178fc:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017900:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017904:	8d 50 01             	lea    edx,[eax+0x1]
c0017907:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001790b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001790f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017913:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017917:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001791b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001791f:	01 d0                	add    eax,edx
c0017921:	83 c0 2c             	add    eax,0x2c
c0017924:	8a 00                	mov    al,BYTE PTR [eax]
c0017926:	0f b6 d0             	movzx  edx,al
c0017929:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001792d:	8d 48 01             	lea    ecx,[eax+0x1]
c0017930:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017934:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017938:	0f b6 c0             	movzx  eax,al
c001793b:	c1 e0 08             	shl    eax,0x8
c001793e:	89 d1                	mov    ecx,edx
c0017940:	09 c1                	or     ecx,eax
c0017942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017946:	8d 50 02             	lea    edx,[eax+0x2]
c0017949:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001794d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017951:	0f b6 c0             	movzx  eax,al
c0017954:	c1 e0 10             	shl    eax,0x10
c0017957:	09 c1                	or     ecx,eax
c0017959:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001795d:	8d 50 03             	lea    edx,[eax+0x3]
c0017960:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017964:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017968:	0f b6 c0             	movzx  eax,al
c001796b:	c1 e0 18             	shl    eax,0x18
c001796e:	09 c8                	or     eax,ecx
c0017970:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017974:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017979:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001797d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017981:	01 d0                	add    eax,edx
c0017983:	83 c0 2c             	add    eax,0x2c
c0017986:	8a 00                	mov    al,BYTE PTR [eax]
c0017988:	0f b6 c0             	movzx  eax,al
c001798b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001798f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017992:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017996:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001799a:	0f b6 d2             	movzx  edx,dl
c001799d:	c1 e2 08             	shl    edx,0x8
c00179a0:	09 d0                	or     eax,edx
c00179a2:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00179a7:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00179ac:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00179b1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00179b5:	88 90 80 cb 02 c0    	mov    BYTE PTR [eax-0x3ffd3480],dl
c00179bb:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00179c0:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00179c5:	66 89 84 12 80 02 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcfd80],ax
c00179cd:	e9 ae 00 00 00       	jmp    c0017a80 <scanMADT()+0x450>
c00179d2:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00179d7:	0f 85 97 00 00 00    	jne    c0017a74 <scanMADT()+0x444>
c00179dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179e1:	8d 50 01             	lea    edx,[eax+0x1]
c00179e4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179e8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179ec:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00179f0:	0f b6 c0             	movzx  eax,al
c00179f3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00179f7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179ff:	01 d0                	add    eax,edx
c0017a01:	83 c0 2c             	add    eax,0x2c
c0017a04:	8a 00                	mov    al,BYTE PTR [eax]
c0017a06:	0f b6 d0             	movzx  edx,al
c0017a09:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a0d:	8d 48 01             	lea    ecx,[eax+0x1]
c0017a10:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a14:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017a18:	0f b6 c0             	movzx  eax,al
c0017a1b:	c1 e0 08             	shl    eax,0x8
c0017a1e:	09 d0                	or     eax,edx
c0017a20:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a24:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017a29:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a2d:	8d 50 01             	lea    edx,[eax+0x1]
c0017a30:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a34:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a38:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a3c:	0f b6 c0             	movzx  eax,al
c0017a3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a47:	c1 e0 08             	shl    eax,0x8
c0017a4a:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017a4e:	89 c1                	mov    ecx,eax
c0017a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a54:	c1 e0 18             	shl    eax,0x18
c0017a57:	89 c3                	mov    ebx,eax
c0017a59:	a1 f0 01 03 c0       	mov    eax,ds:0xc00301f0
c0017a5e:	8d 50 01             	lea    edx,[eax+0x1]
c0017a61:	89 15 f0 01 03 c0    	mov    DWORD PTR ds:0xc00301f0,edx
c0017a67:	09 d9                	or     ecx,ebx
c0017a69:	89 ca                	mov    edx,ecx
c0017a6b:	89 14 85 00 02 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfe00],edx
c0017a72:	eb 0c                	jmp    c0017a80 <scanMADT()+0x450>
c0017a74:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017a79:	75 05                	jne    c0017a80 <scanMADT()+0x450>
c0017a7b:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017a80:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017a85:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a89:	01 d0                	add    eax,edx
c0017a8b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017a8f:	e9 6d fc ff ff       	jmp    c0017701 <scanMADT()+0xd1>
c0017a94:	90                   	nop
c0017a95:	eb 01                	jmp    c0017a98 <scanMADT()+0x468>
c0017a97:	90                   	nop
c0017a98:	83 c4 38             	add    esp,0x38
c0017a9b:	5b                   	pop    ebx
c0017a9c:	c3                   	ret    
c0017a9d:	90                   	nop

c0017a9e <ACPI::ACPI()>:
c0017a9e:	83 ec 0c             	sub    esp,0xc
c0017aa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017aa5:	83 ec 08             	sub    esp,0x8
c0017aa8:	68 6d b1 02 c0       	push   0xc002b16d
c0017aad:	50                   	push   eax
c0017aae:	e8 57 c2 ff ff       	call   c0013d0a <Device::Device(char const*)>
c0017ab3:	83 c4 10             	add    esp,0x10
c0017ab6:	ba c8 b2 02 c0       	mov    edx,0xc002b2c8
c0017abb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017abf:	89 10                	mov    DWORD PTR [eax],edx
c0017ac1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ac5:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017acc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ad0:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017ada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ade:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017ae8:	e8 43 fb ff ff       	call   c0017630 <scanMADT()>
c0017aed:	90                   	nop
c0017aee:	83 c4 0c             	add    esp,0xc
c0017af1:	c3                   	ret    

c0017af2 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017af2:	83 ec 2c             	sub    esp,0x2c
c0017af5:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017af9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017afd:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017b01:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017b05:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017b0a:	88 d0                	mov    al,dl
c0017b0c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017b10:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017b15:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017b1d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b21:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017b27:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017b2b:	0f 8d 97 00 00 00    	jge    c0017bc8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017b31:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b35:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b39:	83 c2 2a             	add    edx,0x2a
c0017b3c:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017b40:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017b45:	75 78                	jne    c0017bbf <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017b47:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b4b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b4f:	83 c2 2a             	add    edx,0x2a
c0017b52:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017b56:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017b5a:	75 63                	jne    c0017bbf <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017b5c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017b61:	74 3a                	je     c0017b9d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017b63:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b67:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b6b:	83 c2 2a             	add    edx,0x2a
c0017b6e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017b72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b79:	39 c2                	cmp    edx,eax
c0017b7b:	74 10                	je     c0017b8d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017b7d:	83 ec 0c             	sub    esp,0xc
c0017b80:	68 e8 b0 02 c0       	push   0xc002b0e8
c0017b85:	e8 af 22 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c0017b8a:	83 c4 10             	add    esp,0x10
c0017b8d:	83 ec 0c             	sub    esp,0xc
c0017b90:	68 72 b1 02 c0       	push   0xc002b172
c0017b95:	e8 9f 22 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c0017b9a:	83 c4 10             	add    esp,0x10
c0017b9d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017ba1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ba5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ba9:	83 c2 2a             	add    edx,0x2a
c0017bac:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017bb0:	8b 02                	mov    eax,DWORD PTR [edx]
c0017bb2:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017bb5:	89 01                	mov    DWORD PTR [ecx],eax
c0017bb7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017bba:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017bbf:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017bc3:	e9 55 ff ff ff       	jmp    c0017b1d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017bc8:	90                   	nop
c0017bc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bcd:	83 c4 2c             	add    esp,0x2c
c0017bd0:	c2 04 00             	ret    0x4
c0017bd3:	90                   	nop

c0017bd4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017bd4:	83 ec 1c             	sub    esp,0x1c
c0017bd7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bdb:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017bdf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017be3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017be8:	88 c8                	mov    al,cl
c0017bea:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017bee:	88 d0                	mov    al,dl
c0017bf0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017bf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bf8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017bfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c02:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017c05:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017c09:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017c0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c11:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017c17:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c1b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017c1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c22:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017c27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c2b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017c31:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017c35:	8d 48 01             	lea    ecx,[eax+0x1]
c0017c38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c3c:	83 c2 2a             	add    edx,0x2a
c0017c3f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017c43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c47:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017c4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c51:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017c54:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017c58:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017c5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c60:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017c66:	8d 50 01             	lea    edx,[eax+0x1]
c0017c69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c6d:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017c73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c77:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017c7d:	3d 00 02 00 00       	cmp    eax,0x200
c0017c82:	75 10                	jne    c0017c94 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017c84:	83 ec 0c             	sub    esp,0xc
c0017c87:	68 81 b1 02 c0       	push   0xc002b181
c0017c8c:	e8 a8 21 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c0017c91:	83 c4 10             	add    esp,0x10
c0017c94:	90                   	nop
c0017c95:	83 c4 1c             	add    esp,0x1c
c0017c98:	c3                   	ret    
c0017c99:	90                   	nop

c0017c9a <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017c9a:	b8 00 00 00 00       	mov    eax,0x0
c0017c9f:	c3                   	ret    

c0017ca0 <ACPI::detectPCI()>:
c0017ca0:	53                   	push   ebx
c0017ca1:	83 ec 28             	sub    esp,0x28
c0017ca4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017ca9:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017cae:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0017cb3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017cb9:	83 e0 04             	and    eax,0x4
c0017cbc:	84 c0                	test   al,al
c0017cbe:	74 2b                	je     c0017ceb <ACPI::detectPCI()+0x4b>
c0017cc0:	a1 e8 01 03 c0       	mov    eax,ds:0xc00301e8
c0017cc5:	83 ec 08             	sub    esp,0x8
c0017cc8:	68 9e b1 02 c0       	push   0xc002b19e
c0017ccd:	50                   	push   eax
c0017cce:	e8 eb f8 ff ff       	call   c00175be <findDataTable(unsigned char*, char*)>
c0017cd3:	83 c4 10             	add    esp,0x10
c0017cd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017cda:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017cdf:	74 0a                	je     c0017ceb <ACPI::detectPCI()+0x4b>
c0017ce1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017ce6:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017ceb:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0017cf3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017cf7:	8a 00                	mov    al,BYTE PTR [eax]
c0017cf9:	3c 01                	cmp    al,0x1
c0017cfb:	75 0c                	jne    c0017d09 <ACPI::detectPCI()+0x69>
c0017cfd:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d02:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017d07:	eb 26                	jmp    c0017d2f <ACPI::detectPCI()+0x8f>
c0017d09:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d0d:	8a 00                	mov    al,BYTE PTR [eax]
c0017d0f:	3c 02                	cmp    al,0x2
c0017d11:	75 1c                	jne    c0017d2f <ACPI::detectPCI()+0x8f>
c0017d13:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d18:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017d1d:	74 10                	je     c0017d2f <ACPI::detectPCI()+0x8f>
c0017d1f:	83 ec 0c             	sub    esp,0xc
c0017d22:	68 18 b1 02 c0       	push   0xc002b118
c0017d27:	e8 0d 21 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c0017d2c:	83 c4 10             	add    esp,0x10
c0017d2f:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017d33:	83 f0 01             	xor    eax,0x1
c0017d36:	84 c0                	test   al,al
c0017d38:	74 3f                	je     c0017d79 <ACPI::detectPCI()+0xd9>
c0017d3a:	e8 11 84 fe ff       	call   c0000150 <manualPCIProbe>
c0017d3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017d43:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017d48:	75 0c                	jne    c0017d56 <ACPI::detectPCI()+0xb6>
c0017d4a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d4f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017d54:	eb 23                	jmp    c0017d79 <ACPI::detectPCI()+0xd9>
c0017d56:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0017d5b:	75 1c                	jne    c0017d79 <ACPI::detectPCI()+0xd9>
c0017d5d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d62:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017d67:	74 10                	je     c0017d79 <ACPI::detectPCI()+0xd9>
c0017d69:	83 ec 0c             	sub    esp,0xc
c0017d6c:	68 18 b1 02 c0       	push   0xc002b118
c0017d71:	e8 c3 20 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c0017d76:	83 c4 10             	add    esp,0x10
c0017d79:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017d7e:	74 7e                	je     c0017dfe <ACPI::detectPCI()+0x15e>
c0017d80:	83 ec 0c             	sub    esp,0xc
c0017d83:	68 a3 b1 02 c0       	push   0xc002b1a3
c0017d88:	e8 66 78 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017d8d:	83 c4 10             	add    esp,0x10
c0017d90:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0017d98:	83 ec 0c             	sub    esp,0xc
c0017d9b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017d9f:	e8 f5 77 ff ff       	call   c000f599 <malloc>
c0017da4:	83 c4 10             	add    esp,0x10
c0017da7:	89 c3                	mov    ebx,eax
c0017da9:	83 ec 0c             	sub    esp,0xc
c0017dac:	53                   	push   ebx
c0017dad:	e8 aa a5 00 00       	call   c002235c <PCI::PCI()>
c0017db2:	83 c4 10             	add    esp,0x10
c0017db5:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017db9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017dbd:	83 ec 08             	sub    esp,0x8
c0017dc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017dc4:	50                   	push   eax
c0017dc5:	e8 3c bd ff ff       	call   c0013b06 <Device::addChild(Device*)>
c0017dca:	83 c4 10             	add    esp,0x10
c0017dcd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017dd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0017dd3:	83 c0 08             	add    eax,0x8
c0017dd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0017dd8:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017ddd:	74 07                	je     c0017de6 <ACPI::detectPCI()+0x146>
c0017ddf:	ba 01 00 00 00       	mov    edx,0x1
c0017de4:	eb 05                	jmp    c0017deb <ACPI::detectPCI()+0x14b>
c0017de6:	ba 02 00 00 00       	mov    edx,0x2
c0017deb:	6a 00                	push   0x0
c0017ded:	6a 00                	push   0x0
c0017def:	52                   	push   edx
c0017df0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017df4:	ff d0                	call   eax
c0017df6:	83 c4 10             	add    esp,0x10
c0017df9:	e9 9e 00 00 00       	jmp    c0017e9c <ACPI::detectPCI()+0x1fc>
c0017dfe:	83 ec 0c             	sub    esp,0xc
c0017e01:	68 bb b1 02 c0       	push   0xc002b1bb
c0017e06:	e8 c2 a8 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0017e0b:	83 c4 10             	add    esp,0x10
c0017e0e:	83 ec 0c             	sub    esp,0xc
c0017e11:	68 c6 b1 02 c0       	push   0xc002b1c6
c0017e16:	e8 d8 77 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017e1b:	83 c4 10             	add    esp,0x10
c0017e1e:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0017e25:	83 ec 0c             	sub    esp,0xc
c0017e28:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017e2c:	e8 68 77 ff ff       	call   c000f599 <malloc>
c0017e31:	83 c4 10             	add    esp,0x10
c0017e34:	89 c3                	mov    ebx,eax
c0017e36:	83 ec 0c             	sub    esp,0xc
c0017e39:	53                   	push   ebx
c0017e3a:	e8 87 b0 00 00       	call   c0022ec6 <IDE::IDE()>
c0017e3f:	83 c4 10             	add    esp,0x10
c0017e42:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0017e46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e4a:	83 ec 08             	sub    esp,0x8
c0017e4d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017e51:	50                   	push   eax
c0017e52:	e8 af bc ff ff       	call   c0013b06 <Device::addChild(Device*)>
c0017e57:	83 c4 10             	add    esp,0x10
c0017e5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e5e:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0017e68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e6c:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0017e75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e79:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0017e82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e86:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e88:	83 c0 08             	add    eax,0x8
c0017e8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e8d:	6a 00                	push   0x0
c0017e8f:	6a 00                	push   0x0
c0017e91:	6a 00                	push   0x0
c0017e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017e97:	ff d0                	call   eax
c0017e99:	83 c4 10             	add    esp,0x10
c0017e9c:	90                   	nop
c0017e9d:	83 c4 28             	add    esp,0x28
c0017ea0:	5b                   	pop    ebx
c0017ea1:	c3                   	ret    

c0017ea2 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017ea2:	83 ec 1c             	sub    esp,0x1c
c0017ea5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ea9:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017eac:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017eb0:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0017eb5:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017eba:	83 ec 08             	sub    esp,0x8
c0017ebd:	52                   	push   edx
c0017ebe:	50                   	push   eax
c0017ebf:	e8 ec 6c ff ff       	call   c000ebb0 <Computer::readCMOS(unsigned char)>
c0017ec4:	83 c4 10             	add    esp,0x10
c0017ec7:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017ecb:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0017ed0:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017ed5:	83 ec 04             	sub    esp,0x4
c0017ed8:	6a 01                	push   0x1
c0017eda:	52                   	push   edx
c0017edb:	50                   	push   eax
c0017edc:	e8 01 6e ff ff       	call   c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017ee1:	83 c4 10             	add    esp,0x10
c0017ee4:	90                   	nop
c0017ee5:	83 c4 1c             	add    esp,0x1c
c0017ee8:	c3                   	ret    
c0017ee9:	90                   	nop

c0017eea <ACPI::sleep()>:
c0017eea:	83 ec 0c             	sub    esp,0xc
c0017eed:	a1 c0 ff 02 c0       	mov    eax,ds:0xc002ffc0
c0017ef2:	85 c0                	test   eax,eax
c0017ef4:	74 07                	je     c0017efd <ACPI::sleep()+0x13>
c0017ef6:	a1 c0 ff 02 c0       	mov    eax,ds:0xc002ffc0
c0017efb:	ff d0                	call   eax
c0017efd:	90                   	nop
c0017efe:	83 c4 0c             	add    esp,0xc
c0017f01:	c3                   	ret    

c0017f02 <ACPI::open(int, int, void*)>:
c0017f02:	57                   	push   edi
c0017f03:	56                   	push   esi
c0017f04:	53                   	push   ebx
c0017f05:	81 ec 60 01 00 00    	sub    esp,0x160
c0017f0b:	83 ec 0c             	sub    esp,0xc
c0017f0e:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0017f15:	e8 86 fd ff ff       	call   c0017ca0 <ACPI::detectPCI()>
c0017f1a:	83 c4 10             	add    esp,0x10
c0017f1d:	83 ec 0c             	sub    esp,0xc
c0017f20:	68 40 b1 02 c0       	push   0xc002b140
c0017f25:	e8 c9 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017f2a:	83 c4 10             	add    esp,0x10
c0017f2d:	83 ec 0c             	sub    esp,0xc
c0017f30:	68 db b1 02 c0       	push   0xc002b1db
c0017f35:	e8 52 46 00 00       	call   c001c58c <Thr::loadKernelSymbolTable(char const*)>
c0017f3a:	83 c4 10             	add    esp,0x10
c0017f3d:	83 ec 0c             	sub    esp,0xc
c0017f40:	68 f9 b1 02 c0       	push   0xc002b1f9
c0017f45:	e8 a9 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017f4a:	83 c4 10             	add    esp,0x10
c0017f4d:	83 ec 04             	sub    esp,0x4
c0017f50:	6a 0c                	push   0xc
c0017f52:	68 14 b2 02 c0       	push   0xc002b214
c0017f57:	68 25 b2 02 c0       	push   0xc002b225
c0017f5c:	e8 94 2c 00 00       	call   c001abf5 <Reg::readIntWithDefault(char*, char*, int)>
c0017f61:	83 c4 10             	add    esp,0x10
c0017f64:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0017f6b:	83 ec 0c             	sub    esp,0xc
c0017f6e:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c0017f75:	e8 b1 94 ff ff       	call   c001142b <Virt::setupPageSwapping(int)>
c0017f7a:	83 c4 10             	add    esp,0x10
c0017f7d:	83 ec 0c             	sub    esp,0xc
c0017f80:	68 15 9e 02 c0       	push   0xc0029e15
c0017f85:	e8 69 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017f8a:	83 c4 10             	add    esp,0x10
c0017f8d:	8b 1d 28 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d928
c0017f93:	83 ec 08             	sub    esp,0x8
c0017f96:	6a 01                	push   0x1
c0017f98:	68 2c b2 02 c0       	push   0xc002b22c
c0017f9d:	e8 61 50 00 00       	call   c001d003 <Thr::loadDLL(char const*, bool)>
c0017fa2:	83 c4 10             	add    esp,0x10
c0017fa5:	83 ec 08             	sub    esp,0x8
c0017fa8:	53                   	push   ebx
c0017fa9:	50                   	push   eax
c0017faa:	e8 7f 52 00 00       	call   c001d22e <Thr::executeDLL(unsigned long, void*)>
c0017faf:	83 c4 10             	add    esp,0x10
c0017fb2:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0017fb9:	83 ec 08             	sub    esp,0x8
c0017fbc:	6a 12                	push   0x12
c0017fbe:	50                   	push   eax
c0017fbf:	e8 c6 be ff ff       	call   c0013e8a <getDevicesOfType(DeviceType)>
c0017fc4:	83 c4 0c             	add    esp,0xc
c0017fc7:	83 ec 0c             	sub    esp,0xc
c0017fca:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017fd1:	50                   	push   eax
c0017fd2:	e8 8d 09 01 00       	call   c0028964 <LinkedList<Device>::isEmpty()>
c0017fd7:	83 c4 10             	add    esp,0x10
c0017fda:	83 f0 01             	xor    eax,0x1
c0017fdd:	84 c0                	test   al,al
c0017fdf:	0f 84 43 01 00 00    	je     c0018128 <ACPI::open(int, int, void*)+0x226>
c0017fe5:	83 ec 0c             	sub    esp,0xc
c0017fe8:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017fef:	50                   	push   eax
c0017ff0:	e8 8b 09 01 00       	call   c0028980 <LinkedList<Device>::getFirstElement()>
c0017ff5:	83 c4 10             	add    esp,0x10
c0017ff8:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0017fff:	83 ec 0c             	sub    esp,0xc
c0018002:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018009:	50                   	push   eax
c001800a:	e8 79 09 01 00       	call   c0028988 <LinkedList<Device>::removeFirst()>
c001800f:	83 c4 10             	add    esp,0x10
c0018012:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c0018019:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0018020:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c0018027:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001802b:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0018031:	ba 09 00 00 00       	mov    edx,0x9
c0018036:	fc                   	cld    
c0018037:	89 c7                	mov    edi,eax
c0018039:	89 de                	mov    esi,ebx
c001803b:	89 d1                	mov    ecx,edx
c001803d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001803f:	83 ec 08             	sub    esp,0x8
c0018042:	8d 44 24 38          	lea    eax,[esp+0x38]
c0018046:	50                   	push   eax
c0018047:	83 ec 24             	sub    esp,0x24
c001804a:	89 e0                	mov    eax,esp
c001804c:	89 c3                	mov    ebx,eax
c001804e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0018052:	ba 09 00 00 00       	mov    edx,0x9
c0018057:	89 df                	mov    edi,ebx
c0018059:	89 c6                	mov    esi,eax
c001805b:	89 d1                	mov    ecx,edx
c001805d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001805f:	e8 d6 a7 00 00       	call   c002283a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0018064:	83 c4 30             	add    esp,0x30
c0018067:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c001806e:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0018076:	0f 84 4b ff ff ff    	je     c0017fc7 <ACPI::open(int, int, void*)+0xc5>
c001807c:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0018087:	83 ec 0c             	sub    esp,0xc
c001808a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018091:	e8 03 75 ff ff       	call   c000f599 <malloc>
c0018096:	83 c4 10             	add    esp,0x10
c0018099:	89 c3                	mov    ebx,eax
c001809b:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c00180a0:	83 ec 04             	sub    esp,0x4
c00180a3:	50                   	push   eax
c00180a4:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00180ab:	53                   	push   ebx
c00180ac:	e8 7b ab ff ff       	call   c0012c2c <File::File(char const*, Process*)>
c00180b1:	83 c4 10             	add    esp,0x10
c00180b4:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c00180bb:	83 ec 0c             	sub    esp,0xc
c00180be:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00180c5:	e8 34 ae ff ff       	call   c0012efe <File::exists()>
c00180ca:	83 c4 10             	add    esp,0x10
c00180cd:	84 c0                	test   al,al
c00180cf:	74 27                	je     c00180f8 <ACPI::open(int, int, void*)+0x1f6>
c00180d1:	83 ec 08             	sub    esp,0x8
c00180d4:	6a 01                	push   0x1
c00180d6:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00180dd:	e8 21 4f 00 00       	call   c001d003 <Thr::loadDLL(char const*, bool)>
c00180e2:	83 c4 10             	add    esp,0x10
c00180e5:	83 ec 08             	sub    esp,0x8
c00180e8:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00180ef:	50                   	push   eax
c00180f0:	e8 39 51 00 00       	call   c001d22e <Thr::executeDLL(unsigned long, void*)>
c00180f5:	83 c4 10             	add    esp,0x10
c00180f8:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0018100:	0f 84 c1 fe ff ff    	je     c0017fc7 <ACPI::open(int, int, void*)+0xc5>
c0018106:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001810d:	8b 00                	mov    eax,DWORD PTR [eax]
c001810f:	83 c0 08             	add    eax,0x8
c0018112:	8b 00                	mov    eax,DWORD PTR [eax]
c0018114:	83 ec 0c             	sub    esp,0xc
c0018117:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001811e:	ff d0                	call   eax
c0018120:	83 c4 10             	add    esp,0x10
c0018123:	e9 9f fe ff ff       	jmp    c0017fc7 <ACPI::open(int, int, void*)+0xc5>
c0018128:	83 ec 0c             	sub    esp,0xc
c001812b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018132:	50                   	push   eax
c0018133:	e8 2a 08 01 00       	call   c0028962 <LinkedList<Device>::~LinkedList()>
c0018138:	83 c4 10             	add    esp,0x10
c001813b:	8b 1d 28 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d928
c0018141:	83 ec 08             	sub    esp,0x8
c0018144:	6a 01                	push   0x1
c0018146:	68 47 b2 02 c0       	push   0xc002b247
c001814b:	e8 b3 4e 00 00       	call   c001d003 <Thr::loadDLL(char const*, bool)>
c0018150:	83 c4 10             	add    esp,0x10
c0018153:	83 ec 08             	sub    esp,0x8
c0018156:	53                   	push   ebx
c0018157:	50                   	push   eax
c0018158:	e8 d1 50 00 00       	call   c001d22e <Thr::executeDLL(unsigned long, void*)>
c001815d:	83 c4 10             	add    esp,0x10
c0018160:	8b 1d 28 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d928
c0018166:	83 ec 08             	sub    esp,0x8
c0018169:	6a 01                	push   0x1
c001816b:	68 64 b2 02 c0       	push   0xc002b264
c0018170:	e8 8e 4e 00 00       	call   c001d003 <Thr::loadDLL(char const*, bool)>
c0018175:	83 c4 10             	add    esp,0x10
c0018178:	83 ec 08             	sub    esp,0x8
c001817b:	53                   	push   ebx
c001817c:	50                   	push   eax
c001817d:	e8 ac 50 00 00       	call   c001d22e <Thr::executeDLL(unsigned long, void*)>
c0018182:	83 c4 10             	add    esp,0x10
c0018185:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c001818a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018190:	83 e0 04             	and    eax,0x4
c0018193:	84 c0                	test   al,al
c0018195:	0f 84 0d 01 00 00    	je     c00182a8 <ACPI::open(int, int, void*)+0x3a6>
c001819b:	83 ec 0c             	sub    esp,0xc
c001819e:	68 81 b2 02 c0       	push   0xc002b281
c00181a3:	e8 4b 74 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c00181a8:	83 c4 10             	add    esp,0x10
c00181ab:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00181b6:	83 ec 0c             	sub    esp,0xc
c00181b9:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00181c0:	e8 d4 73 ff ff       	call   c000f599 <malloc>
c00181c5:	83 c4 10             	add    esp,0x10
c00181c8:	89 c3                	mov    ebx,eax
c00181ca:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c00181cf:	83 ec 04             	sub    esp,0x4
c00181d2:	50                   	push   eax
c00181d3:	68 9e b2 02 c0       	push   0xc002b29e
c00181d8:	53                   	push   ebx
c00181d9:	e8 4e aa ff ff       	call   c0012c2c <File::File(char const*, Process*)>
c00181de:	83 c4 10             	add    esp,0x10
c00181e1:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c00181e8:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00181f0:	74 1a                	je     c001820c <ACPI::open(int, int, void*)+0x30a>
c00181f2:	83 ec 0c             	sub    esp,0xc
c00181f5:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00181fc:	e8 fd ac ff ff       	call   c0012efe <File::exists()>
c0018201:	83 c4 10             	add    esp,0x10
c0018204:	84 c0                	test   al,al
c0018206:	74 04                	je     c001820c <ACPI::open(int, int, void*)+0x30a>
c0018208:	b0 01                	mov    al,0x1
c001820a:	eb 02                	jmp    c001820e <ACPI::open(int, int, void*)+0x30c>
c001820c:	b0 00                	mov    al,0x0
c001820e:	84 c0                	test   al,al
c0018210:	74 25                	je     c0018237 <ACPI::open(int, int, void*)+0x335>
c0018212:	83 ec 08             	sub    esp,0x8
c0018215:	6a 01                	push   0x1
c0018217:	68 9e b2 02 c0       	push   0xc002b29e
c001821c:	e8 e2 4d 00 00       	call   c001d003 <Thr::loadDLL(char const*, bool)>
c0018221:	83 c4 10             	add    esp,0x10
c0018224:	83 ec 08             	sub    esp,0x8
c0018227:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c001822e:	50                   	push   eax
c001822f:	e8 fa 4f 00 00       	call   c001d22e <Thr::executeDLL(unsigned long, void*)>
c0018234:	83 c4 10             	add    esp,0x10
c0018237:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001823f:	74 27                	je     c0018268 <ACPI::open(int, int, void*)+0x366>
c0018241:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018249:	74 1d                	je     c0018268 <ACPI::open(int, int, void*)+0x366>
c001824b:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0018252:	8b 00                	mov    eax,DWORD PTR [eax]
c0018254:	83 c0 08             	add    eax,0x8
c0018257:	8b 00                	mov    eax,DWORD PTR [eax]
c0018259:	83 ec 0c             	sub    esp,0xc
c001825c:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018263:	ff d0                	call   eax
c0018265:	83 c4 10             	add    esp,0x10
c0018268:	a1 e8 01 03 c0       	mov    eax,ds:0xc00301e8
c001826d:	83 ec 08             	sub    esp,0x8
c0018270:	68 bb b2 02 c0       	push   0xc002b2bb
c0018275:	50                   	push   eax
c0018276:	e8 43 f3 ff ff       	call   c00175be <findDataTable(unsigned char*, char*)>
c001827b:	83 c4 10             	add    esp,0x10
c001827e:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c0018285:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c001828d:	74 19                	je     c00182a8 <ACPI::open(int, int, void*)+0x3a6>
c001828f:	83 ec 08             	sub    esp,0x8
c0018292:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018299:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c00182a0:	e8 fd fb ff ff       	call   c0017ea2 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00182a5:	83 c4 10             	add    esp,0x10
c00182a8:	b8 00 00 00 00       	mov    eax,0x0
c00182ad:	81 c4 60 01 00 00    	add    esp,0x160
c00182b3:	5b                   	pop    ebx
c00182b4:	5e                   	pop    esi
c00182b5:	5f                   	pop    edi
c00182b6:	c3                   	ret    
c00182b7:	90                   	nop

c00182b8 <CPU::close(int, int, void*)>:
c00182b8:	31 c0                	xor    eax,eax
c00182ba:	c3                   	ret    
c00182bb:	90                   	nop

c00182bc <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00182bc:	55                   	push   ebp
c00182bd:	57                   	push   edi
c00182be:	56                   	push   esi
c00182bf:	53                   	push   ebx
c00182c0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00182c4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182c8:	89 ce                	mov    esi,ecx
c00182ca:	89 d5                	mov    ebp,edx
c00182cc:	80 f9 04             	cmp    cl,0x4
c00182cf:	75 28                	jne    c00182f9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00182d1:	8d 42 f9             	lea    eax,[edx-0x7]
c00182d4:	3c 03                	cmp    al,0x3
c00182d6:	0f 86 63 01 00 00    	jbe    c001843f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00182dc:	80 fa 03             	cmp    dl,0x3
c00182df:	0f 84 5a 01 00 00    	je     c001843f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00182e5:	8d 7a f2             	lea    edi,[edx-0xe]
c00182e8:	b8 50 cd 02 c0       	mov    eax,0xc002cd50
c00182ed:	89 fb                	mov    ebx,edi
c00182ef:	80 fb 01             	cmp    bl,0x1
c00182f2:	77 4e                	ja     c0018342 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00182f4:	e9 52 01 00 00       	jmp    c001844b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182f9:	80 f9 05             	cmp    cl,0x5
c00182fc:	75 4d                	jne    c001834b <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00182fe:	b8 60 cd 02 c0       	mov    eax,0xc002cd60
c0018303:	80 fa 03             	cmp    dl,0x3
c0018306:	0f 86 3f 01 00 00    	jbe    c001844b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001830c:	8d 7a fa             	lea    edi,[edx-0x6]
c001830f:	b8 70 cd 02 c0       	mov    eax,0xc002cd70
c0018314:	89 fb                	mov    ebx,edi
c0018316:	80 fb 01             	cmp    bl,0x1
c0018319:	0f 86 2c 01 00 00    	jbe    c001844b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001831f:	b8 80 cd 02 c0       	mov    eax,0xc002cd80
c0018324:	80 fa 08             	cmp    dl,0x8
c0018327:	0f 84 1e 01 00 00    	je     c001844b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001832d:	89 d7                	mov    edi,edx
c001832f:	b8 90 cd 02 c0       	mov    eax,0xc002cd90
c0018334:	83 e7 fb             	and    edi,0xfffffffb
c0018337:	89 fb                	mov    ebx,edi
c0018339:	80 fb 09             	cmp    bl,0x9
c001833c:	0f 84 09 01 00 00    	je     c001844b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018342:	31 c0                	xor    eax,eax
c0018344:	89 eb                	mov    ebx,ebp
c0018346:	0f b6 fb             	movzx  edi,bl
c0018349:	eb 30                	jmp    c001837b <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c001834b:	31 c0                	xor    eax,eax
c001834d:	80 f9 06             	cmp    cl,0x6
c0018350:	75 f2                	jne    c0018344 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018352:	80 fa 0a             	cmp    dl,0xa
c0018355:	77 ed                	ja     c0018344 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018357:	bf de 05 00 00       	mov    edi,0x5de
c001835c:	0f a3 d7             	bt     edi,edx
c001835f:	73 e3                	jae    c0018344 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018361:	b8 a0 cd 02 c0       	mov    eax,0xc002cda0
c0018366:	e9 e0 00 00 00       	jmp    c001844b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001836b:	39 c7                	cmp    edi,eax
c001836d:	0f 84 d3 00 00 00    	je     c0018446 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018373:	40                   	inc    eax
c0018374:	3d d0 00 00 00       	cmp    eax,0xd0
c0018379:	74 09                	je     c0018384 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001837b:	89 f3                	mov    ebx,esi
c001837d:	80 fb 0f             	cmp    bl,0xf
c0018380:	75 f1                	jne    c0018373 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018382:	eb e7                	jmp    c001836b <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018384:	80 f9 10             	cmp    cl,0x10
c0018387:	75 14                	jne    c001839d <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018389:	8d 42 fc             	lea    eax,[edx-0x4]
c001838c:	83 e0 fb             	and    eax,0xfffffffb
c001838f:	3c 02                	cmp    al,0x2
c0018391:	76 34                	jbe    c00183c7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018393:	b8 41 b4 02 c0       	mov    eax,0xc002b441
c0018398:	80 fa 02             	cmp    dl,0x2
c001839b:	eb 24                	jmp    c00183c1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c001839d:	80 f9 11             	cmp    cl,0x11
c00183a0:	75 13                	jne    c00183b5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00183a2:	b8 41 b4 02 c0       	mov    eax,0xc002b441
c00183a7:	80 fa 03             	cmp    dl,0x3
c00183aa:	0f 85 9b 00 00 00    	jne    c001844b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183b0:	e9 91 00 00 00       	jmp    c0018446 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00183b5:	80 f9 12             	cmp    cl,0x12
c00183b8:	75 14                	jne    c00183ce <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00183ba:	b8 41 b4 02 c0       	mov    eax,0xc002b441
c00183bf:	fe ca                	dec    dl
c00183c1:	0f 85 84 00 00 00    	jne    c001844b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183c7:	b8 c0 cd 02 c0       	mov    eax,0xc002cdc0
c00183cc:	eb 7d                	jmp    c001844b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183ce:	80 f9 14             	cmp    cl,0x14
c00183d1:	75 12                	jne    c00183e5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00183d3:	4a                   	dec    edx
c00183d4:	b8 41 b4 02 c0       	mov    eax,0xc002b441
c00183d9:	80 fa 01             	cmp    dl,0x1
c00183dc:	77 6d                	ja     c001844b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183de:	b8 d0 cd 02 c0       	mov    eax,0xc002cdd0
c00183e3:	eb 66                	jmp    c001844b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183e5:	80 f9 15             	cmp    cl,0x15
c00183e8:	75 31                	jne    c001841b <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00183ea:	b8 e0 cd 02 c0       	mov    eax,0xc002cde0
c00183ef:	80 fa 01             	cmp    dl,0x1
c00183f2:	74 57                	je     c001844b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183f4:	b8 41 b4 02 c0       	mov    eax,0xc002b441
c00183f9:	80 fa 13             	cmp    dl,0x13
c00183fc:	76 0c                	jbe    c001840a <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00183fe:	80 fa 30             	cmp    dl,0x30
c0018401:	75 48                	jne    c001844b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018403:	b8 00 ce 02 c0       	mov    eax,0xc002ce00
c0018408:	eb 41                	jmp    c001844b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001840a:	b9 04 00 09 00       	mov    ecx,0x90004
c001840f:	0f a3 d1             	bt     ecx,edx
c0018412:	73 37                	jae    c001844b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018414:	b8 f0 cd 02 c0       	mov    eax,0xc002cdf0
c0018419:	eb 30                	jmp    c001844b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001841b:	b8 41 b4 02 c0       	mov    eax,0xc002b441
c0018420:	80 f9 16             	cmp    cl,0x16
c0018423:	75 26                	jne    c001844b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018425:	b8 10 ce 02 c0       	mov    eax,0xc002ce10
c001842a:	84 d2                	test   dl,dl
c001842c:	74 1d                	je     c001844b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001842e:	b8 41 b4 02 c0       	mov    eax,0xc002b441
c0018433:	80 fa 30             	cmp    dl,0x30
c0018436:	75 13                	jne    c001844b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018438:	b8 20 ce 02 c0       	mov    eax,0xc002ce20
c001843d:	eb 0c                	jmp    c001844b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001843f:	b8 40 cd 02 c0       	mov    eax,0xc002cd40
c0018444:	eb 05                	jmp    c001844b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018446:	b8 b0 cd 02 c0       	mov    eax,0xc002cdb0
c001844b:	5b                   	pop    ebx
c001844c:	5e                   	pop    esi
c001844d:	5f                   	pop    edi
c001844e:	5d                   	pop    ebp
c001844f:	c3                   	ret    

c0018450 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018450:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018454:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018458:	80 f9 04             	cmp    cl,0x4
c001845b:	75 6b                	jne    c00184c8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c001845d:	b8 a0 cb 02 c0       	mov    eax,0xc002cba0
c0018462:	80 fa 01             	cmp    dl,0x1
c0018465:	0f 86 92 02 00 00    	jbe    c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001846b:	b8 b0 cb 02 c0       	mov    eax,0xc002cbb0
c0018470:	80 fa 02             	cmp    dl,0x2
c0018473:	0f 84 84 02 00 00    	je     c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018479:	b8 c0 cb 02 c0       	mov    eax,0xc002cbc0
c001847e:	80 fa 03             	cmp    dl,0x3
c0018481:	0f 84 76 02 00 00    	je     c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018487:	b8 d0 cb 02 c0       	mov    eax,0xc002cbd0
c001848c:	80 fa 04             	cmp    dl,0x4
c001848f:	0f 84 68 02 00 00    	je     c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018495:	b8 e0 cb 02 c0       	mov    eax,0xc002cbe0
c001849a:	80 fa 05             	cmp    dl,0x5
c001849d:	0f 84 5a 02 00 00    	je     c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184a3:	b8 c0 cb 02 c0       	mov    eax,0xc002cbc0
c00184a8:	80 fa 07             	cmp    dl,0x7
c00184ab:	0f 84 4c 02 00 00    	je     c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184b1:	83 ea 08             	sub    edx,0x8
c00184b4:	b8 41 b4 02 c0       	mov    eax,0xc002b441
c00184b9:	80 fa 01             	cmp    dl,0x1
c00184bc:	0f 87 3b 02 00 00    	ja     c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184c2:	b8 f0 cb 02 c0       	mov    eax,0xc002cbf0
c00184c7:	c3                   	ret    
c00184c8:	80 f9 05             	cmp    cl,0x5
c00184cb:	75 45                	jne    c0018512 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00184cd:	8d 4a ff             	lea    ecx,[edx-0x1]
c00184d0:	b8 00 cc 02 c0       	mov    eax,0xc002cc00
c00184d5:	80 f9 02             	cmp    cl,0x2
c00184d8:	0f 86 1f 02 00 00    	jbe    c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184de:	80 fa 04             	cmp    dl,0x4
c00184e1:	0f 84 f3 01 00 00    	je     c00186da <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00184e7:	80 fa 07             	cmp    dl,0x7
c00184ea:	0f 84 0d 02 00 00    	je     c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184f0:	b8 10 cc 02 c0       	mov    eax,0xc002cc10
c00184f5:	80 fa 08             	cmp    dl,0x8
c00184f8:	0f 84 ff 01 00 00    	je     c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184fe:	b8 41 b4 02 c0       	mov    eax,0xc002b441
c0018503:	80 fa 09             	cmp    dl,0x9
c0018506:	0f 85 f1 01 00 00    	jne    c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001850c:	b8 20 cc 02 c0       	mov    eax,0xc002cc20
c0018511:	c3                   	ret    
c0018512:	80 f9 06             	cmp    cl,0x6
c0018515:	0f 85 85 01 00 00    	jne    c00186a0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c001851b:	b8 30 cc 02 c0       	mov    eax,0xc002cc30
c0018520:	80 fa 01             	cmp    dl,0x1
c0018523:	0f 84 d4 01 00 00    	je     c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018529:	8d 42 fb             	lea    eax,[edx-0x5]
c001852c:	3c 01                	cmp    al,0x1
c001852e:	0f 86 ac 01 00 00    	jbe    c00186e0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018534:	80 fa 03             	cmp    dl,0x3
c0018537:	0f 84 a3 01 00 00    	je     c00186e0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001853d:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018540:	b8 50 cc 02 c0       	mov    eax,0xc002cc50
c0018545:	80 f9 01             	cmp    cl,0x1
c0018548:	0f 86 af 01 00 00    	jbe    c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001854e:	80 fa 09             	cmp    dl,0x9
c0018551:	0f 84 8f 01 00 00    	je     c00186e6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018557:	8d 4a f6             	lea    ecx,[edx-0xa]
c001855a:	80 f9 01             	cmp    cl,0x1
c001855d:	0f 86 9a 01 00 00    	jbe    c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018563:	b8 60 cc 02 c0       	mov    eax,0xc002cc60
c0018568:	80 fa 0d             	cmp    dl,0xd
c001856b:	0f 84 8c 01 00 00    	je     c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018571:	b8 70 cc 02 c0       	mov    eax,0xc002cc70
c0018576:	80 fa 0e             	cmp    dl,0xe
c0018579:	0f 84 7e 01 00 00    	je     c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001857f:	b8 80 cc 02 c0       	mov    eax,0xc002cc80
c0018584:	80 fa 0f             	cmp    dl,0xf
c0018587:	0f 84 70 01 00 00    	je     c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001858d:	b8 60 cc 02 c0       	mov    eax,0xc002cc60
c0018592:	80 fa 15             	cmp    dl,0x15
c0018595:	0f 84 62 01 00 00    	je     c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001859b:	8d 4a ea             	lea    ecx,[edx-0x16]
c001859e:	b8 80 cc 02 c0       	mov    eax,0xc002cc80
c00185a3:	80 f9 01             	cmp    cl,0x1
c00185a6:	0f 86 51 01 00 00    	jbe    c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185ac:	80 fa 1a             	cmp    dl,0x1a
c00185af:	0f 84 37 01 00 00    	je     c00186ec <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00185b5:	80 fa 1c             	cmp    dl,0x1c
c00185b8:	0f 84 34 01 00 00    	je     c00186f2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00185be:	80 fa 1d             	cmp    dl,0x1d
c00185c1:	0f 84 36 01 00 00    	je     c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185c7:	b8 b0 cc 02 c0       	mov    eax,0xc002ccb0
c00185cc:	80 fa 25             	cmp    dl,0x25
c00185cf:	0f 84 28 01 00 00    	je     c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185d5:	8d 4a da             	lea    ecx,[edx-0x26]
c00185d8:	b8 a0 cc 02 c0       	mov    eax,0xc002cca0
c00185dd:	80 f9 01             	cmp    cl,0x1
c00185e0:	0f 86 17 01 00 00    	jbe    c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185e6:	b8 c0 cc 02 c0       	mov    eax,0xc002ccc0
c00185eb:	80 fa 2a             	cmp    dl,0x2a
c00185ee:	0f 84 09 01 00 00    	je     c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185f4:	b8 b0 cc 02 c0       	mov    eax,0xc002ccb0
c00185f9:	80 fa 2c             	cmp    dl,0x2c
c00185fc:	0f 84 fb 00 00 00    	je     c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018602:	b8 c0 cc 02 c0       	mov    eax,0xc002ccc0
c0018607:	80 fa 2d             	cmp    dl,0x2d
c001860a:	0f 84 ed 00 00 00    	je     c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018610:	b8 90 cc 02 c0       	mov    eax,0xc002cc90
c0018615:	80 fa 2e             	cmp    dl,0x2e
c0018618:	0f 84 df 00 00 00    	je     c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001861e:	b8 b0 cc 02 c0       	mov    eax,0xc002ccb0
c0018623:	80 fa 2f             	cmp    dl,0x2f
c0018626:	0f 84 d1 00 00 00    	je     c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001862c:	8d 4a cb             	lea    ecx,[edx-0x35]
c001862f:	b8 a0 cc 02 c0       	mov    eax,0xc002cca0
c0018634:	80 f9 01             	cmp    cl,0x1
c0018637:	0f 86 c0 00 00 00    	jbe    c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001863d:	b8 d0 cc 02 c0       	mov    eax,0xc002ccd0
c0018642:	80 fa 37             	cmp    dl,0x37
c0018645:	0f 84 b2 00 00 00    	je     c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001864b:	b8 e0 cc 02 c0       	mov    eax,0xc002cce0
c0018650:	80 fa 3a             	cmp    dl,0x3a
c0018653:	0f 84 a4 00 00 00    	je     c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018659:	b8 f0 cc 02 c0       	mov    eax,0xc002ccf0
c001865e:	80 fa 3c             	cmp    dl,0x3c
c0018661:	0f 84 96 00 00 00    	je     c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018667:	b8 00 cd 02 c0       	mov    eax,0xc002cd00
c001866c:	80 fa 3d             	cmp    dl,0x3d
c001866f:	0f 84 88 00 00 00    	je     c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018675:	b8 e0 cc 02 c0       	mov    eax,0xc002cce0
c001867a:	80 fa 3e             	cmp    dl,0x3e
c001867d:	74 7e                	je     c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001867f:	8d 42 bb             	lea    eax,[edx-0x45]
c0018682:	3c 01                	cmp    al,0x1
c0018684:	76 72                	jbe    c00186f8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018686:	80 fa 3f             	cmp    dl,0x3f
c0018689:	74 6d                	je     c00186f8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001868b:	80 fa 4a             	cmp    dl,0x4a
c001868e:	74 0a                	je     c001869a <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018690:	b8 41 b4 02 c0       	mov    eax,0xc002b441
c0018695:	80 fa 4d             	cmp    dl,0x4d
c0018698:	75 63                	jne    c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001869a:	b8 d0 cc 02 c0       	mov    eax,0xc002ccd0
c001869f:	c3                   	ret    
c00186a0:	b8 41 b4 02 c0       	mov    eax,0xc002b441
c00186a5:	80 f9 0b             	cmp    cl,0xb
c00186a8:	75 0a                	jne    c00186b4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00186aa:	fe ca                	dec    dl
c00186ac:	75 4f                	jne    c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186ae:	b8 10 cd 02 c0       	mov    eax,0xc002cd10
c00186b3:	c3                   	ret    
c00186b4:	80 f9 0f             	cmp    cl,0xf
c00186b7:	75 44                	jne    c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186b9:	b8 20 cd 02 c0       	mov    eax,0xc002cd20
c00186be:	80 fa 02             	cmp    dl,0x2
c00186c1:	76 3a                	jbe    c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186c3:	8d 42 fd             	lea    eax,[edx-0x3]
c00186c6:	3c 01                	cmp    al,0x1
c00186c8:	76 0a                	jbe    c00186d4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00186ca:	b8 41 b4 02 c0       	mov    eax,0xc002b441
c00186cf:	80 fa 06             	cmp    dl,0x6
c00186d2:	75 29                	jne    c00186fd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186d4:	b8 30 cd 02 c0       	mov    eax,0xc002cd30
c00186d9:	c3                   	ret    
c00186da:	b8 10 cc 02 c0       	mov    eax,0xc002cc10
c00186df:	c3                   	ret    
c00186e0:	b8 40 cc 02 c0       	mov    eax,0xc002cc40
c00186e5:	c3                   	ret    
c00186e6:	b8 60 cc 02 c0       	mov    eax,0xc002cc60
c00186eb:	c3                   	ret    
c00186ec:	b8 90 cc 02 c0       	mov    eax,0xc002cc90
c00186f1:	c3                   	ret    
c00186f2:	b8 a0 cc 02 c0       	mov    eax,0xc002cca0
c00186f7:	c3                   	ret    
c00186f8:	b8 f0 cc 02 c0       	mov    eax,0xc002ccf0
c00186fd:	c3                   	ret    

c00186fe <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00186fe:	60                   	pusha  
c00186ff:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018703:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018707:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001870b:	9c                   	pushf  
c001870c:	fa                   	cli    
c001870d:	0f 09                	wbinvd 
c001870f:	0f 30                	wrmsr  
c0018711:	9d                   	popf   
c0018712:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018716:	89 02                	mov    DWORD PTR [edx],eax
c0018718:	61                   	popa   
c0018719:	c3                   	ret    

c001871a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001871a:	60                   	pusha  
c001871b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001871f:	9c                   	pushf  
c0018720:	fa                   	cli    
c0018721:	0f 09                	wbinvd 
c0018723:	31 c0                	xor    eax,eax
c0018725:	31 d2                	xor    edx,edx
c0018727:	0f 32                	rdmsr  
c0018729:	9d                   	popf   
c001872a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001872e:	89 02                	mov    DWORD PTR [edx],eax
c0018730:	61                   	popa   
c0018731:	c3                   	ret    

c0018732 <CPU::AMD_K6_writeback(int, int, int)>:
c0018732:	56                   	push   esi
c0018733:	53                   	push   ebx
c0018734:	83 ec 10             	sub    esp,0x10
c0018737:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001873b:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018740:	75 5d                	jne    c001879f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018742:	83 f8 08             	cmp    eax,0x8
c0018745:	75 09                	jne    c0018750 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018747:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001874c:	7e 13                	jle    c0018761 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001874e:	eb 30                	jmp    c0018780 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018750:	83 f8 06             	cmp    eax,0x6
c0018753:	7c 4a                	jl     c001879f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018755:	83 f8 07             	cmp    eax,0x7
c0018758:	7e 07                	jle    c0018761 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001875a:	83 f8 09             	cmp    eax,0x9
c001875d:	74 21                	je     c0018780 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001875f:	eb 3e                	jmp    c001879f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018761:	89 e6                	mov    esi,esp
c0018763:	8b 1d 68 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d968
c0018769:	56                   	push   esi
c001876a:	c1 eb 15             	shr    ebx,0x15
c001876d:	68 82 00 00 c0       	push   0xc0000082
c0018772:	83 e3 7e             	and    ebx,0x7e
c0018775:	e8 a0 ff ff ff       	call   c001871a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001877a:	56                   	push   esi
c001877b:	6a 00                	push   0x0
c001877d:	53                   	push   ebx
c001877e:	eb 12                	jmp    c0018792 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018780:	89 e3                	mov    ebx,esp
c0018782:	53                   	push   ebx
c0018783:	68 82 00 00 c0       	push   0xc0000082
c0018788:	e8 8d ff ff ff       	call   c001871a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001878d:	53                   	push   ebx
c001878e:	6a 00                	push   0x0
c0018790:	6a 00                	push   0x0
c0018792:	68 82 00 00 c0       	push   0xc0000082
c0018797:	e8 62 ff ff ff       	call   c00186fe <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001879c:	83 c4 18             	add    esp,0x18
c001879f:	83 c4 10             	add    esp,0x10
c00187a2:	5b                   	pop    ebx
c00187a3:	5e                   	pop    esi
c00187a4:	c3                   	ret    
c00187a5:	90                   	nop

c00187a6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00187a6:	55                   	push   ebp
c00187a7:	57                   	push   edi
c00187a8:	56                   	push   esi
c00187a9:	53                   	push   ebx
c00187aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00187ae:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00187b2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00187b6:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00187ba:	39 05 40 ce 02 c0    	cmp    DWORD PTR ds:0xc002ce40,eax
c00187c0:	75 23                	jne    c00187e5 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00187c2:	a1 4c 04 03 c0       	mov    eax,ds:0xc003044c
c00187c7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00187cb:	89 06                	mov    DWORD PTR [esi],eax
c00187cd:	a1 48 04 03 c0       	mov    eax,ds:0xc0030448
c00187d2:	89 07                	mov    DWORD PTR [edi],eax
c00187d4:	a1 44 04 03 c0       	mov    eax,ds:0xc0030444
c00187d9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00187dc:	a1 40 04 03 c0       	mov    eax,ds:0xc0030440
c00187e1:	89 02                	mov    DWORD PTR [edx],eax
c00187e3:	eb 3f                	jmp    c0018824 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00187e5:	31 c9                	xor    ecx,ecx
c00187e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00187eb:	0f a2                	cpuid  
c00187ed:	89 06                	mov    DWORD PTR [esi],eax
c00187ef:	89 1f                	mov    DWORD PTR [edi],ebx
c00187f1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00187f5:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00187f8:	89 10                	mov    DWORD PTR [eax],edx
c00187fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00187fe:	a3 40 ce 02 c0       	mov    ds:0xc002ce40,eax
c0018803:	8b 06                	mov    eax,DWORD PTR [esi]
c0018805:	a3 4c 04 03 c0       	mov    ds:0xc003044c,eax
c001880a:	8b 07                	mov    eax,DWORD PTR [edi]
c001880c:	a3 48 04 03 c0       	mov    ds:0xc0030448,eax
c0018811:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018814:	a3 44 04 03 c0       	mov    ds:0xc0030444,eax
c0018819:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001881d:	8b 00                	mov    eax,DWORD PTR [eax]
c001881f:	a3 40 04 03 c0       	mov    ds:0xc0030440,eax
c0018824:	5b                   	pop    ebx
c0018825:	5e                   	pop    esi
c0018826:	5f                   	pop    edi
c0018827:	5d                   	pop    ebp
c0018828:	c3                   	ret    
c0018829:	90                   	nop

c001882a <CPU::cpuidCheckEDX(unsigned int)>:
c001882a:	83 ec 10             	sub    esp,0x10
c001882d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018831:	50                   	push   eax
c0018832:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018836:	50                   	push   eax
c0018837:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001883b:	50                   	push   eax
c001883c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018840:	50                   	push   eax
c0018841:	6a 01                	push   0x1
c0018843:	e8 5e ff ff ff       	call   c00187a6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018848:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001884c:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018850:	0f 95 c0             	setne  al
c0018853:	83 c4 24             	add    esp,0x24
c0018856:	c3                   	ret    
c0018857:	90                   	nop

c0018858 <CPU::cpuidCheckECX(unsigned int)>:
c0018858:	83 ec 10             	sub    esp,0x10
c001885b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001885f:	50                   	push   eax
c0018860:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018864:	50                   	push   eax
c0018865:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018869:	50                   	push   eax
c001886a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001886e:	50                   	push   eax
c001886f:	6a 01                	push   0x1
c0018871:	e8 30 ff ff ff       	call   c00187a6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018876:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001887a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001887e:	0f 95 c0             	setne  al
c0018881:	83 c4 24             	add    esp,0x24
c0018884:	c3                   	ret    
c0018885:	90                   	nop

c0018886 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018886:	83 ec 10             	sub    esp,0x10
c0018889:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001888d:	50                   	push   eax
c001888e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018892:	50                   	push   eax
c0018893:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018897:	50                   	push   eax
c0018898:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001889c:	50                   	push   eax
c001889d:	6a 07                	push   0x7
c001889f:	e8 02 ff ff ff       	call   c00187a6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188a8:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00188ac:	0f 95 c0             	setne  al
c00188af:	83 c4 24             	add    esp,0x24
c00188b2:	c3                   	ret    
c00188b3:	90                   	nop

c00188b4 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00188b4:	83 ec 10             	sub    esp,0x10
c00188b7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188bb:	50                   	push   eax
c00188bc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188c0:	50                   	push   eax
c00188c1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188c5:	50                   	push   eax
c00188c6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188ca:	50                   	push   eax
c00188cb:	6a 07                	push   0x7
c00188cd:	e8 d4 fe ff ff       	call   c00187a6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188d6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00188da:	0f 95 c0             	setne  al
c00188dd:	83 c4 24             	add    esp,0x24
c00188e0:	c3                   	ret    
c00188e1:	90                   	nop

c00188e2 <CPU::CPU()>:
c00188e2:	83 ec 0c             	sub    esp,0xc
c00188e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188e9:	83 ec 08             	sub    esp,0x8
c00188ec:	68 41 b4 02 c0       	push   0xc002b441
c00188f1:	50                   	push   eax
c00188f2:	e8 13 b4 ff ff       	call   c0013d0a <Device::Device(char const*)>
c00188f7:	83 c4 10             	add    esp,0x10
c00188fa:	ba 18 b5 02 c0       	mov    edx,0xc002b518
c00188ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018903:	89 10                	mov    DWORD PTR [eax],edx
c0018905:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018909:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018917:	05 78 01 00 00       	add    eax,0x178
c001891c:	83 ec 0c             	sub    esp,0xc
c001891f:	50                   	push   eax
c0018920:	e8 a7 64 ff ff       	call   c000edcc <GDT::GDT()>
c0018925:	83 c4 10             	add    esp,0x10
c0018928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001892c:	05 7c 09 00 00       	add    eax,0x97c
c0018931:	83 ec 0c             	sub    esp,0xc
c0018934:	50                   	push   eax
c0018935:	e8 e2 66 ff ff       	call   c000f01c <IDT::IDT()>
c001893a:	83 c4 10             	add    esp,0x10
c001893d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018941:	05 7c 11 00 00       	add    eax,0x117c
c0018946:	83 ec 0c             	sub    esp,0xc
c0018949:	50                   	push   eax
c001894a:	e8 19 82 ff ff       	call   c0010b68 <TSS::TSS()>
c001894f:	83 c4 10             	add    esp,0x10
c0018952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018956:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c001895d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018961:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001896b:	90                   	nop
c001896c:	83 c4 0c             	add    esp,0xc
c001896f:	c3                   	ret    

c0018970 <CPU::displayFeatures()>:
c0018970:	c3                   	ret    
c0018971:	90                   	nop

c0018972 <CPU::detectFeatures()>:
c0018972:	55                   	push   ebp
c0018973:	57                   	push   edi
c0018974:	56                   	push   esi
c0018975:	53                   	push   ebx
c0018976:	83 ec 50             	sub    esp,0x50
c0018979:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c001897d:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018987:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001898e:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0018994:	6a 0d                	push   0xd
c0018996:	6a 00                	push   0x0
c0018998:	55                   	push   ebp
c0018999:	e8 b2 7d fe ff       	call   c0000750 <memset>
c001899e:	83 c4 10             	add    esp,0x10
c00189a1:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c00189a6:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00189ad:	0f 84 22 09 00 00    	je     c00192d5 <CPU::detectFeatures()+0x963>
c00189b3:	83 ec 0c             	sub    esp,0xc
c00189b6:	89 ef                	mov    edi,ebp
c00189b8:	6a 10                	push   0x10
c00189ba:	e8 6b fe ff ff       	call   c001882a <CPU::cpuidCheckEDX(unsigned int)>
c00189bf:	83 e0 01             	and    eax,0x1
c00189c2:	8d 14 00             	lea    edx,[eax+eax*1]
c00189c5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00189cb:	83 e0 fd             	and    eax,0xfffffffd
c00189ce:	09 d0                	or     eax,edx
c00189d0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00189d6:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00189dd:	e8 48 fe ff ff       	call   c001882a <CPU::cpuidCheckEDX(unsigned int)>
c00189e2:	83 e0 01             	and    eax,0x1
c00189e5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00189ec:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00189f2:	83 e0 fb             	and    eax,0xfffffffb
c00189f5:	09 d0                	or     eax,edx
c00189f7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00189fd:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018a04:	e8 21 fe ff ff       	call   c001882a <CPU::cpuidCheckEDX(unsigned int)>
c0018a09:	83 e0 01             	and    eax,0x1
c0018a0c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018a13:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a19:	83 e0 f7             	and    eax,0xfffffff7
c0018a1c:	09 d0                	or     eax,edx
c0018a1e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a24:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018a2b:	e8 fa fd ff ff       	call   c001882a <CPU::cpuidCheckEDX(unsigned int)>
c0018a30:	83 e0 01             	and    eax,0x1
c0018a33:	c1 e0 04             	shl    eax,0x4
c0018a36:	88 c2                	mov    dl,al
c0018a38:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a3e:	83 e0 ef             	and    eax,0xffffffef
c0018a41:	09 d0                	or     eax,edx
c0018a43:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a49:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018a50:	e8 d5 fd ff ff       	call   c001882a <CPU::cpuidCheckEDX(unsigned int)>
c0018a55:	83 e0 01             	and    eax,0x1
c0018a58:	c1 e0 05             	shl    eax,0x5
c0018a5b:	88 c2                	mov    dl,al
c0018a5d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a63:	83 e0 df             	and    eax,0xffffffdf
c0018a66:	09 d0                	or     eax,edx
c0018a68:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a6e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018a75:	e8 b0 fd ff ff       	call   c001882a <CPU::cpuidCheckEDX(unsigned int)>
c0018a7a:	83 e0 01             	and    eax,0x1
c0018a7d:	8d 14 00             	lea    edx,[eax+eax*1]
c0018a80:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018a86:	83 e0 fd             	and    eax,0xfffffffd
c0018a89:	09 d0                	or     eax,edx
c0018a8b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018a91:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018a98:	e8 8d fd ff ff       	call   c001882a <CPU::cpuidCheckEDX(unsigned int)>
c0018a9d:	83 e0 01             	and    eax,0x1
c0018aa0:	c1 e0 06             	shl    eax,0x6
c0018aa3:	88 c2                	mov    dl,al
c0018aa5:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018aab:	83 e0 bf             	and    eax,0xffffffbf
c0018aae:	09 d0                	or     eax,edx
c0018ab0:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018ab6:	58                   	pop    eax
c0018ab7:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018abb:	50                   	push   eax
c0018abc:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ac0:	50                   	push   eax
c0018ac1:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018ac5:	56                   	push   esi
c0018ac6:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018aca:	50                   	push   eax
c0018acb:	6a 00                	push   0x0
c0018acd:	e8 d4 fc ff ff       	call   c00187a6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ad2:	b8 04 00 00 00       	mov    eax,0x4
c0018ad7:	89 c1                	mov    ecx,eax
c0018ad9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018adb:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018ae1:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018ae5:	89 c1                	mov    ecx,eax
c0018ae7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018ae9:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018aef:	8d 74 24 38          	lea    esi,[esp+0x38]
c0018af3:	89 c1                	mov    ecx,eax
c0018af5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018af7:	83 c4 18             	add    esp,0x18
c0018afa:	68 ec b2 02 c0       	push   0xc002b2ec
c0018aff:	55                   	push   ebp
c0018b00:	e8 93 7d fe ff       	call   c0000898 <strcmp>
c0018b05:	83 c4 10             	add    esp,0x10
c0018b08:	85 c0                	test   eax,eax
c0018b0a:	75 0f                	jne    c0018b1b <CPU::detectFeatures()+0x1a9>
c0018b0c:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018b16:	e9 22 02 00 00       	jmp    c0018d3d <CPU::detectFeatures()+0x3cb>
c0018b1b:	50                   	push   eax
c0018b1c:	50                   	push   eax
c0018b1d:	68 f9 b2 02 c0       	push   0xc002b2f9
c0018b22:	55                   	push   ebp
c0018b23:	e8 70 7d fe ff       	call   c0000898 <strcmp>
c0018b28:	83 c4 10             	add    esp,0x10
c0018b2b:	85 c0                	test   eax,eax
c0018b2d:	74 dd                	je     c0018b0c <CPU::detectFeatures()+0x19a>
c0018b2f:	50                   	push   eax
c0018b30:	50                   	push   eax
c0018b31:	68 06 b3 02 c0       	push   0xc002b306
c0018b36:	55                   	push   ebp
c0018b37:	e8 5c 7d fe ff       	call   c0000898 <strcmp>
c0018b3c:	83 c4 10             	add    esp,0x10
c0018b3f:	85 c0                	test   eax,eax
c0018b41:	74 2a                	je     c0018b6d <CPU::detectFeatures()+0x1fb>
c0018b43:	50                   	push   eax
c0018b44:	50                   	push   eax
c0018b45:	68 13 b3 02 c0       	push   0xc002b313
c0018b4a:	55                   	push   ebp
c0018b4b:	e8 48 7d fe ff       	call   c0000898 <strcmp>
c0018b50:	83 c4 10             	add    esp,0x10
c0018b53:	85 c0                	test   eax,eax
c0018b55:	74 16                	je     c0018b6d <CPU::detectFeatures()+0x1fb>
c0018b57:	50                   	push   eax
c0018b58:	50                   	push   eax
c0018b59:	68 20 b3 02 c0       	push   0xc002b320
c0018b5e:	55                   	push   ebp
c0018b5f:	e8 34 7d fe ff       	call   c0000898 <strcmp>
c0018b64:	83 c4 10             	add    esp,0x10
c0018b67:	85 c0                	test   eax,eax
c0018b69:	74 48                	je     c0018bb3 <CPU::detectFeatures()+0x241>
c0018b6b:	eb 0f                	jmp    c0018b7c <CPU::detectFeatures()+0x20a>
c0018b6d:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018b77:	e9 c1 01 00 00       	jmp    c0018d3d <CPU::detectFeatures()+0x3cb>
c0018b7c:	50                   	push   eax
c0018b7d:	50                   	push   eax
c0018b7e:	68 2d b3 02 c0       	push   0xc002b32d
c0018b83:	55                   	push   ebp
c0018b84:	e8 0f 7d fe ff       	call   c0000898 <strcmp>
c0018b89:	83 c4 10             	add    esp,0x10
c0018b8c:	85 c0                	test   eax,eax
c0018b8e:	74 23                	je     c0018bb3 <CPU::detectFeatures()+0x241>
c0018b90:	57                   	push   edi
c0018b91:	57                   	push   edi
c0018b92:	68 3a b3 02 c0       	push   0xc002b33a
c0018b97:	55                   	push   ebp
c0018b98:	e8 fb 7c fe ff       	call   c0000898 <strcmp>
c0018b9d:	83 c4 10             	add    esp,0x10
c0018ba0:	85 c0                	test   eax,eax
c0018ba2:	75 1e                	jne    c0018bc2 <CPU::detectFeatures()+0x250>
c0018ba4:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018bae:	e9 8a 01 00 00       	jmp    c0018d3d <CPU::detectFeatures()+0x3cb>
c0018bb3:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018bbd:	e9 7b 01 00 00       	jmp    c0018d3d <CPU::detectFeatures()+0x3cb>
c0018bc2:	56                   	push   esi
c0018bc3:	56                   	push   esi
c0018bc4:	68 47 b3 02 c0       	push   0xc002b347
c0018bc9:	55                   	push   ebp
c0018bca:	e8 c9 7c fe ff       	call   c0000898 <strcmp>
c0018bcf:	83 c4 10             	add    esp,0x10
c0018bd2:	85 c0                	test   eax,eax
c0018bd4:	75 0f                	jne    c0018be5 <CPU::detectFeatures()+0x273>
c0018bd6:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018be0:	e9 58 01 00 00       	jmp    c0018d3d <CPU::detectFeatures()+0x3cb>
c0018be5:	51                   	push   ecx
c0018be6:	51                   	push   ecx
c0018be7:	68 06 b3 02 c0       	push   0xc002b306
c0018bec:	55                   	push   ebp
c0018bed:	e8 a6 7c fe ff       	call   c0000898 <strcmp>
c0018bf2:	83 c4 10             	add    esp,0x10
c0018bf5:	85 c0                	test   eax,eax
c0018bf7:	75 0f                	jne    c0018c08 <CPU::detectFeatures()+0x296>
c0018bf9:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018c03:	e9 35 01 00 00       	jmp    c0018d3d <CPU::detectFeatures()+0x3cb>
c0018c08:	52                   	push   edx
c0018c09:	52                   	push   edx
c0018c0a:	68 54 b3 02 c0       	push   0xc002b354
c0018c0f:	55                   	push   ebp
c0018c10:	e8 83 7c fe ff       	call   c0000898 <strcmp>
c0018c15:	83 c4 10             	add    esp,0x10
c0018c18:	85 c0                	test   eax,eax
c0018c1a:	75 0f                	jne    c0018c2b <CPU::detectFeatures()+0x2b9>
c0018c1c:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018c26:	e9 12 01 00 00       	jmp    c0018d3d <CPU::detectFeatures()+0x3cb>
c0018c2b:	50                   	push   eax
c0018c2c:	50                   	push   eax
c0018c2d:	68 61 b3 02 c0       	push   0xc002b361
c0018c32:	55                   	push   ebp
c0018c33:	e8 60 7c fe ff       	call   c0000898 <strcmp>
c0018c38:	83 c4 10             	add    esp,0x10
c0018c3b:	85 c0                	test   eax,eax
c0018c3d:	75 0f                	jne    c0018c4e <CPU::detectFeatures()+0x2dc>
c0018c3f:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018c49:	e9 ef 00 00 00       	jmp    c0018d3d <CPU::detectFeatures()+0x3cb>
c0018c4e:	50                   	push   eax
c0018c4f:	50                   	push   eax
c0018c50:	68 6e b3 02 c0       	push   0xc002b36e
c0018c55:	55                   	push   ebp
c0018c56:	e8 3d 7c fe ff       	call   c0000898 <strcmp>
c0018c5b:	83 c4 10             	add    esp,0x10
c0018c5e:	85 c0                	test   eax,eax
c0018c60:	75 0f                	jne    c0018c71 <CPU::detectFeatures()+0x2ff>
c0018c62:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018c6c:	e9 cc 00 00 00       	jmp    c0018d3d <CPU::detectFeatures()+0x3cb>
c0018c71:	50                   	push   eax
c0018c72:	50                   	push   eax
c0018c73:	68 7b b3 02 c0       	push   0xc002b37b
c0018c78:	55                   	push   ebp
c0018c79:	e8 1a 7c fe ff       	call   c0000898 <strcmp>
c0018c7e:	83 c4 10             	add    esp,0x10
c0018c81:	85 c0                	test   eax,eax
c0018c83:	75 0f                	jne    c0018c94 <CPU::detectFeatures()+0x322>
c0018c85:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018c8f:	e9 a9 00 00 00       	jmp    c0018d3d <CPU::detectFeatures()+0x3cb>
c0018c94:	50                   	push   eax
c0018c95:	50                   	push   eax
c0018c96:	68 88 b3 02 c0       	push   0xc002b388
c0018c9b:	55                   	push   ebp
c0018c9c:	e8 f7 7b fe ff       	call   c0000898 <strcmp>
c0018ca1:	83 c4 10             	add    esp,0x10
c0018ca4:	85 c0                	test   eax,eax
c0018ca6:	75 0f                	jne    c0018cb7 <CPU::detectFeatures()+0x345>
c0018ca8:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018cb2:	e9 86 00 00 00       	jmp    c0018d3d <CPU::detectFeatures()+0x3cb>
c0018cb7:	50                   	push   eax
c0018cb8:	50                   	push   eax
c0018cb9:	68 95 b3 02 c0       	push   0xc002b395
c0018cbe:	55                   	push   ebp
c0018cbf:	e8 d4 7b fe ff       	call   c0000898 <strcmp>
c0018cc4:	83 c4 10             	add    esp,0x10
c0018cc7:	85 c0                	test   eax,eax
c0018cc9:	75 0c                	jne    c0018cd7 <CPU::detectFeatures()+0x365>
c0018ccb:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018cd5:	eb 66                	jmp    c0018d3d <CPU::detectFeatures()+0x3cb>
c0018cd7:	50                   	push   eax
c0018cd8:	50                   	push   eax
c0018cd9:	68 a2 b3 02 c0       	push   0xc002b3a2
c0018cde:	55                   	push   ebp
c0018cdf:	e8 b4 7b fe ff       	call   c0000898 <strcmp>
c0018ce4:	83 c4 10             	add    esp,0x10
c0018ce7:	85 c0                	test   eax,eax
c0018ce9:	75 0c                	jne    c0018cf7 <CPU::detectFeatures()+0x385>
c0018ceb:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018cf5:	eb 46                	jmp    c0018d3d <CPU::detectFeatures()+0x3cb>
c0018cf7:	57                   	push   edi
c0018cf8:	57                   	push   edi
c0018cf9:	68 af b3 02 c0       	push   0xc002b3af
c0018cfe:	55                   	push   ebp
c0018cff:	e8 94 7b fe ff       	call   c0000898 <strcmp>
c0018d04:	83 c4 10             	add    esp,0x10
c0018d07:	85 c0                	test   eax,eax
c0018d09:	74 e0                	je     c0018ceb <CPU::detectFeatures()+0x379>
c0018d0b:	56                   	push   esi
c0018d0c:	56                   	push   esi
c0018d0d:	68 bc b3 02 c0       	push   0xc002b3bc
c0018d12:	55                   	push   ebp
c0018d13:	e8 80 7b fe ff       	call   c0000898 <strcmp>
c0018d18:	83 c4 10             	add    esp,0x10
c0018d1b:	85 c0                	test   eax,eax
c0018d1d:	74 cc                	je     c0018ceb <CPU::detectFeatures()+0x379>
c0018d1f:	51                   	push   ecx
c0018d20:	51                   	push   ecx
c0018d21:	68 c9 b3 02 c0       	push   0xc002b3c9
c0018d26:	55                   	push   ebp
c0018d27:	e8 6c 7b fe ff       	call   c0000898 <strcmp>
c0018d2c:	83 c4 10             	add    esp,0x10
c0018d2f:	85 c0                	test   eax,eax
c0018d31:	74 b8                	je     c0018ceb <CPU::detectFeatures()+0x379>
c0018d33:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018d3d:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018d42:	0f 86 be 00 00 00    	jbe    c0018e06 <CPU::detectFeatures()+0x494>
c0018d48:	83 ec 0c             	sub    esp,0xc
c0018d4b:	68 80 00 00 00       	push   0x80
c0018d50:	e8 31 fb ff ff       	call   c0018886 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018d55:	83 e0 01             	and    eax,0x1
c0018d58:	c1 e0 06             	shl    eax,0x6
c0018d5b:	88 c2                	mov    dl,al
c0018d5d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d63:	83 e0 bf             	and    eax,0xffffffbf
c0018d66:	09 d0                	or     eax,edx
c0018d68:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d6e:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018d75:	e8 0c fb ff ff       	call   c0018886 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018d7a:	83 e0 01             	and    eax,0x1
c0018d7d:	c1 e0 04             	shl    eax,0x4
c0018d80:	88 c2                	mov    dl,al
c0018d82:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018d88:	83 e0 ef             	and    eax,0xffffffef
c0018d8b:	09 d0                	or     eax,edx
c0018d8d:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018d93:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018d9a:	e8 e7 fa ff ff       	call   c0018886 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018d9f:	c1 e0 07             	shl    eax,0x7
c0018da2:	88 c2                	mov    dl,al
c0018da4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018daa:	83 e0 7f             	and    eax,0x7f
c0018dad:	09 d0                	or     eax,edx
c0018daf:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018db5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018dbc:	e8 f3 fa ff ff       	call   c00188b4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018dc1:	83 e0 01             	and    eax,0x1
c0018dc4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018dcb:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018dd1:	83 e0 f7             	and    eax,0xfffffff7
c0018dd4:	09 d0                	or     eax,edx
c0018dd6:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018ddc:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018de3:	e8 cc fa ff ff       	call   c00188b4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018de8:	83 c4 10             	add    esp,0x10
c0018deb:	83 e0 01             	and    eax,0x1
c0018dee:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018df5:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018dfb:	83 e0 fb             	and    eax,0xfffffffb
c0018dfe:	09 d0                	or     eax,edx
c0018e00:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018e06:	83 ec 0c             	sub    esp,0xc
c0018e09:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e0d:	50                   	push   eax
c0018e0e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e12:	50                   	push   eax
c0018e13:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018e17:	56                   	push   esi
c0018e18:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e1c:	50                   	push   eax
c0018e1d:	6a 01                	push   0x1
c0018e1f:	e8 82 f9 ff ff       	call   c00187a6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e24:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018e28:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018e2e:	88 ca                	mov    dl,cl
c0018e30:	83 e0 f0             	and    eax,0xfffffff0
c0018e33:	83 e2 0f             	and    edx,0xf
c0018e36:	09 d0                	or     eax,edx
c0018e38:	88 ca                	mov    dl,cl
c0018e3a:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018e40:	c0 ea 04             	shr    dl,0x4
c0018e43:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018e47:	0f b6 c2             	movzx  eax,dl
c0018e4a:	83 c4 20             	add    esp,0x20
c0018e4d:	c1 e0 06             	shl    eax,0x6
c0018e50:	89 c7                	mov    edi,eax
c0018e52:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e58:	66 25 3f c0          	and    ax,0xc03f
c0018e5c:	09 f8                	or     eax,edi
c0018e5e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018e65:	89 c8                	mov    eax,ecx
c0018e67:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0018e6e:	c1 e8 08             	shr    eax,0x8
c0018e71:	83 e5 3f             	and    ebp,0x3f
c0018e74:	83 e0 0f             	and    eax,0xf
c0018e77:	89 c7                	mov    edi,eax
c0018e79:	c1 e7 06             	shl    edi,0x6
c0018e7c:	09 ef                	or     edi,ebp
c0018e7e:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0018e85:	89 fa                	mov    edx,edi
c0018e87:	83 e5 c0             	and    ebp,0xffffffc0
c0018e8a:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018e90:	88 c2                	mov    dl,al
c0018e92:	c0 ea 02             	shr    dl,0x2
c0018e95:	89 d7                	mov    edi,edx
c0018e97:	09 ef                	or     edi,ebp
c0018e99:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018e9f:	89 fa                	mov    edx,edi
c0018ea1:	83 e5 cf             	and    ebp,0xffffffcf
c0018ea4:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018eaa:	89 cf                	mov    edi,ecx
c0018eac:	c1 ef 0c             	shr    edi,0xc
c0018eaf:	83 e7 03             	and    edi,0x3
c0018eb2:	c1 e7 04             	shl    edi,0x4
c0018eb5:	09 ef                	or     edi,ebp
c0018eb7:	3c 06                	cmp    al,0x6
c0018eb9:	89 fa                	mov    edx,edi
c0018ebb:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018ec1:	74 04                	je     c0018ec7 <CPU::detectFeatures()+0x555>
c0018ec3:	3c 0f                	cmp    al,0xf
c0018ec5:	75 5c                	jne    c0018f23 <CPU::detectFeatures()+0x5b1>
c0018ec7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018ecb:	89 cf                	mov    edi,ecx
c0018ecd:	c1 ef 10             	shr    edi,0x10
c0018ed0:	c1 e7 04             	shl    edi,0x4
c0018ed3:	09 fa                	or     edx,edi
c0018ed5:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0018edb:	0f b6 d2             	movzx  edx,dl
c0018ede:	66 81 e7 3f c0       	and    di,0xc03f
c0018ee3:	c1 e2 06             	shl    edx,0x6
c0018ee6:	09 fa                	or     edx,edi
c0018ee8:	3c 0f                	cmp    al,0xf
c0018eea:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018ef1:	75 30                	jne    c0018f23 <CPU::detectFeatures()+0x5b1>
c0018ef3:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018ef9:	c1 e9 14             	shr    ecx,0x14
c0018efc:	83 e0 3f             	and    eax,0x3f
c0018eff:	83 c1 0f             	add    ecx,0xf
c0018f02:	88 ca                	mov    dl,cl
c0018f04:	c0 e9 02             	shr    cl,0x2
c0018f07:	c1 e2 06             	shl    edx,0x6
c0018f0a:	09 d0                	or     eax,edx
c0018f0c:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018f12:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018f18:	83 e0 c0             	and    eax,0xffffffc0
c0018f1b:	09 c1                	or     ecx,eax
c0018f1d:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018f23:	83 ec 0c             	sub    esp,0xc
c0018f26:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018f2d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f31:	50                   	push   eax
c0018f32:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018f36:	55                   	push   ebp
c0018f37:	56                   	push   esi
c0018f38:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018f3c:	57                   	push   edi
c0018f3d:	68 00 00 00 80       	push   0x80000000
c0018f42:	e8 5f f8 ff ff       	call   c00187a6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f47:	83 c4 20             	add    esp,0x20
c0018f4a:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018f52:	76 22                	jbe    c0018f76 <CPU::detectFeatures()+0x604>
c0018f54:	83 ec 0c             	sub    esp,0xc
c0018f57:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f5b:	50                   	push   eax
c0018f5c:	55                   	push   ebp
c0018f5d:	56                   	push   esi
c0018f5e:	57                   	push   edi
c0018f5f:	68 01 00 00 80       	push   0x80000001
c0018f64:	e8 3d f8 ff ff       	call   c00187a6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f69:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018f73:	83 c4 20             	add    esp,0x20
c0018f76:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018f7c:	83 f8 01             	cmp    eax,0x1
c0018f7f:	75 6f                	jne    c0018ff0 <CPU::detectFeatures()+0x67e>
c0018f81:	51                   	push   ecx
c0018f82:	51                   	push   ecx
c0018f83:	68 d5 b3 02 c0       	push   0xc002b3d5
c0018f88:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018f8c:	56                   	push   esi
c0018f8d:	e8 7a 78 fe ff       	call   c000080c <strcpy>
c0018f92:	5f                   	pop    edi
c0018f93:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f99:	5d                   	pop    ebp
c0018f9a:	66 c1 e8 06          	shr    ax,0x6
c0018f9e:	0f b6 c0             	movzx  eax,al
c0018fa1:	50                   	push   eax
c0018fa2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018fa8:	c1 e8 0e             	shr    eax,0xe
c0018fab:	0f b6 c0             	movzx  eax,al
c0018fae:	50                   	push   eax
c0018faf:	e8 9c f4 ff ff       	call   c0018450 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018fb4:	5a                   	pop    edx
c0018fb5:	59                   	pop    ecx
c0018fb6:	50                   	push   eax
c0018fb7:	56                   	push   esi
c0018fb8:	e8 8f 79 fe ff       	call   c000094c <strcat>
c0018fbd:	5f                   	pop    edi
c0018fbe:	5d                   	pop    ebp
c0018fbf:	56                   	push   esi
c0018fc0:	53                   	push   ebx
c0018fc1:	e8 36 ad ff ff       	call   c0013cfc <Device::setName(char const*)>
c0018fc6:	58                   	pop    eax
c0018fc7:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018fcd:	5a                   	pop    edx
c0018fce:	68 dc b3 02 c0       	push   0xc002b3dc
c0018fd3:	50                   	push   eax
c0018fd4:	e8 bf 78 fe ff       	call   c0000898 <strcmp>
c0018fd9:	83 c4 10             	add    esp,0x10
c0018fdc:	85 c0                	test   eax,eax
c0018fde:	0f 85 71 03 00 00    	jne    c0019355 <CPU::detectFeatures()+0x9e3>
c0018fe4:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018feb:	e9 65 03 00 00       	jmp    c0019355 <CPU::detectFeatures()+0x9e3>
c0018ff0:	83 f8 02             	cmp    eax,0x2
c0018ff3:	0f 85 b5 00 00 00    	jne    c00190ae <CPU::detectFeatures()+0x73c>
c0018ff9:	57                   	push   edi
c0018ffa:	57                   	push   edi
c0018ffb:	68 ee b3 02 c0       	push   0xc002b3ee
c0019000:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019004:	56                   	push   esi
c0019005:	e8 02 78 fe ff       	call   c000080c <strcpy>
c001900a:	5d                   	pop    ebp
c001900b:	58                   	pop    eax
c001900c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019012:	66 c1 e8 06          	shr    ax,0x6
c0019016:	0f b6 c0             	movzx  eax,al
c0019019:	50                   	push   eax
c001901a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019020:	c1 e8 0e             	shr    eax,0xe
c0019023:	0f b6 c0             	movzx  eax,al
c0019026:	50                   	push   eax
c0019027:	e8 90 f2 ff ff       	call   c00182bc <CPU::lookupAMDName(unsigned char, unsigned char)>
c001902c:	5a                   	pop    edx
c001902d:	59                   	pop    ecx
c001902e:	50                   	push   eax
c001902f:	56                   	push   esi
c0019030:	e8 17 79 fe ff       	call   c000094c <strcat>
c0019035:	5f                   	pop    edi
c0019036:	5d                   	pop    ebp
c0019037:	56                   	push   esi
c0019038:	53                   	push   ebx
c0019039:	e8 be ac ff ff       	call   c0013cfc <Device::setName(char const*)>
c001903e:	58                   	pop    eax
c001903f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019045:	5a                   	pop    edx
c0019046:	68 f3 b3 02 c0       	push   0xc002b3f3
c001904b:	50                   	push   eax
c001904c:	e8 47 78 fe ff       	call   c0000898 <strcmp>
c0019051:	83 c4 10             	add    esp,0x10
c0019054:	85 c0                	test   eax,eax
c0019056:	75 20                	jne    c0019078 <CPU::detectFeatures()+0x706>
c0019058:	8b 15 28 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d928
c001905e:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019064:	a8 01                	test   al,0x1
c0019066:	74 10                	je     c0019078 <CPU::detectFeatures()+0x706>
c0019068:	83 e0 fe             	and    eax,0xfffffffe
c001906b:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019071:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019078:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001907e:	c1 e8 0e             	shr    eax,0xe
c0019081:	3c 05                	cmp    al,0x5
c0019083:	0f 85 cc 02 00 00    	jne    c0019355 <CPU::detectFeatures()+0x9e3>
c0019089:	56                   	push   esi
c001908a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019090:	83 e0 0f             	and    eax,0xf
c0019093:	50                   	push   eax
c0019094:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001909a:	66 c1 e8 06          	shr    ax,0x6
c001909e:	0f b6 c0             	movzx  eax,al
c00190a1:	50                   	push   eax
c00190a2:	6a 05                	push   0x5
c00190a4:	e8 89 f6 ff ff       	call   c0018732 <CPU::AMD_K6_writeback(int, int, int)>
c00190a9:	e9 1f 02 00 00       	jmp    c00192cd <CPU::detectFeatures()+0x95b>
c00190ae:	8d 50 fd             	lea    edx,[eax-0x3]
c00190b1:	83 fa 01             	cmp    edx,0x1
c00190b4:	76 09                	jbe    c00190bf <CPU::detectFeatures()+0x74d>
c00190b6:	83 f8 06             	cmp    eax,0x6
c00190b9:	0f 85 91 01 00 00    	jne    c0019250 <CPU::detectFeatures()+0x8de>
c00190bf:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00190c5:	c1 ea 0e             	shr    edx,0xe
c00190c8:	80 fa 05             	cmp    dl,0x5
c00190cb:	75 7b                	jne    c0019148 <CPU::detectFeatures()+0x7d6>
c00190cd:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00190d3:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00190d8:	66 81 fa 00 01       	cmp    dx,0x100
c00190dd:	75 0c                	jne    c00190eb <CPU::detectFeatures()+0x779>
c00190df:	51                   	push   ecx
c00190e0:	51                   	push   ecx
c00190e1:	68 fa b3 02 c0       	push   0xc002b3fa
c00190e6:	e9 dc 01 00 00       	jmp    c00192c7 <CPU::detectFeatures()+0x955>
c00190eb:	66 81 fa 00 02       	cmp    dx,0x200
c00190f0:	75 0c                	jne    c00190fe <CPU::detectFeatures()+0x78c>
c00190f2:	52                   	push   edx
c00190f3:	52                   	push   edx
c00190f4:	68 0d b4 02 c0       	push   0xc002b40d
c00190f9:	e9 c9 01 00 00       	jmp    c00192c7 <CPU::detectFeatures()+0x955>
c00190fe:	66 81 fa 40 02       	cmp    dx,0x240
c0019103:	75 0c                	jne    c0019111 <CPU::detectFeatures()+0x79f>
c0019105:	50                   	push   eax
c0019106:	50                   	push   eax
c0019107:	68 1f b4 02 c0       	push   0xc002b41f
c001910c:	e9 b6 01 00 00       	jmp    c00192c7 <CPU::detectFeatures()+0x955>
c0019111:	83 f8 06             	cmp    eax,0x6
c0019114:	75 0c                	jne    c0019122 <CPU::detectFeatures()+0x7b0>
c0019116:	50                   	push   eax
c0019117:	50                   	push   eax
c0019118:	68 31 b4 02 c0       	push   0xc002b431
c001911d:	e9 a5 01 00 00       	jmp    c00192c7 <CPU::detectFeatures()+0x955>
c0019122:	83 f8 04             	cmp    eax,0x4
c0019125:	75 0c                	jne    c0019133 <CPU::detectFeatures()+0x7c1>
c0019127:	50                   	push   eax
c0019128:	50                   	push   eax
c0019129:	68 3d b4 02 c0       	push   0xc002b43d
c001912e:	e9 94 01 00 00       	jmp    c00192c7 <CPU::detectFeatures()+0x955>
c0019133:	83 f8 03             	cmp    eax,0x3
c0019136:	0f 85 19 02 00 00    	jne    c0019355 <CPU::detectFeatures()+0x9e3>
c001913c:	50                   	push   eax
c001913d:	50                   	push   eax
c001913e:	68 45 b4 02 c0       	push   0xc002b445
c0019143:	e9 7f 01 00 00       	jmp    c00192c7 <CPU::detectFeatures()+0x955>
c0019148:	80 fa 06             	cmp    dl,0x6
c001914b:	0f 85 db 00 00 00    	jne    c001922c <CPU::detectFeatures()+0x8ba>
c0019151:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019157:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001915c:	66 81 fa 80 01       	cmp    dx,0x180
c0019161:	75 0c                	jne    c001916f <CPU::detectFeatures()+0x7fd>
c0019163:	50                   	push   eax
c0019164:	50                   	push   eax
c0019165:	68 50 b4 02 c0       	push   0xc002b450
c001916a:	e9 58 01 00 00       	jmp    c00192c7 <CPU::detectFeatures()+0x955>
c001916f:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019175:	66 f7 c1 80 ff       	test   cx,0xff80
c001917a:	75 0c                	jne    c0019188 <CPU::detectFeatures()+0x816>
c001917c:	50                   	push   eax
c001917d:	50                   	push   eax
c001917e:	68 60 b4 02 c0       	push   0xc002b460
c0019183:	e9 3f 01 00 00       	jmp    c00192c7 <CPU::detectFeatures()+0x955>
c0019188:	66 81 fa 40 02       	cmp    dx,0x240
c001918d:	75 0c                	jne    c001919b <CPU::detectFeatures()+0x829>
c001918f:	55                   	push   ebp
c0019190:	55                   	push   ebp
c0019191:	68 67 b4 02 c0       	push   0xc002b467
c0019196:	e9 2c 01 00 00       	jmp    c00192c7 <CPU::detectFeatures()+0x955>
c001919b:	66 81 fa 80 02       	cmp    dx,0x280
c00191a0:	75 0c                	jne    c00191ae <CPU::detectFeatures()+0x83c>
c00191a2:	57                   	push   edi
c00191a3:	57                   	push   edi
c00191a4:	68 70 b4 02 c0       	push   0xc002b470
c00191a9:	e9 19 01 00 00       	jmp    c00192c7 <CPU::detectFeatures()+0x955>
c00191ae:	66 81 fa 40 03       	cmp    dx,0x340
c00191b3:	74 ed                	je     c00191a2 <CPU::detectFeatures()+0x830>
c00191b5:	66 81 fa c0 03       	cmp    dx,0x3c0
c00191ba:	75 0c                	jne    c00191c8 <CPU::detectFeatures()+0x856>
c00191bc:	56                   	push   esi
c00191bd:	56                   	push   esi
c00191be:	68 77 b4 02 c0       	push   0xc002b477
c00191c3:	e9 ff 00 00 00       	jmp    c00192c7 <CPU::detectFeatures()+0x955>
c00191c8:	83 f8 06             	cmp    eax,0x6
c00191cb:	0f 84 45 ff ff ff    	je     c0019116 <CPU::detectFeatures()+0x7a4>
c00191d1:	83 f8 04             	cmp    eax,0x4
c00191d4:	0f 84 4d ff ff ff    	je     c0019127 <CPU::detectFeatures()+0x7b5>
c00191da:	83 f8 03             	cmp    eax,0x3
c00191dd:	0f 85 72 01 00 00    	jne    c0019355 <CPU::detectFeatures()+0x9e3>
c00191e3:	51                   	push   ecx
c00191e4:	51                   	push   ecx
c00191e5:	68 80 b4 02 c0       	push   0xc002b480
c00191ea:	53                   	push   ebx
c00191eb:	e8 0c ab ff ff       	call   c0013cfc <Device::setName(char const*)>
c00191f0:	b1 c1                	mov    cl,0xc1
c00191f2:	88 c8                	mov    al,cl
c00191f4:	e6 22                	out    0x22,al
c00191f6:	e4 23                	in     al,0x23
c00191f8:	88 c2                	mov    dl,al
c00191fa:	88 c8                	mov    al,cl
c00191fc:	e6 22                	out    0x22,al
c00191fe:	88 d0                	mov    al,dl
c0019200:	83 c8 10             	or     eax,0x10
c0019203:	e6 23                	out    0x23,al
c0019205:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001920c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001920f:	89 d0                	mov    eax,edx
c0019211:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019217:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001921b:	40                   	inc    eax
c001921c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019222:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019227:	e9 a1 00 00 00       	jmp    c00192cd <CPU::detectFeatures()+0x95b>
c001922c:	83 f8 06             	cmp    eax,0x6
c001922f:	0f 84 e1 fe ff ff    	je     c0019116 <CPU::detectFeatures()+0x7a4>
c0019235:	83 f8 04             	cmp    eax,0x4
c0019238:	0f 84 e9 fe ff ff    	je     c0019127 <CPU::detectFeatures()+0x7b5>
c001923e:	83 f8 03             	cmp    eax,0x3
c0019241:	0f 85 0e 01 00 00    	jne    c0019355 <CPU::detectFeatures()+0x9e3>
c0019247:	52                   	push   edx
c0019248:	52                   	push   edx
c0019249:	68 8b b4 02 c0       	push   0xc002b48b
c001924e:	eb 77                	jmp    c00192c7 <CPU::detectFeatures()+0x955>
c0019250:	83 f8 07             	cmp    eax,0x7
c0019253:	75 09                	jne    c001925e <CPU::detectFeatures()+0x8ec>
c0019255:	50                   	push   eax
c0019256:	50                   	push   eax
c0019257:	68 95 b4 02 c0       	push   0xc002b495
c001925c:	eb 69                	jmp    c00192c7 <CPU::detectFeatures()+0x955>
c001925e:	83 f8 0a             	cmp    eax,0xa
c0019261:	75 09                	jne    c001926c <CPU::detectFeatures()+0x8fa>
c0019263:	50                   	push   eax
c0019264:	50                   	push   eax
c0019265:	68 a0 b4 02 c0       	push   0xc002b4a0
c001926a:	eb 5b                	jmp    c00192c7 <CPU::detectFeatures()+0x955>
c001926c:	83 f8 0b             	cmp    eax,0xb
c001926f:	75 09                	jne    c001927a <CPU::detectFeatures()+0x908>
c0019271:	50                   	push   eax
c0019272:	50                   	push   eax
c0019273:	68 a8 b4 02 c0       	push   0xc002b4a8
c0019278:	eb 4d                	jmp    c00192c7 <CPU::detectFeatures()+0x955>
c001927a:	83 f8 08             	cmp    eax,0x8
c001927d:	75 09                	jne    c0019288 <CPU::detectFeatures()+0x916>
c001927f:	50                   	push   eax
c0019280:	50                   	push   eax
c0019281:	68 b1 b4 02 c0       	push   0xc002b4b1
c0019286:	eb 3f                	jmp    c00192c7 <CPU::detectFeatures()+0x955>
c0019288:	83 f8 09             	cmp    eax,0x9
c001928b:	75 09                	jne    c0019296 <CPU::detectFeatures()+0x924>
c001928d:	50                   	push   eax
c001928e:	50                   	push   eax
c001928f:	68 b9 b4 02 c0       	push   0xc002b4b9
c0019294:	eb 31                	jmp    c00192c7 <CPU::detectFeatures()+0x955>
c0019296:	83 f8 05             	cmp    eax,0x5
c0019299:	75 09                	jne    c00192a4 <CPU::detectFeatures()+0x932>
c001929b:	50                   	push   eax
c001929c:	50                   	push   eax
c001929d:	68 c1 b4 02 c0       	push   0xc002b4c1
c00192a2:	eb 23                	jmp    c00192c7 <CPU::detectFeatures()+0x955>
c00192a4:	83 f8 0c             	cmp    eax,0xc
c00192a7:	75 09                	jne    c00192b2 <CPU::detectFeatures()+0x940>
c00192a9:	55                   	push   ebp
c00192aa:	55                   	push   ebp
c00192ab:	68 cf b4 02 c0       	push   0xc002b4cf
c00192b0:	eb 15                	jmp    c00192c7 <CPU::detectFeatures()+0x955>
c00192b2:	83 f8 0d             	cmp    eax,0xd
c00192b5:	75 09                	jne    c00192c0 <CPU::detectFeatures()+0x94e>
c00192b7:	57                   	push   edi
c00192b8:	57                   	push   edi
c00192b9:	68 da b4 02 c0       	push   0xc002b4da
c00192be:	eb 07                	jmp    c00192c7 <CPU::detectFeatures()+0x955>
c00192c0:	56                   	push   esi
c00192c1:	56                   	push   esi
c00192c2:	68 ee b4 02 c0       	push   0xc002b4ee
c00192c7:	53                   	push   ebx
c00192c8:	e8 2f aa ff ff       	call   c0013cfc <Device::setName(char const*)>
c00192cd:	83 c4 10             	add    esp,0x10
c00192d0:	e9 80 00 00 00       	jmp    c0019355 <CPU::detectFeatures()+0x9e3>
c00192d5:	51                   	push   ecx
c00192d6:	51                   	push   ecx
c00192d7:	68 3a b3 02 c0       	push   0xc002b33a
c00192dc:	55                   	push   ebp
c00192dd:	e8 2a 75 fe ff       	call   c000080c <strcpy>
c00192e2:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00192ec:	e8 bd 6f fe ff       	call   c00002ae <is486>
c00192f1:	83 c4 10             	add    esp,0x10
c00192f4:	85 c0                	test   eax,eax
c00192f6:	74 2b                	je     c0019323 <CPU::detectFeatures()+0x9b1>
c00192f8:	52                   	push   edx
c00192f9:	52                   	push   edx
c00192fa:	68 fa b4 02 c0       	push   0xc002b4fa
c00192ff:	53                   	push   ebx
c0019300:	e8 f7 a9 ff ff       	call   c0013cfc <Device::setName(char const*)>
c0019305:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001930c:	0f 20 c0             	mov    eax,cr0
c001930f:	83 e0 14             	and    eax,0x14
c0019312:	83 c4 10             	add    esp,0x10
c0019315:	83 f8 04             	cmp    eax,0x4
c0019318:	75 1f                	jne    c0019339 <CPU::detectFeatures()+0x9c7>
c001931a:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019321:	eb 32                	jmp    c0019355 <CPU::detectFeatures()+0x9e3>
c0019323:	50                   	push   eax
c0019324:	50                   	push   eax
c0019325:	68 05 b5 02 c0       	push   0xc002b505
c001932a:	53                   	push   ebx
c001932b:	e8 cc a9 ff ff       	call   c0013cfc <Device::setName(char const*)>
c0019330:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019337:	eb d3                	jmp    c001930c <CPU::detectFeatures()+0x99a>
c0019339:	e8 4b 6f fe ff       	call   c0000289 <hasLegacyFPU>
c001933e:	83 e0 01             	and    eax,0x1
c0019341:	8d 14 00             	lea    edx,[eax+eax*1]
c0019344:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001934a:	83 e0 fd             	and    eax,0xfffffffd
c001934d:	09 d0                	or     eax,edx
c001934f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019355:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c001935c:	83 c4 4c             	add    esp,0x4c
c001935f:	5b                   	pop    ebx
c0019360:	5e                   	pop    esi
c0019361:	5f                   	pop    edi
c0019362:	5d                   	pop    ebp
c0019363:	c3                   	ret    

c0019364 <CPU::setupSMEP()>:
c0019364:	0f 20 e0             	mov    eax,cr4
c0019367:	0d 00 00 10 00       	or     eax,0x100000
c001936c:	0f 22 e0             	mov    cr4,eax
c001936f:	c3                   	ret    

c0019370 <CPU::setupUMIP()>:
c0019370:	0f 20 e0             	mov    eax,cr4
c0019373:	80 cc 08             	or     ah,0x8
c0019376:	0f 22 e0             	mov    cr4,eax
c0019379:	c3                   	ret    

c001937a <CPU::setupTSC()>:
c001937a:	0f 20 e0             	mov    eax,cr4
c001937d:	83 c8 04             	or     eax,0x4
c0019380:	0f 22 e0             	mov    cr4,eax
c0019383:	c3                   	ret    

c0019384 <CPU::setupLargePages()>:
c0019384:	0f 20 e0             	mov    eax,cr4
c0019387:	83 c8 10             	or     eax,0x10
c001938a:	0f 22 e0             	mov    cr4,eax
c001938d:	c3                   	ret    

c001938e <CPU::setupPAT()>:
c001938e:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0019393:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001939a:	74 2c                	je     c00193c8 <CPU::setupPAT()+0x3a>
c001939c:	53                   	push   ebx
c001939d:	83 ec 10             	sub    esp,0x10
c00193a0:	68 77 02 00 00       	push   0x277
c00193a5:	50                   	push   eax
c00193a6:	e8 95 57 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00193ab:	83 e2 f8             	and    edx,0xfffffff8
c00193ae:	83 ca 01             	or     edx,0x1
c00193b1:	52                   	push   edx
c00193b2:	50                   	push   eax
c00193b3:	68 77 02 00 00       	push   0x277
c00193b8:	ff 35 28 d9 02 c0    	push   DWORD PTR ds:0xc002d928
c00193be:	e8 a9 57 ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c00193c3:	83 c4 28             	add    esp,0x28
c00193c6:	5b                   	pop    ebx
c00193c7:	c3                   	ret    
c00193c8:	c3                   	ret    
c00193c9:	90                   	nop

c00193ca <CPU::setupMTRR()>:
c00193ca:	c3                   	ret    
c00193cb:	90                   	nop

c00193cc <CPU::setupGlobalPages()>:
c00193cc:	0f 20 e0             	mov    eax,cr4
c00193cf:	0c 80                	or     al,0x80
c00193d1:	0f 22 e0             	mov    cr4,eax
c00193d4:	c3                   	ret    
c00193d5:	90                   	nop

c00193d6 <CPU::allowUsermodeDataAccess()>:
c00193d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00193da:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00193e1:	74 03                	je     c00193e6 <CPU::allowUsermodeDataAccess()+0x10>
c00193e3:	0f 01 cb             	stac   
c00193e6:	c3                   	ret    
c00193e7:	90                   	nop

c00193e8 <CPU::prohibitUsermodeDataAccess()>:
c00193e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00193ec:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00193f3:	74 03                	je     c00193f8 <CPU::prohibitUsermodeDataAccess()+0x10>
c00193f5:	0f 01 ca             	clac   
c00193f8:	c3                   	ret    
c00193f9:	90                   	nop

c00193fa <CPU::setupSMAP()>:
c00193fa:	0f 20 e0             	mov    eax,cr4
c00193fd:	0d 00 00 20 00       	or     eax,0x200000
c0019402:	0f 22 e0             	mov    cr4,eax
c0019405:	eb e1                	jmp    c00193e8 <CPU::prohibitUsermodeDataAccess()>
c0019407:	90                   	nop

c0019408 <CPU::setupFeatures()>:
c0019408:	83 ec 0c             	sub    esp,0xc
c001940b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001940f:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019416:	74 07                	je     c001941f <CPU::setupFeatures()+0x17>
c0019418:	52                   	push   edx
c0019419:	e8 46 ff ff ff       	call   c0019364 <CPU::setupSMEP()>
c001941e:	58                   	pop    eax
c001941f:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019426:	74 07                	je     c001942f <CPU::setupFeatures()+0x27>
c0019428:	52                   	push   edx
c0019429:	e8 cc ff ff ff       	call   c00193fa <CPU::setupSMAP()>
c001942e:	58                   	pop    eax
c001942f:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019436:	74 07                	je     c001943f <CPU::setupFeatures()+0x37>
c0019438:	52                   	push   edx
c0019439:	e8 32 ff ff ff       	call   c0019370 <CPU::setupUMIP()>
c001943e:	58                   	pop    eax
c001943f:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019446:	74 07                	je     c001944f <CPU::setupFeatures()+0x47>
c0019448:	52                   	push   edx
c0019449:	e8 2c ff ff ff       	call   c001937a <CPU::setupTSC()>
c001944e:	58                   	pop    eax
c001944f:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019456:	74 07                	je     c001945f <CPU::setupFeatures()+0x57>
c0019458:	52                   	push   edx
c0019459:	e8 26 ff ff ff       	call   c0019384 <CPU::setupLargePages()>
c001945e:	59                   	pop    ecx
c001945f:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019466:	74 07                	je     c001946f <CPU::setupFeatures()+0x67>
c0019468:	52                   	push   edx
c0019469:	e8 5e ff ff ff       	call   c00193cc <CPU::setupGlobalPages()>
c001946e:	58                   	pop    eax
c001946f:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019476:	74 0c                	je     c0019484 <CPU::setupFeatures()+0x7c>
c0019478:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001947c:	83 c4 0c             	add    esp,0xc
c001947f:	e9 0a ff ff ff       	jmp    c001938e <CPU::setupPAT()>
c0019484:	83 c4 0c             	add    esp,0xc
c0019487:	c3                   	ret    

c0019488 <CPU::open(int, int, void*)>:
c0019488:	57                   	push   edi
c0019489:	56                   	push   esi
c001948a:	53                   	push   ebx
c001948b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001948f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019493:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019499:	83 ec 0c             	sub    esp,0xc
c001949c:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00194a2:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00194a8:	50                   	push   eax
c00194a9:	e8 80 59 ff ff       	call   c000ee2e <GDT::setup()>
c00194ae:	83 c4 0c             	add    esp,0xc
c00194b1:	6a 00                	push   0x0
c00194b3:	68 ef be ad de       	push   0xdeadbeef
c00194b8:	57                   	push   edi
c00194b9:	e8 ea 76 ff ff       	call   c0010ba8 <TSS::setup(unsigned long, unsigned long)>
c00194be:	89 3c 24             	mov    DWORD PTR [esp],edi
c00194c1:	e8 c2 76 ff ff       	call   c0010b88 <TSS::flush()>
c00194c6:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00194cc:	89 04 24             	mov    DWORD PTR [esp],eax
c00194cf:	e8 be 5b ff ff       	call   c000f092 <IDT::setup()>
c00194d4:	b8 00 04 00 00       	mov    eax,0x400
c00194d9:	0f 23 f8             	mov    db7,eax
c00194dc:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00194e6:	e8 86 64 ff ff       	call   c000f971 <Phys::allocatePage()>
c00194eb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00194f1:	89 30                	mov    DWORD PTR [eax],esi
c00194f3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00194f9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00194fc:	58                   	pop    eax
c00194fd:	5a                   	pop    edx
c00194fe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019504:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019508:	e8 ab 87 ff ff       	call   c0011cb8 <VAS::setCPUSpecific(unsigned long)>
c001950d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019510:	e8 5d f4 ff ff       	call   c0018972 <CPU::detectFeatures()>
c0019515:	e8 35 bc ff ff       	call   c001514f <setupInterruptController()>
c001951a:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019520:	a1 40 d9 02 c0       	mov    eax,ds:0xc002d940
c0019525:	83 e0 10             	and    eax,0x10
c0019528:	83 f8 01             	cmp    eax,0x1
c001952b:	19 c0                	sbb    eax,eax
c001952d:	83 e0 46             	and    eax,0x46
c0019530:	83 c0 1e             	add    eax,0x1e
c0019533:	89 04 24             	mov    DWORD PTR [esp],eax
c0019536:	e8 02 d2 ff ff       	call   c001673d <setupTimer(int)>
c001953b:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019541:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019544:	e8 bf fe ff ff       	call   c0019408 <CPU::setupFeatures()>
c0019549:	83 c4 10             	add    esp,0x10
c001954c:	31 c0                	xor    eax,eax
c001954e:	5b                   	pop    ebx
c001954f:	5e                   	pop    esi
c0019550:	5f                   	pop    edi
c0019551:	c3                   	ret    

c0019552 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019552:	57                   	push   edi
c0019553:	56                   	push   esi
c0019554:	53                   	push   ebx
c0019555:	51                   	push   ecx
c0019556:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001955a:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c001955d:	0f 02 c0             	lar    eax,ax
c0019560:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019563:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019567:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c001956a:	88 ca                	mov    dl,cl
c001956c:	c0 ea 06             	shr    dl,0x6
c001956f:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019573:	89 ca                	mov    edx,ecx
c0019575:	66 c1 ea 03          	shr    dx,0x3
c0019579:	83 e2 07             	and    edx,0x7
c001957c:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019581:	88 17                	mov    BYTE PTR [edi],dl
c0019583:	0f 84 a6 01 00 00    	je     c001972f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019589:	83 e1 07             	and    ecx,0x7
c001958c:	80 f9 04             	cmp    cl,0x4
c001958f:	0f 84 98 00 00 00    	je     c001962d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019595:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001959a:	0f 95 c0             	setne  al
c001959d:	80 f9 05             	cmp    cl,0x5
c00195a0:	0f 95 c2             	setne  dl
c00195a3:	08 c2                	or     dl,al
c00195a5:	74 79                	je     c0019620 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00195a7:	84 c9                	test   cl,cl
c00195a9:	75 05                	jne    c00195b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c00195ab:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00195ae:	eb 3c                	jmp    c00195ec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195b0:	80 f9 01             	cmp    cl,0x1
c00195b3:	75 05                	jne    c00195ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c00195b5:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00195b8:	eb 32                	jmp    c00195ec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195ba:	80 f9 02             	cmp    cl,0x2
c00195bd:	75 05                	jne    c00195c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c00195bf:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00195c2:	eb 28                	jmp    c00195ec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195c4:	31 c0                	xor    eax,eax
c00195c6:	80 f9 03             	cmp    cl,0x3
c00195c9:	75 05                	jne    c00195d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c00195cb:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00195ce:	eb 1c                	jmp    c00195ec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195d0:	80 f9 05             	cmp    cl,0x5
c00195d3:	75 05                	jne    c00195da <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c00195d5:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00195d8:	eb 12                	jmp    c00195ec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195da:	80 f9 06             	cmp    cl,0x6
c00195dd:	75 05                	jne    c00195e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00195df:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00195e2:	eb 08                	jmp    c00195ec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195e4:	80 f9 07             	cmp    cl,0x7
c00195e7:	75 03                	jne    c00195ec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195e9:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00195ec:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00195f1:	75 10                	jne    c0019603 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00195f3:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00195f7:	b9 03 00 00 00       	mov    ecx,0x3
c00195fc:	01 d0                	add    eax,edx
c00195fe:	e9 37 01 00 00       	jmp    c001973a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019603:	b9 02 00 00 00       	mov    ecx,0x2
c0019608:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001960d:	0f 85 27 01 00 00    	jne    c001973a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019613:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019616:	b9 06 00 00 00       	mov    ecx,0x6
c001961b:	e9 1a 01 00 00       	jmp    c001973a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019620:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019623:	b9 06 00 00 00       	mov    ecx,0x6
c0019628:	e9 0f 01 00 00       	jmp    c001973c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001962d:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019630:	88 ca                	mov    dl,cl
c0019632:	c0 ea 06             	shr    dl,0x6
c0019635:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019639:	89 ca                	mov    edx,ecx
c001963b:	66 c1 ea 03          	shr    dx,0x3
c001963f:	83 e2 07             	and    edx,0x7
c0019642:	80 e1 07             	and    cl,0x7
c0019645:	75 05                	jne    c001964c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019647:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c001964a:	eb 4c                	jmp    c0019698 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001964c:	80 f9 01             	cmp    cl,0x1
c001964f:	75 05                	jne    c0019656 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019651:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019654:	eb 42                	jmp    c0019698 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019656:	80 f9 02             	cmp    cl,0x2
c0019659:	75 05                	jne    c0019660 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c001965b:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001965e:	eb 38                	jmp    c0019698 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019660:	80 f9 03             	cmp    cl,0x3
c0019663:	75 05                	jne    c001966a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019665:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019668:	eb 2e                	jmp    c0019698 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001966a:	80 f9 04             	cmp    cl,0x4
c001966d:	75 12                	jne    c0019681 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c001966f:	f6 c4 60             	test   ah,0x60
c0019672:	75 08                	jne    c001967c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019674:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019677:	8d 78 14             	lea    edi,[eax+0x14]
c001967a:	eb 1c                	jmp    c0019698 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001967c:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001967f:	eb 17                	jmp    c0019698 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019681:	80 f9 05             	cmp    cl,0x5
c0019684:	75 05                	jne    c001968b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019686:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019689:	eb 0d                	jmp    c0019698 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001968b:	80 f9 06             	cmp    cl,0x6
c001968e:	75 05                	jne    c0019695 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019690:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019693:	eb 03                	jmp    c0019698 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019695:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019698:	84 d2                	test   dl,dl
c001969a:	75 05                	jne    c00196a1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001969c:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001969f:	eb 3c                	jmp    c00196dd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196a1:	80 fa 01             	cmp    dl,0x1
c00196a4:	75 05                	jne    c00196ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00196a6:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00196a9:	eb 32                	jmp    c00196dd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196ab:	80 fa 02             	cmp    dl,0x2
c00196ae:	75 05                	jne    c00196b5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00196b0:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00196b3:	eb 28                	jmp    c00196dd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196b5:	80 fa 03             	cmp    dl,0x3
c00196b8:	75 05                	jne    c00196bf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00196ba:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00196bd:	eb 1e                	jmp    c00196dd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196bf:	31 c0                	xor    eax,eax
c00196c1:	80 fa 04             	cmp    dl,0x4
c00196c4:	74 17                	je     c00196dd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196c6:	80 fa 05             	cmp    dl,0x5
c00196c9:	75 05                	jne    c00196d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c00196cb:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00196ce:	eb 0d                	jmp    c00196dd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196d0:	80 fa 06             	cmp    dl,0x6
c00196d3:	75 05                	jne    c00196da <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00196d5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00196d8:	eb 03                	jmp    c00196dd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196da:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00196dd:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00196e2:	0f 94 c2             	sete   dl
c00196e5:	80 f9 05             	cmp    cl,0x5
c00196e8:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00196ec:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00196f1:	d3 e0                	shl    eax,cl
c00196f3:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00196f7:	74 0a                	je     c0019703 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00196f9:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00196fc:	b9 07 00 00 00       	mov    ecx,0x7
c0019701:	eb 37                	jmp    c001973a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019703:	01 f8                	add    eax,edi
c0019705:	b9 03 00 00 00       	mov    ecx,0x3
c001970a:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001970f:	74 2b                	je     c001973c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019711:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019716:	75 0d                	jne    c0019725 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019718:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001971c:	01 c8                	add    eax,ecx
c001971e:	b9 04 00 00 00       	mov    ecx,0x4
c0019723:	eb 17                	jmp    c001973c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019725:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019728:	b9 07 00 00 00       	mov    ecx,0x7
c001972d:	eb 0d                	jmp    c001973c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001972f:	b9 02 00 00 00       	mov    ecx,0x2
c0019734:	b2 01                	mov    dl,0x1
c0019736:	31 c0                	xor    eax,eax
c0019738:	eb 02                	jmp    c001973c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001973a:	31 d2                	xor    edx,edx
c001973c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019740:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019742:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019746:	88 11                	mov    BYTE PTR [ecx],dl
c0019748:	5a                   	pop    edx
c0019749:	5b                   	pop    ebx
c001974a:	5e                   	pop    esi
c001974b:	5f                   	pop    edi
c001974c:	c3                   	ret    

c001974d <Krnl::smpEntry()>:
c001974d:	eb fe                	jmp    c001974d <Krnl::smpEntry()>

c001974f <Krnl::startCPU(int)>:
c001974f:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0019754:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001975b:	0f 84 36 01 00 00    	je     c0019897 <Krnl::startCPU(int)+0x148>
c0019761:	53                   	push   ebx
c0019762:	83 ec 10             	sub    esp,0x10
c0019765:	fa                   	cli    
c0019766:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001976c:	6a 1b                	push   0x1b
c001976e:	ff 35 28 d9 02 c0    	push   DWORD PTR ds:0xc002d928
c0019774:	e8 c7 53 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c0019779:	25 00 f0 ff ff       	and    eax,0xfffff000
c001977e:	89 c3                	mov    ebx,eax
c0019780:	58                   	pop    eax
c0019781:	5a                   	pop    edx
c0019782:	53                   	push   ebx
c0019783:	68 3c b5 02 c0       	push   0xc002b53c
c0019788:	e8 40 8f ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c001978d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019797:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001979b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00197a5:	c1 e0 18             	shl    eax,0x18
c00197a8:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c00197ae:	83 c4 10             	add    esp,0x10
c00197b1:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00197b7:	09 c2                	or     edx,eax
c00197b9:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c00197bf:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c00197c5:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00197cb:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00197d1:	80 cd c5             	or     ch,0xc5
c00197d4:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00197da:	f3 90                	pause  
c00197dc:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00197de:	0f ba e1 0c          	bt     ecx,0xc
c00197e2:	72 f6                	jb     c00197da <Krnl::startCPU(int)+0x8b>
c00197e4:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00197ea:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00197f0:	09 c1                	or     ecx,eax
c00197f2:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00197f8:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00197fe:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019804:	80 cd 85             	or     ch,0x85
c0019807:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001980d:	f3 90                	pause  
c001980f:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019811:	0f ba e1 0c          	bt     ecx,0xc
c0019815:	72 f6                	jb     c001980d <Krnl::startCPU(int)+0xbe>
c0019817:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019821:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019827:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001982d:	09 c1                	or     ecx,eax
c001982f:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019835:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001983b:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019841:	81 c9 02 06 00 00    	or     ecx,0x602
c0019847:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001984d:	f3 90                	pause  
c001984f:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019851:	0f ba e1 0c          	bt     ecx,0xc
c0019855:	72 f6                	jb     c001984d <Krnl::startCPU(int)+0xfe>
c0019857:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019861:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019867:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001986d:	09 c8                	or     eax,ecx
c001986f:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019875:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001987b:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019880:	0d 02 06 00 00       	or     eax,0x602
c0019885:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001988b:	f3 90                	pause  
c001988d:	8b 02                	mov    eax,DWORD PTR [edx]
c001988f:	0f ba e0 0c          	bt     eax,0xc
c0019893:	72 f6                	jb     c001988b <Krnl::startCPU(int)+0x13c>
c0019895:	eb fe                	jmp    c0019895 <Krnl::startCPU(int)+0x146>
c0019897:	c3                   	ret    

c0019898 <Krnl::startCPUs()>:
c0019898:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c001989d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00198a3:	88 c2                	mov    dl,al
c00198a5:	83 e2 0a             	and    edx,0xa
c00198a8:	80 fa 0a             	cmp    dl,0xa
c00198ab:	75 09                	jne    c00198b6 <Krnl::startCPUs()+0x1e>
c00198ad:	a8 01                	test   al,0x1
c00198af:	74 05                	je     c00198b6 <Krnl::startCPUs()+0x1e>
c00198b1:	e9 e5 68 fe ff       	jmp    c000019b <prepareTramp>
c00198b6:	c3                   	ret    
c00198b7:	90                   	nop

c00198b8 <EnvVarContainer::getEnv(char const*)>:
c00198b8:	57                   	push   edi
c00198b9:	56                   	push   esi
c00198ba:	53                   	push   ebx
c00198bb:	31 db                	xor    ebx,ebx
c00198bd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00198c1:	39 1e                	cmp    DWORD PTR [esi],ebx
c00198c3:	7e 2b                	jle    c00198f0 <EnvVarContainer::getEnv(char const*)+0x38>
c00198c5:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00198cc:	50                   	push   eax
c00198cd:	50                   	push   eax
c00198ce:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00198d1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00198d4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00198d8:	e8 bb 6f fe ff       	call   c0000898 <strcmp>
c00198dd:	83 c4 10             	add    esp,0x10
c00198e0:	85 c0                	test   eax,eax
c00198e2:	75 09                	jne    c00198ed <EnvVarContainer::getEnv(char const*)+0x35>
c00198e4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00198e7:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00198eb:	eb 05                	jmp    c00198f2 <EnvVarContainer::getEnv(char const*)+0x3a>
c00198ed:	43                   	inc    ebx
c00198ee:	eb d1                	jmp    c00198c1 <EnvVarContainer::getEnv(char const*)+0x9>
c00198f0:	31 c0                	xor    eax,eax
c00198f2:	5b                   	pop    ebx
c00198f3:	5e                   	pop    esi
c00198f4:	5f                   	pop    edi
c00198f5:	c3                   	ret    

c00198f6 <EnvVarContainer::setEnv(char const*, char const*)>:
c00198f6:	55                   	push   ebp
c00198f7:	57                   	push   edi
c00198f8:	56                   	push   esi
c00198f9:	53                   	push   ebx
c00198fa:	83 ec 28             	sub    esp,0x28
c00198fd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0019901:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0019905:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019909:	56                   	push   esi
c001990a:	e8 5d 6e fe ff       	call   c000076c <strlen>
c001990f:	40                   	inc    eax
c0019910:	89 04 24             	mov    DWORD PTR [esp],eax
c0019913:	e8 81 5c ff ff       	call   c000f599 <malloc>
c0019918:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001991b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001991f:	e8 48 6e fe ff       	call   c000076c <strlen>
c0019924:	40                   	inc    eax
c0019925:	89 04 24             	mov    DWORD PTR [esp],eax
c0019928:	e8 6c 5c ff ff       	call   c000f599 <malloc>
c001992d:	89 34 24             	mov    DWORD PTR [esp],esi
c0019930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019934:	e8 33 6e fe ff       	call   c000076c <strlen>
c0019939:	83 c4 0c             	add    esp,0xc
c001993c:	40                   	inc    eax
c001993d:	50                   	push   eax
c001993e:	6a 00                	push   0x0
c0019940:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019944:	e8 07 6e fe ff       	call   c0000750 <memset>
c0019949:	89 34 24             	mov    DWORD PTR [esp],esi
c001994c:	e8 1b 6e fe ff       	call   c000076c <strlen>
c0019951:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019955:	8d 48 01             	lea    ecx,[eax+0x1]
c0019958:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001995a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001995d:	89 de                	mov    esi,ebx
c001995f:	e8 08 6e fe ff       	call   c000076c <strlen>
c0019964:	83 c4 0c             	add    esp,0xc
c0019967:	40                   	inc    eax
c0019968:	50                   	push   eax
c0019969:	6a 00                	push   0x0
c001996b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001996f:	e8 dc 6d fe ff       	call   c0000750 <memset>
c0019974:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019977:	e8 f0 6d fe ff       	call   c000076c <strlen>
c001997c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019980:	8d 48 01             	lea    ecx,[eax+0x1]
c0019983:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019985:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019988:	40                   	inc    eax
c0019989:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001998c:	c1 e0 03             	shl    eax,0x3
c001998f:	5a                   	pop    edx
c0019990:	59                   	pop    ecx
c0019991:	50                   	push   eax
c0019992:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019995:	e8 eb 5b ff ff       	call   c000f585 <realloc>
c001999a:	8d 74 24 18          	lea    esi,[esp+0x18]
c001999e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00199a1:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00199a4:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00199a8:	b9 08 00 00 00       	mov    ecx,0x8
c00199ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00199af:	83 c4 2c             	add    esp,0x2c
c00199b2:	5b                   	pop    ebx
c00199b3:	5e                   	pop    esi
c00199b4:	5f                   	pop    edi
c00199b5:	5d                   	pop    ebp
c00199b6:	c3                   	ret    
c00199b7:	90                   	nop

c00199b8 <EnvVarContainer::deleteEnv(char const*)>:
c00199b8:	c3                   	ret    
c00199b9:	90                   	nop

c00199ba <EnvVarContainer::loadFrom(char const*, char const*)>:
c00199ba:	55                   	push   ebp
c00199bb:	57                   	push   edi
c00199bc:	56                   	push   esi
c00199bd:	53                   	push   ebx
c00199be:	81 ec 38 01 00 00    	sub    esp,0x138
c00199c4:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00199cb:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00199d2:	68 14 01 00 00       	push   0x114
c00199d7:	e8 bd 5b ff ff       	call   c000f599 <malloc>
c00199dc:	83 c4 0c             	add    esp,0xc
c00199df:	89 c3                	mov    ebx,eax
c00199e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00199e4:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00199eb:	50                   	push   eax
c00199ec:	e8 3b 92 ff ff       	call   c0012c2c <File::File(char const*, Process*)>
c00199f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00199f4:	e8 05 95 ff ff       	call   c0012efe <File::exists()>
c00199f9:	83 c4 10             	add    esp,0x10
c00199fc:	84 c0                	test   al,al
c00199fe:	75 31                	jne    c0019a31 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019a00:	50                   	push   eax
c0019a01:	50                   	push   eax
c0019a02:	6a 12                	push   0x12
c0019a04:	53                   	push   ebx
c0019a05:	e8 86 92 ff ff       	call   c0012c90 <File::open(FileOpenMode)>
c0019a0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a0c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019a0f:	89 34 24             	mov    DWORD PTR [esp],esi
c0019a12:	e8 55 6d fe ff       	call   c000076c <strlen>
c0019a17:	5a                   	pop    edx
c0019a18:	31 d2                	xor    edx,edx
c0019a1a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019a1e:	51                   	push   ecx
c0019a1f:	56                   	push   esi
c0019a20:	52                   	push   edx
c0019a21:	50                   	push   eax
c0019a22:	53                   	push   ebx
c0019a23:	ff d7                	call   edi
c0019a25:	83 c4 14             	add    esp,0x14
c0019a28:	53                   	push   ebx
c0019a29:	e8 c0 92 ff ff       	call   c0012cee <File::close()>
c0019a2e:	83 c4 10             	add    esp,0x10
c0019a31:	56                   	push   esi
c0019a32:	31 f6                	xor    esi,esi
c0019a34:	68 00 01 00 00       	push   0x100
c0019a39:	6a 00                	push   0x0
c0019a3b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019a3f:	50                   	push   eax
c0019a40:	e8 0b 6d fe ff       	call   c0000750 <memset>
c0019a45:	5f                   	pop    edi
c0019a46:	58                   	pop    eax
c0019a47:	6a 01                	push   0x1
c0019a49:	53                   	push   ebx
c0019a4a:	e8 41 92 ff ff       	call   c0012c90 <File::open(FileOpenMode)>
c0019a4f:	83 c4 10             	add    esp,0x10
c0019a52:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019a5a:	83 ec 0c             	sub    esp,0xc
c0019a5d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a5f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019a63:	51                   	push   ecx
c0019a64:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019a68:	52                   	push   edx
c0019a69:	6a 00                	push   0x0
c0019a6b:	6a 01                	push   0x1
c0019a6d:	53                   	push   ebx
c0019a6e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019a71:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019a75:	83 c4 20             	add    esp,0x20
c0019a78:	3c 0d                	cmp    al,0xd
c0019a7a:	0f 84 09 01 00 00    	je     c0019b89 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019a80:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019a85:	0f 84 ef 00 00 00    	je     c0019b7a <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019a8b:	3c 0a                	cmp    al,0xa
c0019a8d:	74 13                	je     c0019aa2 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019a8f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019a94:	74 0c                	je     c0019aa2 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019a96:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0019a9c:	0f 8e d8 00 00 00    	jle    c0019b7a <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019aa2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019aa6:	83 ec 0c             	sub    esp,0xc
c0019aa9:	8d 78 01             	lea    edi,[eax+0x1]
c0019aac:	57                   	push   edi
c0019aad:	e8 e7 5a ff ff       	call   c000f599 <malloc>
c0019ab2:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0019ab6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019aba:	8d 56 04             	lea    edx,[esi+0x4]
c0019abd:	89 14 24             	mov    DWORD PTR [esp],edx
c0019ac0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019ac4:	e8 d0 5a ff ff       	call   c000f599 <malloc>
c0019ac9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019acd:	83 c4 0c             	add    esp,0xc
c0019ad0:	57                   	push   edi
c0019ad1:	6a 00                	push   0x0
c0019ad3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019ad7:	e8 74 6c fe ff       	call   c0000750 <memset>
c0019adc:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019ae0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019ae4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019ae8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019aea:	83 c4 0c             	add    esp,0xc
c0019aed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019af1:	52                   	push   edx
c0019af2:	6a 00                	push   0x0
c0019af4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019af8:	e8 53 6c fe ff       	call   c0000750 <memset>
c0019afd:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019b01:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0019b05:	89 34 24             	mov    DWORD PTR [esp],esi
c0019b08:	e8 5f 6c fe ff       	call   c000076c <strlen>
c0019b0d:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0019b11:	89 c1                	mov    ecx,eax
c0019b13:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019b15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019b18:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0019b1b:	40                   	inc    eax
c0019b1c:	83 c4 10             	add    esp,0x10
c0019b1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019b22:	85 d2                	test   edx,edx
c0019b24:	75 0c                	jne    c0019b32 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0019b26:	83 ec 0c             	sub    esp,0xc
c0019b29:	6a 08                	push   0x8
c0019b2b:	e8 69 5a ff ff       	call   c000f599 <malloc>
c0019b30:	eb 0c                	jmp    c0019b3e <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0019b32:	c1 e0 03             	shl    eax,0x3
c0019b35:	51                   	push   ecx
c0019b36:	51                   	push   ecx
c0019b37:	50                   	push   eax
c0019b38:	52                   	push   edx
c0019b39:	e8 47 5a ff ff       	call   c000f585 <realloc>
c0019b3e:	83 c4 10             	add    esp,0x10
c0019b41:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019b44:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019b47:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0019b4a:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019b4e:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019b52:	b9 08 00 00 00       	mov    ecx,0x8
c0019b57:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019b59:	31 f6                	xor    esi,esi
c0019b5b:	50                   	push   eax
c0019b5c:	68 00 01 00 00       	push   0x100
c0019b61:	6a 00                	push   0x0
c0019b63:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019b67:	50                   	push   eax
c0019b68:	e8 e3 6b fe ff       	call   c0000750 <memset>
c0019b6d:	83 c4 10             	add    esp,0x10
c0019b70:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019b78:	eb 0f                	jmp    c0019b89 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019b7a:	3c 3d                	cmp    al,0x3d
c0019b7c:	74 07                	je     c0019b85 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0019b7e:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0019b82:	46                   	inc    esi
c0019b83:	eb 04                	jmp    c0019b89 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019b85:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019b89:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019b8e:	0f 85 c6 fe ff ff    	jne    c0019a5a <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0019b94:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019b9a:	5b                   	pop    ebx
c0019b9b:	5e                   	pop    esi
c0019b9c:	5f                   	pop    edi
c0019b9d:	5d                   	pop    ebp
c0019b9e:	c3                   	ret    
c0019b9f:	90                   	nop

c0019ba0 <EnvVarContainer::__loadSystem()>:
c0019ba0:	83 ec 10             	sub    esp,0x10
c0019ba3:	68 60 ce 02 c0       	push   0xc002ce60
c0019ba8:	68 4d b5 02 c0       	push   0xc002b54d
c0019bad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019bb1:	e8 04 fe ff ff       	call   c00199ba <EnvVarContainer::loadFrom(char const*, char const*)>
c0019bb6:	83 c4 1c             	add    esp,0x1c
c0019bb9:	c3                   	ret    

c0019bba <EnvVarContainer::__loadUser()>:
c0019bba:	c3                   	ret    
c0019bbb:	90                   	nop

c0019bbc <EnvVarContainer::EnvVarContainer(Process*)>:
c0019bbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bc0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019bc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019bce:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019bd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bd5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019bdc:	90                   	nop
c0019bdd:	c3                   	ret    

c0019bde <EnvVarContainer::~EnvVarContainer()>:
c0019bde:	83 ec 0c             	sub    esp,0xc
c0019be1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019be5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019be8:	85 c0                	test   eax,eax
c0019bea:	74 1d                	je     c0019c09 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019bec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bf0:	8b 00                	mov    eax,DWORD PTR [eax]
c0019bf2:	85 c0                	test   eax,eax
c0019bf4:	74 13                	je     c0019c09 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019bf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bfa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019bfd:	83 ec 0c             	sub    esp,0xc
c0019c00:	50                   	push   eax
c0019c01:	e8 a3 59 ff ff       	call   c000f5a9 <free>
c0019c06:	83 c4 10             	add    esp,0x10
c0019c09:	90                   	nop
c0019c0a:	83 c4 0c             	add    esp,0xc
c0019c0d:	c3                   	ret    

c0019c0e <Krnl::getEnv(Process*, char const*)>:
c0019c0e:	53                   	push   ebx
c0019c0f:	83 ec 08             	sub    esp,0x8
c0019c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c16:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019c1a:	39 05 70 0e 03 c0    	cmp    DWORD PTR ds:0xc0030e70,eax
c0019c20:	74 04                	je     c0019c26 <Krnl::getEnv(Process*, char const*)+0x18>
c0019c22:	85 c0                	test   eax,eax
c0019c24:	75 0b                	jne    c0019c31 <Krnl::getEnv(Process*, char const*)+0x23>
c0019c26:	a1 54 04 03 c0       	mov    eax,ds:0xc0030454
c0019c2b:	85 c0                	test   eax,eax
c0019c2d:	75 19                	jne    c0019c48 <Krnl::getEnv(Process*, char const*)+0x3a>
c0019c2f:	eb 27                	jmp    c0019c58 <Krnl::getEnv(Process*, char const*)+0x4a>
c0019c31:	52                   	push   edx
c0019c32:	52                   	push   edx
c0019c33:	53                   	push   ebx
c0019c34:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019c3a:	e8 79 fc ff ff       	call   c00198b8 <EnvVarContainer::getEnv(char const*)>
c0019c3f:	83 c4 10             	add    esp,0x10
c0019c42:	85 c0                	test   eax,eax
c0019c44:	75 28                	jne    c0019c6e <Krnl::getEnv(Process*, char const*)+0x60>
c0019c46:	eb de                	jmp    c0019c26 <Krnl::getEnv(Process*, char const*)+0x18>
c0019c48:	52                   	push   edx
c0019c49:	52                   	push   edx
c0019c4a:	53                   	push   ebx
c0019c4b:	50                   	push   eax
c0019c4c:	e8 67 fc ff ff       	call   c00198b8 <EnvVarContainer::getEnv(char const*)>
c0019c51:	83 c4 10             	add    esp,0x10
c0019c54:	85 c0                	test   eax,eax
c0019c56:	75 16                	jne    c0019c6e <Krnl::getEnv(Process*, char const*)+0x60>
c0019c58:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019c5c:	a1 58 04 03 c0       	mov    eax,ds:0xc0030458
c0019c61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019c65:	83 c4 08             	add    esp,0x8
c0019c68:	5b                   	pop    ebx
c0019c69:	e9 4a fc ff ff       	jmp    c00198b8 <EnvVarContainer::getEnv(char const*)>
c0019c6e:	83 c4 08             	add    esp,0x8
c0019c71:	5b                   	pop    ebx
c0019c72:	c3                   	ret    

c0019c73 <Krnl::setEnvSystem(char const*, char const*)>:
c0019c73:	83 ec 10             	sub    esp,0x10
c0019c76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c7e:	ff 35 58 04 03 c0    	push   DWORD PTR ds:0xc0030458
c0019c84:	e8 6d fc ff ff       	call   c00198f6 <EnvVarContainer::setEnv(char const*, char const*)>
c0019c89:	83 c4 1c             	add    esp,0x1c
c0019c8c:	c3                   	ret    

c0019c8d <Krnl::setEnvUser(char const*, char const*)>:
c0019c8d:	a1 54 04 03 c0       	mov    eax,ds:0xc0030454
c0019c92:	85 c0                	test   eax,eax
c0019c94:	74 15                	je     c0019cab <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019c96:	83 ec 10             	sub    esp,0x10
c0019c99:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c9d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019ca1:	50                   	push   eax
c0019ca2:	e8 4f fc ff ff       	call   c00198f6 <EnvVarContainer::setEnv(char const*, char const*)>
c0019ca7:	83 c4 1c             	add    esp,0x1c
c0019caa:	c3                   	ret    
c0019cab:	c3                   	ret    

c0019cac <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019cac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cb0:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019cb6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019cba:	e9 37 fc ff ff       	jmp    c00198f6 <EnvVarContainer::setEnv(char const*, char const*)>

c0019cbf <Krnl::deleteEnvSystem(char const*)>:
c0019cbf:	c3                   	ret    

c0019cc0 <Krnl::deleteEnvUser(char const*)>:
c0019cc0:	c3                   	ret    

c0019cc1 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019cc1:	c3                   	ret    

c0019cc2 <Krnl::newProcessEnv(Process*)>:
c0019cc2:	83 ec 28             	sub    esp,0x28
c0019cc5:	6a 0c                	push   0xc
c0019cc7:	e8 cd 58 ff ff       	call   c000f599 <malloc>
c0019ccc:	5a                   	pop    edx
c0019ccd:	59                   	pop    ecx
c0019cce:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019cd2:	50                   	push   eax
c0019cd3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019cd7:	e8 e0 fe ff ff       	call   c0019bbc <EnvVarContainer::EnvVarContainer(Process*)>
c0019cdc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019ce0:	83 c4 2c             	add    esp,0x2c
c0019ce3:	c3                   	ret    

c0019ce4 <Krnl::copyProcessEnv(Process*, Process*)>:
c0019ce4:	57                   	push   edi
c0019ce5:	56                   	push   esi
c0019ce6:	53                   	push   ebx
c0019ce7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ceb:	83 ec 0c             	sub    esp,0xc
c0019cee:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c0019cf4:	6a 0c                	push   0xc
c0019cf6:	e8 9e 58 ff ff       	call   c000f599 <malloc>
c0019cfb:	89 c3                	mov    ebx,eax
c0019cfd:	58                   	pop    eax
c0019cfe:	5a                   	pop    edx
c0019cff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d03:	53                   	push   ebx
c0019d04:	e8 b3 fe ff ff       	call   c0019bbc <EnvVarContainer::EnvVarContainer(Process*)>
c0019d09:	8b 07                	mov    eax,DWORD PTR [edi]
c0019d0b:	89 03                	mov    DWORD PTR [ebx],eax
c0019d0d:	c1 e0 03             	shl    eax,0x3
c0019d10:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d13:	e8 81 58 ff ff       	call   c000f599 <malloc>
c0019d18:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019d1b:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0019d1d:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0019d20:	c1 e1 03             	shl    ecx,0x3
c0019d23:	89 c7                	mov    edi,eax
c0019d25:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019d27:	83 c4 10             	add    esp,0x10
c0019d2a:	89 d8                	mov    eax,ebx
c0019d2c:	5b                   	pop    ebx
c0019d2d:	5e                   	pop    esi
c0019d2e:	5f                   	pop    edi
c0019d2f:	c3                   	ret    

c0019d30 <Krnl::loadSystemEnv()>:
c0019d30:	53                   	push   ebx
c0019d31:	83 ec 14             	sub    esp,0x14
c0019d34:	6a 0c                	push   0xc
c0019d36:	e8 5e 58 ff ff       	call   c000f599 <malloc>
c0019d3b:	89 c3                	mov    ebx,eax
c0019d3d:	58                   	pop    eax
c0019d3e:	5a                   	pop    edx
c0019d3f:	ff 35 70 0e 03 c0    	push   DWORD PTR ds:0xc0030e70
c0019d45:	53                   	push   ebx
c0019d46:	e8 71 fe ff ff       	call   c0019bbc <EnvVarContainer::EnvVarContainer(Process*)>
c0019d4b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d4e:	89 1d 58 04 03 c0    	mov    DWORD PTR ds:0xc0030458,ebx
c0019d54:	e8 47 fe ff ff       	call   c0019ba0 <EnvVarContainer::__loadSystem()>
c0019d59:	83 c4 18             	add    esp,0x18
c0019d5c:	5b                   	pop    ebx
c0019d5d:	c3                   	ret    

c0019d5e <Krnl::loadUserEnv()>:
c0019d5e:	53                   	push   ebx
c0019d5f:	83 ec 14             	sub    esp,0x14
c0019d62:	6a 0c                	push   0xc
c0019d64:	e8 30 58 ff ff       	call   c000f599 <malloc>
c0019d69:	89 c3                	mov    ebx,eax
c0019d6b:	58                   	pop    eax
c0019d6c:	5a                   	pop    edx
c0019d6d:	ff 35 70 0e 03 c0    	push   DWORD PTR ds:0xc0030e70
c0019d73:	53                   	push   ebx
c0019d74:	e8 43 fe ff ff       	call   c0019bbc <EnvVarContainer::EnvVarContainer(Process*)>
c0019d79:	89 1d 54 04 03 c0    	mov    DWORD PTR ds:0xc0030454,ebx
c0019d7f:	83 c4 18             	add    esp,0x18
c0019d82:	5b                   	pop    ebx
c0019d83:	c3                   	ret    

c0019d84 <Krnl::flushEnv()>:
c0019d84:	c3                   	ret    

c0019d85 <Krnl::getProcessTotalEnvCount(Process*)>:
c0019d85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d89:	8b 15 54 04 03 c0    	mov    edx,DWORD PTR ds:0xc0030454
c0019d8f:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019d95:	a1 58 04 03 c0       	mov    eax,ds:0xc0030458
c0019d9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d9c:	03 01                	add    eax,DWORD PTR [ecx]
c0019d9e:	85 d2                	test   edx,edx
c0019da0:	74 02                	je     c0019da4 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019da2:	03 02                	add    eax,DWORD PTR [edx]
c0019da4:	c3                   	ret    

c0019da5 <Krnl::getProcessEnvPair(Process*, int)>:
c0019da5:	57                   	push   edi
c0019da6:	56                   	push   esi
c0019da7:	8b 35 54 04 03 c0    	mov    esi,DWORD PTR ds:0xc0030454
c0019dad:	53                   	push   ebx
c0019dae:	85 f6                	test   esi,esi
c0019db0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019db4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019db8:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019dbe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019dc2:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019dc4:	75 16                	jne    c0019ddc <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0019dc6:	39 c2                	cmp    edx,eax
c0019dc8:	7c 16                	jl     c0019de0 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019dca:	8b 0d 58 04 03 c0    	mov    ecx,DWORD PTR ds:0xc0030458
c0019dd0:	8b 31                	mov    esi,DWORD PTR [ecx]
c0019dd2:	01 c6                	add    esi,eax
c0019dd4:	39 d6                	cmp    esi,edx
c0019dd6:	7e 3c                	jle    c0019e14 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019dd8:	29 c2                	sub    edx,eax
c0019dda:	eb 04                	jmp    c0019de0 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019ddc:	39 c2                	cmp    edx,eax
c0019dde:	7d 05                	jge    c0019de5 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0019de0:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019de3:	eb 20                	jmp    c0019e05 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0019de5:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019de7:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0019dea:	39 d1                	cmp    ecx,edx
c0019dec:	7e 04                	jle    c0019df2 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0019dee:	29 c2                	sub    edx,eax
c0019df0:	eb 10                	jmp    c0019e02 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0019df2:	8b 35 58 04 03 c0    	mov    esi,DWORD PTR ds:0xc0030458
c0019df8:	03 0e                	add    ecx,DWORD PTR [esi]
c0019dfa:	39 d1                	cmp    ecx,edx
c0019dfc:	7e 16                	jle    c0019e14 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019dfe:	29 c2                	sub    edx,eax
c0019e00:	29 fa                	sub    edx,edi
c0019e02:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019e05:	8d 14 d0             	lea    edx,[eax+edx*8]
c0019e08:	8b 02                	mov    eax,DWORD PTR [edx]
c0019e0a:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0019e0d:	89 03                	mov    DWORD PTR [ebx],eax
c0019e0f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019e12:	eb 1d                	jmp    c0019e31 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0019e14:	83 ec 0c             	sub    esp,0xc
c0019e17:	68 6f b5 02 c0       	push   0xc002b56f
c0019e1c:	e8 18 00 00 00       	call   c0019e39 <Krnl::panic(char const*)>
c0019e21:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0019e27:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019e2e:	83 c4 10             	add    esp,0x10
c0019e31:	89 d8                	mov    eax,ebx
c0019e33:	5b                   	pop    ebx
c0019e34:	5e                   	pop    esi
c0019e35:	5f                   	pop    edi
c0019e36:	c2 04 00             	ret    0x4

c0019e39 <Krnl::panic(char const*)>:
c0019e39:	55                   	push   ebp
c0019e3a:	89 e5                	mov    ebp,esp
c0019e3c:	53                   	push   ebx
c0019e3d:	83 ec 10             	sub    esp,0x10
c0019e40:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019e43:	fa                   	cli    
c0019e44:	c6 05 64 04 03 c0 01 	mov    BYTE PTR ds:0xc0030464,0x1
c0019e4b:	53                   	push   ebx
c0019e4c:	e8 a2 57 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0019e51:	58                   	pop    eax
c0019e52:	c6 05 60 c8 02 c0 00 	mov    BYTE PTR ds:0xc002c860,0x0
c0019e59:	5a                   	pop    edx
c0019e5a:	53                   	push   ebx
c0019e5b:	68 89 b5 02 c0       	push   0xc002b589
c0019e60:	e8 68 88 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0019e65:	59                   	pop    ecx
c0019e66:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0019e6b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e71:	e8 e1 64 ff ff       	call   c0010357 <setActiveTerminal(VgaText*)>
c0019e76:	83 c4 0c             	add    esp,0xc
c0019e79:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0019e7e:	6a 01                	push   0x1
c0019e80:	6a 0f                	push   0xf
c0019e82:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e88:	e8 29 63 ff ff       	call   c00101b6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019e8d:	58                   	pop    eax
c0019e8e:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0019e93:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e99:	e8 3a 68 ff ff       	call   c00106d8 <VgaText::clearScreen()>
c0019e9e:	58                   	pop    eax
c0019e9f:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0019ea4:	5a                   	pop    edx
c0019ea5:	68 a2 b5 02 c0       	push   0xc002b5a2
c0019eaa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019eb0:	e8 af 69 ff ff       	call   c0010864 <VgaText::puts(char const*)>
c0019eb5:	59                   	pop    ecx
c0019eb6:	58                   	pop    eax
c0019eb7:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0019ebc:	68 48 b6 02 c0       	push   0xc002b648
c0019ec1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ec7:	e8 98 69 ff ff       	call   c0010864 <VgaText::puts(char const*)>
c0019ecc:	58                   	pop    eax
c0019ecd:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0019ed2:	5a                   	pop    edx
c0019ed3:	68 be b5 02 c0       	push   0xc002b5be
c0019ed8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ede:	e8 81 69 ff ff       	call   c0010864 <VgaText::puts(char const*)>
c0019ee3:	59                   	pop    ecx
c0019ee4:	58                   	pop    eax
c0019ee5:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0019eea:	53                   	push   ebx
c0019eeb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ef1:	e8 6e 69 ff ff       	call   c0010864 <VgaText::puts(char const*)>
c0019ef6:	58                   	pop    eax
c0019ef7:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0019efc:	5a                   	pop    edx
c0019efd:	68 de b5 02 c0       	push   0xc002b5de
c0019f02:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f08:	e8 57 69 ff ff       	call   c0010864 <VgaText::puts(char const*)>
c0019f0d:	a1 60 04 03 c0       	mov    eax,ds:0xc0030460
c0019f12:	83 c4 10             	add    esp,0x10
c0019f15:	85 c0                	test   eax,eax
c0019f17:	74 02                	je     c0019f1b <Krnl::panic(char const*)+0xe2>
c0019f19:	ff d0                	call   eax
c0019f1b:	83 ec 0c             	sub    esp,0xc
c0019f1e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019f21:	e8 8c 30 00 00       	call   c001cfb2 <Thr::getDriverNameFromAddress(unsigned long)>
c0019f26:	83 c4 10             	add    esp,0x10
c0019f29:	89 c3                	mov    ebx,eax
c0019f2b:	85 c0                	test   eax,eax
c0019f2d:	0f 84 4e 02 00 00    	je     c001a181 <Krnl::panic(char const*)+0x348>
c0019f33:	83 ec 08             	sub    esp,0x8
c0019f36:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0019f3b:	68 84 b6 02 c0       	push   0xc002b684
c0019f40:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f46:	e8 19 69 ff ff       	call   c0010864 <VgaText::puts(char const*)>
c0019f4b:	58                   	pop    eax
c0019f4c:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0019f51:	5a                   	pop    edx
c0019f52:	68 be b5 02 c0       	push   0xc002b5be
c0019f57:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f5d:	e8 02 69 ff ff       	call   c0010864 <VgaText::puts(char const*)>
c0019f62:	59                   	pop    ecx
c0019f63:	58                   	pop    eax
c0019f64:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0019f69:	53                   	push   ebx
c0019f6a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f70:	e8 ef 68 ff ff       	call   c0010864 <VgaText::puts(char const*)>
c0019f75:	83 c4 10             	add    esp,0x10
c0019f78:	83 ec 08             	sub    esp,0x8
c0019f7b:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0019f80:	68 dd b5 02 c0       	push   0xc002b5dd
c0019f85:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f8b:	e8 d4 68 ff ff       	call   c0010864 <VgaText::puts(char const*)>
c0019f90:	58                   	pop    eax
c0019f91:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0019f96:	5a                   	pop    edx
c0019f97:	68 dc b6 02 c0       	push   0xc002b6dc
c0019f9c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fa2:	e8 bd 68 ff ff       	call   c0010864 <VgaText::puts(char const*)>
c0019fa7:	59                   	pop    ecx
c0019fa8:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0019fad:	5b                   	pop    ebx
c0019fae:	68 1c b7 02 c0       	push   0xc002b71c
c0019fb3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fb9:	e8 a6 68 ff ff       	call   c0010864 <VgaText::puts(char const*)>
c0019fbe:	58                   	pop    eax
c0019fbf:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0019fc4:	5a                   	pop    edx
c0019fc5:	68 c9 b5 02 c0       	push   0xc002b5c9
c0019fca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fd0:	e8 8f 68 ff ff       	call   c0010864 <VgaText::puts(char const*)>
c0019fd5:	59                   	pop    ecx
c0019fd6:	5b                   	pop    ebx
c0019fd7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019fda:	68 e1 b5 02 c0       	push   0xc002b5e1
c0019fdf:	e8 e9 86 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0019fe4:	58                   	pop    eax
c0019fe5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019fe8:	5a                   	pop    edx
c0019fe9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019fec:	68 ea b5 02 c0       	push   0xc002b5ea
c0019ff1:	e8 d7 86 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0019ff6:	59                   	pop    ecx
c0019ff7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019ffa:	5b                   	pop    ebx
c0019ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0019ffd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a000:	68 f3 b5 02 c0       	push   0xc002b5f3
c001a005:	e8 c3 86 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c001a00a:	58                   	pop    eax
c001a00b:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001a010:	5a                   	pop    edx
c001a011:	68 60 b7 02 c0       	push   0xc002b760
c001a016:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a01c:	e8 43 68 ff ff       	call   c0010864 <VgaText::puts(char const*)>
c001a021:	59                   	pop    ecx
c001a022:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001a027:	5b                   	pop    ebx
c001a028:	68 fc b5 02 c0       	push   0xc002b5fc
c001a02d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a033:	e8 2c 68 ff ff       	call   c0010864 <VgaText::puts(char const*)>
c001a038:	0f 20 c0             	mov    eax,cr0
c001a03b:	5a                   	pop    edx
c001a03c:	59                   	pop    ecx
c001a03d:	50                   	push   eax
c001a03e:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001a043:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a049:	e8 d0 67 ff ff       	call   c001081e <VgaText::putx(unsigned int)>
c001a04e:	5b                   	pop    ebx
c001a04f:	58                   	pop    eax
c001a050:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001a055:	68 06 b6 02 c0       	push   0xc002b606
c001a05a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a060:	e8 ff 67 ff ff       	call   c0010864 <VgaText::puts(char const*)>
c001a065:	0f 20 d0             	mov    eax,cr2
c001a068:	5a                   	pop    edx
c001a069:	59                   	pop    ecx
c001a06a:	50                   	push   eax
c001a06b:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001a070:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a076:	e8 a3 67 ff ff       	call   c001081e <VgaText::putx(unsigned int)>
c001a07b:	5b                   	pop    ebx
c001a07c:	58                   	pop    eax
c001a07d:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001a082:	68 10 b6 02 c0       	push   0xc002b610
c001a087:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a08d:	e8 d2 67 ff ff       	call   c0010864 <VgaText::puts(char const*)>
c001a092:	0f 20 d8             	mov    eax,cr3
c001a095:	5a                   	pop    edx
c001a096:	59                   	pop    ecx
c001a097:	50                   	push   eax
c001a098:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001a09d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0a3:	e8 76 67 ff ff       	call   c001081e <VgaText::putx(unsigned int)>
c001a0a8:	5b                   	pop    ebx
c001a0a9:	58                   	pop    eax
c001a0aa:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001a0af:	68 23 b6 02 c0       	push   0xc002b623
c001a0b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0ba:	e8 a5 67 ff ff       	call   c0010864 <VgaText::puts(char const*)>
c001a0bf:	0f 20 e0             	mov    eax,cr4
c001a0c2:	5a                   	pop    edx
c001a0c3:	59                   	pop    ecx
c001a0c4:	50                   	push   eax
c001a0c5:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001a0ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0d0:	e8 49 67 ff ff       	call   c001081e <VgaText::putx(unsigned int)>
c001a0d5:	5b                   	pop    ebx
c001a0d6:	58                   	pop    eax
c001a0d7:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001a0dc:	68 2d b6 02 c0       	push   0xc002b62d
c001a0e1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0e7:	e8 78 67 ff ff       	call   c0010864 <VgaText::puts(char const*)>
c001a0ec:	5a                   	pop    edx
c001a0ed:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001a0f2:	59                   	pop    ecx
c001a0f3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a0f9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a0fc:	50                   	push   eax
c001a0fd:	e8 1c 67 ff ff       	call   c001081e <VgaText::putx(unsigned int)>
c001a102:	5b                   	pop    ebx
c001a103:	58                   	pop    eax
c001a104:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001a109:	68 44 b6 02 c0       	push   0xc002b644
c001a10e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a114:	e8 4b 67 ff ff       	call   c0010864 <VgaText::puts(char const*)>
c001a119:	5a                   	pop    edx
c001a11a:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001a11f:	59                   	pop    ecx
c001a120:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a126:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a129:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a12c:	50                   	push   eax
c001a12d:	e8 ec 66 ff ff       	call   c001081e <VgaText::putx(unsigned int)>
c001a132:	5b                   	pop    ebx
c001a133:	58                   	pop    eax
c001a134:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001a139:	68 44 b6 02 c0       	push   0xc002b644
c001a13e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a144:	e8 1b 67 ff ff       	call   c0010864 <VgaText::puts(char const*)>
c001a149:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001a14e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a151:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a157:	8b 12                	mov    edx,DWORD PTR [edx]
c001a159:	59                   	pop    ecx
c001a15a:	5b                   	pop    ebx
c001a15b:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a15e:	50                   	push   eax
c001a15f:	e8 ba 66 ff ff       	call   c001081e <VgaText::putx(unsigned int)>
c001a164:	83 c4 10             	add    esp,0x10
c001a167:	b2 fe                	mov    dl,0xfe
c001a169:	e4 60                	in     al,0x60
c001a16b:	3c 1c                	cmp    al,0x1c
c001a16d:	74 04                	je     c001a173 <Krnl::panic(char const*)+0x33a>
c001a16f:	3c 5a                	cmp    al,0x5a
c001a171:	75 f6                	jne    c001a169 <Krnl::panic(char const*)+0x330>
c001a173:	e4 64                	in     al,0x64
c001a175:	a8 02                	test   al,0x2
c001a177:	75 fa                	jne    c001a173 <Krnl::panic(char const*)+0x33a>
c001a179:	88 d0                	mov    al,dl
c001a17b:	e6 64                	out    0x64,al
c001a17d:	fa                   	cli    
c001a17e:	f4                   	hlt    
c001a17f:	eb e8                	jmp    c001a169 <Krnl::panic(char const*)+0x330>
c001a181:	50                   	push   eax
c001a182:	50                   	push   eax
c001a183:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001a188:	68 b0 b6 02 c0       	push   0xc002b6b0
c001a18d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a193:	e8 cc 66 ff ff       	call   c0010864 <VgaText::puts(char const*)>
c001a198:	58                   	pop    eax
c001a199:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001a19e:	5a                   	pop    edx
c001a19f:	68 be b5 02 c0       	push   0xc002b5be
c001a1a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1aa:	e8 b5 66 ff ff       	call   c0010864 <VgaText::puts(char const*)>
c001a1af:	59                   	pop    ecx
c001a1b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a1b5:	5b                   	pop    ebx
c001a1b6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a1b9:	83 c0 0c             	add    eax,0xc
c001a1bc:	50                   	push   eax
c001a1bd:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001a1c2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1c8:	e8 97 66 ff ff       	call   c0010864 <VgaText::puts(char const*)>
c001a1cd:	83 c4 10             	add    esp,0x10
c001a1d0:	e9 a3 fd ff ff       	jmp    c0019f78 <Krnl::panic(char const*)+0x13f>

c001a1d5 <Net::switchEndian16(unsigned short)>:
c001a1d5:	83 ec 04             	sub    esp,0x4
c001a1d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a1dc:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a1e0:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a1e4:	c1 f8 08             	sar    eax,0x8
c001a1e7:	89 c2                	mov    edx,eax
c001a1e9:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a1ed:	c1 e0 08             	shl    eax,0x8
c001a1f0:	09 d0                	or     eax,edx
c001a1f2:	83 c4 04             	add    esp,0x4
c001a1f5:	c3                   	ret    

c001a1f6 <Net::switchEndian32(unsigned int)>:
c001a1f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1fa:	c1 e8 18             	shr    eax,0x18
c001a1fd:	89 c2                	mov    edx,eax
c001a1ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a203:	c1 e0 08             	shl    eax,0x8
c001a206:	25 00 00 ff 00       	and    eax,0xff0000
c001a20b:	09 c2                	or     edx,eax
c001a20d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a211:	c1 e8 08             	shr    eax,0x8
c001a214:	25 00 ff 00 00       	and    eax,0xff00
c001a219:	09 c2                	or     edx,eax
c001a21b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a21f:	c1 e0 18             	shl    eax,0x18
c001a222:	09 d0                	or     eax,edx
c001a224:	c3                   	ret    

c001a225 <Net::crc32Calc(unsigned char*, int)>:
c001a225:	83 ec 10             	sub    esp,0x10
c001a228:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a22d:	75 07                	jne    c001a236 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a22f:	b8 00 00 00 00       	mov    eax,0x0
c001a234:	eb 7c                	jmp    c001a2b2 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a236:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a23b:	7f 07                	jg     c001a244 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a23d:	b8 00 00 00 00       	mov    eax,0x0
c001a242:	eb 6e                	jmp    c001a2b2 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a244:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a24c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a258:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a25c:	7d 4e                	jge    c001a2ac <Net::crc32Calc(unsigned char*, int)+0x87>
c001a25e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a262:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a266:	01 d0                	add    eax,edx
c001a268:	8a 00                	mov    al,BYTE PTR [eax]
c001a26a:	0f b6 c0             	movzx  eax,al
c001a26d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a271:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a279:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a27e:	7f 26                	jg     c001a2a6 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a280:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a284:	83 e0 01             	and    eax,0x1
c001a287:	74 0d                	je     c001a296 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a289:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a28d:	d1 e8                	shr    eax,1
c001a28f:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a294:	eb 06                	jmp    c001a29c <Net::crc32Calc(unsigned char*, int)+0x77>
c001a296:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a29a:	d1 e8                	shr    eax,1
c001a29c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a2a0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a2a4:	eb d3                	jmp    c001a279 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a2a6:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a2aa:	eb a8                	jmp    c001a254 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a2ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2b0:	f7 d0                	not    eax
c001a2b2:	83 c4 10             	add    esp,0x10
c001a2b5:	c3                   	ret    

c001a2b6 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a2b6:	57                   	push   edi
c001a2b7:	56                   	push   esi
c001a2b8:	53                   	push   ebx
c001a2b9:	83 ec 60             	sub    esp,0x60
c001a2bc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2c3:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a2c7:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a2cf:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a2d4:	7f 1a                	jg     c001a2f0 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a2d6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2dd:	8d 50 01             	lea    edx,[eax+0x1]
c001a2e0:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a2e7:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a2ea:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a2ee:	eb df                	jmp    c001a2cf <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a2f0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2f7:	8d 50 01             	lea    edx,[eax+0x1]
c001a2fa:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a301:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a304:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a30b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a30f:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a313:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a317:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a31f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a323:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a327:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a32b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a32f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a333:	89 c6                	mov    esi,eax
c001a335:	89 d7                	mov    edi,edx
c001a337:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a339:	89 c8                	mov    eax,ecx
c001a33b:	89 fa                	mov    edx,edi
c001a33d:	89 f3                	mov    ebx,esi
c001a33f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a343:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a347:	89 04 24             	mov    DWORD PTR [esp],eax
c001a34a:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a352:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a359:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a35d:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a361:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a365:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a36d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a371:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a375:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a379:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a37d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a381:	89 c6                	mov    esi,eax
c001a383:	89 d7                	mov    edi,edx
c001a385:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a387:	89 c8                	mov    eax,ecx
c001a389:	89 fa                	mov    edx,edi
c001a38b:	89 f3                	mov    ebx,esi
c001a38d:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a391:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a395:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a399:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a3a1:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a3a8:	0f b7 c0             	movzx  eax,ax
c001a3ab:	c1 f8 08             	sar    eax,0x8
c001a3ae:	89 c1                	mov    ecx,eax
c001a3b0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a3b7:	8d 50 01             	lea    edx,[eax+0x1]
c001a3ba:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a3c1:	88 ca                	mov    dl,cl
c001a3c3:	88 10                	mov    BYTE PTR [eax],dl
c001a3c5:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a3cc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a3d3:	8d 48 01             	lea    ecx,[eax+0x1]
c001a3d6:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a3dd:	88 10                	mov    BYTE PTR [eax],dl
c001a3df:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a3e3:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a3e7:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a3ee:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a3f2:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a3f6:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a3fa:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a3fe:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a402:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a406:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a40a:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a40e:	89 c6                	mov    esi,eax
c001a410:	89 d7                	mov    edi,edx
c001a412:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a414:	89 c8                	mov    eax,ecx
c001a416:	89 fa                	mov    edx,edi
c001a418:	89 f3                	mov    ebx,esi
c001a41a:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a41e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a422:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a426:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a42a:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a431:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a438:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a43c:	50                   	push   eax
c001a43d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a441:	e8 df fd ff ff       	call   c001a225 <Net::crc32Calc(unsigned char*, int)>
c001a446:	83 c4 08             	add    esp,0x8
c001a449:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a44d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a451:	c1 e8 18             	shr    eax,0x18
c001a454:	89 c1                	mov    ecx,eax
c001a456:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a45d:	8d 50 01             	lea    edx,[eax+0x1]
c001a460:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a467:	88 ca                	mov    dl,cl
c001a469:	88 10                	mov    BYTE PTR [eax],dl
c001a46b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a46f:	c1 e8 10             	shr    eax,0x10
c001a472:	89 c1                	mov    ecx,eax
c001a474:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a47b:	8d 50 01             	lea    edx,[eax+0x1]
c001a47e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a485:	88 ca                	mov    dl,cl
c001a487:	88 10                	mov    BYTE PTR [eax],dl
c001a489:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a48d:	c1 e8 08             	shr    eax,0x8
c001a490:	89 c1                	mov    ecx,eax
c001a492:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a499:	8d 50 01             	lea    edx,[eax+0x1]
c001a49c:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a4a3:	88 ca                	mov    dl,cl
c001a4a5:	88 10                	mov    BYTE PTR [eax],dl
c001a4a7:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a4ae:	8d 50 01             	lea    edx,[eax+0x1]
c001a4b1:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a4b8:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a4bc:	88 10                	mov    BYTE PTR [eax],dl
c001a4be:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a4c2:	83 c4 60             	add    esp,0x60
c001a4c5:	5b                   	pop    ebx
c001a4c6:	5e                   	pop    esi
c001a4c7:	5f                   	pop    edi
c001a4c8:	c3                   	ret    

c001a4c9 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a4c9:	57                   	push   edi
c001a4ca:	56                   	push   esi
c001a4cb:	53                   	push   ebx
c001a4cc:	83 ec 70             	sub    esp,0x70
c001a4cf:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a4d6:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a4da:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a4e2:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a4e9:	83 c0 0e             	add    eax,0xe
c001a4ec:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a4f0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a4f7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a4fb:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a503:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a507:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a50b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a50f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a513:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a517:	89 c6                	mov    esi,eax
c001a519:	89 d7                	mov    edi,edx
c001a51b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a51d:	89 c8                	mov    eax,ecx
c001a51f:	89 fa                	mov    edx,edi
c001a521:	89 f3                	mov    ebx,esi
c001a523:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a527:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a52b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a52f:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a537:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a53e:	83 c0 08             	add    eax,0x8
c001a541:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001a545:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a54c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a550:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001a558:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a55c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a560:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a564:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a568:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a56c:	89 c6                	mov    esi,eax
c001a56e:	89 d7                	mov    edi,edx
c001a570:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a572:	89 c8                	mov    eax,ecx
c001a574:	89 fa                	mov    edx,edi
c001a576:	89 f3                	mov    ebx,esi
c001a578:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a57c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a580:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a584:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a58c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a593:	8d 50 01             	lea    edx,[eax+0x1]
c001a596:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a59d:	8a 00                	mov    al,BYTE PTR [eax]
c001a59f:	0f b6 c0             	movzx  eax,al
c001a5a2:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001a5a7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a5ae:	8d 50 01             	lea    edx,[eax+0x1]
c001a5b1:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a5b8:	8a 00                	mov    al,BYTE PTR [eax]
c001a5ba:	0f b6 c0             	movzx  eax,al
c001a5bd:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001a5c2:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001a5c7:	c1 e0 08             	shl    eax,0x8
c001a5ca:	89 c2                	mov    edx,eax
c001a5cc:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a5d0:	09 d0                	or     eax,edx
c001a5d2:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a5d9:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a5dd:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001a5e5:	75 46                	jne    c001a62d <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a5e7:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a5ee:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a5f1:	66 3d dc 05          	cmp    ax,0x5dc
c001a5f5:	77 16                	ja     c001a60d <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001a5f7:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a5fe:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a601:	0f b7 c0             	movzx  eax,ax
c001a604:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a60b:	eb 20                	jmp    c001a62d <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a60d:	83 ec 0c             	sub    esp,0xc
c001a610:	68 88 b7 02 c0       	push   0xc002b788
c001a615:	e8 b3 80 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c001a61a:	83 c4 10             	add    esp,0x10
c001a61d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a624:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a628:	e9 17 01 00 00       	jmp    c001a744 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001a62d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a634:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a63b:	8b 12                	mov    edx,DWORD PTR [edx]
c001a63d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a641:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a648:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001a64c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a650:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a658:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a65c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a660:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a664:	89 c6                	mov    esi,eax
c001a666:	89 d7                	mov    edi,edx
c001a668:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a66a:	89 c8                	mov    eax,ecx
c001a66c:	89 fa                	mov    edx,edi
c001a66e:	89 f3                	mov    ebx,esi
c001a670:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a674:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a678:	89 04 24             	mov    DWORD PTR [esp],eax
c001a67b:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a682:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001a689:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a690:	8d 50 01             	lea    edx,[eax+0x1]
c001a693:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a69a:	8a 00                	mov    al,BYTE PTR [eax]
c001a69c:	0f b6 c0             	movzx  eax,al
c001a69f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001a6a3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6aa:	8d 50 01             	lea    edx,[eax+0x1]
c001a6ad:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a6b4:	8a 00                	mov    al,BYTE PTR [eax]
c001a6b6:	0f b6 c0             	movzx  eax,al
c001a6b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001a6bd:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6c4:	8d 50 01             	lea    edx,[eax+0x1]
c001a6c7:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a6ce:	8a 00                	mov    al,BYTE PTR [eax]
c001a6d0:	0f b6 c0             	movzx  eax,al
c001a6d3:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001a6d7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6de:	8d 50 01             	lea    edx,[eax+0x1]
c001a6e1:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a6e8:	8a 00                	mov    al,BYTE PTR [eax]
c001a6ea:	0f b6 c0             	movzx  eax,al
c001a6ed:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a6f1:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001a6f5:	c1 e0 18             	shl    eax,0x18
c001a6f8:	89 c2                	mov    edx,eax
c001a6fa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001a6fe:	c1 e0 10             	shl    eax,0x10
c001a701:	09 c2                	or     edx,eax
c001a703:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a707:	c1 e0 08             	shl    eax,0x8
c001a70a:	09 d0                	or     eax,edx
c001a70c:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001a710:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a714:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a71b:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001a71f:	83 e8 04             	sub    eax,0x4
c001a722:	83 ec 08             	sub    esp,0x8
c001a725:	50                   	push   eax
c001a726:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a72a:	e8 f6 fa ff ff       	call   c001a225 <Net::crc32Calc(unsigned char*, int)>
c001a72f:	83 c4 10             	add    esp,0x10
c001a732:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001a736:	0f 94 c2             	sete   dl
c001a739:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a740:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a743:	90                   	nop
c001a744:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a74b:	83 c4 70             	add    esp,0x70
c001a74e:	5b                   	pop    ebx
c001a74f:	5e                   	pop    esi
c001a750:	5f                   	pop    edi
c001a751:	c2 04 00             	ret    0x4

c001a754 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a754:	55                   	push   ebp
c001a755:	57                   	push   edi
c001a756:	56                   	push   esi
c001a757:	53                   	push   ebx
c001a758:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a75e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a765:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a767:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a76a:	80 fb 40             	cmp    bl,0x40
c001a76d:	75 1b                	jne    c001a78a <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a76f:	8a 16                	mov    dl,BYTE PTR [esi]
c001a771:	84 d2                	test   dl,dl
c001a773:	0f 84 f1 00 00 00    	je     c001a86a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a779:	8d 46 01             	lea    eax,[esi+0x1]
c001a77c:	80 fa 3a             	cmp    dl,0x3a
c001a77f:	74 04                	je     c001a785 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a781:	89 c6                	mov    esi,eax
c001a783:	eb ea                	jmp    c001a76f <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a785:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a788:	89 c6                	mov    esi,eax
c001a78a:	50                   	push   eax
c001a78b:	6a 40                	push   0x40
c001a78d:	6a 00                	push   0x0
c001a78f:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a793:	50                   	push   eax
c001a794:	e8 b7 5f fe ff       	call   c0000750 <memset>
c001a799:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a7a0:	31 c0                	xor    eax,eax
c001a7a2:	83 c4 10             	add    esp,0x10
c001a7a5:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a7a7:	84 c9                	test   cl,cl
c001a7a9:	0f 84 bb 00 00 00    	je     c001a86a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a7af:	3d c7 00 00 00       	cmp    eax,0xc7
c001a7b4:	0f 8f b0 00 00 00    	jg     c001a86a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a7ba:	80 f9 0a             	cmp    cl,0xa
c001a7bd:	0f 85 98 00 00 00    	jne    c001a85b <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a7c3:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a7c8:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a7cc:	a8 df                	test   al,0xdf
c001a7ce:	0f 94 c1             	sete   cl
c001a7d1:	3c 23                	cmp    al,0x23
c001a7d3:	0f 94 c2             	sete   dl
c001a7d6:	08 d1                	or     cl,dl
c001a7d8:	75 4a                	jne    c001a824 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a7da:	8d 50 f7             	lea    edx,[eax-0x9]
c001a7dd:	80 fa 01             	cmp    dl,0x1
c001a7e0:	76 42                	jbe    c001a824 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a7e2:	3c 5b                	cmp    al,0x5b
c001a7e4:	75 42                	jne    c001a828 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a7e6:	80 fb 40             	cmp    bl,0x40
c001a7e9:	75 39                	jne    c001a824 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a7eb:	83 ec 0c             	sub    esp,0xc
c001a7ee:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a7f2:	52                   	push   edx
c001a7f3:	e8 74 5f fe ff       	call   c000076c <strlen>
c001a7f8:	83 c4 10             	add    esp,0x10
c001a7fb:	83 f8 3f             	cmp    eax,0x3f
c001a7fe:	77 6a                	ja     c001a86a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a800:	50                   	push   eax
c001a801:	50                   	push   eax
c001a802:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a806:	52                   	push   edx
c001a807:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a80b:	52                   	push   edx
c001a80c:	e8 fb 5f fe ff       	call   c000080c <strcpy>
c001a811:	58                   	pop    eax
c001a812:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a816:	52                   	push   edx
c001a817:	e8 50 5f fe ff       	call   c000076c <strlen>
c001a81c:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a821:	83 c4 10             	add    esp,0x10
c001a824:	31 d2                	xor    edx,edx
c001a826:	eb 3a                	jmp    c001a862 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a828:	80 fb 40             	cmp    bl,0x40
c001a82b:	74 06                	je     c001a833 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a82d:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a831:	eb 20                	jmp    c001a853 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a833:	50                   	push   eax
c001a834:	50                   	push   eax
c001a835:	55                   	push   ebp
c001a836:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a83a:	50                   	push   eax
c001a83b:	e8 58 60 fe ff       	call   c0000898 <strcmp>
c001a840:	83 c4 10             	add    esp,0x10
c001a843:	85 c0                	test   eax,eax
c001a845:	75 dd                	jne    c001a824 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a847:	eb e4                	jmp    c001a82d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a849:	8d 50 01             	lea    edx,[eax+0x1]
c001a84c:	80 f9 3d             	cmp    cl,0x3d
c001a84f:	74 1d                	je     c001a86e <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a851:	89 d0                	mov    eax,edx
c001a853:	8a 08                	mov    cl,BYTE PTR [eax]
c001a855:	84 c9                	test   cl,cl
c001a857:	75 f0                	jne    c001a849 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a859:	eb 0f                	jmp    c001a86a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a85b:	8d 50 01             	lea    edx,[eax+0x1]
c001a85e:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a862:	47                   	inc    edi
c001a863:	89 d0                	mov    eax,edx
c001a865:	e9 3b ff ff ff       	jmp    c001a7a5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a86a:	31 c0                	xor    eax,eax
c001a86c:	eb 33                	jmp    c001a8a1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a86e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a872:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a875:	50                   	push   eax
c001a876:	50                   	push   eax
c001a877:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a87b:	50                   	push   eax
c001a87c:	56                   	push   esi
c001a87d:	e8 16 60 fe ff       	call   c0000898 <strcmp>
c001a882:	83 c4 10             	add    esp,0x10
c001a885:	85 c0                	test   eax,eax
c001a887:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a88b:	75 97                	jne    c001a824 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a88d:	51                   	push   ecx
c001a88e:	51                   	push   ecx
c001a88f:	52                   	push   edx
c001a890:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a897:	e8 70 5f fe ff       	call   c000080c <strcpy>
c001a89c:	83 c4 10             	add    esp,0x10
c001a89f:	b0 01                	mov    al,0x1
c001a8a1:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a8a7:	5b                   	pop    ebx
c001a8a8:	5e                   	pop    esi
c001a8a9:	5f                   	pop    edi
c001a8aa:	5d                   	pop    ebp
c001a8ab:	c3                   	ret    

c001a8ac <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a8ac:	57                   	push   edi
c001a8ad:	56                   	push   esi
c001a8ae:	53                   	push   ebx
c001a8af:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a8b5:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a8bc:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a8c3:	53                   	push   ebx
c001a8c4:	e8 a3 5e fe ff       	call   c000076c <strlen>
c001a8c9:	89 34 24             	mov    DWORD PTR [esp],esi
c001a8cc:	89 c7                	mov    edi,eax
c001a8ce:	e8 99 5e fe ff       	call   c000076c <strlen>
c001a8d3:	83 c4 10             	add    esp,0x10
c001a8d6:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a8da:	3d ff 00 00 00       	cmp    eax,0xff
c001a8df:	0f 87 d3 00 00 00    	ja     c001a9b8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a8e5:	57                   	push   edi
c001a8e6:	57                   	push   edi
c001a8e7:	56                   	push   esi
c001a8e8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a8ec:	56                   	push   esi
c001a8ed:	e8 1a 5f fe ff       	call   c000080c <strcpy>
c001a8f2:	58                   	pop    eax
c001a8f3:	5a                   	pop    edx
c001a8f4:	68 2a bb 02 c0       	push   0xc002bb2a
c001a8f9:	56                   	push   esi
c001a8fa:	e8 4d 60 fe ff       	call   c000094c <strcat>
c001a8ff:	59                   	pop    ecx
c001a900:	5f                   	pop    edi
c001a901:	53                   	push   ebx
c001a902:	56                   	push   esi
c001a903:	e8 44 60 fe ff       	call   c000094c <strcat>
c001a908:	58                   	pop    eax
c001a909:	5a                   	pop    edx
c001a90a:	68 d4 b7 02 c0       	push   0xc002b7d4
c001a90f:	56                   	push   esi
c001a910:	e8 37 60 fe ff       	call   c000094c <strcat>
c001a915:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a91c:	e8 78 4c ff ff       	call   c000f599 <malloc>
c001a921:	83 c4 0c             	add    esp,0xc
c001a924:	89 c3                	mov    ebx,eax
c001a926:	ff 35 70 0e 03 c0    	push   DWORD PTR ds:0xc0030e70
c001a92c:	56                   	push   esi
c001a92d:	50                   	push   eax
c001a92e:	e8 f9 82 ff ff       	call   c0012c2c <File::File(char const*, Process*)>
c001a933:	83 c4 10             	add    esp,0x10
c001a936:	85 db                	test   ebx,ebx
c001a938:	74 7e                	je     c001a9b8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a93a:	51                   	push   ecx
c001a93b:	51                   	push   ecx
c001a93c:	6a 01                	push   0x1
c001a93e:	53                   	push   ebx
c001a93f:	e8 4c 83 ff ff       	call   c0012c90 <File::open(FileOpenMode)>
c001a944:	83 c4 10             	add    esp,0x10
c001a947:	85 c0                	test   eax,eax
c001a949:	74 08                	je     c001a953 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a94b:	83 ec 0c             	sub    esp,0xc
c001a94e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a950:	53                   	push   ebx
c001a951:	eb 5f                	jmp    c001a9b2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a953:	52                   	push   edx
c001a954:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a958:	50                   	push   eax
c001a959:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a95d:	50                   	push   eax
c001a95e:	53                   	push   ebx
c001a95f:	e8 d8 85 ff ff       	call   c0012f3c <File::stat(unsigned long long*, bool*)>
c001a964:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a968:	83 c4 10             	add    esp,0x10
c001a96b:	89 c1                	mov    ecx,eax
c001a96d:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a971:	74 31                	je     c001a9a4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a973:	83 ec 0c             	sub    esp,0xc
c001a976:	50                   	push   eax
c001a977:	e8 1d 4c ff ff       	call   c000f599 <malloc>
c001a97c:	89 c6                	mov    esi,eax
c001a97e:	58                   	pop    eax
c001a97f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a981:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a985:	52                   	push   edx
c001a986:	56                   	push   esi
c001a987:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a98b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a98f:	53                   	push   ebx
c001a990:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a993:	83 c4 20             	add    esp,0x20
c001a996:	85 c0                	test   eax,eax
c001a998:	75 0a                	jne    c001a9a4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a99a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a99e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a9a2:	74 18                	je     c001a9bc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a9a4:	83 ec 0c             	sub    esp,0xc
c001a9a7:	53                   	push   ebx
c001a9a8:	e8 41 83 ff ff       	call   c0012cee <File::close()>
c001a9ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a9b2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a9b5:	83 c4 10             	add    esp,0x10
c001a9b8:	31 c0                	xor    eax,eax
c001a9ba:	eb 3b                	jmp    c001a9f7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a9bc:	83 ec 0c             	sub    esp,0xc
c001a9bf:	53                   	push   ebx
c001a9c0:	e8 29 83 ff ff       	call   c0012cee <File::close()>
c001a9c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a9ca:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a9cd:	83 c4 0c             	add    esp,0xc
c001a9d0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a9d7:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a9de:	56                   	push   esi
c001a9df:	e8 70 fd ff ff       	call   c001a754 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a9e4:	89 34 24             	mov    DWORD PTR [esp],esi
c001a9e7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a9eb:	e8 b9 4b ff ff       	call   c000f5a9 <free>
c001a9f0:	83 c4 10             	add    esp,0x10
c001a9f3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a9f7:	81 c4 20 01 00 00    	add    esp,0x120
c001a9fd:	5b                   	pop    ebx
c001a9fe:	5e                   	pop    esi
c001a9ff:	5f                   	pop    edi
c001aa00:	c3                   	ret    

c001aa01 <Reg::getLine(char*, char*, char*)>:
c001aa01:	57                   	push   edi
c001aa02:	56                   	push   esi
c001aa03:	53                   	push   ebx
c001aa04:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa08:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aa0c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001aa10:	57                   	push   edi
c001aa11:	56                   	push   esi
c001aa12:	53                   	push   ebx
c001aa13:	68 d9 b7 02 c0       	push   0xc002b7d9
c001aa18:	e8 8f fe ff ff       	call   c001a8ac <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aa1d:	83 c4 10             	add    esp,0x10
c001aa20:	84 c0                	test   al,al
c001aa22:	75 10                	jne    c001aa34 <Reg::getLine(char*, char*, char*)+0x33>
c001aa24:	57                   	push   edi
c001aa25:	56                   	push   esi
c001aa26:	53                   	push   ebx
c001aa27:	68 fe b7 02 c0       	push   0xc002b7fe
c001aa2c:	e8 7b fe ff ff       	call   c001a8ac <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aa31:	83 c4 10             	add    esp,0x10
c001aa34:	5b                   	pop    ebx
c001aa35:	5e                   	pop    esi
c001aa36:	5f                   	pop    edi
c001aa37:	c3                   	ret    

c001aa38 <Reg::readInt(char*, char*, int*)>:
c001aa38:	55                   	push   ebp
c001aa39:	57                   	push   edi
c001aa3a:	56                   	push   esi
c001aa3b:	53                   	push   ebx
c001aa3c:	81 ec f0 00 00 00    	sub    esp,0xf0
c001aa42:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001aa46:	57                   	push   edi
c001aa47:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aa4e:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aa55:	e8 a7 ff ff ff       	call   c001aa01 <Reg::getLine(char*, char*, char*)>
c001aa5a:	83 c4 10             	add    esp,0x10
c001aa5d:	84 c0                	test   al,al
c001aa5f:	0f 84 b3 00 00 00    	je     c001ab18 <Reg::readInt(char*, char*, int*)+0xe0>
c001aa65:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001aa69:	80 fa 2b             	cmp    dl,0x2b
c001aa6c:	74 0c                	je     c001aa7a <Reg::readInt(char*, char*, int*)+0x42>
c001aa6e:	80 fa 2d             	cmp    dl,0x2d
c001aa71:	75 0e                	jne    c001aa81 <Reg::readInt(char*, char*, int*)+0x49>
c001aa73:	ba 01 00 00 00       	mov    edx,0x1
c001aa78:	eb 0b                	jmp    c001aa85 <Reg::readInt(char*, char*, int*)+0x4d>
c001aa7a:	ba 01 00 00 00       	mov    edx,0x1
c001aa7f:	eb 02                	jmp    c001aa83 <Reg::readInt(char*, char*, int*)+0x4b>
c001aa81:	31 d2                	xor    edx,edx
c001aa83:	31 c0                	xor    eax,eax
c001aa85:	be 0a 00 00 00       	mov    esi,0xa
c001aa8a:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001aa8f:	75 20                	jne    c001aab1 <Reg::readInt(char*, char*, int*)+0x79>
c001aa91:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001aa95:	80 f9 78             	cmp    cl,0x78
c001aa98:	75 0a                	jne    c001aaa4 <Reg::readInt(char*, char*, int*)+0x6c>
c001aa9a:	83 c2 02             	add    edx,0x2
c001aa9d:	be 10 00 00 00       	mov    esi,0x10
c001aaa2:	eb 0d                	jmp    c001aab1 <Reg::readInt(char*, char*, int*)+0x79>
c001aaa4:	80 f9 62             	cmp    cl,0x62
c001aaa7:	75 08                	jne    c001aab1 <Reg::readInt(char*, char*, int*)+0x79>
c001aaa9:	83 c2 02             	add    edx,0x2
c001aaac:	be 02 00 00 00       	mov    esi,0x2
c001aab1:	01 d7                	add    edi,edx
c001aab3:	31 d2                	xor    edx,edx
c001aab5:	8a 1f                	mov    bl,BYTE PTR [edi]
c001aab7:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001aabb:	80 fb 0d             	cmp    bl,0xd
c001aabe:	0f 94 c3             	sete   bl
c001aac1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001aac6:	0f 94 c1             	sete   cl
c001aac9:	08 cb                	or     bl,cl
c001aacb:	75 3a                	jne    c001ab07 <Reg::readInt(char*, char*, int*)+0xcf>
c001aacd:	0f af d6             	imul   edx,esi
c001aad0:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001aad5:	83 fe 10             	cmp    esi,0x10
c001aad8:	75 26                	jne    c001ab00 <Reg::readInt(char*, char*, int*)+0xc8>
c001aada:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001aade:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001aae1:	89 e9                	mov    ecx,ebp
c001aae3:	80 f9 05             	cmp    cl,0x5
c001aae6:	77 06                	ja     c001aaee <Reg::readInt(char*, char*, int*)+0xb6>
c001aae8:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001aaec:	eb 16                	jmp    c001ab04 <Reg::readInt(char*, char*, int*)+0xcc>
c001aaee:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001aaf2:	83 e9 61             	sub    ecx,0x61
c001aaf5:	80 f9 05             	cmp    cl,0x5
c001aaf8:	77 06                	ja     c001ab00 <Reg::readInt(char*, char*, int*)+0xc8>
c001aafa:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001aafe:	eb 04                	jmp    c001ab04 <Reg::readInt(char*, char*, int*)+0xcc>
c001ab00:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001ab04:	47                   	inc    edi
c001ab05:	eb ae                	jmp    c001aab5 <Reg::readInt(char*, char*, int*)+0x7d>
c001ab07:	84 c0                	test   al,al
c001ab09:	74 02                	je     c001ab0d <Reg::readInt(char*, char*, int*)+0xd5>
c001ab0b:	f7 da                	neg    edx
c001ab0d:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001ab14:	89 10                	mov    DWORD PTR [eax],edx
c001ab16:	88 d8                	mov    al,bl
c001ab18:	81 c4 ec 00 00 00    	add    esp,0xec
c001ab1e:	5b                   	pop    ebx
c001ab1f:	5e                   	pop    esi
c001ab20:	5f                   	pop    edi
c001ab21:	5d                   	pop    ebp
c001ab22:	c3                   	ret    

c001ab23 <Reg::readString(char*, char*, char*, int)>:
c001ab23:	57                   	push   edi
c001ab24:	56                   	push   esi
c001ab25:	53                   	push   ebx
c001ab26:	81 ec d4 00 00 00    	sub    esp,0xd4
c001ab2c:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001ab33:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001ab37:	57                   	push   edi
c001ab38:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ab3f:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ab46:	e8 b6 fe ff ff       	call   c001aa01 <Reg::getLine(char*, char*, char*)>
c001ab4b:	83 c4 10             	add    esp,0x10
c001ab4e:	89 c6                	mov    esi,eax
c001ab50:	84 c0                	test   al,al
c001ab52:	74 44                	je     c001ab98 <Reg::readString(char*, char*, char*, int)+0x75>
c001ab54:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001ab5b:	31 c0                	xor    eax,eax
c001ab5d:	4a                   	dec    edx
c001ab5e:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001ab61:	84 c9                	test   cl,cl
c001ab63:	74 0f                	je     c001ab74 <Reg::readString(char*, char*, char*, int)+0x51>
c001ab65:	39 c2                	cmp    edx,eax
c001ab67:	7e 0b                	jle    c001ab74 <Reg::readString(char*, char*, char*, int)+0x51>
c001ab69:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001ab6c:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001ab71:	40                   	inc    eax
c001ab72:	eb ea                	jmp    c001ab5e <Reg::readString(char*, char*, char*, int)+0x3b>
c001ab74:	83 ec 0c             	sub    esp,0xc
c001ab77:	53                   	push   ebx
c001ab78:	e8 ef 5b fe ff       	call   c000076c <strlen>
c001ab7d:	83 c4 10             	add    esp,0x10
c001ab80:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001ab85:	75 11                	jne    c001ab98 <Reg::readString(char*, char*, char*, int)+0x75>
c001ab87:	83 ec 0c             	sub    esp,0xc
c001ab8a:	53                   	push   ebx
c001ab8b:	e8 dc 5b fe ff       	call   c000076c <strlen>
c001ab90:	83 c4 10             	add    esp,0x10
c001ab93:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001ab98:	81 c4 d0 00 00 00    	add    esp,0xd0
c001ab9e:	89 f0                	mov    eax,esi
c001aba0:	5b                   	pop    ebx
c001aba1:	5e                   	pop    esi
c001aba2:	5f                   	pop    edi
c001aba3:	c3                   	ret    

c001aba4 <Reg::readBool(char*, char*, bool*)>:
c001aba4:	83 ec 20             	sub    esp,0x20
c001aba7:	8d 44 24 10          	lea    eax,[esp+0x10]
c001abab:	50                   	push   eax
c001abac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abb4:	e8 7f fe ff ff       	call   c001aa38 <Reg::readInt(char*, char*, int*)>
c001abb9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001abbe:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001abc2:	0f 95 02             	setne  BYTE PTR [edx]
c001abc5:	83 c4 2c             	add    esp,0x2c
c001abc8:	c3                   	ret    

c001abc9 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001abc9:	53                   	push   ebx
c001abca:	83 ec 1c             	sub    esp,0x1c
c001abcd:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001abd1:	8d 44 24 13          	lea    eax,[esp+0x13]
c001abd5:	50                   	push   eax
c001abd6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abde:	e8 c1 ff ff ff       	call   c001aba4 <Reg::readBool(char*, char*, bool*)>
c001abe3:	83 c4 10             	add    esp,0x10
c001abe6:	84 c0                	test   al,al
c001abe8:	74 04                	je     c001abee <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001abea:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001abee:	88 d8                	mov    al,bl
c001abf0:	83 c4 18             	add    esp,0x18
c001abf3:	5b                   	pop    ebx
c001abf4:	c3                   	ret    

c001abf5 <Reg::readIntWithDefault(char*, char*, int)>:
c001abf5:	53                   	push   ebx
c001abf6:	83 ec 1c             	sub    esp,0x1c
c001abf9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001abfd:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ac01:	50                   	push   eax
c001ac02:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac0a:	e8 29 fe ff ff       	call   c001aa38 <Reg::readInt(char*, char*, int*)>
c001ac0f:	83 c4 10             	add    esp,0x10
c001ac12:	84 c0                	test   al,al
c001ac14:	74 04                	je     c001ac1a <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001ac16:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ac1a:	89 d8                	mov    eax,ebx
c001ac1c:	83 c4 18             	add    esp,0x18
c001ac1f:	5b                   	pop    ebx
c001ac20:	c3                   	ret    

c001ac21 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001ac21:	57                   	push   edi
c001ac22:	56                   	push   esi
c001ac23:	56                   	push   esi
c001ac24:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ac28:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001ac2c:	56                   	push   esi
c001ac2d:	57                   	push   edi
c001ac2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac36:	e8 e8 fe ff ff       	call   c001ab23 <Reg::readString(char*, char*, char*, int)>
c001ac3b:	83 c4 10             	add    esp,0x10
c001ac3e:	84 c0                	test   al,al
c001ac40:	75 1a                	jne    c001ac5c <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001ac42:	51                   	push   ecx
c001ac43:	56                   	push   esi
c001ac44:	6a 00                	push   0x0
c001ac46:	57                   	push   edi
c001ac47:	e8 04 5b fe ff       	call   c0000750 <memset>
c001ac4c:	8d 4e ff             	lea    ecx,[esi-0x1]
c001ac4f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ac53:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ac55:	83 c4 10             	add    esp,0x10
c001ac58:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ac5c:	89 f8                	mov    eax,edi
c001ac5e:	5a                   	pop    edx
c001ac5f:	5e                   	pop    esi
c001ac60:	5f                   	pop    edi
c001ac61:	c3                   	ret    

c001ac62 <Sys::eject(regs*)>:
c001ac62:	83 ec 0c             	sub    esp,0xc
c001ac65:	83 ca ff             	or     edx,0xffffffff
c001ac68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac6c:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001ac6f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ac74:	83 e9 41             	sub    ecx,0x41
c001ac77:	83 f9 19             	cmp    ecx,0x19
c001ac7a:	77 18                	ja     c001ac94 <Sys::eject(regs*)+0x32>
c001ac7c:	8b 0c 8d 20 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd20e0]
c001ac83:	85 c9                	test   ecx,ecx
c001ac85:	74 0d                	je     c001ac94 <Sys::eject(regs*)+0x32>
c001ac87:	83 ec 0c             	sub    esp,0xc
c001ac8a:	51                   	push   ecx
c001ac8b:	e8 28 b3 ff ff       	call   c0015fb8 <LogicalDisk::eject()>
c001ac90:	83 c4 10             	add    esp,0x10
c001ac93:	99                   	cdq    
c001ac94:	83 c4 0c             	add    esp,0xc
c001ac97:	c3                   	ret    

c001ac98 <Sys::exit(regs*)>:
c001ac98:	83 ec 18             	sub    esp,0x18
c001ac9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ac9f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001aca2:	e8 bc 35 00 00       	call   c001e263 <terminateTask(int)>
c001aca7:	83 c8 ff             	or     eax,0xffffffff
c001acaa:	83 c4 1c             	add    esp,0x1c
c001acad:	89 c2                	mov    edx,eax
c001acaf:	c3                   	ret    

c001acb0 <Sys::getCwd(regs*)>:
c001acb0:	83 ec 10             	sub    esp,0x10
c001acb3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001acb7:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001acba:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001acbd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001acc2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001acc5:	e8 64 7d ff ff       	call   c0012a2e <Fs::getcwd(Process*, char*, int)>
c001acca:	83 c4 1c             	add    esp,0x1c
c001accd:	99                   	cdq    
c001acce:	c3                   	ret    

c001accf <Sys::getPID(regs*)>:
c001accf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001acd4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001acd7:	8b 00                	mov    eax,DWORD PTR [eax]
c001acd9:	99                   	cdq    
c001acda:	c3                   	ret    

c001acdb <Sys::getRAMData(regs*)>:
c001acdb:	8b 0d 74 d9 02 c0    	mov    ecx,DWORD PTR ds:0xc002d974
c001ace1:	6b 05 70 d9 02 c0 64 	imul   eax,DWORD PTR ds:0xc002d970,0x64
c001ace8:	99                   	cdq    
c001ace9:	f7 f9                	idiv   ecx
c001aceb:	c1 e0 18             	shl    eax,0x18
c001acee:	09 c8                	or     eax,ecx
c001acf0:	99                   	cdq    
c001acf1:	c3                   	ret    

c001acf2 <Sys::getVGAPtr(regs*)>:
c001acf2:	55                   	push   ebp
c001acf3:	57                   	push   edi
c001acf4:	56                   	push   esi
c001acf5:	53                   	push   ebx
c001acf6:	83 ec 18             	sub    esp,0x18
c001acf9:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001acfd:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ad00:	e8 aa 30 00 00       	call   c001ddaf <Thr::processFromPID(int)>
c001ad05:	83 c4 10             	add    esp,0x10
c001ad08:	89 c1                	mov    ecx,eax
c001ad0a:	b8 01 00 00 00       	mov    eax,0x1
c001ad0f:	85 c9                	test   ecx,ecx
c001ad11:	74 59                	je     c001ad6c <Sys::getVGAPtr(regs*)+0x7a>
c001ad13:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001ad19:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001ad1d:	74 0c                	je     c001ad2b <Sys::getVGAPtr(regs*)+0x39>
c001ad1f:	83 ec 0c             	sub    esp,0xc
c001ad22:	53                   	push   ebx
c001ad23:	e8 2f 56 ff ff       	call   c0010357 <setActiveTerminal(VgaText*)>
c001ad28:	83 c4 10             	add    esp,0x10
c001ad2b:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001ad2e:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ad31:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001ad36:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad38:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001ad3b:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ad3e:	81 c3 82 00 00 00    	add    ebx,0x82
c001ad44:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001ad4a:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ad4d:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001ad50:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001ad56:	50                   	push   eax
c001ad57:	50                   	push   eax
c001ad58:	53                   	push   ebx
c001ad59:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ad5c:	05 a8 0f 00 00       	add    eax,0xfa8
c001ad61:	50                   	push   eax
c001ad62:	e8 a5 5a fe ff       	call   c000080c <strcpy>
c001ad67:	83 c4 10             	add    esp,0x10
c001ad6a:	31 c0                	xor    eax,eax
c001ad6c:	83 c4 0c             	add    esp,0xc
c001ad6f:	31 d2                	xor    edx,edx
c001ad71:	5b                   	pop    ebx
c001ad72:	5e                   	pop    esi
c001ad73:	5f                   	pop    edi
c001ad74:	5d                   	pop    ebp
c001ad75:	c3                   	ret    

c001ad76 <Sys::loadDLL(regs*)>:
c001ad76:	56                   	push   esi
c001ad77:	53                   	push   ebx
c001ad78:	31 d2                	xor    edx,edx
c001ad7a:	51                   	push   ecx
c001ad7b:	b8 01 00 00 00       	mov    eax,0x1
c001ad80:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ad84:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001ad88:	0f 84 8c 00 00 00    	je     c001ae1a <Sys::loadDLL(regs*)+0xa4>
c001ad8e:	83 ec 0c             	sub    esp,0xc
c001ad91:	68 14 01 00 00       	push   0x114
c001ad96:	e8 fe 47 ff ff       	call   c000f599 <malloc>
c001ad9b:	83 c4 0c             	add    esp,0xc
c001ad9e:	89 c3                	mov    ebx,eax
c001ada0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ada5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ada8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001adab:	53                   	push   ebx
c001adac:	e8 7b 7e ff ff       	call   c0012c2c <File::File(char const*, Process*)>
c001adb1:	83 c4 10             	add    esp,0x10
c001adb4:	31 d2                	xor    edx,edx
c001adb6:	b8 02 00 00 00       	mov    eax,0x2
c001adbb:	85 db                	test   ebx,ebx
c001adbd:	74 5b                	je     c001ae1a <Sys::loadDLL(regs*)+0xa4>
c001adbf:	83 ec 0c             	sub    esp,0xc
c001adc2:	53                   	push   ebx
c001adc3:	e8 36 81 ff ff       	call   c0012efe <File::exists()>
c001adc8:	83 c4 10             	add    esp,0x10
c001adcb:	84 c0                	test   al,al
c001adcd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001adcf:	75 11                	jne    c001ade2 <Sys::loadDLL(regs*)+0x6c>
c001add1:	83 ec 0c             	sub    esp,0xc
c001add4:	53                   	push   ebx
c001add5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001add8:	83 c4 10             	add    esp,0x10
c001addb:	b8 03 00 00 00       	mov    eax,0x3
c001ade0:	eb 36                	jmp    c001ae18 <Sys::loadDLL(regs*)+0xa2>
c001ade2:	83 ec 0c             	sub    esp,0xc
c001ade5:	53                   	push   ebx
c001ade6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ade9:	58                   	pop    eax
c001adea:	5a                   	pop    edx
c001adeb:	6a 00                	push   0x0
c001aded:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001adf0:	e8 0e 22 00 00       	call   c001d003 <Thr::loadDLL(char const*, bool)>
c001adf5:	83 c4 10             	add    esp,0x10
c001adf8:	89 c1                	mov    ecx,eax
c001adfa:	31 d2                	xor    edx,edx
c001adfc:	b8 04 00 00 00       	mov    eax,0x4
c001ae01:	85 c9                	test   ecx,ecx
c001ae03:	74 15                	je     c001ae1a <Sys::loadDLL(regs*)+0xa4>
c001ae05:	53                   	push   ebx
c001ae06:	53                   	push   ebx
c001ae07:	ff 35 28 d9 02 c0    	push   DWORD PTR ds:0xc002d928
c001ae0d:	51                   	push   ecx
c001ae0e:	e8 1b 24 00 00       	call   c001d22e <Thr::executeDLL(unsigned long, void*)>
c001ae13:	83 c4 10             	add    esp,0x10
c001ae16:	31 c0                	xor    eax,eax
c001ae18:	31 d2                	xor    edx,edx
c001ae1a:	59                   	pop    ecx
c001ae1b:	5b                   	pop    ebx
c001ae1c:	5e                   	pop    esi
c001ae1d:	c3                   	ret    

c001ae1e <Sys::read(regs*)>:
c001ae1e:	57                   	push   edi
c001ae1f:	56                   	push   esi
c001ae20:	53                   	push   ebx
c001ae21:	83 ec 10             	sub    esp,0x10
c001ae24:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ae28:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ae2b:	83 f8 02             	cmp    eax,0x2
c001ae2e:	77 10                	ja     c001ae40 <Sys::read(regs*)+0x22>
c001ae30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae35:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae38:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001ae3e:	eb 0e                	jmp    c001ae4e <Sys::read(regs*)+0x30>
c001ae40:	83 ec 0c             	sub    esp,0xc
c001ae43:	50                   	push   eax
c001ae44:	e8 82 62 ff ff       	call   c00110cb <getFromFileDescriptor(int)>
c001ae49:	83 c4 10             	add    esp,0x10
c001ae4c:	89 c1                	mov    ecx,eax
c001ae4e:	83 c8 ff             	or     eax,0xffffffff
c001ae51:	85 c9                	test   ecx,ecx
c001ae53:	89 c2                	mov    edx,eax
c001ae55:	74 28                	je     c001ae7f <Sys::read(regs*)+0x61>
c001ae57:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ae5f:	31 ff                	xor    edi,edi
c001ae61:	83 ec 0c             	sub    esp,0xc
c001ae64:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ae66:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ae6a:	52                   	push   edx
c001ae6b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ae6e:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001ae71:	57                   	push   edi
c001ae72:	56                   	push   esi
c001ae73:	51                   	push   ecx
c001ae74:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ae77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ae7b:	83 c4 20             	add    esp,0x20
c001ae7e:	99                   	cdq    
c001ae7f:	83 c4 10             	add    esp,0x10
c001ae82:	5b                   	pop    ebx
c001ae83:	5e                   	pop    esi
c001ae84:	5f                   	pop    edi
c001ae85:	c3                   	ret    

c001ae86 <Sys::sbrk(regs*)>:
c001ae86:	56                   	push   esi
c001ae87:	53                   	push   ebx
c001ae88:	50                   	push   eax
c001ae89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae8e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ae92:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae95:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001ae98:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001ae9e:	85 db                	test   ebx,ebx
c001aea0:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001aea3:	74 02                	je     c001aea7 <Sys::sbrk(regs*)+0x21>
c001aea5:	79 06                	jns    c001aead <Sys::sbrk(regs*)+0x27>
c001aea7:	89 f0                	mov    eax,esi
c001aea9:	31 d2                	xor    edx,edx
c001aeab:	eb 2a                	jmp    c001aed7 <Sys::sbrk(regs*)+0x51>
c001aead:	83 c8 ff             	or     eax,0xffffffff
c001aeb0:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001aeb6:	89 c2                	mov    edx,eax
c001aeb8:	77 1d                	ja     c001aed7 <Sys::sbrk(regs*)+0x51>
c001aeba:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001aec0:	50                   	push   eax
c001aec1:	c1 ea 0c             	shr    edx,0xc
c001aec4:	68 07 0c 00 00       	push   0xc07
c001aec9:	52                   	push   edx
c001aeca:	51                   	push   ecx
c001aecb:	e8 10 6c ff ff       	call   c0011ae0 <VAS::allocatePages(int, int)>
c001aed0:	89 f0                	mov    eax,esi
c001aed2:	31 d2                	xor    edx,edx
c001aed4:	83 c4 10             	add    esp,0x10
c001aed7:	59                   	pop    ecx
c001aed8:	5b                   	pop    ebx
c001aed9:	5e                   	pop    esi
c001aeda:	c3                   	ret    

c001aedb <Sys::setCwd(regs*)>:
c001aedb:	83 ec 14             	sub    esp,0x14
c001aede:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aee2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001aee5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aeea:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aeed:	e8 ab 80 ff ff       	call   c0012f9d <Fs::setcwd(Process*, char*)>
c001aef2:	83 c4 1c             	add    esp,0x1c
c001aef5:	99                   	cdq    
c001aef6:	c3                   	ret    

c001aef7 <Sys::setTime(regs*)>:
c001aef7:	55                   	push   ebp
c001aef8:	31 c9                	xor    ecx,ecx
c001aefa:	57                   	push   edi
c001aefb:	bd 0c 00 00 00       	mov    ebp,0xc
c001af00:	56                   	push   esi
c001af01:	53                   	push   ebx
c001af02:	31 db                	xor    ebx,ebx
c001af04:	83 ec 10             	sub    esp,0x10
c001af07:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001af0b:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001af0e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001af11:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001af14:	89 c2                	mov    edx,eax
c001af16:	66 81 ef 6c 07       	sub    di,0x76c
c001af1b:	83 e2 1f             	and    edx,0x1f
c001af1e:	c1 e7 10             	shl    edi,0x10
c001af21:	42                   	inc    edx
c001af22:	c1 e8 05             	shr    eax,0x5
c001af25:	88 d1                	mov    cl,dl
c001af27:	31 d2                	xor    edx,edx
c001af29:	f7 f5                	div    ebp
c001af2b:	89 dd                	mov    ebp,ebx
c001af2d:	88 d5                	mov    ch,dl
c001af2f:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001af35:	0f b7 c1             	movzx  eax,cx
c001af38:	31 d2                	xor    edx,edx
c001af3a:	09 f8                	or     eax,edi
c001af3c:	bf 3c 00 00 00       	mov    edi,0x3c
c001af41:	89 c1                	mov    ecx,eax
c001af43:	89 f0                	mov    eax,esi
c001af45:	f7 f7                	div    edi
c001af47:	c1 e2 10             	shl    edx,0x10
c001af4a:	09 d5                	or     ebp,edx
c001af4c:	31 d2                	xor    edx,edx
c001af4e:	89 eb                	mov    ebx,ebp
c001af50:	f7 f7                	div    edi
c001af52:	bf 10 0e 00 00       	mov    edi,0xe10
c001af57:	88 d7                	mov    bh,dl
c001af59:	89 f0                	mov    eax,esi
c001af5b:	31 d2                	xor    edx,edx
c001af5d:	f7 f7                	div    edi
c001af5f:	bf 18 00 00 00       	mov    edi,0x18
c001af64:	31 d2                	xor    edx,edx
c001af66:	f7 f7                	div    edi
c001af68:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c001af6d:	88 d3                	mov    bl,dl
c001af6f:	53                   	push   ebx
c001af70:	51                   	push   ecx
c001af71:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001af77:	e8 6a 88 ff ff       	call   c00137e6 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001af7c:	83 c4 1c             	add    esp,0x1c
c001af7f:	83 f0 01             	xor    eax,0x1
c001af82:	5b                   	pop    ebx
c001af83:	0f b6 c0             	movzx  eax,al
c001af86:	5e                   	pop    esi
c001af87:	31 d2                	xor    edx,edx
c001af89:	5f                   	pop    edi
c001af8a:	5d                   	pop    ebp
c001af8b:	c3                   	ret    

c001af8c <Sys::timezone(regs*)>:
c001af8c:	53                   	push   ebx
c001af8d:	83 ec 08             	sub    esp,0x8
c001af90:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af94:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001af98:	75 17                	jne    c001afb1 <Sys::timezone(regs*)+0x25>
c001af9a:	83 ec 0c             	sub    esp,0xc
c001af9d:	68 19 b8 02 c0       	push   0xc002b819
c001afa2:	e8 26 77 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c001afa7:	83 c8 ff             	or     eax,0xffffffff
c001afaa:	83 c4 10             	add    esp,0x10
c001afad:	89 c2                	mov    edx,eax
c001afaf:	eb 20                	jmp    c001afd1 <Sys::timezone(regs*)+0x45>
c001afb1:	83 ec 0c             	sub    esp,0xc
c001afb4:	68 2e b8 02 c0       	push   0xc002b82e
c001afb9:	e8 0f 77 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c001afbe:	58                   	pop    eax
c001afbf:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001afc2:	e8 81 85 ff ff       	call   c0013548 <User::loadClockSettings(int)>
c001afc7:	83 c4 10             	add    esp,0x10
c001afca:	b8 01 00 00 00       	mov    eax,0x1
c001afcf:	31 d2                	xor    edx,edx
c001afd1:	83 c4 08             	add    esp,0x8
c001afd4:	5b                   	pop    ebx
c001afd5:	c3                   	ret    

c001afd6 <Sys::write(regs*)>:
c001afd6:	57                   	push   edi
c001afd7:	56                   	push   esi
c001afd8:	53                   	push   ebx
c001afd9:	83 ec 10             	sub    esp,0x10
c001afdc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001afe0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001afe3:	83 f8 02             	cmp    eax,0x2
c001afe6:	77 10                	ja     c001aff8 <Sys::write(regs*)+0x22>
c001afe8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001afed:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aff0:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001aff6:	eb 0e                	jmp    c001b006 <Sys::write(regs*)+0x30>
c001aff8:	83 ec 0c             	sub    esp,0xc
c001affb:	50                   	push   eax
c001affc:	e8 ca 60 ff ff       	call   c00110cb <getFromFileDescriptor(int)>
c001b001:	83 c4 10             	add    esp,0x10
c001b004:	89 c1                	mov    ecx,eax
c001b006:	83 c8 ff             	or     eax,0xffffffff
c001b009:	85 c9                	test   ecx,ecx
c001b00b:	89 c2                	mov    edx,eax
c001b00d:	74 28                	je     c001b037 <Sys::write(regs*)+0x61>
c001b00f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b017:	31 ff                	xor    edi,edi
c001b019:	83 ec 0c             	sub    esp,0xc
c001b01c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b01e:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b022:	52                   	push   edx
c001b023:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b026:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b029:	57                   	push   edi
c001b02a:	56                   	push   esi
c001b02b:	51                   	push   ecx
c001b02c:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b02f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b033:	83 c4 20             	add    esp,0x20
c001b036:	99                   	cdq    
c001b037:	83 c4 10             	add    esp,0x10
c001b03a:	5b                   	pop    ebx
c001b03b:	5e                   	pop    esi
c001b03c:	5f                   	pop    edi
c001b03d:	c3                   	ret    

c001b03e <Sys::wsbe(regs*)>:
c001b03e:	57                   	push   edi
c001b03f:	b9 0b 00 00 00       	mov    ecx,0xb
c001b044:	56                   	push   esi
c001b045:	be 6d b8 02 c0       	mov    esi,0xc002b86d
c001b04a:	53                   	push   ebx
c001b04b:	83 ec 30             	sub    esp,0x30
c001b04e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b052:	fc                   	cld    
c001b053:	83 ec 0c             	sub    esp,0xc
c001b056:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b058:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b05c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b061:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b064:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b06a:	8b 06                	mov    eax,DWORD PTR [esi]
c001b06c:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b06f:	57                   	push   edi
c001b070:	e8 f7 56 fe ff       	call   c000076c <strlen>
c001b075:	5a                   	pop    edx
c001b076:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b07a:	52                   	push   edx
c001b07b:	31 d2                	xor    edx,edx
c001b07d:	57                   	push   edi
c001b07e:	52                   	push   edx
c001b07f:	50                   	push   eax
c001b080:	56                   	push   esi
c001b081:	ff d3                	call   ebx
c001b083:	83 c4 14             	add    esp,0x14
c001b086:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b08a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b08d:	e8 d1 31 00 00       	call   c001e263 <terminateTask(int)>
c001b092:	83 c4 40             	add    esp,0x40
c001b095:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b09a:	5b                   	pop    ebx
c001b09b:	31 d2                	xor    edx,edx
c001b09d:	5e                   	pop    esi
c001b09e:	5f                   	pop    edi
c001b09f:	c3                   	ret    

c001b0a0 <Sys::yield(regs*)>:
c001b0a0:	57                   	push   edi
c001b0a1:	56                   	push   esi
c001b0a2:	53                   	push   ebx
c001b0a3:	fa                   	cli    
c001b0a4:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001b0aa:	e8 14 29 00 00       	call   c001d9c3 <schedule()>
c001b0af:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001b0b4:	48                   	dec    eax
c001b0b5:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001b0ba:	75 01                	jne    c001b0bd <Sys::yield(regs*)+0x1d>
c001b0bc:	fb                   	sti    
c001b0bd:	8b 35 90 df 02 c0    	mov    esi,DWORD PTR ds:0xc002df90
c001b0c3:	8b 3d 94 df 02 c0    	mov    edi,DWORD PTR ds:0xc002df94
c001b0c9:	89 f0                	mov    eax,esi
c001b0cb:	89 fb                	mov    ebx,edi
c001b0cd:	89 f1                	mov    ecx,esi
c001b0cf:	c1 e0 07             	shl    eax,0x7
c001b0d2:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b0d6:	25 80 30 0f 00       	and    eax,0xf3080
c001b0db:	c1 eb 17             	shr    ebx,0x17
c001b0de:	31 c8                	xor    eax,ecx
c001b0e0:	89 da                	mov    edx,ebx
c001b0e2:	5b                   	pop    ebx
c001b0e3:	5e                   	pop    esi
c001b0e4:	5f                   	pop    edi
c001b0e5:	c3                   	ret    

c001b0e6 <sysCallSeekDir(regs*)>:
c001b0e6:	31 c0                	xor    eax,eax
c001b0e8:	31 d2                	xor    edx,edx
c001b0ea:	c3                   	ret    

c001b0eb <sysCallTellDir(regs*)>:
c001b0eb:	31 c0                	xor    eax,eax
c001b0ed:	31 d2                	xor    edx,edx
c001b0ef:	c3                   	ret    

c001b0f0 <sysCallVerify(regs*)>:
c001b0f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b0f4:	31 d2                	xor    edx,edx
c001b0f6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b0f9:	c3                   	ret    

c001b0fa <sysCallGetArgc(regs*)>:
c001b0fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0ff:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b102:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b108:	99                   	cdq    
c001b109:	c3                   	ret    

c001b10a <sysFormatDisk(regs*)>:
c001b10a:	56                   	push   esi
c001b10b:	53                   	push   ebx
c001b10c:	53                   	push   ebx
c001b10d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b111:	8b 1d 94 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da94
c001b117:	eb 25                	jmp    c001b13e <sysFormatDisk(regs*)+0x34>
c001b119:	83 ec 0c             	sub    esp,0xc
c001b11c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b11f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b121:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b124:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b127:	50                   	push   eax
c001b128:	ff 34 85 20 df 02 c0 	push   DWORD PTR [eax*4-0x3ffd20e0]
c001b12f:	53                   	push   ebx
c001b130:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b133:	83 c4 20             	add    esp,0x20
c001b136:	83 f8 08             	cmp    eax,0x8
c001b139:	75 12                	jne    c001b14d <sysFormatDisk(regs*)+0x43>
c001b13b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b13e:	85 db                	test   ebx,ebx
c001b140:	75 d7                	jne    c001b119 <sysFormatDisk(regs*)+0xf>
c001b142:	59                   	pop    ecx
c001b143:	b8 03 00 00 00       	mov    eax,0x3
c001b148:	31 d2                	xor    edx,edx
c001b14a:	5b                   	pop    ebx
c001b14b:	5e                   	pop    esi
c001b14c:	c3                   	ret    
c001b14d:	85 c0                	test   eax,eax
c001b14f:	74 1b                	je     c001b16c <sysFormatDisk(regs*)+0x62>
c001b151:	83 f8 09             	cmp    eax,0x9
c001b154:	74 0b                	je     c001b161 <sysFormatDisk(regs*)+0x57>
c001b156:	59                   	pop    ecx
c001b157:	b8 02 00 00 00       	mov    eax,0x2
c001b15c:	31 d2                	xor    edx,edx
c001b15e:	5b                   	pop    ebx
c001b15f:	5e                   	pop    esi
c001b160:	c3                   	ret    
c001b161:	59                   	pop    ecx
c001b162:	b8 01 00 00 00       	mov    eax,0x1
c001b167:	31 d2                	xor    edx,edx
c001b169:	5b                   	pop    ebx
c001b16a:	5e                   	pop    esi
c001b16b:	c3                   	ret    
c001b16c:	59                   	pop    ecx
c001b16d:	31 c0                	xor    eax,eax
c001b16f:	31 d2                	xor    edx,edx
c001b171:	5b                   	pop    ebx
c001b172:	5e                   	pop    esi
c001b173:	c3                   	ret    

c001b174 <sysSetDiskVolumeLabel(regs*)>:
c001b174:	56                   	push   esi
c001b175:	53                   	push   ebx
c001b176:	53                   	push   ebx
c001b177:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b17b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b17e:	83 f8 19             	cmp    eax,0x19
c001b181:	77 29                	ja     c001b1ac <sysSetDiskVolumeLabel(regs*)+0x38>
c001b183:	8b 0c 85 20 df 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd20e0]
c001b18a:	85 c9                	test   ecx,ecx
c001b18c:	74 1e                	je     c001b1ac <sysSetDiskVolumeLabel(regs*)+0x38>
c001b18e:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b191:	85 d2                	test   edx,edx
c001b193:	74 17                	je     c001b1ac <sysSetDiskVolumeLabel(regs*)+0x38>
c001b195:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b19b:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b19d:	52                   	push   edx
c001b19e:	50                   	push   eax
c001b19f:	51                   	push   ecx
c001b1a0:	53                   	push   ebx
c001b1a1:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b1a4:	83 c4 10             	add    esp,0x10
c001b1a7:	99                   	cdq    
c001b1a8:	59                   	pop    ecx
c001b1a9:	5b                   	pop    ebx
c001b1aa:	5e                   	pop    esi
c001b1ab:	c3                   	ret    
c001b1ac:	59                   	pop    ecx
c001b1ad:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b1b2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b1b7:	5b                   	pop    ebx
c001b1b8:	5e                   	pop    esi
c001b1b9:	c3                   	ret    

c001b1ba <sysGetDiskVolumeLabel(regs*)>:
c001b1ba:	57                   	push   edi
c001b1bb:	56                   	push   esi
c001b1bc:	53                   	push   ebx
c001b1bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1c1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b1c4:	83 fa 19             	cmp    edx,0x19
c001b1c7:	77 34                	ja     c001b1fd <sysGetDiskVolumeLabel(regs*)+0x43>
c001b1c9:	8b 0c 95 20 df 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd20e0]
c001b1d0:	85 c9                	test   ecx,ecx
c001b1d2:	74 29                	je     c001b1fd <sysGetDiskVolumeLabel(regs*)+0x43>
c001b1d4:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b1d7:	85 db                	test   ebx,ebx
c001b1d9:	74 22                	je     c001b1fd <sysGetDiskVolumeLabel(regs*)+0x43>
c001b1db:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b1de:	85 c0                	test   eax,eax
c001b1e0:	74 1b                	je     c001b1fd <sysGetDiskVolumeLabel(regs*)+0x43>
c001b1e2:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b1e8:	83 ec 0c             	sub    esp,0xc
c001b1eb:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b1ed:	50                   	push   eax
c001b1ee:	53                   	push   ebx
c001b1ef:	52                   	push   edx
c001b1f0:	51                   	push   ecx
c001b1f1:	56                   	push   esi
c001b1f2:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b1f5:	83 c4 20             	add    esp,0x20
c001b1f8:	99                   	cdq    
c001b1f9:	5b                   	pop    ebx
c001b1fa:	5e                   	pop    esi
c001b1fb:	5f                   	pop    edi
c001b1fc:	c3                   	ret    
c001b1fd:	5b                   	pop    ebx
c001b1fe:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b203:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b208:	5e                   	pop    esi
c001b209:	5f                   	pop    edi
c001b20a:	c3                   	ret    

c001b20b <sysShutdown(regs*)>:
c001b20b:	83 ec 0c             	sub    esp,0xc
c001b20e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b212:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b215:	85 c0                	test   eax,eax
c001b217:	74 18                	je     c001b231 <sysShutdown(regs*)+0x26>
c001b219:	83 f8 01             	cmp    eax,0x1
c001b21c:	74 38                	je     c001b256 <sysShutdown(regs*)+0x4b>
c001b21e:	83 f8 02             	cmp    eax,0x2
c001b221:	74 24                	je     c001b247 <sysShutdown(regs*)+0x3c>
c001b223:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b228:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b22d:	83 c4 0c             	add    esp,0xc
c001b230:	c3                   	ret    
c001b231:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c001b236:	8b 10                	mov    edx,DWORD PTR [eax]
c001b238:	6a 00                	push   0x0
c001b23a:	6a 00                	push   0x0
c001b23c:	6a 00                	push   0x0
c001b23e:	50                   	push   eax
c001b23f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b242:	83 c4 10             	add    esp,0x10
c001b245:	eb dc                	jmp    c001b223 <sysShutdown(regs*)+0x18>
c001b247:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c001b24c:	8b 10                	mov    edx,DWORD PTR [eax]
c001b24e:	6a 00                	push   0x0
c001b250:	6a 00                	push   0x0
c001b252:	6a 01                	push   0x1
c001b254:	eb e8                	jmp    c001b23e <sysShutdown(regs*)+0x33>
c001b256:	a1 c0 ff 02 c0       	mov    eax,ds:0xc002ffc0
c001b25b:	85 c0                	test   eax,eax
c001b25d:	74 02                	je     c001b261 <sysShutdown(regs*)+0x56>
c001b25f:	ff d0                	call   eax
c001b261:	31 c0                	xor    eax,eax
c001b263:	31 d2                	xor    edx,edx
c001b265:	83 c4 0c             	add    esp,0xc
c001b268:	c3                   	ret    

c001b269 <sysCallRealpath(regs*)>:
c001b269:	83 ec 0c             	sub    esp,0xc
c001b26c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b270:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b273:	85 d2                	test   edx,edx
c001b275:	74 07                	je     c001b27e <sysCallRealpath(regs*)+0x15>
c001b277:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b27a:	85 c0                	test   eax,eax
c001b27c:	75 0b                	jne    c001b289 <sysCallRealpath(regs*)+0x20>
c001b27e:	b8 01 00 00 00       	mov    eax,0x1
c001b283:	31 d2                	xor    edx,edx
c001b285:	83 c4 0c             	add    esp,0xc
c001b288:	c3                   	ret    
c001b289:	51                   	push   ecx
c001b28a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b290:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b293:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b299:	51                   	push   ecx
c001b29a:	52                   	push   edx
c001b29b:	50                   	push   eax
c001b29c:	e8 e1 77 ff ff       	call   c0012a82 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b2a1:	83 c4 10             	add    esp,0x10
c001b2a4:	31 c0                	xor    eax,eax
c001b2a6:	31 d2                	xor    edx,edx
c001b2a8:	83 c4 0c             	add    esp,0xc
c001b2ab:	c3                   	ret    

c001b2ac <sysCallReadDir(regs*)>:
c001b2ac:	53                   	push   ebx
c001b2ad:	83 ec 18             	sub    esp,0x18
c001b2b0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b2b4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b2b7:	83 f8 02             	cmp    eax,0x2
c001b2ba:	76 60                	jbe    c001b31c <sysCallReadDir(regs*)+0x70>
c001b2bc:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001b2c3:	77 48                	ja     c001b30d <sysCallReadDir(regs*)+0x61>
c001b2c5:	83 ec 0c             	sub    esp,0xc
c001b2c8:	50                   	push   eax
c001b2c9:	e8 fd 5d ff ff       	call   c00110cb <getFromFileDescriptor(int)>
c001b2ce:	83 c4 10             	add    esp,0x10
c001b2d1:	85 c0                	test   eax,eax
c001b2d3:	74 38                	je     c001b30d <sysCallReadDir(regs*)+0x61>
c001b2d5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b2dd:	83 ec 0c             	sub    esp,0xc
c001b2e0:	8b 10                	mov    edx,DWORD PTR [eax]
c001b2e2:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b2e6:	51                   	push   ecx
c001b2e7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b2ea:	6a 00                	push   0x0
c001b2ec:	68 10 01 00 00       	push   0x110
c001b2f1:	50                   	push   eax
c001b2f2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b2f5:	83 c4 20             	add    esp,0x20
c001b2f8:	85 c0                	test   eax,eax
c001b2fa:	74 29                	je     c001b325 <sysCallReadDir(regs*)+0x79>
c001b2fc:	83 f8 07             	cmp    eax,0x7
c001b2ff:	74 1b                	je     c001b31c <sysCallReadDir(regs*)+0x70>
c001b301:	b8 02 00 00 00       	mov    eax,0x2
c001b306:	31 d2                	xor    edx,edx
c001b308:	83 c4 18             	add    esp,0x18
c001b30b:	5b                   	pop    ebx
c001b30c:	c3                   	ret    
c001b30d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b312:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b317:	83 c4 18             	add    esp,0x18
c001b31a:	5b                   	pop    ebx
c001b31b:	c3                   	ret    
c001b31c:	b8 01 00 00 00       	mov    eax,0x1
c001b321:	31 d2                	xor    edx,edx
c001b323:	eb e3                	jmp    c001b308 <sysCallReadDir(regs*)+0x5c>
c001b325:	31 c0                	xor    eax,eax
c001b327:	31 d2                	xor    edx,edx
c001b329:	eb dd                	jmp    c001b308 <sysCallReadDir(regs*)+0x5c>

c001b32b <sysCallIsATTY(regs*)>:
c001b32b:	83 ec 0c             	sub    esp,0xc
c001b32e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b332:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b335:	83 f8 02             	cmp    eax,0x2
c001b338:	76 07                	jbe    c001b341 <sysCallIsATTY(regs*)+0x16>
c001b33a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b33f:	75 26                	jne    c001b367 <sysCallIsATTY(regs*)+0x3c>
c001b341:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b346:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b349:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b34f:	85 c0                	test   eax,eax
c001b351:	74 24                	je     c001b377 <sysCallIsATTY(regs*)+0x4c>
c001b353:	83 ec 0c             	sub    esp,0xc
c001b356:	8b 10                	mov    edx,DWORD PTR [eax]
c001b358:	50                   	push   eax
c001b359:	ff 12                	call   DWORD PTR [edx]
c001b35b:	31 d2                	xor    edx,edx
c001b35d:	0f b6 c0             	movzx  eax,al
c001b360:	83 c4 10             	add    esp,0x10
c001b363:	83 c4 0c             	add    esp,0xc
c001b366:	c3                   	ret    
c001b367:	83 ec 0c             	sub    esp,0xc
c001b36a:	50                   	push   eax
c001b36b:	e8 5b 5d ff ff       	call   c00110cb <getFromFileDescriptor(int)>
c001b370:	83 c4 10             	add    esp,0x10
c001b373:	85 c0                	test   eax,eax
c001b375:	75 dc                	jne    c001b353 <sysCallIsATTY(regs*)+0x28>
c001b377:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b37c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b381:	83 c4 0c             	add    esp,0xc
c001b384:	c3                   	ret    

c001b385 <sysCallSeek(regs*)>:
c001b385:	53                   	push   ebx
c001b386:	83 ec 08             	sub    esp,0x8
c001b389:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b38d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b390:	8d 50 fd             	lea    edx,[eax-0x3]
c001b393:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b399:	77 32                	ja     c001b3cd <sysCallSeek(regs*)+0x48>
c001b39b:	83 ec 0c             	sub    esp,0xc
c001b39e:	50                   	push   eax
c001b39f:	e8 27 5d ff ff       	call   c00110cb <getFromFileDescriptor(int)>
c001b3a4:	83 c4 0c             	add    esp,0xc
c001b3a7:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b3aa:	31 db                	xor    ebx,ebx
c001b3ac:	53                   	push   ebx
c001b3ad:	51                   	push   ecx
c001b3ae:	50                   	push   eax
c001b3af:	e8 9a 79 ff ff       	call   c0012d4e <File::seek(unsigned long long)>
c001b3b4:	83 c4 10             	add    esp,0x10
c001b3b7:	85 c0                	test   eax,eax
c001b3b9:	0f 95 c0             	setne  al
c001b3bc:	31 d2                	xor    edx,edx
c001b3be:	0f b6 c0             	movzx  eax,al
c001b3c1:	f7 d8                	neg    eax
c001b3c3:	83 d2 00             	adc    edx,0x0
c001b3c6:	83 c4 08             	add    esp,0x8
c001b3c9:	f7 da                	neg    edx
c001b3cb:	5b                   	pop    ebx
c001b3cc:	c3                   	ret    
c001b3cd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b3d2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3d7:	83 c4 08             	add    esp,0x8
c001b3da:	5b                   	pop    ebx
c001b3db:	c3                   	ret    

c001b3dc <sysCallTell(regs*)>:
c001b3dc:	53                   	push   ebx
c001b3dd:	83 ec 08             	sub    esp,0x8
c001b3e0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b3e4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b3e7:	83 f8 02             	cmp    eax,0x2
c001b3ea:	76 4d                	jbe    c001b439 <sysCallTell(regs*)+0x5d>
c001b3ec:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b3f1:	76 19                	jbe    c001b40c <sysCallTell(regs*)+0x30>
c001b3f3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b3f6:	31 d2                	xor    edx,edx
c001b3f8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b3fe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b405:	31 c0                	xor    eax,eax
c001b407:	83 c4 08             	add    esp,0x8
c001b40a:	5b                   	pop    ebx
c001b40b:	c3                   	ret    
c001b40c:	83 ec 0c             	sub    esp,0xc
c001b40f:	50                   	push   eax
c001b410:	e8 b6 5c ff ff       	call   c00110cb <getFromFileDescriptor(int)>
c001b415:	5a                   	pop    edx
c001b416:	59                   	pop    ecx
c001b417:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b41a:	50                   	push   eax
c001b41b:	e8 84 79 ff ff       	call   c0012da4 <File::tell(unsigned long long*)>
c001b420:	83 c4 10             	add    esp,0x10
c001b423:	85 c0                	test   eax,eax
c001b425:	0f 95 c0             	setne  al
c001b428:	31 d2                	xor    edx,edx
c001b42a:	0f b6 c0             	movzx  eax,al
c001b42d:	f7 d8                	neg    eax
c001b42f:	83 d2 00             	adc    edx,0x0
c001b432:	83 c4 08             	add    esp,0x8
c001b435:	f7 da                	neg    edx
c001b437:	5b                   	pop    ebx
c001b438:	c3                   	ret    
c001b439:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b43e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b443:	83 c4 08             	add    esp,0x8
c001b446:	5b                   	pop    ebx
c001b447:	c3                   	ret    

c001b448 <sysCallSize(regs*)>:
c001b448:	53                   	push   ebx
c001b449:	83 ec 18             	sub    esp,0x18
c001b44c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b450:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b453:	83 f8 02             	cmp    eax,0x2
c001b456:	76 53                	jbe    c001b4ab <sysCallSize(regs*)+0x63>
c001b458:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b45d:	76 19                	jbe    c001b478 <sysCallSize(regs*)+0x30>
c001b45f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b462:	31 d2                	xor    edx,edx
c001b464:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b46a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b471:	31 c0                	xor    eax,eax
c001b473:	83 c4 18             	add    esp,0x18
c001b476:	5b                   	pop    ebx
c001b477:	c3                   	ret    
c001b478:	83 ec 0c             	sub    esp,0xc
c001b47b:	50                   	push   eax
c001b47c:	e8 4a 5c ff ff       	call   c00110cb <getFromFileDescriptor(int)>
c001b481:	83 c4 0c             	add    esp,0xc
c001b484:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b488:	52                   	push   edx
c001b489:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b48c:	50                   	push   eax
c001b48d:	e8 aa 7a ff ff       	call   c0012f3c <File::stat(unsigned long long*, bool*)>
c001b492:	83 c4 10             	add    esp,0x10
c001b495:	85 c0                	test   eax,eax
c001b497:	0f 95 c0             	setne  al
c001b49a:	31 d2                	xor    edx,edx
c001b49c:	0f b6 c0             	movzx  eax,al
c001b49f:	f7 d8                	neg    eax
c001b4a1:	83 d2 00             	adc    edx,0x0
c001b4a4:	83 c4 18             	add    esp,0x18
c001b4a7:	f7 da                	neg    edx
c001b4a9:	5b                   	pop    ebx
c001b4aa:	c3                   	ret    
c001b4ab:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b4b0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b4b5:	83 c4 18             	add    esp,0x18
c001b4b8:	5b                   	pop    ebx
c001b4b9:	c3                   	ret    

c001b4ba <sysCallSizeFromFilename(regs*)>:
c001b4ba:	57                   	push   edi
c001b4bb:	56                   	push   esi
c001b4bc:	53                   	push   ebx
c001b4bd:	83 ec 20             	sub    esp,0x20
c001b4c0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b4c4:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001b4c7:	83 fb 02             	cmp    ebx,0x2
c001b4ca:	0f 86 88 00 00 00    	jbe    c001b558 <sysCallSizeFromFilename(regs*)+0x9e>
c001b4d0:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b4d6:	76 1b                	jbe    c001b4f3 <sysCallSizeFromFilename(regs*)+0x39>
c001b4d8:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b4db:	31 d2                	xor    edx,edx
c001b4dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b4e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b4ea:	83 c4 20             	add    esp,0x20
c001b4ed:	31 c0                	xor    eax,eax
c001b4ef:	5b                   	pop    ebx
c001b4f0:	5e                   	pop    esi
c001b4f1:	5f                   	pop    edi
c001b4f2:	c3                   	ret    
c001b4f3:	83 ec 0c             	sub    esp,0xc
c001b4f6:	68 14 01 00 00       	push   0x114
c001b4fb:	e8 99 40 ff ff       	call   c000f599 <malloc>
c001b500:	83 c4 0c             	add    esp,0xc
c001b503:	89 c7                	mov    edi,eax
c001b505:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b50a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b50d:	53                   	push   ebx
c001b50e:	57                   	push   edi
c001b50f:	e8 18 77 ff ff       	call   c0012c2c <File::File(char const*, Process*)>
c001b514:	83 c4 0c             	add    esp,0xc
c001b517:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b51b:	50                   	push   eax
c001b51c:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b51f:	57                   	push   edi
c001b520:	e8 17 7a ff ff       	call   c0012f3c <File::stat(unsigned long long*, bool*)>
c001b525:	83 c4 10             	add    esp,0x10
c001b528:	85 ff                	test   edi,edi
c001b52a:	74 14                	je     c001b540 <sysCallSizeFromFilename(regs*)+0x86>
c001b52c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b530:	8b 17                	mov    edx,DWORD PTR [edi]
c001b532:	83 ec 0c             	sub    esp,0xc
c001b535:	57                   	push   edi
c001b536:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b539:	83 c4 10             	add    esp,0x10
c001b53c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b540:	85 c0                	test   eax,eax
c001b542:	0f 95 c0             	setne  al
c001b545:	31 d2                	xor    edx,edx
c001b547:	0f b6 c0             	movzx  eax,al
c001b54a:	f7 d8                	neg    eax
c001b54c:	83 d2 00             	adc    edx,0x0
c001b54f:	83 c4 20             	add    esp,0x20
c001b552:	f7 da                	neg    edx
c001b554:	5b                   	pop    ebx
c001b555:	5e                   	pop    esi
c001b556:	5f                   	pop    edi
c001b557:	c3                   	ret    
c001b558:	83 c4 20             	add    esp,0x20
c001b55b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b560:	5b                   	pop    ebx
c001b561:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b566:	5e                   	pop    esi
c001b567:	5f                   	pop    edi
c001b568:	c3                   	ret    

c001b569 <sysCallClose(regs*)>:
c001b569:	53                   	push   ebx
c001b56a:	83 ec 08             	sub    esp,0x8
c001b56d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b571:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b574:	83 f8 02             	cmp    eax,0x2
c001b577:	76 41                	jbe    c001b5ba <sysCallClose(regs*)+0x51>
c001b579:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001b57f:	83 fa 01             	cmp    edx,0x1
c001b582:	76 2d                	jbe    c001b5b1 <sysCallClose(regs*)+0x48>
c001b584:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b589:	77 2f                	ja     c001b5ba <sysCallClose(regs*)+0x51>
c001b58b:	83 ec 0c             	sub    esp,0xc
c001b58e:	50                   	push   eax
c001b58f:	e8 37 5b ff ff       	call   c00110cb <getFromFileDescriptor(int)>
c001b594:	89 c3                	mov    ebx,eax
c001b596:	89 04 24             	mov    DWORD PTR [esp],eax
c001b599:	e8 50 77 ff ff       	call   c0012cee <File::close()>
c001b59e:	83 c4 10             	add    esp,0x10
c001b5a1:	85 db                	test   ebx,ebx
c001b5a3:	74 0c                	je     c001b5b1 <sysCallClose(regs*)+0x48>
c001b5a5:	83 ec 0c             	sub    esp,0xc
c001b5a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b5aa:	53                   	push   ebx
c001b5ab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b5ae:	83 c4 10             	add    esp,0x10
c001b5b1:	31 c0                	xor    eax,eax
c001b5b3:	31 d2                	xor    edx,edx
c001b5b5:	83 c4 08             	add    esp,0x8
c001b5b8:	5b                   	pop    ebx
c001b5b9:	c3                   	ret    
c001b5ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b5bf:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5c4:	83 c4 08             	add    esp,0x8
c001b5c7:	5b                   	pop    ebx
c001b5c8:	c3                   	ret    

c001b5c9 <sysCallOpenDir(regs*)>:
c001b5c9:	56                   	push   esi
c001b5ca:	53                   	push   ebx
c001b5cb:	53                   	push   ebx
c001b5cc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b5d0:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b5d3:	85 f6                	test   esi,esi
c001b5d5:	74 59                	je     c001b630 <sysCallOpenDir(regs*)+0x67>
c001b5d7:	83 ec 0c             	sub    esp,0xc
c001b5da:	68 14 01 00 00       	push   0x114
c001b5df:	e8 b5 3f ff ff       	call   c000f599 <malloc>
c001b5e4:	83 c4 0c             	add    esp,0xc
c001b5e7:	89 c6                	mov    esi,eax
c001b5e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5ee:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b5f1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b5f4:	56                   	push   esi
c001b5f5:	e8 de 7a ff ff       	call   c00130d8 <Directory::Directory(char const*, Process*)>
c001b5fa:	83 c4 10             	add    esp,0x10
c001b5fd:	85 f6                	test   esi,esi
c001b5ff:	74 2f                	je     c001b630 <sysCallOpenDir(regs*)+0x67>
c001b601:	83 ec 0c             	sub    esp,0xc
c001b604:	56                   	push   esi
c001b605:	e8 32 7b ff ff       	call   c001313c <Directory::open()>
c001b60a:	83 c4 10             	add    esp,0x10
c001b60d:	85 c0                	test   eax,eax
c001b60f:	75 1f                	jne    c001b630 <sysCallOpenDir(regs*)+0x67>
c001b611:	83 ec 0c             	sub    esp,0xc
c001b614:	56                   	push   esi
c001b615:	e8 bc 57 ff ff       	call   c0010dd6 <UnixFile::getFileDescriptor()>
c001b61a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b61d:	83 c4 10             	add    esp,0x10
c001b620:	89 02                	mov    DWORD PTR [edx],eax
c001b622:	c1 f8 1f             	sar    eax,0x1f
c001b625:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b628:	31 c0                	xor    eax,eax
c001b62a:	59                   	pop    ecx
c001b62b:	31 d2                	xor    edx,edx
c001b62d:	5b                   	pop    ebx
c001b62e:	5e                   	pop    esi
c001b62f:	c3                   	ret    
c001b630:	59                   	pop    ecx
c001b631:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b636:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b63b:	5b                   	pop    ebx
c001b63c:	5e                   	pop    esi
c001b63d:	c3                   	ret    

c001b63e <sysCallCloseDir(regs*)>:
c001b63e:	53                   	push   ebx
c001b63f:	83 ec 08             	sub    esp,0x8
c001b642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b646:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b649:	8d 50 fd             	lea    edx,[eax-0x3]
c001b64c:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b652:	77 2f                	ja     c001b683 <sysCallCloseDir(regs*)+0x45>
c001b654:	83 ec 0c             	sub    esp,0xc
c001b657:	50                   	push   eax
c001b658:	e8 6e 5a ff ff       	call   c00110cb <getFromFileDescriptor(int)>
c001b65d:	89 c3                	mov    ebx,eax
c001b65f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b662:	e8 31 7b ff ff       	call   c0013198 <Directory::close()>
c001b667:	83 c4 10             	add    esp,0x10
c001b66a:	85 db                	test   ebx,ebx
c001b66c:	74 0c                	je     c001b67a <sysCallCloseDir(regs*)+0x3c>
c001b66e:	83 ec 0c             	sub    esp,0xc
c001b671:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b673:	53                   	push   ebx
c001b674:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b677:	83 c4 10             	add    esp,0x10
c001b67a:	31 c0                	xor    eax,eax
c001b67c:	31 d2                	xor    edx,edx
c001b67e:	83 c4 08             	add    esp,0x8
c001b681:	5b                   	pop    ebx
c001b682:	c3                   	ret    
c001b683:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b688:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b68d:	83 c4 08             	add    esp,0x8
c001b690:	5b                   	pop    ebx
c001b691:	c3                   	ret    

c001b692 <sysCallMakeDir(regs*)>:
c001b692:	56                   	push   esi
c001b693:	53                   	push   ebx
c001b694:	83 ec 10             	sub    esp,0x10
c001b697:	68 14 01 00 00       	push   0x114
c001b69c:	e8 f8 3e ff ff       	call   c000f599 <malloc>
c001b6a1:	83 c4 0c             	add    esp,0xc
c001b6a4:	89 c3                	mov    ebx,eax
c001b6a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6ab:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b6ae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b6b2:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b6b5:	53                   	push   ebx
c001b6b6:	e8 1d 7a ff ff       	call   c00130d8 <Directory::Directory(char const*, Process*)>
c001b6bb:	83 c4 10             	add    esp,0x10
c001b6be:	85 db                	test   ebx,ebx
c001b6c0:	74 32                	je     c001b6f4 <sysCallMakeDir(regs*)+0x62>
c001b6c2:	83 ec 0c             	sub    esp,0xc
c001b6c5:	53                   	push   ebx
c001b6c6:	e8 51 7c ff ff       	call   c001331c <Directory::create()>
c001b6cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b6ce:	89 c6                	mov    esi,eax
c001b6d0:	e8 c3 7a ff ff       	call   c0013198 <Directory::close()>
c001b6d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b6da:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b6dd:	83 c4 10             	add    esp,0x10
c001b6e0:	31 c0                	xor    eax,eax
c001b6e2:	59                   	pop    ecx
c001b6e3:	85 f6                	test   esi,esi
c001b6e5:	5b                   	pop    ebx
c001b6e6:	0f 95 c0             	setne  al
c001b6e9:	5e                   	pop    esi
c001b6ea:	31 d2                	xor    edx,edx
c001b6ec:	f7 d8                	neg    eax
c001b6ee:	83 d2 00             	adc    edx,0x0
c001b6f1:	f7 da                	neg    edx
c001b6f3:	c3                   	ret    
c001b6f4:	59                   	pop    ecx
c001b6f5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b6fa:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b6ff:	5b                   	pop    ebx
c001b700:	5e                   	pop    esi
c001b701:	c3                   	ret    

c001b702 <sysCallWait(regs*)>:
c001b702:	83 ec 10             	sub    esp,0x10
c001b705:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b709:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b70c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b70f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b712:	e8 af 24 00 00       	call   c001dbc6 <waitTask(int, int*, int)>
c001b717:	83 c4 1c             	add    esp,0x1c
c001b71a:	99                   	cdq    
c001b71b:	c3                   	ret    

c001b71c <sysCallNotImpl(regs*)>:
c001b71c:	83 ec 18             	sub    esp,0x18
c001b71f:	68 99 b8 02 c0       	push   0xc002b899
c001b724:	e8 10 e7 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c001b729:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b72e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b733:	83 c4 1c             	add    esp,0x1c
c001b736:	c3                   	ret    

c001b737 <sysPanic(regs*)>:
c001b737:	83 ec 18             	sub    esp,0x18
c001b73a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b73e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b741:	e8 f3 e6 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c001b746:	b8 01 00 00 00       	mov    eax,0x1
c001b74b:	31 d2                	xor    edx,edx
c001b74d:	83 c4 1c             	add    esp,0x1c
c001b750:	c3                   	ret    

c001b751 <sysCallRmdir(regs*)>:
c001b751:	56                   	push   esi
c001b752:	53                   	push   ebx
c001b753:	83 ec 20             	sub    esp,0x20
c001b756:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b75a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b75d:	68 14 01 00 00       	push   0x114
c001b762:	e8 32 3e ff ff       	call   c000f599 <malloc>
c001b767:	83 c4 0c             	add    esp,0xc
c001b76a:	89 c3                	mov    ebx,eax
c001b76c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b771:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b774:	56                   	push   esi
c001b775:	53                   	push   ebx
c001b776:	e8 b1 74 ff ff       	call   c0012c2c <File::File(char const*, Process*)>
c001b77b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b77e:	e8 85 76 ff ff       	call   c0012e08 <File::unlink()>
c001b783:	83 c4 10             	add    esp,0x10
c001b786:	85 db                	test   ebx,ebx
c001b788:	74 14                	je     c001b79e <sysCallRmdir(regs*)+0x4d>
c001b78a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b78e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b790:	83 ec 0c             	sub    esp,0xc
c001b793:	53                   	push   ebx
c001b794:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b797:	83 c4 10             	add    esp,0x10
c001b79a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b79e:	85 c0                	test   eax,eax
c001b7a0:	0f 95 c0             	setne  al
c001b7a3:	31 d2                	xor    edx,edx
c001b7a5:	0f b6 c0             	movzx  eax,al
c001b7a8:	f7 d8                	neg    eax
c001b7aa:	83 d2 00             	adc    edx,0x0
c001b7ad:	83 c4 14             	add    esp,0x14
c001b7b0:	f7 da                	neg    edx
c001b7b2:	5b                   	pop    ebx
c001b7b3:	5e                   	pop    esi
c001b7b4:	c3                   	ret    

c001b7b5 <sysCallUnlink(regs*)>:
c001b7b5:	56                   	push   esi
c001b7b6:	53                   	push   ebx
c001b7b7:	83 ec 20             	sub    esp,0x20
c001b7ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b7be:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b7c1:	68 14 01 00 00       	push   0x114
c001b7c6:	e8 ce 3d ff ff       	call   c000f599 <malloc>
c001b7cb:	83 c4 0c             	add    esp,0xc
c001b7ce:	89 c3                	mov    ebx,eax
c001b7d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7d5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b7d8:	56                   	push   esi
c001b7d9:	53                   	push   ebx
c001b7da:	e8 4d 74 ff ff       	call   c0012c2c <File::File(char const*, Process*)>
c001b7df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b7e2:	e8 21 76 ff ff       	call   c0012e08 <File::unlink()>
c001b7e7:	83 c4 10             	add    esp,0x10
c001b7ea:	85 db                	test   ebx,ebx
c001b7ec:	74 14                	je     c001b802 <sysCallUnlink(regs*)+0x4d>
c001b7ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b7f2:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b7f4:	83 ec 0c             	sub    esp,0xc
c001b7f7:	53                   	push   ebx
c001b7f8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b7fb:	83 c4 10             	add    esp,0x10
c001b7fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b802:	85 c0                	test   eax,eax
c001b804:	0f 95 c0             	setne  al
c001b807:	31 d2                	xor    edx,edx
c001b809:	0f b6 c0             	movzx  eax,al
c001b80c:	f7 d8                	neg    eax
c001b80e:	83 d2 00             	adc    edx,0x0
c001b811:	83 c4 14             	add    esp,0x14
c001b814:	f7 da                	neg    edx
c001b816:	5b                   	pop    ebx
c001b817:	5e                   	pop    esi
c001b818:	c3                   	ret    

c001b819 <sysCallGetArgv(regs*)>:
c001b819:	83 ec 0c             	sub    esp,0xc
c001b81c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b820:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b823:	85 c0                	test   eax,eax
c001b825:	78 2b                	js     c001b852 <sysCallGetArgv(regs*)+0x39>
c001b827:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b82d:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b830:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b836:	7d 1a                	jge    c001b852 <sysCallGetArgv(regs*)+0x39>
c001b838:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b83f:	85 c0                	test   eax,eax
c001b841:	74 17                	je     c001b85a <sysCallGetArgv(regs*)+0x41>
c001b843:	83 ec 08             	sub    esp,0x8
c001b846:	50                   	push   eax
c001b847:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b84a:	e8 bd 4f fe ff       	call   c000080c <strcpy>
c001b84f:	83 c4 10             	add    esp,0x10
c001b852:	31 c0                	xor    eax,eax
c001b854:	31 d2                	xor    edx,edx
c001b856:	83 c4 0c             	add    esp,0xc
c001b859:	c3                   	ret    
c001b85a:	b8 01 00 00 00       	mov    eax,0x1
c001b85f:	31 d2                	xor    edx,edx
c001b861:	83 c4 0c             	add    esp,0xc
c001b864:	c3                   	ret    

c001b865 <sysCallTTYName(regs*)>:
c001b865:	56                   	push   esi
c001b866:	53                   	push   ebx
c001b867:	53                   	push   ebx
c001b868:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b86c:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b86f:	85 c0                	test   eax,eax
c001b871:	74 5f                	je     c001b8d2 <sysCallTTYName(regs*)+0x6d>
c001b873:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b876:	83 f8 02             	cmp    eax,0x2
c001b879:	77 3e                	ja     c001b8b9 <sysCallTTYName(regs*)+0x54>
c001b87b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b880:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b883:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b889:	85 db                	test   ebx,ebx
c001b88b:	74 45                	je     c001b8d2 <sysCallTTYName(regs*)+0x6d>
c001b88d:	83 ec 0c             	sub    esp,0xc
c001b890:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b892:	53                   	push   ebx
c001b893:	ff 10                	call   DWORD PTR [eax]
c001b895:	83 c4 10             	add    esp,0x10
c001b898:	84 c0                	test   al,al
c001b89a:	74 41                	je     c001b8dd <sysCallTTYName(regs*)+0x78>
c001b89c:	83 ec 08             	sub    esp,0x8
c001b89f:	81 c3 82 00 00 00    	add    ebx,0x82
c001b8a5:	53                   	push   ebx
c001b8a6:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b8a9:	e8 5e 4f fe ff       	call   c000080c <strcpy>
c001b8ae:	83 c4 10             	add    esp,0x10
c001b8b1:	31 c0                	xor    eax,eax
c001b8b3:	59                   	pop    ecx
c001b8b4:	31 d2                	xor    edx,edx
c001b8b6:	5b                   	pop    ebx
c001b8b7:	5e                   	pop    esi
c001b8b8:	c3                   	ret    
c001b8b9:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b8be:	74 bb                	je     c001b87b <sysCallTTYName(regs*)+0x16>
c001b8c0:	83 ec 0c             	sub    esp,0xc
c001b8c3:	50                   	push   eax
c001b8c4:	e8 02 58 ff ff       	call   c00110cb <getFromFileDescriptor(int)>
c001b8c9:	83 c4 10             	add    esp,0x10
c001b8cc:	89 c3                	mov    ebx,eax
c001b8ce:	85 db                	test   ebx,ebx
c001b8d0:	75 bb                	jne    c001b88d <sysCallTTYName(regs*)+0x28>
c001b8d2:	59                   	pop    ecx
c001b8d3:	b8 01 00 00 00       	mov    eax,0x1
c001b8d8:	31 d2                	xor    edx,edx
c001b8da:	5b                   	pop    ebx
c001b8db:	5e                   	pop    esi
c001b8dc:	c3                   	ret    
c001b8dd:	59                   	pop    ecx
c001b8de:	b8 02 00 00 00       	mov    eax,0x2
c001b8e3:	31 d2                	xor    edx,edx
c001b8e5:	5b                   	pop    ebx
c001b8e6:	5e                   	pop    esi
c001b8e7:	c3                   	ret    

c001b8e8 <sysCallUSleep(regs*)>:
c001b8e8:	83 ec 14             	sub    esp,0x14
c001b8eb:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b8f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b8f4:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b8fb:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b8fe:	01 ca                	add    edx,ecx
c001b900:	52                   	push   edx
c001b901:	50                   	push   eax
c001b902:	e8 96 23 00 00       	call   c001dc9d <nanoSleep(unsigned long long)>
c001b907:	31 c0                	xor    eax,eax
c001b909:	31 d2                	xor    edx,edx
c001b90b:	83 c4 1c             	add    esp,0x1c
c001b90e:	c3                   	ret    

c001b90f <sysCallSpawn(regs*)>:
c001b90f:	56                   	push   esi
c001b910:	53                   	push   ebx
c001b911:	50                   	push   eax
c001b912:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b916:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b919:	85 c0                	test   eax,eax
c001b91b:	75 08                	jne    c001b925 <sysCallSpawn(regs*)+0x16>
c001b91d:	59                   	pop    ecx
c001b91e:	31 c0                	xor    eax,eax
c001b920:	31 d2                	xor    edx,edx
c001b922:	5b                   	pop    ebx
c001b923:	5e                   	pop    esi
c001b924:	c3                   	ret    
c001b925:	83 ec 0c             	sub    esp,0xc
c001b928:	68 3f 07 00 00       	push   0x73f
c001b92d:	e8 67 3c ff ff       	call   c000f599 <malloc>
c001b932:	83 c4 10             	add    esp,0x10
c001b935:	89 c6                	mov    esi,eax
c001b937:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b93a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b93d:	85 c0                	test   eax,eax
c001b93f:	75 32                	jne    c001b973 <sysCallSpawn(regs*)+0x64>
c001b941:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b946:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b949:	52                   	push   edx
c001b94a:	50                   	push   eax
c001b94b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b94e:	56                   	push   esi
c001b94f:	e8 6e 1a 00 00       	call   c001d3c2 <Process::Process(char const*, Process*, char**)>
c001b954:	83 c4 10             	add    esp,0x10
c001b957:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b95e:	75 bd                	jne    c001b91d <sysCallSpawn(regs*)+0xe>
c001b960:	83 ec 0c             	sub    esp,0xc
c001b963:	56                   	push   esi
c001b964:	e8 3b 1f 00 00       	call   c001d8a4 <Process::createUserThread()>
c001b969:	8b 06                	mov    eax,DWORD PTR [esi]
c001b96b:	83 c4 10             	add    esp,0x10
c001b96e:	99                   	cdq    
c001b96f:	59                   	pop    ecx
c001b970:	5b                   	pop    ebx
c001b971:	5e                   	pop    esi
c001b972:	c3                   	ret    
c001b973:	31 c0                	xor    eax,eax
c001b975:	eb d2                	jmp    c001b949 <sysCallSpawn(regs*)+0x3a>

c001b977 <sysCallGetEnv(regs*)>:
c001b977:	57                   	push   edi
c001b978:	56                   	push   esi
c001b979:	53                   	push   ebx
c001b97a:	83 ec 1c             	sub    esp,0x1c
c001b97d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b981:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b986:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b989:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b98c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b98f:	e8 f1 e3 ff ff       	call   c0019d85 <Krnl::getProcessTotalEnvCount(Process*)>
c001b994:	83 c4 10             	add    esp,0x10
c001b997:	39 c7                	cmp    edi,eax
c001b999:	7c 14                	jl     c001b9af <sysCallGetEnv(regs*)+0x38>
c001b99b:	85 f6                	test   esi,esi
c001b99d:	75 0b                	jne    c001b9aa <sysCallGetEnv(regs*)+0x33>
c001b99f:	83 c4 10             	add    esp,0x10
c001b9a2:	31 c0                	xor    eax,eax
c001b9a4:	5b                   	pop    ebx
c001b9a5:	31 d2                	xor    edx,edx
c001b9a7:	5e                   	pop    esi
c001b9a8:	5f                   	pop    edi
c001b9a9:	c3                   	ret    
c001b9aa:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b9ad:	eb f0                	jmp    c001b99f <sysCallGetEnv(regs*)+0x28>
c001b9af:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b9b3:	52                   	push   edx
c001b9b4:	57                   	push   edi
c001b9b5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b9bb:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b9be:	50                   	push   eax
c001b9bf:	e8 e1 e3 ff ff       	call   c0019da5 <Krnl::getProcessEnvPair(Process*, int)>
c001b9c4:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b9c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b9cb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b9cf:	83 c4 0c             	add    esp,0xc
c001b9d2:	85 c9                	test   ecx,ecx
c001b9d4:	75 23                	jne    c001b9f9 <sysCallGetEnv(regs*)+0x82>
c001b9d6:	83 ec 0c             	sub    esp,0xc
c001b9d9:	50                   	push   eax
c001b9da:	e8 8d 4d fe ff       	call   c000076c <strlen>
c001b9df:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b9e2:	89 c3                	mov    ebx,eax
c001b9e4:	e8 83 4d fe ff       	call   c000076c <strlen>
c001b9e9:	83 c4 10             	add    esp,0x10
c001b9ec:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b9f0:	83 c4 10             	add    esp,0x10
c001b9f3:	31 d2                	xor    edx,edx
c001b9f5:	5b                   	pop    ebx
c001b9f6:	5e                   	pop    esi
c001b9f7:	5f                   	pop    edi
c001b9f8:	c3                   	ret    
c001b9f9:	83 ec 08             	sub    esp,0x8
c001b9fc:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b9ff:	50                   	push   eax
c001ba00:	56                   	push   esi
c001ba01:	e8 06 4e fe ff       	call   c000080c <strcpy>
c001ba06:	58                   	pop    eax
c001ba07:	5a                   	pop    edx
c001ba08:	68 b3 b8 02 c0       	push   0xc002b8b3
c001ba0d:	56                   	push   esi
c001ba0e:	e8 39 4f fe ff       	call   c000094c <strcat>
c001ba13:	59                   	pop    ecx
c001ba14:	5b                   	pop    ebx
c001ba15:	57                   	push   edi
c001ba16:	56                   	push   esi
c001ba17:	e8 30 4f fe ff       	call   c000094c <strcat>
c001ba1c:	83 c4 10             	add    esp,0x10
c001ba1f:	e9 7b ff ff ff       	jmp    c001b99f <sysCallGetEnv(regs*)+0x28>

c001ba24 <sysAppSettings(regs*)>:
c001ba24:	57                   	push   edi
c001ba25:	56                   	push   esi
c001ba26:	56                   	push   esi
c001ba27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba2b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001ba2e:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001ba34:	25 e0 1f 00 00       	and    eax,0x1fe0
c001ba39:	66 3d c0 09          	cmp    ax,0x9c0
c001ba3d:	75 2e                	jne    c001ba6d <sysAppSettings(regs*)+0x49>
c001ba3f:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001ba45:	83 e0 1f             	and    eax,0x1f
c001ba48:	3c 01                	cmp    al,0x1
c001ba4a:	74 2c                	je     c001ba78 <sysAppSettings(regs*)+0x54>
c001ba4c:	3c 07                	cmp    al,0x7
c001ba4e:	0f 84 b3 00 00 00    	je     c001bb07 <sysAppSettings(regs*)+0xe3>
c001ba54:	84 c0                	test   al,al
c001ba56:	0f 84 d2 00 00 00    	je     c001bb2e <sysAppSettings(regs*)+0x10a>
c001ba5c:	3c 08                	cmp    al,0x8
c001ba5e:	74 63                	je     c001bac3 <sysAppSettings(regs*)+0x9f>
c001ba60:	59                   	pop    ecx
c001ba61:	0f b6 c0             	movzx  eax,al
c001ba64:	5e                   	pop    esi
c001ba65:	05 e8 03 00 00       	add    eax,0x3e8
c001ba6a:	5f                   	pop    edi
c001ba6b:	99                   	cdq    
c001ba6c:	c3                   	ret    
c001ba6d:	b8 01 00 00 00       	mov    eax,0x1
c001ba72:	59                   	pop    ecx
c001ba73:	31 d2                	xor    edx,edx
c001ba75:	5e                   	pop    esi
c001ba76:	5f                   	pop    edi
c001ba77:	c3                   	ret    
c001ba78:	50                   	push   eax
c001ba79:	68 00 01 00 00       	push   0x100
c001ba7e:	6a 00                	push   0x0
c001ba80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba85:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba88:	83 c0 0c             	add    eax,0xc
c001ba8b:	50                   	push   eax
c001ba8c:	e8 bf 4c fe ff       	call   c0000750 <memset>
c001ba91:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba96:	b9 ff 00 00 00       	mov    ecx,0xff
c001ba9b:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001ba9e:	83 c7 0c             	add    edi,0xc
c001baa1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001baa3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001baa8:	5a                   	pop    edx
c001baa9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001baac:	59                   	pop    ecx
c001baad:	8d 50 0c             	lea    edx,[eax+0xc]
c001bab0:	52                   	push   edx
c001bab1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bab7:	e8 3a 47 ff ff       	call   c00101f6 <VgaText::setTitle(char*)>
c001babc:	83 c4 10             	add    esp,0x10
c001babf:	31 c0                	xor    eax,eax
c001bac1:	eb af                	jmp    c001ba72 <sysAppSettings(regs*)+0x4e>
c001bac3:	83 ec 08             	sub    esp,0x8
c001bac6:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bacc:	83 e0 0f             	and    eax,0xf
c001bacf:	50                   	push   eax
c001bad0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bad5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bad8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bade:	e8 03 47 ff ff       	call   c00101e6 <VgaText::setTitleColour(VgaColour)>
c001bae3:	5f                   	pop    edi
c001bae4:	58                   	pop    eax
c001bae5:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001baeb:	c1 e8 04             	shr    eax,0x4
c001baee:	83 e0 0f             	and    eax,0xf
c001baf1:	50                   	push   eax
c001baf2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001baf7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bafa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bb00:	e8 d1 46 ff ff       	call   c00101d6 <VgaText::setTitleTextColour(VgaColour)>
c001bb05:	eb b5                	jmp    c001babc <sysAppSettings(regs*)+0x98>
c001bb07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb0c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb0f:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bb15:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001bb1b:	c0 e8 06             	shr    al,0x6
c001bb1e:	83 e0 01             	and    eax,0x1
c001bb21:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001bb27:	31 c0                	xor    eax,eax
c001bb29:	e9 44 ff ff ff       	jmp    c001ba72 <sysAppSettings(regs*)+0x4e>
c001bb2e:	b8 02 00 00 00       	mov    eax,0x2
c001bb33:	e9 3a ff ff ff       	jmp    c001ba72 <sysAppSettings(regs*)+0x4e>

c001bb38 <sysSetFatAttrib(regs*)>:
c001bb38:	57                   	push   edi
c001bb39:	56                   	push   esi
c001bb3a:	53                   	push   ebx
c001bb3b:	83 ec 1c             	sub    esp,0x1c
c001bb3e:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bb42:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001bb45:	68 14 01 00 00       	push   0x114
c001bb4a:	e8 4a 3a ff ff       	call   c000f599 <malloc>
c001bb4f:	83 c4 0c             	add    esp,0xc
c001bb52:	89 c3                	mov    ebx,eax
c001bb54:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb59:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb5c:	57                   	push   edi
c001bb5d:	53                   	push   ebx
c001bb5e:	e8 c9 70 ff ff       	call   c0012c2c <File::File(char const*, Process*)>
c001bb63:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001bb66:	83 c4 0c             	add    esp,0xc
c001bb69:	0f b6 d4             	movzx  edx,ah
c001bb6c:	0f b6 c0             	movzx  eax,al
c001bb6f:	52                   	push   edx
c001bb70:	50                   	push   eax
c001bb71:	53                   	push   ebx
c001bb72:	e8 2b 73 ff ff       	call   c0012ea2 <File::chfatattr(unsigned char, unsigned char)>
c001bb77:	83 c4 10             	add    esp,0x10
c001bb7a:	85 db                	test   ebx,ebx
c001bb7c:	74 14                	je     c001bb92 <sysSetFatAttrib(regs*)+0x5a>
c001bb7e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb82:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bb84:	83 ec 0c             	sub    esp,0xc
c001bb87:	53                   	push   ebx
c001bb88:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bb8b:	83 c4 10             	add    esp,0x10
c001bb8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb92:	85 c0                	test   eax,eax
c001bb94:	0f 95 c0             	setne  al
c001bb97:	31 d2                	xor    edx,edx
c001bb99:	0f b6 c0             	movzx  eax,al
c001bb9c:	f7 d8                	neg    eax
c001bb9e:	83 d2 00             	adc    edx,0x0
c001bba1:	83 c4 10             	add    esp,0x10
c001bba4:	f7 da                	neg    edx
c001bba6:	5b                   	pop    ebx
c001bba7:	5e                   	pop    esi
c001bba8:	5f                   	pop    edi
c001bba9:	c3                   	ret    

c001bbaa <sysPipe(regs*)>:
c001bbaa:	57                   	push   edi
c001bbab:	56                   	push   esi
c001bbac:	53                   	push   ebx
c001bbad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbb1:	83 ec 0c             	sub    esp,0xc
c001bbb4:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001bbb7:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001bbba:	6a 20                	push   0x20
c001bbbc:	e8 d8 39 ff ff       	call   c000f599 <malloc>
c001bbc1:	89 c3                	mov    ebx,eax
c001bbc3:	58                   	pop    eax
c001bbc4:	5a                   	pop    edx
c001bbc5:	68 00 50 00 00       	push   0x5000
c001bbca:	53                   	push   ebx
c001bbcb:	e8 9e 43 ff ff       	call   c000ff6e <Pipe::Pipe(int)>
c001bbd0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bbd3:	e8 fe 51 ff ff       	call   c0010dd6 <UnixFile::getFileDescriptor()>
c001bbd8:	89 07                	mov    DWORD PTR [edi],eax
c001bbda:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bbdd:	e8 f4 51 ff ff       	call   c0010dd6 <UnixFile::getFileDescriptor()>
c001bbe2:	83 c4 10             	add    esp,0x10
c001bbe5:	89 06                	mov    DWORD PTR [esi],eax
c001bbe7:	31 d2                	xor    edx,edx
c001bbe9:	5b                   	pop    ebx
c001bbea:	31 c0                	xor    eax,eax
c001bbec:	5e                   	pop    esi
c001bbed:	5f                   	pop    edi
c001bbee:	c3                   	ret    

c001bbef <sysGetUnixTime(regs*)>:
c001bbef:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c001bbf4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bbfa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bbfe:	e9 1b 7a ff ff       	jmp    c001361e <Clock::timeInSecondsLocal()>

c001bc03 <string_ends_with(char const*, char const*)>:
c001bc03:	57                   	push   edi
c001bc04:	56                   	push   esi
c001bc05:	53                   	push   ebx
c001bc06:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc0a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bc0e:	83 ec 0c             	sub    esp,0xc
c001bc11:	53                   	push   ebx
c001bc12:	e8 55 4b fe ff       	call   c000076c <strlen>
c001bc17:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bc1a:	89 c6                	mov    esi,eax
c001bc1c:	e8 4b 4b fe ff       	call   c000076c <strlen>
c001bc21:	83 c4 10             	add    esp,0x10
c001bc24:	39 c6                	cmp    esi,eax
c001bc26:	7d 06                	jge    c001bc2e <string_ends_with(char const*, char const*)+0x2b>
c001bc28:	5b                   	pop    ebx
c001bc29:	31 c0                	xor    eax,eax
c001bc2b:	5e                   	pop    esi
c001bc2c:	5f                   	pop    edi
c001bc2d:	c3                   	ret    
c001bc2e:	83 ec 08             	sub    esp,0x8
c001bc31:	29 c6                	sub    esi,eax
c001bc33:	57                   	push   edi
c001bc34:	01 f3                	add    ebx,esi
c001bc36:	53                   	push   ebx
c001bc37:	e8 5c 4c fe ff       	call   c0000898 <strcmp>
c001bc3c:	83 c4 10             	add    esp,0x10
c001bc3f:	85 c0                	test   eax,eax
c001bc41:	5b                   	pop    ebx
c001bc42:	0f 94 c0             	sete   al
c001bc45:	5e                   	pop    esi
c001bc46:	0f b6 c0             	movzx  eax,al
c001bc49:	5f                   	pop    edi
c001bc4a:	c3                   	ret    

c001bc4b <sysCallOpen(regs*)>:
c001bc4b:	56                   	push   esi
c001bc4c:	53                   	push   ebx
c001bc4d:	81 ec 04 01 00 00    	sub    esp,0x104
c001bc53:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001bc5a:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001bc5d:	85 c9                	test   ecx,ecx
c001bc5f:	0f 84 ad 01 00 00    	je     c001be12 <sysCallOpen(regs*)+0x1c7>
c001bc65:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bc68:	85 c0                	test   eax,eax
c001bc6a:	0f 84 a2 01 00 00    	je     c001be12 <sysCallOpen(regs*)+0x1c7>
c001bc70:	52                   	push   edx
c001bc71:	68 b5 b8 02 c0       	push   0xc002b8b5
c001bc76:	50                   	push   eax
c001bc77:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001bc7b:	56                   	push   esi
c001bc7c:	e8 01 6e ff ff       	call   c0012a82 <Fs::standardiseFiles(char*, char const*, char const*)>
c001bc81:	89 34 24             	mov    DWORD PTR [esp],esi
c001bc84:	e8 e3 4a fe ff       	call   c000076c <strlen>
c001bc89:	83 c4 10             	add    esp,0x10
c001bc8c:	48                   	dec    eax
c001bc8d:	74 1d                	je     c001bcac <sysCallOpen(regs*)+0x61>
c001bc8f:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001bc92:	eb 0f                	jmp    c001bca3 <sysCallOpen(regs*)+0x58>
c001bc94:	80 fa 3a             	cmp    dl,0x3a
c001bc97:	74 0f                	je     c001bca8 <sysCallOpen(regs*)+0x5d>
c001bc99:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001bc9d:	48                   	dec    eax
c001bc9e:	74 0c                	je     c001bcac <sysCallOpen(regs*)+0x61>
c001bca0:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001bca3:	80 fa 2e             	cmp    dl,0x2e
c001bca6:	75 ec                	jne    c001bc94 <sysCallOpen(regs*)+0x49>
c001bca8:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001bcac:	83 ec 08             	sub    esp,0x8
c001bcaf:	68 b9 b8 02 c0       	push   0xc002b8b9
c001bcb4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bcb7:	e8 47 ff ff ff       	call   c001bc03 <string_ends_with(char const*, char const*)>
c001bcbc:	83 c4 10             	add    esp,0x10
c001bcbf:	85 c0                	test   eax,eax
c001bcc1:	74 1d                	je     c001bce0 <sysCallOpen(regs*)+0x95>
c001bcc3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bcc6:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001bccc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bcd3:	81 c4 04 01 00 00    	add    esp,0x104
c001bcd9:	31 c0                	xor    eax,eax
c001bcdb:	31 d2                	xor    edx,edx
c001bcdd:	5b                   	pop    ebx
c001bcde:	5e                   	pop    esi
c001bcdf:	c3                   	ret    
c001bce0:	83 ec 08             	sub    esp,0x8
c001bce3:	68 be b8 02 c0       	push   0xc002b8be
c001bce8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bceb:	e8 13 ff ff ff       	call   c001bc03 <string_ends_with(char const*, char const*)>
c001bcf0:	83 c4 10             	add    esp,0x10
c001bcf3:	85 c0                	test   eax,eax
c001bcf5:	75 cc                	jne    c001bcc3 <sysCallOpen(regs*)+0x78>
c001bcf7:	83 ec 08             	sub    esp,0x8
c001bcfa:	68 ba b8 02 c0       	push   0xc002b8ba
c001bcff:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd02:	e8 91 4b fe ff       	call   c0000898 <strcmp>
c001bd07:	83 c4 10             	add    esp,0x10
c001bd0a:	85 c0                	test   eax,eax
c001bd0c:	74 b5                	je     c001bcc3 <sysCallOpen(regs*)+0x78>
c001bd0e:	83 ec 08             	sub    esp,0x8
c001bd11:	68 b9 b8 02 c0       	push   0xc002b8b9
c001bd16:	56                   	push   esi
c001bd17:	e8 e7 fe ff ff       	call   c001bc03 <string_ends_with(char const*, char const*)>
c001bd1c:	83 c4 10             	add    esp,0x10
c001bd1f:	85 c0                	test   eax,eax
c001bd21:	75 a0                	jne    c001bcc3 <sysCallOpen(regs*)+0x78>
c001bd23:	83 ec 08             	sub    esp,0x8
c001bd26:	68 c3 b8 02 c0       	push   0xc002b8c3
c001bd2b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd2e:	e8 d0 fe ff ff       	call   c001bc03 <string_ends_with(char const*, char const*)>
c001bd33:	83 c4 10             	add    esp,0x10
c001bd36:	85 c0                	test   eax,eax
c001bd38:	0f 85 e7 00 00 00    	jne    c001be25 <sysCallOpen(regs*)+0x1da>
c001bd3e:	83 ec 08             	sub    esp,0x8
c001bd41:	68 c8 b8 02 c0       	push   0xc002b8c8
c001bd46:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd49:	e8 b5 fe ff ff       	call   c001bc03 <string_ends_with(char const*, char const*)>
c001bd4e:	83 c4 10             	add    esp,0x10
c001bd51:	85 c0                	test   eax,eax
c001bd53:	0f 85 cc 00 00 00    	jne    c001be25 <sysCallOpen(regs*)+0x1da>
c001bd59:	83 ec 08             	sub    esp,0x8
c001bd5c:	68 c4 b8 02 c0       	push   0xc002b8c4
c001bd61:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd64:	e8 2f 4b fe ff       	call   c0000898 <strcmp>
c001bd69:	83 c4 10             	add    esp,0x10
c001bd6c:	85 c0                	test   eax,eax
c001bd6e:	0f 84 b1 00 00 00    	je     c001be25 <sysCallOpen(regs*)+0x1da>
c001bd74:	83 ec 08             	sub    esp,0x8
c001bd77:	68 c3 b8 02 c0       	push   0xc002b8c3
c001bd7c:	56                   	push   esi
c001bd7d:	e8 81 fe ff ff       	call   c001bc03 <string_ends_with(char const*, char const*)>
c001bd82:	83 c4 10             	add    esp,0x10
c001bd85:	85 c0                	test   eax,eax
c001bd87:	0f 85 98 00 00 00    	jne    c001be25 <sysCallOpen(regs*)+0x1da>
c001bd8d:	83 ec 0c             	sub    esp,0xc
c001bd90:	68 14 01 00 00       	push   0x114
c001bd95:	e8 ff 37 ff ff       	call   c000f599 <malloc>
c001bd9a:	83 c4 0c             	add    esp,0xc
c001bd9d:	89 c6                	mov    esi,eax
c001bd9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bda4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bda7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bdaa:	56                   	push   esi
c001bdab:	e8 7c 6e ff ff       	call   c0012c2c <File::File(char const*, Process*)>
c001bdb0:	83 c4 10             	add    esp,0x10
c001bdb3:	85 f6                	test   esi,esi
c001bdb5:	74 5b                	je     c001be12 <sysCallOpen(regs*)+0x1c7>
c001bdb7:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bdba:	0f b6 c2             	movzx  eax,dl
c001bdbd:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001bdc0:	89 d0                	mov    eax,edx
c001bdc2:	83 e0 01             	and    eax,0x1
c001bdc5:	f6 c2 02             	test   dl,0x2
c001bdc8:	74 03                	je     c001bdcd <sysCallOpen(regs*)+0x182>
c001bdca:	83 c8 02             	or     eax,0x2
c001bdcd:	f6 c2 04             	test   dl,0x4
c001bdd0:	74 03                	je     c001bdd5 <sysCallOpen(regs*)+0x18a>
c001bdd2:	83 c8 04             	or     eax,0x4
c001bdd5:	f6 c2 08             	test   dl,0x8
c001bdd8:	74 03                	je     c001bddd <sysCallOpen(regs*)+0x192>
c001bdda:	83 c8 0a             	or     eax,0xa
c001bddd:	83 e2 10             	and    edx,0x10
c001bde0:	74 03                	je     c001bde5 <sysCallOpen(regs*)+0x19a>
c001bde2:	83 c8 12             	or     eax,0x12
c001bde5:	83 ec 08             	sub    esp,0x8
c001bde8:	50                   	push   eax
c001bde9:	56                   	push   esi
c001bdea:	e8 a1 6e ff ff       	call   c0012c90 <File::open(FileOpenMode)>
c001bdef:	83 c4 10             	add    esp,0x10
c001bdf2:	85 c0                	test   eax,eax
c001bdf4:	75 1c                	jne    c001be12 <sysCallOpen(regs*)+0x1c7>
c001bdf6:	83 ec 0c             	sub    esp,0xc
c001bdf9:	56                   	push   esi
c001bdfa:	e8 d7 4f ff ff       	call   c0010dd6 <UnixFile::getFileDescriptor()>
c001bdff:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001be02:	83 c4 10             	add    esp,0x10
c001be05:	89 02                	mov    DWORD PTR [edx],eax
c001be07:	c1 f8 1f             	sar    eax,0x1f
c001be0a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001be0d:	e9 c1 fe ff ff       	jmp    c001bcd3 <sysCallOpen(regs*)+0x88>
c001be12:	81 c4 04 01 00 00    	add    esp,0x104
c001be18:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be1d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be22:	5b                   	pop    ebx
c001be23:	5e                   	pop    esi
c001be24:	c3                   	ret    
c001be25:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001be28:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001be2e:	e9 99 fe ff ff       	jmp    c001bccc <sysCallOpen(regs*)+0x81>

c001be33 <Sys::loadSyscalls()>:
c001be33:	c7 05 80 04 03 c0 a0 b0 01 c0 	mov    DWORD PTR ds:0xc0030480,0xc001b0a0
c001be3d:	c7 05 84 04 03 c0 98 ac 01 c0 	mov    DWORD PTR ds:0xc0030484,0xc001ac98
c001be47:	c7 05 88 04 03 c0 86 ae 01 c0 	mov    DWORD PTR ds:0xc0030488,0xc001ae86
c001be51:	c7 05 8c 04 03 c0 d6 af 01 c0 	mov    DWORD PTR ds:0xc003048c,0xc001afd6
c001be5b:	c7 05 90 04 03 c0 1e ae 01 c0 	mov    DWORD PTR ds:0xc0030490,0xc001ae1e
c001be65:	c7 05 94 04 03 c0 cf ac 01 c0 	mov    DWORD PTR ds:0xc0030494,0xc001accf
c001be6f:	c7 05 98 04 03 c0 b0 ac 01 c0 	mov    DWORD PTR ds:0xc0030498,0xc001acb0
c001be79:	c7 05 9c 04 03 c0 db ae 01 c0 	mov    DWORD PTR ds:0xc003049c,0xc001aedb
c001be83:	c7 05 a4 04 03 c0 69 b5 01 c0 	mov    DWORD PTR ds:0xc00304a4,0xc001b569
c001be8d:	c7 05 a0 04 03 c0 4b bc 01 c0 	mov    DWORD PTR ds:0xc00304a0,0xc001bc4b
c001be97:	c7 05 a8 04 03 c0 c9 b5 01 c0 	mov    DWORD PTR ds:0xc00304a8,0xc001b5c9
c001bea1:	c7 05 ac 04 03 c0 ac b2 01 c0 	mov    DWORD PTR ds:0xc00304ac,0xc001b2ac
c001beab:	c7 05 b0 04 03 c0 e6 b0 01 c0 	mov    DWORD PTR ds:0xc00304b0,0xc001b0e6
c001beb5:	c7 05 b4 04 03 c0 eb b0 01 c0 	mov    DWORD PTR ds:0xc00304b4,0xc001b0eb
c001bebf:	c7 05 b8 04 03 c0 92 b6 01 c0 	mov    DWORD PTR ds:0xc00304b8,0xc001b692
c001bec9:	c7 05 bc 04 03 c0 3e b6 01 c0 	mov    DWORD PTR ds:0xc00304bc,0xc001b63e
c001bed3:	c7 05 c0 04 03 c0 85 b3 01 c0 	mov    DWORD PTR ds:0xc00304c0,0xc001b385
c001bedd:	c7 05 c4 04 03 c0 dc b3 01 c0 	mov    DWORD PTR ds:0xc00304c4,0xc001b3dc
c001bee7:	c7 05 c8 04 03 c0 48 b4 01 c0 	mov    DWORD PTR ds:0xc00304c8,0xc001b448
c001bef1:	c7 05 cc 04 03 c0 f0 b0 01 c0 	mov    DWORD PTR ds:0xc00304cc,0xc001b0f0
c001befb:	c7 05 d0 04 03 c0 02 b7 01 c0 	mov    DWORD PTR ds:0xc00304d0,0xc001b702
c001bf05:	c7 05 d4 04 03 c0 1c b7 01 c0 	mov    DWORD PTR ds:0xc00304d4,0xc001b71c
c001bf0f:	c7 05 d8 04 03 c0 1c b7 01 c0 	mov    DWORD PTR ds:0xc00304d8,0xc001b71c
c001bf19:	c7 05 dc 04 03 c0 51 b7 01 c0 	mov    DWORD PTR ds:0xc00304dc,0xc001b751
c001bf23:	c7 05 e0 04 03 c0 b5 b7 01 c0 	mov    DWORD PTR ds:0xc00304e0,0xc001b7b5
c001bf2d:	c7 05 e4 04 03 c0 fa b0 01 c0 	mov    DWORD PTR ds:0xc00304e4,0xc001b0fa
c001bf37:	c7 05 e8 04 03 c0 19 b8 01 c0 	mov    DWORD PTR ds:0xc00304e8,0xc001b819
c001bf41:	c7 05 ec 04 03 c0 69 b2 01 c0 	mov    DWORD PTR ds:0xc00304ec,0xc001b269
c001bf4b:	c7 05 f0 04 03 c0 65 b8 01 c0 	mov    DWORD PTR ds:0xc00304f0,0xc001b865
c001bf55:	c7 05 f4 04 03 c0 2b b3 01 c0 	mov    DWORD PTR ds:0xc00304f4,0xc001b32b
c001bf5f:	c7 05 f8 04 03 c0 e8 b8 01 c0 	mov    DWORD PTR ds:0xc00304f8,0xc001b8e8
c001bf69:	c7 05 fc 04 03 c0 ba b4 01 c0 	mov    DWORD PTR ds:0xc00304fc,0xc001b4ba
c001bf73:	c7 05 00 05 03 c0 0f b9 01 c0 	mov    DWORD PTR ds:0xc0030500,0xc001b90f
c001bf7d:	c7 05 04 05 03 c0 77 b9 01 c0 	mov    DWORD PTR ds:0xc0030504,0xc001b977
c001bf87:	c7 05 08 05 03 c0 24 ba 01 c0 	mov    DWORD PTR ds:0xc0030508,0xc001ba24
c001bf91:	c7 05 0c 05 03 c0 0a b1 01 c0 	mov    DWORD PTR ds:0xc003050c,0xc001b10a
c001bf9b:	c7 05 10 05 03 c0 74 b1 01 c0 	mov    DWORD PTR ds:0xc0030510,0xc001b174
c001bfa5:	c7 05 14 05 03 c0 ba b1 01 c0 	mov    DWORD PTR ds:0xc0030514,0xc001b1ba
c001bfaf:	c7 05 18 05 03 c0 38 bb 01 c0 	mov    DWORD PTR ds:0xc0030518,0xc001bb38
c001bfb9:	c7 05 1c 05 03 c0 37 b7 01 c0 	mov    DWORD PTR ds:0xc003051c,0xc001b737
c001bfc3:	c7 05 20 05 03 c0 0b b2 01 c0 	mov    DWORD PTR ds:0xc0030520,0xc001b20b
c001bfcd:	c7 05 24 05 03 c0 aa bb 01 c0 	mov    DWORD PTR ds:0xc0030524,0xc001bbaa
c001bfd7:	c7 05 28 05 03 c0 ef bb 01 c0 	mov    DWORD PTR ds:0xc0030528,0xc001bbef
c001bfe1:	c7 05 2c 05 03 c0 76 ad 01 c0 	mov    DWORD PTR ds:0xc003052c,0xc001ad76
c001bfeb:	c7 05 30 05 03 c0 f7 ae 01 c0 	mov    DWORD PTR ds:0xc0030530,0xc001aef7
c001bff5:	c7 05 34 05 03 c0 8c af 01 c0 	mov    DWORD PTR ds:0xc0030534,0xc001af8c
c001bfff:	c7 05 38 05 03 c0 62 ac 01 c0 	mov    DWORD PTR ds:0xc0030538,0xc001ac62
c001c009:	c7 05 3c 05 03 c0 3e b0 01 c0 	mov    DWORD PTR ds:0xc003053c,0xc001b03e
c001c013:	c7 05 40 05 03 c0 db ac 01 c0 	mov    DWORD PTR ds:0xc0030540,0xc001acdb
c001c01d:	c7 05 44 05 03 c0 f2 ac 01 c0 	mov    DWORD PTR ds:0xc0030544,0xc001acf2
c001c027:	c3                   	ret    

c001c028 <Sys::systemCall(regs*, void*)>:
c001c028:	53                   	push   ebx
c001c029:	83 ec 08             	sub    esp,0x8
c001c02c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c030:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c033:	83 f8 7f             	cmp    eax,0x7f
c001c036:	77 16                	ja     c001c04e <Sys::systemCall(regs*, void*)+0x26>
c001c038:	8b 14 85 80 04 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfb80]
c001c03f:	85 d2                	test   edx,edx
c001c041:	74 0b                	je     c001c04e <Sys::systemCall(regs*, void*)+0x26>
c001c043:	83 ec 0c             	sub    esp,0xc
c001c046:	53                   	push   ebx
c001c047:	ff d2                	call   edx
c001c049:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c04c:	eb 0d                	jmp    c001c05b <Sys::systemCall(regs*, void*)+0x33>
c001c04e:	52                   	push   edx
c001c04f:	52                   	push   edx
c001c050:	50                   	push   eax
c001c051:	68 cd b8 02 c0       	push   0xc002b8cd
c001c056:	e8 72 66 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c001c05b:	83 c4 10             	add    esp,0x10
c001c05e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c063:	31 d2                	xor    edx,edx
c001c065:	83 c4 08             	add    esp,0x8
c001c068:	5b                   	pop    ebx
c001c069:	c3                   	ret    

c001c06a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c06a:	55                   	push   ebp
c001c06b:	57                   	push   edi
c001c06c:	56                   	push   esi
c001c06d:	53                   	push   ebx
c001c06e:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c074:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c07b:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c082:	85 c0                	test   eax,eax
c001c084:	0f 95 c1             	setne  cl
c001c087:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c08f:	0f 94 c2             	sete   dl
c001c092:	84 d1                	test   cl,dl
c001c094:	74 23                	je     c001c0b9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c096:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c09c:	74 1b                	je     c001c0b9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c09e:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c0a4:	89 da                	mov    edx,ebx
c001c0a6:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c0ac:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c0b2:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c0b9:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c0c0:	05 ff 0f 00 00       	add    eax,0xfff
c001c0c5:	83 ec 0c             	sub    esp,0xc
c001c0c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c0cc:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c0d2:	c1 e8 0c             	shr    eax,0xc
c001c0d5:	89 fe                	mov    esi,edi
c001c0d7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c0db:	c1 ee 0c             	shr    esi,0xc
c001c0de:	6a 01                	push   0x1
c001c0e0:	e8 3c 51 ff ff       	call   c0011221 <Virt::allocateKernelVirtualPages(int)>
c001c0e5:	89 c5                	mov    ebp,eax
c001c0e7:	58                   	pop    eax
c001c0e8:	5a                   	pop    edx
c001c0e9:	56                   	push   esi
c001c0ea:	68 e1 b8 02 c0       	push   0xc002b8e1
c001c0ef:	e8 d9 65 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c001c0f4:	59                   	pop    ecx
c001c0f5:	58                   	pop    eax
c001c0f6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c0fa:	68 f3 b8 02 c0       	push   0xc002b8f3
c001c0ff:	e8 c9 65 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c001c104:	83 c4 10             	add    esp,0x10
c001c107:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c10d:	0f 86 31 01 00 00    	jbe    c001c244 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c113:	c1 e6 0c             	shl    esi,0xc
c001c116:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c119:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c11c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c120:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c127:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c12a:	01 df                	add    edi,ebx
c001c12c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c12f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c133:	0f 84 08 01 00 00    	je     c001c241 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c139:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c13f:	76 05                	jbe    c001c146 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c141:	bf 00 10 00 00       	mov    edi,0x1000
c001c146:	83 ec 0c             	sub    esp,0xc
c001c149:	31 d2                	xor    edx,edx
c001c14b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c152:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c154:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c158:	50                   	push   eax
c001c159:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c15d:	56                   	push   esi
c001c15e:	52                   	push   edx
c001c15f:	57                   	push   edi
c001c160:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c167:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c16a:	83 c4 20             	add    esp,0x20
c001c16d:	85 c0                	test   eax,eax
c001c16f:	74 0a                	je     c001c17b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c171:	53                   	push   ebx
c001c172:	53                   	push   ebx
c001c173:	50                   	push   eax
c001c174:	68 05 b9 02 c0       	push   0xc002b905
c001c179:	eb 0f                	jmp    c001c18a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c17b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c17f:	74 20                	je     c001c1a1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c181:	51                   	push   ecx
c001c182:	51                   	push   ecx
c001c183:	6a 00                	push   0x0
c001c185:	68 30 b9 02 c0       	push   0xc002b930
c001c18a:	e8 3e 65 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c001c18f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c192:	e8 d0 54 ff ff       	call   c0011667 <Virt::freeKernelVirtualPages(unsigned long)>
c001c197:	83 c4 10             	add    esp,0x10
c001c19a:	31 c0                	xor    eax,eax
c001c19c:	e9 68 01 00 00       	jmp    c001c309 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c1a1:	fa                   	cli    
c001c1a2:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001c1a8:	e8 c4 37 ff ff       	call   c000f971 <Phys::allocatePage()>
c001c1ad:	6a 07                	push   0x7
c001c1af:	89 c7                	mov    edi,eax
c001c1b1:	55                   	push   ebp
c001c1b2:	50                   	push   eax
c001c1b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1b8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1bb:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1c1:	e8 18 58 ff ff       	call   c00119de <VAS::mapPage(unsigned long, unsigned long, int)>
c001c1c6:	83 c4 0c             	add    esp,0xc
c001c1c9:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c1d0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1d6:	6a 00                	push   0x0
c001c1d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1dd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1e0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1e6:	e8 4d 56 ff ff       	call   c0011838 <VAS::mapOtherVASIn(bool, VAS*)>
c001c1eb:	58                   	pop    eax
c001c1ec:	5a                   	pop    edx
c001c1ed:	68 07 0c 00 00       	push   0xc07
c001c1f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c1f6:	57                   	push   edi
c001c1f7:	89 ef                	mov    edi,ebp
c001c1f9:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c200:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c206:	6a 00                	push   0x0
c001c208:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c20d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c210:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c216:	e8 7f 5b ff ff       	call   c0011d9a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c21b:	b9 00 10 00 00       	mov    ecx,0x1000
c001c220:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c222:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001c227:	83 c4 20             	add    esp,0x20
c001c22a:	48                   	dec    eax
c001c22b:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001c230:	85 c0                	test   eax,eax
c001c232:	75 01                	jne    c001c235 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c234:	fb                   	sti    
c001c235:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c23c:	e9 df fe ff ff       	jmp    c001c120 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c241:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c244:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c24c:	0f 86 a9 00 00 00    	jbe    c001c2fb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c252:	fa                   	cli    
c001c253:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001c259:	51                   	push   ecx
c001c25a:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c261:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c267:	6a 00                	push   0x0
c001c269:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c26e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c271:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c277:	e8 bc 55 ff ff       	call   c0011838 <VAS::mapOtherVASIn(bool, VAS*)>
c001c27c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c280:	c1 e6 0c             	shl    esi,0xc
c001c283:	01 de                	add    esi,ebx
c001c285:	83 c4 10             	add    esp,0x10
c001c288:	39 de                	cmp    esi,ebx
c001c28a:	74 61                	je     c001c2ed <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c28c:	e8 e0 36 ff ff       	call   c000f971 <Phys::allocatePage()>
c001c291:	6a 07                	push   0x7
c001c293:	89 c7                	mov    edi,eax
c001c295:	55                   	push   ebp
c001c296:	50                   	push   eax
c001c297:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c29c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c29f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2a5:	e8 34 57 ff ff       	call   c00119de <VAS::mapPage(unsigned long, unsigned long, int)>
c001c2aa:	58                   	pop    eax
c001c2ab:	5a                   	pop    edx
c001c2ac:	68 07 0c 00 00       	push   0xc07
c001c2b1:	53                   	push   ebx
c001c2b2:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c2b8:	57                   	push   edi
c001c2b9:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c2c0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2c6:	6a 00                	push   0x0
c001c2c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2cd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2d0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2d6:	e8 bf 5a ff ff       	call   c0011d9a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c2db:	83 c4 1c             	add    esp,0x1c
c001c2de:	68 00 10 00 00       	push   0x1000
c001c2e3:	6a 00                	push   0x0
c001c2e5:	55                   	push   ebp
c001c2e6:	e8 65 44 fe ff       	call   c0000750 <memset>
c001c2eb:	eb 98                	jmp    c001c285 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c2ed:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001c2f2:	48                   	dec    eax
c001c2f3:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001c2f8:	75 01                	jne    c001c2fb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c2fa:	fb                   	sti    
c001c2fb:	83 ec 0c             	sub    esp,0xc
c001c2fe:	55                   	push   ebp
c001c2ff:	e8 63 53 ff ff       	call   c0011667 <Virt::freeKernelVirtualPages(unsigned long)>
c001c304:	83 c4 10             	add    esp,0x10
c001c307:	b0 01                	mov    al,0x1
c001c309:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c30f:	5b                   	pop    ebx
c001c310:	5e                   	pop    esi
c001c311:	5f                   	pop    edi
c001c312:	5d                   	pop    ebp
c001c313:	c3                   	ret    

c001c314 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c314:	55                   	push   ebp
c001c315:	57                   	push   edi
c001c316:	56                   	push   esi
c001c317:	53                   	push   ebx
c001c318:	83 ec 48             	sub    esp,0x48
c001c31b:	68 14 01 00 00       	push   0x114
c001c320:	e8 74 32 ff ff       	call   c000f599 <malloc>
c001c325:	83 c4 0c             	add    esp,0xc
c001c328:	89 c6                	mov    esi,eax
c001c32a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c32e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c332:	50                   	push   eax
c001c333:	e8 f4 68 ff ff       	call   c0012c2c <File::File(char const*, Process*)>
c001c338:	58                   	pop    eax
c001c339:	5a                   	pop    edx
c001c33a:	6a 01                	push   0x1
c001c33c:	56                   	push   esi
c001c33d:	e8 4e 69 ff ff       	call   c0012c90 <File::open(FileOpenMode)>
c001c342:	83 c4 10             	add    esp,0x10
c001c345:	85 c0                	test   eax,eax
c001c347:	0f 85 47 01 00 00    	jne    c001c494 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c34d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c355:	83 ec 0c             	sub    esp,0xc
c001c358:	6a 34                	push   0x34
c001c35a:	e8 3a 32 ff ff       	call   c000f599 <malloc>
c001c35f:	89 c3                	mov    ebx,eax
c001c361:	58                   	pop    eax
c001c362:	8b 06                	mov    eax,DWORD PTR [esi]
c001c364:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c368:	57                   	push   edi
c001c369:	53                   	push   ebx
c001c36a:	6a 00                	push   0x0
c001c36c:	6a 34                	push   0x34
c001c36e:	56                   	push   esi
c001c36f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c372:	83 c4 20             	add    esp,0x20
c001c375:	85 c0                	test   eax,eax
c001c377:	0f 85 17 01 00 00    	jne    c001c494 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c37d:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c383:	0f 85 0b 01 00 00    	jne    c001c494 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c389:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c38c:	85 c0                	test   eax,eax
c001c38e:	0f 84 00 01 00 00    	je     c001c494 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c394:	31 d2                	xor    edx,edx
c001c396:	55                   	push   ebp
c001c397:	52                   	push   edx
c001c398:	50                   	push   eax
c001c399:	56                   	push   esi
c001c39a:	e8 af 69 ff ff       	call   c0012d4e <File::seek(unsigned long long)>
c001c39f:	83 c4 10             	add    esp,0x10
c001c3a2:	85 c0                	test   eax,eax
c001c3a4:	0f 85 ea 00 00 00    	jne    c001c494 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3aa:	83 ec 0c             	sub    esp,0xc
c001c3ad:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c3b0:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c3b4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c3b8:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c3bc:	0f af c2             	imul   eax,edx
c001c3bf:	50                   	push   eax
c001c3c0:	e8 d4 31 ff ff       	call   c000f599 <malloc>
c001c3c5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c3c7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c3cb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c3ce:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c3d2:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c3d6:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c3da:	0f af c2             	imul   eax,edx
c001c3dd:	99                   	cdq    
c001c3de:	52                   	push   edx
c001c3df:	50                   	push   eax
c001c3e0:	56                   	push   esi
c001c3e1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c3e4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c3e7:	83 c4 20             	add    esp,0x20
c001c3ea:	85 c0                	test   eax,eax
c001c3ec:	0f 84 a2 00 00 00    	je     c001c494 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3f2:	31 d2                	xor    edx,edx
c001c3f4:	51                   	push   ecx
c001c3f5:	52                   	push   edx
c001c3f6:	50                   	push   eax
c001c3f7:	56                   	push   esi
c001c3f8:	e8 51 69 ff ff       	call   c0012d4e <File::seek(unsigned long long)>
c001c3fd:	83 c4 10             	add    esp,0x10
c001c400:	85 c0                	test   eax,eax
c001c402:	0f 85 8c 00 00 00    	jne    c001c494 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c408:	83 ec 0c             	sub    esp,0xc
c001c40b:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c40f:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c413:	31 ed                	xor    ebp,ebp
c001c415:	0f af c2             	imul   eax,edx
c001c418:	50                   	push   eax
c001c419:	e8 7b 31 ff ff       	call   c000f599 <malloc>
c001c41e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c420:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c424:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c427:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c42b:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c42f:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c433:	0f af c2             	imul   eax,edx
c001c436:	99                   	cdq    
c001c437:	52                   	push   edx
c001c438:	50                   	push   eax
c001c439:	56                   	push   esi
c001c43a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c43d:	83 c4 20             	add    esp,0x20
c001c440:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c448:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c44c:	0f 86 80 00 00 00    	jbe    c001c4d2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c452:	0f b7 fd             	movzx  edi,bp
c001c455:	c1 e7 05             	shl    edi,0x5
c001c458:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c45c:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c45f:	75 6b                	jne    c001c4cc <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c461:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c464:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c468:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c46b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c46f:	52                   	push   edx
c001c470:	31 d2                	xor    edx,edx
c001c472:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c475:	52                   	push   edx
c001c476:	50                   	push   eax
c001c477:	56                   	push   esi
c001c478:	e8 d1 68 ff ff       	call   c0012d4e <File::seek(unsigned long long)>
c001c47d:	83 c4 10             	add    esp,0x10
c001c480:	85 c0                	test   eax,eax
c001c482:	74 17                	je     c001c49b <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c484:	83 ec 0c             	sub    esp,0xc
c001c487:	68 5c b9 02 c0       	push   0xc002b95c
c001c48c:	e8 3c 62 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c001c491:	83 c4 10             	add    esp,0x10
c001c494:	31 c0                	xor    eax,eax
c001c496:	e9 87 00 00 00       	jmp    c001c522 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c49b:	83 ec 0c             	sub    esp,0xc
c001c49e:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c4a1:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c4a4:	50                   	push   eax
c001c4a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c4ad:	56                   	push   esi
c001c4ae:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c4b2:	e8 b3 fb ff ff       	call   c001c06a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c4b7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c4bb:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c4bf:	83 c4 20             	add    esp,0x20
c001c4c2:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c4c6:	73 04                	jae    c001c4cc <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c4c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c4cc:	45                   	inc    ebp
c001c4cd:	e9 76 ff ff ff       	jmp    c001c448 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c4d2:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c4d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c4da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4de:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c4e4:	83 ec 0c             	sub    esp,0xc
c001c4e7:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c4ed:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c4f2:	05 00 10 00 00       	add    eax,0x1000
c001c4f7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c4fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4fe:	e8 a6 30 ff ff       	call   c000f5a9 <free>
c001c503:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c506:	e8 9e 30 ff ff       	call   c000f5a9 <free>
c001c50b:	58                   	pop    eax
c001c50c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c510:	e8 94 30 ff ff       	call   c000f5a9 <free>
c001c515:	89 34 24             	mov    DWORD PTR [esp],esi
c001c518:	e8 d1 67 ff ff       	call   c0012cee <File::close()>
c001c51d:	83 c4 10             	add    esp,0x10
c001c520:	b0 01                	mov    al,0x1
c001c522:	83 c4 3c             	add    esp,0x3c
c001c525:	5b                   	pop    ebx
c001c526:	5e                   	pop    esi
c001c527:	5f                   	pop    edi
c001c528:	5d                   	pop    ebp
c001c529:	c3                   	ret    

c001c52a <Thr::runtimeReferenceHelper()>:
c001c52a:	83 ec 18             	sub    esp,0x18
c001c52d:	68 64 b9 02 c0       	push   0xc002b964
c001c532:	e8 96 61 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c001c537:	fa                   	cli    
c001c538:	83 c4 10             	add    esp,0x10
c001c53b:	eb fe                	jmp    c001c53b <Thr::runtimeReferenceHelper()+0x11>

c001c53d <Thr::getAddressOfKernelSymbol(char const*)>:
c001c53d:	57                   	push   edi
c001c53e:	56                   	push   esi
c001c53f:	53                   	push   ebx
c001c540:	31 db                	xor    ebx,ebx
c001c542:	39 1d 20 0e 03 c0    	cmp    DWORD PTR ds:0xc0030e20,ebx
c001c548:	7e 3c                	jle    c001c586 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c54a:	8b 34 9d a0 0d 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcf260]
c001c551:	31 ff                	xor    edi,edi
c001c553:	39 3c 9d a0 0c 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcf360],edi
c001c55a:	7e 27                	jle    c001c583 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c55c:	50                   	push   eax
c001c55d:	50                   	push   eax
c001c55e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c562:	8b 06                	mov    eax,DWORD PTR [esi]
c001c564:	03 04 9d 20 0d 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcf2e0]
c001c56b:	50                   	push   eax
c001c56c:	e8 27 43 fe ff       	call   c0000898 <strcmp>
c001c571:	83 c4 10             	add    esp,0x10
c001c574:	85 c0                	test   eax,eax
c001c576:	75 05                	jne    c001c57d <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c578:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c57b:	eb 0b                	jmp    c001c588 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c57d:	83 c6 10             	add    esi,0x10
c001c580:	47                   	inc    edi
c001c581:	eb d0                	jmp    c001c553 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c583:	43                   	inc    ebx
c001c584:	eb bc                	jmp    c001c542 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c586:	31 c0                	xor    eax,eax
c001c588:	5b                   	pop    ebx
c001c589:	5e                   	pop    esi
c001c58a:	5f                   	pop    edi
c001c58b:	c3                   	ret    

c001c58c <Thr::loadKernelSymbolTable(char const*)>:
c001c58c:	55                   	push   ebp
c001c58d:	57                   	push   edi
c001c58e:	56                   	push   esi
c001c58f:	53                   	push   ebx
c001c590:	83 ec 68             	sub    esp,0x68
c001c593:	8b 35 70 0e 03 c0    	mov    esi,DWORD PTR ds:0xc0030e70
c001c599:	68 14 01 00 00       	push   0x114
c001c59e:	e8 f6 2f ff ff       	call   c000f599 <malloc>
c001c5a3:	83 c4 0c             	add    esp,0xc
c001c5a6:	89 c3                	mov    ebx,eax
c001c5a8:	56                   	push   esi
c001c5a9:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c5ad:	50                   	push   eax
c001c5ae:	e8 79 66 ff ff       	call   c0012c2c <File::File(char const*, Process*)>
c001c5b3:	5e                   	pop    esi
c001c5b4:	5f                   	pop    edi
c001c5b5:	6a 01                	push   0x1
c001c5b7:	53                   	push   ebx
c001c5b8:	e8 d3 66 ff ff       	call   c0012c90 <File::open(FileOpenMode)>
c001c5bd:	83 c4 10             	add    esp,0x10
c001c5c0:	85 c0                	test   eax,eax
c001c5c2:	74 0a                	je     c001c5ce <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c5c4:	83 ec 0c             	sub    esp,0xc
c001c5c7:	68 86 b9 02 c0       	push   0xc002b986
c001c5cc:	eb 34                	jmp    c001c602 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c5ce:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c5d6:	83 ec 0c             	sub    esp,0xc
c001c5d9:	6a 34                	push   0x34
c001c5db:	e8 b9 2f ff ff       	call   c000f599 <malloc>
c001c5e0:	59                   	pop    ecx
c001c5e1:	89 c7                	mov    edi,eax
c001c5e3:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c5e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c5e9:	56                   	push   esi
c001c5ea:	57                   	push   edi
c001c5eb:	6a 00                	push   0x0
c001c5ed:	6a 34                	push   0x34
c001c5ef:	53                   	push   ebx
c001c5f0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c5f3:	83 c4 20             	add    esp,0x20
c001c5f6:	85 c0                	test   eax,eax
c001c5f8:	74 17                	je     c001c611 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c5fa:	83 ec 0c             	sub    esp,0xc
c001c5fd:	68 9d b9 02 c0       	push   0xc002b99d
c001c602:	e8 32 d8 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c001c607:	83 c4 10             	add    esp,0x10
c001c60a:	31 c0                	xor    eax,eax
c001c60c:	e9 31 02 00 00       	jmp    c001c842 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c611:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c617:	75 e1                	jne    c001c5fa <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c619:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c61c:	85 c0                	test   eax,eax
c001c61e:	74 da                	je     c001c5fa <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c620:	52                   	push   edx
c001c621:	31 d2                	xor    edx,edx
c001c623:	52                   	push   edx
c001c624:	50                   	push   eax
c001c625:	53                   	push   ebx
c001c626:	e8 23 67 ff ff       	call   c0012d4e <File::seek(unsigned long long)>
c001c62b:	83 c4 10             	add    esp,0x10
c001c62e:	85 c0                	test   eax,eax
c001c630:	75 c8                	jne    c001c5fa <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c632:	83 ec 0c             	sub    esp,0xc
c001c635:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c639:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c63d:	31 ed                	xor    ebp,ebp
c001c63f:	0f af c2             	imul   eax,edx
c001c642:	50                   	push   eax
c001c643:	e8 51 2f ff ff       	call   c000f599 <malloc>
c001c648:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c64a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c64e:	89 34 24             	mov    DWORD PTR [esp],esi
c001c651:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c655:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c659:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c65d:	0f af c2             	imul   eax,edx
c001c660:	99                   	cdq    
c001c661:	52                   	push   edx
c001c662:	50                   	push   eax
c001c663:	53                   	push   ebx
c001c664:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c667:	83 c4 20             	add    esp,0x20
c001c66a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c672:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c67a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c682:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c68a:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c68e:	0f 86 aa 00 00 00    	jbe    c001c73e <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001c694:	0f b7 f5             	movzx  esi,bp
c001c697:	6b f6 28             	imul   esi,esi,0x28
c001c69a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c69e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c6a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c6a5:	50                   	push   eax
c001c6a6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c6aa:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c6ae:	8b 16                	mov    edx,DWORD PTR [esi]
c001c6b0:	6b c0 28             	imul   eax,eax,0x28
c001c6b3:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c6b7:	89 d0                	mov    eax,edx
c001c6b9:	31 d2                	xor    edx,edx
c001c6bb:	52                   	push   edx
c001c6bc:	50                   	push   eax
c001c6bd:	53                   	push   ebx
c001c6be:	e8 8b 66 ff ff       	call   c0012d4e <File::seek(unsigned long long)>
c001c6c3:	83 c4 0c             	add    esp,0xc
c001c6c6:	6a 20                	push   0x20
c001c6c8:	6a 00                	push   0x0
c001c6ca:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c6ce:	52                   	push   edx
c001c6cf:	e8 7c 40 fe ff       	call   c0000750 <memset>
c001c6d4:	58                   	pop    eax
c001c6d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c6d7:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c6db:	51                   	push   ecx
c001c6dc:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c6e0:	52                   	push   edx
c001c6e1:	6a 00                	push   0x0
c001c6e3:	6a 1f                	push   0x1f
c001c6e5:	53                   	push   ebx
c001c6e6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c6e9:	83 c4 18             	add    esp,0x18
c001c6ec:	68 b4 b9 02 c0       	push   0xc002b9b4
c001c6f1:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c6f5:	52                   	push   edx
c001c6f6:	e8 9d 41 fe ff       	call   c0000898 <strcmp>
c001c6fb:	83 c4 10             	add    esp,0x10
c001c6fe:	85 c0                	test   eax,eax
c001c700:	75 0f                	jne    c001c711 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001c702:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c705:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c709:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c70d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c711:	50                   	push   eax
c001c712:	50                   	push   eax
c001c713:	68 bc b9 02 c0       	push   0xc002b9bc
c001c718:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c71c:	50                   	push   eax
c001c71d:	e8 76 41 fe ff       	call   c0000898 <strcmp>
c001c722:	83 c4 10             	add    esp,0x10
c001c725:	85 c0                	test   eax,eax
c001c727:	75 0f                	jne    c001c738 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001c729:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c72c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c730:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c734:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c738:	45                   	inc    ebp
c001c739:	e9 4c ff ff ff       	jmp    c001c68a <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001c73e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c743:	75 10                	jne    c001c755 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001c745:	83 ec 0c             	sub    esp,0xc
c001c748:	68 c4 b9 02 c0       	push   0xc002b9c4
c001c74d:	e8 e7 d6 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c001c752:	83 c4 10             	add    esp,0x10
c001c755:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c75a:	75 10                	jne    c001c76c <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001c75c:	83 ec 0c             	sub    esp,0xc
c001c75f:	68 c4 b9 02 c0       	push   0xc002b9c4
c001c764:	e8 d0 d6 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c001c769:	83 c4 10             	add    esp,0x10
c001c76c:	31 d2                	xor    edx,edx
c001c76e:	50                   	push   eax
c001c76f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c773:	52                   	push   edx
c001c774:	50                   	push   eax
c001c775:	53                   	push   ebx
c001c776:	e8 d3 65 ff ff       	call   c0012d4e <File::seek(unsigned long long)>
c001c77b:	5a                   	pop    edx
c001c77c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c780:	e8 14 2e ff ff       	call   c000f599 <malloc>
c001c785:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c789:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c78d:	31 c9                	xor    ecx,ecx
c001c78f:	5e                   	pop    esi
c001c790:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c792:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c796:	55                   	push   ebp
c001c797:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c79b:	51                   	push   ecx
c001c79c:	52                   	push   edx
c001c79d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c7a1:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c7a5:	53                   	push   ebx
c001c7a6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c7a9:	83 c4 14             	add    esp,0x14
c001c7ac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c7b0:	e8 e4 2d ff ff       	call   c000f599 <malloc>
c001c7b5:	89 c6                	mov    esi,eax
c001c7b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c7b9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c7bc:	56                   	push   esi
c001c7bd:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c7c1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c7c5:	51                   	push   ecx
c001c7c6:	52                   	push   edx
c001c7c7:	53                   	push   ebx
c001c7c8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c7cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c7cf:	8b 15 20 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030e20
c001c7d5:	83 c4 1c             	add    esp,0x1c
c001c7d8:	c1 e8 04             	shr    eax,0x4
c001c7db:	89 04 95 a0 0c 03 c0 	mov    DWORD PTR [edx*4-0x3ffcf360],eax
c001c7e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c7e6:	31 d2                	xor    edx,edx
c001c7e8:	52                   	push   edx
c001c7e9:	50                   	push   eax
c001c7ea:	53                   	push   ebx
c001c7eb:	e8 5e 65 ff ff       	call   c0012d4e <File::seek(unsigned long long)>
c001c7f0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c7f2:	31 d2                	xor    edx,edx
c001c7f4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c7f7:	56                   	push   esi
c001c7f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c7fc:	52                   	push   edx
c001c7fd:	50                   	push   eax
c001c7fe:	53                   	push   ebx
c001c7ff:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c802:	83 c4 14             	add    esp,0x14
c001c805:	53                   	push   ebx
c001c806:	e8 e3 64 ff ff       	call   c0012cee <File::close()>
c001c80b:	5d                   	pop    ebp
c001c80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c810:	e8 94 2d ff ff       	call   c000f5a9 <free>
c001c815:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c818:	e8 8c 2d ff ff       	call   c000f5a9 <free>
c001c81d:	a1 20 0e 03 c0       	mov    eax,ds:0xc0030e20
c001c822:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c826:	8d 50 01             	lea    edx,[eax+0x1]
c001c829:	89 0c 85 a0 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf260],ecx
c001c830:	89 34 85 20 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf2e0],esi
c001c837:	89 15 20 0e 03 c0    	mov    DWORD PTR ds:0xc0030e20,edx
c001c83d:	83 c4 10             	add    esp,0x10
c001c840:	b0 01                	mov    al,0x1
c001c842:	83 c4 5c             	add    esp,0x5c
c001c845:	5b                   	pop    ebx
c001c846:	5e                   	pop    esi
c001c847:	5f                   	pop    edi
c001c848:	5d                   	pop    ebp
c001c849:	c3                   	ret    

c001c84a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c84a:	55                   	push   ebp
c001c84b:	57                   	push   edi
c001c84c:	56                   	push   esi
c001c84d:	53                   	push   ebx
c001c84e:	81 ec 68 03 00 00    	sub    esp,0x368
c001c854:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c85b:	8b 1d 70 0e 03 c0    	mov    ebx,DWORD PTR ds:0xc0030e70
c001c861:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c865:	68 14 01 00 00       	push   0x114
c001c86a:	e8 2a 2d ff ff       	call   c000f599 <malloc>
c001c86f:	83 c4 0c             	add    esp,0xc
c001c872:	89 c5                	mov    ebp,eax
c001c874:	53                   	push   ebx
c001c875:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c87c:	50                   	push   eax
c001c87d:	e8 aa 63 ff ff       	call   c0012c2c <File::File(char const*, Process*)>
c001c882:	5e                   	pop    esi
c001c883:	5f                   	pop    edi
c001c884:	6a 01                	push   0x1
c001c886:	55                   	push   ebp
c001c887:	e8 04 64 ff ff       	call   c0012c90 <File::open(FileOpenMode)>
c001c88c:	83 c4 10             	add    esp,0x10
c001c88f:	85 c0                	test   eax,eax
c001c891:	0f 85 a7 06 00 00    	jne    c001cf3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c897:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c89f:	83 ec 0c             	sub    esp,0xc
c001c8a2:	6a 34                	push   0x34
c001c8a4:	e8 f0 2c ff ff       	call   c000f599 <malloc>
c001c8a9:	5b                   	pop    ebx
c001c8aa:	89 c7                	mov    edi,eax
c001c8ac:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c8b0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c8b3:	53                   	push   ebx
c001c8b4:	57                   	push   edi
c001c8b5:	6a 00                	push   0x0
c001c8b7:	6a 34                	push   0x34
c001c8b9:	55                   	push   ebp
c001c8ba:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c8bd:	83 c4 20             	add    esp,0x20
c001c8c0:	85 c0                	test   eax,eax
c001c8c2:	0f 85 76 06 00 00    	jne    c001cf3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8c8:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c8ce:	0f 85 6a 06 00 00    	jne    c001cf3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8d4:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c8d7:	85 c0                	test   eax,eax
c001c8d9:	0f 84 5f 06 00 00    	je     c001cf3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8df:	31 d2                	xor    edx,edx
c001c8e1:	51                   	push   ecx
c001c8e2:	52                   	push   edx
c001c8e3:	50                   	push   eax
c001c8e4:	55                   	push   ebp
c001c8e5:	e8 64 64 ff ff       	call   c0012d4e <File::seek(unsigned long long)>
c001c8ea:	83 c4 10             	add    esp,0x10
c001c8ed:	85 c0                	test   eax,eax
c001c8ef:	0f 85 49 06 00 00    	jne    c001cf3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8f5:	83 ec 0c             	sub    esp,0xc
c001c8f8:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c8fb:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c8ff:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c903:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c907:	0f af c2             	imul   eax,edx
c001c90a:	50                   	push   eax
c001c90b:	e8 89 2c ff ff       	call   c000f599 <malloc>
c001c910:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c913:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c917:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c91a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c91e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c922:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c926:	0f af c2             	imul   eax,edx
c001c929:	99                   	cdq    
c001c92a:	52                   	push   edx
c001c92b:	50                   	push   eax
c001c92c:	55                   	push   ebp
c001c92d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c930:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c933:	83 c4 20             	add    esp,0x20
c001c936:	85 c0                	test   eax,eax
c001c938:	0f 84 00 06 00 00    	je     c001cf3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c93e:	52                   	push   edx
c001c93f:	31 d2                	xor    edx,edx
c001c941:	52                   	push   edx
c001c942:	50                   	push   eax
c001c943:	55                   	push   ebp
c001c944:	e8 05 64 ff ff       	call   c0012d4e <File::seek(unsigned long long)>
c001c949:	83 c4 10             	add    esp,0x10
c001c94c:	85 c0                	test   eax,eax
c001c94e:	0f 85 ea 05 00 00    	jne    c001cf3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c954:	83 ec 0c             	sub    esp,0xc
c001c957:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c95b:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c95f:	31 f6                	xor    esi,esi
c001c961:	0f af c2             	imul   eax,edx
c001c964:	50                   	push   eax
c001c965:	e8 2f 2c ff ff       	call   c000f599 <malloc>
c001c96a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c96d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c971:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c974:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c978:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c97c:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c980:	0f af c2             	imul   eax,edx
c001c983:	99                   	cdq    
c001c984:	52                   	push   edx
c001c985:	50                   	push   eax
c001c986:	55                   	push   ebp
c001c987:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c98a:	83 c4 20             	add    esp,0x20
c001c98d:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c991:	0f 86 8a 00 00 00    	jbe    c001ca21 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c997:	0f b7 de             	movzx  ebx,si
c001c99a:	c1 e3 05             	shl    ebx,0x5
c001c99d:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001c9a1:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c9a4:	75 75                	jne    c001ca1b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c9a6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c9a9:	31 d2                	xor    edx,edx
c001c9ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c9af:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c9b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c9b6:	50                   	push   eax
c001c9b7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c9ba:	52                   	push   edx
c001c9bb:	50                   	push   eax
c001c9bc:	55                   	push   ebp
c001c9bd:	e8 8c 63 ff ff       	call   c0012d4e <File::seek(unsigned long long)>
c001c9c2:	83 c4 10             	add    esp,0x10
c001c9c5:	85 c0                	test   eax,eax
c001c9c7:	0f 85 71 05 00 00    	jne    c001cf3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c9cd:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c9d4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c9d7:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001c9db:	31 d2                	xor    edx,edx
c001c9dd:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c9e1:	83 ec 0c             	sub    esp,0xc
c001c9e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c9e8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c9ef:	50                   	push   eax
c001c9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c9f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9f8:	52                   	push   edx
c001c9f9:	50                   	push   eax
c001c9fa:	55                   	push   ebp
c001c9fb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9fe:	83 c4 1c             	add    esp,0x1c
c001ca01:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ca04:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001ca07:	50                   	push   eax
c001ca08:	6a 00                	push   0x0
c001ca0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca0e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001ca12:	50                   	push   eax
c001ca13:	e8 38 3d fe ff       	call   c0000750 <memset>
c001ca18:	83 c4 10             	add    esp,0x10
c001ca1b:	46                   	inc    esi
c001ca1c:	e9 6c ff ff ff       	jmp    c001c98d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001ca21:	53                   	push   ebx
c001ca22:	31 db                	xor    ebx,ebx
c001ca24:	68 00 01 00 00       	push   0x100
c001ca29:	6a 00                	push   0x0
c001ca2b:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001ca2f:	50                   	push   eax
c001ca30:	e8 1b 3d fe ff       	call   c0000750 <memset>
c001ca35:	83 c4 0c             	add    esp,0xc
c001ca38:	68 00 01 00 00       	push   0x100
c001ca3d:	6a 00                	push   0x0
c001ca3f:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001ca46:	50                   	push   eax
c001ca47:	e8 04 3d fe ff       	call   c0000750 <memset>
c001ca4c:	83 c4 10             	add    esp,0x10
c001ca4f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ca57:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ca5f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001ca67:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ca6f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001ca77:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001ca7b:	0f 86 30 01 00 00    	jbe    c001cbb1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001ca81:	0f b7 f3             	movzx  esi,bx
c001ca84:	6b f6 28             	imul   esi,esi,0x28
c001ca87:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ca8b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ca8e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ca92:	52                   	push   edx
c001ca93:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ca97:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001ca9b:	8b 06                	mov    eax,DWORD PTR [esi]
c001ca9d:	6b d2 28             	imul   edx,edx,0x28
c001caa0:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001caa4:	31 d2                	xor    edx,edx
c001caa6:	52                   	push   edx
c001caa7:	50                   	push   eax
c001caa8:	55                   	push   ebp
c001caa9:	e8 a0 62 ff ff       	call   c0012d4e <File::seek(unsigned long long)>
c001caae:	83 c4 0c             	add    esp,0xc
c001cab1:	6a 20                	push   0x20
c001cab3:	6a 00                	push   0x0
c001cab5:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cabc:	51                   	push   ecx
c001cabd:	e8 8e 3c fe ff       	call   c0000750 <memset>
c001cac2:	59                   	pop    ecx
c001cac3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cac6:	8d 54 24 58          	lea    edx,[esp+0x58]
c001caca:	52                   	push   edx
c001cacb:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001cad2:	51                   	push   ecx
c001cad3:	6a 00                	push   0x0
c001cad5:	6a 1f                	push   0x1f
c001cad7:	55                   	push   ebp
c001cad8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cadb:	83 c4 1c             	add    esp,0x1c
c001cade:	6a 09                	push   0x9
c001cae0:	68 de b9 02 c0       	push   0xc002b9de
c001cae5:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001caec:	51                   	push   ecx
c001caed:	e8 5a 3b fe ff       	call   c000064c <memcmp>
c001caf2:	83 c4 10             	add    esp,0x10
c001caf5:	85 c0                	test   eax,eax
c001caf7:	75 21                	jne    c001cb1a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001caf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cafd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cb01:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cb05:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cb09:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb0c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cb13:	89 d0                	mov    eax,edx
c001cb15:	40                   	inc    eax
c001cb16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cb1a:	50                   	push   eax
c001cb1b:	6a 09                	push   0x9
c001cb1d:	68 e8 b9 02 c0       	push   0xc002b9e8
c001cb22:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb29:	50                   	push   eax
c001cb2a:	e8 1d 3b fe ff       	call   c000064c <memcmp>
c001cb2f:	83 c4 10             	add    esp,0x10
c001cb32:	85 c0                	test   eax,eax
c001cb34:	75 21                	jne    c001cb57 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001cb36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cb3e:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cb42:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cb46:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb49:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cb50:	89 d0                	mov    eax,edx
c001cb52:	40                   	inc    eax
c001cb53:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cb57:	50                   	push   eax
c001cb58:	50                   	push   eax
c001cb59:	68 b4 b9 02 c0       	push   0xc002b9b4
c001cb5e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb65:	50                   	push   eax
c001cb66:	e8 2d 3d fe ff       	call   c0000898 <strcmp>
c001cb6b:	83 c4 10             	add    esp,0x10
c001cb6e:	85 c0                	test   eax,eax
c001cb70:	75 0f                	jne    c001cb81 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001cb72:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb75:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb7d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cb81:	50                   	push   eax
c001cb82:	50                   	push   eax
c001cb83:	68 bc b9 02 c0       	push   0xc002b9bc
c001cb88:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb8f:	50                   	push   eax
c001cb90:	e8 03 3d fe ff       	call   c0000898 <strcmp>
c001cb95:	83 c4 10             	add    esp,0x10
c001cb98:	85 c0                	test   eax,eax
c001cb9a:	75 0f                	jne    c001cbab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001cb9c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb9f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cba3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cba7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001cbab:	43                   	inc    ebx
c001cbac:	e9 c6 fe ff ff       	jmp    c001ca77 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001cbb1:	31 d2                	xor    edx,edx
c001cbb3:	50                   	push   eax
c001cbb4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cbb8:	52                   	push   edx
c001cbb9:	50                   	push   eax
c001cbba:	55                   	push   ebp
c001cbbb:	e8 8e 61 ff ff       	call   c0012d4e <File::seek(unsigned long long)>
c001cbc0:	58                   	pop    eax
c001cbc1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cbc5:	e8 cf 29 ff ff       	call   c000f599 <malloc>
c001cbca:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cbcd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001cbd1:	31 d2                	xor    edx,edx
c001cbd3:	58                   	pop    eax
c001cbd4:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cbd8:	53                   	push   ebx
c001cbd9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001cbdd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cbe1:	52                   	push   edx
c001cbe2:	50                   	push   eax
c001cbe3:	55                   	push   ebp
c001cbe4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbe7:	83 c4 14             	add    esp,0x14
c001cbea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cbee:	e8 a6 29 ff ff       	call   c000f599 <malloc>
c001cbf3:	31 d2                	xor    edx,edx
c001cbf5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cbf9:	83 c4 0c             	add    esp,0xc
c001cbfc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cc00:	52                   	push   edx
c001cc01:	50                   	push   eax
c001cc02:	55                   	push   ebp
c001cc03:	e8 46 61 ff ff       	call   c0012d4e <File::seek(unsigned long long)>
c001cc08:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cc0b:	31 d2                	xor    edx,edx
c001cc0d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc10:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cc14:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc18:	52                   	push   edx
c001cc19:	50                   	push   eax
c001cc1a:	55                   	push   ebp
c001cc1b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc1e:	83 c4 20             	add    esp,0x20
c001cc21:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cc29:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cc2d:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001cc31:	0f 84 0b 03 00 00    	je     c001cf42 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001cc37:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001cc3e:	31 d2                	xor    edx,edx
c001cc40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc44:	c1 e8 03             	shr    eax,0x3
c001cc47:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001cc4b:	51                   	push   ecx
c001cc4c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc50:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001cc54:	52                   	push   edx
c001cc55:	50                   	push   eax
c001cc56:	55                   	push   ebp
c001cc57:	e8 f2 60 ff ff       	call   c0012d4e <File::seek(unsigned long long)>
c001cc5c:	5b                   	pop    ebx
c001cc5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc61:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001cc68:	e8 2c 29 ff ff       	call   c000f599 <malloc>
c001cc6d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cc70:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cc74:	31 d2                	xor    edx,edx
c001cc76:	5e                   	pop    esi
c001cc77:	8d 44 24 58          	lea    eax,[esp+0x58]
c001cc7b:	50                   	push   eax
c001cc7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc80:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cc84:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001cc8b:	52                   	push   edx
c001cc8c:	50                   	push   eax
c001cc8d:	55                   	push   ebp
c001cc8e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc91:	83 c4 20             	add    esp,0x20
c001cc94:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cc9c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001cca0:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001cca4:	0f 8d 7c 02 00 00    	jge    c001cf26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001ccaa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ccae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ccb2:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001ccb7:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001ccba:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001ccbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ccc2:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001ccc6:	89 d8                	mov    eax,ebx
c001ccc8:	c1 e8 08             	shr    eax,0x8
c001cccb:	89 c6                	mov    esi,eax
c001cccd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ccd1:	c1 e6 04             	shl    esi,0x4
c001ccd4:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001ccd8:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001ccdb:	85 d2                	test   edx,edx
c001ccdd:	0f 85 bf 00 00 00    	jne    c001cda2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cce3:	83 ec 0c             	sub    esp,0xc
c001cce6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ccea:	03 06                	add    eax,DWORD PTR [esi]
c001ccec:	50                   	push   eax
c001cced:	e8 4b f8 ff ff       	call   c001c53d <Thr::getAddressOfKernelSymbol(char const*)>
c001ccf2:	83 c4 10             	add    esp,0x10
c001ccf5:	89 c2                	mov    edx,eax
c001ccf7:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001ccfc:	85 c0                	test   eax,eax
c001ccfe:	0f 85 9e 00 00 00    	jne    c001cda2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cd04:	83 ec 0c             	sub    esp,0xc
c001cd07:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd0b:	03 06                	add    eax,DWORD PTR [esi]
c001cd0d:	50                   	push   eax
c001cd0e:	e8 2c 18 ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001cd13:	83 c4 10             	add    esp,0x10
c001cd16:	89 c2                	mov    edx,eax
c001cd18:	85 c0                	test   eax,eax
c001cd1a:	0f 85 82 00 00 00    	jne    c001cda2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cd20:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001cd24:	50                   	push   eax
c001cd25:	50                   	push   eax
c001cd26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd2a:	03 06                	add    eax,DWORD PTR [esi]
c001cd2c:	50                   	push   eax
c001cd2d:	68 f2 b9 02 c0       	push   0xc002b9f2
c001cd32:	e8 96 59 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c001cd37:	58                   	pop    eax
c001cd38:	5a                   	pop    edx
c001cd39:	68 0c ba 02 c0       	push   0xc002ba0c
c001cd3e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd45:	50                   	push   eax
c001cd46:	e8 c1 3a fe ff       	call   c000080c <strcpy>
c001cd4b:	59                   	pop    ecx
c001cd4c:	58                   	pop    eax
c001cd4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd51:	03 06                	add    eax,DWORD PTR [esi]
c001cd53:	50                   	push   eax
c001cd54:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd5b:	50                   	push   eax
c001cd5c:	e8 eb 3b fe ff       	call   c000094c <strcat>
c001cd61:	58                   	pop    eax
c001cd62:	5a                   	pop    edx
c001cd63:	68 a2 ba 02 c0       	push   0xc002baa2
c001cd68:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd6f:	50                   	push   eax
c001cd70:	e8 d7 3b fe ff       	call   c000094c <strcat>
c001cd75:	83 c4 10             	add    esp,0x10
c001cd78:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cd7d:	0f 84 5d 01 00 00    	je     c001cee0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cd83:	83 ec 0c             	sub    esp,0xc
c001cd86:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd8d:	50                   	push   eax
c001cd8e:	e8 a6 d0 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c001cd93:	83 c4 10             	add    esp,0x10
c001cd96:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001cd9a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cd9e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001cda2:	80 fb 01             	cmp    bl,0x1
c001cda5:	0f 85 88 00 00 00    	jne    c001ce33 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001cdab:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001cdb2:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cdb6:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001cdba:	01 ce                	add    esi,ecx
c001cdbc:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cdc2:	0f 94 c0             	sete   al
c001cdc5:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cdcb:	0f 94 c3             	sete   bl
c001cdce:	09 c3                	or     ebx,eax
c001cdd0:	8b 06                	mov    eax,DWORD PTR [esi]
c001cdd2:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cdd7:	74 41                	je     c001ce1a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001cdd9:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001cddc:	84 db                	test   bl,bl
c001cdde:	75 15                	jne    c001cdf5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001cde0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cde4:	66 83 f8 0c          	cmp    ax,0xc
c001cde8:	76 05                	jbe    c001cdef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001cdea:	b8 0c 00 00 00       	mov    eax,0xc
c001cdef:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cdf3:	76 37                	jbe    c001ce2c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cdf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001cdf9:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cdfe:	0f 84 dc 00 00 00    	je     c001cee0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001ce04:	83 ec 0c             	sub    esp,0xc
c001ce07:	68 23 ba 02 c0       	push   0xc002ba23
c001ce0c:	e8 28 d0 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c001ce11:	83 c4 10             	add    esp,0x10
c001ce14:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ce18:	eb 12                	jmp    c001ce2c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ce1a:	01 c1                	add    ecx,eax
c001ce1c:	84 db                	test   bl,bl
c001ce1e:	75 0c                	jne    c001ce2c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ce20:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce24:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001ce28:	77 02                	ja     c001ce2c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ce2a:	01 d1                	add    ecx,edx
c001ce2c:	89 0e                	mov    DWORD PTR [esi],ecx
c001ce2e:	e9 ea 00 00 00       	jmp    c001cf1d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001ce33:	80 fb 02             	cmp    bl,0x2
c001ce36:	75 7c                	jne    c001ceb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001ce38:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001ce3f:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001ce43:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001ce47:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001ce4d:	74 20                	je     c001ce6f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001ce4f:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001ce55:	74 18                	je     c001ce6f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001ce57:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce5b:	b9 0a 00 00 00       	mov    ecx,0xa
c001ce60:	66 83 f8 0e          	cmp    ax,0xe
c001ce64:	77 03                	ja     c001ce69 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001ce66:	8d 48 fc             	lea    ecx,[eax-0x4]
c001ce69:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001ce6d:	76 1f                	jbe    c001ce8e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001ce6f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001ce73:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ce78:	74 66                	je     c001cee0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001ce7a:	83 ec 0c             	sub    esp,0xc
c001ce7d:	68 3f ba 02 c0       	push   0xc002ba3f
c001ce82:	e8 b2 cf ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c001ce87:	83 c4 10             	add    esp,0x10
c001ce8a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ce8e:	8b 06                	mov    eax,DWORD PTR [esi]
c001ce90:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001ce95:	74 13                	je     c001ceaa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001ce97:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ce9b:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001cea2:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001cea6:	01 c8                	add    eax,ecx
c001cea8:	eb 04                	jmp    c001ceae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001ceaa:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001ceae:	01 c2                	add    edx,eax
c001ceb0:	89 16                	mov    DWORD PTR [esi],edx
c001ceb2:	eb 69                	jmp    c001cf1d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001ceb4:	0f b6 db             	movzx  ebx,bl
c001ceb7:	50                   	push   eax
c001ceb8:	50                   	push   eax
c001ceb9:	53                   	push   ebx
c001ceba:	68 5b ba 02 c0       	push   0xc002ba5b
c001cebf:	e8 09 58 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c001cec4:	83 c4 10             	add    esp,0x10
c001cec7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cecc:	74 12                	je     c001cee0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cece:	83 ec 0c             	sub    esp,0xc
c001ced1:	68 66 ba 02 c0       	push   0xc002ba66
c001ced6:	e8 5e cf ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c001cedb:	83 c4 10             	add    esp,0x10
c001cede:	eb 3d                	jmp    c001cf1d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cee0:	83 ec 0c             	sub    esp,0xc
c001cee3:	55                   	push   ebp
c001cee4:	e8 05 5e ff ff       	call   c0012cee <File::close()>
c001cee9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ceec:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ceef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cef2:	59                   	pop    ecx
c001cef3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cef7:	e8 ad 26 ff ff       	call   c000f5a9 <free>
c001cefc:	5b                   	pop    ebx
c001cefd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf01:	e8 a3 26 ff ff       	call   c000f5a9 <free>
c001cf06:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf09:	e8 9b 26 ff ff       	call   c000f5a9 <free>
c001cf0e:	5e                   	pop    esi
c001cf0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf13:	e8 91 26 ff ff       	call   c000f5a9 <free>
c001cf18:	83 c4 10             	add    esp,0x10
c001cf1b:	eb 21                	jmp    c001cf3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cf1d:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001cf21:	e9 76 fd ff ff       	jmp    c001cc9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001cf26:	83 ec 0c             	sub    esp,0xc
c001cf29:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf2d:	e8 77 26 ff ff       	call   c000f5a9 <free>
c001cf32:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001cf36:	83 c4 10             	add    esp,0x10
c001cf39:	e9 eb fc ff ff       	jmp    c001cc29 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001cf3e:	31 c0                	xor    eax,eax
c001cf40:	eb 33                	jmp    c001cf75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001cf42:	83 ec 0c             	sub    esp,0xc
c001cf45:	55                   	push   ebp
c001cf46:	e8 a3 5d ff ff       	call   c0012cee <File::close()>
c001cf4b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cf4e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf51:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cf54:	58                   	pop    eax
c001cf55:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf59:	e8 4b 26 ff ff       	call   c000f5a9 <free>
c001cf5e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf61:	e8 43 26 ff ff       	call   c000f5a9 <free>
c001cf66:	5a                   	pop    edx
c001cf67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf6b:	e8 39 26 ff ff       	call   c000f5a9 <free>
c001cf70:	83 c4 10             	add    esp,0x10
c001cf73:	b0 01                	mov    al,0x1
c001cf75:	81 c4 5c 03 00 00    	add    esp,0x35c
c001cf7b:	5b                   	pop    ebx
c001cf7c:	5e                   	pop    esi
c001cf7d:	5f                   	pop    edi
c001cf7e:	5d                   	pop    ebp
c001cf7f:	c3                   	ret    

c001cf80 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001cf80:	56                   	push   esi
c001cf81:	31 d2                	xor    edx,edx
c001cf83:	53                   	push   ebx
c001cf84:	8b 1d 80 06 03 c0    	mov    ebx,DWORD PTR ds:0xc0030680
c001cf8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cf8e:	39 d3                	cmp    ebx,edx
c001cf90:	7e 1b                	jle    c001cfad <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001cf92:	8b 04 95 a0 08 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcf760]
c001cf99:	39 c8                	cmp    eax,ecx
c001cf9b:	77 0d                	ja     c001cfaa <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001cf9d:	8b 34 95 a0 06 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcf960]
c001cfa4:	01 c6                	add    esi,eax
c001cfa6:	39 ce                	cmp    esi,ecx
c001cfa8:	77 05                	ja     c001cfaf <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001cfaa:	42                   	inc    edx
c001cfab:	eb e1                	jmp    c001cf8e <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001cfad:	31 c0                	xor    eax,eax
c001cfaf:	5b                   	pop    ebx
c001cfb0:	5e                   	pop    esi
c001cfb1:	c3                   	ret    

c001cfb2 <Thr::getDriverNameFromAddress(unsigned long)>:
c001cfb2:	53                   	push   ebx
c001cfb3:	31 c0                	xor    eax,eax
c001cfb5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cfb9:	8b 1d 80 06 03 c0    	mov    ebx,DWORD PTR ds:0xc0030680
c001cfbf:	39 c3                	cmp    ebx,eax
c001cfc1:	7e 22                	jle    c001cfe5 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001cfc3:	8b 14 85 a0 08 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf760]
c001cfca:	39 ca                	cmp    edx,ecx
c001cfcc:	77 14                	ja     c001cfe2 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cfce:	03 14 85 a0 06 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcf960]
c001cfd5:	39 ca                	cmp    edx,ecx
c001cfd7:	76 09                	jbe    c001cfe2 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cfd9:	8b 04 85 a0 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf560]
c001cfe0:	eb 05                	jmp    c001cfe7 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001cfe2:	40                   	inc    eax
c001cfe3:	eb da                	jmp    c001cfbf <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001cfe5:	31 c0                	xor    eax,eax
c001cfe7:	5b                   	pop    ebx
c001cfe8:	c3                   	ret    

c001cfe9 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001cfe9:	53                   	push   ebx
c001cfea:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001cfee:	53                   	push   ebx
c001cfef:	e8 8c ff ff ff       	call   c001cf80 <Thr::getDriverBaseFromAddress(unsigned long)>
c001cff4:	5a                   	pop    edx
c001cff5:	31 d2                	xor    edx,edx
c001cff7:	85 c0                	test   eax,eax
c001cff9:	74 04                	je     c001cfff <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001cffb:	89 da                	mov    edx,ebx
c001cffd:	29 c2                	sub    edx,eax
c001cfff:	89 d0                	mov    eax,edx
c001d001:	5b                   	pop    ebx
c001d002:	c3                   	ret    

c001d003 <Thr::loadDLL(char const*, bool)>:
c001d003:	55                   	push   ebp
c001d004:	57                   	push   edi
c001d005:	56                   	push   esi
c001d006:	53                   	push   ebx
c001d007:	81 ec 34 01 00 00    	sub    esp,0x134
c001d00d:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d014:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001d01b:	56                   	push   esi
c001d01c:	68 7e ba 02 c0       	push   0xc002ba7e
c001d021:	e8 a7 56 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c001d026:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d02d:	e8 67 25 ff ff       	call   c000f599 <malloc>
c001d032:	83 c4 0c             	add    esp,0xc
c001d035:	89 c3                	mov    ebx,eax
c001d037:	ff 35 70 0e 03 c0    	push   DWORD PTR ds:0xc0030e70
c001d03d:	56                   	push   esi
c001d03e:	50                   	push   eax
c001d03f:	e8 e8 5b ff ff       	call   c0012c2c <File::File(char const*, Process*)>
c001d044:	83 c4 10             	add    esp,0x10
c001d047:	85 db                	test   ebx,ebx
c001d049:	75 3c                	jne    c001d087 <Thr::loadDLL(char const*, bool)+0x84>
c001d04b:	89 f8                	mov    eax,edi
c001d04d:	84 c0                	test   al,al
c001d04f:	0f 84 cc 01 00 00    	je     c001d221 <Thr::loadDLL(char const*, bool)+0x21e>
c001d055:	55                   	push   ebp
c001d056:	55                   	push   ebp
c001d057:	68 8f ba 02 c0       	push   0xc002ba8f
c001d05c:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d060:	55                   	push   ebp
c001d061:	e8 a6 37 fe ff       	call   c000080c <strcpy>
c001d066:	58                   	pop    eax
c001d067:	5a                   	pop    edx
c001d068:	56                   	push   esi
c001d069:	55                   	push   ebp
c001d06a:	e8 dd 38 fe ff       	call   c000094c <strcat>
c001d06f:	59                   	pop    ecx
c001d070:	58                   	pop    eax
c001d071:	68 a2 ba 02 c0       	push   0xc002baa2
c001d076:	55                   	push   ebp
c001d077:	e8 d0 38 fe ff       	call   c000094c <strcat>
c001d07c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d07f:	e8 b5 cd ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c001d084:	83 c4 10             	add    esp,0x10
c001d087:	51                   	push   ecx
c001d088:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d08c:	50                   	push   eax
c001d08d:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d091:	50                   	push   eax
c001d092:	53                   	push   ebx
c001d093:	e8 a4 5e ff ff       	call   c0012f3c <File::stat(unsigned long long*, bool*)>
c001d098:	83 c4 10             	add    esp,0x10
c001d09b:	85 db                	test   ebx,ebx
c001d09d:	74 0c                	je     c001d0ab <Thr::loadDLL(char const*, bool)+0xa8>
c001d09f:	83 ec 0c             	sub    esp,0xc
c001d0a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d0a4:	53                   	push   ebx
c001d0a5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d0a8:	83 c4 10             	add    esp,0x10
c001d0ab:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d0b0:	75 0a                	jne    c001d0bc <Thr::loadDLL(char const*, bool)+0xb9>
c001d0b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d0b6:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d0ba:	75 3c                	jne    c001d0f8 <Thr::loadDLL(char const*, bool)+0xf5>
c001d0bc:	89 f8                	mov    eax,edi
c001d0be:	84 c0                	test   al,al
c001d0c0:	0f 84 43 01 00 00    	je     c001d209 <Thr::loadDLL(char const*, bool)+0x206>
c001d0c6:	51                   	push   ecx
c001d0c7:	51                   	push   ecx
c001d0c8:	68 8f ba 02 c0       	push   0xc002ba8f
c001d0cd:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d0d1:	53                   	push   ebx
c001d0d2:	e8 35 37 fe ff       	call   c000080c <strcpy>
c001d0d7:	5d                   	pop    ebp
c001d0d8:	58                   	pop    eax
c001d0d9:	56                   	push   esi
c001d0da:	53                   	push   ebx
c001d0db:	e8 6c 38 fe ff       	call   c000094c <strcat>
c001d0e0:	58                   	pop    eax
c001d0e1:	5a                   	pop    edx
c001d0e2:	68 a2 ba 02 c0       	push   0xc002baa2
c001d0e7:	53                   	push   ebx
c001d0e8:	e8 5f 38 fe ff       	call   c000094c <strcat>
c001d0ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0f0:	e8 44 cd ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c001d0f5:	83 c4 10             	add    esp,0x10
c001d0f8:	52                   	push   edx
c001d0f9:	6a 03                	push   0x3
c001d0fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d103:	05 ff 0f 00 00       	add    eax,0xfff
c001d108:	83 d2 00             	adc    edx,0x0
c001d10b:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d10f:	50                   	push   eax
c001d110:	ff 35 90 da 02 c0    	push   DWORD PTR ds:0xc002da90
c001d116:	e8 c5 49 ff ff       	call   c0011ae0 <VAS::allocatePages(int, int)>
c001d11b:	59                   	pop    ecx
c001d11c:	89 c3                	mov    ebx,eax
c001d11e:	5d                   	pop    ebp
c001d11f:	50                   	push   eax
c001d120:	68 82 a0 02 c0       	push   0xc002a082
c001d125:	e8 a3 55 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c001d12a:	89 34 24             	mov    DWORD PTR [esp],esi
c001d12d:	e8 3a 36 fe ff       	call   c000076c <strlen>
c001d132:	8b 2d 80 06 03 c0    	mov    ebp,DWORD PTR ds:0xc0030680
c001d138:	40                   	inc    eax
c001d139:	89 04 24             	mov    DWORD PTR [esp],eax
c001d13c:	e8 58 24 ff ff       	call   c000f599 <malloc>
c001d141:	89 04 ad a0 0a 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcf560],eax
c001d148:	58                   	pop    eax
c001d149:	a1 80 06 03 c0       	mov    eax,ds:0xc0030680
c001d14e:	5a                   	pop    edx
c001d14f:	56                   	push   esi
c001d150:	ff 34 85 a0 0a 03 c0 	push   DWORD PTR [eax*4-0x3ffcf560]
c001d157:	e8 b0 36 fe ff       	call   c000080c <strcpy>
c001d15c:	a1 80 06 03 c0       	mov    eax,ds:0xc0030680
c001d161:	8d 50 01             	lea    edx,[eax+0x1]
c001d164:	89 1c 85 a0 08 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf760],ebx
c001d16b:	89 15 80 06 03 c0    	mov    DWORD PTR ds:0xc0030680,edx
c001d171:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d175:	83 c4 0c             	add    esp,0xc
c001d178:	89 14 85 a0 06 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf960],edx
c001d17f:	6a 01                	push   0x1
c001d181:	53                   	push   ebx
c001d182:	56                   	push   esi
c001d183:	e8 c2 f6 ff ff       	call   c001c84a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d188:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d18c:	83 c4 10             	add    esp,0x10
c001d18f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d194:	0f 85 83 00 00 00    	jne    c001d21d <Thr::loadDLL(char const*, bool)+0x21a>
c001d19a:	89 f8                	mov    eax,edi
c001d19c:	84 c0                	test   al,al
c001d19e:	74 6d                	je     c001d20d <Thr::loadDLL(char const*, bool)+0x20a>
c001d1a0:	83 ec 0c             	sub    esp,0xc
c001d1a3:	68 a4 ba 02 c0       	push   0xc002baa4
c001d1a8:	e8 8c cc ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c001d1ad:	83 c4 10             	add    esp,0x10
c001d1b0:	eb 5b                	jmp    c001d20d <Thr::loadDLL(char const*, bool)+0x20a>
c001d1b2:	89 ee                	mov    esi,ebp
c001d1b4:	50                   	push   eax
c001d1b5:	c1 e6 0c             	shl    esi,0xc
c001d1b8:	50                   	push   eax
c001d1b9:	01 de                	add    esi,ebx
c001d1bb:	56                   	push   esi
c001d1bc:	ff 35 90 da 02 c0    	push   DWORD PTR ds:0xc002da90
c001d1c2:	e8 81 44 ff ff       	call   c0011648 <VAS::getPageTableEntry(unsigned long)>
c001d1c7:	83 c4 10             	add    esp,0x10
c001d1ca:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d1cd:	75 0c                	jne    c001d1db <Thr::loadDLL(char const*, bool)+0x1d8>
c001d1cf:	83 ec 0c             	sub    esp,0xc
c001d1d2:	56                   	push   esi
c001d1d3:	e8 28 27 ff ff       	call   c000f900 <Phys::freePage(unsigned long)>
c001d1d8:	83 c4 10             	add    esp,0x10
c001d1db:	45                   	inc    ebp
c001d1dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d1e0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d1e4:	05 ff 0f 00 00       	add    eax,0xfff
c001d1e9:	bf 00 00 00 00       	mov    edi,0x0
c001d1ee:	83 d2 00             	adc    edx,0x0
c001d1f1:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d1f5:	c1 ea 0c             	shr    edx,0xc
c001d1f8:	39 c5                	cmp    ebp,eax
c001d1fa:	89 d1                	mov    ecx,edx
c001d1fc:	89 f8                	mov    eax,edi
c001d1fe:	19 c8                	sbb    eax,ecx
c001d200:	72 b0                	jb     c001d1b2 <Thr::loadDLL(char const*, bool)+0x1af>
c001d202:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d207:	75 18                	jne    c001d221 <Thr::loadDLL(char const*, bool)+0x21e>
c001d209:	31 db                	xor    ebx,ebx
c001d20b:	eb 14                	jmp    c001d221 <Thr::loadDLL(char const*, bool)+0x21e>
c001d20d:	83 ec 0c             	sub    esp,0xc
c001d210:	68 c3 ba 02 c0       	push   0xc002bac3
c001d215:	e8 1f cc ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c001d21a:	83 c4 10             	add    esp,0x10
c001d21d:	31 ed                	xor    ebp,ebp
c001d21f:	eb bb                	jmp    c001d1dc <Thr::loadDLL(char const*, bool)+0x1d9>
c001d221:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d227:	89 d8                	mov    eax,ebx
c001d229:	5b                   	pop    ebx
c001d22a:	5e                   	pop    esi
c001d22b:	5f                   	pop    edi
c001d22c:	5d                   	pop    ebp
c001d22d:	c3                   	ret    

c001d22e <Thr::executeDLL(unsigned long, void*)>:
c001d22e:	56                   	push   esi
c001d22f:	53                   	push   ebx
c001d230:	52                   	push   edx
c001d231:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d235:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d239:	85 db                	test   ebx,ebx
c001d23b:	75 10                	jne    c001d24d <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d23d:	83 ec 0c             	sub    esp,0xc
c001d240:	68 df ba 02 c0       	push   0xc002badf
c001d245:	e8 ef cb ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c001d24a:	83 c4 10             	add    esp,0x10
c001d24d:	50                   	push   eax
c001d24e:	50                   	push   eax
c001d24f:	53                   	push   ebx
c001d250:	68 09 bb 02 c0       	push   0xc002bb09
c001d255:	e8 73 54 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c001d25a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d25e:	89 d8                	mov    eax,ebx
c001d260:	83 c4 14             	add    esp,0x14
c001d263:	5b                   	pop    ebx
c001d264:	5e                   	pop    esi
c001d265:	ff e0                	jmp    eax
c001d267:	90                   	nop

c001d268 <userModeEntryPoint(void*)>:
c001d268:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001d26d:	48                   	dec    eax
c001d26e:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001d273:	75 01                	jne    c001d276 <userModeEntryPoint(void*)+0xe>
c001d275:	fb                   	sti    
c001d276:	fb                   	sti    
c001d277:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d27c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d27f:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d285:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d289:	e9 9c 30 fe ff       	jmp    c000032a <goToUsermode>

c001d28e <changeTSS>:
c001d28e:	83 ec 14             	sub    esp,0x14
c001d291:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d296:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d299:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d29e:	c1 e2 15             	shl    edx,0x15
c001d2a1:	29 d0                	sub    eax,edx
c001d2a3:	50                   	push   eax
c001d2a4:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c001d2a9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d2af:	05 7c 11 00 00       	add    eax,0x117c
c001d2b4:	50                   	push   eax
c001d2b5:	e8 bc 38 ff ff       	call   c0010b76 <TSS::setESP(unsigned long)>
c001d2ba:	83 c4 1c             	add    esp,0x1c
c001d2bd:	c3                   	ret    

c001d2be <switchToThread(ThreadControlBlock*)>:
c001d2be:	57                   	push   edi
c001d2bf:	a1 44 0e 03 c0       	mov    eax,ds:0xc0030e44
c001d2c4:	56                   	push   esi
c001d2c5:	85 c0                	test   eax,eax
c001d2c7:	53                   	push   ebx
c001d2c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d2cc:	0f 85 88 00 00 00    	jne    c001d35a <switchToThread(ThreadControlBlock*)+0x9c>
c001d2d2:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d2d5:	3c ff                	cmp    al,0xff
c001d2d7:	74 7d                	je     c001d356 <switchToThread(ThreadControlBlock*)+0x98>
c001d2d9:	0f b6 d0             	movzx  edx,al
c001d2dc:	b8 84 03 00 00       	mov    eax,0x384
c001d2e1:	29 d0                	sub    eax,edx
c001d2e3:	c1 e0 10             	shl    eax,0x10
c001d2e6:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d2e9:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d2ec:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c001d2f1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d2f7:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d2fe:	74 4a                	je     c001d34a <switchToThread(ThreadControlBlock*)+0x8c>
c001d300:	0f 31                	rdtsc  
c001d302:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c001d307:	89 c6                	mov    esi,eax
c001d309:	89 d7                	mov    edi,edx
c001d30b:	2b 35 78 0e 03 c0    	sub    esi,DWORD PTR ds:0xc0030e78
c001d311:	89 15 8c 0e 03 c0    	mov    DWORD PTR ds:0xc0030e8c,edx
c001d317:	1b 3d 7c 0e 03 c0    	sbb    edi,DWORD PTR ds:0xc0030e7c
c001d31d:	89 35 80 0e 03 c0    	mov    DWORD PTR ds:0xc0030e80,esi
c001d323:	a3 78 0e 03 c0       	mov    ds:0xc0030e78,eax
c001d328:	89 3d 84 0e 03 c0    	mov    DWORD PTR ds:0xc0030e84,edi
c001d32e:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d334:	89 15 7c 0e 03 c0    	mov    DWORD PTR ds:0xc0030e7c,edx
c001d33a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d33d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d340:	01 c6                	add    esi,eax
c001d342:	11 d7                	adc    edi,edx
c001d344:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d347:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d34a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d34e:	5b                   	pop    ebx
c001d34f:	5e                   	pop    esi
c001d350:	5f                   	pop    edi
c001d351:	e9 0c 30 fe ff       	jmp    c0000362 <switchToThreadASM>
c001d356:	31 c0                	xor    eax,eax
c001d358:	eb 8f                	jmp    c001d2e9 <switchToThread(ThreadControlBlock*)+0x2b>
c001d35a:	5b                   	pop    ebx
c001d35b:	c7 05 40 0e 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030e40,0x1
c001d365:	5e                   	pop    esi
c001d366:	5f                   	pop    edi
c001d367:	c3                   	ret    

c001d368 <Process::addArgs(char**)>:
c001d368:	57                   	push   edi
c001d369:	56                   	push   esi
c001d36a:	53                   	push   ebx
c001d36b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d36f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d373:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d37d:	85 ff                	test   edi,edi
c001d37f:	74 3d                	je     c001d3be <Process::addArgs(char**)+0x56>
c001d381:	8b 07                	mov    eax,DWORD PTR [edi]
c001d383:	85 c0                	test   eax,eax
c001d385:	74 37                	je     c001d3be <Process::addArgs(char**)+0x56>
c001d387:	31 db                	xor    ebx,ebx
c001d389:	83 ec 0c             	sub    esp,0xc
c001d38c:	50                   	push   eax
c001d38d:	e8 da 33 fe ff       	call   c000076c <strlen>
c001d392:	40                   	inc    eax
c001d393:	89 04 24             	mov    DWORD PTR [esp],eax
c001d396:	e8 fe 21 ff ff       	call   c000f599 <malloc>
c001d39b:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d3a2:	5a                   	pop    edx
c001d3a3:	59                   	pop    ecx
c001d3a4:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d3a7:	43                   	inc    ebx
c001d3a8:	50                   	push   eax
c001d3a9:	e8 5e 34 fe ff       	call   c000080c <strcpy>
c001d3ae:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d3b4:	83 c4 10             	add    esp,0x10
c001d3b7:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d3ba:	85 c0                	test   eax,eax
c001d3bc:	75 cb                	jne    c001d389 <Process::addArgs(char**)+0x21>
c001d3be:	5b                   	pop    ebx
c001d3bf:	5e                   	pop    esi
c001d3c0:	5f                   	pop    edi
c001d3c1:	c3                   	ret    

c001d3c2 <Process::Process(char const*, Process*, char**)>:
c001d3c2:	56                   	push   esi
c001d3c3:	53                   	push   ebx
c001d3c4:	83 ec 14             	sub    esp,0x14
c001d3c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3cb:	05 0c 02 00 00       	add    eax,0x20c
c001d3d0:	bb 07 00 00 00       	mov    ebx,0x7
c001d3d5:	89 c6                	mov    esi,eax
c001d3d7:	85 db                	test   ebx,ebx
c001d3d9:	78 12                	js     c001d3ed <Process::Process(char const*, Process*, char**)+0x2b>
c001d3db:	83 ec 0c             	sub    esp,0xc
c001d3de:	56                   	push   esi
c001d3df:	e8 a2 b6 00 00       	call   c0028a86 <ThreadControlBlock::ThreadControlBlock()>
c001d3e4:	83 c4 10             	add    esp,0x10
c001d3e7:	83 c6 63             	add    esi,0x63
c001d3ea:	4b                   	dec    ebx
c001d3eb:	eb ea                	jmp    c001d3d7 <Process::Process(char const*, Process*, char**)+0x15>
c001d3ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3f1:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d3f8:	83 ec 0c             	sub    esp,0xc
c001d3fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d3ff:	e8 be c8 ff ff       	call   c0019cc2 <Krnl::newProcessEnv(Process*)>
c001d404:	83 c4 10             	add    esp,0x10
c001d407:	89 c2                	mov    edx,eax
c001d409:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d40d:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d413:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d417:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d420:	a1 b0 ce 02 c0       	mov    eax,ds:0xc002ceb0
c001d425:	8d 50 01             	lea    edx,[eax+0x1]
c001d428:	89 15 b0 ce 02 c0    	mov    DWORD PTR ds:0xc002ceb0,edx
c001d42e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d432:	89 02                	mov    DWORD PTR [edx],eax
c001d434:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d43c:	83 ec 0c             	sub    esp,0xc
c001d43f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d443:	e8 51 21 ff ff       	call   c000f599 <malloc>
c001d448:	83 c4 10             	add    esp,0x10
c001d44b:	89 c3                	mov    ebx,eax
c001d44d:	83 ec 08             	sub    esp,0x8
c001d450:	6a 00                	push   0x0
c001d452:	53                   	push   ebx
c001d453:	e8 30 4a ff ff       	call   c0011e88 <VAS::VAS(bool)>
c001d458:	83 c4 10             	add    esp,0x10
c001d45b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d45f:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d465:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d469:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d473:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d477:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d47b:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d481:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d485:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d48b:	85 c0                	test   eax,eax
c001d48d:	74 42                	je     c001d4d1 <Process::Process(char const*, Process*, char**)+0x10f>
c001d48f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d493:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d499:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d49f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4a3:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d4a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4ad:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d4b3:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d4b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4bd:	05 0c 01 00 00       	add    eax,0x10c
c001d4c2:	83 ec 08             	sub    esp,0x8
c001d4c5:	52                   	push   edx
c001d4c6:	50                   	push   eax
c001d4c7:	e8 40 33 fe ff       	call   c000080c <strcpy>
c001d4cc:	83 c4 10             	add    esp,0x10
c001d4cf:	eb 63                	jmp    c001d534 <Process::Process(char const*, Process*, char**)+0x172>
c001d4d1:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001d4d9:	83 ec 0c             	sub    esp,0xc
c001d4dc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d4e0:	e8 b4 20 ff ff       	call   c000f599 <malloc>
c001d4e5:	83 c4 10             	add    esp,0x10
c001d4e8:	89 c3                	mov    ebx,eax
c001d4ea:	83 ec 08             	sub    esp,0x8
c001d4ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d4f1:	53                   	push   ebx
c001d4f2:	e8 93 33 ff ff       	call   c001088a <VgaText::VgaText(char const*)>
c001d4f7:	83 c4 10             	add    esp,0x10
c001d4fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4fe:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d504:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d508:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d50e:	83 ec 0c             	sub    esp,0xc
c001d511:	50                   	push   eax
c001d512:	e8 32 2b ff ff       	call   c0010049 <addToTerminalCycle(VgaText*)>
c001d517:	83 c4 10             	add    esp,0x10
c001d51a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d51e:	05 0c 01 00 00       	add    eax,0x10c
c001d523:	83 ec 08             	sub    esp,0x8
c001d526:	68 28 bb 02 c0       	push   0xc002bb28
c001d52b:	50                   	push   eax
c001d52c:	e8 db 32 fe ff       	call   c000080c <strcpy>
c001d531:	83 c4 10             	add    esp,0x10
c001d534:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d538:	83 c0 0c             	add    eax,0xc
c001d53b:	83 ec 08             	sub    esp,0x8
c001d53e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d542:	50                   	push   eax
c001d543:	e8 c4 32 fe ff       	call   c000080c <strcpy>
c001d548:	83 c4 10             	add    esp,0x10
c001d54b:	83 ec 08             	sub    esp,0x8
c001d54e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d552:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d556:	e8 0d fe ff ff       	call   c001d368 <Process::addArgs(char**)>
c001d55b:	83 c4 10             	add    esp,0x10
c001d55e:	83 ec 08             	sub    esp,0x8
c001d561:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d565:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d569:	e8 a6 ed ff ff       	call   c001c314 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d56e:	83 c4 10             	add    esp,0x10
c001d571:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d575:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d579:	83 f0 01             	xor    eax,0x1
c001d57c:	88 c2                	mov    dl,al
c001d57e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d582:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d588:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d58d:	83 ec 08             	sub    esp,0x8
c001d590:	50                   	push   eax
c001d591:	68 80 bb 02 c0       	push   0xc002bb80
c001d596:	e8 32 51 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c001d59b:	83 c4 10             	add    esp,0x10
c001d59e:	90                   	nop
c001d59f:	83 c4 14             	add    esp,0x14
c001d5a2:	5b                   	pop    ebx
c001d5a3:	5e                   	pop    esi
c001d5a4:	c3                   	ret    
c001d5a5:	90                   	nop

c001d5a6 <Process::Process(bool, char const*, Process*, char**)>:
c001d5a6:	56                   	push   esi
c001d5a7:	53                   	push   ebx
c001d5a8:	83 ec 24             	sub    esp,0x24
c001d5ab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d5af:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d5b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5b7:	05 0c 02 00 00       	add    eax,0x20c
c001d5bc:	bb 07 00 00 00       	mov    ebx,0x7
c001d5c1:	89 c6                	mov    esi,eax
c001d5c3:	85 db                	test   ebx,ebx
c001d5c5:	78 12                	js     c001d5d9 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d5c7:	83 ec 0c             	sub    esp,0xc
c001d5ca:	56                   	push   esi
c001d5cb:	e8 b6 b4 00 00       	call   c0028a86 <ThreadControlBlock::ThreadControlBlock()>
c001d5d0:	83 c4 10             	add    esp,0x10
c001d5d3:	83 c6 63             	add    esi,0x63
c001d5d6:	4b                   	dec    ebx
c001d5d7:	eb ea                	jmp    c001d5c3 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d5d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5dd:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d5e4:	83 ec 0c             	sub    esp,0xc
c001d5e7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d5eb:	e8 d2 c6 ff ff       	call   c0019cc2 <Krnl::newProcessEnv(Process*)>
c001d5f0:	83 c4 10             	add    esp,0x10
c001d5f3:	89 c2                	mov    edx,eax
c001d5f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5f9:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d5ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d603:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d60c:	a1 b0 ce 02 c0       	mov    eax,ds:0xc002ceb0
c001d611:	8d 50 01             	lea    edx,[eax+0x1]
c001d614:	89 15 b0 ce 02 c0    	mov    DWORD PTR ds:0xc002ceb0,edx
c001d61a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d61e:	89 02                	mov    DWORD PTR [edx],eax
c001d620:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001d628:	83 ec 0c             	sub    esp,0xc
c001d62b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d62f:	e8 65 1f ff ff       	call   c000f599 <malloc>
c001d634:	83 c4 10             	add    esp,0x10
c001d637:	89 c3                	mov    ebx,eax
c001d639:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d63e:	83 ec 08             	sub    esp,0x8
c001d641:	50                   	push   eax
c001d642:	53                   	push   ebx
c001d643:	e8 40 48 ff ff       	call   c0011e88 <VAS::VAS(bool)>
c001d648:	83 c4 10             	add    esp,0x10
c001d64b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d64f:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d655:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d659:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d663:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d667:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d66b:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d671:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d675:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d67b:	85 c0                	test   eax,eax
c001d67d:	74 42                	je     c001d6c1 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d67f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d683:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d689:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d68f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d693:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d699:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d69d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d6a3:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d6a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6ad:	05 0c 01 00 00       	add    eax,0x10c
c001d6b2:	83 ec 08             	sub    esp,0x8
c001d6b5:	52                   	push   edx
c001d6b6:	50                   	push   eax
c001d6b7:	e8 50 31 fe ff       	call   c000080c <strcpy>
c001d6bc:	83 c4 10             	add    esp,0x10
c001d6bf:	eb 63                	jmp    c001d724 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d6c1:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001d6c9:	83 ec 0c             	sub    esp,0xc
c001d6cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d6d0:	e8 c4 1e ff ff       	call   c000f599 <malloc>
c001d6d5:	83 c4 10             	add    esp,0x10
c001d6d8:	89 c3                	mov    ebx,eax
c001d6da:	83 ec 08             	sub    esp,0x8
c001d6dd:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d6e1:	53                   	push   ebx
c001d6e2:	e8 a3 31 ff ff       	call   c001088a <VgaText::VgaText(char const*)>
c001d6e7:	83 c4 10             	add    esp,0x10
c001d6ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6ee:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d6f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6f8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d6fe:	83 ec 0c             	sub    esp,0xc
c001d701:	50                   	push   eax
c001d702:	e8 42 29 ff ff       	call   c0010049 <addToTerminalCycle(VgaText*)>
c001d707:	83 c4 10             	add    esp,0x10
c001d70a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d70e:	05 0c 01 00 00       	add    eax,0x10c
c001d713:	83 ec 08             	sub    esp,0x8
c001d716:	68 28 bb 02 c0       	push   0xc002bb28
c001d71b:	50                   	push   eax
c001d71c:	e8 eb 30 fe ff       	call   c000080c <strcpy>
c001d721:	83 c4 10             	add    esp,0x10
c001d724:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d728:	83 c0 0c             	add    eax,0xc
c001d72b:	83 ec 08             	sub    esp,0x8
c001d72e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d732:	50                   	push   eax
c001d733:	e8 d4 30 fe ff       	call   c000080c <strcpy>
c001d738:	83 c4 10             	add    esp,0x10
c001d73b:	83 ec 08             	sub    esp,0x8
c001d73e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d742:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d746:	e8 1d fc ff ff       	call   c001d368 <Process::addArgs(char**)>
c001d74b:	83 c4 10             	add    esp,0x10
c001d74e:	90                   	nop
c001d74f:	83 c4 24             	add    esp,0x24
c001d752:	5b                   	pop    ebx
c001d753:	5e                   	pop    esi
c001d754:	c3                   	ret    

c001d755 <taskStartupFunction>:
c001d755:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d75a:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d75d:	c3                   	ret    

c001d75e <Semaphore::Semaphore(int)>:
c001d75e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d762:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d766:	89 10                	mov    DWORD PTR [eax],edx
c001d768:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d76c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d773:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d777:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d77e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d782:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d789:	90                   	nop
c001d78a:	c3                   	ret    
c001d78b:	90                   	nop

c001d78c <Mutex::Mutex()>:
c001d78c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d790:	6a 01                	push   0x1
c001d792:	50                   	push   eax
c001d793:	e8 c6 ff ff ff       	call   c001d75e <Semaphore::Semaphore(int)>
c001d798:	83 c4 08             	add    esp,0x8
c001d79b:	90                   	nop
c001d79c:	c3                   	ret    
c001d79d:	90                   	nop

c001d79e <Process::createThread(void (*)(void*), void*, int)>:
c001d79e:	55                   	push   ebp
c001d79f:	31 c9                	xor    ecx,ecx
c001d7a1:	57                   	push   edi
c001d7a2:	56                   	push   esi
c001d7a3:	53                   	push   ebx
c001d7a4:	83 ec 1c             	sub    esp,0x1c
c001d7a7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d7ab:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d7b2:	89 f2                	mov    edx,esi
c001d7b4:	0f b7 c2             	movzx  eax,dx
c001d7b7:	83 e2 01             	and    edx,0x1
c001d7ba:	74 16                	je     c001d7d2 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001d7bc:	d1 f8                	sar    eax,1
c001d7be:	41                   	inc    ecx
c001d7bf:	89 c2                	mov    edx,eax
c001d7c1:	83 f9 10             	cmp    ecx,0x10
c001d7c4:	75 ee                	jne    c001d7b4 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d7c6:	83 c4 1c             	add    esp,0x1c
c001d7c9:	31 db                	xor    ebx,ebx
c001d7cb:	89 d8                	mov    eax,ebx
c001d7cd:	5b                   	pop    ebx
c001d7ce:	5e                   	pop    esi
c001d7cf:	5f                   	pop    edi
c001d7d0:	5d                   	pop    ebp
c001d7d1:	c3                   	ret    
c001d7d2:	b8 01 00 00 00       	mov    eax,0x1
c001d7d7:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d7da:	d3 e0                	shl    eax,cl
c001d7dc:	09 c6                	or     esi,eax
c001d7de:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001d7e1:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d7e8:	89 c6                	mov    esi,eax
c001d7ea:	c1 e6 05             	shl    esi,0x5
c001d7ed:	01 f0                	add    eax,esi
c001d7ef:	01 d8                	add    eax,ebx
c001d7f1:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001d7f8:	75 0a                	jne    c001d804 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001d7fa:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001d804:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d80a:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d80e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001d811:	01 ca                	add    edx,ecx
c001d813:	83 ec 08             	sub    esp,0x8
c001d816:	89 d0                	mov    eax,edx
c001d818:	c1 e0 05             	shl    eax,0x5
c001d81b:	01 d0                	add    eax,edx
c001d81d:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001d821:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d825:	01 d8                	add    eax,ebx
c001d827:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001d82d:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001d833:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d839:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d83f:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d845:	89 cd                	mov    ebp,ecx
c001d847:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001d84b:	f7 dd                	neg    ebp
c001d84d:	c1 e5 15             	shl    ebp,0x15
c001d850:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001d856:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001d85c:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d866:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001d86c:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d876:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d880:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d884:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001d88b:	53                   	push   ebx
c001d88c:	68 64 0e 03 c0       	push   0xc0030e64
c001d891:	e8 aa af 00 00       	call   c0028840 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d896:	89 d8                	mov    eax,ebx
c001d898:	83 c4 10             	add    esp,0x10
c001d89b:	83 c4 1c             	add    esp,0x1c
c001d89e:	5b                   	pop    ebx
c001d89f:	5e                   	pop    esi
c001d8a0:	5f                   	pop    edi
c001d8a1:	5d                   	pop    ebp
c001d8a2:	c3                   	ret    
c001d8a3:	90                   	nop

c001d8a4 <Process::createUserThread()>:
c001d8a4:	83 ec 0c             	sub    esp,0xc
c001d8a7:	68 80 00 00 00       	push   0x80
c001d8ac:	6a 00                	push   0x0
c001d8ae:	68 68 d2 01 c0       	push   0xc001d268
c001d8b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d8b7:	e8 e2 fe ff ff       	call   c001d79e <Process::createThread(void (*)(void*), void*, int)>
c001d8bc:	83 c4 1c             	add    esp,0x1c
c001d8bf:	c3                   	ret    

c001d8c0 <setupMultitasking(void (*)())>:
c001d8c0:	56                   	push   esi
c001d8c1:	53                   	push   ebx
c001d8c2:	51                   	push   ecx
c001d8c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d8c7:	eb 10                	jmp    c001d8d9 <setupMultitasking(void (*)())+0x19>
c001d8c9:	83 ec 0c             	sub    esp,0xc
c001d8cc:	68 64 0e 03 c0       	push   0xc0030e64
c001d8d1:	e8 bc ae 00 00       	call   c0028792 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d8d6:	83 c4 10             	add    esp,0x10
c001d8d9:	83 ec 0c             	sub    esp,0xc
c001d8dc:	68 64 0e 03 c0       	push   0xc0030e64
c001d8e1:	e8 88 ae 00 00       	call   c002876e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d8e6:	83 c4 10             	add    esp,0x10
c001d8e9:	84 c0                	test   al,al
c001d8eb:	74 dc                	je     c001d8c9 <setupMultitasking(void (*)())+0x9>
c001d8ed:	83 ec 0c             	sub    esp,0xc
c001d8f0:	68 3f 07 00 00       	push   0x73f
c001d8f5:	e8 9f 1c ff ff       	call   c000f599 <malloc>
c001d8fa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d901:	89 c3                	mov    ebx,eax
c001d903:	6a 00                	push   0x0
c001d905:	68 2c bb 02 c0       	push   0xc002bb2c
c001d90a:	6a 01                	push   0x1
c001d90c:	50                   	push   eax
c001d90d:	e8 94 fc ff ff       	call   c001d5a6 <Process::Process(bool, char const*, Process*, char**)>
c001d912:	83 c4 14             	add    esp,0x14
c001d915:	89 1d 70 0e 03 c0    	mov    DWORD PTR ds:0xc0030e70,ebx
c001d91b:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d921:	e8 31 2a ff ff       	call   c0010357 <setActiveTerminal(VgaText*)>
c001d926:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d92e:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001d938:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d93e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d941:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d94b:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d951:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d957:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d961:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d96b:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d975:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d97b:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d985:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d98b:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d995:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d99b:	58                   	pop    eax
c001d99c:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d9a2:	5a                   	pop    edx
c001d9a3:	68 28 bb 02 c0       	push   0xc002bb28
c001d9a8:	50                   	push   eax
c001d9a9:	e8 5e 2e fe ff       	call   c000080c <strcpy>
c001d9ae:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d9b5:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d9b9:	83 c4 14             	add    esp,0x14
c001d9bc:	5b                   	pop    ebx
c001d9bd:	5e                   	pop    esi
c001d9be:	e9 91 29 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001d9c3 <schedule()>:
c001d9c3:	a1 44 0e 03 c0       	mov    eax,ds:0xc0030e44
c001d9c8:	85 c0                	test   eax,eax
c001d9ca:	74 0b                	je     c001d9d7 <schedule()+0x14>
c001d9cc:	c7 05 40 0e 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030e40,0x1
c001d9d6:	c3                   	ret    
c001d9d7:	53                   	push   ebx
c001d9d8:	83 ec 14             	sub    esp,0x14
c001d9db:	68 64 0e 03 c0       	push   0xc0030e64
c001d9e0:	e8 89 ad 00 00       	call   c002876e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d9e5:	83 c4 10             	add    esp,0x10
c001d9e8:	84 c0                	test   al,al
c001d9ea:	75 38                	jne    c001da24 <schedule()+0x61>
c001d9ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9f1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d9f4:	4a                   	dec    edx
c001d9f5:	74 32                	je     c001da29 <schedule()+0x66>
c001d9f7:	83 ec 0c             	sub    esp,0xc
c001d9fa:	68 64 0e 03 c0       	push   0xc0030e64
c001d9ff:	e8 86 ad 00 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001da04:	c7 04 24 64 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e64
c001da0b:	89 c3                	mov    ebx,eax
c001da0d:	e8 80 ad 00 00       	call   c0028792 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001da12:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001da19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da1c:	e8 9d f8 ff ff       	call   c001d2be <switchToThread(ThreadControlBlock*)>
c001da21:	83 c4 10             	add    esp,0x10
c001da24:	83 c4 08             	add    esp,0x8
c001da27:	5b                   	pop    ebx
c001da28:	c3                   	ret    
c001da29:	83 ec 08             	sub    esp,0x8
c001da2c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001da33:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001da39:	68 64 0e 03 c0       	push   0xc0030e64
c001da3e:	e8 fd ad 00 00       	call   c0028840 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001da43:	83 c4 10             	add    esp,0x10
c001da46:	eb af                	jmp    c001d9f7 <schedule()+0x34>

c001da48 <Semaphore::tryAcquire()>:
c001da48:	53                   	push   ebx
c001da49:	83 ec 08             	sub    esp,0x8
c001da4c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001da50:	fa                   	cli    
c001da51:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001da56:	8d 50 01             	lea    edx,[eax+0x1]
c001da59:	89 15 48 0e 03 c0    	mov    DWORD PTR ds:0xc0030e48,edx
c001da5f:	8b 15 44 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030e44
c001da65:	8d 5a 01             	lea    ebx,[edx+0x1]
c001da68:	89 1d 44 0e 03 c0    	mov    DWORD PTR ds:0xc0030e44,ebx
c001da6e:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001da71:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001da73:	7c 2a                	jl     c001da9f <Semaphore::tryAcquire()+0x57>
c001da75:	89 15 44 0e 03 c0    	mov    DWORD PTR ds:0xc0030e44,edx
c001da7b:	85 d2                	test   edx,edx
c001da7d:	75 0a                	jne    c001da89 <Semaphore::tryAcquire()+0x41>
c001da7f:	8b 15 40 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030e40
c001da85:	85 d2                	test   edx,edx
c001da87:	75 5b                	jne    c001dae4 <Semaphore::tryAcquire()+0x9c>
c001da89:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001da8e:	85 c0                	test   eax,eax
c001da90:	74 07                	je     c001da99 <Semaphore::tryAcquire()+0x51>
c001da92:	31 c0                	xor    eax,eax
c001da94:	83 c4 08             	add    esp,0x8
c001da97:	5b                   	pop    ebx
c001da98:	c3                   	ret    
c001da99:	fb                   	sti    
c001da9a:	83 c4 08             	add    esp,0x8
c001da9d:	5b                   	pop    ebx
c001da9e:	c3                   	ret    
c001da9f:	43                   	inc    ebx
c001daa0:	89 15 44 0e 03 c0    	mov    DWORD PTR ds:0xc0030e44,edx
c001daa6:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001daa9:	85 d2                	test   edx,edx
c001daab:	75 1f                	jne    c001dacc <Semaphore::tryAcquire()+0x84>
c001daad:	8b 0d 40 0e 03 c0    	mov    ecx,DWORD PTR ds:0xc0030e40
c001dab3:	85 c9                	test   ecx,ecx
c001dab5:	74 15                	je     c001dacc <Semaphore::tryAcquire()+0x84>
c001dab7:	c7 05 40 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e40,0x0
c001dac1:	e8 fd fe ff ff       	call   c001d9c3 <schedule()>
c001dac6:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001dacb:	48                   	dec    eax
c001dacc:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001dad1:	85 c0                	test   eax,eax
c001dad3:	75 08                	jne    c001dadd <Semaphore::tryAcquire()+0x95>
c001dad5:	fb                   	sti    
c001dad6:	b0 01                	mov    al,0x1
c001dad8:	83 c4 08             	add    esp,0x8
c001dadb:	5b                   	pop    ebx
c001dadc:	c3                   	ret    
c001dadd:	b0 01                	mov    al,0x1
c001dadf:	83 c4 08             	add    esp,0x8
c001dae2:	5b                   	pop    ebx
c001dae3:	c3                   	ret    
c001dae4:	c7 05 40 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e40,0x0
c001daee:	e8 d0 fe ff ff       	call   c001d9c3 <schedule()>
c001daf3:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001daf8:	48                   	dec    eax
c001daf9:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001dafe:	85 c0                	test   eax,eax
c001db00:	75 90                	jne    c001da92 <Semaphore::tryAcquire()+0x4a>
c001db02:	eb 95                	jmp    c001da99 <Semaphore::tryAcquire()+0x51>

c001db04 <Semaphore::assertLocked(char const*)>:
c001db04:	83 ec 0c             	sub    esp,0xc
c001db07:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db0b:	fa                   	cli    
c001db0c:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001db12:	a1 44 0e 03 c0       	mov    eax,ds:0xc0030e44
c001db17:	8d 48 01             	lea    ecx,[eax+0x1]
c001db1a:	89 0d 44 0e 03 c0    	mov    DWORD PTR ds:0xc0030e44,ecx
c001db20:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001db22:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001db25:	7c 24                	jl     c001db4b <Semaphore::assertLocked(char const*)+0x47>
c001db27:	a3 44 0e 03 c0       	mov    ds:0xc0030e44,eax
c001db2c:	85 c0                	test   eax,eax
c001db2e:	75 09                	jne    c001db39 <Semaphore::assertLocked(char const*)+0x35>
c001db30:	a1 40 0e 03 c0       	mov    eax,ds:0xc0030e40
c001db35:	85 c0                	test   eax,eax
c001db37:	75 29                	jne    c001db62 <Semaphore::assertLocked(char const*)+0x5e>
c001db39:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001db3e:	48                   	dec    eax
c001db3f:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001db44:	75 01                	jne    c001db47 <Semaphore::assertLocked(char const*)+0x43>
c001db46:	fb                   	sti    
c001db47:	83 c4 0c             	add    esp,0xc
c001db4a:	c3                   	ret    
c001db4b:	83 ec 0c             	sub    esp,0xc
c001db4e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001db52:	e8 e2 c2 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c001db57:	a1 44 0e 03 c0       	mov    eax,ds:0xc0030e44
c001db5c:	83 c4 10             	add    esp,0x10
c001db5f:	48                   	dec    eax
c001db60:	eb c5                	jmp    c001db27 <Semaphore::assertLocked(char const*)+0x23>
c001db62:	c7 05 40 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e40,0x0
c001db6c:	e8 52 fe ff ff       	call   c001d9c3 <schedule()>
c001db71:	eb c6                	jmp    c001db39 <Semaphore::assertLocked(char const*)+0x35>

c001db73 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001db73:	83 ec 0c             	sub    esp,0xc
c001db76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db7b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db7f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001db82:	e8 3c fe ff ff       	call   c001d9c3 <schedule()>
c001db87:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001db8c:	48                   	dec    eax
c001db8d:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001db92:	75 01                	jne    c001db95 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c001db94:	fb                   	sti    
c001db95:	83 c4 0c             	add    esp,0xc
c001db98:	c3                   	ret    

c001db99 <blockTask(TaskState)>:
c001db99:	83 ec 0c             	sub    esp,0xc
c001db9c:	fa                   	cli    
c001db9d:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001dba3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dba7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbac:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dbaf:	e8 0f fe ff ff       	call   c001d9c3 <schedule()>
c001dbb4:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001dbb9:	48                   	dec    eax
c001dbba:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001dbbf:	75 01                	jne    c001dbc2 <blockTask(TaskState)+0x29>
c001dbc1:	fb                   	sti    
c001dbc2:	83 c4 0c             	add    esp,0xc
c001dbc5:	c3                   	ret    

c001dbc6 <waitTask(int, int*, int)>:
c001dbc6:	83 ec 18             	sub    esp,0x18
c001dbc9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dbd2:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001dbd5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dbd9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbde:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001dbe1:	6a 07                	push   0x7
c001dbe3:	e8 b1 ff ff ff       	call   c001db99 <blockTask(TaskState)>
c001dbe8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbed:	83 c4 10             	add    esp,0x10
c001dbf0:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001dbf3:	85 d2                	test   edx,edx
c001dbf5:	74 0a                	je     c001dc01 <waitTask(int, int*, int)+0x3b>
c001dbf7:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001dbfa:	89 02                	mov    DWORD PTR [edx],eax
c001dbfc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc01:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001dc04:	83 c4 0c             	add    esp,0xc
c001dc07:	c3                   	ret    

c001dc08 <nanoSleepUntil(unsigned long long)>:
c001dc08:	83 ec 0c             	sub    esp,0xc
c001dc0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc0f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dc13:	3b 05 90 df 02 c0    	cmp    eax,DWORD PTR ds:0xc002df90
c001dc19:	89 d1                	mov    ecx,edx
c001dc1b:	1b 0d 94 df 02 c0    	sbb    ecx,DWORD PTR ds:0xc002df94
c001dc21:	73 04                	jae    c001dc27 <nanoSleepUntil(unsigned long long)+0x1f>
c001dc23:	83 c4 0c             	add    esp,0xc
c001dc26:	c3                   	ret    
c001dc27:	fa                   	cli    
c001dc28:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001dc2e:	83 ec 08             	sub    esp,0x8
c001dc31:	ff 05 44 0e 03 c0    	inc    DWORD PTR ds:0xc0030e44
c001dc37:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dc3d:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001dc40:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001dc43:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001dc49:	68 58 0e 03 c0       	push   0xc0030e58
c001dc4e:	e8 ed ab 00 00       	call   c0028840 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dc53:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001dc5a:	e8 3a ff ff ff       	call   c001db99 <blockTask(TaskState)>
c001dc5f:	a1 44 0e 03 c0       	mov    eax,ds:0xc0030e44
c001dc64:	83 c4 10             	add    esp,0x10
c001dc67:	48                   	dec    eax
c001dc68:	a3 44 0e 03 c0       	mov    ds:0xc0030e44,eax
c001dc6d:	85 c0                	test   eax,eax
c001dc6f:	75 09                	jne    c001dc7a <nanoSleepUntil(unsigned long long)+0x72>
c001dc71:	a1 40 0e 03 c0       	mov    eax,ds:0xc0030e40
c001dc76:	85 c0                	test   eax,eax
c001dc78:	75 12                	jne    c001dc8c <nanoSleepUntil(unsigned long long)+0x84>
c001dc7a:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001dc7f:	48                   	dec    eax
c001dc80:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001dc85:	75 9c                	jne    c001dc23 <nanoSleepUntil(unsigned long long)+0x1b>
c001dc87:	fb                   	sti    
c001dc88:	83 c4 0c             	add    esp,0xc
c001dc8b:	c3                   	ret    
c001dc8c:	c7 05 40 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e40,0x0
c001dc96:	e8 28 fd ff ff       	call   c001d9c3 <schedule()>
c001dc9b:	eb dd                	jmp    c001dc7a <nanoSleepUntil(unsigned long long)+0x72>

c001dc9d <nanoSleep(unsigned long long)>:
c001dc9d:	a1 90 df 02 c0       	mov    eax,ds:0xc002df90
c001dca2:	8b 15 94 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df94
c001dca8:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001dcac:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001dcb0:	e9 53 ff ff ff       	jmp    c001dc08 <nanoSleepUntil(unsigned long long)>

c001dcb5 <sleep(unsigned long long)>:
c001dcb5:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001dcbd:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001dcc2:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001dcc6:	01 ca                	add    edx,ecx
c001dcc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dccc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dcd0:	eb cb                	jmp    c001dc9d <nanoSleep(unsigned long long)>

c001dcd2 <Semaphore::acquire()>:
c001dcd2:	83 ec 0c             	sub    esp,0xc
c001dcd5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dcd9:	fa                   	cli    
c001dcda:	a1 44 0e 03 c0       	mov    eax,ds:0xc0030e44
c001dcdf:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001dce5:	8d 48 01             	lea    ecx,[eax+0x1]
c001dce8:	89 0d 44 0e 03 c0    	mov    DWORD PTR ds:0xc0030e44,ecx
c001dcee:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001dcf1:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001dcf3:	7d 28                	jge    c001dd1d <Semaphore::acquire()+0x4b>
c001dcf5:	41                   	inc    ecx
c001dcf6:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001dcf9:	a3 44 0e 03 c0       	mov    ds:0xc0030e44,eax
c001dcfe:	85 c0                	test   eax,eax
c001dd00:	75 09                	jne    c001dd0b <Semaphore::acquire()+0x39>
c001dd02:	a1 40 0e 03 c0       	mov    eax,ds:0xc0030e40
c001dd07:	85 c0                	test   eax,eax
c001dd09:	75 4e                	jne    c001dd59 <Semaphore::acquire()+0x87>
c001dd0b:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001dd10:	48                   	dec    eax
c001dd11:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001dd16:	75 01                	jne    c001dd19 <Semaphore::acquire()+0x47>
c001dd18:	fb                   	sti    
c001dd19:	83 c4 0c             	add    esp,0xc
c001dd1c:	c3                   	ret    
c001dd1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd22:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001dd29:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001dd2c:	85 c9                	test   ecx,ecx
c001dd2e:	74 3a                	je     c001dd6a <Semaphore::acquire()+0x98>
c001dd30:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001dd33:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dd39:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001dd3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd41:	83 ec 0c             	sub    esp,0xc
c001dd44:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001dd47:	6a 05                	push   0x5
c001dd49:	e8 4b fe ff ff       	call   c001db99 <blockTask(TaskState)>
c001dd4e:	a1 44 0e 03 c0       	mov    eax,ds:0xc0030e44
c001dd53:	83 c4 10             	add    esp,0x10
c001dd56:	48                   	dec    eax
c001dd57:	eb a0                	jmp    c001dcf9 <Semaphore::acquire()+0x27>
c001dd59:	c7 05 40 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e40,0x0
c001dd63:	e8 5b fc ff ff       	call   c001d9c3 <schedule()>
c001dd68:	eb a1                	jmp    c001dd0b <Semaphore::acquire()+0x39>
c001dd6a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd6f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001dd72:	eb c8                	jmp    c001dd3c <Semaphore::acquire()+0x6a>

c001dd74 <taskReturned>:
c001dd74:	83 ec 18             	sub    esp,0x18
c001dd77:	68 a8 bb 02 c0       	push   0xc002bba8
c001dd7c:	e8 b8 c0 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c001dd81:	83 c4 10             	add    esp,0x10
c001dd84:	83 ec 0c             	sub    esp,0xc
c001dd87:	6a 02                	push   0x2
c001dd89:	e8 0b fe ff ff       	call   c001db99 <blockTask(TaskState)>
c001dd8e:	fa                   	cli    
c001dd8f:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001dd95:	e8 29 fc ff ff       	call   c001d9c3 <schedule()>
c001dd9a:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001dd9f:	83 c4 10             	add    esp,0x10
c001dda2:	48                   	dec    eax
c001dda3:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001dda8:	85 c0                	test   eax,eax
c001ddaa:	75 d8                	jne    c001dd84 <taskReturned+0x10>
c001ddac:	fb                   	sti    
c001ddad:	eb d5                	jmp    c001dd84 <taskReturned+0x10>

c001ddaf <Thr::processFromPID(int)>:
c001ddaf:	57                   	push   edi
c001ddb0:	56                   	push   esi
c001ddb1:	53                   	push   ebx
c001ddb2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ddb6:	fa                   	cli    
c001ddb7:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001ddbd:	83 ec 0c             	sub    esp,0xc
c001ddc0:	68 64 0e 03 c0       	push   0xc0030e64
c001ddc5:	e8 c0 a9 00 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ddca:	83 c4 10             	add    esp,0x10
c001ddcd:	89 c7                	mov    edi,eax
c001ddcf:	eb 14                	jmp    c001dde5 <Thr::processFromPID(int)+0x36>
c001ddd1:	83 ec 0c             	sub    esp,0xc
c001ddd4:	68 64 0e 03 c0       	push   0xc0030e64
c001ddd9:	e8 ac a9 00 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ddde:	83 c4 10             	add    esp,0x10
c001dde1:	39 f8                	cmp    eax,edi
c001dde3:	74 49                	je     c001de2e <Thr::processFromPID(int)+0x7f>
c001dde5:	83 ec 0c             	sub    esp,0xc
c001dde8:	68 64 0e 03 c0       	push   0xc0030e64
c001dded:	e8 98 a9 00 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ddf2:	c7 04 24 64 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e64
c001ddf9:	89 c3                	mov    ebx,eax
c001ddfb:	e8 92 a9 00 00       	call   c0028792 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001de00:	58                   	pop    eax
c001de01:	5a                   	pop    edx
c001de02:	53                   	push   ebx
c001de03:	68 64 0e 03 c0       	push   0xc0030e64
c001de08:	e8 33 aa 00 00       	call   c0028840 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001de0d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de10:	83 c4 10             	add    esp,0x10
c001de13:	39 30                	cmp    DWORD PTR [eax],esi
c001de15:	75 ba                	jne    c001ddd1 <Thr::processFromPID(int)+0x22>
c001de17:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001de1c:	48                   	dec    eax
c001de1d:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001de22:	74 07                	je     c001de2b <Thr::processFromPID(int)+0x7c>
c001de24:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de27:	5b                   	pop    ebx
c001de28:	5e                   	pop    esi
c001de29:	5f                   	pop    edi
c001de2a:	c3                   	ret    
c001de2b:	fb                   	sti    
c001de2c:	eb f6                	jmp    c001de24 <Thr::processFromPID(int)+0x75>
c001de2e:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001de33:	48                   	dec    eax
c001de34:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001de39:	75 05                	jne    c001de40 <Thr::processFromPID(int)+0x91>
c001de3b:	fb                   	sti    
c001de3c:	5b                   	pop    ebx
c001de3d:	5e                   	pop    esi
c001de3e:	5f                   	pop    edi
c001de3f:	c3                   	ret    
c001de40:	5b                   	pop    ebx
c001de41:	31 c0                	xor    eax,eax
c001de43:	5e                   	pop    esi
c001de44:	5f                   	pop    edi
c001de45:	c3                   	ret    

c001de46 <unblockTask(ThreadControlBlock*)>:
c001de46:	53                   	push   ebx
c001de47:	83 ec 08             	sub    esp,0x8
c001de4a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001de4e:	fa                   	cli    
c001de4f:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001de55:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001de58:	85 c0                	test   eax,eax
c001de5a:	74 5a                	je     c001deb6 <unblockTask(ThreadControlBlock*)+0x70>
c001de5c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001de5f:	48                   	dec    eax
c001de60:	74 31                	je     c001de93 <unblockTask(ThreadControlBlock*)+0x4d>
c001de62:	83 ec 0c             	sub    esp,0xc
c001de65:	68 64 0e 03 c0       	push   0xc0030e64
c001de6a:	e8 1b a9 00 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001de6f:	83 c4 10             	add    esp,0x10
c001de72:	85 c0                	test   eax,eax
c001de74:	75 17                	jne    c001de8d <unblockTask(ThreadControlBlock*)+0x47>
c001de76:	eb 50                	jmp    c001dec8 <unblockTask(ThreadControlBlock*)+0x82>
c001de78:	83 ec 08             	sub    esp,0x8
c001de7b:	50                   	push   eax
c001de7c:	68 64 0e 03 c0       	push   0xc0030e64
c001de81:	e8 8c ac 00 00       	call   c0028b12 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001de86:	83 c4 10             	add    esp,0x10
c001de89:	85 c0                	test   eax,eax
c001de8b:	74 3b                	je     c001dec8 <unblockTask(ThreadControlBlock*)+0x82>
c001de8d:	39 c3                	cmp    ebx,eax
c001de8f:	75 e7                	jne    c001de78 <unblockTask(ThreadControlBlock*)+0x32>
c001de91:	eb 10                	jmp    c001dea3 <unblockTask(ThreadControlBlock*)+0x5d>
c001de93:	83 ec 0c             	sub    esp,0xc
c001de96:	68 4a bb 02 c0       	push   0xc002bb4a
c001de9b:	e8 2d 48 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c001dea0:	83 c4 10             	add    esp,0x10
c001dea3:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001dea8:	48                   	dec    eax
c001dea9:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001deae:	75 01                	jne    c001deb1 <unblockTask(ThreadControlBlock*)+0x6b>
c001deb0:	fb                   	sti    
c001deb1:	83 c4 08             	add    esp,0x8
c001deb4:	5b                   	pop    ebx
c001deb5:	c3                   	ret    
c001deb6:	83 ec 0c             	sub    esp,0xc
c001deb9:	68 33 bb 02 c0       	push   0xc002bb33
c001debe:	e8 0a 48 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c001dec3:	83 c4 10             	add    esp,0x10
c001dec6:	eb db                	jmp    c001dea3 <unblockTask(ThreadControlBlock*)+0x5d>
c001dec8:	83 ec 08             	sub    esp,0x8
c001decb:	53                   	push   ebx
c001decc:	68 64 0e 03 c0       	push   0xc0030e64
c001ded1:	e8 6a a9 00 00       	call   c0028840 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ded6:	83 c4 10             	add    esp,0x10
c001ded9:	eb c8                	jmp    c001dea3 <unblockTask(ThreadControlBlock*)+0x5d>

c001dedb <cleanupTerminatedTask(ThreadControlBlock*)>:
c001dedb:	55                   	push   ebp
c001dedc:	57                   	push   edi
c001dedd:	56                   	push   esi
c001dede:	53                   	push   ebx
c001dedf:	83 ec 1c             	sub    esp,0x1c
c001dee2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dee6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dee9:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001deef:	85 ff                	test   edi,edi
c001def1:	7e 20                	jle    c001df13 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001def3:	31 f6                	xor    esi,esi
c001def5:	83 ec 0c             	sub    esp,0xc
c001def8:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001deff:	46                   	inc    esi
c001df00:	e8 a4 16 ff ff       	call   c000f5a9 <free>
c001df05:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df08:	83 c4 10             	add    esp,0x10
c001df0b:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001df11:	7f e2                	jg     c001def5 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001df13:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001df1d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001df22:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001df25:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001df28:	d3 c0                	rol    eax,cl
c001df2a:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001df31:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001df34:	89 f7                	mov    edi,esi
c001df36:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001df3e:	0f 85 64 01 00 00    	jne    c001e0a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001df44:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001df4a:	85 ed                	test   ebp,ebp
c001df4c:	74 1b                	je     c001df69 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001df4e:	83 ec 0c             	sub    esp,0xc
c001df51:	55                   	push   ebp
c001df52:	e8 87 bc ff ff       	call   c0019bde <EnvVarContainer::~EnvVarContainer()>
c001df57:	59                   	pop    ecx
c001df58:	5e                   	pop    esi
c001df59:	6a 0c                	push   0xc
c001df5b:	55                   	push   ebp
c001df5c:	e8 94 46 ff ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c001df61:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001df64:	83 c4 10             	add    esp,0x10
c001df67:	89 f7                	mov    edi,esi
c001df69:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001df6f:	85 c0                	test   eax,eax
c001df71:	0f 84 aa 00 00 00    	je     c001e021 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001df77:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001df7a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001df7e:	31 c9                	xor    ecx,ecx
c001df80:	eb 10                	jmp    c001df92 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001df82:	41                   	inc    ecx
c001df83:	83 f9 10             	cmp    ecx,0x10
c001df86:	0f 84 95 00 00 00    	je     c001e021 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001df8c:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001df92:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001df99:	d3 fa                	sar    edx,cl
c001df9b:	83 e2 01             	and    edx,0x1
c001df9e:	74 e2                	je     c001df82 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dfa0:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001dfa3:	01 ca                	add    edx,ecx
c001dfa5:	89 d5                	mov    ebp,edx
c001dfa7:	c1 e5 05             	shl    ebp,0x5
c001dfaa:	01 ea                	add    edx,ebp
c001dfac:	01 d0                	add    eax,edx
c001dfae:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001dfb4:	83 fd 07             	cmp    ebp,0x7
c001dfb7:	75 c9                	jne    c001df82 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dfb9:	05 40 02 00 00       	add    eax,0x240
c001dfbe:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001dfc1:	83 fd ff             	cmp    ebp,0xffffffff
c001dfc4:	0f 8c e6 00 00 00    	jl     c001e0b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c001dfca:	0f 84 97 01 00 00    	je     c001e167 <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001dfd0:	85 ed                	test   ebp,ebp
c001dfd2:	0f 84 7e 01 00 00    	je     c001e156 <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c001dfd8:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001dfda:	75 a6                	jne    c001df82 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dfdc:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001dfe2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dfe6:	01 d0                	add    eax,edx
c001dfe8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001dfec:	83 ec 0c             	sub    esp,0xc
c001dfef:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001dff5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dff8:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dffe:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e005:	50                   	push   eax
c001e006:	e8 3b fe ff ff       	call   c001de46 <unblockTask(ThreadControlBlock*)>
c001e00b:	83 c4 10             	add    esp,0x10
c001e00e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e011:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e015:	89 f7                	mov    edi,esi
c001e017:	41                   	inc    ecx
c001e018:	83 f9 10             	cmp    ecx,0x10
c001e01b:	0f 85 6b ff ff ff    	jne    c001df8c <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e021:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e027:	85 c0                	test   eax,eax
c001e029:	74 5d                	je     c001e088 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e02b:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e031:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e037:	74 4f                	je     c001e088 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e039:	83 ec 0c             	sub    esp,0xc
c001e03c:	68 64 0e 03 c0       	push   0xc0030e64
c001e041:	e8 44 a7 00 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e046:	c7 04 24 64 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e64
c001e04d:	89 c7                	mov    edi,eax
c001e04f:	e8 1a a7 00 00       	call   c002876e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e054:	83 c4 10             	add    esp,0x10
c001e057:	84 c0                	test   al,al
c001e059:	0f 84 c2 00 00 00    	je     c001e121 <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c001e05f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e062:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e068:	85 d2                	test   edx,edx
c001e06a:	74 0f                	je     c001e07b <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e06c:	83 ec 0c             	sub    esp,0xc
c001e06f:	8b 02                	mov    eax,DWORD PTR [edx]
c001e071:	52                   	push   edx
c001e072:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e075:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e078:	83 c4 10             	add    esp,0x10
c001e07b:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e085:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e088:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e08e:	85 db                	test   ebx,ebx
c001e090:	74 16                	je     c001e0a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e092:	83 ec 0c             	sub    esp,0xc
c001e095:	53                   	push   ebx
c001e096:	e8 c7 37 ff ff       	call   c0011862 <VAS::~VAS()>
c001e09b:	58                   	pop    eax
c001e09c:	5a                   	pop    edx
c001e09d:	6a 14                	push   0x14
c001e09f:	53                   	push   ebx
c001e0a0:	e8 50 45 ff ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c001e0a5:	83 c4 10             	add    esp,0x10
c001e0a8:	83 c4 1c             	add    esp,0x1c
c001e0ab:	5b                   	pop    ebx
c001e0ac:	5e                   	pop    esi
c001e0ad:	5f                   	pop    edi
c001e0ae:	5d                   	pop    ebp
c001e0af:	c3                   	ret    
c001e0b0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e0b4:	83 ec 0c             	sub    esp,0xc
c001e0b7:	68 dc bb 02 c0       	push   0xc002bbdc
c001e0bc:	e8 78 bd ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c001e0c1:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e0c4:	83 c4 10             	add    esp,0x10
c001e0c7:	89 f7                	mov    edi,esi
c001e0c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e0cd:	e9 b0 fe ff ff       	jmp    c001df82 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e0d2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e0d8:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e0de:	75 1c                	jne    c001e0fc <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e0e0:	83 ec 0c             	sub    esp,0xc
c001e0e3:	68 44 bc 02 c0       	push   0xc002bc44
c001e0e8:	e8 e0 45 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c001e0ed:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e0f4:	e8 a0 fa ff ff       	call   c001db99 <blockTask(TaskState)>
c001e0f9:	83 c4 10             	add    esp,0x10
c001e0fc:	83 ec 08             	sub    esp,0x8
c001e0ff:	56                   	push   esi
c001e100:	68 64 0e 03 c0       	push   0xc0030e64
c001e105:	e8 36 a7 00 00       	call   c0028840 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e10a:	c7 04 24 64 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e64
c001e111:	e8 74 a6 00 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e116:	83 c4 10             	add    esp,0x10
c001e119:	39 f8                	cmp    eax,edi
c001e11b:	0f 84 3e ff ff ff    	je     c001e05f <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e121:	83 ec 0c             	sub    esp,0xc
c001e124:	68 64 0e 03 c0       	push   0xc0030e64
c001e129:	e8 5c a6 00 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e12e:	c7 04 24 64 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e64
c001e135:	89 c6                	mov    esi,eax
c001e137:	e8 56 a6 00 00       	call   c0028792 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e13c:	83 c4 10             	add    esp,0x10
c001e13f:	39 f3                	cmp    ebx,esi
c001e141:	74 b9                	je     c001e0fc <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e143:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e146:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e149:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e14f:	75 ab                	jne    c001e0fc <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e151:	e9 7c ff ff ff       	jmp    c001e0d2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e156:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e15a:	83 ec 0c             	sub    esp,0xc
c001e15d:	68 10 bc 02 c0       	push   0xc002bc10
c001e162:	e9 55 ff ff ff       	jmp    c001e0bc <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c001e167:	8b 36                	mov    esi,DWORD PTR [esi]
c001e169:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e16d:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e170:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e173:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e179:	01 d7                	add    edi,edx
c001e17b:	89 f8                	mov    eax,edi
c001e17d:	e9 66 fe ff ff       	jmp    c001dfe8 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e182 <cleanerTaskFunction(void*)>:
c001e182:	53                   	push   ebx
c001e183:	83 ec 08             	sub    esp,0x8
c001e186:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001e18b:	48                   	dec    eax
c001e18c:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001e191:	75 01                	jne    c001e194 <cleanerTaskFunction(void*)+0x12>
c001e193:	fb                   	sti    
c001e194:	fa                   	cli    
c001e195:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001e19a:	80 3d 2c 0e 03 c0 00 	cmp    BYTE PTR ds:0xc0030e2c,0x0
c001e1a1:	8d 50 01             	lea    edx,[eax+0x1]
c001e1a4:	89 15 48 0e 03 c0    	mov    DWORD PTR ds:0xc0030e48,edx
c001e1aa:	0f 84 a1 00 00 00    	je     c001e251 <cleanerTaskFunction(void*)+0xcf>
c001e1b0:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001e1b5:	85 c0                	test   eax,eax
c001e1b7:	75 01                	jne    c001e1ba <cleanerTaskFunction(void*)+0x38>
c001e1b9:	fb                   	sti    
c001e1ba:	c6 05 2c 0e 03 c0 00 	mov    BYTE PTR ds:0xc0030e2c,0x0
c001e1c1:	fa                   	cli    
c001e1c2:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001e1c8:	ff 05 44 0e 03 c0    	inc    DWORD PTR ds:0xc0030e44
c001e1ce:	fa                   	cli    
c001e1cf:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001e1d5:	eb 26                	jmp    c001e1fd <cleanerTaskFunction(void*)+0x7b>
c001e1d7:	83 ec 0c             	sub    esp,0xc
c001e1da:	68 4c 0e 03 c0       	push   0xc0030e4c
c001e1df:	e8 a6 a5 00 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e1e4:	c7 04 24 4c 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e4c
c001e1eb:	89 c3                	mov    ebx,eax
c001e1ed:	e8 a0 a5 00 00       	call   c0028792 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e1f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e1f5:	e8 e1 fc ff ff       	call   c001dedb <cleanupTerminatedTask(ThreadControlBlock*)>
c001e1fa:	83 c4 10             	add    esp,0x10
c001e1fd:	83 ec 0c             	sub    esp,0xc
c001e200:	68 4c 0e 03 c0       	push   0xc0030e4c
c001e205:	e8 64 a5 00 00       	call   c002876e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e20a:	83 c4 10             	add    esp,0x10
c001e20d:	84 c0                	test   al,al
c001e20f:	74 c6                	je     c001e1d7 <cleanerTaskFunction(void*)+0x55>
c001e211:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001e216:	48                   	dec    eax
c001e217:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001e21c:	75 01                	jne    c001e21f <cleanerTaskFunction(void*)+0x9d>
c001e21e:	fb                   	sti    
c001e21f:	a1 44 0e 03 c0       	mov    eax,ds:0xc0030e44
c001e224:	48                   	dec    eax
c001e225:	a3 44 0e 03 c0       	mov    ds:0xc0030e44,eax
c001e22a:	0f 85 56 ff ff ff    	jne    c001e186 <cleanerTaskFunction(void*)+0x4>
c001e230:	a1 40 0e 03 c0       	mov    eax,ds:0xc0030e40
c001e235:	85 c0                	test   eax,eax
c001e237:	0f 84 49 ff ff ff    	je     c001e186 <cleanerTaskFunction(void*)+0x4>
c001e23d:	c7 05 40 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e40,0x0
c001e247:	e8 77 f7 ff ff       	call   c001d9c3 <schedule()>
c001e24c:	e9 35 ff ff ff       	jmp    c001e186 <cleanerTaskFunction(void*)+0x4>
c001e251:	83 ec 0c             	sub    esp,0xc
c001e254:	6a 02                	push   0x2
c001e256:	e8 18 f9 ff ff       	call   c001db73 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e25b:	83 c4 10             	add    esp,0x10
c001e25e:	e9 57 ff ff ff       	jmp    c001e1ba <cleanerTaskFunction(void*)+0x38>

c001e263 <terminateTask(int)>:
c001e263:	83 ec 14             	sub    esp,0x14
c001e266:	fa                   	cli    
c001e267:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001e26d:	ff 05 44 0e 03 c0    	inc    DWORD PTR ds:0xc0030e44
c001e273:	fa                   	cli    
c001e274:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001e27a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e27e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e283:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e286:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e28b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e28e:	50                   	push   eax
c001e28f:	68 4c 0e 03 c0       	push   0xc0030e4c
c001e294:	e8 a7 a5 00 00       	call   c0028840 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e299:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e29e:	83 c4 10             	add    esp,0x10
c001e2a1:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e2a8:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001e2ad:	85 c0                	test   eax,eax
c001e2af:	74 53                	je     c001e304 <terminateTask(int)+0xa1>
c001e2b1:	83 ec 0c             	sub    esp,0xc
c001e2b4:	c6 05 2c 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030e2c,0x1
c001e2bb:	50                   	push   eax
c001e2bc:	e8 85 fb ff ff       	call   c001de46 <unblockTask(ThreadControlBlock*)>
c001e2c1:	83 c4 10             	add    esp,0x10
c001e2c4:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001e2c9:	48                   	dec    eax
c001e2ca:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001e2cf:	75 01                	jne    c001e2d2 <terminateTask(int)+0x6f>
c001e2d1:	fb                   	sti    
c001e2d2:	a1 44 0e 03 c0       	mov    eax,ds:0xc0030e44
c001e2d7:	48                   	dec    eax
c001e2d8:	a3 44 0e 03 c0       	mov    ds:0xc0030e44,eax
c001e2dd:	75 09                	jne    c001e2e8 <terminateTask(int)+0x85>
c001e2df:	83 3d 40 0e 03 c0 00 	cmp    DWORD PTR ds:0xc0030e40,0x0
c001e2e6:	75 2e                	jne    c001e316 <terminateTask(int)+0xb3>
c001e2e8:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001e2ed:	48                   	dec    eax
c001e2ee:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001e2f3:	75 01                	jne    c001e2f6 <terminateTask(int)+0x93>
c001e2f5:	fb                   	sti    
c001e2f6:	fa                   	cli    
c001e2f7:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001e2fd:	e8 c1 f6 ff ff       	call   c001d9c3 <schedule()>
c001e302:	eb e4                	jmp    c001e2e8 <terminateTask(int)+0x85>
c001e304:	83 ec 0c             	sub    esp,0xc
c001e307:	68 61 bb 02 c0       	push   0xc002bb61
c001e30c:	e8 bc 43 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c001e311:	83 c4 10             	add    esp,0x10
c001e314:	eb ae                	jmp    c001e2c4 <terminateTask(int)+0x61>
c001e316:	c7 05 40 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e40,0x0
c001e320:	eb db                	jmp    c001e2fd <terminateTask(int)+0x9a>

c001e322 <Thr::terminateFromIRQ(int)>:
c001e322:	83 ec 18             	sub    esp,0x18
c001e325:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e329:	e8 35 ff ff ff       	call   c001e263 <terminateTask(int)>

c001e32e <Semaphore::release()>:
c001e32e:	83 ec 0c             	sub    esp,0xc
c001e331:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e335:	fa                   	cli    
c001e336:	a1 44 0e 03 c0       	mov    eax,ds:0xc0030e44
c001e33b:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001e341:	8d 48 01             	lea    ecx,[eax+0x1]
c001e344:	89 0d 44 0e 03 c0    	mov    DWORD PTR ds:0xc0030e44,ecx
c001e34a:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e34d:	85 c9                	test   ecx,ecx
c001e34f:	74 3c                	je     c001e38d <Semaphore::release()+0x5f>
c001e351:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e354:	83 ec 0c             	sub    esp,0xc
c001e357:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e35a:	51                   	push   ecx
c001e35b:	e8 e6 fa ff ff       	call   c001de46 <unblockTask(ThreadControlBlock*)>
c001e360:	a1 44 0e 03 c0       	mov    eax,ds:0xc0030e44
c001e365:	83 c4 10             	add    esp,0x10
c001e368:	48                   	dec    eax
c001e369:	a3 44 0e 03 c0       	mov    ds:0xc0030e44,eax
c001e36e:	85 c0                	test   eax,eax
c001e370:	75 09                	jne    c001e37b <Semaphore::release()+0x4d>
c001e372:	a1 40 0e 03 c0       	mov    eax,ds:0xc0030e40
c001e377:	85 c0                	test   eax,eax
c001e379:	75 17                	jne    c001e392 <Semaphore::release()+0x64>
c001e37b:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001e380:	48                   	dec    eax
c001e381:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001e386:	75 01                	jne    c001e389 <Semaphore::release()+0x5b>
c001e388:	fb                   	sti    
c001e389:	83 c4 0c             	add    esp,0xc
c001e38c:	c3                   	ret    
c001e38d:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e390:	eb d7                	jmp    c001e369 <Semaphore::release()+0x3b>
c001e392:	c7 05 40 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e40,0x0
c001e39c:	e8 22 f6 ff ff       	call   c001d9c3 <schedule()>
c001e3a1:	eb d8                	jmp    c001e37b <Semaphore::release()+0x4d>

c001e3a3 <__static_initialization_and_destruction_0(int, int)>:
c001e3a3:	83 ec 0c             	sub    esp,0xc
c001e3a6:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e3ab:	0f 85 88 00 00 00    	jne    c001e439 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e3b1:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e3b9:	75 7e                	jne    c001e439 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e3bb:	83 ec 0c             	sub    esp,0xc
c001e3be:	68 64 0e 03 c0       	push   0xc0030e64
c001e3c3:	e8 08 a7 00 00       	call   c0028ad0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e3c8:	83 c4 10             	add    esp,0x10
c001e3cb:	83 ec 04             	sub    esp,0x4
c001e3ce:	68 f8 c6 02 c0       	push   0xc002c6f8
c001e3d3:	68 64 0e 03 c0       	push   0xc0030e64
c001e3d8:	68 84 8a 02 c0       	push   0xc0028a84
c001e3dd:	e8 8d 41 ff ff       	call   c001256f <__cxa_atexit>
c001e3e2:	83 c4 10             	add    esp,0x10
c001e3e5:	83 ec 0c             	sub    esp,0xc
c001e3e8:	68 58 0e 03 c0       	push   0xc0030e58
c001e3ed:	e8 de a6 00 00       	call   c0028ad0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e3f2:	83 c4 10             	add    esp,0x10
c001e3f5:	83 ec 04             	sub    esp,0x4
c001e3f8:	68 f8 c6 02 c0       	push   0xc002c6f8
c001e3fd:	68 58 0e 03 c0       	push   0xc0030e58
c001e402:	68 84 8a 02 c0       	push   0xc0028a84
c001e407:	e8 63 41 ff ff       	call   c001256f <__cxa_atexit>
c001e40c:	83 c4 10             	add    esp,0x10
c001e40f:	83 ec 0c             	sub    esp,0xc
c001e412:	68 4c 0e 03 c0       	push   0xc0030e4c
c001e417:	e8 b4 a6 00 00       	call   c0028ad0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e41c:	83 c4 10             	add    esp,0x10
c001e41f:	83 ec 04             	sub    esp,0x4
c001e422:	68 f8 c6 02 c0       	push   0xc002c6f8
c001e427:	68 4c 0e 03 c0       	push   0xc0030e4c
c001e42c:	68 84 8a 02 c0       	push   0xc0028a84
c001e431:	e8 39 41 ff ff       	call   c001256f <__cxa_atexit>
c001e436:	83 c4 10             	add    esp,0x10
c001e439:	90                   	nop
c001e43a:	83 c4 0c             	add    esp,0xc
c001e43d:	c3                   	ret    

c001e43e <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e43e:	83 ec 0c             	sub    esp,0xc
c001e441:	83 ec 08             	sub    esp,0x8
c001e444:	68 ff ff 00 00       	push   0xffff
c001e449:	6a 01                	push   0x1
c001e44b:	e8 53 ff ff ff       	call   c001e3a3 <__static_initialization_and_destruction_0(int, int)>
c001e450:	83 c4 10             	add    esp,0x10
c001e453:	83 c4 0c             	add    esp,0xc
c001e456:	c3                   	ret    

c001e457 <Vm::inbv(unsigned short)>:
c001e457:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e45b:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e460:	75 06                	jne    c001e468 <Vm::inbv(unsigned short)+0x11>
c001e462:	a0 ac 0e 03 c0       	mov    al,ds:0xc0030eac
c001e467:	c3                   	ret    
c001e468:	ec                   	in     al,dx
c001e469:	c3                   	ret    

c001e46a <Vm::outbv(unsigned short, unsigned char)>:
c001e46a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e46e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e472:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e477:	75 25                	jne    c001e49e <Vm::outbv(unsigned short, unsigned char)+0x34>
c001e479:	8b 0d ac 0e 03 c0    	mov    ecx,DWORD PTR ds:0xc0030eac
c001e47f:	8d 51 01             	lea    edx,[ecx+0x1]
c001e482:	88 81 c0 0e 03 c0    	mov    BYTE PTR [ecx-0x3ffcf140],al
c001e488:	89 15 ac 0e 03 c0    	mov    DWORD PTR ds:0xc0030eac,edx
c001e48e:	83 fa 20             	cmp    edx,0x20
c001e491:	75 0c                	jne    c001e49f <Vm::outbv(unsigned short, unsigned char)+0x35>
c001e493:	c7 05 ac 0e 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0030eac,0x1f
c001e49d:	c3                   	ret    
c001e49e:	ee                   	out    dx,al
c001e49f:	c3                   	ret    

c001e4a0 <Vm::realToLinear(unsigned short, unsigned short)>:
c001e4a0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e4a5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e4aa:	c1 e0 04             	shl    eax,0x4
c001e4ad:	01 d0                	add    eax,edx
c001e4af:	c3                   	ret    

c001e4b0 <Vm::getSegment(unsigned int)>:
c001e4b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4b4:	c1 e8 10             	shr    eax,0x10
c001e4b7:	c3                   	ret    

c001e4b8 <Vm::getOffset(unsigned int)>:
c001e4b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4bc:	c3                   	ret    

c001e4bd <Vm::mainloop2()>:
c001e4bd:	83 ec 18             	sub    esp,0x18
c001e4c0:	fa                   	cli    
c001e4c1:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001e4c7:	6a 02                	push   0x2
c001e4c9:	c6 05 a5 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030ea5,0x1
c001e4d0:	e8 9e f6 ff ff       	call   c001db73 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e4d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4da:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e4de:	52                   	push   edx
c001e4df:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e4e3:	52                   	push   edx
c001e4e4:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e4e8:	52                   	push   edx
c001e4e9:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e4ed:	50                   	push   eax
c001e4ee:	e8 07 1e fe ff       	call   c00002fa <goToVM86>
c001e4f3:	83 c4 2c             	add    esp,0x2c
c001e4f6:	c3                   	ret    

c001e4f7 <Vm::mainVm8086Loop(void*)>:
c001e4f7:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001e4fc:	48                   	dec    eax
c001e4fd:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001e502:	75 01                	jne    c001e505 <Vm::mainVm8086Loop(void*)+0xe>
c001e504:	fb                   	sti    
c001e505:	eb b6                	jmp    c001e4bd <Vm::mainloop2()>

c001e507 <Vm::mainloop3(unsigned long)>:
c001e507:	83 ec 18             	sub    esp,0x18
c001e50a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e50e:	fa                   	cli    
c001e50f:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001e515:	6a 02                	push   0x2
c001e517:	c6 05 a4 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030ea4,0x1
c001e51e:	a3 a0 0e 03 c0       	mov    ds:0xc0030ea0,eax
c001e523:	e8 4b f6 ff ff       	call   c001db73 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e528:	83 c4 1c             	add    esp,0x1c
c001e52b:	eb 90                	jmp    c001e4bd <Vm::mainloop2()>

c001e52d <Vm::initialise8086()>:
c001e52d:	83 ec 0c             	sub    esp,0xc
c001e530:	68 80 00 00 00       	push   0x80
c001e535:	6a 00                	push   0x0
c001e537:	68 f7 e4 01 c0       	push   0xc001e4f7
c001e53c:	ff 35 70 0e 03 c0    	push   DWORD PTR ds:0xc0030e70
c001e542:	e8 57 f2 ff ff       	call   c001d79e <Process::createThread(void (*)(void*), void*, int)>
c001e547:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e54e:	a3 a8 0e 03 c0       	mov    ds:0xc0030ea8,eax
c001e553:	68 00 01 00 00       	push   0x100
c001e558:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001e55d:	6a 00                	push   0x0
c001e55f:	6a 00                	push   0x0
c001e561:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e567:	e8 68 37 ff ff       	call   c0011cd4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e56c:	83 c4 2c             	add    esp,0x2c
c001e56f:	c3                   	ret    

c001e570 <Vm::finish8086()>:
c001e570:	53                   	push   ebx
c001e571:	83 ec 08             	sub    esp,0x8
c001e574:	fa                   	cli    
c001e575:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001e57b:	80 3d a4 0e 03 c0 00 	cmp    BYTE PTR ds:0xc0030ea4,0x0
c001e582:	75 15                	jne    c001e599 <Vm::finish8086()+0x29>
c001e584:	e8 3a f4 ff ff       	call   c001d9c3 <schedule()>
c001e589:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001e58e:	48                   	dec    eax
c001e58f:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001e594:	75 de                	jne    c001e574 <Vm::finish8086()+0x4>
c001e596:	fb                   	sti    
c001e597:	eb db                	jmp    c001e574 <Vm::finish8086()+0x4>
c001e599:	83 ec 0c             	sub    esp,0xc
c001e59c:	8b 1d a0 0e 03 c0    	mov    ebx,DWORD PTR ds:0xc0030ea0
c001e5a2:	ff 35 a8 0e 03 c0    	push   DWORD PTR ds:0xc0030ea8
c001e5a8:	c6 05 a4 0e 03 c0 00 	mov    BYTE PTR ds:0xc0030ea4,0x0
c001e5af:	e8 92 f8 ff ff       	call   c001de46 <unblockTask(ThreadControlBlock*)>
c001e5b4:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001e5b9:	83 c4 10             	add    esp,0x10
c001e5bc:	8d 50 ff             	lea    edx,[eax-0x1]
c001e5bf:	89 15 48 0e 03 c0    	mov    DWORD PTR ds:0xc0030e48,edx
c001e5c5:	85 d2                	test   edx,edx
c001e5c7:	75 01                	jne    c001e5ca <Vm::finish8086()+0x5a>
c001e5c9:	fb                   	sti    
c001e5ca:	89 d8                	mov    eax,ebx
c001e5cc:	83 c4 08             	add    esp,0x8
c001e5cf:	5b                   	pop    ebx
c001e5d0:	c3                   	ret    

c001e5d1 <Vm::getOutput8086(unsigned char*)>:
c001e5d1:	57                   	push   edi
c001e5d2:	8b 0d ac 0e 03 c0    	mov    ecx,DWORD PTR ds:0xc0030eac
c001e5d8:	56                   	push   esi
c001e5d9:	be c0 0e 03 c0       	mov    esi,0xc0030ec0
c001e5de:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e5e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e5e4:	a1 ac 0e 03 c0       	mov    eax,ds:0xc0030eac
c001e5e9:	5e                   	pop    esi
c001e5ea:	c7 05 ac 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030eac,0x0
c001e5f4:	5f                   	pop    edi
c001e5f5:	c3                   	ret    

c001e5f6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e5f6:	55                   	push   ebp
c001e5f7:	57                   	push   edi
c001e5f8:	56                   	push   esi
c001e5f9:	53                   	push   ebx
c001e5fa:	83 ec 2c             	sub    esp,0x2c
c001e5fd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e601:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001e605:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e609:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e60d:	fa                   	cli    
c001e60e:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001e614:	0f b6 35 a5 0e 03 c0 	movzx  esi,BYTE PTR ds:0xc0030ea5
c001e61b:	89 f0                	mov    eax,esi
c001e61d:	84 c0                	test   al,al
c001e61f:	75 1d                	jne    c001e63e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001e621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e625:	e8 99 f3 ff ff       	call   c001d9c3 <schedule()>
c001e62a:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001e62f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e633:	48                   	dec    eax
c001e634:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001e639:	75 d2                	jne    c001e60d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e63b:	fb                   	sti    
c001e63c:	eb cf                	jmp    c001e60d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e63e:	a1 a8 0e 03 c0       	mov    eax,ds:0xc0030ea8
c001e643:	c7 05 ac 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030eac,0x0
c001e64d:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001e651:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001e655:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001e659:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001e65d:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e661:	50                   	push   eax
c001e662:	6a 20                	push   0x20
c001e664:	6a 00                	push   0x0
c001e666:	68 c0 0e 03 c0       	push   0xc0030ec0
c001e66b:	e8 e0 20 fe ff       	call   c0000750 <memset>
c001e670:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e677:	e8 1d 0f ff ff       	call   c000f599 <malloc>
c001e67c:	83 c4 0c             	add    esp,0xc
c001e67f:	89 c3                	mov    ebx,eax
c001e681:	ff 35 70 0e 03 c0    	push   DWORD PTR ds:0xc0030e70
c001e687:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e68b:	50                   	push   eax
c001e68c:	e8 9b 45 ff ff       	call   c0012c2c <File::File(char const*, Process*)>
c001e691:	83 c4 10             	add    esp,0x10
c001e694:	85 db                	test   ebx,ebx
c001e696:	75 0a                	jne    c001e6a2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001e698:	83 ec 0c             	sub    esp,0xc
c001e69b:	68 6c bc 02 c0       	push   0xc002bc6c
c001e6a0:	eb 3e                	jmp    c001e6e0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e6a2:	50                   	push   eax
c001e6a3:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e6a7:	50                   	push   eax
c001e6a8:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e6ac:	50                   	push   eax
c001e6ad:	53                   	push   ebx
c001e6ae:	e8 89 48 ff ff       	call   c0012f3c <File::stat(unsigned long long*, bool*)>
c001e6b3:	83 c4 10             	add    esp,0x10
c001e6b6:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001e6bb:	74 0a                	je     c001e6c7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e6bd:	83 ec 0c             	sub    esp,0xc
c001e6c0:	68 80 bc 02 c0       	push   0xc002bc80
c001e6c5:	eb 19                	jmp    c001e6e0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e6c7:	51                   	push   ecx
c001e6c8:	51                   	push   ecx
c001e6c9:	6a 01                	push   0x1
c001e6cb:	53                   	push   ebx
c001e6cc:	e8 bf 45 ff ff       	call   c0012c90 <File::open(FileOpenMode)>
c001e6d1:	83 c4 10             	add    esp,0x10
c001e6d4:	85 c0                	test   eax,eax
c001e6d6:	74 24                	je     c001e6fc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001e6d8:	83 ec 0c             	sub    esp,0xc
c001e6db:	68 99 bc 02 c0       	push   0xc002bc99
c001e6e0:	e8 54 b7 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c001e6e5:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001e6ea:	83 c4 10             	add    esp,0x10
c001e6ed:	48                   	dec    eax
c001e6ee:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001e6f3:	85 c0                	test   eax,eax
c001e6f5:	75 01                	jne    c001e6f8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001e6f7:	fb                   	sti    
c001e6f8:	31 f6                	xor    esi,esi
c001e6fa:	eb 58                	jmp    c001e754 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001e6fc:	0f b7 ed             	movzx  ebp,bp
c001e6ff:	50                   	push   eax
c001e700:	0f b7 ff             	movzx  edi,di
c001e703:	50                   	push   eax
c001e704:	55                   	push   ebp
c001e705:	57                   	push   edi
c001e706:	e8 95 fd ff ff       	call   c001e4a0 <Vm::realToLinear(unsigned short, unsigned short)>
c001e70b:	5a                   	pop    edx
c001e70c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e70e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e712:	51                   	push   ecx
c001e713:	50                   	push   eax
c001e714:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e718:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e71c:	53                   	push   ebx
c001e71d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e720:	83 c4 14             	add    esp,0x14
c001e723:	53                   	push   ebx
c001e724:	e8 c5 45 ff ff       	call   c0012cee <File::close()>
c001e729:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001e72e:	83 c4 10             	add    esp,0x10
c001e731:	48                   	dec    eax
c001e732:	c6 05 a5 0e 03 c0 00 	mov    BYTE PTR ds:0xc0030ea5,0x0
c001e739:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001e73e:	85 c0                	test   eax,eax
c001e740:	75 01                	jne    c001e743 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001e742:	fb                   	sti    
c001e743:	83 ec 0c             	sub    esp,0xc
c001e746:	ff 35 a8 0e 03 c0    	push   DWORD PTR ds:0xc0030ea8
c001e74c:	e8 f5 f6 ff ff       	call   c001de46 <unblockTask(ThreadControlBlock*)>
c001e751:	83 c4 10             	add    esp,0x10
c001e754:	83 c4 2c             	add    esp,0x2c
c001e757:	89 f0                	mov    eax,esi
c001e759:	5b                   	pop    ebx
c001e75a:	5e                   	pop    esi
c001e75b:	5f                   	pop    edi
c001e75c:	5d                   	pop    ebp
c001e75d:	c3                   	ret    

c001e75e <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e75e:	57                   	push   edi
c001e75f:	56                   	push   esi
c001e760:	53                   	push   ebx
c001e761:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e765:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e769:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e76d:	83 e8 06             	sub    eax,0x6
c001e770:	0f b7 c0             	movzx  eax,ax
c001e773:	50                   	push   eax
c001e774:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e779:	50                   	push   eax
c001e77a:	e8 21 fd ff ff       	call   c001e4a0 <Vm::realToLinear(unsigned short, unsigned short)>
c001e77f:	5a                   	pop    edx
c001e780:	5e                   	pop    esi
c001e781:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e784:	8d 56 fa             	lea    edx,[esi-0x6]
c001e787:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e78d:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e790:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e793:	83 c2 02             	add    edx,0x2
c001e796:	66 89 10             	mov    WORD PTR [eax],dx
c001e799:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e79c:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e7a0:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e7a3:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e7a7:	89 d6                	mov    esi,edx
c001e7a9:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e7af:	66 81 e6 ff fd       	and    si,0xfdff
c001e7b4:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e7b8:	74 07                	je     c001e7c1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e7ba:	89 d6                	mov    esi,edx
c001e7bc:	66 81 ce 00 02       	or     si,0x200
c001e7c1:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e7c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7ca:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e7ce:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e7d6:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e7d9:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e7e1:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e7e4:	5b                   	pop    ebx
c001e7e5:	5e                   	pop    esi
c001e7e6:	5f                   	pop    edi
c001e7e7:	c3                   	ret    

c001e7e8 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e7e8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e7ed:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e7f2:	c1 e0 04             	shl    eax,0x4
c001e7f5:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e7f8:	c3                   	ret    

c001e7f9 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e7f9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e7fe:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e803:	c1 e0 04             	shl    eax,0x4
c001e806:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e80a:	c3                   	ret    

c001e80b <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e80b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e810:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e815:	c1 e0 04             	shl    eax,0x4
c001e818:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e81b:	c3                   	ret    

c001e81c <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e81c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e821:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e826:	c1 e0 04             	shl    eax,0x4
c001e829:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e82d:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e830:	c3                   	ret    

c001e831 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e831:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e836:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e83b:	c1 e0 04             	shl    eax,0x4
c001e83e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e842:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e846:	c3                   	ret    

c001e847 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e847:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e84c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e851:	c1 e0 04             	shl    eax,0x4
c001e854:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e858:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e85b:	c3                   	ret    

c001e85c <Vm::faultHandler(regs*)>:
c001e85c:	55                   	push   ebp
c001e85d:	57                   	push   edi
c001e85e:	56                   	push   esi
c001e85f:	53                   	push   ebx
c001e860:	83 ec 1c             	sub    esp,0x1c
c001e863:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e867:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001e86a:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001e86e:	0f b7 f8             	movzx  edi,ax
c001e871:	52                   	push   edx
c001e872:	0f b7 c0             	movzx  eax,ax
c001e875:	50                   	push   eax
c001e876:	e8 25 fc ff ff       	call   c001e4a0 <Vm::realToLinear(unsigned short, unsigned short)>
c001e87b:	5a                   	pop    edx
c001e87c:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001e87f:	59                   	pop    ecx
c001e880:	89 c1                	mov    ecx,eax
c001e882:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e885:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e889:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e88e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e892:	0f b7 c5             	movzx  eax,bp
c001e895:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e899:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001e89d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e8a1:	e8 fa fb ff ff       	call   c001e4a0 <Vm::realToLinear(unsigned short, unsigned short)>
c001e8a6:	5e                   	pop    esi
c001e8a7:	be 06 00 00 00       	mov    esi,0x6
c001e8ac:	5a                   	pop    edx
c001e8ad:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001e8b2:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001e8b7:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001e8ba:	80 fa 9d             	cmp    dl,0x9d
c001e8bd:	0f 84 2c 02 00 00    	je     c001eaef <Vm::faultHandler(regs*)+0x293>
c001e8c3:	0f 87 91 00 00 00    	ja     c001e95a <Vm::faultHandler(regs*)+0xfe>
c001e8c9:	80 fa 66             	cmp    dl,0x66
c001e8cc:	0f 84 98 01 00 00    	je     c001ea6a <Vm::faultHandler(regs*)+0x20e>
c001e8d2:	77 47                	ja     c001e91b <Vm::faultHandler(regs*)+0xbf>
c001e8d4:	80 fa 36             	cmp    dl,0x36
c001e8d7:	0f 84 80 01 00 00    	je     c001ea5d <Vm::faultHandler(regs*)+0x201>
c001e8dd:	77 1a                	ja     c001e8f9 <Vm::faultHandler(regs*)+0x9d>
c001e8df:	80 fa 26             	cmp    dl,0x26
c001e8e2:	0f 84 4e 01 00 00    	je     c001ea36 <Vm::faultHandler(regs*)+0x1da>
c001e8e8:	80 fa 2e             	cmp    dl,0x2e
c001e8eb:	0f 85 e2 05 00 00    	jne    c001eed3 <Vm::faultHandler(regs*)+0x677>
c001e8f1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e8f4:	31 f6                	xor    esi,esi
c001e8f6:	41                   	inc    ecx
c001e8f7:	eb be                	jmp    c001e8b7 <Vm::faultHandler(regs*)+0x5b>
c001e8f9:	80 fa 64             	cmp    dl,0x64
c001e8fc:	0f 84 41 01 00 00    	je     c001ea43 <Vm::faultHandler(regs*)+0x1e7>
c001e902:	0f 87 48 01 00 00    	ja     c001ea50 <Vm::faultHandler(regs*)+0x1f4>
c001e908:	80 fa 3e             	cmp    dl,0x3e
c001e90b:	0f 85 c2 05 00 00    	jne    c001eed3 <Vm::faultHandler(regs*)+0x677>
c001e911:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e914:	be 01 00 00 00       	mov    esi,0x1
c001e919:	eb db                	jmp    c001e8f6 <Vm::faultHandler(regs*)+0x9a>
c001e91b:	80 fa 6d             	cmp    dl,0x6d
c001e91e:	0f 84 ec 02 00 00    	je     c001ec10 <Vm::faultHandler(regs*)+0x3b4>
c001e924:	77 17                	ja     c001e93d <Vm::faultHandler(regs*)+0xe1>
c001e926:	80 fa 67             	cmp    dl,0x67
c001e929:	0f 84 48 01 00 00    	je     c001ea77 <Vm::faultHandler(regs*)+0x21b>
c001e92f:	80 fa 6c             	cmp    dl,0x6c
c001e932:	0f 84 69 02 00 00    	je     c001eba1 <Vm::faultHandler(regs*)+0x345>
c001e938:	e9 96 05 00 00       	jmp    c001eed3 <Vm::faultHandler(regs*)+0x677>
c001e93d:	80 fa 6f             	cmp    dl,0x6f
c001e940:	0f 84 f4 03 00 00    	je     c001ed3a <Vm::faultHandler(regs*)+0x4de>
c001e946:	0f 82 59 03 00 00    	jb     c001eca5 <Vm::faultHandler(regs*)+0x449>
c001e94c:	80 fa 9c             	cmp    dl,0x9c
c001e94f:	0f 84 2f 01 00 00    	je     c001ea84 <Vm::faultHandler(regs*)+0x228>
c001e955:	e9 79 05 00 00       	jmp    c001eed3 <Vm::faultHandler(regs*)+0x677>
c001e95a:	80 fa ec             	cmp    dl,0xec
c001e95d:	0f 84 14 05 00 00    	je     c001ee77 <Vm::faultHandler(regs*)+0x61b>
c001e963:	77 7b                	ja     c001e9e0 <Vm::faultHandler(regs*)+0x184>
c001e965:	80 fa e4             	cmp    dl,0xe4
c001e968:	0f 84 93 04 00 00    	je     c001ee01 <Vm::faultHandler(regs*)+0x5a5>
c001e96e:	77 53                	ja     c001e9c3 <Vm::faultHandler(regs*)+0x167>
c001e970:	80 fa cd             	cmp    dl,0xcd
c001e973:	0f 84 d9 01 00 00    	je     c001eb52 <Vm::faultHandler(regs*)+0x2f6>
c001e979:	80 fa cf             	cmp    dl,0xcf
c001e97c:	0f 85 51 05 00 00    	jne    c001eed3 <Vm::faultHandler(regs*)+0x677>
c001e982:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001e985:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001e988:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001e98c:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001e98f:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001e993:	81 ca 00 02 02 00    	or     edx,0x20200
c001e999:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001e99c:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001e9a0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e9a6:	66 c1 e8 09          	shr    ax,0x9
c001e9aa:	83 e0 01             	and    eax,0x1
c001e9ad:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e9b0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e9b3:	83 c0 06             	add    eax,0x6
c001e9b6:	25 ff ff 00 00       	and    eax,0xffff
c001e9bb:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001e9be:	e9 0c 05 00 00       	jmp    c001eecf <Vm::faultHandler(regs*)+0x673>
c001e9c3:	80 fa e6             	cmp    dl,0xe6
c001e9c6:	0f 84 7f 04 00 00    	je     c001ee4b <Vm::faultHandler(regs*)+0x5ef>
c001e9cc:	0f 82 4b 04 00 00    	jb     c001ee1d <Vm::faultHandler(regs*)+0x5c1>
c001e9d2:	80 fa e7             	cmp    dl,0xe7
c001e9d5:	0f 84 87 04 00 00    	je     c001ee62 <Vm::faultHandler(regs*)+0x606>
c001e9db:	e9 f3 04 00 00       	jmp    c001eed3 <Vm::faultHandler(regs*)+0x677>
c001e9e0:	80 fa ef             	cmp    dl,0xef
c001e9e3:	0f 84 d1 04 00 00    	je     c001eeba <Vm::faultHandler(regs*)+0x65e>
c001e9e9:	77 28                	ja     c001ea13 <Vm::faultHandler(regs*)+0x1b7>
c001e9eb:	80 fa ed             	cmp    dl,0xed
c001e9ee:	0f 84 9f 04 00 00    	je     c001ee93 <Vm::faultHandler(regs*)+0x637>
c001e9f4:	80 fa ee             	cmp    dl,0xee
c001e9f7:	0f 85 d6 04 00 00    	jne    c001eed3 <Vm::faultHandler(regs*)+0x677>
c001e9fd:	50                   	push   eax
c001e9fe:	50                   	push   eax
c001e9ff:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ea03:	50                   	push   eax
c001ea04:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ea08:	50                   	push   eax
c001ea09:	e8 5c fa ff ff       	call   c001e46a <Vm::outbv(unsigned short, unsigned char)>
c001ea0e:	e9 9f 04 00 00       	jmp    c001eeb2 <Vm::faultHandler(regs*)+0x656>
c001ea13:	80 fa fa             	cmp    dl,0xfa
c001ea16:	0f 84 69 01 00 00    	je     c001eb85 <Vm::faultHandler(regs*)+0x329>
c001ea1c:	80 fa fb             	cmp    dl,0xfb
c001ea1f:	0f 84 6e 01 00 00    	je     c001eb93 <Vm::faultHandler(regs*)+0x337>
c001ea25:	80 fa f3             	cmp    dl,0xf3
c001ea28:	0f 85 a5 04 00 00    	jne    c001eed3 <Vm::faultHandler(regs*)+0x677>
c001ea2e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea31:	e9 c0 fe ff ff       	jmp    c001e8f6 <Vm::faultHandler(regs*)+0x9a>
c001ea36:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea39:	be 02 00 00 00       	mov    esi,0x2
c001ea3e:	e9 b3 fe ff ff       	jmp    c001e8f6 <Vm::faultHandler(regs*)+0x9a>
c001ea43:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea46:	be 03 00 00 00       	mov    esi,0x3
c001ea4b:	e9 a6 fe ff ff       	jmp    c001e8f6 <Vm::faultHandler(regs*)+0x9a>
c001ea50:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea53:	be 04 00 00 00       	mov    esi,0x4
c001ea58:	e9 99 fe ff ff       	jmp    c001e8f6 <Vm::faultHandler(regs*)+0x9a>
c001ea5d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea60:	be 05 00 00 00       	mov    esi,0x5
c001ea65:	e9 8c fe ff ff       	jmp    c001e8f6 <Vm::faultHandler(regs*)+0x9a>
c001ea6a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea6d:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001ea72:	e9 7f fe ff ff       	jmp    c001e8f6 <Vm::faultHandler(regs*)+0x9a>
c001ea77:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea7a:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001ea7f:	e9 72 fe ff ff       	jmp    c001e8f6 <Vm::faultHandler(regs*)+0x9a>
c001ea84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001ea87:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ea8b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ea90:	74 30                	je     c001eac2 <Vm::faultHandler(regs*)+0x266>
c001ea92:	83 e9 04             	sub    ecx,0x4
c001ea95:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001ea9b:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001eaa1:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001eaa4:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001eaa7:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001eaad:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001eab1:	0f 84 15 04 00 00    	je     c001eecc <Vm::faultHandler(regs*)+0x670>
c001eab7:	80 ce 02             	or     dh,0x2
c001eaba:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001eabd:	e9 0a 04 00 00       	jmp    c001eecc <Vm::faultHandler(regs*)+0x670>
c001eac2:	83 e9 02             	sub    ecx,0x2
c001eac5:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001eacb:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001eace:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001ead2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ead8:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001eadc:	74 05                	je     c001eae3 <Vm::faultHandler(regs*)+0x287>
c001eade:	80 ce 02             	or     dh,0x2
c001eae1:	eb 03                	jmp    c001eae6 <Vm::faultHandler(regs*)+0x28a>
c001eae3:	80 e6 fd             	and    dh,0xfd
c001eae6:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001eaea:	e9 dd 03 00 00       	jmp    c001eecc <Vm::faultHandler(regs*)+0x670>
c001eaef:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eaf4:	74 2a                	je     c001eb20 <Vm::faultHandler(regs*)+0x2c4>
c001eaf6:	8b 10                	mov    edx,DWORD PTR [eax]
c001eaf8:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001eafe:	81 ca 00 02 02 00    	or     edx,0x20200
c001eb04:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001eb07:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb09:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eb0f:	c1 e8 09             	shr    eax,0x9
c001eb12:	83 e0 01             	and    eax,0x1
c001eb15:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eb18:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001eb1b:	83 c0 04             	add    eax,0x4
c001eb1e:	eb 25                	jmp    c001eb45 <Vm::faultHandler(regs*)+0x2e9>
c001eb20:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001eb23:	81 ca 00 02 02 00    	or     edx,0x20200
c001eb29:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001eb2c:	66 8b 00             	mov    ax,WORD PTR [eax]
c001eb2f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eb35:	66 c1 e8 09          	shr    ax,0x9
c001eb39:	83 e0 01             	and    eax,0x1
c001eb3c:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eb3f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001eb42:	83 c0 02             	add    eax,0x2
c001eb45:	25 ff ff 00 00       	and    eax,0xffff
c001eb4a:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001eb4d:	e9 7a 03 00 00       	jmp    c001eecc <Vm::faultHandler(regs*)+0x670>
c001eb52:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eb56:	3c ee                	cmp    al,0xee
c001eb58:	75 10                	jne    c001eb6a <Vm::faultHandler(regs*)+0x30e>
c001eb5a:	83 ec 0c             	sub    esp,0xc
c001eb5d:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001eb60:	e8 a2 f9 ff ff       	call   c001e507 <Vm::mainloop3(unsigned long)>
c001eb65:	e9 4b 03 00 00       	jmp    c001eeb5 <Vm::faultHandler(regs*)+0x659>
c001eb6a:	83 ec 0c             	sub    esp,0xc
c001eb6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001eb71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb75:	51                   	push   ecx
c001eb76:	50                   	push   eax
c001eb77:	53                   	push   ebx
c001eb78:	e8 e1 fb ff ff       	call   c001e75e <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001eb7d:	83 c4 20             	add    esp,0x20
c001eb80:	e9 4a 03 00 00       	jmp    c001eecf <Vm::faultHandler(regs*)+0x673>
c001eb85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb8a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001eb8e:	e9 39 03 00 00       	jmp    c001eecc <Vm::faultHandler(regs*)+0x670>
c001eb93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb98:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001eb9c:	e9 2b 03 00 00       	jmp    c001eecc <Vm::faultHandler(regs*)+0x670>
c001eba1:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001eba4:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001eba9:	74 2b                	je     c001ebd6 <Vm::faultHandler(regs*)+0x37a>
c001ebab:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001ebb2:	76 22                	jbe    c001ebd6 <Vm::faultHandler(regs*)+0x37a>
c001ebb4:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ebb8:	50                   	push   eax
c001ebb9:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ebbd:	50                   	push   eax
c001ebbe:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ebc2:	50                   	push   eax
c001ebc3:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ebc7:	50                   	push   eax
c001ebc8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ebcc:	50                   	push   eax
c001ebcd:	6a 6c                	push   0x6c
c001ebcf:	6a 6c                	push   0x6c
c001ebd1:	e9 b9 01 00 00       	jmp    c001ed8f <Vm::faultHandler(regs*)+0x533>
c001ebd6:	83 ec 0c             	sub    esp,0xc
c001ebd9:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ebdd:	0f b7 f6             	movzx  esi,si
c001ebe0:	50                   	push   eax
c001ebe1:	e8 71 f8 ff ff       	call   c001e457 <Vm::inbv(unsigned short)>
c001ebe6:	83 c4 0c             	add    esp,0xc
c001ebe9:	0f b6 c0             	movzx  eax,al
c001ebec:	50                   	push   eax
c001ebed:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001ebf1:	50                   	push   eax
c001ebf2:	56                   	push   esi
c001ebf3:	e8 24 fc ff ff       	call   c001e81c <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001ebf8:	83 c4 10             	add    esp,0x10
c001ebfb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ebfe:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ec02:	74 03                	je     c001ec07 <Vm::faultHandler(regs*)+0x3ab>
c001ec04:	48                   	dec    eax
c001ec05:	eb 01                	jmp    c001ec08 <Vm::faultHandler(regs*)+0x3ac>
c001ec07:	40                   	inc    eax
c001ec08:	0f b7 c0             	movzx  eax,ax
c001ec0b:	e9 8d 00 00 00       	jmp    c001ec9d <Vm::faultHandler(regs*)+0x441>
c001ec10:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ec13:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ec16:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ec1b:	74 29                	je     c001ec46 <Vm::faultHandler(regs*)+0x3ea>
c001ec1d:	3d ff ff 00 00       	cmp    eax,0xffff
c001ec22:	76 22                	jbe    c001ec46 <Vm::faultHandler(regs*)+0x3ea>
c001ec24:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ec28:	50                   	push   eax
c001ec29:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ec2d:	50                   	push   eax
c001ec2e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ec32:	50                   	push   eax
c001ec33:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ec37:	50                   	push   eax
c001ec38:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ec3c:	50                   	push   eax
c001ec3d:	6a 6d                	push   0x6d
c001ec3f:	6a 6d                	push   0x6d
c001ec41:	e9 49 01 00 00       	jmp    c001ed8f <Vm::faultHandler(regs*)+0x533>
c001ec46:	0f b7 c8             	movzx  ecx,ax
c001ec49:	0f b7 f6             	movzx  esi,si
c001ec4c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ec4f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ec54:	74 20                	je     c001ec76 <Vm::faultHandler(regs*)+0x41a>
c001ec56:	ed                   	in     eax,dx
c001ec57:	55                   	push   ebp
c001ec58:	50                   	push   eax
c001ec59:	51                   	push   ecx
c001ec5a:	56                   	push   esi
c001ec5b:	e8 e7 fb ff ff       	call   c001e847 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001ec60:	83 c4 10             	add    esp,0x10
c001ec63:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ec66:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ec6a:	74 05                	je     c001ec71 <Vm::faultHandler(regs*)+0x415>
c001ec6c:	83 e8 04             	sub    eax,0x4
c001ec6f:	eb 27                	jmp    c001ec98 <Vm::faultHandler(regs*)+0x43c>
c001ec71:	83 c0 04             	add    eax,0x4
c001ec74:	eb 22                	jmp    c001ec98 <Vm::faultHandler(regs*)+0x43c>
c001ec76:	66 ed                	in     ax,dx
c001ec78:	0f b7 c0             	movzx  eax,ax
c001ec7b:	57                   	push   edi
c001ec7c:	50                   	push   eax
c001ec7d:	51                   	push   ecx
c001ec7e:	56                   	push   esi
c001ec7f:	e8 ad fb ff ff       	call   c001e831 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001ec84:	83 c4 10             	add    esp,0x10
c001ec87:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ec8a:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ec8e:	74 05                	je     c001ec95 <Vm::faultHandler(regs*)+0x439>
c001ec90:	83 e8 02             	sub    eax,0x2
c001ec93:	eb 03                	jmp    c001ec98 <Vm::faultHandler(regs*)+0x43c>
c001ec95:	83 c0 02             	add    eax,0x2
c001ec98:	25 ff ff 00 00       	and    eax,0xffff
c001ec9d:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001eca0:	e9 27 02 00 00       	jmp    c001eecc <Vm::faultHandler(regs*)+0x670>
c001eca5:	8d 46 ff             	lea    eax,[esi-0x1]
c001eca8:	3c 05                	cmp    al,0x5
c001ecaa:	77 24                	ja     c001ecd0 <Vm::faultHandler(regs*)+0x474>
c001ecac:	0f b6 c0             	movzx  eax,al
c001ecaf:	ff 24 85 0c bd 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd42f4]
c001ecb6:	0f b7 fd             	movzx  edi,bp
c001ecb9:	eb 15                	jmp    c001ecd0 <Vm::faultHandler(regs*)+0x474>
c001ecbb:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001ecbf:	eb 0f                	jmp    c001ecd0 <Vm::faultHandler(regs*)+0x474>
c001ecc1:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001ecc5:	eb 09                	jmp    c001ecd0 <Vm::faultHandler(regs*)+0x474>
c001ecc7:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001eccb:	eb 03                	jmp    c001ecd0 <Vm::faultHandler(regs*)+0x474>
c001eccd:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001ecd0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ecd3:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ecd8:	74 29                	je     c001ed03 <Vm::faultHandler(regs*)+0x4a7>
c001ecda:	3d ff ff 00 00       	cmp    eax,0xffff
c001ecdf:	76 22                	jbe    c001ed03 <Vm::faultHandler(regs*)+0x4a7>
c001ece1:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ece5:	50                   	push   eax
c001ece6:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ecea:	50                   	push   eax
c001eceb:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ecef:	50                   	push   eax
c001ecf0:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ecf4:	50                   	push   eax
c001ecf5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ecf9:	50                   	push   eax
c001ecfa:	6a 6e                	push   0x6e
c001ecfc:	6a 6e                	push   0x6e
c001ecfe:	e9 8c 00 00 00       	jmp    c001ed8f <Vm::faultHandler(regs*)+0x533>
c001ed03:	0f b7 c0             	movzx  eax,ax
c001ed06:	52                   	push   edx
c001ed07:	52                   	push   edx
c001ed08:	50                   	push   eax
c001ed09:	57                   	push   edi
c001ed0a:	e8 d9 fa ff ff       	call   c001e7e8 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001ed0f:	59                   	pop    ecx
c001ed10:	0f b6 c0             	movzx  eax,al
c001ed13:	5e                   	pop    esi
c001ed14:	50                   	push   eax
c001ed15:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ed19:	50                   	push   eax
c001ed1a:	e8 4b f7 ff ff       	call   c001e46a <Vm::outbv(unsigned short, unsigned char)>
c001ed1f:	83 c4 10             	add    esp,0x10
c001ed22:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ed25:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ed29:	74 03                	je     c001ed2e <Vm::faultHandler(regs*)+0x4d2>
c001ed2b:	48                   	dec    eax
c001ed2c:	eb 01                	jmp    c001ed2f <Vm::faultHandler(regs*)+0x4d3>
c001ed2e:	40                   	inc    eax
c001ed2f:	0f b7 c0             	movzx  eax,ax
c001ed32:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ed35:	e9 92 01 00 00       	jmp    c001eecc <Vm::faultHandler(regs*)+0x670>
c001ed3a:	8d 46 ff             	lea    eax,[esi-0x1]
c001ed3d:	3c 05                	cmp    al,0x5
c001ed3f:	77 1f                	ja     c001ed60 <Vm::faultHandler(regs*)+0x504>
c001ed41:	0f b6 c0             	movzx  eax,al
c001ed44:	ff 24 85 24 bd 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd42dc]
c001ed4b:	89 ef                	mov    edi,ebp
c001ed4d:	eb 11                	jmp    c001ed60 <Vm::faultHandler(regs*)+0x504>
c001ed4f:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001ed52:	eb 0c                	jmp    c001ed60 <Vm::faultHandler(regs*)+0x504>
c001ed54:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001ed57:	eb 07                	jmp    c001ed60 <Vm::faultHandler(regs*)+0x504>
c001ed59:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001ed5c:	eb 02                	jmp    c001ed60 <Vm::faultHandler(regs*)+0x504>
c001ed5e:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001ed60:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001ed63:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ed68:	74 37                	je     c001eda1 <Vm::faultHandler(regs*)+0x545>
c001ed6a:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001ed70:	76 2f                	jbe    c001eda1 <Vm::faultHandler(regs*)+0x545>
c001ed72:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ed76:	50                   	push   eax
c001ed77:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ed7b:	50                   	push   eax
c001ed7c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ed80:	50                   	push   eax
c001ed81:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ed85:	50                   	push   eax
c001ed86:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ed8a:	50                   	push   eax
c001ed8b:	6a 6f                	push   0x6f
c001ed8d:	6a 6f                	push   0x6f
c001ed8f:	68 b2 bc 02 c0       	push   0xc002bcb2
c001ed94:	e8 34 39 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c001ed99:	83 c4 20             	add    esp,0x20
c001ed9c:	e9 86 01 00 00       	jmp    c001ef27 <Vm::faultHandler(regs*)+0x6cb>
c001eda1:	0f b7 d7             	movzx  edx,di
c001eda4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001eda7:	0f b7 c6             	movzx  eax,si
c001edaa:	81 e1 00 04 00 00    	and    ecx,0x400
c001edb0:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001edb3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001edb8:	74 1d                	je     c001edd7 <Vm::faultHandler(regs*)+0x57b>
c001edba:	55                   	push   ebp
c001edbb:	55                   	push   ebp
c001edbc:	50                   	push   eax
c001edbd:	52                   	push   edx
c001edbe:	e8 48 fa ff ff       	call   c001e80b <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001edc3:	83 c4 10             	add    esp,0x10
c001edc6:	89 fa                	mov    edx,edi
c001edc8:	ef                   	out    dx,eax
c001edc9:	85 c9                	test   ecx,ecx
c001edcb:	74 05                	je     c001edd2 <Vm::faultHandler(regs*)+0x576>
c001edcd:	83 ee 04             	sub    esi,0x4
c001edd0:	eb 21                	jmp    c001edf3 <Vm::faultHandler(regs*)+0x597>
c001edd2:	83 c6 04             	add    esi,0x4
c001edd5:	eb 1c                	jmp    c001edf3 <Vm::faultHandler(regs*)+0x597>
c001edd7:	55                   	push   ebp
c001edd8:	55                   	push   ebp
c001edd9:	50                   	push   eax
c001edda:	52                   	push   edx
c001eddb:	e8 19 fa ff ff       	call   c001e7f9 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001ede0:	83 c4 10             	add    esp,0x10
c001ede3:	89 fa                	mov    edx,edi
c001ede5:	66 ef                	out    dx,ax
c001ede7:	85 c9                	test   ecx,ecx
c001ede9:	74 05                	je     c001edf0 <Vm::faultHandler(regs*)+0x594>
c001edeb:	83 ee 02             	sub    esi,0x2
c001edee:	eb 03                	jmp    c001edf3 <Vm::faultHandler(regs*)+0x597>
c001edf0:	83 c6 02             	add    esi,0x2
c001edf3:	81 e6 ff ff 00 00    	and    esi,0xffff
c001edf9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001edfc:	e9 cb 00 00 00       	jmp    c001eecc <Vm::faultHandler(regs*)+0x670>
c001ee01:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ee08:	83 ec 0c             	sub    esp,0xc
c001ee0b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ee0f:	50                   	push   eax
c001ee10:	e8 42 f6 ff ff       	call   c001e457 <Vm::inbv(unsigned short)>
c001ee15:	0f b6 c0             	movzx  eax,al
c001ee18:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ee1b:	eb 3f                	jmp    c001ee5c <Vm::faultHandler(regs*)+0x600>
c001ee1d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee22:	74 07                	je     c001ee2b <Vm::faultHandler(regs*)+0x5cf>
c001ee24:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ee28:	ed                   	in     eax,dx
c001ee29:	eb 14                	jmp    c001ee3f <Vm::faultHandler(regs*)+0x5e3>
c001ee2b:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001ee2e:	66 31 f6             	xor    si,si
c001ee31:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001ee34:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ee38:	66 ed                	in     ax,dx
c001ee3a:	0f b7 c0             	movzx  eax,ax
c001ee3d:	09 f0                	or     eax,esi
c001ee3f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ee42:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ee46:	e9 84 00 00 00       	jmp    c001eecf <Vm::faultHandler(regs*)+0x673>
c001ee4b:	52                   	push   edx
c001ee4c:	52                   	push   edx
c001ee4d:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ee51:	50                   	push   eax
c001ee52:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ee56:	50                   	push   eax
c001ee57:	e8 0e f6 ff ff       	call   c001e46a <Vm::outbv(unsigned short, unsigned char)>
c001ee5c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ee60:	eb 53                	jmp    c001eeb5 <Vm::faultHandler(regs*)+0x659>
c001ee62:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ee65:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ee69:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee6e:	74 03                	je     c001ee73 <Vm::faultHandler(regs*)+0x617>
c001ee70:	ef                   	out    dx,eax
c001ee71:	eb cf                	jmp    c001ee42 <Vm::faultHandler(regs*)+0x5e6>
c001ee73:	66 ef                	out    dx,ax
c001ee75:	eb cb                	jmp    c001ee42 <Vm::faultHandler(regs*)+0x5e6>
c001ee77:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ee7e:	83 ec 0c             	sub    esp,0xc
c001ee81:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ee85:	50                   	push   eax
c001ee86:	e8 cc f5 ff ff       	call   c001e457 <Vm::inbv(unsigned short)>
c001ee8b:	0f b6 c0             	movzx  eax,al
c001ee8e:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ee91:	eb 1f                	jmp    c001eeb2 <Vm::faultHandler(regs*)+0x656>
c001ee93:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ee96:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee9b:	74 03                	je     c001eea0 <Vm::faultHandler(regs*)+0x644>
c001ee9d:	ed                   	in     eax,dx
c001ee9e:	eb 0d                	jmp    c001eead <Vm::faultHandler(regs*)+0x651>
c001eea0:	66 ed                	in     ax,dx
c001eea2:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001eea5:	0f b7 c0             	movzx  eax,ax
c001eea8:	66 31 d2             	xor    dx,dx
c001eeab:	09 d0                	or     eax,edx
c001eead:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001eeb0:	eb 1a                	jmp    c001eecc <Vm::faultHandler(regs*)+0x670>
c001eeb2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eeb5:	83 c4 10             	add    esp,0x10
c001eeb8:	eb 15                	jmp    c001eecf <Vm::faultHandler(regs*)+0x673>
c001eeba:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001eebd:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001eec0:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eec5:	74 03                	je     c001eeca <Vm::faultHandler(regs*)+0x66e>
c001eec7:	ef                   	out    dx,eax
c001eec8:	eb 02                	jmp    c001eecc <Vm::faultHandler(regs*)+0x670>
c001eeca:	66 ef                	out    dx,ax
c001eecc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eecf:	b0 01                	mov    al,0x1
c001eed1:	eb 56                	jmp    c001ef29 <Vm::faultHandler(regs*)+0x6cd>
c001eed3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001eed7:	50                   	push   eax
c001eed8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001eedc:	50                   	push   eax
c001eedd:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eee1:	50                   	push   eax
c001eee2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001eee6:	50                   	push   eax
c001eee7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eeeb:	50                   	push   eax
c001eeec:	52                   	push   edx
c001eeed:	52                   	push   edx
c001eeee:	68 df bc 02 c0       	push   0xc002bcdf
c001eef3:	e8 d5 37 ff ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c001eef8:	83 c4 20             	add    esp,0x20
c001eefb:	83 ec 0c             	sub    esp,0xc
c001eefe:	6a 60                	push   0x60
c001ef00:	e8 52 f5 ff ff       	call   c001e457 <Vm::inbv(unsigned short)>
c001ef05:	83 c4 10             	add    esp,0x10
c001ef08:	3c 1c                	cmp    al,0x1c
c001ef0a:	74 04                	je     c001ef10 <Vm::faultHandler(regs*)+0x6b4>
c001ef0c:	3c 5a                	cmp    al,0x5a
c001ef0e:	75 eb                	jne    c001eefb <Vm::faultHandler(regs*)+0x69f>
c001ef10:	3c 5a                	cmp    al,0x5a
c001ef12:	74 04                	je     c001ef18 <Vm::faultHandler(regs*)+0x6bc>
c001ef14:	3c 1c                	cmp    al,0x1c
c001ef16:	75 0f                	jne    c001ef27 <Vm::faultHandler(regs*)+0x6cb>
c001ef18:	83 ec 0c             	sub    esp,0xc
c001ef1b:	6a 60                	push   0x60
c001ef1d:	e8 35 f5 ff ff       	call   c001e457 <Vm::inbv(unsigned short)>
c001ef22:	83 c4 10             	add    esp,0x10
c001ef25:	eb e9                	jmp    c001ef10 <Vm::faultHandler(regs*)+0x6b4>
c001ef27:	31 c0                	xor    eax,eax
c001ef29:	83 c4 1c             	add    esp,0x1c
c001ef2c:	5b                   	pop    ebx
c001ef2d:	5e                   	pop    esi
c001ef2e:	5f                   	pop    edi
c001ef2f:	5d                   	pop    ebp
c001ef30:	c3                   	ret    

c001ef31 <Vm::fpuInternalTo32(unsigned long long)>:
c001ef31:	57                   	push   edi
c001ef32:	56                   	push   esi
c001ef33:	53                   	push   ebx
c001ef34:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef3c:	89 d6                	mov    esi,edx
c001ef3e:	89 d7                	mov    edi,edx
c001ef40:	89 c1                	mov    ecx,eax
c001ef42:	c1 ef 14             	shr    edi,0x14
c001ef45:	89 d3                	mov    ebx,edx
c001ef47:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001ef4d:	31 d2                	xor    edx,edx
c001ef4f:	89 f8                	mov    eax,edi
c001ef51:	81 e6 00 00 00 80    	and    esi,0x80000000
c001ef57:	bf ff 00 00 00       	mov    edi,0xff
c001ef5c:	05 80 fc ff ff       	add    eax,0xfffffc80
c001ef61:	83 d2 ff             	adc    edx,0xffffffff
c001ef64:	39 c7                	cmp    edi,eax
c001ef66:	bf 00 00 00 00       	mov    edi,0x0
c001ef6b:	19 d7                	sbb    edi,edx
c001ef6d:	72 15                	jb     c001ef84 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001ef6f:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001ef73:	c1 e0 17             	shl    eax,0x17
c001ef76:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001ef7c:	09 f1                	or     ecx,esi
c001ef7e:	09 c1                	or     ecx,eax
c001ef80:	89 cf                	mov    edi,ecx
c001ef82:	eb 02                	jmp    c001ef86 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001ef84:	31 ff                	xor    edi,edi
c001ef86:	89 f8                	mov    eax,edi
c001ef88:	5b                   	pop    ebx
c001ef89:	5e                   	pop    esi
c001ef8a:	5f                   	pop    edi
c001ef8b:	c3                   	ret    

c001ef8c <Vm::fpuInternalTo64(unsigned long long)>:
c001ef8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ef94:	c3                   	ret    

c001ef95 <Vm::fpu32ToInternal(unsigned int)>:
c001ef95:	57                   	push   edi
c001ef96:	31 ff                	xor    edi,edi
c001ef98:	56                   	push   esi
c001ef99:	53                   	push   ebx
c001ef9a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef9e:	89 cb                	mov    ebx,ecx
c001efa0:	89 ce                	mov    esi,ecx
c001efa2:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001efa8:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001efae:	c1 e9 17             	shr    ecx,0x17
c001efb1:	89 f0                	mov    eax,esi
c001efb3:	0f b6 d1             	movzx  edx,cl
c001efb6:	81 c2 80 03 00 00    	add    edx,0x380
c001efbc:	89 d1                	mov    ecx,edx
c001efbe:	89 fa                	mov    edx,edi
c001efc0:	c1 e1 14             	shl    ecx,0x14
c001efc3:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001efc7:	c1 e0 1d             	shl    eax,0x1d
c001efca:	89 d7                	mov    edi,edx
c001efcc:	89 c6                	mov    esi,eax
c001efce:	89 ca                	mov    edx,ecx
c001efd0:	89 f0                	mov    eax,esi
c001efd2:	09 fa                	or     edx,edi
c001efd4:	09 da                	or     edx,ebx
c001efd6:	5b                   	pop    ebx
c001efd7:	5e                   	pop    esi
c001efd8:	5f                   	pop    edi
c001efd9:	c3                   	ret    

c001efda <Vm::fpu64ToInternal(unsigned long long)>:
c001efda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efde:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001efe2:	c3                   	ret    

c001efe3 <Vm::fpuFloatToLong(unsigned long long)>:
c001efe3:	57                   	push   edi
c001efe4:	31 c0                	xor    eax,eax
c001efe6:	56                   	push   esi
c001efe7:	31 d2                	xor    edx,edx
c001efe9:	53                   	push   ebx
c001efea:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001efee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001eff2:	89 d9                	mov    ecx,ebx
c001eff4:	c1 e9 14             	shr    ecx,0x14
c001eff7:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001effd:	89 cf                	mov    edi,ecx
c001efff:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f005:	78 33                	js     c001f03a <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f007:	89 d9                	mov    ecx,ebx
c001f009:	89 f0                	mov    eax,esi
c001f00b:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f011:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f017:	89 ca                	mov    edx,ecx
c001f019:	b9 34 00 00 00       	mov    ecx,0x34
c001f01e:	29 f9                	sub    ecx,edi
c001f020:	0f ad d0             	shrd   eax,edx,cl
c001f023:	d3 fa                	sar    edx,cl
c001f025:	f6 c1 20             	test   cl,0x20
c001f028:	74 05                	je     c001f02f <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f02a:	89 d0                	mov    eax,edx
c001f02c:	c1 fa 1f             	sar    edx,0x1f
c001f02f:	85 db                	test   ebx,ebx
c001f031:	79 07                	jns    c001f03a <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f033:	f7 d8                	neg    eax
c001f035:	83 d2 00             	adc    edx,0x0
c001f038:	f7 da                	neg    edx
c001f03a:	5b                   	pop    ebx
c001f03b:	5e                   	pop    esi
c001f03c:	5f                   	pop    edi
c001f03d:	c3                   	ret    

c001f03e <Vm::fpuULongToFloat(unsigned long long)>:
c001f03e:	57                   	push   edi
c001f03f:	31 c9                	xor    ecx,ecx
c001f041:	56                   	push   esi
c001f042:	53                   	push   ebx
c001f043:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f047:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f04b:	0f ba e7 14          	bt     edi,0x14
c001f04f:	72 07                	jb     c001f058 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f051:	01 f6                	add    esi,esi
c001f053:	11 ff                	adc    edi,edi
c001f055:	41                   	inc    ecx
c001f056:	eb f3                	jmp    c001f04b <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f058:	89 fa                	mov    edx,edi
c001f05a:	89 f0                	mov    eax,esi
c001f05c:	bb 33 04 00 00       	mov    ebx,0x433
c001f061:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f067:	29 cb                	sub    ebx,ecx
c001f069:	89 d9                	mov    ecx,ebx
c001f06b:	5b                   	pop    ebx
c001f06c:	c1 e1 14             	shl    ecx,0x14
c001f06f:	5e                   	pop    esi
c001f070:	09 ca                	or     edx,ecx
c001f072:	5f                   	pop    edi
c001f073:	c3                   	ret    

c001f074 <Vm::fpuLongToFloat(long long)>:
c001f074:	56                   	push   esi
c001f075:	31 c0                	xor    eax,eax
c001f077:	53                   	push   ebx
c001f078:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f07c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f080:	39 c8                	cmp    eax,ecx
c001f082:	19 d8                	sbb    eax,ebx
c001f084:	7d 04                	jge    c001f08a <Vm::fpuLongToFloat(long long)+0x16>
c001f086:	31 f6                	xor    esi,esi
c001f088:	eb 0c                	jmp    c001f096 <Vm::fpuLongToFloat(long long)+0x22>
c001f08a:	f7 d9                	neg    ecx
c001f08c:	be 01 00 00 00       	mov    esi,0x1
c001f091:	83 d3 00             	adc    ebx,0x0
c001f094:	f7 db                	neg    ebx
c001f096:	31 c0                	xor    eax,eax
c001f098:	0f ba e3 14          	bt     ebx,0x14
c001f09c:	72 07                	jb     c001f0a5 <Vm::fpuLongToFloat(long long)+0x31>
c001f09e:	01 c9                	add    ecx,ecx
c001f0a0:	11 db                	adc    ebx,ebx
c001f0a2:	40                   	inc    eax
c001f0a3:	eb f3                	jmp    c001f098 <Vm::fpuLongToFloat(long long)+0x24>
c001f0a5:	ba 33 04 00 00       	mov    edx,0x433
c001f0aa:	29 c2                	sub    edx,eax
c001f0ac:	89 c8                	mov    eax,ecx
c001f0ae:	c1 e2 14             	shl    edx,0x14
c001f0b1:	89 d9                	mov    ecx,ebx
c001f0b3:	89 f3                	mov    ebx,esi
c001f0b5:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f0bb:	09 ca                	or     edx,ecx
c001f0bd:	84 db                	test   bl,bl
c001f0bf:	74 06                	je     c001f0c7 <Vm::fpuLongToFloat(long long)+0x53>
c001f0c1:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f0c7:	5b                   	pop    ebx
c001f0c8:	5e                   	pop    esi
c001f0c9:	c3                   	ret    

c001f0ca <Vm::fpuGet0()>:
c001f0ca:	31 c0                	xor    eax,eax
c001f0cc:	31 d2                	xor    edx,edx
c001f0ce:	c3                   	ret    

c001f0cf <Vm::fpuGet1()>:
c001f0cf:	b8 01 00 00 00       	mov    eax,0x1
c001f0d4:	31 d2                	xor    edx,edx
c001f0d6:	c3                   	ret    

c001f0d7 <Vm::fpuGetPi()>:
c001f0d7:	b8 03 00 00 00       	mov    eax,0x3
c001f0dc:	31 d2                	xor    edx,edx
c001f0de:	c3                   	ret    

c001f0df <Vm::fpuGetLog2E()>:
c001f0df:	83 ec 18             	sub    esp,0x18
c001f0e2:	68 3c bd 02 c0       	push   0xc002bd3c
c001f0e7:	e8 4d ad ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c001f0ec:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f0f1:	31 d2                	xor    edx,edx
c001f0f3:	83 c4 1c             	add    esp,0x1c
c001f0f6:	c3                   	ret    

c001f0f7 <Vm::fpuGetLogE2()>:
c001f0f7:	83 ec 18             	sub    esp,0x18
c001f0fa:	68 48 bd 02 c0       	push   0xc002bd48
c001f0ff:	e8 35 ad ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c001f104:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f109:	31 d2                	xor    edx,edx
c001f10b:	83 c4 1c             	add    esp,0x1c
c001f10e:	c3                   	ret    

c001f10f <Vm::fpuGetLog210()>:
c001f10f:	83 ec 18             	sub    esp,0x18
c001f112:	68 54 bd 02 c0       	push   0xc002bd54
c001f117:	e8 1d ad ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c001f11c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f121:	31 d2                	xor    edx,edx
c001f123:	83 c4 1c             	add    esp,0x1c
c001f126:	c3                   	ret    

c001f127 <Vm::fpuGetLog102()>:
c001f127:	83 ec 18             	sub    esp,0x18
c001f12a:	68 61 bd 02 c0       	push   0xc002bd61
c001f12f:	e8 05 ad ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c001f134:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f139:	31 d2                	xor    edx,edx
c001f13b:	83 c4 1c             	add    esp,0x1c
c001f13e:	c3                   	ret    

c001f13f <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f13f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f143:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f147:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f14b:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f14f:	0f 92 c0             	setb   al
c001f152:	c3                   	ret    

c001f153 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f153:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f15b:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f15f:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f163:	09 c2                	or     edx,eax
c001f165:	0f 94 c0             	sete   al
c001f168:	c3                   	ret    

c001f169 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f169:	57                   	push   edi
c001f16a:	56                   	push   esi
c001f16b:	53                   	push   ebx
c001f16c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f170:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f174:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f178:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f17c:	57                   	push   edi
c001f17d:	56                   	push   esi
c001f17e:	53                   	push   ebx
c001f17f:	51                   	push   ecx
c001f180:	e8 ce ff ff ff       	call   c001f153 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f185:	83 c4 10             	add    esp,0x10
c001f188:	88 c2                	mov    dl,al
c001f18a:	31 c0                	xor    eax,eax
c001f18c:	84 d2                	test   dl,dl
c001f18e:	75 0c                	jne    c001f19c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f190:	57                   	push   edi
c001f191:	56                   	push   esi
c001f192:	53                   	push   ebx
c001f193:	51                   	push   ecx
c001f194:	e8 a6 ff ff ff       	call   c001f13f <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f199:	83 c4 10             	add    esp,0x10
c001f19c:	83 e0 01             	and    eax,0x1
c001f19f:	5b                   	pop    ebx
c001f1a0:	88 c1                	mov    cl,al
c001f1a2:	83 e2 01             	and    edx,0x1
c001f1a5:	a0 e1 0e 03 c0       	mov    al,ds:0xc0030ee1
c001f1aa:	c1 e2 06             	shl    edx,0x6
c001f1ad:	83 e0 ba             	and    eax,0xffffffba
c001f1b0:	5e                   	pop    esi
c001f1b1:	09 c8                	or     eax,ecx
c001f1b3:	5f                   	pop    edi
c001f1b4:	09 d0                	or     eax,edx
c001f1b6:	a2 e1 0e 03 c0       	mov    ds:0xc0030ee1,al
c001f1bb:	c3                   	ret    

c001f1bc <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f1bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f1c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f1c4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f1c8:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f1cc:	c3                   	ret    

c001f1cd <Vm::fpuAbs(unsigned long long)>:
c001f1cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f1d5:	c3                   	ret    

c001f1d6 <Vm::fpuChs(unsigned long long)>:
c001f1d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f1de:	f7 d8                	neg    eax
c001f1e0:	83 d2 00             	adc    edx,0x0
c001f1e3:	f7 da                	neg    edx
c001f1e5:	c3                   	ret    

c001f1e6 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f1e6:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f1ea:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f1ef:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f1f3:	eb c7                	jmp    c001f1bc <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f1f5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f1f5:	53                   	push   ebx
c001f1f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f1fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f1fe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f202:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f206:	0f af ca             	imul   ecx,edx
c001f209:	0f af d8             	imul   ebx,eax
c001f20c:	f7 e2                	mul    edx
c001f20e:	01 d9                	add    ecx,ebx
c001f210:	5b                   	pop    ebx
c001f211:	01 ca                	add    edx,ecx
c001f213:	c3                   	ret    

c001f214 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f214:	83 ec 0c             	sub    esp,0xc
c001f217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f21b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f21f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f227:	e8 e8 74 00 00       	call   c0026714 <__udivdi3>
c001f22c:	83 c4 1c             	add    esp,0x1c
c001f22f:	c3                   	ret    

c001f230 <Vm::fpuSquare(unsigned long long)>:
c001f230:	50                   	push   eax
c001f231:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f235:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f239:	52                   	push   edx
c001f23a:	50                   	push   eax
c001f23b:	52                   	push   edx
c001f23c:	50                   	push   eax
c001f23d:	e8 b3 ff ff ff       	call   c001f1f5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f242:	83 c4 14             	add    esp,0x14
c001f245:	c3                   	ret    

c001f246 <Vm::fpuGetReg(int)>:
c001f246:	83 ec 0c             	sub    esp,0xc
c001f249:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f24e:	76 10                	jbe    c001f260 <Vm::fpuGetReg(int)+0x1a>
c001f250:	83 ec 0c             	sub    esp,0xc
c001f253:	68 6e bd 02 c0       	push   0xc002bd6e
c001f258:	e8 dc ab ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c001f25d:	83 c4 10             	add    esp,0x10
c001f260:	a0 e1 0e 03 c0       	mov    al,ds:0xc0030ee1
c001f265:	b9 08 00 00 00       	mov    ecx,0x8
c001f26a:	c0 e8 03             	shr    al,0x3
c001f26d:	83 e0 07             	and    eax,0x7
c001f270:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f274:	99                   	cdq    
c001f275:	f7 f9                	idiv   ecx
c001f277:	8b 04 d5 e4 0e 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcf11c]
c001f27e:	8b 14 d5 e8 0e 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcf118]
c001f285:	83 c4 0c             	add    esp,0xc
c001f288:	c3                   	ret    

c001f289 <Vm::fpuSetReg(int, unsigned long long)>:
c001f289:	57                   	push   edi
c001f28a:	56                   	push   esi
c001f28b:	52                   	push   edx
c001f28c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f290:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f294:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f299:	76 10                	jbe    c001f2ab <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f29b:	83 ec 0c             	sub    esp,0xc
c001f29e:	68 81 bd 02 c0       	push   0xc002bd81
c001f2a3:	e8 91 ab ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c001f2a8:	83 c4 10             	add    esp,0x10
c001f2ab:	a0 e1 0e 03 c0       	mov    al,ds:0xc0030ee1
c001f2b0:	b9 08 00 00 00       	mov    ecx,0x8
c001f2b5:	c0 e8 03             	shr    al,0x3
c001f2b8:	83 e0 07             	and    eax,0x7
c001f2bb:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f2bf:	99                   	cdq    
c001f2c0:	f7 f9                	idiv   ecx
c001f2c2:	89 34 d5 e4 0e 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf11c],esi
c001f2c9:	89 3c d5 e8 0e 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf118],edi
c001f2d0:	58                   	pop    eax
c001f2d1:	5e                   	pop    esi
c001f2d2:	5f                   	pop    edi
c001f2d3:	c3                   	ret    

c001f2d4 <Vm::fpuPush(unsigned long long)>:
c001f2d4:	a0 e1 0e 03 c0       	mov    al,ds:0xc0030ee1
c001f2d9:	c0 e8 03             	shr    al,0x3
c001f2dc:	83 e0 07             	and    eax,0x7
c001f2df:	83 c0 07             	add    eax,0x7
c001f2e2:	88 c2                	mov    dl,al
c001f2e4:	83 e0 07             	and    eax,0x7
c001f2e7:	83 e2 07             	and    edx,0x7
c001f2ea:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f2f1:	8a 15 e1 0e 03 c0    	mov    dl,BYTE PTR ds:0xc0030ee1
c001f2f7:	83 e2 c7             	and    edx,0xffffffc7
c001f2fa:	09 ca                	or     edx,ecx
c001f2fc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f300:	88 15 e1 0e 03 c0    	mov    BYTE PTR ds:0xc0030ee1,dl
c001f306:	89 0c c5 e8 0e 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf118],ecx
c001f30d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f311:	89 14 c5 e4 0e 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf11c],edx
c001f318:	a1 24 0f 03 c0       	mov    eax,ds:0xc0030f24
c001f31d:	83 f8 08             	cmp    eax,0x8
c001f320:	75 08                	jne    c001f32a <Vm::fpuPush(unsigned long long)+0x56>
c001f322:	80 0d e0 0e 03 c0 40 	or     BYTE PTR ds:0xc0030ee0,0x40
c001f329:	c3                   	ret    
c001f32a:	40                   	inc    eax
c001f32b:	a3 24 0f 03 c0       	mov    ds:0xc0030f24,eax
c001f330:	c3                   	ret    

c001f331 <Vm::fpuPop()>:
c001f331:	8a 0d e1 0e 03 c0    	mov    cl,BYTE PTR ds:0xc0030ee1
c001f337:	53                   	push   ebx
c001f338:	c0 e9 03             	shr    cl,0x3
c001f33b:	8a 1d e1 0e 03 c0    	mov    bl,BYTE PTR ds:0xc0030ee1
c001f341:	83 e1 07             	and    ecx,0x7
c001f344:	83 e3 c7             	and    ebx,0xffffffc7
c001f347:	8b 04 cd e4 0e 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcf11c]
c001f34e:	8b 14 cd e8 0e 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcf118]
c001f355:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f35c:	83 e1 38             	and    ecx,0x38
c001f35f:	09 d9                	or     ecx,ebx
c001f361:	88 0d e1 0e 03 c0    	mov    BYTE PTR ds:0xc0030ee1,cl
c001f367:	8b 0d 24 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030f24
c001f36d:	85 c9                	test   ecx,ecx
c001f36f:	74 09                	je     c001f37a <Vm::fpuPop()+0x49>
c001f371:	49                   	dec    ecx
c001f372:	89 0d 24 0f 03 c0    	mov    DWORD PTR ds:0xc0030f24,ecx
c001f378:	eb 07                	jmp    c001f381 <Vm::fpuPop()+0x50>
c001f37a:	80 0d e0 0e 03 c0 40 	or     BYTE PTR ds:0xc0030ee0,0x40
c001f381:	5b                   	pop    ebx
c001f382:	c3                   	ret    

c001f383 <Vm::x87Handler(regs*)>:
c001f383:	55                   	push   ebp
c001f384:	57                   	push   edi
c001f385:	56                   	push   esi
c001f386:	53                   	push   ebx
c001f387:	83 ec 1c             	sub    esp,0x1c
c001f38a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f38e:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f393:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f396:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f39e:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f3a2:	50                   	push   eax
c001f3a3:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f3a7:	50                   	push   eax
c001f3a8:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f3ac:	50                   	push   eax
c001f3ad:	53                   	push   ebx
c001f3ae:	e8 9f a1 ff ff       	call   c0019552 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f3b3:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f3b6:	83 c4 10             	add    esp,0x10
c001f3b9:	89 c6                	mov    esi,eax
c001f3bb:	80 fa d9             	cmp    dl,0xd9
c001f3be:	0f 85 52 01 00 00    	jne    c001f516 <Vm::x87Handler(regs*)+0x193>
c001f3c4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f3c8:	8d 50 20             	lea    edx,[eax+0x20]
c001f3cb:	80 fa 0e             	cmp    dl,0xe
c001f3ce:	0f 87 86 00 00 00    	ja     c001f45a <Vm::x87Handler(regs*)+0xd7>
c001f3d4:	0f b6 d2             	movzx  edx,dl
c001f3d7:	ff 24 95 94 bd 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd426c]
c001f3de:	e8 e7 fc ff ff       	call   c001f0ca <Vm::fpuGet0()>
c001f3e3:	eb 05                	jmp    c001f3ea <Vm::x87Handler(regs*)+0x67>
c001f3e5:	e8 e5 fc ff ff       	call   c001f0cf <Vm::fpuGet1()>
c001f3ea:	57                   	push   edi
c001f3eb:	57                   	push   edi
c001f3ec:	52                   	push   edx
c001f3ed:	50                   	push   eax
c001f3ee:	e8 e1 fe ff ff       	call   c001f2d4 <Vm::fpuPush(unsigned long long)>
c001f3f3:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f3f7:	83 c4 10             	add    esp,0x10
c001f3fa:	b0 01                	mov    al,0x1
c001f3fc:	e9 e3 09 00 00       	jmp    c001fde4 <Vm::x87Handler(regs*)+0xa61>
c001f401:	83 ec 0c             	sub    esp,0xc
c001f404:	6a 00                	push   0x0
c001f406:	e8 3b fe ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001f40b:	59                   	pop    ecx
c001f40c:	5e                   	pop    esi
c001f40d:	52                   	push   edx
c001f40e:	50                   	push   eax
c001f40f:	e8 c2 fd ff ff       	call   c001f1d6 <Vm::fpuChs(unsigned long long)>
c001f414:	eb 13                	jmp    c001f429 <Vm::x87Handler(regs*)+0xa6>
c001f416:	83 ec 0c             	sub    esp,0xc
c001f419:	6a 00                	push   0x0
c001f41b:	e8 26 fe ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001f420:	5f                   	pop    edi
c001f421:	5d                   	pop    ebp
c001f422:	52                   	push   edx
c001f423:	50                   	push   eax
c001f424:	e8 a4 fd ff ff       	call   c001f1cd <Vm::fpuAbs(unsigned long long)>
c001f429:	83 c4 0c             	add    esp,0xc
c001f42c:	52                   	push   edx
c001f42d:	50                   	push   eax
c001f42e:	6a 00                	push   0x0
c001f430:	e8 54 fe ff ff       	call   c001f289 <Vm::fpuSetReg(int, unsigned long long)>
c001f435:	eb bc                	jmp    c001f3f3 <Vm::x87Handler(regs*)+0x70>
c001f437:	e8 d3 fc ff ff       	call   c001f10f <Vm::fpuGetLog210()>
c001f43c:	eb ac                	jmp    c001f3ea <Vm::x87Handler(regs*)+0x67>
c001f43e:	e8 9c fc ff ff       	call   c001f0df <Vm::fpuGetLog2E()>
c001f443:	eb a5                	jmp    c001f3ea <Vm::x87Handler(regs*)+0x67>
c001f445:	e8 8d fc ff ff       	call   c001f0d7 <Vm::fpuGetPi()>
c001f44a:	eb 9e                	jmp    c001f3ea <Vm::x87Handler(regs*)+0x67>
c001f44c:	e8 d6 fc ff ff       	call   c001f127 <Vm::fpuGetLog102()>
c001f451:	eb 97                	jmp    c001f3ea <Vm::x87Handler(regs*)+0x67>
c001f453:	e8 9f fc ff ff       	call   c001f0f7 <Vm::fpuGetLogE2()>
c001f458:	eb 90                	jmp    c001f3ea <Vm::x87Handler(regs*)+0x67>
c001f45a:	8d 50 40             	lea    edx,[eax+0x40]
c001f45d:	80 fa 07             	cmp    dl,0x7
c001f460:	77 15                	ja     c001f477 <Vm::x87Handler(regs*)+0xf4>
c001f462:	83 ec 0c             	sub    esp,0xc
c001f465:	2d c0 00 00 00       	sub    eax,0xc0
c001f46a:	50                   	push   eax
c001f46b:	e8 d6 fd ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001f470:	59                   	pop    ecx
c001f471:	5e                   	pop    esi
c001f472:	e9 75 ff ff ff       	jmp    c001f3ec <Vm::x87Handler(regs*)+0x69>
c001f477:	8d 50 38             	lea    edx,[eax+0x38]
c001f47a:	80 fa 07             	cmp    dl,0x7
c001f47d:	77 3c                	ja     c001f4bb <Vm::x87Handler(regs*)+0x138>
c001f47f:	83 ec 0c             	sub    esp,0xc
c001f482:	2d c8 00 00 00       	sub    eax,0xc8
c001f487:	50                   	push   eax
c001f488:	e8 b9 fd ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001f48d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f494:	89 c6                	mov    esi,eax
c001f496:	89 d7                	mov    edi,edx
c001f498:	e8 a9 fd ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001f49d:	83 c4 0c             	add    esp,0xc
c001f4a0:	52                   	push   edx
c001f4a1:	50                   	push   eax
c001f4a2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4a6:	2d c8 00 00 00       	sub    eax,0xc8
c001f4ab:	50                   	push   eax
c001f4ac:	e8 d8 fd ff ff       	call   c001f289 <Vm::fpuSetReg(int, unsigned long long)>
c001f4b1:	83 c4 0c             	add    esp,0xc
c001f4b4:	57                   	push   edi
c001f4b5:	56                   	push   esi
c001f4b6:	e9 73 ff ff ff       	jmp    c001f42e <Vm::x87Handler(regs*)+0xab>
c001f4bb:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f4bf:	84 d2                	test   dl,dl
c001f4c1:	75 0f                	jne    c001f4d2 <Vm::x87Handler(regs*)+0x14f>
c001f4c3:	83 ec 0c             	sub    esp,0xc
c001f4c6:	ff 36                	push   DWORD PTR [esi]
c001f4c8:	e8 c8 fa ff ff       	call   c001ef95 <Vm::fpu32ToInternal(unsigned int)>
c001f4cd:	e9 bf 00 00 00       	jmp    c001f591 <Vm::x87Handler(regs*)+0x20e>
c001f4d2:	80 fa 03             	cmp    dl,0x3
c001f4d5:	75 13                	jne    c001f4ea <Vm::x87Handler(regs*)+0x167>
c001f4d7:	e8 55 fe ff ff       	call   c001f331 <Vm::fpuPop()>
c001f4dc:	55                   	push   ebp
c001f4dd:	55                   	push   ebp
c001f4de:	52                   	push   edx
c001f4df:	50                   	push   eax
c001f4e0:	e8 4c fa ff ff       	call   c001ef31 <Vm::fpuInternalTo32(unsigned long long)>
c001f4e5:	e9 88 00 00 00       	jmp    c001f572 <Vm::x87Handler(regs*)+0x1ef>
c001f4ea:	80 fa 05             	cmp    dl,0x5
c001f4ed:	75 0e                	jne    c001f4fd <Vm::x87Handler(regs*)+0x17a>
c001f4ef:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f4f2:	66 a3 e2 0e 03 c0    	mov    ds:0xc0030ee2,ax
c001f4f8:	e9 df 00 00 00       	jmp    c001f5dc <Vm::x87Handler(regs*)+0x259>
c001f4fd:	31 c0                	xor    eax,eax
c001f4ff:	80 fa 07             	cmp    dl,0x7
c001f502:	0f 85 dc 08 00 00    	jne    c001fde4 <Vm::x87Handler(regs*)+0xa61>
c001f508:	66 a1 e2 0e 03 c0    	mov    ax,ds:0xc0030ee2
c001f50e:	66 89 06             	mov    WORD PTR [esi],ax
c001f511:	e9 c6 00 00 00       	jmp    c001f5dc <Vm::x87Handler(regs*)+0x259>
c001f516:	80 fa d8             	cmp    dl,0xd8
c001f519:	0f 84 c9 00 00 00    	je     c001f5e8 <Vm::x87Handler(regs*)+0x265>
c001f51f:	80 fa dc             	cmp    dl,0xdc
c001f522:	0f 84 0d 02 00 00    	je     c001f735 <Vm::x87Handler(regs*)+0x3b2>
c001f528:	80 fa de             	cmp    dl,0xde
c001f52b:	0f 84 cd 02 00 00    	je     c001f7fe <Vm::x87Handler(regs*)+0x47b>
c001f531:	80 fa dd             	cmp    dl,0xdd
c001f534:	0f 84 5f 04 00 00    	je     c001f999 <Vm::x87Handler(regs*)+0x616>
c001f53a:	80 fa da             	cmp    dl,0xda
c001f53d:	0f 84 24 05 00 00    	je     c001fa67 <Vm::x87Handler(regs*)+0x6e4>
c001f543:	80 fa df             	cmp    dl,0xdf
c001f546:	0f 84 68 05 00 00    	je     c001fab4 <Vm::x87Handler(regs*)+0x731>
c001f54c:	31 c0                	xor    eax,eax
c001f54e:	80 fa db             	cmp    dl,0xdb
c001f551:	0f 85 8d 08 00 00    	jne    c001fde4 <Vm::x87Handler(regs*)+0xa61>
c001f557:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f55b:	80 fa 03             	cmp    dl,0x3
c001f55e:	0f 85 70 06 00 00    	jne    c001fbd4 <Vm::x87Handler(regs*)+0x851>
c001f564:	e8 c8 fd ff ff       	call   c001f331 <Vm::fpuPop()>
c001f569:	55                   	push   ebp
c001f56a:	55                   	push   ebp
c001f56b:	52                   	push   edx
c001f56c:	50                   	push   eax
c001f56d:	e8 71 fa ff ff       	call   c001efe3 <Vm::fpuFloatToLong(unsigned long long)>
c001f572:	83 c4 10             	add    esp,0x10
c001f575:	89 06                	mov    DWORD PTR [esi],eax
c001f577:	eb 63                	jmp    c001f5dc <Vm::x87Handler(regs*)+0x259>
c001f579:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f57d:	84 d2                	test   dl,dl
c001f57f:	0f 85 e6 05 00 00    	jne    c001fb6b <Vm::x87Handler(regs*)+0x7e8>
c001f585:	57                   	push   edi
c001f586:	57                   	push   edi
c001f587:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f58a:	ff 36                	push   DWORD PTR [esi]
c001f58c:	e8 49 fa ff ff       	call   c001efda <Vm::fpu64ToInternal(unsigned long long)>
c001f591:	5e                   	pop    esi
c001f592:	5f                   	pop    edi
c001f593:	52                   	push   edx
c001f594:	50                   	push   eax
c001f595:	e8 3a fd ff ff       	call   c001f2d4 <Vm::fpuPush(unsigned long long)>
c001f59a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f59e:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f5a1:	e9 51 fe ff ff       	jmp    c001f3f7 <Vm::x87Handler(regs*)+0x74>
c001f5a6:	80 fa 03             	cmp    dl,0x3
c001f5a9:	0f 85 d7 06 00 00    	jne    c001fc86 <Vm::x87Handler(regs*)+0x903>
c001f5af:	57                   	push   edi
c001f5b0:	57                   	push   edi
c001f5b1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f5b4:	ff 36                	push   DWORD PTR [esi]
c001f5b6:	e8 1f fa ff ff       	call   c001efda <Vm::fpu64ToInternal(unsigned long long)>
c001f5bb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5c2:	89 c6                	mov    esi,eax
c001f5c4:	89 d7                	mov    edi,edx
c001f5c6:	e8 7b fc ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001f5cb:	57                   	push   edi
c001f5cc:	56                   	push   esi
c001f5cd:	52                   	push   edx
c001f5ce:	50                   	push   eax
c001f5cf:	e8 95 fb ff ff       	call   c001f169 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f5d4:	83 c4 20             	add    esp,0x20
c001f5d7:	e8 55 fd ff ff       	call   c001f331 <Vm::fpuPop()>
c001f5dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f5e0:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f5e3:	e9 12 fe ff ff       	jmp    c001f3fa <Vm::x87Handler(regs*)+0x77>
c001f5e8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5ec:	8d 50 40             	lea    edx,[eax+0x40]
c001f5ef:	80 fa 07             	cmp    dl,0x7
c001f5f2:	77 29                	ja     c001f61d <Vm::x87Handler(regs*)+0x29a>
c001f5f4:	83 ec 0c             	sub    esp,0xc
c001f5f7:	2d c0 00 00 00       	sub    eax,0xc0
c001f5fc:	50                   	push   eax
c001f5fd:	e8 44 fc ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001f602:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f609:	89 c6                	mov    esi,eax
c001f60b:	89 d7                	mov    edi,edx
c001f60d:	e8 34 fc ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001f612:	57                   	push   edi
c001f613:	56                   	push   esi
c001f614:	52                   	push   edx
c001f615:	50                   	push   eax
c001f616:	e8 a1 fb ff ff       	call   c001f1bc <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f61b:	eb 2f                	jmp    c001f64c <Vm::x87Handler(regs*)+0x2c9>
c001f61d:	8d 50 38             	lea    edx,[eax+0x38]
c001f620:	80 fa 07             	cmp    dl,0x7
c001f623:	77 2f                	ja     c001f654 <Vm::x87Handler(regs*)+0x2d1>
c001f625:	83 ec 0c             	sub    esp,0xc
c001f628:	2d c8 00 00 00       	sub    eax,0xc8
c001f62d:	50                   	push   eax
c001f62e:	e8 13 fc ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001f633:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f63a:	89 c6                	mov    esi,eax
c001f63c:	89 d7                	mov    edi,edx
c001f63e:	e8 03 fc ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001f643:	57                   	push   edi
c001f644:	56                   	push   esi
c001f645:	52                   	push   edx
c001f646:	50                   	push   eax
c001f647:	e8 a9 fb ff ff       	call   c001f1f5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f64c:	83 c4 1c             	add    esp,0x1c
c001f64f:	e9 d8 fd ff ff       	jmp    c001f42c <Vm::x87Handler(regs*)+0xa9>
c001f654:	8d 50 30             	lea    edx,[eax+0x30]
c001f657:	80 fa 07             	cmp    dl,0x7
c001f65a:	77 0d                	ja     c001f669 <Vm::x87Handler(regs*)+0x2e6>
c001f65c:	83 ec 0c             	sub    esp,0xc
c001f65f:	2d d0 00 00 00       	sub    eax,0xd0
c001f664:	e9 99 03 00 00       	jmp    c001fa02 <Vm::x87Handler(regs*)+0x67f>
c001f669:	8d 50 28             	lea    edx,[eax+0x28]
c001f66c:	80 fa 07             	cmp    dl,0x7
c001f66f:	77 0d                	ja     c001f67e <Vm::x87Handler(regs*)+0x2fb>
c001f671:	83 ec 0c             	sub    esp,0xc
c001f674:	2d d8 00 00 00       	sub    eax,0xd8
c001f679:	e9 c0 03 00 00       	jmp    c001fa3e <Vm::x87Handler(regs*)+0x6bb>
c001f67e:	8d 50 20             	lea    edx,[eax+0x20]
c001f681:	80 fa 07             	cmp    dl,0x7
c001f684:	77 1b                	ja     c001f6a1 <Vm::x87Handler(regs*)+0x31e>
c001f686:	83 ec 0c             	sub    esp,0xc
c001f689:	2d e0 00 00 00       	sub    eax,0xe0
c001f68e:	50                   	push   eax
c001f68f:	e8 b2 fb ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001f694:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f69b:	89 c6                	mov    esi,eax
c001f69d:	89 d7                	mov    edi,edx
c001f69f:	eb 22                	jmp    c001f6c3 <Vm::x87Handler(regs*)+0x340>
c001f6a1:	8d 50 18             	lea    edx,[eax+0x18]
c001f6a4:	80 fa 07             	cmp    dl,0x7
c001f6a7:	77 2d                	ja     c001f6d6 <Vm::x87Handler(regs*)+0x353>
c001f6a9:	83 ec 0c             	sub    esp,0xc
c001f6ac:	6a 00                	push   0x0
c001f6ae:	e8 93 fb ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001f6b3:	89 c6                	mov    esi,eax
c001f6b5:	89 d7                	mov    edi,edx
c001f6b7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6bb:	2d e8 00 00 00       	sub    eax,0xe8
c001f6c0:	89 04 24             	mov    DWORD PTR [esp],eax
c001f6c3:	e8 7e fb ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001f6c8:	57                   	push   edi
c001f6c9:	56                   	push   esi
c001f6ca:	52                   	push   edx
c001f6cb:	50                   	push   eax
c001f6cc:	e8 15 fb ff ff       	call   c001f1e6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f6d1:	e9 76 ff ff ff       	jmp    c001f64c <Vm::x87Handler(regs*)+0x2c9>
c001f6d6:	8d 50 10             	lea    edx,[eax+0x10]
c001f6d9:	80 fa 07             	cmp    dl,0x7
c001f6dc:	77 1b                	ja     c001f6f9 <Vm::x87Handler(regs*)+0x376>
c001f6de:	83 ec 0c             	sub    esp,0xc
c001f6e1:	2d f0 00 00 00       	sub    eax,0xf0
c001f6e6:	50                   	push   eax
c001f6e7:	e8 5a fb ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001f6ec:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f6f3:	89 c6                	mov    esi,eax
c001f6f5:	89 d7                	mov    edi,edx
c001f6f7:	eb 22                	jmp    c001f71b <Vm::x87Handler(regs*)+0x398>
c001f6f9:	3c f7                	cmp    al,0xf7
c001f6fb:	0f 86 d1 03 00 00    	jbe    c001fad2 <Vm::x87Handler(regs*)+0x74f>
c001f701:	83 ec 0c             	sub    esp,0xc
c001f704:	6a 00                	push   0x0
c001f706:	e8 3b fb ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001f70b:	89 c6                	mov    esi,eax
c001f70d:	89 d7                	mov    edi,edx
c001f70f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f713:	2d f8 00 00 00       	sub    eax,0xf8
c001f718:	89 04 24             	mov    DWORD PTR [esp],eax
c001f71b:	e8 26 fb ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001f720:	57                   	push   edi
c001f721:	56                   	push   esi
c001f722:	52                   	push   edx
c001f723:	50                   	push   eax
c001f724:	e8 eb fa ff ff       	call   c001f214 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f729:	83 c4 1c             	add    esp,0x1c
c001f72c:	52                   	push   edx
c001f72d:	50                   	push   eax
c001f72e:	6a 00                	push   0x0
c001f730:	e9 51 02 00 00       	jmp    c001f986 <Vm::x87Handler(regs*)+0x603>
c001f735:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f739:	8d 50 40             	lea    edx,[eax+0x40]
c001f73c:	80 fa 07             	cmp    dl,0x7
c001f73f:	77 37                	ja     c001f778 <Vm::x87Handler(regs*)+0x3f5>
c001f741:	83 ec 0c             	sub    esp,0xc
c001f744:	2d c0 00 00 00       	sub    eax,0xc0
c001f749:	50                   	push   eax
c001f74a:	e8 f7 fa ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001f74f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f756:	89 c6                	mov    esi,eax
c001f758:	89 d7                	mov    edi,edx
c001f75a:	e8 e7 fa ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001f75f:	57                   	push   edi
c001f760:	56                   	push   esi
c001f761:	52                   	push   edx
c001f762:	50                   	push   eax
c001f763:	e8 54 fa ff ff       	call   c001f1bc <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f768:	83 c4 1c             	add    esp,0x1c
c001f76b:	52                   	push   edx
c001f76c:	50                   	push   eax
c001f76d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f771:	2d c0 00 00 00       	sub    eax,0xc0
c001f776:	eb 3d                	jmp    c001f7b5 <Vm::x87Handler(regs*)+0x432>
c001f778:	8d 50 38             	lea    edx,[eax+0x38]
c001f77b:	80 fa 07             	cmp    dl,0x7
c001f77e:	77 3b                	ja     c001f7bb <Vm::x87Handler(regs*)+0x438>
c001f780:	83 ec 0c             	sub    esp,0xc
c001f783:	2d c8 00 00 00       	sub    eax,0xc8
c001f788:	50                   	push   eax
c001f789:	e8 b8 fa ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001f78e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f795:	89 c6                	mov    esi,eax
c001f797:	89 d7                	mov    edi,edx
c001f799:	e8 a8 fa ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001f79e:	57                   	push   edi
c001f79f:	56                   	push   esi
c001f7a0:	52                   	push   edx
c001f7a1:	50                   	push   eax
c001f7a2:	e8 4e fa ff ff       	call   c001f1f5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f7a7:	83 c4 1c             	add    esp,0x1c
c001f7aa:	52                   	push   edx
c001f7ab:	50                   	push   eax
c001f7ac:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7b0:	2d c8 00 00 00       	sub    eax,0xc8
c001f7b5:	50                   	push   eax
c001f7b6:	e9 75 fc ff ff       	jmp    c001f430 <Vm::x87Handler(regs*)+0xad>
c001f7bb:	83 c0 18             	add    eax,0x18
c001f7be:	3c 07                	cmp    al,0x7
c001f7c0:	0f 87 3b 04 00 00    	ja     c001fc01 <Vm::x87Handler(regs*)+0x87e>
c001f7c6:	83 ec 0c             	sub    esp,0xc
c001f7c9:	6a 00                	push   0x0
c001f7cb:	e8 76 fa ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001f7d0:	89 c6                	mov    esi,eax
c001f7d2:	89 d7                	mov    edi,edx
c001f7d4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7d8:	2d e8 00 00 00       	sub    eax,0xe8
c001f7dd:	89 04 24             	mov    DWORD PTR [esp],eax
c001f7e0:	e8 61 fa ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001f7e5:	57                   	push   edi
c001f7e6:	56                   	push   esi
c001f7e7:	52                   	push   edx
c001f7e8:	50                   	push   eax
c001f7e9:	e8 f8 f9 ff ff       	call   c001f1e6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f7ee:	83 c4 1c             	add    esp,0x1c
c001f7f1:	52                   	push   edx
c001f7f2:	50                   	push   eax
c001f7f3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7f7:	2d e8 00 00 00       	sub    eax,0xe8
c001f7fc:	eb b7                	jmp    c001f7b5 <Vm::x87Handler(regs*)+0x432>
c001f7fe:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f802:	8d 50 40             	lea    edx,[eax+0x40]
c001f805:	80 fa 07             	cmp    dl,0x7
c001f808:	77 3a                	ja     c001f844 <Vm::x87Handler(regs*)+0x4c1>
c001f80a:	83 ec 0c             	sub    esp,0xc
c001f80d:	2d c0 00 00 00       	sub    eax,0xc0
c001f812:	50                   	push   eax
c001f813:	e8 2e fa ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001f818:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f81f:	89 c6                	mov    esi,eax
c001f821:	89 d7                	mov    edi,edx
c001f823:	e8 1e fa ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001f828:	57                   	push   edi
c001f829:	56                   	push   esi
c001f82a:	52                   	push   edx
c001f82b:	50                   	push   eax
c001f82c:	e8 8b f9 ff ff       	call   c001f1bc <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f831:	83 c4 1c             	add    esp,0x1c
c001f834:	52                   	push   edx
c001f835:	50                   	push   eax
c001f836:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f83a:	2d c0 00 00 00       	sub    eax,0xc0
c001f83f:	e9 9e 01 00 00       	jmp    c001f9e2 <Vm::x87Handler(regs*)+0x65f>
c001f844:	8d 50 20             	lea    edx,[eax+0x20]
c001f847:	80 fa 07             	cmp    dl,0x7
c001f84a:	77 3a                	ja     c001f886 <Vm::x87Handler(regs*)+0x503>
c001f84c:	83 ec 0c             	sub    esp,0xc
c001f84f:	2d e0 00 00 00       	sub    eax,0xe0
c001f854:	50                   	push   eax
c001f855:	e8 ec f9 ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001f85a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f861:	89 c6                	mov    esi,eax
c001f863:	89 d7                	mov    edi,edx
c001f865:	e8 dc f9 ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001f86a:	57                   	push   edi
c001f86b:	56                   	push   esi
c001f86c:	52                   	push   edx
c001f86d:	50                   	push   eax
c001f86e:	e8 73 f9 ff ff       	call   c001f1e6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f873:	83 c4 1c             	add    esp,0x1c
c001f876:	52                   	push   edx
c001f877:	50                   	push   eax
c001f878:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f87c:	2d e0 00 00 00       	sub    eax,0xe0
c001f881:	e9 5c 01 00 00       	jmp    c001f9e2 <Vm::x87Handler(regs*)+0x65f>
c001f886:	8d 50 18             	lea    edx,[eax+0x18]
c001f889:	80 fa 07             	cmp    dl,0x7
c001f88c:	77 3b                	ja     c001f8c9 <Vm::x87Handler(regs*)+0x546>
c001f88e:	83 ec 0c             	sub    esp,0xc
c001f891:	6a 00                	push   0x0
c001f893:	e8 ae f9 ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001f898:	89 c6                	mov    esi,eax
c001f89a:	89 d7                	mov    edi,edx
c001f89c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8a0:	2d e8 00 00 00       	sub    eax,0xe8
c001f8a5:	89 04 24             	mov    DWORD PTR [esp],eax
c001f8a8:	e8 99 f9 ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001f8ad:	57                   	push   edi
c001f8ae:	56                   	push   esi
c001f8af:	52                   	push   edx
c001f8b0:	50                   	push   eax
c001f8b1:	e8 30 f9 ff ff       	call   c001f1e6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f8b6:	83 c4 1c             	add    esp,0x1c
c001f8b9:	52                   	push   edx
c001f8ba:	50                   	push   eax
c001f8bb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8bf:	2d e8 00 00 00       	sub    eax,0xe8
c001f8c4:	e9 19 01 00 00       	jmp    c001f9e2 <Vm::x87Handler(regs*)+0x65f>
c001f8c9:	8d 50 38             	lea    edx,[eax+0x38]
c001f8cc:	80 fa 07             	cmp    dl,0x7
c001f8cf:	77 37                	ja     c001f908 <Vm::x87Handler(regs*)+0x585>
c001f8d1:	83 ec 0c             	sub    esp,0xc
c001f8d4:	2d c8 00 00 00       	sub    eax,0xc8
c001f8d9:	50                   	push   eax
c001f8da:	e8 67 f9 ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001f8df:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f8e6:	89 c6                	mov    esi,eax
c001f8e8:	89 d7                	mov    edi,edx
c001f8ea:	e8 57 f9 ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001f8ef:	57                   	push   edi
c001f8f0:	56                   	push   esi
c001f8f1:	52                   	push   edx
c001f8f2:	50                   	push   eax
c001f8f3:	e8 fd f8 ff ff       	call   c001f1f5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f8f8:	83 c4 1c             	add    esp,0x1c
c001f8fb:	52                   	push   edx
c001f8fc:	50                   	push   eax
c001f8fd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f901:	2d c8 00 00 00       	sub    eax,0xc8
c001f906:	eb 7d                	jmp    c001f985 <Vm::x87Handler(regs*)+0x602>
c001f908:	3c f7                	cmp    al,0xf7
c001f90a:	76 38                	jbe    c001f944 <Vm::x87Handler(regs*)+0x5c1>
c001f90c:	83 ec 0c             	sub    esp,0xc
c001f90f:	6a 00                	push   0x0
c001f911:	e8 30 f9 ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001f916:	89 c6                	mov    esi,eax
c001f918:	89 d7                	mov    edi,edx
c001f91a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f91e:	2d f8 00 00 00       	sub    eax,0xf8
c001f923:	89 04 24             	mov    DWORD PTR [esp],eax
c001f926:	e8 1b f9 ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001f92b:	57                   	push   edi
c001f92c:	56                   	push   esi
c001f92d:	52                   	push   edx
c001f92e:	50                   	push   eax
c001f92f:	e8 e0 f8 ff ff       	call   c001f214 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f934:	83 c4 1c             	add    esp,0x1c
c001f937:	52                   	push   edx
c001f938:	50                   	push   eax
c001f939:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f93d:	2d f8 00 00 00       	sub    eax,0xf8
c001f942:	eb 41                	jmp    c001f985 <Vm::x87Handler(regs*)+0x602>
c001f944:	8d 50 10             	lea    edx,[eax+0x10]
c001f947:	80 fa 07             	cmp    dl,0x7
c001f94a:	0f 87 5a 01 00 00    	ja     c001faaa <Vm::x87Handler(regs*)+0x727>
c001f950:	83 ec 0c             	sub    esp,0xc
c001f953:	2d f0 00 00 00       	sub    eax,0xf0
c001f958:	50                   	push   eax
c001f959:	e8 e8 f8 ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001f95e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f965:	89 c6                	mov    esi,eax
c001f967:	89 d7                	mov    edi,edx
c001f969:	e8 d8 f8 ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001f96e:	57                   	push   edi
c001f96f:	56                   	push   esi
c001f970:	52                   	push   edx
c001f971:	50                   	push   eax
c001f972:	e8 9d f8 ff ff       	call   c001f214 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f977:	83 c4 1c             	add    esp,0x1c
c001f97a:	52                   	push   edx
c001f97b:	50                   	push   eax
c001f97c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f980:	2d f0 00 00 00       	sub    eax,0xf0
c001f985:	50                   	push   eax
c001f986:	e8 fe f8 ff ff       	call   c001f289 <Vm::fpuSetReg(int, unsigned long long)>
c001f98b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f98f:	e8 9d f9 ff ff       	call   c001f331 <Vm::fpuPop()>
c001f994:	e9 5e fa ff ff       	jmp    c001f3f7 <Vm::x87Handler(regs*)+0x74>
c001f999:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f99d:	8d 50 30             	lea    edx,[eax+0x30]
c001f9a0:	80 fa 07             	cmp    dl,0x7
c001f9a3:	77 1d                	ja     c001f9c2 <Vm::x87Handler(regs*)+0x63f>
c001f9a5:	83 ec 0c             	sub    esp,0xc
c001f9a8:	6a 00                	push   0x0
c001f9aa:	e8 97 f8 ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001f9af:	83 c4 0c             	add    esp,0xc
c001f9b2:	52                   	push   edx
c001f9b3:	50                   	push   eax
c001f9b4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9b8:	2d d0 00 00 00       	sub    eax,0xd0
c001f9bd:	e9 f3 fd ff ff       	jmp    c001f7b5 <Vm::x87Handler(regs*)+0x432>
c001f9c2:	8d 50 28             	lea    edx,[eax+0x28]
c001f9c5:	80 fa 07             	cmp    dl,0x7
c001f9c8:	77 28                	ja     c001f9f2 <Vm::x87Handler(regs*)+0x66f>
c001f9ca:	83 ec 0c             	sub    esp,0xc
c001f9cd:	6a 00                	push   0x0
c001f9cf:	e8 72 f8 ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001f9d4:	83 c4 0c             	add    esp,0xc
c001f9d7:	52                   	push   edx
c001f9d8:	50                   	push   eax
c001f9d9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9dd:	2d d8 00 00 00       	sub    eax,0xd8
c001f9e2:	50                   	push   eax
c001f9e3:	e8 a1 f8 ff ff       	call   c001f289 <Vm::fpuSetReg(int, unsigned long long)>
c001f9e8:	e8 44 f9 ff ff       	call   c001f331 <Vm::fpuPop()>
c001f9ed:	e9 01 fa ff ff       	jmp    c001f3f3 <Vm::x87Handler(regs*)+0x70>
c001f9f2:	8d 50 20             	lea    edx,[eax+0x20]
c001f9f5:	80 fa 07             	cmp    dl,0x7
c001f9f8:	77 30                	ja     c001fa2a <Vm::x87Handler(regs*)+0x6a7>
c001f9fa:	83 ec 0c             	sub    esp,0xc
c001f9fd:	2d e0 00 00 00       	sub    eax,0xe0
c001fa02:	50                   	push   eax
c001fa03:	e8 3e f8 ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001fa08:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa0f:	89 c6                	mov    esi,eax
c001fa11:	89 d7                	mov    edi,edx
c001fa13:	e8 2e f8 ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001fa18:	57                   	push   edi
c001fa19:	56                   	push   esi
c001fa1a:	52                   	push   edx
c001fa1b:	50                   	push   eax
c001fa1c:	e8 48 f7 ff ff       	call   c001f169 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fa21:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fa25:	e9 54 02 00 00       	jmp    c001fc7e <Vm::x87Handler(regs*)+0x8fb>
c001fa2a:	8d 50 18             	lea    edx,[eax+0x18]
c001fa2d:	80 fa 07             	cmp    dl,0x7
c001fa30:	0f 87 43 fb ff ff    	ja     c001f579 <Vm::x87Handler(regs*)+0x1f6>
c001fa36:	83 ec 0c             	sub    esp,0xc
c001fa39:	2d e8 00 00 00       	sub    eax,0xe8
c001fa3e:	50                   	push   eax
c001fa3f:	e8 02 f8 ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001fa44:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa4b:	89 c6                	mov    esi,eax
c001fa4d:	89 d7                	mov    edi,edx
c001fa4f:	e8 f2 f7 ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001fa54:	57                   	push   edi
c001fa55:	56                   	push   esi
c001fa56:	52                   	push   edx
c001fa57:	50                   	push   eax
c001fa58:	e8 0c f7 ff ff       	call   c001f169 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fa5d:	83 c4 20             	add    esp,0x20
c001fa60:	e8 cc f8 ff ff       	call   c001f331 <Vm::fpuPop()>
c001fa65:	eb 62                	jmp    c001fac9 <Vm::x87Handler(regs*)+0x746>
c001fa67:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001fa6b:	0f 85 0f 01 00 00    	jne    c001fb80 <Vm::x87Handler(regs*)+0x7fd>
c001fa71:	83 ec 0c             	sub    esp,0xc
c001fa74:	6a 01                	push   0x1
c001fa76:	e8 cb f7 ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001fa7b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa82:	89 c6                	mov    esi,eax
c001fa84:	89 d7                	mov    edi,edx
c001fa86:	e8 bb f7 ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001fa8b:	57                   	push   edi
c001fa8c:	56                   	push   esi
c001fa8d:	52                   	push   edx
c001fa8e:	50                   	push   eax
c001fa8f:	e8 d5 f6 ff ff       	call   c001f169 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fa94:	83 c4 20             	add    esp,0x20
c001fa97:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fa9b:	e8 91 f8 ff ff       	call   c001f331 <Vm::fpuPop()>
c001faa0:	e8 8c f8 ff ff       	call   c001f331 <Vm::fpuPop()>
c001faa5:	e9 50 f9 ff ff       	jmp    c001f3fa <Vm::x87Handler(regs*)+0x77>
c001faaa:	3c d9                	cmp    al,0xd9
c001faac:	0f 85 b5 02 00 00    	jne    c001fd67 <Vm::x87Handler(regs*)+0x9e4>
c001fab2:	eb bd                	jmp    c001fa71 <Vm::x87Handler(regs*)+0x6ee>
c001fab4:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001fab8:	0f 85 ea 02 00 00    	jne    c001fda8 <Vm::x87Handler(regs*)+0xa25>
c001fabe:	0f b7 05 e0 0e 03 c0 	movzx  eax,WORD PTR ds:0xc0030ee0
c001fac5:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001fac9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001facd:	e9 28 f9 ff ff       	jmp    c001f3fa <Vm::x87Handler(regs*)+0x77>
c001fad2:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fad6:	84 d2                	test   dl,dl
c001fad8:	75 0f                	jne    c001fae9 <Vm::x87Handler(regs*)+0x766>
c001fada:	83 ec 0c             	sub    esp,0xc
c001fadd:	ff 36                	push   DWORD PTR [esi]
c001fadf:	e8 b1 f4 ff ff       	call   c001ef95 <Vm::fpu32ToInternal(unsigned int)>
c001fae4:	e9 2c 01 00 00       	jmp    c001fc15 <Vm::x87Handler(regs*)+0x892>
c001fae9:	80 fa 01             	cmp    dl,0x1
c001faec:	75 0f                	jne    c001fafd <Vm::x87Handler(regs*)+0x77a>
c001faee:	83 ec 0c             	sub    esp,0xc
c001faf1:	ff 36                	push   DWORD PTR [esi]
c001faf3:	e8 9d f4 ff ff       	call   c001ef95 <Vm::fpu32ToInternal(unsigned int)>
c001faf8:	e9 81 02 00 00       	jmp    c001fd7e <Vm::x87Handler(regs*)+0x9fb>
c001fafd:	80 fa 04             	cmp    dl,0x4
c001fb00:	75 0f                	jne    c001fb11 <Vm::x87Handler(regs*)+0x78e>
c001fb02:	83 ec 0c             	sub    esp,0xc
c001fb05:	ff 36                	push   DWORD PTR [esi]
c001fb07:	e8 89 f4 ff ff       	call   c001ef95 <Vm::fpu32ToInternal(unsigned int)>
c001fb0c:	e9 86 01 00 00       	jmp    c001fc97 <Vm::x87Handler(regs*)+0x914>
c001fb11:	80 fa 05             	cmp    dl,0x5
c001fb14:	75 1b                	jne    c001fb31 <Vm::x87Handler(regs*)+0x7ae>
c001fb16:	83 ec 0c             	sub    esp,0xc
c001fb19:	6a 00                	push   0x0
c001fb1b:	e8 26 f7 ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001fb20:	89 c7                	mov    edi,eax
c001fb22:	89 d5                	mov    ebp,edx
c001fb24:	58                   	pop    eax
c001fb25:	ff 36                	push   DWORD PTR [esi]
c001fb27:	e8 69 f4 ff ff       	call   c001ef95 <Vm::fpu32ToInternal(unsigned int)>
c001fb2c:	e9 a3 01 00 00       	jmp    c001fcd4 <Vm::x87Handler(regs*)+0x951>
c001fb31:	80 fa 06             	cmp    dl,0x6
c001fb34:	75 0f                	jne    c001fb45 <Vm::x87Handler(regs*)+0x7c2>
c001fb36:	83 ec 0c             	sub    esp,0xc
c001fb39:	ff 36                	push   DWORD PTR [esi]
c001fb3b:	e8 55 f4 ff ff       	call   c001ef95 <Vm::fpu32ToInternal(unsigned int)>
c001fb40:	e9 ae 01 00 00       	jmp    c001fcf3 <Vm::x87Handler(regs*)+0x970>
c001fb45:	31 c0                	xor    eax,eax
c001fb47:	80 fa 07             	cmp    dl,0x7
c001fb4a:	0f 85 94 02 00 00    	jne    c001fde4 <Vm::x87Handler(regs*)+0xa61>
c001fb50:	83 ec 0c             	sub    esp,0xc
c001fb53:	6a 00                	push   0x0
c001fb55:	e8 ec f6 ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001fb5a:	89 c7                	mov    edi,eax
c001fb5c:	89 d5                	mov    ebp,edx
c001fb5e:	58                   	pop    eax
c001fb5f:	ff 36                	push   DWORD PTR [esi]
c001fb61:	e8 2f f4 ff ff       	call   c001ef95 <Vm::fpu32ToInternal(unsigned int)>
c001fb66:	e9 cb 01 00 00       	jmp    c001fd36 <Vm::x87Handler(regs*)+0x9b3>
c001fb6b:	80 fa 03             	cmp    dl,0x3
c001fb6e:	0f 85 d3 01 00 00    	jne    c001fd47 <Vm::x87Handler(regs*)+0x9c4>
c001fb74:	e8 b8 f7 ff ff       	call   c001f331 <Vm::fpuPop()>
c001fb79:	51                   	push   ecx
c001fb7a:	51                   	push   ecx
c001fb7b:	e9 de 01 00 00       	jmp    c001fd5e <Vm::x87Handler(regs*)+0x9db>
c001fb80:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb84:	80 fa 01             	cmp    dl,0x1
c001fb87:	75 09                	jne    c001fb92 <Vm::x87Handler(regs*)+0x80f>
c001fb89:	57                   	push   edi
c001fb8a:	57                   	push   edi
c001fb8b:	8b 06                	mov    eax,DWORD PTR [esi]
c001fb8d:	e9 e3 01 00 00       	jmp    c001fd75 <Vm::x87Handler(regs*)+0x9f2>
c001fb92:	80 fa 04             	cmp    dl,0x4
c001fb95:	75 12                	jne    c001fba9 <Vm::x87Handler(regs*)+0x826>
c001fb97:	31 d2                	xor    edx,edx
c001fb99:	51                   	push   ecx
c001fb9a:	51                   	push   ecx
c001fb9b:	8b 06                	mov    eax,DWORD PTR [esi]
c001fb9d:	52                   	push   edx
c001fb9e:	50                   	push   eax
c001fb9f:	e8 d0 f4 ff ff       	call   c001f074 <Vm::fpuLongToFloat(long long)>
c001fba4:	e9 ee 00 00 00       	jmp    c001fc97 <Vm::x87Handler(regs*)+0x914>
c001fba9:	31 c0                	xor    eax,eax
c001fbab:	80 fa 07             	cmp    dl,0x7
c001fbae:	0f 85 30 02 00 00    	jne    c001fde4 <Vm::x87Handler(regs*)+0xa61>
c001fbb4:	83 ec 0c             	sub    esp,0xc
c001fbb7:	6a 00                	push   0x0
c001fbb9:	e8 88 f6 ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001fbbe:	89 c7                	mov    edi,eax
c001fbc0:	89 d5                	mov    ebp,edx
c001fbc2:	58                   	pop    eax
c001fbc3:	8b 06                	mov    eax,DWORD PTR [esi]
c001fbc5:	5a                   	pop    edx
c001fbc6:	31 d2                	xor    edx,edx
c001fbc8:	52                   	push   edx
c001fbc9:	50                   	push   eax
c001fbca:	e8 a5 f4 ff ff       	call   c001f074 <Vm::fpuLongToFloat(long long)>
c001fbcf:	e9 62 01 00 00       	jmp    c001fd36 <Vm::x87Handler(regs*)+0x9b3>
c001fbd4:	84 d2                	test   dl,dl
c001fbd6:	75 0d                	jne    c001fbe5 <Vm::x87Handler(regs*)+0x862>
c001fbd8:	31 d2                	xor    edx,edx
c001fbda:	55                   	push   ebp
c001fbdb:	55                   	push   ebp
c001fbdc:	8b 06                	mov    eax,DWORD PTR [esi]
c001fbde:	52                   	push   edx
c001fbdf:	50                   	push   eax
c001fbe0:	e9 d3 01 00 00       	jmp    c001fdb8 <Vm::x87Handler(regs*)+0xa35>
c001fbe5:	31 c0                	xor    eax,eax
c001fbe7:	80 fa 02             	cmp    dl,0x2
c001fbea:	0f 85 f4 01 00 00    	jne    c001fde4 <Vm::x87Handler(regs*)+0xa61>
c001fbf0:	83 ec 0c             	sub    esp,0xc
c001fbf3:	6a 00                	push   0x0
c001fbf5:	e8 4c f6 ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001fbfa:	59                   	pop    ecx
c001fbfb:	5f                   	pop    edi
c001fbfc:	e9 6a f9 ff ff       	jmp    c001f56b <Vm::x87Handler(regs*)+0x1e8>
c001fc01:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc05:	84 d2                	test   dl,dl
c001fc07:	75 2a                	jne    c001fc33 <Vm::x87Handler(regs*)+0x8b0>
c001fc09:	50                   	push   eax
c001fc0a:	50                   	push   eax
c001fc0b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc0e:	ff 36                	push   DWORD PTR [esi]
c001fc10:	e8 c5 f3 ff ff       	call   c001efda <Vm::fpu64ToInternal(unsigned long long)>
c001fc15:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc1c:	89 c6                	mov    esi,eax
c001fc1e:	89 d7                	mov    edi,edx
c001fc20:	e8 21 f6 ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001fc25:	57                   	push   edi
c001fc26:	56                   	push   esi
c001fc27:	52                   	push   edx
c001fc28:	50                   	push   eax
c001fc29:	e8 8e f5 ff ff       	call   c001f1bc <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fc2e:	e9 64 01 00 00       	jmp    c001fd97 <Vm::x87Handler(regs*)+0xa14>
c001fc33:	80 fa 01             	cmp    dl,0x1
c001fc36:	75 11                	jne    c001fc49 <Vm::x87Handler(regs*)+0x8c6>
c001fc38:	50                   	push   eax
c001fc39:	50                   	push   eax
c001fc3a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc3d:	ff 36                	push   DWORD PTR [esi]
c001fc3f:	e8 96 f3 ff ff       	call   c001efda <Vm::fpu64ToInternal(unsigned long long)>
c001fc44:	e9 35 01 00 00       	jmp    c001fd7e <Vm::x87Handler(regs*)+0x9fb>
c001fc49:	80 fa 02             	cmp    dl,0x2
c001fc4c:	0f 85 54 f9 ff ff    	jne    c001f5a6 <Vm::x87Handler(regs*)+0x223>
c001fc52:	55                   	push   ebp
c001fc53:	55                   	push   ebp
c001fc54:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc57:	ff 36                	push   DWORD PTR [esi]
c001fc59:	e8 7c f3 ff ff       	call   c001efda <Vm::fpu64ToInternal(unsigned long long)>
c001fc5e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc65:	89 c6                	mov    esi,eax
c001fc67:	89 d7                	mov    edi,edx
c001fc69:	e8 d8 f5 ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001fc6e:	57                   	push   edi
c001fc6f:	56                   	push   esi
c001fc70:	52                   	push   edx
c001fc71:	50                   	push   eax
c001fc72:	e8 f2 f4 ff ff       	call   c001f169 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fc77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fc7b:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fc7e:	83 c4 20             	add    esp,0x20
c001fc81:	e9 74 f7 ff ff       	jmp    c001f3fa <Vm::x87Handler(regs*)+0x77>
c001fc86:	80 fa 04             	cmp    dl,0x4
c001fc89:	75 2a                	jne    c001fcb5 <Vm::x87Handler(regs*)+0x932>
c001fc8b:	51                   	push   ecx
c001fc8c:	51                   	push   ecx
c001fc8d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc90:	ff 36                	push   DWORD PTR [esi]
c001fc92:	e8 43 f3 ff ff       	call   c001efda <Vm::fpu64ToInternal(unsigned long long)>
c001fc97:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc9e:	89 c6                	mov    esi,eax
c001fca0:	89 d7                	mov    edi,edx
c001fca2:	e8 9f f5 ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001fca7:	57                   	push   edi
c001fca8:	56                   	push   esi
c001fca9:	52                   	push   edx
c001fcaa:	50                   	push   eax
c001fcab:	e8 36 f5 ff ff       	call   c001f1e6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fcb0:	e9 e2 00 00 00       	jmp    c001fd97 <Vm::x87Handler(regs*)+0xa14>
c001fcb5:	80 fa 05             	cmp    dl,0x5
c001fcb8:	75 28                	jne    c001fce2 <Vm::x87Handler(regs*)+0x95f>
c001fcba:	83 ec 0c             	sub    esp,0xc
c001fcbd:	6a 00                	push   0x0
c001fcbf:	e8 82 f5 ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001fcc4:	89 c7                	mov    edi,eax
c001fcc6:	89 d5                	mov    ebp,edx
c001fcc8:	58                   	pop    eax
c001fcc9:	5a                   	pop    edx
c001fcca:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fccd:	ff 36                	push   DWORD PTR [esi]
c001fccf:	e8 06 f3 ff ff       	call   c001efda <Vm::fpu64ToInternal(unsigned long long)>
c001fcd4:	83 c4 10             	add    esp,0x10
c001fcd7:	55                   	push   ebp
c001fcd8:	57                   	push   edi
c001fcd9:	52                   	push   edx
c001fcda:	50                   	push   eax
c001fcdb:	e8 06 f5 ff ff       	call   c001f1e6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fce0:	eb 60                	jmp    c001fd42 <Vm::x87Handler(regs*)+0x9bf>
c001fce2:	80 fa 06             	cmp    dl,0x6
c001fce5:	75 2a                	jne    c001fd11 <Vm::x87Handler(regs*)+0x98e>
c001fce7:	51                   	push   ecx
c001fce8:	51                   	push   ecx
c001fce9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcec:	ff 36                	push   DWORD PTR [esi]
c001fcee:	e8 e7 f2 ff ff       	call   c001efda <Vm::fpu64ToInternal(unsigned long long)>
c001fcf3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcfa:	89 c6                	mov    esi,eax
c001fcfc:	89 d7                	mov    edi,edx
c001fcfe:	e8 43 f5 ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001fd03:	57                   	push   edi
c001fd04:	56                   	push   esi
c001fd05:	52                   	push   edx
c001fd06:	50                   	push   eax
c001fd07:	e8 08 f5 ff ff       	call   c001f214 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fd0c:	e9 86 00 00 00       	jmp    c001fd97 <Vm::x87Handler(regs*)+0xa14>
c001fd11:	31 c0                	xor    eax,eax
c001fd13:	80 fa 07             	cmp    dl,0x7
c001fd16:	0f 85 c8 00 00 00    	jne    c001fde4 <Vm::x87Handler(regs*)+0xa61>
c001fd1c:	83 ec 0c             	sub    esp,0xc
c001fd1f:	6a 00                	push   0x0
c001fd21:	e8 20 f5 ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001fd26:	89 c7                	mov    edi,eax
c001fd28:	89 d5                	mov    ebp,edx
c001fd2a:	58                   	pop    eax
c001fd2b:	5a                   	pop    edx
c001fd2c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd2f:	ff 36                	push   DWORD PTR [esi]
c001fd31:	e8 a4 f2 ff ff       	call   c001efda <Vm::fpu64ToInternal(unsigned long long)>
c001fd36:	83 c4 10             	add    esp,0x10
c001fd39:	55                   	push   ebp
c001fd3a:	57                   	push   edi
c001fd3b:	52                   	push   edx
c001fd3c:	50                   	push   eax
c001fd3d:	e8 d2 f4 ff ff       	call   c001f214 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fd42:	83 c4 0c             	add    esp,0xc
c001fd45:	eb 53                	jmp    c001fd9a <Vm::x87Handler(regs*)+0xa17>
c001fd47:	31 c0                	xor    eax,eax
c001fd49:	80 fa 02             	cmp    dl,0x2
c001fd4c:	0f 85 92 00 00 00    	jne    c001fde4 <Vm::x87Handler(regs*)+0xa61>
c001fd52:	83 ec 0c             	sub    esp,0xc
c001fd55:	6a 00                	push   0x0
c001fd57:	e8 ea f4 ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001fd5c:	59                   	pop    ecx
c001fd5d:	5f                   	pop    edi
c001fd5e:	52                   	push   edx
c001fd5f:	50                   	push   eax
c001fd60:	e8 27 f2 ff ff       	call   c001ef8c <Vm::fpuInternalTo64(unsigned long long)>
c001fd65:	eb 70                	jmp    c001fdd7 <Vm::x87Handler(regs*)+0xa54>
c001fd67:	31 c0                	xor    eax,eax
c001fd69:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001fd6e:	75 74                	jne    c001fde4 <Vm::x87Handler(regs*)+0xa61>
c001fd70:	50                   	push   eax
c001fd71:	50                   	push   eax
c001fd72:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001fd75:	31 d2                	xor    edx,edx
c001fd77:	52                   	push   edx
c001fd78:	50                   	push   eax
c001fd79:	e8 f6 f2 ff ff       	call   c001f074 <Vm::fpuLongToFloat(long long)>
c001fd7e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd85:	89 c6                	mov    esi,eax
c001fd87:	89 d7                	mov    edi,edx
c001fd89:	e8 b8 f4 ff ff       	call   c001f246 <Vm::fpuGetReg(int)>
c001fd8e:	57                   	push   edi
c001fd8f:	56                   	push   esi
c001fd90:	52                   	push   edx
c001fd91:	50                   	push   eax
c001fd92:	e8 5e f4 ff ff       	call   c001f1f5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fd97:	83 c4 1c             	add    esp,0x1c
c001fd9a:	52                   	push   edx
c001fd9b:	50                   	push   eax
c001fd9c:	6a 00                	push   0x0
c001fd9e:	e8 e6 f4 ff ff       	call   c001f289 <Vm::fpuSetReg(int, unsigned long long)>
c001fda3:	e9 f2 f7 ff ff       	jmp    c001f59a <Vm::x87Handler(regs*)+0x217>
c001fda8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fdac:	80 fa 05             	cmp    dl,0x5
c001fdaf:	75 11                	jne    c001fdc2 <Vm::x87Handler(regs*)+0xa3f>
c001fdb1:	55                   	push   ebp
c001fdb2:	55                   	push   ebp
c001fdb3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fdb6:	ff 36                	push   DWORD PTR [esi]
c001fdb8:	e8 81 f2 ff ff       	call   c001f03e <Vm::fpuULongToFloat(unsigned long long)>
c001fdbd:	e9 cf f7 ff ff       	jmp    c001f591 <Vm::x87Handler(regs*)+0x20e>
c001fdc2:	31 c0                	xor    eax,eax
c001fdc4:	80 fa 07             	cmp    dl,0x7
c001fdc7:	75 1b                	jne    c001fde4 <Vm::x87Handler(regs*)+0xa61>
c001fdc9:	e8 63 f5 ff ff       	call   c001f331 <Vm::fpuPop()>
c001fdce:	51                   	push   ecx
c001fdcf:	51                   	push   ecx
c001fdd0:	52                   	push   edx
c001fdd1:	50                   	push   eax
c001fdd2:	e8 0c f2 ff ff       	call   c001efe3 <Vm::fpuFloatToLong(unsigned long long)>
c001fdd7:	83 c4 10             	add    esp,0x10
c001fdda:	89 06                	mov    DWORD PTR [esi],eax
c001fddc:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001fddf:	e9 f8 f7 ff ff       	jmp    c001f5dc <Vm::x87Handler(regs*)+0x259>
c001fde4:	83 c4 1c             	add    esp,0x1c
c001fde7:	5b                   	pop    ebx
c001fde8:	5e                   	pop    esi
c001fde9:	5f                   	pop    edi
c001fdea:	5d                   	pop    ebp
c001fdeb:	c3                   	ret    

c001fdec <__static_initialization_and_destruction_0(int, int)>:
c001fdec:	83 ec 0c             	sub    esp,0xc
c001fdef:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001fdf4:	75 1a                	jne    c001fe10 <__static_initialization_and_destruction_0(int, int)+0x24>
c001fdf6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001fdfe:	75 10                	jne    c001fe10 <__static_initialization_and_destruction_0(int, int)+0x24>
c001fe00:	83 ec 0c             	sub    esp,0xc
c001fe03:	68 e0 0e 03 c0       	push   0xc0030ee0
c001fe08:	e8 0d 8d 00 00       	call   c0028b1a <Vm::_FPUState::_FPUState()>
c001fe0d:	83 c4 10             	add    esp,0x10
c001fe10:	90                   	nop
c001fe11:	83 c4 0c             	add    esp,0xc
c001fe14:	c3                   	ret    

c001fe15 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001fe15:	83 ec 0c             	sub    esp,0xc
c001fe18:	83 ec 08             	sub    esp,0x8
c001fe1b:	68 ff ff 00 00       	push   0xffff
c001fe20:	6a 01                	push   0x1
c001fe22:	e8 c5 ff ff ff       	call   c001fdec <__static_initialization_and_destruction_0(int, int)>
c001fe27:	83 c4 10             	add    esp,0x10
c001fe2a:	83 c4 0c             	add    esp,0xc
c001fe2d:	c3                   	ret    

c001fe2e <FAT::getName()>:
c001fe2e:	b8 d0 bd 02 c0       	mov    eax,0xc002bdd0
c001fe33:	c3                   	ret    

c001fe34 <FAT::tell(void*, unsigned long long*)>:
c001fe34:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fe39:	75 06                	jne    c001fe41 <FAT::tell(void*, unsigned long long*)+0xd>
c001fe3b:	b8 04 00 00 00       	mov    eax,0x4
c001fe40:	c3                   	ret    
c001fe41:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fe46:	75 06                	jne    c001fe4e <FAT::tell(void*, unsigned long long*)+0x1a>
c001fe48:	b8 04 00 00 00       	mov    eax,0x4
c001fe4d:	c3                   	ret    
c001fe4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe52:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001fe55:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001fe58:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fe5c:	89 01                	mov    DWORD PTR [ecx],eax
c001fe5e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fe61:	b8 00 00 00 00       	mov    eax,0x0
c001fe66:	c3                   	ret    
c001fe67:	90                   	nop

c001fe68 <FAT::stat(void*, unsigned long long*)>:
c001fe68:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fe6d:	75 06                	jne    c001fe75 <FAT::stat(void*, unsigned long long*)+0xd>
c001fe6f:	b8 04 00 00 00       	mov    eax,0x4
c001fe74:	c3                   	ret    
c001fe75:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fe7a:	75 06                	jne    c001fe82 <FAT::stat(void*, unsigned long long*)+0x1a>
c001fe7c:	b8 04 00 00 00       	mov    eax,0x4
c001fe81:	c3                   	ret    
c001fe82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe86:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001fe89:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001fe8c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fe90:	89 01                	mov    DWORD PTR [ecx],eax
c001fe92:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fe95:	b8 00 00 00 00       	mov    eax,0x0
c001fe9a:	c3                   	ret    
c001fe9b:	90                   	nop

c001fe9c <FAT::~FAT()>:
c001fe9c:	83 ec 0c             	sub    esp,0xc
c001fe9f:	ba 1c be 02 c0       	mov    edx,0xc002be1c
c001fea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea8:	89 10                	mov    DWORD PTR [eax],edx
c001feaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feae:	83 ec 0c             	sub    esp,0xc
c001feb1:	50                   	push   eax
c001feb2:	e8 45 2b ff ff       	call   c00129fc <Filesystem::~Filesystem()>
c001feb7:	83 c4 10             	add    esp,0x10
c001feba:	90                   	nop
c001febb:	83 c4 0c             	add    esp,0xc
c001febe:	c3                   	ret    
c001febf:	90                   	nop

c001fec0 <FAT::~FAT()>:
c001fec0:	83 ec 0c             	sub    esp,0xc
c001fec3:	83 ec 0c             	sub    esp,0xc
c001fec6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feca:	e8 cd ff ff ff       	call   c001fe9c <FAT::~FAT()>
c001fecf:	83 c4 10             	add    esp,0x10
c001fed2:	83 ec 08             	sub    esp,0x8
c001fed5:	6a 08                	push   0x8
c001fed7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fedb:	e8 15 27 ff ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c001fee0:	83 c4 10             	add    esp,0x10
c001fee3:	83 c4 0c             	add    esp,0xc
c001fee6:	c3                   	ret    
c001fee7:	90                   	nop

c001fee8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001fee8:	83 ec 1c             	sub    esp,0x1c
c001feeb:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001fef2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001fef7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fefb:	8b 04 85 60 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0a0]
c001ff02:	83 f8 ff             	cmp    eax,0xffffffff
c001ff05:	75 34                	jne    c001ff3b <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001ff07:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ff0b:	88 c2                	mov    dl,al
c001ff0d:	a1 40 0f 03 c0       	mov    eax,ds:0xc0030f40
c001ff12:	01 d0                	add    eax,edx
c001ff14:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ff18:	8b 15 40 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f40
c001ff1e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ff22:	89 14 85 60 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf0a0],edx
c001ff29:	a1 40 0f 03 c0       	mov    eax,ds:0xc0030f40
c001ff2e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ff32:	89 14 85 e0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf020],edx
c001ff39:	eb 17                	jmp    c001ff52 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001ff3b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ff3f:	88 c2                	mov    dl,al
c001ff41:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ff45:	8b 04 85 60 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0a0]
c001ff4c:	01 d0                	add    eax,edx
c001ff4e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ff52:	83 ec 04             	sub    esp,0x4
c001ff55:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ff59:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ff5d:	8d 44 24 15          	lea    eax,[esp+0x15]
c001ff61:	50                   	push   eax
c001ff62:	e8 97 6d fe ff       	call   c0006cfe <f_getlabel>
c001ff67:	83 c4 10             	add    esp,0x10
c001ff6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ff6e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ff73:	75 07                	jne    c001ff7c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001ff75:	b8 00 00 00 00       	mov    eax,0x0
c001ff7a:	eb 05                	jmp    c001ff81 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001ff7c:	b8 01 00 00 00       	mov    eax,0x1
c001ff81:	83 c4 1c             	add    esp,0x1c
c001ff84:	c3                   	ret    
c001ff85:	90                   	nop

c001ff86 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001ff86:	57                   	push   edi
c001ff87:	83 ec 58             	sub    esp,0x58
c001ff8a:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001ff92:	8d 54 24 10          	lea    edx,[esp+0x10]
c001ff96:	b9 0f 00 00 00       	mov    ecx,0xf
c001ff9b:	b8 00 00 00 00       	mov    eax,0x0
c001ffa0:	fc                   	cld    
c001ffa1:	89 d7                	mov    edi,edx
c001ffa3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ffa5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ffa9:	8b 04 85 60 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0a0]
c001ffb0:	83 f8 ff             	cmp    eax,0xffffffff
c001ffb3:	75 34                	jne    c001ffe9 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001ffb5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ffb9:	88 c2                	mov    dl,al
c001ffbb:	a1 40 0f 03 c0       	mov    eax,ds:0xc0030f40
c001ffc0:	01 d0                	add    eax,edx
c001ffc2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ffc6:	8b 15 40 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f40
c001ffcc:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ffd0:	89 14 85 60 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf0a0],edx
c001ffd7:	a1 40 0f 03 c0       	mov    eax,ds:0xc0030f40
c001ffdc:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001ffe0:	89 14 85 e0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf020],edx
c001ffe7:	eb 17                	jmp    c0020000 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001ffe9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ffed:	88 c2                	mov    dl,al
c001ffef:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fff3:	8b 04 85 60 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0a0]
c001fffa:	01 d0                	add    eax,edx
c001fffc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020000:	83 ec 08             	sub    esp,0x8
c0020003:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020007:	8d 44 24 18          	lea    eax,[esp+0x18]
c002000b:	50                   	push   eax
c002000c:	e8 3b 09 fe ff       	call   c000094c <strcat>
c0020011:	83 c4 10             	add    esp,0x10
c0020014:	83 ec 0c             	sub    esp,0xc
c0020017:	8d 44 24 18          	lea    eax,[esp+0x18]
c002001b:	50                   	push   eax
c002001c:	e8 cb 6e fe ff       	call   c0006eec <f_setlabel>
c0020021:	83 c4 10             	add    esp,0x10
c0020024:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020028:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c002002d:	75 07                	jne    c0020036 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c002002f:	b8 00 00 00 00       	mov    eax,0x0
c0020034:	eb 05                	jmp    c002003b <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020036:	b8 01 00 00 00       	mov    eax,0x1
c002003b:	83 c4 58             	add    esp,0x58
c002003e:	5f                   	pop    edi
c002003f:	c3                   	ret    

c0020040 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020040:	83 ec 2c             	sub    esp,0x2c
c0020043:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002004b:	83 ec 08             	sub    esp,0x8
c002004e:	68 f4 bd 02 c0       	push   0xc002bdf4
c0020053:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020057:	e8 3c 08 fe ff       	call   c0000898 <strcmp>
c002005c:	83 c4 10             	add    esp,0x10
c002005f:	85 c0                	test   eax,eax
c0020061:	0f 94 c0             	sete   al
c0020064:	84 c0                	test   al,al
c0020066:	74 0d                	je     c0020075 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020068:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020070:	e9 a6 00 00 00       	jmp    c002011b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020075:	83 ec 08             	sub    esp,0x8
c0020078:	68 e6 bd 02 c0       	push   0xc002bde6
c002007d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020081:	e8 12 08 fe ff       	call   c0000898 <strcmp>
c0020086:	83 c4 10             	add    esp,0x10
c0020089:	85 c0                	test   eax,eax
c002008b:	0f 94 c0             	sete   al
c002008e:	84 c0                	test   al,al
c0020090:	74 0a                	je     c002009c <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020092:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002009a:	eb 7f                	jmp    c002011b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002009c:	83 ec 08             	sub    esp,0x8
c002009f:	68 ec bd 02 c0       	push   0xc002bdec
c00200a4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00200a8:	e8 eb 07 fe ff       	call   c0000898 <strcmp>
c00200ad:	83 c4 10             	add    esp,0x10
c00200b0:	85 c0                	test   eax,eax
c00200b2:	0f 94 c0             	sete   al
c00200b5:	84 c0                	test   al,al
c00200b7:	74 0a                	je     c00200c3 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00200b9:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00200c1:	eb 58                	jmp    c002011b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00200c3:	83 ec 08             	sub    esp,0x8
c00200c6:	68 8c 92 02 c0       	push   0xc002928c
c00200cb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00200cf:	e8 c4 07 fe ff       	call   c0000898 <strcmp>
c00200d4:	83 c4 10             	add    esp,0x10
c00200d7:	85 c0                	test   eax,eax
c00200d9:	0f 94 c0             	sete   al
c00200dc:	84 c0                	test   al,al
c00200de:	74 0a                	je     c00200ea <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00200e0:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00200e8:	eb 31                	jmp    c002011b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00200ea:	83 ec 08             	sub    esp,0x8
c00200ed:	68 f2 bd 02 c0       	push   0xc002bdf2
c00200f2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00200f6:	e8 9d 07 fe ff       	call   c0000898 <strcmp>
c00200fb:	83 c4 10             	add    esp,0x10
c00200fe:	85 c0                	test   eax,eax
c0020100:	0f 94 c0             	sete   al
c0020103:	84 c0                	test   al,al
c0020105:	74 0a                	je     c0020111 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020107:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c002010f:	eb 0a                	jmp    c002011b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020111:	b8 08 00 00 00       	mov    eax,0x8
c0020116:	e9 df 00 00 00       	jmp    c00201fa <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c002011b:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020122:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020127:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002012b:	8b 04 85 60 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0a0]
c0020132:	83 f8 ff             	cmp    eax,0xffffffff
c0020135:	75 34                	jne    c002016b <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020137:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002013b:	88 c2                	mov    dl,al
c002013d:	a1 40 0f 03 c0       	mov    eax,ds:0xc0030f40
c0020142:	01 d0                	add    eax,edx
c0020144:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020148:	8b 15 40 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f40
c002014e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020152:	89 14 85 60 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf0a0],edx
c0020159:	a1 40 0f 03 c0       	mov    eax,ds:0xc0030f40
c002015e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020162:	89 14 85 e0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf020],edx
c0020169:	eb 17                	jmp    c0020182 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c002016b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002016f:	88 c2                	mov    dl,al
c0020171:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020175:	8b 04 85 60 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0a0]
c002017c:	01 d0                	add    eax,edx
c002017e:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020182:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020186:	88 04 24             	mov    BYTE PTR [esp],al
c0020189:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002018d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020191:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020199:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c002019e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00201a6:	83 ec 0c             	sub    esp,0xc
c00201a9:	68 00 20 00 00       	push   0x2000
c00201ae:	e8 e6 f3 fe ff       	call   c000f599 <malloc>
c00201b3:	83 c4 10             	add    esp,0x10
c00201b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00201ba:	68 00 20 00 00       	push   0x2000
c00201bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201c3:	8d 44 24 08          	lea    eax,[esp+0x8]
c00201c7:	50                   	push   eax
c00201c8:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00201cc:	50                   	push   eax
c00201cd:	e8 65 71 fe ff       	call   c0007337 <f_mkfs>
c00201d2:	83 c4 10             	add    esp,0x10
c00201d5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00201d9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00201de:	75 07                	jne    c00201e7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00201e0:	b8 00 00 00 00       	mov    eax,0x0
c00201e5:	eb 13                	jmp    c00201fa <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00201e7:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00201ec:	75 07                	jne    c00201f5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c00201ee:	b8 09 00 00 00       	mov    eax,0x9
c00201f3:	eb 05                	jmp    c00201fa <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00201f5:	b8 01 00 00 00       	mov    eax,0x1
c00201fa:	83 c4 2c             	add    esp,0x2c
c00201fd:	c3                   	ret    

c00201fe <FAT::tryMount(LogicalDisk*, int)>:
c00201fe:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020204:	a1 40 0f 03 c0       	mov    eax,ds:0xc0030f40
c0020209:	83 f8 14             	cmp    eax,0x14
c002020c:	75 17                	jne    c0020225 <FAT::tryMount(LogicalDisk*, int)+0x27>
c002020e:	83 ec 0c             	sub    esp,0xc
c0020211:	68 f8 bd 02 c0       	push   0xc002bdf8
c0020216:	e8 1e 9c ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c002021b:	83 c4 10             	add    esp,0x10
c002021e:	b0 00                	mov    al,0x0
c0020220:	e9 d7 01 00 00       	jmp    c00203fc <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020225:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c002022c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020232:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020238:	3d 00 02 00 00       	cmp    eax,0x200
c002023d:	74 07                	je     c0020246 <FAT::tryMount(LogicalDisk*, int)+0x48>
c002023f:	b0 00                	mov    al,0x0
c0020241:	e9 b6 01 00 00       	jmp    c00203fc <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020246:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c002024e:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020255:	8b 04 85 60 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0a0]
c002025c:	83 f8 ff             	cmp    eax,0xffffffff
c002025f:	74 07                	je     c0020268 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020261:	b0 01                	mov    al,0x1
c0020263:	e9 94 01 00 00       	jmp    c00203fc <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020268:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020272:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c002027a:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020281:	88 c2                	mov    dl,al
c0020283:	a1 40 0f 03 c0       	mov    eax,ds:0xc0030f40
c0020288:	01 d0                	add    eax,edx
c002028a:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020291:	8b 15 40 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f40
c0020297:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002029e:	89 14 85 60 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf0a0],edx
c00202a5:	a1 40 0f 03 c0       	mov    eax,ds:0xc0030f40
c00202aa:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00202b1:	89 14 85 e0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf020],edx
c00202b8:	83 ec 0c             	sub    esp,0xc
c00202bb:	68 54 02 00 00       	push   0x254
c00202c0:	e8 d4 f2 fe ff       	call   c000f599 <malloc>
c00202c5:	83 c4 10             	add    esp,0x10
c00202c8:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00202cf:	83 ec 04             	sub    esp,0x4
c00202d2:	6a 00                	push   0x0
c00202d4:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00202db:	50                   	push   eax
c00202dc:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00202e3:	e8 0d 4c fe ff       	call   c0004ef5 <f_mount>
c00202e8:	83 c4 10             	add    esp,0x10
c00202eb:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00202f2:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00202fa:	74 19                	je     c0020315 <FAT::tryMount(LogicalDisk*, int)+0x117>
c00202fc:	83 ec 0c             	sub    esp,0xc
c00202ff:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020306:	e8 ae f2 fe ff       	call   c000f5b9 <rfree>
c002030b:	83 c4 10             	add    esp,0x10
c002030e:	b0 00                	mov    al,0x0
c0020310:	e9 e7 00 00 00       	jmp    c00203fc <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020315:	83 ec 04             	sub    esp,0x4
c0020318:	68 00 01 00 00       	push   0x100
c002031d:	6a 00                	push   0x0
c002031f:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020326:	50                   	push   eax
c0020327:	e8 24 04 fe ff       	call   c0000750 <memset>
c002032c:	83 c4 10             	add    esp,0x10
c002032f:	83 ec 08             	sub    esp,0x8
c0020332:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020339:	50                   	push   eax
c002033a:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020341:	50                   	push   eax
c0020342:	e8 05 06 fe ff       	call   c000094c <strcat>
c0020347:	83 c4 10             	add    esp,0x10
c002034a:	83 ec 08             	sub    esp,0x8
c002034d:	68 06 be 02 c0       	push   0xc002be06
c0020352:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020359:	50                   	push   eax
c002035a:	e8 ed 05 fe ff       	call   c000094c <strcat>
c002035f:	83 c4 10             	add    esp,0x10
c0020362:	83 ec 04             	sub    esp,0x4
c0020365:	6a 01                	push   0x1
c0020367:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c002036e:	50                   	push   eax
c002036f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020373:	50                   	push   eax
c0020374:	e8 de 4b fe ff       	call   c0004f57 <f_open>
c0020379:	83 c4 10             	add    esp,0x10
c002037c:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020383:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c002038a:	85 c0                	test   eax,eax
c002038c:	74 0a                	je     c0020398 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c002038e:	78 2d                	js     c00203bd <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020390:	83 e8 04             	sub    eax,0x4
c0020393:	83 f8 01             	cmp    eax,0x1
c0020396:	77 25                	ja     c00203bd <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020398:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00203a0:	83 ec 0c             	sub    esp,0xc
c00203a3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00203a7:	50                   	push   eax
c00203a8:	e8 fc 56 fe ff       	call   c0005aa9 <f_close>
c00203ad:	83 c4 10             	add    esp,0x10
c00203b0:	90                   	nop
c00203b1:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00203b9:	74 3a                	je     c00203f5 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00203bb:	eb 2d                	jmp    c00203ea <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00203bd:	83 ec 0c             	sub    esp,0xc
c00203c0:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00203c7:	e8 ed f1 fe ff       	call   c000f5b9 <rfree>
c00203cc:	83 c4 10             	add    esp,0x10
c00203cf:	83 ec 04             	sub    esp,0x4
c00203d2:	6a 00                	push   0x0
c00203d4:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00203db:	50                   	push   eax
c00203dc:	6a 00                	push   0x0
c00203de:	e8 12 4b fe ff       	call   c0004ef5 <f_mount>
c00203e3:	83 c4 10             	add    esp,0x10
c00203e6:	b0 00                	mov    al,0x0
c00203e8:	eb 12                	jmp    c00203fc <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00203ea:	a1 40 0f 03 c0       	mov    eax,ds:0xc0030f40
c00203ef:	40                   	inc    eax
c00203f0:	a3 40 0f 03 c0       	mov    ds:0xc0030f40,eax
c00203f5:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00203fc:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020402:	c3                   	ret    
c0020403:	90                   	nop

c0020404 <FAT::getFileFirstSector(char const*)>:
c0020404:	53                   	push   ebx
c0020405:	83 ec 28             	sub    esp,0x28
c0020408:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c0020410:	83 ec 0c             	sub    esp,0xc
c0020413:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020417:	e8 7d f1 fe ff       	call   c000f599 <malloc>
c002041c:	83 c4 10             	add    esp,0x10
c002041f:	89 c3                	mov    ebx,eax
c0020421:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0020426:	83 ec 04             	sub    esp,0x4
c0020429:	50                   	push   eax
c002042a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002042e:	53                   	push   ebx
c002042f:	e8 f8 27 ff ff       	call   c0012c2c <File::File(char const*, Process*)>
c0020434:	83 c4 10             	add    esp,0x10
c0020437:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c002043b:	83 ec 08             	sub    esp,0x8
c002043e:	6a 01                	push   0x1
c0020440:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020444:	e8 47 28 ff ff       	call   c0012c90 <File::open(FileOpenMode)>
c0020449:	83 c4 10             	add    esp,0x10
c002044c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020450:	8b 00                	mov    eax,DWORD PTR [eax]
c0020452:	83 c0 0c             	add    eax,0xc
c0020455:	8b 00                	mov    eax,DWORD PTR [eax]
c0020457:	83 ec 0c             	sub    esp,0xc
c002045a:	8d 54 24 14          	lea    edx,[esp+0x14]
c002045e:	52                   	push   edx
c002045f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020463:	52                   	push   edx
c0020464:	6a 00                	push   0x0
c0020466:	6a 04                	push   0x4
c0020468:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002046c:	ff d0                	call   eax
c002046e:	83 c4 20             	add    esp,0x20
c0020471:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020475:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c002047b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002047f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020483:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020486:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020489:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002048d:	83 ec 0c             	sub    esp,0xc
c0020490:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020494:	e8 55 28 ff ff       	call   c0012cee <File::close()>
c0020499:	83 c4 10             	add    esp,0x10
c002049c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00204a0:	ba 00 00 00 00       	mov    edx,0x0
c00204a5:	83 c4 28             	add    esp,0x28
c00204a8:	5b                   	pop    ebx
c00204a9:	c3                   	ret    

c00204aa <FAT::readDir(void*, unsigned long, void*, int*)>:
c00204aa:	57                   	push   edi
c00204ab:	56                   	push   esi
c00204ac:	53                   	push   ebx
c00204ad:	81 ec 50 02 00 00    	sub    esp,0x250
c00204b3:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00204bb:	74 0a                	je     c00204c7 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c00204bd:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00204c5:	75 0a                	jne    c00204d1 <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c00204c7:	b8 04 00 00 00       	mov    eax,0x4
c00204cc:	e9 29 01 00 00       	jmp    c00205fa <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00204d1:	83 ec 08             	sub    esp,0x8
c00204d4:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00204db:	50                   	push   eax
c00204dc:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00204e3:	e8 cb 5b fe ff       	call   c00060b3 <f_readdir>
c00204e8:	83 c4 10             	add    esp,0x10
c00204eb:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00204f2:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c00204f9:	83 ec 0c             	sub    esp,0xc
c00204fc:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0020503:	83 c0 1a             	add    eax,0x1a
c0020506:	50                   	push   eax
c0020507:	e8 60 02 fe ff       	call   c000076c <strlen>
c002050c:	83 c4 10             	add    esp,0x10
c002050f:	ba 00 00 00 00       	mov    edx,0x0
c0020514:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020518:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002051c:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0020523:	0f b6 c0             	movzx  eax,al
c0020526:	83 e0 10             	and    eax,0x10
c0020529:	74 07                	je     c0020532 <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c002052b:	b8 02 00 00 00       	mov    eax,0x2
c0020530:	eb 05                	jmp    c0020537 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c0020532:	b8 01 00 00 00       	mov    eax,0x1
c0020537:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002053b:	83 ec 08             	sub    esp,0x8
c002053e:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020545:	83 c0 1a             	add    eax,0x1a
c0020548:	50                   	push   eax
c0020549:	8d 44 24 10          	lea    eax,[esp+0x10]
c002054d:	83 c0 10             	add    eax,0x10
c0020550:	50                   	push   eax
c0020551:	e8 b6 02 fe ff       	call   c000080c <strcpy>
c0020556:	83 c4 10             	add    esp,0x10
c0020559:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0020560:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0020567:	8d 44 24 04          	lea    eax,[esp+0x4]
c002056b:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0020572:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0020579:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0020580:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0020587:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c002058e:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0020595:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c002059c:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00205a3:	89 c6                	mov    esi,eax
c00205a5:	89 d7                	mov    edi,edx
c00205a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00205a9:	89 c8                	mov    eax,ecx
c00205ab:	89 fa                	mov    edx,edi
c00205ad:	89 f3                	mov    ebx,esi
c00205af:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00205b6:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00205bd:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00205c4:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00205cb:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00205d1:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00205d8:	84 c0                	test   al,al
c00205da:	75 07                	jne    c00205e3 <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c00205dc:	b8 07 00 00 00       	mov    eax,0x7
c00205e1:	eb 17                	jmp    c00205fa <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00205e3:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00205ea:	85 c0                	test   eax,eax
c00205ec:	75 07                	jne    c00205f5 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c00205ee:	b8 00 00 00 00       	mov    eax,0x0
c00205f3:	eb 05                	jmp    c00205fa <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00205f5:	b8 01 00 00 00       	mov    eax,0x1
c00205fa:	81 c4 50 02 00 00    	add    esp,0x250
c0020600:	5b                   	pop    ebx
c0020601:	5e                   	pop    esi
c0020602:	5f                   	pop    edi
c0020603:	c3                   	ret    

c0020604 <FAT::read(void*, unsigned long, void*, int*)>:
c0020604:	83 ec 1c             	sub    esp,0x1c
c0020607:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002060c:	74 07                	je     c0020615 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c002060e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020613:	75 07                	jne    c002061c <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020615:	b8 04 00 00 00       	mov    eax,0x4
c002061a:	eb 3d                	jmp    c0020659 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c002061c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020620:	50                   	push   eax
c0020621:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020625:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020629:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002062d:	e8 61 4d fe ff       	call   c0005393 <f_read>
c0020632:	83 c4 10             	add    esp,0x10
c0020635:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002063d:	89 c2                	mov    edx,eax
c002063f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020643:	89 10                	mov    DWORD PTR [eax],edx
c0020645:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020649:	85 c0                	test   eax,eax
c002064b:	75 07                	jne    c0020654 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c002064d:	b8 00 00 00 00       	mov    eax,0x0
c0020652:	eb 05                	jmp    c0020659 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020654:	b8 01 00 00 00       	mov    eax,0x1
c0020659:	83 c4 1c             	add    esp,0x1c
c002065c:	c3                   	ret    
c002065d:	90                   	nop

c002065e <FAT::write(void*, unsigned long, void*, int*)>:
c002065e:	83 ec 1c             	sub    esp,0x1c
c0020661:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020666:	74 07                	je     c002066f <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020668:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002066d:	75 07                	jne    c0020676 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c002066f:	b8 04 00 00 00       	mov    eax,0x4
c0020674:	eb 3d                	jmp    c00206b3 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020676:	8d 44 24 08          	lea    eax,[esp+0x8]
c002067a:	50                   	push   eax
c002067b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002067f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020683:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020687:	e8 87 4f fe ff       	call   c0005613 <f_write>
c002068c:	83 c4 10             	add    esp,0x10
c002068f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020693:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020697:	89 c2                	mov    edx,eax
c0020699:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002069d:	89 10                	mov    DWORD PTR [eax],edx
c002069f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00206a3:	85 c0                	test   eax,eax
c00206a5:	75 07                	jne    c00206ae <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00206a7:	b8 00 00 00 00       	mov    eax,0x0
c00206ac:	eb 05                	jmp    c00206b3 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00206ae:	b8 01 00 00 00       	mov    eax,0x1
c00206b3:	83 c4 1c             	add    esp,0x1c
c00206b6:	c3                   	ret    
c00206b7:	90                   	nop

c00206b8 <FAT::close(void*)>:
c00206b8:	83 ec 1c             	sub    esp,0x1c
c00206bb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00206c0:	75 07                	jne    c00206c9 <FAT::close(void*)+0x11>
c00206c2:	b8 04 00 00 00       	mov    eax,0x4
c00206c7:	eb 36                	jmp    c00206ff <FAT::close(void*)+0x47>
c00206c9:	83 ec 0c             	sub    esp,0xc
c00206cc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00206d0:	e8 d4 53 fe ff       	call   c0005aa9 <f_close>
c00206d5:	83 c4 10             	add    esp,0x10
c00206d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00206dc:	83 ec 0c             	sub    esp,0xc
c00206df:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00206e3:	e8 c1 ee fe ff       	call   c000f5a9 <free>
c00206e8:	83 c4 10             	add    esp,0x10
c00206eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00206ef:	85 c0                	test   eax,eax
c00206f1:	75 07                	jne    c00206fa <FAT::close(void*)+0x42>
c00206f3:	b8 00 00 00 00       	mov    eax,0x0
c00206f8:	eb 05                	jmp    c00206ff <FAT::close(void*)+0x47>
c00206fa:	b8 01 00 00 00       	mov    eax,0x1
c00206ff:	83 c4 1c             	add    esp,0x1c
c0020702:	c3                   	ret    
c0020703:	90                   	nop

c0020704 <FAT::closeDir(void*)>:
c0020704:	83 ec 1c             	sub    esp,0x1c
c0020707:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002070c:	75 07                	jne    c0020715 <FAT::closeDir(void*)+0x11>
c002070e:	b8 04 00 00 00       	mov    eax,0x4
c0020713:	eb 36                	jmp    c002074b <FAT::closeDir(void*)+0x47>
c0020715:	83 ec 0c             	sub    esp,0xc
c0020718:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002071c:	e8 70 59 fe ff       	call   c0006091 <f_closedir>
c0020721:	83 c4 10             	add    esp,0x10
c0020724:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020728:	83 ec 0c             	sub    esp,0xc
c002072b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002072f:	e8 75 ee fe ff       	call   c000f5a9 <free>
c0020734:	83 c4 10             	add    esp,0x10
c0020737:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002073b:	85 c0                	test   eax,eax
c002073d:	75 07                	jne    c0020746 <FAT::closeDir(void*)+0x42>
c002073f:	b8 00 00 00 00       	mov    eax,0x0
c0020744:	eb 05                	jmp    c002074b <FAT::closeDir(void*)+0x47>
c0020746:	b8 01 00 00 00       	mov    eax,0x1
c002074b:	83 c4 1c             	add    esp,0x1c
c002074e:	c3                   	ret    
c002074f:	90                   	nop

c0020750 <FAT::seek(void*, unsigned long long)>:
c0020750:	83 ec 2c             	sub    esp,0x2c
c0020753:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020757:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002075b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002075f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020763:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020768:	75 07                	jne    c0020771 <FAT::seek(void*, unsigned long long)+0x21>
c002076a:	b8 04 00 00 00       	mov    eax,0x4
c002076f:	eb 2f                	jmp    c00207a0 <FAT::seek(void*, unsigned long long)+0x50>
c0020771:	83 ec 04             	sub    esp,0x4
c0020774:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020778:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002077c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020780:	e8 53 53 fe ff       	call   c0005ad8 <f_lseek>
c0020785:	83 c4 10             	add    esp,0x10
c0020788:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002078c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020790:	85 c0                	test   eax,eax
c0020792:	75 07                	jne    c002079b <FAT::seek(void*, unsigned long long)+0x4b>
c0020794:	b8 00 00 00 00       	mov    eax,0x0
c0020799:	eb 05                	jmp    c00207a0 <FAT::seek(void*, unsigned long long)+0x50>
c002079b:	b8 01 00 00 00       	mov    eax,0x1
c00207a0:	83 c4 2c             	add    esp,0x2c
c00207a3:	c3                   	ret    

c00207a4 <fatWrapperReadDisk>:
c00207a4:	83 ec 1c             	sub    esp,0x1c
c00207a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207ab:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00207af:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00207b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00207b6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00207ba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00207be:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00207c3:	8b 04 85 20 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd20e0]
c00207ca:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00207ce:	83 ec 0c             	sub    esp,0xc
c00207d1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00207d5:	52                   	push   edx
c00207d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00207da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00207de:	50                   	push   eax
c00207df:	e8 3e 58 ff ff       	call   c0016022 <LogicalDisk::read(unsigned long long, int, void*)>
c00207e4:	83 c4 20             	add    esp,0x20
c00207e7:	83 c4 1c             	add    esp,0x1c
c00207ea:	c3                   	ret    

c00207eb <fatWrapperWriteDisk>:
c00207eb:	83 ec 1c             	sub    esp,0x1c
c00207ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207f2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00207f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00207fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00207fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020801:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020805:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002080a:	8b 04 85 20 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd20e0]
c0020811:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020815:	83 ec 0c             	sub    esp,0xc
c0020818:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002081c:	52                   	push   edx
c002081d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020821:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020825:	50                   	push   eax
c0020826:	e8 63 58 ff ff       	call   c001608e <LogicalDisk::write(unsigned long long, int, void*)>
c002082b:	83 c4 20             	add    esp,0x20
c002082e:	83 c4 1c             	add    esp,0x1c
c0020831:	c3                   	ret    

c0020832 <fatWrapperIoctl>:
c0020832:	53                   	push   ebx
c0020833:	83 ec 28             	sub    esp,0x28
c0020836:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002083a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002083e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020842:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020846:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c002084b:	75 31                	jne    c002087e <fatWrapperIoctl+0x4c>
c002084d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020851:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020855:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002085a:	8b 04 85 20 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd20e0]
c0020861:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020867:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002086d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020871:	66 89 02             	mov    WORD PTR [edx],ax
c0020874:	b8 00 00 00 00       	mov    eax,0x0
c0020879:	e9 b2 00 00 00       	jmp    c0020930 <fatWrapperIoctl+0xfe>
c002087e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020883:	75 6a                	jne    c00208ef <fatWrapperIoctl+0xbd>
c0020885:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020889:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002088d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020892:	8b 04 85 20 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd20e0]
c0020899:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002089f:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00208a5:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00208ab:	89 c8                	mov    eax,ecx
c00208ad:	89 da                	mov    edx,ebx
c00208af:	0f a4 c2 0a          	shld   edx,eax,0xa
c00208b3:	c1 e0 0a             	shl    eax,0xa
c00208b6:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00208bb:	8b 0c 8d 20 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd20e0]
c00208c2:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00208c8:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00208ce:	89 cb                	mov    ebx,ecx
c00208d0:	c1 fb 1f             	sar    ebx,0x1f
c00208d3:	53                   	push   ebx
c00208d4:	51                   	push   ecx
c00208d5:	52                   	push   edx
c00208d6:	50                   	push   eax
c00208d7:	e8 38 5e 00 00       	call   c0026714 <__udivdi3>
c00208dc:	83 c4 10             	add    esp,0x10
c00208df:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00208e3:	89 01                	mov    DWORD PTR [ecx],eax
c00208e5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00208e8:	b8 00 00 00 00       	mov    eax,0x0
c00208ed:	eb 41                	jmp    c0020930 <fatWrapperIoctl+0xfe>
c00208ef:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00208f4:	75 07                	jne    c00208fd <fatWrapperIoctl+0xcb>
c00208f6:	b8 00 00 00 00       	mov    eax,0x0
c00208fb:	eb 33                	jmp    c0020930 <fatWrapperIoctl+0xfe>
c00208fd:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020902:	75 19                	jne    c002091d <fatWrapperIoctl+0xeb>
c0020904:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020908:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002090c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020910:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020916:	b8 00 00 00 00       	mov    eax,0x0
c002091b:	eb 13                	jmp    c0020930 <fatWrapperIoctl+0xfe>
c002091d:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020922:	75 07                	jne    c002092b <fatWrapperIoctl+0xf9>
c0020924:	b8 00 00 00 00       	mov    eax,0x0
c0020929:	eb 05                	jmp    c0020930 <fatWrapperIoctl+0xfe>
c002092b:	b8 04 00 00 00       	mov    eax,0x4
c0020930:	83 c4 28             	add    esp,0x28
c0020933:	5b                   	pop    ebx
c0020934:	c3                   	ret    
c0020935:	90                   	nop

c0020936 <FAT::FAT()>:
c0020936:	83 ec 1c             	sub    esp,0x1c
c0020939:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002093d:	83 ec 0c             	sub    esp,0xc
c0020940:	50                   	push   eax
c0020941:	e8 92 20 ff ff       	call   c00129d8 <Filesystem::Filesystem()>
c0020946:	83 c4 10             	add    esp,0x10
c0020949:	ba 1c be 02 c0       	mov    edx,0xc002be1c
c002094e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020952:	89 10                	mov    DWORD PTR [eax],edx
c0020954:	c7 05 40 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f40,0x0
c002095e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020966:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c002096b:	7f 15                	jg     c0020982 <FAT::FAT()+0x4c>
c002096d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020971:	c7 04 85 60 0f 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcf0a0],0xffffffff
c002097c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020980:	eb e4                	jmp    c0020966 <FAT::FAT()+0x30>
c0020982:	90                   	nop
c0020983:	83 c4 1c             	add    esp,0x1c
c0020986:	c3                   	ret    
c0020987:	90                   	nop

c0020988 <FAT::fixFilepath(char*)>:
c0020988:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002098c:	8a 00                	mov    al,BYTE PTR [eax]
c002098e:	3c 40                	cmp    al,0x40
c0020990:	7e 2c                	jle    c00209be <FAT::fixFilepath(char*)+0x36>
c0020992:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020996:	8a 00                	mov    al,BYTE PTR [eax]
c0020998:	83 e8 41             	sub    eax,0x41
c002099b:	88 c2                	mov    dl,al
c002099d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209a1:	88 10                	mov    BYTE PTR [eax],dl
c00209a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209a7:	8a 00                	mov    al,BYTE PTR [eax]
c00209a9:	0f be c0             	movsx  eax,al
c00209ac:	8b 04 85 60 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0a0]
c00209b3:	83 c0 30             	add    eax,0x30
c00209b6:	88 c2                	mov    dl,al
c00209b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209bc:	88 10                	mov    BYTE PTR [eax],dl
c00209be:	90                   	nop
c00209bf:	c3                   	ret    

c00209c0 <FAT::open(char const*, void**, FileOpenMode)>:
c00209c0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00209c6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00209ce:	74 0a                	je     c00209da <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00209d0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00209d8:	75 0a                	jne    c00209e4 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00209da:	b8 04 00 00 00       	mov    eax,0x4
c00209df:	e9 fd 00 00 00       	jmp    c0020ae1 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00209e4:	83 ec 08             	sub    esp,0x8
c00209e7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00209ee:	8d 44 24 14          	lea    eax,[esp+0x14]
c00209f2:	50                   	push   eax
c00209f3:	e8 14 fe fd ff       	call   c000080c <strcpy>
c00209f8:	83 c4 10             	add    esp,0x10
c00209fb:	83 ec 08             	sub    esp,0x8
c00209fe:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020a02:	50                   	push   eax
c0020a03:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020a0a:	e8 79 ff ff ff       	call   c0020988 <FAT::fixFilepath(char*)>
c0020a0f:	83 c4 10             	add    esp,0x10
c0020a12:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020a1a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a21:	83 e0 01             	and    eax,0x1
c0020a24:	74 08                	je     c0020a2e <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020a26:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020a2e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a35:	83 e0 04             	and    eax,0x4
c0020a38:	74 10                	je     c0020a4a <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020a3a:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020a42:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020a4a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a51:	83 e0 02             	and    eax,0x2
c0020a54:	74 08                	je     c0020a5e <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020a56:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020a5e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a65:	83 e0 08             	and    eax,0x8
c0020a68:	74 08                	je     c0020a72 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020a6a:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020a72:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a79:	83 e0 10             	and    eax,0x10
c0020a7c:	74 08                	je     c0020a86 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020a7e:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020a86:	83 ec 0c             	sub    esp,0xc
c0020a89:	68 50 02 00 00       	push   0x250
c0020a8e:	e8 06 eb fe ff       	call   c000f599 <malloc>
c0020a93:	83 c4 10             	add    esp,0x10
c0020a96:	89 c2                	mov    edx,eax
c0020a98:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020a9f:	89 10                	mov    DWORD PTR [eax],edx
c0020aa1:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020aa9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020ab0:	8b 00                	mov    eax,DWORD PTR [eax]
c0020ab2:	83 ec 04             	sub    esp,0x4
c0020ab5:	52                   	push   edx
c0020ab6:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020aba:	52                   	push   edx
c0020abb:	50                   	push   eax
c0020abc:	e8 96 44 fe ff       	call   c0004f57 <f_open>
c0020ac1:	83 c4 10             	add    esp,0x10
c0020ac4:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020acb:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020ad3:	74 07                	je     c0020adc <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020ad5:	b8 01 00 00 00       	mov    eax,0x1
c0020ada:	eb 05                	jmp    c0020ae1 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020adc:	b8 00 00 00 00       	mov    eax,0x0
c0020ae1:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020ae7:	c3                   	ret    

c0020ae8 <FAT::openDir(char const*, void**)>:
c0020ae8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020aee:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020af6:	74 0a                	je     c0020b02 <FAT::openDir(char const*, void**)+0x1a>
c0020af8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020b00:	75 07                	jne    c0020b09 <FAT::openDir(char const*, void**)+0x21>
c0020b02:	b8 04 00 00 00       	mov    eax,0x4
c0020b07:	eb 7d                	jmp    c0020b86 <FAT::openDir(char const*, void**)+0x9e>
c0020b09:	83 ec 08             	sub    esp,0x8
c0020b0c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020b13:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020b17:	50                   	push   eax
c0020b18:	e8 ef fc fd ff       	call   c000080c <strcpy>
c0020b1d:	83 c4 10             	add    esp,0x10
c0020b20:	83 ec 08             	sub    esp,0x8
c0020b23:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020b27:	50                   	push   eax
c0020b28:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020b2f:	e8 54 fe ff ff       	call   c0020988 <FAT::fixFilepath(char*)>
c0020b34:	83 c4 10             	add    esp,0x10
c0020b37:	83 ec 0c             	sub    esp,0xc
c0020b3a:	6a 4c                	push   0x4c
c0020b3c:	e8 58 ea fe ff       	call   c000f599 <malloc>
c0020b41:	83 c4 10             	add    esp,0x10
c0020b44:	89 c2                	mov    edx,eax
c0020b46:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020b4d:	89 10                	mov    DWORD PTR [eax],edx
c0020b4f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020b56:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b58:	83 ec 08             	sub    esp,0x8
c0020b5b:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020b5f:	52                   	push   edx
c0020b60:	50                   	push   eax
c0020b61:	e8 29 54 fe ff       	call   c0005f8f <f_opendir>
c0020b66:	83 c4 10             	add    esp,0x10
c0020b69:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020b70:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020b78:	74 07                	je     c0020b81 <FAT::openDir(char const*, void**)+0x99>
c0020b7a:	b8 01 00 00 00       	mov    eax,0x1
c0020b7f:	eb 05                	jmp    c0020b86 <FAT::openDir(char const*, void**)+0x9e>
c0020b81:	b8 00 00 00 00       	mov    eax,0x0
c0020b86:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020b8c:	c3                   	ret    
c0020b8d:	90                   	nop

c0020b8e <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020b8e:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020b94:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020b9c:	75 0a                	jne    c0020ba8 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020b9e:	b8 04 00 00 00       	mov    eax,0x4
c0020ba3:	e9 c9 00 00 00       	jmp    c0020c71 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020ba8:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020bb0:	75 0a                	jne    c0020bbc <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020bb2:	b8 04 00 00 00       	mov    eax,0x4
c0020bb7:	e9 b5 00 00 00       	jmp    c0020c71 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020bbc:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020bc4:	75 0a                	jne    c0020bd0 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020bc6:	b8 04 00 00 00       	mov    eax,0x4
c0020bcb:	e9 a1 00 00 00       	jmp    c0020c71 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020bd0:	83 ec 08             	sub    esp,0x8
c0020bd3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020bda:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020be1:	50                   	push   eax
c0020be2:	e8 25 fc fd ff       	call   c000080c <strcpy>
c0020be7:	83 c4 10             	add    esp,0x10
c0020bea:	83 ec 08             	sub    esp,0x8
c0020bed:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020bf4:	50                   	push   eax
c0020bf5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020bfc:	e8 87 fd ff ff       	call   c0020988 <FAT::fixFilepath(char*)>
c0020c01:	83 c4 10             	add    esp,0x10
c0020c04:	83 ec 08             	sub    esp,0x8
c0020c07:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c0b:	50                   	push   eax
c0020c0c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020c13:	50                   	push   eax
c0020c14:	e8 35 55 fe ff       	call   c000614e <f_stat>
c0020c19:	83 c4 10             	add    esp,0x10
c0020c1c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020c23:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020c2a:	85 c0                	test   eax,eax
c0020c2c:	74 07                	je     c0020c35 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020c2e:	83 f8 04             	cmp    eax,0x4
c0020c31:	74 32                	je     c0020c65 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020c33:	eb 37                	jmp    c0020c6c <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020c35:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020c39:	0f b6 c0             	movzx  eax,al
c0020c3c:	83 e0 10             	and    eax,0x10
c0020c3f:	0f 95 c2             	setne  dl
c0020c42:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020c49:	88 10                	mov    BYTE PTR [eax],dl
c0020c4b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020c4e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020c52:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020c59:	89 01                	mov    DWORD PTR [ecx],eax
c0020c5b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020c5e:	b8 00 00 00 00       	mov    eax,0x0
c0020c63:	eb 0c                	jmp    c0020c71 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020c65:	b8 02 00 00 00       	mov    eax,0x2
c0020c6a:	eb 05                	jmp    c0020c71 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020c6c:	b8 01 00 00 00       	mov    eax,0x1
c0020c71:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020c77:	c3                   	ret    

c0020c78 <FAT::unlink(char const*)>:
c0020c78:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020c7e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020c86:	75 07                	jne    c0020c8f <FAT::unlink(char const*)+0x17>
c0020c88:	b8 04 00 00 00       	mov    eax,0x4
c0020c8d:	eb 5c                	jmp    c0020ceb <FAT::unlink(char const*)+0x73>
c0020c8f:	83 ec 08             	sub    esp,0x8
c0020c92:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020c99:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020c9d:	50                   	push   eax
c0020c9e:	e8 69 fb fd ff       	call   c000080c <strcpy>
c0020ca3:	83 c4 10             	add    esp,0x10
c0020ca6:	83 ec 08             	sub    esp,0x8
c0020ca9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020cad:	50                   	push   eax
c0020cae:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020cb5:	e8 ce fc ff ff       	call   c0020988 <FAT::fixFilepath(char*)>
c0020cba:	83 c4 10             	add    esp,0x10
c0020cbd:	83 ec 0c             	sub    esp,0xc
c0020cc0:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020cc4:	50                   	push   eax
c0020cc5:	e8 d6 57 fe ff       	call   c00064a0 <f_unlink>
c0020cca:	83 c4 10             	add    esp,0x10
c0020ccd:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020cd4:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020cdb:	85 c0                	test   eax,eax
c0020cdd:	75 07                	jne    c0020ce6 <FAT::unlink(char const*)+0x6e>
c0020cdf:	b8 00 00 00 00       	mov    eax,0x0
c0020ce4:	eb 05                	jmp    c0020ceb <FAT::unlink(char const*)+0x73>
c0020ce6:	b8 01 00 00 00       	mov    eax,0x1
c0020ceb:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020cf1:	c3                   	ret    

c0020cf2 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020cf2:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020cf8:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020cff:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020d06:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020d0a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020d0e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020d16:	75 0a                	jne    c0020d22 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020d18:	b8 04 00 00 00       	mov    eax,0x4
c0020d1d:	e9 1c 01 00 00       	jmp    c0020e3e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020d22:	83 ec 08             	sub    esp,0x8
c0020d25:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020d2c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020d30:	50                   	push   eax
c0020d31:	e8 d6 fa fd ff       	call   c000080c <strcpy>
c0020d36:	83 c4 10             	add    esp,0x10
c0020d39:	83 ec 08             	sub    esp,0x8
c0020d3c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020d40:	50                   	push   eax
c0020d41:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020d48:	e8 3b fc ff ff       	call   c0020988 <FAT::fixFilepath(char*)>
c0020d4d:	83 c4 10             	add    esp,0x10
c0020d50:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020d58:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020d60:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020d65:	83 e0 01             	and    eax,0x1
c0020d68:	74 08                	je     c0020d72 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020d6a:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020d72:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020d77:	83 e0 02             	and    eax,0x2
c0020d7a:	74 08                	je     c0020d84 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020d7c:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020d84:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020d89:	83 e0 04             	and    eax,0x4
c0020d8c:	74 08                	je     c0020d96 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020d8e:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020d96:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020d9b:	83 e0 08             	and    eax,0x8
c0020d9e:	74 08                	je     c0020da8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020da0:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020da8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020dad:	83 e0 01             	and    eax,0x1
c0020db0:	74 08                	je     c0020dba <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020db2:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020dba:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020dbf:	83 e0 02             	and    eax,0x2
c0020dc2:	74 08                	je     c0020dcc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020dc4:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020dcc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020dd1:	83 e0 04             	and    eax,0x4
c0020dd4:	74 08                	je     c0020dde <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020dd6:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020dde:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020de3:	83 e0 08             	and    eax,0x8
c0020de6:	74 08                	je     c0020df0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020de8:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020df0:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020df7:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020dfe:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020e06:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020e0e:	83 ec 04             	sub    esp,0x4
c0020e11:	52                   	push   edx
c0020e12:	50                   	push   eax
c0020e13:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020e17:	50                   	push   eax
c0020e18:	e8 25 5d fe ff       	call   c0006b42 <f_chmod>
c0020e1d:	83 c4 10             	add    esp,0x10
c0020e20:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020e27:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020e2e:	85 c0                	test   eax,eax
c0020e30:	75 07                	jne    c0020e39 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020e32:	b8 00 00 00 00       	mov    eax,0x0
c0020e37:	eb 05                	jmp    c0020e3e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020e39:	b8 01 00 00 00       	mov    eax,0x1
c0020e3e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020e44:	c3                   	ret    
c0020e45:	90                   	nop

c0020e46 <FAT::rename(char const*, char const*)>:
c0020e46:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020e4c:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020e54:	74 0a                	je     c0020e60 <FAT::rename(char const*, char const*)+0x1a>
c0020e56:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020e5e:	75 0a                	jne    c0020e6a <FAT::rename(char const*, char const*)+0x24>
c0020e60:	b8 04 00 00 00       	mov    eax,0x4
c0020e65:	e9 98 00 00 00       	jmp    c0020f02 <FAT::rename(char const*, char const*)+0xbc>
c0020e6a:	83 ec 08             	sub    esp,0x8
c0020e6d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020e74:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020e7b:	50                   	push   eax
c0020e7c:	e8 8b f9 fd ff       	call   c000080c <strcpy>
c0020e81:	83 c4 10             	add    esp,0x10
c0020e84:	83 ec 08             	sub    esp,0x8
c0020e87:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020e8e:	50                   	push   eax
c0020e8f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020e96:	e8 ed fa ff ff       	call   c0020988 <FAT::fixFilepath(char*)>
c0020e9b:	83 c4 10             	add    esp,0x10
c0020e9e:	83 ec 08             	sub    esp,0x8
c0020ea1:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020ea8:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020eac:	50                   	push   eax
c0020ead:	e8 5a f9 fd ff       	call   c000080c <strcpy>
c0020eb2:	83 c4 10             	add    esp,0x10
c0020eb5:	83 ec 08             	sub    esp,0x8
c0020eb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020ebc:	50                   	push   eax
c0020ebd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020ec4:	e8 bf fa ff ff       	call   c0020988 <FAT::fixFilepath(char*)>
c0020ec9:	83 c4 10             	add    esp,0x10
c0020ecc:	83 ec 08             	sub    esp,0x8
c0020ecf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020ed3:	50                   	push   eax
c0020ed4:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020edb:	50                   	push   eax
c0020edc:	e8 6e 59 fe ff       	call   c000684f <f_rename>
c0020ee1:	83 c4 10             	add    esp,0x10
c0020ee4:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020eeb:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020ef2:	85 c0                	test   eax,eax
c0020ef4:	75 07                	jne    c0020efd <FAT::rename(char const*, char const*)+0xb7>
c0020ef6:	b8 00 00 00 00       	mov    eax,0x0
c0020efb:	eb 05                	jmp    c0020f02 <FAT::rename(char const*, char const*)+0xbc>
c0020efd:	b8 01 00 00 00       	mov    eax,0x1
c0020f02:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020f08:	c3                   	ret    
c0020f09:	90                   	nop

c0020f0a <FAT::mkdir(char const*)>:
c0020f0a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020f10:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020f18:	75 07                	jne    c0020f21 <FAT::mkdir(char const*)+0x17>
c0020f1a:	b8 04 00 00 00       	mov    eax,0x4
c0020f1f:	eb 5c                	jmp    c0020f7d <FAT::mkdir(char const*)+0x73>
c0020f21:	83 ec 08             	sub    esp,0x8
c0020f24:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020f2b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f2f:	50                   	push   eax
c0020f30:	e8 d7 f8 fd ff       	call   c000080c <strcpy>
c0020f35:	83 c4 10             	add    esp,0x10
c0020f38:	83 ec 08             	sub    esp,0x8
c0020f3b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020f3f:	50                   	push   eax
c0020f40:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020f47:	e8 3c fa ff ff       	call   c0020988 <FAT::fixFilepath(char*)>
c0020f4c:	83 c4 10             	add    esp,0x10
c0020f4f:	83 ec 0c             	sub    esp,0xc
c0020f52:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f56:	50                   	push   eax
c0020f57:	e8 c7 56 fe ff       	call   c0006623 <f_mkdir>
c0020f5c:	83 c4 10             	add    esp,0x10
c0020f5f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020f66:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020f6d:	85 c0                	test   eax,eax
c0020f6f:	75 07                	jne    c0020f78 <FAT::mkdir(char const*)+0x6e>
c0020f71:	b8 00 00 00 00       	mov    eax,0x0
c0020f76:	eb 05                	jmp    c0020f7d <FAT::mkdir(char const*)+0x73>
c0020f78:	b8 01 00 00 00       	mov    eax,0x1
c0020f7d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020f83:	c3                   	ret    

c0020f84 <FAT::exists(char const*)>:
c0020f84:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020f8a:	83 ec 08             	sub    esp,0x8
c0020f8d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020f94:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020f98:	50                   	push   eax
c0020f99:	e8 6e f8 fd ff       	call   c000080c <strcpy>
c0020f9e:	83 c4 10             	add    esp,0x10
c0020fa1:	83 ec 08             	sub    esp,0x8
c0020fa4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020fa8:	50                   	push   eax
c0020fa9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020fb0:	e8 d3 f9 ff ff       	call   c0020988 <FAT::fixFilepath(char*)>
c0020fb5:	83 c4 10             	add    esp,0x10
c0020fb8:	83 ec 08             	sub    esp,0x8
c0020fbb:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0020fc2:	50                   	push   eax
c0020fc3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020fc7:	50                   	push   eax
c0020fc8:	e8 81 51 fe ff       	call   c000614e <f_stat>
c0020fcd:	83 c4 10             	add    esp,0x10
c0020fd0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020fd7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020fde:	85 c0                	test   eax,eax
c0020fe0:	75 04                	jne    c0020fe6 <FAT::exists(char const*)+0x62>
c0020fe2:	b0 01                	mov    al,0x1
c0020fe4:	eb 02                	jmp    c0020fe8 <FAT::exists(char const*)+0x64>
c0020fe6:	b0 00                	mov    al,0x0
c0020fe8:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020fee:	c3                   	ret    
c0020fef:	90                   	nop

c0020ff0 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0020ff0:	b8 08 00 00 00       	mov    eax,0x8
c0020ff5:	c3                   	ret    

c0020ff6 <ISO9660::seek(void*, unsigned long long)>:
c0020ff6:	53                   	push   ebx
c0020ff7:	b8 04 00 00 00       	mov    eax,0x4
c0020ffc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021000:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021004:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021008:	85 d2                	test   edx,edx
c002100a:	74 17                	je     c0021023 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002100c:	89 c8                	mov    eax,ecx
c002100e:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021011:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021014:	b8 01 00 00 00       	mov    eax,0x1
c0021019:	73 08                	jae    c0021023 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002101b:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c002101e:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021021:	31 c0                	xor    eax,eax
c0021023:	5b                   	pop    ebx
c0021024:	c3                   	ret    
c0021025:	90                   	nop

c0021026 <ISO9660::tell(void*, unsigned long long*)>:
c0021026:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002102a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002102e:	85 d2                	test   edx,edx
c0021030:	74 12                	je     c0021044 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021032:	85 c0                	test   eax,eax
c0021034:	74 0e                	je     c0021044 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021036:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021039:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c002103c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002103f:	89 10                	mov    DWORD PTR [eax],edx
c0021041:	31 c0                	xor    eax,eax
c0021043:	c3                   	ret    
c0021044:	b8 04 00 00 00       	mov    eax,0x4
c0021049:	c3                   	ret    

c002104a <ISO9660::getName()>:
c002104a:	b8 7c be 02 c0       	mov    eax,0xc002be7c
c002104f:	c3                   	ret    

c0021050 <ISO9660::stat(void*, unsigned long long*)>:
c0021050:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021054:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021058:	85 d2                	test   edx,edx
c002105a:	74 12                	je     c002106e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002105c:	85 c0                	test   eax,eax
c002105e:	74 0e                	je     c002106e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021060:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021063:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021066:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021069:	89 10                	mov    DWORD PTR [eax],edx
c002106b:	31 c0                	xor    eax,eax
c002106d:	c3                   	ret    
c002106e:	b8 04 00 00 00       	mov    eax,0x4
c0021073:	c3                   	ret    

c0021074 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021074:	b8 01 00 00 00       	mov    eax,0x1
c0021079:	c3                   	ret    

c002107a <ISO9660::unlink(char const*)>:
c002107a:	b8 01 00 00 00       	mov    eax,0x1
c002107f:	c3                   	ret    

c0021080 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021080:	b8 01 00 00 00       	mov    eax,0x1
c0021085:	c3                   	ret    

c0021086 <ISO9660::rename(char const*, char const*)>:
c0021086:	b8 01 00 00 00       	mov    eax,0x1
c002108b:	c3                   	ret    

c002108c <ISO9660::mkdir(char const*)>:
c002108c:	b8 01 00 00 00       	mov    eax,0x1
c0021091:	c3                   	ret    

c0021092 <ISO9660::close(void*)>:
c0021092:	83 ec 0c             	sub    esp,0xc
c0021095:	b8 04 00 00 00       	mov    eax,0x4
c002109a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002109e:	85 d2                	test   edx,edx
c00210a0:	74 0e                	je     c00210b0 <ISO9660::close(void*)+0x1e>
c00210a2:	83 ec 0c             	sub    esp,0xc
c00210a5:	52                   	push   edx
c00210a6:	e8 fe e4 fe ff       	call   c000f5a9 <free>
c00210ab:	83 c4 10             	add    esp,0x10
c00210ae:	31 c0                	xor    eax,eax
c00210b0:	83 c4 0c             	add    esp,0xc
c00210b3:	c3                   	ret    

c00210b4 <ISO9660::closeDir(void*)>:
c00210b4:	83 ec 0c             	sub    esp,0xc
c00210b7:	b8 04 00 00 00       	mov    eax,0x4
c00210bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00210c0:	85 d2                	test   edx,edx
c00210c2:	74 0e                	je     c00210d2 <ISO9660::closeDir(void*)+0x1e>
c00210c4:	83 ec 0c             	sub    esp,0xc
c00210c7:	52                   	push   edx
c00210c8:	e8 dc e4 fe ff       	call   c000f5a9 <free>
c00210cd:	83 c4 10             	add    esp,0x10
c00210d0:	31 c0                	xor    eax,eax
c00210d2:	83 c4 0c             	add    esp,0xc
c00210d5:	c3                   	ret    

c00210d6 <ISO9660::~ISO9660()>:
c00210d6:	83 ec 0c             	sub    esp,0xc
c00210d9:	ba a0 be 02 c0       	mov    edx,0xc002bea0
c00210de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210e2:	89 10                	mov    DWORD PTR [eax],edx
c00210e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210e8:	83 ec 0c             	sub    esp,0xc
c00210eb:	50                   	push   eax
c00210ec:	e8 0b 19 ff ff       	call   c00129fc <Filesystem::~Filesystem()>
c00210f1:	83 c4 10             	add    esp,0x10
c00210f4:	90                   	nop
c00210f5:	83 c4 0c             	add    esp,0xc
c00210f8:	c3                   	ret    
c00210f9:	90                   	nop

c00210fa <ISO9660::~ISO9660()>:
c00210fa:	83 ec 0c             	sub    esp,0xc
c00210fd:	83 ec 0c             	sub    esp,0xc
c0021100:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021104:	e8 cd ff ff ff       	call   c00210d6 <ISO9660::~ISO9660()>
c0021109:	83 c4 10             	add    esp,0x10
c002110c:	83 ec 08             	sub    esp,0x8
c002110f:	6a 08                	push   0x8
c0021111:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021115:	e8 db 14 ff ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c002111a:	83 c4 10             	add    esp,0x10
c002111d:	83 c4 0c             	add    esp,0xc
c0021120:	c3                   	ret    

c0021121 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021121:	55                   	push   ebp
c0021122:	31 c9                	xor    ecx,ecx
c0021124:	57                   	push   edi
c0021125:	56                   	push   esi
c0021126:	53                   	push   ebx
c0021127:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c002112b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002112f:	89 eb                	mov    ebx,ebp
c0021131:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021135:	39 ce                	cmp    esi,ecx
c0021137:	7e 17                	jle    c0021150 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021139:	31 d2                	xor    edx,edx
c002113b:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c002113f:	7d 13                	jge    c0021154 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021141:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021145:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021148:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c002114b:	75 0d                	jne    c002115a <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c002114d:	42                   	inc    edx
c002114e:	eb eb                	jmp    c002113b <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021150:	31 c0                	xor    eax,eax
c0021152:	eb 0a                	jmp    c002115e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021154:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021158:	eb 04                	jmp    c002115e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002115a:	41                   	inc    ecx
c002115b:	43                   	inc    ebx
c002115c:	eb d7                	jmp    c0021135 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c002115e:	5b                   	pop    ebx
c002115f:	5e                   	pop    esi
c0021160:	5f                   	pop    edi
c0021161:	5d                   	pop    ebp
c0021162:	c3                   	ret    

c0021163 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021163:	57                   	push   edi
c0021164:	56                   	push   esi
c0021165:	53                   	push   ebx
c0021166:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002116a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002116e:	39 0d 40 10 03 c0    	cmp    DWORD PTR ds:0xc0031040,ecx
c0021174:	75 08                	jne    c002117e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c0021176:	38 05 b4 ce 02 c0    	cmp    BYTE PTR ds:0xc002ceb4,al
c002117c:	74 2b                	je     c00211a9 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c002117e:	83 ec 0c             	sub    esp,0xc
c0021181:	a2 b4 ce 02 c0       	mov    ds:0xc002ceb4,al
c0021186:	68 60 10 03 c0       	push   0xc0031060
c002118b:	0f be c0             	movsx  eax,al
c002118e:	6a 01                	push   0x1
c0021190:	89 0d 40 10 03 c0    	mov    DWORD PTR ds:0xc0031040,ecx
c0021196:	31 db                	xor    ebx,ebx
c0021198:	53                   	push   ebx
c0021199:	51                   	push   ecx
c002119a:	ff 34 85 1c de 02 c0 	push   DWORD PTR [eax*4-0x3ffd21e4]
c00211a1:	e8 7c 4e ff ff       	call   c0016022 <LogicalDisk::read(unsigned long long, int, void*)>
c00211a6:	83 c4 20             	add    esp,0x20
c00211a9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00211ad:	be 60 10 03 c0       	mov    esi,0xc0031060
c00211b2:	b9 00 08 00 00       	mov    ecx,0x800
c00211b7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00211b9:	5b                   	pop    ebx
c00211ba:	5e                   	pop    esi
c00211bb:	5f                   	pop    edi
c00211bc:	c3                   	ret    
c00211bd:	90                   	nop

c00211be <ISO9660::tryMount(LogicalDisk*, int)>:
c00211be:	81 ec 10 08 00 00    	sub    esp,0x810
c00211c4:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00211cb:	83 c0 41             	add    eax,0x41
c00211ce:	0f be c0             	movsx  eax,al
c00211d1:	50                   	push   eax
c00211d2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00211d6:	50                   	push   eax
c00211d7:	6a 10                	push   0x10
c00211d9:	e8 85 ff ff ff       	call   c0021163 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00211de:	83 c4 10             	add    esp,0x10
c00211e1:	31 c0                	xor    eax,eax
c00211e3:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00211e8:	75 1d                	jne    c0021207 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00211ea:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00211ef:	75 16                	jne    c0021207 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00211f1:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00211f6:	75 0f                	jne    c0021207 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00211f8:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00211fd:	75 08                	jne    c0021207 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00211ff:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021204:	0f 94 c0             	sete   al
c0021207:	81 c4 0c 08 00 00    	add    esp,0x80c
c002120d:	c3                   	ret    

c002120e <ISO9660::read(void*, unsigned long, void*, int*)>:
c002120e:	55                   	push   ebp
c002120f:	57                   	push   edi
c0021210:	56                   	push   esi
c0021211:	53                   	push   ebx
c0021212:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021218:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c002121f:	85 ed                	test   ebp,ebp
c0021221:	0f 84 da 01 00 00    	je     c0021401 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021227:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c002122f:	0f 84 cc 01 00 00    	je     c0021401 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021235:	b8 01 00 00 00       	mov    eax,0x1
c002123a:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c002123e:	0f 85 c2 01 00 00    	jne    c0021406 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021244:	31 d2                	xor    edx,edx
c0021246:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002124d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021250:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0021253:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0021256:	89 04 24             	mov    DWORD PTR [esp],eax
c0021259:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002125d:	01 c8                	add    eax,ecx
c002125f:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021262:	11 da                	adc    edx,ebx
c0021264:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0021268:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002126c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021270:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021274:	19 d7                	sbb    edi,edx
c0021276:	72 11                	jb     c0021289 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0021278:	8b 34 24             	mov    esi,DWORD PTR [esp]
c002127b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c002127f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021283:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021287:	eb 0c                	jmp    c0021295 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021289:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c002128d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021291:	29 ce                	sub    esi,ecx
c0021293:	19 df                	sbb    edi,ebx
c0021295:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021298:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c002129b:	0f a4 c2 0b          	shld   edx,eax,0xb
c002129f:	c1 e0 0b             	shl    eax,0xb
c00212a2:	01 c8                	add    eax,ecx
c00212a4:	11 da                	adc    edx,ebx
c00212a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00212a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00212ad:	51                   	push   ecx
c00212ae:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00212b2:	50                   	push   eax
c00212b3:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00212b7:	53                   	push   ebx
c00212b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00212bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00212c0:	0f ac d0 0b          	shrd   eax,edx,0xb
c00212c4:	50                   	push   eax
c00212c5:	e8 99 fe ff ff       	call   c0021163 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00212ca:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00212cd:	b8 00 08 00 00       	mov    eax,0x800
c00212d2:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00212d8:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c00212dc:	29 d0                	sub    eax,edx
c00212de:	83 c4 10             	add    esp,0x10
c00212e1:	89 f9                	mov    ecx,edi
c00212e3:	39 c6                	cmp    esi,eax
c00212e5:	83 d9 00             	sbb    ecx,0x0
c00212e8:	7d 1b                	jge    c0021305 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c00212ea:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00212ef:	75 12                	jne    c0021303 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c00212f1:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00212f8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00212fe:	e9 fa 00 00 00       	jmp    c00213fd <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021303:	89 f0                	mov    eax,esi
c0021305:	01 d3                	add    ebx,edx
c0021307:	31 d2                	xor    edx,edx
c0021309:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c002130d:	39 c2                	cmp    edx,eax
c002130f:	7d 14                	jge    c0021325 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0021311:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021318:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002131c:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c002131f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021322:	42                   	inc    edx
c0021323:	eb e8                	jmp    c002130d <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0021325:	89 c2                	mov    edx,eax
c0021327:	85 c0                	test   eax,eax
c0021329:	79 02                	jns    c002132d <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c002132b:	31 d2                	xor    edx,edx
c002132d:	01 c2                	add    edx,eax
c002132f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0021332:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0021339:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c002133d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021341:	99                   	cdq    
c0021342:	01 c1                	add    ecx,eax
c0021344:	11 d3                	adc    ebx,edx
c0021346:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c002134a:	29 c6                	sub    esi,eax
c002134c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0021350:	19 d7                	sbb    edi,edx
c0021352:	89 34 24             	mov    DWORD PTR [esp],esi
c0021355:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021359:	b8 ff 07 00 00       	mov    eax,0x7ff
c002135e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021361:	b8 00 00 00 00       	mov    eax,0x0
c0021366:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c002136a:	7d 43                	jge    c00213af <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c002136c:	52                   	push   edx
c002136d:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021371:	50                   	push   eax
c0021372:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021376:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002137a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002137e:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021382:	50                   	push   eax
c0021383:	e8 db fd ff ff       	call   c0021163 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021388:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021390:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021395:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c002139d:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00213a5:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00213aa:	83 c4 10             	add    esp,0x10
c00213ad:	eb aa                	jmp    c0021359 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c00213af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213b3:	0b 04 24             	or     eax,DWORD PTR [esp]
c00213b6:	74 2a                	je     c00213e2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c00213b8:	50                   	push   eax
c00213b9:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00213bd:	50                   	push   eax
c00213be:	8d 74 24 28          	lea    esi,[esp+0x28]
c00213c2:	56                   	push   esi
c00213c3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00213c7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00213cb:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c00213cf:	51                   	push   ecx
c00213d0:	e8 8e fd ff ff       	call   c0021163 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00213d5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00213d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00213dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00213df:	83 c4 10             	add    esp,0x10
c00213e2:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00213e9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00213ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00213f1:	89 18                	mov    DWORD PTR [eax],ebx
c00213f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00213f7:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00213fa:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00213fd:	31 c0                	xor    eax,eax
c00213ff:	eb 05                	jmp    c0021406 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021401:	b8 04 00 00 00       	mov    eax,0x4
c0021406:	81 c4 2c 08 00 00    	add    esp,0x82c
c002140c:	5b                   	pop    ebx
c002140d:	5e                   	pop    esi
c002140e:	5f                   	pop    edi
c002140f:	5d                   	pop    ebp
c0021410:	c3                   	ret    
c0021411:	90                   	nop

c0021412 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021412:	55                   	push   ebp
c0021413:	57                   	push   edi
c0021414:	56                   	push   esi
c0021415:	53                   	push   ebx
c0021416:	81 ec 5c 09 00 00    	sub    esp,0x95c
c002141c:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0021423:	85 ed                	test   ebp,ebp
c0021425:	0f 84 51 02 00 00    	je     c002167c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c002142b:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021433:	0f 84 43 02 00 00    	je     c002167c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021439:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002143c:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c002143f:	75 0a                	jne    c002144b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021441:	b8 07 00 00 00       	mov    eax,0x7
c0021446:	e9 36 02 00 00       	jmp    c0021681 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c002144b:	50                   	push   eax
c002144c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021450:	50                   	push   eax
c0021451:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021458:	53                   	push   ebx
c0021459:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002145c:	c1 e0 0b             	shl    eax,0xb
c002145f:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0021462:	c1 e8 0b             	shr    eax,0xb
c0021465:	50                   	push   eax
c0021466:	e8 f8 fc ff ff       	call   c0021163 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002146b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002146e:	83 c4 10             	add    esp,0x10
c0021471:	89 c1                	mov    ecx,eax
c0021473:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0021476:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002147c:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c002147f:	84 db                	test   bl,bl
c0021481:	0f 85 8b 00 00 00    	jne    c0021512 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0021487:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c002148d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021490:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0021496:	29 c6                	sub    esi,eax
c0021498:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c002149c:	89 f3                	mov    ebx,esi
c002149e:	89 f1                	mov    ecx,esi
c00214a0:	c1 fb 1f             	sar    ebx,0x1f
c00214a3:	01 f0                	add    eax,esi
c00214a5:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00214a8:	11 da                	adc    edx,ebx
c00214aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00214ad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00214b1:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00214b4:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00214b7:	89 d8                	mov    eax,ebx
c00214b9:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c00214bd:	ba 00 00 00 00       	mov    edx,0x0
c00214c2:	19 f8                	sbb    eax,edi
c00214c4:	b8 00 00 00 00       	mov    eax,0x0
c00214c9:	73 08                	jae    c00214d3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c00214cb:	89 f0                	mov    eax,esi
c00214cd:	89 fa                	mov    edx,edi
c00214cf:	29 c8                	sub    eax,ecx
c00214d1:	19 da                	sbb    edx,ebx
c00214d3:	89 d7                	mov    edi,edx
c00214d5:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c00214d8:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00214db:	09 c7                	or     edi,eax
c00214dd:	0f 84 5e ff ff ff    	je     c0021441 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c00214e3:	57                   	push   edi
c00214e4:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00214e8:	50                   	push   eax
c00214e9:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00214f0:	53                   	push   ebx
c00214f1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00214f4:	c1 e0 0b             	shl    eax,0xb
c00214f7:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00214fb:	c1 e8 0b             	shr    eax,0xb
c00214fe:	50                   	push   eax
c00214ff:	e8 5f fc ff ff       	call   c0021163 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021504:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021507:	83 c4 10             	add    esp,0x10
c002150a:	25 ff 07 00 00       	and    eax,0x7ff
c002150f:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021512:	31 ff                	xor    edi,edi
c0021514:	56                   	push   esi
c0021515:	6a 28                	push   0x28
c0021517:	6a 00                	push   0x0
c0021519:	8d 44 24 24          	lea    eax,[esp+0x24]
c002151d:	50                   	push   eax
c002151e:	e8 2d f2 fd ff       	call   c0000750 <memset>
c0021523:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021526:	25 ff 07 00 00       	and    eax,0x7ff
c002152b:	89 c6                	mov    esi,eax
c002152d:	83 c6 21             	add    esi,0x21
c0021530:	83 d7 00             	adc    edi,0x0
c0021533:	83 c4 10             	add    esp,0x10
c0021536:	31 c9                	xor    ecx,ecx
c0021538:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c002153f:	83 f9 28             	cmp    ecx,0x28
c0021542:	88 04 24             	mov    BYTE PTR [esp],al
c0021545:	0f 94 c2             	sete   dl
c0021548:	88 d0                	mov    al,dl
c002154a:	ba ff 07 00 00       	mov    edx,0x7ff
c002154f:	39 f2                	cmp    edx,esi
c0021551:	ba 00 00 00 00       	mov    edx,0x0
c0021556:	19 fa                	sbb    edx,edi
c0021558:	0f 92 c2             	setb   dl
c002155b:	09 c2                	or     edx,eax
c002155d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021561:	0f 94 c0             	sete   al
c0021564:	08 d0                	or     al,dl
c0021566:	75 16                	jne    c002157e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021568:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c002156c:	74 10                	je     c002157e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c002156e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021571:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021575:	41                   	inc    ecx
c0021576:	83 c6 01             	add    esi,0x1
c0021579:	83 d7 00             	adc    edi,0x0
c002157c:	eb ba                	jmp    c0021538 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c002157e:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021585:	83 ec 0c             	sub    esp,0xc
c0021588:	8d 74 24 24          	lea    esi,[esp+0x24]
c002158c:	56                   	push   esi
c002158d:	e8 da f1 fd ff       	call   c000076c <strlen>
c0021592:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0021599:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c002159d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00215a5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00215a8:	5a                   	pop    edx
c00215a9:	25 ff 07 00 00       	and    eax,0x7ff
c00215ae:	59                   	pop    ecx
c00215af:	01 f8                	add    eax,edi
c00215b1:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c00215b7:	83 e0 02             	and    eax,0x2
c00215ba:	3c 01                	cmp    al,0x1
c00215bc:	19 c0                	sbb    eax,eax
c00215be:	83 c0 02             	add    eax,0x2
c00215c1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00215c5:	56                   	push   esi
c00215c6:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00215ca:	50                   	push   eax
c00215cb:	e8 3c f2 fd ff       	call   c000080c <strcpy>
c00215d0:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c00215d4:	83 c4 10             	add    esp,0x10
c00215d7:	84 c0                	test   al,al
c00215d9:	75 21                	jne    c00215fc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c00215db:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c00215e3:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00215eb:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00215f3:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c00215fa:	eb 28                	jmp    c0021624 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c00215fc:	fe c8                	dec    al
c00215fe:	75 24                	jne    c0021624 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021600:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021608:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021610:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021618:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c002161f:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021624:	8d 74 24 40          	lea    esi,[esp+0x40]
c0021628:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c002162f:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0021636:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021638:	0f b6 f3             	movzx  esi,bl
c002163b:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0021642:	31 db                	xor    ebx,ebx
c0021644:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c002164a:	89 df                	mov    edi,ebx
c002164c:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c002164f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021652:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0021655:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021658:	39 c6                	cmp    esi,eax
c002165a:	19 d7                	sbb    edi,edx
c002165c:	72 10                	jb     c002166e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c002165e:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0021665:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c002166c:	eb 0a                	jmp    c0021678 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c002166e:	29 f0                	sub    eax,esi
c0021670:	19 da                	sbb    edx,ebx
c0021672:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021675:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021678:	31 c0                	xor    eax,eax
c002167a:	eb 05                	jmp    c0021681 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c002167c:	b8 04 00 00 00       	mov    eax,0x4
c0021681:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021687:	5b                   	pop    ebx
c0021688:	5e                   	pop    esi
c0021689:	5f                   	pop    edi
c002168a:	5d                   	pop    ebp
c002168b:	c3                   	ret    

c002168c <readRoot(unsigned int*, unsigned int*, char)>:
c002168c:	57                   	push   edi
c002168d:	56                   	push   esi
c002168e:	81 ec 38 08 00 00    	sub    esp,0x838
c0021694:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c002169c:	50                   	push   eax
c002169d:	8d 44 24 38          	lea    eax,[esp+0x38]
c00216a1:	50                   	push   eax
c00216a2:	6a 10                	push   0x10
c00216a4:	e8 ba fa ff ff       	call   c0021163 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00216a9:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c00216b0:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c00216b4:	b9 22 00 00 00       	mov    ecx,0x22
c00216b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00216bb:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00216c2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00216c6:	89 10                	mov    DWORD PTR [eax],edx
c00216c8:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c00216cf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00216d3:	89 10                	mov    DWORD PTR [eax],edx
c00216d5:	81 c4 44 08 00 00    	add    esp,0x844
c00216db:	b0 01                	mov    al,0x1
c00216dd:	5e                   	pop    esi
c00216de:	5f                   	pop    edi
c00216df:	c3                   	ret    

c00216e0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c00216e0:	55                   	push   ebp
c00216e1:	57                   	push   edi
c00216e2:	56                   	push   esi
c00216e3:	53                   	push   ebx
c00216e4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00216ea:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00216f1:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c00216f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00216fc:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021700:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021704:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021708:	75 03                	jne    c002170d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c002170a:	83 c3 02             	add    ebx,0x2
c002170d:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021710:	75 03                	jne    c0021715 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021712:	43                   	inc    ebx
c0021713:	eb f8                	jmp    c002170d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021715:	51                   	push   ecx
c0021716:	68 00 01 00 00       	push   0x100
c002171b:	6a 00                	push   0x0
c002171d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021721:	50                   	push   eax
c0021722:	e8 29 f0 fd ff       	call   c0000750 <memset>
c0021727:	83 c4 10             	add    esp,0x10
c002172a:	31 d2                	xor    edx,edx
c002172c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002172f:	84 c0                	test   al,al
c0021731:	74 21                	je     c0021754 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021733:	3c 2f                	cmp    al,0x2f
c0021735:	75 0b                	jne    c0021742 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021737:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c002173b:	bd 01 00 00 00       	mov    ebp,0x1
c0021740:	eb 14                	jmp    c0021756 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021742:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021745:	80 f9 19             	cmp    cl,0x19
c0021748:	77 03                	ja     c002174d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c002174a:	83 e8 20             	sub    eax,0x20
c002174d:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021751:	42                   	inc    edx
c0021752:	eb d8                	jmp    c002172c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021754:	31 ed                	xor    ebp,ebp
c0021756:	83 ec 0c             	sub    esp,0xc
c0021759:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021760:	e8 34 de fe ff       	call   c000f599 <malloc>
c0021765:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c002176c:	89 c6                	mov    esi,eax
c002176e:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021774:	c1 ef 0b             	shr    edi,0xb
c0021777:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c002177e:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021782:	83 c4 10             	add    esp,0x10
c0021785:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c002178a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002178e:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021795:	74 28                	je     c00217bf <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021797:	52                   	push   edx
c0021798:	57                   	push   edi
c0021799:	50                   	push   eax
c002179a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002179e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00217a5:	e8 b9 f9 ff ff       	call   c0021163 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00217aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00217ae:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c00217b5:	05 00 08 00 00       	add    eax,0x800
c00217ba:	83 c4 10             	add    esp,0x10
c00217bd:	eb cb                	jmp    c002178a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c00217bf:	83 ec 0c             	sub    esp,0xc
c00217c2:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00217c6:	57                   	push   edi
c00217c7:	e8 a0 ef fd ff       	call   c000076c <strlen>
c00217cc:	50                   	push   eax
c00217cd:	57                   	push   edi
c00217ce:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00217d5:	56                   	push   esi
c00217d6:	e8 46 f9 ff ff       	call   c0021121 <__memmem(unsigned char*, int, unsigned char*, int)>
c00217db:	83 c4 20             	add    esp,0x20
c00217de:	85 c0                	test   eax,eax
c00217e0:	75 13                	jne    c00217f5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c00217e2:	83 ec 0c             	sub    esp,0xc
c00217e5:	56                   	push   esi
c00217e6:	e8 be dd fe ff       	call   c000f5a9 <free>
c00217eb:	83 c4 10             	add    esp,0x10
c00217ee:	31 c0                	xor    eax,eax
c00217f0:	e9 b3 00 00 00       	jmp    c00218a8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00217f5:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c00217f9:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c00217fd:	c1 e7 08             	shl    edi,0x8
c0021800:	c1 e2 10             	shl    edx,0x10
c0021803:	09 d7                	or     edi,edx
c0021805:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021809:	09 d7                	or     edi,edx
c002180b:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c002180f:	c1 e2 18             	shl    edx,0x18
c0021812:	09 d7                	or     edi,edx
c0021814:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021818:	89 d1                	mov    ecx,edx
c002181a:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c002181e:	c1 e1 08             	shl    ecx,0x8
c0021821:	c1 e2 10             	shl    edx,0x10
c0021824:	09 ca                	or     edx,ecx
c0021826:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c002182a:	09 ca                	or     edx,ecx
c002182c:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021830:	c1 e1 18             	shl    ecx,0x18
c0021833:	09 ca                	or     edx,ecx
c0021835:	89 e9                	mov    ecx,ebp
c0021837:	84 c9                	test   cl,cl
c0021839:	74 3c                	je     c0021877 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c002183b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002183f:	83 ec 0c             	sub    esp,0xc
c0021842:	56                   	push   esi
c0021843:	e8 61 dd fe ff       	call   c000f5a9 <free>
c0021848:	83 c4 0c             	add    esp,0xc
c002184b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021852:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021857:	50                   	push   eax
c0021858:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002185f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021866:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002186a:	52                   	push   edx
c002186b:	57                   	push   edi
c002186c:	53                   	push   ebx
c002186d:	e8 6e fe ff ff       	call   c00216e0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021872:	83 c4 20             	add    esp,0x20
c0021875:	eb 31                	jmp    c00218a8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021877:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c002187a:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021881:	d0 e8                	shr    al,1
c0021883:	89 3b                	mov    DWORD PTR [ebx],edi
c0021885:	83 e0 01             	and    eax,0x1
c0021888:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c002188f:	83 ec 0c             	sub    esp,0xc
c0021892:	89 13                	mov    DWORD PTR [ebx],edx
c0021894:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c002189b:	89 03                	mov    DWORD PTR [ebx],eax
c002189d:	56                   	push   esi
c002189e:	e8 06 dd fe ff       	call   c000f5a9 <free>
c00218a3:	83 c4 10             	add    esp,0x10
c00218a6:	b0 01                	mov    al,0x1
c00218a8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00218ae:	5b                   	pop    ebx
c00218af:	5e                   	pop    esi
c00218b0:	5f                   	pop    edi
c00218b1:	5d                   	pop    ebp
c00218b2:	c3                   	ret    

c00218b3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c00218b3:	55                   	push   ebp
c00218b4:	57                   	push   edi
c00218b5:	56                   	push   esi
c00218b6:	53                   	push   ebx
c00218b7:	83 ec 20             	sub    esp,0x20
c00218ba:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00218be:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00218c2:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00218c6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00218ce:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00218d6:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c00218db:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c00218e1:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c00218e7:	57                   	push   edi
c00218e8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00218ec:	50                   	push   eax
c00218ed:	8d 44 24 14          	lea    eax,[esp+0x14]
c00218f1:	50                   	push   eax
c00218f2:	e8 95 fd ff ff       	call   c002168c <readRoot(unsigned int*, unsigned int*, char)>
c00218f7:	5a                   	pop    edx
c00218f8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00218fc:	e8 6b ee fd ff       	call   c000076c <strlen>
c0021901:	83 c4 10             	add    esp,0x10
c0021904:	83 f8 03             	cmp    eax,0x3
c0021907:	77 17                	ja     c0021920 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021909:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002190d:	89 03                	mov    DWORD PTR [ebx],eax
c002190f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021913:	89 06                	mov    DWORD PTR [esi],eax
c0021915:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c002191c:	b0 01                	mov    al,0x1
c002191e:	eb 19                	jmp    c0021939 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021920:	50                   	push   eax
c0021921:	55                   	push   ebp
c0021922:	57                   	push   edi
c0021923:	56                   	push   esi
c0021924:	53                   	push   ebx
c0021925:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021929:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002192d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021931:	e8 aa fd ff ff       	call   c00216e0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021936:	83 c4 20             	add    esp,0x20
c0021939:	83 c4 1c             	add    esp,0x1c
c002193c:	5b                   	pop    ebx
c002193d:	5e                   	pop    esi
c002193e:	5f                   	pop    edi
c002193f:	5d                   	pop    ebp
c0021940:	c3                   	ret    
c0021941:	90                   	nop

c0021942 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021942:	57                   	push   edi
c0021943:	56                   	push   esi
c0021944:	53                   	push   ebx
c0021945:	83 ec 10             	sub    esp,0x10
c0021948:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002194c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021950:	85 ff                	test   edi,edi
c0021952:	0f 84 8b 00 00 00    	je     c00219e3 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021958:	85 f6                	test   esi,esi
c002195a:	0f 84 83 00 00 00    	je     c00219e3 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021960:	b8 03 00 00 00       	mov    eax,0x3
c0021965:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c002196a:	75 7c                	jne    c00219e8 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c002196c:	83 ec 0c             	sub    esp,0xc
c002196f:	6a 1c                	push   0x1c
c0021971:	e8 23 dc fe ff       	call   c000f599 <malloc>
c0021976:	89 07                	mov    DWORD PTR [edi],eax
c0021978:	89 c3                	mov    ebx,eax
c002197a:	58                   	pop    eax
c002197b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002197f:	50                   	push   eax
c0021980:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021983:	50                   	push   eax
c0021984:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021988:	50                   	push   eax
c0021989:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002198d:	50                   	push   eax
c002198e:	56                   	push   esi
c002198f:	e8 1f ff ff ff       	call   c00218b3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021994:	83 c4 20             	add    esp,0x20
c0021997:	84 c0                	test   al,al
c0021999:	74 07                	je     c00219a2 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c002199b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00219a0:	74 0b                	je     c00219ad <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c00219a2:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00219a6:	b8 01 00 00 00       	mov    eax,0x1
c00219ab:	eb 3b                	jmp    c00219e8 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c00219ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00219b1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00219b5:	89 03                	mov    DWORD PTR [ebx],eax
c00219b7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00219be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00219c9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00219d0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00219d3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00219da:	8a 06                	mov    al,BYTE PTR [esi]
c00219dc:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00219df:	31 c0                	xor    eax,eax
c00219e1:	eb 05                	jmp    c00219e8 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c00219e3:	b8 04 00 00 00       	mov    eax,0x4
c00219e8:	83 c4 10             	add    esp,0x10
c00219eb:	5b                   	pop    ebx
c00219ec:	5e                   	pop    esi
c00219ed:	5f                   	pop    edi
c00219ee:	c3                   	ret    
c00219ef:	90                   	nop

c00219f0 <ISO9660::exists(char const*)>:
c00219f0:	83 ec 28             	sub    esp,0x28
c00219f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00219f7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00219fb:	52                   	push   edx
c00219fc:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00219ff:	52                   	push   edx
c0021a00:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021a04:	52                   	push   edx
c0021a05:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021a09:	52                   	push   edx
c0021a0a:	50                   	push   eax
c0021a0b:	e8 a3 fe ff ff       	call   c00218b3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021a10:	83 c4 3c             	add    esp,0x3c
c0021a13:	c3                   	ret    

c0021a14 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021a14:	56                   	push   esi
c0021a15:	53                   	push   ebx
c0021a16:	83 ec 14             	sub    esp,0x14
c0021a19:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021a1d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021a21:	85 db                	test   ebx,ebx
c0021a23:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021a27:	0f 94 c2             	sete   dl
c0021a2a:	85 f6                	test   esi,esi
c0021a2c:	0f 94 c0             	sete   al
c0021a2f:	08 c2                	or     dl,al
c0021a31:	75 68                	jne    c0021a9b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021a33:	85 c9                	test   ecx,ecx
c0021a35:	74 64                	je     c0021a9b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021a37:	83 ec 0c             	sub    esp,0xc
c0021a3a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021a3d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021a41:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021a47:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a4e:	50                   	push   eax
c0021a4f:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021a52:	50                   	push   eax
c0021a53:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a57:	50                   	push   eax
c0021a58:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a5c:	50                   	push   eax
c0021a5d:	51                   	push   ecx
c0021a5e:	e8 50 fe ff ff       	call   c00218b3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021a63:	83 c4 20             	add    esp,0x20
c0021a66:	ba 01 00 00 00       	mov    edx,0x1
c0021a6b:	84 c0                	test   al,al
c0021a6d:	74 31                	je     c0021aa0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021a6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a7a:	89 03                	mov    DWORD PTR [ebx],eax
c0021a7c:	ba 00 00 00 00       	mov    edx,0x0
c0021a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021a85:	85 c0                	test   eax,eax
c0021a87:	0f 95 06             	setne  BYTE PTR [esi]
c0021a8a:	74 14                	je     c0021aa0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021a8c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021a92:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a99:	eb 05                	jmp    c0021aa0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021a9b:	ba 04 00 00 00       	mov    edx,0x4
c0021aa0:	83 c4 14             	add    esp,0x14
c0021aa3:	89 d0                	mov    eax,edx
c0021aa5:	5b                   	pop    ebx
c0021aa6:	5e                   	pop    esi
c0021aa7:	c3                   	ret    

c0021aa8 <ISO9660::openDir(char const*, void**)>:
c0021aa8:	57                   	push   edi
c0021aa9:	56                   	push   esi
c0021aaa:	53                   	push   ebx
c0021aab:	83 ec 10             	sub    esp,0x10
c0021aae:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021ab2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021ab6:	85 ff                	test   edi,edi
c0021ab8:	74 7b                	je     c0021b35 <ISO9660::openDir(char const*, void**)+0x8d>
c0021aba:	85 f6                	test   esi,esi
c0021abc:	74 77                	je     c0021b35 <ISO9660::openDir(char const*, void**)+0x8d>
c0021abe:	83 ec 0c             	sub    esp,0xc
c0021ac1:	6a 1c                	push   0x1c
c0021ac3:	e8 d1 da fe ff       	call   c000f599 <malloc>
c0021ac8:	89 07                	mov    DWORD PTR [edi],eax
c0021aca:	89 c3                	mov    ebx,eax
c0021acc:	58                   	pop    eax
c0021acd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021ad1:	50                   	push   eax
c0021ad2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021ad5:	50                   	push   eax
c0021ad6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021ada:	50                   	push   eax
c0021adb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021adf:	50                   	push   eax
c0021ae0:	56                   	push   esi
c0021ae1:	e8 cd fd ff ff       	call   c00218b3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021ae6:	83 c4 20             	add    esp,0x20
c0021ae9:	84 c0                	test   al,al
c0021aeb:	74 07                	je     c0021af4 <ISO9660::openDir(char const*, void**)+0x4c>
c0021aed:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021af2:	75 0b                	jne    c0021aff <ISO9660::openDir(char const*, void**)+0x57>
c0021af4:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021af8:	b8 01 00 00 00       	mov    eax,0x1
c0021afd:	eb 3b                	jmp    c0021b3a <ISO9660::openDir(char const*, void**)+0x92>
c0021aff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b03:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021b07:	89 03                	mov    DWORD PTR [ebx],eax
c0021b09:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021b10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021b14:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021b1b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021b22:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021b25:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021b2c:	8a 06                	mov    al,BYTE PTR [esi]
c0021b2e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021b31:	31 c0                	xor    eax,eax
c0021b33:	eb 05                	jmp    c0021b3a <ISO9660::openDir(char const*, void**)+0x92>
c0021b35:	b8 04 00 00 00       	mov    eax,0x4
c0021b3a:	83 c4 10             	add    esp,0x10
c0021b3d:	5b                   	pop    ebx
c0021b3e:	5e                   	pop    esi
c0021b3f:	5f                   	pop    edi
c0021b40:	c3                   	ret    
c0021b41:	90                   	nop

c0021b42 <ISO9660::ISO9660()>:
c0021b42:	83 ec 0c             	sub    esp,0xc
c0021b45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b49:	83 ec 0c             	sub    esp,0xc
c0021b4c:	50                   	push   eax
c0021b4d:	e8 86 0e ff ff       	call   c00129d8 <Filesystem::Filesystem()>
c0021b52:	83 c4 10             	add    esp,0x10
c0021b55:	ba a0 be 02 c0       	mov    edx,0xc002bea0
c0021b5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b5e:	89 10                	mov    DWORD PTR [eax],edx
c0021b60:	90                   	nop
c0021b61:	83 c4 0c             	add    esp,0xc
c0021b64:	c3                   	ret    
c0021b65:	90                   	nop

c0021b66 <SoundChannel::SoundChannel(int, int, int, int)>:
c0021b66:	83 ec 1c             	sub    esp,0x1c
c0021b69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b6d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021b71:	89 10                	mov    DWORD PTR [eax],edx
c0021b73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b77:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021b7b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021b7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b82:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021b86:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021b89:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021b8e:	75 23                	jne    c0021bb3 <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c0021b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b94:	8b 10                	mov    edx,DWORD PTR [eax]
c0021b96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b9d:	0f af c2             	imul   eax,edx
c0021ba0:	85 c0                	test   eax,eax
c0021ba2:	79 03                	jns    c0021ba7 <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c0021ba4:	83 c0 03             	add    eax,0x3
c0021ba7:	c1 f8 02             	sar    eax,0x2
c0021baa:	05 a0 0f 00 00       	add    eax,0xfa0
c0021baf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021bb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bb7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021bbb:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021bbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bc2:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021bc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bcd:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021bd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bd8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021bdb:	c1 e0 02             	shl    eax,0x2
c0021bde:	83 ec 0c             	sub    esp,0xc
c0021be1:	50                   	push   eax
c0021be2:	e8 b2 d9 fe ff       	call   c000f599 <malloc>
c0021be7:	83 c4 10             	add    esp,0x10
c0021bea:	89 c2                	mov    edx,eax
c0021bec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bf0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021bf3:	83 ec 04             	sub    esp,0x4
c0021bf6:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021bfa:	50                   	push   eax
c0021bfb:	6a 01                	push   0x1
c0021bfd:	6a 04                	push   0x4
c0021bff:	e8 61 6f fe ff       	call   c0008b65 <src_new>
c0021c04:	83 c4 10             	add    esp,0x10
c0021c07:	89 c2                	mov    edx,eax
c0021c09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c0d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021c10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c14:	85 c0                	test   eax,eax
c0021c16:	74 10                	je     c0021c28 <SoundChannel::SoundChannel(int, int, int, int)+0xc2>
c0021c18:	83 ec 0c             	sub    esp,0xc
c0021c1b:	68 00 bf 02 c0       	push   0xc002bf00
c0021c20:	e8 14 82 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c0021c25:	83 c4 10             	add    esp,0x10
c0021c28:	a0 60 1c 03 c0       	mov    al,ds:0xc0031c60
c0021c2d:	83 f0 01             	xor    eax,0x1
c0021c30:	84 c0                	test   al,al
c0021c32:	74 57                	je     c0021c8b <SoundChannel::SoundChannel(int, int, int, int)+0x125>
c0021c34:	a1 1c bf 02 c0       	mov    eax,ds:0xc002bf1c
c0021c39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021c3d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021c45:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021c4d:	7f 35                	jg     c0021c84 <SoundChannel::SoundChannel(int, int, int, int)+0x11e>
c0021c4f:	83 ec 0c             	sub    esp,0xc
c0021c52:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021c56:	e8 e4 53 00 00       	call   c002703f <__floatsisf>
c0021c5b:	83 c4 10             	add    esp,0x10
c0021c5e:	8b 15 1c bf 02 c0    	mov    edx,DWORD PTR ds:0xc002bf1c
c0021c64:	83 ec 08             	sub    esp,0x8
c0021c67:	52                   	push   edx
c0021c68:	50                   	push   eax
c0021c69:	e8 e3 4f 00 00       	call   c0026c51 <__mulsf3>
c0021c6e:	83 c4 10             	add    esp,0x10
c0021c71:	89 c2                	mov    edx,eax
c0021c73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021c77:	89 14 85 60 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce7a0],edx
c0021c7e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021c82:	eb c1                	jmp    c0021c45 <SoundChannel::SoundChannel(int, int, int, int)+0xdf>
c0021c84:	c6 05 60 1c 03 c0 01 	mov    BYTE PTR ds:0xc0031c60,0x1
c0021c8b:	90                   	nop
c0021c8c:	83 c4 1c             	add    esp,0x1c
c0021c8f:	c3                   	ret    

c0021c90 <SoundChannel::~SoundChannel()>:
c0021c90:	83 ec 0c             	sub    esp,0xc
c0021c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c97:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021c9a:	83 ec 0c             	sub    esp,0xc
c0021c9d:	50                   	push   eax
c0021c9e:	e8 06 d9 fe ff       	call   c000f5a9 <free>
c0021ca3:	83 c4 10             	add    esp,0x10
c0021ca6:	90                   	nop
c0021ca7:	83 c4 0c             	add    esp,0xc
c0021caa:	c3                   	ret    
c0021cab:	90                   	nop

c0021cac <SoundChannel::getSampleRate()>:
c0021cac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0021cb2:	c3                   	ret    
c0021cb3:	90                   	nop

c0021cb4 <SoundChannel::getBits()>:
c0021cb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021cbb:	c3                   	ret    

c0021cbc <SoundChannel::getBufferUsed()>:
c0021cbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cc0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021cc3:	c3                   	ret    

c0021cc4 <SoundChannel::getBufferSize()>:
c0021cc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cc8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021ccb:	c3                   	ret    

c0021ccc <SoundChannel::unbuffer(float*, int, int)>:
c0021ccc:	56                   	push   esi
c0021ccd:	53                   	push   ebx
c0021cce:	83 ec 40             	sub    esp,0x40
c0021cd1:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021cd5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021cd8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021cdc:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021cdf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021ce3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021ce7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021ceb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021cef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021cf3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021cf7:	e8 43 53 00 00       	call   c002703f <__floatsisf>
c0021cfc:	5a                   	pop    edx
c0021cfd:	89 c6                	mov    esi,eax
c0021cff:	ff 33                	push   DWORD PTR [ebx]
c0021d01:	e8 39 53 00 00       	call   c002703f <__floatsisf>
c0021d06:	59                   	pop    ecx
c0021d07:	5a                   	pop    edx
c0021d08:	50                   	push   eax
c0021d09:	56                   	push   esi
c0021d0a:	e8 05 51 00 00       	call   c0026e14 <__divsf3>
c0021d0f:	89 04 24             	mov    DWORD PTR [esp],eax
c0021d12:	e8 f8 65 00 00       	call   c002830f <__extendsfdf2>
c0021d17:	59                   	pop    ecx
c0021d18:	5e                   	pop    esi
c0021d19:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021d1d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021d21:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021d29:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021d2d:	50                   	push   eax
c0021d2e:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021d31:	e8 24 6a fe ff       	call   c000875a <src_process>
c0021d36:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021d3a:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021d3d:	83 c4 0c             	add    esp,0xc
c0021d40:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021d43:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021d46:	29 d0                	sub    eax,edx
c0021d48:	c1 e0 02             	shl    eax,0x2
c0021d4b:	50                   	push   eax
c0021d4c:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021d4f:	50                   	push   eax
c0021d50:	51                   	push   ecx
c0021d51:	e8 32 e9 fd ff       	call   c0000688 <memmove>
c0021d56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021d5a:	83 c4 44             	add    esp,0x44
c0021d5d:	5b                   	pop    ebx
c0021d5e:	5e                   	pop    esi
c0021d5f:	c3                   	ret    

c0021d60 <SoundChannel::buffer16(short*, int)>:
c0021d60:	55                   	push   ebp
c0021d61:	57                   	push   edi
c0021d62:	56                   	push   esi
c0021d63:	53                   	push   ebx
c0021d64:	83 ec 1c             	sub    esp,0x1c
c0021d67:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0021d6b:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021d6e:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021d71:	0f 84 d2 00 00 00    	je     c0021e49 <SoundChannel::buffer16(short*, int)+0xe9>
c0021d77:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0021d7b:	85 ed                	test   ebp,ebp
c0021d7d:	0f 8e c6 00 00 00    	jle    c0021e49 <SoundChannel::buffer16(short*, int)+0xe9>
c0021d83:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021d87:	bd 00 00 00 38       	mov    ebp,0x38000000
c0021d8c:	83 ec 0c             	sub    esp,0xc
c0021d8f:	0f bf 00             	movsx  eax,WORD PTR [eax]
c0021d92:	50                   	push   eax
c0021d93:	e8 a7 52 00 00       	call   c002703f <__floatsisf>
c0021d98:	59                   	pop    ecx
c0021d99:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021d9c:	5f                   	pop    edi
c0021d9d:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021da0:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021da3:	55                   	push   ebp
c0021da4:	50                   	push   eax
c0021da5:	e8 a7 4e 00 00       	call   c0026c51 <__mulsf3>
c0021daa:	83 c4 10             	add    esp,0x10
c0021dad:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021db0:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021db3:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021db6:	0f 84 99 00 00 00    	je     c0021e55 <SoundChannel::buffer16(short*, int)+0xf5>
c0021dbc:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0021dc1:	74 78                	je     c0021e3b <SoundChannel::buffer16(short*, int)+0xdb>
c0021dc3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021dc7:	83 ec 0c             	sub    esp,0xc
c0021dca:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c0021dce:	50                   	push   eax
c0021dcf:	e8 6b 52 00 00       	call   c002703f <__floatsisf>
c0021dd4:	5f                   	pop    edi
c0021dd5:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021dd8:	5a                   	pop    edx
c0021dd9:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021ddc:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021ddf:	55                   	push   ebp
c0021de0:	50                   	push   eax
c0021de1:	e8 6b 4e 00 00       	call   c0026c51 <__mulsf3>
c0021de6:	83 c4 10             	add    esp,0x10
c0021de9:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021dec:	be 02 00 00 00       	mov    esi,0x2
c0021df1:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021df4:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021df7:	74 46                	je     c0021e3f <SoundChannel::buffer16(short*, int)+0xdf>
c0021df9:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0021dfd:	eb 36                	jmp    c0021e35 <SoundChannel::buffer16(short*, int)+0xd5>
c0021dff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021e03:	83 ec 0c             	sub    esp,0xc
c0021e06:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0021e0a:	46                   	inc    esi
c0021e0b:	50                   	push   eax
c0021e0c:	e8 2e 52 00 00       	call   c002703f <__floatsisf>
c0021e11:	5a                   	pop    edx
c0021e12:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0021e15:	59                   	pop    ecx
c0021e16:	8d 4f 01             	lea    ecx,[edi+0x1]
c0021e19:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021e1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e20:	50                   	push   eax
c0021e21:	e8 2b 4e 00 00       	call   c0026c51 <__mulsf3>
c0021e26:	83 c4 10             	add    esp,0x10
c0021e29:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c0021e2d:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021e30:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021e33:	74 0a                	je     c0021e3f <SoundChannel::buffer16(short*, int)+0xdf>
c0021e35:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0021e39:	75 c4                	jne    c0021dff <SoundChannel::buffer16(short*, int)+0x9f>
c0021e3b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0021e3f:	83 c4 1c             	add    esp,0x1c
c0021e42:	89 f0                	mov    eax,esi
c0021e44:	5b                   	pop    ebx
c0021e45:	5e                   	pop    esi
c0021e46:	5f                   	pop    edi
c0021e47:	5d                   	pop    ebp
c0021e48:	c3                   	ret    
c0021e49:	83 c4 1c             	add    esp,0x1c
c0021e4c:	31 f6                	xor    esi,esi
c0021e4e:	5b                   	pop    ebx
c0021e4f:	89 f0                	mov    eax,esi
c0021e51:	5e                   	pop    esi
c0021e52:	5f                   	pop    edi
c0021e53:	5d                   	pop    ebp
c0021e54:	c3                   	ret    
c0021e55:	be 01 00 00 00       	mov    esi,0x1
c0021e5a:	eb e3                	jmp    c0021e3f <SoundChannel::buffer16(short*, int)+0xdf>

c0021e5c <SoundChannel::buffer8(unsigned char*, int)>:
c0021e5c:	55                   	push   ebp
c0021e5d:	57                   	push   edi
c0021e5e:	56                   	push   esi
c0021e5f:	53                   	push   ebx
c0021e60:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021e64:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021e68:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021e6b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021e6f:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021e72:	74 7a                	je     c0021eee <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021e74:	85 ff                	test   edi,edi
c0021e76:	7e 76                	jle    c0021eee <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021e78:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021e7c:	8d 70 01             	lea    esi,[eax+0x1]
c0021e7f:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021e82:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021e85:	8b 1c 9d 60 18 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce7a0]
c0021e8c:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021e8f:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021e92:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021e95:	74 5e                	je     c0021ef5 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021e97:	83 ff 01             	cmp    edi,0x1
c0021e9a:	74 4b                	je     c0021ee7 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021e9c:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021ea0:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021ea3:	8d 70 01             	lea    esi,[eax+0x1]
c0021ea6:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021ea9:	8b 1c 9d 60 18 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce7a0]
c0021eb0:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021eb3:	b8 02 00 00 00       	mov    eax,0x2
c0021eb8:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021ebb:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021ebe:	75 23                	jne    c0021ee3 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021ec0:	eb 27                	jmp    c0021ee9 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021ec2:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021ec7:	8d 71 01             	lea    esi,[ecx+0x1]
c0021eca:	40                   	inc    eax
c0021ecb:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021ece:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021ed1:	8b 1c 9d 60 18 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce7a0]
c0021ed8:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021edb:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021ede:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021ee1:	74 06                	je     c0021ee9 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021ee3:	39 c7                	cmp    edi,eax
c0021ee5:	75 db                	jne    c0021ec2 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021ee7:	89 f8                	mov    eax,edi
c0021ee9:	5b                   	pop    ebx
c0021eea:	5e                   	pop    esi
c0021eeb:	5f                   	pop    edi
c0021eec:	5d                   	pop    ebp
c0021eed:	c3                   	ret    
c0021eee:	5b                   	pop    ebx
c0021eef:	31 c0                	xor    eax,eax
c0021ef1:	5e                   	pop    esi
c0021ef2:	5f                   	pop    edi
c0021ef3:	5d                   	pop    ebp
c0021ef4:	c3                   	ret    
c0021ef5:	b8 01 00 00 00       	mov    eax,0x1
c0021efa:	eb ed                	jmp    c0021ee9 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021efc <SoundDevice::SoundDevice(char const*)>:
c0021efc:	83 ec 1c             	sub    esp,0x1c
c0021eff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f03:	83 ec 08             	sub    esp,0x8
c0021f06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021f0a:	50                   	push   eax
c0021f0b:	e8 fa 1d ff ff       	call   c0013d0a <Device::Device(char const*)>
c0021f10:	83 c4 10             	add    esp,0x10
c0021f13:	ba 28 bf 02 c0       	mov    edx,0xc002bf28
c0021f18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f1c:	89 10                	mov    DWORD PTR [eax],edx
c0021f1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f22:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0021f2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f30:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0021f3a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f42:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021f47:	7f 19                	jg     c0021f62 <SoundDevice::SoundDevice(char const*)+0x66>
c0021f49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f4d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021f51:	83 c2 54             	add    edx,0x54
c0021f54:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0021f5c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021f60:	eb e0                	jmp    c0021f42 <SoundDevice::SoundDevice(char const*)+0x46>
c0021f62:	90                   	nop
c0021f63:	83 c4 1c             	add    esp,0x1c
c0021f66:	c3                   	ret    
c0021f67:	90                   	nop

c0021f68 <SoundDevice::~SoundDevice()>:
c0021f68:	53                   	push   ebx
c0021f69:	83 ec 18             	sub    esp,0x18
c0021f6c:	ba 28 bf 02 c0       	mov    edx,0xc002bf28
c0021f71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f75:	89 10                	mov    DWORD PTR [eax],edx
c0021f77:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f7f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021f84:	7f 46                	jg     c0021fcc <SoundDevice::~SoundDevice()+0x64>
c0021f86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f8a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021f8e:	83 c2 54             	add    edx,0x54
c0021f91:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0021f95:	85 c0                	test   eax,eax
c0021f97:	74 2d                	je     c0021fc6 <SoundDevice::~SoundDevice()+0x5e>
c0021f99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021fa1:	83 c2 54             	add    edx,0x54
c0021fa4:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0021fa8:	85 db                	test   ebx,ebx
c0021faa:	74 1a                	je     c0021fc6 <SoundDevice::~SoundDevice()+0x5e>
c0021fac:	83 ec 0c             	sub    esp,0xc
c0021faf:	53                   	push   ebx
c0021fb0:	e8 db fc ff ff       	call   c0021c90 <SoundChannel::~SoundChannel()>
c0021fb5:	83 c4 10             	add    esp,0x10
c0021fb8:	83 ec 08             	sub    esp,0x8
c0021fbb:	6a 2c                	push   0x2c
c0021fbd:	53                   	push   ebx
c0021fbe:	e8 32 06 ff ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c0021fc3:	83 c4 10             	add    esp,0x10
c0021fc6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021fca:	eb b3                	jmp    c0021f7f <SoundDevice::~SoundDevice()+0x17>
c0021fcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fd0:	83 ec 0c             	sub    esp,0xc
c0021fd3:	50                   	push   eax
c0021fd4:	e8 fb 19 ff ff       	call   c00139d4 <Device::~Device()>
c0021fd9:	83 c4 10             	add    esp,0x10
c0021fdc:	90                   	nop
c0021fdd:	83 c4 18             	add    esp,0x18
c0021fe0:	5b                   	pop    ebx
c0021fe1:	c3                   	ret    

c0021fe2 <SoundDevice::~SoundDevice()>:
c0021fe2:	83 ec 0c             	sub    esp,0xc
c0021fe5:	83 ec 0c             	sub    esp,0xc
c0021fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021fec:	e8 77 ff ff ff       	call   c0021f68 <SoundDevice::~SoundDevice()>
c0021ff1:	83 c4 10             	add    esp,0x10
c0021ff4:	83 ec 08             	sub    esp,0x8
c0021ff7:	68 e4 01 00 00       	push   0x1e4
c0021ffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022000:	e8 f0 05 ff ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c0022005:	83 c4 10             	add    esp,0x10
c0022008:	83 c4 0c             	add    esp,0xc
c002200b:	c3                   	ret    

c002200c <SoundDevice::getFreeChannelNum()>:
c002200c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022010:	31 c0                	xor    eax,eax
c0022012:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c002201a:	74 09                	je     c0022025 <SoundDevice::getFreeChannelNum()+0x19>
c002201c:	40                   	inc    eax
c002201d:	83 f8 20             	cmp    eax,0x20
c0022020:	75 f0                	jne    c0022012 <SoundDevice::getFreeChannelNum()+0x6>
c0022022:	83 c8 ff             	or     eax,0xffffffff
c0022025:	c3                   	ret    

c0022026 <SoundDevice::addChannel(SoundChannel*)>:
c0022026:	56                   	push   esi
c0022027:	53                   	push   ebx
c0022028:	51                   	push   ecx
c0022029:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002202d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022031:	53                   	push   ebx
c0022032:	e8 d5 ff ff ff       	call   c002200c <SoundDevice::getFreeChannelNum()>
c0022037:	5a                   	pop    edx
c0022038:	83 f8 ff             	cmp    eax,0xffffffff
c002203b:	74 51                	je     c002208e <SoundDevice::addChannel(SoundChannel*)+0x68>
c002203d:	85 f6                	test   esi,esi
c002203f:	74 4d                	je     c002208e <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022041:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022048:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c002204f:	75 30                	jne    c0022081 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022051:	83 ec 0c             	sub    esp,0xc
c0022054:	56                   	push   esi
c0022055:	e8 52 fc ff ff       	call   c0021cac <SoundChannel::getSampleRate()>
c002205a:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022060:	89 34 24             	mov    DWORD PTR [esp],esi
c0022063:	e8 4c fc ff ff       	call   c0021cb4 <SoundChannel::getBits()>
c0022068:	83 c4 0c             	add    esp,0xc
c002206b:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022071:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022073:	50                   	push   eax
c0022074:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002207a:	53                   	push   ebx
c002207b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c002207e:	83 c4 10             	add    esp,0x10
c0022081:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022087:	b8 01 00 00 00       	mov    eax,0x1
c002208c:	eb 03                	jmp    c0022091 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c002208e:	83 c8 ff             	or     eax,0xffffffff
c0022091:	5a                   	pop    edx
c0022092:	5b                   	pop    ebx
c0022093:	5e                   	pop    esi
c0022094:	c3                   	ret    
c0022095:	90                   	nop

c0022096 <SoundDevice::removeChannel(int)>:
c0022096:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002209a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002209e:	83 fa 1f             	cmp    edx,0x1f
c00220a1:	77 23                	ja     c00220c6 <SoundDevice::removeChannel(int)+0x30>
c00220a3:	8d 14 90             	lea    edx,[eax+edx*4]
c00220a6:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00220ad:	74 17                	je     c00220c6 <SoundDevice::removeChannel(int)+0x30>
c00220af:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00220b9:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00220bf:	75 05                	jne    c00220c6 <SoundDevice::removeChannel(int)+0x30>
c00220c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00220c3:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c00220c6:	c3                   	ret    
c00220c7:	90                   	nop

c00220c8 <SoundDevice::floatTo16(float*, short*, int)>:
c00220c8:	57                   	push   edi
c00220c9:	56                   	push   esi
c00220ca:	53                   	push   ebx
c00220cb:	31 db                	xor    ebx,ebx
c00220cd:	83 ec 10             	sub    esp,0x10
c00220d0:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00220d4:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00220d8:	0f 8d d0 00 00 00    	jge    c00221ae <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c00220de:	83 ec 0c             	sub    esp,0xc
c00220e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00220e5:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00220e8:	e8 22 62 00 00       	call   c002830f <__extendsfdf2>
c00220ed:	83 c4 10             	add    esp,0x10
c00220f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00220f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00220f8:	68 00 00 f0 3f       	push   0x3ff00000
c00220fd:	6a 00                	push   0x0
c00220ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022103:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022107:	e8 8f 51 00 00       	call   c002729b <__adddf3>
c002210c:	83 c4 10             	add    esp,0x10
c002210f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022113:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022117:	68 00 00 e0 3f       	push   0x3fe00000
c002211c:	6a 00                	push   0x0
c002211e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022122:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022126:	e8 ed 57 00 00       	call   c0027918 <__muldf3>
c002212b:	83 c4 10             	add    esp,0x10
c002212e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022132:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022136:	68 c0 ff df 40       	push   0x40dfffc0
c002213b:	6a 00                	push   0x0
c002213d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022141:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022145:	e8 ce 57 00 00       	call   c0027918 <__muldf3>
c002214a:	59                   	pop    ecx
c002214b:	5f                   	pop    edi
c002214c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022150:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022154:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022158:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002215c:	e8 8a 60 00 00       	call   c00281eb <__truncdfsf2>
c0022161:	5a                   	pop    edx
c0022162:	89 c7                	mov    edi,eax
c0022164:	59                   	pop    ecx
c0022165:	68 00 fe ff 46       	push   0x46fffe00
c002216a:	50                   	push   eax
c002216b:	e8 25 51 00 00       	call   c0027295 <__gesf2>
c0022170:	83 c4 10             	add    esp,0x10
c0022173:	85 c0                	test   eax,eax
c0022175:	78 08                	js     c002217f <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c0022177:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c002217d:	eb 29                	jmp    c00221a8 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c002217f:	50                   	push   eax
c0022180:	50                   	push   eax
c0022181:	6a 00                	push   0x0
c0022183:	57                   	push   edi
c0022184:	e8 10 51 00 00       	call   c0027299 <__lesf2>
c0022189:	83 c4 10             	add    esp,0x10
c002218c:	85 c0                	test   eax,eax
c002218e:	7f 08                	jg     c0022198 <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c0022190:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c0022196:	eb 10                	jmp    c00221a8 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022198:	83 ec 0c             	sub    esp,0xc
c002219b:	57                   	push   edi
c002219c:	e8 0b 62 00 00       	call   c00283ac <lrintf>
c00221a1:	83 c4 10             	add    esp,0x10
c00221a4:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c00221a8:	43                   	inc    ebx
c00221a9:	e9 26 ff ff ff       	jmp    c00220d4 <SoundDevice::floatTo16(float*, short*, int)+0xc>
c00221ae:	83 c4 10             	add    esp,0x10
c00221b1:	5b                   	pop    ebx
c00221b2:	5e                   	pop    esi
c00221b3:	5f                   	pop    edi
c00221b4:	c3                   	ret    
c00221b5:	90                   	nop

c00221b6 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00221b6:	57                   	push   edi
c00221b7:	56                   	push   esi
c00221b8:	53                   	push   ebx
c00221b9:	31 db                	xor    ebx,ebx
c00221bb:	83 ec 10             	sub    esp,0x10
c00221be:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00221c2:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00221c6:	0f 8d cb 00 00 00    	jge    c0022297 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00221cc:	83 ec 0c             	sub    esp,0xc
c00221cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00221d3:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00221d6:	e8 34 61 00 00       	call   c002830f <__extendsfdf2>
c00221db:	83 c4 10             	add    esp,0x10
c00221de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00221e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00221e6:	68 00 00 f0 3f       	push   0x3ff00000
c00221eb:	6a 00                	push   0x0
c00221ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221f5:	e8 a1 50 00 00       	call   c002729b <__adddf3>
c00221fa:	83 c4 10             	add    esp,0x10
c00221fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022201:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022205:	68 00 00 e0 3f       	push   0x3fe00000
c002220a:	6a 00                	push   0x0
c002220c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022210:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022214:	e8 ff 56 00 00       	call   c0027918 <__muldf3>
c0022219:	83 c4 10             	add    esp,0x10
c002221c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022220:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022224:	68 00 00 60 40       	push   0x40600000
c0022229:	6a 00                	push   0x0
c002222b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002222f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022233:	e8 e0 56 00 00       	call   c0027918 <__muldf3>
c0022238:	59                   	pop    ecx
c0022239:	5f                   	pop    edi
c002223a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002223e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002224a:	e8 9c 5f 00 00       	call   c00281eb <__truncdfsf2>
c002224f:	5a                   	pop    edx
c0022250:	89 c7                	mov    edi,eax
c0022252:	59                   	pop    ecx
c0022253:	68 00 00 fe 42       	push   0x42fe0000
c0022258:	50                   	push   eax
c0022259:	e8 37 50 00 00       	call   c0027295 <__gesf2>
c002225e:	83 c4 10             	add    esp,0x10
c0022261:	85 c0                	test   eax,eax
c0022263:	78 06                	js     c002226b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022265:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022269:	eb 26                	jmp    c0022291 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002226b:	50                   	push   eax
c002226c:	50                   	push   eax
c002226d:	6a 00                	push   0x0
c002226f:	57                   	push   edi
c0022270:	e8 24 50 00 00       	call   c0027299 <__lesf2>
c0022275:	83 c4 10             	add    esp,0x10
c0022278:	85 c0                	test   eax,eax
c002227a:	7f 06                	jg     c0022282 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c002227c:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022280:	eb 0f                	jmp    c0022291 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022282:	83 ec 0c             	sub    esp,0xc
c0022285:	57                   	push   edi
c0022286:	e8 21 61 00 00       	call   c00283ac <lrintf>
c002228b:	83 c4 10             	add    esp,0x10
c002228e:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022291:	43                   	inc    ebx
c0022292:	e9 2b ff ff ff       	jmp    c00221c2 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022297:	83 c4 10             	add    esp,0x10
c002229a:	5b                   	pop    ebx
c002229b:	5e                   	pop    esi
c002229c:	5f                   	pop    edi
c002229d:	c3                   	ret    

c002229e <SoundDevice::getAudio(int, float*, float*)>:
c002229e:	55                   	push   ebp
c002229f:	31 ed                	xor    ebp,ebp
c00222a1:	57                   	push   edi
c00222a2:	56                   	push   esi
c00222a3:	31 f6                	xor    esi,esi
c00222a5:	53                   	push   ebx
c00222a6:	83 ec 20             	sub    esp,0x20
c00222a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00222ad:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00222b1:	c1 e0 02             	shl    eax,0x2
c00222b4:	50                   	push   eax
c00222b5:	6a 00                	push   0x0
c00222b7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00222bb:	e8 90 e4 fd ff       	call   c0000750 <memset>
c00222c0:	83 c4 10             	add    esp,0x10
c00222c3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00222cb:	8b 8c b3 5c 01 00 00 	mov    ecx,DWORD PTR [ebx+esi*4+0x15c]
c00222d2:	85 c9                	test   ecx,ecx
c00222d4:	74 52                	je     c0022328 <SoundDevice::getAudio(int, float*, float*)+0x8a>
c00222d6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00222da:	99                   	cdq    
c00222db:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c00222e1:	50                   	push   eax
c00222e2:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00222e8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00222ec:	51                   	push   ecx
c00222ed:	e8 da f9 ff ff       	call   c0021ccc <SoundChannel::unbuffer(float*, int, int)>
c00222f2:	31 d2                	xor    edx,edx
c00222f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00222f8:	83 c4 10             	add    esp,0x10
c00222fb:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00222ff:	7d 1e                	jge    c002231f <SoundDevice::getAudio(int, float*, float*)+0x81>
c0022301:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0022305:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022309:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c002230c:	89 cf                	mov    edi,ecx
c002230e:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c0022314:	0f af ca             	imul   ecx,edx
c0022317:	42                   	inc    edx
c0022318:	01 e9                	add    ecx,ebp
c002231a:	89 3c 88             	mov    DWORD PTR [eax+ecx*4],edi
c002231d:	eb dc                	jmp    c00222fb <SoundDevice::getAudio(int, float*, float*)+0x5d>
c002231f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0022323:	45                   	inc    ebp
c0022324:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c0022328:	46                   	inc    esi
c0022329:	83 fe 20             	cmp    esi,0x20
c002232c:	75 9d                	jne    c00222cb <SoundDevice::getAudio(int, float*, float*)+0x2d>
c002232e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022332:	83 c4 1c             	add    esp,0x1c
c0022335:	5b                   	pop    ebx
c0022336:	5e                   	pop    esi
c0022337:	5f                   	pop    edi
c0022338:	5d                   	pop    ebp
c0022339:	c3                   	ret    

c002233a <PCI::open(int, int, void*)>:
c002233a:	83 ec 18             	sub    esp,0x18
c002233d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022341:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022345:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002234b:	8b 10                	mov    edx,DWORD PTR [eax]
c002234d:	50                   	push   eax
c002234e:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022351:	31 c0                	xor    eax,eax
c0022353:	83 c4 1c             	add    esp,0x1c
c0022356:	c3                   	ret    
c0022357:	90                   	nop

c0022358 <PCI::close(int, int, void*)>:
c0022358:	31 c0                	xor    eax,eax
c002235a:	c3                   	ret    
c002235b:	90                   	nop

c002235c <PCI::PCI()>:
c002235c:	83 ec 0c             	sub    esp,0xc
c002235f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022363:	83 ec 08             	sub    esp,0x8
c0022366:	68 58 bf 02 c0       	push   0xc002bf58
c002236b:	50                   	push   eax
c002236c:	e8 fd 0f ff ff       	call   c001336e <Bus::Bus(char const*)>
c0022371:	83 c4 10             	add    esp,0x10
c0022374:	ba 44 c0 02 c0       	mov    edx,0xc002c044
c0022379:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002237d:	89 10                	mov    DWORD PTR [eax],edx
c002237f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022383:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c002238d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022391:	a3 64 1c 03 c0       	mov    ds:0xc0031c64,eax
c0022396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002239a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00223a0:	0f b6 d0             	movzx  edx,al
c00223a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223a7:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00223ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223b2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00223b8:	0f b6 d0             	movzx  edx,al
c00223bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223bf:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00223c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223c8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00223ce:	8d 50 01             	lea    edx,[eax+0x1]
c00223d1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00223d5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00223db:	0f b6 d0             	movzx  edx,al
c00223de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223e2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00223e6:	83 c9 c0             	or     ecx,0xffffffc0
c00223e9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00223ed:	90                   	nop
c00223ee:	83 c4 0c             	add    esp,0xc
c00223f1:	c3                   	ret    

c00223f2 <PCI::readBAR8(unsigned int, int)>:
c00223f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00223f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00223fa:	f6 c2 01             	test   dl,0x1
c00223fd:	74 07                	je     c0022406 <PCI::readBAR8(unsigned int, int)+0x14>
c00223ff:	83 e2 fc             	and    edx,0xfffffffc
c0022402:	01 c2                	add    edx,eax
c0022404:	ec                   	in     al,dx
c0022405:	c3                   	ret    
c0022406:	83 e2 f0             	and    edx,0xfffffff0
c0022409:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c002240c:	c3                   	ret    
c002240d:	90                   	nop

c002240e <PCI::readBAR16(unsigned int, int)>:
c002240e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022412:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022416:	f6 c2 01             	test   dl,0x1
c0022419:	74 08                	je     c0022423 <PCI::readBAR16(unsigned int, int)+0x15>
c002241b:	83 e2 fc             	and    edx,0xfffffffc
c002241e:	01 c2                	add    edx,eax
c0022420:	66 ed                	in     ax,dx
c0022422:	c3                   	ret    
c0022423:	83 e2 f0             	and    edx,0xfffffff0
c0022426:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c002242a:	c3                   	ret    
c002242b:	90                   	nop

c002242c <PCI::readBAR32(unsigned int, int)>:
c002242c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022434:	f6 c2 01             	test   dl,0x1
c0022437:	74 07                	je     c0022440 <PCI::readBAR32(unsigned int, int)+0x14>
c0022439:	83 e2 fc             	and    edx,0xfffffffc
c002243c:	01 c2                	add    edx,eax
c002243e:	ed                   	in     eax,dx
c002243f:	c3                   	ret    
c0022440:	83 e2 f0             	and    edx,0xfffffff0
c0022443:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0022446:	c3                   	ret    
c0022447:	90                   	nop

c0022448 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0022448:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002244c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022450:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022454:	f6 c2 01             	test   dl,0x1
c0022457:	74 07                	je     c0022460 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0022459:	83 e2 fc             	and    edx,0xfffffffc
c002245c:	01 ca                	add    edx,ecx
c002245e:	ee                   	out    dx,al
c002245f:	c3                   	ret    
c0022460:	83 e2 f0             	and    edx,0xfffffff0
c0022463:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0022466:	c3                   	ret    
c0022467:	90                   	nop

c0022468 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0022468:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002246c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022470:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022474:	f6 c2 01             	test   dl,0x1
c0022477:	74 08                	je     c0022481 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0022479:	83 e2 fc             	and    edx,0xfffffffc
c002247c:	01 ca                	add    edx,ecx
c002247e:	66 ef                	out    dx,ax
c0022480:	c3                   	ret    
c0022481:	83 e2 f0             	and    edx,0xfffffff0
c0022484:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0022488:	c3                   	ret    
c0022489:	90                   	nop

c002248a <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c002248a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002248e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022492:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022496:	f6 c2 01             	test   dl,0x1
c0022499:	74 07                	je     c00224a2 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c002249b:	83 e2 fc             	and    edx,0xfffffffc
c002249e:	01 ca                	add    edx,ecx
c00224a0:	ef                   	out    dx,eax
c00224a1:	c3                   	ret    
c00224a2:	83 e2 f0             	and    edx,0xfffffff0
c00224a5:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00224a8:	c3                   	ret    
c00224a9:	90                   	nop

c00224aa <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00224aa:	55                   	push   ebp
c00224ab:	57                   	push   edi
c00224ac:	56                   	push   esi
c00224ad:	53                   	push   ebx
c00224ae:	83 ec 0c             	sub    esp,0xc
c00224b1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00224b5:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00224b9:	89 f0                	mov    eax,esi
c00224bb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00224bf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00224c3:	3c 07                	cmp    al,0x7
c00224c5:	76 10                	jbe    c00224d7 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00224c7:	83 ec 0c             	sub    esp,0xc
c00224ca:	68 60 bf 02 c0       	push   0xc002bf60
c00224cf:	e8 65 79 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c00224d4:	83 c4 10             	add    esp,0x10
c00224d7:	80 fb 0f             	cmp    bl,0xf
c00224da:	76 10                	jbe    c00224ec <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00224dc:	83 ec 0c             	sub    esp,0xc
c00224df:	68 90 bf 02 c0       	push   0xc002bf90
c00224e4:	e8 50 79 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c00224e9:	83 c4 10             	add    esp,0x10
c00224ec:	8d 04 36             	lea    eax,[esi+esi*1]
c00224ef:	ba f8 0c 00 00       	mov    edx,0xcf8
c00224f4:	83 c8 f0             	or     eax,0xfffffff0
c00224f7:	ee                   	out    dx,al
c00224f8:	ba fa 0c 00 00       	mov    edx,0xcfa
c00224fd:	89 e8                	mov    eax,ebp
c00224ff:	ee                   	out    dx,al
c0022500:	83 c4 0c             	add    esp,0xc
c0022503:	89 d8                	mov    eax,ebx
c0022505:	66 81 e7 fc 00       	and    di,0xfc
c002250a:	5b                   	pop    ebx
c002250b:	c1 e0 08             	shl    eax,0x8
c002250e:	5e                   	pop    esi
c002250f:	09 f8                	or     eax,edi
c0022511:	5f                   	pop    edi
c0022512:	66 0d 00 c0          	or     ax,0xc000
c0022516:	5d                   	pop    ebp
c0022517:	c3                   	ret    

c0022518 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022518:	57                   	push   edi
c0022519:	56                   	push   esi
c002251a:	53                   	push   ebx
c002251b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002251f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022523:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0022529:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002252d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022531:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022535:	83 ff 01             	cmp    edi,0x1
c0022538:	75 3e                	jne    c0022578 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c002253a:	89 de                	mov    esi,ebx
c002253c:	0f b6 c0             	movzx  eax,al
c002253f:	81 e6 fc 00 00 00    	and    esi,0xfc
c0022545:	c1 e0 10             	shl    eax,0x10
c0022548:	0f b6 c9             	movzx  ecx,cl
c002254b:	09 f0                	or     eax,esi
c002254d:	c1 e1 08             	shl    ecx,0x8
c0022550:	0f b6 d2             	movzx  edx,dl
c0022553:	09 c8                	or     eax,ecx
c0022555:	c1 e2 0b             	shl    edx,0xb
c0022558:	09 d0                	or     eax,edx
c002255a:	ba f8 0c 00 00       	mov    edx,0xcf8
c002255f:	0d 00 00 00 80       	or     eax,0x80000000
c0022564:	ef                   	out    dx,eax
c0022565:	ba fc 0c 00 00       	mov    edx,0xcfc
c002256a:	ed                   	in     eax,dx
c002256b:	83 e3 02             	and    ebx,0x2
c002256e:	0f b6 cb             	movzx  ecx,bl
c0022571:	c1 e1 03             	shl    ecx,0x3
c0022574:	d3 e8                	shr    eax,cl
c0022576:	eb 43                	jmp    c00225bb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022578:	83 ff 02             	cmp    edi,0x2
c002257b:	75 2c                	jne    c00225a9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c002257d:	83 ec 0c             	sub    esp,0xc
c0022580:	0f b6 c9             	movzx  ecx,cl
c0022583:	0f b6 d2             	movzx  edx,dl
c0022586:	0f b6 fb             	movzx  edi,bl
c0022589:	0f b6 c0             	movzx  eax,al
c002258c:	57                   	push   edi
c002258d:	51                   	push   ecx
c002258e:	52                   	push   edx
c002258f:	50                   	push   eax
c0022590:	56                   	push   esi
c0022591:	e8 14 ff ff ff       	call   c00224aa <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022596:	89 c2                	mov    edx,eax
c0022598:	ed                   	in     eax,dx
c0022599:	83 e3 02             	and    ebx,0x2
c002259c:	83 c4 20             	add    esp,0x20
c002259f:	0f b6 cb             	movzx  ecx,bl
c00225a2:	c1 e1 03             	shl    ecx,0x3
c00225a5:	d3 e8                	shr    eax,cl
c00225a7:	eb 12                	jmp    c00225bb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00225a9:	83 ec 0c             	sub    esp,0xc
c00225ac:	68 c0 bf 02 c0       	push   0xc002bfc0
c00225b1:	e8 83 78 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c00225b6:	83 c4 10             	add    esp,0x10
c00225b9:	31 c0                	xor    eax,eax
c00225bb:	5b                   	pop    ebx
c00225bc:	5e                   	pop    esi
c00225bd:	5f                   	pop    edi
c00225be:	c3                   	ret    
c00225bf:	90                   	nop

c00225c0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00225c0:	83 ec 18             	sub    esp,0x18
c00225c3:	6a 00                	push   0x0
c00225c5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225ca:	50                   	push   eax
c00225cb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225d0:	50                   	push   eax
c00225d1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225d6:	50                   	push   eax
c00225d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00225db:	e8 38 ff ff ff       	call   c0022518 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00225e0:	83 c4 2c             	add    esp,0x2c
c00225e3:	c3                   	ret    

c00225e4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00225e4:	83 ec 18             	sub    esp,0x18
c00225e7:	6a 0e                	push   0xe
c00225e9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225ee:	50                   	push   eax
c00225ef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225f4:	50                   	push   eax
c00225f5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225fa:	50                   	push   eax
c00225fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00225ff:	e8 14 ff ff ff       	call   c0022518 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022604:	83 c4 2c             	add    esp,0x2c
c0022607:	0f b6 c0             	movzx  eax,al
c002260a:	c3                   	ret    
c002260b:	90                   	nop

c002260c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c002260c:	55                   	push   ebp
c002260d:	57                   	push   edi
c002260e:	56                   	push   esi
c002260f:	53                   	push   ebx
c0022610:	83 ec 18             	sub    esp,0x18
c0022613:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0022618:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c002261d:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0022622:	6a 0a                	push   0xa
c0022624:	56                   	push   esi
c0022625:	55                   	push   ebp
c0022626:	57                   	push   edi
c0022627:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002262b:	e8 e8 fe ff ff       	call   c0022518 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022630:	83 c4 14             	add    esp,0x14
c0022633:	89 c3                	mov    ebx,eax
c0022635:	6a 0a                	push   0xa
c0022637:	0f b6 db             	movzx  ebx,bl
c002263a:	56                   	push   esi
c002263b:	55                   	push   ebp
c002263c:	57                   	push   edi
c002263d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022641:	e8 d2 fe ff ff       	call   c0022518 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022646:	83 c4 2c             	add    esp,0x2c
c0022649:	25 00 ff 00 00       	and    eax,0xff00
c002264e:	09 d8                	or     eax,ebx
c0022650:	5b                   	pop    ebx
c0022651:	5e                   	pop    esi
c0022652:	5f                   	pop    edi
c0022653:	5d                   	pop    ebp
c0022654:	c3                   	ret    
c0022655:	90                   	nop

c0022656 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022656:	83 ec 18             	sub    esp,0x18
c0022659:	6a 08                	push   0x8
c002265b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022660:	50                   	push   eax
c0022661:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022666:	50                   	push   eax
c0022667:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002266c:	50                   	push   eax
c002266d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022671:	e8 a2 fe ff ff       	call   c0022518 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022676:	83 c4 2c             	add    esp,0x2c
c0022679:	0f b6 c4             	movzx  eax,ah
c002267c:	c3                   	ret    
c002267d:	90                   	nop

c002267e <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002267e:	83 ec 18             	sub    esp,0x18
c0022681:	6a 08                	push   0x8
c0022683:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022688:	50                   	push   eax
c0022689:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002268e:	50                   	push   eax
c002268f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022694:	50                   	push   eax
c0022695:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022699:	e8 7a fe ff ff       	call   c0022518 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002269e:	83 c4 2c             	add    esp,0x2c
c00226a1:	c3                   	ret    

c00226a2 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00226a2:	83 ec 18             	sub    esp,0x18
c00226a5:	6a 3c                	push   0x3c
c00226a7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226ac:	50                   	push   eax
c00226ad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226b2:	50                   	push   eax
c00226b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226b8:	50                   	push   eax
c00226b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00226bd:	e8 56 fe ff ff       	call   c0022518 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226c2:	83 c4 2c             	add    esp,0x2c
c00226c5:	c3                   	ret    

c00226c6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00226c6:	83 ec 18             	sub    esp,0x18
c00226c9:	6a 18                	push   0x18
c00226cb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226d0:	50                   	push   eax
c00226d1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226d6:	50                   	push   eax
c00226d7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226dc:	50                   	push   eax
c00226dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00226e1:	e8 32 fe ff ff       	call   c0022518 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226e6:	83 c4 2c             	add    esp,0x2c
c00226e9:	0f b6 c4             	movzx  eax,ah
c00226ec:	c3                   	ret    
c00226ed:	90                   	nop

c00226ee <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00226ee:	55                   	push   ebp
c00226ef:	57                   	push   edi
c00226f0:	56                   	push   esi
c00226f1:	53                   	push   ebx
c00226f2:	83 ec 28             	sub    esp,0x28
c00226f5:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00226f9:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c00226fe:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0022703:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0022708:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002270f:	8d 43 12             	lea    eax,[ebx+0x12]
c0022712:	83 c3 10             	add    ebx,0x10
c0022715:	0f b6 c0             	movzx  eax,al
c0022718:	0f b6 db             	movzx  ebx,bl
c002271b:	50                   	push   eax
c002271c:	51                   	push   ecx
c002271d:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0022721:	57                   	push   edi
c0022722:	55                   	push   ebp
c0022723:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022727:	e8 ec fd ff ff       	call   c0022518 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002272c:	83 c4 14             	add    esp,0x14
c002272f:	89 c6                	mov    esi,eax
c0022731:	53                   	push   ebx
c0022732:	c1 e6 10             	shl    esi,0x10
c0022735:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022739:	51                   	push   ecx
c002273a:	57                   	push   edi
c002273b:	55                   	push   ebp
c002273c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022740:	e8 d3 fd ff ff       	call   c0022518 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022745:	83 c4 3c             	add    esp,0x3c
c0022748:	0f b7 c0             	movzx  eax,ax
c002274b:	5b                   	pop    ebx
c002274c:	09 f0                	or     eax,esi
c002274e:	5e                   	pop    esi
c002274f:	5f                   	pop    edi
c0022750:	5d                   	pop    ebp
c0022751:	c3                   	ret    

c0022752 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022752:	55                   	push   ebp
c0022753:	57                   	push   edi
c0022754:	56                   	push   esi
c0022755:	53                   	push   ebx
c0022756:	83 ec 0c             	sub    esp,0xc
c0022759:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002275d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022761:	89 f5                	mov    ebp,esi
c0022763:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0022769:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002276d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022771:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022775:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022779:	83 f9 01             	cmp    ecx,0x1
c002277c:	75 5d                	jne    c00227db <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c002277e:	0f b6 c8             	movzx  ecx,al
c0022781:	0f b6 d2             	movzx  edx,dl
c0022784:	c1 e1 10             	shl    ecx,0x10
c0022787:	c1 e2 0b             	shl    edx,0xb
c002278a:	89 f0                	mov    eax,esi
c002278c:	25 fc 00 00 00       	and    eax,0xfc
c0022791:	09 c1                	or     ecx,eax
c0022793:	89 e8                	mov    eax,ebp
c0022795:	0f b6 c0             	movzx  eax,al
c0022798:	c1 e0 08             	shl    eax,0x8
c002279b:	09 c1                	or     ecx,eax
c002279d:	09 d1                	or     ecx,edx
c002279f:	ba f8 0c 00 00       	mov    edx,0xcf8
c00227a4:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00227aa:	89 c8                	mov    eax,ecx
c00227ac:	ef                   	out    dx,eax
c00227ad:	ba fc 0c 00 00       	mov    edx,0xcfc
c00227b2:	ed                   	in     eax,dx
c00227b3:	0f b7 db             	movzx  ebx,bx
c00227b6:	83 e6 02             	and    esi,0x2
c00227b9:	74 0a                	je     c00227c5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c00227bb:	0f b7 d0             	movzx  edx,ax
c00227be:	c1 e3 10             	shl    ebx,0x10
c00227c1:	09 d3                	or     ebx,edx
c00227c3:	eb 05                	jmp    c00227ca <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00227c5:	66 31 c0             	xor    ax,ax
c00227c8:	09 c3                	or     ebx,eax
c00227ca:	ba f8 0c 00 00       	mov    edx,0xcf8
c00227cf:	89 c8                	mov    eax,ecx
c00227d1:	ef                   	out    dx,eax
c00227d2:	ba fc 0c 00 00       	mov    edx,0xcfc
c00227d7:	89 d8                	mov    eax,ebx
c00227d9:	eb 41                	jmp    c002281c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00227db:	83 f9 02             	cmp    ecx,0x2
c00227de:	75 45                	jne    c0022825 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00227e0:	83 ec 0c             	sub    esp,0xc
c00227e3:	0f b6 d2             	movzx  edx,dl
c00227e6:	89 f1                	mov    ecx,esi
c00227e8:	0f b6 c0             	movzx  eax,al
c00227eb:	0f b6 f1             	movzx  esi,cl
c00227ee:	89 e9                	mov    ecx,ebp
c00227f0:	56                   	push   esi
c00227f1:	0f b6 c9             	movzx  ecx,cl
c00227f4:	51                   	push   ecx
c00227f5:	52                   	push   edx
c00227f6:	50                   	push   eax
c00227f7:	57                   	push   edi
c00227f8:	e8 ad fc ff ff       	call   c00224aa <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00227fd:	89 c2                	mov    edx,eax
c00227ff:	ed                   	in     eax,dx
c0022800:	83 c4 20             	add    esp,0x20
c0022803:	0f b7 db             	movzx  ebx,bx
c0022806:	f6 c2 02             	test   dl,0x2
c0022809:	74 0c                	je     c0022817 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c002280b:	0f b7 c8             	movzx  ecx,ax
c002280e:	89 d8                	mov    eax,ebx
c0022810:	c1 e0 10             	shl    eax,0x10
c0022813:	09 c8                	or     eax,ecx
c0022815:	eb 05                	jmp    c002281c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022817:	66 31 c0             	xor    ax,ax
c002281a:	09 d8                	or     eax,ebx
c002281c:	ef                   	out    dx,eax
c002281d:	83 c4 0c             	add    esp,0xc
c0022820:	5b                   	pop    ebx
c0022821:	5e                   	pop    esi
c0022822:	5f                   	pop    edi
c0022823:	5d                   	pop    ebp
c0022824:	c3                   	ret    
c0022825:	c7 44 24 20 c0 bf 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bfc0
c002282d:	83 c4 0c             	add    esp,0xc
c0022830:	5b                   	pop    ebx
c0022831:	5e                   	pop    esi
c0022832:	5f                   	pop    edi
c0022833:	5d                   	pop    ebp
c0022834:	e9 00 76 ff ff       	jmp    c0019e39 <Krnl::panic(char const*)>
c0022839:	90                   	nop

c002283a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c002283a:	55                   	push   ebp
c002283b:	57                   	push   edi
c002283c:	56                   	push   esi
c002283d:	53                   	push   ebx
c002283e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022844:	80 3d 70 1c 03 c0 00 	cmp    BYTE PTR ds:0xc0031c70,0x0
c002284b:	0f 85 84 00 00 00    	jne    c00228d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0022851:	83 ec 0c             	sub    esp,0xc
c0022854:	68 14 01 00 00       	push   0x114
c0022859:	e8 3b cd fe ff       	call   c000f599 <malloc>
c002285e:	83 c4 0c             	add    esp,0xc
c0022861:	89 c3                	mov    ebx,eax
c0022863:	ff 35 70 0e 03 c0    	push   DWORD PTR ds:0xc0030e70
c0022869:	68 c6 bf 02 c0       	push   0xc002bfc6
c002286e:	50                   	push   eax
c002286f:	e8 b8 03 ff ff       	call   c0012c2c <File::File(char const*, Process*)>
c0022874:	5a                   	pop    edx
c0022875:	59                   	pop    ecx
c0022876:	6a 01                	push   0x1
c0022878:	53                   	push   ebx
c0022879:	e8 12 04 ff ff       	call   c0012c90 <File::open(FileOpenMode)>
c002287e:	83 c4 0c             	add    esp,0xc
c0022881:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0022885:	50                   	push   eax
c0022886:	8d 44 24 28          	lea    eax,[esp+0x28]
c002288a:	50                   	push   eax
c002288b:	53                   	push   ebx
c002288c:	e8 ab 06 ff ff       	call   c0012f3c <File::stat(unsigned long long*, bool*)>
c0022891:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022895:	40                   	inc    eax
c0022896:	89 04 24             	mov    DWORD PTR [esp],eax
c0022899:	e8 fb cc fe ff       	call   c000f599 <malloc>
c002289e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00228a2:	a3 6c 1c 03 c0       	mov    ds:0xc0031c6c,eax
c00228a7:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c00228ab:	5e                   	pop    esi
c00228ac:	8b 13                	mov    edx,DWORD PTR [ebx]
c00228ae:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00228b2:	51                   	push   ecx
c00228b3:	50                   	push   eax
c00228b4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00228b8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00228bc:	53                   	push   ebx
c00228bd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00228c0:	83 c4 14             	add    esp,0x14
c00228c3:	53                   	push   ebx
c00228c4:	e8 25 04 ff ff       	call   c0012cee <File::close()>
c00228c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00228cd:	83 c4 10             	add    esp,0x10
c00228d0:	a3 68 1c 03 c0       	mov    ds:0xc0031c68,eax
c00228d5:	a1 68 1c 03 c0       	mov    eax,ds:0xc0031c68
c00228da:	8b 15 6c 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c6c
c00228e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00228e3:	31 ff                	xor    edi,edi
c00228e5:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c00228ed:	31 f6                	xor    esi,esi
c00228ef:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00228f4:	31 db                	xor    ebx,ebx
c00228f6:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c00228fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0022903:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c002290a:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c002290e:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0022915:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0022919:	39 3c 24             	cmp    DWORD PTR [esp],edi
c002291c:	0f 8e 6b 01 00 00    	jle    c0022a8d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0022922:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022925:	d4 40                	aam    0x40
c0022927:	d5 39                	aad    0x39
c0022929:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002292d:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0022931:	d4 40                	aam    0x40
c0022933:	d5 39                	aad    0x39
c0022935:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0022939:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c002293d:	d4 40                	aam    0x40
c002293f:	d5 39                	aad    0x39
c0022941:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0022945:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0022949:	d4 40                	aam    0x40
c002294b:	d5 39                	aad    0x39
c002294d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022951:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0022955:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022959:	3c 56                	cmp    al,0x56
c002295b:	74 45                	je     c00229a2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c002295d:	d4 40                	aam    0x40
c002295f:	d5 39                	aad    0x39
c0022961:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022964:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0022968:	0f b6 c9             	movzx  ecx,cl
c002296b:	c1 e1 04             	shl    ecx,0x4
c002296e:	d4 40                	aam    0x40
c0022970:	d5 39                	aad    0x39
c0022972:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022975:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0022979:	0f b6 db             	movzx  ebx,bl
c002297c:	09 cb                	or     ebx,ecx
c002297e:	c1 e3 04             	shl    ebx,0x4
c0022981:	d4 40                	aam    0x40
c0022983:	d5 39                	aad    0x39
c0022985:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022988:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c002298c:	0f b6 c9             	movzx  ecx,cl
c002298f:	09 cb                	or     ebx,ecx
c0022991:	c1 e3 04             	shl    ebx,0x4
c0022994:	89 d9                	mov    ecx,ebx
c0022996:	d4 40                	aam    0x40
c0022998:	d5 39                	aad    0x39
c002299a:	8d 58 d0             	lea    ebx,[eax-0x30]
c002299d:	0f b6 db             	movzx  ebx,bl
c00229a0:	09 cb                	or     ebx,ecx
c00229a2:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c00229a6:	80 f9 44             	cmp    cl,0x44
c00229a9:	74 47                	je     c00229f2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c00229ab:	88 c8                	mov    al,cl
c00229ad:	d4 40                	aam    0x40
c00229af:	d5 39                	aad    0x39
c00229b1:	83 e8 30             	sub    eax,0x30
c00229b4:	0f b6 e8             	movzx  ebp,al
c00229b7:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c00229bb:	c1 e5 04             	shl    ebp,0x4
c00229be:	d4 40                	aam    0x40
c00229c0:	d5 39                	aad    0x39
c00229c2:	83 e8 30             	sub    eax,0x30
c00229c5:	0f b6 f0             	movzx  esi,al
c00229c8:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c00229cc:	09 ee                	or     esi,ebp
c00229ce:	c1 e6 04             	shl    esi,0x4
c00229d1:	d4 40                	aam    0x40
c00229d3:	d5 39                	aad    0x39
c00229d5:	83 e8 30             	sub    eax,0x30
c00229d8:	0f b6 e8             	movzx  ebp,al
c00229db:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c00229df:	09 ee                	or     esi,ebp
c00229e1:	c1 e6 04             	shl    esi,0x4
c00229e4:	89 f5                	mov    ebp,esi
c00229e6:	d4 40                	aam    0x40
c00229e8:	d5 39                	aad    0x39
c00229ea:	83 e8 30             	sub    eax,0x30
c00229ed:	0f b6 f0             	movzx  esi,al
c00229f0:	09 ee                	or     esi,ebp
c00229f2:	83 c7 10             	add    edi,0x10
c00229f5:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c00229f9:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c00229fc:	3c 0a                	cmp    al,0xa
c00229fe:	74 09                	je     c0022a09 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0022a00:	45                   	inc    ebp
c0022a01:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022a04:	75 16                	jne    c0022a1c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0022a06:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022a09:	3c 0a                	cmp    al,0xa
c0022a0b:	0f 94 c0             	sete   al
c0022a0e:	0f b6 c0             	movzx  eax,al
c0022a11:	01 c7                	add    edi,eax
c0022a13:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0022a18:	75 0c                	jne    c0022a26 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0022a1a:	eb 15                	jmp    c0022a31 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0022a1c:	47                   	inc    edi
c0022a1d:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0022a20:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0022a24:	eb d3                	jmp    c00229f9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0022a26:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0022a2b:	0f 85 e8 fe ff ff    	jne    c0022919 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a31:	80 f9 44             	cmp    cl,0x44
c0022a34:	74 0b                	je     c0022a41 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0022a36:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0022a3b:	0f 85 d8 fe ff ff    	jne    c0022919 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a41:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0022a45:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0022a49:	c1 e1 04             	shl    ecx,0x4
c0022a4c:	83 e8 30             	sub    eax,0x30
c0022a4f:	09 c8                	or     eax,ecx
c0022a51:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0022a55:	0f 85 be fe ff ff    	jne    c0022919 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a5b:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0022a5f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022a63:	c1 e1 04             	shl    ecx,0x4
c0022a66:	83 e8 30             	sub    eax,0x30
c0022a69:	09 c8                	or     eax,ecx
c0022a6b:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0022a6f:	0f 85 a4 fe ff ff    	jne    c0022919 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a75:	50                   	push   eax
c0022a76:	50                   	push   eax
c0022a77:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022a7b:	50                   	push   eax
c0022a7c:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0022a83:	e8 84 dd fd ff       	call   c000080c <strcpy>
c0022a88:	83 c4 10             	add    esp,0x10
c0022a8b:	eb 15                	jmp    c0022aa2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0022a8d:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022a94:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0022a9f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022aa2:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022aa9:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022aaf:	5b                   	pop    ebx
c0022ab0:	5e                   	pop    esi
c0022ab1:	5f                   	pop    edi
c0022ab2:	5d                   	pop    ebp
c0022ab3:	c3                   	ret    

c0022ab4 <PCI::checkBus(unsigned char)>:
c0022ab4:	56                   	push   esi
c0022ab5:	53                   	push   ebx
c0022ab6:	31 db                	xor    ebx,ebx
c0022ab8:	51                   	push   ecx
c0022ab9:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022abe:	52                   	push   edx
c0022abf:	53                   	push   ebx
c0022ac0:	43                   	inc    ebx
c0022ac1:	56                   	push   esi
c0022ac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ac6:	e8 37 03 00 00       	call   c0022e02 <PCI::checkDevice(unsigned char, unsigned char)>
c0022acb:	83 c4 10             	add    esp,0x10
c0022ace:	83 fb 20             	cmp    ebx,0x20
c0022ad1:	75 eb                	jne    c0022abe <PCI::checkBus(unsigned char)+0xa>
c0022ad3:	58                   	pop    eax
c0022ad4:	5b                   	pop    ebx
c0022ad5:	5e                   	pop    esi
c0022ad6:	c3                   	ret    
c0022ad7:	90                   	nop

c0022ad8 <PCI::foundDevice(PCIDeviceInfo)>:
c0022ad8:	55                   	push   ebp
c0022ad9:	57                   	push   edi
c0022ada:	56                   	push   esi
c0022adb:	53                   	push   ebx
c0022adc:	83 ec 1c             	sub    esp,0x1c
c0022adf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022ae3:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022ae9:	0f 84 52 01 00 00    	je     c0022c41 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022aef:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022af3:	66 81 f9 06 04       	cmp    cx,0x406
c0022af8:	75 2c                	jne    c0022b26 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022afa:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022aff:	50                   	push   eax
c0022b00:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022b05:	50                   	push   eax
c0022b06:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022b0b:	50                   	push   eax
c0022b0c:	56                   	push   esi
c0022b0d:	e8 b4 fb ff ff       	call   c00226c6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022b12:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022b16:	0f b6 c0             	movzx  eax,al
c0022b19:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022b1d:	83 c4 2c             	add    esp,0x2c
c0022b20:	5b                   	pop    ebx
c0022b21:	5e                   	pop    esi
c0022b22:	5f                   	pop    edi
c0022b23:	5d                   	pop    ebp
c0022b24:	eb 8e                	jmp    c0022ab4 <PCI::checkBus(unsigned char)>
c0022b26:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022b2a:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022b30:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022b34:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022b38:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022b3c:	88 d3                	mov    bl,dl
c0022b3e:	85 c0                	test   eax,eax
c0022b40:	74 33                	je     c0022b75 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022b42:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022b45:	85 d2                	test   edx,edx
c0022b47:	74 28                	je     c0022b71 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b49:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022b4f:	31 ef                	xor    edi,ebp
c0022b51:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022b57:	75 18                	jne    c0022b71 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b59:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022b5d:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022b63:	75 0c                	jne    c0022b71 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b65:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022b6b:	0f 84 d0 00 00 00    	je     c0022c41 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022b71:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b73:	eb c9                	jmp    c0022b3e <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022b75:	66 81 f9 01 06       	cmp    cx,0x601
c0022b7a:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022b7e:	75 19                	jne    c0022b99 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022b80:	83 ec 0c             	sub    esp,0xc
c0022b83:	68 64 01 00 00       	push   0x164
c0022b88:	e8 0c ca fe ff       	call   c000f599 <malloc>
c0022b8d:	89 c5                	mov    ebp,eax
c0022b8f:	89 04 24             	mov    DWORD PTR [esp],eax
c0022b92:	e8 85 0e 00 00       	call   c0023a1c <SATABus::SATABus()>
c0022b97:	eb 1e                	jmp    c0022bb7 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022b99:	66 81 f9 01 01       	cmp    cx,0x101
c0022b9e:	75 60                	jne    c0022c00 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022ba0:	83 ec 0c             	sub    esp,0xc
c0022ba3:	68 70 02 00 00       	push   0x270
c0022ba8:	e8 ec c9 fe ff       	call   c000f599 <malloc>
c0022bad:	89 c5                	mov    ebp,eax
c0022baf:	89 04 24             	mov    DWORD PTR [esp],eax
c0022bb2:	e8 0f 03 00 00       	call   c0022ec6 <IDE::IDE()>
c0022bb7:	58                   	pop    eax
c0022bb8:	5a                   	pop    edx
c0022bb9:	55                   	push   ebp
c0022bba:	56                   	push   esi
c0022bbb:	e8 46 0f ff ff       	call   c0013b06 <Device::addChild(Device*)>
c0022bc0:	83 ec 1c             	sub    esp,0x1c
c0022bc3:	b9 09 00 00 00       	mov    ecx,0x9
c0022bc8:	fc                   	cld    
c0022bc9:	89 e7                	mov    edi,esp
c0022bcb:	89 de                	mov    esi,ebx
c0022bcd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022bcf:	55                   	push   ebp
c0022bd0:	e8 43 0e ff ff       	call   c0013a18 <Device::preOpenPCI(PCIDeviceInfo)>
c0022bd5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022bd8:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022bdc:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022be4:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022bec:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022bf4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022bf7:	83 c4 4c             	add    esp,0x4c
c0022bfa:	5b                   	pop    ebx
c0022bfb:	5e                   	pop    esi
c0022bfc:	5f                   	pop    edi
c0022bfd:	5d                   	pop    ebp
c0022bfe:	ff e0                	jmp    eax
c0022c00:	83 ec 0c             	sub    esp,0xc
c0022c03:	68 58 01 00 00       	push   0x158
c0022c08:	e8 8c c9 fe ff       	call   c000f599 <malloc>
c0022c0d:	89 c5                	mov    ebp,eax
c0022c0f:	58                   	pop    eax
c0022c10:	5a                   	pop    edx
c0022c11:	68 df bf 02 c0       	push   0xc002bfdf
c0022c16:	55                   	push   ebp
c0022c17:	e8 f4 11 ff ff       	call   c0013e10 <DriverlessDevice::DriverlessDevice(char const*)>
c0022c1c:	59                   	pop    ecx
c0022c1d:	5f                   	pop    edi
c0022c1e:	55                   	push   ebp
c0022c1f:	56                   	push   esi
c0022c20:	e8 e1 0e ff ff       	call   c0013b06 <Device::addChild(Device*)>
c0022c25:	b9 09 00 00 00       	mov    ecx,0x9
c0022c2a:	fc                   	cld    
c0022c2b:	89 df                	mov    edi,ebx
c0022c2d:	89 de                	mov    esi,ebx
c0022c2f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022c31:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022c35:	83 c4 2c             	add    esp,0x2c
c0022c38:	5b                   	pop    ebx
c0022c39:	5e                   	pop    esi
c0022c3a:	5f                   	pop    edi
c0022c3b:	5d                   	pop    ebp
c0022c3c:	e9 d7 0d ff ff       	jmp    c0013a18 <Device::preOpenPCI(PCIDeviceInfo)>
c0022c41:	83 c4 1c             	add    esp,0x1c
c0022c44:	5b                   	pop    ebx
c0022c45:	5e                   	pop    esi
c0022c46:	5f                   	pop    edi
c0022c47:	5d                   	pop    ebp
c0022c48:	c3                   	ret    
c0022c49:	90                   	nop

c0022c4a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022c4a:	55                   	push   ebp
c0022c4b:	57                   	push   edi
c0022c4c:	56                   	push   esi
c0022c4d:	53                   	push   ebx
c0022c4e:	83 ec 68             	sub    esp,0x68
c0022c51:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0022c55:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0022c5c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022c60:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0022c67:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0022c6c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022c70:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0022c77:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0022c7c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022c80:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0022c85:	6a 0c                	push   0xc
c0022c87:	57                   	push   edi
c0022c88:	53                   	push   ebx
c0022c89:	56                   	push   esi
c0022c8a:	55                   	push   ebp
c0022c8b:	e8 88 f8 ff ff       	call   c0022518 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c90:	83 c4 20             	add    esp,0x20
c0022c93:	57                   	push   edi
c0022c94:	53                   	push   ebx
c0022c95:	56                   	push   esi
c0022c96:	55                   	push   ebp
c0022c97:	e8 70 f9 ff ff       	call   c002260c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022c9c:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0022ca1:	57                   	push   edi
c0022ca2:	53                   	push   ebx
c0022ca3:	56                   	push   esi
c0022ca4:	55                   	push   ebp
c0022ca5:	e8 f8 f9 ff ff       	call   c00226a2 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022caa:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0022cae:	83 c4 14             	add    esp,0x14
c0022cb1:	6a 3c                	push   0x3c
c0022cb3:	57                   	push   edi
c0022cb4:	53                   	push   ebx
c0022cb5:	56                   	push   esi
c0022cb6:	55                   	push   ebp
c0022cb7:	e8 5c f8 ff ff       	call   c0022518 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022cbc:	0f b6 c4             	movzx  eax,ah
c0022cbf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0022cc3:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0022cc7:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0022ccb:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0022cd0:	83 c4 20             	add    esp,0x20
c0022cd3:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022cd9:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022ce0:	74 7c                	je     c0022d5e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022ce2:	31 c0                	xor    eax,eax
c0022ce4:	8b 15 28 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d928
c0022cea:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022cf0:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0022cf6:	7e 66                	jle    c0022d5e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022cf8:	8d 14 c2             	lea    edx,[edx+eax*8]
c0022cfb:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022d02:	39 cb                	cmp    ebx,ecx
c0022d04:	75 55                	jne    c0022d5b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022d06:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022d0d:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022d11:	75 48                	jne    c0022d5b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022d13:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022d17:	83 ec 0c             	sub    esp,0xc
c0022d1a:	68 f9 bf 02 c0       	push   0xc002bff9
c0022d1f:	e8 a9 f9 fe ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0022d24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022d28:	8b 15 28 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d928
c0022d2e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0022d32:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022d38:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0022d40:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0022d44:	52                   	push   edx
c0022d45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d49:	53                   	push   ebx
c0022d4a:	68 1e c0 02 c0       	push   0xc002c01e
c0022d4f:	e8 79 f9 fe ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0022d54:	83 c4 20             	add    esp,0x20
c0022d57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022d5b:	40                   	inc    eax
c0022d5c:	eb 86                	jmp    c0022ce4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c0022d5e:	31 d2                	xor    edx,edx
c0022d60:	83 ec 0c             	sub    esp,0xc
c0022d63:	57                   	push   edi
c0022d64:	53                   	push   ebx
c0022d65:	56                   	push   esi
c0022d66:	52                   	push   edx
c0022d67:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0022d6b:	55                   	push   ebp
c0022d6c:	e8 7d f9 ff ff       	call   c00226ee <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d71:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022d75:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022d79:	42                   	inc    edx
c0022d7a:	83 c4 20             	add    esp,0x20
c0022d7d:	83 fa 06             	cmp    edx,0x6
c0022d80:	75 de                	jne    c0022d60 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c0022d82:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0022d87:	83 ec 0c             	sub    esp,0xc
c0022d8a:	86 e0                	xchg   al,ah
c0022d8c:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0022d91:	6a 02                	push   0x2
c0022d93:	57                   	push   edi
c0022d94:	53                   	push   ebx
c0022d95:	56                   	push   esi
c0022d96:	55                   	push   ebp
c0022d97:	e8 7c f7 ff ff       	call   c0022518 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d9c:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0022da1:	83 c4 20             	add    esp,0x20
c0022da4:	57                   	push   edi
c0022da5:	53                   	push   ebx
c0022da6:	56                   	push   esi
c0022da7:	55                   	push   ebp
c0022da8:	e8 a9 f8 ff ff       	call   c0022656 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022dad:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022db1:	57                   	push   edi
c0022db2:	53                   	push   ebx
c0022db3:	56                   	push   esi
c0022db4:	55                   	push   ebp
c0022db5:	e8 06 f8 ff ff       	call   c00225c0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022dba:	b9 09 00 00 00       	mov    ecx,0x9
c0022dbf:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0022dc4:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0022dc8:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0022dcc:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0022dd0:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0022dd4:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022dd8:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0022ddc:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0022de0:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0022de4:	83 ec 0c             	sub    esp,0xc
c0022de7:	fc                   	cld    
c0022de8:	89 e7                	mov    edi,esp
c0022dea:	8d 74 24 58          	lea    esi,[esp+0x58]
c0022dee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022df0:	55                   	push   ebp
c0022df1:	e8 e2 fc ff ff       	call   c0022ad8 <PCI::foundDevice(PCIDeviceInfo)>
c0022df6:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022dfc:	5b                   	pop    ebx
c0022dfd:	5e                   	pop    esi
c0022dfe:	5f                   	pop    edi
c0022dff:	5d                   	pop    ebp
c0022e00:	c3                   	ret    
c0022e01:	90                   	nop

c0022e02 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022e02:	55                   	push   ebp
c0022e03:	57                   	push   edi
c0022e04:	56                   	push   esi
c0022e05:	53                   	push   ebx
c0022e06:	83 ec 0c             	sub    esp,0xc
c0022e09:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022e0d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022e12:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022e17:	6a 00                	push   0x0
c0022e19:	56                   	push   esi
c0022e1a:	57                   	push   edi
c0022e1b:	55                   	push   ebp
c0022e1c:	e8 9f f7 ff ff       	call   c00225c0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e21:	6a 00                	push   0x0
c0022e23:	56                   	push   esi
c0022e24:	57                   	push   edi
c0022e25:	55                   	push   ebp
c0022e26:	e8 1f fe ff ff       	call   c0022c4a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022e2b:	83 c4 20             	add    esp,0x20
c0022e2e:	6a 00                	push   0x0
c0022e30:	56                   	push   esi
c0022e31:	57                   	push   edi
c0022e32:	55                   	push   ebp
c0022e33:	e8 ac f7 ff ff       	call   c00225e4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022e38:	83 c4 10             	add    esp,0x10
c0022e3b:	84 c0                	test   al,al
c0022e3d:	79 27                	jns    c0022e66 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022e3f:	bb 01 00 00 00       	mov    ebx,0x1
c0022e44:	53                   	push   ebx
c0022e45:	56                   	push   esi
c0022e46:	57                   	push   edi
c0022e47:	55                   	push   ebp
c0022e48:	e8 73 f7 ff ff       	call   c00225c0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e4d:	83 c4 10             	add    esp,0x10
c0022e50:	66 40                	inc    ax
c0022e52:	74 0c                	je     c0022e60 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022e54:	53                   	push   ebx
c0022e55:	56                   	push   esi
c0022e56:	57                   	push   edi
c0022e57:	55                   	push   ebp
c0022e58:	e8 ed fd ff ff       	call   c0022c4a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022e5d:	83 c4 10             	add    esp,0x10
c0022e60:	43                   	inc    ebx
c0022e61:	83 fb 08             	cmp    ebx,0x8
c0022e64:	75 de                	jne    c0022e44 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022e66:	83 c4 0c             	add    esp,0xc
c0022e69:	5b                   	pop    ebx
c0022e6a:	5e                   	pop    esi
c0022e6b:	5f                   	pop    edi
c0022e6c:	5d                   	pop    ebp
c0022e6d:	c3                   	ret    

c0022e6e <PCI::detect()>:
c0022e6e:	56                   	push   esi
c0022e6f:	53                   	push   ebx
c0022e70:	53                   	push   ebx
c0022e71:	31 db                	xor    ebx,ebx
c0022e73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022e77:	6a 00                	push   0x0
c0022e79:	6a 00                	push   0x0
c0022e7b:	6a 00                	push   0x0
c0022e7d:	56                   	push   esi
c0022e7e:	e8 61 f7 ff ff       	call   c00225e4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022e83:	83 c4 10             	add    esp,0x10
c0022e86:	a8 80                	test   al,0x80
c0022e88:	75 21                	jne    c0022eab <PCI::detect()+0x3d>
c0022e8a:	51                   	push   ecx
c0022e8b:	51                   	push   ecx
c0022e8c:	6a 00                	push   0x0
c0022e8e:	56                   	push   esi
c0022e8f:	e8 20 fc ff ff       	call   c0022ab4 <PCI::checkBus(unsigned char)>
c0022e94:	83 c4 10             	add    esp,0x10
c0022e97:	eb 24                	jmp    c0022ebd <PCI::detect()+0x4f>
c0022e99:	52                   	push   edx
c0022e9a:	52                   	push   edx
c0022e9b:	53                   	push   ebx
c0022e9c:	43                   	inc    ebx
c0022e9d:	56                   	push   esi
c0022e9e:	e8 11 fc ff ff       	call   c0022ab4 <PCI::checkBus(unsigned char)>
c0022ea3:	83 c4 10             	add    esp,0x10
c0022ea6:	83 fb 08             	cmp    ebx,0x8
c0022ea9:	74 12                	je     c0022ebd <PCI::detect()+0x4f>
c0022eab:	53                   	push   ebx
c0022eac:	6a 00                	push   0x0
c0022eae:	6a 00                	push   0x0
c0022eb0:	56                   	push   esi
c0022eb1:	e8 0a f7 ff ff       	call   c00225c0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022eb6:	83 c4 10             	add    esp,0x10
c0022eb9:	66 40                	inc    ax
c0022ebb:	74 dc                	je     c0022e99 <PCI::detect()+0x2b>
c0022ebd:	58                   	pop    eax
c0022ebe:	5b                   	pop    ebx
c0022ebf:	5e                   	pop    esi
c0022ec0:	c3                   	ret    
c0022ec1:	90                   	nop

c0022ec2 <IDE::close(int, int, void*)>:
c0022ec2:	83 c8 ff             	or     eax,0xffffffff
c0022ec5:	c3                   	ret    

c0022ec6 <IDE::IDE()>:
c0022ec6:	83 ec 0c             	sub    esp,0xc
c0022ec9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ecd:	83 ec 08             	sub    esp,0x8
c0022ed0:	68 68 c0 02 c0       	push   0xc002c068
c0022ed5:	50                   	push   eax
c0022ed6:	e8 d9 0f ff ff       	call   c0013eb4 <HardDiskController::HardDiskController(char const*)>
c0022edb:	83 c4 10             	add    esp,0x10
c0022ede:	ba f8 c0 02 c0       	mov    edx,0xc002c0f8
c0022ee3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ee7:	89 10                	mov    DWORD PTR [eax],edx
c0022ee9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eed:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022ef4:	90                   	nop
c0022ef5:	83 c4 0c             	add    esp,0xc
c0022ef8:	c3                   	ret    
c0022ef9:	90                   	nop

c0022efa <IDE::prepareInterrupt(unsigned char)>:
c0022efa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022eff:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022f03:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022f0b:	c3                   	ret    

c0022f0c <selectDrive(unsigned char, unsigned char)>:
c0022f0c:	c3                   	ret    
c0022f0d:	90                   	nop

c0022f0e <IDE::getBase(unsigned char)>:
c0022f0e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022f13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f17:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022f1f:	c3                   	ret    

c0022f20 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022f20:	55                   	push   ebp
c0022f21:	57                   	push   edi
c0022f22:	56                   	push   esi
c0022f23:	53                   	push   ebx
c0022f24:	83 ec 1c             	sub    esp,0x1c
c0022f27:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022f2b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022f2f:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022f32:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022f36:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022f3a:	80 f9 03             	cmp    cl,0x3
c0022f3d:	77 51                	ja     c0022f90 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022f3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022f43:	0f b6 f2             	movzx  esi,dl
c0022f46:	0f b6 db             	movzx  ebx,bl
c0022f49:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022f4c:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022f50:	83 ca 80             	or     edx,0xffffff80
c0022f53:	0f b6 d2             	movzx  edx,dl
c0022f56:	52                   	push   edx
c0022f57:	6a 0c                	push   0xc
c0022f59:	56                   	push   esi
c0022f5a:	57                   	push   edi
c0022f5b:	e8 c0 ff ff ff       	call   c0022f20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f60:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022f69:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022f6d:	ee                   	out    dx,al
c0022f6e:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022f73:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022f77:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022f7b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022f7f:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022f87:	83 c4 2c             	add    esp,0x2c
c0022f8a:	5b                   	pop    ebx
c0022f8b:	5e                   	pop    esi
c0022f8c:	5f                   	pop    edi
c0022f8d:	5d                   	pop    ebp
c0022f8e:	eb 90                	jmp    c0022f20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f90:	80 fb 07             	cmp    bl,0x7
c0022f93:	77 12                	ja     c0022fa7 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022f95:	0f b6 d2             	movzx  edx,dl
c0022f98:	0f b6 db             	movzx  ebx,bl
c0022f9b:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022fa3:	89 da                	mov    edx,ebx
c0022fa5:	eb 2f                	jmp    c0022fd6 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022fa7:	80 fb 0d             	cmp    bl,0xd
c0022faa:	77 13                	ja     c0022fbf <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022fac:	0f b6 d2             	movzx  edx,dl
c0022faf:	0f b6 db             	movzx  ebx,bl
c0022fb2:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022fb9:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022fbd:	eb 17                	jmp    c0022fd6 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022fbf:	80 fb 15             	cmp    bl,0x15
c0022fc2:	77 13                	ja     c0022fd7 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022fc4:	0f b6 d2             	movzx  edx,dl
c0022fc7:	0f b6 db             	movzx  ebx,bl
c0022fca:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022fd2:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022fd6:	ee                   	out    dx,al
c0022fd7:	83 c4 1c             	add    esp,0x1c
c0022fda:	5b                   	pop    ebx
c0022fdb:	5e                   	pop    esi
c0022fdc:	5f                   	pop    edi
c0022fdd:	5d                   	pop    ebp
c0022fde:	c3                   	ret    
c0022fdf:	90                   	nop

c0022fe0 <IDE::read(unsigned char, unsigned char)>:
c0022fe0:	55                   	push   ebp
c0022fe1:	57                   	push   edi
c0022fe2:	56                   	push   esi
c0022fe3:	53                   	push   ebx
c0022fe4:	83 ec 1c             	sub    esp,0x1c
c0022fe7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022feb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022fef:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022ff2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022ff6:	3c 03                	cmp    al,0x3
c0022ff8:	77 43                	ja     c002303d <IDE::read(unsigned char, unsigned char)+0x5d>
c0022ffa:	0f b6 f2             	movzx  esi,dl
c0022ffd:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023000:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023004:	83 c8 80             	or     eax,0xffffff80
c0023007:	0f b6 c0             	movzx  eax,al
c002300a:	50                   	push   eax
c002300b:	6a 0c                	push   0xc
c002300d:	56                   	push   esi
c002300e:	57                   	push   edi
c002300f:	e8 0c ff ff ff       	call   c0022f20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023014:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023019:	0f b6 c3             	movzx  eax,bl
c002301c:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023020:	ec                   	in     al,dx
c0023021:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023025:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002302a:	52                   	push   edx
c002302b:	6a 0c                	push   0xc
c002302d:	56                   	push   esi
c002302e:	57                   	push   edi
c002302f:	e8 ec fe ff ff       	call   c0022f20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023034:	83 c4 20             	add    esp,0x20
c0023037:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002303b:	eb 49                	jmp    c0023086 <IDE::read(unsigned char, unsigned char)+0xa6>
c002303d:	80 fb 07             	cmp    bl,0x7
c0023040:	77 12                	ja     c0023054 <IDE::read(unsigned char, unsigned char)+0x74>
c0023042:	0f b6 d2             	movzx  edx,dl
c0023045:	0f b6 c3             	movzx  eax,bl
c0023048:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023050:	89 c2                	mov    edx,eax
c0023052:	eb 31                	jmp    c0023085 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023054:	80 fb 0d             	cmp    bl,0xd
c0023057:	77 13                	ja     c002306c <IDE::read(unsigned char, unsigned char)+0x8c>
c0023059:	0f b6 d2             	movzx  edx,dl
c002305c:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023063:	0f b6 d3             	movzx  edx,bl
c0023066:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002306a:	eb 19                	jmp    c0023085 <IDE::read(unsigned char, unsigned char)+0xa5>
c002306c:	31 c0                	xor    eax,eax
c002306e:	80 fb 15             	cmp    bl,0x15
c0023071:	77 13                	ja     c0023086 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023073:	0f b6 d2             	movzx  edx,dl
c0023076:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c002307e:	0f b6 d3             	movzx  edx,bl
c0023081:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023085:	ec                   	in     al,dx
c0023086:	83 c4 1c             	add    esp,0x1c
c0023089:	5b                   	pop    ebx
c002308a:	5e                   	pop    esi
c002308b:	5f                   	pop    edi
c002308c:	5d                   	pop    ebp
c002308d:	c3                   	ret    

c002308e <IDE::waitInterrupt(unsigned char)>:
c002308e:	55                   	push   ebp
c002308f:	57                   	push   edi
c0023090:	56                   	push   esi
c0023091:	53                   	push   ebx
c0023092:	31 db                	xor    ebx,ebx
c0023094:	83 ec 0c             	sub    esp,0xc
c0023097:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002309b:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00230a0:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00230a8:	89 e8                	mov    eax,ebp
c00230aa:	84 c0                	test   al,al
c00230ac:	75 34                	jne    c00230e2 <IDE::waitInterrupt(unsigned char)+0x54>
c00230ae:	52                   	push   edx
c00230af:	6a 0c                	push   0xc
c00230b1:	56                   	push   esi
c00230b2:	57                   	push   edi
c00230b3:	e8 28 ff ff ff       	call   c0022fe0 <IDE::read(unsigned char, unsigned char)>
c00230b8:	83 c4 10             	add    esp,0x10
c00230bb:	a8 01                	test   al,0x1
c00230bd:	75 2b                	jne    c00230ea <IDE::waitInterrupt(unsigned char)+0x5c>
c00230bf:	f6 c3 04             	test   bl,0x4
c00230c2:	75 16                	jne    c00230da <IDE::waitInterrupt(unsigned char)+0x4c>
c00230c4:	83 fb 32             	cmp    ebx,0x32
c00230c7:	7e 11                	jle    c00230da <IDE::waitInterrupt(unsigned char)+0x4c>
c00230c9:	50                   	push   eax
c00230ca:	50                   	push   eax
c00230cb:	6a 00                	push   0x0
c00230cd:	68 80 96 98 00       	push   0x989680
c00230d2:	e8 c6 ab ff ff       	call   c001dc9d <nanoSleep(unsigned long long)>
c00230d7:	83 c4 10             	add    esp,0x10
c00230da:	83 fb 3c             	cmp    ebx,0x3c
c00230dd:	74 0b                	je     c00230ea <IDE::waitInterrupt(unsigned char)+0x5c>
c00230df:	43                   	inc    ebx
c00230e0:	eb be                	jmp    c00230a0 <IDE::waitInterrupt(unsigned char)+0x12>
c00230e2:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00230ea:	83 c4 0c             	add    esp,0xc
c00230ed:	89 e8                	mov    eax,ebp
c00230ef:	5b                   	pop    ebx
c00230f0:	5e                   	pop    esi
c00230f1:	5f                   	pop    edi
c00230f2:	5d                   	pop    ebp
c00230f3:	c3                   	ret    

c00230f4 <ideChannel0IRQHandler(regs*, void*)>:
c00230f4:	83 ec 10             	sub    esp,0x10
c00230f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00230fb:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023102:	6a 07                	push   0x7
c0023104:	6a 00                	push   0x0
c0023106:	50                   	push   eax
c0023107:	e8 d4 fe ff ff       	call   c0022fe0 <IDE::read(unsigned char, unsigned char)>
c002310c:	83 c4 1c             	add    esp,0x1c
c002310f:	c3                   	ret    

c0023110 <ideChannel1IRQHandler(regs*, void*)>:
c0023110:	83 ec 10             	sub    esp,0x10
c0023113:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023117:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002311e:	6a 07                	push   0x7
c0023120:	6a 01                	push   0x1
c0023122:	50                   	push   eax
c0023123:	e8 b8 fe ff ff       	call   c0022fe0 <IDE::read(unsigned char, unsigned char)>
c0023128:	83 c4 1c             	add    esp,0x1c
c002312b:	c3                   	ret    

c002312c <IDE::enableIRQs(unsigned char, bool)>:
c002312c:	57                   	push   edi
c002312d:	56                   	push   esi
c002312e:	be 04 00 00 00       	mov    esi,0x4
c0023133:	53                   	push   ebx
c0023134:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023139:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002313d:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023142:	0f 94 c0             	sete   al
c0023145:	d1 e0                	shl    eax,1
c0023147:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c002314e:	0f b6 c0             	movzx  eax,al
c0023151:	50                   	push   eax
c0023152:	6a 0c                	push   0xc
c0023154:	57                   	push   edi
c0023155:	53                   	push   ebx
c0023156:	e8 c5 fd ff ff       	call   c0022f20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002315b:	83 c4 10             	add    esp,0x10
c002315e:	50                   	push   eax
c002315f:	6a 0c                	push   0xc
c0023161:	57                   	push   edi
c0023162:	53                   	push   ebx
c0023163:	e8 78 fe ff ff       	call   c0022fe0 <IDE::read(unsigned char, unsigned char)>
c0023168:	83 c4 10             	add    esp,0x10
c002316b:	4e                   	dec    esi
c002316c:	75 f0                	jne    c002315e <IDE::enableIRQs(unsigned char, bool)+0x32>
c002316e:	5b                   	pop    ebx
c002316f:	5e                   	pop    esi
c0023170:	5f                   	pop    edi
c0023171:	c3                   	ret    

c0023172 <IDE::open(int, int, void*)>:
c0023172:	55                   	push   ebp
c0023173:	57                   	push   edi
c0023174:	56                   	push   esi
c0023175:	53                   	push   ebx
c0023176:	83 ec 1c             	sub    esp,0x1c
c0023179:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002317d:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023186:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002318f:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023196:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002319d:	0f 85 b0 02 00 00    	jne    c0023453 <IDE::open(int, int, void*)+0x2e1>
c00231a3:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00231a9:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00231ad:	83 e0 7f             	and    eax,0x7f
c00231b0:	3c 05                	cmp    al,0x5
c00231b2:	74 04                	je     c00231b8 <IDE::open(int, int, void*)+0x46>
c00231b4:	3c 0f                	cmp    al,0xf
c00231b6:	75 32                	jne    c00231ea <IDE::open(int, int, void*)+0x78>
c00231b8:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00231be:	83 e0 fc             	and    eax,0xfffffffc
c00231c1:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00231c8:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00231ce:	83 e0 fc             	and    eax,0xfffffffc
c00231d1:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00231d8:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00231de:	83 e0 fc             	and    eax,0xfffffffc
c00231e1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00231e8:	eb 14                	jmp    c00231fe <IDE::open(int, int, void*)+0x8c>
c00231ea:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00231f4:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00231fe:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023205:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002320c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023210:	89 c6                	mov    esi,eax
c0023212:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023217:	c1 e6 10             	shl    esi,0x10
c002321a:	89 e8                	mov    eax,ebp
c002321c:	89 fa                	mov    edx,edi
c002321e:	c1 e0 0b             	shl    eax,0xb
c0023221:	09 f0                	or     eax,esi
c0023223:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002322a:	c1 e6 08             	shl    esi,0x8
c002322d:	09 c6                	or     esi,eax
c002322f:	89 f0                	mov    eax,esi
c0023231:	0d 08 00 00 80       	or     eax,0x80000008
c0023236:	ef                   	out    dx,eax
c0023237:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002323c:	89 ca                	mov    edx,ecx
c002323e:	ed                   	in     eax,dx
c002323f:	c1 e8 10             	shr    eax,0x10
c0023242:	3d ff ff 00 00       	cmp    eax,0xffff
c0023247:	0f 84 f5 00 00 00    	je     c0023342 <IDE::open(int, int, void*)+0x1d0>
c002324d:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023253:	89 fa                	mov    edx,edi
c0023255:	89 f0                	mov    eax,esi
c0023257:	ef                   	out    dx,eax
c0023258:	b0 fe                	mov    al,0xfe
c002325a:	89 ca                	mov    edx,ecx
c002325c:	ee                   	out    dx,al
c002325d:	89 f0                	mov    eax,esi
c002325f:	89 fa                	mov    edx,edi
c0023261:	ef                   	out    dx,eax
c0023262:	89 ca                	mov    edx,ecx
c0023264:	ed                   	in     eax,dx
c0023265:	3c fe                	cmp    al,0xfe
c0023267:	0f 85 a9 00 00 00    	jne    c0023316 <IDE::open(int, int, void*)+0x1a4>
c002326d:	8b 15 28 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d928
c0023273:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c002327a:	74 33                	je     c00232af <IDE::open(int, int, void*)+0x13d>
c002327c:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023282:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023286:	40                   	inc    eax
c0023287:	83 ec 0c             	sub    esp,0xc
c002328a:	0f b6 c0             	movzx  eax,al
c002328d:	50                   	push   eax
c002328e:	55                   	push   ebp
c002328f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023293:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023299:	51                   	push   ecx
c002329a:	e8 53 48 ff ff       	call   c0017af2 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002329f:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00232a4:	83 c4 1c             	add    esp,0x1c
c00232a7:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00232ad:	eb 0a                	jmp    c00232b9 <IDE::open(int, int, void*)+0x147>
c00232af:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00232b9:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00232c0:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00232c7:	c1 e1 10             	shl    ecx,0x10
c00232ca:	c1 e0 08             	shl    eax,0x8
c00232cd:	bf f8 0c 00 00       	mov    edi,0xcf8
c00232d2:	09 c1                	or     ecx,eax
c00232d4:	89 fa                	mov    edx,edi
c00232d6:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00232dd:	c1 e0 0b             	shl    eax,0xb
c00232e0:	09 c1                	or     ecx,eax
c00232e2:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00232e8:	89 c8                	mov    eax,ecx
c00232ea:	ef                   	out    dx,eax
c00232eb:	be fc 0c 00 00       	mov    esi,0xcfc
c00232f0:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00232f6:	89 f2                	mov    edx,esi
c00232f8:	ee                   	out    dx,al
c00232f9:	89 c8                	mov    eax,ecx
c00232fb:	89 fa                	mov    edx,edi
c00232fd:	ef                   	out    dx,eax
c00232fe:	89 f2                	mov    edx,esi
c0023300:	ed                   	in     eax,dx
c0023301:	0f b6 c0             	movzx  eax,al
c0023304:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002330a:	74 46                	je     c0023352 <IDE::open(int, int, void*)+0x1e0>
c002330c:	83 ec 0c             	sub    esp,0xc
c002330f:	68 80 c0 02 c0       	push   0xc002c080
c0023314:	eb 34                	jmp    c002334a <IDE::open(int, int, void*)+0x1d8>
c0023316:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002331f:	75 17                	jne    c0023338 <IDE::open(int, int, void*)+0x1c6>
c0023321:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023326:	74 07                	je     c002332f <IDE::open(int, int, void*)+0x1bd>
c0023328:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c002332d:	75 09                	jne    c0023338 <IDE::open(int, int, void*)+0x1c6>
c002332f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023336:	eb 1a                	jmp    c0023352 <IDE::open(int, int, void*)+0x1e0>
c0023338:	83 ec 0c             	sub    esp,0xc
c002333b:	68 88 c0 02 c0       	push   0xc002c088
c0023340:	eb 08                	jmp    c002334a <IDE::open(int, int, void*)+0x1d8>
c0023342:	83 ec 0c             	sub    esp,0xc
c0023345:	68 b9 c0 02 c0       	push   0xc002c0b9
c002334a:	e8 ea 6a ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c002334f:	83 c4 10             	add    esp,0x10
c0023352:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023359:	79 1a                	jns    c0023375 <IDE::open(int, int, void*)+0x203>
c002335b:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023361:	83 e0 fc             	and    eax,0xfffffffc
c0023364:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002336b:	83 c0 08             	add    eax,0x8
c002336e:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023375:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002337b:	89 c2                	mov    edx,eax
c002337d:	83 e2 0f             	and    edx,0xf
c0023380:	66 83 fa 08          	cmp    dx,0x8
c0023384:	75 0a                	jne    c0023390 <IDE::open(int, int, void*)+0x21e>
c0023386:	83 e8 02             	sub    eax,0x2
c0023389:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023390:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023396:	89 c2                	mov    edx,eax
c0023398:	83 e2 0f             	and    edx,0xf
c002339b:	66 83 fa 08          	cmp    dx,0x8
c002339f:	75 0a                	jne    c00233ab <IDE::open(int, int, void*)+0x239>
c00233a1:	83 e8 02             	sub    eax,0x2
c00233a4:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00233ab:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00233b2:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00233b9:	89 d0                	mov    eax,edx
c00233bb:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00233be:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00233c2:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00233c6:	8d 4a 01             	lea    ecx,[edx+0x1]
c00233c9:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00233ce:	0f b6 c9             	movzx  ecx,cl
c00233d1:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00233d8:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00233db:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00233df:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00233e3:	8d 50 02             	lea    edx,[eax+0x2]
c00233e6:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00233eb:	0f b6 d2             	movzx  edx,dl
c00233ee:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00233f4:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00233f7:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00233fb:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00233ff:	8d 48 03             	lea    ecx,[eax+0x3]
c0023402:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023407:	0f b6 c9             	movzx  ecx,cl
c002340a:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023410:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023413:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023417:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002341b:	8d 50 04             	lea    edx,[eax+0x4]
c002341e:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023424:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023429:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023430:	66 85 f6             	test   si,si
c0023433:	74 5b                	je     c0023490 <IDE::open(int, int, void*)+0x31e>
c0023435:	0f b6 d2             	movzx  edx,dl
c0023438:	83 c0 05             	add    eax,0x5
c002343b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002343e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023442:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023446:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002344c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023451:	eb 3d                	jmp    c0023490 <IDE::open(int, int, void*)+0x31e>
c0023453:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0023459:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023460:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023467:	66 05 06 02          	add    ax,0x206
c002346b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023472:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0023479:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023480:	66 05 06 02          	add    ax,0x206
c0023484:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002348b:	e9 e5 fe ff ff       	jmp    c0023375 <IDE::open(int, int, void*)+0x203>
c0023490:	50                   	push   eax
c0023491:	50                   	push   eax
c0023492:	6a 00                	push   0x0
c0023494:	53                   	push   ebx
c0023495:	e8 60 fa ff ff       	call   c0022efa <IDE::prepareInterrupt(unsigned char)>
c002349a:	5a                   	pop    edx
c002349b:	59                   	pop    ecx
c002349c:	6a 01                	push   0x1
c002349e:	53                   	push   ebx
c002349f:	e8 56 fa ff ff       	call   c0022efa <IDE::prepareInterrupt(unsigned char)>
c00234a4:	83 c4 0c             	add    esp,0xc
c00234a7:	6a 00                	push   0x0
c00234a9:	6a 00                	push   0x0
c00234ab:	53                   	push   ebx
c00234ac:	e8 7b fc ff ff       	call   c002312c <IDE::enableIRQs(unsigned char, bool)>
c00234b1:	83 c4 0c             	add    esp,0xc
c00234b4:	6a 00                	push   0x0
c00234b6:	6a 01                	push   0x1
c00234b8:	53                   	push   ebx
c00234b9:	e8 6e fc ff ff       	call   c002312c <IDE::enableIRQs(unsigned char, bool)>
c00234be:	83 c4 10             	add    esp,0x10
c00234c1:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00234c8:	74 34                	je     c00234fe <IDE::open(int, int, void*)+0x38c>
c00234ca:	83 ec 0c             	sub    esp,0xc
c00234cd:	53                   	push   ebx
c00234ce:	6a 01                	push   0x1
c00234d0:	68 f4 30 02 c0       	push   0xc00230f4
c00234d5:	6a 0e                	push   0xe
c00234d7:	53                   	push   ebx
c00234d8:	e8 a1 05 ff ff       	call   c0013a7e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00234dd:	83 c4 14             	add    esp,0x14
c00234e0:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00234e6:	53                   	push   ebx
c00234e7:	6a 01                	push   0x1
c00234e9:	68 10 31 02 c0       	push   0xc0023110
c00234ee:	6a 0f                	push   0xf
c00234f0:	53                   	push   ebx
c00234f1:	e8 88 05 ff ff       	call   c0013a7e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00234f6:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00234fc:	eb 38                	jmp    c0023536 <IDE::open(int, int, void*)+0x3c4>
c00234fe:	83 ec 0c             	sub    esp,0xc
c0023501:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002350b:	53                   	push   ebx
c002350c:	6a 00                	push   0x0
c002350e:	68 f4 30 02 c0       	push   0xc00230f4
c0023513:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023519:	53                   	push   ebx
c002351a:	e8 5f 05 ff ff       	call   c0013a7e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002351f:	83 c4 14             	add    esp,0x14
c0023522:	53                   	push   ebx
c0023523:	6a 00                	push   0x0
c0023525:	68 10 31 02 c0       	push   0xc0023110
c002352a:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023530:	53                   	push   ebx
c0023531:	e8 48 05 ff ff       	call   c0013a7e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023536:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023538:	83 c4 20             	add    esp,0x20
c002353b:	83 ec 0c             	sub    esp,0xc
c002353e:	53                   	push   ebx
c002353f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023542:	83 c4 0c             	add    esp,0xc
c0023545:	6a 07                	push   0x7
c0023547:	6a 00                	push   0x0
c0023549:	53                   	push   ebx
c002354a:	e8 91 fa ff ff       	call   c0022fe0 <IDE::read(unsigned char, unsigned char)>
c002354f:	83 c4 0c             	add    esp,0xc
c0023552:	6a 07                	push   0x7
c0023554:	6a 01                	push   0x1
c0023556:	53                   	push   ebx
c0023557:	e8 84 fa ff ff       	call   c0022fe0 <IDE::read(unsigned char, unsigned char)>
c002355c:	83 c4 0c             	add    esp,0xc
c002355f:	6a 01                	push   0x1
c0023561:	6a 00                	push   0x0
c0023563:	53                   	push   ebx
c0023564:	e8 c3 fb ff ff       	call   c002312c <IDE::enableIRQs(unsigned char, bool)>
c0023569:	83 c4 0c             	add    esp,0xc
c002356c:	6a 01                	push   0x1
c002356e:	6a 01                	push   0x1
c0023570:	53                   	push   ebx
c0023571:	e8 b6 fb ff ff       	call   c002312c <IDE::enableIRQs(unsigned char, bool)>
c0023576:	83 c4 2c             	add    esp,0x2c
c0023579:	31 c0                	xor    eax,eax
c002357b:	5b                   	pop    ebx
c002357c:	5e                   	pop    esi
c002357d:	5f                   	pop    edi
c002357e:	5d                   	pop    ebp
c002357f:	c3                   	ret    

c0023580 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023580:	55                   	push   ebp
c0023581:	57                   	push   edi
c0023582:	56                   	push   esi
c0023583:	53                   	push   ebx
c0023584:	83 ec 1c             	sub    esp,0x1c
c0023587:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002358b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002358f:	8d 50 f8             	lea    edx,[eax-0x8]
c0023592:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023596:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002359a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002359e:	80 fa 03             	cmp    dl,0x3
c00235a1:	77 5d                	ja     c0023600 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00235a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00235a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00235ab:	0f b6 db             	movzx  ebx,bl
c00235ae:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00235b1:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00235b5:	83 ca 80             	or     edx,0xffffff80
c00235b8:	0f b6 d2             	movzx  edx,dl
c00235bb:	52                   	push   edx
c00235bc:	6a 0c                	push   0xc
c00235be:	53                   	push   ebx
c00235bf:	56                   	push   esi
c00235c0:	e8 5b f9 ff ff       	call   c0022f20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235c5:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00235ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00235ce:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00235d2:	0f b6 c0             	movzx  eax,al
c00235d5:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00235d9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00235db:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00235e0:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00235e4:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00235e8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00235ec:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00235f4:	83 c4 2c             	add    esp,0x2c
c00235f7:	5b                   	pop    ebx
c00235f8:	5e                   	pop    esi
c00235f9:	5f                   	pop    edi
c00235fa:	5d                   	pop    ebp
c00235fb:	e9 20 f9 ff ff       	jmp    c0022f20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023600:	3c 07                	cmp    al,0x7
c0023602:	77 10                	ja     c0023614 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023604:	0f b6 db             	movzx  ebx,bl
c0023607:	0f b6 d0             	movzx  edx,al
c002360a:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023612:	eb 2d                	jmp    c0023641 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023614:	3c 0d                	cmp    al,0xd
c0023616:	77 13                	ja     c002362b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023618:	0f b6 db             	movzx  ebx,bl
c002361b:	0f b6 c0             	movzx  eax,al
c002361e:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023625:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023629:	eb 16                	jmp    c0023641 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002362b:	3c 15                	cmp    al,0x15
c002362d:	77 14                	ja     c0023643 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c002362f:	0f b6 db             	movzx  ebx,bl
c0023632:	0f b6 c0             	movzx  eax,al
c0023635:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c002363d:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023641:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023643:	83 c4 1c             	add    esp,0x1c
c0023646:	5b                   	pop    ebx
c0023647:	5e                   	pop    esi
c0023648:	5f                   	pop    edi
c0023649:	5d                   	pop    ebp
c002364a:	c3                   	ret    
c002364b:	90                   	nop

c002364c <IDE::detect()>:
c002364c:	55                   	push   ebp
c002364d:	57                   	push   edi
c002364e:	56                   	push   esi
c002364f:	53                   	push   ebx
c0023650:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023656:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002365d:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023664:	0f 85 9d 02 00 00    	jne    c0023907 <IDE::detect()+0x2bb>
c002366a:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023671:	31 f6                	xor    esi,esi
c0023673:	31 ed                	xor    ebp,ebp
c0023675:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002367d:	89 e8                	mov    eax,ebp
c002367f:	c1 e0 06             	shl    eax,0x6
c0023682:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002368a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002368e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023692:	c1 e0 04             	shl    eax,0x4
c0023695:	83 c8 a0             	or     eax,0xffffffa0
c0023698:	0f b6 c0             	movzx  eax,al
c002369b:	50                   	push   eax
c002369c:	6a 06                	push   0x6
c002369e:	56                   	push   esi
c002369f:	53                   	push   ebx
c00236a0:	e8 7b f8 ff ff       	call   c0022f20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236a5:	83 c4 0c             	add    esp,0xc
c00236a8:	6a 0c                	push   0xc
c00236aa:	56                   	push   esi
c00236ab:	53                   	push   ebx
c00236ac:	e8 2f f9 ff ff       	call   c0022fe0 <IDE::read(unsigned char, unsigned char)>
c00236b1:	83 c4 0c             	add    esp,0xc
c00236b4:	6a 0c                	push   0xc
c00236b6:	56                   	push   esi
c00236b7:	53                   	push   ebx
c00236b8:	e8 23 f9 ff ff       	call   c0022fe0 <IDE::read(unsigned char, unsigned char)>
c00236bd:	83 c4 0c             	add    esp,0xc
c00236c0:	6a 0c                	push   0xc
c00236c2:	56                   	push   esi
c00236c3:	53                   	push   ebx
c00236c4:	e8 17 f9 ff ff       	call   c0022fe0 <IDE::read(unsigned char, unsigned char)>
c00236c9:	83 c4 0c             	add    esp,0xc
c00236cc:	6a 0c                	push   0xc
c00236ce:	56                   	push   esi
c00236cf:	53                   	push   ebx
c00236d0:	e8 0b f9 ff ff       	call   c0022fe0 <IDE::read(unsigned char, unsigned char)>
c00236d5:	68 ec 00 00 00       	push   0xec
c00236da:	6a 07                	push   0x7
c00236dc:	56                   	push   esi
c00236dd:	53                   	push   ebx
c00236de:	e8 3d f8 ff ff       	call   c0022f20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236e3:	83 c4 1c             	add    esp,0x1c
c00236e6:	6a 0c                	push   0xc
c00236e8:	56                   	push   esi
c00236e9:	53                   	push   ebx
c00236ea:	e8 f1 f8 ff ff       	call   c0022fe0 <IDE::read(unsigned char, unsigned char)>
c00236ef:	83 c4 0c             	add    esp,0xc
c00236f2:	6a 0c                	push   0xc
c00236f4:	56                   	push   esi
c00236f5:	53                   	push   ebx
c00236f6:	e8 e5 f8 ff ff       	call   c0022fe0 <IDE::read(unsigned char, unsigned char)>
c00236fb:	83 c4 0c             	add    esp,0xc
c00236fe:	6a 0c                	push   0xc
c0023700:	56                   	push   esi
c0023701:	53                   	push   ebx
c0023702:	e8 d9 f8 ff ff       	call   c0022fe0 <IDE::read(unsigned char, unsigned char)>
c0023707:	83 c4 0c             	add    esp,0xc
c002370a:	6a 0c                	push   0xc
c002370c:	56                   	push   esi
c002370d:	53                   	push   ebx
c002370e:	e8 cd f8 ff ff       	call   c0022fe0 <IDE::read(unsigned char, unsigned char)>
c0023713:	83 c4 0c             	add    esp,0xc
c0023716:	6a 0c                	push   0xc
c0023718:	56                   	push   esi
c0023719:	53                   	push   ebx
c002371a:	e8 c1 f8 ff ff       	call   c0022fe0 <IDE::read(unsigned char, unsigned char)>
c002371f:	83 c4 10             	add    esp,0x10
c0023722:	84 c0                	test   al,al
c0023724:	0f 84 63 01 00 00    	je     c002388d <IDE::detect()+0x241>
c002372a:	31 ff                	xor    edi,edi
c002372c:	50                   	push   eax
c002372d:	6a 0c                	push   0xc
c002372f:	56                   	push   esi
c0023730:	53                   	push   ebx
c0023731:	e8 aa f8 ff ff       	call   c0022fe0 <IDE::read(unsigned char, unsigned char)>
c0023736:	83 c4 10             	add    esp,0x10
c0023739:	a8 01                	test   al,0x1
c002373b:	0f 85 6d 01 00 00    	jne    c00238ae <IDE::detect()+0x262>
c0023741:	84 c0                	test   al,al
c0023743:	78 04                	js     c0023749 <IDE::detect()+0xfd>
c0023745:	a8 08                	test   al,0x8
c0023747:	75 27                	jne    c0023770 <IDE::detect()+0x124>
c0023749:	47                   	inc    edi
c002374a:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023750:	7e da                	jle    c002372c <IDE::detect()+0xe0>
c0023752:	50                   	push   eax
c0023753:	50                   	push   eax
c0023754:	6a 00                	push   0x0
c0023756:	68 40 4b 4c 00       	push   0x4c4b40
c002375b:	e8 3d a5 ff ff       	call   c001dc9d <nanoSleep(unsigned long long)>
c0023760:	83 c4 10             	add    esp,0x10
c0023763:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023769:	75 c1                	jne    c002372c <IDE::detect()+0xe0>
c002376b:	e9 3e 01 00 00       	jmp    c00238ae <IDE::detect()+0x262>
c0023770:	31 c9                	xor    ecx,ecx
c0023772:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023776:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002377a:	83 ec 0c             	sub    esp,0xc
c002377d:	68 80 00 00 00       	push   0x80
c0023782:	57                   	push   edi
c0023783:	6a 00                	push   0x0
c0023785:	56                   	push   esi
c0023786:	53                   	push   ebx
c0023787:	e8 f4 fd ff ff       	call   c0023580 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002378c:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023791:	89 e8                	mov    eax,ebp
c0023793:	89 d1                	mov    ecx,edx
c0023795:	c1 e0 06             	shl    eax,0x6
c0023798:	01 d8                	add    eax,ebx
c002379a:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00237a1:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00237a8:	89 f2                	mov    edx,esi
c00237aa:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00237b0:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00237b4:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00237ba:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00237be:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00237c5:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00237cd:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00237d4:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00237dc:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00237e2:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00237e9:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00237ef:	8d 54 24 58          	lea    edx,[esp+0x58]
c00237f3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00237f7:	83 c4 20             	add    esp,0x20
c00237fa:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00237fd:	83 c0 02             	add    eax,0x2
c0023800:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023806:	83 c7 02             	add    edi,0x2
c0023809:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c002380c:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023812:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023816:	75 e2                	jne    c00237fa <IDE::detect()+0x1ae>
c0023818:	89 e8                	mov    eax,ebp
c002381a:	c1 e0 06             	shl    eax,0x6
c002381d:	01 d8                	add    eax,ebx
c002381f:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023825:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002382c:	66 c1 ea 09          	shr    dx,0x9
c0023830:	83 e2 01             	and    edx,0x1
c0023833:	84 c9                	test   cl,cl
c0023835:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002383b:	75 22                	jne    c002385f <IDE::detect()+0x213>
c002383d:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0023844:	74 46                	je     c002388c <IDE::detect()+0x240>
c0023846:	83 ec 0c             	sub    esp,0xc
c0023849:	68 7c 01 00 00       	push   0x17c
c002384e:	e8 46 bd fe ff       	call   c000f599 <malloc>
c0023853:	89 c7                	mov    edi,eax
c0023855:	89 04 24             	mov    DWORD PTR [esp],eax
c0023858:	e8 15 05 00 00       	call   c0023d72 <ATA::ATA()>
c002385d:	eb 17                	jmp    c0023876 <IDE::detect()+0x22a>
c002385f:	83 ec 0c             	sub    esp,0xc
c0023862:	68 80 01 00 00       	push   0x180
c0023867:	e8 2d bd fe ff       	call   c000f599 <malloc>
c002386c:	89 c7                	mov    edi,eax
c002386e:	89 04 24             	mov    DWORD PTR [esp],eax
c0023871:	e8 04 0b 00 00       	call   c002437a <ATAPI::ATAPI()>
c0023876:	5a                   	pop    edx
c0023877:	59                   	pop    ecx
c0023878:	57                   	push   edi
c0023879:	53                   	push   ebx
c002387a:	e8 87 02 ff ff       	call   c0013b06 <Device::addChild(Device*)>
c002387f:	8b 07                	mov    eax,DWORD PTR [edi]
c0023881:	53                   	push   ebx
c0023882:	55                   	push   ebp
c0023883:	6a 00                	push   0x0
c0023885:	57                   	push   edi
c0023886:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023889:	83 c4 20             	add    esp,0x20
c002388c:	45                   	inc    ebp
c002388d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0023892:	74 0d                	je     c00238a1 <IDE::detect()+0x255>
c0023894:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c002389c:	e9 dc fd ff ff       	jmp    c002367d <IDE::detect()+0x31>
c00238a1:	4e                   	dec    esi
c00238a2:	74 63                	je     c0023907 <IDE::detect()+0x2bb>
c00238a4:	be 01 00 00 00       	mov    esi,0x1
c00238a9:	e9 c7 fd ff ff       	jmp    c0023675 <IDE::detect()+0x29>
c00238ae:	50                   	push   eax
c00238af:	6a 04                	push   0x4
c00238b1:	56                   	push   esi
c00238b2:	53                   	push   ebx
c00238b3:	e8 28 f7 ff ff       	call   c0022fe0 <IDE::read(unsigned char, unsigned char)>
c00238b8:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00238bc:	83 c4 0c             	add    esp,0xc
c00238bf:	6a 05                	push   0x5
c00238c1:	56                   	push   esi
c00238c2:	53                   	push   ebx
c00238c3:	e8 18 f7 ff ff       	call   c0022fe0 <IDE::read(unsigned char, unsigned char)>
c00238c8:	83 c4 10             	add    esp,0x10
c00238cb:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00238cf:	80 fa 14             	cmp    dl,0x14
c00238d2:	75 04                	jne    c00238d8 <IDE::detect()+0x28c>
c00238d4:	3c eb                	cmp    al,0xeb
c00238d6:	eb 07                	jmp    c00238df <IDE::detect()+0x293>
c00238d8:	3c 96                	cmp    al,0x96
c00238da:	75 b1                	jne    c002388d <IDE::detect()+0x241>
c00238dc:	80 fa 69             	cmp    dl,0x69
c00238df:	75 ac                	jne    c002388d <IDE::detect()+0x241>
c00238e1:	68 a1 00 00 00       	push   0xa1
c00238e6:	6a 07                	push   0x7
c00238e8:	56                   	push   esi
c00238e9:	53                   	push   ebx
c00238ea:	e8 31 f6 ff ff       	call   c0022f20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238ef:	5f                   	pop    edi
c00238f0:	58                   	pop    eax
c00238f1:	6a 00                	push   0x0
c00238f3:	68 40 42 0f 00       	push   0xf4240
c00238f8:	e8 a0 a3 ff ff       	call   c001dc9d <nanoSleep(unsigned long long)>
c00238fd:	83 c4 10             	add    esp,0x10
c0023900:	b1 01                	mov    cl,0x1
c0023902:	e9 6b fe ff ff       	jmp    c0023772 <IDE::detect()+0x126>
c0023907:	81 c4 1c 02 00 00    	add    esp,0x21c
c002390d:	5b                   	pop    ebx
c002390e:	5e                   	pop    esi
c002390f:	5f                   	pop    edi
c0023910:	5d                   	pop    ebp
c0023911:	c3                   	ret    

c0023912 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023912:	55                   	push   ebp
c0023913:	57                   	push   edi
c0023914:	56                   	push   esi
c0023915:	53                   	push   ebx
c0023916:	83 ec 1c             	sub    esp,0x1c
c0023919:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002391d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023921:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023925:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023929:	88 c3                	mov    bl,al
c002392b:	84 c0                	test   al,al
c002392d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023931:	0f 84 81 00 00 00    	je     c00239b8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023937:	83 ec 0c             	sub    esp,0xc
c002393a:	68 e3 c0 02 c0       	push   0xc002c0e3
c002393f:	e8 89 ed fe ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0023944:	83 c4 10             	add    esp,0x10
c0023947:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002394b:	3c 01                	cmp    al,0x1
c002394d:	74 63                	je     c00239b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c002394f:	3c 02                	cmp    al,0x2
c0023951:	75 53                	jne    c00239a6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0023953:	d1 e6                	shl    esi,1
c0023955:	09 ee                	or     esi,ebp
c0023957:	50                   	push   eax
c0023958:	89 f0                	mov    eax,esi
c002395a:	6a 01                	push   0x1
c002395c:	0f b6 f0             	movzx  esi,al
c002395f:	c1 e6 06             	shl    esi,0x6
c0023962:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c002396a:	50                   	push   eax
c002396b:	57                   	push   edi
c002396c:	e8 6f f6 ff ff       	call   c0022fe0 <IDE::read(unsigned char, unsigned char)>
c0023971:	83 c4 10             	add    esp,0x10
c0023974:	a8 01                	test   al,0x1
c0023976:	74 02                	je     c002397a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0023978:	b3 07                	mov    bl,0x7
c002397a:	a8 02                	test   al,0x2
c002397c:	74 02                	je     c0023980 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c002397e:	b3 03                	mov    bl,0x3
c0023980:	a8 04                	test   al,0x4
c0023982:	74 02                	je     c0023986 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0023984:	b3 14                	mov    bl,0x14
c0023986:	a8 08                	test   al,0x8
c0023988:	74 02                	je     c002398c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c002398a:	b3 03                	mov    bl,0x3
c002398c:	a8 10                	test   al,0x10
c002398e:	74 02                	je     c0023992 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0023990:	b3 15                	mov    bl,0x15
c0023992:	a8 20                	test   al,0x20
c0023994:	74 02                	je     c0023998 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0023996:	b3 03                	mov    bl,0x3
c0023998:	a8 40                	test   al,0x40
c002399a:	74 02                	je     c002399e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c002399c:	b3 16                	mov    bl,0x16
c002399e:	84 c0                	test   al,al
c00239a0:	79 16                	jns    c00239b8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00239a2:	b3 0d                	mov    bl,0xd
c00239a4:	eb 12                	jmp    c00239b8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00239a6:	3c 03                	cmp    al,0x3
c00239a8:	74 0c                	je     c00239b6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c00239aa:	3c 04                	cmp    al,0x4
c00239ac:	75 0a                	jne    c00239b8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00239ae:	b3 08                	mov    bl,0x8
c00239b0:	eb 06                	jmp    c00239b8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00239b2:	b3 13                	mov    bl,0x13
c00239b4:	eb 02                	jmp    c00239b8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00239b6:	b3 17                	mov    bl,0x17
c00239b8:	83 c4 1c             	add    esp,0x1c
c00239bb:	88 d8                	mov    al,bl
c00239bd:	5b                   	pop    ebx
c00239be:	5e                   	pop    esi
c00239bf:	5f                   	pop    edi
c00239c0:	5d                   	pop    ebp
c00239c1:	c3                   	ret    

c00239c2 <IDE::polling(unsigned char, unsigned int)>:
c00239c2:	57                   	push   edi
c00239c3:	56                   	push   esi
c00239c4:	53                   	push   ebx
c00239c5:	bb 04 00 00 00       	mov    ebx,0x4
c00239ca:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00239ce:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00239d3:	52                   	push   edx
c00239d4:	6a 0c                	push   0xc
c00239d6:	56                   	push   esi
c00239d7:	57                   	push   edi
c00239d8:	e8 03 f6 ff ff       	call   c0022fe0 <IDE::read(unsigned char, unsigned char)>
c00239dd:	83 c4 10             	add    esp,0x10
c00239e0:	4b                   	dec    ebx
c00239e1:	75 f0                	jne    c00239d3 <IDE::polling(unsigned char, unsigned int)+0x11>
c00239e3:	bb a0 86 01 00       	mov    ebx,0x186a0
c00239e8:	50                   	push   eax
c00239e9:	6a 0c                	push   0xc
c00239eb:	56                   	push   esi
c00239ec:	57                   	push   edi
c00239ed:	e8 ee f5 ff ff       	call   c0022fe0 <IDE::read(unsigned char, unsigned char)>
c00239f2:	83 c4 10             	add    esp,0x10
c00239f5:	a8 01                	test   al,0x1
c00239f7:	75 17                	jne    c0023a10 <IDE::polling(unsigned char, unsigned int)+0x4e>
c00239f9:	a8 20                	test   al,0x20
c00239fb:	75 0f                	jne    c0023a0c <IDE::polling(unsigned char, unsigned int)+0x4a>
c00239fd:	4b                   	dec    ebx
c00239fe:	74 10                	je     c0023a10 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023a00:	84 c0                	test   al,al
c0023a02:	78 e4                	js     c00239e8 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023a04:	a8 08                	test   al,0x8
c0023a06:	74 e0                	je     c00239e8 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023a08:	31 c0                	xor    eax,eax
c0023a0a:	eb 06                	jmp    c0023a12 <IDE::polling(unsigned char, unsigned int)+0x50>
c0023a0c:	b0 01                	mov    al,0x1
c0023a0e:	eb 02                	jmp    c0023a12 <IDE::polling(unsigned char, unsigned int)+0x50>
c0023a10:	b0 02                	mov    al,0x2
c0023a12:	5b                   	pop    ebx
c0023a13:	5e                   	pop    esi
c0023a14:	5f                   	pop    edi
c0023a15:	c3                   	ret    

c0023a16 <SATABus::close(int, int, void*)>:
c0023a16:	31 c0                	xor    eax,eax
c0023a18:	c3                   	ret    
c0023a19:	90                   	nop

c0023a1a <SATABus::detect()>:
c0023a1a:	c3                   	ret    
c0023a1b:	90                   	nop

c0023a1c <SATABus::SATABus()>:
c0023a1c:	83 ec 0c             	sub    esp,0xc
c0023a1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a23:	83 ec 08             	sub    esp,0x8
c0023a26:	68 1c c1 02 c0       	push   0xc002c11c
c0023a2b:	50                   	push   eax
c0023a2c:	e8 83 04 ff ff       	call   c0013eb4 <HardDiskController::HardDiskController(char const*)>
c0023a31:	83 c4 10             	add    esp,0x10
c0023a34:	ba 70 c1 02 c0       	mov    edx,0xc002c170
c0023a39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a3d:	89 10                	mov    DWORD PTR [eax],edx
c0023a3f:	83 ec 0c             	sub    esp,0xc
c0023a42:	6a 50                	push   0x50
c0023a44:	e8 20 c0 fe ff       	call   c000fa69 <Phys::allocateContiguousPages(int)>
c0023a49:	83 c4 10             	add    esp,0x10
c0023a4c:	89 c2                	mov    edx,eax
c0023a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a52:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023a58:	83 ec 0c             	sub    esp,0xc
c0023a5b:	6a 50                	push   0x50
c0023a5d:	e8 bf d7 fe ff       	call   c0011221 <Virt::allocateKernelVirtualPages(int)>
c0023a62:	83 c4 10             	add    esp,0x10
c0023a65:	89 c2                	mov    edx,eax
c0023a67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a6b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023a71:	a1 90 da 02 c0       	mov    eax,ds:0xc002da90
c0023a76:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023a7a:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023a80:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023a84:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023a8a:	83 ec 0c             	sub    esp,0xc
c0023a8d:	6a 03                	push   0x3
c0023a8f:	6a 50                	push   0x50
c0023a91:	51                   	push   ecx
c0023a92:	52                   	push   edx
c0023a93:	50                   	push   eax
c0023a94:	e8 3b e2 fe ff       	call   c0011cd4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023a99:	83 c4 20             	add    esp,0x20
c0023a9c:	90                   	nop
c0023a9d:	83 c4 0c             	add    esp,0xc
c0023aa0:	c3                   	ret    
c0023aa1:	90                   	nop

c0023aa2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023aa2:	83 ec 0c             	sub    esp,0xc
c0023aa5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023aa9:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023aac:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023aaf:	09 c2                	or     edx,eax
c0023ab1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ab5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023abb:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023abd:	31 c0                	xor    eax,eax
c0023abf:	c1 e9 08             	shr    ecx,0x8
c0023ac2:	83 e1 0f             	and    ecx,0xf
c0023ac5:	39 c8                	cmp    eax,ecx
c0023ac7:	74 0a                	je     c0023ad3 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023ac9:	f6 c2 01             	test   dl,0x1
c0023acc:	74 18                	je     c0023ae6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023ace:	d1 ea                	shr    edx,1
c0023ad0:	40                   	inc    eax
c0023ad1:	eb f2                	jmp    c0023ac5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023ad3:	83 ec 0c             	sub    esp,0xc
c0023ad6:	68 40 c1 02 c0       	push   0xc002c140
c0023adb:	e8 59 63 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c0023ae0:	83 c4 10             	add    esp,0x10
c0023ae3:	83 c8 ff             	or     eax,0xffffffff
c0023ae6:	83 c4 0c             	add    esp,0xc
c0023ae9:	c3                   	ret    

c0023aea <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023aea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023aee:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023af1:	89 c2                	mov    edx,eax
c0023af3:	c1 ea 08             	shr    edx,0x8
c0023af6:	83 e2 0f             	and    edx,0xf
c0023af9:	fe ca                	dec    dl
c0023afb:	75 31                	jne    c0023b2e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023afd:	83 e0 0f             	and    eax,0xf
c0023b00:	3c 03                	cmp    al,0x3
c0023b02:	75 2a                	jne    c0023b2e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023b04:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023b07:	b8 02 00 00 00       	mov    eax,0x2
c0023b0c:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023b12:	74 1c                	je     c0023b30 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023b14:	b8 04 00 00 00       	mov    eax,0x4
c0023b19:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023b1f:	74 0f                	je     c0023b30 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023b21:	31 c0                	xor    eax,eax
c0023b23:	83 fa 03             	cmp    edx,0x3
c0023b26:	0f 94 c0             	sete   al
c0023b29:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023b2d:	c3                   	ret    
c0023b2e:	31 c0                	xor    eax,eax
c0023b30:	c3                   	ret    
c0023b31:	90                   	nop

c0023b32 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023b32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023b36:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b39:	0f ba e2 0f          	bt     edx,0xf
c0023b3d:	72 f7                	jb     c0023b36 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023b3f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b42:	83 ca 10             	or     edx,0x10
c0023b45:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b48:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b4b:	83 ca 01             	or     edx,0x1
c0023b4e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b51:	c3                   	ret    

c0023b52 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023b52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023b56:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b59:	83 e2 fe             	and    edx,0xfffffffe
c0023b5c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b5f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b62:	83 e2 ef             	and    edx,0xffffffef
c0023b65:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b6b:	0f ba e2 0e          	bt     edx,0xe
c0023b6f:	72 f7                	jb     c0023b68 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023b71:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b74:	0f ba e2 0f          	bt     edx,0xf
c0023b78:	72 ee                	jb     c0023b68 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023b7a:	c3                   	ret    
c0023b7b:	90                   	nop

c0023b7c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023b7c:	55                   	push   ebp
c0023b7d:	57                   	push   edi
c0023b7e:	56                   	push   esi
c0023b7f:	53                   	push   ebx
c0023b80:	83 ec 1c             	sub    esp,0x1c
c0023b83:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023b87:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023b8b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023b8f:	53                   	push   ebx
c0023b90:	89 fd                	mov    ebp,edi
c0023b92:	56                   	push   esi
c0023b93:	c1 e5 0a             	shl    ebp,0xa
c0023b96:	e8 b7 ff ff ff       	call   c0023b52 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023b9b:	83 ec 0c             	sub    esp,0xc
c0023b9e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023ba4:	01 e8                	add    eax,ebp
c0023ba6:	89 03                	mov    DWORD PTR [ebx],eax
c0023ba8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023baa:	68 00 04 00 00       	push   0x400
c0023baf:	6a 00                	push   0x0
c0023bb1:	50                   	push   eax
c0023bb2:	e8 99 cb fd ff       	call   c0000750 <memset>
c0023bb7:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023bbd:	89 fa                	mov    edx,edi
c0023bbf:	01 e8                	add    eax,ebp
c0023bc1:	c1 e7 0d             	shl    edi,0xd
c0023bc4:	89 03                	mov    DWORD PTR [ebx],eax
c0023bc6:	c1 e2 08             	shl    edx,0x8
c0023bc9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023bd0:	81 c2 00 80 00 00    	add    edx,0x8000
c0023bd6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023bda:	89 d0                	mov    eax,edx
c0023bdc:	83 c4 1c             	add    esp,0x1c
c0023bdf:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023be5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023be8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023beb:	68 00 01 00 00       	push   0x100
c0023bf0:	6a 00                	push   0x0
c0023bf2:	50                   	push   eax
c0023bf3:	e8 58 cb fd ff       	call   c0000750 <memset>
c0023bf8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023bfc:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023c02:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023c08:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023c0c:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023c0f:	83 c4 10             	add    esp,0x10
c0023c12:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023c19:	31 ff                	xor    edi,edi
c0023c1b:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023c21:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023c27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023c2b:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023c31:	83 c5 20             	add    ebp,0x20
c0023c34:	01 f8                	add    eax,edi
c0023c36:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023c39:	52                   	push   edx
c0023c3a:	68 00 01 00 00       	push   0x100
c0023c3f:	6a 00                	push   0x0
c0023c41:	50                   	push   eax
c0023c42:	e8 09 cb fd ff       	call   c0000750 <memset>
c0023c47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023c4b:	83 c4 10             	add    esp,0x10
c0023c4e:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023c54:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023c5b:	01 f8                	add    eax,edi
c0023c5d:	81 c7 00 01 00 00    	add    edi,0x100
c0023c63:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023c66:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023c6c:	75 b3                	jne    c0023c21 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023c6e:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023c72:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023c76:	83 c4 1c             	add    esp,0x1c
c0023c79:	5b                   	pop    ebx
c0023c7a:	5e                   	pop    esi
c0023c7b:	5f                   	pop    edi
c0023c7c:	5d                   	pop    ebp
c0023c7d:	e9 b0 fe ff ff       	jmp    c0023b32 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023c82 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023c82:	55                   	push   ebp
c0023c83:	57                   	push   edi
c0023c84:	56                   	push   esi
c0023c85:	53                   	push   ebx
c0023c86:	31 db                	xor    ebx,ebx
c0023c88:	83 ec 0c             	sub    esp,0xc
c0023c8b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023c8f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023c93:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023c96:	f7 c7 01 00 00 00    	test   edi,0x1
c0023c9c:	74 7a                	je     c0023d18 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023c9e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0023ca2:	89 d8                	mov    eax,ebx
c0023ca4:	c1 e0 07             	shl    eax,0x7
c0023ca7:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0023cae:	55                   	push   ebp
c0023caf:	56                   	push   esi
c0023cb0:	e8 35 fe ff ff       	call   c0023aea <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023cb5:	5a                   	pop    edx
c0023cb6:	83 f8 01             	cmp    eax,0x1
c0023cb9:	59                   	pop    ecx
c0023cba:	75 21                	jne    c0023cdd <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0023cbc:	50                   	push   eax
c0023cbd:	53                   	push   ebx
c0023cbe:	55                   	push   ebp
c0023cbf:	56                   	push   esi
c0023cc0:	e8 b7 fe ff ff       	call   c0023b7c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023cc5:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023ccc:	e8 c8 b8 fe ff       	call   c000f599 <malloc>
c0023cd1:	89 c5                	mov    ebp,eax
c0023cd3:	89 04 24             	mov    DWORD PTR [esp],eax
c0023cd6:	e8 03 0d 00 00       	call   c00249de <SATA::SATA()>
c0023cdb:	eb 24                	jmp    c0023d01 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0023cdd:	83 f8 04             	cmp    eax,0x4
c0023ce0:	75 36                	jne    c0023d18 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023ce2:	51                   	push   ecx
c0023ce3:	53                   	push   ebx
c0023ce4:	55                   	push   ebp
c0023ce5:	56                   	push   esi
c0023ce6:	e8 91 fe ff ff       	call   c0023b7c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023ceb:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023cf2:	e8 a2 b8 fe ff       	call   c000f599 <malloc>
c0023cf7:	89 c5                	mov    ebp,eax
c0023cf9:	89 04 24             	mov    DWORD PTR [esp],eax
c0023cfc:	e8 53 10 00 00       	call   c0024d54 <SATAPI::SATAPI()>
c0023d01:	58                   	pop    eax
c0023d02:	5a                   	pop    edx
c0023d03:	55                   	push   ebp
c0023d04:	56                   	push   esi
c0023d05:	e8 fc fd fe ff       	call   c0013b06 <Device::addChild(Device*)>
c0023d0a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0023d0d:	56                   	push   esi
c0023d0e:	6a 00                	push   0x0
c0023d10:	53                   	push   ebx
c0023d11:	55                   	push   ebp
c0023d12:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0023d15:	83 c4 20             	add    esp,0x20
c0023d18:	d1 ef                	shr    edi,1
c0023d1a:	43                   	inc    ebx
c0023d1b:	83 fb 20             	cmp    ebx,0x20
c0023d1e:	0f 85 72 ff ff ff    	jne    c0023c96 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023d24:	83 c4 0c             	add    esp,0xc
c0023d27:	5b                   	pop    ebx
c0023d28:	5e                   	pop    esi
c0023d29:	5f                   	pop    edi
c0023d2a:	5d                   	pop    ebp
c0023d2b:	c3                   	ret    

c0023d2c <SATABus::open(int, int, void*)>:
c0023d2c:	83 ec 14             	sub    esp,0x14
c0023d2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023d33:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023d39:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023d3f:	52                   	push   edx
c0023d40:	50                   	push   eax
c0023d41:	e8 3c ff ff ff       	call   c0023c82 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023d46:	31 c0                	xor    eax,eax
c0023d48:	83 c4 1c             	add    esp,0x1c
c0023d4b:	c3                   	ret    

c0023d4c <ATA::close(int, int, void*)>:
c0023d4c:	83 ec 0c             	sub    esp,0xc
c0023d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d53:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023d59:	85 c0                	test   eax,eax
c0023d5b:	74 0c                	je     c0023d69 <ATA::close(int, int, void*)+0x1d>
c0023d5d:	83 ec 0c             	sub    esp,0xc
c0023d60:	8b 10                	mov    edx,DWORD PTR [eax]
c0023d62:	50                   	push   eax
c0023d63:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023d66:	83 c4 10             	add    esp,0x10
c0023d69:	31 c0                	xor    eax,eax
c0023d6b:	83 c4 0c             	add    esp,0xc
c0023d6e:	c3                   	ret    
c0023d6f:	90                   	nop

c0023d70 <ATA::powerSaving(PowerSavingLevel)>:
c0023d70:	c3                   	ret    
c0023d71:	90                   	nop

c0023d72 <ATA::ATA()>:
c0023d72:	83 ec 0c             	sub    esp,0xc
c0023d75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d79:	83 ec 04             	sub    esp,0x4
c0023d7c:	68 00 02 00 00       	push   0x200
c0023d81:	68 39 c2 02 c0       	push   0xc002c239
c0023d86:	50                   	push   eax
c0023d87:	e8 b0 01 ff ff       	call   c0013f3c <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023d8c:	83 c4 10             	add    esp,0x10
c0023d8f:	ba bc c1 02 c0       	mov    edx,0xc002c1bc
c0023d94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d98:	89 10                	mov    DWORD PTR [eax],edx
c0023d9a:	90                   	nop
c0023d9b:	83 c4 0c             	add    esp,0xc
c0023d9e:	c3                   	ret    
c0023d9f:	90                   	nop

c0023da0 <ATA::flush(bool)>:
c0023da0:	53                   	push   ebx
c0023da1:	83 ec 08             	sub    esp,0x8
c0023da4:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023da9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023dad:	19 c0                	sbb    eax,eax
c0023daf:	83 e0 fd             	and    eax,0xfffffffd
c0023db2:	05 ea 00 00 00       	add    eax,0xea
c0023db7:	50                   	push   eax
c0023db8:	6a 07                	push   0x7
c0023dba:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023dc1:	50                   	push   eax
c0023dc2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023dc8:	e8 53 f1 ff ff       	call   c0022f20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023dcd:	83 c4 0c             	add    esp,0xc
c0023dd0:	6a 00                	push   0x0
c0023dd2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023dd9:	50                   	push   eax
c0023dda:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023de0:	e8 dd fb ff ff       	call   c00239c2 <IDE::polling(unsigned char, unsigned int)>
c0023de5:	83 c4 18             	add    esp,0x18
c0023de8:	5b                   	pop    ebx
c0023de9:	c3                   	ret    

c0023dea <ATA::readyForCommand()>:
c0023dea:	56                   	push   esi
c0023deb:	53                   	push   ebx
c0023dec:	31 db                	xor    ebx,ebx
c0023dee:	50                   	push   eax
c0023def:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023df3:	50                   	push   eax
c0023df4:	6a 0c                	push   0xc
c0023df6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023dfd:	50                   	push   eax
c0023dfe:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023e04:	e8 d7 f1 ff ff       	call   c0022fe0 <IDE::read(unsigned char, unsigned char)>
c0023e09:	83 c4 10             	add    esp,0x10
c0023e0c:	a8 88                	test   al,0x88
c0023e0e:	74 23                	je     c0023e33 <ATA::readyForCommand()+0x49>
c0023e10:	43                   	inc    ebx
c0023e11:	83 fb 63             	cmp    ebx,0x63
c0023e14:	7e dd                	jle    c0023df3 <ATA::readyForCommand()+0x9>
c0023e16:	51                   	push   ecx
c0023e17:	51                   	push   ecx
c0023e18:	6a 00                	push   0x0
c0023e1a:	68 40 42 0f 00       	push   0xf4240
c0023e1f:	e8 79 9e ff ff       	call   c001dc9d <nanoSleep(unsigned long long)>
c0023e24:	83 c4 10             	add    esp,0x10
c0023e27:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023e2d:	75 c4                	jne    c0023df3 <ATA::readyForCommand()+0x9>
c0023e2f:	31 c0                	xor    eax,eax
c0023e31:	eb 02                	jmp    c0023e35 <ATA::readyForCommand()+0x4b>
c0023e33:	b0 01                	mov    al,0x1
c0023e35:	5a                   	pop    edx
c0023e36:	5b                   	pop    ebx
c0023e37:	5e                   	pop    esi
c0023e38:	c3                   	ret    
c0023e39:	90                   	nop

c0023e3a <ATA::access(unsigned long long, int, void*, bool)>:
c0023e3a:	55                   	push   ebp
c0023e3b:	57                   	push   edi
c0023e3c:	56                   	push   esi
c0023e3d:	53                   	push   ebx
c0023e3e:	83 ec 2c             	sub    esp,0x2c
c0023e41:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023e45:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023e49:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023e4d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023e51:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023e55:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023e59:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023e5d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023e63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023e67:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023e6d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023e71:	c1 e0 06             	shl    eax,0x6
c0023e74:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023e7c:	74 5d                	je     c0023edb <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023e7e:	89 fa                	mov    edx,edi
c0023e80:	89 f0                	mov    eax,esi
c0023e82:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023e86:	c1 ea 1c             	shr    edx,0x1c
c0023e89:	89 d1                	mov    ecx,edx
c0023e8b:	09 c1                	or     ecx,eax
c0023e8d:	74 25                	je     c0023eb4 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023e8f:	31 ed                	xor    ebp,ebp
c0023e91:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023e98:	89 fa                	mov    edx,edi
c0023e9a:	89 f0                	mov    eax,esi
c0023e9c:	0f ad d0             	shrd   eax,edx,cl
c0023e9f:	d3 ea                	shr    edx,cl
c0023ea1:	f6 c1 20             	test   cl,0x20
c0023ea4:	74 02                	je     c0023ea8 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023ea6:	89 d0                	mov    eax,edx
c0023ea8:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023eac:	45                   	inc    ebp
c0023ead:	83 fd 06             	cmp    ebp,0x6
c0023eb0:	75 df                	jne    c0023e91 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023eb2:	eb 76                	jmp    c0023f2a <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023eb4:	89 f0                	mov    eax,esi
c0023eb6:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023ebb:	89 fa                	mov    edx,edi
c0023ebd:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023ec4:	0f ac d0 10          	shrd   eax,edx,0x10
c0023ec8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023ecd:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023ed1:	c1 ee 18             	shr    esi,0x18
c0023ed4:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023ed9:	eb 56                	jmp    c0023f31 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023edb:	6a 00                	push   0x0
c0023edd:	6a 3f                	push   0x3f
c0023edf:	57                   	push   edi
c0023ee0:	56                   	push   esi
c0023ee1:	e8 2e 29 00 00       	call   c0026814 <__umoddi3>
c0023ee6:	83 c4 10             	add    esp,0x10
c0023ee9:	40                   	inc    eax
c0023eea:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023eee:	6a 00                	push   0x0
c0023ef0:	68 f0 03 00 00       	push   0x3f0
c0023ef5:	57                   	push   edi
c0023ef6:	56                   	push   esi
c0023ef7:	e8 18 28 00 00       	call   c0026714 <__udivdi3>
c0023efc:	83 c4 10             	add    esp,0x10
c0023eff:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023f04:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023f0b:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023f10:	6a 00                	push   0x0
c0023f12:	6a 3f                	push   0x3f
c0023f14:	57                   	push   edi
c0023f15:	56                   	push   esi
c0023f16:	e8 f9 27 00 00       	call   c0026714 <__udivdi3>
c0023f1b:	83 c4 10             	add    esp,0x10
c0023f1e:	89 c6                	mov    esi,eax
c0023f20:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023f25:	83 e6 0f             	and    esi,0xf
c0023f28:	eb 07                	jmp    c0023f31 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023f2a:	31 f6                	xor    esi,esi
c0023f2c:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023f31:	bf 01 00 00 00       	mov    edi,0x1
c0023f36:	50                   	push   eax
c0023f37:	6a 00                	push   0x0
c0023f39:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f40:	50                   	push   eax
c0023f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023f45:	e8 e2 f1 ff ff       	call   c002312c <IDE::enableIRQs(unsigned char, bool)>
c0023f4a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023f4d:	e8 98 fe ff ff       	call   c0023dea <ATA::readyForCommand()>
c0023f52:	83 c4 10             	add    esp,0x10
c0023f55:	84 c0                	test   al,al
c0023f57:	0f 84 5a 02 00 00    	je     c00241b7 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023f5d:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023f63:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023f69:	c1 e0 04             	shl    eax,0x4
c0023f6c:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0023f73:	09 c6                	or     esi,eax
c0023f75:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023f7a:	75 05                	jne    c0023f81 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023f7c:	83 ce a0             	or     esi,0xffffffa0
c0023f7f:	eb 03                	jmp    c0023f84 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023f81:	83 ce e0             	or     esi,0xffffffe0
c0023f84:	89 f0                	mov    eax,esi
c0023f86:	0f b6 f0             	movzx  esi,al
c0023f89:	56                   	push   esi
c0023f8a:	6a 06                	push   0x6
c0023f8c:	51                   	push   ecx
c0023f8d:	52                   	push   edx
c0023f8e:	e8 8d ef ff ff       	call   c0022f20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f93:	83 c4 10             	add    esp,0x10
c0023f96:	6a 00                	push   0x0
c0023f98:	6a 01                	push   0x1
c0023f9a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fa1:	50                   	push   eax
c0023fa2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fa8:	e8 73 ef ff ff       	call   c0022f20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fad:	83 c4 10             	add    esp,0x10
c0023fb0:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023fb5:	75 6e                	jne    c0024025 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023fb7:	6a 00                	push   0x0
c0023fb9:	6a 08                	push   0x8
c0023fbb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fc2:	50                   	push   eax
c0023fc3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fc9:	e8 52 ef ff ff       	call   c0022f20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fce:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0023fd3:	50                   	push   eax
c0023fd4:	6a 09                	push   0x9
c0023fd6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fdd:	50                   	push   eax
c0023fde:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fe4:	e8 37 ef ff ff       	call   c0022f20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fe9:	83 c4 20             	add    esp,0x20
c0023fec:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0023ff1:	50                   	push   eax
c0023ff2:	6a 0a                	push   0xa
c0023ff4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ffb:	50                   	push   eax
c0023ffc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024002:	e8 19 ef ff ff       	call   c0022f20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024007:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002400c:	50                   	push   eax
c002400d:	6a 0b                	push   0xb
c002400f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024016:	50                   	push   eax
c0024017:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002401d:	e8 fe ee ff ff       	call   c0022f20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024022:	83 c4 20             	add    esp,0x20
c0024025:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002402a:	50                   	push   eax
c002402b:	6a 02                	push   0x2
c002402d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024034:	50                   	push   eax
c0024035:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002403b:	e8 e0 ee ff ff       	call   c0022f20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024040:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024045:	50                   	push   eax
c0024046:	6a 03                	push   0x3
c0024048:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002404f:	50                   	push   eax
c0024050:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024056:	e8 c5 ee ff ff       	call   c0022f20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002405b:	83 c4 20             	add    esp,0x20
c002405e:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024063:	50                   	push   eax
c0024064:	6a 04                	push   0x4
c0024066:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002406d:	50                   	push   eax
c002406e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024074:	e8 a7 ee ff ff       	call   c0022f20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024079:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002407e:	50                   	push   eax
c002407f:	6a 05                	push   0x5
c0024081:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024088:	50                   	push   eax
c0024089:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002408f:	e8 8c ee ff ff       	call   c0022f20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024094:	83 c4 20             	add    esp,0x20
c0024097:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002409c:	0f 94 c0             	sete   al
c002409f:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00240a4:	74 09                	je     c00240af <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00240a6:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00240ad:	eb 07                	jmp    c00240b6 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00240af:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00240b6:	0f b6 c0             	movzx  eax,al
c00240b9:	50                   	push   eax
c00240ba:	6a 07                	push   0x7
c00240bc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240c3:	50                   	push   eax
c00240c4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240ca:	e8 51 ee ff ff       	call   c0022f20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240cf:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00240d3:	83 c4 10             	add    esp,0x10
c00240d6:	85 f6                	test   esi,esi
c00240d8:	0f 84 ba 00 00 00    	je     c0024198 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c00240de:	50                   	push   eax
c00240df:	6a 01                	push   0x1
c00240e1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240e8:	50                   	push   eax
c00240e9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240ef:	e8 ce f8 ff ff       	call   c00239c2 <IDE::polling(unsigned char, unsigned int)>
c00240f4:	83 c4 10             	add    esp,0x10
c00240f7:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00240fd:	84 c0                	test   al,al
c00240ff:	74 2c                	je     c002412d <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024101:	0f b6 f8             	movzx  edi,al
c0024104:	0f b6 d2             	movzx  edx,dl
c0024107:	57                   	push   edi
c0024108:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002410f:	50                   	push   eax
c0024110:	52                   	push   edx
c0024111:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024117:	e8 f6 f7 ff ff       	call   c0023912 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002411c:	c7 04 24 94 c1 02 c0 	mov    DWORD PTR [esp],0xc002c194
c0024123:	e8 a5 e5 fe ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0024128:	e9 87 00 00 00       	jmp    c00241b4 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c002412d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024132:	74 33                	je     c0024167 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024134:	31 ed                	xor    ebp,ebp
c0024136:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002413a:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c002413e:	50                   	push   eax
c002413f:	50                   	push   eax
c0024140:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024147:	50                   	push   eax
c0024148:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002414e:	e8 bb ed ff ff       	call   c0022f0e <IDE::getBase(unsigned char)>
c0024153:	89 c2                	mov    edx,eax
c0024155:	89 f8                	mov    eax,edi
c0024157:	66 ef                	out    dx,ax
c0024159:	45                   	inc    ebp
c002415a:	83 c4 10             	add    esp,0x10
c002415d:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024163:	75 d1                	jne    c0024136 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024165:	eb 23                	jmp    c002418a <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024167:	0f b6 d2             	movzx  edx,dl
c002416a:	51                   	push   ecx
c002416b:	51                   	push   ecx
c002416c:	52                   	push   edx
c002416d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024173:	e8 96 ed ff ff       	call   c0022f0e <IDE::getBase(unsigned char)>
c0024178:	b9 00 01 00 00       	mov    ecx,0x100
c002417d:	89 c2                	mov    edx,eax
c002417f:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024183:	fc                   	cld    
c0024184:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024187:	83 c4 10             	add    esp,0x10
c002418a:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024192:	4e                   	dec    esi
c0024193:	e9 3e ff ff ff       	jmp    c00240d6 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024198:	31 ff                	xor    edi,edi
c002419a:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002419f:	74 16                	je     c00241b7 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00241a1:	50                   	push   eax
c00241a2:	50                   	push   eax
c00241a3:	31 c0                	xor    eax,eax
c00241a5:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00241aa:	0f 94 c0             	sete   al
c00241ad:	50                   	push   eax
c00241ae:	53                   	push   ebx
c00241af:	e8 ec fb ff ff       	call   c0023da0 <ATA::flush(bool)>
c00241b4:	83 c4 10             	add    esp,0x10
c00241b7:	83 c4 2c             	add    esp,0x2c
c00241ba:	89 f8                	mov    eax,edi
c00241bc:	5b                   	pop    ebx
c00241bd:	5e                   	pop    esi
c00241be:	5f                   	pop    edi
c00241bf:	5d                   	pop    ebp
c00241c0:	c3                   	ret    
c00241c1:	90                   	nop

c00241c2 <ATA::read(unsigned long long, int, void*)>:
c00241c2:	57                   	push   edi
c00241c3:	b8 04 00 00 00       	mov    eax,0x4
c00241c8:	56                   	push   esi
c00241c9:	53                   	push   ebx
c00241ca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00241ce:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00241d2:	8d 7a ff             	lea    edi,[edx-0x1]
c00241d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00241d9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00241dd:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00241e3:	77 25                	ja     c002420a <ATA::read(unsigned long long, int, void*)+0x48>
c00241e5:	b8 06 00 00 00       	mov    eax,0x6
c00241ea:	85 f6                	test   esi,esi
c00241ec:	74 1c                	je     c002420a <ATA::read(unsigned long long, int, void*)+0x48>
c00241ee:	50                   	push   eax
c00241ef:	50                   	push   eax
c00241f0:	6a 00                	push   0x0
c00241f2:	56                   	push   esi
c00241f3:	52                   	push   edx
c00241f4:	53                   	push   ebx
c00241f5:	51                   	push   ecx
c00241f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00241fa:	e8 3b fc ff ff       	call   c0023e3a <ATA::access(unsigned long long, int, void*, bool)>
c00241ff:	83 c4 20             	add    esp,0x20
c0024202:	85 c0                	test   eax,eax
c0024204:	0f 95 c0             	setne  al
c0024207:	0f b6 c0             	movzx  eax,al
c002420a:	5b                   	pop    ebx
c002420b:	5e                   	pop    esi
c002420c:	5f                   	pop    edi
c002420d:	c3                   	ret    

c002420e <ATA::write(unsigned long long, int, void*)>:
c002420e:	57                   	push   edi
c002420f:	b8 04 00 00 00       	mov    eax,0x4
c0024214:	56                   	push   esi
c0024215:	53                   	push   ebx
c0024216:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002421a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002421e:	8d 7a ff             	lea    edi,[edx-0x1]
c0024221:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024225:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024229:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002422f:	77 25                	ja     c0024256 <ATA::write(unsigned long long, int, void*)+0x48>
c0024231:	b8 06 00 00 00       	mov    eax,0x6
c0024236:	85 f6                	test   esi,esi
c0024238:	74 1c                	je     c0024256 <ATA::write(unsigned long long, int, void*)+0x48>
c002423a:	50                   	push   eax
c002423b:	50                   	push   eax
c002423c:	6a 01                	push   0x1
c002423e:	56                   	push   esi
c002423f:	52                   	push   edx
c0024240:	53                   	push   ebx
c0024241:	51                   	push   ecx
c0024242:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024246:	e8 ef fb ff ff       	call   c0023e3a <ATA::access(unsigned long long, int, void*, bool)>
c002424b:	83 c4 20             	add    esp,0x20
c002424e:	85 c0                	test   eax,eax
c0024250:	0f 95 c0             	setne  al
c0024253:	0f b6 c0             	movzx  eax,al
c0024256:	5b                   	pop    ebx
c0024257:	5e                   	pop    esi
c0024258:	5f                   	pop    edi
c0024259:	c3                   	ret    

c002425a <ATA::detectCHS()>:
c002425a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002425e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024264:	c1 e0 06             	shl    eax,0x6
c0024267:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002426d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024277:	c7 44 24 04 9f c1 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c19f
c002427f:	e9 b5 5b ff ff       	jmp    c0019e39 <Krnl::panic(char const*)>

c0024284 <ATA::open(int, int, void*)>:
c0024284:	53                   	push   ebx
c0024285:	83 ec 08             	sub    esp,0x8
c0024288:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002428c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024290:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024294:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002429a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00242a0:	c1 e0 06             	shl    eax,0x6
c00242a3:	01 d0                	add    eax,edx
c00242a5:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00242ac:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00242b2:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00242b9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00242c3:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00242c9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00242d0:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00242d7:	75 0c                	jne    c00242e5 <ATA::open(int, int, void*)+0x61>
c00242d9:	83 ec 0c             	sub    esp,0xc
c00242dc:	53                   	push   ebx
c00242dd:	e8 78 ff ff ff       	call   c002425a <ATA::detectCHS()>
c00242e2:	83 c4 10             	add    esp,0x10
c00242e5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00242eb:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00242f1:	c1 e0 06             	shl    eax,0x6
c00242f4:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00242fb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024305:	d1 e8                	shr    eax,1
c0024307:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002430d:	6a 04                	push   0x4
c002430f:	6a 0c                	push   0xc
c0024311:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024318:	50                   	push   eax
c0024319:	52                   	push   edx
c002431a:	e8 01 ec ff ff       	call   c0022f20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002431f:	90                   	nop
c0024320:	90                   	nop
c0024321:	6a 00                	push   0x0
c0024323:	6a 0c                	push   0xc
c0024325:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002432c:	50                   	push   eax
c002432d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024333:	e8 e8 eb ff ff       	call   c0022f20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024338:	83 c4 14             	add    esp,0x14
c002433b:	53                   	push   ebx
c002433c:	e8 63 fc fe ff       	call   c0013fa4 <PhysicalDisk::startCache()>
c0024341:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024344:	e8 dd 1e ff ff       	call   c0016226 <createPartitionsForDisk(PhysicalDisk*)>
c0024349:	31 c0                	xor    eax,eax
c002434b:	83 c4 18             	add    esp,0x18
c002434e:	5b                   	pop    ebx
c002434f:	c3                   	ret    

c0024350 <ATAPI::write(unsigned long long, int, void*)>:
c0024350:	b8 03 00 00 00       	mov    eax,0x3
c0024355:	c3                   	ret    

c0024356 <ATAPI::close(int, int, void*)>:
c0024356:	83 ec 0c             	sub    esp,0xc
c0024359:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002435d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024363:	85 c0                	test   eax,eax
c0024365:	74 0c                	je     c0024373 <ATAPI::close(int, int, void*)+0x1d>
c0024367:	83 ec 0c             	sub    esp,0xc
c002436a:	8b 10                	mov    edx,DWORD PTR [eax]
c002436c:	50                   	push   eax
c002436d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024370:	83 c4 10             	add    esp,0x10
c0024373:	31 c0                	xor    eax,eax
c0024375:	83 c4 0c             	add    esp,0xc
c0024378:	c3                   	ret    
c0024379:	90                   	nop

c002437a <ATAPI::ATAPI()>:
c002437a:	83 ec 0c             	sub    esp,0xc
c002437d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024381:	83 ec 04             	sub    esp,0x4
c0024384:	68 00 08 00 00       	push   0x800
c0024389:	68 d9 c2 02 c0       	push   0xc002c2d9
c002438e:	50                   	push   eax
c002438f:	e8 a8 fb fe ff       	call   c0013f3c <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024394:	83 c4 10             	add    esp,0x10
c0024397:	ba f4 c1 02 c0       	mov    edx,0xc002c1f4
c002439c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243a0:	89 10                	mov    DWORD PTR [eax],edx
c00243a2:	90                   	nop
c00243a3:	83 c4 0c             	add    esp,0xc
c00243a6:	c3                   	ret    
c00243a7:	90                   	nop

c00243a8 <ATAPI::readyForCommand()>:
c00243a8:	56                   	push   esi
c00243a9:	53                   	push   ebx
c00243aa:	31 db                	xor    ebx,ebx
c00243ac:	50                   	push   eax
c00243ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00243b1:	50                   	push   eax
c00243b2:	6a 0c                	push   0xc
c00243b4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00243bb:	50                   	push   eax
c00243bc:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00243c2:	e8 19 ec ff ff       	call   c0022fe0 <IDE::read(unsigned char, unsigned char)>
c00243c7:	83 c4 10             	add    esp,0x10
c00243ca:	a8 88                	test   al,0x88
c00243cc:	74 23                	je     c00243f1 <ATAPI::readyForCommand()+0x49>
c00243ce:	43                   	inc    ebx
c00243cf:	83 fb 63             	cmp    ebx,0x63
c00243d2:	7e dd                	jle    c00243b1 <ATAPI::readyForCommand()+0x9>
c00243d4:	51                   	push   ecx
c00243d5:	51                   	push   ecx
c00243d6:	6a 00                	push   0x0
c00243d8:	68 40 42 0f 00       	push   0xf4240
c00243dd:	e8 bb 98 ff ff       	call   c001dc9d <nanoSleep(unsigned long long)>
c00243e2:	83 c4 10             	add    esp,0x10
c00243e5:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00243eb:	75 c4                	jne    c00243b1 <ATAPI::readyForCommand()+0x9>
c00243ed:	31 c0                	xor    eax,eax
c00243ef:	eb 02                	jmp    c00243f3 <ATAPI::readyForCommand()+0x4b>
c00243f1:	b0 01                	mov    al,0x1
c00243f3:	5a                   	pop    edx
c00243f4:	5b                   	pop    ebx
c00243f5:	5e                   	pop    esi
c00243f6:	c3                   	ret    
c00243f7:	90                   	nop

c00243f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00243f8:	55                   	push   ebp
c00243f9:	57                   	push   edi
c00243fa:	56                   	push   esi
c00243fb:	53                   	push   ebx
c00243fc:	83 ec 20             	sub    esp,0x20
c00243ff:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024403:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024407:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002440b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002440f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024413:	6a 01                	push   0x1
c0024415:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002441c:	50                   	push   eax
c002441d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024423:	e8 04 ed ff ff       	call   c002312c <IDE::enableIRQs(unsigned char, bool)>
c0024428:	5e                   	pop    esi
c0024429:	58                   	pop    eax
c002442a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024431:	50                   	push   eax
c0024432:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024438:	e8 bd ea ff ff       	call   c0022efa <IDE::prepareInterrupt(unsigned char)>
c002443d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024440:	e8 63 ff ff ff       	call   c00243a8 <ATAPI::readyForCommand()>
c0024445:	83 c4 10             	add    esp,0x10
c0024448:	84 c0                	test   al,al
c002444a:	75 0a                	jne    c0024456 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002444c:	bb 01 00 00 00       	mov    ebx,0x1
c0024451:	e9 57 02 00 00       	jmp    c00246ad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024456:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002445c:	c1 e0 04             	shl    eax,0x4
c002445f:	0f b6 c0             	movzx  eax,al
c0024462:	50                   	push   eax
c0024463:	6a 06                	push   0x6
c0024465:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002446c:	50                   	push   eax
c002446d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024473:	e8 a8 ea ff ff       	call   c0022f20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024478:	6a 00                	push   0x0
c002447a:	6a 01                	push   0x1
c002447c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024483:	50                   	push   eax
c0024484:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002448a:	e8 91 ea ff ff       	call   c0022f20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002448f:	83 c4 20             	add    esp,0x20
c0024492:	0f b6 c3             	movzx  eax,bl
c0024495:	0f b6 df             	movzx  ebx,bh
c0024498:	50                   	push   eax
c0024499:	6a 04                	push   0x4
c002449b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244a2:	50                   	push   eax
c00244a3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244a9:	e8 72 ea ff ff       	call   c0022f20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244ae:	53                   	push   ebx
c00244af:	6a 05                	push   0x5
c00244b1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244b8:	50                   	push   eax
c00244b9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244bf:	e8 5c ea ff ff       	call   c0022f20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244c4:	83 c4 20             	add    esp,0x20
c00244c7:	68 a0 00 00 00       	push   0xa0
c00244cc:	6a 07                	push   0x7
c00244ce:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244d5:	50                   	push   eax
c00244d6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244dc:	e8 3f ea ff ff       	call   c0022f20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244e1:	83 c4 0c             	add    esp,0xc
c00244e4:	6a 01                	push   0x1
c00244e6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244ed:	50                   	push   eax
c00244ee:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244f4:	e8 c9 f4 ff ff       	call   c00239c2 <IDE::polling(unsigned char, unsigned int)>
c00244f9:	83 c4 10             	add    esp,0x10
c00244fc:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024502:	84 c0                	test   al,al
c0024504:	74 23                	je     c0024529 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024506:	0f b6 d8             	movzx  ebx,al
c0024509:	0f b6 d2             	movzx  edx,dl
c002450c:	53                   	push   ebx
c002450d:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024514:	50                   	push   eax
c0024515:	52                   	push   edx
c0024516:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002451c:	e8 f1 f3 ff ff       	call   c0023912 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024521:	83 c4 10             	add    esp,0x10
c0024524:	e9 84 01 00 00       	jmp    c00246ad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024529:	0f b6 d2             	movzx  edx,dl
c002452c:	53                   	push   ebx
c002452d:	53                   	push   ebx
c002452e:	52                   	push   edx
c002452f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024535:	e8 d4 e9 ff ff       	call   c0022f0e <IDE::getBase(unsigned char)>
c002453a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002453e:	b9 06 00 00 00       	mov    ecx,0x6
c0024543:	89 c2                	mov    edx,eax
c0024545:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024548:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002454c:	83 c4 10             	add    esp,0x10
c002454f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024555:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002455c:	85 db                	test   ebx,ebx
c002455e:	0f 84 ec 00 00 00    	je     c0024650 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024564:	51                   	push   ecx
c0024565:	51                   	push   ecx
c0024566:	52                   	push   edx
c0024567:	50                   	push   eax
c0024568:	e8 21 eb ff ff       	call   c002308e <IDE::waitInterrupt(unsigned char)>
c002456d:	83 c4 10             	add    esp,0x10
c0024570:	84 c0                	test   al,al
c0024572:	0f 84 d4 fe ff ff    	je     c002444c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024578:	56                   	push   esi
c0024579:	56                   	push   esi
c002457a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024581:	50                   	push   eax
c0024582:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024588:	e8 6d e9 ff ff       	call   c0022efa <IDE::prepareInterrupt(unsigned char)>
c002458d:	83 c4 0c             	add    esp,0xc
c0024590:	6a 04                	push   0x4
c0024592:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024599:	50                   	push   eax
c002459a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245a0:	e8 3b ea ff ff       	call   c0022fe0 <IDE::read(unsigned char, unsigned char)>
c00245a5:	83 c4 0c             	add    esp,0xc
c00245a8:	89 c6                	mov    esi,eax
c00245aa:	6a 05                	push   0x5
c00245ac:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245b3:	50                   	push   eax
c00245b4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245ba:	e8 21 ea ff ff       	call   c0022fe0 <IDE::read(unsigned char, unsigned char)>
c00245bf:	89 f1                	mov    ecx,esi
c00245c1:	0f b6 c0             	movzx  eax,al
c00245c4:	0f b6 f1             	movzx  esi,cl
c00245c7:	c1 e0 08             	shl    eax,0x8
c00245ca:	09 c6                	or     esi,eax
c00245cc:	d1 fe                	sar    esi,1
c00245ce:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00245d2:	83 c4 10             	add    esp,0x10
c00245d5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00245da:	74 41                	je     c002461d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00245dc:	31 c9                	xor    ecx,ecx
c00245de:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00245e4:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00245eb:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00245ef:	75 0a                	jne    c00245fb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00245f1:	01 c9                	add    ecx,ecx
c00245f3:	01 cd                	add    ebp,ecx
c00245f5:	4b                   	dec    ebx
c00245f6:	e9 54 ff ff ff       	jmp    c002454f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00245fb:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024600:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024604:	51                   	push   ecx
c0024605:	51                   	push   ecx
c0024606:	52                   	push   edx
c0024607:	50                   	push   eax
c0024608:	e8 01 e9 ff ff       	call   c0022f0e <IDE::getBase(unsigned char)>
c002460d:	89 c2                	mov    edx,eax
c002460f:	89 f0                	mov    eax,esi
c0024611:	66 ef                	out    dx,ax
c0024613:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024617:	83 c4 10             	add    esp,0x10
c002461a:	41                   	inc    ecx
c002461b:	eb c1                	jmp    c00245de <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002461d:	31 f6                	xor    esi,esi
c002461f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024625:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002462c:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024630:	75 06                	jne    c0024638 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024632:	01 f6                	add    esi,esi
c0024634:	01 f5                	add    ebp,esi
c0024636:	eb bd                	jmp    c00245f5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024638:	51                   	push   ecx
c0024639:	51                   	push   ecx
c002463a:	52                   	push   edx
c002463b:	50                   	push   eax
c002463c:	e8 cd e8 ff ff       	call   c0022f0e <IDE::getBase(unsigned char)>
c0024641:	89 c2                	mov    edx,eax
c0024643:	66 ed                	in     ax,dx
c0024645:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002464a:	83 c4 10             	add    esp,0x10
c002464d:	46                   	inc    esi
c002464e:	eb cf                	jmp    c002461f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024650:	51                   	push   ecx
c0024651:	51                   	push   ecx
c0024652:	52                   	push   edx
c0024653:	50                   	push   eax
c0024654:	e8 35 ea ff ff       	call   c002308e <IDE::waitInterrupt(unsigned char)>
c0024659:	83 c4 10             	add    esp,0x10
c002465c:	84 c0                	test   al,al
c002465e:	0f 84 e8 fd ff ff    	je     c002444c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024664:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024669:	52                   	push   edx
c002466a:	52                   	push   edx
c002466b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024672:	50                   	push   eax
c0024673:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024679:	e8 7c e8 ff ff       	call   c0022efa <IDE::prepareInterrupt(unsigned char)>
c002467e:	83 c4 10             	add    esp,0x10
c0024681:	50                   	push   eax
c0024682:	50                   	push   eax
c0024683:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002468a:	50                   	push   eax
c002468b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024691:	e8 78 e8 ff ff       	call   c0022f0e <IDE::getBase(unsigned char)>
c0024696:	8d 50 07             	lea    edx,[eax+0x7]
c0024699:	ec                   	in     al,dx
c002469a:	83 c4 10             	add    esp,0x10
c002469d:	a8 88                	test   al,0x88
c002469f:	74 0a                	je     c00246ab <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00246a1:	4b                   	dec    ebx
c00246a2:	75 dd                	jne    c0024681 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00246a4:	bb 02 00 00 00       	mov    ebx,0x2
c00246a9:	eb 02                	jmp    c00246ad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00246ab:	31 db                	xor    ebx,ebx
c00246ad:	83 c4 1c             	add    esp,0x1c
c00246b0:	89 d8                	mov    eax,ebx
c00246b2:	5b                   	pop    ebx
c00246b3:	5e                   	pop    esi
c00246b4:	5f                   	pop    edi
c00246b5:	5d                   	pop    ebp
c00246b6:	c3                   	ret    
c00246b7:	90                   	nop

c00246b8 <ATAPI::diskRemoved()>:
c00246b8:	83 ec 18             	sub    esp,0x18
c00246bb:	68 e5 c2 02 c0       	push   0xc002c2e5
c00246c0:	e8 08 e0 fe ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c00246c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00246c9:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00246d0:	83 c4 1c             	add    esp,0x1c
c00246d3:	c3                   	ret    

c00246d4 <ATAPI::eject()>:
c00246d4:	57                   	push   edi
c00246d5:	b9 03 00 00 00       	mov    ecx,0x3
c00246da:	53                   	push   ebx
c00246db:	83 ec 14             	sub    esp,0x14
c00246de:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00246e2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00246e6:	fc                   	cld    
c00246e7:	31 c0                	xor    eax,eax
c00246e9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00246eb:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00246f0:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00246f5:	50                   	push   eax
c00246f6:	50                   	push   eax
c00246f7:	6a 00                	push   0x0
c00246f9:	6a 00                	push   0x0
c00246fb:	6a 00                	push   0x0
c00246fd:	6a 02                	push   0x2
c00246ff:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024703:	50                   	push   eax
c0024704:	53                   	push   ebx
c0024705:	e8 ee fc ff ff       	call   c00243f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002470a:	83 c4 14             	add    esp,0x14
c002470d:	53                   	push   ebx
c002470e:	e8 a5 ff ff ff       	call   c00246b8 <ATAPI::diskRemoved()>
c0024713:	83 c4 24             	add    esp,0x24
c0024716:	31 c0                	xor    eax,eax
c0024718:	5b                   	pop    ebx
c0024719:	5f                   	pop    edi
c002471a:	c3                   	ret    
c002471b:	90                   	nop

c002471c <ATAPI::diskInserted()>:
c002471c:	53                   	push   ebx
c002471d:	83 ec 14             	sub    esp,0x14
c0024720:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024724:	68 fc c2 02 c0       	push   0xc002c2fc
c0024729:	e8 9f df fe ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c002472e:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024735:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024738:	e8 67 f8 fe ff       	call   c0013fa4 <PhysicalDisk::startCache()>
c002473d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024741:	83 c4 18             	add    esp,0x18
c0024744:	5b                   	pop    ebx
c0024745:	e9 dc 1a ff ff       	jmp    c0016226 <createPartitionsForDisk(PhysicalDisk*)>

c002474a <ATAPI::detectMedia()>:
c002474a:	56                   	push   esi
c002474b:	53                   	push   ebx
c002474c:	83 ec 28             	sub    esp,0x28
c002474f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024753:	6a 0c                	push   0xc
c0024755:	6a 00                	push   0x0
c0024757:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002475b:	56                   	push   esi
c002475c:	e8 ef bf fd ff       	call   c0000750 <memset>
c0024761:	58                   	pop    eax
c0024762:	5a                   	pop    edx
c0024763:	6a 00                	push   0x0
c0024765:	6a 00                	push   0x0
c0024767:	6a 00                	push   0x0
c0024769:	6a 00                	push   0x0
c002476b:	56                   	push   esi
c002476c:	53                   	push   ebx
c002476d:	e8 86 fc ff ff       	call   c00243f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024772:	83 c4 1c             	add    esp,0x1c
c0024775:	6a 0c                	push   0xc
c0024777:	6a 00                	push   0x0
c0024779:	56                   	push   esi
c002477a:	e8 d1 bf fd ff       	call   c0000750 <memset>
c002477f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024784:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024789:	59                   	pop    ecx
c002478a:	58                   	pop    eax
c002478b:	6a 01                	push   0x1
c002478d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024791:	50                   	push   eax
c0024792:	6a 00                	push   0x0
c0024794:	6a 12                	push   0x12
c0024796:	56                   	push   esi
c0024797:	53                   	push   ebx
c0024798:	e8 5b fc ff ff       	call   c00243f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002479d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00247a1:	83 c4 20             	add    esp,0x20
c00247a4:	83 e0 7f             	and    eax,0x7f
c00247a7:	3c 70                	cmp    al,0x70
c00247a9:	74 15                	je     c00247c0 <ATAPI::detectMedia()+0x76>
c00247ab:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00247b2:	75 0c                	jne    c00247c0 <ATAPI::detectMedia()+0x76>
c00247b4:	83 ec 0c             	sub    esp,0xc
c00247b7:	53                   	push   ebx
c00247b8:	e8 5f ff ff ff       	call   c002471c <ATAPI::diskInserted()>
c00247bd:	83 c4 10             	add    esp,0x10
c00247c0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00247c4:	83 e0 0f             	and    eax,0xf
c00247c7:	3c 02                	cmp    al,0x2
c00247c9:	75 1b                	jne    c00247e6 <ATAPI::detectMedia()+0x9c>
c00247cb:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00247d0:	75 2d                	jne    c00247ff <ATAPI::detectMedia()+0xb5>
c00247d2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00247d9:	74 24                	je     c00247ff <ATAPI::detectMedia()+0xb5>
c00247db:	83 ec 0c             	sub    esp,0xc
c00247de:	53                   	push   ebx
c00247df:	e8 d4 fe ff ff       	call   c00246b8 <ATAPI::diskRemoved()>
c00247e4:	eb 16                	jmp    c00247fc <ATAPI::detectMedia()+0xb2>
c00247e6:	84 c0                	test   al,al
c00247e8:	75 15                	jne    c00247ff <ATAPI::detectMedia()+0xb5>
c00247ea:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00247f1:	75 0c                	jne    c00247ff <ATAPI::detectMedia()+0xb5>
c00247f3:	83 ec 0c             	sub    esp,0xc
c00247f6:	53                   	push   ebx
c00247f7:	e8 20 ff ff ff       	call   c002471c <ATAPI::diskInserted()>
c00247fc:	83 c4 10             	add    esp,0x10
c00247ff:	83 c4 24             	add    esp,0x24
c0024802:	5b                   	pop    ebx
c0024803:	5e                   	pop    esi
c0024804:	c3                   	ret    
c0024805:	90                   	nop

c0024806 <ATAPI::open(int, int, void*)>:
c0024806:	53                   	push   ebx
c0024807:	83 ec 08             	sub    esp,0x8
c002480a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002480e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024812:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024816:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002481c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024822:	c1 e0 06             	shl    eax,0x6
c0024825:	01 d0                	add    eax,edx
c0024827:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002482e:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024834:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002483b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024845:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002484b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024852:	6a 04                	push   0x4
c0024854:	6a 0c                	push   0xc
c0024856:	51                   	push   ecx
c0024857:	52                   	push   edx
c0024858:	e8 c3 e6 ff ff       	call   c0022f20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002485d:	90                   	nop
c002485e:	90                   	nop
c002485f:	6a 00                	push   0x0
c0024861:	6a 0c                	push   0xc
c0024863:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002486a:	50                   	push   eax
c002486b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024871:	e8 aa e6 ff ff       	call   c0022f20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024876:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002487d:	83 c4 14             	add    esp,0x14
c0024880:	53                   	push   ebx
c0024881:	e8 c4 fe ff ff       	call   c002474a <ATAPI::detectMedia()>
c0024886:	31 c0                	xor    eax,eax
c0024888:	83 c4 18             	add    esp,0x18
c002488b:	5b                   	pop    ebx
c002488c:	c3                   	ret    
c002488d:	90                   	nop

c002488e <ATAPI::read(unsigned long long, int, void*)>:
c002488e:	55                   	push   ebp
c002488f:	57                   	push   edi
c0024890:	56                   	push   esi
c0024891:	53                   	push   ebx
c0024892:	83 ec 1c             	sub    esp,0x1c
c0024895:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024899:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002489d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00248a1:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00248a8:	74 41                	je     c00248eb <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00248aa:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00248ae:	b9 03 00 00 00       	mov    ecx,0x3
c00248b3:	fc                   	cld    
c00248b4:	31 c0                	xor    eax,eax
c00248b6:	86 fb                	xchg   bl,bh
c00248b8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00248ba:	c1 c3 10             	rol    ebx,0x10
c00248bd:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00248c2:	89 e8                	mov    eax,ebp
c00248c4:	86 fb                	xchg   bl,bh
c00248c6:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00248ca:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00248ce:	50                   	push   eax
c00248cf:	50                   	push   eax
c00248d0:	55                   	push   ebp
c00248d1:	c1 e5 0b             	shl    ebp,0xb
c00248d4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00248d8:	6a 00                	push   0x0
c00248da:	55                   	push   ebp
c00248db:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00248df:	50                   	push   eax
c00248e0:	56                   	push   esi
c00248e1:	e8 12 fb ff ff       	call   c00243f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00248e6:	83 c4 20             	add    esp,0x20
c00248e9:	eb 1a                	jmp    c0024905 <ATAPI::read(unsigned long long, int, void*)+0x77>
c00248eb:	83 ec 0c             	sub    esp,0xc
c00248ee:	56                   	push   esi
c00248ef:	e8 56 fe ff ff       	call   c002474a <ATAPI::detectMedia()>
c00248f4:	83 c4 10             	add    esp,0x10
c00248f7:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00248fe:	75 aa                	jne    c00248aa <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024900:	b8 02 00 00 00       	mov    eax,0x2
c0024905:	83 c4 1c             	add    esp,0x1c
c0024908:	5b                   	pop    ebx
c0024909:	5e                   	pop    esi
c002490a:	5f                   	pop    edi
c002490b:	5d                   	pop    ebp
c002490c:	c3                   	ret    
c002490d:	90                   	nop

c002490e <SATA::close(int, int, void*)>:
c002490e:	83 ec 0c             	sub    esp,0xc
c0024911:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024915:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002491b:	85 c0                	test   eax,eax
c002491d:	74 0c                	je     c002492b <SATA::close(int, int, void*)+0x1d>
c002491f:	83 ec 0c             	sub    esp,0xc
c0024922:	8b 10                	mov    edx,DWORD PTR [eax]
c0024924:	50                   	push   eax
c0024925:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024928:	83 c4 10             	add    esp,0x10
c002492b:	31 c0                	xor    eax,eax
c002492d:	83 c4 0c             	add    esp,0xc
c0024930:	c3                   	ret    
c0024931:	90                   	nop

c0024932 <SATA::powerSaving(PowerSavingLevel)>:
c0024932:	c3                   	ret    
c0024933:	90                   	nop

c0024934 <SATA::open(int, int, void*)>:
c0024934:	56                   	push   esi
c0024935:	53                   	push   ebx
c0024936:	50                   	push   eax
c0024937:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002493b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002493f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024949:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002494f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024959:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002495d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024967:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002496d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024974:	e8 f8 af fe ff       	call   c000f971 <Phys::allocatePage()>
c0024979:	89 c6                	mov    esi,eax
c002497b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024981:	81 c6 00 10 00 00    	add    esi,0x1000
c0024987:	e8 e5 af fe ff       	call   c000f971 <Phys::allocatePage()>
c002498c:	39 c6                	cmp    esi,eax
c002498e:	74 10                	je     c00249a0 <SATA::open(int, int, void*)+0x6c>
c0024990:	83 ec 0c             	sub    esp,0xc
c0024993:	68 24 c2 02 c0       	push   0xc002c224
c0024998:	e8 9c 54 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c002499d:	83 c4 10             	add    esp,0x10
c00249a0:	83 ec 0c             	sub    esp,0xc
c00249a3:	6a 02                	push   0x2
c00249a5:	e8 77 c8 fe ff       	call   c0011221 <Virt::allocateKernelVirtualPages(int)>
c00249aa:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00249b0:	6a 03                	push   0x3
c00249b2:	50                   	push   eax
c00249b3:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00249b9:	ff 35 90 da 02 c0    	push   DWORD PTR ds:0xc002da90
c00249bf:	e8 1a d0 fe ff       	call   c00119de <VAS::mapPage(unsigned long, unsigned long, int)>
c00249c4:	83 c4 14             	add    esp,0x14
c00249c7:	53                   	push   ebx
c00249c8:	e8 d7 f5 fe ff       	call   c0013fa4 <PhysicalDisk::startCache()>
c00249cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00249d0:	e8 51 18 ff ff       	call   c0016226 <createPartitionsForDisk(PhysicalDisk*)>
c00249d5:	83 c4 14             	add    esp,0x14
c00249d8:	31 c0                	xor    eax,eax
c00249da:	5b                   	pop    ebx
c00249db:	5e                   	pop    esi
c00249dc:	c3                   	ret    
c00249dd:	90                   	nop

c00249de <SATA::SATA()>:
c00249de:	83 ec 0c             	sub    esp,0xc
c00249e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249e5:	83 ec 04             	sub    esp,0x4
c00249e8:	68 00 02 00 00       	push   0x200
c00249ed:	68 38 c2 02 c0       	push   0xc002c238
c00249f2:	50                   	push   eax
c00249f3:	e8 44 f5 fe ff       	call   c0013f3c <PhysicalDisk::PhysicalDisk(char const*, int)>
c00249f8:	83 c4 10             	add    esp,0x10
c00249fb:	ba a8 c2 02 c0       	mov    edx,0xc002c2a8
c0024a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a04:	89 10                	mov    DWORD PTR [eax],edx
c0024a06:	90                   	nop
c0024a07:	83 c4 0c             	add    esp,0xc
c0024a0a:	c3                   	ret    
c0024a0b:	90                   	nop

c0024a0c <SATA::access(unsigned long long, int, void*, bool)>:
c0024a0c:	55                   	push   ebp
c0024a0d:	57                   	push   edi
c0024a0e:	56                   	push   esi
c0024a0f:	53                   	push   ebx
c0024a10:	83 ec 2c             	sub    esp,0x2c
c0024a13:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024a17:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024a1b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024a1f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024a23:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024a27:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024a2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024a30:	7e 10                	jle    c0024a42 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024a32:	83 ec 0c             	sub    esp,0xc
c0024a35:	68 48 c2 02 c0       	push   0xc002c248
c0024a3a:	e8 fa 53 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c0024a3f:	83 c4 10             	add    esp,0x10
c0024a42:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024a48:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0024a4e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024a54:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024a58:	89 d0                	mov    eax,edx
c0024a5a:	c1 e0 07             	shl    eax,0x7
c0024a5d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024a61:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024a6b:	51                   	push   ecx
c0024a6c:	8d 42 02             	lea    eax,[edx+0x2]
c0024a6f:	51                   	push   ecx
c0024a70:	c1 e0 07             	shl    eax,0x7
c0024a73:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024a77:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024a7b:	50                   	push   eax
c0024a7c:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0024a82:	e8 1b f0 ff ff       	call   c0023aa2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024a87:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024a8b:	83 c4 10             	add    esp,0x10
c0024a8e:	b8 01 00 00 00       	mov    eax,0x1
c0024a93:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024a98:	0f 84 cb 01 00 00    	je     c0024c69 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024a9e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024aa2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024aa6:	c1 e0 09             	shl    eax,0x9
c0024aa9:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024aae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024ab2:	74 0e                	je     c0024ac2 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c0024ab4:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0024aba:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0024abe:	89 c1                	mov    ecx,eax
c0024ac0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024ac2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0024ac6:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024acc:	8d 42 02             	lea    eax,[edx+0x2]
c0024acf:	c1 e0 07             	shl    eax,0x7
c0024ad2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024ad6:	8b 00                	mov    eax,DWORD PTR [eax]
c0024ad8:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024ade:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024ae4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024ae8:	c1 e1 05             	shl    ecx,0x5
c0024aeb:	01 c8                	add    eax,ecx
c0024aed:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0024af1:	83 e1 01             	and    ecx,0x1
c0024af4:	89 ce                	mov    esi,ecx
c0024af6:	8a 08                	mov    cl,BYTE PTR [eax]
c0024af8:	c1 e6 06             	shl    esi,0x6
c0024afb:	83 e1 bf             	and    ecx,0xffffffbf
c0024afe:	09 f1                	or     ecx,esi
c0024b00:	88 08                	mov    BYTE PTR [eax],cl
c0024b02:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024b04:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024b0a:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024b10:	89 08                	mov    DWORD PTR [eax],ecx
c0024b12:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024b18:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0024b1e:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0024b24:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0024b27:	50                   	push   eax
c0024b28:	68 90 00 00 00       	push   0x90
c0024b2d:	6a 00                	push   0x0
c0024b2f:	56                   	push   esi
c0024b30:	e8 1b bc fd ff       	call   c0000750 <memset>
c0024b35:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024b3b:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0024b3f:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0024b45:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0024b49:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024b4d:	83 c4 10             	add    esp,0x10
c0024b50:	48                   	dec    eax
c0024b51:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024b56:	89 c1                	mov    ecx,eax
c0024b58:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0024b5e:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024b63:	09 c8                	or     eax,ecx
c0024b65:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0024b6b:	66 8b 06             	mov    ax,WORD PTR [esi]
c0024b6e:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0024b75:	66 25 00 7f          	and    ax,0x7f00
c0024b79:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024b7d:	66 0d 27 80          	or     ax,0x8027
c0024b81:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0024b86:	66 89 06             	mov    WORD PTR [esi],ax
c0024b89:	19 c0                	sbb    eax,eax
c0024b8b:	83 e0 f0             	and    eax,0xfffffff0
c0024b8e:	83 c0 35             	add    eax,0x35
c0024b91:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0024b94:	89 e8                	mov    eax,ebp
c0024b96:	c1 e8 10             	shr    eax,0x10
c0024b99:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0024b9c:	89 e8                	mov    eax,ebp
c0024b9e:	c1 e8 18             	shr    eax,0x18
c0024ba1:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0024ba4:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0024ba8:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0024bab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024baf:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0024bb2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024bb6:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0024bba:	89 d6                	mov    esi,edx
c0024bbc:	31 c0                	xor    eax,eax
c0024bbe:	c1 e6 07             	shl    esi,0x7
c0024bc1:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0024bc5:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0024bcb:	80 e1 88             	and    cl,0x88
c0024bce:	74 0a                	je     c0024bda <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0024bd0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024bd5:	74 0a                	je     c0024be1 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0024bd7:	40                   	inc    eax
c0024bd8:	eb eb                	jmp    c0024bc5 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0024bda:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024bdf:	75 0a                	jne    c0024beb <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0024be1:	83 ec 0c             	sub    esp,0xc
c0024be4:	68 81 c2 02 c0       	push   0xc002c281
c0024be9:	eb 56                	jmp    c0024c41 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0024beb:	b8 01 00 00 00       	mov    eax,0x1
c0024bf0:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024bf4:	c1 e2 07             	shl    edx,0x7
c0024bf7:	d3 e0                	shl    eax,cl
c0024bf9:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0024bfd:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0024c03:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0024c09:	85 c8                	test   eax,ecx
c0024c0b:	74 20                	je     c0024c2d <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0024c0d:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0024c13:	0f ba e1 1e          	bt     ecx,0x1e
c0024c17:	73 ea                	jae    c0024c03 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0024c19:	83 ec 0c             	sub    esp,0xc
c0024c1c:	68 8f c2 02 c0       	push   0xc002c28f
c0024c21:	e8 13 52 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c0024c26:	83 c4 10             	add    esp,0x10
c0024c29:	31 c0                	xor    eax,eax
c0024c2b:	eb 3c                	jmp    c0024c69 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024c2d:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0024c33:	0f ba e0 1e          	bt     eax,0x1e
c0024c37:	73 17                	jae    c0024c50 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0024c39:	83 ec 0c             	sub    esp,0xc
c0024c3c:	68 8f c2 02 c0       	push   0xc002c28f
c0024c41:	e8 f3 51 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c0024c46:	83 c4 10             	add    esp,0x10
c0024c49:	b8 01 00 00 00       	mov    eax,0x1
c0024c4e:	eb 19                	jmp    c0024c69 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024c50:	31 c0                	xor    eax,eax
c0024c52:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024c57:	75 10                	jne    c0024c69 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024c59:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0024c5f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0024c63:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024c67:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024c69:	83 c4 2c             	add    esp,0x2c
c0024c6c:	5b                   	pop    ebx
c0024c6d:	5e                   	pop    esi
c0024c6e:	5f                   	pop    edi
c0024c6f:	5d                   	pop    ebp
c0024c70:	c3                   	ret    
c0024c71:	90                   	nop

c0024c72 <SATA::read(unsigned long long, int, void*)>:
c0024c72:	57                   	push   edi
c0024c73:	b8 04 00 00 00       	mov    eax,0x4
c0024c78:	56                   	push   esi
c0024c79:	53                   	push   ebx
c0024c7a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024c7e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024c82:	8d 7a ff             	lea    edi,[edx-0x1]
c0024c85:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024c89:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024c8d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024c93:	77 25                	ja     c0024cba <SATA::read(unsigned long long, int, void*)+0x48>
c0024c95:	b8 06 00 00 00       	mov    eax,0x6
c0024c9a:	85 f6                	test   esi,esi
c0024c9c:	74 1c                	je     c0024cba <SATA::read(unsigned long long, int, void*)+0x48>
c0024c9e:	50                   	push   eax
c0024c9f:	50                   	push   eax
c0024ca0:	6a 00                	push   0x0
c0024ca2:	56                   	push   esi
c0024ca3:	52                   	push   edx
c0024ca4:	53                   	push   ebx
c0024ca5:	51                   	push   ecx
c0024ca6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024caa:	e8 5d fd ff ff       	call   c0024a0c <SATA::access(unsigned long long, int, void*, bool)>
c0024caf:	83 c4 20             	add    esp,0x20
c0024cb2:	85 c0                	test   eax,eax
c0024cb4:	0f 95 c0             	setne  al
c0024cb7:	0f b6 c0             	movzx  eax,al
c0024cba:	5b                   	pop    ebx
c0024cbb:	5e                   	pop    esi
c0024cbc:	5f                   	pop    edi
c0024cbd:	c3                   	ret    

c0024cbe <SATA::write(unsigned long long, int, void*)>:
c0024cbe:	55                   	push   ebp
c0024cbf:	b8 04 00 00 00       	mov    eax,0x4
c0024cc4:	57                   	push   edi
c0024cc5:	56                   	push   esi
c0024cc6:	53                   	push   ebx
c0024cc7:	83 ec 0c             	sub    esp,0xc
c0024cca:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024cce:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024cd2:	8d 73 ff             	lea    esi,[ebx-0x1]
c0024cd5:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024cd9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024cdd:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024ce3:	77 3d                	ja     c0024d22 <SATA::write(unsigned long long, int, void*)+0x64>
c0024ce5:	b8 06 00 00 00       	mov    eax,0x6
c0024cea:	85 ed                	test   ebp,ebp
c0024cec:	74 34                	je     c0024d22 <SATA::write(unsigned long long, int, void*)+0x64>
c0024cee:	c1 e3 09             	shl    ebx,0x9
c0024cf1:	01 eb                	add    ebx,ebp
c0024cf3:	89 d6                	mov    esi,edx
c0024cf5:	89 cf                	mov    edi,ecx
c0024cf7:	83 c6 01             	add    esi,0x1
c0024cfa:	83 d7 00             	adc    edi,0x0
c0024cfd:	50                   	push   eax
c0024cfe:	50                   	push   eax
c0024cff:	6a 01                	push   0x1
c0024d01:	55                   	push   ebp
c0024d02:	81 c5 00 02 00 00    	add    ebp,0x200
c0024d08:	6a 01                	push   0x1
c0024d0a:	51                   	push   ecx
c0024d0b:	52                   	push   edx
c0024d0c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024d10:	e8 f7 fc ff ff       	call   c0024a0c <SATA::access(unsigned long long, int, void*, bool)>
c0024d15:	83 c4 20             	add    esp,0x20
c0024d18:	89 f2                	mov    edx,esi
c0024d1a:	89 f9                	mov    ecx,edi
c0024d1c:	39 dd                	cmp    ebp,ebx
c0024d1e:	75 d3                	jne    c0024cf3 <SATA::write(unsigned long long, int, void*)+0x35>
c0024d20:	31 c0                	xor    eax,eax
c0024d22:	83 c4 0c             	add    esp,0xc
c0024d25:	5b                   	pop    ebx
c0024d26:	5e                   	pop    esi
c0024d27:	5f                   	pop    edi
c0024d28:	5d                   	pop    ebp
c0024d29:	c3                   	ret    

c0024d2a <SATAPI::write(unsigned long long, int, void*)>:
c0024d2a:	b8 03 00 00 00       	mov    eax,0x3
c0024d2f:	c3                   	ret    

c0024d30 <SATAPI::close(int, int, void*)>:
c0024d30:	83 ec 0c             	sub    esp,0xc
c0024d33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d37:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024d3d:	85 c0                	test   eax,eax
c0024d3f:	74 0c                	je     c0024d4d <SATAPI::close(int, int, void*)+0x1d>
c0024d41:	83 ec 0c             	sub    esp,0xc
c0024d44:	8b 10                	mov    edx,DWORD PTR [eax]
c0024d46:	50                   	push   eax
c0024d47:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024d4a:	83 c4 10             	add    esp,0x10
c0024d4d:	31 c0                	xor    eax,eax
c0024d4f:	83 c4 0c             	add    esp,0xc
c0024d52:	c3                   	ret    
c0024d53:	90                   	nop

c0024d54 <SATAPI::SATAPI()>:
c0024d54:	83 ec 0c             	sub    esp,0xc
c0024d57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d5b:	83 ec 04             	sub    esp,0x4
c0024d5e:	68 00 08 00 00       	push   0x800
c0024d63:	68 d8 c2 02 c0       	push   0xc002c2d8
c0024d68:	50                   	push   eax
c0024d69:	e8 ce f1 fe ff       	call   c0013f3c <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024d6e:	83 c4 10             	add    esp,0x10
c0024d71:	ba 84 c3 02 c0       	mov    edx,0xc002c384
c0024d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d7a:	89 10                	mov    DWORD PTR [eax],edx
c0024d7c:	90                   	nop
c0024d7d:	83 c4 0c             	add    esp,0xc
c0024d80:	c3                   	ret    
c0024d81:	90                   	nop

c0024d82 <SATAPI::diskRemoved()>:
c0024d82:	83 ec 18             	sub    esp,0x18
c0024d85:	68 e4 c2 02 c0       	push   0xc002c2e4
c0024d8a:	e8 3e d9 fe ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0024d8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d93:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024d9a:	83 c4 1c             	add    esp,0x1c
c0024d9d:	c3                   	ret    

c0024d9e <SATAPI::diskInserted()>:
c0024d9e:	53                   	push   ebx
c0024d9f:	83 ec 14             	sub    esp,0x14
c0024da2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024da6:	68 fb c2 02 c0       	push   0xc002c2fb
c0024dab:	e8 1d d9 fe ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0024db0:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024db7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024dba:	e8 e5 f1 fe ff       	call   c0013fa4 <PhysicalDisk::startCache()>
c0024dbf:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024dc3:	83 c4 18             	add    esp,0x18
c0024dc6:	5b                   	pop    ebx
c0024dc7:	e9 5a 14 ff ff       	jmp    c0016226 <createPartitionsForDisk(PhysicalDisk*)>

c0024dcc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024dcc:	55                   	push   ebp
c0024dcd:	57                   	push   edi
c0024dce:	56                   	push   esi
c0024dcf:	53                   	push   ebx
c0024dd0:	83 ec 34             	sub    esp,0x34
c0024dd3:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0024dd7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024ddb:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0024ddf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024de3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024de7:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024ded:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024df3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024df7:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0024dfd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024e01:	c1 e0 07             	shl    eax,0x7
c0024e04:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024e08:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024e0c:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024e16:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024e1a:	8d 58 02             	lea    ebx,[eax+0x2]
c0024e1d:	c1 e3 07             	shl    ebx,0x7
c0024e20:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0024e24:	53                   	push   ebx
c0024e25:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024e2b:	e8 72 ec ff ff       	call   c0023aa2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024e30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024e34:	83 c4 10             	add    esp,0x10
c0024e37:	b8 01 00 00 00       	mov    eax,0x1
c0024e3c:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024e41:	0f 84 85 01 00 00    	je     c0024fcc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024e47:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e4d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024e4f:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024e55:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024e5b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024e5f:	c1 e1 05             	shl    ecx,0x5
c0024e62:	01 c8                	add    eax,ecx
c0024e64:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024e66:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024e6c:	81 c9 25 00 01 00    	or     ecx,0x10025
c0024e72:	89 08                	mov    DWORD PTR [eax],ecx
c0024e74:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e7a:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024e80:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024e86:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024e89:	8d 7b 40             	lea    edi,[ebx+0x40]
c0024e8c:	50                   	push   eax
c0024e8d:	68 90 00 00 00       	push   0x90
c0024e92:	6a 00                	push   0x0
c0024e94:	53                   	push   ebx
c0024e95:	e8 b6 b8 fd ff       	call   c0000750 <memset>
c0024e9a:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0024e9e:	b9 0c 00 00 00       	mov    ecx,0xc
c0024ea3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024ea5:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0024eab:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0024eaf:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024eb5:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024eb9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024ebd:	48                   	dec    eax
c0024ebe:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024ec3:	89 c1                	mov    ecx,eax
c0024ec5:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024ecb:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024ed0:	09 c8                	or     eax,ecx
c0024ed2:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024ed8:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024edb:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024ee2:	66 25 00 7f          	and    ax,0x7f00
c0024ee6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0024eea:	66 0d 27 80          	or     ax,0x8027
c0024eee:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0024ef2:	66 89 03             	mov    WORD PTR [ebx],ax
c0024ef5:	89 d0                	mov    eax,edx
c0024ef7:	c1 ea 18             	shr    edx,0x18
c0024efa:	c1 e8 10             	shr    eax,0x10
c0024efd:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0024f00:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024f03:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0024f07:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024f0a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024f0e:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024f11:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0024f15:	83 c4 10             	add    esp,0x10
c0024f18:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024f1c:	31 c0                	xor    eax,eax
c0024f1e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0024f22:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0024f28:	80 e2 88             	and    dl,0x88
c0024f2b:	74 0a                	je     c0024f37 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0024f2d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f32:	74 0a                	je     c0024f3e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0024f34:	40                   	inc    eax
c0024f35:	eb eb                	jmp    c0024f22 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0024f37:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f3c:	75 0f                	jne    c0024f4d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0024f3e:	83 ec 0c             	sub    esp,0xc
c0024f41:	68 81 c2 02 c0       	push   0xc002c281
c0024f46:	e8 ee 4e ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c0024f4b:	eb 3f                	jmp    c0024f8c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0024f4d:	ba 01 00 00 00       	mov    edx,0x1
c0024f52:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024f56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f5a:	d3 e2                	shl    edx,cl
c0024f5c:	c1 e0 07             	shl    eax,0x7
c0024f5f:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0024f65:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024f69:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0024f6f:	85 ca                	test   edx,ecx
c0024f71:	74 23                	je     c0024f96 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0024f73:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0024f79:	0f ba e1 1e          	bt     ecx,0x1e
c0024f7d:	73 ea                	jae    c0024f69 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0024f7f:	83 ec 0c             	sub    esp,0xc
c0024f82:	68 13 c3 02 c0       	push   0xc002c313
c0024f87:	e8 41 d7 fe ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0024f8c:	83 c4 10             	add    esp,0x10
c0024f8f:	b8 01 00 00 00       	mov    eax,0x1
c0024f94:	eb 36                	jmp    c0024fcc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024f96:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0024f9c:	0f ba e0 1e          	bt     eax,0x1e
c0024fa0:	73 0a                	jae    c0024fac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0024fa2:	83 ec 0c             	sub    esp,0xc
c0024fa5:	68 26 c3 02 c0       	push   0xc002c326
c0024faa:	eb db                	jmp    c0024f87 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0024fac:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0024fb1:	74 17                	je     c0024fca <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024fb3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0024fb8:	74 10                	je     c0024fca <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024fba:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0024fc0:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0024fc4:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0024fc8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024fca:	31 c0                	xor    eax,eax
c0024fcc:	83 c4 2c             	add    esp,0x2c
c0024fcf:	5b                   	pop    ebx
c0024fd0:	5e                   	pop    esi
c0024fd1:	5f                   	pop    edi
c0024fd2:	5d                   	pop    ebp
c0024fd3:	c3                   	ret    

c0024fd4 <SATAPI::eject()>:
c0024fd4:	57                   	push   edi
c0024fd5:	b9 03 00 00 00       	mov    ecx,0x3
c0024fda:	53                   	push   ebx
c0024fdb:	83 ec 14             	sub    esp,0x14
c0024fde:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024fe2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024fe6:	fc                   	cld    
c0024fe7:	31 c0                	xor    eax,eax
c0024fe9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024feb:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024ff0:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024ff5:	50                   	push   eax
c0024ff6:	6a 00                	push   0x0
c0024ff8:	6a 00                	push   0x0
c0024ffa:	6a 00                	push   0x0
c0024ffc:	6a 00                	push   0x0
c0024ffe:	6a 02                	push   0x2
c0025000:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025004:	50                   	push   eax
c0025005:	53                   	push   ebx
c0025006:	e8 c1 fd ff ff       	call   c0024dcc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002500b:	83 c4 14             	add    esp,0x14
c002500e:	53                   	push   ebx
c002500f:	e8 6e fd ff ff       	call   c0024d82 <SATAPI::diskRemoved()>
c0025014:	83 c4 24             	add    esp,0x24
c0025017:	31 c0                	xor    eax,eax
c0025019:	5b                   	pop    ebx
c002501a:	5f                   	pop    edi
c002501b:	c3                   	ret    

c002501c <SATAPI::detectMedia()>:
c002501c:	56                   	push   esi
c002501d:	53                   	push   ebx
c002501e:	83 ec 28             	sub    esp,0x28
c0025021:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025025:	6a 0c                	push   0xc
c0025027:	6a 00                	push   0x0
c0025029:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002502d:	56                   	push   esi
c002502e:	e8 1d b7 fd ff       	call   c0000750 <memset>
c0025033:	83 c4 0c             	add    esp,0xc
c0025036:	6a 00                	push   0x0
c0025038:	6a 00                	push   0x0
c002503a:	6a 00                	push   0x0
c002503c:	6a 00                	push   0x0
c002503e:	6a 00                	push   0x0
c0025040:	56                   	push   esi
c0025041:	53                   	push   ebx
c0025042:	e8 85 fd ff ff       	call   c0024dcc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025047:	83 c4 1c             	add    esp,0x1c
c002504a:	6a 0c                	push   0xc
c002504c:	6a 00                	push   0x0
c002504e:	56                   	push   esi
c002504f:	e8 fc b6 fd ff       	call   c0000750 <memset>
c0025054:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025059:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002505e:	83 c4 0c             	add    esp,0xc
c0025061:	6a 01                	push   0x1
c0025063:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025067:	50                   	push   eax
c0025068:	6a 00                	push   0x0
c002506a:	6a 00                	push   0x0
c002506c:	6a 12                	push   0x12
c002506e:	56                   	push   esi
c002506f:	53                   	push   ebx
c0025070:	e8 57 fd ff ff       	call   c0024dcc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025075:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025079:	83 c4 20             	add    esp,0x20
c002507c:	83 e0 7f             	and    eax,0x7f
c002507f:	3c 70                	cmp    al,0x70
c0025081:	74 15                	je     c0025098 <SATAPI::detectMedia()+0x7c>
c0025083:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002508a:	75 0c                	jne    c0025098 <SATAPI::detectMedia()+0x7c>
c002508c:	83 ec 0c             	sub    esp,0xc
c002508f:	53                   	push   ebx
c0025090:	e8 09 fd ff ff       	call   c0024d9e <SATAPI::diskInserted()>
c0025095:	83 c4 10             	add    esp,0x10
c0025098:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002509c:	83 e0 0f             	and    eax,0xf
c002509f:	3c 02                	cmp    al,0x2
c00250a1:	75 1b                	jne    c00250be <SATAPI::detectMedia()+0xa2>
c00250a3:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00250a8:	75 2d                	jne    c00250d7 <SATAPI::detectMedia()+0xbb>
c00250aa:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00250b1:	74 24                	je     c00250d7 <SATAPI::detectMedia()+0xbb>
c00250b3:	83 ec 0c             	sub    esp,0xc
c00250b6:	53                   	push   ebx
c00250b7:	e8 c6 fc ff ff       	call   c0024d82 <SATAPI::diskRemoved()>
c00250bc:	eb 16                	jmp    c00250d4 <SATAPI::detectMedia()+0xb8>
c00250be:	84 c0                	test   al,al
c00250c0:	75 15                	jne    c00250d7 <SATAPI::detectMedia()+0xbb>
c00250c2:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00250c9:	75 0c                	jne    c00250d7 <SATAPI::detectMedia()+0xbb>
c00250cb:	83 ec 0c             	sub    esp,0xc
c00250ce:	53                   	push   ebx
c00250cf:	e8 ca fc ff ff       	call   c0024d9e <SATAPI::diskInserted()>
c00250d4:	83 c4 10             	add    esp,0x10
c00250d7:	83 c4 24             	add    esp,0x24
c00250da:	5b                   	pop    ebx
c00250db:	5e                   	pop    esi
c00250dc:	c3                   	ret    
c00250dd:	90                   	nop

c00250de <SATAPI::open(int, int, void*)>:
c00250de:	56                   	push   esi
c00250df:	53                   	push   ebx
c00250e0:	50                   	push   eax
c00250e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00250e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00250e9:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00250f3:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00250f9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025103:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025107:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025111:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025117:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002511e:	e8 4e a8 fe ff       	call   c000f971 <Phys::allocatePage()>
c0025123:	89 c6                	mov    esi,eax
c0025125:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002512b:	81 c6 00 10 00 00    	add    esi,0x1000
c0025131:	e8 3b a8 fe ff       	call   c000f971 <Phys::allocatePage()>
c0025136:	39 c6                	cmp    esi,eax
c0025138:	74 10                	je     c002514a <SATAPI::open(int, int, void*)+0x6c>
c002513a:	83 ec 0c             	sub    esp,0xc
c002513d:	68 3b c3 02 c0       	push   0xc002c33b
c0025142:	e8 f2 4c ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c0025147:	83 c4 10             	add    esp,0x10
c002514a:	83 ec 0c             	sub    esp,0xc
c002514d:	6a 02                	push   0x2
c002514f:	e8 cd c0 fe ff       	call   c0011221 <Virt::allocateKernelVirtualPages(int)>
c0025154:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002515a:	6a 03                	push   0x3
c002515c:	50                   	push   eax
c002515d:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025163:	ff 35 90 da 02 c0    	push   DWORD PTR ds:0xc002da90
c0025169:	e8 70 c8 fe ff       	call   c00119de <VAS::mapPage(unsigned long, unsigned long, int)>
c002516e:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025175:	83 c4 14             	add    esp,0x14
c0025178:	53                   	push   ebx
c0025179:	e8 9e fe ff ff       	call   c002501c <SATAPI::detectMedia()>
c002517e:	83 c4 14             	add    esp,0x14
c0025181:	31 c0                	xor    eax,eax
c0025183:	5b                   	pop    ebx
c0025184:	5e                   	pop    esi
c0025185:	c3                   	ret    

c0025186 <SATAPI::read(unsigned long long, int, void*)>:
c0025186:	55                   	push   ebp
c0025187:	57                   	push   edi
c0025188:	56                   	push   esi
c0025189:	53                   	push   ebx
c002518a:	83 ec 1c             	sub    esp,0x1c
c002518d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025191:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025195:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025199:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00251a0:	74 19                	je     c00251bb <SATAPI::read(unsigned long long, int, void*)+0x35>
c00251a2:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c00251a7:	7e 2e                	jle    c00251d7 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00251a9:	83 ec 0c             	sub    esp,0xc
c00251ac:	68 51 c3 02 c0       	push   0xc002c351
c00251b1:	e8 83 4c ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c00251b6:	83 c4 10             	add    esp,0x10
c00251b9:	eb 1c                	jmp    c00251d7 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00251bb:	83 ec 0c             	sub    esp,0xc
c00251be:	55                   	push   ebp
c00251bf:	e8 58 fe ff ff       	call   c002501c <SATAPI::detectMedia()>
c00251c4:	83 c4 10             	add    esp,0x10
c00251c7:	b8 02 00 00 00       	mov    eax,0x2
c00251cc:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00251d3:	75 cd                	jne    c00251a2 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c00251d5:	eb 49                	jmp    c0025220 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00251d7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00251db:	b9 03 00 00 00       	mov    ecx,0x3
c00251e0:	fc                   	cld    
c00251e1:	31 c0                	xor    eax,eax
c00251e3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00251e5:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00251ea:	89 d8                	mov    eax,ebx
c00251ec:	86 e0                	xchg   al,ah
c00251ee:	c1 c0 10             	rol    eax,0x10
c00251f1:	86 e0                	xchg   al,ah
c00251f3:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00251f7:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00251fb:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00251ff:	50                   	push   eax
c0025200:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025204:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025208:	56                   	push   esi
c0025209:	53                   	push   ebx
c002520a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002520e:	c1 e0 0b             	shl    eax,0xb
c0025211:	50                   	push   eax
c0025212:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025216:	50                   	push   eax
c0025217:	55                   	push   ebp
c0025218:	e8 af fb ff ff       	call   c0024dcc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002521d:	83 c4 20             	add    esp,0x20
c0025220:	83 c4 1c             	add    esp,0x1c
c0025223:	5b                   	pop    ebx
c0025224:	5e                   	pop    esi
c0025225:	5f                   	pop    edi
c0025226:	5d                   	pop    ebp
c0025227:	c3                   	ret    

c0025228 <AVX::open(int, int, void*)>:
c0025228:	83 ec 0c             	sub    esp,0xc
c002522b:	e8 48 11 00 00       	call   c0026378 <avxInit>
c0025230:	b8 00 00 00 00       	mov    eax,0x0
c0025235:	83 c4 0c             	add    esp,0xc
c0025238:	c3                   	ret    
c0025239:	90                   	nop

c002523a <AVX::close(int, int, void*)>:
c002523a:	83 ec 0c             	sub    esp,0xc
c002523d:	e8 37 11 00 00       	call   c0026379 <avxClose>
c0025242:	b8 00 00 00 00       	mov    eax,0x0
c0025247:	83 c4 0c             	add    esp,0xc
c002524a:	c3                   	ret    
c002524b:	90                   	nop

c002524c <AVX::available()>:
c002524c:	83 ec 0c             	sub    esp,0xc
c002524f:	e8 1c 11 00 00       	call   c0026370 <avxDetect>
c0025254:	85 c0                	test   eax,eax
c0025256:	0f 95 c0             	setne  al
c0025259:	83 c4 0c             	add    esp,0xc
c002525c:	c3                   	ret    
c002525d:	90                   	nop

c002525e <AVX::save(void*)>:
c002525e:	83 ec 0c             	sub    esp,0xc
c0025261:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025265:	83 ec 0c             	sub    esp,0xc
c0025268:	50                   	push   eax
c0025269:	e8 08 11 00 00       	call   c0026376 <avxSave>
c002526e:	83 c4 10             	add    esp,0x10
c0025271:	90                   	nop
c0025272:	83 c4 0c             	add    esp,0xc
c0025275:	c3                   	ret    

c0025276 <AVX::load(void*)>:
c0025276:	83 ec 0c             	sub    esp,0xc
c0025279:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002527d:	83 ec 0c             	sub    esp,0xc
c0025280:	50                   	push   eax
c0025281:	e8 f1 10 00 00       	call   c0026377 <avxLoad>
c0025286:	83 c4 10             	add    esp,0x10
c0025289:	90                   	nop
c002528a:	83 c4 0c             	add    esp,0xc
c002528d:	c3                   	ret    

c002528e <AVX::AVX()>:
c002528e:	83 ec 0c             	sub    esp,0xc
c0025291:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025295:	83 ec 08             	sub    esp,0x8
c0025298:	68 b4 c3 02 c0       	push   0xc002c3b4
c002529d:	50                   	push   eax
c002529e:	e8 77 ed fe ff       	call   c001401a <FPU::FPU(char const*)>
c00252a3:	83 c4 10             	add    esp,0x10
c00252a6:	ba c4 c3 02 c0       	mov    edx,0xc002c3c4
c00252ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252af:	89 10                	mov    DWORD PTR [eax],edx
c00252b1:	90                   	nop
c00252b2:	83 c4 0c             	add    esp,0xc
c00252b5:	c3                   	ret    

c00252b6 <MMX::available()>:
c00252b6:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c00252bb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00252c1:	83 e0 20             	and    eax,0x20
c00252c4:	84 c0                	test   al,al
c00252c6:	0f 95 c0             	setne  al
c00252c9:	c3                   	ret    

c00252ca <MMX::open(int, int, void*)>:
c00252ca:	83 ec 0c             	sub    esp,0xc
c00252cd:	e8 30 11 00 00       	call   c0026402 <x87Init>
c00252d2:	b8 00 00 00 00       	mov    eax,0x0
c00252d7:	83 c4 0c             	add    esp,0xc
c00252da:	c3                   	ret    
c00252db:	90                   	nop

c00252dc <MMX::close(int, int, void*)>:
c00252dc:	83 ec 0c             	sub    esp,0xc
c00252df:	e8 38 11 00 00       	call   c002641c <x87Close>
c00252e4:	b8 00 00 00 00       	mov    eax,0x0
c00252e9:	83 c4 0c             	add    esp,0xc
c00252ec:	c3                   	ret    
c00252ed:	90                   	nop

c00252ee <MMX::save(void*)>:
c00252ee:	83 ec 0c             	sub    esp,0xc
c00252f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00252f5:	83 ec 0c             	sub    esp,0xc
c00252f8:	50                   	push   eax
c00252f9:	e8 f3 10 00 00       	call   c00263f1 <x87Save>
c00252fe:	83 c4 10             	add    esp,0x10
c0025301:	90                   	nop
c0025302:	83 c4 0c             	add    esp,0xc
c0025305:	c3                   	ret    

c0025306 <MMX::load(void*)>:
c0025306:	83 ec 0c             	sub    esp,0xc
c0025309:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002530d:	83 ec 0c             	sub    esp,0xc
c0025310:	50                   	push   eax
c0025311:	e8 e4 10 00 00       	call   c00263fa <x87Load>
c0025316:	83 c4 10             	add    esp,0x10
c0025319:	90                   	nop
c002531a:	83 c4 0c             	add    esp,0xc
c002531d:	c3                   	ret    

c002531e <MMX::MMX()>:
c002531e:	83 ec 0c             	sub    esp,0xc
c0025321:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025325:	83 ec 08             	sub    esp,0x8
c0025328:	68 f4 c3 02 c0       	push   0xc002c3f4
c002532d:	50                   	push   eax
c002532e:	e8 e7 ec fe ff       	call   c001401a <FPU::FPU(char const*)>
c0025333:	83 c4 10             	add    esp,0x10
c0025336:	ba 04 c4 02 c0       	mov    edx,0xc002c404
c002533b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002533f:	89 10                	mov    DWORD PTR [eax],edx
c0025341:	90                   	nop
c0025342:	83 c4 0c             	add    esp,0xc
c0025345:	c3                   	ret    

c0025346 <SSE::open(int, int, void*)>:
c0025346:	83 ec 0c             	sub    esp,0xc
c0025349:	e8 66 10 00 00       	call   c00263b4 <sseInit>
c002534e:	b8 00 00 00 00       	mov    eax,0x0
c0025353:	83 c4 0c             	add    esp,0xc
c0025356:	c3                   	ret    
c0025357:	90                   	nop

c0025358 <SSE::close(int, int, void*)>:
c0025358:	83 ec 0c             	sub    esp,0xc
c002535b:	e8 64 10 00 00       	call   c00263c4 <sseClose>
c0025360:	b8 00 00 00 00       	mov    eax,0x0
c0025365:	83 c4 0c             	add    esp,0xc
c0025368:	c3                   	ret    
c0025369:	90                   	nop

c002536a <SSE::available()>:
c002536a:	83 ec 1c             	sub    esp,0x1c
c002536d:	e8 1e 10 00 00       	call   c0026390 <absolutelyNoChanceInHell>
c0025372:	85 c0                	test   eax,eax
c0025374:	0f 95 c0             	setne  al
c0025377:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002537b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002537f:	83 c4 1c             	add    esp,0x1c
c0025382:	c3                   	ret    
c0025383:	90                   	nop

c0025384 <SSE::save(void*)>:
c0025384:	83 ec 0c             	sub    esp,0xc
c0025387:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002538b:	83 ec 0c             	sub    esp,0xc
c002538e:	50                   	push   eax
c002538f:	e8 14 10 00 00       	call   c00263a8 <sseSave>
c0025394:	83 c4 10             	add    esp,0x10
c0025397:	90                   	nop
c0025398:	83 c4 0c             	add    esp,0xc
c002539b:	c3                   	ret    

c002539c <SSE::load(void*)>:
c002539c:	83 ec 0c             	sub    esp,0xc
c002539f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253a3:	83 ec 0c             	sub    esp,0xc
c00253a6:	50                   	push   eax
c00253a7:	e8 02 10 00 00       	call   c00263ae <sseLoad>
c00253ac:	83 c4 10             	add    esp,0x10
c00253af:	90                   	nop
c00253b0:	83 c4 0c             	add    esp,0xc
c00253b3:	c3                   	ret    

c00253b4 <SSE::SSE()>:
c00253b4:	83 ec 0c             	sub    esp,0xc
c00253b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253bb:	83 ec 08             	sub    esp,0x8
c00253be:	68 34 c4 02 c0       	push   0xc002c434
c00253c3:	50                   	push   eax
c00253c4:	e8 51 ec fe ff       	call   c001401a <FPU::FPU(char const*)>
c00253c9:	83 c4 10             	add    esp,0x10
c00253cc:	ba 44 c4 02 c0       	mov    edx,0xc002c444
c00253d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253d5:	89 10                	mov    DWORD PTR [eax],edx
c00253d7:	90                   	nop
c00253d8:	83 c4 0c             	add    esp,0xc
c00253db:	c3                   	ret    

c00253dc <x87::open(int, int, void*)>:
c00253dc:	83 ec 0c             	sub    esp,0xc
c00253df:	e8 1e 10 00 00       	call   c0026402 <x87Init>
c00253e4:	b8 00 00 00 00       	mov    eax,0x0
c00253e9:	83 c4 0c             	add    esp,0xc
c00253ec:	c3                   	ret    
c00253ed:	90                   	nop

c00253ee <x87::close(int, int, void*)>:
c00253ee:	83 ec 0c             	sub    esp,0xc
c00253f1:	e8 26 10 00 00       	call   c002641c <x87Close>
c00253f6:	b8 00 00 00 00       	mov    eax,0x0
c00253fb:	83 c4 0c             	add    esp,0xc
c00253fe:	c3                   	ret    
c00253ff:	90                   	nop

c0025400 <x87::available()>:
c0025400:	83 ec 0c             	sub    esp,0xc
c0025403:	e8 ce 0f 00 00       	call   c00263d6 <x87Detect>
c0025408:	85 c0                	test   eax,eax
c002540a:	0f 95 c0             	setne  al
c002540d:	83 c4 0c             	add    esp,0xc
c0025410:	c3                   	ret    
c0025411:	90                   	nop

c0025412 <x87::save(void*)>:
c0025412:	83 ec 0c             	sub    esp,0xc
c0025415:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025419:	83 ec 0c             	sub    esp,0xc
c002541c:	50                   	push   eax
c002541d:	e8 cf 0f 00 00       	call   c00263f1 <x87Save>
c0025422:	83 c4 10             	add    esp,0x10
c0025425:	90                   	nop
c0025426:	83 c4 0c             	add    esp,0xc
c0025429:	c3                   	ret    

c002542a <x87::load(void*)>:
c002542a:	83 ec 0c             	sub    esp,0xc
c002542d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025431:	83 ec 0c             	sub    esp,0xc
c0025434:	50                   	push   eax
c0025435:	e8 c0 0f 00 00       	call   c00263fa <x87Load>
c002543a:	83 c4 10             	add    esp,0x10
c002543d:	90                   	nop
c002543e:	83 c4 0c             	add    esp,0xc
c0025441:	c3                   	ret    

c0025442 <x87::x87()>:
c0025442:	83 ec 0c             	sub    esp,0xc
c0025445:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025449:	83 ec 08             	sub    esp,0x8
c002544c:	68 74 c4 02 c0       	push   0xc002c474
c0025451:	50                   	push   eax
c0025452:	e8 c3 eb fe ff       	call   c001401a <FPU::FPU(char const*)>
c0025457:	83 c4 10             	add    esp,0x10
c002545a:	ba 84 c4 02 c0       	mov    edx,0xc002c484
c002545f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025463:	89 10                	mov    DWORD PTR [eax],edx
c0025465:	90                   	nop
c0025466:	83 c4 0c             	add    esp,0xc
c0025469:	c3                   	ret    

c002546a <APIC::disable()>:
c002546a:	90                   	nop
c002546b:	c3                   	ret    

c002546c <APIC::close(int, int, void*)>:
c002546c:	55                   	push   ebp
c002546d:	89 e5                	mov    ebp,esp
c002546f:	83 ec 08             	sub    esp,0x8
c0025472:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025475:	8b 00                	mov    eax,DWORD PTR [eax]
c0025477:	83 c0 3c             	add    eax,0x3c
c002547a:	8b 00                	mov    eax,DWORD PTR [eax]
c002547c:	83 ec 0c             	sub    esp,0xc
c002547f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025482:	ff d0                	call   eax
c0025484:	83 c4 10             	add    esp,0x10
c0025487:	b8 00 00 00 00       	mov    eax,0x0
c002548c:	c9                   	leave  
c002548d:	c3                   	ret    

c002548e <IOAPIC::close(int, int, void*)>:
c002548e:	b8 00 00 00 00       	mov    eax,0x0
c0025493:	c3                   	ret    

c0025494 <APIC::io_wait()>:
c0025494:	eb 00                	jmp    c0025496 <APIC::io_wait()+0x2>
c0025496:	eb 00                	jmp    c0025498 <APIC::io_wait()+0x4>
c0025498:	90                   	nop
c0025499:	c3                   	ret    

c002549a <APIC::getBase()>:
c002549a:	55                   	push   ebp
c002549b:	89 e5                	mov    ebp,esp
c002549d:	83 ec 18             	sub    esp,0x18
c00254a0:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c00254a5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00254ab:	83 e0 08             	and    eax,0x8
c00254ae:	84 c0                	test   al,al
c00254b0:	75 07                	jne    c00254b9 <APIC::getBase()+0x1f>
c00254b2:	b8 00 00 00 00       	mov    eax,0x0
c00254b7:	eb 21                	jmp    c00254da <APIC::getBase()+0x40>
c00254b9:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c00254be:	83 ec 08             	sub    esp,0x8
c00254c1:	6a 1b                	push   0x1b
c00254c3:	50                   	push   eax
c00254c4:	e8 77 96 fe ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00254c9:	83 c4 10             	add    esp,0x10
c00254cc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00254cf:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00254d2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00254d5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00254da:	c9                   	leave  
c00254db:	c3                   	ret    

c00254dc <APIC::eoi(unsigned char)>:
c00254dc:	55                   	push   ebp
c00254dd:	89 e5                	mov    ebp,esp
c00254df:	83 ec 28             	sub    esp,0x28
c00254e2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00254e5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00254e8:	83 ec 0c             	sub    esp,0xc
c00254eb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00254ee:	e8 a7 ff ff ff       	call   c002549a <APIC::getBase()>
c00254f3:	83 c4 10             	add    esp,0x10
c00254f6:	05 b0 00 00 00       	add    eax,0xb0
c00254fb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00254fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025501:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025507:	90                   	nop
c0025508:	c9                   	leave  
c0025509:	c3                   	ret    

c002550a <APIC::open(int, int, void*)>:
c002550a:	55                   	push   ebp
c002550b:	89 e5                	mov    ebp,esp
c002550d:	57                   	push   edi
c002550e:	56                   	push   esi
c002550f:	53                   	push   ebx
c0025510:	83 ec 2c             	sub    esp,0x2c
c0025513:	83 ec 0c             	sub    esp,0xc
c0025516:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025519:	e8 7c ff ff ff       	call   c002549a <APIC::getBase()>
c002551e:	83 c4 10             	add    esp,0x10
c0025521:	89 c2                	mov    edx,eax
c0025523:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025526:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002552c:	0f b6 f8             	movzx  edi,al
c002552f:	89 d0                	mov    eax,edx
c0025531:	ba 00 00 00 00       	mov    edx,0x0
c0025536:	89 c1                	mov    ecx,eax
c0025538:	80 e5 ff             	and    ch,0xff
c002553b:	89 cb                	mov    ebx,ecx
c002553d:	0f b6 f2             	movzx  esi,dl
c0025540:	89 d8                	mov    eax,ebx
c0025542:	89 f2                	mov    edx,esi
c0025544:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025547:	8d 5f 08             	lea    ebx,[edi+0x8]
c002554a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002554e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025552:	83 e0 00             	and    eax,0x0
c0025555:	09 d0                	or     eax,edx
c0025557:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002555b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002555e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025564:	8d 50 01             	lea    edx,[eax+0x1]
c0025567:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002556a:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025570:	0f b6 d0             	movzx  edx,al
c0025573:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025576:	83 c2 08             	add    edx,0x8
c0025579:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002557d:	0f b6 c9             	movzx  ecx,cl
c0025580:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025586:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002558a:	83 ec 0c             	sub    esp,0xc
c002558d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025590:	e8 05 ff ff ff       	call   c002549a <APIC::getBase()>
c0025595:	83 c4 10             	add    esp,0x10
c0025598:	05 f0 00 00 00       	add    eax,0xf0
c002559d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00255a0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00255a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00255a5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00255a8:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00255af:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00255b6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00255b9:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00255bc:	89 10                	mov    DWORD PTR [eax],edx
c00255be:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00255c5:	a1 f0 01 03 c0       	mov    eax,ds:0xc00301f0
c00255ca:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00255cd:	7d 7c                	jge    c002564b <APIC::open(int, int, void*)+0x141>
c00255cf:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00255d2:	8b 04 85 00 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfe00]
c00255d9:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00255dc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00255df:	8b 04 85 00 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfe00]
c00255e6:	c1 e8 08             	shr    eax,0x8
c00255e9:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00255ed:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00255f0:	8b 04 85 00 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfe00]
c00255f7:	c1 e8 18             	shr    eax,0x18
c00255fa:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00255fd:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025601:	75 40                	jne    c0025643 <APIC::open(int, int, void*)+0x139>
c0025603:	83 ec 0c             	sub    esp,0xc
c0025606:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025609:	e8 8c fe ff ff       	call   c002549a <APIC::getBase()>
c002560e:	83 c4 10             	add    esp,0x10
c0025611:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025615:	75 07                	jne    c002561e <APIC::open(int, int, void*)+0x114>
c0025617:	ba 60 03 00 00       	mov    edx,0x360
c002561c:	eb 05                	jmp    c0025623 <APIC::open(int, int, void*)+0x119>
c002561e:	ba 50 03 00 00       	mov    edx,0x350
c0025623:	01 d0                	add    eax,edx
c0025625:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025628:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002562b:	8b 00                	mov    eax,DWORD PTR [eax]
c002562d:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025630:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025637:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c002563b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002563e:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025641:	89 10                	mov    DWORD PTR [eax],edx
c0025643:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025646:	e9 7a ff ff ff       	jmp    c00255c5 <APIC::open(int, int, void*)+0xbb>
c002564b:	b8 00 00 00 00       	mov    eax,0x0
c0025650:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025653:	5b                   	pop    ebx
c0025654:	5e                   	pop    esi
c0025655:	5f                   	pop    edi
c0025656:	5d                   	pop    ebp
c0025657:	c3                   	ret    

c0025658 <IOAPIC::IOAPIC()>:
c0025658:	83 ec 0c             	sub    esp,0xc
c002565b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002565f:	83 ec 08             	sub    esp,0x8
c0025662:	68 b4 c4 02 c0       	push   0xc002c4b4
c0025667:	50                   	push   eax
c0025668:	e8 9d e6 fe ff       	call   c0013d0a <Device::Device(char const*)>
c002566d:	83 c4 10             	add    esp,0x10
c0025670:	ba dc c5 02 c0       	mov    edx,0xc002c5dc
c0025675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025679:	89 10                	mov    DWORD PTR [eax],edx
c002567b:	90                   	nop
c002567c:	83 c4 0c             	add    esp,0xc
c002567f:	c3                   	ret    

c0025680 <APIC::APIC()>:
c0025680:	53                   	push   ebx
c0025681:	83 ec 18             	sub    esp,0x18
c0025684:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025688:	83 ec 08             	sub    esp,0x8
c002568b:	68 bc c4 02 c0       	push   0xc002c4bc
c0025690:	50                   	push   eax
c0025691:	e8 de ed fe ff       	call   c0014474 <InterruptController::InterruptController(char const*)>
c0025696:	83 c4 10             	add    esp,0x10
c0025699:	ba 94 c5 02 c0       	mov    edx,0xc002c594
c002569e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00256a2:	89 10                	mov    DWORD PTR [eax],edx
c00256a4:	a0 c0 1c 03 c0       	mov    al,ds:0xc0031cc0
c00256a9:	83 f0 01             	xor    eax,0x1
c00256ac:	84 c0                	test   al,al
c00256ae:	0f 84 a1 00 00 00    	je     c0025755 <APIC::APIC()+0xd5>
c00256b4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00256b9:	a0 a0 02 03 c0       	mov    al,ds:0xc00302a0
c00256be:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00256c2:	0f 83 86 00 00 00    	jae    c002574e <APIC::APIC()+0xce>
c00256c8:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00256d0:	83 ec 0c             	sub    esp,0xc
c00256d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00256d7:	e8 bd 9e fe ff       	call   c000f599 <malloc>
c00256dc:	83 c4 10             	add    esp,0x10
c00256df:	89 c3                	mov    ebx,eax
c00256e1:	83 ec 0c             	sub    esp,0xc
c00256e4:	53                   	push   ebx
c00256e5:	e8 6e ff ff ff       	call   c0025658 <IOAPIC::IOAPIC()>
c00256ea:	83 c4 10             	add    esp,0x10
c00256ed:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00256f1:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00256f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00256fa:	89 14 85 a0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce360],edx
c0025701:	a1 80 1c 03 c0       	mov    eax,ds:0xc0031c80
c0025706:	40                   	inc    eax
c0025707:	a3 80 1c 03 c0       	mov    ds:0xc0031c80,eax
c002570c:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0025711:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025717:	83 ec 08             	sub    esp,0x8
c002571a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002571e:	50                   	push   eax
c002571f:	e8 e2 e3 fe ff       	call   c0013b06 <Device::addChild(Device*)>
c0025724:	83 c4 10             	add    esp,0x10
c0025727:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002572b:	8b 00                	mov    eax,DWORD PTR [eax]
c002572d:	83 c0 08             	add    eax,0x8
c0025730:	8b 00                	mov    eax,DWORD PTR [eax]
c0025732:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025737:	6a 00                	push   0x0
c0025739:	6a 00                	push   0x0
c002573b:	52                   	push   edx
c002573c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025740:	ff d0                	call   eax
c0025742:	83 c4 10             	add    esp,0x10
c0025745:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025749:	e9 6b ff ff ff       	jmp    c00256b9 <APIC::APIC()+0x39>
c002574e:	c6 05 c0 1c 03 c0 01 	mov    BYTE PTR ds:0xc0031cc0,0x1
c0025755:	90                   	nop
c0025756:	83 c4 18             	add    esp,0x18
c0025759:	5b                   	pop    ebx
c002575a:	c3                   	ret    
c002575b:	90                   	nop

c002575c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002575c:	55                   	push   ebp
c002575d:	89 e5                	mov    ebp,esp
c002575f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025762:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025768:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002576b:	72 1d                	jb     c002578a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002576d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025770:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025776:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025779:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002577f:	01 d0                	add    eax,edx
c0025781:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025784:	73 04                	jae    c002578a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025786:	b0 01                	mov    al,0x1
c0025788:	eb 02                	jmp    c002578c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002578a:	b0 00                	mov    al,0x0
c002578c:	5d                   	pop    ebp
c002578d:	c3                   	ret    

c002578e <IOAPIC::read(int)>:
c002578e:	55                   	push   ebp
c002578f:	89 e5                	mov    ebp,esp
c0025791:	83 ec 10             	sub    esp,0x10
c0025794:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025797:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002579d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00257a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00257a3:	0f b6 d0             	movzx  edx,al
c00257a6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00257a9:	89 10                	mov    DWORD PTR [eax],edx
c00257ab:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00257ae:	83 c0 10             	add    eax,0x10
c00257b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00257b3:	c9                   	leave  
c00257b4:	c3                   	ret    
c00257b5:	90                   	nop

c00257b6 <IOAPIC::open(int, int, void*)>:
c00257b6:	55                   	push   ebp
c00257b7:	89 e5                	mov    ebp,esp
c00257b9:	57                   	push   edi
c00257ba:	56                   	push   esi
c00257bb:	53                   	push   ebx
c00257bc:	83 ec 0c             	sub    esp,0xc
c00257bf:	83 ec 0c             	sub    esp,0xc
c00257c2:	68 e7 c4 02 c0       	push   0xc002c4e7
c00257c7:	e8 01 cf fe ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c00257cc:	83 c4 10             	add    esp,0x10
c00257cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257d2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00257d5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00257db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257de:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00257e4:	8b 14 85 e0 02 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfd20]
c00257eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257ee:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00257f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257f7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00257fd:	8b 14 85 60 03 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfca0]
c0025804:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025807:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002580d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025810:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025816:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025819:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002581f:	0f b6 f8             	movzx  edi,al
c0025822:	89 d0                	mov    eax,edx
c0025824:	ba 00 00 00 00       	mov    edx,0x0
c0025829:	89 c1                	mov    ecx,eax
c002582b:	80 e5 ff             	and    ch,0xff
c002582e:	89 cb                	mov    ebx,ecx
c0025830:	0f b6 f2             	movzx  esi,dl
c0025833:	89 d8                	mov    eax,ebx
c0025835:	89 f2                	mov    edx,esi
c0025837:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002583a:	8d 5f 08             	lea    ebx,[edi+0x8]
c002583d:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025841:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025845:	83 e0 00             	and    eax,0x0
c0025848:	09 d0                	or     eax,edx
c002584a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002584e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025851:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025857:	8d 50 01             	lea    edx,[eax+0x1]
c002585a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002585d:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025863:	0f b6 d0             	movzx  edx,al
c0025866:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025869:	83 c2 08             	add    edx,0x8
c002586c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025870:	0f b6 c9             	movzx  ecx,cl
c0025873:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025879:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002587d:	83 ec 08             	sub    esp,0x8
c0025880:	6a 01                	push   0x1
c0025882:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025885:	e8 04 ff ff ff       	call   c002578e <IOAPIC::read(int)>
c002588a:	83 c4 10             	add    esp,0x10
c002588d:	c1 f8 10             	sar    eax,0x10
c0025890:	0f b6 c0             	movzx  eax,al
c0025893:	8d 50 01             	lea    edx,[eax+0x1]
c0025896:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025899:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002589f:	b8 00 00 00 00       	mov    eax,0x0
c00258a4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00258a7:	5b                   	pop    ebx
c00258a8:	5e                   	pop    esi
c00258a9:	5f                   	pop    edi
c00258aa:	5d                   	pop    ebp
c00258ab:	c3                   	ret    

c00258ac <IOAPIC::write(int, int)>:
c00258ac:	55                   	push   ebp
c00258ad:	89 e5                	mov    ebp,esp
c00258af:	83 ec 10             	sub    esp,0x10
c00258b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258b5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00258bb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00258be:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00258c1:	0f b6 d0             	movzx  edx,al
c00258c4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00258c7:	89 10                	mov    DWORD PTR [eax],edx
c00258c9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00258cc:	8d 50 10             	lea    edx,[eax+0x10]
c00258cf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00258d2:	89 02                	mov    DWORD PTR [edx],eax
c00258d4:	90                   	nop
c00258d5:	c9                   	leave  
c00258d6:	c3                   	ret    
c00258d7:	90                   	nop

c00258d8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00258d8:	55                   	push   ebp
c00258d9:	89 e5                	mov    ebp,esp
c00258db:	53                   	push   ebx
c00258dc:	83 ec 2c             	sub    esp,0x2c
c00258df:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00258e2:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00258e5:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00258e8:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00258eb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00258ee:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00258f1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00258f4:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00258f7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00258fa:	88 d8                	mov    al,bl
c00258fc:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00258ff:	88 c8                	mov    al,cl
c0025901:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025904:	88 d0                	mov    al,dl
c0025906:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025909:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002590d:	83 c0 08             	add    eax,0x8
c0025910:	01 c0                	add    eax,eax
c0025912:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025915:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025919:	83 c0 08             	add    eax,0x8
c002591c:	01 c0                	add    eax,eax
c002591e:	40                   	inc    eax
c002591f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025922:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025925:	50                   	push   eax
c0025926:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025929:	e8 60 fe ff ff       	call   c002578e <IOAPIC::read(int)>
c002592e:	83 c4 08             	add    esp,0x8
c0025931:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025934:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002593b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002593e:	c1 e0 18             	shl    eax,0x18
c0025941:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025944:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025947:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002594a:	52                   	push   edx
c002594b:	50                   	push   eax
c002594c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002594f:	e8 58 ff ff ff       	call   c00258ac <IOAPIC::write(int, int)>
c0025954:	83 c4 0c             	add    esp,0xc
c0025957:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002595a:	50                   	push   eax
c002595b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002595e:	e8 2b fe ff ff       	call   c002578e <IOAPIC::read(int)>
c0025963:	83 c4 08             	add    esp,0x8
c0025966:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025969:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025970:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025977:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002597e:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025982:	74 09                	je     c002598d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025984:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002598b:	eb 07                	jmp    c0025994 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c002598d:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025994:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025998:	74 09                	je     c00259a3 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c002599a:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00259a1:	eb 07                	jmp    c00259aa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00259a3:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00259aa:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00259b1:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00259b5:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00259b8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00259bb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00259be:	52                   	push   edx
c00259bf:	50                   	push   eax
c00259c0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259c3:	e8 e4 fe ff ff       	call   c00258ac <IOAPIC::write(int, int)>
c00259c8:	83 c4 0c             	add    esp,0xc
c00259cb:	90                   	nop
c00259cc:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00259cf:	c9                   	leave  
c00259d0:	c3                   	ret    
c00259d1:	90                   	nop

c00259d2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00259d2:	55                   	push   ebp
c00259d3:	89 e5                	mov    ebp,esp
c00259d5:	57                   	push   edi
c00259d6:	56                   	push   esi
c00259d7:	53                   	push   ebx
c00259d8:	83 ec 2c             	sub    esp,0x2c
c00259db:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00259de:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00259e1:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00259e5:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00259e9:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00259ed:	74 5a                	je     c0025a49 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00259ef:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00259f3:	7f 44                	jg     c0025a39 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00259f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00259f8:	05 80 cb 02 c0       	add    eax,0xc002cb80
c00259fd:	8a 00                	mov    al,BYTE PTR [eax]
c00259ff:	0f b6 c0             	movzx  eax,al
c0025a02:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025a05:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a08:	66 8b 84 00 80 02 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfd80]
c0025a10:	0f b7 c0             	movzx  eax,ax
c0025a13:	83 e0 02             	and    eax,0x2
c0025a16:	85 c0                	test   eax,eax
c0025a18:	74 04                	je     c0025a1e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025a1a:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025a1e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a21:	66 8b 84 00 80 02 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfd80]
c0025a29:	0f b7 c0             	movzx  eax,ax
c0025a2c:	83 e0 08             	and    eax,0x8
c0025a2f:	85 c0                	test   eax,eax
c0025a31:	74 16                	je     c0025a49 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025a33:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025a37:	eb 10                	jmp    c0025a49 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025a39:	83 ec 0c             	sub    esp,0xc
c0025a3c:	68 f8 c4 02 c0       	push   0xc002c4f8
c0025a41:	e8 f3 43 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c0025a46:	83 c4 10             	add    esp,0x10
c0025a49:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025a4d:	a1 80 1c 03 c0       	mov    eax,ds:0xc0031c80
c0025a52:	83 ec 08             	sub    esp,0x8
c0025a55:	50                   	push   eax
c0025a56:	68 30 c5 02 c0       	push   0xc002c530
c0025a5b:	e8 6d cc fe ff       	call   c00126cd <Dbg::kprintf(char const*, ...)>
c0025a60:	83 c4 10             	add    esp,0x10
c0025a63:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025a6a:	a1 80 1c 03 c0       	mov    eax,ds:0xc0031c80
c0025a6f:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025a72:	7d 67                	jge    c0025adb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025a74:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025a77:	8b 04 85 a0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce360]
c0025a7e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a81:	83 ec 08             	sub    esp,0x8
c0025a84:	52                   	push   edx
c0025a85:	50                   	push   eax
c0025a86:	e8 d1 fc ff ff       	call   c002575c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025a8b:	83 c4 10             	add    esp,0x10
c0025a8e:	84 c0                	test   al,al
c0025a90:	74 44                	je     c0025ad6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025a92:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025a95:	8b 1c 85 a0 1c 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffce360]
c0025a9c:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025aa0:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025aa3:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025aa7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025aaa:	83 c0 20             	add    eax,0x20
c0025aad:	0f b6 f0             	movzx  esi,al
c0025ab0:	b8 00 00 00 00       	mov    eax,0x0
c0025ab5:	99                   	cdq    
c0025ab6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025ab9:	0f b6 c9             	movzx  ecx,cl
c0025abc:	83 ec 04             	sub    esp,0x4
c0025abf:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025ac2:	57                   	push   edi
c0025ac3:	56                   	push   esi
c0025ac4:	52                   	push   edx
c0025ac5:	50                   	push   eax
c0025ac6:	51                   	push   ecx
c0025ac7:	53                   	push   ebx
c0025ac8:	e8 0b fe ff ff       	call   c00258d8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025acd:	83 c4 20             	add    esp,0x20
c0025ad0:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025ad4:	eb 05                	jmp    c0025adb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025ad6:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025ad9:	eb 8f                	jmp    c0025a6a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025adb:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025ade:	83 f0 01             	xor    eax,0x1
c0025ae1:	84 c0                	test   al,al
c0025ae3:	74 10                	je     c0025af5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025ae5:	83 ec 0c             	sub    esp,0xc
c0025ae8:	68 47 c5 02 c0       	push   0xc002c547
c0025aed:	e8 47 43 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c0025af2:	83 c4 10             	add    esp,0x10
c0025af5:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025af9:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025b00:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025b04:	7f 65                	jg     c0025b6b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025b06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b09:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b0c:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025b13:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025b16:	01 ca                	add    edx,ecx
c0025b18:	83 c2 54             	add    edx,0x54
c0025b1b:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025b1f:	85 c0                	test   eax,eax
c0025b21:	75 43                	jne    c0025b66 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025b23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b26:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b29:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025b30:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025b33:	01 ca                	add    edx,ecx
c0025b35:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025b38:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025b3b:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025b3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b42:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b45:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025b4c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025b4f:	01 ca                	add    edx,ecx
c0025b51:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025b57:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025b5a:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025b5e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b61:	83 e8 20             	sub    eax,0x20
c0025b64:	eb 1a                	jmp    c0025b80 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025b66:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025b69:	eb 95                	jmp    c0025b00 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025b6b:	83 ec 0c             	sub    esp,0xc
c0025b6e:	68 54 c5 02 c0       	push   0xc002c554
c0025b73:	e8 c1 42 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c0025b78:	83 c4 10             	add    esp,0x10
c0025b7b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025b80:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025b83:	5b                   	pop    ebx
c0025b84:	5e                   	pop    esi
c0025b85:	5f                   	pop    edi
c0025b86:	5d                   	pop    ebp
c0025b87:	c3                   	ret    

c0025b88 <PIC::disable()>:
c0025b88:	55                   	push   ebp
c0025b89:	89 e5                	mov    ebp,esp
c0025b8b:	83 ec 10             	sub    esp,0x10
c0025b8e:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025b94:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025b98:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025b9b:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025b9f:	ee                   	out    dx,al
c0025ba0:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025ba6:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025baa:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025bad:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025bb1:	ee                   	out    dx,al
c0025bb2:	90                   	nop
c0025bb3:	c9                   	leave  
c0025bb4:	c3                   	ret    
c0025bb5:	90                   	nop

c0025bb6 <PIC::close(int, int, void*)>:
c0025bb6:	55                   	push   ebp
c0025bb7:	89 e5                	mov    ebp,esp
c0025bb9:	83 ec 08             	sub    esp,0x8
c0025bbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bbf:	8b 00                	mov    eax,DWORD PTR [eax]
c0025bc1:	83 c0 3c             	add    eax,0x3c
c0025bc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0025bc6:	83 ec 0c             	sub    esp,0xc
c0025bc9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bcc:	ff d0                	call   eax
c0025bce:	83 c4 10             	add    esp,0x10
c0025bd1:	b8 00 00 00 00       	mov    eax,0x0
c0025bd6:	c9                   	leave  
c0025bd7:	c3                   	ret    

c0025bd8 <PIC::PIC()>:
c0025bd8:	83 ec 0c             	sub    esp,0xc
c0025bdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bdf:	83 ec 08             	sub    esp,0x8
c0025be2:	68 00 c6 02 c0       	push   0xc002c600
c0025be7:	50                   	push   eax
c0025be8:	e8 87 e8 fe ff       	call   c0014474 <InterruptController::InterruptController(char const*)>
c0025bed:	83 c4 10             	add    esp,0x10
c0025bf0:	ba 2c c6 02 c0       	mov    edx,0xc002c62c
c0025bf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bf9:	89 10                	mov    DWORD PTR [eax],edx
c0025bfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c05:	0f b6 d0             	movzx  edx,al
c0025c08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c0c:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025c13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c17:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c1d:	0f b6 d0             	movzx  edx,al
c0025c20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c24:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025c29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c2d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c33:	8d 50 01             	lea    edx,[eax+0x1]
c0025c36:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025c3a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025c40:	0f b6 d0             	movzx  edx,al
c0025c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c47:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025c4b:	83 e1 3f             	and    ecx,0x3f
c0025c4e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c56:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c5c:	0f b6 d0             	movzx  edx,al
c0025c5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c63:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c6e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c74:	0f b6 d0             	movzx  edx,al
c0025c77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c7b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c84:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c8a:	8d 50 01             	lea    edx,[eax+0x1]
c0025c8d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025c91:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025c97:	0f b6 d0             	movzx  edx,al
c0025c9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c9e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025ca2:	83 e1 3f             	and    ecx,0x3f
c0025ca5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025ca9:	90                   	nop
c0025caa:	83 c4 0c             	add    esp,0xc
c0025cad:	c3                   	ret    

c0025cae <PIC::ioWait()>:
c0025cae:	eb 00                	jmp    c0025cb0 <PIC::ioWait()+0x2>
c0025cb0:	eb 00                	jmp    c0025cb2 <PIC::ioWait()+0x4>
c0025cb2:	90                   	nop
c0025cb3:	c3                   	ret    

c0025cb4 <PIC::getIRQReg(int)>:
c0025cb4:	55                   	push   ebp
c0025cb5:	89 e5                	mov    ebp,esp
c0025cb7:	83 ec 10             	sub    esp,0x10
c0025cba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cbd:	0f b6 c0             	movzx  eax,al
c0025cc0:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025cc6:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025cc9:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025ccc:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025cd0:	ee                   	out    dx,al
c0025cd1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cd4:	0f b6 c0             	movzx  eax,al
c0025cd7:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025cdd:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025ce0:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025ce3:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025ce7:	ee                   	out    dx,al
c0025ce8:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025cee:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025cf2:	89 c2                	mov    edx,eax
c0025cf4:	ec                   	in     al,dx
c0025cf5:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025cf8:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025cfb:	0f b6 c0             	movzx  eax,al
c0025cfe:	c1 e0 08             	shl    eax,0x8
c0025d01:	89 c1                	mov    ecx,eax
c0025d03:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025d09:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025d0d:	89 c2                	mov    edx,eax
c0025d0f:	ec                   	in     al,dx
c0025d10:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025d13:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025d16:	0f b6 c0             	movzx  eax,al
c0025d19:	09 c8                	or     eax,ecx
c0025d1b:	c9                   	leave  
c0025d1c:	c3                   	ret    
c0025d1d:	90                   	nop

c0025d1e <PIC::eoi(unsigned char)>:
c0025d1e:	55                   	push   ebp
c0025d1f:	89 e5                	mov    ebp,esp
c0025d21:	83 ec 14             	sub    esp,0x14
c0025d24:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d27:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025d2a:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025d2e:	75 1e                	jne    c0025d4e <PIC::eoi(unsigned char)+0x30>
c0025d30:	6a 0b                	push   0xb
c0025d32:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d35:	e8 7a ff ff ff       	call   c0025cb4 <PIC::getIRQReg(int)>
c0025d3a:	83 c4 08             	add    esp,0x8
c0025d3d:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025d41:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025d45:	25 80 00 00 00       	and    eax,0x80
c0025d4a:	85 c0                	test   eax,eax
c0025d4c:	74 5f                	je     c0025dad <PIC::eoi(unsigned char)+0x8f>
c0025d4e:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025d52:	75 2d                	jne    c0025d81 <PIC::eoi(unsigned char)+0x63>
c0025d54:	6a 0b                	push   0xb
c0025d56:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d59:	e8 56 ff ff ff       	call   c0025cb4 <PIC::getIRQReg(int)>
c0025d5e:	83 c4 08             	add    esp,0x8
c0025d61:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025d65:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025d68:	66 85 c0             	test   ax,ax
c0025d6b:	78 14                	js     c0025d81 <PIC::eoi(unsigned char)+0x63>
c0025d6d:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025d73:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025d77:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025d7a:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025d7e:	ee                   	out    dx,al
c0025d7f:	eb 2d                	jmp    c0025dae <PIC::eoi(unsigned char)+0x90>
c0025d81:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025d85:	76 12                	jbe    c0025d99 <PIC::eoi(unsigned char)+0x7b>
c0025d87:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025d8d:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025d91:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025d94:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025d98:	ee                   	out    dx,al
c0025d99:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025d9f:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025da3:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025da6:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025daa:	ee                   	out    dx,al
c0025dab:	eb 01                	jmp    c0025dae <PIC::eoi(unsigned char)+0x90>
c0025dad:	90                   	nop
c0025dae:	c9                   	leave  
c0025daf:	c3                   	ret    

c0025db0 <PIC::remap()>:
c0025db0:	55                   	push   ebp
c0025db1:	89 e5                	mov    ebp,esp
c0025db3:	83 ec 48             	sub    esp,0x48
c0025db6:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025dbd:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025dc4:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025dca:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025dcd:	89 c2                	mov    edx,eax
c0025dcf:	ec                   	in     al,dx
c0025dd0:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025dd3:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025dd6:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025dd9:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025ddf:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025de2:	89 c2                	mov    edx,eax
c0025de4:	ec                   	in     al,dx
c0025de5:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025de8:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025deb:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025dee:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025df4:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025df8:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025dfb:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025dfe:	ee                   	out    dx,al
c0025dff:	83 ec 0c             	sub    esp,0xc
c0025e02:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e05:	e8 a4 fe ff ff       	call   c0025cae <PIC::ioWait()>
c0025e0a:	83 c4 10             	add    esp,0x10
c0025e0d:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025e13:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025e17:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025e1a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025e1d:	ee                   	out    dx,al
c0025e1e:	83 ec 0c             	sub    esp,0xc
c0025e21:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e24:	e8 85 fe ff ff       	call   c0025cae <PIC::ioWait()>
c0025e29:	83 c4 10             	add    esp,0x10
c0025e2c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025e2f:	0f b6 c0             	movzx  eax,al
c0025e32:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025e38:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025e3b:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025e3e:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025e41:	ee                   	out    dx,al
c0025e42:	83 ec 0c             	sub    esp,0xc
c0025e45:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e48:	e8 61 fe ff ff       	call   c0025cae <PIC::ioWait()>
c0025e4d:	83 c4 10             	add    esp,0x10
c0025e50:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025e53:	0f b6 c0             	movzx  eax,al
c0025e56:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0025e5c:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0025e5f:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0025e62:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025e65:	ee                   	out    dx,al
c0025e66:	83 ec 0c             	sub    esp,0xc
c0025e69:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e6c:	e8 3d fe ff ff       	call   c0025cae <PIC::ioWait()>
c0025e71:	83 c4 10             	add    esp,0x10
c0025e74:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0025e7a:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025e7e:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025e81:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0025e84:	ee                   	out    dx,al
c0025e85:	83 ec 0c             	sub    esp,0xc
c0025e88:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e8b:	e8 1e fe ff ff       	call   c0025cae <PIC::ioWait()>
c0025e90:	83 c4 10             	add    esp,0x10
c0025e93:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0025e99:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0025e9d:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0025ea0:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025ea3:	ee                   	out    dx,al
c0025ea4:	83 ec 0c             	sub    esp,0xc
c0025ea7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025eaa:	e8 ff fd ff ff       	call   c0025cae <PIC::ioWait()>
c0025eaf:	83 c4 10             	add    esp,0x10
c0025eb2:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0025eb8:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0025ebc:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0025ebf:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025ec2:	ee                   	out    dx,al
c0025ec3:	83 ec 0c             	sub    esp,0xc
c0025ec6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ec9:	e8 e0 fd ff ff       	call   c0025cae <PIC::ioWait()>
c0025ece:	83 c4 10             	add    esp,0x10
c0025ed1:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0025ed7:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0025edb:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0025ede:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025ee1:	ee                   	out    dx,al
c0025ee2:	83 ec 0c             	sub    esp,0xc
c0025ee5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ee8:	e8 c1 fd ff ff       	call   c0025cae <PIC::ioWait()>
c0025eed:	83 c4 10             	add    esp,0x10
c0025ef0:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0025ef4:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0025efa:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0025efd:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0025f00:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025f03:	ee                   	out    dx,al
c0025f04:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0025f08:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0025f0e:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0025f11:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0025f14:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025f17:	ee                   	out    dx,al
c0025f18:	90                   	nop
c0025f19:	c9                   	leave  
c0025f1a:	c3                   	ret    
c0025f1b:	90                   	nop

c0025f1c <PIC::open(int, int, void*)>:
c0025f1c:	55                   	push   ebp
c0025f1d:	89 e5                	mov    ebp,esp
c0025f1f:	83 ec 18             	sub    esp,0x18
c0025f22:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0025f28:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0025f2c:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025f2f:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025f33:	ee                   	out    dx,al
c0025f34:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0025f3a:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0025f3e:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025f41:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025f45:	ee                   	out    dx,al
c0025f46:	83 ec 0c             	sub    esp,0xc
c0025f49:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f4c:	e8 5f fe ff ff       	call   c0025db0 <PIC::remap()>
c0025f51:	83 c4 10             	add    esp,0x10
c0025f54:	b8 00 00 00 00       	mov    eax,0x0
c0025f59:	c9                   	leave  
c0025f5a:	c3                   	ret    
c0025f5b:	90                   	nop

c0025f5c <APICTimer::close(int, int, void*)>:
c0025f5c:	b8 00 00 00 00       	mov    eax,0x0
c0025f61:	c3                   	ret    

c0025f62 <apicTimerHandler(regs*, void*)>:
c0025f62:	83 ec 0c             	sub    esp,0xc
c0025f65:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f69:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f6b:	99                   	cdq    
c0025f6c:	52                   	push   edx
c0025f6d:	50                   	push   eax
c0025f6e:	6a 00                	push   0x0
c0025f70:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025f75:	e8 9a 07 00 00       	call   c0026714 <__udivdi3>
c0025f7a:	83 c4 10             	add    esp,0x10
c0025f7d:	83 ec 08             	sub    esp,0x8
c0025f80:	52                   	push   edx
c0025f81:	50                   	push   eax
c0025f82:	e8 44 06 ff ff       	call   c00165cb <timerHandler(unsigned long long)>
c0025f87:	83 c4 10             	add    esp,0x10
c0025f8a:	90                   	nop
c0025f8b:	83 c4 0c             	add    esp,0xc
c0025f8e:	c3                   	ret    
c0025f8f:	90                   	nop

c0025f90 <APICTimer::write(int)>:
c0025f90:	53                   	push   ebx
c0025f91:	83 ec 28             	sub    esp,0x28
c0025f94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025f98:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0025f9c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025fa2:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0025fa7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025fad:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025fb3:	83 ec 0c             	sub    esp,0xc
c0025fb6:	50                   	push   eax
c0025fb7:	e8 de f4 ff ff       	call   c002549a <APIC::getBase()>
c0025fbc:	83 c4 10             	add    esp,0x10
c0025fbf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025fc3:	a1 90 df 02 c0       	mov    eax,ds:0xc002df90
c0025fc8:	8b 15 94 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df94
c0025fce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025fd2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025fd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025fda:	05 e0 03 00 00       	add    eax,0x3e0
c0025fdf:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025fe5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025fe9:	05 80 03 00 00       	add    eax,0x380
c0025fee:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0025ff4:	fb                   	sti    
c0025ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ff9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025ffd:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026002:	83 d2 00             	adc    edx,0x0
c0026005:	89 c1                	mov    ecx,eax
c0026007:	89 d3                	mov    ebx,edx
c0026009:	a1 90 df 02 c0       	mov    eax,ds:0xc002df90
c002600e:	8b 15 94 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df94
c0026014:	39 c8                	cmp    eax,ecx
c0026016:	89 d0                	mov    eax,edx
c0026018:	19 d8                	sbb    eax,ebx
c002601a:	73 02                	jae    c002601e <APICTimer::write(int)+0x8e>
c002601c:	eb d7                	jmp    c0025ff5 <APICTimer::write(int)+0x65>
c002601e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026022:	05 20 03 00 00       	add    eax,0x320
c0026027:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c002602d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026031:	05 90 03 00 00       	add    eax,0x390
c0026036:	8b 00                	mov    eax,DWORD PTR [eax]
c0026038:	f7 d0                	not    eax
c002603a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002603e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026042:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026046:	ba 00 00 00 00       	mov    edx,0x0
c002604b:	f7 f3                	div    ebx
c002604d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026051:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026055:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002605b:	0d 00 00 02 00       	or     eax,0x20000
c0026060:	89 c2                	mov    edx,eax
c0026062:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026066:	05 20 03 00 00       	add    eax,0x320
c002606b:	89 10                	mov    DWORD PTR [eax],edx
c002606d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026071:	05 e0 03 00 00       	add    eax,0x3e0
c0026076:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002607c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026080:	05 80 03 00 00       	add    eax,0x380
c0026085:	89 c2                	mov    edx,eax
c0026087:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002608b:	89 02                	mov    DWORD PTR [edx],eax
c002608d:	90                   	nop
c002608e:	83 c4 28             	add    esp,0x28
c0026091:	5b                   	pop    ebx
c0026092:	c3                   	ret    
c0026093:	90                   	nop

c0026094 <APICTimer::open(int, int, void*)>:
c0026094:	57                   	push   edi
c0026095:	56                   	push   esi
c0026096:	53                   	push   ebx
c0026097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002609b:	8b 00                	mov    eax,DWORD PTR [eax]
c002609d:	83 c0 24             	add    eax,0x24
c00260a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00260a2:	83 ec 08             	sub    esp,0x8
c00260a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00260a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00260ad:	ff d0                	call   eax
c00260af:	83 c4 10             	add    esp,0x10
c00260b2:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c00260b7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00260bd:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00260c3:	83 ec 0c             	sub    esp,0xc
c00260c6:	50                   	push   eax
c00260c7:	e8 ce f3 ff ff       	call   c002549a <APIC::getBase()>
c00260cc:	83 c4 10             	add    esp,0x10
c00260cf:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00260d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260d9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00260df:	0f b6 f8             	movzx  edi,al
c00260e2:	89 d0                	mov    eax,edx
c00260e4:	ba 00 00 00 00       	mov    edx,0x0
c00260e9:	89 c1                	mov    ecx,eax
c00260eb:	80 e5 ff             	and    ch,0xff
c00260ee:	89 cb                	mov    ebx,ecx
c00260f0:	0f b6 f2             	movzx  esi,dl
c00260f3:	89 d8                	mov    eax,ebx
c00260f5:	89 f2                	mov    edx,esi
c00260f7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00260fb:	8d 5f 08             	lea    ebx,[edi+0x8]
c00260fe:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026102:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026106:	83 e0 00             	and    eax,0x0
c0026109:	09 d0                	or     eax,edx
c002610b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002610f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026113:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026119:	8d 50 01             	lea    edx,[eax+0x1]
c002611c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026120:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026126:	0f b6 d0             	movzx  edx,al
c0026129:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002612d:	83 c2 08             	add    edx,0x8
c0026130:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026134:	0f b6 c9             	movzx  ecx,cl
c0026137:	81 c9 00 00 01 00    	or     ecx,0x10000
c002613d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026141:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026145:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026149:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002614f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026153:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026157:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002615d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026161:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026167:	83 ec 0c             	sub    esp,0xc
c002616a:	51                   	push   ecx
c002616b:	6a 01                	push   0x1
c002616d:	68 62 5f 02 c0       	push   0xc0025f62
c0026172:	52                   	push   edx
c0026173:	50                   	push   eax
c0026174:	e8 05 d9 fe ff       	call   c0013a7e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026179:	83 c4 20             	add    esp,0x20
c002617c:	89 c2                	mov    edx,eax
c002617e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026182:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026188:	b8 00 00 00 00       	mov    eax,0x0
c002618d:	5b                   	pop    ebx
c002618e:	5e                   	pop    esi
c002618f:	5f                   	pop    edi
c0026190:	c3                   	ret    
c0026191:	90                   	nop

c0026192 <APICTimer::APICTimer()>:
c0026192:	83 ec 0c             	sub    esp,0xc
c0026195:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026199:	83 ec 08             	sub    esp,0x8
c002619c:	68 6c c6 02 c0       	push   0xc002c66c
c00261a1:	50                   	push   eax
c00261a2:	e8 95 03 ff ff       	call   c001653c <Timer::Timer(char const*)>
c00261a7:	83 c4 10             	add    esp,0x10
c00261aa:	ba 80 c6 02 c0       	mov    edx,0xc002c680
c00261af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261b3:	89 10                	mov    DWORD PTR [eax],edx
c00261b5:	90                   	nop
c00261b6:	83 c4 0c             	add    esp,0xc
c00261b9:	c3                   	ret    

c00261ba <PIT::write(int)>:
c00261ba:	83 ec 10             	sub    esp,0x10
c00261bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00261c1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00261c5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00261cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00261cf:	a3 c4 1c 03 c0       	mov    ds:0xc0031cc4,eax
c00261d4:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00261d9:	99                   	cdq    
c00261da:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00261de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00261e2:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00261e9:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00261ee:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00261f2:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00261f7:	ee                   	out    dx,al
c00261f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00261fc:	0f b6 c0             	movzx  eax,al
c00261ff:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026206:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002620a:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002620e:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026213:	ee                   	out    dx,al
c0026214:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026218:	c1 f8 08             	sar    eax,0x8
c002621b:	0f b6 c0             	movzx  eax,al
c002621e:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026225:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026229:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002622d:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026232:	ee                   	out    dx,al
c0026233:	90                   	nop
c0026234:	83 c4 10             	add    esp,0x10
c0026237:	c3                   	ret    

c0026238 <pitHandler(regs*, void*)>:
c0026238:	83 ec 0c             	sub    esp,0xc
c002623b:	a1 c4 1c 03 c0       	mov    eax,ds:0xc0031cc4
c0026240:	99                   	cdq    
c0026241:	52                   	push   edx
c0026242:	50                   	push   eax
c0026243:	6a 00                	push   0x0
c0026245:	68 00 ca 9a 3b       	push   0x3b9aca00
c002624a:	e8 c5 04 00 00       	call   c0026714 <__udivdi3>
c002624f:	83 c4 10             	add    esp,0x10
c0026252:	83 ec 08             	sub    esp,0x8
c0026255:	52                   	push   edx
c0026256:	50                   	push   eax
c0026257:	e8 6f 03 ff ff       	call   c00165cb <timerHandler(unsigned long long)>
c002625c:	83 c4 10             	add    esp,0x10
c002625f:	90                   	nop
c0026260:	83 c4 0c             	add    esp,0xc
c0026263:	c3                   	ret    

c0026264 <PIT::open(int, int, void*)>:
c0026264:	83 ec 0c             	sub    esp,0xc
c0026267:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002626b:	8b 00                	mov    eax,DWORD PTR [eax]
c002626d:	83 c0 24             	add    eax,0x24
c0026270:	8b 00                	mov    eax,DWORD PTR [eax]
c0026272:	83 ec 08             	sub    esp,0x8
c0026275:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026279:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002627d:	ff d0                	call   eax
c002627f:	83 c4 10             	add    esp,0x10
c0026282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026286:	83 ec 0c             	sub    esp,0xc
c0026289:	6a 00                	push   0x0
c002628b:	6a 01                	push   0x1
c002628d:	68 38 62 02 c0       	push   0xc0026238
c0026292:	6a 00                	push   0x0
c0026294:	50                   	push   eax
c0026295:	e8 e4 d7 fe ff       	call   c0013a7e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002629a:	83 c4 20             	add    esp,0x20
c002629d:	89 c2                	mov    edx,eax
c002629f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262a3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00262a9:	b8 00 00 00 00       	mov    eax,0x0
c00262ae:	83 c4 0c             	add    esp,0xc
c00262b1:	c3                   	ret    

c00262b2 <PIT::close(int, int, void*)>:
c00262b2:	83 ec 0c             	sub    esp,0xc
c00262b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262b9:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00262c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262c7:	6a 01                	push   0x1
c00262c9:	68 38 62 02 c0       	push   0xc0026238
c00262ce:	6a 00                	push   0x0
c00262d0:	50                   	push   eax
c00262d1:	e8 f2 d7 fe ff       	call   c0013ac8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00262d6:	83 c4 10             	add    esp,0x10
c00262d9:	b8 00 00 00 00       	mov    eax,0x0
c00262de:	83 c4 0c             	add    esp,0xc
c00262e1:	c3                   	ret    

c00262e2 <PIT::PIT()>:
c00262e2:	83 ec 0c             	sub    esp,0xc
c00262e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262e9:	83 ec 08             	sub    esp,0x8
c00262ec:	68 a8 c6 02 c0       	push   0xc002c6a8
c00262f1:	50                   	push   eax
c00262f2:	e8 45 02 ff ff       	call   c001653c <Timer::Timer(char const*)>
c00262f7:	83 c4 10             	add    esp,0x10
c00262fa:	ba d0 c6 02 c0       	mov    edx,0xc002c6d0
c00262ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026303:	89 10                	mov    DWORD PTR [eax],edx
c0026305:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026309:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002630f:	0f b6 d0             	movzx  edx,al
c0026312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026316:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002631d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026321:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026327:	0f b6 d0             	movzx  edx,al
c002632a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002632e:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026333:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026337:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002633d:	8d 50 01             	lea    edx,[eax+0x1]
c0026340:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026344:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002634a:	0f b6 d0             	movzx  edx,al
c002634d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026351:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026355:	83 e1 3f             	and    ecx,0x3f
c0026358:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002635c:	90                   	nop
c002635d:	83 c4 0c             	add    esp,0xc
c0026360:	c3                   	ret    
c0026361:	66 90                	xchg   ax,ax
c0026363:	66 90                	xchg   ax,ax
c0026365:	66 90                	xchg   ax,ax
c0026367:	66 90                	xchg   ax,ax
c0026369:	66 90                	xchg   ax,ax
c002636b:	66 90                	xchg   ax,ax
c002636d:	66 90                	xchg   ax,ax
c002636f:	90                   	nop

c0026370 <avxDetect>:
c0026370:	b8 00 00 00 00       	mov    eax,0x0
c0026375:	c3                   	ret    

c0026376 <avxSave>:
c0026376:	c3                   	ret    

c0026377 <avxLoad>:
c0026377:	c3                   	ret    

c0026378 <avxInit>:
c0026378:	c3                   	ret    

c0026379 <avxClose>:
c0026379:	c3                   	ret    

c002637a <wouldSheSayYes>:
c002637a:	c3                   	ret    
c002637b:	49                   	dec    ecx
c002637c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026380:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026384:	75 20                	jne    c00263a6 <sseDetect.noSSE+0x1>
c0026386:	4e                   	dec    esi
c0026387:	79 61                	jns    c00263ea <x87Detect+0x14>
c0026389:	68 2e 2e 2e 00       	push   0x2e2e2e
c002638e:	66 90                	xchg   ax,ax

c0026390 <absolutelyNoChanceInHell>:
c0026390:	b8 01 00 00 00       	mov    eax,0x1
c0026395:	0f a2                	cpuid  
c0026397:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002639d:	74 06                	je     c00263a5 <sseDetect.noSSE>
c002639f:	b8 01 00 00 00       	mov    eax,0x1
c00263a4:	c3                   	ret    

c00263a5 <sseDetect.noSSE>:
c00263a5:	31 c0                	xor    eax,eax
c00263a7:	c3                   	ret    

c00263a8 <sseSave>:
c00263a8:	0f ae 44 24 04       	fxsave [esp+0x4]
c00263ad:	c3                   	ret    

c00263ae <sseLoad>:
c00263ae:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c00263b3:	c3                   	ret    

c00263b4 <sseInit>:
c00263b4:	e8 49 00 00 00       	call   c0026402 <x87Init>
c00263b9:	0f 20 e0             	mov    eax,cr4
c00263bc:	66 0d 00 06          	or     ax,0x600
c00263c0:	0f 22 e0             	mov    cr4,eax
c00263c3:	c3                   	ret    

c00263c4 <sseClose>:
c00263c4:	c3                   	ret    
c00263c5:	66 90                	xchg   ax,ax
c00263c7:	66 90                	xchg   ax,ax
c00263c9:	66 90                	xchg   ax,ax
c00263cb:	66 90                	xchg   ax,ax
c00263cd:	66 90                	xchg   ax,ax
c00263cf:	90                   	nop

c00263d0 <value_37F>:
c00263d0:	7f 03                	jg     c00263d5 <value_37A+0x1>

c00263d2 <value_37E>:
c00263d2:	7e 03                	jle    c00263d7 <x87Detect+0x1>

c00263d4 <value_37A>:
c00263d4:	7a 03                	jp     c00263d9 <x87Detect+0x3>

c00263d6 <x87Detect>:
c00263d6:	b8 01 00 00 00       	mov    eax,0x1
c00263db:	0f a2                	cpuid  
c00263dd:	f7 c2 01 00 00 00    	test   edx,0x1
c00263e3:	74 06                	je     c00263eb <x87Detect.nox87>
c00263e5:	b8 01 00 00 00       	mov    eax,0x1
c00263ea:	c3                   	ret    

c00263eb <x87Detect.nox87>:
c00263eb:	b8 00 00 00 00       	mov    eax,0x0
c00263f0:	c3                   	ret    

c00263f1 <x87Save>:
c00263f1:	55                   	push   ebp
c00263f2:	89 e5                	mov    ebp,esp
c00263f4:	9b dd 75 08          	fsave  [ebp+0x8]
c00263f8:	c9                   	leave  
c00263f9:	c3                   	ret    

c00263fa <x87Load>:
c00263fa:	55                   	push   ebp
c00263fb:	89 e5                	mov    ebp,esp
c00263fd:	dd 65 08             	frstor [ebp+0x8]
c0026400:	c9                   	leave  
c0026401:	c3                   	ret    

c0026402 <x87Init>:
c0026402:	9b db e3             	finit  
c0026405:	0f 20 c0             	mov    eax,cr0
c0026408:	66 25 fb ff          	and    ax,0xfffb
c002640c:	66 0d 22 00          	or     ax,0x22
c0026410:	0f 22 c0             	mov    cr0,eax
c0026413:	0f 06                	clts   
c0026415:	d9 2d d4 63 02 c0    	fldcw  WORD PTR ds:0xc00263d4
c002641b:	c3                   	ret    

c002641c <x87Close>:
c002641c:	c3                   	ret    
c002641d:	66 90                	xchg   ax,ax
c002641f:	90                   	nop

c0026420 <__do_global_ctors_aux>:
c0026420:	a1 14 90 02 c0       	mov    eax,ds:0xc0029014
c0026425:	83 f8 ff             	cmp    eax,0xffffffff
c0026428:	74 1a                	je     c0026444 <__do_global_ctors_aux+0x24>
c002642a:	55                   	push   ebp
c002642b:	89 e5                	mov    ebp,esp
c002642d:	53                   	push   ebx
c002642e:	52                   	push   edx
c002642f:	bb 14 90 02 c0       	mov    ebx,0xc0029014
c0026434:	ff d0                	call   eax
c0026436:	83 eb 04             	sub    ebx,0x4
c0026439:	8b 03                	mov    eax,DWORD PTR [ebx]
c002643b:	83 f8 ff             	cmp    eax,0xffffffff
c002643e:	75 f4                	jne    c0026434 <__do_global_ctors_aux+0x14>
c0026440:	58                   	pop    eax
c0026441:	5b                   	pop    ebx
c0026442:	5d                   	pop    ebp
c0026443:	c3                   	ret    
c0026444:	c3                   	ret    
c0026445:	66 90                	xchg   ax,ax
c0026447:	90                   	nop

c0026448 <__divdi3>:
c0026448:	55                   	push   ebp
c0026449:	57                   	push   edi
c002644a:	56                   	push   esi
c002644b:	53                   	push   ebx
c002644c:	83 ec 1c             	sub    esp,0x1c
c002644f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026453:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026457:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002645a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002645e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026462:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026466:	85 db                	test   ebx,ebx
c0026468:	0f 88 8e 00 00 00    	js     c00264fc <__divdi3+0xb4>
c002646e:	89 dd                	mov    ebp,ebx
c0026470:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026478:	89 d3                	mov    ebx,edx
c002647a:	85 d2                	test   edx,edx
c002647c:	79 0d                	jns    c002648b <__divdi3+0x43>
c002647e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026482:	f7 d8                	neg    eax
c0026484:	83 d2 00             	adc    edx,0x0
c0026487:	f7 da                	neg    edx
c0026489:	89 d3                	mov    ebx,edx
c002648b:	89 c7                	mov    edi,eax
c002648d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026490:	85 db                	test   ebx,ebx
c0026492:	75 48                	jne    c00264dc <__divdi3+0x94>
c0026494:	39 ef                	cmp    edi,ebp
c0026496:	76 24                	jbe    c00264bc <__divdi3+0x74>
c0026498:	89 ea                	mov    edx,ebp
c002649a:	f7 f7                	div    edi
c002649c:	89 c1                	mov    ecx,eax
c002649e:	31 f6                	xor    esi,esi
c00264a0:	89 c8                	mov    eax,ecx
c00264a2:	89 f2                	mov    edx,esi
c00264a4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00264a8:	85 c9                	test   ecx,ecx
c00264aa:	74 07                	je     c00264b3 <__divdi3+0x6b>
c00264ac:	f7 d8                	neg    eax
c00264ae:	83 d2 00             	adc    edx,0x0
c00264b1:	f7 da                	neg    edx
c00264b3:	83 c4 1c             	add    esp,0x1c
c00264b6:	5b                   	pop    ebx
c00264b7:	5e                   	pop    esi
c00264b8:	5f                   	pop    edi
c00264b9:	5d                   	pop    ebp
c00264ba:	c3                   	ret    
c00264bb:	90                   	nop
c00264bc:	85 ff                	test   edi,edi
c00264be:	75 0b                	jne    c00264cb <__divdi3+0x83>
c00264c0:	b8 01 00 00 00       	mov    eax,0x1
c00264c5:	31 d2                	xor    edx,edx
c00264c7:	f7 f3                	div    ebx
c00264c9:	89 c7                	mov    edi,eax
c00264cb:	31 d2                	xor    edx,edx
c00264cd:	89 e8                	mov    eax,ebp
c00264cf:	f7 f7                	div    edi
c00264d1:	89 c6                	mov    esi,eax
c00264d3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00264d6:	f7 f7                	div    edi
c00264d8:	89 c1                	mov    ecx,eax
c00264da:	eb c4                	jmp    c00264a0 <__divdi3+0x58>
c00264dc:	39 eb                	cmp    ebx,ebp
c00264de:	77 3c                	ja     c002651c <__divdi3+0xd4>
c00264e0:	0f bd f3             	bsr    esi,ebx
c00264e3:	83 f6 1f             	xor    esi,0x1f
c00264e6:	75 40                	jne    c0026528 <__divdi3+0xe0>
c00264e8:	39 eb                	cmp    ebx,ebp
c00264ea:	72 09                	jb     c00264f5 <__divdi3+0xad>
c00264ec:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00264ef:	0f 87 97 00 00 00    	ja     c002658c <__divdi3+0x144>
c00264f5:	b9 01 00 00 00       	mov    ecx,0x1
c00264fa:	eb a4                	jmp    c00264a0 <__divdi3+0x58>
c00264fc:	f7 d9                	neg    ecx
c00264fe:	83 d3 00             	adc    ebx,0x0
c0026501:	f7 db                	neg    ebx
c0026503:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026506:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002650a:	89 dd                	mov    ebp,ebx
c002650c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026514:	e9 5f ff ff ff       	jmp    c0026478 <__divdi3+0x30>
c0026519:	8d 76 00             	lea    esi,[esi+0x0]
c002651c:	31 f6                	xor    esi,esi
c002651e:	31 c9                	xor    ecx,ecx
c0026520:	e9 7b ff ff ff       	jmp    c00264a0 <__divdi3+0x58>
c0026525:	8d 76 00             	lea    esi,[esi+0x0]
c0026528:	b8 20 00 00 00       	mov    eax,0x20
c002652d:	29 f0                	sub    eax,esi
c002652f:	89 f1                	mov    ecx,esi
c0026531:	d3 e3                	shl    ebx,cl
c0026533:	89 fa                	mov    edx,edi
c0026535:	88 c1                	mov    cl,al
c0026537:	d3 ea                	shr    edx,cl
c0026539:	09 da                	or     edx,ebx
c002653b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002653f:	89 f1                	mov    ecx,esi
c0026541:	d3 e7                	shl    edi,cl
c0026543:	89 eb                	mov    ebx,ebp
c0026545:	88 c1                	mov    cl,al
c0026547:	d3 eb                	shr    ebx,cl
c0026549:	89 f1                	mov    ecx,esi
c002654b:	d3 e5                	shl    ebp,cl
c002654d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026550:	88 c1                	mov    cl,al
c0026552:	d3 ea                	shr    edx,cl
c0026554:	09 d5                	or     ebp,edx
c0026556:	89 e8                	mov    eax,ebp
c0026558:	89 da                	mov    edx,ebx
c002655a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002655e:	89 d3                	mov    ebx,edx
c0026560:	89 c5                	mov    ebp,eax
c0026562:	f7 e7                	mul    edi
c0026564:	39 d3                	cmp    ebx,edx
c0026566:	72 18                	jb     c0026580 <__divdi3+0x138>
c0026568:	74 0a                	je     c0026574 <__divdi3+0x12c>
c002656a:	89 e9                	mov    ecx,ebp
c002656c:	31 f6                	xor    esi,esi
c002656e:	e9 2d ff ff ff       	jmp    c00264a0 <__divdi3+0x58>
c0026573:	90                   	nop
c0026574:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026577:	89 f1                	mov    ecx,esi
c0026579:	d3 e7                	shl    edi,cl
c002657b:	39 c7                	cmp    edi,eax
c002657d:	73 eb                	jae    c002656a <__divdi3+0x122>
c002657f:	90                   	nop
c0026580:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0026583:	31 f6                	xor    esi,esi
c0026585:	e9 16 ff ff ff       	jmp    c00264a0 <__divdi3+0x58>
c002658a:	66 90                	xchg   ax,ax
c002658c:	31 c9                	xor    ecx,ecx
c002658e:	e9 0d ff ff ff       	jmp    c00264a0 <__divdi3+0x58>
c0026593:	90                   	nop

c0026594 <__moddi3>:
c0026594:	55                   	push   ebp
c0026595:	57                   	push   edi
c0026596:	56                   	push   esi
c0026597:	53                   	push   ebx
c0026598:	83 ec 2c             	sub    esp,0x2c
c002659b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002659f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00265a3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00265a7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00265ab:	85 db                	test   ebx,ebx
c00265ad:	0f 88 85 00 00 00    	js     c0026638 <__moddi3+0xa4>
c00265b3:	89 de                	mov    esi,ebx
c00265b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00265bd:	89 d7                	mov    edi,edx
c00265bf:	85 d2                	test   edx,edx
c00265c1:	79 09                	jns    c00265cc <__moddi3+0x38>
c00265c3:	f7 d8                	neg    eax
c00265c5:	83 d2 00             	adc    edx,0x0
c00265c8:	f7 da                	neg    edx
c00265ca:	89 d7                	mov    edi,edx
c00265cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00265d0:	89 cd                	mov    ebp,ecx
c00265d2:	85 ff                	test   edi,edi
c00265d4:	75 52                	jne    c0026628 <__moddi3+0x94>
c00265d6:	89 c3                	mov    ebx,eax
c00265d8:	39 f0                	cmp    eax,esi
c00265da:	76 24                	jbe    c0026600 <__moddi3+0x6c>
c00265dc:	89 c8                	mov    eax,ecx
c00265de:	89 f2                	mov    edx,esi
c00265e0:	f7 f3                	div    ebx
c00265e2:	89 d6                	mov    esi,edx
c00265e4:	89 f0                	mov    eax,esi
c00265e6:	31 d2                	xor    edx,edx
c00265e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00265ec:	85 c9                	test   ecx,ecx
c00265ee:	74 07                	je     c00265f7 <__moddi3+0x63>
c00265f0:	f7 d8                	neg    eax
c00265f2:	83 d2 00             	adc    edx,0x0
c00265f5:	f7 da                	neg    edx
c00265f7:	83 c4 2c             	add    esp,0x2c
c00265fa:	5b                   	pop    ebx
c00265fb:	5e                   	pop    esi
c00265fc:	5f                   	pop    edi
c00265fd:	5d                   	pop    ebp
c00265fe:	c3                   	ret    
c00265ff:	90                   	nop
c0026600:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0026604:	85 db                	test   ebx,ebx
c0026606:	75 0d                	jne    c0026615 <__moddi3+0x81>
c0026608:	b8 01 00 00 00       	mov    eax,0x1
c002660d:	31 d2                	xor    edx,edx
c002660f:	f7 f7                	div    edi
c0026611:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026615:	89 f0                	mov    eax,esi
c0026617:	31 d2                	xor    edx,edx
c0026619:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002661d:	f7 f7                	div    edi
c002661f:	89 e8                	mov    eax,ebp
c0026621:	f7 f7                	div    edi
c0026623:	89 d6                	mov    esi,edx
c0026625:	eb bd                	jmp    c00265e4 <__moddi3+0x50>
c0026627:	90                   	nop
c0026628:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002662c:	39 f7                	cmp    edi,esi
c002662e:	76 20                	jbe    c0026650 <__moddi3+0xbc>
c0026630:	89 c8                	mov    eax,ecx
c0026632:	89 f2                	mov    edx,esi
c0026634:	eb b2                	jmp    c00265e8 <__moddi3+0x54>
c0026636:	66 90                	xchg   ax,ax
c0026638:	f7 d9                	neg    ecx
c002663a:	83 d3 00             	adc    ebx,0x0
c002663d:	f7 db                	neg    ebx
c002663f:	89 de                	mov    esi,ebx
c0026641:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026649:	e9 6f ff ff ff       	jmp    c00265bd <__moddi3+0x29>
c002664e:	66 90                	xchg   ax,ax
c0026650:	0f bd c7             	bsr    eax,edi
c0026653:	83 f0 1f             	xor    eax,0x1f
c0026656:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002665a:	75 24                	jne    c0026680 <__moddi3+0xec>
c002665c:	39 f7                	cmp    edi,esi
c002665e:	72 06                	jb     c0026666 <__moddi3+0xd2>
c0026660:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026664:	77 0c                	ja     c0026672 <__moddi3+0xde>
c0026666:	89 e9                	mov    ecx,ebp
c0026668:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002666c:	19 fe                	sbb    esi,edi
c002666e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026672:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026676:	89 f2                	mov    edx,esi
c0026678:	e9 6b ff ff ff       	jmp    c00265e8 <__moddi3+0x54>
c002667d:	8d 76 00             	lea    esi,[esi+0x0]
c0026680:	b8 20 00 00 00       	mov    eax,0x20
c0026685:	89 c2                	mov    edx,eax
c0026687:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002668b:	29 da                	sub    edx,ebx
c002668d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026691:	88 d9                	mov    cl,bl
c0026693:	d3 e7                	shl    edi,cl
c0026695:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026699:	88 d1                	mov    cl,dl
c002669b:	d3 e8                	shr    eax,cl
c002669d:	09 c7                	or     edi,eax
c002669f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00266a3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00266a7:	89 d8                	mov    eax,ebx
c00266a9:	88 d9                	mov    cl,bl
c00266ab:	d3 e7                	shl    edi,cl
c00266ad:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00266b1:	89 f3                	mov    ebx,esi
c00266b3:	88 d1                	mov    cl,dl
c00266b5:	d3 eb                	shr    ebx,cl
c00266b7:	89 c7                	mov    edi,eax
c00266b9:	88 c1                	mov    cl,al
c00266bb:	d3 e6                	shl    esi,cl
c00266bd:	89 e8                	mov    eax,ebp
c00266bf:	88 d1                	mov    cl,dl
c00266c1:	d3 e8                	shr    eax,cl
c00266c3:	09 f0                	or     eax,esi
c00266c5:	89 f9                	mov    ecx,edi
c00266c7:	d3 e5                	shl    ebp,cl
c00266c9:	89 da                	mov    edx,ebx
c00266cb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00266cf:	89 d3                	mov    ebx,edx
c00266d1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00266d5:	89 c6                	mov    esi,eax
c00266d7:	89 d1                	mov    ecx,edx
c00266d9:	39 d3                	cmp    ebx,edx
c00266db:	72 27                	jb     c0026704 <__moddi3+0x170>
c00266dd:	74 21                	je     c0026700 <__moddi3+0x16c>
c00266df:	29 f5                	sub    ebp,esi
c00266e1:	19 cb                	sbb    ebx,ecx
c00266e3:	89 de                	mov    esi,ebx
c00266e5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00266e9:	d3 e6                	shl    esi,cl
c00266eb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00266ef:	89 f9                	mov    ecx,edi
c00266f1:	d3 ed                	shr    ebp,cl
c00266f3:	09 ee                	or     esi,ebp
c00266f5:	89 f0                	mov    eax,esi
c00266f7:	d3 eb                	shr    ebx,cl
c00266f9:	89 da                	mov    edx,ebx
c00266fb:	e9 e8 fe ff ff       	jmp    c00265e8 <__moddi3+0x54>
c0026700:	39 c5                	cmp    ebp,eax
c0026702:	73 db                	jae    c00266df <__moddi3+0x14b>
c0026704:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026708:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002670c:	89 d1                	mov    ecx,edx
c002670e:	89 c6                	mov    esi,eax
c0026710:	eb cd                	jmp    c00266df <__moddi3+0x14b>
c0026712:	66 90                	xchg   ax,ax

c0026714 <__udivdi3>:
c0026714:	55                   	push   ebp
c0026715:	57                   	push   edi
c0026716:	56                   	push   esi
c0026717:	53                   	push   ebx
c0026718:	83 ec 1c             	sub    esp,0x1c
c002671b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002671f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026723:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026727:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002672b:	85 d2                	test   edx,edx
c002672d:	75 41                	jne    c0026770 <__udivdi3+0x5c>
c002672f:	39 f7                	cmp    edi,esi
c0026731:	76 15                	jbe    c0026748 <__udivdi3+0x34>
c0026733:	89 e8                	mov    eax,ebp
c0026735:	89 f2                	mov    edx,esi
c0026737:	f7 f7                	div    edi
c0026739:	31 db                	xor    ebx,ebx
c002673b:	89 da                	mov    edx,ebx
c002673d:	83 c4 1c             	add    esp,0x1c
c0026740:	5b                   	pop    ebx
c0026741:	5e                   	pop    esi
c0026742:	5f                   	pop    edi
c0026743:	5d                   	pop    ebp
c0026744:	c3                   	ret    
c0026745:	8d 76 00             	lea    esi,[esi+0x0]
c0026748:	89 f9                	mov    ecx,edi
c002674a:	85 ff                	test   edi,edi
c002674c:	75 0b                	jne    c0026759 <__udivdi3+0x45>
c002674e:	b8 01 00 00 00       	mov    eax,0x1
c0026753:	31 d2                	xor    edx,edx
c0026755:	f7 f7                	div    edi
c0026757:	89 c1                	mov    ecx,eax
c0026759:	31 d2                	xor    edx,edx
c002675b:	89 f0                	mov    eax,esi
c002675d:	f7 f1                	div    ecx
c002675f:	89 c3                	mov    ebx,eax
c0026761:	89 e8                	mov    eax,ebp
c0026763:	f7 f1                	div    ecx
c0026765:	89 da                	mov    edx,ebx
c0026767:	83 c4 1c             	add    esp,0x1c
c002676a:	5b                   	pop    ebx
c002676b:	5e                   	pop    esi
c002676c:	5f                   	pop    edi
c002676d:	5d                   	pop    ebp
c002676e:	c3                   	ret    
c002676f:	90                   	nop
c0026770:	39 f2                	cmp    edx,esi
c0026772:	77 1c                	ja     c0026790 <__udivdi3+0x7c>
c0026774:	0f bd da             	bsr    ebx,edx
c0026777:	83 f3 1f             	xor    ebx,0x1f
c002677a:	75 24                	jne    c00267a0 <__udivdi3+0x8c>
c002677c:	39 f2                	cmp    edx,esi
c002677e:	72 08                	jb     c0026788 <__udivdi3+0x74>
c0026780:	39 ef                	cmp    edi,ebp
c0026782:	0f 87 84 00 00 00    	ja     c002680c <__udivdi3+0xf8>
c0026788:	b8 01 00 00 00       	mov    eax,0x1
c002678d:	eb ac                	jmp    c002673b <__udivdi3+0x27>
c002678f:	90                   	nop
c0026790:	31 db                	xor    ebx,ebx
c0026792:	31 c0                	xor    eax,eax
c0026794:	89 da                	mov    edx,ebx
c0026796:	83 c4 1c             	add    esp,0x1c
c0026799:	5b                   	pop    ebx
c002679a:	5e                   	pop    esi
c002679b:	5f                   	pop    edi
c002679c:	5d                   	pop    ebp
c002679d:	c3                   	ret    
c002679e:	66 90                	xchg   ax,ax
c00267a0:	b8 20 00 00 00       	mov    eax,0x20
c00267a5:	29 d8                	sub    eax,ebx
c00267a7:	88 d9                	mov    cl,bl
c00267a9:	d3 e2                	shl    edx,cl
c00267ab:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00267af:	89 fa                	mov    edx,edi
c00267b1:	88 c1                	mov    cl,al
c00267b3:	d3 ea                	shr    edx,cl
c00267b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00267b9:	09 d1                	or     ecx,edx
c00267bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00267bf:	88 d9                	mov    cl,bl
c00267c1:	d3 e7                	shl    edi,cl
c00267c3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00267c7:	89 f7                	mov    edi,esi
c00267c9:	88 c1                	mov    cl,al
c00267cb:	d3 ef                	shr    edi,cl
c00267cd:	88 d9                	mov    cl,bl
c00267cf:	d3 e6                	shl    esi,cl
c00267d1:	89 ea                	mov    edx,ebp
c00267d3:	88 c1                	mov    cl,al
c00267d5:	d3 ea                	shr    edx,cl
c00267d7:	09 d6                	or     esi,edx
c00267d9:	89 f0                	mov    eax,esi
c00267db:	89 fa                	mov    edx,edi
c00267dd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00267e1:	89 d7                	mov    edi,edx
c00267e3:	89 c6                	mov    esi,eax
c00267e5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00267e9:	39 d7                	cmp    edi,edx
c00267eb:	72 13                	jb     c0026800 <__udivdi3+0xec>
c00267ed:	74 09                	je     c00267f8 <__udivdi3+0xe4>
c00267ef:	89 f0                	mov    eax,esi
c00267f1:	31 db                	xor    ebx,ebx
c00267f3:	e9 43 ff ff ff       	jmp    c002673b <__udivdi3+0x27>
c00267f8:	88 d9                	mov    cl,bl
c00267fa:	d3 e5                	shl    ebp,cl
c00267fc:	39 c5                	cmp    ebp,eax
c00267fe:	73 ef                	jae    c00267ef <__udivdi3+0xdb>
c0026800:	8d 46 ff             	lea    eax,[esi-0x1]
c0026803:	31 db                	xor    ebx,ebx
c0026805:	e9 31 ff ff ff       	jmp    c002673b <__udivdi3+0x27>
c002680a:	66 90                	xchg   ax,ax
c002680c:	31 c0                	xor    eax,eax
c002680e:	e9 28 ff ff ff       	jmp    c002673b <__udivdi3+0x27>
c0026813:	90                   	nop

c0026814 <__umoddi3>:
c0026814:	55                   	push   ebp
c0026815:	57                   	push   edi
c0026816:	56                   	push   esi
c0026817:	53                   	push   ebx
c0026818:	83 ec 1c             	sub    esp,0x1c
c002681b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002681f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026823:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026827:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002682b:	89 da                	mov    edx,ebx
c002682d:	85 c0                	test   eax,eax
c002682f:	75 37                	jne    c0026868 <__umoddi3+0x54>
c0026831:	39 df                	cmp    edi,ebx
c0026833:	76 13                	jbe    c0026848 <__umoddi3+0x34>
c0026835:	89 f0                	mov    eax,esi
c0026837:	f7 f7                	div    edi
c0026839:	89 d0                	mov    eax,edx
c002683b:	31 d2                	xor    edx,edx
c002683d:	83 c4 1c             	add    esp,0x1c
c0026840:	5b                   	pop    ebx
c0026841:	5e                   	pop    esi
c0026842:	5f                   	pop    edi
c0026843:	5d                   	pop    ebp
c0026844:	c3                   	ret    
c0026845:	8d 76 00             	lea    esi,[esi+0x0]
c0026848:	89 fd                	mov    ebp,edi
c002684a:	85 ff                	test   edi,edi
c002684c:	75 0b                	jne    c0026859 <__umoddi3+0x45>
c002684e:	b8 01 00 00 00       	mov    eax,0x1
c0026853:	31 d2                	xor    edx,edx
c0026855:	f7 f7                	div    edi
c0026857:	89 c5                	mov    ebp,eax
c0026859:	89 d8                	mov    eax,ebx
c002685b:	31 d2                	xor    edx,edx
c002685d:	f7 f5                	div    ebp
c002685f:	89 f0                	mov    eax,esi
c0026861:	f7 f5                	div    ebp
c0026863:	89 d0                	mov    eax,edx
c0026865:	eb d4                	jmp    c002683b <__umoddi3+0x27>
c0026867:	90                   	nop
c0026868:	89 f1                	mov    ecx,esi
c002686a:	39 d8                	cmp    eax,ebx
c002686c:	76 0a                	jbe    c0026878 <__umoddi3+0x64>
c002686e:	89 f0                	mov    eax,esi
c0026870:	83 c4 1c             	add    esp,0x1c
c0026873:	5b                   	pop    ebx
c0026874:	5e                   	pop    esi
c0026875:	5f                   	pop    edi
c0026876:	5d                   	pop    ebp
c0026877:	c3                   	ret    
c0026878:	0f bd e8             	bsr    ebp,eax
c002687b:	83 f5 1f             	xor    ebp,0x1f
c002687e:	75 1c                	jne    c002689c <__umoddi3+0x88>
c0026880:	39 d8                	cmp    eax,ebx
c0026882:	72 04                	jb     c0026888 <__umoddi3+0x74>
c0026884:	39 f7                	cmp    edi,esi
c0026886:	77 08                	ja     c0026890 <__umoddi3+0x7c>
c0026888:	89 da                	mov    edx,ebx
c002688a:	29 fe                	sub    esi,edi
c002688c:	19 c2                	sbb    edx,eax
c002688e:	89 f1                	mov    ecx,esi
c0026890:	89 c8                	mov    eax,ecx
c0026892:	83 c4 1c             	add    esp,0x1c
c0026895:	5b                   	pop    ebx
c0026896:	5e                   	pop    esi
c0026897:	5f                   	pop    edi
c0026898:	5d                   	pop    ebp
c0026899:	c3                   	ret    
c002689a:	66 90                	xchg   ax,ax
c002689c:	ba 20 00 00 00       	mov    edx,0x20
c00268a1:	29 ea                	sub    edx,ebp
c00268a3:	89 e9                	mov    ecx,ebp
c00268a5:	d3 e0                	shl    eax,cl
c00268a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00268ab:	89 f8                	mov    eax,edi
c00268ad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00268b1:	88 d1                	mov    cl,dl
c00268b3:	d3 e8                	shr    eax,cl
c00268b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00268b9:	09 c1                	or     ecx,eax
c00268bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00268bf:	89 e9                	mov    ecx,ebp
c00268c1:	d3 e7                	shl    edi,cl
c00268c3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00268c7:	89 d8                	mov    eax,ebx
c00268c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00268cd:	88 d1                	mov    cl,dl
c00268cf:	d3 e8                	shr    eax,cl
c00268d1:	89 c7                	mov    edi,eax
c00268d3:	89 e9                	mov    ecx,ebp
c00268d5:	d3 e3                	shl    ebx,cl
c00268d7:	89 f0                	mov    eax,esi
c00268d9:	88 d1                	mov    cl,dl
c00268db:	d3 e8                	shr    eax,cl
c00268dd:	09 d8                	or     eax,ebx
c00268df:	89 e9                	mov    ecx,ebp
c00268e1:	d3 e6                	shl    esi,cl
c00268e3:	89 f3                	mov    ebx,esi
c00268e5:	89 fa                	mov    edx,edi
c00268e7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00268eb:	89 d1                	mov    ecx,edx
c00268ed:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00268f1:	89 c6                	mov    esi,eax
c00268f3:	89 d7                	mov    edi,edx
c00268f5:	39 d1                	cmp    ecx,edx
c00268f7:	72 27                	jb     c0026920 <__umoddi3+0x10c>
c00268f9:	74 21                	je     c002691c <__umoddi3+0x108>
c00268fb:	89 ca                	mov    edx,ecx
c00268fd:	29 f3                	sub    ebx,esi
c00268ff:	19 fa                	sbb    edx,edi
c0026901:	89 d0                	mov    eax,edx
c0026903:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026907:	d3 e0                	shl    eax,cl
c0026909:	89 e9                	mov    ecx,ebp
c002690b:	d3 eb                	shr    ebx,cl
c002690d:	09 d8                	or     eax,ebx
c002690f:	d3 ea                	shr    edx,cl
c0026911:	83 c4 1c             	add    esp,0x1c
c0026914:	5b                   	pop    ebx
c0026915:	5e                   	pop    esi
c0026916:	5f                   	pop    edi
c0026917:	5d                   	pop    ebp
c0026918:	c3                   	ret    
c0026919:	8d 76 00             	lea    esi,[esi+0x0]
c002691c:	39 c3                	cmp    ebx,eax
c002691e:	73 db                	jae    c00268fb <__umoddi3+0xe7>
c0026920:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026924:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026928:	89 d7                	mov    edi,edx
c002692a:	89 c6                	mov    esi,eax
c002692c:	eb cd                	jmp    c00268fb <__umoddi3+0xe7>

c002692e <__addsf3>:
c002692e:	55                   	push   ebp
c002692f:	89 e5                	mov    ebp,esp
c0026931:	57                   	push   edi
c0026932:	56                   	push   esi
c0026933:	53                   	push   ebx
c0026934:	83 ec 08             	sub    esp,0x8
c0026937:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002693a:	89 fa                	mov    edx,edi
c002693c:	89 f8                	mov    eax,edi
c002693e:	c1 f8 17             	sar    eax,0x17
c0026941:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026944:	c1 e2 08             	shl    edx,0x8
c0026947:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002694d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026950:	89 de                	mov    esi,ebx
c0026952:	c1 fe 17             	sar    esi,0x17
c0026955:	c1 e3 08             	shl    ebx,0x8
c0026958:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002695e:	31 f0                	xor    eax,esi
c0026960:	0f 88 3b 01 00 00    	js     c0026aa1 <__addsf3+0x173>
c0026966:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026969:	29 f1                	sub    ecx,esi
c002696b:	85 c9                	test   ecx,ecx
c002696d:	7e 54                	jle    c00269c3 <__addsf3+0x95>
c002696f:	89 f0                	mov    eax,esi
c0026971:	84 c0                	test   al,al
c0026973:	75 10                	jne    c0026985 <__addsf3+0x57>
c0026975:	85 db                	test   ebx,ebx
c0026977:	0f 84 aa 02 00 00    	je     c0026c27 <__addsf3+0x2f9>
c002697d:	49                   	dec    ecx
c002697e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026981:	74 38                	je     c00269bb <__addsf3+0x8d>
c0026983:	eb 13                	jmp    c0026998 <__addsf3+0x6a>
c0026985:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026988:	f7 d0                	not    eax
c002698a:	84 c0                	test   al,al
c002698c:	0f 84 95 02 00 00    	je     c0026c27 <__addsf3+0x2f9>
c0026992:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026998:	83 f9 1f             	cmp    ecx,0x1f
c002699b:	0f 8f 86 02 00 00    	jg     c0026c27 <__addsf3+0x2f9>
c00269a1:	89 de                	mov    esi,ebx
c00269a3:	d3 ee                	shr    esi,cl
c00269a5:	b8 20 00 00 00       	mov    eax,0x20
c00269aa:	29 c8                	sub    eax,ecx
c00269ac:	89 c1                	mov    ecx,eax
c00269ae:	d3 e3                	shl    ebx,cl
c00269b0:	31 c0                	xor    eax,eax
c00269b2:	85 db                	test   ebx,ebx
c00269b4:	0f 95 c0             	setne  al
c00269b7:	09 f0                	or     eax,esi
c00269b9:	01 d0                	add    eax,edx
c00269bb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00269be:	e9 b6 00 00 00       	jmp    c0026a79 <__addsf3+0x14b>
c00269c3:	74 5c                	je     c0026a21 <__addsf3+0xf3>
c00269c5:	89 f1                	mov    ecx,esi
c00269c7:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00269ca:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00269cd:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00269d1:	75 14                	jne    c00269e7 <__addsf3+0xb9>
c00269d3:	85 d2                	test   edx,edx
c00269d5:	0f 84 4c 02 00 00    	je     c0026c27 <__addsf3+0x2f9>
c00269db:	49                   	dec    ecx
c00269dc:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00269df:	0f 84 94 00 00 00    	je     c0026a79 <__addsf3+0x14b>
c00269e5:	eb 12                	jmp    c00269f9 <__addsf3+0xcb>
c00269e7:	89 f0                	mov    eax,esi
c00269e9:	f7 d0                	not    eax
c00269eb:	84 c0                	test   al,al
c00269ed:	0f 84 34 02 00 00    	je     c0026c27 <__addsf3+0x2f9>
c00269f3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00269f9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00269fc:	83 f9 1f             	cmp    ecx,0x1f
c00269ff:	0f 8f 22 02 00 00    	jg     c0026c27 <__addsf3+0x2f9>
c0026a05:	89 d7                	mov    edi,edx
c0026a07:	d3 ef                	shr    edi,cl
c0026a09:	b8 20 00 00 00       	mov    eax,0x20
c0026a0e:	29 c8                	sub    eax,ecx
c0026a10:	89 c1                	mov    ecx,eax
c0026a12:	d3 e2                	shl    edx,cl
c0026a14:	31 c0                	xor    eax,eax
c0026a16:	85 d2                	test   edx,edx
c0026a18:	0f 95 c0             	setne  al
c0026a1b:	09 f8                	or     eax,edi
c0026a1d:	01 d8                	add    eax,ebx
c0026a1f:	eb 58                	jmp    c0026a79 <__addsf3+0x14b>
c0026a21:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026a24:	8d 70 01             	lea    esi,[eax+0x1]
c0026a27:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026a2d:	75 32                	jne    c0026a61 <__addsf3+0x133>
c0026a2f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026a33:	75 1f                	jne    c0026a54 <__addsf3+0x126>
c0026a35:	85 d2                	test   edx,edx
c0026a37:	0f 84 e0 01 00 00    	je     c0026c1d <__addsf3+0x2ef>
c0026a3d:	85 db                	test   ebx,ebx
c0026a3f:	0f 84 e2 01 00 00    	je     c0026c27 <__addsf3+0x2f9>
c0026a45:	89 d0                	mov    eax,edx
c0026a47:	01 d8                	add    eax,ebx
c0026a49:	0f 89 a9 01 00 00    	jns    c0026bf8 <__addsf3+0x2ca>
c0026a4f:	e9 9d 01 00 00       	jmp    c0026bf1 <__addsf3+0x2c3>
c0026a54:	85 d2                	test   edx,edx
c0026a56:	0f 85 cb 01 00 00    	jne    c0026c27 <__addsf3+0x2f9>
c0026a5c:	e9 bc 01 00 00       	jmp    c0026c1d <__addsf3+0x2ef>
c0026a61:	31 c0                	xor    eax,eax
c0026a63:	89 f1                	mov    ecx,esi
c0026a65:	f7 d1                	not    ecx
c0026a67:	84 c9                	test   cl,cl
c0026a69:	0f 84 90 01 00 00    	je     c0026bff <__addsf3+0x2d1>
c0026a6f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026a72:	d1 e8                	shr    eax,1
c0026a74:	e9 86 01 00 00       	jmp    c0026bff <__addsf3+0x2d1>
c0026a79:	85 c0                	test   eax,eax
c0026a7b:	0f 89 7e 01 00 00    	jns    c0026bff <__addsf3+0x2d1>
c0026a81:	46                   	inc    esi
c0026a82:	89 f2                	mov    edx,esi
c0026a84:	f7 d2                	not    edx
c0026a86:	84 d2                	test   dl,dl
c0026a88:	0f 84 6f 01 00 00    	je     c0026bfd <__addsf3+0x2cf>
c0026a8e:	89 c2                	mov    edx,eax
c0026a90:	83 e2 01             	and    edx,0x1
c0026a93:	d1 e8                	shr    eax,1
c0026a95:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026a9a:	09 d0                	or     eax,edx
c0026a9c:	e9 5e 01 00 00       	jmp    c0026bff <__addsf3+0x2d1>
c0026aa1:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026aa5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026aa8:	89 f0                	mov    eax,esi
c0026aaa:	0f b6 c0             	movzx  eax,al
c0026aad:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026ab0:	29 c1                	sub    ecx,eax
c0026ab2:	85 c9                	test   ecx,ecx
c0026ab4:	7e 55                	jle    c0026b0b <__addsf3+0x1dd>
c0026ab6:	85 c0                	test   eax,eax
c0026ab8:	75 11                	jne    c0026acb <__addsf3+0x19d>
c0026aba:	85 db                	test   ebx,ebx
c0026abc:	0f 84 65 01 00 00    	je     c0026c27 <__addsf3+0x2f9>
c0026ac2:	49                   	dec    ecx
c0026ac3:	75 19                	jne    c0026ade <__addsf3+0x1b0>
c0026ac5:	89 d0                	mov    eax,edx
c0026ac7:	29 d8                	sub    eax,ebx
c0026ac9:	eb 38                	jmp    c0026b03 <__addsf3+0x1d5>
c0026acb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026ace:	f7 d0                	not    eax
c0026ad0:	84 c0                	test   al,al
c0026ad2:	0f 84 4f 01 00 00    	je     c0026c27 <__addsf3+0x2f9>
c0026ad8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026ade:	83 f9 1f             	cmp    ecx,0x1f
c0026ae1:	0f 8f 40 01 00 00    	jg     c0026c27 <__addsf3+0x2f9>
c0026ae7:	89 de                	mov    esi,ebx
c0026ae9:	d3 ee                	shr    esi,cl
c0026aeb:	b8 20 00 00 00       	mov    eax,0x20
c0026af0:	29 c8                	sub    eax,ecx
c0026af2:	89 c1                	mov    ecx,eax
c0026af4:	d3 e3                	shl    ebx,cl
c0026af6:	31 c0                	xor    eax,eax
c0026af8:	85 db                	test   ebx,ebx
c0026afa:	0f 95 c0             	setne  al
c0026afd:	09 f0                	or     eax,esi
c0026aff:	29 c2                	sub    edx,eax
c0026b01:	89 d0                	mov    eax,edx
c0026b03:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026b06:	e9 af 00 00 00       	jmp    c0026bba <__addsf3+0x28c>
c0026b0b:	74 5c                	je     c0026b69 <__addsf3+0x23b>
c0026b0d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026b10:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b13:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026b17:	75 14                	jne    c0026b2d <__addsf3+0x1ff>
c0026b19:	85 d2                	test   edx,edx
c0026b1b:	0f 84 06 01 00 00    	je     c0026c27 <__addsf3+0x2f9>
c0026b21:	48                   	dec    eax
c0026b22:	75 1b                	jne    c0026b3f <__addsf3+0x211>
c0026b24:	89 d8                	mov    eax,ebx
c0026b26:	29 d0                	sub    eax,edx
c0026b28:	e9 8d 00 00 00       	jmp    c0026bba <__addsf3+0x28c>
c0026b2d:	89 f1                	mov    ecx,esi
c0026b2f:	f7 d1                	not    ecx
c0026b31:	84 c9                	test   cl,cl
c0026b33:	0f 84 ee 00 00 00    	je     c0026c27 <__addsf3+0x2f9>
c0026b39:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026b3f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b42:	83 f8 1f             	cmp    eax,0x1f
c0026b45:	0f 8f dc 00 00 00    	jg     c0026c27 <__addsf3+0x2f9>
c0026b4b:	89 d7                	mov    edi,edx
c0026b4d:	88 c1                	mov    cl,al
c0026b4f:	d3 ef                	shr    edi,cl
c0026b51:	b9 20 00 00 00       	mov    ecx,0x20
c0026b56:	29 c1                	sub    ecx,eax
c0026b58:	d3 e2                	shl    edx,cl
c0026b5a:	31 c0                	xor    eax,eax
c0026b5c:	85 d2                	test   edx,edx
c0026b5e:	0f 95 c0             	setne  al
c0026b61:	09 f8                	or     eax,edi
c0026b63:	29 c3                	sub    ebx,eax
c0026b65:	89 d8                	mov    eax,ebx
c0026b67:	eb 51                	jmp    c0026bba <__addsf3+0x28c>
c0026b69:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026b6c:	40                   	inc    eax
c0026b6d:	a8 fe                	test   al,0xfe
c0026b6f:	75 3d                	jne    c0026bae <__addsf3+0x280>
c0026b71:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026b75:	0f 85 a7 00 00 00    	jne    c0026c22 <__addsf3+0x2f4>
c0026b7b:	85 d2                	test   edx,edx
c0026b7d:	75 12                	jne    c0026b91 <__addsf3+0x263>
c0026b7f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b82:	85 db                	test   ebx,ebx
c0026b84:	0f 85 9d 00 00 00    	jne    c0026c27 <__addsf3+0x2f9>
c0026b8a:	31 ff                	xor    edi,edi
c0026b8c:	e9 96 00 00 00       	jmp    c0026c27 <__addsf3+0x2f9>
c0026b91:	85 db                	test   ebx,ebx
c0026b93:	0f 84 8e 00 00 00    	je     c0026c27 <__addsf3+0x2f9>
c0026b99:	89 d0                	mov    eax,edx
c0026b9b:	29 d8                	sub    eax,ebx
c0026b9d:	79 06                	jns    c0026ba5 <__addsf3+0x277>
c0026b9f:	89 d8                	mov    eax,ebx
c0026ba1:	29 d0                	sub    eax,edx
c0026ba3:	eb 5a                	jmp    c0026bff <__addsf3+0x2d1>
c0026ba5:	bf 00 00 00 00       	mov    edi,0x0
c0026baa:	74 7b                	je     c0026c27 <__addsf3+0x2f9>
c0026bac:	eb 4a                	jmp    c0026bf8 <__addsf3+0x2ca>
c0026bae:	89 d0                	mov    eax,edx
c0026bb0:	29 d8                	sub    eax,ebx
c0026bb2:	79 12                	jns    c0026bc6 <__addsf3+0x298>
c0026bb4:	89 d8                	mov    eax,ebx
c0026bb6:	29 d0                	sub    eax,edx
c0026bb8:	eb 09                	jmp    c0026bc3 <__addsf3+0x295>
c0026bba:	85 c0                	test   eax,eax
c0026bbc:	79 41                	jns    c0026bff <__addsf3+0x2d1>
c0026bbe:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026bc3:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026bc6:	31 f6                	xor    esi,esi
c0026bc8:	85 c0                	test   eax,eax
c0026bca:	74 33                	je     c0026bff <__addsf3+0x2d1>
c0026bcc:	0f bd c8             	bsr    ecx,eax
c0026bcf:	83 f1 1f             	xor    ecx,0x1f
c0026bd2:	d3 e0                	shl    eax,cl
c0026bd4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026bd8:	39 ca                	cmp    edx,ecx
c0026bda:	7f 10                	jg     c0026bec <__addsf3+0x2be>
c0026bdc:	29 d1                	sub    ecx,edx
c0026bde:	41                   	inc    ecx
c0026bdf:	d3 e8                	shr    eax,cl
c0026be1:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026be4:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026bea:	eb 13                	jmp    c0026bff <__addsf3+0x2d1>
c0026bec:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026bef:	29 ce                	sub    esi,ecx
c0026bf1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026bf6:	eb 07                	jmp    c0026bff <__addsf3+0x2d1>
c0026bf8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026bfb:	eb 02                	jmp    c0026bff <__addsf3+0x2d1>
c0026bfd:	31 c0                	xor    eax,eax
c0026bff:	89 c2                	mov    edx,eax
c0026c01:	c1 ea 08             	shr    edx,0x8
c0026c04:	a8 7f                	test   al,0x7f
c0026c06:	0f 95 c1             	setne  cl
c0026c09:	09 d1                	or     ecx,edx
c0026c0b:	83 e1 01             	and    ecx,0x1
c0026c0e:	c1 e8 07             	shr    eax,0x7
c0026c11:	21 c8                	and    eax,ecx
c0026c13:	c1 e6 17             	shl    esi,0x17
c0026c16:	09 d6                	or     esi,edx
c0026c18:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026c1b:	eb 0a                	jmp    c0026c27 <__addsf3+0x2f9>
c0026c1d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c20:	eb 05                	jmp    c0026c27 <__addsf3+0x2f9>
c0026c22:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026c27:	89 f8                	mov    eax,edi
c0026c29:	5a                   	pop    edx
c0026c2a:	59                   	pop    ecx
c0026c2b:	5b                   	pop    ebx
c0026c2c:	5e                   	pop    esi
c0026c2d:	5f                   	pop    edi
c0026c2e:	5d                   	pop    ebp
c0026c2f:	c3                   	ret    

c0026c30 <__subsf3>:
c0026c30:	55                   	push   ebp
c0026c31:	89 e5                	mov    ebp,esp
c0026c33:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c36:	05 00 00 00 80       	add    eax,0x80000000
c0026c3b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026c3e:	5d                   	pop    ebp
c0026c3f:	e9 ea fc ff ff       	jmp    c002692e <__addsf3>

c0026c44 <__negsf2>:
c0026c44:	55                   	push   ebp
c0026c45:	89 e5                	mov    ebp,esp
c0026c47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026c4a:	05 00 00 00 80       	add    eax,0x80000000
c0026c4f:	5d                   	pop    ebp
c0026c50:	c3                   	ret    

c0026c51 <__mulsf3>:
c0026c51:	55                   	push   ebp
c0026c52:	89 e5                	mov    ebp,esp
c0026c54:	57                   	push   edi
c0026c55:	56                   	push   esi
c0026c56:	53                   	push   ebx
c0026c57:	83 ec 1c             	sub    esp,0x1c
c0026c5a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026c5d:	89 f0                	mov    eax,esi
c0026c5f:	89 f1                	mov    ecx,esi
c0026c61:	c1 f9 17             	sar    ecx,0x17
c0026c64:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026c67:	c1 e0 08             	shl    eax,0x8
c0026c6a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026c6f:	89 c1                	mov    ecx,eax
c0026c71:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c74:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026c77:	89 c7                	mov    edi,eax
c0026c79:	c1 ff 17             	sar    edi,0x17
c0026c7c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026c80:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026c83:	89 f8                	mov    eax,edi
c0026c85:	0f b6 c0             	movzx  eax,al
c0026c88:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026c8b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026c8f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026c92:	42                   	inc    edx
c0026c93:	80 e2 fe             	and    dl,0xfe
c0026c96:	75 7b                	jne    c0026d13 <__mulsf3+0xc2>
c0026c98:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026c9c:	74 54                	je     c0026cf2 <__mulsf3+0xa1>
c0026c9e:	85 c9                	test   ecx,ecx
c0026ca0:	0f 85 64 01 00 00    	jne    c0026e0a <__mulsf3+0x1b9>
c0026ca6:	8d 57 01             	lea    edx,[edi+0x1]
c0026ca9:	80 e2 fe             	and    dl,0xfe
c0026cac:	75 1f                	jne    c0026ccd <__mulsf3+0x7c>
c0026cae:	85 c0                	test   eax,eax
c0026cb0:	b8 00 00 00 00       	mov    eax,0x0
c0026cb5:	74 29                	je     c0026ce0 <__mulsf3+0x8f>
c0026cb7:	53                   	push   ebx
c0026cb8:	53                   	push   ebx
c0026cb9:	50                   	push   eax
c0026cba:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026cbd:	e8 96 05 00 00       	call   c0027258 <__nesf2>
c0026cc2:	83 c4 10             	add    esp,0x10
c0026cc5:	85 c0                	test   eax,eax
c0026cc7:	0f 85 3a 01 00 00    	jne    c0026e07 <__mulsf3+0x1b6>
c0026ccd:	85 ff                	test   edi,edi
c0026ccf:	0f 89 35 01 00 00    	jns    c0026e0a <__mulsf3+0x1b9>
c0026cd5:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026cdb:	e9 2a 01 00 00       	jmp    c0026e0a <__mulsf3+0x1b9>
c0026ce0:	51                   	push   ecx
c0026ce1:	51                   	push   ecx
c0026ce2:	50                   	push   eax
c0026ce3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ce6:	e8 6d 05 00 00       	call   c0027258 <__nesf2>
c0026ceb:	83 c4 10             	add    esp,0x10
c0026cee:	85 c0                	test   eax,eax
c0026cf0:	eb 15                	jmp    c0026d07 <__mulsf3+0xb6>
c0026cf2:	85 c9                	test   ecx,ecx
c0026cf4:	74 0b                	je     c0026d01 <__mulsf3+0xb0>
c0026cf6:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026cf9:	01 c9                	add    ecx,ecx
c0026cfb:	78 16                	js     c0026d13 <__mulsf3+0xc2>
c0026cfd:	89 d3                	mov    ebx,edx
c0026cff:	eb f5                	jmp    c0026cf6 <__mulsf3+0xa5>
c0026d01:	89 f8                	mov    eax,edi
c0026d03:	f7 d0                	not    eax
c0026d05:	84 c0                	test   al,al
c0026d07:	75 c4                	jne    c0026ccd <__mulsf3+0x7c>
c0026d09:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026d0e:	e9 f7 00 00 00       	jmp    c0026e0a <__mulsf3+0x1b9>
c0026d13:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026d16:	c1 e6 08             	shl    esi,0x8
c0026d19:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026d1f:	8d 57 01             	lea    edx,[edi+0x1]
c0026d22:	80 e2 fe             	and    dl,0xfe
c0026d25:	75 63                	jne    c0026d8a <__mulsf3+0x139>
c0026d27:	85 c0                	test   eax,eax
c0026d29:	74 2f                	je     c0026d5a <__mulsf3+0x109>
c0026d2b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026d2f:	0f 89 d2 00 00 00    	jns    c0026e07 <__mulsf3+0x1b6>
c0026d35:	52                   	push   edx
c0026d36:	52                   	push   edx
c0026d37:	6a 00                	push   0x0
c0026d39:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d3c:	e8 dc 04 00 00       	call   c002721d <__eqsf2>
c0026d41:	83 c4 10             	add    esp,0x10
c0026d44:	85 c0                	test   eax,eax
c0026d46:	0f 85 bb 00 00 00    	jne    c0026e07 <__mulsf3+0x1b6>
c0026d4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026d4f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026d55:	e9 b0 00 00 00       	jmp    c0026e0a <__mulsf3+0x1b9>
c0026d5a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026d5d:	50                   	push   eax
c0026d5e:	50                   	push   eax
c0026d5f:	6a 00                	push   0x0
c0026d61:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d64:	e8 b4 04 00 00       	call   c002721d <__eqsf2>
c0026d69:	83 c4 10             	add    esp,0x10
c0026d6c:	85 c0                	test   eax,eax
c0026d6e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026d71:	75 0c                	jne    c0026d7f <__mulsf3+0x12e>
c0026d73:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026d77:	0f 89 8a 00 00 00    	jns    c0026e07 <__mulsf3+0x1b6>
c0026d7d:	eb cd                	jmp    c0026d4c <__mulsf3+0xfb>
c0026d7f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026d82:	01 f6                	add    esi,esi
c0026d84:	78 04                	js     c0026d8a <__mulsf3+0x139>
c0026d86:	89 c3                	mov    ebx,eax
c0026d88:	eb f5                	jmp    c0026d7f <__mulsf3+0x12e>
c0026d8a:	89 c8                	mov    eax,ecx
c0026d8c:	0d 00 00 00 80       	or     eax,0x80000000
c0026d91:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026d97:	f7 e6                	mul    esi
c0026d99:	85 c0                	test   eax,eax
c0026d9b:	0f 95 c0             	setne  al
c0026d9e:	0f b6 c0             	movzx  eax,al
c0026da1:	09 c2                	or     edx,eax
c0026da3:	78 03                	js     c0026da8 <__mulsf3+0x157>
c0026da5:	01 d2                	add    edx,edx
c0026da7:	4b                   	dec    ebx
c0026da8:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026dae:	7f 22                	jg     c0026dd2 <__mulsf3+0x181>
c0026db0:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026db6:	85 db                	test   ebx,ebx
c0026db8:	7f 23                	jg     c0026ddd <__mulsf3+0x18c>
c0026dba:	83 fb e9             	cmp    ebx,0xffffffe9
c0026dbd:	7c 1a                	jl     c0026dd9 <__mulsf3+0x188>
c0026dbf:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026dc5:	b9 01 00 00 00       	mov    ecx,0x1
c0026dca:	29 d9                	sub    ecx,ebx
c0026dcc:	d3 ea                	shr    edx,cl
c0026dce:	31 db                	xor    ebx,ebx
c0026dd0:	eb 0b                	jmp    c0026ddd <__mulsf3+0x18c>
c0026dd2:	bb ff 00 00 00       	mov    ebx,0xff
c0026dd7:	eb 02                	jmp    c0026ddb <__mulsf3+0x18a>
c0026dd9:	31 db                	xor    ebx,ebx
c0026ddb:	31 d2                	xor    edx,edx
c0026ddd:	89 d0                	mov    eax,edx
c0026ddf:	c1 e8 08             	shr    eax,0x8
c0026de2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026de5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026deb:	09 fb                	or     ebx,edi
c0026ded:	c1 e3 17             	shl    ebx,0x17
c0026df0:	09 c3                	or     ebx,eax
c0026df2:	f6 c2 7f             	test   dl,0x7f
c0026df5:	0f 95 c1             	setne  cl
c0026df8:	09 c8                	or     eax,ecx
c0026dfa:	83 e0 01             	and    eax,0x1
c0026dfd:	c1 ea 07             	shr    edx,0x7
c0026e00:	21 c2                	and    edx,eax
c0026e02:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026e05:	eb 03                	jmp    c0026e0a <__mulsf3+0x1b9>
c0026e07:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026e0a:	89 f0                	mov    eax,esi
c0026e0c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026e0f:	5b                   	pop    ebx
c0026e10:	5e                   	pop    esi
c0026e11:	5f                   	pop    edi
c0026e12:	5d                   	pop    ebp
c0026e13:	c3                   	ret    

c0026e14 <__divsf3>:
c0026e14:	55                   	push   ebp
c0026e15:	89 e5                	mov    ebp,esp
c0026e17:	57                   	push   edi
c0026e18:	56                   	push   esi
c0026e19:	53                   	push   ebx
c0026e1a:	83 ec 1c             	sub    esp,0x1c
c0026e1d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026e20:	89 d8                	mov    eax,ebx
c0026e22:	89 d9                	mov    ecx,ebx
c0026e24:	c1 f9 17             	sar    ecx,0x17
c0026e27:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026e2a:	c1 e0 08             	shl    eax,0x8
c0026e2d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026e32:	89 c1                	mov    ecx,eax
c0026e34:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026e37:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026e3a:	89 c7                	mov    edi,eax
c0026e3c:	c1 ff 17             	sar    edi,0x17
c0026e3f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026e43:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026e46:	89 f8                	mov    eax,edi
c0026e48:	0f b6 c0             	movzx  eax,al
c0026e4b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026e4e:	29 c6                	sub    esi,eax
c0026e50:	83 c6 7f             	add    esi,0x7f
c0026e53:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026e56:	42                   	inc    edx
c0026e57:	80 e2 fe             	and    dl,0xfe
c0026e5a:	0f 85 9c 00 00 00    	jne    c0026efc <__divsf3+0xe8>
c0026e60:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026e64:	74 33                	je     c0026e99 <__divsf3+0x85>
c0026e66:	85 c9                	test   ecx,ecx
c0026e68:	0f 85 c7 01 00 00    	jne    c0027035 <__divsf3+0x221>
c0026e6e:	8d 57 01             	lea    edx,[edi+0x1]
c0026e71:	80 e2 fe             	and    dl,0xfe
c0026e74:	75 2f                	jne    c0026ea5 <__divsf3+0x91>
c0026e76:	85 c0                	test   eax,eax
c0026e78:	74 2b                	je     c0026ea5 <__divsf3+0x91>
c0026e7a:	51                   	push   ecx
c0026e7b:	51                   	push   ecx
c0026e7c:	6a 00                	push   0x0
c0026e7e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e81:	e8 d2 03 00 00       	call   c0027258 <__nesf2>
c0026e86:	83 c4 10             	add    esp,0x10
c0026e89:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026e8c:	85 c0                	test   eax,eax
c0026e8e:	0f 85 a1 01 00 00    	jne    c0027035 <__divsf3+0x221>
c0026e94:	e9 92 01 00 00       	jmp    c002702b <__divsf3+0x217>
c0026e99:	85 c9                	test   ecx,ecx
c0026e9b:	75 1b                	jne    c0026eb8 <__divsf3+0xa4>
c0026e9d:	8d 57 01             	lea    edx,[edi+0x1]
c0026ea0:	80 e2 fe             	and    dl,0xfe
c0026ea3:	74 1e                	je     c0026ec3 <__divsf3+0xaf>
c0026ea5:	85 ff                	test   edi,edi
c0026ea7:	0f 89 88 01 00 00    	jns    c0027035 <__divsf3+0x221>
c0026ead:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0026eb3:	e9 7d 01 00 00       	jmp    c0027035 <__divsf3+0x221>
c0026eb8:	8d 56 ff             	lea    edx,[esi-0x1]
c0026ebb:	01 c9                	add    ecx,ecx
c0026ebd:	78 3d                	js     c0026efc <__divsf3+0xe8>
c0026ebf:	89 d6                	mov    esi,edx
c0026ec1:	eb f5                	jmp    c0026eb8 <__divsf3+0xa4>
c0026ec3:	85 c0                	test   eax,eax
c0026ec5:	b8 00 00 00 00       	mov    eax,0x0
c0026eca:	74 18                	je     c0026ee4 <__divsf3+0xd0>
c0026ecc:	52                   	push   edx
c0026ecd:	52                   	push   edx
c0026ece:	50                   	push   eax
c0026ecf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ed2:	e8 81 03 00 00       	call   c0027258 <__nesf2>
c0026ed7:	83 c4 10             	add    esp,0x10
c0026eda:	85 c0                	test   eax,eax
c0026edc:	0f 85 50 01 00 00    	jne    c0027032 <__divsf3+0x21e>
c0026ee2:	eb c1                	jmp    c0026ea5 <__divsf3+0x91>
c0026ee4:	56                   	push   esi
c0026ee5:	56                   	push   esi
c0026ee6:	50                   	push   eax
c0026ee7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026eea:	e8 69 03 00 00       	call   c0027258 <__nesf2>
c0026eef:	83 c4 10             	add    esp,0x10
c0026ef2:	85 c0                	test   eax,eax
c0026ef4:	0f 84 31 01 00 00    	je     c002702b <__divsf3+0x217>
c0026efa:	eb a9                	jmp    c0026ea5 <__divsf3+0x91>
c0026efc:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026eff:	c1 e3 08             	shl    ebx,0x8
c0026f02:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026f08:	8d 57 01             	lea    edx,[edi+0x1]
c0026f0b:	80 e2 fe             	and    dl,0xfe
c0026f0e:	75 71                	jne    c0026f81 <__divsf3+0x16d>
c0026f10:	85 c0                	test   eax,eax
c0026f12:	ba 00 00 00 00       	mov    edx,0x0
c0026f17:	74 2f                	je     c0026f48 <__divsf3+0x134>
c0026f19:	51                   	push   ecx
c0026f1a:	51                   	push   ecx
c0026f1b:	52                   	push   edx
c0026f1c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f1f:	e8 f9 02 00 00       	call   c002721d <__eqsf2>
c0026f24:	83 c4 10             	add    esp,0x10
c0026f27:	85 c0                	test   eax,eax
c0026f29:	0f 85 03 01 00 00    	jne    c0027032 <__divsf3+0x21e>
c0026f2f:	31 d2                	xor    edx,edx
c0026f31:	89 d3                	mov    ebx,edx
c0026f33:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026f36:	31 f8                	xor    eax,edi
c0026f38:	0f 89 f7 00 00 00    	jns    c0027035 <__divsf3+0x221>
c0026f3e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0026f43:	e9 ed 00 00 00       	jmp    c0027035 <__divsf3+0x221>
c0026f48:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026f4b:	50                   	push   eax
c0026f4c:	50                   	push   eax
c0026f4d:	52                   	push   edx
c0026f4e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f51:	e8 c7 02 00 00       	call   c002721d <__eqsf2>
c0026f56:	83 c4 10             	add    esp,0x10
c0026f59:	85 c0                	test   eax,eax
c0026f5b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026f5e:	75 16                	jne    c0026f76 <__divsf3+0x162>
c0026f60:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026f63:	31 fb                	xor    ebx,edi
c0026f65:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0026f6b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0026f71:	e9 bf 00 00 00       	jmp    c0027035 <__divsf3+0x221>
c0026f76:	8d 46 01             	lea    eax,[esi+0x1]
c0026f79:	01 db                	add    ebx,ebx
c0026f7b:	78 04                	js     c0026f81 <__divsf3+0x16d>
c0026f7d:	89 c6                	mov    esi,eax
c0026f7f:	eb f5                	jmp    c0026f76 <__divsf3+0x162>
c0026f81:	89 c8                	mov    eax,ecx
c0026f83:	0d 00 00 00 80       	or     eax,0x80000000
c0026f88:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026f8e:	31 d2                	xor    edx,edx
c0026f90:	39 d8                	cmp    eax,ebx
c0026f92:	72 07                	jb     c0026f9b <__divsf3+0x187>
c0026f94:	29 d8                	sub    eax,ebx
c0026f96:	ba 01 00 00 00       	mov    edx,0x1
c0026f9b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0026fa2:	01 d2                	add    edx,edx
c0026fa4:	89 c1                	mov    ecx,eax
c0026fa6:	01 c0                	add    eax,eax
c0026fa8:	85 c9                	test   ecx,ecx
c0026faa:	78 04                	js     c0026fb0 <__divsf3+0x19c>
c0026fac:	39 c3                	cmp    ebx,eax
c0026fae:	77 05                	ja     c0026fb5 <__divsf3+0x1a1>
c0026fb0:	29 d8                	sub    eax,ebx
c0026fb2:	83 ca 01             	or     edx,0x1
c0026fb5:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0026fb8:	75 e8                	jne    c0026fa2 <__divsf3+0x18e>
c0026fba:	85 c0                	test   eax,eax
c0026fbc:	0f 95 c0             	setne  al
c0026fbf:	0f b6 c0             	movzx  eax,al
c0026fc2:	c1 e2 06             	shl    edx,0x6
c0026fc5:	09 c2                	or     edx,eax
c0026fc7:	78 03                	js     c0026fcc <__divsf3+0x1b8>
c0026fc9:	01 d2                	add    edx,edx
c0026fcb:	4e                   	dec    esi
c0026fcc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0026fd2:	7f 22                	jg     c0026ff6 <__divsf3+0x1e2>
c0026fd4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026fda:	85 f6                	test   esi,esi
c0026fdc:	7f 23                	jg     c0027001 <__divsf3+0x1ed>
c0026fde:	83 fe e9             	cmp    esi,0xffffffe9
c0026fe1:	7c 1a                	jl     c0026ffd <__divsf3+0x1e9>
c0026fe3:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026fe9:	b9 01 00 00 00       	mov    ecx,0x1
c0026fee:	29 f1                	sub    ecx,esi
c0026ff0:	d3 ea                	shr    edx,cl
c0026ff2:	31 f6                	xor    esi,esi
c0026ff4:	eb 0b                	jmp    c0027001 <__divsf3+0x1ed>
c0026ff6:	be ff 00 00 00       	mov    esi,0xff
c0026ffb:	eb 02                	jmp    c0026fff <__divsf3+0x1eb>
c0026ffd:	31 f6                	xor    esi,esi
c0026fff:	31 d2                	xor    edx,edx
c0027001:	89 d0                	mov    eax,edx
c0027003:	c1 e8 08             	shr    eax,0x8
c0027006:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027009:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002700f:	09 fe                	or     esi,edi
c0027011:	c1 e6 17             	shl    esi,0x17
c0027014:	09 c6                	or     esi,eax
c0027016:	f6 c2 7f             	test   dl,0x7f
c0027019:	0f 95 c1             	setne  cl
c002701c:	09 c8                	or     eax,ecx
c002701e:	83 e0 01             	and    eax,0x1
c0027021:	c1 ea 07             	shr    edx,0x7
c0027024:	21 c2                	and    edx,eax
c0027026:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027029:	eb 0a                	jmp    c0027035 <__divsf3+0x221>
c002702b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027030:	eb 03                	jmp    c0027035 <__divsf3+0x221>
c0027032:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027035:	89 d8                	mov    eax,ebx
c0027037:	8d 65 f4             	lea    esp,[ebp-0xc]
c002703a:	5b                   	pop    ebx
c002703b:	5e                   	pop    esi
c002703c:	5f                   	pop    edi
c002703d:	5d                   	pop    ebp
c002703e:	c3                   	ret    

c002703f <__floatsisf>:
c002703f:	55                   	push   ebp
c0027040:	89 e5                	mov    ebp,esp
c0027042:	53                   	push   ebx
c0027043:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027046:	85 d2                	test   edx,edx
c0027048:	7e 2b                	jle    c0027075 <__floatsisf+0x36>
c002704a:	0f bd ca             	bsr    ecx,edx
c002704d:	83 f1 1f             	xor    ecx,0x1f
c0027050:	d3 e2                	shl    edx,cl
c0027052:	89 d0                	mov    eax,edx
c0027054:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027059:	89 c3                	mov    ebx,eax
c002705b:	c1 eb 08             	shr    ebx,0x8
c002705e:	80 e2 7f             	and    dl,0x7f
c0027061:	0f 95 c2             	setne  dl
c0027064:	09 da                	or     edx,ebx
c0027066:	83 e2 01             	and    edx,0x1
c0027069:	c1 e8 07             	shr    eax,0x7
c002706c:	21 c2                	and    edx,eax
c002706e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027073:	eb 32                	jmp    c00270a7 <__floatsisf+0x68>
c0027075:	b8 00 00 00 00       	mov    eax,0x0
c002707a:	74 34                	je     c00270b0 <__floatsisf+0x71>
c002707c:	f7 da                	neg    edx
c002707e:	0f bd ca             	bsr    ecx,edx
c0027081:	83 f1 1f             	xor    ecx,0x1f
c0027084:	d3 e2                	shl    edx,cl
c0027086:	89 d0                	mov    eax,edx
c0027088:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002708d:	89 c3                	mov    ebx,eax
c002708f:	c1 eb 08             	shr    ebx,0x8
c0027092:	80 e2 7f             	and    dl,0x7f
c0027095:	0f 95 c2             	setne  dl
c0027098:	09 da                	or     edx,ebx
c002709a:	83 e2 01             	and    edx,0x1
c002709d:	c1 e8 07             	shr    eax,0x7
c00270a0:	21 c2                	and    edx,eax
c00270a2:	b8 9e 01 00 00       	mov    eax,0x19e
c00270a7:	29 c8                	sub    eax,ecx
c00270a9:	c1 e0 17             	shl    eax,0x17
c00270ac:	09 d8                	or     eax,ebx
c00270ae:	01 d0                	add    eax,edx
c00270b0:	5b                   	pop    ebx
c00270b1:	5d                   	pop    ebp
c00270b2:	c3                   	ret    

c00270b3 <__floatunsisf>:
c00270b3:	55                   	push   ebp
c00270b4:	89 e5                	mov    ebp,esp
c00270b6:	53                   	push   ebx
c00270b7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00270ba:	31 c0                	xor    eax,eax
c00270bc:	85 d2                	test   edx,edx
c00270be:	74 32                	je     c00270f2 <__floatunsisf+0x3f>
c00270c0:	0f bd ca             	bsr    ecx,edx
c00270c3:	83 f1 1f             	xor    ecx,0x1f
c00270c6:	d3 e2                	shl    edx,cl
c00270c8:	89 d0                	mov    eax,edx
c00270ca:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00270cf:	89 c3                	mov    ebx,eax
c00270d1:	c1 eb 08             	shr    ebx,0x8
c00270d4:	80 e2 7f             	and    dl,0x7f
c00270d7:	0f 95 c2             	setne  dl
c00270da:	09 da                	or     edx,ebx
c00270dc:	83 e2 01             	and    edx,0x1
c00270df:	c1 e8 07             	shr    eax,0x7
c00270e2:	21 c2                	and    edx,eax
c00270e4:	b8 9e 00 00 00       	mov    eax,0x9e
c00270e9:	29 c8                	sub    eax,ecx
c00270eb:	c1 e0 17             	shl    eax,0x17
c00270ee:	09 d8                	or     eax,ebx
c00270f0:	01 d0                	add    eax,edx
c00270f2:	5b                   	pop    ebx
c00270f3:	5d                   	pop    ebp
c00270f4:	c3                   	ret    

c00270f5 <__fixsfsi>:
c00270f5:	55                   	push   ebp
c00270f6:	89 e5                	mov    ebp,esp
c00270f8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00270fb:	89 d1                	mov    ecx,edx
c00270fd:	c1 e1 08             	shl    ecx,0x8
c0027100:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027106:	c1 fa 17             	sar    edx,0x17
c0027109:	78 1c                	js     c0027127 <__fixsfsi+0x32>
c002710b:	83 ea 7f             	sub    edx,0x7f
c002710e:	31 c0                	xor    eax,eax
c0027110:	83 fa 1e             	cmp    edx,0x1e
c0027113:	77 40                	ja     c0027155 <__fixsfsi+0x60>
c0027115:	89 c8                	mov    eax,ecx
c0027117:	0d 00 00 00 80       	or     eax,0x80000000
c002711c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027121:	29 d1                	sub    ecx,edx
c0027123:	d3 e8                	shr    eax,cl
c0027125:	eb 2e                	jmp    c0027155 <__fixsfsi+0x60>
c0027127:	31 c0                	xor    eax,eax
c0027129:	81 c2 81 00 00 00    	add    edx,0x81
c002712f:	78 24                	js     c0027155 <__fixsfsi+0x60>
c0027131:	83 fa 1e             	cmp    edx,0x1e
c0027134:	7e 09                	jle    c002713f <__fixsfsi+0x4a>
c0027136:	83 fa 1f             	cmp    edx,0x1f
c0027139:	75 18                	jne    c0027153 <__fixsfsi+0x5e>
c002713b:	85 c9                	test   ecx,ecx
c002713d:	75 14                	jne    c0027153 <__fixsfsi+0x5e>
c002713f:	89 c8                	mov    eax,ecx
c0027141:	0d 00 00 00 80       	or     eax,0x80000000
c0027146:	b9 1f 00 00 00       	mov    ecx,0x1f
c002714b:	29 d1                	sub    ecx,edx
c002714d:	d3 e8                	shr    eax,cl
c002714f:	f7 d8                	neg    eax
c0027151:	eb 02                	jmp    c0027155 <__fixsfsi+0x60>
c0027153:	31 c0                	xor    eax,eax
c0027155:	5d                   	pop    ebp
c0027156:	c3                   	ret    

c0027157 <__fixunssfsi>:
c0027157:	55                   	push   ebp
c0027158:	89 e5                	mov    ebp,esp
c002715a:	53                   	push   ebx
c002715b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002715e:	89 d3                	mov    ebx,edx
c0027160:	c1 fb 17             	sar    ebx,0x17
c0027163:	83 eb 7f             	sub    ebx,0x7f
c0027166:	31 c0                	xor    eax,eax
c0027168:	83 fb 1f             	cmp    ebx,0x1f
c002716b:	77 18                	ja     c0027185 <__fixunssfsi+0x2e>
c002716d:	89 d0                	mov    eax,edx
c002716f:	c1 e0 08             	shl    eax,0x8
c0027172:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027177:	0d 00 00 00 80       	or     eax,0x80000000
c002717c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027181:	29 d9                	sub    ecx,ebx
c0027183:	d3 e8                	shr    eax,cl
c0027185:	5b                   	pop    ebx
c0027186:	5d                   	pop    ebp
c0027187:	c3                   	ret    

c0027188 <__cmpsf2>:
c0027188:	55                   	push   ebp
c0027189:	89 e5                	mov    ebp,esp
c002718b:	57                   	push   edi
c002718c:	56                   	push   esi
c002718d:	53                   	push   ebx
c002718e:	83 ec 24             	sub    esp,0x24
c0027191:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027194:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027197:	e8 4f 10 00 00       	call   c00281eb <__truncdfsf2>
c002719c:	5a                   	pop    edx
c002719d:	59                   	pop    ecx
c002719e:	89 c3                	mov    ebx,eax
c00271a0:	c1 e8 17             	shr    eax,0x17
c00271a3:	0f b6 f0             	movzx  esi,al
c00271a6:	89 d8                	mov    eax,ebx
c00271a8:	c1 e8 1f             	shr    eax,0x1f
c00271ab:	31 c6                	xor    esi,eax
c00271ad:	c1 e3 08             	shl    ebx,0x8
c00271b0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00271b3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00271b6:	e8 30 10 00 00       	call   c00281eb <__truncdfsf2>
c00271bb:	83 c4 10             	add    esp,0x10
c00271be:	89 c1                	mov    ecx,eax
c00271c0:	c1 e9 17             	shr    ecx,0x17
c00271c3:	0f b6 c9             	movzx  ecx,cl
c00271c6:	89 c7                	mov    edi,eax
c00271c8:	c1 ef 1f             	shr    edi,0x1f
c00271cb:	89 ca                	mov    edx,ecx
c00271cd:	31 fa                	xor    edx,edi
c00271cf:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00271d2:	c1 e0 08             	shl    eax,0x8
c00271d5:	89 c2                	mov    edx,eax
c00271d7:	89 d8                	mov    eax,ebx
c00271d9:	09 d0                	or     eax,edx
c00271db:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00271e0:	09 f0                	or     eax,esi
c00271e2:	75 08                	jne    c00271ec <__cmpsf2+0x64>
c00271e4:	31 c0                	xor    eax,eax
c00271e6:	39 f9                	cmp    ecx,edi
c00271e8:	75 0c                	jne    c00271f6 <__cmpsf2+0x6e>
c00271ea:	eb 29                	jmp    c0027215 <__cmpsf2+0x8d>
c00271ec:	b8 01 00 00 00       	mov    eax,0x1
c00271f1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00271f4:	7f 1f                	jg     c0027215 <__cmpsf2+0x8d>
c00271f6:	83 c8 ff             	or     eax,0xffffffff
c00271f9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00271fc:	7c 17                	jl     c0027215 <__cmpsf2+0x8d>
c00271fe:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027204:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002720a:	b8 01 00 00 00       	mov    eax,0x1
c002720f:	39 d3                	cmp    ebx,edx
c0027211:	77 02                	ja     c0027215 <__cmpsf2+0x8d>
c0027213:	19 c0                	sbb    eax,eax
c0027215:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027218:	5b                   	pop    ebx
c0027219:	5e                   	pop    esi
c002721a:	5f                   	pop    edi
c002721b:	5d                   	pop    ebp
c002721c:	c3                   	ret    

c002721d <__eqsf2>:
c002721d:	55                   	push   ebp
c002721e:	89 e5                	mov    ebp,esp
c0027220:	83 ec 24             	sub    esp,0x24
c0027223:	6a 01                	push   0x1
c0027225:	83 ec 0c             	sub    esp,0xc
c0027228:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002722b:	e8 df 10 00 00       	call   c002830f <__extendsfdf2>
c0027230:	83 c4 10             	add    esp,0x10
c0027233:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027236:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027239:	52                   	push   edx
c002723a:	50                   	push   eax
c002723b:	50                   	push   eax
c002723c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002723f:	e8 cb 10 00 00       	call   c002830f <__extendsfdf2>
c0027244:	59                   	pop    ecx
c0027245:	59                   	pop    ecx
c0027246:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027249:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002724c:	52                   	push   edx
c002724d:	50                   	push   eax
c002724e:	e8 35 ff ff ff       	call   c0027188 <__cmpsf2>
c0027253:	83 c4 20             	add    esp,0x20
c0027256:	c9                   	leave  
c0027257:	c3                   	ret    

c0027258 <__nesf2>:
c0027258:	eb c3                	jmp    c002721d <__eqsf2>

c002725a <__gtsf2>:
c002725a:	55                   	push   ebp
c002725b:	89 e5                	mov    ebp,esp
c002725d:	83 ec 24             	sub    esp,0x24
c0027260:	6a ff                	push   0xffffffff
c0027262:	83 ec 0c             	sub    esp,0xc
c0027265:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027268:	e8 a2 10 00 00       	call   c002830f <__extendsfdf2>
c002726d:	83 c4 10             	add    esp,0x10
c0027270:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027273:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027276:	52                   	push   edx
c0027277:	50                   	push   eax
c0027278:	50                   	push   eax
c0027279:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002727c:	e8 8e 10 00 00       	call   c002830f <__extendsfdf2>
c0027281:	59                   	pop    ecx
c0027282:	59                   	pop    ecx
c0027283:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027286:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027289:	52                   	push   edx
c002728a:	50                   	push   eax
c002728b:	e8 f8 fe ff ff       	call   c0027188 <__cmpsf2>
c0027290:	83 c4 20             	add    esp,0x20
c0027293:	c9                   	leave  
c0027294:	c3                   	ret    

c0027295 <__gesf2>:
c0027295:	eb c3                	jmp    c002725a <__gtsf2>

c0027297 <__ltsf2>:
c0027297:	eb 84                	jmp    c002721d <__eqsf2>

c0027299 <__lesf2>:
c0027299:	eb 82                	jmp    c002721d <__eqsf2>

c002729b <__adddf3>:
c002729b:	55                   	push   ebp
c002729c:	89 e5                	mov    ebp,esp
c002729e:	57                   	push   edi
c002729f:	56                   	push   esi
c00272a0:	53                   	push   ebx
c00272a1:	83 ec 24             	sub    esp,0x24
c00272a4:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00272a7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00272aa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00272ad:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00272b0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00272b3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00272b6:	89 c8                	mov    eax,ecx
c00272b8:	89 ce                	mov    esi,ecx
c00272ba:	c1 fe 14             	sar    esi,0x14
c00272bd:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00272c0:	89 fb                	mov    ebx,edi
c00272c2:	89 fa                	mov    edx,edi
c00272c4:	c1 e2 0b             	shl    edx,0xb
c00272c7:	c1 e0 0b             	shl    eax,0xb
c00272ca:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00272cf:	c1 eb 15             	shr    ebx,0x15
c00272d2:	09 d8                	or     eax,ebx
c00272d4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00272d7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00272da:	c1 fe 14             	sar    esi,0x14
c00272dd:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00272e0:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00272e3:	89 f3                	mov    ebx,esi
c00272e5:	c1 e3 0b             	shl    ebx,0xb
c00272e8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00272eb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00272ee:	c1 e3 0b             	shl    ebx,0xb
c00272f1:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00272f7:	c1 ee 15             	shr    esi,0x15
c00272fa:	09 f3                	or     ebx,esi
c00272fc:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00272ff:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027302:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027305:	0f 88 5f 02 00 00    	js     c002756a <__adddf3+0x2cf>
c002730b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002730e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027311:	85 db                	test   ebx,ebx
c0027313:	0f 8e c7 00 00 00    	jle    c00273e0 <__adddf3+0x145>
c0027319:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027320:	75 1a                	jne    c002733c <__adddf3+0xa1>
c0027322:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027325:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027328:	0f 84 b2 05 00 00    	je     c00278e0 <__adddf3+0x645>
c002732e:	4b                   	dec    ebx
c002732f:	75 23                	jne    c0027354 <__adddf3+0xb9>
c0027331:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027334:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027337:	e9 99 00 00 00       	jmp    c00273d5 <__adddf3+0x13a>
c002733c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002733f:	f7 d6                	not    esi
c0027341:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027347:	0f 84 93 05 00 00    	je     c00278e0 <__adddf3+0x645>
c002734d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027354:	83 fb 1f             	cmp    ebx,0x1f
c0027357:	7e 42                	jle    c002739b <__adddf3+0x100>
c0027359:	83 fb 3f             	cmp    ebx,0x3f
c002735c:	0f 8f 7e 05 00 00    	jg     c00278e0 <__adddf3+0x645>
c0027362:	83 e3 1f             	and    ebx,0x1f
c0027365:	89 d9                	mov    ecx,ebx
c0027367:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002736a:	d3 ef                	shr    edi,cl
c002736c:	31 db                	xor    ebx,ebx
c002736e:	85 c9                	test   ecx,ecx
c0027370:	74 15                	je     c0027387 <__adddf3+0xec>
c0027372:	be 20 00 00 00       	mov    esi,0x20
c0027377:	29 ce                	sub    esi,ecx
c0027379:	89 f1                	mov    ecx,esi
c002737b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002737e:	d3 e6                	shl    esi,cl
c0027380:	31 db                	xor    ebx,ebx
c0027382:	85 f6                	test   esi,esi
c0027384:	0f 95 c3             	setne  bl
c0027387:	31 c9                	xor    ecx,ecx
c0027389:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002738d:	0f 95 c1             	setne  cl
c0027390:	09 cf                	or     edi,ecx
c0027392:	09 fb                	or     ebx,edi
c0027394:	01 da                	add    edx,ebx
c0027396:	83 d0 00             	adc    eax,0x0
c0027399:	eb 3a                	jmp    c00273d5 <__adddf3+0x13a>
c002739b:	bf 20 00 00 00       	mov    edi,0x20
c00273a0:	29 df                	sub    edi,ebx
c00273a2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00273a5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00273a8:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00273ab:	d3 e6                	shl    esi,cl
c00273ad:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00273b0:	88 d9                	mov    cl,bl
c00273b2:	d3 ef                	shr    edi,cl
c00273b4:	09 fe                	or     esi,edi
c00273b6:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00273b9:	88 d9                	mov    cl,bl
c00273bb:	d3 ef                	shr    edi,cl
c00273bd:	89 fb                	mov    ebx,edi
c00273bf:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00273c2:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00273c5:	d3 e7                	shl    edi,cl
c00273c7:	85 ff                	test   edi,edi
c00273c9:	0f 95 c1             	setne  cl
c00273cc:	0f b6 c9             	movzx  ecx,cl
c00273cf:	09 ce                	or     esi,ecx
c00273d1:	01 f2                	add    edx,esi
c00273d3:	11 d8                	adc    eax,ebx
c00273d5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00273d8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00273db:	e9 52 01 00 00       	jmp    c0027532 <__adddf3+0x297>
c00273e0:	0f 84 d5 00 00 00    	je     c00274bb <__adddf3+0x220>
c00273e6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00273e9:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00273ec:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00273ef:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00273f2:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00273f9:	75 20                	jne    c002741b <__adddf3+0x180>
c00273fb:	89 d6                	mov    esi,edx
c00273fd:	09 c6                	or     esi,eax
c00273ff:	0f 84 db 04 00 00    	je     c00278e0 <__adddf3+0x645>
c0027405:	4b                   	dec    ebx
c0027406:	75 29                	jne    c0027431 <__adddf3+0x196>
c0027408:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002740b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002740e:	01 d1                	add    ecx,edx
c0027410:	11 c6                	adc    esi,eax
c0027412:	89 f0                	mov    eax,esi
c0027414:	89 ca                	mov    edx,ecx
c0027416:	e9 17 01 00 00       	jmp    c0027532 <__adddf3+0x297>
c002741b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002741e:	f7 d6                	not    esi
c0027420:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027426:	0f 84 b4 04 00 00    	je     c00278e0 <__adddf3+0x645>
c002742c:	0d 00 00 00 80       	or     eax,0x80000000
c0027431:	83 fb 1f             	cmp    ebx,0x1f
c0027434:	7e 48                	jle    c002747e <__adddf3+0x1e3>
c0027436:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027439:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002743c:	83 fb 3f             	cmp    ebx,0x3f
c002743f:	0f 8f 9b 04 00 00    	jg     c00278e0 <__adddf3+0x645>
c0027445:	83 e3 1f             	and    ebx,0x1f
c0027448:	89 d9                	mov    ecx,ebx
c002744a:	89 c7                	mov    edi,eax
c002744c:	d3 ef                	shr    edi,cl
c002744e:	31 db                	xor    ebx,ebx
c0027450:	85 c9                	test   ecx,ecx
c0027452:	74 12                	je     c0027466 <__adddf3+0x1cb>
c0027454:	be 20 00 00 00       	mov    esi,0x20
c0027459:	29 ce                	sub    esi,ecx
c002745b:	89 f1                	mov    ecx,esi
c002745d:	d3 e0                	shl    eax,cl
c002745f:	31 db                	xor    ebx,ebx
c0027461:	85 c0                	test   eax,eax
c0027463:	0f 95 c3             	setne  bl
c0027466:	31 c0                	xor    eax,eax
c0027468:	85 d2                	test   edx,edx
c002746a:	0f 95 c0             	setne  al
c002746d:	09 c7                	or     edi,eax
c002746f:	09 fb                	or     ebx,edi
c0027471:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027474:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027477:	01 da                	add    edx,ebx
c0027479:	83 d6 00             	adc    esi,0x0
c002747c:	eb 39                	jmp    c00274b7 <__adddf3+0x21c>
c002747e:	be 20 00 00 00       	mov    esi,0x20
c0027483:	29 de                	sub    esi,ebx
c0027485:	89 c7                	mov    edi,eax
c0027487:	89 f1                	mov    ecx,esi
c0027489:	d3 e7                	shl    edi,cl
c002748b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002748e:	89 d7                	mov    edi,edx
c0027490:	88 d9                	mov    cl,bl
c0027492:	d3 ef                	shr    edi,cl
c0027494:	89 f9                	mov    ecx,edi
c0027496:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027499:	09 cf                	or     edi,ecx
c002749b:	88 d9                	mov    cl,bl
c002749d:	d3 e8                	shr    eax,cl
c002749f:	89 f1                	mov    ecx,esi
c00274a1:	d3 e2                	shl    edx,cl
c00274a3:	85 d2                	test   edx,edx
c00274a5:	0f 95 c2             	setne  dl
c00274a8:	0f b6 d2             	movzx  edx,dl
c00274ab:	09 d7                	or     edi,edx
c00274ad:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00274b0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00274b3:	01 fa                	add    edx,edi
c00274b5:	11 c6                	adc    esi,eax
c00274b7:	89 f0                	mov    eax,esi
c00274b9:	eb 77                	jmp    c0027532 <__adddf3+0x297>
c00274bb:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00274be:	46                   	inc    esi
c00274bf:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00274c2:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00274c8:	75 41                	jne    c002750b <__adddf3+0x270>
c00274ca:	89 d3                	mov    ebx,edx
c00274cc:	09 c3                	or     ebx,eax
c00274ce:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00274d5:	75 27                	jne    c00274fe <__adddf3+0x263>
c00274d7:	85 db                	test   ebx,ebx
c00274d9:	0f 84 fb 03 00 00    	je     c00278da <__adddf3+0x63f>
c00274df:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00274e2:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00274e5:	0f 84 f5 03 00 00    	je     c00278e0 <__adddf3+0x645>
c00274eb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00274ee:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00274f1:	85 c0                	test   eax,eax
c00274f3:	0f 89 91 03 00 00    	jns    c002788a <__adddf3+0x5ef>
c00274f9:	e9 85 03 00 00       	jmp    c0027883 <__adddf3+0x5e8>
c00274fe:	85 db                	test   ebx,ebx
c0027500:	0f 85 da 03 00 00    	jne    c00278e0 <__adddf3+0x645>
c0027506:	e9 cf 03 00 00       	jmp    c00278da <__adddf3+0x63f>
c002750b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002750e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027511:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027514:	f7 d1                	not    ecx
c0027516:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002751c:	0f 84 70 03 00 00    	je     c0027892 <__adddf3+0x5f7>
c0027522:	d1 ea                	shr    edx,1
c0027524:	89 c1                	mov    ecx,eax
c0027526:	c1 e1 1f             	shl    ecx,0x1f
c0027529:	09 ca                	or     edx,ecx
c002752b:	d1 e8                	shr    eax,1
c002752d:	e9 6f 03 00 00       	jmp    c00278a1 <__adddf3+0x606>
c0027532:	85 c0                	test   eax,eax
c0027534:	0f 89 67 03 00 00    	jns    c00278a1 <__adddf3+0x606>
c002753a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002753d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027540:	f7 d1                	not    ecx
c0027542:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027548:	0f 84 44 03 00 00    	je     c0027892 <__adddf3+0x5f7>
c002754e:	89 d1                	mov    ecx,edx
c0027550:	d1 e9                	shr    ecx,1
c0027552:	83 e2 01             	and    edx,0x1
c0027555:	09 ca                	or     edx,ecx
c0027557:	89 c1                	mov    ecx,eax
c0027559:	c1 e1 1f             	shl    ecx,0x1f
c002755c:	09 ca                	or     edx,ecx
c002755e:	d1 e8                	shr    eax,1
c0027560:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027565:	e9 37 03 00 00       	jmp    c00278a1 <__adddf3+0x606>
c002756a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002756d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027573:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027576:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027579:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002757f:	29 de                	sub    esi,ebx
c0027581:	85 f6                	test   esi,esi
c0027583:	0f 8e bd 00 00 00    	jle    c0027646 <__adddf3+0x3ab>
c0027589:	85 db                	test   ebx,ebx
c002758b:	75 17                	jne    c00275a4 <__adddf3+0x309>
c002758d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027590:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027593:	0f 84 47 03 00 00    	je     c00278e0 <__adddf3+0x645>
c0027599:	4e                   	dec    esi
c002759a:	75 20                	jne    c00275bc <__adddf3+0x321>
c002759c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002759f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00275a2:	eb 5b                	jmp    c00275ff <__adddf3+0x364>
c00275a4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00275a7:	f7 d3                	not    ebx
c00275a9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00275af:	0f 84 2b 03 00 00    	je     c00278e0 <__adddf3+0x645>
c00275b5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00275bc:	83 fe 1f             	cmp    esi,0x1f
c00275bf:	7e 49                	jle    c002760a <__adddf3+0x36f>
c00275c1:	83 fe 3f             	cmp    esi,0x3f
c00275c4:	0f 8f 16 03 00 00    	jg     c00278e0 <__adddf3+0x645>
c00275ca:	83 e6 1f             	and    esi,0x1f
c00275cd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00275d0:	89 f1                	mov    ecx,esi
c00275d2:	d3 ef                	shr    edi,cl
c00275d4:	31 db                	xor    ebx,ebx
c00275d6:	85 f6                	test   esi,esi
c00275d8:	74 13                	je     c00275ed <__adddf3+0x352>
c00275da:	b9 20 00 00 00       	mov    ecx,0x20
c00275df:	29 f1                	sub    ecx,esi
c00275e1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275e4:	d3 e6                	shl    esi,cl
c00275e6:	31 db                	xor    ebx,ebx
c00275e8:	85 f6                	test   esi,esi
c00275ea:	0f 95 c3             	setne  bl
c00275ed:	31 c9                	xor    ecx,ecx
c00275ef:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00275f3:	0f 95 c1             	setne  cl
c00275f6:	09 cf                	or     edi,ecx
c00275f8:	09 fb                	or     ebx,edi
c00275fa:	29 da                	sub    edx,ebx
c00275fc:	83 d8 00             	sbb    eax,0x0
c00275ff:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027602:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027605:	e9 aa 01 00 00       	jmp    c00277b4 <__adddf3+0x519>
c002760a:	bf 20 00 00 00       	mov    edi,0x20
c002760f:	29 f7                	sub    edi,esi
c0027611:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027614:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027617:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002761a:	d3 e3                	shl    ebx,cl
c002761c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002761f:	89 f1                	mov    ecx,esi
c0027621:	d3 ef                	shr    edi,cl
c0027623:	09 fb                	or     ebx,edi
c0027625:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027628:	89 f1                	mov    ecx,esi
c002762a:	d3 ef                	shr    edi,cl
c002762c:	89 fe                	mov    esi,edi
c002762e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027631:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027634:	d3 e7                	shl    edi,cl
c0027636:	85 ff                	test   edi,edi
c0027638:	0f 95 c1             	setne  cl
c002763b:	0f b6 c9             	movzx  ecx,cl
c002763e:	09 cb                	or     ebx,ecx
c0027640:	29 da                	sub    edx,ebx
c0027642:	19 f0                	sbb    eax,esi
c0027644:	eb b9                	jmp    c00275ff <__adddf3+0x364>
c0027646:	0f 84 cd 00 00 00    	je     c0027719 <__adddf3+0x47e>
c002764c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002764f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027652:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027655:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027659:	75 1b                	jne    c0027676 <__adddf3+0x3db>
c002765b:	89 d6                	mov    esi,edx
c002765d:	09 c6                	or     esi,eax
c002765f:	0f 84 7b 02 00 00    	je     c00278e0 <__adddf3+0x645>
c0027665:	4b                   	dec    ebx
c0027666:	75 24                	jne    c002768c <__adddf3+0x3f1>
c0027668:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002766b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002766e:	29 d1                	sub    ecx,edx
c0027670:	19 c6                	sbb    esi,eax
c0027672:	89 ca                	mov    edx,ecx
c0027674:	eb 61                	jmp    c00276d7 <__adddf3+0x43c>
c0027676:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027679:	f7 d6                	not    esi
c002767b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027681:	0f 84 59 02 00 00    	je     c00278e0 <__adddf3+0x645>
c0027687:	0d 00 00 00 80       	or     eax,0x80000000
c002768c:	83 fb 1f             	cmp    ebx,0x1f
c002768f:	7e 4d                	jle    c00276de <__adddf3+0x443>
c0027691:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027694:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027697:	83 fb 3f             	cmp    ebx,0x3f
c002769a:	0f 8f 40 02 00 00    	jg     c00278e0 <__adddf3+0x645>
c00276a0:	83 e3 1f             	and    ebx,0x1f
c00276a3:	89 d9                	mov    ecx,ebx
c00276a5:	89 c7                	mov    edi,eax
c00276a7:	d3 ef                	shr    edi,cl
c00276a9:	31 db                	xor    ebx,ebx
c00276ab:	85 c9                	test   ecx,ecx
c00276ad:	74 12                	je     c00276c1 <__adddf3+0x426>
c00276af:	be 20 00 00 00       	mov    esi,0x20
c00276b4:	29 ce                	sub    esi,ecx
c00276b6:	89 f1                	mov    ecx,esi
c00276b8:	d3 e0                	shl    eax,cl
c00276ba:	31 db                	xor    ebx,ebx
c00276bc:	85 c0                	test   eax,eax
c00276be:	0f 95 c3             	setne  bl
c00276c1:	31 c0                	xor    eax,eax
c00276c3:	85 d2                	test   edx,edx
c00276c5:	0f 95 c0             	setne  al
c00276c8:	09 c7                	or     edi,eax
c00276ca:	09 fb                	or     ebx,edi
c00276cc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276cf:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00276d2:	29 da                	sub    edx,ebx
c00276d4:	83 de 00             	sbb    esi,0x0
c00276d7:	89 f0                	mov    eax,esi
c00276d9:	e9 d6 00 00 00       	jmp    c00277b4 <__adddf3+0x519>
c00276de:	be 20 00 00 00       	mov    esi,0x20
c00276e3:	29 de                	sub    esi,ebx
c00276e5:	89 c7                	mov    edi,eax
c00276e7:	89 f1                	mov    ecx,esi
c00276e9:	d3 e7                	shl    edi,cl
c00276eb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00276ee:	89 d7                	mov    edi,edx
c00276f0:	88 d9                	mov    cl,bl
c00276f2:	d3 ef                	shr    edi,cl
c00276f4:	89 f9                	mov    ecx,edi
c00276f6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00276f9:	09 cf                	or     edi,ecx
c00276fb:	88 d9                	mov    cl,bl
c00276fd:	d3 e8                	shr    eax,cl
c00276ff:	89 f1                	mov    ecx,esi
c0027701:	d3 e2                	shl    edx,cl
c0027703:	85 d2                	test   edx,edx
c0027705:	0f 95 c2             	setne  dl
c0027708:	0f b6 d2             	movzx  edx,dl
c002770b:	09 d7                	or     edi,edx
c002770d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027710:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027713:	29 fa                	sub    edx,edi
c0027715:	19 c6                	sbb    esi,eax
c0027717:	eb be                	jmp    c00276d7 <__adddf3+0x43c>
c0027719:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002771c:	8d 5e 01             	lea    ebx,[esi+0x1]
c002771f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027725:	75 6a                	jne    c0027791 <__adddf3+0x4f6>
c0027727:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002772b:	75 58                	jne    c0027785 <__adddf3+0x4ea>
c002772d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027730:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027733:	89 d6                	mov    esi,edx
c0027735:	09 c6                	or     esi,eax
c0027737:	75 17                	jne    c0027750 <__adddf3+0x4b5>
c0027739:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002773c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002773f:	85 db                	test   ebx,ebx
c0027741:	0f 85 99 01 00 00    	jne    c00278e0 <__adddf3+0x645>
c0027747:	31 ff                	xor    edi,edi
c0027749:	31 c9                	xor    ecx,ecx
c002774b:	e9 90 01 00 00       	jmp    c00278e0 <__adddf3+0x645>
c0027750:	85 db                	test   ebx,ebx
c0027752:	0f 84 88 01 00 00    	je     c00278e0 <__adddf3+0x645>
c0027758:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002775b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002775e:	85 c0                	test   eax,eax
c0027760:	79 10                	jns    c0027772 <__adddf3+0x4d7>
c0027762:	31 c9                	xor    ecx,ecx
c0027764:	f7 da                	neg    edx
c0027766:	0f 95 c1             	setne  cl
c0027769:	01 c8                	add    eax,ecx
c002776b:	f7 d8                	neg    eax
c002776d:	e9 2f 01 00 00       	jmp    c00278a1 <__adddf3+0x606>
c0027772:	31 ff                	xor    edi,edi
c0027774:	31 c9                	xor    ecx,ecx
c0027776:	89 c3                	mov    ebx,eax
c0027778:	09 d3                	or     ebx,edx
c002777a:	0f 84 60 01 00 00    	je     c00278e0 <__adddf3+0x645>
c0027780:	e9 05 01 00 00       	jmp    c002788a <__adddf3+0x5ef>
c0027785:	31 ff                	xor    edi,edi
c0027787:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002778c:	e9 4f 01 00 00       	jmp    c00278e0 <__adddf3+0x645>
c0027791:	89 c1                	mov    ecx,eax
c0027793:	89 d0                	mov    eax,edx
c0027795:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027798:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002779b:	89 ca                	mov    edx,ecx
c002779d:	85 c9                	test   ecx,ecx
c002779f:	79 2c                	jns    c00277cd <__adddf3+0x532>
c00277a1:	31 c9                	xor    ecx,ecx
c00277a3:	f7 d8                	neg    eax
c00277a5:	0f 95 c1             	setne  cl
c00277a8:	01 ca                	add    edx,ecx
c00277aa:	f7 da                	neg    edx
c00277ac:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00277af:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00277b2:	eb 19                	jmp    c00277cd <__adddf3+0x532>
c00277b4:	85 c0                	test   eax,eax
c00277b6:	0f 89 e5 00 00 00    	jns    c00278a1 <__adddf3+0x606>
c00277bc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00277c1:	89 c1                	mov    ecx,eax
c00277c3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00277c6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00277c9:	89 d0                	mov    eax,edx
c00277cb:	89 ca                	mov    edx,ecx
c00277cd:	85 d2                	test   edx,edx
c00277cf:	74 59                	je     c002782a <__adddf3+0x58f>
c00277d1:	0f bd da             	bsr    ebx,edx
c00277d4:	83 f3 1f             	xor    ebx,0x1f
c00277d7:	88 d9                	mov    cl,bl
c00277d9:	d3 e2                	shl    edx,cl
c00277db:	bf 20 00 00 00       	mov    edi,0x20
c00277e0:	89 f9                	mov    ecx,edi
c00277e2:	29 d9                	sub    ecx,ebx
c00277e4:	89 c6                	mov    esi,eax
c00277e6:	d3 ee                	shr    esi,cl
c00277e8:	09 d6                	or     esi,edx
c00277ea:	88 d9                	mov    cl,bl
c00277ec:	d3 e0                	shl    eax,cl
c00277ee:	89 c2                	mov    edx,eax
c00277f0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00277f3:	25 ff 07 00 00       	and    eax,0x7ff
c00277f8:	39 d8                	cmp    eax,ebx
c00277fa:	7f 22                	jg     c002781e <__adddf3+0x583>
c00277fc:	29 c3                	sub    ebx,eax
c00277fe:	43                   	inc    ebx
c00277ff:	88 d9                	mov    cl,bl
c0027801:	d3 ea                	shr    edx,cl
c0027803:	29 df                	sub    edi,ebx
c0027805:	89 f9                	mov    ecx,edi
c0027807:	89 f0                	mov    eax,esi
c0027809:	d3 e0                	shl    eax,cl
c002780b:	09 c2                	or     edx,eax
c002780d:	89 f0                	mov    eax,esi
c002780f:	88 d9                	mov    cl,bl
c0027811:	d3 e8                	shr    eax,cl
c0027813:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027816:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c002781c:	eb 6f                	jmp    c002788d <__adddf3+0x5f2>
c002781e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027821:	29 d8                	sub    eax,ebx
c0027823:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027826:	89 f0                	mov    eax,esi
c0027828:	eb 59                	jmp    c0027883 <__adddf3+0x5e8>
c002782a:	85 c0                	test   eax,eax
c002782c:	74 6a                	je     c0027898 <__adddf3+0x5fd>
c002782e:	0f bd c8             	bsr    ecx,eax
c0027831:	83 f1 1f             	xor    ecx,0x1f
c0027834:	d3 e0                	shl    eax,cl
c0027836:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027839:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002783f:	83 c1 20             	add    ecx,0x20
c0027842:	39 cb                	cmp    ebx,ecx
c0027844:	7f 35                	jg     c002787b <__adddf3+0x5e0>
c0027846:	29 d9                	sub    ecx,ebx
c0027848:	8d 71 01             	lea    esi,[ecx+0x1]
c002784b:	83 fe 1f             	cmp    esi,0x1f
c002784e:	7e 09                	jle    c0027859 <__adddf3+0x5be>
c0027850:	83 e9 1f             	sub    ecx,0x1f
c0027853:	d3 e8                	shr    eax,cl
c0027855:	89 c3                	mov    ebx,eax
c0027857:	eb 11                	jmp    c002786a <__adddf3+0x5cf>
c0027859:	b9 20 00 00 00       	mov    ecx,0x20
c002785e:	29 f1                	sub    ecx,esi
c0027860:	89 c3                	mov    ebx,eax
c0027862:	d3 e3                	shl    ebx,cl
c0027864:	89 f1                	mov    ecx,esi
c0027866:	d3 e8                	shr    eax,cl
c0027868:	89 c2                	mov    edx,eax
c002786a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002786d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027872:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027875:	89 d0                	mov    eax,edx
c0027877:	89 da                	mov    edx,ebx
c0027879:	eb 26                	jmp    c00278a1 <__adddf3+0x606>
c002787b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002787e:	29 cf                	sub    edi,ecx
c0027880:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027883:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027888:	eb 17                	jmp    c00278a1 <__adddf3+0x606>
c002788a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002788d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027890:	eb 0f                	jmp    c00278a1 <__adddf3+0x606>
c0027892:	31 d2                	xor    edx,edx
c0027894:	31 c0                	xor    eax,eax
c0027896:	eb 09                	jmp    c00278a1 <__adddf3+0x606>
c0027898:	89 c2                	mov    edx,eax
c002789a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00278a1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00278a4:	c1 e1 14             	shl    ecx,0x14
c00278a7:	89 c3                	mov    ebx,eax
c00278a9:	c1 eb 0b             	shr    ebx,0xb
c00278ac:	09 d9                	or     ecx,ebx
c00278ae:	89 d3                	mov    ebx,edx
c00278b0:	c1 eb 0b             	shr    ebx,0xb
c00278b3:	c1 e0 15             	shl    eax,0x15
c00278b6:	09 d8                	or     eax,ebx
c00278b8:	89 c7                	mov    edi,eax
c00278ba:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00278c0:	0f 95 c0             	setne  al
c00278c3:	89 c6                	mov    esi,eax
c00278c5:	09 f3                	or     ebx,esi
c00278c7:	83 e3 01             	and    ebx,0x1
c00278ca:	c1 ea 0a             	shr    edx,0xa
c00278cd:	21 da                	and    edx,ebx
c00278cf:	89 f8                	mov    eax,edi
c00278d1:	01 d0                	add    eax,edx
c00278d3:	83 d1 00             	adc    ecx,0x0
c00278d6:	89 c7                	mov    edi,eax
c00278d8:	eb 06                	jmp    c00278e0 <__adddf3+0x645>
c00278da:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00278dd:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00278e0:	89 f8                	mov    eax,edi
c00278e2:	89 ca                	mov    edx,ecx
c00278e4:	83 c4 24             	add    esp,0x24
c00278e7:	5b                   	pop    ebx
c00278e8:	5e                   	pop    esi
c00278e9:	5f                   	pop    edi
c00278ea:	5d                   	pop    ebp
c00278eb:	c3                   	ret    

c00278ec <__subdf3>:
c00278ec:	55                   	push   ebp
c00278ed:	89 e5                	mov    ebp,esp
c00278ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00278f2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00278f5:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00278fb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00278fe:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027901:	5d                   	pop    ebp
c0027902:	e9 94 f9 ff ff       	jmp    c002729b <__adddf3>

c0027907 <__negdf2>:
c0027907:	55                   	push   ebp
c0027908:	89 e5                	mov    ebp,esp
c002790a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002790d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027910:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027916:	5d                   	pop    ebp
c0027917:	c3                   	ret    

c0027918 <__muldf3>:
c0027918:	55                   	push   ebp
c0027919:	89 e5                	mov    ebp,esp
c002791b:	57                   	push   edi
c002791c:	56                   	push   esi
c002791d:	53                   	push   ebx
c002791e:	83 ec 24             	sub    esp,0x24
c0027921:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027924:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027927:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002792a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002792d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027930:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027933:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027936:	89 c8                	mov    eax,ecx
c0027938:	c1 f8 14             	sar    eax,0x14
c002793b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002793e:	89 f8                	mov    eax,edi
c0027940:	89 fb                	mov    ebx,edi
c0027942:	c1 e3 0b             	shl    ebx,0xb
c0027945:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027948:	c1 e1 0b             	shl    ecx,0xb
c002794b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027951:	c1 e8 15             	shr    eax,0x15
c0027954:	09 c1                	or     ecx,eax
c0027956:	89 d6                	mov    esi,edx
c0027958:	89 d0                	mov    eax,edx
c002795a:	c1 f8 14             	sar    eax,0x14
c002795d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027960:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027963:	89 c3                	mov    ebx,eax
c0027965:	c1 e3 0b             	shl    ebx,0xb
c0027968:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002796b:	c1 e6 0b             	shl    esi,0xb
c002796e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027974:	c1 e8 15             	shr    eax,0x15
c0027977:	09 c6                	or     esi,eax
c0027979:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002797c:	25 ff 07 00 00       	and    eax,0x7ff
c0027981:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027984:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027987:	25 ff 07 00 00       	and    eax,0x7ff
c002798c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002798f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027992:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027995:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002799c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002799f:	40                   	inc    eax
c00279a0:	a9 fe 07 00 00       	test   eax,0x7fe
c00279a5:	0f 85 8d 00 00 00    	jne    c0027a38 <__muldf3+0x120>
c00279ab:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00279ae:	09 c8                	or     eax,ecx
c00279b0:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00279b4:	74 44                	je     c00279fa <__muldf3+0xe2>
c00279b6:	85 c0                	test   eax,eax
c00279b8:	0f 85 31 02 00 00    	jne    c0027bef <__muldf3+0x2d7>
c00279be:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00279c1:	40                   	inc    eax
c00279c2:	a9 fe 07 00 00       	test   eax,0x7fe
c00279c7:	75 13                	jne    c00279dc <__muldf3+0xc4>
c00279c9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00279cc:	09 f1                	or     ecx,esi
c00279ce:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00279d2:	74 22                	je     c00279f6 <__muldf3+0xde>
c00279d4:	85 c9                	test   ecx,ecx
c00279d6:	0f 85 0d 02 00 00    	jne    c0027be9 <__muldf3+0x2d1>
c00279dc:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00279e0:	0f 89 09 02 00 00    	jns    c0027bef <__muldf3+0x2d7>
c00279e6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00279e9:	05 00 00 00 80       	add    eax,0x80000000
c00279ee:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00279f1:	e9 f9 01 00 00       	jmp    c0027bef <__muldf3+0x2d7>
c00279f6:	85 c9                	test   ecx,ecx
c00279f8:	eb 2e                	jmp    c0027a28 <__muldf3+0x110>
c00279fa:	85 c0                	test   eax,eax
c00279fc:	74 20                	je     c0027a1e <__muldf3+0x106>
c00279fe:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027a01:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a04:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a07:	c1 ef 1f             	shr    edi,0x1f
c0027a0a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027a0d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027a10:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027a13:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027a16:	09 f9                	or     ecx,edi
c0027a18:	78 1e                	js     c0027a38 <__muldf3+0x120>
c0027a1a:	89 c3                	mov    ebx,eax
c0027a1c:	eb e0                	jmp    c00279fe <__muldf3+0xe6>
c0027a1e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027a21:	f7 d0                	not    eax
c0027a23:	a9 ff 07 00 00       	test   eax,0x7ff
c0027a28:	75 b2                	jne    c00279dc <__muldf3+0xc4>
c0027a2a:	31 ff                	xor    edi,edi
c0027a2c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027a33:	e9 b7 01 00 00       	jmp    c0027bef <__muldf3+0x2d7>
c0027a38:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027a3b:	40                   	inc    eax
c0027a3c:	a9 fe 07 00 00       	test   eax,0x7fe
c0027a41:	75 57                	jne    c0027a9a <__muldf3+0x182>
c0027a43:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027a46:	09 f0                	or     eax,esi
c0027a48:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027a4c:	74 23                	je     c0027a71 <__muldf3+0x159>
c0027a4e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027a52:	0f 89 91 01 00 00    	jns    c0027be9 <__muldf3+0x2d1>
c0027a58:	85 c0                	test   eax,eax
c0027a5a:	0f 85 89 01 00 00    	jne    c0027be9 <__muldf3+0x2d1>
c0027a60:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027a63:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027a69:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a6c:	e9 7e 01 00 00       	jmp    c0027bef <__muldf3+0x2d7>
c0027a71:	85 c0                	test   eax,eax
c0027a73:	75 0c                	jne    c0027a81 <__muldf3+0x169>
c0027a75:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027a79:	0f 89 6a 01 00 00    	jns    c0027be9 <__muldf3+0x2d1>
c0027a7f:	eb df                	jmp    c0027a60 <__muldf3+0x148>
c0027a81:	01 f6                	add    esi,esi
c0027a83:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a86:	c1 ea 1f             	shr    edx,0x1f
c0027a89:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027a8c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027a8f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027a92:	09 d6                	or     esi,edx
c0027a94:	78 04                	js     c0027a9a <__muldf3+0x182>
c0027a96:	89 c3                	mov    ebx,eax
c0027a98:	eb e7                	jmp    c0027a81 <__muldf3+0x169>
c0027a9a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027aa0:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027aa6:	89 c8                	mov    eax,ecx
c0027aa8:	f7 e6                	mul    esi
c0027aaa:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027aad:	89 c7                	mov    edi,eax
c0027aaf:	89 c8                	mov    eax,ecx
c0027ab1:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027ab4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027ab7:	89 c1                	mov    ecx,eax
c0027ab9:	89 f0                	mov    eax,esi
c0027abb:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027abe:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027ac1:	89 c6                	mov    esi,eax
c0027ac3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ac6:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027ac9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027acc:	31 c0                	xor    eax,eax
c0027ace:	01 f1                	add    ecx,esi
c0027ad0:	0f 92 c0             	setb   al
c0027ad3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027ad6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027ad9:	83 d6 00             	adc    esi,0x0
c0027adc:	01 c7                	add    edi,eax
c0027ade:	83 d6 00             	adc    esi,0x0
c0027ae1:	01 ca                	add    edx,ecx
c0027ae3:	0f 92 c1             	setb   cl
c0027ae6:	0f b6 c9             	movzx  ecx,cl
c0027ae9:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027aec:	83 d6 00             	adc    esi,0x0
c0027aef:	01 cf                	add    edi,ecx
c0027af1:	83 d6 00             	adc    esi,0x0
c0027af4:	31 c9                	xor    ecx,ecx
c0027af6:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027af9:	0f 95 c1             	setne  cl
c0027afc:	09 cf                	or     edi,ecx
c0027afe:	85 f6                	test   esi,esi
c0027b00:	78 0c                	js     c0027b0e <__muldf3+0x1f6>
c0027b02:	01 f6                	add    esi,esi
c0027b04:	89 f8                	mov    eax,edi
c0027b06:	c1 e8 1f             	shr    eax,0x1f
c0027b09:	09 c6                	or     esi,eax
c0027b0b:	01 ff                	add    edi,edi
c0027b0d:	4b                   	dec    ebx
c0027b0e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027b14:	0f 8f 85 00 00 00    	jg     c0027b9f <__muldf3+0x287>
c0027b1a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027b20:	85 db                	test   ebx,ebx
c0027b22:	0f 8f 84 00 00 00    	jg     c0027bac <__muldf3+0x294>
c0027b28:	83 fb cc             	cmp    ebx,0xffffffcc
c0027b2b:	7c 79                	jl     c0027ba6 <__muldf3+0x28e>
c0027b2d:	ba 01 00 00 00       	mov    edx,0x1
c0027b32:	29 da                	sub    edx,ebx
c0027b34:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027b3a:	83 fa 1f             	cmp    edx,0x1f
c0027b3d:	7e 30                	jle    c0027b6f <__muldf3+0x257>
c0027b3f:	83 fa 20             	cmp    edx,0x20
c0027b42:	75 0b                	jne    c0027b4f <__muldf3+0x237>
c0027b44:	31 c0                	xor    eax,eax
c0027b46:	85 ff                	test   edi,edi
c0027b48:	0f 95 c0             	setne  al
c0027b4b:	89 c7                	mov    edi,eax
c0027b4d:	eb 1a                	jmp    c0027b69 <__muldf3+0x251>
c0027b4f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027b52:	89 f0                	mov    eax,esi
c0027b54:	d3 e0                	shl    eax,cl
c0027b56:	09 f8                	or     eax,edi
c0027b58:	0f 95 c0             	setne  al
c0027b5b:	0f b6 c0             	movzx  eax,al
c0027b5e:	89 c7                	mov    edi,eax
c0027b60:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027b65:	29 d9                	sub    ecx,ebx
c0027b67:	d3 ee                	shr    esi,cl
c0027b69:	09 f7                	or     edi,esi
c0027b6b:	31 db                	xor    ebx,ebx
c0027b6d:	eb 3b                	jmp    c0027baa <__muldf3+0x292>
c0027b6f:	83 c3 1f             	add    ebx,0x1f
c0027b72:	89 f0                	mov    eax,esi
c0027b74:	88 d9                	mov    cl,bl
c0027b76:	d3 e0                	shl    eax,cl
c0027b78:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b7b:	89 f8                	mov    eax,edi
c0027b7d:	88 d1                	mov    cl,dl
c0027b7f:	d3 e8                	shr    eax,cl
c0027b81:	89 c1                	mov    ecx,eax
c0027b83:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027b86:	09 c8                	or     eax,ecx
c0027b88:	88 d9                	mov    cl,bl
c0027b8a:	d3 e7                	shl    edi,cl
c0027b8c:	31 db                	xor    ebx,ebx
c0027b8e:	85 ff                	test   edi,edi
c0027b90:	0f 95 c3             	setne  bl
c0027b93:	89 df                	mov    edi,ebx
c0027b95:	09 c7                	or     edi,eax
c0027b97:	88 d1                	mov    cl,dl
c0027b99:	d3 ee                	shr    esi,cl
c0027b9b:	31 db                	xor    ebx,ebx
c0027b9d:	eb 0d                	jmp    c0027bac <__muldf3+0x294>
c0027b9f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027ba4:	eb 02                	jmp    c0027ba8 <__muldf3+0x290>
c0027ba6:	31 db                	xor    ebx,ebx
c0027ba8:	31 ff                	xor    edi,edi
c0027baa:	31 f6                	xor    esi,esi
c0027bac:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027baf:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027bb2:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027bb7:	09 c3                	or     ebx,eax
c0027bb9:	c1 e3 14             	shl    ebx,0x14
c0027bbc:	89 f0                	mov    eax,esi
c0027bbe:	c1 e8 0b             	shr    eax,0xb
c0027bc1:	09 c3                	or     ebx,eax
c0027bc3:	89 f8                	mov    eax,edi
c0027bc5:	c1 e8 0b             	shr    eax,0xb
c0027bc8:	c1 e6 15             	shl    esi,0x15
c0027bcb:	09 c6                	or     esi,eax
c0027bcd:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027bd3:	0f 95 c1             	setne  cl
c0027bd6:	09 c8                	or     eax,ecx
c0027bd8:	83 e0 01             	and    eax,0x1
c0027bdb:	c1 ef 0a             	shr    edi,0xa
c0027bde:	21 c7                	and    edi,eax
c0027be0:	01 f7                	add    edi,esi
c0027be2:	83 d3 00             	adc    ebx,0x0
c0027be5:	89 da                	mov    edx,ebx
c0027be7:	eb 03                	jmp    c0027bec <__muldf3+0x2d4>
c0027be9:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027bec:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027bef:	89 f8                	mov    eax,edi
c0027bf1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027bf4:	83 c4 24             	add    esp,0x24
c0027bf7:	5b                   	pop    ebx
c0027bf8:	5e                   	pop    esi
c0027bf9:	5f                   	pop    edi
c0027bfa:	5d                   	pop    ebp
c0027bfb:	c3                   	ret    

c0027bfc <__divdf3>:
c0027bfc:	55                   	push   ebp
c0027bfd:	89 e5                	mov    ebp,esp
c0027bff:	57                   	push   edi
c0027c00:	56                   	push   esi
c0027c01:	53                   	push   ebx
c0027c02:	83 ec 2c             	sub    esp,0x2c
c0027c05:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027c08:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027c0b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027c0e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027c11:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027c14:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027c17:	89 ce                	mov    esi,ecx
c0027c19:	89 c8                	mov    eax,ecx
c0027c1b:	c1 f8 14             	sar    eax,0x14
c0027c1e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027c21:	89 f8                	mov    eax,edi
c0027c23:	89 fb                	mov    ebx,edi
c0027c25:	c1 e3 0b             	shl    ebx,0xb
c0027c28:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027c2b:	c1 e6 0b             	shl    esi,0xb
c0027c2e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027c34:	c1 e8 15             	shr    eax,0x15
c0027c37:	09 c6                	or     esi,eax
c0027c39:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027c3c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027c3f:	89 c2                	mov    edx,eax
c0027c41:	c1 fa 14             	sar    edx,0x14
c0027c44:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027c47:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027c4a:	89 de                	mov    esi,ebx
c0027c4c:	c1 e6 0b             	shl    esi,0xb
c0027c4f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027c52:	c1 e0 0b             	shl    eax,0xb
c0027c55:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027c5a:	c1 eb 15             	shr    ebx,0x15
c0027c5d:	09 d8                	or     eax,ebx
c0027c5f:	89 c2                	mov    edx,eax
c0027c61:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c64:	25 ff 07 00 00       	and    eax,0x7ff
c0027c69:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027c6c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027c6f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027c75:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027c78:	29 d8                	sub    eax,ebx
c0027c7a:	05 ff 03 00 00       	add    eax,0x3ff
c0027c7f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027c82:	46                   	inc    esi
c0027c83:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027c89:	0f 85 a5 00 00 00    	jne    c0027d34 <__divdf3+0x138>
c0027c8f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027c92:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027c95:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027c99:	74 2a                	je     c0027cc5 <__divdf3+0xc9>
c0027c9b:	85 f6                	test   esi,esi
c0027c9d:	0f 85 cc 02 00 00    	jne    c0027f6f <__divdf3+0x373>
c0027ca3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ca6:	40                   	inc    eax
c0027ca7:	a9 fe 07 00 00       	test   eax,0x7fe
c0027cac:	75 26                	jne    c0027cd4 <__divdf3+0xd8>
c0027cae:	85 db                	test   ebx,ebx
c0027cb0:	74 22                	je     c0027cd4 <__divdf3+0xd8>
c0027cb2:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027cb5:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027cb8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027cbb:	09 d0                	or     eax,edx
c0027cbd:	0f 85 ac 02 00 00    	jne    c0027f6f <__divdf3+0x373>
c0027cc3:	eb 63                	jmp    c0027d28 <__divdf3+0x12c>
c0027cc5:	85 f6                	test   esi,esi
c0027cc7:	75 22                	jne    c0027ceb <__divdf3+0xef>
c0027cc9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ccc:	40                   	inc    eax
c0027ccd:	a9 fe 07 00 00       	test   eax,0x7fe
c0027cd2:	74 36                	je     c0027d0a <__divdf3+0x10e>
c0027cd4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027cd8:	0f 89 91 02 00 00    	jns    c0027f6f <__divdf3+0x373>
c0027cde:	89 f8                	mov    eax,edi
c0027ce0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027ce6:	e9 80 02 00 00       	jmp    c0027f6b <__divdf3+0x36f>
c0027ceb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027cee:	01 f6                	add    esi,esi
c0027cf0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027cf3:	c1 ef 1f             	shr    edi,0x1f
c0027cf6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027cf9:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027cfc:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027cff:	09 f7                	or     edi,esi
c0027d01:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027d04:	78 2e                	js     c0027d34 <__divdf3+0x138>
c0027d06:	89 c8                	mov    eax,ecx
c0027d08:	eb e1                	jmp    c0027ceb <__divdf3+0xef>
c0027d0a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d0d:	09 d0                	or     eax,edx
c0027d0f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027d13:	74 0f                	je     c0027d24 <__divdf3+0x128>
c0027d15:	85 c0                	test   eax,eax
c0027d17:	74 bb                	je     c0027cd4 <__divdf3+0xd8>
c0027d19:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027d1c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027d1f:	e9 4b 02 00 00       	jmp    c0027f6f <__divdf3+0x373>
c0027d24:	85 c0                	test   eax,eax
c0027d26:	75 ac                	jne    c0027cd4 <__divdf3+0xd8>
c0027d28:	31 ff                	xor    edi,edi
c0027d2a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027d2f:	e9 3b 02 00 00       	jmp    c0027f6f <__divdf3+0x373>
c0027d34:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027d37:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027d3a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027d40:	75 6b                	jne    c0027dad <__divdf3+0x1b1>
c0027d42:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027d45:	09 d6                	or     esi,edx
c0027d47:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027d4b:	74 28                	je     c0027d75 <__divdf3+0x179>
c0027d4d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027d50:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027d53:	85 f6                	test   esi,esi
c0027d55:	0f 85 14 02 00 00    	jne    c0027f6f <__divdf3+0x373>
c0027d5b:	31 ff                	xor    edi,edi
c0027d5d:	31 c9                	xor    ecx,ecx
c0027d5f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d62:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027d65:	0f 89 04 02 00 00    	jns    c0027f6f <__divdf3+0x373>
c0027d6b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027d70:	e9 fa 01 00 00       	jmp    c0027f6f <__divdf3+0x373>
c0027d75:	85 f6                	test   esi,esi
c0027d77:	75 1b                	jne    c0027d94 <__divdf3+0x198>
c0027d79:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d7c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027d7f:	25 00 00 00 80       	and    eax,0x80000000
c0027d84:	31 c9                	xor    ecx,ecx
c0027d86:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027d8b:	89 cf                	mov    edi,ecx
c0027d8d:	89 c1                	mov    ecx,eax
c0027d8f:	e9 db 01 00 00       	jmp    c0027f6f <__divdf3+0x373>
c0027d94:	01 d2                	add    edx,edx
c0027d96:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027d99:	c1 eb 1f             	shr    ebx,0x1f
c0027d9c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027d9f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027da2:	8d 48 01             	lea    ecx,[eax+0x1]
c0027da5:	09 da                	or     edx,ebx
c0027da7:	78 04                	js     c0027dad <__divdf3+0x1b1>
c0027da9:	89 c8                	mov    eax,ecx
c0027dab:	eb e7                	jmp    c0027d94 <__divdf3+0x198>
c0027dad:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027db0:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027db6:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027dbc:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027dbf:	39 d6                	cmp    esi,edx
c0027dc1:	77 0d                	ja     c0027dd0 <__divdf3+0x1d4>
c0027dc3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027dc6:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027dc9:	72 1b                	jb     c0027de6 <__divdf3+0x1ea>
c0027dcb:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027dce:	75 16                	jne    c0027de6 <__divdf3+0x1ea>
c0027dd0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027dd3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027dd6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027dd9:	83 de 00             	sbb    esi,0x0
c0027ddc:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027ddf:	ba 01 00 00 00       	mov    edx,0x1
c0027de4:	eb 02                	jmp    c0027de8 <__divdf3+0x1ec>
c0027de6:	31 d2                	xor    edx,edx
c0027de8:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027def:	31 ff                	xor    edi,edi
c0027df1:	01 ff                	add    edi,edi
c0027df3:	89 d1                	mov    ecx,edx
c0027df5:	c1 e9 1f             	shr    ecx,0x1f
c0027df8:	09 cf                	or     edi,ecx
c0027dfa:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027dfd:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027e00:	89 da                	mov    edx,ebx
c0027e02:	89 f3                	mov    ebx,esi
c0027e04:	8d 34 36             	lea    esi,[esi+esi*1]
c0027e07:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027e0a:	c1 e9 1f             	shr    ecx,0x1f
c0027e0d:	09 ce                	or     esi,ecx
c0027e0f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027e12:	01 c9                	add    ecx,ecx
c0027e14:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027e17:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027e1a:	85 db                	test   ebx,ebx
c0027e1c:	78 29                	js     c0027e47 <__divdf3+0x24b>
c0027e1e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027e21:	72 07                	jb     c0027e2a <__divdf3+0x22e>
c0027e23:	75 3c                	jne    c0027e61 <__divdf3+0x265>
c0027e25:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027e28:	77 37                	ja     c0027e61 <__divdf3+0x265>
c0027e2a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027e2d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027e30:	31 d2                	xor    edx,edx
c0027e32:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0027e35:	0f 97 c2             	seta   dl
c0027e38:	29 d6                	sub    esi,edx
c0027e3a:	89 d9                	mov    ecx,ebx
c0027e3c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027e3f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027e42:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0027e45:	eb 17                	jmp    c0027e5e <__divdf3+0x262>
c0027e47:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027e4a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027e4d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027e50:	0f 97 c1             	seta   cl
c0027e53:	0f b6 c9             	movzx  ecx,cl
c0027e56:	29 ce                	sub    esi,ecx
c0027e58:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027e5b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027e5e:	83 ca 01             	or     edx,0x1
c0027e61:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0027e64:	75 8b                	jne    c0027df1 <__divdf3+0x1f5>
c0027e66:	c1 e7 09             	shl    edi,0x9
c0027e69:	89 d1                	mov    ecx,edx
c0027e6b:	c1 e9 17             	shr    ecx,0x17
c0027e6e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027e71:	09 f3                	or     ebx,esi
c0027e73:	0f 95 c3             	setne  bl
c0027e76:	0f b6 db             	movzx  ebx,bl
c0027e79:	c1 e2 09             	shl    edx,0x9
c0027e7c:	09 d3                	or     ebx,edx
c0027e7e:	89 ca                	mov    edx,ecx
c0027e80:	09 fa                	or     edx,edi
c0027e82:	78 0c                	js     c0027e90 <__divdf3+0x294>
c0027e84:	01 d2                	add    edx,edx
c0027e86:	89 d9                	mov    ecx,ebx
c0027e88:	c1 e9 1f             	shr    ecx,0x1f
c0027e8b:	09 ca                	or     edx,ecx
c0027e8d:	01 db                	add    ebx,ebx
c0027e8f:	48                   	dec    eax
c0027e90:	3d fe 07 00 00       	cmp    eax,0x7fe
c0027e95:	0f 8f 83 00 00 00    	jg     c0027f1e <__divdf3+0x322>
c0027e9b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027ea1:	85 c0                	test   eax,eax
c0027ea3:	0f 8f 82 00 00 00    	jg     c0027f2b <__divdf3+0x32f>
c0027ea9:	83 f8 cc             	cmp    eax,0xffffffcc
c0027eac:	7c 77                	jl     c0027f25 <__divdf3+0x329>
c0027eae:	be 01 00 00 00       	mov    esi,0x1
c0027eb3:	29 c6                	sub    esi,eax
c0027eb5:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027ebb:	83 fe 1f             	cmp    esi,0x1f
c0027ebe:	7e 2f                	jle    c0027eef <__divdf3+0x2f3>
c0027ec0:	83 fe 20             	cmp    esi,0x20
c0027ec3:	75 0a                	jne    c0027ecf <__divdf3+0x2d3>
c0027ec5:	85 db                	test   ebx,ebx
c0027ec7:	0f 95 c3             	setne  bl
c0027eca:	0f b6 db             	movzx  ebx,bl
c0027ecd:	eb 1a                	jmp    c0027ee9 <__divdf3+0x2ed>
c0027ecf:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0027ed2:	89 d7                	mov    edi,edx
c0027ed4:	d3 e7                	shl    edi,cl
c0027ed6:	89 f9                	mov    ecx,edi
c0027ed8:	09 d9                	or     ecx,ebx
c0027eda:	0f 95 c3             	setne  bl
c0027edd:	0f b6 db             	movzx  ebx,bl
c0027ee0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027ee5:	29 c1                	sub    ecx,eax
c0027ee7:	d3 ea                	shr    edx,cl
c0027ee9:	09 d3                	or     ebx,edx
c0027eeb:	31 c0                	xor    eax,eax
c0027eed:	eb 3a                	jmp    c0027f29 <__divdf3+0x32d>
c0027eef:	83 c0 1f             	add    eax,0x1f
c0027ef2:	89 d7                	mov    edi,edx
c0027ef4:	88 c1                	mov    cl,al
c0027ef6:	d3 e7                	shl    edi,cl
c0027ef8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027efb:	89 df                	mov    edi,ebx
c0027efd:	89 f1                	mov    ecx,esi
c0027eff:	d3 ef                	shr    edi,cl
c0027f01:	89 f9                	mov    ecx,edi
c0027f03:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027f06:	09 cf                	or     edi,ecx
c0027f08:	88 c1                	mov    cl,al
c0027f0a:	d3 e3                	shl    ebx,cl
c0027f0c:	85 db                	test   ebx,ebx
c0027f0e:	0f 95 c3             	setne  bl
c0027f11:	0f b6 db             	movzx  ebx,bl
c0027f14:	09 fb                	or     ebx,edi
c0027f16:	89 f1                	mov    ecx,esi
c0027f18:	d3 ea                	shr    edx,cl
c0027f1a:	31 c0                	xor    eax,eax
c0027f1c:	eb 0d                	jmp    c0027f2b <__divdf3+0x32f>
c0027f1e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0027f23:	eb 02                	jmp    c0027f27 <__divdf3+0x32b>
c0027f25:	31 c0                	xor    eax,eax
c0027f27:	31 db                	xor    ebx,ebx
c0027f29:	31 d2                	xor    edx,edx
c0027f2b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027f2e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027f31:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0027f37:	09 c8                	or     eax,ecx
c0027f39:	c1 e0 14             	shl    eax,0x14
c0027f3c:	89 d1                	mov    ecx,edx
c0027f3e:	c1 e9 0b             	shr    ecx,0xb
c0027f41:	09 c8                	or     eax,ecx
c0027f43:	89 c6                	mov    esi,eax
c0027f45:	89 d9                	mov    ecx,ebx
c0027f47:	c1 e9 0b             	shr    ecx,0xb
c0027f4a:	c1 e2 15             	shl    edx,0x15
c0027f4d:	09 ca                	or     edx,ecx
c0027f4f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0027f55:	0f 95 c0             	setne  al
c0027f58:	09 c1                	or     ecx,eax
c0027f5a:	83 e1 01             	and    ecx,0x1
c0027f5d:	c1 eb 0a             	shr    ebx,0xa
c0027f60:	21 cb                	and    ebx,ecx
c0027f62:	01 d3                	add    ebx,edx
c0027f64:	89 d8                	mov    eax,ebx
c0027f66:	83 d6 00             	adc    esi,0x0
c0027f69:	89 f2                	mov    edx,esi
c0027f6b:	89 c7                	mov    edi,eax
c0027f6d:	89 d1                	mov    ecx,edx
c0027f6f:	89 f8                	mov    eax,edi
c0027f71:	89 ca                	mov    edx,ecx
c0027f73:	83 c4 2c             	add    esp,0x2c
c0027f76:	5b                   	pop    ebx
c0027f77:	5e                   	pop    esi
c0027f78:	5f                   	pop    edi
c0027f79:	5d                   	pop    ebp
c0027f7a:	c3                   	ret    

c0027f7b <__floatsidf>:
c0027f7b:	55                   	push   ebp
c0027f7c:	89 e5                	mov    ebp,esp
c0027f7e:	56                   	push   esi
c0027f7f:	53                   	push   ebx
c0027f80:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027f83:	85 db                	test   ebx,ebx
c0027f85:	7e 15                	jle    c0027f9c <__floatsidf+0x21>
c0027f87:	0f bd cb             	bsr    ecx,ebx
c0027f8a:	83 f1 1f             	xor    ecx,0x1f
c0027f8d:	d3 e3                	shl    ebx,cl
c0027f8f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027f95:	b8 1e 04 00 00       	mov    eax,0x41e
c0027f9a:	eb 21                	jmp    c0027fbd <__floatsidf+0x42>
c0027f9c:	b8 00 00 00 00       	mov    eax,0x0
c0027fa1:	ba 00 00 00 00       	mov    edx,0x0
c0027fa6:	74 2a                	je     c0027fd2 <__floatsidf+0x57>
c0027fa8:	f7 db                	neg    ebx
c0027faa:	0f bd cb             	bsr    ecx,ebx
c0027fad:	83 f1 1f             	xor    ecx,0x1f
c0027fb0:	d3 e3                	shl    ebx,cl
c0027fb2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027fb8:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0027fbd:	29 c8                	sub    eax,ecx
c0027fbf:	c1 e0 14             	shl    eax,0x14
c0027fc2:	89 c1                	mov    ecx,eax
c0027fc4:	89 de                	mov    esi,ebx
c0027fc6:	c1 ee 0b             	shr    esi,0xb
c0027fc9:	09 f1                	or     ecx,esi
c0027fcb:	89 ca                	mov    edx,ecx
c0027fcd:	c1 e3 15             	shl    ebx,0x15
c0027fd0:	89 d8                	mov    eax,ebx
c0027fd2:	5b                   	pop    ebx
c0027fd3:	5e                   	pop    esi
c0027fd4:	5d                   	pop    ebp
c0027fd5:	c3                   	ret    

c0027fd6 <__floatunsidf>:
c0027fd6:	55                   	push   ebp
c0027fd7:	89 e5                	mov    ebp,esp
c0027fd9:	56                   	push   esi
c0027fda:	53                   	push   ebx
c0027fdb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027fde:	85 db                	test   ebx,ebx
c0027fe0:	74 2a                	je     c002800c <__floatunsidf+0x36>
c0027fe2:	0f bd cb             	bsr    ecx,ebx
c0027fe5:	83 f1 1f             	xor    ecx,0x1f
c0027fe8:	d3 e3                	shl    ebx,cl
c0027fea:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027ff0:	b8 1e 04 00 00       	mov    eax,0x41e
c0027ff5:	29 c8                	sub    eax,ecx
c0027ff7:	c1 e0 14             	shl    eax,0x14
c0027ffa:	89 c1                	mov    ecx,eax
c0027ffc:	89 de                	mov    esi,ebx
c0027ffe:	c1 ee 0b             	shr    esi,0xb
c0028001:	09 f1                	or     ecx,esi
c0028003:	89 ca                	mov    edx,ecx
c0028005:	c1 e3 15             	shl    ebx,0x15
c0028008:	89 d8                	mov    eax,ebx
c002800a:	eb 04                	jmp    c0028010 <__floatunsidf+0x3a>
c002800c:	31 c0                	xor    eax,eax
c002800e:	31 d2                	xor    edx,edx
c0028010:	5b                   	pop    ebx
c0028011:	5e                   	pop    esi
c0028012:	5d                   	pop    ebp
c0028013:	c3                   	ret    

c0028014 <__fixdfsi>:
c0028014:	55                   	push   ebp
c0028015:	89 e5                	mov    ebp,esp
c0028017:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002801a:	89 d1                	mov    ecx,edx
c002801c:	c1 e1 0b             	shl    ecx,0xb
c002801f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028028:	c1 e8 15             	shr    eax,0x15
c002802b:	09 c1                	or     ecx,eax
c002802d:	c1 fa 14             	sar    edx,0x14
c0028030:	78 1f                	js     c0028051 <__fixdfsi+0x3d>
c0028032:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028038:	31 c0                	xor    eax,eax
c002803a:	83 fa 1e             	cmp    edx,0x1e
c002803d:	77 40                	ja     c002807f <__fixdfsi+0x6b>
c002803f:	89 c8                	mov    eax,ecx
c0028041:	0d 00 00 00 80       	or     eax,0x80000000
c0028046:	b9 1f 00 00 00       	mov    ecx,0x1f
c002804b:	29 d1                	sub    ecx,edx
c002804d:	d3 e8                	shr    eax,cl
c002804f:	eb 2e                	jmp    c002807f <__fixdfsi+0x6b>
c0028051:	31 c0                	xor    eax,eax
c0028053:	81 c2 01 04 00 00    	add    edx,0x401
c0028059:	78 24                	js     c002807f <__fixdfsi+0x6b>
c002805b:	83 fa 1e             	cmp    edx,0x1e
c002805e:	7e 09                	jle    c0028069 <__fixdfsi+0x55>
c0028060:	83 fa 1f             	cmp    edx,0x1f
c0028063:	75 18                	jne    c002807d <__fixdfsi+0x69>
c0028065:	85 c9                	test   ecx,ecx
c0028067:	75 14                	jne    c002807d <__fixdfsi+0x69>
c0028069:	89 c8                	mov    eax,ecx
c002806b:	0d 00 00 00 80       	or     eax,0x80000000
c0028070:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028075:	29 d1                	sub    ecx,edx
c0028077:	d3 e8                	shr    eax,cl
c0028079:	f7 d8                	neg    eax
c002807b:	eb 02                	jmp    c002807f <__fixdfsi+0x6b>
c002807d:	31 c0                	xor    eax,eax
c002807f:	5d                   	pop    ebp
c0028080:	c3                   	ret    

c0028081 <__fixunsdfsi>:
c0028081:	55                   	push   ebp
c0028082:	89 e5                	mov    ebp,esp
c0028084:	53                   	push   ebx
c0028085:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028088:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002808b:	89 d3                	mov    ebx,edx
c002808d:	c1 fb 14             	sar    ebx,0x14
c0028090:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028096:	31 c0                	xor    eax,eax
c0028098:	83 fb 1f             	cmp    ebx,0x1f
c002809b:	77 1d                	ja     c00280ba <__fixunsdfsi+0x39>
c002809d:	89 d0                	mov    eax,edx
c002809f:	c1 e0 0b             	shl    eax,0xb
c00280a2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00280a7:	c1 e9 15             	shr    ecx,0x15
c00280aa:	09 c8                	or     eax,ecx
c00280ac:	0d 00 00 00 80       	or     eax,0x80000000
c00280b1:	b9 1f 00 00 00       	mov    ecx,0x1f
c00280b6:	29 d9                	sub    ecx,ebx
c00280b8:	d3 e8                	shr    eax,cl
c00280ba:	5b                   	pop    ebx
c00280bb:	5d                   	pop    ebp
c00280bc:	c3                   	ret    

c00280bd <__cmpdf2>:
c00280bd:	55                   	push   ebp
c00280be:	89 e5                	mov    ebp,esp
c00280c0:	57                   	push   edi
c00280c1:	56                   	push   esi
c00280c2:	53                   	push   ebx
c00280c3:	83 ec 0c             	sub    esp,0xc
c00280c6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00280c9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00280cc:	89 ca                	mov    edx,ecx
c00280ce:	c1 ea 14             	shr    edx,0x14
c00280d1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00280d7:	89 cb                	mov    ebx,ecx
c00280d9:	c1 fb 1f             	sar    ebx,0x1f
c00280dc:	31 da                	xor    edx,ebx
c00280de:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00280e1:	89 df                	mov    edi,ebx
c00280e3:	c1 e7 0b             	shl    edi,0xb
c00280e6:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00280e9:	c1 e1 0b             	shl    ecx,0xb
c00280ec:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00280f2:	c1 eb 15             	shr    ebx,0x15
c00280f5:	09 d9                	or     ecx,ebx
c00280f7:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00280fa:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00280fd:	89 ce                	mov    esi,ecx
c00280ff:	c1 ee 14             	shr    esi,0x14
c0028102:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028108:	89 cb                	mov    ebx,ecx
c002810a:	c1 fb 1f             	sar    ebx,0x1f
c002810d:	31 de                	xor    esi,ebx
c002810f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028112:	89 df                	mov    edi,ebx
c0028114:	c1 e7 0b             	shl    edi,0xb
c0028117:	c1 e1 0b             	shl    ecx,0xb
c002811a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028120:	c1 eb 15             	shr    ebx,0x15
c0028123:	09 d9                	or     ecx,ebx
c0028125:	89 d3                	mov    ebx,edx
c0028127:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002812d:	43                   	inc    ebx
c002812e:	83 fb 01             	cmp    ebx,0x1
c0028131:	77 08                	ja     c002813b <__cmpdf2+0x7e>
c0028133:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028136:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028139:	75 68                	jne    c00281a3 <__cmpdf2+0xe6>
c002813b:	89 f3                	mov    ebx,esi
c002813d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028143:	43                   	inc    ebx
c0028144:	83 fb 01             	cmp    ebx,0x1
c0028147:	77 06                	ja     c002814f <__cmpdf2+0x92>
c0028149:	89 fb                	mov    ebx,edi
c002814b:	09 cb                	or     ebx,ecx
c002814d:	75 54                	jne    c00281a3 <__cmpdf2+0xe6>
c002814f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028152:	09 f8                	or     eax,edi
c0028154:	09 c8                	or     eax,ecx
c0028156:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028159:	75 12                	jne    c002816d <__cmpdf2+0xb0>
c002815b:	8d 42 01             	lea    eax,[edx+0x1]
c002815e:	83 f8 01             	cmp    eax,0x1
c0028161:	77 0a                	ja     c002816d <__cmpdf2+0xb0>
c0028163:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028166:	31 c0                	xor    eax,eax
c0028168:	83 fb 01             	cmp    ebx,0x1
c002816b:	76 36                	jbe    c00281a3 <__cmpdf2+0xe6>
c002816d:	b8 01 00 00 00       	mov    eax,0x1
c0028172:	39 f2                	cmp    edx,esi
c0028174:	7f 2d                	jg     c00281a3 <__cmpdf2+0xe6>
c0028176:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002817b:	7c 26                	jl     c00281a3 <__cmpdf2+0xe6>
c002817d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028180:	77 07                	ja     c0028189 <__cmpdf2+0xcc>
c0028182:	72 16                	jb     c002819a <__cmpdf2+0xdd>
c0028184:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028187:	76 0a                	jbe    c0028193 <__cmpdf2+0xd6>
c0028189:	89 d0                	mov    eax,edx
c002818b:	c1 f8 1f             	sar    eax,0x1f
c002818e:	83 c8 01             	or     eax,0x1
c0028191:	eb 10                	jmp    c00281a3 <__cmpdf2+0xe6>
c0028193:	b8 00 00 00 00       	mov    eax,0x0
c0028198:	73 09                	jae    c00281a3 <__cmpdf2+0xe6>
c002819a:	89 d0                	mov    eax,edx
c002819c:	c1 f8 1f             	sar    eax,0x1f
c002819f:	83 e0 02             	and    eax,0x2
c00281a2:	48                   	dec    eax
c00281a3:	83 c4 0c             	add    esp,0xc
c00281a6:	5b                   	pop    ebx
c00281a7:	5e                   	pop    esi
c00281a8:	5f                   	pop    edi
c00281a9:	5d                   	pop    ebp
c00281aa:	c3                   	ret    

c00281ab <__eqdf2>:
c00281ab:	55                   	push   ebp
c00281ac:	89 e5                	mov    ebp,esp
c00281ae:	50                   	push   eax
c00281af:	6a 01                	push   0x1
c00281b1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00281b4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00281b7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00281ba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00281bd:	e8 fb fe ff ff       	call   c00280bd <__cmpdf2>
c00281c2:	83 c4 18             	add    esp,0x18
c00281c5:	c9                   	leave  
c00281c6:	c3                   	ret    

c00281c7 <__nedf2>:
c00281c7:	eb e2                	jmp    c00281ab <__eqdf2>

c00281c9 <__gtdf2>:
c00281c9:	55                   	push   ebp
c00281ca:	89 e5                	mov    ebp,esp
c00281cc:	50                   	push   eax
c00281cd:	6a ff                	push   0xffffffff
c00281cf:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00281d2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00281d5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00281d8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00281db:	e8 dd fe ff ff       	call   c00280bd <__cmpdf2>
c00281e0:	83 c4 18             	add    esp,0x18
c00281e3:	c9                   	leave  
c00281e4:	c3                   	ret    

c00281e5 <__gedf2>:
c00281e5:	eb e2                	jmp    c00281c9 <__gtdf2>

c00281e7 <__ltdf2>:
c00281e7:	eb c2                	jmp    c00281ab <__eqdf2>

c00281e9 <__ledf2>:
c00281e9:	eb c0                	jmp    c00281ab <__eqdf2>

c00281eb <__truncdfsf2>:
c00281eb:	55                   	push   ebp
c00281ec:	89 e5                	mov    ebp,esp
c00281ee:	57                   	push   edi
c00281ef:	56                   	push   esi
c00281f0:	53                   	push   ebx
c00281f1:	83 ec 0c             	sub    esp,0xc
c00281f4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00281f7:	89 d1                	mov    ecx,edx
c00281f9:	c1 f9 14             	sar    ecx,0x14
c00281fc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00281ff:	89 df                	mov    edi,ebx
c0028201:	c1 e7 0b             	shl    edi,0xb
c0028204:	89 d0                	mov    eax,edx
c0028206:	c1 e0 0b             	shl    eax,0xb
c0028209:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002820e:	c1 eb 15             	shr    ebx,0x15
c0028211:	09 d8                	or     eax,ebx
c0028213:	89 cb                	mov    ebx,ecx
c0028215:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002821b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028221:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028227:	0f 86 9e 00 00 00    	jbe    c00282cb <__truncdfsf2+0xe0>
c002822d:	85 db                	test   ebx,ebx
c002822f:	75 0a                	jne    c002823b <__truncdfsf2+0x50>
c0028231:	c1 fa 17             	sar    edx,0x17
c0028234:	30 d2                	xor    dl,dl
c0028236:	e9 84 00 00 00       	jmp    c00282bf <__truncdfsf2+0xd4>
c002823b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028241:	83 fe 83             	cmp    esi,0xffffff83
c0028244:	7d 4b                	jge    c0028291 <__truncdfsf2+0xa6>
c0028246:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002824b:	29 f1                	sub    ecx,esi
c002824d:	83 f9 1f             	cmp    ecx,0x1f
c0028250:	7f 6b                	jg     c00282bd <__truncdfsf2+0xd2>
c0028252:	0d 00 00 00 80       	or     eax,0x80000000
c0028257:	89 c3                	mov    ebx,eax
c0028259:	d3 eb                	shr    ebx,cl
c002825b:	be 01 00 00 00       	mov    esi,0x1
c0028260:	d3 e6                	shl    esi,cl
c0028262:	4e                   	dec    esi
c0028263:	21 f0                	and    eax,esi
c0028265:	09 f8                	or     eax,edi
c0028267:	0f 95 c0             	setne  al
c002826a:	0f b6 c0             	movzx  eax,al
c002826d:	09 c3                	or     ebx,eax
c002826f:	89 d9                	mov    ecx,ebx
c0028271:	c1 e9 08             	shr    ecx,0x8
c0028274:	f6 c3 7f             	test   bl,0x7f
c0028277:	0f 95 c0             	setne  al
c002827a:	09 c8                	or     eax,ecx
c002827c:	83 e0 01             	and    eax,0x1
c002827f:	c1 eb 07             	shr    ebx,0x7
c0028282:	21 c3                	and    ebx,eax
c0028284:	81 e2 00 00 00 80    	and    edx,0x80000000
c002828a:	09 d1                	or     ecx,edx
c002828c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c002828f:	eb 76                	jmp    c0028307 <__truncdfsf2+0x11c>
c0028291:	83 c6 80             	add    esi,0xffffff80
c0028294:	7e 1d                	jle    c00282b3 <__truncdfsf2+0xc8>
c0028296:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c002829c:	75 0b                	jne    c00282a9 <__truncdfsf2+0xbe>
c002829e:	09 f8                	or     eax,edi
c00282a0:	74 09                	je     c00282ab <__truncdfsf2+0xc0>
c00282a2:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00282a7:	eb 02                	jmp    c00282ab <__truncdfsf2+0xc0>
c00282a9:	31 c0                	xor    eax,eax
c00282ab:	c1 fa 17             	sar    edx,0x17
c00282ae:	80 ca ff             	or     dl,0xff
c00282b1:	eb 0e                	jmp    c00282c1 <__truncdfsf2+0xd6>
c00282b3:	c1 fa 1f             	sar    edx,0x1f
c00282b6:	c1 e2 08             	shl    edx,0x8
c00282b9:	09 ca                	or     edx,ecx
c00282bb:	eb 04                	jmp    c00282c1 <__truncdfsf2+0xd6>
c00282bd:	31 d2                	xor    edx,edx
c00282bf:	31 c0                	xor    eax,eax
c00282c1:	c1 e2 17             	shl    edx,0x17
c00282c4:	c1 e8 08             	shr    eax,0x8
c00282c7:	09 d0                	or     eax,edx
c00282c9:	eb 3c                	jmp    c0028307 <__truncdfsf2+0x11c>
c00282cb:	81 e9 80 03 00 00    	sub    ecx,0x380
c00282d1:	89 ca                	mov    edx,ecx
c00282d3:	c1 fa 0b             	sar    edx,0xb
c00282d6:	c1 e2 08             	shl    edx,0x8
c00282d9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00282dc:	31 db                	xor    ebx,ebx
c00282de:	85 ff                	test   edi,edi
c00282e0:	0f 95 c3             	setne  bl
c00282e3:	09 d8                	or     eax,ebx
c00282e5:	89 c3                	mov    ebx,eax
c00282e7:	c1 eb 08             	shr    ebx,0x8
c00282ea:	a8 7f                	test   al,0x7f
c00282ec:	0f 95 c2             	setne  dl
c00282ef:	89 d6                	mov    esi,edx
c00282f1:	09 de                	or     esi,ebx
c00282f3:	83 e6 01             	and    esi,0x1
c00282f6:	c1 e8 07             	shr    eax,0x7
c00282f9:	21 f0                	and    eax,esi
c00282fb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00282fe:	09 ca                	or     edx,ecx
c0028300:	c1 e2 17             	shl    edx,0x17
c0028303:	09 da                	or     edx,ebx
c0028305:	01 d0                	add    eax,edx
c0028307:	83 c4 0c             	add    esp,0xc
c002830a:	5b                   	pop    ebx
c002830b:	5e                   	pop    esi
c002830c:	5f                   	pop    edi
c002830d:	5d                   	pop    ebp
c002830e:	c3                   	ret    

c002830f <__extendsfdf2>:
c002830f:	55                   	push   ebp
c0028310:	89 e5                	mov    ebp,esp
c0028312:	57                   	push   edi
c0028313:	56                   	push   esi
c0028314:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028317:	89 d1                	mov    ecx,edx
c0028319:	c1 f9 17             	sar    ecx,0x17
c002831c:	c1 e2 08             	shl    edx,0x8
c002831f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028325:	89 c8                	mov    eax,ecx
c0028327:	80 e4 f8             	and    ah,0xf8
c002832a:	8d 71 01             	lea    esi,[ecx+0x1]
c002832d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028333:	75 27                	jne    c002835c <__extendsfdf2+0x4d>
c0028335:	81 e1 ff 00 00 00    	and    ecx,0xff
c002833b:	75 18                	jne    c0028355 <__extendsfdf2+0x46>
c002833d:	85 d2                	test   edx,edx
c002833f:	74 20                	je     c0028361 <__extendsfdf2+0x52>
c0028341:	41                   	inc    ecx
c0028342:	01 d2                	add    edx,edx
c0028344:	79 fb                	jns    c0028341 <__extendsfdf2+0x32>
c0028346:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002834c:	29 c8                	sub    eax,ecx
c002834e:	05 81 03 00 00       	add    eax,0x381
c0028353:	eb 0c                	jmp    c0028361 <__extendsfdf2+0x52>
c0028355:	05 00 07 00 00       	add    eax,0x700
c002835a:	eb 05                	jmp    c0028361 <__extendsfdf2+0x52>
c002835c:	05 80 03 00 00       	add    eax,0x380
c0028361:	c1 e0 14             	shl    eax,0x14
c0028364:	89 c1                	mov    ecx,eax
c0028366:	89 d0                	mov    eax,edx
c0028368:	c1 e8 0b             	shr    eax,0xb
c002836b:	09 c1                	or     ecx,eax
c002836d:	c1 e2 15             	shl    edx,0x15
c0028370:	89 d0                	mov    eax,edx
c0028372:	89 ca                	mov    edx,ecx
c0028374:	5e                   	pop    esi
c0028375:	5f                   	pop    edi
c0028376:	5d                   	pop    ebp
c0028377:	c3                   	ret    
c0028378:	66 90                	xchg   ax,ax
c002837a:	66 90                	xchg   ax,ax
c002837c:	66 90                	xchg   ax,ax
c002837e:	66 90                	xchg   ax,ax

c0028380 <fabs>:
c0028380:	83 ec 0c             	sub    esp,0xc
c0028383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028387:	89 04 24             	mov    DWORD PTR [esp],eax
c002838a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002838e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028393:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028397:	dd 04 24             	fld    QWORD PTR [esp]
c002839a:	83 c4 0c             	add    esp,0xc
c002839d:	c3                   	ret    
c002839e:	66 90                	xchg   ax,ax

c00283a0 <lrint>:
c00283a0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00283a4:	83 ec 04             	sub    esp,0x4
c00283a7:	db 1c 24             	fistp  DWORD PTR [esp]
c00283aa:	58                   	pop    eax
c00283ab:	c3                   	ret    

c00283ac <lrintf>:
c00283ac:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00283b0:	83 ec 04             	sub    esp,0x4
c00283b3:	db 1c 24             	fistp  DWORD PTR [esp]
c00283b6:	58                   	pop    eax
c00283b7:	c3                   	ret    

Disassembly of section .init:

c00283b8 <_init>:
c00283b8:	55                   	push   ebp
c00283b9:	89 e5                	mov    ebp,esp
c00283bb:	e8 58 7d fd ff       	call   c0000118 <frame_dummy>
c00283c0:	e8 5b e0 ff ff       	call   c0026420 <__do_global_ctors_aux>
c00283c5:	5d                   	pop    ebp
c00283c6:	c3                   	ret    

Disassembly of section .fini:

c00283c7 <_fini>:
c00283c7:	55                   	push   ebp
c00283c8:	89 e5                	mov    ebp,esp
c00283ca:	e8 d9 7c fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00283cf:	5d                   	pop    ebp
c00283d0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00283d2 <Computer::~Computer()>:
c00283d2:	83 ec 0c             	sub    esp,0xc
c00283d5:	ba 5c 9f 02 c0       	mov    edx,0xc0029f5c
c00283da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283de:	89 10                	mov    DWORD PTR [eax],edx
c00283e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283e4:	83 ec 0c             	sub    esp,0xc
c00283e7:	50                   	push   eax
c00283e8:	e8 e7 b5 fe ff       	call   c00139d4 <Device::~Device()>
c00283ed:	83 c4 10             	add    esp,0x10
c00283f0:	90                   	nop
c00283f1:	83 c4 0c             	add    esp,0xc
c00283f4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00283f6 <Computer::~Computer()>:
c00283f6:	83 ec 0c             	sub    esp,0xc
c00283f9:	83 ec 0c             	sub    esp,0xc
c00283fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028400:	e8 cd ff ff ff       	call   c00283d2 <Computer::~Computer()>
c0028405:	83 c4 10             	add    esp,0x10
c0028408:	83 ec 08             	sub    esp,0x8
c002840b:	68 ec 01 00 00       	push   0x1ec
c0028410:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028414:	e8 dc a1 fe ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c0028419:	83 c4 10             	add    esp,0x10
c002841c:	83 c4 0c             	add    esp,0xc
c002841f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028420 <idleCommon()>:
c0028420:	83 ec 0c             	sub    esp,0xc
c0028423:	fa                   	cli    
c0028424:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c002842a:	e8 94 55 ff ff       	call   c001d9c3 <schedule()>
c002842f:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c0028434:	48                   	dec    eax
c0028435:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c002843a:	75 01                	jne    c002843d <idleCommon()+0x1d>
c002843c:	fb                   	sti    
c002843d:	83 c4 0c             	add    esp,0xc
c0028440:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028442 <LinkedList<UnixFile>::~LinkedList()>:
c0028442:	90                   	nop
c0028443:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028444 <LinkedList<UnixFile>::LinkedList()>:
c0028444:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028448:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002844e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028452:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028459:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002845d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028464:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028468:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002846e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028472:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028479:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002847d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028484:	90                   	nop
c0028485:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028486 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028486:	83 ec 0c             	sub    esp,0xc
c0028489:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002848e:	75 10                	jne    c00284a0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028490:	83 ec 0c             	sub    esp,0xc
c0028493:	68 98 a1 02 c0       	push   0xc002a198
c0028498:	e8 9c 19 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c002849d:	83 c4 10             	add    esp,0x10
c00284a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00284a6:	85 c0                	test   eax,eax
c00284a8:	74 34                	je     c00284de <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00284aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284b1:	85 c0                	test   eax,eax
c00284b3:	74 29                	je     c00284de <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00284b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284b9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284c0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00284c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284cb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00284ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284d5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00284dc:	eb 65                	jmp    c0028543 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00284de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00284e4:	85 c0                	test   eax,eax
c00284e6:	75 4b                	jne    c0028533 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00284e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284ef:	85 c0                	test   eax,eax
c00284f1:	75 40                	jne    c0028533 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00284f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284fb:	89 10                	mov    DWORD PTR [eax],edx
c00284fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028501:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028505:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002850c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002850f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002851a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002851d:	85 c0                	test   eax,eax
c002851f:	74 22                	je     c0028543 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028521:	83 ec 0c             	sub    esp,0xc
c0028524:	68 ba a1 02 c0       	push   0xc002a1ba
c0028529:	e8 0b 19 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c002852e:	83 c4 10             	add    esp,0x10
c0028531:	eb 10                	jmp    c0028543 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028533:	83 ec 0c             	sub    esp,0xc
c0028536:	68 c4 a1 02 c0       	push   0xc002a1c4
c002853b:	e8 f9 18 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c0028540:	83 c4 10             	add    esp,0x10
c0028543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028547:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002854a:	8d 50 01             	lea    edx,[eax+0x1]
c002854d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028551:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028554:	90                   	nop
c0028555:	83 c4 0c             	add    esp,0xc
c0028558:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002855a <LinkedList<UnixFile>::getFirstElement()>:
c002855a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002855e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028560:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0028562 <LinkedList<UnixFile>::removeFirst()>:
c0028562:	83 ec 0c             	sub    esp,0xc
c0028565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028569:	8b 00                	mov    eax,DWORD PTR [eax]
c002856b:	85 c0                	test   eax,eax
c002856d:	75 12                	jne    c0028581 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002856f:	83 ec 0c             	sub    esp,0xc
c0028572:	68 d0 a1 02 c0       	push   0xc002a1d0
c0028577:	e8 bd 18 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c002857c:	83 c4 10             	add    esp,0x10
c002857f:	eb 7e                	jmp    c00285ff <LinkedList<UnixFile>::removeFirst()+0x9d>
c0028581:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028585:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028588:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002858b:	85 c0                	test   eax,eax
c002858d:	74 10                	je     c002859f <LinkedList<UnixFile>::removeFirst()+0x3d>
c002858f:	83 ec 0c             	sub    esp,0xc
c0028592:	68 1b a2 02 c0       	push   0xc002a21b
c0028597:	e8 9d 18 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c002859c:	83 c4 10             	add    esp,0x10
c002859f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00285a5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285a8:	85 c0                	test   eax,eax
c00285aa:	75 33                	jne    c00285df <LinkedList<UnixFile>::removeFirst()+0x7d>
c00285ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00285b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285ba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00285c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285c5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285c8:	83 f8 01             	cmp    eax,0x1
c00285cb:	74 21                	je     c00285ee <LinkedList<UnixFile>::removeFirst()+0x8c>
c00285cd:	83 ec 0c             	sub    esp,0xc
c00285d0:	68 f4 a1 02 c0       	push   0xc002a1f4
c00285d5:	e8 5f 18 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c00285da:	83 c4 10             	add    esp,0x10
c00285dd:	eb 0f                	jmp    c00285ee <LinkedList<UnixFile>::removeFirst()+0x8c>
c00285df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00285e5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00285e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285ec:	89 10                	mov    DWORD PTR [eax],edx
c00285ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285f2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285f5:	8d 50 ff             	lea    edx,[eax-0x1]
c00285f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285fc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00285ff:	83 c4 0c             	add    esp,0xc
c0028602:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0028604 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0028604:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028608:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002860b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002860c <DriverlessDevice::~DriverlessDevice()>:
c002860c:	ba 5c aa 02 c0       	mov    edx,0xc002aa5c
c0028611:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028615:	89 10                	mov    DWORD PTR [eax],edx
c0028617:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002861b:	50                   	push   eax
c002861c:	e8 b3 b3 fe ff       	call   c00139d4 <Device::~Device()>
c0028621:	83 c4 04             	add    esp,0x4
c0028624:	90                   	nop
c0028625:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028626 <DriverlessDevice::~DriverlessDevice()>:
c0028626:	83 ec 0c             	sub    esp,0xc
c0028629:	83 ec 0c             	sub    esp,0xc
c002862c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028630:	e8 d7 ff ff ff       	call   c002860c <DriverlessDevice::~DriverlessDevice()>
c0028635:	83 c4 10             	add    esp,0x10
c0028638:	83 ec 08             	sub    esp,0x8
c002863b:	68 58 01 00 00       	push   0x158
c0028640:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028644:	e8 ac 9f fe ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c0028649:	83 c4 10             	add    esp,0x10
c002864c:	83 c4 0c             	add    esp,0xc
c002864f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028650 <LinkedList<Device>::addElement(Device*)>:
c0028650:	83 ec 0c             	sub    esp,0xc
c0028653:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028658:	75 10                	jne    c002866a <LinkedList<Device>::addElement(Device*)+0x1a>
c002865a:	83 ec 0c             	sub    esp,0xc
c002865d:	68 98 a1 02 c0       	push   0xc002a198
c0028662:	e8 d2 17 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c0028667:	83 c4 10             	add    esp,0x10
c002866a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002866e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028670:	85 c0                	test   eax,eax
c0028672:	74 3a                	je     c00286ae <LinkedList<Device>::addElement(Device*)+0x5e>
c0028674:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028678:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002867b:	85 c0                	test   eax,eax
c002867d:	74 2f                	je     c00286ae <LinkedList<Device>::addElement(Device*)+0x5e>
c002867f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028683:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028686:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002868a:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028694:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028698:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002869b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002869f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286a2:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00286ac:	eb 68                	jmp    c0028716 <LinkedList<Device>::addElement(Device*)+0xc6>
c00286ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00286b4:	85 c0                	test   eax,eax
c00286b6:	75 4e                	jne    c0028706 <LinkedList<Device>::addElement(Device*)+0xb6>
c00286b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286bf:	85 c0                	test   eax,eax
c00286c1:	75 43                	jne    c0028706 <LinkedList<Device>::addElement(Device*)+0xb6>
c00286c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286cb:	89 10                	mov    DWORD PTR [eax],edx
c00286cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286d5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00286d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286df:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00286e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ed:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286f0:	85 c0                	test   eax,eax
c00286f2:	74 22                	je     c0028716 <LinkedList<Device>::addElement(Device*)+0xc6>
c00286f4:	83 ec 0c             	sub    esp,0xc
c00286f7:	68 ba a1 02 c0       	push   0xc002a1ba
c00286fc:	e8 38 17 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c0028701:	83 c4 10             	add    esp,0x10
c0028704:	eb 10                	jmp    c0028716 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028706:	83 ec 0c             	sub    esp,0xc
c0028709:	68 c4 a1 02 c0       	push   0xc002a1c4
c002870e:	e8 26 17 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c0028713:	83 c4 10             	add    esp,0x10
c0028716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002871a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002871d:	8d 50 01             	lea    edx,[eax+0x1]
c0028720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028724:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028727:	90                   	nop
c0028728:	83 c4 0c             	add    esp,0xc
c002872b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002872c <LinkedList<Device>::LinkedList()>:
c002872c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028730:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028736:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002873a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028741:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028745:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002874c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028750:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002875a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028761:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028765:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002876c:	90                   	nop
c002876d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002876e <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002876e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028772:	8b 00                	mov    eax,DWORD PTR [eax]
c0028774:	85 c0                	test   eax,eax
c0028776:	75 0e                	jne    c0028786 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028778:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002877c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002877f:	85 c0                	test   eax,eax
c0028781:	75 03                	jne    c0028786 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028783:	b0 01                	mov    al,0x1
c0028785:	c3                   	ret    
c0028786:	b0 00                	mov    al,0x0
c0028788:	90                   	nop
c0028789:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002878a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002878e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028790:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028792 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028792:	83 ec 0c             	sub    esp,0xc
c0028795:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028799:	8b 00                	mov    eax,DWORD PTR [eax]
c002879b:	85 c0                	test   eax,eax
c002879d:	75 15                	jne    c00287b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002879f:	83 ec 0c             	sub    esp,0xc
c00287a2:	68 d0 a1 02 c0       	push   0xc002a1d0
c00287a7:	e8 8d 16 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c00287ac:	83 c4 10             	add    esp,0x10
c00287af:	e9 88 00 00 00       	jmp    c002883c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00287b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287bb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00287be:	85 c0                	test   eax,eax
c00287c0:	0f 95 c0             	setne  al
c00287c3:	84 c0                	test   al,al
c00287c5:	74 10                	je     c00287d7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00287c7:	83 ec 0c             	sub    esp,0xc
c00287ca:	68 1b a2 02 c0       	push   0xc002a21b
c00287cf:	e8 65 16 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c00287d4:	83 c4 10             	add    esp,0x10
c00287d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287db:	8b 00                	mov    eax,DWORD PTR [eax]
c00287dd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00287e0:	85 c0                	test   eax,eax
c00287e2:	0f 94 c0             	sete   al
c00287e5:	84 c0                	test   al,al
c00287e7:	74 33                	je     c002881c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00287e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00287f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00287fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028802:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028805:	83 f8 01             	cmp    eax,0x1
c0028808:	74 21                	je     c002882b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002880a:	83 ec 0c             	sub    esp,0xc
c002880d:	68 f4 a1 02 c0       	push   0xc002a1f4
c0028812:	e8 22 16 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c0028817:	83 c4 10             	add    esp,0x10
c002881a:	eb 0f                	jmp    c002882b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002881c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028820:	8b 00                	mov    eax,DWORD PTR [eax]
c0028822:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028829:	89 10                	mov    DWORD PTR [eax],edx
c002882b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002882f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028832:	8d 50 ff             	lea    edx,[eax-0x1]
c0028835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028839:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002883c:	83 c4 0c             	add    esp,0xc
c002883f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028840 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028840:	83 ec 0c             	sub    esp,0xc
c0028843:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028848:	75 10                	jne    c002885a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002884a:	83 ec 0c             	sub    esp,0xc
c002884d:	68 98 a1 02 c0       	push   0xc002a198
c0028852:	e8 e2 15 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c0028857:	83 c4 10             	add    esp,0x10
c002885a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002885e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028860:	85 c0                	test   eax,eax
c0028862:	74 34                	je     c0028898 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028868:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002886b:	85 c0                	test   eax,eax
c002886d:	74 29                	je     c0028898 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002886f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028873:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028876:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002887a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002887d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028881:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028885:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002888c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002888f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028896:	eb 65                	jmp    c00288fd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002889c:	8b 00                	mov    eax,DWORD PTR [eax]
c002889e:	85 c0                	test   eax,eax
c00288a0:	75 4b                	jne    c00288ed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00288a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288a9:	85 c0                	test   eax,eax
c00288ab:	75 40                	jne    c00288ed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00288ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288b5:	89 10                	mov    DWORD PTR [eax],edx
c00288b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288bf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00288c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288c9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00288d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288d7:	85 c0                	test   eax,eax
c00288d9:	74 22                	je     c00288fd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00288db:	83 ec 0c             	sub    esp,0xc
c00288de:	68 ba a1 02 c0       	push   0xc002a1ba
c00288e3:	e8 51 15 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c00288e8:	83 c4 10             	add    esp,0x10
c00288eb:	eb 10                	jmp    c00288fd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00288ed:	83 ec 0c             	sub    esp,0xc
c00288f0:	68 c4 a1 02 c0       	push   0xc002a1c4
c00288f5:	e8 3f 15 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c00288fa:	83 c4 10             	add    esp,0x10
c00288fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028901:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028904:	8d 50 01             	lea    edx,[eax+0x1]
c0028907:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002890b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002890e:	90                   	nop
c002890f:	83 c4 0c             	add    esp,0xc
c0028912:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028914 <ACPI::~ACPI()>:
c0028914:	83 ec 0c             	sub    esp,0xc
c0028917:	ba c8 b2 02 c0       	mov    edx,0xc002b2c8
c002891c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028920:	89 10                	mov    DWORD PTR [eax],edx
c0028922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028926:	83 ec 0c             	sub    esp,0xc
c0028929:	50                   	push   eax
c002892a:	e8 a5 b0 fe ff       	call   c00139d4 <Device::~Device()>
c002892f:	83 c4 10             	add    esp,0x10
c0028932:	90                   	nop
c0028933:	83 c4 0c             	add    esp,0xc
c0028936:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028938 <ACPI::~ACPI()>:
c0028938:	83 ec 0c             	sub    esp,0xc
c002893b:	83 ec 0c             	sub    esp,0xc
c002893e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028942:	e8 cd ff ff ff       	call   c0028914 <ACPI::~ACPI()>
c0028947:	83 c4 10             	add    esp,0x10
c002894a:	83 ec 08             	sub    esp,0x8
c002894d:	68 64 12 00 00       	push   0x1264
c0028952:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028956:	e8 9a 9c fe ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c002895b:	83 c4 10             	add    esp,0x10
c002895e:	83 c4 0c             	add    esp,0xc
c0028961:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0028962 <LinkedList<Device>::~LinkedList()>:
c0028962:	90                   	nop
c0028963:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0028964 <LinkedList<Device>::isEmpty()>:
c0028964:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028968:	8b 00                	mov    eax,DWORD PTR [eax]
c002896a:	85 c0                	test   eax,eax
c002896c:	75 0e                	jne    c002897c <LinkedList<Device>::isEmpty()+0x18>
c002896e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028972:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028975:	85 c0                	test   eax,eax
c0028977:	75 03                	jne    c002897c <LinkedList<Device>::isEmpty()+0x18>
c0028979:	b0 01                	mov    al,0x1
c002897b:	c3                   	ret    
c002897c:	b0 00                	mov    al,0x0
c002897e:	90                   	nop
c002897f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0028980 <LinkedList<Device>::getFirstElement()>:
c0028980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028984:	8b 00                	mov    eax,DWORD PTR [eax]
c0028986:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0028988 <LinkedList<Device>::removeFirst()>:
c0028988:	83 ec 0c             	sub    esp,0xc
c002898b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002898f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028991:	85 c0                	test   eax,eax
c0028993:	75 15                	jne    c00289aa <LinkedList<Device>::removeFirst()+0x22>
c0028995:	83 ec 0c             	sub    esp,0xc
c0028998:	68 d0 a1 02 c0       	push   0xc002a1d0
c002899d:	e8 97 14 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c00289a2:	83 c4 10             	add    esp,0x10
c00289a5:	e9 87 00 00 00       	jmp    c0028a31 <LinkedList<Device>::removeFirst()+0xa9>
c00289aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289b1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00289b7:	85 c0                	test   eax,eax
c00289b9:	74 10                	je     c00289cb <LinkedList<Device>::removeFirst()+0x43>
c00289bb:	83 ec 0c             	sub    esp,0xc
c00289be:	68 1b a2 02 c0       	push   0xc002a21b
c00289c3:	e8 71 14 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c00289c8:	83 c4 10             	add    esp,0x10
c00289cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00289d1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00289d7:	85 c0                	test   eax,eax
c00289d9:	75 33                	jne    c0028a0e <LinkedList<Device>::removeFirst()+0x86>
c00289db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289f7:	83 f8 01             	cmp    eax,0x1
c00289fa:	74 24                	je     c0028a20 <LinkedList<Device>::removeFirst()+0x98>
c00289fc:	83 ec 0c             	sub    esp,0xc
c00289ff:	68 f4 a1 02 c0       	push   0xc002a1f4
c0028a04:	e8 30 14 ff ff       	call   c0019e39 <Krnl::panic(char const*)>
c0028a09:	83 c4 10             	add    esp,0x10
c0028a0c:	eb 12                	jmp    c0028a20 <LinkedList<Device>::removeFirst()+0x98>
c0028a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a12:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a14:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0028a1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a1e:	89 10                	mov    DWORD PTR [eax],edx
c0028a20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a24:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a27:	8d 50 ff             	lea    edx,[eax-0x1]
c0028a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a2e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a31:	83 c4 0c             	add    esp,0xc
c0028a34:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028a36 <CPU::~CPU()>:
c0028a36:	83 ec 0c             	sub    esp,0xc
c0028a39:	ba 18 b5 02 c0       	mov    edx,0xc002b518
c0028a3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a42:	89 10                	mov    DWORD PTR [eax],edx
c0028a44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a48:	83 ec 0c             	sub    esp,0xc
c0028a4b:	50                   	push   eax
c0028a4c:	e8 83 af fe ff       	call   c00139d4 <Device::~Device()>
c0028a51:	83 c4 10             	add    esp,0x10
c0028a54:	90                   	nop
c0028a55:	83 c4 0c             	add    esp,0xc
c0028a58:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028a5a <CPU::~CPU()>:
c0028a5a:	83 ec 0c             	sub    esp,0xc
c0028a5d:	83 ec 0c             	sub    esp,0xc
c0028a60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a64:	e8 cd ff ff ff       	call   c0028a36 <CPU::~CPU()>
c0028a69:	83 c4 10             	add    esp,0x10
c0028a6c:	83 ec 08             	sub    esp,0x8
c0028a6f:	68 98 11 00 00       	push   0x1198
c0028a74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a78:	e8 78 9b fe ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c0028a7d:	83 c4 10             	add    esp,0x10
c0028a80:	83 c4 0c             	add    esp,0xc
c0028a83:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028a84 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028a84:	90                   	nop
c0028a85:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028a86 <ThreadControlBlock::ThreadControlBlock()>:
c0028a86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a8a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028a91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a95:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028a9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028aa0:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028aa7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028aab:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028ab2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ab6:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0028abd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ac1:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028ac5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ac9:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028acd:	90                   	nop
c0028ace:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028ad0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028ad0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ad4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ada:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ade:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ae5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ae9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028af0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028af4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028afa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028afe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b09:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b10:	90                   	nop
c0028b11:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028b12 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028b12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028b16:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028b19:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028b1a <Vm::_FPUState::_FPUState()>:
c0028b1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b1e:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028b25:	90                   	nop
c0028b26:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028b28 <PCI::~PCI()>:
c0028b28:	83 ec 0c             	sub    esp,0xc
c0028b2b:	ba 44 c0 02 c0       	mov    edx,0xc002c044
c0028b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b34:	89 10                	mov    DWORD PTR [eax],edx
c0028b36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b3a:	83 ec 0c             	sub    esp,0xc
c0028b3d:	50                   	push   eax
c0028b3e:	e8 61 a8 fe ff       	call   c00133a4 <Bus::~Bus()>
c0028b43:	83 c4 10             	add    esp,0x10
c0028b46:	90                   	nop
c0028b47:	83 c4 0c             	add    esp,0xc
c0028b4a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028b4c <PCI::~PCI()>:
c0028b4c:	83 ec 0c             	sub    esp,0xc
c0028b4f:	83 ec 0c             	sub    esp,0xc
c0028b52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b56:	e8 cd ff ff ff       	call   c0028b28 <PCI::~PCI()>
c0028b5b:	83 c4 10             	add    esp,0x10
c0028b5e:	83 ec 08             	sub    esp,0x8
c0028b61:	68 5c 01 00 00       	push   0x15c
c0028b66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b6a:	e8 86 9a fe ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c0028b6f:	83 c4 10             	add    esp,0x10
c0028b72:	83 c4 0c             	add    esp,0xc
c0028b75:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028b76 <IDE::~IDE()>:
c0028b76:	83 ec 0c             	sub    esp,0xc
c0028b79:	ba f8 c0 02 c0       	mov    edx,0xc002c0f8
c0028b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b82:	89 10                	mov    DWORD PTR [eax],edx
c0028b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b88:	83 ec 0c             	sub    esp,0xc
c0028b8b:	50                   	push   eax
c0028b8c:	e8 59 b3 fe ff       	call   c0013eea <HardDiskController::~HardDiskController()>
c0028b91:	83 c4 10             	add    esp,0x10
c0028b94:	90                   	nop
c0028b95:	83 c4 0c             	add    esp,0xc
c0028b98:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028b9a <IDE::~IDE()>:
c0028b9a:	83 ec 0c             	sub    esp,0xc
c0028b9d:	83 ec 0c             	sub    esp,0xc
c0028ba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ba4:	e8 cd ff ff ff       	call   c0028b76 <IDE::~IDE()>
c0028ba9:	83 c4 10             	add    esp,0x10
c0028bac:	83 ec 08             	sub    esp,0x8
c0028baf:	68 70 02 00 00       	push   0x270
c0028bb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bb8:	e8 38 9a fe ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c0028bbd:	83 c4 10             	add    esp,0x10
c0028bc0:	83 c4 0c             	add    esp,0xc
c0028bc3:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028bc4 <SATABus::~SATABus()>:
c0028bc4:	83 ec 0c             	sub    esp,0xc
c0028bc7:	ba 70 c1 02 c0       	mov    edx,0xc002c170
c0028bcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd0:	89 10                	mov    DWORD PTR [eax],edx
c0028bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd6:	83 ec 0c             	sub    esp,0xc
c0028bd9:	50                   	push   eax
c0028bda:	e8 0b b3 fe ff       	call   c0013eea <HardDiskController::~HardDiskController()>
c0028bdf:	83 c4 10             	add    esp,0x10
c0028be2:	90                   	nop
c0028be3:	83 c4 0c             	add    esp,0xc
c0028be6:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028be8 <SATABus::~SATABus()>:
c0028be8:	83 ec 0c             	sub    esp,0xc
c0028beb:	83 ec 0c             	sub    esp,0xc
c0028bee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bf2:	e8 cd ff ff ff       	call   c0028bc4 <SATABus::~SATABus()>
c0028bf7:	83 c4 10             	add    esp,0x10
c0028bfa:	83 ec 08             	sub    esp,0x8
c0028bfd:	68 64 01 00 00       	push   0x164
c0028c02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c06:	e8 ea 99 fe ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c0028c0b:	83 c4 10             	add    esp,0x10
c0028c0e:	83 c4 0c             	add    esp,0xc
c0028c11:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028c12 <ATA::~ATA()>:
c0028c12:	83 ec 0c             	sub    esp,0xc
c0028c15:	ba bc c1 02 c0       	mov    edx,0xc002c1bc
c0028c1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c1e:	89 10                	mov    DWORD PTR [eax],edx
c0028c20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c24:	83 ec 0c             	sub    esp,0xc
c0028c27:	50                   	push   eax
c0028c28:	e8 9f b3 fe ff       	call   c0013fcc <PhysicalDisk::~PhysicalDisk()>
c0028c2d:	83 c4 10             	add    esp,0x10
c0028c30:	90                   	nop
c0028c31:	83 c4 0c             	add    esp,0xc
c0028c34:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028c36 <ATA::~ATA()>:
c0028c36:	83 ec 0c             	sub    esp,0xc
c0028c39:	83 ec 0c             	sub    esp,0xc
c0028c3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c40:	e8 cd ff ff ff       	call   c0028c12 <ATA::~ATA()>
c0028c45:	83 c4 10             	add    esp,0x10
c0028c48:	83 ec 08             	sub    esp,0x8
c0028c4b:	68 7c 01 00 00       	push   0x17c
c0028c50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c54:	e8 9c 99 fe ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c0028c59:	83 c4 10             	add    esp,0x10
c0028c5c:	83 c4 0c             	add    esp,0xc
c0028c5f:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028c60 <ATAPI::~ATAPI()>:
c0028c60:	83 ec 0c             	sub    esp,0xc
c0028c63:	ba f4 c1 02 c0       	mov    edx,0xc002c1f4
c0028c68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c6c:	89 10                	mov    DWORD PTR [eax],edx
c0028c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c72:	83 ec 0c             	sub    esp,0xc
c0028c75:	50                   	push   eax
c0028c76:	e8 51 b3 fe ff       	call   c0013fcc <PhysicalDisk::~PhysicalDisk()>
c0028c7b:	83 c4 10             	add    esp,0x10
c0028c7e:	90                   	nop
c0028c7f:	83 c4 0c             	add    esp,0xc
c0028c82:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028c84 <ATAPI::~ATAPI()>:
c0028c84:	83 ec 0c             	sub    esp,0xc
c0028c87:	83 ec 0c             	sub    esp,0xc
c0028c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c8e:	e8 cd ff ff ff       	call   c0028c60 <ATAPI::~ATAPI()>
c0028c93:	83 c4 10             	add    esp,0x10
c0028c96:	83 ec 08             	sub    esp,0x8
c0028c99:	68 80 01 00 00       	push   0x180
c0028c9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ca2:	e8 4e 99 fe ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c0028ca7:	83 c4 10             	add    esp,0x10
c0028caa:	83 c4 0c             	add    esp,0xc
c0028cad:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028cae <SATA::~SATA()>:
c0028cae:	83 ec 0c             	sub    esp,0xc
c0028cb1:	ba a8 c2 02 c0       	mov    edx,0xc002c2a8
c0028cb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cba:	89 10                	mov    DWORD PTR [eax],edx
c0028cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cc0:	83 ec 0c             	sub    esp,0xc
c0028cc3:	50                   	push   eax
c0028cc4:	e8 03 b3 fe ff       	call   c0013fcc <PhysicalDisk::~PhysicalDisk()>
c0028cc9:	83 c4 10             	add    esp,0x10
c0028ccc:	90                   	nop
c0028ccd:	83 c4 0c             	add    esp,0xc
c0028cd0:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028cd2 <SATA::~SATA()>:
c0028cd2:	83 ec 0c             	sub    esp,0xc
c0028cd5:	83 ec 0c             	sub    esp,0xc
c0028cd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cdc:	e8 cd ff ff ff       	call   c0028cae <SATA::~SATA()>
c0028ce1:	83 c4 10             	add    esp,0x10
c0028ce4:	83 ec 08             	sub    esp,0x8
c0028ce7:	68 7c 01 00 00       	push   0x17c
c0028cec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cf0:	e8 00 99 fe ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c0028cf5:	83 c4 10             	add    esp,0x10
c0028cf8:	83 c4 0c             	add    esp,0xc
c0028cfb:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028cfc <SATAPI::~SATAPI()>:
c0028cfc:	83 ec 0c             	sub    esp,0xc
c0028cff:	ba 84 c3 02 c0       	mov    edx,0xc002c384
c0028d04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d08:	89 10                	mov    DWORD PTR [eax],edx
c0028d0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d0e:	83 ec 0c             	sub    esp,0xc
c0028d11:	50                   	push   eax
c0028d12:	e8 b5 b2 fe ff       	call   c0013fcc <PhysicalDisk::~PhysicalDisk()>
c0028d17:	83 c4 10             	add    esp,0x10
c0028d1a:	90                   	nop
c0028d1b:	83 c4 0c             	add    esp,0xc
c0028d1e:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028d20 <SATAPI::~SATAPI()>:
c0028d20:	83 ec 0c             	sub    esp,0xc
c0028d23:	83 ec 0c             	sub    esp,0xc
c0028d26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d2a:	e8 cd ff ff ff       	call   c0028cfc <SATAPI::~SATAPI()>
c0028d2f:	83 c4 10             	add    esp,0x10
c0028d32:	83 ec 08             	sub    esp,0x8
c0028d35:	68 80 01 00 00       	push   0x180
c0028d3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d3e:	e8 b2 98 fe ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c0028d43:	83 c4 10             	add    esp,0x10
c0028d46:	83 c4 0c             	add    esp,0xc
c0028d49:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028d4a <AVX::~AVX()>:
c0028d4a:	83 ec 0c             	sub    esp,0xc
c0028d4d:	ba c4 c3 02 c0       	mov    edx,0xc002c3c4
c0028d52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d56:	89 10                	mov    DWORD PTR [eax],edx
c0028d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d5c:	83 ec 0c             	sub    esp,0xc
c0028d5f:	50                   	push   eax
c0028d60:	e8 eb b2 fe ff       	call   c0014050 <FPU::~FPU()>
c0028d65:	83 c4 10             	add    esp,0x10
c0028d68:	90                   	nop
c0028d69:	83 c4 0c             	add    esp,0xc
c0028d6c:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028d6e <AVX::~AVX()>:
c0028d6e:	83 ec 0c             	sub    esp,0xc
c0028d71:	83 ec 0c             	sub    esp,0xc
c0028d74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d78:	e8 cd ff ff ff       	call   c0028d4a <AVX::~AVX()>
c0028d7d:	83 c4 10             	add    esp,0x10
c0028d80:	83 ec 08             	sub    esp,0x8
c0028d83:	68 58 01 00 00       	push   0x158
c0028d88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d8c:	e8 64 98 fe ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c0028d91:	83 c4 10             	add    esp,0x10
c0028d94:	83 c4 0c             	add    esp,0xc
c0028d97:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028d98 <MMX::~MMX()>:
c0028d98:	83 ec 0c             	sub    esp,0xc
c0028d9b:	ba 04 c4 02 c0       	mov    edx,0xc002c404
c0028da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028da4:	89 10                	mov    DWORD PTR [eax],edx
c0028da6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028daa:	83 ec 0c             	sub    esp,0xc
c0028dad:	50                   	push   eax
c0028dae:	e8 9d b2 fe ff       	call   c0014050 <FPU::~FPU()>
c0028db3:	83 c4 10             	add    esp,0x10
c0028db6:	90                   	nop
c0028db7:	83 c4 0c             	add    esp,0xc
c0028dba:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028dbc <MMX::~MMX()>:
c0028dbc:	83 ec 0c             	sub    esp,0xc
c0028dbf:	83 ec 0c             	sub    esp,0xc
c0028dc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dc6:	e8 cd ff ff ff       	call   c0028d98 <MMX::~MMX()>
c0028dcb:	83 c4 10             	add    esp,0x10
c0028dce:	83 ec 08             	sub    esp,0x8
c0028dd1:	68 58 01 00 00       	push   0x158
c0028dd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dda:	e8 16 98 fe ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c0028ddf:	83 c4 10             	add    esp,0x10
c0028de2:	83 c4 0c             	add    esp,0xc
c0028de5:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028de6 <SSE::~SSE()>:
c0028de6:	83 ec 0c             	sub    esp,0xc
c0028de9:	ba 44 c4 02 c0       	mov    edx,0xc002c444
c0028dee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028df2:	89 10                	mov    DWORD PTR [eax],edx
c0028df4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028df8:	83 ec 0c             	sub    esp,0xc
c0028dfb:	50                   	push   eax
c0028dfc:	e8 4f b2 fe ff       	call   c0014050 <FPU::~FPU()>
c0028e01:	83 c4 10             	add    esp,0x10
c0028e04:	90                   	nop
c0028e05:	83 c4 0c             	add    esp,0xc
c0028e08:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028e0a <SSE::~SSE()>:
c0028e0a:	83 ec 0c             	sub    esp,0xc
c0028e0d:	83 ec 0c             	sub    esp,0xc
c0028e10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e14:	e8 cd ff ff ff       	call   c0028de6 <SSE::~SSE()>
c0028e19:	83 c4 10             	add    esp,0x10
c0028e1c:	83 ec 08             	sub    esp,0x8
c0028e1f:	68 58 01 00 00       	push   0x158
c0028e24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e28:	e8 c8 97 fe ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c0028e2d:	83 c4 10             	add    esp,0x10
c0028e30:	83 c4 0c             	add    esp,0xc
c0028e33:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028e34 <x87::~x87()>:
c0028e34:	83 ec 0c             	sub    esp,0xc
c0028e37:	ba 84 c4 02 c0       	mov    edx,0xc002c484
c0028e3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e40:	89 10                	mov    DWORD PTR [eax],edx
c0028e42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e46:	83 ec 0c             	sub    esp,0xc
c0028e49:	50                   	push   eax
c0028e4a:	e8 01 b2 fe ff       	call   c0014050 <FPU::~FPU()>
c0028e4f:	83 c4 10             	add    esp,0x10
c0028e52:	90                   	nop
c0028e53:	83 c4 0c             	add    esp,0xc
c0028e56:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028e58 <x87::~x87()>:
c0028e58:	83 ec 0c             	sub    esp,0xc
c0028e5b:	83 ec 0c             	sub    esp,0xc
c0028e5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e62:	e8 cd ff ff ff       	call   c0028e34 <x87::~x87()>
c0028e67:	83 c4 10             	add    esp,0x10
c0028e6a:	83 ec 08             	sub    esp,0x8
c0028e6d:	68 58 01 00 00       	push   0x158
c0028e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e76:	e8 7a 97 fe ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c0028e7b:	83 c4 10             	add    esp,0x10
c0028e7e:	83 c4 0c             	add    esp,0xc
c0028e81:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028e82 <IOAPIC::~IOAPIC()>:
c0028e82:	83 ec 0c             	sub    esp,0xc
c0028e85:	ba dc c5 02 c0       	mov    edx,0xc002c5dc
c0028e8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e8e:	89 10                	mov    DWORD PTR [eax],edx
c0028e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e94:	83 ec 0c             	sub    esp,0xc
c0028e97:	50                   	push   eax
c0028e98:	e8 37 ab fe ff       	call   c00139d4 <Device::~Device()>
c0028e9d:	83 c4 10             	add    esp,0x10
c0028ea0:	90                   	nop
c0028ea1:	83 c4 0c             	add    esp,0xc
c0028ea4:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0028ea6 <IOAPIC::~IOAPIC()>:
c0028ea6:	83 ec 0c             	sub    esp,0xc
c0028ea9:	83 ec 0c             	sub    esp,0xc
c0028eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eb0:	e8 cd ff ff ff       	call   c0028e82 <IOAPIC::~IOAPIC()>
c0028eb5:	83 c4 10             	add    esp,0x10
c0028eb8:	83 ec 08             	sub    esp,0x8
c0028ebb:	68 68 01 00 00       	push   0x168
c0028ec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ec4:	e8 2c 97 fe ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c0028ec9:	83 c4 10             	add    esp,0x10
c0028ecc:	83 c4 0c             	add    esp,0xc
c0028ecf:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028ed0 <APIC::~APIC()>:
c0028ed0:	83 ec 0c             	sub    esp,0xc
c0028ed3:	ba 94 c5 02 c0       	mov    edx,0xc002c594
c0028ed8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028edc:	89 10                	mov    DWORD PTR [eax],edx
c0028ede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ee2:	83 ec 0c             	sub    esp,0xc
c0028ee5:	50                   	push   eax
c0028ee6:	e8 2f b6 fe ff       	call   c001451a <InterruptController::~InterruptController()>
c0028eeb:	83 c4 10             	add    esp,0x10
c0028eee:	90                   	nop
c0028eef:	83 c4 0c             	add    esp,0xc
c0028ef2:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0028ef4 <APIC::~APIC()>:
c0028ef4:	83 ec 0c             	sub    esp,0xc
c0028ef7:	83 ec 0c             	sub    esp,0xc
c0028efa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028efe:	e8 cd ff ff ff       	call   c0028ed0 <APIC::~APIC()>
c0028f03:	83 c4 10             	add    esp,0x10
c0028f06:	83 ec 08             	sub    esp,0x8
c0028f09:	68 58 21 00 00       	push   0x2158
c0028f0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f12:	e8 de 96 fe ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c0028f17:	83 c4 10             	add    esp,0x10
c0028f1a:	83 c4 0c             	add    esp,0xc
c0028f1d:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0028f1e <PIC::~PIC()>:
c0028f1e:	83 ec 0c             	sub    esp,0xc
c0028f21:	ba 2c c6 02 c0       	mov    edx,0xc002c62c
c0028f26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f2a:	89 10                	mov    DWORD PTR [eax],edx
c0028f2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f30:	83 ec 0c             	sub    esp,0xc
c0028f33:	50                   	push   eax
c0028f34:	e8 e1 b5 fe ff       	call   c001451a <InterruptController::~InterruptController()>
c0028f39:	83 c4 10             	add    esp,0x10
c0028f3c:	90                   	nop
c0028f3d:	83 c4 0c             	add    esp,0xc
c0028f40:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0028f42 <PIC::~PIC()>:
c0028f42:	83 ec 0c             	sub    esp,0xc
c0028f45:	83 ec 0c             	sub    esp,0xc
c0028f48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f4c:	e8 cd ff ff ff       	call   c0028f1e <PIC::~PIC()>
c0028f51:	83 c4 10             	add    esp,0x10
c0028f54:	83 ec 08             	sub    esp,0x8
c0028f57:	68 58 21 00 00       	push   0x2158
c0028f5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f60:	e8 90 96 fe ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c0028f65:	83 c4 10             	add    esp,0x10
c0028f68:	83 c4 0c             	add    esp,0xc
c0028f6b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0028f6c <APICTimer::~APICTimer()>:
c0028f6c:	83 ec 0c             	sub    esp,0xc
c0028f6f:	ba 80 c6 02 c0       	mov    edx,0xc002c680
c0028f74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f78:	89 10                	mov    DWORD PTR [eax],edx
c0028f7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f7e:	83 ec 0c             	sub    esp,0xc
c0028f81:	50                   	push   eax
c0028f82:	e8 eb d5 fe ff       	call   c0016572 <Timer::~Timer()>
c0028f87:	83 c4 10             	add    esp,0x10
c0028f8a:	90                   	nop
c0028f8b:	83 c4 0c             	add    esp,0xc
c0028f8e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0028f90 <APICTimer::~APICTimer()>:
c0028f90:	83 ec 0c             	sub    esp,0xc
c0028f93:	83 ec 0c             	sub    esp,0xc
c0028f96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f9a:	e8 cd ff ff ff       	call   c0028f6c <APICTimer::~APICTimer()>
c0028f9f:	83 c4 10             	add    esp,0x10
c0028fa2:	83 ec 08             	sub    esp,0x8
c0028fa5:	68 60 01 00 00       	push   0x160
c0028faa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fae:	e8 42 96 fe ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c0028fb3:	83 c4 10             	add    esp,0x10
c0028fb6:	83 c4 0c             	add    esp,0xc
c0028fb9:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0028fba <PIT::~PIT()>:
c0028fba:	83 ec 0c             	sub    esp,0xc
c0028fbd:	ba d0 c6 02 c0       	mov    edx,0xc002c6d0
c0028fc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fc6:	89 10                	mov    DWORD PTR [eax],edx
c0028fc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fcc:	83 ec 0c             	sub    esp,0xc
c0028fcf:	50                   	push   eax
c0028fd0:	e8 9d d5 fe ff       	call   c0016572 <Timer::~Timer()>
c0028fd5:	83 c4 10             	add    esp,0x10
c0028fd8:	90                   	nop
c0028fd9:	83 c4 0c             	add    esp,0xc
c0028fdc:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0028fde <PIT::~PIT()>:
c0028fde:	83 ec 0c             	sub    esp,0xc
c0028fe1:	83 ec 0c             	sub    esp,0xc
c0028fe4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fe8:	e8 cd ff ff ff       	call   c0028fba <PIT::~PIT()>
c0028fed:	83 c4 10             	add    esp,0x10
c0028ff0:	83 ec 08             	sub    esp,0x8
c0028ff3:	68 5c 01 00 00       	push   0x15c
c0028ff8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ffc:	e8 f4 95 fe ff       	call   c00125f5 <operator delete(void*, unsigned long)>
c0029001:	83 c4 10             	add    esp,0x10
c0029004:	83 c4 0c             	add    esp,0xc
c0029007:	c3                   	ret    
