
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 3f f6 00 00       	call   c000f65f <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 23 82 02 00       	call   c0028248 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 9c 8e 02 c0       	mov    ebx,0xc0028e9c
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb a8 8e 02 c0    	cmp    ebx,0xc0028ea8
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 f8 cb 02 c0       	mov    eax,0xc002cbf8
c0000049:	3d f8 cb 02 c0       	cmp    eax,0xc002cbf8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 f8 cb 02 c0       	push   0xc002cbf8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 f8 cb 02 c0       	mov    eax,0xc002cbf8
c0000075:	2d f8 cb 02 c0       	sub    eax,0xc002cbf8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 f8 cb 02 c0       	push   0xc002cbf8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 28 d2 02 c0 00 	cmp    BYTE PTR ds:0xc002d228,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb b0 8e 02 c0       	mov    ebx,0xc0028eb0
c00000bb:	81 eb ac 8e 02 c0    	sub    ebx,0xc0028eac
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be ac 8e 02 c0       	mov    esi,0xc0028eac
c00000ca:	a1 2c d2 02 c0       	mov    eax,ds:0xc002d22c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 2c d2 02 c0       	mov    ds:0xc002d22c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 2c d2 02 c0       	mov    eax,ds:0xc002d22c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 f8 cb 02 c0       	push   0xc002cbf8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 28 d2 02 c0 01 	mov    BYTE PTR ds:0xc002d228,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 30 d2 02 c0       	push   0xc002d230
c000012c:	68 f8 cb 02 c0       	push   0xc002cbf8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 83 cd 01 00       	call   c001d126 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 9c 1f 01 00       	call   c0012357 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 61 cd 01 00       	call   c001d126 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 09 d2 01 00       	call   c001d5ed <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 1f d8 01 00       	call   c001dc0c <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 70 d6 02 c0 	lgdtd  ds:0xc002d670
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 95 3c 01 00       	call   c0014277 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 48 d2 02 c0       	mov    ds:0xc002d248,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 48 d2 02 c0    	mov    DWORD PTR ds:0xc002d248,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d 48 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d248
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 c0 8e 02 c0 02 	test   BYTE PTR [edx-0x3ffd7140],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 c0 8e 02 c0 01 	test   BYTE PTR [edx-0x3ffd7140],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 c0 8e 02 c0 08 	test   BYTE PTR [edx-0x3ffd7140],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 c0 8e 02 c0 04 	test   BYTE PTR [ebx-0x3ffd7140],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 c0 8e 02 c0 01 	test   BYTE PTR [edx-0x3ffd7140],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d 60 d2 02 c0    	mov    ecx,DWORD PTR ds:0xc002d260
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d 60 d2 02 c0    	mov    DWORD PTR ds:0xc002d260,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 64 d2 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2d9c]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 64 d2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2d9c],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d 60 d2 02 c0    	mov    DWORD PTR ds:0xc002d260,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 8c d2 02 c0    	cmp    DWORD PTR ds:0xc002d28c,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d 9c d2 02 c0    	mov    ecx,DWORD PTR ds:0xc002d29c
c0000e38:	c7 42 0c 94 d2 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d294
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 9c d2 02 c0    	mov    DWORD PTR ds:0xc002d29c,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 8c d2 02 c0    	mov    DWORD PTR ds:0xc002d28c,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 60 d2 02 c0 02 	test   BYTE PTR ds:0xc002d260,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 60 d2 02 c0       	mov    eax,0xc002d260
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 df e4 00 00       	call   c000f3f8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 21 e4 00 00       	call   c000f3f8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 0b e4 00 00       	call   c000f3f8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 e7 e3 00 00       	call   c000f3f8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d 60 d2 02 c0    	mov    edi,DWORD PTR ds:0xc002d260
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 60 d2 02 c0       	mov    eax,0xc002d260
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 64 d2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2d9c]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 64 d2 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2d9c],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 94 d2 02 c0 	lea    edx,[eax*8-0x3ffd2d6c]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 60 d2 02 c0       	mov    eax,0xc002d260
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d a0 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d2a0
c00011ba:	81 fb 94 d2 02 c0    	cmp    ebx,0xc002d294
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d 94 d2 02 c0       	cmp    eax,0xc002d294
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d 90 d2 02 c0    	cmp    DWORD PTR ds:0xc002d290,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 9c d2 02 c0       	mov    ds:0xc002d29c,eax
c00011f6:	a3 a0 d2 02 c0       	mov    ds:0xc002d2a0,eax
c00011fb:	a3 90 d2 02 c0       	mov    ds:0xc002d290,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 94 d2 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d294
c0001209:	c7 40 0c 94 d2 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d294
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 a0 d2 02 c0       	mov    ds:0xc002d2a0,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 94 d2 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d294
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 58 d2 02 c0 	lea    ebp,[edx*4-0x3ffd2da8]
c000125a:	8b 14 95 60 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2da0]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 60 d2 02 c0 	lea    ecx,[edx*4-0x3ffd2da0]
c0001275:	8b 14 95 60 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2da0]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd 94 d5 02 c0 	or     DWORD PTR [edi*4-0x3ffd2a6c],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 94 d2 02 c0 	lea    eax,[eax*8-0x3ffd2d6c]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d 9c d2 02 c0    	mov    DWORD PTR ds:0xc002d29c,ecx
c000132f:	89 0d a0 d2 02 c0    	mov    DWORD PTR ds:0xc002d2a0,ecx
c0001335:	c7 41 08 94 d2 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d294
c000133c:	c7 41 0c 94 d2 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d294
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd 8c d2 02 c0 	lea    edx,[ecx*8-0x3ffd2d74]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d 94 d5 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd2a6c]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d 94 d5 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd2a6c]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 8c d2 02 c0 	lea    edx,[eax*4-0x3ffd2d74]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d 94 d5 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd2a6c],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d 9c d2 02 c0    	mov    DWORD PTR ds:0xc002d29c,edi
c0001402:	89 3d a0 d2 02 c0    	mov    DWORD PTR ds:0xc002d2a0,edi
c0001408:	c7 47 08 94 d2 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d294
c000140f:	c7 47 0c 94 d2 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d294
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d 90 d2 02 c0    	mov    DWORD PTR ds:0xc002d290,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 8c d2 02 c0       	mov    eax,ds:0xc002d28c
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d 8c d2 02 c0    	mov    DWORD PTR ds:0xc002d28c,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba 60 d2 02 c0       	mov    edx,0xc002d260
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d 60 d2 02 c0 00 	cmp    DWORD PTR ds:0xc002d260,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 60 d2 02 c0       	mov    eax,0xc002d260
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d b4 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5b4
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 b4 d5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d5b4,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d b4 d5 02 c0    	mov    DWORD PTR ds:0xc002d5b4,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 8c d2 02 c0    	cmp    DWORD PTR ds:0xc002d28c,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d 8c d2 02 c0    	mov    DWORD PTR ds:0xc002d28c,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 60 d2 02 c0 00 	cmp    DWORD PTR ds:0xc002d260,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 60 d2 02 c0       	mov    eax,0xc002d260
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 bc d5 02 c0    	push   DWORD PTR ds:0xc002d5bc
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d 60 d2 02 c0 00 	cmp    DWORD PTR ds:0xc002d260,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 60 d2 02 c0       	mov    eax,0xc002d260
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 bc d5 02 c0       	mov    eax,ds:0xc002d5bc
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 60 d2 02 c0       	mov    eax,0xc002d260
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d 8c d2 02 c0 00 	cmp    DWORD PTR ds:0xc002d28c,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 60 d2 02 c0       	mov    eax,0xc002d260
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 8c d2 02 c0       	mov    eax,ds:0xc002d28c
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 64 d2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2d9c]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 94 d2 02 c0       	mov    eax,0xc002d294
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d 8c d5 02 c0       	cmp    eax,0xc002d58c
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 c8 d5 02 c0       	mov    eax,ds:0xc002d5c8
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 b0 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d5b0
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 c4 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d5c4
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 d4 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d5d4
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 60 d2 02 c0       	mov    eax,0xc002d260
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 c4 8f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd703c]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 60 d2 02 c0       	mov    eax,ds:0xc002d260
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 60 d2 02 c0       	mov    ds:0xc002d260,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d a4 d5 02 c0    	mov    DWORD PTR ds:0xc002d5a4,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d a8 d5 02 c0    	mov    DWORD PTR ds:0xc002d5a8,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d ac d5 02 c0    	mov    DWORD PTR ds:0xc002d5ac,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 b4 d5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d5b4,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 20 0d 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf2e0]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 4a ea 01 00       	jmp    c002063c <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 20 0d 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf2e0]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 7b ea 01 00       	jmp    c0020683 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 20 0d 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf2e0]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 a3 ea 01 00       	jmp    c00206ca <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 9a 46 02 00       	call   c00265a4 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 e0 90 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6f20]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 e0 90 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6f20]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba e0 8f 02 c0       	mov    edx,0xc0028fe0
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba 00 91 02 c0       	mov    edx,0xc0029100
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba 2c bb 02 c0       	mov    edx,0xc002bb2c
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba 0c 91 02 c0       	mov    edx,0xc002910c
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba f0 90 02 c0       	mov    edx,0xc00290f0
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 00 d6 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd2a00]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 e0 d5 02 c0    	mov    ax,ds:0xc002d5e0
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 e0 d5 02 c0    	mov    ds:0xc002d5e0,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 97 34 02 00       	call   c00265a4 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 12 91 02 c0       	mov    eax,0xc0029112
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad 60 90 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6fa0]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 1b 91 02 c0       	mov    eax,0xc002911b
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 e0 90 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6f20]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 62 1e 02 00       	call   c00265a4 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba f0 90 02 c0       	mov    edx,0xc00290f0
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba e0 8f 02 c0       	mov    edx,0xc0028fe0
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba f0 8f 02 c0       	mov    edx,0xc0028ff0
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 00 d6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2a00]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 00 d6 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2a00],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 29 08 02 00       	call   c00265a4 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 0f 08 02 00       	call   c00265a4 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 37 90 02 c0       	mov    eax,0xc0029037
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 30 90 02 c0       	mov    eax,0xc0029030
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 00 d6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2a00]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be 20 90 02 c0       	mov    esi,0xc0029020
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 52 ef 01 00       	call   c00265a4 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba 00 91 02 c0       	mov    edx,0xc0029100
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba 00 90 02 c0       	mov    edx,0xc0029000
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba 10 90 02 c0       	mov    edx,0xc0029010
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba 22 91 02 c0       	mov    edx,0xc0029122
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba 2e 91 02 c0       	mov    edx,0xc002912e
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba 42 91 02 c0       	mov    edx,0xc0029142
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 30 71 00 00       	call   c000f599 <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 2a 71 00 00       	call   c000f5a9 <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c 60 94 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029460
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 60 94 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029460
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 60 92 02 c0       	mov    eax,0xc0029260
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 a0 91 02 c0       	mov    eax,0xc00291a0
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 60 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ea0]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 6f 6e 00 00       	call   c000f5a9 <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 59 6e 00 00       	call   c000f5a9 <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 a6 f8 01 00       	call   c0028077 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 69 f8 01 00       	call   c0028059 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 3d f8 01 00       	call   c0028077 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 f0 ee 01 00       	call   c002777c <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 72 f9 01 00       	call   c0028210 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 b7 f7 01 00       	call   c0028077 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 f9 f6 01 00       	call   c0028077 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 c6 f6 01 00       	call   c0028059 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 b3 f5 01 00       	call   c0028077 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 7b f5 01 00       	call   c0028059 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 38 6a 00 00       	call   c000f5c9 <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 d3 69 00 00       	call   c000f5a9 <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 60 95 02 c0       	mov    eax,0xc0029560
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 87 f3 01 00       	call   c0028077 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 4c f3 01 00       	call   c0028059 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 c0 99 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6640]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 5c f0 01 00       	call   c0027e0b <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 da e9 01 00       	call   c00277a8 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 96 f2 01 00       	call   c002807b <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 84 f3 01 00       	call   c002819f <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 6e e9 01 00       	call   c00277a8 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 19 f2 01 00       	call   c0028075 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 fa f1 01 00       	call   c0028079 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 90 f3 01 00       	call   c0028230 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 3a ef 01 00       	call   c0027e0b <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 b8 e8 01 00       	call   c00277a8 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 74 f1 01 00       	call   c002807b <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 62 f2 01 00       	call   c002819f <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 4c e8 01 00       	call   c00277a8 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 f7 f0 01 00       	call   c0028075 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 d7 f0 01 00       	call   c0028079 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 6c f2 01 00       	call   c0028230 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 12 f0 01 00       	call   c0028077 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 d0 ef 01 00       	call   c0028059 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 b8 ef 01 00       	call   c0028077 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 2a ed 01 00       	call   c0027e0b <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 2c e0 01 00       	call   c002712b <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 8f e6 01 00       	call   c00277a8 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 e1 ec 01 00       	call   c0027e0b <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 e7 df 01 00       	call   c002712b <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 b6 ec 01 00       	call   c0027e0b <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 06 ef 01 00       	call   c0028075 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 e3 e5 01 00       	call   c002777c <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 65 f0 01 00       	call   c0028210 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 8c ee 01 00       	call   c0028059 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 87 e5 01 00       	call   c002777c <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 05 ec 01 00       	call   c0027e0b <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 88 e5 01 00       	call   c00277a8 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 da eb 01 00       	call   c0027e0b <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 41 e8 01 00       	call   c0027a8c <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 c0 de 01 00       	call   c002712b <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 20 d8 01 00       	call   c0026ac0 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 f7 ee 01 00       	call   c002819f <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 e0 e4 01 00       	call   c00277a8 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 c7 ee 01 00       	call   c002819f <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 39 de 01 00       	call   c002712b <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 72 ed 01 00       	call   c002807b <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 5a e7 01 00       	call   c0027a8c <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 e0 dd 01 00       	call   c002712b <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 ce ee 01 00       	call   c0028230 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 a0 ea 01 00       	call   c0027e0b <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 f7 e3 01 00       	call   c002777c <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 d6 ec 01 00       	call   c0028077 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 6f dd 01 00       	call   c002712b <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 9b e3 01 00       	call   c002777c <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 3d ee 01 00       	call   c0028230 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 ee e9 01 00       	call   c0027e0b <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 6b e3 01 00       	call   c00277a8 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 be e9 01 00       	call   c0027e0b <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 c4 dc 01 00       	call   c002712b <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 94 e9 01 00       	call   c0027e0b <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 e6 eb 01 00       	call   c0028077 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 bd e2 01 00       	call   c002777c <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 3f ed 01 00       	call   c0028210 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 66 eb 01 00       	call   c0028059 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 60 e2 01 00       	call   c002777c <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 de e8 01 00       	call   c0027e0b <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 61 e2 01 00       	call   c00277a8 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 b3 e8 01 00       	call   c0027e0b <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 1a e5 01 00       	call   c0027a8c <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 99 db 01 00       	call   c002712b <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 e9 d4 01 00       	call   c0026ac0 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 c0 eb 01 00       	call   c002819f <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 a9 e1 01 00       	call   c00277a8 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 90 eb 01 00       	call   c002819f <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 02 db 01 00       	call   c002712b <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 3b ea 01 00       	call   c002807b <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 22 e4 01 00       	call   c0027a8c <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 a1 da 01 00       	call   c002712b <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 8f eb 01 00       	call   c0028230 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 61 e7 01 00       	call   c0027e0b <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 b8 e0 01 00       	call   c002777c <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 97 e9 01 00       	call   c0028077 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 30 da 01 00       	call   c002712b <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 5c e0 01 00       	call   c002777c <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 d1 e6 01 00       	call   c0027e0b <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 d7 d9 01 00       	call   c002712b <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 20 9a 02 c0       	mov    eax,0xc0029a20
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 34 9a 02 c0       	mov    eax,0xc0029a34
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 6c 5d 00 00       	call   c000f5a9 <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 6e 5d 00 00       	call   c000f5c9 <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 4c e5 01 00       	call   c0027e0b <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 ca de 01 00       	call   c00277a8 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 5c d1 01 00       	call   c0026ac0 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 33 e8 01 00       	call   c002819f <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 1c de 01 00       	call   c00277a8 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 ff e7 01 00       	call   c002819f <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 71 d7 01 00       	call   c002712b <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 d1 e7 01 00       	call   c002819f <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 c0 dd 01 00       	call   c00277a8 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 29 d7 01 00       	call   c002712b <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 4a d0 01 00       	call   c0026ac0 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 21 e7 01 00       	call   c002819f <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 0a dd 01 00       	call   c00277a8 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 ed e6 01 00       	call   c002819f <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 5f d6 01 00       	call   c002712b <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 bf e6 01 00       	call   c002819f <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 ae dc 01 00       	call   c00277a8 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 17 d6 01 00       	call   c002712b <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 f5 d5 01 00       	call   c002712b <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 d1 ce 01 00       	call   c0026ac0 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 a8 e5 01 00       	call   c002819f <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 91 db 01 00       	call   c00277a8 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 74 e5 01 00       	call   c002819f <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 e6 d4 01 00       	call   c002712b <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 46 e5 01 00       	call   c002819f <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 2f db 01 00       	call   c00277a8 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 98 d4 01 00       	call   c002712b <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 f8 e4 01 00       	call   c002819f <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 e1 da 01 00       	call   c00277a8 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 4a d4 01 00       	call   c002712b <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 5f cd 01 00       	call   c0026ac0 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 36 e4 01 00       	call   c002819f <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 1f da 01 00       	call   c00277a8 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 06 e4 01 00       	call   c002819f <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 78 d3 01 00       	call   c002712b <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 d8 e3 01 00       	call   c002819f <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 c1 d9 01 00       	call   c00277a8 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 2a d3 01 00       	call   c002712b <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 8a e3 01 00       	call   c002819f <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 73 d9 01 00       	call   c00277a8 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 dc d2 01 00       	call   c002712b <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 b0 d2 01 00       	call   c002712b <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 0d d9 01 00       	call   c00277a8 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 c9 e1 01 00       	call   c002807b <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 58 d2 01 00       	call   c002712b <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 b5 d8 01 00       	call   c00277a8 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 71 e1 01 00       	call   c002807b <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 eb ca 01 00       	call   c0026ac0 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 c2 e1 01 00       	call   c002819f <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 ab d7 01 00       	call   c00277a8 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 8e e1 01 00       	call   c002819f <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 00 d1 01 00       	call   c002712b <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 60 e1 01 00       	call   c002819f <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 49 d7 01 00       	call   c00277a8 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 b2 d0 01 00       	call   c002712b <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 12 e1 01 00       	call   c002819f <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 fb d6 01 00       	call   c00277a8 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 64 d0 01 00       	call   c002712b <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 c4 e0 01 00       	call   c002819f <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 ad d6 01 00       	call   c00277a8 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 16 d0 01 00       	call   c002712b <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 76 e0 01 00       	call   c002819f <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 5f d6 01 00       	call   c00277a8 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 c8 cf 01 00       	call   c002712b <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 ca c8 01 00       	call   c0026ac0 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 a1 df 01 00       	call   c002819f <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 8a d5 01 00       	call   c00277a8 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 71 df 01 00       	call   c002819f <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 e3 ce 01 00       	call   c002712b <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 43 df 01 00       	call   c002819f <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 2c d5 01 00       	call   c00277a8 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 95 ce 01 00       	call   c002712b <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 f5 de 01 00       	call   c002819f <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 de d4 01 00       	call   c00277a8 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 47 ce 01 00       	call   c002712b <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 a7 de 01 00       	call   c002819f <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 90 d4 01 00       	call   c00277a8 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 f9 cd 01 00       	call   c002712b <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 59 de 01 00       	call   c002819f <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 42 d4 01 00       	call   c00277a8 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 ab cd 01 00       	call   c002712b <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 7f cd 01 00       	call   c002712b <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 dc d3 01 00       	call   c00277a8 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 98 dc 01 00       	call   c002807b <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 27 cd 01 00       	call   c002712b <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 84 d3 01 00       	call   c00277a8 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 40 dc 01 00       	call   c002807b <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 ce cc 01 00       	call   c002712b <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 2b d3 01 00       	call   c00277a8 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 e7 db 01 00       	call   c002807b <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 75 cc 01 00       	call   c002712b <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 d2 d2 01 00       	call   c00277a8 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 8e db 01 00       	call   c002807b <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 ec c4 01 00       	call   c0026ac0 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 c3 db 01 00       	call   c002819f <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 ac d1 01 00       	call   c00277a8 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 8f db 01 00       	call   c002819f <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 01 cb 01 00       	call   c002712b <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 61 db 01 00       	call   c002819f <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 4a d1 01 00       	call   c00277a8 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 b3 ca 01 00       	call   c002712b <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 13 db 01 00       	call   c002819f <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 fc d0 01 00       	call   c00277a8 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 65 ca 01 00       	call   c002712b <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 c5 da 01 00       	call   c002819f <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 ae d0 01 00       	call   c00277a8 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 17 ca 01 00       	call   c002712b <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 77 da 01 00       	call   c002819f <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 60 d0 01 00       	call   c00277a8 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 c9 c9 01 00       	call   c002712b <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 29 da 01 00       	call   c002819f <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 12 d0 01 00       	call   c00277a8 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 78 c9 01 00       	call   c002712b <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 d8 d9 01 00       	call   c002819f <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 c1 cf 01 00       	call   c00277a8 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 2a c9 01 00       	call   c002712b <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 24 c2 01 00       	call   c0026ac0 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 fb d8 01 00       	call   c002819f <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 e4 ce 01 00       	call   c00277a8 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 c4 d8 01 00       	call   c002819f <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 36 c8 01 00       	call   c002712b <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 96 d8 01 00       	call   c002819f <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 7f ce 01 00       	call   c00277a8 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 e8 c7 01 00       	call   c002712b <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 48 d8 01 00       	call   c002819f <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 31 ce 01 00       	call   c00277a8 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 9a c7 01 00       	call   c002712b <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 fa d7 01 00       	call   c002819f <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 e3 cd 01 00       	call   c00277a8 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 4c c7 01 00       	call   c002712b <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 ac d7 01 00       	call   c002819f <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 95 cd 01 00       	call   c00277a8 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 fe c6 01 00       	call   c002712b <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 5e d7 01 00       	call   c002819f <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 47 cd 01 00       	call   c00277a8 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 ad c6 01 00       	call   c002712b <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 0d d7 01 00       	call   c002819f <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 f6 cc 01 00       	call   c00277a8 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 65 c6 01 00       	call   c002712b <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 3e c6 01 00       	call   c002712b <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 9c cc 01 00       	call   c00277a8 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 58 d5 01 00       	call   c002807b <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 e7 c5 01 00       	call   c002712b <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 45 cc 01 00       	call   c00277a8 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 01 d5 01 00       	call   c002807b <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 8f c5 01 00       	call   c002712b <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 ed cb 01 00       	call   c00277a8 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 a9 d4 01 00       	call   c002807b <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 37 c5 01 00       	call   c002712b <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 95 cb 01 00       	call   c00277a8 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 51 d4 01 00       	call   c002807b <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 df c4 01 00       	call   c002712b <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 3d cb 01 00       	call   c00277a8 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 f9 d3 01 00       	call   c002807b <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 8d c4 01 00       	call   c002712b <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 eb ca 01 00       	call   c00277a8 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 a7 d3 01 00       	call   c002807b <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 bb bc 01 00       	call   c0026ac0 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 92 d3 01 00       	call   c002819f <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 7b c9 01 00       	call   c00277a8 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 62 d3 01 00       	call   c002819f <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 d4 c2 01 00       	call   c002712b <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 64 9a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd659c]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 08 d3 01 00       	call   c002819f <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 f1 c8 01 00       	call   c00277a8 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 5c c2 01 00       	call   c002712b <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 a9 d2 01 00       	call   c002819f <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 92 c8 01 00       	call   c00277a8 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 fd c1 01 00       	call   c002712b <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 4a d2 01 00       	call   c002819f <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 33 c8 01 00       	call   c00277a8 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 9e c1 01 00       	call   c002712b <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 eb d1 01 00       	call   c002819f <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 d4 c7 01 00       	call   c00277a8 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 3f c1 01 00       	call   c002712b <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 8c d1 01 00       	call   c002819f <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 75 c7 01 00       	call   c00277a8 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 e0 c0 01 00       	call   c002712b <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 2d d1 01 00       	call   c002819f <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 16 c7 01 00       	call   c00277a8 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 81 c0 01 00       	call   c002712b <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 ce d0 01 00       	call   c002819f <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 b7 c6 01 00       	call   c00277a8 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 22 c0 01 00       	call   c002712b <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 6f d0 01 00       	call   c002819f <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 58 c6 01 00       	call   c00277a8 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 c3 bf 01 00       	call   c002712b <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 cd b8 01 00       	call   c0026ac0 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 a4 cf 01 00       	call   c002819f <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 8d c5 01 00       	call   c00277a8 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 74 cf 01 00       	call   c002819f <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 e6 be 01 00       	call   c002712b <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 80 9a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6580]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 19 cf 01 00       	call   c002819f <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 02 c5 01 00       	call   c00277a8 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 6d be 01 00       	call   c002712b <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 b9 ce 01 00       	call   c002819f <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 a2 c4 01 00       	call   c00277a8 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 0d be 01 00       	call   c002712b <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 59 ce 01 00       	call   c002819f <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 42 c4 01 00       	call   c00277a8 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 ad bd 01 00       	call   c002712b <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 f9 cd 01 00       	call   c002819f <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 e2 c3 01 00       	call   c00277a8 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 4d bd 01 00       	call   c002712b <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 99 cd 01 00       	call   c002819f <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 82 c3 01 00       	call   c00277a8 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 ed bc 01 00       	call   c002712b <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 39 cd 01 00       	call   c002819f <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 22 c3 01 00       	call   c00277a8 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 8d bc 01 00       	call   c002712b <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 d9 cc 01 00       	call   c002819f <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 c2 c2 01 00       	call   c00277a8 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 2d bc 01 00       	call   c002712b <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 79 cc 01 00       	call   c002819f <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 62 c2 01 00       	call   c00277a8 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 cd bb 01 00       	call   c002712b <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 9c 9a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6564]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 72 bb 01 00       	call   c002712b <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 cf c1 01 00       	call   c00277a8 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 8b ca 01 00       	call   c002807b <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 15 bb 01 00       	call   c002712b <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 72 c1 01 00       	call   c00277a8 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 2e ca 01 00       	call   c002807b <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 b8 ba 01 00       	call   c002712b <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 15 c1 01 00       	call   c00277a8 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 d1 c9 01 00       	call   c002807b <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 5b ba 01 00       	call   c002712b <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 b8 c0 01 00       	call   c00277a8 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 74 c9 01 00       	call   c002807b <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 fe b9 01 00       	call   c002712b <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 5b c0 01 00       	call   c00277a8 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 17 c9 01 00       	call   c002807b <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 a1 b9 01 00       	call   c002712b <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 fe bf 01 00       	call   c00277a8 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 ba c8 01 00       	call   c002807b <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 44 b9 01 00       	call   c002712b <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 a1 bf 01 00       	call   c00277a8 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 5d c8 01 00       	call   c002807b <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 e7 b8 01 00       	call   c002712b <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 44 bf 01 00       	call   c00277a8 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 00 c8 01 00       	call   c002807b <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 fc be 01 00       	call   c00277a8 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 74 c9 01 00       	jmp    c0028230 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 de c5 01 00       	call   c0028077 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 9c c5 01 00       	call   c0028059 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 33 c3 01 00       	call   c0027e0b <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 34 b6 01 00       	call   c002712b <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 03 c3 01 00       	call   c0027e0b <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 6a bf 01 00       	call   c0027a8c <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 09 c5 01 00       	call   c0028059 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 0c c5 01 00       	call   c0028077 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 df c4 01 00       	call   c0028077 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 d8 be 01 00       	call   c0027a8c <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 62 c6 01 00       	call   c0028230 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 3d c6 01 00       	call   c0028230 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 0f c2 01 00       	call   c0027e0b <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 66 bb 01 00       	call   c002777c <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 45 c4 01 00       	call   c0028077 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 de b4 01 00       	call   c002712b <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 02 bb 01 00       	call   c002777c <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 a4 c5 01 00       	call   c0028230 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 dc bd 01 00       	call   c0027a8c <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 59 b4 01 00       	call   c002712b <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 85 c0 01 00       	call   c0027e0b <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 85 b3 01 00       	call   c002712b <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 65 b3 01 00       	call   c002712b <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 35 c0 01 00       	call   c0027e0b <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 85 c2 01 00       	call   c0028075 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 64 b9 01 00       	call   c002777c <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 e6 c3 01 00       	call   c0028210 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 0d c2 01 00       	call   c0028059 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 0b b9 01 00       	call   c002777c <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 89 bf 01 00       	call   c0027e0b <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 0c b9 01 00       	call   c00277a8 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 5e bf 01 00       	call   c0027e0b <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 c5 bb 01 00       	call   c0027a8c <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 44 b2 01 00       	call   c002712b <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 0e bf 01 00       	call   c0027e0b <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 5a c1 01 00       	call   c0028077 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 4f b8 01 00       	call   c00277a8 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 21 b8 01 00       	call   c00277a8 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 5a be 01 00       	call   c0027e0b <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 be ba 01 00       	call   c0027a8c <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 86 ba 01 00       	call   c0027a8c <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 05 b1 01 00       	call   c002712b <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 f2 c1 01 00       	call   c0028230 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 c4 bd 01 00       	call   c0027e0b <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 1b b7 01 00       	call   c002777c <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 fa bf 01 00       	call   c0028077 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 92 b0 01 00       	call   c002712b <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 b6 b6 01 00       	call   c002777c <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 58 c1 01 00       	call   c0028230 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 19 bf 01 00       	call   c0028077 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 d7 be 01 00       	call   c0028059 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 6e bc 01 00       	call   c0027e0b <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 6f af 01 00       	call   c002712b <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 3e bc 01 00       	call   c0027e0b <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 a5 b8 01 00       	call   c0027a8c <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 44 be 01 00       	call   c0028059 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 47 be 01 00       	call   c0028077 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 1a be 01 00       	call   c0028077 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 13 b8 01 00       	call   c0027a8c <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 9d bf 01 00       	call   c0028230 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 78 bf 01 00       	call   c0028230 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 4a bb 01 00       	call   c0027e0b <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 a1 b4 01 00       	call   c002777c <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 80 bd 01 00       	call   c0028077 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 19 ae 01 00       	call   c002712b <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 3d b4 01 00       	call   c002777c <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 df be 01 00       	call   c0028230 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 17 b7 01 00       	call   c0027a8c <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 94 ad 01 00       	call   c002712b <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 bf b9 01 00       	call   c0027e0b <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 bf ac 01 00       	call   c002712b <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 9f ac 01 00       	call   c002712b <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 6f b9 01 00       	call   c0027e0b <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 bf bb 01 00       	call   c0028075 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 9d b2 01 00       	call   c002777c <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 1f bd 01 00       	call   c0028210 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 46 bb 01 00       	call   c0028059 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 43 b2 01 00       	call   c002777c <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 c1 b8 01 00       	call   c0027e0b <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 44 b2 01 00       	call   c00277a8 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 96 b8 01 00       	call   c0027e0b <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 fd b4 01 00       	call   c0027a8c <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 7c ab 01 00       	call   c002712b <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 46 b8 01 00       	call   c0027e0b <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 92 ba 01 00       	call   c0028077 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 87 b1 01 00       	call   c00277a8 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 59 b1 01 00       	call   c00277a8 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 90 b7 01 00       	call   c0027e0b <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 f4 b3 01 00       	call   c0027a8c <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 c1 b3 01 00       	call   c0027a8c <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 40 aa 01 00       	call   c002712b <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 2d bb 01 00       	call   c0028230 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 ff b6 01 00       	call   c0027e0b <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 56 b0 01 00       	call   c002777c <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 35 b9 01 00       	call   c0028077 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 cd a9 01 00       	call   c002712b <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 f1 af 01 00       	call   c002777c <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 93 ba 01 00       	call   c0028230 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 54 b8 01 00       	call   c0028077 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 12 b8 01 00       	call   c0028059 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 a9 b5 01 00       	call   c0027e0b <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 aa a8 01 00       	call   c002712b <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 79 b5 01 00       	call   c0027e0b <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 e0 b1 01 00       	call   c0027a8c <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 7f b7 01 00       	call   c0028059 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 82 b7 01 00       	call   c0028077 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 55 b7 01 00       	call   c0028077 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 4e b1 01 00       	call   c0027a8c <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 d8 b8 01 00       	call   c0028230 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 b3 b8 01 00       	call   c0028230 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 85 b4 01 00       	call   c0027e0b <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 dc ad 01 00       	call   c002777c <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 bb b6 01 00       	call   c0028077 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 54 a7 01 00       	call   c002712b <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 78 ad 01 00       	call   c002777c <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 1a b8 01 00       	call   c0028230 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 52 b0 01 00       	call   c0027a8c <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 cf a6 01 00       	call   c002712b <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 fa b2 01 00       	call   c0027e0b <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 fa a5 01 00       	call   c002712b <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 da a5 01 00       	call   c002712b <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 aa b2 01 00       	call   c0027e0b <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 fa b4 01 00       	call   c0028075 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 d8 ab 01 00       	call   c002777c <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 5a b6 01 00       	call   c0028210 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 81 b4 01 00       	call   c0028059 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 7e ab 01 00       	call   c002777c <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 fc b1 01 00       	call   c0027e0b <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 7f ab 01 00       	call   c00277a8 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 d1 b1 01 00       	call   c0027e0b <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 38 ae 01 00       	call   c0027a8c <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 b7 a4 01 00       	call   c002712b <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 81 b1 01 00       	call   c0027e0b <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 cd b3 01 00       	call   c0028077 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 c2 aa 01 00       	call   c00277a8 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 94 aa 01 00       	call   c00277a8 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 cb b0 01 00       	call   c0027e0b <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 2f ad 01 00       	call   c0027a8c <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 fc ac 01 00       	call   c0027a8c <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 7b a3 01 00       	call   c002712b <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 68 b4 01 00       	call   c0028230 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 3a b0 01 00       	call   c0027e0b <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 91 a9 01 00       	call   c002777c <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 70 b2 01 00       	call   c0028077 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 08 a3 01 00       	call   c002712b <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 2c a9 01 00       	call   c002777c <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 ce b3 01 00       	call   c0028230 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 8f b1 01 00       	call   c0028077 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 4d b1 01 00       	call   c0028059 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 e4 ae 01 00       	call   c0027e0b <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 e5 a1 01 00       	call   c002712b <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 b4 ae 01 00       	call   c0027e0b <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 1b ab 01 00       	call   c0027a8c <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 ba b0 01 00       	call   c0028059 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 bd b0 01 00       	call   c0028077 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 90 b0 01 00       	call   c0028077 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 89 aa 01 00       	call   c0027a8c <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 13 b2 01 00       	call   c0028230 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 ee b1 01 00       	call   c0028230 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 c0 ad 01 00       	call   c0027e0b <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 17 a7 01 00       	call   c002777c <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 f6 af 01 00       	call   c0028077 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 8f a0 01 00       	call   c002712b <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 b3 a6 01 00       	call   c002777c <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 55 b1 01 00       	call   c0028230 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 8d a9 01 00       	call   c0027a8c <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 0a a0 01 00       	call   c002712b <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 35 ac 01 00       	call   c0027e0b <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 35 9f 01 00       	call   c002712b <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 15 9f 01 00       	call   c002712b <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 e5 ab 01 00       	call   c0027e0b <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 35 ae 01 00       	call   c0028075 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 13 a5 01 00       	call   c002777c <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 95 af 01 00       	call   c0028210 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 bc ad 01 00       	call   c0028059 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 b9 a4 01 00       	call   c002777c <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 37 ab 01 00       	call   c0027e0b <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 ba a4 01 00       	call   c00277a8 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 0c ab 01 00       	call   c0027e0b <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 73 a7 01 00       	call   c0027a8c <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 f2 9d 01 00       	call   c002712b <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 bc aa 01 00       	call   c0027e0b <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 08 ad 01 00       	call   c0028077 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 fd a3 01 00       	call   c00277a8 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 cf a3 01 00       	call   c00277a8 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 06 aa 01 00       	call   c0027e0b <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 6a a6 01 00       	call   c0027a8c <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 37 a6 01 00       	call   c0027a8c <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 b6 9c 01 00       	call   c002712b <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 a3 ad 01 00       	call   c0028230 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 75 a9 01 00       	call   c0027e0b <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 cc a2 01 00       	call   c002777c <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 ab ab 01 00       	call   c0028077 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 43 9c 01 00       	call   c002712b <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 67 a2 01 00       	call   c002777c <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 09 ad 01 00       	call   c0028230 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 c7 aa 01 00       	call   c0028077 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 85 aa 01 00       	call   c0028059 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 1c a8 01 00       	call   c0027e0b <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 1d 9b 01 00       	call   c002712b <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 ec a7 01 00       	call   c0027e0b <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 53 a4 01 00       	call   c0027a8c <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 f2 a9 01 00       	call   c0028059 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 f5 a9 01 00       	call   c0028077 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 c8 a9 01 00       	call   c0028077 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 c1 a3 01 00       	call   c0027a8c <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 4b ab 01 00       	call   c0028230 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 22 ab 01 00       	call   c0028230 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 f4 a6 01 00       	call   c0027e0b <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 4b a0 01 00       	call   c002777c <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 2a a9 01 00       	call   c0028077 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 c3 99 01 00       	call   c002712b <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 eb 9f 01 00       	call   c002777c <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 8d aa 01 00       	call   c0028230 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 c6 a2 01 00       	call   c0027a8c <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 43 99 01 00       	call   c002712b <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 6f a5 01 00       	call   c0027e0b <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 6f 98 01 00       	call   c002712b <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 4f 98 01 00       	call   c002712b <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 1f a5 01 00       	call   c0027e0b <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 53 a7 01 00       	call   c0028059 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 4a 9e 01 00       	call   c002777c <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 cc a8 01 00       	call   c0028210 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 f3 a6 01 00       	call   c0028059 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 ed 9d 01 00       	call   c002777c <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 6b a4 01 00       	call   c0027e0b <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 ee 9d 01 00       	call   c00277a8 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 40 a4 01 00       	call   c0027e0b <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 a7 a0 01 00       	call   c0027a8c <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 26 97 01 00       	call   c002712b <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 f0 a3 01 00       	call   c0027e0b <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 3c a6 01 00       	call   c0028077 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 31 9d 01 00       	call   c00277a8 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 03 9d 01 00       	call   c00277a8 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 47 a3 01 00       	call   c0027e0b <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 ae 9f 01 00       	call   c0027a8c <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 97 9c 01 00       	call   c00277a8 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 53 a5 01 00       	call   c002807b <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 46 9f 01 00       	call   c0027a8c <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 c5 95 01 00       	call   c002712b <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 b2 a6 01 00       	call   c0028230 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 84 a2 01 00       	call   c0027e0b <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 db 9b 01 00       	call   c002777c <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 ba a4 01 00       	call   c0028077 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 52 95 01 00       	call   c002712b <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 7a 9b 01 00       	call   c002777c <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 1c a6 01 00       	call   c0028230 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 c4 9a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd653c]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 b8 9a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6548]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 32 19 00 00       	call   c000f5a9 <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 cf a2 01 00       	call   c0028077 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 8d a2 01 00       	call   c0028059 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 79 a2 01 00       	call   c0028077 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 eb 9f 01 00       	call   c0027e0b <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 69 99 01 00       	call   c00277a8 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 bb 9f 01 00       	call   c0027e0b <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 c1 92 01 00       	call   c002712b <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 90 9f 01 00       	call   c0027e0b <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 e0 a1 01 00       	call   c0028075 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 c1 98 01 00       	call   c002777c <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 43 a3 01 00       	call   c0028210 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 6a a1 01 00       	call   c0028059 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 69 98 01 00       	call   c002777c <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 e7 9e 01 00       	call   c0027e0b <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 6a 98 01 00       	call   c00277a8 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 bc 9e 01 00       	call   c0027e0b <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 23 9b 01 00       	call   c0027a8c <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 a2 91 01 00       	call   c002712b <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 ca 9a 01 00       	call   c0027a8c <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 50 91 01 00       	call   c002712b <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 3e a2 01 00       	call   c0028230 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 10 9e 01 00       	call   c0027e0b <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 67 97 01 00       	call   c002777c <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 46 a0 01 00       	call   c0028077 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 df 90 01 00       	call   c002712b <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 0b 97 01 00       	call   c002777c <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 ad a1 01 00       	call   c0028230 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 5a 9d 01 00       	call   c0027e0b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 d7 96 01 00       	call   c00277a8 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 28 9d 01 00       	call   c0027e0b <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 2e 90 01 00       	call   c002712b <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 fe 9c 01 00       	call   c0027e0b <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 52 9f 01 00       	call   c0028079 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 2b 96 01 00       	call   c002777c <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 ad a0 01 00       	call   c0028210 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 d4 9e 01 00       	call   c0028059 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 d2 95 01 00       	call   c002777c <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 50 9c 01 00       	call   c0027e0b <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 d3 95 01 00       	call   c00277a8 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 25 9c 01 00       	call   c0027e0b <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 8c 98 01 00       	call   c0027a8c <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 0b 8f 01 00       	call   c002712b <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 27 98 01 00       	call   c0027a8c <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 a6 8e 01 00       	call   c002712b <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 94 9f 01 00       	call   c0028230 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 66 9b 01 00       	call   c0027e0b <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 bd 94 01 00       	call   c002777c <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 9c 9d 01 00       	call   c0028077 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 35 8e 01 00       	call   c002712b <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 61 94 01 00       	call   c002777c <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 d2 9a 01 00       	call   c0027e0b <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 d8 8d 01 00       	call   c002712b <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 de 9b 02 c0       	mov    eax,0xc0029bde
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 ef 9b 02 c0       	mov    eax,0xc0029bef
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 74 11 00 00       	call   c000f5a9 <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 76 11 00 00       	call   c000f5c9 <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 f0 10 00 00       	jmp    c000f599 <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 0b 11 00 00       	jmp    c000f5b9 <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 88 0b 03 c0    	inc    DWORD PTR ds:0xc0030b88
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 88 0b 03 c0    	inc    DWORD PTR ds:0xc0030b88
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 88 0b 03 c0    	inc    DWORD PTR ds:0xc0030b88
c000e4e3:	ff 05 84 0b 03 c0    	inc    DWORD PTR ds:0xc0030b84
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 84 0b 03 c0       	mov    eax,ds:0xc0030b84
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 84 0b 03 c0       	mov    ds:0xc0030b84,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d 80 0b 03 c0 00 	cmp    DWORD PTR ds:0xc0030b80,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 80 0b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030b80,0x0
c000e50d:	e8 49 f3 00 00       	call   c001d85b <schedule()>
c000e512:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c000e517:	48                   	dec    eax
c000e518:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 d0 d7 02 c0       	mov    eax,ds:0xc002d7d0
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 26 9c 02 c0       	push   0xc0029c26
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 68 d6 02 c0       	mov    eax,0xc002d668
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 2f 9c 02 c0       	push   0xc0029c2f
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 a4 65 02 c0       	mov    eax,0xc00265a4
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 39 9c 02 c0       	push   0xc0029c39
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 d8 62 02 c0       	mov    eax,0xc00262d8
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 42 9c 02 c0       	push   0xc0029c42
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 a4 66 02 c0       	mov    eax,0xc00266a4
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 4c 9c 02 c0       	push   0xc0029c4c
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 24 64 02 c0       	mov    eax,0xc0026424
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 55 9c 02 c0       	push   0xc0029c55
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 6c d6 02 c0       	mov    eax,0xc002d66c
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 62 9c 02 c0       	push   0xc0029c62
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 6d d6 02 c0       	mov    eax,0xc002d66d
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 c7 54 00 00       	call   c0013b34 <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 6f 9c 02 c0       	push   0xc0029c6f
c000e69e:	e8 50 0f 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e6a3:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e6aa:	e8 ea 0e 00 00       	call   c000f599 <malloc>
c000e6af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6b6:	89 c3                	mov    ebx,eax
c000e6b8:	ff 35 b0 0b 03 c0    	push   DWORD PTR ds:0xc0030bb0
c000e6be:	68 88 9c 02 c0       	push   0xc0029c88
c000e6c3:	6a 01                	push   0x1
c000e6c5:	50                   	push   eax
c000e6c6:	e8 73 ed 00 00       	call   c001d43e <Process::Process(bool, char const*, Process*, char**)>
c000e6cb:	83 c4 20             	add    esp,0x20
c000e6ce:	68 ff 00 00 00       	push   0xff
c000e6d3:	6a 00                	push   0x0
c000e6d5:	68 2f ef 00 c0       	push   0xc000ef2f
c000e6da:	53                   	push   ebx
c000e6db:	e8 56 ef 00 00       	call   c001d636 <Process::createThread(void (*)(void*), void*, int)>
c000e6e0:	6a 7a                	push   0x7a
c000e6e2:	6a 00                	push   0x0
c000e6e4:	68 1a e0 01 c0       	push   0xc001e01a
c000e6e9:	ff 35 b0 0b 03 c0    	push   DWORD PTR ds:0xc0030bb0
c000e6ef:	e8 42 ef 00 00       	call   c001d636 <Process::createThread(void (*)(void*), void*, int)>
c000e6f4:	83 c4 14             	add    esp,0x14
c000e6f7:	a3 68 0b 03 c0       	mov    ds:0xc0030b68,eax
c000e6fc:	68 6c 9d 02 c0       	push   0xc0029d6c
c000e701:	c6 05 6d d6 02 c0 01 	mov    BYTE PTR ds:0xc002d66d,0x1
c000e708:	e8 e6 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e70d:	e8 b3 fc 00 00       	call   c001e3c5 <Vm::initialise8086()>
c000e712:	e8 e5 41 00 00       	call   c00128fc <Fs::initVFS()>
c000e717:	c7 04 24 95 9c 02 c0 	mov    DWORD PTR [esp],0xc0029c95
c000e71e:	e8 d0 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e723:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c000e728:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e72e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e730:	6a 00                	push   0x0
c000e732:	6a 00                	push   0x0
c000e734:	6a 00                	push   0x0
c000e736:	50                   	push   eax
c000e737:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e73a:	83 c4 14             	add    esp,0x14
c000e73d:	68 6c 9d 02 c0       	push   0xc0029d6c
c000e742:	e8 ac 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e747:	e8 7f d5 00 00       	call   c001bccb <Sys::loadSyscalls()>
c000e74c:	e8 77 b4 00 00       	call   c0019bc8 <Krnl::loadSystemEnv()>
c000e751:	83 c4 0c             	add    esp,0xc
c000e754:	6a 3a                	push   0x3a
c000e756:	68 af 9c 02 c0       	push   0xc0029caf
c000e75b:	68 b8 9c 02 c0       	push   0xc0029cb8
c000e760:	e8 28 c3 00 00       	call   c001aa8d <Reg::readIntWithDefault(char*, char*, int)>
c000e765:	89 04 24             	mov    DWORD PTR [esp],eax
c000e768:	e8 7f 4c 00 00       	call   c00133ec <User::loadClockSettings(int)>
c000e76d:	c7 04 24 90 9d 02 c0 	mov    DWORD PTR [esp],0xc0029d90
c000e774:	e8 7a 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e779:	58                   	pop    eax
c000e77a:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c000e77f:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e785:	e8 6a 53 00 00       	call   c0013af4 <Device::loadDriversForAll()>
c000e78a:	c7 04 24 c0 9c 02 c0 	mov    DWORD PTR [esp],0xc0029cc0
c000e791:	e8 5d 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e796:	e8 95 af 00 00       	call   c0019730 <Krnl::startCPUs()>
c000e79b:	c7 04 24 da 9c 02 c0 	mov    DWORD PTR [esp],0xc0029cda
c000e7a2:	e8 4c 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e7a7:	5a                   	pop    edx
c000e7a8:	8b 1d 68 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d668
c000e7ae:	59                   	pop    ecx
c000e7af:	6a 01                	push   0x1
c000e7b1:	68 eb 9c 02 c0       	push   0xc0029ceb
c000e7b6:	e8 e0 e6 00 00       	call   c001ce9b <Thr::loadDLL(char const*, bool)>
c000e7bb:	5a                   	pop    edx
c000e7bc:	59                   	pop    ecx
c000e7bd:	53                   	push   ebx
c000e7be:	50                   	push   eax
c000e7bf:	e8 02 e9 00 00       	call   c001d0c6 <Thr::executeDLL(unsigned long, void*)>
c000e7c4:	83 c4 10             	add    esp,0x10
c000e7c7:	83 ec 0c             	sub    esp,0xc
c000e7ca:	6a 02                	push   0x2
c000e7cc:	e8 60 f2 00 00       	call   c001da31 <blockTask(TaskState)>
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	eb f1                	jmp    c000e7c7 <Krnl::firstTask()+0x133>

c000e7d6 <Computer::Computer()>:
c000e7d6:	83 ec 0c             	sub    esp,0xc
c000e7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7dd:	83 ec 08             	sub    esp,0x8
c000e7e0:	68 07 9d 02 c0       	push   0xc0029d07
c000e7e5:	50                   	push   eax
c000e7e6:	e8 c3 53 00 00       	call   c0013bae <Device::Device(char const*)>
c000e7eb:	83 c4 10             	add    esp,0x10
c000e7ee:	ba dc 9d 02 c0       	mov    edx,0xc0029ddc
c000e7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f7:	89 10                	mov    DWORD PTR [eax],edx
c000e7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fd:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e819:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e81f:	83 ca 04             	or     edx,0x4
c000e822:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e832:	0f b6 d0             	movzx  edx,al
c000e835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e839:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e844:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84a:	0f b6 d0             	movzx  edx,al
c000e84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e851:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e860:	8d 50 01             	lea    edx,[eax+0x1]
c000e863:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e867:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e86d:	0f b6 d0             	movzx  edx,al
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e878:	83 e1 3f             	and    ecx,0x3f
c000e87b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e883:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e889:	0f b6 d0             	movzx  edx,al
c000e88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e890:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a1:	0f b6 d0             	movzx  edx,al
c000e8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a8:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e8ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8be:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c4:	0f b6 d0             	movzx  edx,al
c000e8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8cf:	83 e1 3f             	and    ecx,0x3f
c000e8d2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8e0:	0f b6 d0             	movzx  edx,al
c000e8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e7:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8f8:	0f b6 d0             	movzx  edx,al
c000e8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ff:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e908:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e90e:	8d 50 01             	lea    edx,[eax+0x1]
c000e911:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e915:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e91b:	0f b6 d0             	movzx  edx,al
c000e91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e922:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e926:	83 e1 3f             	and    ecx,0x3f
c000e929:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e92d:	90                   	nop
c000e92e:	83 c4 0c             	add    esp,0xc
c000e931:	c3                   	ret    

c000e932 <Computer::setBootMessage(char const*)>:
c000e932:	c3                   	ret    
c000e933:	90                   	nop

c000e934 <Computer::detectFeatures()>:
c000e934:	55                   	push   ebp
c000e935:	57                   	push   edi
c000e936:	56                   	push   esi
c000e937:	53                   	push   ebx
c000e938:	83 ec 1c             	sub    esp,0x1c
c000e93b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e93f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e949:	e8 96 19 ff ff       	call   c00002e4 <detectCPUID>
c000e94e:	85 c0                	test   eax,eax
c000e950:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e956:	0f 95 c2             	setne  dl
c000e959:	83 e0 fd             	and    eax,0xfffffffd
c000e95c:	d1 e2                	shl    edx,1
c000e95e:	09 d0                	or     eax,edx
c000e960:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e966:	a8 02                	test   al,0x2
c000e968:	75 46                	jne    c000e9b0 <Computer::detectFeatures()+0x7c>
c000e96a:	f6 05 81 d6 02 c0 04 	test   BYTE PTR ds:0xc002d681,0x4
c000e971:	74 07                	je     c000e97a <Computer::detectFeatures()+0x46>
c000e973:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e97a:	e8 e7 78 01 00       	call   c0026266 <x87Detect>
c000e97f:	83 e0 01             	and    eax,0x1
c000e982:	c1 e0 04             	shl    eax,0x4
c000e985:	88 c2                	mov    dl,al
c000e987:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e98d:	83 e0 ef             	and    eax,0xffffffef
c000e990:	09 d0                	or     eax,edx
c000e992:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e998:	a8 10                	test   al,0x10
c000e99a:	0f 85 2a 01 00 00    	jne    c000eaca <Computer::detectFeatures()+0x196>
c000e9a0:	84 c0                	test   al,al
c000e9a2:	0f 88 45 01 00 00    	js     c000eaed <Computer::detectFeatures()+0x1b9>
c000e9a8:	83 c4 1c             	add    esp,0x1c
c000e9ab:	5b                   	pop    ebx
c000e9ac:	5e                   	pop    esi
c000e9ad:	5f                   	pop    edi
c000e9ae:	5d                   	pop    ebp
c000e9af:	c3                   	ret    
c000e9b0:	83 ec 0c             	sub    esp,0xc
c000e9b3:	6a 20                	push   0x20
c000e9b5:	e8 08 9d 00 00       	call   c00186c2 <CPU::cpuidCheckEDX(unsigned int)>
c000e9ba:	83 e0 01             	and    eax,0x1
c000e9bd:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9c4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9ca:	83 e0 f7             	and    eax,0xfffffff7
c000e9cd:	09 d0                	or     eax,edx
c000e9cf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d5:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9dc:	e8 e1 9c 00 00       	call   c00186c2 <CPU::cpuidCheckEDX(unsigned int)>
c000e9e1:	83 e0 01             	and    eax,0x1
c000e9e4:	88 c2                	mov    dl,al
c000e9e6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9ec:	83 e0 fe             	and    eax,0xfffffffe
c000e9ef:	09 d0                	or     eax,edx
c000e9f1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9f7:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9fe:	e8 bf 9c 00 00       	call   c00186c2 <CPU::cpuidCheckEDX(unsigned int)>
c000ea03:	c1 e0 07             	shl    eax,0x7
c000ea06:	88 c2                	mov    dl,al
c000ea08:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea0e:	83 e0 7f             	and    eax,0x7f
c000ea11:	09 d0                	or     eax,edx
c000ea13:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea19:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea20:	e8 9d 9c 00 00       	call   c00186c2 <CPU::cpuidCheckEDX(unsigned int)>
c000ea25:	83 c4 10             	add    esp,0x10
c000ea28:	83 e0 01             	and    eax,0x1
c000ea2b:	c1 e0 05             	shl    eax,0x5
c000ea2e:	88 c2                	mov    dl,al
c000ea30:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea36:	83 e0 df             	and    eax,0xffffffdf
c000ea39:	09 d0                	or     eax,edx
c000ea3b:	f7 05 80 d6 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002d680,0x401
c000ea45:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea4b:	0f 84 c2 00 00 00    	je     c000eb13 <Computer::detectFeatures()+0x1df>
c000ea51:	83 e0 fe             	and    eax,0xfffffffe
c000ea54:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea5a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea60:	88 c2                	mov    dl,al
c000ea62:	83 e2 09             	and    edx,0x9
c000ea65:	fe ca                	dec    dl
c000ea67:	75 09                	jne    c000ea72 <Computer::detectFeatures()+0x13e>
c000ea69:	83 e0 fe             	and    eax,0xfffffffe
c000ea6c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea72:	83 ec 0c             	sub    esp,0xc
c000ea75:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea79:	50                   	push   eax
c000ea7a:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea7e:	55                   	push   ebp
c000ea7f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea83:	57                   	push   edi
c000ea84:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea88:	56                   	push   esi
c000ea89:	68 00 00 00 80       	push   0x80000000
c000ea8e:	e8 ab 9b 00 00       	call   c001863e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea93:	83 c4 20             	add    esp,0x20
c000ea96:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eaa1:	0f 86 c3 fe ff ff    	jbe    c000e96a <Computer::detectFeatures()+0x36>
c000eaa7:	83 ec 0c             	sub    esp,0xc
c000eaaa:	50                   	push   eax
c000eaab:	55                   	push   ebp
c000eaac:	57                   	push   edi
c000eaad:	56                   	push   esi
c000eaae:	68 01 00 00 80       	push   0x80000001
c000eab3:	e8 86 9b 00 00       	call   c001863e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eab8:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eac2:	83 c4 20             	add    esp,0x20
c000eac5:	e9 a0 fe ff ff       	jmp    c000e96a <Computer::detectFeatures()+0x36>
c000eaca:	e8 51 77 01 00       	call   c0026220 <absolutelyNoChanceInHell>
c000eacf:	88 c2                	mov    dl,al
c000ead1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ead7:	c1 e2 07             	shl    edx,0x7
c000eada:	83 e0 7f             	and    eax,0x7f
c000eadd:	09 d0                	or     eax,edx
c000eadf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae5:	84 c0                	test   al,al
c000eae7:	0f 89 bb fe ff ff    	jns    c000e9a8 <Computer::detectFeatures()+0x74>
c000eaed:	e8 0e 77 01 00       	call   c0026200 <avxDetect>
c000eaf2:	83 e0 01             	and    eax,0x1
c000eaf5:	c1 e0 05             	shl    eax,0x5
c000eaf8:	88 c2                	mov    dl,al
c000eafa:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb00:	83 e0 df             	and    eax,0xffffffdf
c000eb03:	09 d0                	or     eax,edx
c000eb05:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb0b:	83 c4 1c             	add    esp,0x1c
c000eb0e:	5b                   	pop    ebx
c000eb0f:	5e                   	pop    esi
c000eb10:	5f                   	pop    edi
c000eb11:	5d                   	pop    ebp
c000eb12:	c3                   	ret    
c000eb13:	83 ec 0c             	sub    esp,0xc
c000eb16:	68 00 02 00 00       	push   0x200
c000eb1b:	e8 a2 9b 00 00       	call   c00186c2 <CPU::cpuidCheckEDX(unsigned int)>
c000eb20:	83 c4 10             	add    esp,0x10
c000eb23:	83 e0 01             	and    eax,0x1
c000eb26:	88 c2                	mov    dl,al
c000eb28:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb2e:	83 e0 fe             	and    eax,0xfffffffe
c000eb31:	09 d0                	or     eax,edx
c000eb33:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb39:	e9 1c ff ff ff       	jmp    c000ea5a <Computer::detectFeatures()+0x126>

c000eb3e <Computer::displayFeatures()>:
c000eb3e:	c3                   	ret    
c000eb3f:	90                   	nop

c000eb40 <Computer::rdmsr(unsigned int)>:
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb47:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb4e:	74 0a                	je     c000eb5a <Computer::rdmsr(unsigned int)+0x1a>
c000eb50:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb54:	0f 32                	rdmsr  
c000eb56:	83 c4 0c             	add    esp,0xc
c000eb59:	c3                   	ret    
c000eb5a:	83 ec 0c             	sub    esp,0xc
c000eb5d:	68 10 9d 02 c0       	push   0xc0029d10
c000eb62:	e8 6a b1 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	eb e4                	jmp    c000eb50 <Computer::rdmsr(unsigned int)+0x10>

c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eb6c:	57                   	push   edi
c000eb6d:	56                   	push   esi
c000eb6e:	52                   	push   edx
c000eb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb73:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eb77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eb7b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb82:	74 0e                	je     c000eb92 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eb84:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb88:	89 f0                	mov    eax,esi
c000eb8a:	89 fa                	mov    edx,edi
c000eb8c:	0f 30                	wrmsr  
c000eb8e:	58                   	pop    eax
c000eb8f:	5e                   	pop    esi
c000eb90:	5f                   	pop    edi
c000eb91:	c3                   	ret    
c000eb92:	83 ec 0c             	sub    esp,0xc
c000eb95:	68 16 9d 02 c0       	push   0xc0029d16
c000eb9a:	e8 32 b1 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c000eb9f:	83 c4 10             	add    esp,0x10
c000eba2:	eb e0                	jmp    c000eb84 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eba4 <Computer::nmiEnabled()>:
c000eba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eba8:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ebae:	c3                   	ret    
c000ebaf:	90                   	nop

c000ebb0 <Computer::readCMOS(unsigned char)>:
c000ebb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebb4:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ebbb:	19 c0                	sbb    eax,eax
c000ebbd:	83 e0 80             	and    eax,0xffffff80
c000ebc0:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ebc4:	e6 70                	out    0x70,al
c000ebc6:	e4 71                	in     al,0x71
c000ebc8:	c3                   	ret    
c000ebc9:	90                   	nop

c000ebca <Computer::enableNMI(bool)>:
c000ebca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ebce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebd2:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ebd8:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ebe0:	eb ce                	jmp    c000ebb0 <Computer::readCMOS(unsigned char)>

c000ebe2 <Computer::open(int, int, void*)>:
c000ebe2:	56                   	push   esi
c000ebe3:	53                   	push   ebx
c000ebe4:	83 ec 10             	sub    esp,0x10
c000ebe7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ebeb:	68 b0 9d 02 c0       	push   0xc0029db0
c000ebf0:	e8 fe 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ebf5:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ebfc:	f6 05 80 d6 02 c0 04 	test   BYTE PTR ds:0xc002d680,0x4
c000ec03:	0f 94 05 a0 c5 02 c0 	sete   BYTE PTR ds:0xc002c5a0
c000ec0a:	e8 8a 09 00 00       	call   c000f599 <malloc>
c000ec0f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec12:	89 c6                	mov    esi,eax
c000ec14:	e8 1d 8d 00 00       	call   c0017936 <ACPI::ACPI()>
c000ec19:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec1f:	58                   	pop    eax
c000ec20:	5a                   	pop    edx
c000ec21:	56                   	push   esi
c000ec22:	53                   	push   ebx
c000ec23:	e8 82 4d 00 00       	call   c00139aa <Device::addChild(Device*)>
c000ec28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec2b:	e8 04 fd ff ff       	call   c000e934 <Computer::detectFeatures()>
c000ec30:	59                   	pop    ecx
c000ec31:	5e                   	pop    esi
c000ec32:	6a 01                	push   0x1
c000ec34:	53                   	push   ebx
c000ec35:	e8 90 ff ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ec3a:	c7 04 24 c0 9c 02 c0 	mov    DWORD PTR [esp],0xc0029cc0
c000ec41:	e8 ad 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ec46:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ec4d:	e8 47 09 00 00       	call   c000f599 <malloc>
c000ec52:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec55:	89 c6                	mov    esi,eax
c000ec57:	e8 1e 9b 00 00       	call   c001877a <CPU::CPU()>
c000ec5c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ec62:	58                   	pop    eax
c000ec63:	5a                   	pop    edx
c000ec64:	56                   	push   esi
c000ec65:	53                   	push   ebx
c000ec66:	e8 3f 4d 00 00       	call   c00139aa <Device::addChild(Device*)>
c000ec6b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ec71:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec77:	6a 00                	push   0x0
c000ec79:	6a 00                	push   0x0
c000ec7b:	50                   	push   eax
c000ec7c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ec7f:	83 c4 20             	add    esp,0x20
c000ec82:	e8 bb 52 00 00       	call   c0013f42 <setupFPU()>
c000ec87:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ec8d:	85 c0                	test   eax,eax
c000ec8f:	74 1f                	je     c000ecb0 <Computer::open(int, int, void*)+0xce>
c000ec91:	83 ec 08             	sub    esp,0x8
c000ec94:	50                   	push   eax
c000ec95:	53                   	push   ebx
c000ec96:	e8 0f 4d 00 00       	call   c00139aa <Device::addChild(Device*)>
c000ec9b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000eca1:	8b 10                	mov    edx,DWORD PTR [eax]
c000eca3:	6a 00                	push   0x0
c000eca5:	6a 00                	push   0x0
c000eca7:	6a 00                	push   0x0
c000eca9:	50                   	push   eax
c000ecaa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecad:	83 c4 20             	add    esp,0x20
c000ecb0:	83 ec 0c             	sub    esp,0xc
c000ecb3:	68 1c 9d 02 c0       	push   0xc0029d1c
c000ecb8:	e8 36 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ecbd:	c7 04 24 94 e6 00 c0 	mov    DWORD PTR [esp],0xc000e694
c000ecc4:	e8 8f ea 00 00       	call   c001d758 <setupMultitasking(void (*)())>
c000ecc9:	83 c4 14             	add    esp,0x14
c000eccc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecd1:	5b                   	pop    ebx
c000ecd2:	5e                   	pop    esi
c000ecd3:	c3                   	ret    

c000ecd4 <Computer::disableNMI()>:
c000ecd4:	6a 00                	push   0x0
c000ecd6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ecda:	e8 eb fe ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ecdf:	58                   	pop    eax
c000ece0:	5a                   	pop    edx
c000ece1:	c3                   	ret    

c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ece2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ece6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eced:	19 c0                	sbb    eax,eax
c000ecef:	83 e0 80             	and    eax,0xffffff80
c000ecf2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ecf6:	e6 70                	out    0x70,al
c000ecf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecfc:	e6 71                	out    0x71,al
c000ecfe:	c3                   	ret    
c000ecff:	90                   	nop

c000ed00 <Computer::handleNMI()>:
c000ed00:	56                   	push   esi
c000ed01:	53                   	push   ebx
c000ed02:	83 ec 10             	sub    esp,0x10
c000ed05:	e4 92                	in     al,0x92
c000ed07:	89 c6                	mov    esi,eax
c000ed09:	e4 61                	in     al,0x61
c000ed0b:	68 37 9d 02 c0       	push   0xc0029d37
c000ed10:	88 c3                	mov    bl,al
c000ed12:	e8 5a 38 00 00       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c000ed17:	83 c4 10             	add    esp,0x10
c000ed1a:	83 e6 10             	and    esi,0x10
c000ed1d:	75 0d                	jne    c000ed2c <Computer::handleNMI()+0x2c>
c000ed1f:	f6 c3 40             	test   bl,0x40
c000ed22:	75 1d                	jne    c000ed41 <Computer::handleNMI()+0x41>
c000ed24:	84 db                	test   bl,bl
c000ed26:	78 2d                	js     c000ed55 <Computer::handleNMI()+0x55>
c000ed28:	58                   	pop    eax
c000ed29:	5b                   	pop    ebx
c000ed2a:	5e                   	pop    esi
c000ed2b:	c3                   	ret    
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	68 48 9d 02 c0       	push   0xc0029d48
c000ed34:	e8 98 af 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c000ed39:	83 c4 10             	add    esp,0x10
c000ed3c:	f6 c3 40             	test   bl,0x40
c000ed3f:	74 e3                	je     c000ed24 <Computer::handleNMI()+0x24>
c000ed41:	83 ec 0c             	sub    esp,0xc
c000ed44:	68 55 9d 02 c0       	push   0xc0029d55
c000ed49:	e8 83 af 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c000ed4e:	83 c4 10             	add    esp,0x10
c000ed51:	84 db                	test   bl,bl
c000ed53:	79 d3                	jns    c000ed28 <Computer::handleNMI()+0x28>
c000ed55:	c7 44 24 10 5f 9d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029d5f
c000ed5d:	5a                   	pop    edx
c000ed5e:	5b                   	pop    ebx
c000ed5f:	5e                   	pop    esi
c000ed60:	e9 6c af 00 00       	jmp    c0019cd1 <Krnl::panic(char const*)>
c000ed65:	90                   	nop

c000ed66 <Computer::setDiskActivityLight(int, bool)>:
c000ed66:	56                   	push   esi
c000ed67:	53                   	push   ebx
c000ed68:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ed6c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ed71:	77 1b                	ja     c000ed8e <Computer::setDiskActivityLight(int, bool)+0x28>
c000ed73:	e4 92                	in     al,0x92
c000ed75:	bb 40 00 00 00       	mov    ebx,0x40
c000ed7a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ed7e:	89 da                	mov    edx,ebx
c000ed80:	d3 e2                	shl    edx,cl
c000ed82:	89 f1                	mov    ecx,esi
c000ed84:	f7 d2                	not    edx
c000ed86:	d3 e3                	shl    ebx,cl
c000ed88:	21 d0                	and    eax,edx
c000ed8a:	09 d8                	or     eax,ebx
c000ed8c:	e6 92                	out    0x92,al
c000ed8e:	5b                   	pop    ebx
c000ed8f:	5e                   	pop    esi
c000ed90:	c3                   	ret    
c000ed91:	90                   	nop

c000ed92 <GDTEntry::setBase(unsigned int)>:
c000ed92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ed9a:	89 c1                	mov    ecx,eax
c000ed9c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000eda0:	c1 e9 10             	shr    ecx,0x10
c000eda3:	c1 e8 18             	shr    eax,0x18
c000eda6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000eda9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000edac:	c3                   	ret    
c000edad:	90                   	nop

c000edae <GDTEntry::setLimit(unsigned int)>:
c000edae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000edb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edb6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000edb9:	66 89 01             	mov    WORD PTR [ecx],ax
c000edbc:	83 e2 f0             	and    edx,0xfffffff0
c000edbf:	c1 e8 10             	shr    eax,0x10
c000edc2:	83 e0 0f             	and    eax,0xf
c000edc5:	09 d0                	or     eax,edx
c000edc7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000edca:	c3                   	ret    
c000edcb:	90                   	nop

c000edcc <GDT::GDT()>:
c000edcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000edd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ede0:	90                   	nop
c000ede1:	c3                   	ret    

c000ede2 <GDT::addEntry(GDTEntry)>:
c000ede2:	53                   	push   ebx
c000ede3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ede7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edeb:	8b 02                	mov    eax,DWORD PTR [edx]
c000eded:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000edf1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000edf5:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000edf9:	8d 48 01             	lea    ecx,[eax+0x1]
c000edfc:	c1 e0 03             	shl    eax,0x3
c000edff:	89 0a                	mov    DWORD PTR [edx],ecx
c000ee01:	5b                   	pop    ebx
c000ee02:	c3                   	ret    
c000ee03:	90                   	nop

c000ee04 <GDT::getNumberOfEntries()>:
c000ee04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee08:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee0a:	c3                   	ret    
c000ee0b:	90                   	nop

c000ee0c <GDT::flush()>:
c000ee0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee10:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee12:	83 c0 04             	add    eax,0x4
c000ee15:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ee1c:	a3 72 d6 02 c0       	mov    ds:0xc002d672,eax
c000ee21:	66 89 15 70 d6 02 c0 	mov    WORD PTR ds:0xc002d670,dx
c000ee28:	e9 23 16 ff ff       	jmp    c0000450 <loadGDT>
c000ee2d:	90                   	nop

c000ee2e <GDT::setup()>:
c000ee2e:	55                   	push   ebp
c000ee2f:	57                   	push   edi
c000ee30:	56                   	push   esi
c000ee31:	53                   	push   ebx
c000ee32:	83 ec 3c             	sub    esp,0x3c
c000ee35:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ee39:	6a 00                	push   0x0
c000ee3b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ee3f:	53                   	push   ebx
c000ee40:	e8 4d ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee45:	6a 00                	push   0x0
c000ee47:	53                   	push   ebx
c000ee48:	e8 61 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee4d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ee55:	6a 00                	push   0x0
c000ee57:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ee5b:	53                   	push   ebx
c000ee5c:	e8 31 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee61:	68 ff ff ff 00       	push   0xffffff
c000ee66:	53                   	push   ebx
c000ee67:	e8 42 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee6c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee70:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ee75:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ee7a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ee7e:	83 c4 20             	add    esp,0x20
c000ee81:	6a 00                	push   0x0
c000ee83:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ee87:	53                   	push   ebx
c000ee88:	e8 05 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee8d:	68 ff ff ff 00       	push   0xffffff
c000ee92:	53                   	push   ebx
c000ee93:	e8 16 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee98:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee9c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eea0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000eea4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000eea8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eeac:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eeb1:	0d 00 92 c0 00       	or     eax,0xc09200
c000eeb6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eeba:	89 d8                	mov    eax,ebx
c000eebc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eec0:	80 cc 60             	or     ah,0x60
c000eec3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eec7:	83 c4 0c             	add    esp,0xc
c000eeca:	89 f8                	mov    eax,edi
c000eecc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed0:	80 cc 60             	or     ah,0x60
c000eed3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed7:	89 c7                	mov    edi,eax
c000eed9:	55                   	push   ebp
c000eeda:	e8 03 ff ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eedf:	83 c4 0c             	add    esp,0xc
c000eee2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eee6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eeea:	55                   	push   ebp
c000eeeb:	e8 f2 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eef0:	83 c4 0c             	add    esp,0xc
c000eef3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eef7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eefb:	55                   	push   ebp
c000eefc:	e8 e1 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef01:	83 c4 0c             	add    esp,0xc
c000ef04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef0c:	53                   	push   ebx
c000ef0d:	51                   	push   ecx
c000ef0e:	55                   	push   ebp
c000ef0f:	e8 ce fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef14:	83 c4 0c             	add    esp,0xc
c000ef17:	57                   	push   edi
c000ef18:	56                   	push   esi
c000ef19:	55                   	push   ebp
c000ef1a:	e8 c3 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef1f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ef22:	e8 e5 fe ff ff       	call   c000ee0c <GDT::flush()>
c000ef27:	83 c4 4c             	add    esp,0x4c
c000ef2a:	5b                   	pop    ebx
c000ef2b:	5e                   	pop    esi
c000ef2c:	5f                   	pop    edi
c000ef2d:	5d                   	pop    ebp
c000ef2e:	c3                   	ret    

c000ef2f <idleFunction(void*)>:
c000ef2f:	53                   	push   ebx
c000ef30:	83 ec 08             	sub    esp,0x8
c000ef33:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c000ef38:	48                   	dec    eax
c000ef39:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c000ef3e:	75 01                	jne    c000ef41 <idleFunction(void*)+0x12>
c000ef40:	fb                   	sti    
c000ef41:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c000ef46:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ef4c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ef53:	74 3c                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef55:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ef5c:	74 33                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef5e:	31 db                	xor    ebx,ebx
c000ef60:	52                   	push   edx
c000ef61:	52                   	push   edx
c000ef62:	68 e1 00 00 00       	push   0xe1
c000ef67:	50                   	push   eax
c000ef68:	e8 d3 fb ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c000ef6d:	53                   	push   ebx
c000ef6e:	83 e0 02             	and    eax,0x2
c000ef71:	50                   	push   eax
c000ef72:	68 e1 00 00 00       	push   0xe1
c000ef77:	ff 35 68 d6 02 c0    	push   DWORD PTR ds:0xc002d668
c000ef7d:	e8 ea fb ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c000ef82:	83 c4 20             	add    esp,0x20
c000ef85:	e8 f5 12 ff ff       	call   c000027f <doTPAUSE>
c000ef8a:	e8 21 93 01 00       	call   c00282b0 <idleCommon()>
c000ef8f:	eb f4                	jmp    c000ef85 <idleFunction(void*)+0x56>
c000ef91:	fb                   	sti    
c000ef92:	f4                   	hlt    
c000ef93:	e8 18 93 01 00       	call   c00282b0 <idleCommon()>
c000ef98:	eb f7                	jmp    c000ef91 <idleFunction(void*)+0x62>

c000ef9a <IDTEntry::IDTEntry(bool)>:
c000ef9a:	83 ec 04             	sub    esp,0x4
c000ef9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efa1:	88 04 24             	mov    BYTE PTR [esp],al
c000efa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efa8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000efae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efb2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000efb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efbd:	83 e2 f0             	and    edx,0xfffffff0
c000efc0:	83 ca 0e             	or     edx,0xe
c000efc3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efca:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efcd:	83 e2 ef             	and    edx,0xffffffef
c000efd0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efd3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000efd7:	74 04                	je     c000efdd <IDTEntry::IDTEntry(bool)+0x43>
c000efd9:	b2 03                	mov    dl,0x3
c000efdb:	eb 02                	jmp    c000efdf <IDTEntry::IDTEntry(bool)+0x45>
c000efdd:	b2 00                	mov    dl,0x0
c000efdf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efe3:	83 e2 03             	and    edx,0x3
c000efe6:	88 d1                	mov    cl,dl
c000efe8:	c1 e1 05             	shl    ecx,0x5
c000efeb:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efee:	83 e2 9f             	and    edx,0xffffff9f
c000eff1:	09 ca                	or     edx,ecx
c000eff3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000effa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000effd:	83 ca 80             	or     edx,0xffffff80
c000f000:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f003:	90                   	nop
c000f004:	83 c4 04             	add    esp,0x4
c000f007:	c3                   	ret    

c000f008 <IDTEntry::setOffset(unsigned int)>:
c000f008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f00c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f010:	66 89 02             	mov    WORD PTR [edx],ax
c000f013:	c1 e8 10             	shr    eax,0x10
c000f016:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f01a:	c3                   	ret    
c000f01b:	90                   	nop

c000f01c <IDT::IDT()>:
c000f01c:	90                   	nop
c000f01d:	c3                   	ret    

c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f01e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f022:	83 c0 30             	add    eax,0x30
c000f025:	c3                   	ret    

c000f026 <IDT::addEntry(IDTEntry, int)>:
c000f026:	53                   	push   ebx
c000f027:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f02f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f033:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f037:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f03a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f03e:	5b                   	pop    ebx
c000f03f:	c3                   	ret    

c000f040 <IDT::addEntry(int, void (*)(), bool)>:
c000f040:	53                   	push   ebx
c000f041:	83 ec 10             	sub    esp,0x10
c000f044:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f049:	50                   	push   eax
c000f04a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f04e:	53                   	push   ebx
c000f04f:	e8 46 ff ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f054:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f058:	53                   	push   ebx
c000f059:	e8 aa ff ff ff       	call   c000f008 <IDTEntry::setOffset(unsigned int)>
c000f05e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f062:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f066:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f06a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f06e:	e8 b3 ff ff ff       	call   c000f026 <IDT::addEntry(IDTEntry, int)>
c000f073:	83 c4 30             	add    esp,0x30
c000f076:	5b                   	pop    ebx
c000f077:	c3                   	ret    

c000f078 <IDT::flush()>:
c000f078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f07c:	66 c7 05 78 d6 02 c0 ff 07 	mov    WORD PTR ds:0xc002d678,0x7ff
c000f085:	a3 7a d6 02 c0       	mov    ds:0xc002d67a,eax
c000f08a:	0f 01 1d 78 d6 02 c0 	lidtd  ds:0xc002d678
c000f091:	c3                   	ret    

c000f092 <IDT::setup()>:
c000f092:	57                   	push   edi
c000f093:	56                   	push   esi
c000f094:	53                   	push   ebx
c000f095:	83 ec 10             	sub    esp,0x10
c000f098:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f09c:	6a 00                	push   0x0
c000f09e:	68 70 04 00 c0       	push   0xc0000470
c000f0a3:	6a 00                	push   0x0
c000f0a5:	53                   	push   ebx
c000f0a6:	e8 95 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ab:	6a 00                	push   0x0
c000f0ad:	68 80 04 00 c0       	push   0xc0000480
c000f0b2:	6a 01                	push   0x1
c000f0b4:	53                   	push   ebx
c000f0b5:	e8 86 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ba:	83 c4 20             	add    esp,0x20
c000f0bd:	6a 00                	push   0x0
c000f0bf:	68 8a 04 00 c0       	push   0xc000048a
c000f0c4:	6a 02                	push   0x2
c000f0c6:	53                   	push   ebx
c000f0c7:	e8 74 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0cc:	6a 00                	push   0x0
c000f0ce:	68 94 04 00 c0       	push   0xc0000494
c000f0d3:	6a 03                	push   0x3
c000f0d5:	53                   	push   ebx
c000f0d6:	e8 65 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0db:	83 c4 20             	add    esp,0x20
c000f0de:	6a 00                	push   0x0
c000f0e0:	68 9e 04 00 c0       	push   0xc000049e
c000f0e5:	6a 04                	push   0x4
c000f0e7:	53                   	push   ebx
c000f0e8:	e8 53 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ed:	6a 00                	push   0x0
c000f0ef:	68 a8 04 00 c0       	push   0xc00004a8
c000f0f4:	6a 05                	push   0x5
c000f0f6:	53                   	push   ebx
c000f0f7:	e8 44 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0fc:	83 c4 20             	add    esp,0x20
c000f0ff:	6a 00                	push   0x0
c000f101:	68 b2 04 00 c0       	push   0xc00004b2
c000f106:	6a 06                	push   0x6
c000f108:	53                   	push   ebx
c000f109:	e8 32 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f10e:	6a 00                	push   0x0
c000f110:	68 bc 04 00 c0       	push   0xc00004bc
c000f115:	6a 07                	push   0x7
c000f117:	53                   	push   ebx
c000f118:	e8 23 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f11d:	83 c4 20             	add    esp,0x20
c000f120:	6a 00                	push   0x0
c000f122:	68 c6 04 00 c0       	push   0xc00004c6
c000f127:	6a 08                	push   0x8
c000f129:	53                   	push   ebx
c000f12a:	e8 11 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f12f:	6a 00                	push   0x0
c000f131:	68 ce 04 00 c0       	push   0xc00004ce
c000f136:	6a 09                	push   0x9
c000f138:	53                   	push   ebx
c000f139:	e8 02 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f13e:	83 c4 20             	add    esp,0x20
c000f141:	6a 00                	push   0x0
c000f143:	68 d8 04 00 c0       	push   0xc00004d8
c000f148:	6a 0a                	push   0xa
c000f14a:	53                   	push   ebx
c000f14b:	e8 f0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f150:	6a 00                	push   0x0
c000f152:	68 e0 04 00 c0       	push   0xc00004e0
c000f157:	6a 0b                	push   0xb
c000f159:	53                   	push   ebx
c000f15a:	e8 e1 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f15f:	83 c4 20             	add    esp,0x20
c000f162:	6a 00                	push   0x0
c000f164:	68 e8 04 00 c0       	push   0xc00004e8
c000f169:	6a 0c                	push   0xc
c000f16b:	53                   	push   ebx
c000f16c:	e8 cf fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f171:	6a 00                	push   0x0
c000f173:	68 f0 04 00 c0       	push   0xc00004f0
c000f178:	6a 0d                	push   0xd
c000f17a:	53                   	push   ebx
c000f17b:	e8 c0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f180:	83 c4 20             	add    esp,0x20
c000f183:	6a 00                	push   0x0
c000f185:	68 f8 04 00 c0       	push   0xc00004f8
c000f18a:	6a 0e                	push   0xe
c000f18c:	53                   	push   ebx
c000f18d:	e8 ae fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f192:	6a 00                	push   0x0
c000f194:	68 00 05 00 c0       	push   0xc0000500
c000f199:	6a 0f                	push   0xf
c000f19b:	53                   	push   ebx
c000f19c:	e8 9f fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1a1:	83 c4 20             	add    esp,0x20
c000f1a4:	6a 00                	push   0x0
c000f1a6:	68 0a 05 00 c0       	push   0xc000050a
c000f1ab:	6a 10                	push   0x10
c000f1ad:	53                   	push   ebx
c000f1ae:	e8 8d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1b3:	6a 00                	push   0x0
c000f1b5:	68 14 05 00 c0       	push   0xc0000514
c000f1ba:	6a 11                	push   0x11
c000f1bc:	53                   	push   ebx
c000f1bd:	e8 7e fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1c2:	83 c4 20             	add    esp,0x20
c000f1c5:	6a 00                	push   0x0
c000f1c7:	68 1e 05 00 c0       	push   0xc000051e
c000f1cc:	6a 12                	push   0x12
c000f1ce:	53                   	push   ebx
c000f1cf:	e8 6c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1d4:	6a 01                	push   0x1
c000f1d6:	68 b8 05 00 c0       	push   0xc00005b8
c000f1db:	6a 60                	push   0x60
c000f1dd:	53                   	push   ebx
c000f1de:	e8 5d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1e3:	83 c4 20             	add    esp,0x20
c000f1e6:	6a 00                	push   0x0
c000f1e8:	68 bf 05 00 c0       	push   0xc00005bf
c000f1ed:	6a 20                	push   0x20
c000f1ef:	53                   	push   ebx
c000f1f0:	e8 4b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1f5:	6a 00                	push   0x0
c000f1f7:	68 aa 05 00 c0       	push   0xc00005aa
c000f1fc:	6a 21                	push   0x21
c000f1fe:	53                   	push   ebx
c000f1ff:	e8 3c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f204:	83 c4 20             	add    esp,0x20
c000f207:	6a 00                	push   0x0
c000f209:	68 b1 05 00 c0       	push   0xc00005b1
c000f20e:	6a 22                	push   0x22
c000f210:	53                   	push   ebx
c000f211:	e8 2a fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f216:	6a 00                	push   0x0
c000f218:	68 28 05 00 c0       	push   0xc0000528
c000f21d:	6a 23                	push   0x23
c000f21f:	53                   	push   ebx
c000f220:	e8 1b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f225:	83 c4 20             	add    esp,0x20
c000f228:	6a 00                	push   0x0
c000f22a:	68 32 05 00 c0       	push   0xc0000532
c000f22f:	6a 24                	push   0x24
c000f231:	53                   	push   ebx
c000f232:	e8 09 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f237:	6a 00                	push   0x0
c000f239:	68 3c 05 00 c0       	push   0xc000053c
c000f23e:	6a 25                	push   0x25
c000f240:	53                   	push   ebx
c000f241:	e8 fa fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f246:	83 c4 20             	add    esp,0x20
c000f249:	6a 00                	push   0x0
c000f24b:	68 46 05 00 c0       	push   0xc0000546
c000f250:	6a 26                	push   0x26
c000f252:	53                   	push   ebx
c000f253:	e8 e8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f258:	6a 00                	push   0x0
c000f25a:	68 50 05 00 c0       	push   0xc0000550
c000f25f:	6a 27                	push   0x27
c000f261:	53                   	push   ebx
c000f262:	e8 d9 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f267:	83 c4 20             	add    esp,0x20
c000f26a:	6a 00                	push   0x0
c000f26c:	68 5a 05 00 c0       	push   0xc000055a
c000f271:	6a 28                	push   0x28
c000f273:	53                   	push   ebx
c000f274:	e8 c7 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f279:	6a 00                	push   0x0
c000f27b:	68 64 05 00 c0       	push   0xc0000564
c000f280:	6a 29                	push   0x29
c000f282:	53                   	push   ebx
c000f283:	e8 b8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f288:	83 c4 20             	add    esp,0x20
c000f28b:	6a 00                	push   0x0
c000f28d:	68 6e 05 00 c0       	push   0xc000056e
c000f292:	6a 2a                	push   0x2a
c000f294:	53                   	push   ebx
c000f295:	e8 a6 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f29a:	6a 00                	push   0x0
c000f29c:	68 78 05 00 c0       	push   0xc0000578
c000f2a1:	6a 2b                	push   0x2b
c000f2a3:	53                   	push   ebx
c000f2a4:	e8 97 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2a9:	83 c4 20             	add    esp,0x20
c000f2ac:	6a 00                	push   0x0
c000f2ae:	68 82 05 00 c0       	push   0xc0000582
c000f2b3:	6a 2c                	push   0x2c
c000f2b5:	53                   	push   ebx
c000f2b6:	e8 85 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2bb:	6a 00                	push   0x0
c000f2bd:	68 8c 05 00 c0       	push   0xc000058c
c000f2c2:	6a 2d                	push   0x2d
c000f2c4:	53                   	push   ebx
c000f2c5:	e8 76 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2ca:	83 c4 20             	add    esp,0x20
c000f2cd:	6a 00                	push   0x0
c000f2cf:	68 96 05 00 c0       	push   0xc0000596
c000f2d4:	6a 2e                	push   0x2e
c000f2d6:	53                   	push   ebx
c000f2d7:	e8 64 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2dc:	6a 00                	push   0x0
c000f2de:	68 a0 05 00 c0       	push   0xc00005a0
c000f2e3:	6a 2f                	push   0x2f
c000f2e5:	53                   	push   ebx
c000f2e6:	e8 55 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2eb:	83 c4 20             	add    esp,0x20
c000f2ee:	6a 00                	push   0x0
c000f2f0:	68 f6 05 00 c0       	push   0xc00005f6
c000f2f5:	6a 30                	push   0x30
c000f2f7:	53                   	push   ebx
c000f2f8:	e8 43 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2fd:	6a 00                	push   0x0
c000f2ff:	68 00 06 00 c0       	push   0xc0000600
c000f304:	6a 31                	push   0x31
c000f306:	53                   	push   ebx
c000f307:	e8 34 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f30c:	83 c4 20             	add    esp,0x20
c000f30f:	6a 00                	push   0x0
c000f311:	68 0a 06 00 c0       	push   0xc000060a
c000f316:	6a 32                	push   0x32
c000f318:	53                   	push   ebx
c000f319:	e8 22 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f31e:	6a 00                	push   0x0
c000f320:	68 14 06 00 c0       	push   0xc0000614
c000f325:	6a 33                	push   0x33
c000f327:	53                   	push   ebx
c000f328:	e8 13 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f32d:	83 c4 20             	add    esp,0x20
c000f330:	6a 00                	push   0x0
c000f332:	68 1e 06 00 c0       	push   0xc000061e
c000f337:	6a 34                	push   0x34
c000f339:	53                   	push   ebx
c000f33a:	e8 01 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f33f:	6a 00                	push   0x0
c000f341:	68 28 06 00 c0       	push   0xc0000628
c000f346:	6a 35                	push   0x35
c000f348:	53                   	push   ebx
c000f349:	e8 f2 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f34e:	83 c4 20             	add    esp,0x20
c000f351:	6a 00                	push   0x0
c000f353:	68 32 06 00 c0       	push   0xc0000632
c000f358:	6a 36                	push   0x36
c000f35a:	53                   	push   ebx
c000f35b:	e8 e0 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f360:	6a 00                	push   0x0
c000f362:	68 3c 06 00 c0       	push   0xc000063c
c000f367:	6a 37                	push   0x37
c000f369:	53                   	push   ebx
c000f36a:	e8 d1 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f36f:	83 c4 1c             	add    esp,0x1c
c000f372:	6a 03                	push   0x3
c000f374:	6a 02                	push   0x2
c000f376:	ff 35 d0 d7 02 c0    	push   DWORD PTR ds:0xc002d7d0
c000f37c:	e8 db 26 00 00       	call   c0011a5c <VAS::allocatePages(int, int)>
c000f381:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f388:	89 c6                	mov    esi,eax
c000f38a:	e8 0a 02 00 00       	call   c000f599 <malloc>
c000f38f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f395:	89 04 24             	mov    DWORD PTR [esp],eax
c000f398:	89 c7                	mov    edi,eax
c000f39a:	e8 45 17 00 00       	call   c0010ae4 <TSS::TSS()>
c000f39f:	83 c4 0c             	add    esp,0xc
c000f3a2:	68 c6 04 00 c0       	push   0xc00004c6
c000f3a7:	56                   	push   esi
c000f3a8:	57                   	push   edi
c000f3a9:	e8 76 17 00 00       	call   c0010b24 <TSS::setup(unsigned long, unsigned long)>
c000f3ae:	89 c6                	mov    esi,eax
c000f3b0:	58                   	pop    eax
c000f3b1:	5a                   	pop    edx
c000f3b2:	6a 00                	push   0x0
c000f3b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f3b8:	50                   	push   eax
c000f3b9:	e8 dc fb ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f3be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3c2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f3c7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f3ce:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f3d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3d8:	80 ce 05             	or     dh,0x5
c000f3db:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f3de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f3e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3e6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f3e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3ec:	e8 87 fc ff ff       	call   c000f078 <IDT::flush()>
c000f3f1:	83 c4 20             	add    esp,0x20
c000f3f4:	5b                   	pop    ebx
c000f3f5:	5e                   	pop    esi
c000f3f6:	5f                   	pop    edi
c000f3f7:	c3                   	ret    

c000f3f8 <sbrk>:
c000f3f8:	55                   	push   ebp
c000f3f9:	57                   	push   edi
c000f3fa:	56                   	push   esi
c000f3fb:	53                   	push   ebx
c000f3fc:	83 ec 1c             	sub    esp,0x1c
c000f3ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f403:	85 c0                	test   eax,eax
c000f405:	74 3e                	je     c000f445 <sbrk+0x4d>
c000f407:	78 43                	js     c000f44c <sbrk+0x54>
c000f409:	8b 15 68 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d668
c000f40f:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f415:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f41b:	83 e2 01             	and    edx,0x1
c000f41e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f422:	8b 0d 34 c4 02 c0    	mov    ecx,DWORD PTR ds:0xc002c434
c000f428:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f42c:	05 ff 0f 00 00       	add    eax,0xfff
c000f431:	89 c2                	mov    edx,eax
c000f433:	78 2f                	js     c000f464 <sbrk+0x6c>
c000f435:	c1 fa 0c             	sar    edx,0xc
c000f438:	89 d7                	mov    edi,edx
c000f43a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f43e:	be 00 00 00 00       	mov    esi,0x0
c000f443:	eb 36                	jmp    c000f47b <sbrk+0x83>
c000f445:	a1 34 c4 02 c0       	mov    eax,ds:0xc002c434
c000f44a:	eb 73                	jmp    c000f4bf <sbrk+0xc7>
c000f44c:	83 ec 08             	sub    esp,0x8
c000f44f:	50                   	push   eax
c000f450:	68 00 9e 02 c0       	push   0xc0029e00
c000f455:	e8 17 31 00 00       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c000f45a:	83 c4 10             	add    esp,0x10
c000f45d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f462:	eb 5b                	jmp    c000f4bf <sbrk+0xc7>
c000f464:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f46a:	eb c9                	jmp    c000f435 <sbrk+0x3d>
c000f46c:	81 05 34 c4 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002c434,0x1000
c000f476:	46                   	inc    esi
c000f477:	39 f7                	cmp    edi,esi
c000f479:	74 33                	je     c000f4ae <sbrk+0xb6>
c000f47b:	8b 1d d0 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d7d0
c000f481:	8b 2d 34 c4 02 c0    	mov    ebp,DWORD PTR ds:0xc002c434
c000f487:	e8 b1 04 00 00       	call   c000f93d <Phys::allocatePage()>
c000f48c:	68 01 04 00 00       	push   0x401
c000f491:	55                   	push   ebp
c000f492:	50                   	push   eax
c000f493:	53                   	push   ebx
c000f494:	e8 c1 24 00 00       	call   c001195a <VAS::mapPage(unsigned long, unsigned long, int)>
c000f499:	83 c4 10             	add    esp,0x10
c000f49c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4a1:	74 c9                	je     c000f46c <sbrk+0x74>
c000f4a3:	8b 1d 34 c4 02 c0    	mov    ebx,DWORD PTR ds:0xc002c434
c000f4a9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4ac:	eb be                	jmp    c000f46c <sbrk+0x74>
c000f4ae:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4b3:	75 12                	jne    c000f4c7 <sbrk+0xcf>
c000f4b5:	0f 20 d8             	mov    eax,cr3
c000f4b8:	0f 22 d8             	mov    cr3,eax
c000f4bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f4bf:	83 c4 1c             	add    esp,0x1c
c000f4c2:	5b                   	pop    ebx
c000f4c3:	5e                   	pop    esi
c000f4c4:	5f                   	pop    edi
c000f4c5:	5d                   	pop    ebp
c000f4c6:	c3                   	ret    
c000f4c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f4cb:	89 cb                	mov    ebx,ecx
c000f4cd:	c1 eb 0a             	shr    ebx,0xa
c000f4d0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f4d6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f4dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4e0:	c1 e0 0c             	shl    eax,0xc
c000f4e3:	01 c8                	add    eax,ecx
c000f4e5:	c1 e8 0a             	shr    eax,0xa
c000f4e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f4ed:	2d 00 00 40 00       	sub    eax,0x400000
c000f4f2:	39 c3                	cmp    ebx,eax
c000f4f4:	77 c5                	ja     c000f4bb <sbrk+0xc3>
c000f4f6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4f9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f4ff:	39 d8                	cmp    eax,ebx
c000f501:	73 f3                	jae    c000f4f6 <sbrk+0xfe>
c000f503:	eb b6                	jmp    c000f4bb <sbrk+0xc3>

c000f505 <mmap>:
c000f505:	83 ec 18             	sub    esp,0x18
c000f508:	68 30 9e 02 c0       	push   0xc0029e30
c000f50d:	e8 bf a7 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c000f512:	b8 00 00 00 00       	mov    eax,0x0
c000f517:	83 c4 1c             	add    esp,0x1c
c000f51a:	c3                   	ret    

c000f51b <munmap>:
c000f51b:	83 ec 18             	sub    esp,0x18
c000f51e:	68 35 9e 02 c0       	push   0xc0029e35
c000f523:	e8 a9 a7 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c000f528:	b8 00 00 00 00       	mov    eax,0x0
c000f52d:	83 c4 1c             	add    esp,0x1c
c000f530:	c3                   	ret    

c000f531 <liballoc_lock()>:
c000f531:	fa                   	cli    
c000f532:	ff 05 88 0b 03 c0    	inc    DWORD PTR ds:0xc0030b88
c000f538:	b8 00 00 00 00       	mov    eax,0x0
c000f53d:	c3                   	ret    

c000f53e <liballoc_unlock()>:
c000f53e:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c000f543:	48                   	dec    eax
c000f544:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c000f549:	75 01                	jne    c000f54c <liballoc_unlock()+0xe>
c000f54b:	fb                   	sti    
c000f54c:	b8 00 00 00 00       	mov    eax,0x0
c000f551:	c3                   	ret    

c000f552 <liballoc_alloc(int)>:
c000f552:	83 ec 10             	sub    esp,0x10
c000f555:	6a 01                	push   0x1
c000f557:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f55b:	ff 35 d0 d7 02 c0    	push   DWORD PTR ds:0xc002d7d0
c000f561:	e8 f6 24 00 00       	call   c0011a5c <VAS::allocatePages(int, int)>
c000f566:	83 c4 1c             	add    esp,0x1c
c000f569:	c3                   	ret    

c000f56a <liballoc_free(void*, int)>:
c000f56a:	83 ec 14             	sub    esp,0x14
c000f56d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f571:	ff 35 d0 d7 02 c0    	push   DWORD PTR ds:0xc002d7d0
c000f577:	e8 8a 21 00 00       	call   c0011706 <VAS::freeAllocatedPages(unsigned long)>
c000f57c:	b8 00 00 00 00       	mov    eax,0x0
c000f581:	83 c4 1c             	add    esp,0x1c
c000f584:	c3                   	ret    

c000f585 <realloc>:
c000f585:	83 ec 14             	sub    esp,0x14
c000f588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f58c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f590:	e8 97 20 ff ff       	call   c000162c <dlrealloc>
c000f595:	83 c4 1c             	add    esp,0x1c
c000f598:	c3                   	ret    

c000f599 <malloc>:
c000f599:	83 ec 18             	sub    esp,0x18
c000f59c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5a0:	e8 4a 1b ff ff       	call   c00010ef <dlmalloc>
c000f5a5:	83 c4 1c             	add    esp,0x1c
c000f5a8:	c3                   	ret    

c000f5a9 <free>:
c000f5a9:	83 ec 18             	sub    esp,0x18
c000f5ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5b0:	e8 df 17 ff ff       	call   c0000d94 <dlfree>
c000f5b5:	83 c4 1c             	add    esp,0x1c
c000f5b8:	c3                   	ret    

c000f5b9 <rfree>:
c000f5b9:	83 ec 18             	sub    esp,0x18
c000f5bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5c0:	e8 cf 17 ff ff       	call   c0000d94 <dlfree>
c000f5c5:	83 c4 1c             	add    esp,0x1c
c000f5c8:	c3                   	ret    

c000f5c9 <calloc>:
c000f5c9:	56                   	push   esi
c000f5ca:	53                   	push   ebx
c000f5cb:	83 ec 10             	sub    esp,0x10
c000f5ce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f5d2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 bc ff ff ff       	call   c000f599 <malloc>
c000f5dd:	89 c6                	mov    esi,eax
c000f5df:	83 c4 0c             	add    esp,0xc
c000f5e2:	53                   	push   ebx
c000f5e3:	6a 00                	push   0x0
c000f5e5:	50                   	push   eax
c000f5e6:	e8 65 11 ff ff       	call   c0000750 <memset>
c000f5eb:	89 f0                	mov    eax,esi
c000f5ed:	83 c4 14             	add    esp,0x14
c000f5f0:	5b                   	pop    ebx
c000f5f1:	5e                   	pop    esi
c000f5f2:	c3                   	ret    

c000f5f3 <Krnl::setBootMessage(char const*)>:
c000f5f3:	57                   	push   edi
c000f5f4:	56                   	push   esi
c000f5f5:	53                   	push   ebx
c000f5f6:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f5fc:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f603:	68 9e 00 00 00       	push   0x9e
c000f608:	6a 00                	push   0x0
c000f60a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f60e:	56                   	push   esi
c000f60f:	e8 3c 11 ff ff       	call   c0000750 <memset>
c000f614:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f617:	e8 50 11 ff ff       	call   c000076c <strlen>
c000f61c:	ba 50 00 00 00       	mov    edx,0x50
c000f621:	83 c4 10             	add    esp,0x10
c000f624:	29 c2                	sub    edx,eax
c000f626:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f62a:	d1 ea                	shr    edx,1
c000f62c:	84 c0                	test   al,al
c000f62e:	74 19                	je     c000f649 <Krnl::setBootMessage(char const*)+0x56>
c000f630:	01 d2                	add    edx,edx
c000f632:	43                   	inc    ebx
c000f633:	01 f2                	add    edx,esi
c000f635:	80 cc 0f             	or     ah,0xf
c000f638:	83 c2 02             	add    edx,0x2
c000f63b:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f63f:	43                   	inc    ebx
c000f640:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000f645:	84 c0                	test   al,al
c000f647:	75 ec                	jne    c000f635 <Krnl::setBootMessage(char const*)+0x42>
c000f649:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000f64e:	b9 9e 00 00 00       	mov    ecx,0x9e
c000f653:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f655:	81 c4 a0 00 00 00    	add    esp,0xa0
c000f65b:	5b                   	pop    ebx
c000f65c:	5e                   	pop    esi
c000f65d:	5f                   	pop    edi
c000f65e:	c3                   	ret    

c000f65f <kernel_main>:
c000f65f:	57                   	push   edi
c000f660:	bf f9 03 00 00       	mov    edi,0x3f9
c000f665:	56                   	push   esi
c000f666:	89 fa                	mov    edx,edi
c000f668:	53                   	push   ebx
c000f669:	31 f6                	xor    esi,esi
c000f66b:	83 ec 2c             	sub    esp,0x2c
c000f66e:	89 f0                	mov    eax,esi
c000f670:	ee                   	out    dx,al
c000f671:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f676:	b0 80                	mov    al,0x80
c000f678:	89 da                	mov    edx,ebx
c000f67a:	ee                   	out    dx,al
c000f67b:	b1 03                	mov    cl,0x3
c000f67d:	ba f8 03 00 00       	mov    edx,0x3f8
c000f682:	88 c8                	mov    al,cl
c000f684:	ee                   	out    dx,al
c000f685:	89 f0                	mov    eax,esi
c000f687:	89 fa                	mov    edx,edi
c000f689:	ee                   	out    dx,al
c000f68a:	88 c8                	mov    al,cl
c000f68c:	89 da                	mov    edx,ebx
c000f68e:	ee                   	out    dx,al
c000f68f:	b0 c7                	mov    al,0xc7
c000f691:	ba fa 03 00 00       	mov    edx,0x3fa
c000f696:	ee                   	out    dx,al
c000f697:	b0 0b                	mov    al,0xb
c000f699:	ba fc 03 00 00       	mov    edx,0x3fc
c000f69e:	ee                   	out    dx,al
c000f69f:	68 3c 9e 02 c0       	push   0xc0029e3c
c000f6a4:	e8 c8 2e 00 00       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c000f6a9:	e8 38 09 00 00       	call   c000ffe6 <installVgaTextImplementation()>
c000f6ae:	0f b6 05 40 c4 02 c0 	movzx  eax,BYTE PTR ds:0xc002c440
c000f6b5:	83 c4 10             	add    esp,0x10
c000f6b8:	84 c0                	test   al,al
c000f6ba:	74 6c                	je     c000f728 <kernel_main+0xc9>
c000f6bc:	31 db                	xor    ebx,ebx
c000f6be:	bf 0a 00 00 00       	mov    edi,0xa
c000f6c3:	be 05 00 00 00       	mov    esi,0x5
c000f6c8:	31 c9                	xor    ecx,ecx
c000f6ca:	eb 2a                	jmp    c000f6f6 <kernel_main+0x97>
c000f6cc:	3c 0d                	cmp    al,0xd
c000f6ce:	74 1a                	je     c000f6ea <kernel_main+0x8b>
c000f6d0:	3c 0a                	cmp    al,0xa
c000f6d2:	74 40                	je     c000f714 <kernel_main+0xb5>
c000f6d4:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f6d7:	80 cc 0e             	or     ah,0xe
c000f6da:	c1 e2 04             	shl    edx,0x4
c000f6dd:	01 ca                	add    edx,ecx
c000f6df:	41                   	inc    ecx
c000f6e0:	01 fa                	add    edx,edi
c000f6e2:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f6ea:	43                   	inc    ebx
c000f6eb:	0f b6 83 40 c4 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3bc0]
c000f6f2:	84 c0                	test   al,al
c000f6f4:	74 32                	je     c000f728 <kernel_main+0xc9>
c000f6f6:	80 b9 76 c4 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd3b8a],0xdb
c000f6fd:	75 cd                	jne    c000f6cc <kernel_main+0x6d>
c000f6ff:	0f b6 91 75 c4 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd3b8b]
c000f706:	83 e2 fe             	and    edx,0xfffffffe
c000f709:	81 fa ba 00 00 00    	cmp    edx,0xba
c000f70f:	75 bb                	jne    c000f6cc <kernel_main+0x6d>
c000f711:	47                   	inc    edi
c000f712:	eb b8                	jmp    c000f6cc <kernel_main+0x6d>
c000f714:	43                   	inc    ebx
c000f715:	46                   	inc    esi
c000f716:	31 c9                	xor    ecx,ecx
c000f718:	0f b6 83 40 c4 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3bc0]
c000f71f:	bf 0a 00 00 00       	mov    edi,0xa
c000f724:	84 c0                	test   al,al
c000f726:	75 ce                	jne    c000f6f6 <kernel_main+0x97>
c000f728:	83 ec 0c             	sub    esp,0xc
c000f72b:	68 54 9e 02 c0       	push   0xc0029e54
c000f730:	e8 be fe ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000f735:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f73a:	a3 80 d6 02 c0       	mov    ds:0xc002d680,eax
c000f73f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f744:	05 ff 0f 00 00       	add    eax,0xfff
c000f749:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f74e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f751:	e8 24 03 00 00       	call   c000fa7a <Phys::physicalMemorySetup(unsigned int)>
c000f756:	e8 01 1c 00 00       	call   c001135c <Virt::virtualMemorySetup()>
c000f75b:	58                   	pop    eax
c000f75c:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f760:	53                   	push   ebx
c000f761:	e8 c8 1d 00 00       	call   c001152e <VAS::VAS()>
c000f766:	89 1d d0 d7 02 c0    	mov    DWORD PTR ds:0xc002d7d0,ebx
c000f76c:	e8 af 08 ff ff       	call   c0000020 <callGlobalConstructors>
c000f771:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f778:	e8 1c fe ff ff       	call   c000f599 <malloc>
c000f77d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f780:	89 c6                	mov    esi,eax
c000f782:	e8 4f f0 ff ff       	call   c000e7d6 <Computer::Computer()>
c000f787:	6a 00                	push   0x0
c000f789:	89 35 68 d6 02 c0    	mov    DWORD PTR ds:0xc002d668,esi
c000f78f:	6a 00                	push   0x0
c000f791:	6a 00                	push   0x0
c000f793:	56                   	push   esi
c000f794:	e8 49 f4 ff ff       	call   c000ebe2 <Computer::open(int, int, void*)>
c000f799:	83 c4 14             	add    esp,0x14
c000f79c:	53                   	push   ebx
c000f79d:	e8 3c 20 00 00       	call   c00117de <VAS::~VAS()>
c000f7a2:	83 c4 30             	add    esp,0x30
c000f7a5:	5b                   	pop    ebx
c000f7a6:	5e                   	pop    esi
c000f7a7:	5f                   	pop    edi
c000f7a8:	c3                   	ret    

c000f7a9 <Phys::allocateDMA(unsigned long)>:
c000f7a9:	55                   	push   ebp
c000f7aa:	31 d2                	xor    edx,edx
c000f7ac:	57                   	push   edi
c000f7ad:	31 ed                	xor    ebp,ebp
c000f7af:	56                   	push   esi
c000f7b0:	31 c9                	xor    ecx,ecx
c000f7b2:	53                   	push   ebx
c000f7b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f7b7:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f7bd:	31 c0                	xor    eax,eax
c000f7bf:	c1 ee 0c             	shr    esi,0xc
c000f7c2:	eb 17                	jmp    c000f7db <Phys::allocateDMA(unsigned long)+0x32>
c000f7c4:	85 c9                	test   ecx,ecx
c000f7c6:	75 04                	jne    c000f7cc <Phys::allocateDMA(unsigned long)+0x23>
c000f7c8:	89 d5                	mov    ebp,edx
c000f7ca:	89 d0                	mov    eax,edx
c000f7cc:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f7cf:	39 de                	cmp    esi,ebx
c000f7d1:	74 20                	je     c000f7f3 <Phys::allocateDMA(unsigned long)+0x4a>
c000f7d3:	42                   	inc    edx
c000f7d4:	89 d9                	mov    ecx,ebx
c000f7d6:	83 fa 2f             	cmp    edx,0x2f
c000f7d9:	7f 11                	jg     c000f7ec <Phys::allocateDMA(unsigned long)+0x43>
c000f7db:	80 ba c0 d6 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd2940],0x0
c000f7e2:	74 e0                	je     c000f7c4 <Phys::allocateDMA(unsigned long)+0x1b>
c000f7e4:	31 c9                	xor    ecx,ecx
c000f7e6:	42                   	inc    edx
c000f7e7:	83 fa 2f             	cmp    edx,0x2f
c000f7ea:	7e ef                	jle    c000f7db <Phys::allocateDMA(unsigned long)+0x32>
c000f7ec:	5b                   	pop    ebx
c000f7ed:	31 c0                	xor    eax,eax
c000f7ef:	5e                   	pop    esi
c000f7f0:	5f                   	pop    edi
c000f7f1:	5d                   	pop    ebp
c000f7f2:	c3                   	ret    
c000f7f3:	8d 14 30             	lea    edx,[eax+esi*1]
c000f7f6:	89 d7                	mov    edi,edx
c000f7f8:	4f                   	dec    edi
c000f7f9:	79 03                	jns    c000f7fe <Phys::allocateDMA(unsigned long)+0x55>
c000f7fb:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f7fe:	c1 ff 04             	sar    edi,0x4
c000f801:	89 c2                	mov    edx,eax
c000f803:	c1 fa 04             	sar    edx,0x4
c000f806:	39 fa                	cmp    edx,edi
c000f808:	75 2f                	jne    c000f839 <Phys::allocateDMA(unsigned long)+0x90>
c000f80a:	85 db                	test   ebx,ebx
c000f80c:	74 1a                	je     c000f828 <Phys::allocateDMA(unsigned long)+0x7f>
c000f80e:	be c0 d6 02 c0       	mov    esi,0xc002d6c0
c000f813:	8d 90 c0 d6 02 c0    	lea    edx,[eax-0x3ffd2940]
c000f819:	f7 d6                	not    esi
c000f81b:	29 c6                	sub    esi,eax
c000f81d:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f820:	42                   	inc    edx
c000f821:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f824:	39 d9                	cmp    ecx,ebx
c000f826:	7f f5                	jg     c000f81d <Phys::allocateDMA(unsigned long)+0x74>
c000f828:	85 ff                	test   edi,edi
c000f82a:	74 13                	je     c000f83f <Phys::allocateDMA(unsigned long)+0x96>
c000f82c:	5b                   	pop    ebx
c000f82d:	05 50 20 0c 00       	add    eax,0xc2050
c000f832:	5e                   	pop    esi
c000f833:	c1 e0 0c             	shl    eax,0xc
c000f836:	5f                   	pop    edi
c000f837:	5d                   	pop    ebp
c000f838:	c3                   	ret    
c000f839:	89 ea                	mov    edx,ebp
c000f83b:	31 c9                	xor    ecx,ecx
c000f83d:	eb a7                	jmp    c000f7e6 <Phys::allocateDMA(unsigned long)+0x3d>
c000f83f:	5b                   	pop    ebx
c000f840:	c1 e0 0c             	shl    eax,0xc
c000f843:	5e                   	pop    esi
c000f844:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f849:	5f                   	pop    edi
c000f84a:	5d                   	pop    ebp
c000f84b:	c3                   	ret    

c000f84c <Phys::freeDMA(unsigned long, unsigned long)>:
c000f84c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f850:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f854:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f85a:	c1 e9 0c             	shr    ecx,0xc
c000f85d:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f862:	76 25                	jbe    c000f889 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f864:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f869:	c1 e8 0c             	shr    eax,0xc
c000f86c:	8d 50 10             	lea    edx,[eax+0x10]
c000f86f:	85 c9                	test   ecx,ecx
c000f871:	74 15                	je     c000f888 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f873:	8d 82 c0 d6 02 c0    	lea    eax,[edx-0x3ffd2940]
c000f879:	8d 94 11 c0 d6 02 c0 	lea    edx,[ecx+edx*1-0x3ffd2940]
c000f880:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f883:	40                   	inc    eax
c000f884:	39 d0                	cmp    eax,edx
c000f886:	75 f8                	jne    c000f880 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f888:	c3                   	ret    
c000f889:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f88f:	c1 ea 0c             	shr    edx,0xc
c000f892:	eb db                	jmp    c000f86f <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f894 <Phys::setPageState(unsigned long, bool)>:
c000f894:	56                   	push   esi
c000f895:	ba 01 00 00 00       	mov    edx,0x1
c000f89a:	53                   	push   ebx
c000f89b:	8b 35 84 c5 02 c0    	mov    esi,DWORD PTR ds:0xc002c584
c000f8a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8a5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f8a9:	89 c8                	mov    eax,ecx
c000f8ab:	83 e1 07             	and    ecx,0x7
c000f8ae:	c1 e8 03             	shr    eax,0x3
c000f8b1:	d3 e3                	shl    ebx,cl
c000f8b3:	01 c6                	add    esi,eax
c000f8b5:	d3 e2                	shl    edx,cl
c000f8b7:	f7 d2                	not    edx
c000f8b9:	20 16                	and    BYTE PTR [esi],dl
c000f8bb:	03 05 84 c5 02 c0    	add    eax,DWORD PTR ds:0xc002c584
c000f8c1:	08 18                	or     BYTE PTR [eax],bl
c000f8c3:	5b                   	pop    ebx
c000f8c4:	5e                   	pop    esi
c000f8c5:	c3                   	ret    

c000f8c6 <Phys::getPageState(unsigned long)>:
c000f8c6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f8ca:	8b 15 84 c5 02 c0    	mov    edx,DWORD PTR ds:0xc002c584
c000f8d0:	89 c8                	mov    eax,ecx
c000f8d2:	83 e1 07             	and    ecx,0x7
c000f8d5:	c1 e8 03             	shr    eax,0x3
c000f8d8:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f8dc:	d3 f8                	sar    eax,cl
c000f8de:	83 e0 01             	and    eax,0x1
c000f8e1:	c3                   	ret    

c000f8e2 <Phys::freePage(unsigned long)>:
c000f8e2:	53                   	push   ebx
c000f8e3:	83 ec 08             	sub    esp,0x8
c000f8e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8ea:	3d ff ff 07 00       	cmp    eax,0x7ffff
c000f8ef:	76 3a                	jbe    c000f92b <Phys::freePage(unsigned long)+0x49>
c000f8f1:	c1 e8 0c             	shr    eax,0xc
c000f8f4:	50                   	push   eax
c000f8f5:	89 c3                	mov    ebx,eax
c000f8f7:	e8 ca ff ff ff       	call   c000f8c6 <Phys::getPageState(unsigned long)>
c000f8fc:	5a                   	pop    edx
c000f8fd:	84 c0                	test   al,al
c000f8ff:	74 19                	je     c000f91a <Phys::freePage(unsigned long)+0x38>
c000f901:	83 ec 08             	sub    esp,0x8
c000f904:	ff 0d b0 d6 02 c0    	dec    DWORD PTR ds:0xc002d6b0
c000f90a:	6a 00                	push   0x0
c000f90c:	53                   	push   ebx
c000f90d:	e8 82 ff ff ff       	call   c000f894 <Phys::setPageState(unsigned long, bool)>
c000f912:	83 c4 10             	add    esp,0x10
c000f915:	83 c4 08             	add    esp,0x8
c000f918:	5b                   	pop    ebx
c000f919:	c3                   	ret    
c000f91a:	c7 44 24 10 73 9e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029e73
c000f922:	83 c4 08             	add    esp,0x8
c000f925:	5b                   	pop    ebx
c000f926:	e9 a6 a3 00 00       	jmp    c0019cd1 <Krnl::panic(char const*)>
c000f92b:	68 00 10 00 00       	push   0x1000
c000f930:	50                   	push   eax
c000f931:	e8 16 ff ff ff       	call   c000f84c <Phys::freeDMA(unsigned long, unsigned long)>
c000f936:	59                   	pop    ecx
c000f937:	5b                   	pop    ebx
c000f938:	83 c4 08             	add    esp,0x8
c000f93b:	5b                   	pop    ebx
c000f93c:	c3                   	ret    

c000f93d <Phys::allocatePage()>:
c000f93d:	56                   	push   esi
c000f93e:	53                   	push   ebx
c000f93f:	51                   	push   ecx
c000f940:	8b 35 a4 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d6a4
c000f946:	89 f3                	mov    ebx,esi
c000f948:	eb 0a                	jmp    c000f954 <Phys::allocatePage()+0x17>
c000f94a:	89 1d a4 d6 02 c0    	mov    DWORD PTR ds:0xc002d6a4,ebx
c000f950:	39 de                	cmp    esi,ebx
c000f952:	74 24                	je     c000f978 <Phys::allocatePage()+0x3b>
c000f954:	53                   	push   ebx
c000f955:	e8 6c ff ff ff       	call   c000f8c6 <Phys::getPageState(unsigned long)>
c000f95a:	5a                   	pop    edx
c000f95b:	84 c0                	test   al,al
c000f95d:	74 6b                	je     c000f9ca <Phys::allocatePage()+0x8d>
c000f95f:	43                   	inc    ebx
c000f960:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f966:	75 e2                	jne    c000f94a <Phys::allocatePage()+0xd>
c000f968:	31 db                	xor    ebx,ebx
c000f96a:	c7 05 a4 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a4,0x0
c000f974:	39 de                	cmp    esi,ebx
c000f976:	75 dc                	jne    c000f954 <Phys::allocatePage()+0x17>
c000f978:	83 ec 0c             	sub    esp,0xc
c000f97b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f980:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f983:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000f989:	e8 20 29 00 00       	call   c00122ae <VAS::scanForEviction()>
c000f98e:	83 c4 10             	add    esp,0x10
c000f991:	85 c0                	test   eax,eax
c000f993:	75 4d                	jne    c000f9e2 <Phys::allocatePage()+0xa5>
c000f995:	83 ec 0c             	sub    esp,0xc
c000f998:	68 00 10 00 00       	push   0x1000
c000f99d:	e8 07 fe ff ff       	call   c000f7a9 <Phys::allocateDMA(unsigned long)>
c000f9a2:	83 c4 10             	add    esp,0x10
c000f9a5:	85 c0                	test   eax,eax
c000f9a7:	75 39                	jne    c000f9e2 <Phys::allocatePage()+0xa5>
c000f9a9:	83 ec 0c             	sub    esp,0xc
c000f9ac:	68 89 9e 02 c0       	push   0xc0029e89
c000f9b1:	e8 1b a3 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c000f9b6:	83 c4 10             	add    esp,0x10
c000f9b9:	8b 1d a4 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6a4
c000f9bf:	53                   	push   ebx
c000f9c0:	e8 01 ff ff ff       	call   c000f8c6 <Phys::getPageState(unsigned long)>
c000f9c5:	5a                   	pop    edx
c000f9c6:	84 c0                	test   al,al
c000f9c8:	75 95                	jne    c000f95f <Phys::allocatePage()+0x22>
c000f9ca:	6a 01                	push   0x1
c000f9cc:	53                   	push   ebx
c000f9cd:	e8 c2 fe ff ff       	call   c000f894 <Phys::setPageState(unsigned long, bool)>
c000f9d2:	a1 a4 d6 02 c0       	mov    eax,ds:0xc002d6a4
c000f9d7:	59                   	pop    ecx
c000f9d8:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c000f9de:	c1 e0 0c             	shl    eax,0xc
c000f9e1:	5b                   	pop    ebx
c000f9e2:	5a                   	pop    edx
c000f9e3:	5b                   	pop    ebx
c000f9e4:	5e                   	pop    esi
c000f9e5:	c3                   	ret    

c000f9e6 <Phys::allocateContiguousPages(int)>:
c000f9e6:	57                   	push   edi
c000f9e7:	56                   	push   esi
c000f9e8:	53                   	push   ebx
c000f9e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f9ed:	fa                   	cli    
c000f9ee:	ff 05 88 0b 03 c0    	inc    DWORD PTR ds:0xc0030b88
c000f9f4:	31 db                	xor    ebx,ebx
c000f9f6:	85 db                	test   ebx,ebx
c000f9f8:	75 11                	jne    c000fa0b <Phys::allocateContiguousPages(int)+0x25>
c000f9fa:	e8 3e ff ff ff       	call   c000f93d <Phys::allocatePage()>
c000f9ff:	83 fe 01             	cmp    esi,0x1
c000fa02:	89 c7                	mov    edi,eax
c000fa04:	74 21                	je     c000fa27 <Phys::allocateContiguousPages(int)+0x41>
c000fa06:	bb 01 00 00 00       	mov    ebx,0x1
c000fa0b:	e8 2d ff ff ff       	call   c000f93d <Phys::allocatePage()>
c000fa10:	89 da                	mov    edx,ebx
c000fa12:	c1 e2 0c             	shl    edx,0xc
c000fa15:	01 fa                	add    edx,edi
c000fa17:	39 c2                	cmp    edx,eax
c000fa19:	74 20                	je     c000fa3b <Phys::allocateContiguousPages(int)+0x55>
c000fa1b:	bb 01 00 00 00       	mov    ebx,0x1
c000fa20:	89 c7                	mov    edi,eax
c000fa22:	83 fe 01             	cmp    esi,0x1
c000fa25:	75 e4                	jne    c000fa0b <Phys::allocateContiguousPages(int)+0x25>
c000fa27:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c000fa2c:	48                   	dec    eax
c000fa2d:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c000fa32:	75 01                	jne    c000fa35 <Phys::allocateContiguousPages(int)+0x4f>
c000fa34:	fb                   	sti    
c000fa35:	89 f8                	mov    eax,edi
c000fa37:	5b                   	pop    ebx
c000fa38:	5e                   	pop    esi
c000fa39:	5f                   	pop    edi
c000fa3a:	c3                   	ret    
c000fa3b:	43                   	inc    ebx
c000fa3c:	39 f3                	cmp    ebx,esi
c000fa3e:	75 b6                	jne    c000f9f6 <Phys::allocateContiguousPages(int)+0x10>
c000fa40:	eb e5                	jmp    c000fa27 <Phys::allocateContiguousPages(int)+0x41>

c000fa42 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fa42:	56                   	push   esi
c000fa43:	53                   	push   ebx
c000fa44:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa48:	39 1d a8 d6 02 c0    	cmp    DWORD PTR ds:0xc002d6a8,ebx
c000fa4e:	73 06                	jae    c000fa56 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fa50:	89 1d a8 d6 02 c0    	mov    DWORD PTR ds:0xc002d6a8,ebx
c000fa56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa5a:	c1 eb 0c             	shr    ebx,0xc
c000fa5d:	c1 e8 0c             	shr    eax,0xc
c000fa60:	39 d8                	cmp    eax,ebx
c000fa62:	73 13                	jae    c000fa77 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fa64:	6a 00                	push   0x0
c000fa66:	8d 70 01             	lea    esi,[eax+0x1]
c000fa69:	50                   	push   eax
c000fa6a:	e8 25 fe ff ff       	call   c000f894 <Phys::setPageState(unsigned long, bool)>
c000fa6f:	5a                   	pop    edx
c000fa70:	89 f0                	mov    eax,esi
c000fa72:	59                   	pop    ecx
c000fa73:	39 f3                	cmp    ebx,esi
c000fa75:	75 ed                	jne    c000fa64 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fa77:	5b                   	pop    ebx
c000fa78:	5e                   	pop    esi
c000fa79:	c3                   	ret    

c000fa7a <Phys::physicalMemorySetup(unsigned int)>:
c000fa7a:	55                   	push   ebp
c000fa7b:	57                   	push   edi
c000fa7c:	56                   	push   esi
c000fa7d:	53                   	push   ebx
c000fa7e:	31 db                	xor    ebx,ebx
c000fa80:	83 ec 40             	sub    esp,0x40
c000fa83:	6a 30                	push   0x30
c000fa85:	6a 00                	push   0x0
c000fa87:	68 c0 d6 02 c0       	push   0xc002d6c0
c000fa8c:	e8 bf 0c ff ff       	call   c0000750 <memset>
c000fa91:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fa95:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fa9a:	05 00 10 00 00       	add    eax,0x1000
c000fa9f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000faa3:	5a                   	pop    edx
c000faa4:	59                   	pop    ecx
c000faa5:	50                   	push   eax
c000faa6:	68 97 9e 02 c0       	push   0xc0029e97
c000faab:	e8 c1 2a 00 00       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c000fab0:	83 c4 10             	add    esp,0x10
c000fab3:	83 ec 08             	sub    esp,0x8
c000fab6:	6a 01                	push   0x1
c000fab8:	53                   	push   ebx
c000fab9:	43                   	inc    ebx
c000faba:	e8 d5 fd ff ff       	call   c000f894 <Phys::setPageState(unsigned long, bool)>
c000fabf:	83 c4 10             	add    esp,0x10
c000fac2:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fac8:	75 e9                	jne    c000fab3 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000faca:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fad1:	66 85 c0             	test   ax,ax
c000fad4:	0f 84 b5 01 00 00    	je     c000fc8f <Phys::physicalMemorySetup(unsigned int)+0x215>
c000fada:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fade:	8b 15 04 06 00 c2    	mov    edx,DWORD PTR ds:0xc2000604
c000fae4:	a1 00 06 00 c2       	mov    eax,ds:0xc2000600
c000fae9:	8b 0d 08 06 00 c2    	mov    ecx,DWORD PTR ds:0xc2000608
c000faef:	8b 1d 0c 06 00 c2    	mov    ebx,DWORD PTR ds:0xc200060c
c000faf5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000faf9:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c000fafd:	01 c1                	add    ecx,eax
c000faff:	11 d3                	adc    ebx,edx
c000fb01:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000fb05:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000fb09:	31 ff                	xor    edi,edi
c000fb0b:	89 d3                	mov    ebx,edx
c000fb0d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000fb11:	8b 35 10 06 00 c2    	mov    esi,DWORD PTR ds:0xc2000610
c000fb17:	09 cb                	or     ebx,ecx
c000fb19:	0f 85 80 01 00 00    	jne    c000fc9f <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fb1f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000fb23:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fb2b:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fb30:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000fb34:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fb3c:	eb 49                	jmp    c000fb87 <Phys::physicalMemorySetup(unsigned int)+0x10d>
c000fb3e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000fb42:	83 c3 18             	add    ebx,0x18
c000fb45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb49:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fb4d:	39 d0                	cmp    eax,edx
c000fb4f:	0f 84 4a 01 00 00    	je     c000fc9f <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fb55:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000fb58:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c000fb5b:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000fb5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fb60:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fb64:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000fb68:	01 c6                	add    esi,eax
c000fb6a:	89 d5                	mov    ebp,edx
c000fb6c:	11 d7                	adc    edi,edx
c000fb6e:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000fb72:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c000fb76:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fb79:	31 ff                	xor    edi,edi
c000fb7b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000fb7f:	09 cd                	or     ebp,ecx
c000fb81:	0f 85 18 01 00 00    	jne    c000fc9f <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fb87:	89 f1                	mov    ecx,esi
c000fb89:	83 f1 01             	xor    ecx,0x1
c000fb8c:	09 f9                	or     ecx,edi
c000fb8e:	75 ae                	jne    c000fb3e <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fb90:	be 00 00 08 00       	mov    esi,0x80000
c000fb95:	89 cf                	mov    edi,ecx
c000fb97:	39 c6                	cmp    esi,eax
c000fb99:	19 d7                	sbb    edi,edx
c000fb9b:	0f 82 98 00 00 00    	jb     c000fc39 <Phys::physicalMemorySetup(unsigned int)+0x1bf>
c000fba1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000fba5:	89 cd                	mov    ebp,ecx
c000fba7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fbab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fbaf:	19 fd                	sbb    ebp,edi
c000fbb1:	0f 83 82 00 00 00    	jae    c000fc39 <Phys::physicalMemorySetup(unsigned int)+0x1bf>
c000fbb7:	b8 00 00 0a 00       	mov    eax,0xa0000
c000fbbc:	39 f0                	cmp    eax,esi
c000fbbe:	19 f9                	sbb    ecx,edi
c000fbc0:	0f 82 03 01 00 00    	jb     c000fcc9 <Phys::physicalMemorySetup(unsigned int)+0x24f>
c000fbc6:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fbcb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fbcf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fbd3:	81 c6 00 00 f8 ff    	add    esi,0xfff80000
c000fbd9:	83 d7 ff             	adc    edi,0xffffffff
c000fbdc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fbe0:	31 c0                	xor    eax,eax
c000fbe2:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000fbe6:	39 f2                	cmp    edx,esi
c000fbe8:	89 c2                	mov    edx,eax
c000fbea:	19 fa                	sbb    edx,edi
c000fbec:	0f 83 4c ff ff ff    	jae    c000fb3e <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fbf2:	b8 00 00 08 00       	mov    eax,0x80000
c000fbf7:	83 ec 08             	sub    esp,0x8
c000fbfa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fbfe:	50                   	push   eax
c000fbff:	e8 3e fe ff ff       	call   c000fa42 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fc04:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fc08:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc0c:	83 c4 0c             	add    esp,0xc
c000fc0f:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fc13:	03 05 b4 d6 02 c0    	add    eax,DWORD PTR ds:0xc002d6b4
c000fc19:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fc20:	a3 b4 d6 02 c0       	mov    ds:0xc002d6b4,eax
c000fc25:	52                   	push   edx
c000fc26:	50                   	push   eax
c000fc27:	68 bd 9e 02 c0       	push   0xc0029ebd
c000fc2c:	e8 40 29 00 00       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c000fc31:	83 c4 10             	add    esp,0x10
c000fc34:	e9 05 ff ff ff       	jmp    c000fb3e <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc39:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fc3d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fc41:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fc45:	39 ee                	cmp    esi,ebp
c000fc47:	1b 7c 24 2c          	sbb    edi,DWORD PTR [esp+0x2c]
c000fc4b:	0f 82 ed fe ff ff    	jb     c000fb3e <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc51:	be ff 1f 00 00       	mov    esi,0x1fff
c000fc56:	3b 74 24 18          	cmp    esi,DWORD PTR [esp+0x18]
c000fc5a:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000fc5e:	0f 83 da fe ff ff    	jae    c000fb3e <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc64:	39 e8                	cmp    eax,ebp
c000fc66:	89 d1                	mov    ecx,edx
c000fc68:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fc6c:	73 89                	jae    c000fbf7 <Phys::physicalMemorySetup(unsigned int)+0x17d>
c000fc6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc72:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000fc76:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fc7a:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fc7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fc82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fc86:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc8a:	e9 68 ff ff ff       	jmp    c000fbf7 <Phys::physicalMemorySetup(unsigned int)+0x17d>
c000fc8f:	83 ec 0c             	sub    esp,0xc
c000fc92:	68 af 9e 02 c0       	push   0xc0029eaf
c000fc97:	e8 35 a0 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c000fc9c:	83 c4 10             	add    esp,0x10
c000fc9f:	bb 40 01 00 00       	mov    ebx,0x140
c000fca4:	83 ec 08             	sub    esp,0x8
c000fca7:	6a 00                	push   0x0
c000fca9:	53                   	push   ebx
c000fcaa:	43                   	inc    ebx
c000fcab:	e8 e4 fb ff ff       	call   c000f894 <Phys::setPageState(unsigned long, bool)>
c000fcb0:	ff 05 b4 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b4
c000fcb6:	83 c4 10             	add    esp,0x10
c000fcb9:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fcbf:	75 e3                	jne    c000fca4 <Phys::physicalMemorySetup(unsigned int)+0x22a>
c000fcc1:	83 c4 3c             	add    esp,0x3c
c000fcc4:	5b                   	pop    ebx
c000fcc5:	5e                   	pop    esi
c000fcc6:	5f                   	pop    edi
c000fcc7:	5d                   	pop    ebp
c000fcc8:	c3                   	ret    
c000fcc9:	c7 44 24 10 00 00 0a 00 	mov    DWORD PTR [esp+0x10],0xa0000
c000fcd1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fcd9:	e9 e8 fe ff ff       	jmp    c000fbc6 <Phys::physicalMemorySetup(unsigned int)+0x14c>

c000fcde <Pipe::isAtty()>:
c000fcde:	31 c0                	xor    eax,eax
c000fce0:	c3                   	ret    
c000fce1:	90                   	nop

c000fce2 <Pipe::~Pipe()>:
c000fce2:	83 ec 0c             	sub    esp,0xc
c000fce5:	ba 1c 9f 02 c0       	mov    edx,0xc0029f1c
c000fcea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcee:	89 10                	mov    DWORD PTR [eax],edx
c000fcf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcf4:	83 ec 0c             	sub    esp,0xc
c000fcf7:	50                   	push   eax
c000fcf8:	e8 3f 12 00 00       	call   c0010f3c <UnixFile::~UnixFile()>
c000fcfd:	83 c4 10             	add    esp,0x10
c000fd00:	90                   	nop
c000fd01:	83 c4 0c             	add    esp,0xc
c000fd04:	c3                   	ret    
c000fd05:	90                   	nop

c000fd06 <Pipe::~Pipe()>:
c000fd06:	83 ec 0c             	sub    esp,0xc
c000fd09:	83 ec 0c             	sub    esp,0xc
c000fd0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd10:	e8 cd ff ff ff       	call   c000fce2 <Pipe::~Pipe()>
c000fd15:	83 c4 10             	add    esp,0x10
c000fd18:	83 ec 08             	sub    esp,0x8
c000fd1b:	6a 20                	push   0x20
c000fd1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd21:	e8 73 27 00 00       	call   c0012499 <operator delete(void*, unsigned long)>
c000fd26:	83 c4 10             	add    esp,0x10
c000fd29:	83 c4 0c             	add    esp,0xc
c000fd2c:	c3                   	ret    
c000fd2d:	90                   	nop

c000fd2e <Pipe::read(unsigned long long, void*, int*)>:
c000fd2e:	55                   	push   ebp
c000fd2f:	57                   	push   edi
c000fd30:	56                   	push   esi
c000fd31:	53                   	push   ebx
c000fd32:	83 ec 1c             	sub    esp,0x1c
c000fd35:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fd39:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fd3d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fd41:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fd44:	89 c8                	mov    eax,ecx
c000fd46:	99                   	cdq    
c000fd47:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fd4b:	74 24                	je     c000fd71 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fd4d:	39 f9                	cmp    ecx,edi
c000fd4f:	89 d1                	mov    ecx,edx
c000fd51:	19 f1                	sbb    ecx,esi
c000fd53:	73 1c                	jae    c000fd71 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fd55:	fa                   	cli    
c000fd56:	ff 05 88 0b 03 c0    	inc    DWORD PTR ds:0xc0030b88
c000fd5c:	e8 fa da 00 00       	call   c001d85b <schedule()>
c000fd61:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c000fd66:	48                   	dec    eax
c000fd67:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c000fd6c:	75 d3                	jne    c000fd41 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fd6e:	fb                   	sti    
c000fd6f:	eb d0                	jmp    c000fd41 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fd71:	39 f8                	cmp    eax,edi
c000fd73:	89 d1                	mov    ecx,edx
c000fd75:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fd78:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000fd7c:	19 f1                	sbb    ecx,esi
c000fd7e:	73 07                	jae    c000fd87 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000fd80:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd83:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fd87:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fd8a:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000fd8d:	29 f7                	sub    edi,esi
c000fd8f:	89 f8                	mov    eax,edi
c000fd91:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000fd95:	99                   	cdq    
c000fd96:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000fd99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fd9d:	19 d0                	sbb    eax,edx
c000fd9f:	73 07                	jae    c000fda8 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000fda1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fda4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fda8:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000fdab:	89 ea                	mov    edx,ebp
c000fdad:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000fdb1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000fdb6:	74 0d                	je     c000fdc5 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000fdb8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000fdbb:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000fdbf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fdc3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdc5:	85 d2                	test   edx,edx
c000fdc7:	74 11                	je     c000fdda <Pipe::read(unsigned long long, void*, int*)+0xac>
c000fdc9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fdcd:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000fdd0:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000fdd4:	89 d1                	mov    ecx,edx
c000fdd6:	89 c7                	mov    edi,eax
c000fdd8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdda:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fddd:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000fde0:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fde3:	99                   	cdq    
c000fde4:	89 f7                	mov    edi,esi
c000fde6:	03 04 24             	add    eax,DWORD PTR [esp]
c000fde9:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000fded:	c1 ff 1f             	sar    edi,0x1f
c000fdf0:	57                   	push   edi
c000fdf1:	56                   	push   esi
c000fdf2:	52                   	push   edx
c000fdf3:	50                   	push   eax
c000fdf4:	e8 ab 68 01 00       	call   c00266a4 <__umoddi3>
c000fdf9:	83 c4 10             	add    esp,0x10
c000fdfc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fdff:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fe04:	75 10                	jne    c000fe16 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000fe06:	83 ec 0c             	sub    esp,0xc
c000fe09:	68 d9 9e 02 c0       	push   0xc0029ed9
c000fe0e:	e8 be 9e 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c000fe13:	83 c4 10             	add    esp,0x10
c000fe16:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fe1a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fe1d:	89 10                	mov    DWORD PTR [eax],edx
c000fe1f:	83 c4 1c             	add    esp,0x1c
c000fe22:	31 c0                	xor    eax,eax
c000fe24:	5b                   	pop    ebx
c000fe25:	5e                   	pop    esi
c000fe26:	5f                   	pop    edi
c000fe27:	5d                   	pop    ebp
c000fe28:	c3                   	ret    
c000fe29:	90                   	nop

c000fe2a <Pipe::write(unsigned long long, void*, int*)>:
c000fe2a:	55                   	push   ebp
c000fe2b:	57                   	push   edi
c000fe2c:	56                   	push   esi
c000fe2d:	53                   	push   ebx
c000fe2e:	83 ec 1c             	sub    esp,0x1c
c000fe31:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000fe35:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fe39:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000fe3c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fe40:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe43:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fe47:	89 d8                	mov    eax,ebx
c000fe49:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000fe4c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fe50:	89 d6                	mov    esi,edx
c000fe52:	89 d7                	mov    edi,edx
c000fe54:	c1 ff 1f             	sar    edi,0x1f
c000fe57:	03 34 24             	add    esi,DWORD PTR [esp]
c000fe5a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000fe5e:	c1 f8 1f             	sar    eax,0x1f
c000fe61:	39 f3                	cmp    ebx,esi
c000fe63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe6b:	19 f8                	sbb    eax,edi
c000fe6d:	b8 01 00 00 00       	mov    eax,0x1
c000fe72:	72 6e                	jb     c000fee2 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000fe74:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fe77:	01 d0                	add    eax,edx
c000fe79:	99                   	cdq    
c000fe7a:	f7 fb                	idiv   ebx
c000fe7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe80:	29 d3                	sub    ebx,edx
c000fe82:	89 d7                	mov    edi,edx
c000fe84:	89 de                	mov    esi,ebx
c000fe86:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fe89:	c1 fb 1f             	sar    ebx,0x1f
c000fe8c:	39 f2                	cmp    edx,esi
c000fe8e:	19 d8                	sbb    eax,ebx
c000fe90:	b8 00 00 00 00       	mov    eax,0x0
c000fe95:	72 04                	jb     c000fe9b <Pipe::write(unsigned long long, void*, int*)+0x71>
c000fe97:	89 d0                	mov    eax,edx
c000fe99:	29 f0                	sub    eax,esi
c000fe9b:	89 d3                	mov    ebx,edx
c000fe9d:	29 c3                	sub    ebx,eax
c000fe9f:	74 0b                	je     c000feac <Pipe::write(unsigned long long, void*, int*)+0x82>
c000fea1:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000fea4:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000fea8:	89 d9                	mov    ecx,ebx
c000feaa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000feac:	85 c0                	test   eax,eax
c000feae:	74 0d                	je     c000febd <Pipe::write(unsigned long long, void*, int*)+0x93>
c000feb0:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000feb4:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000feb7:	89 de                	mov    esi,ebx
c000feb9:	89 c1                	mov    ecx,eax
c000febb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000febd:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000fec0:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fec5:	75 10                	jne    c000fed7 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000fec7:	83 ec 0c             	sub    esp,0xc
c000feca:	68 f5 9e 02 c0       	push   0xc0029ef5
c000fecf:	e8 fd 9d 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c000fed4:	83 c4 10             	add    esp,0x10
c000fed7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fedb:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000fede:	89 08                	mov    DWORD PTR [eax],ecx
c000fee0:	31 c0                	xor    eax,eax
c000fee2:	83 c4 1c             	add    esp,0x1c
c000fee5:	5b                   	pop    ebx
c000fee6:	5e                   	pop    esi
c000fee7:	5f                   	pop    edi
c000fee8:	5d                   	pop    ebp
c000fee9:	c3                   	ret    

c000feea <Pipe::Pipe(int)>:
c000feea:	83 ec 0c             	sub    esp,0xc
c000feed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fef1:	83 ec 08             	sub    esp,0x8
c000fef4:	6a 00                	push   0x0
c000fef6:	50                   	push   eax
c000fef7:	e8 5e 0e 00 00       	call   c0010d5a <UnixFile::UnixFile(int)>
c000fefc:	83 c4 10             	add    esp,0x10
c000feff:	ba 1c 9f 02 c0       	mov    edx,0xc0029f1c
c000ff04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff08:	89 10                	mov    DWORD PTR [eax],edx
c000ff0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff0e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ff12:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ff15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff19:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ff20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff24:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ff2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff2f:	83 ec 0c             	sub    esp,0xc
c000ff32:	50                   	push   eax
c000ff33:	e8 61 f6 ff ff       	call   c000f599 <malloc>
c000ff38:	83 c4 10             	add    esp,0x10
c000ff3b:	89 c2                	mov    edx,eax
c000ff3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff41:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ff44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff48:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ff4c:	90                   	nop
c000ff4d:	83 c4 0c             	add    esp,0xc
c000ff50:	c3                   	ret    
c000ff51:	90                   	nop

c000ff52 <VgaText::isAtty()>:
c000ff52:	b0 01                	mov    al,0x1
c000ff54:	c3                   	ret    
c000ff55:	90                   	nop

c000ff56 <VgaText::~VgaText()>:
c000ff56:	83 ec 0c             	sub    esp,0xc
c000ff59:	ba a4 9f 02 c0       	mov    edx,0xc0029fa4
c000ff5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff62:	89 10                	mov    DWORD PTR [eax],edx
c000ff64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff68:	83 ec 0c             	sub    esp,0xc
c000ff6b:	50                   	push   eax
c000ff6c:	e8 cb 0f 00 00       	call   c0010f3c <UnixFile::~UnixFile()>
c000ff71:	83 c4 10             	add    esp,0x10
c000ff74:	90                   	nop
c000ff75:	83 c4 0c             	add    esp,0xc
c000ff78:	c3                   	ret    
c000ff79:	90                   	nop

c000ff7a <VgaText::~VgaText()>:
c000ff7a:	83 ec 0c             	sub    esp,0xc
c000ff7d:	83 ec 0c             	sub    esp,0xc
c000ff80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff84:	e8 cd ff ff ff       	call   c000ff56 <VgaText::~VgaText()>
c000ff89:	83 c4 10             	add    esp,0x10
c000ff8c:	83 ec 08             	sub    esp,0x8
c000ff8f:	68 c4 02 00 00       	push   0x2c4
c000ff94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff98:	e8 fc 24 00 00       	call   c0012499 <operator delete(void*, unsigned long)>
c000ff9d:	83 c4 10             	add    esp,0x10
c000ffa0:	83 c4 0c             	add    esp,0xc
c000ffa3:	c3                   	ret    

c000ffa4 <VgaText::read(unsigned long long, void*, int*)>:
c000ffa4:	83 ec 10             	sub    esp,0x10
c000ffa7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ffab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ffaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffb3:	e8 74 5a 00 00       	call   c0015a2c <readKeyboard(VgaText*, char*, unsigned long)>
c000ffb8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ffbc:	89 02                	mov    DWORD PTR [edx],eax
c000ffbe:	31 c0                	xor    eax,eax
c000ffc0:	83 c4 1c             	add    esp,0x1c
c000ffc3:	c3                   	ret    

c000ffc4 <setTerminalScrollLock(bool)>:
c000ffc4:	c3                   	ret    

c000ffc5 <addToTerminalCycle(VgaText*)>:
c000ffc5:	8b 15 20 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d720
c000ffcb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffcf:	85 d2                	test   edx,edx
c000ffd1:	75 09                	jne    c000ffdc <addToTerminalCycle(VgaText*)+0x17>
c000ffd3:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000ffd6:	a3 20 d7 02 c0       	mov    ds:0xc002d720,eax
c000ffdb:	c3                   	ret    
c000ffdc:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000ffdf:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000ffe2:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000ffe5:	c3                   	ret    

c000ffe6 <installVgaTextImplementation()>:
c000ffe6:	83 ec 10             	sub    esp,0x10
c000ffe9:	6a 20                	push   0x20
c000ffeb:	6a 00                	push   0x0
c000ffed:	68 00 d7 02 c0       	push   0xc002d700
c000fff2:	e8 59 07 ff ff       	call   c0000750 <memset>
c000fff7:	83 c4 1c             	add    esp,0x1c
c000fffa:	c3                   	ret    

c000fffb <scrollTerminalScrollLock(int)>:
c000fffb:	c3                   	ret    

c000fffc <VgaText::updateTitle()>:
c000fffc:	53                   	push   ebx
c000fffd:	31 c0                	xor    eax,eax
c000ffff:	83 ec 58             	sub    esp,0x58
c0010002:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010006:	89 e1                	mov    ecx,esp
c0010008:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001000c:	40                   	inc    eax
c001000d:	83 f8 50             	cmp    eax,0x50
c0010010:	75 f6                	jne    c0010008 <VgaText::updateTitle()+0xc>
c0010012:	31 c0                	xor    eax,eax
c0010014:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c001001b:	84 db                	test   bl,bl
c001001d:	74 06                	je     c0010025 <VgaText::updateTitle()+0x29>
c001001f:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010022:	40                   	inc    eax
c0010023:	eb ef                	jmp    c0010014 <VgaText::updateTitle()+0x18>
c0010025:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010028:	85 c0                	test   eax,eax
c001002a:	74 09                	je     c0010035 <VgaText::updateTitle()+0x39>
c001002c:	53                   	push   ebx
c001002d:	53                   	push   ebx
c001002e:	51                   	push   ecx
c001002f:	52                   	push   edx
c0010030:	ff d0                	call   eax
c0010032:	83 c4 10             	add    esp,0x10
c0010035:	83 c4 58             	add    esp,0x58
c0010038:	5b                   	pop    ebx
c0010039:	c3                   	ret    

c001003a <VgaText::load()>:
c001003a:	53                   	push   ebx
c001003b:	31 c0                	xor    eax,eax
c001003d:	83 ec 58             	sub    esp,0x58
c0010040:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010044:	89 e2                	mov    edx,esp
c0010046:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001004a:	40                   	inc    eax
c001004b:	83 f8 50             	cmp    eax,0x50
c001004e:	75 f6                	jne    c0010046 <VgaText::load()+0xc>
c0010050:	31 c0                	xor    eax,eax
c0010052:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c0010059:	84 c9                	test   cl,cl
c001005b:	74 06                	je     c0010063 <VgaText::load()+0x29>
c001005d:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010060:	40                   	inc    eax
c0010061:	eb ef                	jmp    c0010052 <VgaText::load()+0x18>
c0010063:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c0010066:	85 c0                	test   eax,eax
c0010068:	74 09                	je     c0010073 <VgaText::load()+0x39>
c001006a:	51                   	push   ecx
c001006b:	51                   	push   ecx
c001006c:	52                   	push   edx
c001006d:	53                   	push   ebx
c001006e:	ff d0                	call   eax
c0010070:	83 c4 10             	add    esp,0x10
c0010073:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c0010076:	85 c0                	test   eax,eax
c0010078:	74 09                	je     c0010083 <VgaText::load()+0x49>
c001007a:	83 ec 0c             	sub    esp,0xc
c001007d:	53                   	push   ebx
c001007e:	ff d0                	call   eax
c0010080:	83 c4 10             	add    esp,0x10
c0010083:	83 c4 58             	add    esp,0x58
c0010086:	5b                   	pop    ebx
c0010087:	c3                   	ret    

c0010088 <VgaText::updateCursor()>:
c0010088:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001008c:	39 05 24 d7 02 c0    	cmp    DWORD PTR ds:0xc002d724,eax
c0010092:	75 09                	jne    c001009d <VgaText::updateCursor()+0x15>
c0010094:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c0010097:	85 c0                	test   eax,eax
c0010099:	74 02                	je     c001009d <VgaText::updateCursor()+0x15>
c001009b:	ff e0                	jmp    eax
c001009d:	c3                   	ret    

c001009e <VgaText::doANSI_SGR(int)>:
c001009e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00100a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100a6:	85 d2                	test   edx,edx
c00100a8:	75 0b                	jne    c00100b5 <VgaText::doANSI_SGR(int)+0x17>
c00100aa:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00100ad:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00100b0:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00100b3:	eb 59                	jmp    c001010e <VgaText::doANSI_SGR(int)+0x70>
c00100b5:	83 fa 07             	cmp    edx,0x7
c00100b8:	75 0b                	jne    c00100c5 <VgaText::doANSI_SGR(int)+0x27>
c00100ba:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00100bd:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00100c0:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00100c3:	eb 49                	jmp    c001010e <VgaText::doANSI_SGR(int)+0x70>
c00100c5:	83 fa 1b             	cmp    edx,0x1b
c00100c8:	74 e0                	je     c00100aa <VgaText::doANSI_SGR(int)+0xc>
c00100ca:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00100cd:	83 f9 07             	cmp    ecx,0x7
c00100d0:	77 09                	ja     c00100db <VgaText::doANSI_SGR(int)+0x3d>
c00100d2:	8b 14 8d c0 c5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3a40]
c00100d9:	eb 20                	jmp    c00100fb <VgaText::doANSI_SGR(int)+0x5d>
c00100db:	8d 4a d8             	lea    ecx,[edx-0x28]
c00100de:	83 f9 07             	cmp    ecx,0x7
c00100e1:	77 09                	ja     c00100ec <VgaText::doANSI_SGR(int)+0x4e>
c00100e3:	8b 14 8d c0 c5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3a40]
c00100ea:	eb 22                	jmp    c001010e <VgaText::doANSI_SGR(int)+0x70>
c00100ec:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00100ef:	83 f9 07             	cmp    ecx,0x7
c00100f2:	77 0b                	ja     c00100ff <VgaText::doANSI_SGR(int)+0x61>
c00100f4:	8b 14 95 78 c4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3b88]
c00100fb:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00100fe:	c3                   	ret    
c00100ff:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010102:	83 f9 07             	cmp    ecx,0x7
c0010105:	77 0a                	ja     c0010111 <VgaText::doANSI_SGR(int)+0x73>
c0010107:	8b 14 95 50 c4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3bb0]
c001010e:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010111:	c3                   	ret    

c0010112 <VgaText::setDefaultBgColour(VgaColour)>:
c0010112:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010116:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001011a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001011d:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010120:	c3                   	ret    
c0010121:	90                   	nop

c0010122 <VgaText::setDefaultFgColour(VgaColour)>:
c0010122:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010126:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001012a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001012d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010130:	c3                   	ret    
c0010131:	90                   	nop

c0010132 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010132:	53                   	push   ebx
c0010133:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010137:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001013b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001013f:	51                   	push   ecx
c0010140:	e8 cd ff ff ff       	call   c0010112 <VgaText::setDefaultBgColour(VgaColour)>
c0010145:	58                   	pop    eax
c0010146:	5a                   	pop    edx
c0010147:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001014b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001014f:	5b                   	pop    ebx
c0010150:	eb d0                	jmp    c0010122 <VgaText::setDefaultFgColour(VgaColour)>

c0010152 <VgaText::setTitleTextColour(VgaColour)>:
c0010152:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010156:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001015a:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c001015d:	e9 9a fe ff ff       	jmp    c000fffc <VgaText::updateTitle()>

c0010162 <VgaText::setTitleColour(VgaColour)>:
c0010162:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010166:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001016a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001016d:	e9 8a fe ff ff       	jmp    c000fffc <VgaText::updateTitle()>

c0010172 <VgaText::setTitle(char*)>:
c0010172:	53                   	push   ebx
c0010173:	83 ec 10             	sub    esp,0x10
c0010176:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001017a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001017e:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010184:	50                   	push   eax
c0010185:	e8 82 06 ff ff       	call   c000080c <strcpy>
c001018a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001018e:	83 c4 18             	add    esp,0x18
c0010191:	5b                   	pop    ebx
c0010192:	e9 65 fe ff ff       	jmp    c000fffc <VgaText::updateTitle()>
c0010197:	90                   	nop

c0010198 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010198:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001019c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00101a1:	83 e0 0f             	and    eax,0xf
c00101a4:	c1 e2 04             	shl    edx,0x4
c00101a7:	09 d0                	or     eax,edx
c00101a9:	c3                   	ret    

c00101aa <VgaText::scrollScreen()>:
c00101aa:	55                   	push   ebp
c00101ab:	b9 01 00 00 00       	mov    ecx,0x1
c00101b0:	57                   	push   edi
c00101b1:	56                   	push   esi
c00101b2:	53                   	push   ebx
c00101b3:	83 ec 0c             	sub    esp,0xc
c00101b6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00101ba:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00101c0:	31 ff                	xor    edi,edi
c00101c2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00101c5:	83 f9 17             	cmp    ecx,0x17
c00101c8:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00101cb:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00101d2:	75 27                	jne    c00101fb <VgaText::scrollScreen()+0x51>
c00101d4:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00101d7:	01 f5                	add    ebp,esi
c00101d9:	f7 c7 01 00 00 00    	test   edi,0x1
c00101df:	74 16                	je     c00101f7 <VgaText::scrollScreen()+0x4d>
c00101e1:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00101e5:	50                   	push   eax
c00101e6:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00101ea:	50                   	push   eax
c00101eb:	e8 a8 ff ff ff       	call   c0010198 <VgaText::combineColours(unsigned char, unsigned char)>
c00101f0:	5a                   	pop    edx
c00101f1:	5a                   	pop    edx
c00101f2:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00101f5:	eb 04                	jmp    c00101fb <VgaText::scrollScreen()+0x51>
c00101f7:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00101fb:	47                   	inc    edi
c00101fc:	46                   	inc    esi
c00101fd:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010203:	75 bd                	jne    c00101c2 <VgaText::scrollScreen()+0x18>
c0010205:	41                   	inc    ecx
c0010206:	83 f9 18             	cmp    ecx,0x18
c0010209:	75 af                	jne    c00101ba <VgaText::scrollScreen()+0x10>
c001020b:	39 1d 24 d7 02 c0    	cmp    DWORD PTR ds:0xc002d724,ebx
c0010211:	75 1b                	jne    c001022e <VgaText::scrollScreen()+0x84>
c0010213:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010217:	74 05                	je     c001021e <VgaText::scrollScreen()+0x74>
c0010219:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001021c:	eb 10                	jmp    c001022e <VgaText::scrollScreen()+0x84>
c001021e:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c0010221:	85 c0                	test   eax,eax
c0010223:	74 09                	je     c001022e <VgaText::scrollScreen()+0x84>
c0010225:	83 ec 0c             	sub    esp,0xc
c0010228:	53                   	push   ebx
c0010229:	ff d0                	call   eax
c001022b:	83 c4 10             	add    esp,0x10
c001022e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010232:	83 c4 0c             	add    esp,0xc
c0010235:	5b                   	pop    ebx
c0010236:	5e                   	pop    esi
c0010237:	5f                   	pop    edi
c0010238:	5d                   	pop    ebp
c0010239:	e9 4a fe ff ff       	jmp    c0010088 <VgaText::updateCursor()>

c001023e <VgaText::combineCharAndColour(char, unsigned char)>:
c001023e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010243:	c1 e0 08             	shl    eax,0x8
c0010246:	89 c2                	mov    edx,eax
c0010248:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001024d:	09 d0                	or     eax,edx
c001024f:	c3                   	ret    

c0010250 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010250:	56                   	push   esi
c0010251:	53                   	push   ebx
c0010252:	51                   	push   ecx
c0010253:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010257:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001025c:	50                   	push   eax
c001025d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010262:	50                   	push   eax
c0010263:	e8 30 ff ff ff       	call   c0010198 <VgaText::combineColours(unsigned char, unsigned char)>
c0010268:	5b                   	pop    ebx
c0010269:	0f b6 c0             	movzx  eax,al
c001026c:	5e                   	pop    esi
c001026d:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010272:	50                   	push   eax
c0010273:	53                   	push   ebx
c0010274:	e8 c5 ff ff ff       	call   c001023e <VgaText::combineCharAndColour(char, unsigned char)>
c0010279:	5a                   	pop    edx
c001027a:	5e                   	pop    esi
c001027b:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c001027e:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010284:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010288:	0f b7 d2             	movzx  edx,dx
c001028b:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c001028f:	39 0d 24 d7 02 c0    	cmp    DWORD PTR ds:0xc002d724,ecx
c0010295:	75 10                	jne    c00102a7 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010297:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c001029a:	85 c0                	test   eax,eax
c001029c:	74 09                	je     c00102a7 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001029e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00102a2:	5a                   	pop    edx
c00102a3:	5b                   	pop    ebx
c00102a4:	5e                   	pop    esi
c00102a5:	ff e0                	jmp    eax
c00102a7:	58                   	pop    eax
c00102a8:	5b                   	pop    ebx
c00102a9:	5e                   	pop    esi
c00102aa:	c3                   	ret    
c00102ab:	90                   	nop

c00102ac <VgaText::getCursorX()>:
c00102ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102b0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00102b3:	c3                   	ret    

c00102b4 <VgaText::getCursorY()>:
c00102b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102b8:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00102bb:	c3                   	ret    

c00102bc <VgaText::setCursor(int, int)>:
c00102bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102c4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00102c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00102cb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00102ce:	e9 b5 fd ff ff       	jmp    c0010088 <VgaText::updateCursor()>

c00102d3 <setActiveTerminal(VgaText*)>:
c00102d3:	53                   	push   ebx
c00102d4:	83 ec 08             	sub    esp,0x8
c00102d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102db:	85 db                	test   ebx,ebx
c00102dd:	75 11                	jne    c00102f0 <setActiveTerminal(VgaText*)+0x1d>
c00102df:	c7 44 24 10 30 9f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029f30
c00102e7:	83 c4 08             	add    esp,0x8
c00102ea:	5b                   	pop    ebx
c00102eb:	e9 e1 99 00 00       	jmp    c0019cd1 <Krnl::panic(char const*)>
c00102f0:	a1 24 d7 02 c0       	mov    eax,ds:0xc002d724
c00102f5:	85 c0                	test   eax,eax
c00102f7:	74 0c                	je     c0010305 <setActiveTerminal(VgaText*)+0x32>
c00102f9:	83 ec 0c             	sub    esp,0xc
c00102fc:	50                   	push   eax
c00102fd:	e8 86 fd ff ff       	call   c0010088 <VgaText::updateCursor()>
c0010302:	83 c4 10             	add    esp,0x10
c0010305:	89 1d 24 d7 02 c0    	mov    DWORD PTR ds:0xc002d724,ebx
c001030b:	51                   	push   ecx
c001030c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001030f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010312:	53                   	push   ebx
c0010313:	e8 a4 ff ff ff       	call   c00102bc <VgaText::setCursor(int, int)>
c0010318:	83 c4 10             	add    esp,0x10
c001031b:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001031f:	75 07                	jne    c0010328 <setActiveTerminal(VgaText*)+0x55>
c0010321:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c0010328:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001032c:	83 c4 08             	add    esp,0x8
c001032f:	5b                   	pop    ebx
c0010330:	e9 05 fd ff ff       	jmp    c001003a <VgaText::load()>

c0010335 <doTerminalCycle()>:
c0010335:	83 ec 18             	sub    esp,0x18
c0010338:	a1 20 d7 02 c0       	mov    eax,ds:0xc002d720
c001033d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010340:	50                   	push   eax
c0010341:	a3 20 d7 02 c0       	mov    ds:0xc002d720,eax
c0010346:	e8 88 ff ff ff       	call   c00102d3 <setActiveTerminal(VgaText*)>
c001034b:	83 c4 1c             	add    esp,0x1c
c001034e:	c3                   	ret    
c001034f:	90                   	nop

c0010350 <VgaText::setCursorX(int)>:
c0010350:	83 ec 10             	sub    esp,0x10
c0010353:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010357:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001035a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001035e:	50                   	push   eax
c001035f:	e8 58 ff ff ff       	call   c00102bc <VgaText::setCursor(int, int)>
c0010364:	83 c4 1c             	add    esp,0x1c
c0010367:	c3                   	ret    

c0010368 <VgaText::setCursorY(int)>:
c0010368:	83 ec 10             	sub    esp,0x10
c001036b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001036f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010373:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010376:	50                   	push   eax
c0010377:	e8 40 ff ff ff       	call   c00102bc <VgaText::setCursor(int, int)>
c001037c:	83 c4 1c             	add    esp,0x1c
c001037f:	c3                   	ret    

c0010380 <VgaText::incrementCursor(bool)>:
c0010380:	56                   	push   esi
c0010381:	53                   	push   ebx
c0010382:	51                   	push   ecx
c0010383:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010387:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001038b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001038e:	40                   	inc    eax
c001038f:	83 f8 50             	cmp    eax,0x50
c0010392:	74 05                	je     c0010399 <VgaText::incrementCursor(bool)+0x19>
c0010394:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0010397:	eb 24                	jmp    c00103bd <VgaText::incrementCursor(bool)+0x3d>
c0010399:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001039c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00103a3:	8d 50 01             	lea    edx,[eax+0x1]
c00103a6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00103a9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00103ac:	75 0f                	jne    c00103bd <VgaText::incrementCursor(bool)+0x3d>
c00103ae:	83 ec 0c             	sub    esp,0xc
c00103b1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00103b4:	53                   	push   ebx
c00103b5:	e8 f0 fd ff ff       	call   c00101aa <VgaText::scrollScreen()>
c00103ba:	83 c4 10             	add    esp,0x10
c00103bd:	89 f0                	mov    eax,esi
c00103bf:	84 c0                	test   al,al
c00103c1:	74 0c                	je     c00103cf <VgaText::incrementCursor(bool)+0x4f>
c00103c3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103c7:	5a                   	pop    edx
c00103c8:	5b                   	pop    ebx
c00103c9:	5e                   	pop    esi
c00103ca:	e9 b9 fc ff ff       	jmp    c0010088 <VgaText::updateCursor()>
c00103cf:	58                   	pop    eax
c00103d0:	5b                   	pop    ebx
c00103d1:	5e                   	pop    esi
c00103d2:	c3                   	ret    
c00103d3:	90                   	nop

c00103d4 <VgaText::decrementCursor(bool)>:
c00103d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00103d8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00103dc:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00103df:	85 c0                	test   eax,eax
c00103e1:	74 04                	je     c00103e7 <VgaText::decrementCursor(bool)+0x13>
c00103e3:	48                   	dec    eax
c00103e4:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00103e7:	84 c9                	test   cl,cl
c00103e9:	74 09                	je     c00103f4 <VgaText::decrementCursor(bool)+0x20>
c00103eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00103ef:	e9 94 fc ff ff       	jmp    c0010088 <VgaText::updateCursor()>
c00103f4:	c3                   	ret    
c00103f5:	90                   	nop

c00103f6 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00103f6:	53                   	push   ebx
c00103f7:	83 ec 08             	sub    esp,0x8
c00103fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010402:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010406:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001040a:	3c 07                	cmp    al,0x7
c001040c:	75 2a                	jne    c0010438 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001040e:	a1 d8 d7 02 c0       	mov    eax,ds:0xc002d7d8
c0010413:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001041b:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010423:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c001042b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001042f:	83 c4 08             	add    esp,0x8
c0010432:	5b                   	pop    ebx
c0010433:	e9 46 2f 00 00       	jmp    c001337e <Buzzer::beep(int, int, bool)>
c0010438:	3c 0d                	cmp    al,0xd
c001043a:	75 09                	jne    c0010445 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c001043c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010443:	eb 2c                	jmp    c0010471 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010445:	3c 0a                	cmp    al,0xa
c0010447:	75 31                	jne    c001047a <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010449:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001044c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010453:	8d 50 01             	lea    edx,[eax+0x1]
c0010456:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010459:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001045c:	75 0f                	jne    c001046d <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c001045e:	83 ec 0c             	sub    esp,0xc
c0010461:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010464:	53                   	push   ebx
c0010465:	e8 40 fd ff ff       	call   c00101aa <VgaText::scrollScreen()>
c001046a:	83 c4 10             	add    esp,0x10
c001046d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010471:	83 c4 08             	add    esp,0x8
c0010474:	5b                   	pop    ebx
c0010475:	e9 0e fc ff ff       	jmp    c0010088 <VgaText::updateCursor()>
c001047a:	3c 08                	cmp    al,0x8
c001047c:	75 25                	jne    c00104a3 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c001047e:	50                   	push   eax
c001047f:	50                   	push   eax
c0010480:	6a 01                	push   0x1
c0010482:	53                   	push   ebx
c0010483:	e8 4c ff ff ff       	call   c00103d4 <VgaText::decrementCursor(bool)>
c0010488:	5a                   	pop    edx
c0010489:	59                   	pop    ecx
c001048a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001048d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010490:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010493:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010496:	6a 20                	push   0x20
c0010498:	53                   	push   ebx
c0010499:	e8 b2 fd ff ff       	call   c0010250 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001049e:	83 c4 28             	add    esp,0x28
c00104a1:	5b                   	pop    ebx
c00104a2:	c3                   	ret    
c00104a3:	83 ec 08             	sub    esp,0x8
c00104a6:	0f be c0             	movsx  eax,al
c00104a9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00104ac:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00104af:	51                   	push   ecx
c00104b0:	52                   	push   edx
c00104b1:	50                   	push   eax
c00104b2:	53                   	push   ebx
c00104b3:	e8 98 fd ff ff       	call   c0010250 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00104b8:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00104bc:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00104c4:	83 c4 28             	add    esp,0x28
c00104c7:	5b                   	pop    ebx
c00104c8:	e9 b3 fe ff ff       	jmp    c0010380 <VgaText::incrementCursor(bool)>
c00104cd:	90                   	nop

c00104ce <VgaText::doUpdate()>:
c00104ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104d2:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c00104d5:	85 c0                	test   eax,eax
c00104d7:	74 02                	je     c00104db <VgaText::doUpdate()+0xd>
c00104d9:	ff e0                	jmp    eax
c00104db:	c3                   	ret    

c00104dc <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00104dc:	55                   	push   ebp
c00104dd:	31 ed                	xor    ebp,ebp
c00104df:	57                   	push   edi
c00104e0:	56                   	push   esi
c00104e1:	53                   	push   ebx
c00104e2:	83 ec 1c             	sub    esp,0x1c
c00104e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00104e9:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00104ee:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00104f5:	50                   	push   eax
c00104f6:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00104fb:	50                   	push   eax
c00104fc:	e8 97 fc ff ff       	call   c0010198 <VgaText::combineColours(unsigned char, unsigned char)>
c0010501:	59                   	pop    ecx
c0010502:	0f b6 c0             	movzx  eax,al
c0010505:	5e                   	pop    esi
c0010506:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001050b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001050f:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010512:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010516:	0f b7 f6             	movzx  esi,si
c0010519:	01 f6                	add    esi,esi
c001051b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001051e:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010521:	84 c0                	test   al,al
c0010523:	0f 84 fd 00 00 00    	je     c0010626 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010529:	3c 0d                	cmp    al,0xd
c001052b:	75 0c                	jne    c0010539 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c001052d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010534:	e9 e7 00 00 00       	jmp    c0010620 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010539:	3c 0a                	cmp    al,0xa
c001053b:	75 47                	jne    c0010584 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c001053d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010540:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010547:	8d 48 01             	lea    ecx,[eax+0x1]
c001054a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c001054d:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010550:	75 0f                	jne    c0010561 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010552:	83 ec 0c             	sub    esp,0xc
c0010555:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010558:	53                   	push   ebx
c0010559:	e8 4c fc ff ff       	call   c00101aa <VgaText::scrollScreen()>
c001055e:	83 c4 10             	add    esp,0x10
c0010561:	83 ec 0c             	sub    esp,0xc
c0010564:	31 ed                	xor    ebp,ebp
c0010566:	53                   	push   ebx
c0010567:	e8 1c fb ff ff       	call   c0010088 <VgaText::updateCursor()>
c001056c:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010571:	83 c4 10             	add    esp,0x10
c0010574:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010577:	0f b7 f6             	movzx  esi,si
c001057a:	01 f6                	add    esi,esi
c001057c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001057f:	e9 9c 00 00 00       	jmp    c0010620 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010584:	3c 08                	cmp    al,0x8
c0010586:	75 35                	jne    c00105bd <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010588:	56                   	push   esi
c0010589:	56                   	push   esi
c001058a:	6a 01                	push   0x1
c001058c:	53                   	push   ebx
c001058d:	e8 42 fe ff ff       	call   c00103d4 <VgaText::decrementCursor(bool)>
c0010592:	58                   	pop    eax
c0010593:	5a                   	pop    edx
c0010594:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010597:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001059a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001059d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00105a0:	6a 20                	push   0x20
c00105a2:	53                   	push   ebx
c00105a3:	e8 a8 fc ff ff       	call   c0010250 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00105a8:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00105ad:	83 c4 20             	add    esp,0x20
c00105b0:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00105b3:	0f b7 f6             	movzx  esi,si
c00105b6:	01 f6                	add    esi,esi
c00105b8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00105bb:	eb 63                	jmp    c0010620 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00105bd:	51                   	push   ecx
c00105be:	51                   	push   ecx
c00105bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00105c3:	50                   	push   eax
c00105c4:	e8 75 fc ff ff       	call   c001023e <VgaText::combineCharAndColour(char, unsigned char)>
c00105c9:	83 c4 10             	add    esp,0x10
c00105cc:	66 89 06             	mov    WORD PTR [esi],ax
c00105cf:	39 1d 24 d7 02 c0    	cmp    DWORD PTR ds:0xc002d724,ebx
c00105d5:	75 21                	jne    c00105f8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c00105d7:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c00105da:	85 c0                	test   eax,eax
c00105dc:	74 1a                	je     c00105f8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c00105de:	52                   	push   edx
c00105df:	52                   	push   edx
c00105e0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00105e3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00105e6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00105ea:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00105ee:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c00105f1:	51                   	push   ecx
c00105f2:	53                   	push   ebx
c00105f3:	ff d0                	call   eax
c00105f5:	83 c4 20             	add    esp,0x20
c00105f8:	83 c6 02             	add    esi,0x2
c00105fb:	50                   	push   eax
c00105fc:	50                   	push   eax
c00105fd:	6a 00                	push   0x0
c00105ff:	53                   	push   ebx
c0010600:	e8 7b fd ff ff       	call   c0010380 <VgaText::incrementCursor(bool)>
c0010605:	83 c4 10             	add    esp,0x10
c0010608:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c001060c:	75 0d                	jne    c001061b <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c001060e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010613:	0f b7 f6             	movzx  esi,si
c0010616:	01 f6                	add    esi,esi
c0010618:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001061b:	bd 01 00 00 00       	mov    ebp,0x1
c0010620:	47                   	inc    edi
c0010621:	e9 f8 fe ff ff       	jmp    c001051e <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010626:	83 ec 0c             	sub    esp,0xc
c0010629:	53                   	push   ebx
c001062a:	e8 59 fa ff ff       	call   c0010088 <VgaText::updateCursor()>
c001062f:	83 c4 10             	add    esp,0x10
c0010632:	89 e8                	mov    eax,ebp
c0010634:	84 c0                	test   al,al
c0010636:	74 0c                	je     c0010644 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010638:	83 ec 0c             	sub    esp,0xc
c001063b:	53                   	push   ebx
c001063c:	e8 8d fe ff ff       	call   c00104ce <VgaText::doUpdate()>
c0010641:	83 c4 10             	add    esp,0x10
c0010644:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c001064b:	83 c4 1c             	add    esp,0x1c
c001064e:	5b                   	pop    ebx
c001064f:	5e                   	pop    esi
c0010650:	5f                   	pop    edi
c0010651:	5d                   	pop    ebp
c0010652:	c3                   	ret    
c0010653:	90                   	nop

c0010654 <VgaText::clearScreen()>:
c0010654:	57                   	push   edi
c0010655:	56                   	push   esi
c0010656:	31 f6                	xor    esi,esi
c0010658:	53                   	push   ebx
c0010659:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001065d:	52                   	push   edx
c001065e:	6a 00                	push   0x0
c0010660:	6a 00                	push   0x0
c0010662:	53                   	push   ebx
c0010663:	e8 54 fc ff ff       	call   c00102bc <VgaText::setCursor(int, int)>
c0010668:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c001066f:	83 c4 10             	add    esp,0x10
c0010672:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010675:	7e 20                	jle    c0010697 <VgaText::clearScreen()+0x43>
c0010677:	31 ff                	xor    edi,edi
c0010679:	50                   	push   eax
c001067a:	50                   	push   eax
c001067b:	56                   	push   esi
c001067c:	57                   	push   edi
c001067d:	47                   	inc    edi
c001067e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010681:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010684:	6a 20                	push   0x20
c0010686:	53                   	push   ebx
c0010687:	e8 c4 fb ff ff       	call   c0010250 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001068c:	83 c4 20             	add    esp,0x20
c001068f:	83 ff 50             	cmp    edi,0x50
c0010692:	75 e5                	jne    c0010679 <VgaText::clearScreen()+0x25>
c0010694:	46                   	inc    esi
c0010695:	eb db                	jmp    c0010672 <VgaText::clearScreen()+0x1e>
c0010697:	83 ec 0c             	sub    esp,0xc
c001069a:	53                   	push   ebx
c001069b:	e8 2e fe ff ff       	call   c00104ce <VgaText::doUpdate()>
c00106a0:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00106a7:	83 c4 10             	add    esp,0x10
c00106aa:	5b                   	pop    ebx
c00106ab:	5e                   	pop    esi
c00106ac:	5f                   	pop    edi
c00106ad:	c3                   	ret    

c00106ae <VgaText::putchar(char)>:
c00106ae:	56                   	push   esi
c00106af:	53                   	push   ebx
c00106b0:	83 ec 14             	sub    esp,0x14
c00106b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00106b7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00106bb:	3c 5b                	cmp    al,0x5b
c00106bd:	75 18                	jne    c00106d7 <VgaText::putchar(char)+0x29>
c00106bf:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00106c3:	74 1f                	je     c00106e4 <VgaText::putchar(char)+0x36>
c00106c5:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00106cb:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00106d2:	e9 bd 00 00 00       	jmp    c0010794 <VgaText::putchar(char)+0xe6>
c00106d7:	3c 1b                	cmp    al,0x1b
c00106d9:	75 09                	jne    c00106e4 <VgaText::putchar(char)+0x36>
c00106db:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00106df:	e9 b0 00 00 00       	jmp    c0010794 <VgaText::putchar(char)+0xe6>
c00106e4:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00106e7:	84 c9                	test   cl,cl
c00106e9:	0f 84 92 00 00 00    	je     c0010781 <VgaText::putchar(char)+0xd3>
c00106ef:	8d 50 c0             	lea    edx,[eax-0x40]
c00106f2:	80 fa 3e             	cmp    dl,0x3e
c00106f5:	77 76                	ja     c001076d <VgaText::putchar(char)+0xbf>
c00106f7:	3c 6d                	cmp    al,0x6d
c00106f9:	75 47                	jne    c0010742 <VgaText::putchar(char)+0x94>
c00106fb:	31 f6                	xor    esi,esi
c00106fd:	31 d2                	xor    edx,edx
c00106ff:	31 c0                	xor    eax,eax
c0010701:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010704:	7e 2d                	jle    c0010733 <VgaText::putchar(char)+0x85>
c0010706:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c001070b:	80 fa 3b             	cmp    dl,0x3b
c001070e:	75 17                	jne    c0010727 <VgaText::putchar(char)+0x79>
c0010710:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010714:	50                   	push   eax
c0010715:	53                   	push   ebx
c0010716:	e8 83 f9 ff ff       	call   c001009e <VgaText::doANSI_SGR(int)>
c001071b:	59                   	pop    ecx
c001071c:	31 d2                	xor    edx,edx
c001071e:	58                   	pop    eax
c001071f:	31 c0                	xor    eax,eax
c0010721:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010725:	eb 09                	jmp    c0010730 <VgaText::putchar(char)+0x82>
c0010727:	6b c0 0a             	imul   eax,eax,0xa
c001072a:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c001072e:	88 ca                	mov    dl,cl
c0010730:	46                   	inc    esi
c0010731:	eb ce                	jmp    c0010701 <VgaText::putchar(char)+0x53>
c0010733:	84 d2                	test   dl,dl
c0010735:	74 2e                	je     c0010765 <VgaText::putchar(char)+0xb7>
c0010737:	50                   	push   eax
c0010738:	53                   	push   ebx
c0010739:	e8 60 f9 ff ff       	call   c001009e <VgaText::doANSI_SGR(int)>
c001073e:	58                   	pop    eax
c001073f:	5a                   	pop    edx
c0010740:	eb 23                	jmp    c0010765 <VgaText::putchar(char)+0xb7>
c0010742:	3c 4a                	cmp    al,0x4a
c0010744:	75 1f                	jne    c0010765 <VgaText::putchar(char)+0xb7>
c0010746:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c001074a:	75 19                	jne    c0010765 <VgaText::putchar(char)+0xb7>
c001074c:	83 ec 0c             	sub    esp,0xc
c001074f:	53                   	push   ebx
c0010750:	e8 ff fe ff ff       	call   c0010654 <VgaText::clearScreen()>
c0010755:	83 c4 0c             	add    esp,0xc
c0010758:	6a 00                	push   0x0
c001075a:	6a 00                	push   0x0
c001075c:	53                   	push   ebx
c001075d:	e8 5a fb ff ff       	call   c00102bc <VgaText::setCursor(int, int)>
c0010762:	83 c4 10             	add    esp,0x10
c0010765:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c001076b:	eb 27                	jmp    c0010794 <VgaText::putchar(char)+0xe6>
c001076d:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010770:	83 fa 0e             	cmp    edx,0xe
c0010773:	7f 1f                	jg     c0010794 <VgaText::putchar(char)+0xe6>
c0010775:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010778:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c001077b:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c001077f:	eb 13                	jmp    c0010794 <VgaText::putchar(char)+0xe6>
c0010781:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010784:	0f be c0             	movsx  eax,al
c0010787:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001078a:	50                   	push   eax
c001078b:	53                   	push   ebx
c001078c:	e8 65 fc ff ff       	call   c00103f6 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010791:	83 c4 10             	add    esp,0x10
c0010794:	83 c4 14             	add    esp,0x14
c0010797:	5b                   	pop    ebx
c0010798:	5e                   	pop    esi
c0010799:	c3                   	ret    

c001079a <VgaText::putx(unsigned int)>:
c001079a:	57                   	push   edi
c001079b:	b9 11 00 00 00       	mov    ecx,0x11
c00107a0:	56                   	push   esi
c00107a1:	be 3e 9f 02 c0       	mov    esi,0xc0029f3e
c00107a6:	53                   	push   ebx
c00107a7:	83 ec 20             	sub    esp,0x20
c00107aa:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00107ae:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00107b2:	fc                   	cld    
c00107b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00107b5:	be 08 00 00 00       	mov    esi,0x8
c00107ba:	50                   	push   eax
c00107bb:	50                   	push   eax
c00107bc:	89 d8                	mov    eax,ebx
c00107be:	c1 e3 04             	shl    ebx,0x4
c00107c1:	c1 e8 1c             	shr    eax,0x1c
c00107c4:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00107c9:	50                   	push   eax
c00107ca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00107ce:	e8 db fe ff ff       	call   c00106ae <VgaText::putchar(char)>
c00107d3:	83 c4 10             	add    esp,0x10
c00107d6:	4e                   	dec    esi
c00107d7:	75 e1                	jne    c00107ba <VgaText::putx(unsigned int)+0x20>
c00107d9:	83 c4 20             	add    esp,0x20
c00107dc:	5b                   	pop    ebx
c00107dd:	5e                   	pop    esi
c00107de:	5f                   	pop    edi
c00107df:	c3                   	ret    

c00107e0 <VgaText::puts(char const*)>:
c00107e0:	53                   	push   ebx
c00107e1:	83 ec 08             	sub    esp,0x8
c00107e4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00107e8:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00107eb:	84 c0                	test   al,al
c00107ed:	74 12                	je     c0010801 <VgaText::puts(char const*)+0x21>
c00107ef:	43                   	inc    ebx
c00107f0:	51                   	push   ecx
c00107f1:	51                   	push   ecx
c00107f2:	50                   	push   eax
c00107f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107f7:	e8 b2 fe ff ff       	call   c00106ae <VgaText::putchar(char)>
c00107fc:	83 c4 10             	add    esp,0x10
c00107ff:	eb e7                	jmp    c00107e8 <VgaText::puts(char const*)+0x8>
c0010801:	83 c4 08             	add    esp,0x8
c0010804:	5b                   	pop    ebx
c0010805:	c3                   	ret    

c0010806 <VgaText::VgaText(char const*)>:
c0010806:	57                   	push   edi
c0010807:	56                   	push   esi
c0010808:	53                   	push   ebx
c0010809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001080d:	83 ec 08             	sub    esp,0x8
c0010810:	6a 00                	push   0x0
c0010812:	50                   	push   eax
c0010813:	e8 42 05 00 00       	call   c0010d5a <UnixFile::UnixFile(int)>
c0010818:	83 c4 10             	add    esp,0x10
c001081b:	ba a4 9f 02 c0       	mov    edx,0xc0029fa4
c0010820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010824:	89 10                	mov    DWORD PTR [eax],edx
c0010826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001082a:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0010831:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010835:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c001083c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010840:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0010844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010848:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c001084c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010850:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0010857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001085b:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0010862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010866:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c001086d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010871:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0010878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001087c:	8d 50 60             	lea    edx,[eax+0x60]
c001087f:	bb 00 d7 02 c0       	mov    ebx,0xc002d700
c0010884:	b8 08 00 00 00       	mov    eax,0x8
c0010889:	fc                   	cld    
c001088a:	89 d7                	mov    edi,edx
c001088c:	89 de                	mov    esi,ebx
c001088e:	89 c1                	mov    ecx,eax
c0010890:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010896:	05 82 00 00 00       	add    eax,0x82
c001089b:	83 ec 08             	sub    esp,0x8
c001089e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108a2:	50                   	push   eax
c00108a3:	e8 64 ff fe ff       	call   c000080c <strcpy>
c00108a8:	83 c4 10             	add    esp,0x10
c00108ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108af:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c00108b6:	83 ec 0c             	sub    esp,0xc
c00108b9:	6a 01                	push   0x1
c00108bb:	e8 dd 08 00 00       	call   c001119d <Virt::allocateKernelVirtualPages(int)>
c00108c0:	83 c4 10             	add    esp,0x10
c00108c3:	89 c2                	mov    edx,eax
c00108c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00108cc:	8b 1d d0 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d7d0
c00108d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00108d9:	89 c6                	mov    esi,eax
c00108db:	e8 5d f0 ff ff       	call   c000f93d <Phys::allocatePage()>
c00108e0:	6a 05                	push   0x5
c00108e2:	56                   	push   esi
c00108e3:	50                   	push   eax
c00108e4:	53                   	push   ebx
c00108e5:	e8 70 10 00 00       	call   c001195a <VAS::mapPage(unsigned long, unsigned long, int)>
c00108ea:	83 c4 10             	add    esp,0x10
c00108ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00108f4:	83 ec 04             	sub    esp,0x4
c00108f7:	68 00 0f 00 00       	push   0xf00
c00108fc:	6a 00                	push   0x0
c00108fe:	50                   	push   eax
c00108ff:	e8 4c fe fe ff       	call   c0000750 <memset>
c0010904:	83 c4 10             	add    esp,0x10
c0010907:	83 ec 04             	sub    esp,0x4
c001090a:	6a 00                	push   0x0
c001090c:	6a 07                	push   0x7
c001090e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010912:	e8 1b f8 ff ff       	call   c0010132 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010917:	83 c4 10             	add    esp,0x10
c001091a:	83 ec 04             	sub    esp,0x4
c001091d:	6a 00                	push   0x0
c001091f:	6a 00                	push   0x0
c0010921:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010925:	e8 92 f9 ff ff       	call   c00102bc <VgaText::setCursor(int, int)>
c001092a:	83 c4 10             	add    esp,0x10
c001092d:	83 ec 0c             	sub    esp,0xc
c0010930:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010934:	e8 1b fd ff ff       	call   c0010654 <VgaText::clearScreen()>
c0010939:	83 c4 10             	add    esp,0x10
c001093c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010940:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0010944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010948:	05 02 01 00 00       	add    eax,0x102
c001094d:	83 ec 04             	sub    esp,0x4
c0010950:	68 96 00 00 00       	push   0x96
c0010955:	6a 00                	push   0x0
c0010957:	50                   	push   eax
c0010958:	e8 f3 fd fe ff       	call   c0000750 <memset>
c001095d:	83 c4 10             	add    esp,0x10
c0010960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010964:	05 98 01 00 00       	add    eax,0x198
c0010969:	83 ec 04             	sub    esp,0x4
c001096c:	68 2c 01 00 00       	push   0x12c
c0010971:	6a 00                	push   0x0
c0010973:	50                   	push   eax
c0010974:	e8 d7 fd fe ff       	call   c0000750 <memset>
c0010979:	83 c4 10             	add    esp,0x10
c001097c:	90                   	nop
c001097d:	5b                   	pop    ebx
c001097e:	5e                   	pop    esi
c001097f:	5f                   	pop    edi
c0010980:	c3                   	ret    
c0010981:	90                   	nop

c0010982 <VgaText::receiveKey(unsigned char)>:
c0010982:	55                   	push   ebp
c0010983:	57                   	push   edi
c0010984:	56                   	push   esi
c0010985:	53                   	push   ebx
c0010986:	83 ec 1c             	sub    esp,0x1c
c0010989:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001098d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010991:	84 db                	test   bl,bl
c0010993:	0f 84 c9 00 00 00    	je     c0010a62 <VgaText::receiveKey(unsigned char)+0xe0>
c0010999:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c001099f:	80 fb 08             	cmp    bl,0x8
c00109a2:	75 2c                	jne    c00109d0 <VgaText::receiveKey(unsigned char)+0x4e>
c00109a4:	83 ec 0c             	sub    esp,0xc
c00109a7:	57                   	push   edi
c00109a8:	e8 bf fd fe ff       	call   c000076c <strlen>
c00109ad:	83 c4 10             	add    esp,0x10
c00109b0:	85 c0                	test   eax,eax
c00109b2:	74 41                	je     c00109f5 <VgaText::receiveKey(unsigned char)+0x73>
c00109b4:	50                   	push   eax
c00109b5:	50                   	push   eax
c00109b6:	6a 08                	push   0x8
c00109b8:	56                   	push   esi
c00109b9:	e8 f0 fc ff ff       	call   c00106ae <VgaText::putchar(char)>
c00109be:	89 3c 24             	mov    DWORD PTR [esp],edi
c00109c1:	e8 a6 fd fe ff       	call   c000076c <strlen>
c00109c6:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c00109ce:	eb 22                	jmp    c00109f2 <VgaText::receiveKey(unsigned char)+0x70>
c00109d0:	0f be c3             	movsx  eax,bl
c00109d3:	52                   	push   edx
c00109d4:	52                   	push   edx
c00109d5:	50                   	push   eax
c00109d6:	56                   	push   esi
c00109d7:	e8 d2 fc ff ff       	call   c00106ae <VgaText::putchar(char)>
c00109dc:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00109e0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00109e5:	59                   	pop    ecx
c00109e6:	5d                   	pop    ebp
c00109e7:	8d 44 24 16          	lea    eax,[esp+0x16]
c00109eb:	50                   	push   eax
c00109ec:	57                   	push   edi
c00109ed:	e8 5a ff fe ff       	call   c000094c <strcat>
c00109f2:	83 c4 10             	add    esp,0x10
c00109f5:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c00109fc:	75 05                	jne    c0010a03 <VgaText::receiveKey(unsigned char)+0x81>
c00109fe:	80 fb 0a             	cmp    bl,0xa
c0010a01:	75 53                	jne    c0010a56 <VgaText::receiveKey(unsigned char)+0xd4>
c0010a03:	83 ec 0c             	sub    esp,0xc
c0010a06:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010a0c:	53                   	push   ebx
c0010a0d:	e8 5a fd fe ff       	call   c000076c <strlen>
c0010a12:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a15:	89 c5                	mov    ebp,eax
c0010a17:	e8 50 fd fe ff       	call   c000076c <strlen>
c0010a1c:	83 c4 10             	add    esp,0x10
c0010a1f:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010a23:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010a28:	76 10                	jbe    c0010a3a <VgaText::receiveKey(unsigned char)+0xb8>
c0010a2a:	83 ec 0c             	sub    esp,0xc
c0010a2d:	68 4f 9f 02 c0       	push   0xc0029f4f
c0010a32:	e8 9a 92 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c0010a37:	83 c4 10             	add    esp,0x10
c0010a3a:	50                   	push   eax
c0010a3b:	50                   	push   eax
c0010a3c:	57                   	push   edi
c0010a3d:	53                   	push   ebx
c0010a3e:	e8 09 ff fe ff       	call   c000094c <strcat>
c0010a43:	83 c4 0c             	add    esp,0xc
c0010a46:	68 96 00 00 00       	push   0x96
c0010a4b:	6a 00                	push   0x0
c0010a4d:	57                   	push   edi
c0010a4e:	e8 fd fc fe ff       	call   c0000750 <memset>
c0010a53:	83 c4 10             	add    esp,0x10
c0010a56:	83 ec 0c             	sub    esp,0xc
c0010a59:	56                   	push   esi
c0010a5a:	e8 6f fa ff ff       	call   c00104ce <VgaText::doUpdate()>
c0010a5f:	83 c4 10             	add    esp,0x10
c0010a62:	83 c4 1c             	add    esp,0x1c
c0010a65:	5b                   	pop    ebx
c0010a66:	5e                   	pop    esi
c0010a67:	5f                   	pop    edi
c0010a68:	5d                   	pop    ebp
c0010a69:	c3                   	ret    

c0010a6a <VgaText::write(unsigned long long, void*, int*)>:
c0010a6a:	55                   	push   ebp
c0010a6b:	57                   	push   edi
c0010a6c:	56                   	push   esi
c0010a6d:	53                   	push   ebx
c0010a6e:	83 ec 0c             	sub    esp,0xc
c0010a71:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010a75:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010a79:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010a7d:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010a84:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010a87:	39 eb                	cmp    ebx,ebp
c0010a89:	74 13                	je     c0010a9e <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010a8b:	43                   	inc    ebx
c0010a8c:	50                   	push   eax
c0010a8d:	50                   	push   eax
c0010a8e:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010a92:	50                   	push   eax
c0010a93:	56                   	push   esi
c0010a94:	e8 15 fc ff ff       	call   c00106ae <VgaText::putchar(char)>
c0010a99:	83 c4 10             	add    esp,0x10
c0010a9c:	eb e9                	jmp    c0010a87 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010a9e:	83 ec 0c             	sub    esp,0xc
c0010aa1:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010aa8:	56                   	push   esi
c0010aa9:	e8 20 fa ff ff       	call   c00104ce <VgaText::doUpdate()>
c0010aae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010ab2:	89 38                	mov    DWORD PTR [eax],edi
c0010ab4:	83 c4 1c             	add    esp,0x1c
c0010ab7:	31 c0                	xor    eax,eax
c0010ab9:	5b                   	pop    ebx
c0010aba:	5e                   	pop    esi
c0010abb:	5f                   	pop    edi
c0010abc:	5d                   	pop    ebp
c0010abd:	c3                   	ret    

c0010abe <newTerminal(char*)>:
c0010abe:	83 ec 28             	sub    esp,0x28
c0010ac1:	68 c4 02 00 00       	push   0x2c4
c0010ac6:	e8 ce ea ff ff       	call   c000f599 <malloc>
c0010acb:	5a                   	pop    edx
c0010acc:	59                   	pop    ecx
c0010acd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010ad1:	50                   	push   eax
c0010ad2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010ad6:	e8 2b fd ff ff       	call   c0010806 <VgaText::VgaText(char const*)>
c0010adb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010adf:	83 c4 2c             	add    esp,0x2c
c0010ae2:	c3                   	ret    
c0010ae3:	90                   	nop

c0010ae4 <TSS::TSS()>:
c0010ae4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ae8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010aef:	90                   	nop
c0010af0:	c3                   	ret    
c0010af1:	90                   	nop

c0010af2 <TSS::setESP(unsigned long)>:
c0010af2:	55                   	push   ebp
c0010af3:	89 e5                	mov    ebp,esp
c0010af5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010af8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010afb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010afe:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b01:	90                   	nop
c0010b02:	5d                   	pop    ebp
c0010b03:	c3                   	ret    

c0010b04 <TSS::flush()>:
c0010b04:	55                   	push   ebp
c0010b05:	89 e5                	mov    ebp,esp
c0010b07:	83 ec 10             	sub    esp,0x10
c0010b0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b0f:	83 c8 03             	or     eax,0x3
c0010b12:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010b16:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010b1a:	66 89 d0             	mov    ax,dx
c0010b1d:	0f 00 d8             	ltr    ax
c0010b20:	90                   	nop
c0010b21:	c9                   	leave  
c0010b22:	c3                   	ret    
c0010b23:	90                   	nop

c0010b24 <TSS::setup(unsigned long, unsigned long)>:
c0010b24:	55                   	push   ebp
c0010b25:	89 e5                	mov    ebp,esp
c0010b27:	83 ec 18             	sub    esp,0x18
c0010b2a:	83 ec 0c             	sub    esp,0xc
c0010b2d:	6a 68                	push   0x68
c0010b2f:	e8 65 ea ff ff       	call   c000f599 <malloc>
c0010b34:	83 c4 10             	add    esp,0x10
c0010b37:	89 c2                	mov    edx,eax
c0010b39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b3c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b45:	83 ec 04             	sub    esp,0x4
c0010b48:	6a 68                	push   0x68
c0010b4a:	6a 00                	push   0x0
c0010b4c:	50                   	push   eax
c0010b4d:	e8 fe fb fe ff       	call   c0000750 <memset>
c0010b52:	83 c4 10             	add    esp,0x10
c0010b55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b5b:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010b61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b67:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010b6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b73:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010b76:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b7f:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010b85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b8b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010b91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b97:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010b9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ba0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ba3:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010ba9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010baf:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010bb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bbb:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010bc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bc7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010bca:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010bcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bd0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bd3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010bd6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010bd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bdc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bdf:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010be6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010be9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bec:	0f 20 da             	mov    edx,cr3
c0010bef:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010bf2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010bf5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010bf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bfb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bfe:	83 ec 08             	sub    esp,0x8
c0010c01:	50                   	push   eax
c0010c02:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c05:	50                   	push   eax
c0010c06:	e8 87 e1 ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c0010c0b:	83 c4 10             	add    esp,0x10
c0010c0e:	83 ec 08             	sub    esp,0x8
c0010c11:	6a 68                	push   0x68
c0010c13:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c16:	50                   	push   eax
c0010c17:	e8 92 e1 ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c0010c1c:	83 c4 10             	add    esp,0x10
c0010c1f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010c23:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010c26:	83 e0 0f             	and    eax,0xf
c0010c29:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010c2c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010c2f:	83 c8 40             	or     eax,0x40
c0010c32:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010c35:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c0010c3a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010c40:	05 78 01 00 00       	add    eax,0x178
c0010c45:	83 ec 04             	sub    esp,0x4
c0010c48:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010c4b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010c4e:	50                   	push   eax
c0010c4f:	e8 8e e1 ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c0010c54:	83 c4 10             	add    esp,0x10
c0010c57:	89 c2                	mov    edx,eax
c0010c59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c5c:	89 10                	mov    DWORD PTR [eax],edx
c0010c5e:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c0010c63:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010c69:	05 78 01 00 00       	add    eax,0x178
c0010c6e:	83 ec 0c             	sub    esp,0xc
c0010c71:	50                   	push   eax
c0010c72:	e8 95 e1 ff ff       	call   c000ee0c <GDT::flush()>
c0010c77:	83 c4 10             	add    esp,0x10
c0010c7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c7f:	c9                   	leave  
c0010c80:	c3                   	ret    
c0010c81:	90                   	nop

c0010c82 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010c82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c86:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010c8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c8d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010c92:	75 08                	jne    c0010c9c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010c94:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010c9a:	eb 38                	jmp    c0010cd4 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010c9c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010ca1:	75 17                	jne    c0010cba <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010ca3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ca8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010cab:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010cb1:	8b 10                	mov    edx,DWORD PTR [eax]
c0010cb3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010cb7:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010cba:	89 c1                	mov    ecx,eax
c0010cbc:	83 e1 fd             	and    ecx,0xfffffffd
c0010cbf:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010cc5:	74 cd                	je     c0010c94 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010cc7:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010ccc:	83 e0 ef             	and    eax,0xffffffef
c0010ccf:	83 f8 08             	cmp    eax,0x8
c0010cd2:	76 c0                	jbe    c0010c94 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010cd4:	31 c0                	xor    eax,eax
c0010cd6:	c3                   	ret    
c0010cd7:	90                   	nop

c0010cd8 <ReservedFilename::isAtty()>:
c0010cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cdc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010cdf:	31 c0                	xor    eax,eax
c0010ce1:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010ce7:	74 09                	je     c0010cf2 <ReservedFilename::isAtty()+0x1a>
c0010ce9:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010cef:	0f 94 c0             	sete   al
c0010cf2:	c3                   	ret    
c0010cf3:	90                   	nop

c0010cf4 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010cf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cf8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010cfc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d03:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d08:	75 08                	jne    c0010d12 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010d0a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d10:	eb 3d                	jmp    c0010d4f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d12:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d17:	75 17                	jne    c0010d30 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010d19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d1e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010d21:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010d27:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d29:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d2d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010d30:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010d35:	75 04                	jne    c0010d3b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010d37:	89 0a                	mov    DWORD PTR [edx],ecx
c0010d39:	eb 14                	jmp    c0010d4f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d3b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010d40:	74 c8                	je     c0010d0a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010d42:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010d47:	83 e0 ef             	and    eax,0xffffffef
c0010d4a:	83 f8 08             	cmp    eax,0x8
c0010d4d:	76 bb                	jbe    c0010d0a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010d4f:	31 c0                	xor    eax,eax
c0010d51:	c3                   	ret    

c0010d52 <UnixFile::getFileDescriptor()>:
c0010d52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d59:	c3                   	ret    

c0010d5a <UnixFile::UnixFile(int)>:
c0010d5a:	53                   	push   ebx
c0010d5b:	83 ec 28             	sub    esp,0x28
c0010d5e:	ba 6c a0 02 c0       	mov    edx,0xc002a06c
c0010d63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010d67:	89 10                	mov    DWORD PTR [eax],edx
c0010d69:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0010d71:	0f 8f 8c 01 00 00    	jg     c0010f03 <UnixFile::UnixFile(int)+0x1a9>
c0010d77:	a1 00 c6 02 c0       	mov    eax,ds:0xc002c600
c0010d7c:	8d 50 01             	lea    edx,[eax+0x1]
c0010d7f:	89 15 00 c6 02 c0    	mov    DWORD PTR ds:0xc002c600,edx
c0010d85:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010d89:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010d8c:	83 ec 08             	sub    esp,0x8
c0010d8f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010d93:	68 b8 d7 02 c0       	push   0xc002d7b8
c0010d98:	e8 79 75 01 00       	call   c0028316 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010d9d:	83 c4 10             	add    esp,0x10
c0010da0:	a0 b4 d7 02 c0       	mov    al,ds:0xc002d7b4
c0010da5:	83 f0 01             	xor    eax,0x1
c0010da8:	84 c0                	test   al,al
c0010daa:	0f 84 54 01 00 00    	je     c0010f04 <UnixFile::UnixFile(int)+0x1aa>
c0010db0:	c6 05 b4 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d7b4,0x1
c0010db7:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0010dbf:	83 ec 0c             	sub    esp,0xc
c0010dc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010dc6:	e8 ce e7 ff ff       	call   c000f599 <malloc>
c0010dcb:	83 c4 10             	add    esp,0x10
c0010dce:	89 c3                	mov    ebx,eax
c0010dd0:	83 ec 08             	sub    esp,0x8
c0010dd3:	68 03 ff ff 0f       	push   0xfffff03
c0010dd8:	53                   	push   ebx
c0010dd9:	e8 2c 01 00 00       	call   c0010f0a <ReservedFilename::ReservedFilename(int)>
c0010dde:	83 c4 10             	add    esp,0x10
c0010de1:	89 1d ac d7 02 c0    	mov    DWORD PTR ds:0xc002d7ac,ebx
c0010de7:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0010def:	83 ec 0c             	sub    esp,0xc
c0010df2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010df6:	e8 9e e7 ff ff       	call   c000f599 <malloc>
c0010dfb:	83 c4 10             	add    esp,0x10
c0010dfe:	89 c3                	mov    ebx,eax
c0010e00:	83 ec 08             	sub    esp,0x8
c0010e03:	68 01 ff ff 0f       	push   0xfffff01
c0010e08:	53                   	push   ebx
c0010e09:	e8 fc 00 00 00       	call   c0010f0a <ReservedFilename::ReservedFilename(int)>
c0010e0e:	83 c4 10             	add    esp,0x10
c0010e11:	89 1d b0 d7 02 c0    	mov    DWORD PTR ds:0xc002d7b0,ebx
c0010e17:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0010e1f:	83 ec 0c             	sub    esp,0xc
c0010e22:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010e26:	e8 6e e7 ff ff       	call   c000f599 <malloc>
c0010e2b:	83 c4 10             	add    esp,0x10
c0010e2e:	89 c3                	mov    ebx,eax
c0010e30:	83 ec 08             	sub    esp,0x8
c0010e33:	68 00 ff ff 0f       	push   0xfffff00
c0010e38:	53                   	push   ebx
c0010e39:	e8 cc 00 00 00       	call   c0010f0a <ReservedFilename::ReservedFilename(int)>
c0010e3e:	83 c4 10             	add    esp,0x10
c0010e41:	89 1d a4 d7 02 c0    	mov    DWORD PTR ds:0xc002d7a4,ebx
c0010e47:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0010e4f:	83 ec 0c             	sub    esp,0xc
c0010e52:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010e56:	e8 3e e7 ff ff       	call   c000f599 <malloc>
c0010e5b:	83 c4 10             	add    esp,0x10
c0010e5e:	89 c3                	mov    ebx,eax
c0010e60:	83 ec 08             	sub    esp,0x8
c0010e63:	68 02 ff ff 0f       	push   0xfffff02
c0010e68:	53                   	push   ebx
c0010e69:	e8 9c 00 00 00       	call   c0010f0a <ReservedFilename::ReservedFilename(int)>
c0010e6e:	83 c4 10             	add    esp,0x10
c0010e71:	89 1d a8 d7 02 c0    	mov    DWORD PTR ds:0xc002d7a8,ebx
c0010e77:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010e7f:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0010e84:	7f 7e                	jg     c0010f04 <UnixFile::UnixFile(int)+0x1aa>
c0010e86:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0010e8e:	83 ec 0c             	sub    esp,0xc
c0010e91:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010e95:	e8 ff e6 ff ff       	call   c000f599 <malloc>
c0010e9a:	83 c4 10             	add    esp,0x10
c0010e9d:	89 c3                	mov    ebx,eax
c0010e9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ea3:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010ea8:	83 ec 08             	sub    esp,0x8
c0010eab:	50                   	push   eax
c0010eac:	53                   	push   ebx
c0010ead:	e8 58 00 00 00       	call   c0010f0a <ReservedFilename::ReservedFilename(int)>
c0010eb2:	83 c4 10             	add    esp,0x10
c0010eb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010eb9:	89 1c 85 80 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2880],ebx
c0010ec0:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0010ec8:	83 ec 0c             	sub    esp,0xc
c0010ecb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010ecf:	e8 c5 e6 ff ff       	call   c000f599 <malloc>
c0010ed4:	83 c4 10             	add    esp,0x10
c0010ed7:	89 c3                	mov    ebx,eax
c0010ed9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010edd:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010ee2:	83 ec 08             	sub    esp,0x8
c0010ee5:	50                   	push   eax
c0010ee6:	53                   	push   ebx
c0010ee7:	e8 1e 00 00 00       	call   c0010f0a <ReservedFilename::ReservedFilename(int)>
c0010eec:	83 c4 10             	add    esp,0x10
c0010eef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ef3:	89 1c 85 40 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd28c0],ebx
c0010efa:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0010efe:	e9 7c ff ff ff       	jmp    c0010e7f <UnixFile::UnixFile(int)+0x125>
c0010f03:	90                   	nop
c0010f04:	83 c4 28             	add    esp,0x28
c0010f07:	5b                   	pop    ebx
c0010f08:	c3                   	ret    
c0010f09:	90                   	nop

c0010f0a <ReservedFilename::ReservedFilename(int)>:
c0010f0a:	83 ec 0c             	sub    esp,0xc
c0010f0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f11:	83 ec 08             	sub    esp,0x8
c0010f14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f18:	50                   	push   eax
c0010f19:	e8 3c fe ff ff       	call   c0010d5a <UnixFile::UnixFile(int)>
c0010f1e:	83 c4 10             	add    esp,0x10
c0010f21:	ba 88 a0 02 c0       	mov    edx,0xc002a088
c0010f26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f2a:	89 10                	mov    DWORD PTR [eax],edx
c0010f2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f30:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010f34:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010f37:	90                   	nop
c0010f38:	83 c4 0c             	add    esp,0xc
c0010f3b:	c3                   	ret    

c0010f3c <UnixFile::~UnixFile()>:
c0010f3c:	83 ec 1c             	sub    esp,0x1c
c0010f3f:	ba 6c a0 02 c0       	mov    edx,0xc002a06c
c0010f44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f48:	89 10                	mov    DWORD PTR [eax],edx
c0010f4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f51:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0010f56:	7f 73                	jg     c0010fcb <UnixFile::~UnixFile()+0x8f>
c0010f58:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010f60:	83 ec 0c             	sub    esp,0xc
c0010f63:	68 b8 d7 02 c0       	push   0xc002d7b8
c0010f68:	e8 7d 74 01 00       	call   c00283ea <LinkedList<UnixFile>::getFirstElement()>
c0010f6d:	83 c4 10             	add    esp,0x10
c0010f70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010f74:	83 ec 0c             	sub    esp,0xc
c0010f77:	68 b8 d7 02 c0       	push   0xc002d7b8
c0010f7c:	e8 71 74 01 00       	call   c00283f2 <LinkedList<UnixFile>::removeFirst()>
c0010f81:	83 c4 10             	add    esp,0x10
c0010f84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010f88:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010f8c:	74 40                	je     c0010fce <UnixFile::~UnixFile()+0x92>
c0010f8e:	83 ec 08             	sub    esp,0x8
c0010f91:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f95:	68 b8 d7 02 c0       	push   0xc002d7b8
c0010f9a:	e8 77 73 01 00       	call   c0028316 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010f9f:	83 c4 10             	add    esp,0x10
c0010fa2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fa6:	8d 50 01             	lea    edx,[eax+0x1]
c0010fa9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010fad:	3d 88 13 00 00       	cmp    eax,0x1388
c0010fb2:	0f 94 c0             	sete   al
c0010fb5:	84 c0                	test   al,al
c0010fb7:	74 a7                	je     c0010f60 <UnixFile::~UnixFile()+0x24>
c0010fb9:	83 ec 0c             	sub    esp,0xc
c0010fbc:	68 44 a0 02 c0       	push   0xc002a044
c0010fc1:	e8 0b 8d 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c0010fc6:	83 c4 10             	add    esp,0x10
c0010fc9:	eb 95                	jmp    c0010f60 <UnixFile::~UnixFile()+0x24>
c0010fcb:	90                   	nop
c0010fcc:	eb 01                	jmp    c0010fcf <UnixFile::~UnixFile()+0x93>
c0010fce:	90                   	nop
c0010fcf:	90                   	nop
c0010fd0:	83 c4 1c             	add    esp,0x1c
c0010fd3:	c3                   	ret    

c0010fd4 <UnixFile::~UnixFile()>:
c0010fd4:	83 ec 0c             	sub    esp,0xc
c0010fd7:	83 ec 0c             	sub    esp,0xc
c0010fda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fde:	e8 59 ff ff ff       	call   c0010f3c <UnixFile::~UnixFile()>
c0010fe3:	83 c4 10             	add    esp,0x10
c0010fe6:	83 ec 08             	sub    esp,0x8
c0010fe9:	6a 0c                	push   0xc
c0010feb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fef:	e8 a5 14 00 00       	call   c0012499 <operator delete(void*, unsigned long)>
c0010ff4:	83 c4 10             	add    esp,0x10
c0010ff7:	83 c4 0c             	add    esp,0xc
c0010ffa:	c3                   	ret    
c0010ffb:	90                   	nop

c0010ffc <ReservedFilename::~ReservedFilename()>:
c0010ffc:	83 ec 0c             	sub    esp,0xc
c0010fff:	ba 88 a0 02 c0       	mov    edx,0xc002a088
c0011004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011008:	89 10                	mov    DWORD PTR [eax],edx
c001100a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001100e:	83 ec 0c             	sub    esp,0xc
c0011011:	50                   	push   eax
c0011012:	e8 25 ff ff ff       	call   c0010f3c <UnixFile::~UnixFile()>
c0011017:	83 c4 10             	add    esp,0x10
c001101a:	90                   	nop
c001101b:	83 c4 0c             	add    esp,0xc
c001101e:	c3                   	ret    
c001101f:	90                   	nop

c0011020 <ReservedFilename::~ReservedFilename()>:
c0011020:	83 ec 0c             	sub    esp,0xc
c0011023:	83 ec 0c             	sub    esp,0xc
c0011026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001102a:	e8 cd ff ff ff       	call   c0010ffc <ReservedFilename::~ReservedFilename()>
c001102f:	83 c4 10             	add    esp,0x10
c0011032:	83 ec 08             	sub    esp,0x8
c0011035:	6a 0c                	push   0xc
c0011037:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001103b:	e8 59 14 00 00       	call   c0012499 <operator delete(void*, unsigned long)>
c0011040:	83 c4 10             	add    esp,0x10
c0011043:	83 c4 0c             	add    esp,0xc
c0011046:	c3                   	ret    

c0011047 <getFromFileDescriptor(int)>:
c0011047:	53                   	push   ebx
c0011048:	83 ec 08             	sub    esp,0x8
c001104b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001104f:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011055:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001105b:	7f 2c                	jg     c0011089 <getFromFileDescriptor(int)+0x42>
c001105d:	83 ec 0c             	sub    esp,0xc
c0011060:	68 b8 d7 02 c0       	push   0xc002d7b8
c0011065:	e8 80 73 01 00       	call   c00283ea <LinkedList<UnixFile>::getFirstElement()>
c001106a:	83 c4 10             	add    esp,0x10
c001106d:	85 c0                	test   eax,eax
c001106f:	75 04                	jne    c0011075 <getFromFileDescriptor(int)+0x2e>
c0011071:	31 c0                	xor    eax,eax
c0011073:	eb 6e                	jmp    c00110e3 <getFromFileDescriptor(int)+0x9c>
c0011075:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011078:	74 69                	je     c00110e3 <getFromFileDescriptor(int)+0x9c>
c001107a:	52                   	push   edx
c001107b:	52                   	push   edx
c001107c:	50                   	push   eax
c001107d:	68 b8 d7 02 c0       	push   0xc002d7b8
c0011082:	e8 0d 74 01 00       	call   c0028494 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011087:	eb e1                	jmp    c001106a <getFromFileDescriptor(int)+0x23>
c0011089:	a1 ac d7 02 c0       	mov    eax,ds:0xc002d7ac
c001108e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011094:	74 4d                	je     c00110e3 <getFromFileDescriptor(int)+0x9c>
c0011096:	a1 b0 d7 02 c0       	mov    eax,ds:0xc002d7b0
c001109b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00110a1:	74 40                	je     c00110e3 <getFromFileDescriptor(int)+0x9c>
c00110a3:	a1 a8 d7 02 c0       	mov    eax,ds:0xc002d7a8
c00110a8:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00110ae:	74 33                	je     c00110e3 <getFromFileDescriptor(int)+0x9c>
c00110b0:	a1 a4 d7 02 c0       	mov    eax,ds:0xc002d7a4
c00110b5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00110bb:	74 26                	je     c00110e3 <getFromFileDescriptor(int)+0x9c>
c00110bd:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00110c3:	83 f8 08             	cmp    eax,0x8
c00110c6:	77 09                	ja     c00110d1 <getFromFileDescriptor(int)+0x8a>
c00110c8:	8b 04 85 80 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2880]
c00110cf:	eb 12                	jmp    c00110e3 <getFromFileDescriptor(int)+0x9c>
c00110d1:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00110d7:	83 fb 08             	cmp    ebx,0x8
c00110da:	77 95                	ja     c0011071 <getFromFileDescriptor(int)+0x2a>
c00110dc:	8b 04 9d 40 d7 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd28c0]
c00110e3:	83 c4 08             	add    esp,0x8
c00110e6:	5b                   	pop    ebx
c00110e7:	c3                   	ret    

c00110e8 <__static_initialization_and_destruction_0(int, int)>:
c00110e8:	83 ec 0c             	sub    esp,0xc
c00110eb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00110f0:	75 34                	jne    c0011126 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00110f2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00110fa:	75 2a                	jne    c0011126 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00110fc:	83 ec 0c             	sub    esp,0xc
c00110ff:	68 b8 d7 02 c0       	push   0xc002d7b8
c0011104:	e8 cb 71 01 00       	call   c00282d4 <LinkedList<UnixFile>::LinkedList()>
c0011109:	83 c4 10             	add    esp,0x10
c001110c:	83 ec 04             	sub    esp,0x4
c001110f:	68 30 c4 02 c0       	push   0xc002c430
c0011114:	68 b8 d7 02 c0       	push   0xc002d7b8
c0011119:	68 d2 82 02 c0       	push   0xc00282d2
c001111e:	e8 f0 12 00 00       	call   c0012413 <__cxa_atexit>
c0011123:	83 c4 10             	add    esp,0x10
c0011126:	90                   	nop
c0011127:	83 c4 0c             	add    esp,0xc
c001112a:	c3                   	ret    

c001112b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001112b:	83 ec 0c             	sub    esp,0xc
c001112e:	83 ec 08             	sub    esp,0x8
c0011131:	68 ff ff 00 00       	push   0xffff
c0011136:	6a 01                	push   0x1
c0011138:	e8 ab ff ff ff       	call   c00110e8 <__static_initialization_and_destruction_0(int, int)>
c001113d:	83 c4 10             	add    esp,0x10
c0011140:	83 c4 0c             	add    esp,0xc
c0011143:	c3                   	ret    

c0011144 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011144:	53                   	push   ebx
c0011145:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011149:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001114d:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011153:	89 c8                	mov    eax,ecx
c0011155:	d1 e8                	shr    eax,1
c0011157:	03 05 08 c6 02 c0    	add    eax,DWORD PTR ds:0xc002c608
c001115d:	83 e1 01             	and    ecx,0x1
c0011160:	8a 10                	mov    dl,BYTE PTR [eax]
c0011162:	75 09                	jne    c001116d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011164:	83 e2 f0             	and    edx,0xfffffff0
c0011167:	09 da                	or     edx,ebx
c0011169:	88 10                	mov    BYTE PTR [eax],dl
c001116b:	5b                   	pop    ebx
c001116c:	c3                   	ret    
c001116d:	c1 e3 04             	shl    ebx,0x4
c0011170:	83 e2 0f             	and    edx,0xf
c0011173:	09 da                	or     edx,ebx
c0011175:	88 10                	mov    BYTE PTR [eax],dl
c0011177:	5b                   	pop    ebx
c0011178:	c3                   	ret    

c0011179 <Virt::getPageState(unsigned long)>:
c0011179:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001117d:	8b 0d 08 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c608
c0011183:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011189:	89 d0                	mov    eax,edx
c001118b:	d1 e8                	shr    eax,1
c001118d:	83 e2 01             	and    edx,0x1
c0011190:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011193:	75 04                	jne    c0011199 <Virt::getPageState(unsigned long)+0x20>
c0011195:	83 e0 0f             	and    eax,0xf
c0011198:	c3                   	ret    
c0011199:	c0 e8 04             	shr    al,0x4
c001119c:	c3                   	ret    

c001119d <Virt::allocateKernelVirtualPages(int)>:
c001119d:	55                   	push   ebp
c001119e:	31 ed                	xor    ebp,ebp
c00111a0:	57                   	push   edi
c00111a1:	56                   	push   esi
c00111a2:	53                   	push   ebx
c00111a3:	31 db                	xor    ebx,ebx
c00111a5:	83 ec 1c             	sub    esp,0x1c
c00111a8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00111ac:	8b 3d 04 c6 02 c0    	mov    edi,DWORD PTR ds:0xc002c604
c00111b2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00111b7:	57                   	push   edi
c00111b8:	e8 bc ff ff ff       	call   c0011179 <Virt::getPageState(unsigned long)>
c00111bd:	5a                   	pop    edx
c00111be:	84 c0                	test   al,al
c00111c0:	75 3a                	jne    c00111fc <Virt::allocateKernelVirtualPages(int)+0x5f>
c00111c2:	85 db                	test   ebx,ebx
c00111c4:	75 02                	jne    c00111c8 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00111c6:	89 fd                	mov    ebp,edi
c00111c8:	43                   	inc    ebx
c00111c9:	39 f3                	cmp    ebx,esi
c00111cb:	74 5a                	je     c0011227 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00111cd:	47                   	inc    edi
c00111ce:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00111d4:	76 31                	jbe    c0011207 <Virt::allocateKernelVirtualPages(int)+0x6a>
c00111d6:	c7 05 04 c6 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002c604,0xc8000
c00111e0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00111e5:	75 28                	jne    c001120f <Virt::allocateKernelVirtualPages(int)+0x72>
c00111e7:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00111ec:	bf 00 80 0c 00       	mov    edi,0xc8000
c00111f1:	57                   	push   edi
c00111f2:	e8 82 ff ff ff       	call   c0011179 <Virt::getPageState(unsigned long)>
c00111f7:	5a                   	pop    edx
c00111f8:	84 c0                	test   al,al
c00111fa:	74 c6                	je     c00111c2 <Virt::allocateKernelVirtualPages(int)+0x25>
c00111fc:	31 db                	xor    ebx,ebx
c00111fe:	47                   	inc    edi
c00111ff:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011205:	77 cf                	ja     c00111d6 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011207:	89 3d 04 c6 02 c0    	mov    DWORD PTR ds:0xc002c604,edi
c001120d:	eb a8                	jmp    c00111b7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c001120f:	83 ec 0c             	sub    esp,0xc
c0011212:	68 9c a0 02 c0       	push   0xc002a09c
c0011217:	e8 b5 8a 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c001121c:	8b 3d 04 c6 02 c0    	mov    edi,DWORD PTR ds:0xc002c604
c0011222:	83 c4 10             	add    esp,0x10
c0011225:	eb 90                	jmp    c00111b7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011227:	89 2d 04 c6 02 c0    	mov    DWORD PTR ds:0xc002c604,ebp
c001122d:	4b                   	dec    ebx
c001122e:	74 5f                	je     c001128f <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011230:	85 f6                	test   esi,esi
c0011232:	74 3d                	je     c0011271 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011234:	89 e8                	mov    eax,ebp
c0011236:	31 db                	xor    ebx,ebx
c0011238:	8d 7e ff             	lea    edi,[esi-0x1]
c001123b:	eb 14                	jmp    c0011251 <Virt::allocateKernelVirtualPages(int)+0xb4>
c001123d:	6a 01                	push   0x1
c001123f:	43                   	inc    ebx
c0011240:	50                   	push   eax
c0011241:	e8 fe fe ff ff       	call   c0011144 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011246:	58                   	pop    eax
c0011247:	39 f3                	cmp    ebx,esi
c0011249:	5a                   	pop    edx
c001124a:	74 25                	je     c0011271 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001124c:	a1 04 c6 02 c0       	mov    eax,ds:0xc002c604
c0011251:	8d 50 01             	lea    edx,[eax+0x1]
c0011254:	85 db                	test   ebx,ebx
c0011256:	89 15 04 c6 02 c0    	mov    DWORD PTR ds:0xc002c604,edx
c001125c:	74 20                	je     c001127e <Virt::allocateKernelVirtualPages(int)+0xe1>
c001125e:	39 df                	cmp    edi,ebx
c0011260:	75 db                	jne    c001123d <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011262:	6a 03                	push   0x3
c0011264:	43                   	inc    ebx
c0011265:	50                   	push   eax
c0011266:	e8 d9 fe ff ff       	call   c0011144 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001126b:	59                   	pop    ecx
c001126c:	39 f3                	cmp    ebx,esi
c001126e:	58                   	pop    eax
c001126f:	75 db                	jne    c001124c <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011271:	83 c4 1c             	add    esp,0x1c
c0011274:	89 e8                	mov    eax,ebp
c0011276:	5b                   	pop    ebx
c0011277:	c1 e0 0c             	shl    eax,0xc
c001127a:	5e                   	pop    esi
c001127b:	5f                   	pop    edi
c001127c:	5d                   	pop    ebp
c001127d:	c3                   	ret    
c001127e:	6a 02                	push   0x2
c0011280:	bb 01 00 00 00       	mov    ebx,0x1
c0011285:	50                   	push   eax
c0011286:	e8 b9 fe ff ff       	call   c0011144 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001128b:	58                   	pop    eax
c001128c:	5a                   	pop    edx
c001128d:	eb bd                	jmp    c001124c <Virt::allocateKernelVirtualPages(int)+0xaf>
c001128f:	6a 04                	push   0x4
c0011291:	8d 45 01             	lea    eax,[ebp+0x1]
c0011294:	55                   	push   ebp
c0011295:	a3 04 c6 02 c0       	mov    ds:0xc002c604,eax
c001129a:	e8 a5 fe ff ff       	call   c0011144 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001129f:	59                   	pop    ecx
c00112a0:	89 e8                	mov    eax,ebp
c00112a2:	5b                   	pop    ebx
c00112a3:	c1 e0 0c             	shl    eax,0xc
c00112a6:	83 c4 1c             	add    esp,0x1c
c00112a9:	5b                   	pop    ebx
c00112aa:	5e                   	pop    esi
c00112ab:	5f                   	pop    edi
c00112ac:	5d                   	pop    ebp
c00112ad:	c3                   	ret    

c00112ae <Virt::freeSwapfilePage(unsigned long)>:
c00112ae:	53                   	push   ebx
c00112af:	8b 15 cc d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7cc
c00112b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00112b9:	b8 01 00 00 00       	mov    eax,0x1
c00112be:	89 cb                	mov    ebx,ecx
c00112c0:	d3 e0                	shl    eax,cl
c00112c2:	c1 eb 05             	shr    ebx,0x5
c00112c5:	f7 d0                	not    eax
c00112c7:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00112ca:	5b                   	pop    ebx
c00112cb:	c3                   	ret    

c00112cc <Virt::swapIDToSector(unsigned long)>:
c00112cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112d0:	0f af 05 0c c6 02 c0 	imul   eax,DWORD PTR ds:0xc002c60c
c00112d7:	03 05 14 c6 02 c0    	add    eax,DWORD PTR ds:0xc002c614
c00112dd:	c3                   	ret    

c00112de <Virt::allocateSwapfilePage()>:
c00112de:	55                   	push   ebp
c00112df:	31 d2                	xor    edx,edx
c00112e1:	57                   	push   edi
c00112e2:	56                   	push   esi
c00112e3:	53                   	push   ebx
c00112e4:	83 ec 0c             	sub    esp,0xc
c00112e7:	8b 0d 0c c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c60c
c00112ed:	a1 10 c6 02 c0       	mov    eax,ds:0xc002c610
c00112f2:	f7 f1                	div    ecx
c00112f4:	39 0d 10 c6 02 c0    	cmp    DWORD PTR ds:0xc002c610,ecx
c00112fa:	72 2d                	jb     c0011329 <Virt::allocateSwapfilePage()+0x4b>
c00112fc:	8b 35 cc d7 02 c0    	mov    esi,DWORD PTR ds:0xc002d7cc
c0011302:	8b 16                	mov    edx,DWORD PTR [esi]
c0011304:	f6 c2 01             	test   dl,0x1
c0011307:	74 3c                	je     c0011345 <Virt::allocateSwapfilePage()+0x67>
c0011309:	31 c9                	xor    ecx,ecx
c001130b:	bf 01 00 00 00       	mov    edi,0x1
c0011310:	eb 12                	jmp    c0011324 <Virt::allocateSwapfilePage()+0x46>
c0011312:	89 fd                	mov    ebp,edi
c0011314:	89 ca                	mov    edx,ecx
c0011316:	d3 e5                	shl    ebp,cl
c0011318:	c1 ea 05             	shr    edx,0x5
c001131b:	8d 1c 96             	lea    ebx,[esi+edx*4]
c001131e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011320:	85 ea                	test   edx,ebp
c0011322:	74 2a                	je     c001134e <Virt::allocateSwapfilePage()+0x70>
c0011324:	41                   	inc    ecx
c0011325:	39 c8                	cmp    eax,ecx
c0011327:	77 e9                	ja     c0011312 <Virt::allocateSwapfilePage()+0x34>
c0011329:	83 ec 0c             	sub    esp,0xc
c001132c:	68 23 a2 02 c0       	push   0xc002a223
c0011331:	e8 9b 89 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c0011336:	83 c4 10             	add    esp,0x10
c0011339:	31 c9                	xor    ecx,ecx
c001133b:	83 c4 0c             	add    esp,0xc
c001133e:	89 c8                	mov    eax,ecx
c0011340:	5b                   	pop    ebx
c0011341:	5e                   	pop    esi
c0011342:	5f                   	pop    edi
c0011343:	5d                   	pop    ebp
c0011344:	c3                   	ret    
c0011345:	89 f3                	mov    ebx,esi
c0011347:	bd 01 00 00 00       	mov    ebp,0x1
c001134c:	31 c9                	xor    ecx,ecx
c001134e:	09 ea                	or     edx,ebp
c0011350:	89 c8                	mov    eax,ecx
c0011352:	89 13                	mov    DWORD PTR [ebx],edx
c0011354:	83 c4 0c             	add    esp,0xc
c0011357:	5b                   	pop    ebx
c0011358:	5e                   	pop    esi
c0011359:	5f                   	pop    edi
c001135a:	5d                   	pop    ebp
c001135b:	c3                   	ret    

c001135c <Virt::virtualMemorySetup()>:
c001135c:	53                   	push   ebx
c001135d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011362:	6a 0f                	push   0xf
c0011364:	53                   	push   ebx
c0011365:	43                   	inc    ebx
c0011366:	e8 d9 fd ff ff       	call   c0011144 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001136b:	58                   	pop    eax
c001136c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011372:	5a                   	pop    edx
c0011373:	75 ed                	jne    c0011362 <Virt::virtualMemorySetup()+0x6>
c0011375:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001137a:	6a 00                	push   0x0
c001137c:	53                   	push   ebx
c001137d:	43                   	inc    ebx
c001137e:	e8 c1 fd ff ff       	call   c0011144 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011383:	59                   	pop    ecx
c0011384:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001138a:	58                   	pop    eax
c001138b:	75 ed                	jne    c001137a <Virt::virtualMemorySetup()+0x1e>
c001138d:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011392:	6a 0f                	push   0xf
c0011394:	53                   	push   ebx
c0011395:	43                   	inc    ebx
c0011396:	e8 a9 fd ff ff       	call   c0011144 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001139b:	58                   	pop    eax
c001139c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00113a2:	5a                   	pop    edx
c00113a3:	75 ed                	jne    c0011392 <Virt::virtualMemorySetup()+0x36>
c00113a5:	5b                   	pop    ebx
c00113a6:	c3                   	ret    

c00113a7 <Virt::setupPageSwapping(int)>:
c00113a7:	57                   	push   edi
c00113a8:	56                   	push   esi
c00113a9:	53                   	push   ebx
c00113aa:	83 ec 1c             	sub    esp,0x1c
c00113ad:	68 14 01 00 00       	push   0x114
c00113b2:	e8 e2 e1 ff ff       	call   c000f599 <malloc>
c00113b7:	83 c4 0c             	add    esp,0xc
c00113ba:	89 c6                	mov    esi,eax
c00113bc:	ff 35 b0 0b 03 c0    	push   DWORD PTR ds:0xc0030bb0
c00113c2:	68 3a a2 02 c0       	push   0xc002a23a
c00113c7:	50                   	push   eax
c00113c8:	e8 03 17 00 00       	call   c0012ad0 <File::File(char const*, Process*)>
c00113cd:	89 34 24             	mov    DWORD PTR [esp],esi
c00113d0:	e8 d7 18 00 00       	call   c0012cac <File::unlink()>
c00113d5:	58                   	pop    eax
c00113d6:	5a                   	pop    edx
c00113d7:	6a 12                	push   0x12
c00113d9:	56                   	push   esi
c00113da:	e8 55 17 00 00       	call   c0012b34 <File::open(FileOpenMode)>
c00113df:	83 c4 10             	add    esp,0x10
c00113e2:	85 c0                	test   eax,eax
c00113e4:	0f 85 2f 01 00 00    	jne    c0011519 <Virt::setupPageSwapping(int)+0x172>
c00113ea:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00113ee:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00113f6:	c1 e3 08             	shl    ebx,0x8
c00113f9:	83 ec 0c             	sub    esp,0xc
c00113fc:	68 00 00 01 00       	push   0x10000
c0011401:	e8 93 e1 ff ff       	call   c000f599 <malloc>
c0011406:	83 c4 0c             	add    esp,0xc
c0011409:	89 c7                	mov    edi,eax
c001140b:	68 00 00 01 00       	push   0x10000
c0011410:	68 ee 00 00 00       	push   0xee
c0011415:	50                   	push   eax
c0011416:	e8 35 f3 fe ff       	call   c0000750 <memset>
c001141b:	83 c4 10             	add    esp,0x10
c001141e:	85 db                	test   ebx,ebx
c0011420:	79 03                	jns    c0011425 <Virt::setupPageSwapping(int)+0x7e>
c0011422:	83 c3 0f             	add    ebx,0xf
c0011425:	c1 fb 04             	sar    ebx,0x4
c0011428:	4b                   	dec    ebx
c0011429:	83 fb ff             	cmp    ebx,0xffffffff
c001142c:	74 41                	je     c001146f <Virt::setupPageSwapping(int)+0xc8>
c001142e:	83 ec 0c             	sub    esp,0xc
c0011431:	8b 06                	mov    eax,DWORD PTR [esi]
c0011433:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011437:	52                   	push   edx
c0011438:	57                   	push   edi
c0011439:	6a 00                	push   0x0
c001143b:	68 00 00 01 00       	push   0x10000
c0011440:	56                   	push   esi
c0011441:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011444:	83 c4 20             	add    esp,0x20
c0011447:	85 c0                	test   eax,eax
c0011449:	0f 85 b5 00 00 00    	jne    c0011504 <Virt::setupPageSwapping(int)+0x15d>
c001144f:	81 7c 24 0c 00 00 01 00 	cmp    DWORD PTR [esp+0xc],0x10000
c0011457:	74 cf                	je     c0011428 <Virt::setupPageSwapping(int)+0x81>
c0011459:	83 ec 0c             	sub    esp,0xc
c001145c:	4b                   	dec    ebx
c001145d:	68 6c a2 02 c0       	push   0xc002a26c
c0011462:	e8 6a 88 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c0011467:	83 c4 10             	add    esp,0x10
c001146a:	83 fb ff             	cmp    ebx,0xffffffff
c001146d:	75 bf                	jne    c001142e <Virt::setupPageSwapping(int)+0x87>
c001146f:	83 ec 0c             	sub    esp,0xc
c0011472:	56                   	push   esi
c0011473:	e8 1a 17 00 00       	call   c0012b92 <File::close()>
c0011478:	89 3c 24             	mov    DWORD PTR [esp],edi
c001147b:	e8 39 e1 ff ff       	call   c000f5b9 <rfree>
c0011480:	83 c4 10             	add    esp,0x10
c0011483:	85 f6                	test   esi,esi
c0011485:	74 0c                	je     c0011493 <Virt::setupPageSwapping(int)+0xec>
c0011487:	83 ec 0c             	sub    esp,0xc
c001148a:	8b 06                	mov    eax,DWORD PTR [esi]
c001148c:	56                   	push   esi
c001148d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011490:	83 c4 10             	add    esp,0x10
c0011493:	83 ec 08             	sub    esp,0x8
c0011496:	a1 68 dc 02 c0       	mov    eax,ds:0xc002dc68
c001149b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00114a1:	8b 10                	mov    edx,DWORD PTR [eax]
c00114a3:	68 3a a2 02 c0       	push   0xc002a23a
c00114a8:	50                   	push   eax
c00114a9:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00114ac:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00114b0:	c6 05 18 c6 02 c0 43 	mov    BYTE PTR ds:0xc002c618,0x43
c00114b7:	c1 e2 0b             	shl    edx,0xb
c00114ba:	a3 14 c6 02 c0       	mov    ds:0xc002c614,eax
c00114bf:	89 15 10 c6 02 c0    	mov    DWORD PTR ds:0xc002c610,edx
c00114c5:	c7 05 0c c6 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002c60c,0x8
c00114cf:	c1 ea 08             	shr    edx,0x8
c00114d2:	89 14 24             	mov    DWORD PTR [esp],edx
c00114d5:	e8 bf e0 ff ff       	call   c000f599 <malloc>
c00114da:	83 c4 0c             	add    esp,0xc
c00114dd:	89 c1                	mov    ecx,eax
c00114df:	a3 cc d7 02 c0       	mov    ds:0xc002d7cc,eax
c00114e4:	31 d2                	xor    edx,edx
c00114e6:	a1 10 c6 02 c0       	mov    eax,ds:0xc002c610
c00114eb:	f7 35 0c c6 02 c0    	div    DWORD PTR ds:0xc002c60c
c00114f1:	c1 e8 05             	shr    eax,0x5
c00114f4:	50                   	push   eax
c00114f5:	6a 00                	push   0x0
c00114f7:	51                   	push   ecx
c00114f8:	e8 53 f2 fe ff       	call   c0000750 <memset>
c00114fd:	83 c4 20             	add    esp,0x20
c0011500:	5b                   	pop    ebx
c0011501:	5e                   	pop    esi
c0011502:	5f                   	pop    edi
c0011503:	c3                   	ret    
c0011504:	83 ec 0c             	sub    esp,0xc
c0011507:	68 6c a2 02 c0       	push   0xc002a26c
c001150c:	e8 c0 87 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c0011511:	83 c4 10             	add    esp,0x10
c0011514:	e9 36 ff ff ff       	jmp    c001144f <Virt::setupPageSwapping(int)+0xa8>
c0011519:	83 ec 0c             	sub    esp,0xc
c001151c:	68 51 a2 02 c0       	push   0xc002a251
c0011521:	e8 ab 87 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c0011526:	83 c4 10             	add    esp,0x10
c0011529:	e9 bc fe ff ff       	jmp    c00113ea <Virt::setupPageSwapping(int)+0x43>

c001152e <VAS::VAS()>:
c001152e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011532:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011539:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001153d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011544:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011548:	a3 d0 d7 02 c0       	mov    ds:0xc002d7d0,eax
c001154d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011551:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011555:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011559:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001155c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011560:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011567:	90                   	nop
c0011568:	c3                   	ret    
c0011569:	90                   	nop

c001156a <VAS::VAS(VAS*)>:
c001156a:	83 ec 0c             	sub    esp,0xc
c001156d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011571:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001157c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011583:	83 ec 0c             	sub    esp,0xc
c0011586:	68 bc a0 02 c0       	push   0xc002a0bc
c001158b:	e8 41 87 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c0011590:	83 c4 10             	add    esp,0x10
c0011593:	90                   	nop
c0011594:	83 c4 0c             	add    esp,0xc
c0011597:	c3                   	ret    

c0011598 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011598:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001159c:	89 c2                	mov    edx,eax
c001159e:	c1 e8 0a             	shr    eax,0xa
c00115a1:	c1 ea 16             	shr    edx,0x16
c00115a4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00115a9:	19 c9                	sbb    ecx,ecx
c00115ab:	c1 e2 0c             	shl    edx,0xc
c00115ae:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00115b4:	25 fc 0f 00 00       	and    eax,0xffc
c00115b9:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00115c0:	01 d0                	add    eax,edx
c00115c2:	c3                   	ret    
c00115c3:	90                   	nop

c00115c4 <VAS::getPageTableEntry(unsigned long)>:
c00115c4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00115c8:	89 ca                	mov    edx,ecx
c00115ca:	c1 e9 0a             	shr    ecx,0xa
c00115cd:	c1 ea 16             	shr    edx,0x16
c00115d0:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00115d6:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00115dc:	c1 e0 0c             	shl    eax,0xc
c00115df:	8d 04 08             	lea    eax,[eax+ecx*1]
c00115e2:	c3                   	ret    

c00115e3 <Virt::freeKernelVirtualPages(unsigned long)>:
c00115e3:	57                   	push   edi
c00115e4:	56                   	push   esi
c00115e5:	be 01 00 00 00       	mov    esi,0x1
c00115ea:	53                   	push   ebx
c00115eb:	83 ec 10             	sub    esp,0x10
c00115ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00115f2:	c1 eb 0c             	shr    ebx,0xc
c00115f5:	eb 3f                	jmp    c0011636 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00115f7:	83 ec 08             	sub    esp,0x8
c00115fa:	57                   	push   edi
c00115fb:	ff 35 d0 d7 02 c0    	push   DWORD PTR ds:0xc002d7d0
c0011601:	e8 be ff ff ff       	call   c00115c4 <VAS::getPageTableEntry(unsigned long)>
c0011606:	83 c4 10             	add    esp,0x10
c0011609:	8b 00                	mov    eax,DWORD PTR [eax]
c001160b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001160f:	f6 c4 04             	test   ah,0x4
c0011612:	75 5f                	jne    c0011673 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011614:	80 fa 04             	cmp    dl,0x4
c0011617:	74 78                	je     c0011691 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011619:	80 fa 02             	cmp    dl,0x2
c001161c:	0f 84 88 00 00 00    	je     c00116aa <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011622:	80 fa 03             	cmp    dl,0x3
c0011625:	0f 84 ad 00 00 00    	je     c00116d8 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c001162b:	fe ca                	dec    dl
c001162d:	0f 84 92 00 00 00    	je     c00116c5 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011633:	43                   	inc    ebx
c0011634:	31 f6                	xor    esi,esi
c0011636:	53                   	push   ebx
c0011637:	89 df                	mov    edi,ebx
c0011639:	e8 3b fb ff ff       	call   c0011179 <Virt::getPageState(unsigned long)>
c001163e:	c1 e7 0c             	shl    edi,0xc
c0011641:	59                   	pop    ecx
c0011642:	84 c0                	test   al,al
c0011644:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011648:	75 ad                	jne    c00115f7 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c001164a:	83 ec 0c             	sub    esp,0xc
c001164d:	68 72 a2 02 c0       	push   0xc002a272
c0011652:	e8 7a 86 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c0011657:	58                   	pop    eax
c0011658:	5a                   	pop    edx
c0011659:	57                   	push   edi
c001165a:	ff 35 d0 d7 02 c0    	push   DWORD PTR ds:0xc002d7d0
c0011660:	e8 5f ff ff ff       	call   c00115c4 <VAS::getPageTableEntry(unsigned long)>
c0011665:	83 c4 10             	add    esp,0x10
c0011668:	8b 00                	mov    eax,DWORD PTR [eax]
c001166a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001166e:	f6 c4 04             	test   ah,0x4
c0011671:	74 c0                	je     c0011633 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011673:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011677:	25 00 f0 ff ff       	and    eax,0xfffff000
c001167c:	83 ec 0c             	sub    esp,0xc
c001167f:	50                   	push   eax
c0011680:	e8 5d e2 ff ff       	call   c000f8e2 <Phys::freePage(unsigned long)>
c0011685:	83 c4 10             	add    esp,0x10
c0011688:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001168c:	80 fa 04             	cmp    dl,0x4
c001168f:	75 88                	jne    c0011619 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011691:	89 f0                	mov    eax,esi
c0011693:	84 c0                	test   al,al
c0011695:	75 47                	jne    c00116de <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011697:	c7 44 24 20 e0 a0 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a0e0
c001169f:	83 c4 10             	add    esp,0x10
c00116a2:	5b                   	pop    ebx
c00116a3:	5e                   	pop    esi
c00116a4:	5f                   	pop    edi
c00116a5:	e9 27 86 00 00       	jmp    c0019cd1 <Krnl::panic(char const*)>
c00116aa:	89 f0                	mov    eax,esi
c00116ac:	84 c0                	test   al,al
c00116ae:	75 15                	jne    c00116c5 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00116b0:	83 ec 0c             	sub    esp,0xc
c00116b3:	68 8e a2 02 c0       	push   0xc002a28e
c00116b8:	e8 14 86 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c00116bd:	83 c4 10             	add    esp,0x10
c00116c0:	e9 6e ff ff ff       	jmp    c0011633 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116c5:	83 ec 08             	sub    esp,0x8
c00116c8:	6a 00                	push   0x0
c00116ca:	53                   	push   ebx
c00116cb:	e8 74 fa ff ff       	call   c0011144 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116d0:	83 c4 10             	add    esp,0x10
c00116d3:	e9 5b ff ff ff       	jmp    c0011633 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116d8:	89 f0                	mov    eax,esi
c00116da:	84 c0                	test   al,al
c00116dc:	75 15                	jne    c00116f3 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00116de:	83 ec 08             	sub    esp,0x8
c00116e1:	6a 00                	push   0x0
c00116e3:	53                   	push   ebx
c00116e4:	e8 5b fa ff ff       	call   c0011144 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116e9:	83 c4 10             	add    esp,0x10
c00116ec:	83 c4 10             	add    esp,0x10
c00116ef:	5b                   	pop    ebx
c00116f0:	5e                   	pop    esi
c00116f1:	5f                   	pop    edi
c00116f2:	c3                   	ret    
c00116f3:	c7 44 24 20 aa a2 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a2aa
c00116fb:	83 c4 10             	add    esp,0x10
c00116fe:	5b                   	pop    ebx
c00116ff:	5e                   	pop    esi
c0011700:	5f                   	pop    edi
c0011701:	e9 cb 85 00 00       	jmp    c0019cd1 <Krnl::panic(char const*)>

c0011706 <VAS::freeAllocatedPages(unsigned long)>:
c0011706:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001170a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001170e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011712:	74 09                	je     c001171d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011714:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011718:	e9 c6 fe ff ff       	jmp    c00115e3 <Virt::freeKernelVirtualPages(unsigned long)>
c001171d:	c7 44 24 04 04 a1 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a104
c0011725:	e9 47 0e 00 00       	jmp    c0012571 <Dbg::kprintf(char const*, ...)>

c001172a <VAS::virtualToPhysical(unsigned long)>:
c001172a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001172e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011732:	e8 8d fe ff ff       	call   c00115c4 <VAS::getPageTableEntry(unsigned long)>
c0011737:	5a                   	pop    edx
c0011738:	8b 00                	mov    eax,DWORD PTR [eax]
c001173a:	59                   	pop    ecx
c001173b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011740:	c3                   	ret    
c0011741:	90                   	nop

c0011742 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011742:	55                   	push   ebp
c0011743:	57                   	push   edi
c0011744:	56                   	push   esi
c0011745:	53                   	push   ebx
c0011746:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001174a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001174e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011752:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011756:	85 db                	test   ebx,ebx
c0011758:	7e 22                	jle    c001177c <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c001175a:	c1 e3 0c             	shl    ebx,0xc
c001175d:	01 f3                	add    ebx,esi
c001175f:	56                   	push   esi
c0011760:	81 c6 00 10 00 00    	add    esi,0x1000
c0011766:	55                   	push   ebp
c0011767:	e8 58 fe ff ff       	call   c00115c4 <VAS::getPageTableEntry(unsigned long)>
c001176c:	5a                   	pop    edx
c001176d:	59                   	pop    ecx
c001176e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011770:	21 f9                	and    ecx,edi
c0011772:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011776:	39 f3                	cmp    ebx,esi
c0011778:	89 08                	mov    DWORD PTR [eax],ecx
c001177a:	75 e3                	jne    c001175f <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c001177c:	5b                   	pop    ebx
c001177d:	5e                   	pop    esi
c001177e:	5f                   	pop    edi
c001177f:	5d                   	pop    ebp
c0011780:	c3                   	ret    
c0011781:	90                   	nop

c0011782 <VAS::setToWriteCombining(unsigned long, int)>:
c0011782:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c0011787:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001178d:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011794:	75 01                	jne    c0011797 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011796:	c3                   	ret    
c0011797:	68 80 00 00 00       	push   0x80
c001179c:	6a ff                	push   0xffffffff
c001179e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117aa:	e8 93 ff ff ff       	call   c0011742 <VAS::reflagRange(unsigned long, int, int, int)>
c00117af:	83 c4 14             	add    esp,0x14
c00117b2:	c3                   	ret    
c00117b3:	90                   	nop

c00117b4 <VAS::mapOtherVASIn(bool, VAS*)>:
c00117b4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00117b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117bd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00117c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117c4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00117c7:	19 c0                	sbb    eax,eax
c00117c9:	83 ca 03             	or     edx,0x3
c00117cc:	83 e0 fc             	and    eax,0xfffffffc
c00117cf:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00117d6:	0f 20 d8             	mov    eax,cr3
c00117d9:	0f 22 d8             	mov    cr3,eax
c00117dc:	c3                   	ret    
c00117dd:	90                   	nop

c00117de <VAS::~VAS()>:
c00117de:	83 ec 2c             	sub    esp,0x2c
c00117e1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00117e9:	fa                   	cli    
c00117ea:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c00117ef:	40                   	inc    eax
c00117f0:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c00117f5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00117fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00117fc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00117ff:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011805:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011809:	6a 01                	push   0x1
c001180b:	50                   	push   eax
c001180c:	e8 a3 ff ff ff       	call   c00117b4 <VAS::mapOtherVASIn(bool, VAS*)>
c0011811:	83 c4 0c             	add    esp,0xc
c0011814:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001181c:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011824:	0f 8f d4 00 00 00    	jg     c00118fe <VAS::~VAS()+0x120>
c001182a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001182e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011831:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011835:	c1 e2 02             	shl    edx,0x2
c0011838:	01 d0                	add    eax,edx
c001183a:	8b 00                	mov    eax,DWORD PTR [eax]
c001183c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011844:	83 e0 01             	and    eax,0x1
c0011847:	0f 84 a8 00 00 00    	je     c00118f5 <VAS::~VAS()+0x117>
c001184d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011855:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001185d:	7f 72                	jg     c00118d1 <VAS::~VAS()+0xf3>
c001185f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011863:	c1 e0 0a             	shl    eax,0xa
c0011866:	89 c2                	mov    edx,eax
c0011868:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001186c:	01 d0                	add    eax,edx
c001186e:	c1 e0 0c             	shl    eax,0xc
c0011871:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011875:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001187a:	8b 00                	mov    eax,DWORD PTR [eax]
c001187c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001187f:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011885:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0011889:	6a 01                	push   0x1
c001188b:	50                   	push   eax
c001188c:	e8 07 fd ff ff       	call   c0011598 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011891:	83 c4 0c             	add    esp,0xc
c0011894:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011898:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001189c:	8b 00                	mov    eax,DWORD PTR [eax]
c001189e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118a6:	25 01 04 00 00       	and    eax,0x401
c00118ab:	3d 01 04 00 00       	cmp    eax,0x401
c00118b0:	75 19                	jne    c00118cb <VAS::~VAS()+0xed>
c00118b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118b6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118bb:	83 ec 0c             	sub    esp,0xc
c00118be:	50                   	push   eax
c00118bf:	e8 1e e0 ff ff       	call   c000f8e2 <Phys::freePage(unsigned long)>
c00118c4:	83 c4 10             	add    esp,0x10
c00118c7:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118cb:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00118cf:	eb 84                	jmp    c0011855 <VAS::~VAS()+0x77>
c00118d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118d5:	25 00 04 00 00       	and    eax,0x400
c00118da:	74 19                	je     c00118f5 <VAS::~VAS()+0x117>
c00118dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118e0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118e5:	83 ec 0c             	sub    esp,0xc
c00118e8:	50                   	push   eax
c00118e9:	e8 f4 df ff ff       	call   c000f8e2 <Phys::freePage(unsigned long)>
c00118ee:	83 c4 10             	add    esp,0x10
c00118f1:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118f5:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00118f9:	e9 1e ff ff ff       	jmp    c001181c <VAS::~VAS()+0x3e>
c00118fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011902:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011905:	83 ec 0c             	sub    esp,0xc
c0011908:	50                   	push   eax
c0011909:	e8 d5 fc ff ff       	call   c00115e3 <Virt::freeKernelVirtualPages(unsigned long)>
c001190e:	83 c4 10             	add    esp,0x10
c0011911:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011915:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011918:	83 ec 0c             	sub    esp,0xc
c001191b:	50                   	push   eax
c001191c:	e8 c1 df ff ff       	call   c000f8e2 <Phys::freePage(unsigned long)>
c0011921:	83 c4 10             	add    esp,0x10
c0011924:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011928:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001192c:	c1 e0 02             	shl    eax,0x2
c001192f:	83 ec 08             	sub    esp,0x8
c0011932:	50                   	push   eax
c0011933:	68 28 a1 02 c0       	push   0xc002a128
c0011938:	e8 34 0c 00 00       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c001193d:	83 c4 10             	add    esp,0x10
c0011940:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c0011945:	48                   	dec    eax
c0011946:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c001194b:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c0011950:	85 c0                	test   eax,eax
c0011952:	75 01                	jne    c0011955 <VAS::~VAS()+0x177>
c0011954:	fb                   	sti    
c0011955:	90                   	nop
c0011956:	83 c4 2c             	add    esp,0x2c
c0011959:	c3                   	ret    

c001195a <VAS::mapPage(unsigned long, unsigned long, int)>:
c001195a:	55                   	push   ebp
c001195b:	57                   	push   edi
c001195c:	56                   	push   esi
c001195d:	53                   	push   ebx
c001195e:	83 ec 1c             	sub    esp,0x1c
c0011961:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011965:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011969:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001196f:	77 08                	ja     c0011979 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011971:	0f 20 d8             	mov    eax,cr3
c0011974:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0011977:	75 47                	jne    c00119c0 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011979:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001197d:	09 d8                	or     eax,ebx
c001197f:	a9 ff 0f 00 00       	test   eax,0xfff
c0011984:	75 57                	jne    c00119dd <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011986:	89 de                	mov    esi,ebx
c0011988:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001198b:	c1 ee 16             	shr    esi,0x16
c001198e:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011995:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011999:	74 54                	je     c00119ef <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c001199b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001199f:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00119a5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00119a9:	c1 e6 0c             	shl    esi,0xc
c00119ac:	c1 eb 0a             	shr    ebx,0xa
c00119af:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00119b5:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00119b8:	83 c4 1c             	add    esp,0x1c
c00119bb:	5b                   	pop    ebx
c00119bc:	5e                   	pop    esi
c00119bd:	5f                   	pop    edi
c00119be:	5d                   	pop    ebp
c00119bf:	c3                   	ret    
c00119c0:	83 ec 0c             	sub    esp,0xc
c00119c3:	68 48 a1 02 c0       	push   0xc002a148
c00119c8:	e8 a4 0b 00 00       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c00119cd:	83 c4 10             	add    esp,0x10
c00119d0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119d4:	09 d8                	or     eax,ebx
c00119d6:	a9 ff 0f 00 00       	test   eax,0xfff
c00119db:	74 a9                	je     c0011986 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00119dd:	83 ec 0c             	sub    esp,0xc
c00119e0:	68 b0 a1 02 c0       	push   0xc002a1b0
c00119e5:	e8 e7 82 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c00119ea:	83 c4 10             	add    esp,0x10
c00119ed:	eb 97                	jmp    c0011986 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00119ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00119f3:	e8 45 df ff ff       	call   c000f93d <Phys::allocatePage()>
c00119f8:	83 ec 0c             	sub    esp,0xc
c00119fb:	89 c5                	mov    ebp,eax
c00119fd:	8b 0d d0 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d7d0
c0011a03:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011a07:	6a 01                	push   0x1
c0011a09:	e8 8f f7 ff ff       	call   c001119d <Virt::allocateKernelVirtualPages(int)>
c0011a0e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011a15:	6a 01                	push   0x1
c0011a17:	50                   	push   eax
c0011a18:	55                   	push   ebp
c0011a19:	81 cd 07 04 00 00    	or     ebp,0x407
c0011a1f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011a23:	51                   	push   ecx
c0011a24:	e8 27 02 00 00       	call   c0011c50 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a29:	83 c4 1c             	add    esp,0x1c
c0011a2c:	68 00 10 00 00       	push   0x1000
c0011a31:	6a 00                	push   0x0
c0011a33:	50                   	push   eax
c0011a34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011a38:	e8 13 ed fe ff       	call   c0000750 <memset>
c0011a3d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011a41:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011a44:	e8 9a fb ff ff       	call   c00115e3 <Virt::freeKernelVirtualPages(unsigned long)>
c0011a49:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011a4d:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011a50:	83 c4 10             	add    esp,0x10
c0011a53:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011a56:	e9 40 ff ff ff       	jmp    c001199b <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011a5b:	90                   	nop

c0011a5c <VAS::allocatePages(int, int)>:
c0011a5c:	55                   	push   ebp
c0011a5d:	57                   	push   edi
c0011a5e:	56                   	push   esi
c0011a5f:	53                   	push   ebx
c0011a60:	83 ec 1c             	sub    esp,0x1c
c0011a63:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011a67:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c0011a6c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011a72:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011a78:	83 e0 01             	and    eax,0x1
c0011a7b:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011a7f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011a83:	0f 85 cc 00 00 00    	jne    c0011b55 <VAS::allocatePages(int, int)+0xf9>
c0011a89:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a90:	85 c0                	test   eax,eax
c0011a92:	0f 84 a1 00 00 00    	je     c0011b39 <VAS::allocatePages(int, int)+0xdd>
c0011a98:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011a9c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011aa0:	c1 e6 0c             	shl    esi,0xc
c0011aa3:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011aa7:	85 c0                	test   eax,eax
c0011aa9:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011aac:	7e 33                	jle    c0011ae1 <VAS::allocatePages(int, int)+0x85>
c0011aae:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011ab2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ab6:	81 cd 00 04 00 00    	or     ebp,0x400
c0011abc:	e8 7c de ff ff       	call   c000f93d <Phys::allocatePage()>
c0011ac1:	55                   	push   ebp
c0011ac2:	53                   	push   ebx
c0011ac3:	50                   	push   eax
c0011ac4:	57                   	push   edi
c0011ac5:	e8 90 fe ff ff       	call   c001195a <VAS::mapPage(unsigned long, unsigned long, int)>
c0011aca:	83 c4 10             	add    esp,0x10
c0011acd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ad2:	74 03                	je     c0011ad7 <VAS::allocatePages(int, int)+0x7b>
c0011ad4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ad7:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011add:	39 de                	cmp    esi,ebx
c0011adf:	75 db                	jne    c0011abc <VAS::allocatePages(int, int)+0x60>
c0011ae1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ae6:	75 12                	jne    c0011afa <VAS::allocatePages(int, int)+0x9e>
c0011ae8:	0f 20 d8             	mov    eax,cr3
c0011aeb:	0f 22 d8             	mov    cr3,eax
c0011aee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011af2:	83 c4 1c             	add    esp,0x1c
c0011af5:	5b                   	pop    ebx
c0011af6:	5e                   	pop    esi
c0011af7:	5f                   	pop    edi
c0011af8:	5d                   	pop    ebp
c0011af9:	c3                   	ret    
c0011afa:	c1 ee 0a             	shr    esi,0xa
c0011afd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b01:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011b07:	c1 eb 0a             	shr    ebx,0xa
c0011b0a:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011b10:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011b16:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011b1c:	39 c3                	cmp    ebx,eax
c0011b1e:	77 ce                	ja     c0011aee <VAS::allocatePages(int, int)+0x92>
c0011b20:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b23:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b29:	39 d8                	cmp    eax,ebx
c0011b2b:	73 f3                	jae    c0011b20 <VAS::allocatePages(int, int)+0xc4>
c0011b2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b31:	83 c4 1c             	add    esp,0x1c
c0011b34:	5b                   	pop    ebx
c0011b35:	5e                   	pop    esi
c0011b36:	5f                   	pop    edi
c0011b37:	5d                   	pop    ebp
c0011b38:	c3                   	ret    
c0011b39:	83 ec 0c             	sub    esp,0xc
c0011b3c:	68 d4 a1 02 c0       	push   0xc002a1d4
c0011b41:	e8 8b 81 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c0011b46:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011b49:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b4d:	83 c4 10             	add    esp,0x10
c0011b50:	e9 43 ff ff ff       	jmp    c0011a98 <VAS::allocatePages(int, int)+0x3c>
c0011b55:	83 ec 0c             	sub    esp,0xc
c0011b58:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011b5c:	e8 3c f6 ff ff       	call   c001119d <Virt::allocateKernelVirtualPages(int)>
c0011b61:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b65:	83 c4 10             	add    esp,0x10
c0011b68:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011b6d:	0f 87 9b 00 00 00    	ja     c0011c0e <VAS::allocatePages(int, int)+0x1b2>
c0011b73:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011b77:	85 d2                	test   edx,edx
c0011b79:	7e 3c                	jle    c0011bb7 <VAS::allocatePages(int, int)+0x15b>
c0011b7b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011b7f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011b83:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b87:	c1 e5 0c             	shl    ebp,0xc
c0011b8a:	81 ce 00 04 00 00    	or     esi,0x400
c0011b90:	01 dd                	add    ebp,ebx
c0011b92:	e8 a6 dd ff ff       	call   c000f93d <Phys::allocatePage()>
c0011b97:	56                   	push   esi
c0011b98:	53                   	push   ebx
c0011b99:	50                   	push   eax
c0011b9a:	57                   	push   edi
c0011b9b:	e8 ba fd ff ff       	call   c001195a <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ba0:	83 c4 10             	add    esp,0x10
c0011ba3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ba8:	74 03                	je     c0011bad <VAS::allocatePages(int, int)+0x151>
c0011baa:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bad:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bb3:	39 dd                	cmp    ebp,ebx
c0011bb5:	75 db                	jne    c0011b92 <VAS::allocatePages(int, int)+0x136>
c0011bb7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bbc:	0f 84 26 ff ff ff    	je     c0011ae8 <VAS::allocatePages(int, int)+0x8c>
c0011bc2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011bc6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011bca:	89 d3                	mov    ebx,edx
c0011bcc:	c1 e0 0c             	shl    eax,0xc
c0011bcf:	c1 eb 0a             	shr    ebx,0xa
c0011bd2:	01 d0                	add    eax,edx
c0011bd4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011bda:	c1 e8 0a             	shr    eax,0xa
c0011bdd:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011be3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011be8:	2d 00 00 40 00       	sub    eax,0x400000
c0011bed:	39 c3                	cmp    ebx,eax
c0011bef:	0f 87 f9 fe ff ff    	ja     c0011aee <VAS::allocatePages(int, int)+0x92>
c0011bf5:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bf8:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bfe:	39 d8                	cmp    eax,ebx
c0011c00:	73 f3                	jae    c0011bf5 <VAS::allocatePages(int, int)+0x199>
c0011c02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c06:	83 c4 1c             	add    esp,0x1c
c0011c09:	5b                   	pop    ebx
c0011c0a:	5e                   	pop    esi
c0011c0b:	5f                   	pop    edi
c0011c0c:	5d                   	pop    ebp
c0011c0d:	c3                   	ret    
c0011c0e:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c0011c13:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c19:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011c20:	0f 84 4d ff ff ff    	je     c0011b73 <VAS::allocatePages(int, int)+0x117>
c0011c26:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011c2e:	e9 40 ff ff ff       	jmp    c0011b73 <VAS::allocatePages(int, int)+0x117>
c0011c33:	90                   	nop

c0011c34 <VAS::setCPUSpecific(unsigned long)>:
c0011c34:	83 ec 0c             	sub    esp,0xc
c0011c37:	6a 05                	push   0x5
c0011c39:	68 00 00 40 c2       	push   0xc2400000
c0011c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c46:	e8 0f fd ff ff       	call   c001195a <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c4b:	83 c4 1c             	add    esp,0x1c
c0011c4e:	c3                   	ret    
c0011c4f:	90                   	nop

c0011c50 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011c50:	55                   	push   ebp
c0011c51:	57                   	push   edi
c0011c52:	56                   	push   esi
c0011c53:	53                   	push   ebx
c0011c54:	83 ec 1c             	sub    esp,0x1c
c0011c57:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c0011c5c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011c60:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c66:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011c6a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011c70:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011c74:	83 e0 01             	and    eax,0x1
c0011c77:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011c7b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c7f:	85 c0                	test   eax,eax
c0011c81:	7e 39                	jle    c0011cbc <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011c83:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c87:	89 f3                	mov    ebx,esi
c0011c89:	c1 e0 0c             	shl    eax,0xc
c0011c8c:	01 f0                	add    eax,esi
c0011c8e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c92:	55                   	push   ebp
c0011c93:	53                   	push   ebx
c0011c94:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c98:	29 f0                	sub    eax,esi
c0011c9a:	01 d8                	add    eax,ebx
c0011c9c:	50                   	push   eax
c0011c9d:	57                   	push   edi
c0011c9e:	e8 b7 fc ff ff       	call   c001195a <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ca3:	83 c4 10             	add    esp,0x10
c0011ca6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011cab:	74 03                	je     c0011cb0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011cad:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011cb0:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011cb6:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011cba:	75 d6                	jne    c0011c92 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0011cbc:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011cc1:	75 10                	jne    c0011cd3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0011cc3:	0f 20 d8             	mov    eax,cr3
c0011cc6:	0f 22 d8             	mov    cr3,eax
c0011cc9:	83 c4 1c             	add    esp,0x1c
c0011ccc:	89 f0                	mov    eax,esi
c0011cce:	5b                   	pop    ebx
c0011ccf:	5e                   	pop    esi
c0011cd0:	5f                   	pop    edi
c0011cd1:	5d                   	pop    ebp
c0011cd2:	c3                   	ret    
c0011cd3:	89 f3                	mov    ebx,esi
c0011cd5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011cd9:	c1 eb 0a             	shr    ebx,0xa
c0011cdc:	c1 e0 0c             	shl    eax,0xc
c0011cdf:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011ce5:	01 f0                	add    eax,esi
c0011ce7:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011ced:	c1 e8 0a             	shr    eax,0xa
c0011cf0:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011cf5:	2d 00 00 40 00       	sub    eax,0x400000
c0011cfa:	39 c3                	cmp    ebx,eax
c0011cfc:	77 cb                	ja     c0011cc9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0011cfe:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d01:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d07:	39 d8                	cmp    eax,ebx
c0011d09:	73 f3                	jae    c0011cfe <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0011d0b:	83 c4 1c             	add    esp,0x1c
c0011d0e:	89 f0                	mov    eax,esi
c0011d10:	5b                   	pop    ebx
c0011d11:	5e                   	pop    esi
c0011d12:	5f                   	pop    edi
c0011d13:	5d                   	pop    ebp
c0011d14:	c3                   	ret    
c0011d15:	90                   	nop

c0011d16 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011d16:	55                   	push   ebp
c0011d17:	57                   	push   edi
c0011d18:	56                   	push   esi
c0011d19:	53                   	push   ebx
c0011d1a:	83 ec 1c             	sub    esp,0x1c
c0011d1d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d21:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011d25:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011d29:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011d2d:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d32:	75 4a                	jne    c0011d7e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011d34:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011d38:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011d3b:	c1 eb 16             	shr    ebx,0x16
c0011d3e:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011d45:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011d49:	74 4d                	je     c0011d98 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011d4b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d4f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011d53:	c1 e8 0a             	shr    eax,0xa
c0011d56:	80 fa 01             	cmp    dl,0x1
c0011d59:	19 d2                	sbb    edx,edx
c0011d5b:	c1 e3 0c             	shl    ebx,0xc
c0011d5e:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011d62:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011d68:	25 fc 0f 00 00       	and    eax,0xffc
c0011d6d:	01 d8                	add    eax,ebx
c0011d6f:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011d76:	83 c4 1c             	add    esp,0x1c
c0011d79:	5b                   	pop    ebx
c0011d7a:	5e                   	pop    esi
c0011d7b:	5f                   	pop    edi
c0011d7c:	5d                   	pop    ebp
c0011d7d:	c3                   	ret    
c0011d7e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011d82:	83 ec 0c             	sub    esp,0xc
c0011d85:	68 00 a2 02 c0       	push   0xc002a200
c0011d8a:	e8 42 7f 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c0011d8f:	83 c4 10             	add    esp,0x10
c0011d92:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011d96:	eb 9c                	jmp    c0011d34 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011d98:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011d9c:	e8 9c db ff ff       	call   c000f93d <Phys::allocatePage()>
c0011da1:	83 ec 0c             	sub    esp,0xc
c0011da4:	89 c5                	mov    ebp,eax
c0011da6:	8b 0d d0 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d7d0
c0011dac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011db0:	6a 01                	push   0x1
c0011db2:	e8 e6 f3 ff ff       	call   c001119d <Virt::allocateKernelVirtualPages(int)>
c0011db7:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011dbe:	6a 01                	push   0x1
c0011dc0:	50                   	push   eax
c0011dc1:	55                   	push   ebp
c0011dc2:	81 cd 07 04 00 00    	or     ebp,0x407
c0011dc8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011dcc:	51                   	push   ecx
c0011dcd:	e8 7e fe ff ff       	call   c0011c50 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011dd2:	83 c4 1c             	add    esp,0x1c
c0011dd5:	68 00 10 00 00       	push   0x1000
c0011dda:	6a 00                	push   0x0
c0011ddc:	50                   	push   eax
c0011ddd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011de1:	e8 6a e9 fe ff       	call   c0000750 <memset>
c0011de6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011dea:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011ded:	e8 f1 f7 ff ff       	call   c00115e3 <Virt::freeKernelVirtualPages(unsigned long)>
c0011df2:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011df5:	83 c4 10             	add    esp,0x10
c0011df8:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011dfb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011dff:	e9 47 ff ff ff       	jmp    c0011d4b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0011e04 <VAS::VAS(bool)>:
c0011e04:	53                   	push   ebx
c0011e05:	83 ec 28             	sub    esp,0x28
c0011e08:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e0c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011e10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e14:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e1f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e2a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011e2e:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011e31:	e8 07 db ff ff       	call   c000f93d <Phys::allocatePage()>
c0011e36:	89 c2                	mov    edx,eax
c0011e38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e3c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0011e3f:	8b 1d d0 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d7d0
c0011e45:	83 ec 0c             	sub    esp,0xc
c0011e48:	6a 01                	push   0x1
c0011e4a:	e8 4e f3 ff ff       	call   c001119d <Virt::allocateKernelVirtualPages(int)>
c0011e4f:	83 c4 10             	add    esp,0x10
c0011e52:	89 c2                	mov    edx,eax
c0011e54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e58:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011e5b:	83 ec 0c             	sub    esp,0xc
c0011e5e:	6a 03                	push   0x3
c0011e60:	6a 01                	push   0x1
c0011e62:	52                   	push   edx
c0011e63:	50                   	push   eax
c0011e64:	53                   	push   ebx
c0011e65:	e8 e6 fd ff ff       	call   c0011c50 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e6a:	83 c4 20             	add    esp,0x20
c0011e6d:	89 c2                	mov    edx,eax
c0011e6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e73:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011e76:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011e7e:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011e86:	7f 1c                	jg     c0011ea4 <VAS::VAS(bool)+0xa0>
c0011e88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e8c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011e8f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e93:	c1 e2 02             	shl    edx,0x2
c0011e96:	01 d0                	add    eax,edx
c0011e98:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011e9e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011ea2:	eb da                	jmp    c0011e7e <VAS::VAS(bool)+0x7a>
c0011ea4:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011eac:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011eb4:	7f 7a                	jg     c0011f30 <VAS::VAS(bool)+0x12c>
c0011eb6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011eba:	2d 00 02 00 00       	sub    eax,0x200
c0011ebf:	c1 e0 0c             	shl    eax,0xc
c0011ec2:	83 c8 03             	or     eax,0x3
c0011ec5:	89 c2                	mov    edx,eax
c0011ec7:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c0011ecc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011ed2:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011ed8:	83 e0 10             	and    eax,0x10
c0011edb:	84 c0                	test   al,al
c0011edd:	74 07                	je     c0011ee6 <VAS::VAS(bool)+0xe2>
c0011edf:	b8 00 01 00 00       	mov    eax,0x100
c0011ee4:	eb 05                	jmp    c0011eeb <VAS::VAS(bool)+0xe7>
c0011ee6:	b8 00 00 00 00       	mov    eax,0x0
c0011eeb:	09 d0                	or     eax,edx
c0011eed:	89 c1                	mov    ecx,eax
c0011eef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ef3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011ef6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011efa:	c1 e2 02             	shl    edx,0x2
c0011efd:	01 d0                	add    eax,edx
c0011eff:	89 ca                	mov    edx,ecx
c0011f01:	89 10                	mov    DWORD PTR [eax],edx
c0011f03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f07:	2d 40 03 00 00       	sub    eax,0x340
c0011f0c:	83 f8 7f             	cmp    eax,0x7f
c0011f0f:	77 16                	ja     c0011f27 <VAS::VAS(bool)+0x123>
c0011f11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f18:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f1c:	c1 e2 02             	shl    edx,0x2
c0011f1f:	01 d0                	add    eax,edx
c0011f21:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011f27:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f2b:	e9 7c ff ff ff       	jmp    c0011eac <VAS::VAS(bool)+0xa8>
c0011f30:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c0011f35:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f3b:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f41:	83 e0 10             	and    eax,0x10
c0011f44:	84 c0                	test   al,al
c0011f46:	74 07                	je     c0011f4f <VAS::VAS(bool)+0x14b>
c0011f48:	b8 03 41 00 00       	mov    eax,0x4103
c0011f4d:	eb 05                	jmp    c0011f54 <VAS::VAS(bool)+0x150>
c0011f4f:	b8 03 40 00 00       	mov    eax,0x4003
c0011f54:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011f58:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0011f5b:	81 c2 20 0c 00 00    	add    edx,0xc20
c0011f61:	89 02                	mov    DWORD PTR [edx],eax
c0011f63:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c0011f68:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f6e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0011f74:	83 ec 08             	sub    esp,0x8
c0011f77:	50                   	push   eax
c0011f78:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011f7c:	e8 b3 fc ff ff       	call   c0011c34 <VAS::setCPUSpecific(unsigned long)>
c0011f81:	83 c4 10             	add    esp,0x10
c0011f84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f88:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011f8b:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c0011f90:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f96:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f9c:	83 e0 10             	and    eax,0x10
c0011f9f:	84 c0                	test   al,al
c0011fa1:	74 07                	je     c0011faa <VAS::VAS(bool)+0x1a6>
c0011fa3:	b8 00 01 00 00       	mov    eax,0x100
c0011fa8:	eb 05                	jmp    c0011faf <VAS::VAS(bool)+0x1ab>
c0011faa:	b8 00 00 00 00       	mov    eax,0x0
c0011faf:	09 c2                	or     edx,eax
c0011fb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fb5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011fb8:	05 fc 0f 00 00       	add    eax,0xffc
c0011fbd:	83 ca 03             	or     edx,0x3
c0011fc0:	89 10                	mov    DWORD PTR [eax],edx
c0011fc2:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c0011fc7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fcd:	83 ec 0c             	sub    esp,0xc
c0011fd0:	50                   	push   eax
c0011fd1:	e8 d4 1c 00 00       	call   c0013caa <Device::getName()>
c0011fd6:	83 c4 10             	add    esp,0x10
c0011fd9:	83 ec 08             	sub    esp,0x8
c0011fdc:	68 c4 a2 02 c0       	push   0xc002a2c4
c0011fe1:	50                   	push   eax
c0011fe2:	e8 b1 e8 fe ff       	call   c0000898 <strcmp>
c0011fe7:	83 c4 10             	add    esp,0x10
c0011fea:	85 c0                	test   eax,eax
c0011fec:	0f 94 c0             	sete   al
c0011fef:	84 c0                	test   al,al
c0011ff1:	0f 84 87 00 00 00    	je     c001207e <VAS::VAS(bool)+0x27a>
c0011ff7:	fa                   	cli    
c0011ff8:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c0011ffd:	40                   	inc    eax
c0011ffe:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c0012003:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c0012008:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001200e:	05 7c 09 00 00       	add    eax,0x97c
c0012013:	83 ec 0c             	sub    esp,0xc
c0012016:	50                   	push   eax
c0012017:	e8 02 d0 ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001201c:	83 c4 10             	add    esp,0x10
c001201f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012024:	89 c3                	mov    ebx,eax
c0012026:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c001202b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012031:	05 7c 09 00 00       	add    eax,0x97c
c0012036:	83 ec 0c             	sub    esp,0xc
c0012039:	50                   	push   eax
c001203a:	e8 df cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001203f:	83 c4 10             	add    esp,0x10
c0012042:	83 ec 08             	sub    esp,0x8
c0012045:	50                   	push   eax
c0012046:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001204a:	e8 75 f5 ff ff       	call   c00115c4 <VAS::getPageTableEntry(unsigned long)>
c001204f:	83 c4 10             	add    esp,0x10
c0012052:	8b 00                	mov    eax,DWORD PTR [eax]
c0012054:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012059:	6a 11                	push   0x11
c001205b:	53                   	push   ebx
c001205c:	50                   	push   eax
c001205d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012061:	e8 f4 f8 ff ff       	call   c001195a <VAS::mapPage(unsigned long, unsigned long, int)>
c0012066:	83 c4 10             	add    esp,0x10
c0012069:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c001206e:	48                   	dec    eax
c001206f:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c0012074:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c0012079:	85 c0                	test   eax,eax
c001207b:	75 01                	jne    c001207e <VAS::VAS(bool)+0x27a>
c001207d:	fb                   	sti    
c001207e:	90                   	nop
c001207f:	83 c4 28             	add    esp,0x28
c0012082:	5b                   	pop    ebx
c0012083:	c3                   	ret    

c0012084 <VAS::evict(unsigned long)>:
c0012084:	55                   	push   ebp
c0012085:	57                   	push   edi
c0012086:	56                   	push   esi
c0012087:	53                   	push   ebx
c0012088:	83 ec 1c             	sub    esp,0x1c
c001208b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001208f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012093:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012097:	e8 42 f2 ff ff       	call   c00112de <Virt::allocateSwapfilePage()>
c001209c:	89 c7                	mov    edi,eax
c001209e:	a1 0c c6 02 c0       	mov    eax,ds:0xc002c60c
c00120a3:	85 c0                	test   eax,eax
c00120a5:	7e 3d                	jle    c00120e4 <VAS::evict(unsigned long)+0x60>
c00120a7:	89 ee                	mov    esi,ebp
c00120a9:	31 db                	xor    ebx,ebx
c00120ab:	83 ec 0c             	sub    esp,0xc
c00120ae:	57                   	push   edi
c00120af:	e8 18 f2 ff ff       	call   c00112cc <Virt::swapIDToSector(unsigned long)>
c00120b4:	89 34 24             	mov    DWORD PTR [esp],esi
c00120b7:	01 d8                	add    eax,ebx
c00120b9:	6a 01                	push   0x1
c00120bb:	31 d2                	xor    edx,edx
c00120bd:	43                   	inc    ebx
c00120be:	52                   	push   edx
c00120bf:	81 c6 00 02 00 00    	add    esi,0x200
c00120c5:	50                   	push   eax
c00120c6:	0f be 05 18 c6 02 c0 	movsx  eax,BYTE PTR ds:0xc002c618
c00120cd:	ff 34 85 5c db 02 c0 	push   DWORD PTR [eax*4-0x3ffd24a4]
c00120d4:	e8 4d 3e 00 00       	call   c0015f26 <LogicalDisk::write(unsigned long long, int, void*)>
c00120d9:	83 c4 20             	add    esp,0x20
c00120dc:	39 1d 0c c6 02 c0    	cmp    DWORD PTR ds:0xc002c60c,ebx
c00120e2:	7f c7                	jg     c00120ab <VAS::evict(unsigned long)+0x27>
c00120e4:	83 ec 08             	sub    esp,0x8
c00120e7:	c1 e7 0b             	shl    edi,0xb
c00120ea:	55                   	push   ebp
c00120eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00120ef:	e8 d0 f4 ff ff       	call   c00115c4 <VAS::getPageTableEntry(unsigned long)>
c00120f4:	83 c4 0c             	add    esp,0xc
c00120f7:	8b 10                	mov    edx,DWORD PTR [eax]
c00120f9:	81 e2 fe 07 00 00    	and    edx,0x7fe
c00120ff:	09 d7                	or     edi,edx
c0012101:	89 38                	mov    DWORD PTR [eax],edi
c0012103:	a1 c8 d7 02 c0       	mov    eax,ds:0xc002d7c8
c0012108:	40                   	inc    eax
c0012109:	a3 c8 d7 02 c0       	mov    ds:0xc002d7c8,eax
c001210e:	0f 20 da             	mov    edx,cr3
c0012111:	0f 22 da             	mov    cr3,edx
c0012114:	50                   	push   eax
c0012115:	55                   	push   ebp
c0012116:	68 d2 a2 02 c0       	push   0xc002a2d2
c001211b:	e8 51 04 00 00       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0012120:	a1 c4 d7 02 c0       	mov    eax,ds:0xc002d7c4
c0012125:	c7 44 24 40 e7 a2 02 c0 	mov    DWORD PTR [esp+0x40],0xc002a2e7
c001212d:	8d 50 01             	lea    edx,[eax+0x1]
c0012130:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012134:	89 15 c4 d7 02 c0    	mov    DWORD PTR ds:0xc002d7c4,edx
c001213a:	83 c4 2c             	add    esp,0x2c
c001213d:	5b                   	pop    ebx
c001213e:	5e                   	pop    esi
c001213f:	5f                   	pop    edi
c0012140:	5d                   	pop    ebp
c0012141:	e9 2b 04 00 00       	jmp    c0012571 <Dbg::kprintf(char const*, ...)>

c0012146 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012146:	55                   	push   ebp
c0012147:	57                   	push   edi
c0012148:	56                   	push   esi
c0012149:	53                   	push   ebx
c001214a:	83 ec 14             	sub    esp,0x14
c001214d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012151:	68 f8 a2 02 c0       	push   0xc002a2f8
c0012156:	e8 16 04 00 00       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c001215b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001215f:	5e                   	pop    esi
c0012160:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012166:	5f                   	pop    edi
c0012167:	53                   	push   ebx
c0012168:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001216c:	e8 53 f4 ff ff       	call   c00115c4 <VAS::getPageTableEntry(unsigned long)>
c0012171:	5d                   	pop    ebp
c0012172:	89 c6                	mov    esi,eax
c0012174:	5a                   	pop    edx
c0012175:	ff 30                	push   DWORD PTR [eax]
c0012177:	68 0b a3 02 c0       	push   0xc002a30b
c001217c:	e8 f0 03 00 00       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0012181:	83 c4 10             	add    esp,0x10
c0012184:	85 db                	test   ebx,ebx
c0012186:	74 1c                	je     c00121a4 <VAS::tryLoadBackOffDisk(unsigned long)+0x5e>
c0012188:	8b 3e                	mov    edi,DWORD PTR [esi]
c001218a:	31 c0                	xor    eax,eax
c001218c:	89 fa                	mov    edx,edi
c001218e:	81 e2 01 04 00 00    	and    edx,0x401
c0012194:	81 fa 00 04 00 00    	cmp    edx,0x400
c001219a:	74 12                	je     c00121ae <VAS::tryLoadBackOffDisk(unsigned long)+0x68>
c001219c:	83 c4 0c             	add    esp,0xc
c001219f:	5b                   	pop    ebx
c00121a0:	5e                   	pop    esi
c00121a1:	5f                   	pop    edi
c00121a2:	5d                   	pop    ebp
c00121a3:	c3                   	ret    
c00121a4:	83 c4 0c             	add    esp,0xc
c00121a7:	31 c0                	xor    eax,eax
c00121a9:	5b                   	pop    ebx
c00121aa:	5e                   	pop    esi
c00121ab:	5f                   	pop    edi
c00121ac:	5d                   	pop    ebp
c00121ad:	c3                   	ret    
c00121ae:	e8 8a d7 ff ff       	call   c000f93d <Phys::allocatePage()>
c00121b3:	c1 ef 0b             	shr    edi,0xb
c00121b6:	83 ec 08             	sub    esp,0x8
c00121b9:	89 c5                	mov    ebp,eax
c00121bb:	50                   	push   eax
c00121bc:	68 19 a3 02 c0       	push   0xc002a319
c00121c1:	e8 ab 03 00 00       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c00121c6:	8b 16                	mov    edx,DWORD PTR [esi]
c00121c8:	81 e2 ff 0f 00 00    	and    edx,0xfff
c00121ce:	09 ea                	or     edx,ebp
c00121d0:	81 ca 01 08 00 00    	or     edx,0x801
c00121d6:	89 16                	mov    DWORD PTR [esi],edx
c00121d8:	c7 04 24 26 a3 02 c0 	mov    DWORD PTR [esp],0xc002a326
c00121df:	e8 8d 03 00 00       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c00121e4:	83 c4 10             	add    esp,0x10
c00121e7:	8b 0d 0c c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c60c
c00121ed:	85 c9                	test   ecx,ecx
c00121ef:	7e 3d                	jle    c001222e <VAS::tryLoadBackOffDisk(unsigned long)+0xe8>
c00121f1:	89 dd                	mov    ebp,ebx
c00121f3:	31 f6                	xor    esi,esi
c00121f5:	83 ec 0c             	sub    esp,0xc
c00121f8:	57                   	push   edi
c00121f9:	e8 ce f0 ff ff       	call   c00112cc <Virt::swapIDToSector(unsigned long)>
c00121fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012201:	01 f0                	add    eax,esi
c0012203:	6a 01                	push   0x1
c0012205:	31 d2                	xor    edx,edx
c0012207:	46                   	inc    esi
c0012208:	52                   	push   edx
c0012209:	81 c5 00 02 00 00    	add    ebp,0x200
c001220f:	50                   	push   eax
c0012210:	0f be 05 18 c6 02 c0 	movsx  eax,BYTE PTR ds:0xc002c618
c0012217:	ff 34 85 5c db 02 c0 	push   DWORD PTR [eax*4-0x3ffd24a4]
c001221e:	e8 97 3c 00 00       	call   c0015eba <LogicalDisk::read(unsigned long long, int, void*)>
c0012223:	83 c4 20             	add    esp,0x20
c0012226:	39 35 0c c6 02 c0    	cmp    DWORD PTR ds:0xc002c60c,esi
c001222c:	7f c7                	jg     c00121f5 <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c001222e:	a1 c8 d7 02 c0       	mov    eax,ds:0xc002d7c8
c0012233:	48                   	dec    eax
c0012234:	52                   	push   edx
c0012235:	a3 c8 d7 02 c0       	mov    ds:0xc002d7c8,eax
c001223a:	50                   	push   eax
c001223b:	53                   	push   ebx
c001223c:	68 36 a3 02 c0       	push   0xc002a336
c0012241:	e8 2b 03 00 00       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0012246:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012249:	e8 60 f0 ff ff       	call   c00112ae <Virt::freeSwapfilePage(unsigned long)>
c001224e:	c7 04 24 4b a3 02 c0 	mov    DWORD PTR [esp],0xc002a34b
c0012255:	e8 17 03 00 00       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c001225a:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c001225f:	83 c4 10             	add    esp,0x10
c0012262:	48                   	dec    eax
c0012263:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c0012268:	85 c0                	test   eax,eax
c001226a:	74 2d                	je     c0012299 <VAS::tryLoadBackOffDisk(unsigned long)+0x153>
c001226c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012270:	25 ff 0f 00 00       	and    eax,0xfff
c0012275:	3d e0 0f 00 00       	cmp    eax,0xfe0
c001227a:	77 20                	ja     c001229c <VAS::tryLoadBackOffDisk(unsigned long)+0x156>
c001227c:	0f 20 d8             	mov    eax,cr3
c001227f:	0f 22 d8             	mov    cr3,eax
c0012282:	83 ec 0c             	sub    esp,0xc
c0012285:	68 71 a3 02 c0       	push   0xc002a371
c001228a:	e8 e2 02 00 00       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c001228f:	83 c4 10             	add    esp,0x10
c0012292:	b0 01                	mov    al,0x1
c0012294:	e9 03 ff ff ff       	jmp    c001219c <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c0012299:	fb                   	sti    
c001229a:	eb d0                	jmp    c001226c <VAS::tryLoadBackOffDisk(unsigned long)+0x126>
c001229c:	83 ec 0c             	sub    esp,0xc
c001229f:	68 61 a3 02 c0       	push   0xc002a361
c00122a4:	e8 c8 02 00 00       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c00122a9:	83 c4 10             	add    esp,0x10
c00122ac:	eb ce                	jmp    c001227c <VAS::tryLoadBackOffDisk(unsigned long)+0x136>

c00122ae <VAS::scanForEviction()>:
c00122ae:	57                   	push   edi
c00122af:	56                   	push   esi
c00122b0:	53                   	push   ebx
c00122b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00122b5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00122b8:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00122be:	75 0e                	jne    c00122ce <VAS::scanForEviction()+0x20>
c00122c0:	89 da                	mov    edx,ebx
c00122c2:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00122c5:	c1 ea 16             	shr    edx,0x16
c00122c8:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00122cc:	74 48                	je     c0012316 <VAS::scanForEviction()+0x68>
c00122ce:	53                   	push   ebx
c00122cf:	56                   	push   esi
c00122d0:	e8 ef f2 ff ff       	call   c00115c4 <VAS::getPageTableEntry(unsigned long)>
c00122d5:	5a                   	pop    edx
c00122d6:	8b 38                	mov    edi,DWORD PTR [eax]
c00122d8:	59                   	pop    ecx
c00122d9:	89 fa                	mov    edx,edi
c00122db:	81 e2 01 08 00 00    	and    edx,0x801
c00122e1:	81 fa 01 08 00 00    	cmp    edx,0x801
c00122e7:	74 3d                	je     c0012326 <VAS::scanForEviction()+0x78>
c00122e9:	81 c3 00 10 00 00    	add    ebx,0x1000
c00122ef:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c00122f5:	76 2a                	jbe    c0012321 <VAS::scanForEviction()+0x73>
c00122f7:	31 db                	xor    ebx,ebx
c00122f9:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012300:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012306:	75 c6                	jne    c00122ce <VAS::scanForEviction()+0x20>
c0012308:	89 da                	mov    edx,ebx
c001230a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001230d:	c1 ea 16             	shr    edx,0x16
c0012310:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012314:	75 b8                	jne    c00122ce <VAS::scanForEviction()+0x20>
c0012316:	81 c3 00 00 40 00    	add    ebx,0x400000
c001231c:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c001231f:	eb 97                	jmp    c00122b8 <VAS::scanForEviction()+0xa>
c0012321:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012324:	eb 92                	jmp    c00122b8 <VAS::scanForEviction()+0xa>
c0012326:	f7 c7 20 00 00 00    	test   edi,0x20
c001232c:	74 0a                	je     c0012338 <VAS::scanForEviction()+0x8a>
c001232e:	83 e7 df             	and    edi,0xffffffdf
c0012331:	89 38                	mov    DWORD PTR [eax],edi
c0012333:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012336:	eb b1                	jmp    c00122e9 <VAS::scanForEviction()+0x3b>
c0012338:	83 ec 08             	sub    esp,0x8
c001233b:	53                   	push   ebx
c001233c:	56                   	push   esi
c001233d:	e8 42 fd ff ff       	call   c0012084 <VAS::evict(unsigned long)>
c0012342:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012349:	83 c4 10             	add    esp,0x10
c001234c:	89 f8                	mov    eax,edi
c001234e:	5b                   	pop    ebx
c001234f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012354:	5e                   	pop    esi
c0012355:	5f                   	pop    edi
c0012356:	c3                   	ret    

c0012357 <mapVASFirstTime>:
c0012357:	55                   	push   ebp
c0012358:	57                   	push   edi
c0012359:	56                   	push   esi
c001235a:	53                   	push   ebx
c001235b:	83 ec 0c             	sub    esp,0xc
c001235e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012363:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012366:	4a                   	dec    edx
c0012367:	0f 84 8e 00 00 00    	je     c00123fb <mapVASFirstTime+0xa4>
c001236d:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012370:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012373:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012378:	c1 e5 15             	shl    ebp,0x15
c001237b:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012380:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012386:	29 eb                	sub    ebx,ebp
c0012388:	29 ee                	sub    esi,ebp
c001238a:	e8 ae d5 ff ff       	call   c000f93d <Phys::allocatePage()>
c001238f:	83 ec 0c             	sub    esp,0xc
c0012392:	68 03 04 00 00       	push   0x403
c0012397:	6a 01                	push   0x1
c0012399:	53                   	push   ebx
c001239a:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00123a0:	50                   	push   eax
c00123a1:	57                   	push   edi
c00123a2:	e8 a9 f8 ff ff       	call   c0011c50 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00123a7:	83 c4 20             	add    esp,0x20
c00123aa:	39 f3                	cmp    ebx,esi
c00123ac:	75 dc                	jne    c001238a <mapVASFirstTime+0x33>
c00123ae:	be 00 f0 ff 01       	mov    esi,0x1fff000
c00123b3:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c00123b8:	29 ee                	sub    esi,ebp
c00123ba:	29 e8                	sub    eax,ebp
c00123bc:	89 c5                	mov    ebp,eax
c00123be:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c00123c2:	19 db                	sbb    ebx,ebx
c00123c4:	e8 74 d5 ff ff       	call   c000f93d <Phys::allocatePage()>
c00123c9:	83 e3 04             	and    ebx,0x4
c00123cc:	83 ec 0c             	sub    esp,0xc
c00123cf:	81 c3 03 04 00 00    	add    ebx,0x403
c00123d5:	53                   	push   ebx
c00123d6:	6a 01                	push   0x1
c00123d8:	56                   	push   esi
c00123d9:	81 ee 00 10 00 00    	sub    esi,0x1000
c00123df:	50                   	push   eax
c00123e0:	57                   	push   edi
c00123e1:	e8 6a f8 ff ff       	call   c0011c50 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00123e6:	83 c4 20             	add    esp,0x20
c00123e9:	39 f5                	cmp    ebp,esi
c00123eb:	75 d1                	jne    c00123be <mapVASFirstTime+0x67>
c00123ed:	0f 20 d8             	mov    eax,cr3
c00123f0:	0f 22 d8             	mov    cr3,eax
c00123f3:	83 c4 0c             	add    esp,0xc
c00123f6:	5b                   	pop    ebx
c00123f7:	5e                   	pop    esi
c00123f8:	5f                   	pop    edi
c00123f9:	5d                   	pop    ebp
c00123fa:	c3                   	ret    
c00123fb:	83 ec 0c             	sub    esp,0xc
c00123fe:	68 7f a3 02 c0       	push   0xc002a37f
c0012403:	e8 69 01 00 00       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0012408:	83 c4 10             	add    esp,0x10
c001240b:	83 c4 0c             	add    esp,0xc
c001240e:	5b                   	pop    ebx
c001240f:	5e                   	pop    esi
c0012410:	5f                   	pop    edi
c0012411:	5d                   	pop    ebp
c0012412:	c3                   	ret    

c0012413 <__cxa_atexit>:
c0012413:	31 c0                	xor    eax,eax
c0012415:	c3                   	ret    

c0012416 <__cxa_finalize>:
c0012416:	c3                   	ret    

c0012417 <__stack_chk_fail>:
c0012417:	55                   	push   ebp
c0012418:	89 e5                	mov    ebp,esp
c001241a:	83 ec 14             	sub    esp,0x14
c001241d:	68 98 a3 02 c0       	push   0xc002a398
c0012422:	e8 4a 01 00 00       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0012427:	58                   	pop    eax
c0012428:	5a                   	pop    edx
c0012429:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001242c:	68 e8 a3 02 c0       	push   0xc002a3e8
c0012431:	e8 3b 01 00 00       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0012436:	59                   	pop    ecx
c0012437:	58                   	pop    eax
c0012438:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001243b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001243e:	68 e8 a3 02 c0       	push   0xc002a3e8
c0012443:	e8 29 01 00 00       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0012448:	5a                   	pop    edx
c0012449:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001244c:	59                   	pop    ecx
c001244d:	8b 00                	mov    eax,DWORD PTR [eax]
c001244f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012452:	68 e8 a3 02 c0       	push   0xc002a3e8
c0012457:	e8 15 01 00 00       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c001245c:	5a                   	pop    edx
c001245d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012460:	59                   	pop    ecx
c0012461:	8b 00                	mov    eax,DWORD PTR [eax]
c0012463:	8b 00                	mov    eax,DWORD PTR [eax]
c0012465:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012468:	68 e8 a3 02 c0       	push   0xc002a3e8
c001246d:	e8 ff 00 00 00       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0012472:	c7 04 24 f0 a3 02 c0 	mov    DWORD PTR [esp],0xc002a3f0
c0012479:	e8 53 78 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c001247e:	83 c4 10             	add    esp,0x10
c0012481:	c9                   	leave  
c0012482:	c3                   	ret    

c0012483 <__cxa_pure_virtual>:
c0012483:	83 ec 18             	sub    esp,0x18
c0012486:	68 08 a4 02 c0       	push   0xc002a408
c001248b:	e8 41 78 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c0012490:	83 c4 1c             	add    esp,0x1c
c0012493:	c3                   	ret    

c0012494 <operator new[](unsigned long)>:
c0012494:	e9 00 d1 ff ff       	jmp    c000f599 <malloc>

c0012499 <operator delete(void*, unsigned long)>:
c0012499:	e9 1b d1 ff ff       	jmp    c000f5b9 <rfree>

c001249e <operator delete[](void*)>:
c001249e:	e9 16 d1 ff ff       	jmp    c000f5b9 <rfree>

c00124a3 <operator delete[](void*, unsigned long)>:
c00124a3:	e9 11 d1 ff ff       	jmp    c000f5b9 <rfree>

c00124a8 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00124a8:	55                   	push   ebp
c00124a9:	b9 11 00 00 00       	mov    ecx,0x11
c00124ae:	57                   	push   edi
c00124af:	56                   	push   esi
c00124b0:	be 3e 9f 02 c0       	mov    esi,0xc0029f3e
c00124b5:	53                   	push   ebx
c00124b6:	83 ec 20             	sub    esp,0x20
c00124b9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00124bd:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00124c1:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00124c5:	fc                   	cld    
c00124c6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00124c8:	89 ee                	mov    esi,ebp
c00124ca:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00124ce:	eb 02                	jmp    c00124d2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c00124d0:	89 c6                	mov    esi,eax
c00124d2:	31 d2                	xor    edx,edx
c00124d4:	41                   	inc    ecx
c00124d5:	89 f0                	mov    eax,esi
c00124d7:	f7 f3                	div    ebx
c00124d9:	39 de                	cmp    esi,ebx
c00124db:	73 f3                	jae    c00124d0 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c00124dd:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00124e0:	eb 02                	jmp    c00124e4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c00124e2:	89 c5                	mov    ebp,eax
c00124e4:	31 d2                	xor    edx,edx
c00124e6:	49                   	dec    ecx
c00124e7:	89 e8                	mov    eax,ebp
c00124e9:	f7 f3                	div    ebx
c00124eb:	39 dd                	cmp    ebp,ebx
c00124ed:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c00124f1:	88 11                	mov    BYTE PTR [ecx],dl
c00124f3:	73 ed                	jae    c00124e2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c00124f5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00124f9:	83 c4 20             	add    esp,0x20
c00124fc:	5b                   	pop    ebx
c00124fd:	5e                   	pop    esi
c00124fe:	5f                   	pop    edi
c00124ff:	5d                   	pop    ebp
c0012500:	c3                   	ret    

c0012501 <Dbg::logc(char)>:
c0012501:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012505:	ba fd 03 00 00       	mov    edx,0x3fd
c001250a:	ec                   	in     al,dx
c001250b:	a8 20                	test   al,0x20
c001250d:	74 fb                	je     c001250a <Dbg::logc(char)+0x9>
c001250f:	ba f8 03 00 00       	mov    edx,0x3f8
c0012514:	88 c8                	mov    al,cl
c0012516:	ee                   	out    dx,al
c0012517:	c3                   	ret    

c0012518 <Dbg::logs(char*)>:
c0012518:	53                   	push   ebx
c0012519:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001251d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012520:	84 c0                	test   al,al
c0012522:	74 0f                	je     c0012533 <Dbg::logs(char*)+0x1b>
c0012524:	50                   	push   eax
c0012525:	43                   	inc    ebx
c0012526:	e8 d6 ff ff ff       	call   c0012501 <Dbg::logc(char)>
c001252b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001252e:	5a                   	pop    edx
c001252f:	84 c0                	test   al,al
c0012531:	75 f1                	jne    c0012524 <Dbg::logs(char*)+0xc>
c0012533:	5b                   	pop    ebx
c0012534:	c3                   	ret    

c0012535 <Dbg::logWriteInt(unsigned int)>:
c0012535:	83 ec 10             	sub    esp,0x10
c0012538:	6a 0a                	push   0xa
c001253a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001253e:	50                   	push   eax
c001253f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012543:	e8 60 ff ff ff       	call   c00124a8 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012548:	50                   	push   eax
c0012549:	e8 ca ff ff ff       	call   c0012518 <Dbg::logs(char*)>
c001254e:	83 c4 20             	add    esp,0x20
c0012551:	c3                   	ret    

c0012552 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012552:	83 ec 10             	sub    esp,0x10
c0012555:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012559:	8d 44 24 08          	lea    eax,[esp+0x8]
c001255d:	50                   	push   eax
c001255e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012562:	e8 41 ff ff ff       	call   c00124a8 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012567:	50                   	push   eax
c0012568:	e8 ab ff ff ff       	call   c0012518 <Dbg::logs(char*)>
c001256d:	83 c4 20             	add    esp,0x20
c0012570:	c3                   	ret    

c0012571 <Dbg::kprintf(char const*, ...)>:
c0012571:	55                   	push   ebp
c0012572:	57                   	push   edi
c0012573:	56                   	push   esi
c0012574:	53                   	push   ebx
c0012575:	83 ec 0c             	sub    esp,0xc
c0012578:	8d 44 24 24          	lea    eax,[esp+0x24]
c001257c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012580:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012584:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012587:	84 c0                	test   al,al
c0012589:	74 4a                	je     c00125d5 <Dbg::kprintf(char const*, ...)+0x64>
c001258b:	31 db                	xor    ebx,ebx
c001258d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012590:	3c 25                	cmp    al,0x25
c0012592:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012595:	0f 85 e4 00 00 00    	jne    c001267f <Dbg::kprintf(char const*, ...)+0x10e>
c001259b:	83 c3 02             	add    ebx,0x2
c001259e:	8a 07                	mov    al,BYTE PTR [edi]
c00125a0:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00125a3:	83 e8 25             	sub    eax,0x25
c00125a6:	3c 53                	cmp    al,0x53
c00125a8:	0f 87 ba 00 00 00    	ja     c0012668 <Dbg::kprintf(char const*, ...)+0xf7>
c00125ae:	0f b6 c0             	movzx  eax,al
c00125b1:	ff 24 85 1c a4 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5be4]
c00125b8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00125bc:	89 c8                	mov    eax,ecx
c00125be:	83 c1 04             	add    ecx,0x4
c00125c1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00125c5:	ff 30                	push   DWORD PTR [eax]
c00125c7:	e8 69 ff ff ff       	call   c0012535 <Dbg::logWriteInt(unsigned int)>
c00125cc:	5f                   	pop    edi
c00125cd:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00125d1:	84 c0                	test   al,al
c00125d3:	75 b8                	jne    c001258d <Dbg::kprintf(char const*, ...)+0x1c>
c00125d5:	83 c4 0c             	add    esp,0xc
c00125d8:	5b                   	pop    ebx
c00125d9:	5e                   	pop    esi
c00125da:	5f                   	pop    edi
c00125db:	5d                   	pop    ebp
c00125dc:	c3                   	ret    
c00125dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00125e1:	89 c8                	mov    eax,ecx
c00125e3:	83 c1 04             	add    ecx,0x4
c00125e6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00125ea:	ff 30                	push   DWORD PTR [eax]
c00125ec:	e8 27 ff ff ff       	call   c0012518 <Dbg::logs(char*)>
c00125f1:	58                   	pop    eax
c00125f2:	eb d9                	jmp    c00125cd <Dbg::kprintf(char const*, ...)+0x5c>
c00125f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00125f8:	89 d0                	mov    eax,edx
c00125fa:	83 c2 04             	add    edx,0x4
c00125fd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012601:	ff 30                	push   DWORD PTR [eax]
c0012603:	e8 2d ff ff ff       	call   c0012535 <Dbg::logWriteInt(unsigned int)>
c0012608:	58                   	pop    eax
c0012609:	eb c2                	jmp    c00125cd <Dbg::kprintf(char const*, ...)+0x5c>
c001260b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001260f:	89 d0                	mov    eax,edx
c0012611:	83 c2 04             	add    edx,0x4
c0012614:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012617:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001261b:	50                   	push   eax
c001261c:	e8 e0 fe ff ff       	call   c0012501 <Dbg::logc(char)>
c0012621:	58                   	pop    eax
c0012622:	eb a9                	jmp    c00125cd <Dbg::kprintf(char const*, ...)+0x5c>
c0012624:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012628:	89 c8                	mov    eax,ecx
c001262a:	83 c1 04             	add    ecx,0x4
c001262d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012631:	6a 10                	push   0x10
c0012633:	ff 30                	push   DWORD PTR [eax]
c0012635:	e8 18 ff ff ff       	call   c0012552 <Dbg::logWriteIntBase(unsigned int, int)>
c001263a:	59                   	pop    ecx
c001263b:	5f                   	pop    edi
c001263c:	eb 8f                	jmp    c00125cd <Dbg::kprintf(char const*, ...)+0x5c>
c001263e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012642:	89 d0                	mov    eax,edx
c0012644:	83 c2 08             	add    edx,0x8
c0012647:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001264b:	6a 10                	push   0x10
c001264d:	ff 30                	push   DWORD PTR [eax]
c001264f:	e8 fe fe ff ff       	call   c0012552 <Dbg::logWriteIntBase(unsigned int, int)>
c0012654:	58                   	pop    eax
c0012655:	5a                   	pop    edx
c0012656:	e9 72 ff ff ff       	jmp    c00125cd <Dbg::kprintf(char const*, ...)+0x5c>
c001265b:	6a 25                	push   0x25
c001265d:	e8 9f fe ff ff       	call   c0012501 <Dbg::logc(char)>
c0012662:	58                   	pop    eax
c0012663:	e9 65 ff ff ff       	jmp    c00125cd <Dbg::kprintf(char const*, ...)+0x5c>
c0012668:	6a 25                	push   0x25
c001266a:	e8 92 fe ff ff       	call   c0012501 <Dbg::logc(char)>
c001266f:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012672:	50                   	push   eax
c0012673:	e8 89 fe ff ff       	call   c0012501 <Dbg::logc(char)>
c0012678:	5a                   	pop    edx
c0012679:	59                   	pop    ecx
c001267a:	e9 4e ff ff ff       	jmp    c00125cd <Dbg::kprintf(char const*, ...)+0x5c>
c001267f:	50                   	push   eax
c0012680:	89 eb                	mov    ebx,ebp
c0012682:	e8 7a fe ff ff       	call   c0012501 <Dbg::logc(char)>
c0012687:	89 fd                	mov    ebp,edi
c0012689:	58                   	pop    eax
c001268a:	e9 3e ff ff ff       	jmp    c00125cd <Dbg::kprintf(char const*, ...)+0x5c>
c001268f:	90                   	nop

c0012690 <File::read(unsigned long long, void*, int*)>:
c0012690:	53                   	push   ebx
c0012691:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012695:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012699:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00126a0:	3c 19                	cmp    al,0x19
c00126a2:	77 35                	ja     c00126d9 <File::read(unsigned long long, void*, int*)+0x49>
c00126a4:	8b 04 85 60 dc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd23a0]
c00126ab:	85 c0                	test   eax,eax
c00126ad:	74 2a                	je     c00126d9 <File::read(unsigned long long, void*, int*)+0x49>
c00126af:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00126b5:	85 c0                	test   eax,eax
c00126b7:	74 20                	je     c00126d9 <File::read(unsigned long long, void*, int*)+0x49>
c00126b9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00126bd:	74 21                	je     c00126e0 <File::read(unsigned long long, void*, int*)+0x50>
c00126bf:	8b 08                	mov    ecx,DWORD PTR [eax]
c00126c1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00126c5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00126cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00126cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00126d3:	5b                   	pop    ebx
c00126d4:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00126d7:	ff e0                	jmp    eax
c00126d9:	b8 0b 00 00 00       	mov    eax,0xb
c00126de:	eb 05                	jmp    c00126e5 <File::read(unsigned long long, void*, int*)+0x55>
c00126e0:	b8 05 00 00 00       	mov    eax,0x5
c00126e5:	5b                   	pop    ebx
c00126e6:	c3                   	ret    
c00126e7:	90                   	nop

c00126e8 <File::write(unsigned long long, void*, int*)>:
c00126e8:	53                   	push   ebx
c00126e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00126ed:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00126f1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00126f8:	3c 19                	cmp    al,0x19
c00126fa:	77 35                	ja     c0012731 <File::write(unsigned long long, void*, int*)+0x49>
c00126fc:	8b 04 85 60 dc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd23a0]
c0012703:	85 c0                	test   eax,eax
c0012705:	74 2a                	je     c0012731 <File::write(unsigned long long, void*, int*)+0x49>
c0012707:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001270d:	85 c0                	test   eax,eax
c001270f:	74 20                	je     c0012731 <File::write(unsigned long long, void*, int*)+0x49>
c0012711:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012715:	74 21                	je     c0012738 <File::write(unsigned long long, void*, int*)+0x50>
c0012717:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012719:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001271d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012723:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012727:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001272b:	5b                   	pop    ebx
c001272c:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001272f:	ff e0                	jmp    eax
c0012731:	b8 0b 00 00 00       	mov    eax,0xb
c0012736:	eb 05                	jmp    c001273d <File::write(unsigned long long, void*, int*)+0x55>
c0012738:	b8 05 00 00 00       	mov    eax,0x5
c001273d:	5b                   	pop    ebx
c001273e:	c3                   	ret    
c001273f:	90                   	nop

c0012740 <Directory::read(unsigned long long, void*, int*)>:
c0012740:	53                   	push   ebx
c0012741:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012745:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012749:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012750:	3c 19                	cmp    al,0x19
c0012752:	77 35                	ja     c0012789 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012754:	8b 04 85 60 dc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd23a0]
c001275b:	85 c0                	test   eax,eax
c001275d:	74 2a                	je     c0012789 <Directory::read(unsigned long long, void*, int*)+0x49>
c001275f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012765:	85 c0                	test   eax,eax
c0012767:	74 20                	je     c0012789 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012769:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001276d:	74 21                	je     c0012790 <Directory::read(unsigned long long, void*, int*)+0x50>
c001276f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012771:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012775:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001277b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001277f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012783:	5b                   	pop    ebx
c0012784:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012787:	ff e0                	jmp    eax
c0012789:	b8 0b 00 00 00       	mov    eax,0xb
c001278e:	eb 05                	jmp    c0012795 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012790:	b8 05 00 00 00       	mov    eax,0x5
c0012795:	5b                   	pop    ebx
c0012796:	c3                   	ret    
c0012797:	90                   	nop

c0012798 <Directory::write(unsigned long long, void*, int*)>:
c0012798:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001279c:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00127a3:	b8 0b 00 00 00       	mov    eax,0xb
c00127a8:	80 fa 19             	cmp    dl,0x19
c00127ab:	77 18                	ja     c00127c5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00127ad:	8b 14 95 60 dc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd23a0]
c00127b4:	85 d2                	test   edx,edx
c00127b6:	74 0d                	je     c00127c5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00127b8:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00127bf:	19 c0                	sbb    eax,eax
c00127c1:	83 e0 0a             	and    eax,0xa
c00127c4:	40                   	inc    eax
c00127c5:	c3                   	ret    

c00127c6 <File::isAtty()>:
c00127c6:	31 c0                	xor    eax,eax
c00127c8:	c3                   	ret    
c00127c9:	90                   	nop

c00127ca <Directory::isAtty()>:
c00127ca:	31 c0                	xor    eax,eax
c00127cc:	c3                   	ret    
c00127cd:	90                   	nop

c00127ce <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00127ce:	b8 0a 00 00 00       	mov    eax,0xa
c00127d3:	c3                   	ret    

c00127d4 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00127d4:	b8 0a 00 00 00       	mov    eax,0xa
c00127d9:	c3                   	ret    

c00127da <Filesystem::getFileFirstSector(char const*)>:
c00127da:	31 c0                	xor    eax,eax
c00127dc:	31 d2                	xor    edx,edx
c00127de:	c3                   	ret    
c00127df:	90                   	nop

c00127e0 <File::~File()>:
c00127e0:	83 ec 0c             	sub    esp,0xc
c00127e3:	ba dc a5 02 c0       	mov    edx,0xc002a5dc
c00127e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127ec:	89 10                	mov    DWORD PTR [eax],edx
c00127ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127f2:	83 ec 0c             	sub    esp,0xc
c00127f5:	50                   	push   eax
c00127f6:	e8 41 e7 ff ff       	call   c0010f3c <UnixFile::~UnixFile()>
c00127fb:	83 c4 10             	add    esp,0x10
c00127fe:	90                   	nop
c00127ff:	83 c4 0c             	add    esp,0xc
c0012802:	c3                   	ret    
c0012803:	90                   	nop

c0012804 <File::~File()>:
c0012804:	83 ec 0c             	sub    esp,0xc
c0012807:	83 ec 0c             	sub    esp,0xc
c001280a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001280e:	e8 cd ff ff ff       	call   c00127e0 <File::~File()>
c0012813:	83 c4 10             	add    esp,0x10
c0012816:	83 ec 08             	sub    esp,0x8
c0012819:	68 14 01 00 00       	push   0x114
c001281e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012822:	e8 72 fc ff ff       	call   c0012499 <operator delete(void*, unsigned long)>
c0012827:	83 c4 10             	add    esp,0x10
c001282a:	83 c4 0c             	add    esp,0xc
c001282d:	c3                   	ret    

c001282e <Directory::~Directory()>:
c001282e:	83 ec 0c             	sub    esp,0xc
c0012831:	ba f8 a5 02 c0       	mov    edx,0xc002a5f8
c0012836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001283a:	89 10                	mov    DWORD PTR [eax],edx
c001283c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012840:	83 ec 0c             	sub    esp,0xc
c0012843:	50                   	push   eax
c0012844:	e8 f3 e6 ff ff       	call   c0010f3c <UnixFile::~UnixFile()>
c0012849:	83 c4 10             	add    esp,0x10
c001284c:	90                   	nop
c001284d:	83 c4 0c             	add    esp,0xc
c0012850:	c3                   	ret    
c0012851:	90                   	nop

c0012852 <Directory::~Directory()>:
c0012852:	83 ec 0c             	sub    esp,0xc
c0012855:	83 ec 0c             	sub    esp,0xc
c0012858:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001285c:	e8 cd ff ff ff       	call   c001282e <Directory::~Directory()>
c0012861:	83 c4 10             	add    esp,0x10
c0012864:	83 ec 08             	sub    esp,0x8
c0012867:	68 14 01 00 00       	push   0x114
c001286c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012870:	e8 24 fc ff ff       	call   c0012499 <operator delete(void*, unsigned long)>
c0012875:	83 c4 10             	add    esp,0x10
c0012878:	83 c4 0c             	add    esp,0xc
c001287b:	c3                   	ret    

c001287c <Filesystem::Filesystem()>:
c001287c:	ba 74 a5 02 c0       	mov    edx,0xc002a574
c0012881:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012885:	89 10                	mov    DWORD PTR [eax],edx
c0012887:	8b 15 d4 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7d4
c001288d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012891:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012894:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012898:	a3 d4 d7 02 c0       	mov    ds:0xc002d7d4,eax
c001289d:	90                   	nop
c001289e:	c3                   	ret    
c001289f:	90                   	nop

c00128a0 <Filesystem::~Filesystem()>:
c00128a0:	ba 74 a5 02 c0       	mov    edx,0xc002a574
c00128a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128a9:	89 10                	mov    DWORD PTR [eax],edx
c00128ab:	90                   	nop
c00128ac:	c3                   	ret    
c00128ad:	90                   	nop

c00128ae <Filesystem::~Filesystem()>:
c00128ae:	83 ec 0c             	sub    esp,0xc
c00128b1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00128b5:	e8 e6 ff ff ff       	call   c00128a0 <Filesystem::~Filesystem()>
c00128ba:	83 c4 04             	add    esp,0x4
c00128bd:	83 ec 08             	sub    esp,0x8
c00128c0:	6a 08                	push   0x8
c00128c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128c6:	e8 ce fb ff ff       	call   c0012499 <operator delete(void*, unsigned long)>
c00128cb:	83 c4 10             	add    esp,0x10
c00128ce:	83 c4 0c             	add    esp,0xc
c00128d1:	c3                   	ret    

c00128d2 <Fs::getcwd(Process*, char*, int)>:
c00128d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00128d6:	31 c0                	xor    eax,eax
c00128d8:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00128db:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00128df:	7d 15                	jge    c00128f6 <Fs::getcwd(Process*, char*, int)+0x24>
c00128e1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00128e5:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c00128ec:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00128ef:	84 c9                	test   cl,cl
c00128f1:	74 06                	je     c00128f9 <Fs::getcwd(Process*, char*, int)+0x27>
c00128f3:	40                   	inc    eax
c00128f4:	eb e2                	jmp    c00128d8 <Fs::getcwd(Process*, char*, int)+0x6>
c00128f6:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00128f9:	31 c0                	xor    eax,eax
c00128fb:	c3                   	ret    

c00128fc <Fs::initVFS()>:
c00128fc:	83 ec 18             	sub    esp,0x18
c00128ff:	6a 08                	push   0x8
c0012901:	e8 93 cc ff ff       	call   c000f599 <malloc>
c0012906:	89 04 24             	mov    DWORD PTR [esp],eax
c0012909:	e8 c0 de 00 00       	call   c00207ce <FAT::FAT()>
c001290e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012915:	e8 7f cc ff ff       	call   c000f599 <malloc>
c001291a:	89 04 24             	mov    DWORD PTR [esp],eax
c001291d:	e8 b8 f0 00 00       	call   c00219da <ISO9660::ISO9660()>
c0012922:	83 c4 1c             	add    esp,0x1c
c0012925:	c3                   	ret    

c0012926 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012926:	55                   	push   ebp
c0012927:	57                   	push   edi
c0012928:	56                   	push   esi
c0012929:	53                   	push   ebx
c001292a:	81 ec 10 04 00 00    	sub    esp,0x410
c0012930:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012937:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c001293e:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012945:	68 00 04 00 00       	push   0x400
c001294a:	6a 00                	push   0x0
c001294c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012950:	56                   	push   esi
c0012951:	e8 fa dd fe ff       	call   c0000750 <memset>
c0012956:	83 c4 10             	add    esp,0x10
c0012959:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c001295d:	75 0b                	jne    c001296a <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c001295f:	50                   	push   eax
c0012960:	50                   	push   eax
c0012961:	57                   	push   edi
c0012962:	56                   	push   esi
c0012963:	e8 a4 de fe ff       	call   c000080c <strcpy>
c0012968:	eb 41                	jmp    c00129ab <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c001296a:	8a 07                	mov    al,BYTE PTR [edi]
c001296c:	3c 5c                	cmp    al,0x5c
c001296e:	74 04                	je     c0012974 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012970:	3c 2f                	cmp    al,0x2f
c0012972:	75 18                	jne    c001298c <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012974:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012977:	3c 60                	cmp    al,0x60
c0012979:	7e 03                	jle    c001297e <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c001297b:	83 e8 20             	sub    eax,0x20
c001297e:	88 04 24             	mov    BYTE PTR [esp],al
c0012981:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012988:	50                   	push   eax
c0012989:	50                   	push   eax
c001298a:	eb 18                	jmp    c00129a4 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c001298c:	50                   	push   eax
c001298d:	50                   	push   eax
c001298e:	55                   	push   ebp
c001298f:	56                   	push   esi
c0012990:	e8 77 de fe ff       	call   c000080c <strcpy>
c0012995:	5a                   	pop    edx
c0012996:	59                   	pop    ecx
c0012997:	68 62 b8 02 c0       	push   0xc002b862
c001299c:	56                   	push   esi
c001299d:	e8 aa df fe ff       	call   c000094c <strcat>
c00129a2:	5d                   	pop    ebp
c00129a3:	58                   	pop    eax
c00129a4:	57                   	push   edi
c00129a5:	56                   	push   esi
c00129a6:	e8 a1 df fe ff       	call   c000094c <strcat>
c00129ab:	83 c4 10             	add    esp,0x10
c00129ae:	8a 04 24             	mov    al,BYTE PTR [esp]
c00129b1:	3c 60                	cmp    al,0x60
c00129b3:	7e 03                	jle    c00129b8 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c00129b5:	83 e8 20             	sub    eax,0x20
c00129b8:	88 04 24             	mov    BYTE PTR [esp],al
c00129bb:	88 03                	mov    BYTE PTR [ebx],al
c00129bd:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00129c4:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c00129ca:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00129ce:	bf 03 00 00 00       	mov    edi,0x3
c00129d3:	b8 03 00 00 00       	mov    eax,0x3
c00129d8:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00129db:	84 d2                	test   dl,dl
c00129dd:	0f 84 91 00 00 00    	je     c0012a74 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c00129e3:	8d 4f 01             	lea    ecx,[edi+0x1]
c00129e6:	80 fa 5c             	cmp    dl,0x5c
c00129e9:	74 05                	je     c00129f0 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c00129eb:	80 fa 2f             	cmp    dl,0x2f
c00129ee:	75 12                	jne    c0012a02 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00129f0:	89 c5                	mov    ebp,eax
c00129f2:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00129f7:	74 09                	je     c0012a02 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00129f9:	40                   	inc    eax
c00129fa:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00129fe:	89 cf                	mov    edi,ecx
c0012a00:	eb d6                	jmp    c00129d8 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012a02:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012a07:	75 5b                	jne    c0012a64 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012a09:	80 fa 2e             	cmp    dl,0x2e
c0012a0c:	75 56                	jne    c0012a64 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012a0e:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012a12:	74 19                	je     c0012a2d <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012a14:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012a19:	74 53                	je     c0012a6e <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012a1b:	89 f9                	mov    ecx,edi
c0012a1d:	41                   	inc    ecx
c0012a1e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012a21:	80 fa 2f             	cmp    dl,0x2f
c0012a24:	74 f7                	je     c0012a1d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012a26:	80 fa 5c             	cmp    dl,0x5c
c0012a29:	74 f2                	je     c0012a1d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012a2b:	eb d1                	jmp    c00129fe <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012a2d:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012a32:	74 3a                	je     c0012a6e <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012a34:	83 f8 03             	cmp    eax,0x3
c0012a37:	74 c5                	je     c00129fe <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012a39:	41                   	inc    ecx
c0012a3a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012a3d:	80 fa 2f             	cmp    dl,0x2f
c0012a40:	74 f7                	je     c0012a39 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012a42:	80 fa 5c             	cmp    dl,0x5c
c0012a45:	74 f2                	je     c0012a39 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012a47:	48                   	dec    eax
c0012a48:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012a4c:	75 06                	jne    c0012a54 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012a4e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012a52:	eb f3                	jmp    c0012a47 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012a54:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012a58:	74 07                	je     c0012a61 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012a5a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012a5e:	48                   	dec    eax
c0012a5f:	eb f3                	jmp    c0012a54 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012a61:	40                   	inc    eax
c0012a62:	eb 9a                	jmp    c00129fe <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012a64:	80 fa 2f             	cmp    dl,0x2f
c0012a67:	74 95                	je     c00129fe <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012a69:	80 fa 5c             	cmp    dl,0x5c
c0012a6c:	74 90                	je     c00129fe <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012a6e:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012a71:	40                   	inc    eax
c0012a72:	eb 8a                	jmp    c00129fe <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012a74:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012a78:	83 ec 0c             	sub    esp,0xc
c0012a7b:	53                   	push   ebx
c0012a7c:	e8 eb dc fe ff       	call   c000076c <strlen>
c0012a81:	83 c4 10             	add    esp,0x10
c0012a84:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012a89:	75 26                	jne    c0012ab1 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012a8b:	83 ec 0c             	sub    esp,0xc
c0012a8e:	53                   	push   ebx
c0012a8f:	e8 d8 dc fe ff       	call   c000076c <strlen>
c0012a94:	83 c4 10             	add    esp,0x10
c0012a97:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012a9c:	74 26                	je     c0012ac4 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012a9e:	83 ec 0c             	sub    esp,0xc
c0012aa1:	53                   	push   ebx
c0012aa2:	e8 c5 dc fe ff       	call   c000076c <strlen>
c0012aa7:	83 c4 10             	add    esp,0x10
c0012aaa:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012aaf:	eb c7                	jmp    c0012a78 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012ab1:	83 ec 0c             	sub    esp,0xc
c0012ab4:	53                   	push   ebx
c0012ab5:	e8 b2 dc fe ff       	call   c000076c <strlen>
c0012aba:	83 c4 10             	add    esp,0x10
c0012abd:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012ac2:	74 c7                	je     c0012a8b <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012ac4:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012aca:	5b                   	pop    ebx
c0012acb:	5e                   	pop    esi
c0012acc:	5f                   	pop    edi
c0012acd:	5d                   	pop    ebp
c0012ace:	c3                   	ret    
c0012acf:	90                   	nop

c0012ad0 <File::File(char const*, Process*)>:
c0012ad0:	83 ec 0c             	sub    esp,0xc
c0012ad3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ad7:	83 ec 08             	sub    esp,0x8
c0012ada:	6a 00                	push   0x0
c0012adc:	50                   	push   eax
c0012add:	e8 78 e2 ff ff       	call   c0010d5a <UnixFile::UnixFile(int)>
c0012ae2:	83 c4 10             	add    esp,0x10
c0012ae5:	ba dc a5 02 c0       	mov    edx,0xc002a5dc
c0012aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012aee:	89 10                	mov    DWORD PTR [eax],edx
c0012af0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012af4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012afa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012afe:	83 c0 0d             	add    eax,0xd
c0012b01:	83 ec 04             	sub    esp,0x4
c0012b04:	52                   	push   edx
c0012b05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b09:	50                   	push   eax
c0012b0a:	e8 17 fe ff ff       	call   c0012926 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012b0f:	83 c4 10             	add    esp,0x10
c0012b12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b16:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012b19:	8d 50 bf             	lea    edx,[eax-0x41]
c0012b1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b20:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012b26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b2a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012b2e:	90                   	nop
c0012b2f:	83 c4 0c             	add    esp,0xc
c0012b32:	c3                   	ret    
c0012b33:	90                   	nop

c0012b34 <File::open(FileOpenMode)>:
c0012b34:	53                   	push   ebx
c0012b35:	b8 0b 00 00 00       	mov    eax,0xb
c0012b3a:	83 ec 08             	sub    esp,0x8
c0012b3d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012b41:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012b48:	80 fa 19             	cmp    dl,0x19
c0012b4b:	77 40                	ja     c0012b8d <File::open(FileOpenMode)+0x59>
c0012b4d:	8b 14 95 60 dc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd23a0]
c0012b54:	85 d2                	test   edx,edx
c0012b56:	74 35                	je     c0012b8d <File::open(FileOpenMode)+0x59>
c0012b58:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012b5e:	85 d2                	test   edx,edx
c0012b60:	74 2b                	je     c0012b8d <File::open(FileOpenMode)+0x59>
c0012b62:	b8 06 00 00 00       	mov    eax,0x6
c0012b67:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012b6b:	75 20                	jne    c0012b8d <File::open(FileOpenMode)+0x59>
c0012b6d:	8b 02                	mov    eax,DWORD PTR [edx]
c0012b6f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012b75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012b79:	51                   	push   ecx
c0012b7a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012b7d:	51                   	push   ecx
c0012b7e:	52                   	push   edx
c0012b7f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012b82:	83 c4 10             	add    esp,0x10
c0012b85:	85 c0                	test   eax,eax
c0012b87:	75 04                	jne    c0012b8d <File::open(FileOpenMode)+0x59>
c0012b89:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012b8d:	83 c4 08             	add    esp,0x8
c0012b90:	5b                   	pop    ebx
c0012b91:	c3                   	ret    

c0012b92 <File::close()>:
c0012b92:	53                   	push   ebx
c0012b93:	b8 0b 00 00 00       	mov    eax,0xb
c0012b98:	83 ec 08             	sub    esp,0x8
c0012b9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012b9f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012ba6:	80 fa 19             	cmp    dl,0x19
c0012ba9:	77 41                	ja     c0012bec <File::close()+0x5a>
c0012bab:	8b 1c 95 60 dc 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd23a0]
c0012bb2:	85 db                	test   ebx,ebx
c0012bb4:	74 36                	je     c0012bec <File::close()+0x5a>
c0012bb6:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012bbd:	74 2d                	je     c0012bec <File::close()+0x5a>
c0012bbf:	b8 05 00 00 00       	mov    eax,0x5
c0012bc4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012bc8:	74 22                	je     c0012bec <File::close()+0x5a>
c0012bca:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012bce:	8b 04 95 60 dc 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd23a0]
c0012bd5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012bdb:	53                   	push   ebx
c0012bdc:	53                   	push   ebx
c0012bdd:	8b 10                	mov    edx,DWORD PTR [eax]
c0012bdf:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012be5:	50                   	push   eax
c0012be6:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012be9:	83 c4 10             	add    esp,0x10
c0012bec:	83 c4 08             	add    esp,0x8
c0012bef:	5b                   	pop    ebx
c0012bf0:	c3                   	ret    
c0012bf1:	90                   	nop

c0012bf2 <File::seek(unsigned long long)>:
c0012bf2:	56                   	push   esi
c0012bf3:	53                   	push   ebx
c0012bf4:	b8 0b 00 00 00       	mov    eax,0xb
c0012bf9:	51                   	push   ecx
c0012bfa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012bfe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012c02:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012c09:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012c0d:	80 fa 19             	cmp    dl,0x19
c0012c10:	77 31                	ja     c0012c43 <File::seek(unsigned long long)+0x51>
c0012c12:	8b 14 95 60 dc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd23a0]
c0012c19:	85 d2                	test   edx,edx
c0012c1b:	74 26                	je     c0012c43 <File::seek(unsigned long long)+0x51>
c0012c1d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012c23:	85 d2                	test   edx,edx
c0012c25:	74 1c                	je     c0012c43 <File::seek(unsigned long long)+0x51>
c0012c27:	b8 05 00 00 00       	mov    eax,0x5
c0012c2c:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012c30:	74 11                	je     c0012c43 <File::seek(unsigned long long)+0x51>
c0012c32:	8b 02                	mov    eax,DWORD PTR [edx]
c0012c34:	53                   	push   ebx
c0012c35:	51                   	push   ecx
c0012c36:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012c3c:	52                   	push   edx
c0012c3d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012c40:	83 c4 10             	add    esp,0x10
c0012c43:	5a                   	pop    edx
c0012c44:	5b                   	pop    ebx
c0012c45:	5e                   	pop    esi
c0012c46:	c3                   	ret    
c0012c47:	90                   	nop

c0012c48 <File::tell(unsigned long long*)>:
c0012c48:	83 ec 0c             	sub    esp,0xc
c0012c4b:	b8 0b 00 00 00       	mov    eax,0xb
c0012c50:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012c54:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012c5b:	80 fa 19             	cmp    dl,0x19
c0012c5e:	77 34                	ja     c0012c94 <File::tell(unsigned long long*)+0x4c>
c0012c60:	8b 14 95 60 dc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd23a0]
c0012c67:	85 d2                	test   edx,edx
c0012c69:	74 29                	je     c0012c94 <File::tell(unsigned long long*)+0x4c>
c0012c6b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012c71:	85 d2                	test   edx,edx
c0012c73:	74 1f                	je     c0012c94 <File::tell(unsigned long long*)+0x4c>
c0012c75:	b8 05 00 00 00       	mov    eax,0x5
c0012c7a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012c7e:	74 14                	je     c0012c94 <File::tell(unsigned long long*)+0x4c>
c0012c80:	50                   	push   eax
c0012c81:	8b 02                	mov    eax,DWORD PTR [edx]
c0012c83:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012c87:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012c8d:	52                   	push   edx
c0012c8e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012c91:	83 c4 10             	add    esp,0x10
c0012c94:	83 c4 0c             	add    esp,0xc
c0012c97:	c3                   	ret    

c0012c98 <File::rewind()>:
c0012c98:	83 ec 10             	sub    esp,0x10
c0012c9b:	6a 00                	push   0x0
c0012c9d:	6a 00                	push   0x0
c0012c9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ca3:	e8 4a ff ff ff       	call   c0012bf2 <File::seek(unsigned long long)>
c0012ca8:	83 c4 1c             	add    esp,0x1c
c0012cab:	c3                   	ret    

c0012cac <File::unlink()>:
c0012cac:	83 ec 0c             	sub    esp,0xc
c0012caf:	b8 0b 00 00 00       	mov    eax,0xb
c0012cb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012cb8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012cbf:	80 f9 19             	cmp    cl,0x19
c0012cc2:	77 2f                	ja     c0012cf3 <File::unlink()+0x47>
c0012cc4:	8b 0c 8d 60 dc 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd23a0]
c0012ccb:	85 c9                	test   ecx,ecx
c0012ccd:	74 24                	je     c0012cf3 <File::unlink()+0x47>
c0012ccf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012cd5:	85 c9                	test   ecx,ecx
c0012cd7:	74 1a                	je     c0012cf3 <File::unlink()+0x47>
c0012cd9:	b8 06 00 00 00       	mov    eax,0x6
c0012cde:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ce2:	75 0f                	jne    c0012cf3 <File::unlink()+0x47>
c0012ce4:	83 c2 0d             	add    edx,0xd
c0012ce7:	50                   	push   eax
c0012ce8:	50                   	push   eax
c0012ce9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ceb:	52                   	push   edx
c0012cec:	51                   	push   ecx
c0012ced:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012cf0:	83 c4 10             	add    esp,0x10
c0012cf3:	83 c4 0c             	add    esp,0xc
c0012cf6:	c3                   	ret    
c0012cf7:	90                   	nop

c0012cf8 <File::rename(char const*)>:
c0012cf8:	83 ec 0c             	sub    esp,0xc
c0012cfb:	b8 0b 00 00 00       	mov    eax,0xb
c0012d00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d04:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d0b:	80 f9 19             	cmp    cl,0x19
c0012d0e:	77 32                	ja     c0012d42 <File::rename(char const*)+0x4a>
c0012d10:	8b 0c 8d 60 dc 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd23a0]
c0012d17:	85 c9                	test   ecx,ecx
c0012d19:	74 27                	je     c0012d42 <File::rename(char const*)+0x4a>
c0012d1b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012d21:	85 c9                	test   ecx,ecx
c0012d23:	74 1d                	je     c0012d42 <File::rename(char const*)+0x4a>
c0012d25:	b8 06 00 00 00       	mov    eax,0x6
c0012d2a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d2e:	75 12                	jne    c0012d42 <File::rename(char const*)+0x4a>
c0012d30:	83 c2 0d             	add    edx,0xd
c0012d33:	50                   	push   eax
c0012d34:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012d36:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d3a:	52                   	push   edx
c0012d3b:	51                   	push   ecx
c0012d3c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012d3f:	83 c4 10             	add    esp,0x10
c0012d42:	83 c4 0c             	add    esp,0xc
c0012d45:	c3                   	ret    

c0012d46 <File::chfatattr(unsigned char, unsigned char)>:
c0012d46:	57                   	push   edi
c0012d47:	b8 0b 00 00 00       	mov    eax,0xb
c0012d4c:	56                   	push   esi
c0012d4d:	53                   	push   ebx
c0012d4e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d52:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012d56:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d5d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012d61:	80 f9 19             	cmp    cl,0x19
c0012d64:	77 37                	ja     c0012d9d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012d66:	8b 0c 8d 60 dc 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd23a0]
c0012d6d:	85 c9                	test   ecx,ecx
c0012d6f:	74 2c                	je     c0012d9d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012d71:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012d77:	85 c9                	test   ecx,ecx
c0012d79:	74 22                	je     c0012d9d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012d7b:	b8 06 00 00 00       	mov    eax,0x6
c0012d80:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d84:	75 17                	jne    c0012d9d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012d86:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012d88:	89 f0                	mov    eax,esi
c0012d8a:	83 c2 0d             	add    edx,0xd
c0012d8d:	0f b6 f0             	movzx  esi,al
c0012d90:	0f b6 db             	movzx  ebx,bl
c0012d93:	56                   	push   esi
c0012d94:	53                   	push   ebx
c0012d95:	52                   	push   edx
c0012d96:	51                   	push   ecx
c0012d97:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012d9a:	83 c4 10             	add    esp,0x10
c0012d9d:	5b                   	pop    ebx
c0012d9e:	5e                   	pop    esi
c0012d9f:	5f                   	pop    edi
c0012da0:	c3                   	ret    
c0012da1:	90                   	nop

c0012da2 <File::exists()>:
c0012da2:	83 ec 0c             	sub    esp,0xc
c0012da5:	31 c0                	xor    eax,eax
c0012da7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012dab:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012db2:	80 f9 19             	cmp    cl,0x19
c0012db5:	77 24                	ja     c0012ddb <File::exists()+0x39>
c0012db7:	8b 0c 8d 60 dc 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd23a0]
c0012dbe:	85 c9                	test   ecx,ecx
c0012dc0:	74 19                	je     c0012ddb <File::exists()+0x39>
c0012dc2:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012dc8:	85 c9                	test   ecx,ecx
c0012dca:	74 0f                	je     c0012ddb <File::exists()+0x39>
c0012dcc:	83 c2 0d             	add    edx,0xd
c0012dcf:	50                   	push   eax
c0012dd0:	50                   	push   eax
c0012dd1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012dd3:	52                   	push   edx
c0012dd4:	51                   	push   ecx
c0012dd5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012dd8:	83 c4 10             	add    esp,0x10
c0012ddb:	83 c4 0c             	add    esp,0xc
c0012dde:	c3                   	ret    
c0012ddf:	90                   	nop

c0012de0 <File::stat(unsigned long long*, bool*)>:
c0012de0:	56                   	push   esi
c0012de1:	53                   	push   ebx
c0012de2:	50                   	push   eax
c0012de3:	b8 0b 00 00 00       	mov    eax,0xb
c0012de8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012dec:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012df0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012df7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012dfb:	80 f9 19             	cmp    cl,0x19
c0012dfe:	77 3d                	ja     c0012e3d <File::stat(unsigned long long*, bool*)+0x5d>
c0012e00:	8b 0c 8d 60 dc 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd23a0]
c0012e07:	85 c9                	test   ecx,ecx
c0012e09:	74 32                	je     c0012e3d <File::stat(unsigned long long*, bool*)+0x5d>
c0012e0b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e11:	85 c9                	test   ecx,ecx
c0012e13:	74 28                	je     c0012e3d <File::stat(unsigned long long*, bool*)+0x5d>
c0012e15:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e17:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e1b:	74 13                	je     c0012e30 <File::stat(unsigned long long*, bool*)+0x50>
c0012e1d:	83 ec 04             	sub    esp,0x4
c0012e20:	56                   	push   esi
c0012e21:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012e27:	51                   	push   ecx
c0012e28:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012e2b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012e2e:	eb 0a                	jmp    c0012e3a <File::stat(unsigned long long*, bool*)+0x5a>
c0012e30:	53                   	push   ebx
c0012e31:	83 c2 0d             	add    edx,0xd
c0012e34:	56                   	push   esi
c0012e35:	52                   	push   edx
c0012e36:	51                   	push   ecx
c0012e37:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012e3a:	83 c4 10             	add    esp,0x10
c0012e3d:	5a                   	pop    edx
c0012e3e:	5b                   	pop    ebx
c0012e3f:	5e                   	pop    esi
c0012e40:	c3                   	ret    

c0012e41 <Fs::setcwd(Process*, char*)>:
c0012e41:	55                   	push   ebp
c0012e42:	57                   	push   edi
c0012e43:	56                   	push   esi
c0012e44:	53                   	push   ebx
c0012e45:	81 ec 20 02 00 00    	sub    esp,0x220
c0012e4b:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012e52:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012e58:	57                   	push   edi
c0012e59:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012e60:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012e64:	56                   	push   esi
c0012e65:	e8 bc fa ff ff       	call   c0012926 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012e6a:	89 34 24             	mov    DWORD PTR [esp],esi
c0012e6d:	e8 fa d8 fe ff       	call   c000076c <strlen>
c0012e72:	83 c4 10             	add    esp,0x10
c0012e75:	83 f8 02             	cmp    eax,0x2
c0012e78:	77 17                	ja     c0012e91 <Fs::setcwd(Process*, char*)+0x50>
c0012e7a:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012e7f:	83 e8 41             	sub    eax,0x41
c0012e82:	83 f8 19             	cmp    eax,0x19
c0012e85:	76 24                	jbe    c0012eab <Fs::setcwd(Process*, char*)+0x6a>
c0012e87:	b8 03 00 00 00       	mov    eax,0x3
c0012e8c:	e9 e0 00 00 00       	jmp    c0012f71 <Fs::setcwd(Process*, char*)+0x130>
c0012e91:	83 ec 0c             	sub    esp,0xc
c0012e94:	56                   	push   esi
c0012e95:	e8 d2 d8 fe ff       	call   c000076c <strlen>
c0012e9a:	83 c4 10             	add    esp,0x10
c0012e9d:	83 f8 03             	cmp    eax,0x3
c0012ea0:	75 34                	jne    c0012ed6 <Fs::setcwd(Process*, char*)+0x95>
c0012ea2:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012ea7:	75 2d                	jne    c0012ed6 <Fs::setcwd(Process*, char*)+0x95>
c0012ea9:	eb cf                	jmp    c0012e7a <Fs::setcwd(Process*, char*)+0x39>
c0012eab:	8b 14 85 60 dc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd23a0]
c0012eb2:	b8 05 00 00 00       	mov    eax,0x5
c0012eb7:	85 d2                	test   edx,edx
c0012eb9:	0f 84 b2 00 00 00    	je     c0012f71 <Fs::setcwd(Process*, char*)+0x130>
c0012ebf:	b8 06 00 00 00       	mov    eax,0x6
c0012ec4:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012ecb:	0f 85 92 00 00 00    	jne    c0012f63 <Fs::setcwd(Process*, char*)+0x122>
c0012ed1:	e9 9b 00 00 00       	jmp    c0012f71 <Fs::setcwd(Process*, char*)+0x130>
c0012ed6:	83 ec 0c             	sub    esp,0xc
c0012ed9:	68 14 01 00 00       	push   0x114
c0012ede:	e8 b6 c6 ff ff       	call   c000f599 <malloc>
c0012ee3:	83 c4 0c             	add    esp,0xc
c0012ee6:	89 c3                	mov    ebx,eax
c0012ee8:	55                   	push   ebp
c0012ee9:	56                   	push   esi
c0012eea:	50                   	push   eax
c0012eeb:	e8 e0 fb ff ff       	call   c0012ad0 <File::File(char const*, Process*)>
c0012ef0:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0012ef5:	83 c4 0c             	add    esp,0xc
c0012ef8:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0012efc:	50                   	push   eax
c0012efd:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012f01:	50                   	push   eax
c0012f02:	53                   	push   ebx
c0012f03:	e8 d8 fe ff ff       	call   c0012de0 <File::stat(unsigned long long*, bool*)>
c0012f08:	83 c4 10             	add    esp,0x10
c0012f0b:	83 f8 02             	cmp    eax,0x2
c0012f0e:	74 04                	je     c0012f14 <Fs::setcwd(Process*, char*)+0xd3>
c0012f10:	85 c0                	test   eax,eax
c0012f12:	74 1c                	je     c0012f30 <Fs::setcwd(Process*, char*)+0xef>
c0012f14:	b8 01 00 00 00       	mov    eax,0x1
c0012f19:	85 db                	test   ebx,ebx
c0012f1b:	74 54                	je     c0012f71 <Fs::setcwd(Process*, char*)+0x130>
c0012f1d:	83 ec 0c             	sub    esp,0xc
c0012f20:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f22:	53                   	push   ebx
c0012f23:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f26:	83 c4 10             	add    esp,0x10
c0012f29:	b8 01 00 00 00       	mov    eax,0x1
c0012f2e:	eb 41                	jmp    c0012f71 <Fs::setcwd(Process*, char*)+0x130>
c0012f30:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012f35:	75 1c                	jne    c0012f53 <Fs::setcwd(Process*, char*)+0x112>
c0012f37:	b8 02 00 00 00       	mov    eax,0x2
c0012f3c:	85 db                	test   ebx,ebx
c0012f3e:	74 31                	je     c0012f71 <Fs::setcwd(Process*, char*)+0x130>
c0012f40:	83 ec 0c             	sub    esp,0xc
c0012f43:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f45:	53                   	push   ebx
c0012f46:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f49:	83 c4 10             	add    esp,0x10
c0012f4c:	b8 02 00 00 00       	mov    eax,0x2
c0012f51:	eb 1e                	jmp    c0012f71 <Fs::setcwd(Process*, char*)+0x130>
c0012f53:	85 db                	test   ebx,ebx
c0012f55:	74 0c                	je     c0012f63 <Fs::setcwd(Process*, char*)+0x122>
c0012f57:	83 ec 0c             	sub    esp,0xc
c0012f5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f5c:	53                   	push   ebx
c0012f5d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f60:	83 c4 10             	add    esp,0x10
c0012f63:	50                   	push   eax
c0012f64:	50                   	push   eax
c0012f65:	56                   	push   esi
c0012f66:	57                   	push   edi
c0012f67:	e8 a0 d8 fe ff       	call   c000080c <strcpy>
c0012f6c:	83 c4 10             	add    esp,0x10
c0012f6f:	31 c0                	xor    eax,eax
c0012f71:	81 c4 1c 02 00 00    	add    esp,0x21c
c0012f77:	5b                   	pop    ebx
c0012f78:	5e                   	pop    esi
c0012f79:	5f                   	pop    edi
c0012f7a:	5d                   	pop    ebp
c0012f7b:	c3                   	ret    

c0012f7c <Directory::Directory(char const*, Process*)>:
c0012f7c:	83 ec 0c             	sub    esp,0xc
c0012f7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f83:	83 ec 08             	sub    esp,0x8
c0012f86:	6a 00                	push   0x0
c0012f88:	50                   	push   eax
c0012f89:	e8 cc dd ff ff       	call   c0010d5a <UnixFile::UnixFile(int)>
c0012f8e:	83 c4 10             	add    esp,0x10
c0012f91:	ba f8 a5 02 c0       	mov    edx,0xc002a5f8
c0012f96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f9a:	89 10                	mov    DWORD PTR [eax],edx
c0012f9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012fa0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012fa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012faa:	83 c0 0d             	add    eax,0xd
c0012fad:	83 ec 04             	sub    esp,0x4
c0012fb0:	52                   	push   edx
c0012fb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fb5:	50                   	push   eax
c0012fb6:	e8 6b f9 ff ff       	call   c0012926 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012fbb:	83 c4 10             	add    esp,0x10
c0012fbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fc2:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012fc5:	8d 50 bf             	lea    edx,[eax-0x41]
c0012fc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fcc:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012fd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fd6:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012fda:	90                   	nop
c0012fdb:	83 c4 0c             	add    esp,0xc
c0012fde:	c3                   	ret    
c0012fdf:	90                   	nop

c0012fe0 <Directory::open()>:
c0012fe0:	53                   	push   ebx
c0012fe1:	b8 0b 00 00 00       	mov    eax,0xb
c0012fe6:	83 ec 08             	sub    esp,0x8
c0012fe9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012fed:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012ff4:	80 fa 19             	cmp    dl,0x19
c0012ff7:	77 3d                	ja     c0013036 <Directory::open()+0x56>
c0012ff9:	8b 14 95 60 dc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd23a0]
c0013000:	85 d2                	test   edx,edx
c0013002:	74 32                	je     c0013036 <Directory::open()+0x56>
c0013004:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001300a:	85 d2                	test   edx,edx
c001300c:	74 28                	je     c0013036 <Directory::open()+0x56>
c001300e:	b8 06 00 00 00       	mov    eax,0x6
c0013013:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013017:	75 1d                	jne    c0013036 <Directory::open()+0x56>
c0013019:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001301f:	50                   	push   eax
c0013020:	8b 02                	mov    eax,DWORD PTR [edx]
c0013022:	51                   	push   ecx
c0013023:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013026:	51                   	push   ecx
c0013027:	52                   	push   edx
c0013028:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c001302b:	83 c4 10             	add    esp,0x10
c001302e:	85 c0                	test   eax,eax
c0013030:	75 04                	jne    c0013036 <Directory::open()+0x56>
c0013032:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013036:	83 c4 08             	add    esp,0x8
c0013039:	5b                   	pop    ebx
c001303a:	c3                   	ret    
c001303b:	90                   	nop

c001303c <Directory::close()>:
c001303c:	53                   	push   ebx
c001303d:	b8 0b 00 00 00       	mov    eax,0xb
c0013042:	83 ec 08             	sub    esp,0x8
c0013045:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013049:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013050:	80 fa 19             	cmp    dl,0x19
c0013053:	77 41                	ja     c0013096 <Directory::close()+0x5a>
c0013055:	8b 1c 95 60 dc 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd23a0]
c001305c:	85 db                	test   ebx,ebx
c001305e:	74 36                	je     c0013096 <Directory::close()+0x5a>
c0013060:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013067:	74 2d                	je     c0013096 <Directory::close()+0x5a>
c0013069:	b8 05 00 00 00       	mov    eax,0x5
c001306e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013072:	74 22                	je     c0013096 <Directory::close()+0x5a>
c0013074:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013078:	8b 04 95 60 dc 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd23a0]
c001307f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013085:	53                   	push   ebx
c0013086:	53                   	push   ebx
c0013087:	8b 10                	mov    edx,DWORD PTR [eax]
c0013089:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001308f:	50                   	push   eax
c0013090:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013093:	83 c4 10             	add    esp,0x10
c0013096:	83 c4 08             	add    esp,0x8
c0013099:	5b                   	pop    ebx
c001309a:	c3                   	ret    
c001309b:	90                   	nop

c001309c <Directory::unlink()>:
c001309c:	83 ec 0c             	sub    esp,0xc
c001309f:	b8 0b 00 00 00       	mov    eax,0xb
c00130a4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130a8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00130af:	80 f9 19             	cmp    cl,0x19
c00130b2:	77 2f                	ja     c00130e3 <Directory::unlink()+0x47>
c00130b4:	8b 0c 8d 60 dc 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd23a0]
c00130bb:	85 c9                	test   ecx,ecx
c00130bd:	74 24                	je     c00130e3 <Directory::unlink()+0x47>
c00130bf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00130c5:	85 c9                	test   ecx,ecx
c00130c7:	74 1a                	je     c00130e3 <Directory::unlink()+0x47>
c00130c9:	b8 06 00 00 00       	mov    eax,0x6
c00130ce:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130d2:	75 0f                	jne    c00130e3 <Directory::unlink()+0x47>
c00130d4:	83 c2 0d             	add    edx,0xd
c00130d7:	50                   	push   eax
c00130d8:	50                   	push   eax
c00130d9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00130db:	52                   	push   edx
c00130dc:	51                   	push   ecx
c00130dd:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00130e0:	83 c4 10             	add    esp,0x10
c00130e3:	83 c4 0c             	add    esp,0xc
c00130e6:	c3                   	ret    
c00130e7:	90                   	nop

c00130e8 <Directory::rename(char const*)>:
c00130e8:	83 ec 0c             	sub    esp,0xc
c00130eb:	b8 0b 00 00 00       	mov    eax,0xb
c00130f0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130f4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00130fb:	80 f9 19             	cmp    cl,0x19
c00130fe:	77 32                	ja     c0013132 <Directory::rename(char const*)+0x4a>
c0013100:	8b 0c 8d 60 dc 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd23a0]
c0013107:	85 c9                	test   ecx,ecx
c0013109:	74 27                	je     c0013132 <Directory::rename(char const*)+0x4a>
c001310b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013111:	85 c9                	test   ecx,ecx
c0013113:	74 1d                	je     c0013132 <Directory::rename(char const*)+0x4a>
c0013115:	b8 06 00 00 00       	mov    eax,0x6
c001311a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001311e:	75 12                	jne    c0013132 <Directory::rename(char const*)+0x4a>
c0013120:	83 c2 0d             	add    edx,0xd
c0013123:	50                   	push   eax
c0013124:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013126:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001312a:	52                   	push   edx
c001312b:	51                   	push   ecx
c001312c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001312f:	83 c4 10             	add    esp,0x10
c0013132:	83 c4 0c             	add    esp,0xc
c0013135:	c3                   	ret    

c0013136 <Directory::exists()>:
c0013136:	83 ec 0c             	sub    esp,0xc
c0013139:	31 c0                	xor    eax,eax
c001313b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001313f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013146:	80 f9 19             	cmp    cl,0x19
c0013149:	77 24                	ja     c001316f <Directory::exists()+0x39>
c001314b:	8b 0c 8d 60 dc 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd23a0]
c0013152:	85 c9                	test   ecx,ecx
c0013154:	74 19                	je     c001316f <Directory::exists()+0x39>
c0013156:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001315c:	85 c9                	test   ecx,ecx
c001315e:	74 0f                	je     c001316f <Directory::exists()+0x39>
c0013160:	83 c2 0d             	add    edx,0xd
c0013163:	50                   	push   eax
c0013164:	50                   	push   eax
c0013165:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013167:	52                   	push   edx
c0013168:	51                   	push   ecx
c0013169:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001316c:	83 c4 10             	add    esp,0x10
c001316f:	83 c4 0c             	add    esp,0xc
c0013172:	c3                   	ret    
c0013173:	90                   	nop

c0013174 <Directory::read(dirent*)>:
c0013174:	83 ec 1c             	sub    esp,0x1c
c0013177:	b8 0b 00 00 00       	mov    eax,0xb
c001317c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013180:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013187:	80 fa 19             	cmp    dl,0x19
c001318a:	77 30                	ja     c00131bc <Directory::read(dirent*)+0x48>
c001318c:	8b 14 95 60 dc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd23a0]
c0013193:	85 d2                	test   edx,edx
c0013195:	74 25                	je     c00131bc <Directory::read(dirent*)+0x48>
c0013197:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001319e:	74 1c                	je     c00131bc <Directory::read(dirent*)+0x48>
c00131a0:	83 ec 0c             	sub    esp,0xc
c00131a3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131a5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00131a9:	52                   	push   edx
c00131aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00131ae:	6a 00                	push   0x0
c00131b0:	68 10 01 00 00       	push   0x110
c00131b5:	51                   	push   ecx
c00131b6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00131b9:	83 c4 20             	add    esp,0x20
c00131bc:	83 c4 1c             	add    esp,0x1c
c00131bf:	c3                   	ret    

c00131c0 <Directory::create()>:
c00131c0:	83 ec 0c             	sub    esp,0xc
c00131c3:	b8 0b 00 00 00       	mov    eax,0xb
c00131c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00131cc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00131d3:	80 f9 19             	cmp    cl,0x19
c00131d6:	77 2f                	ja     c0013207 <Directory::create()+0x47>
c00131d8:	8b 0c 8d 60 dc 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd23a0]
c00131df:	85 c9                	test   ecx,ecx
c00131e1:	74 24                	je     c0013207 <Directory::create()+0x47>
c00131e3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00131e9:	85 c9                	test   ecx,ecx
c00131eb:	74 1a                	je     c0013207 <Directory::create()+0x47>
c00131ed:	b8 06 00 00 00       	mov    eax,0x6
c00131f2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131f6:	75 0f                	jne    c0013207 <Directory::create()+0x47>
c00131f8:	83 c2 0d             	add    edx,0xd
c00131fb:	50                   	push   eax
c00131fc:	50                   	push   eax
c00131fd:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131ff:	52                   	push   edx
c0013200:	51                   	push   ecx
c0013201:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013204:	83 c4 10             	add    esp,0x10
c0013207:	83 c4 0c             	add    esp,0xc
c001320a:	c3                   	ret    
c001320b:	90                   	nop

c001320c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001320c:	b8 0a 00 00 00       	mov    eax,0xa
c0013211:	c3                   	ret    

c0013212 <Bus::Bus(char const*)>:
c0013212:	83 ec 0c             	sub    esp,0xc
c0013215:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013219:	83 ec 08             	sub    esp,0x8
c001321c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013220:	50                   	push   eax
c0013221:	e8 88 09 00 00       	call   c0013bae <Device::Device(char const*)>
c0013226:	83 c4 10             	add    esp,0x10
c0013229:	ba 14 a6 02 c0       	mov    edx,0xc002a614
c001322e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013232:	89 10                	mov    DWORD PTR [eax],edx
c0013234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013238:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013242:	90                   	nop
c0013243:	83 c4 0c             	add    esp,0xc
c0013246:	c3                   	ret    
c0013247:	90                   	nop

c0013248 <Bus::~Bus()>:
c0013248:	83 ec 0c             	sub    esp,0xc
c001324b:	ba 14 a6 02 c0       	mov    edx,0xc002a614
c0013250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013254:	89 10                	mov    DWORD PTR [eax],edx
c0013256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001325a:	83 ec 0c             	sub    esp,0xc
c001325d:	50                   	push   eax
c001325e:	e8 15 06 00 00       	call   c0013878 <Device::~Device()>
c0013263:	83 c4 10             	add    esp,0x10
c0013266:	90                   	nop
c0013267:	83 c4 0c             	add    esp,0xc
c001326a:	c3                   	ret    
c001326b:	90                   	nop

c001326c <Bus::~Bus()>:
c001326c:	83 ec 0c             	sub    esp,0xc
c001326f:	83 ec 0c             	sub    esp,0xc
c0013272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013276:	e8 cd ff ff ff       	call   c0013248 <Bus::~Bus()>
c001327b:	83 c4 10             	add    esp,0x10
c001327e:	83 ec 08             	sub    esp,0x8
c0013281:	68 58 01 00 00       	push   0x158
c0013286:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001328a:	e8 0a f2 ff ff       	call   c0012499 <operator delete(void*, unsigned long)>
c001328f:	83 c4 10             	add    esp,0x10
c0013292:	83 c4 0c             	add    esp,0xc
c0013295:	c3                   	ret    

c0013296 <Buzzer::Buzzer(char const*)>:
c0013296:	83 ec 0c             	sub    esp,0xc
c0013299:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001329d:	83 ec 08             	sub    esp,0x8
c00132a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132a4:	50                   	push   eax
c00132a5:	e8 04 09 00 00       	call   c0013bae <Device::Device(char const*)>
c00132aa:	83 c4 10             	add    esp,0x10
c00132ad:	ba 40 a6 02 c0       	mov    edx,0xc002a640
c00132b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132b6:	89 10                	mov    DWORD PTR [eax],edx
c00132b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132bc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00132c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132ca:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c00132d4:	90                   	nop
c00132d5:	83 c4 0c             	add    esp,0xc
c00132d8:	c3                   	ret    
c00132d9:	90                   	nop

c00132da <Buzzer::~Buzzer()>:
c00132da:	83 ec 0c             	sub    esp,0xc
c00132dd:	ba 40 a6 02 c0       	mov    edx,0xc002a640
c00132e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132e6:	89 10                	mov    DWORD PTR [eax],edx
c00132e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132ec:	83 ec 0c             	sub    esp,0xc
c00132ef:	50                   	push   eax
c00132f0:	e8 83 05 00 00       	call   c0013878 <Device::~Device()>
c00132f5:	83 c4 10             	add    esp,0x10
c00132f8:	90                   	nop
c00132f9:	83 c4 0c             	add    esp,0xc
c00132fc:	c3                   	ret    
c00132fd:	90                   	nop

c00132fe <Buzzer::~Buzzer()>:
c00132fe:	83 ec 0c             	sub    esp,0xc
c0013301:	83 ec 0c             	sub    esp,0xc
c0013304:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013308:	e8 cd ff ff ff       	call   c00132da <Buzzer::~Buzzer()>
c001330d:	83 c4 10             	add    esp,0x10
c0013310:	83 ec 08             	sub    esp,0x8
c0013313:	68 5c 01 00 00       	push   0x15c
c0013318:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001331c:	e8 78 f1 ff ff       	call   c0012499 <operator delete(void*, unsigned long)>
c0013321:	83 c4 10             	add    esp,0x10
c0013324:	83 c4 0c             	add    esp,0xc
c0013327:	c3                   	ret    

c0013328 <Buzzer::stop()>:
c0013328:	83 ec 14             	sub    esp,0x14
c001332b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001332f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013331:	6a 00                	push   0x0
c0013333:	50                   	push   eax
c0013334:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013337:	83 c4 1c             	add    esp,0x1c
c001333a:	c3                   	ret    

c001333b <beepThread(void*)>:
c001333b:	53                   	push   ebx
c001333c:	83 ec 08             	sub    esp,0x8
c001333f:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c0013344:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013348:	48                   	dec    eax
c0013349:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c001334e:	75 01                	jne    c0013351 <beepThread(void*)+0x16>
c0013350:	fb                   	sti    
c0013351:	50                   	push   eax
c0013352:	50                   	push   eax
c0013353:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013358:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c001335e:	52                   	push   edx
c001335f:	50                   	push   eax
c0013360:	e8 d0 a7 00 00       	call   c001db35 <nanoSleep(unsigned long long)>
c0013365:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013368:	e8 bb ff ff ff       	call   c0013328 <Buzzer::stop()>
c001336d:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013375:	83 c4 18             	add    esp,0x18
c0013378:	5b                   	pop    ebx
c0013379:	e9 b3 a6 00 00       	jmp    c001da31 <blockTask(TaskState)>

c001337e <Buzzer::beep(int, int, bool)>:
c001337e:	57                   	push   edi
c001337f:	56                   	push   esi
c0013380:	53                   	push   ebx
c0013381:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013385:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013389:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001338d:	52                   	push   edx
c001338e:	52                   	push   edx
c001338f:	8b 06                	mov    eax,DWORD PTR [esi]
c0013391:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013395:	56                   	push   esi
c0013396:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013399:	83 c4 10             	add    esp,0x10
c001339c:	89 f8                	mov    eax,edi
c001339e:	84 c0                	test   al,al
c00133a0:	74 1f                	je     c00133c1 <Buzzer::beep(int, int, bool)+0x43>
c00133a2:	50                   	push   eax
c00133a3:	50                   	push   eax
c00133a4:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00133aa:	99                   	cdq    
c00133ab:	52                   	push   edx
c00133ac:	50                   	push   eax
c00133ad:	e8 83 a7 00 00       	call   c001db35 <nanoSleep(unsigned long long)>
c00133b2:	83 c4 10             	add    esp,0x10
c00133b5:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00133b9:	5b                   	pop    ebx
c00133ba:	5e                   	pop    esi
c00133bb:	5f                   	pop    edi
c00133bc:	e9 67 ff ff ff       	jmp    c0013328 <Buzzer::stop()>
c00133c1:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c00133c7:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c00133cc:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c00133d4:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00133d8:	c7 44 24 14 3b 33 01 c0 	mov    DWORD PTR [esp+0x14],0xc001333b
c00133e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00133e4:	5b                   	pop    ebx
c00133e5:	5e                   	pop    esi
c00133e6:	5f                   	pop    edi
c00133e7:	e9 4a a2 00 00       	jmp    c001d636 <Process::createThread(void (*)(void*), void*, int)>

c00133ec <User::loadClockSettings(int)>:
c00133ec:	53                   	push   ebx
c00133ed:	83 ec 14             	sub    esp,0x14
c00133f0:	68 14 01 00 00       	push   0x114
c00133f5:	e8 9f c1 ff ff       	call   c000f599 <malloc>
c00133fa:	83 c4 0c             	add    esp,0xc
c00133fd:	89 c3                	mov    ebx,eax
c00133ff:	ff 35 b0 0b 03 c0    	push   DWORD PTR ds:0xc0030bb0
c0013405:	68 68 a6 02 c0       	push   0xc002a668
c001340a:	50                   	push   eax
c001340b:	e8 c0 f6 ff ff       	call   c0012ad0 <File::File(char const*, Process*)>
c0013410:	58                   	pop    eax
c0013411:	5a                   	pop    edx
c0013412:	6a 01                	push   0x1
c0013414:	53                   	push   ebx
c0013415:	e8 1a f7 ff ff       	call   c0012b34 <File::open(FileOpenMode)>
c001341a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001341d:	e8 70 f7 ff ff       	call   c0012b92 <File::close()>
c0013422:	83 c4 10             	add    esp,0x10
c0013425:	85 db                	test   ebx,ebx
c0013427:	74 0f                	je     c0013438 <User::loadClockSettings(int)+0x4c>
c0013429:	8b 03                	mov    eax,DWORD PTR [ebx]
c001342b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001342f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013432:	83 c4 08             	add    esp,0x8
c0013435:	5b                   	pop    ebx
c0013436:	ff e0                	jmp    eax
c0013438:	83 c4 08             	add    esp,0x8
c001343b:	5b                   	pop    ebx
c001343c:	c3                   	ret    
c001343d:	90                   	nop

c001343e <Clock::Clock(char const*)>:
c001343e:	83 ec 0c             	sub    esp,0xc
c0013441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013445:	83 ec 08             	sub    esp,0x8
c0013448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001344c:	50                   	push   eax
c001344d:	e8 5c 07 00 00       	call   c0013bae <Device::Device(char const*)>
c0013452:	83 c4 10             	add    esp,0x10
c0013455:	ba 90 a6 02 c0       	mov    edx,0xc002a690
c001345a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001345e:	89 10                	mov    DWORD PTR [eax],edx
c0013460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013464:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c001346e:	90                   	nop
c001346f:	83 c4 0c             	add    esp,0xc
c0013472:	c3                   	ret    
c0013473:	90                   	nop

c0013474 <Clock::~Clock()>:
c0013474:	83 ec 0c             	sub    esp,0xc
c0013477:	ba 90 a6 02 c0       	mov    edx,0xc002a690
c001347c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013480:	89 10                	mov    DWORD PTR [eax],edx
c0013482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013486:	83 ec 0c             	sub    esp,0xc
c0013489:	50                   	push   eax
c001348a:	e8 e9 03 00 00       	call   c0013878 <Device::~Device()>
c001348f:	83 c4 10             	add    esp,0x10
c0013492:	90                   	nop
c0013493:	83 c4 0c             	add    esp,0xc
c0013496:	c3                   	ret    
c0013497:	90                   	nop

c0013498 <Clock::~Clock()>:
c0013498:	83 ec 0c             	sub    esp,0xc
c001349b:	83 ec 0c             	sub    esp,0xc
c001349e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134a2:	e8 cd ff ff ff       	call   c0013474 <Clock::~Clock()>
c00134a7:	83 c4 10             	add    esp,0x10
c00134aa:	83 ec 08             	sub    esp,0x8
c00134ad:	68 58 01 00 00       	push   0x158
c00134b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134b6:	e8 de ef ff ff       	call   c0012499 <operator delete(void*, unsigned long)>
c00134bb:	83 c4 10             	add    esp,0x10
c00134be:	83 c4 0c             	add    esp,0xc
c00134c1:	c3                   	ret    

c00134c2 <Clock::timeInSecondsLocal()>:
c00134c2:	53                   	push   ebx
c00134c3:	83 ec 14             	sub    esp,0x14
c00134c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134ca:	8b 10                	mov    edx,DWORD PTR [eax]
c00134cc:	50                   	push   eax
c00134cd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00134d0:	0f b6 0d dc d7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002d7dc
c00134d7:	03 0d e0 d7 02 c0    	add    ecx,DWORD PTR ds:0xc002d7e0
c00134dd:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00134e3:	89 cb                	mov    ebx,ecx
c00134e5:	c1 fb 1f             	sar    ebx,0x1f
c00134e8:	01 c8                	add    eax,ecx
c00134ea:	11 da                	adc    edx,ebx
c00134ec:	83 c4 10             	add    esp,0x10
c00134ef:	31 c9                	xor    ecx,ecx
c00134f1:	80 3d dd d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d7dd,0x0
c00134f8:	74 05                	je     c00134ff <Clock::timeInSecondsLocal()+0x3d>
c00134fa:	b9 08 07 00 00       	mov    ecx,0x708
c00134ff:	31 db                	xor    ebx,ebx
c0013501:	01 c8                	add    eax,ecx
c0013503:	11 da                	adc    edx,ebx
c0013505:	83 c4 08             	add    esp,0x8
c0013508:	5b                   	pop    ebx
c0013509:	c3                   	ret    

c001350a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001350a:	57                   	push   edi
c001350b:	56                   	push   esi
c001350c:	53                   	push   ebx
c001350d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013511:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013515:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013517:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001351b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001351e:	0f b6 05 dc d7 02 c0 	movzx  eax,BYTE PTR ds:0xc002d7dc
c0013525:	03 05 e0 d7 02 c0    	add    eax,DWORD PTR ds:0xc002d7e0
c001352b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013531:	99                   	cdq    
c0013532:	29 c6                	sub    esi,eax
c0013534:	19 d7                	sbb    edi,edx
c0013536:	89 f0                	mov    eax,esi
c0013538:	89 fa                	mov    edx,edi
c001353a:	31 f6                	xor    esi,esi
c001353c:	80 3d dd d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d7dd,0x0
c0013543:	74 05                	je     c001354a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013545:	be 08 07 00 00       	mov    esi,0x708
c001354a:	31 ff                	xor    edi,edi
c001354c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013550:	29 f0                	sub    eax,esi
c0013552:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013556:	19 fa                	sbb    edx,edi
c0013558:	89 d8                	mov    eax,ebx
c001355a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001355e:	5b                   	pop    ebx
c001355f:	5e                   	pop    esi
c0013560:	5f                   	pop    edi
c0013561:	ff e0                	jmp    eax

c0013563 <datetimeToSeconds(datetime_t)>:
c0013563:	55                   	push   ebp
c0013564:	57                   	push   edi
c0013565:	56                   	push   esi
c0013566:	53                   	push   ebx
c0013567:	83 ec 14             	sub    esp,0x14
c001356a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001356e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013572:	89 d3                	mov    ebx,edx
c0013574:	0f b6 c6             	movzx  eax,dh
c0013577:	c1 eb 10             	shr    ebx,0x10
c001357a:	48                   	dec    eax
c001357b:	66 81 eb 6c 07       	sub    bx,0x76c
c0013580:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013584:	0f b6 f5             	movzx  esi,ch
c0013587:	89 cf                	mov    edi,ecx
c0013589:	6b f6 3c             	imul   esi,esi,0x3c
c001358c:	c1 ef 10             	shr    edi,0x10
c001358f:	0f b6 c9             	movzx  ecx,cl
c0013592:	89 f8                	mov    eax,edi
c0013594:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001359a:	0f b6 f8             	movzx  edi,al
c001359d:	0f b6 d2             	movzx  edx,dl
c00135a0:	01 fe                	add    esi,edi
c00135a2:	01 f1                	add    ecx,esi
c00135a4:	0f b7 f3             	movzx  esi,bx
c00135a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00135ab:	c1 f9 1f             	sar    ecx,0x1f
c00135ae:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c00135b3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00135b7:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c00135bc:	8b 0c 8d e0 a6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5920]
c00135c3:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c00135c7:	76 29                	jbe    c00135f2 <datetimeToSeconds(datetime_t)+0x8f>
c00135c9:	f6 c3 03             	test   bl,0x3
c00135cc:	75 24                	jne    c00135f2 <datetimeToSeconds(datetime_t)+0x8f>
c00135ce:	31 d2                	xor    edx,edx
c00135d0:	bf 64 00 00 00       	mov    edi,0x64
c00135d5:	89 d8                	mov    eax,ebx
c00135d7:	66 f7 f7             	div    di
c00135da:	66 85 d2             	test   dx,dx
c00135dd:	75 12                	jne    c00135f1 <datetimeToSeconds(datetime_t)+0x8e>
c00135df:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c00135e5:	bf 90 01 00 00       	mov    edi,0x190
c00135ea:	99                   	cdq    
c00135eb:	f7 ff                	idiv   edi
c00135ed:	85 d2                	test   edx,edx
c00135ef:	75 01                	jne    c00135f2 <datetimeToSeconds(datetime_t)+0x8f>
c00135f1:	41                   	inc    ecx
c00135f2:	66 83 fb 46          	cmp    bx,0x46
c00135f6:	76 45                	jbe    c001363d <datetimeToSeconds(datetime_t)+0xda>
c00135f8:	bb 46 00 00 00       	mov    ebx,0x46
c00135fd:	bf 64 00 00 00       	mov    edi,0x64
c0013602:	bd 90 01 00 00       	mov    ebp,0x190
c0013607:	b8 6d 01 00 00       	mov    eax,0x16d
c001360c:	f6 c3 03             	test   bl,0x3
c001360f:	75 23                	jne    c0013634 <datetimeToSeconds(datetime_t)+0xd1>
c0013611:	89 d8                	mov    eax,ebx
c0013613:	99                   	cdq    
c0013614:	f7 ff                	idiv   edi
c0013616:	b8 6e 01 00 00       	mov    eax,0x16e
c001361b:	85 d2                	test   edx,edx
c001361d:	75 15                	jne    c0013634 <datetimeToSeconds(datetime_t)+0xd1>
c001361f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013625:	99                   	cdq    
c0013626:	f7 fd                	idiv   ebp
c0013628:	83 fa 01             	cmp    edx,0x1
c001362b:	19 c0                	sbb    eax,eax
c001362d:	f7 d0                	not    eax
c001362f:	05 6e 01 00 00       	add    eax,0x16e
c0013634:	01 c1                	add    ecx,eax
c0013636:	43                   	inc    ebx
c0013637:	39 f3                	cmp    ebx,esi
c0013639:	7c cc                	jl     c0013607 <datetimeToSeconds(datetime_t)+0xa4>
c001363b:	eb 35                	jmp    c0013672 <datetimeToSeconds(datetime_t)+0x10f>
c001363d:	74 33                	je     c0013672 <datetimeToSeconds(datetime_t)+0x10f>
c001363f:	b8 45 00 00 00       	mov    eax,0x45
c0013644:	89 c2                	mov    edx,eax
c0013646:	83 e2 03             	and    edx,0x3
c0013649:	39 f0                	cmp    eax,esi
c001364b:	7e 0f                	jle    c001365c <datetimeToSeconds(datetime_t)+0xf9>
c001364d:	83 fa 01             	cmp    edx,0x1
c0013650:	19 d2                	sbb    edx,edx
c0013652:	48                   	dec    eax
c0013653:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001365a:	eb e8                	jmp    c0013644 <datetimeToSeconds(datetime_t)+0xe1>
c001365c:	b8 6d 01 00 00       	mov    eax,0x16d
c0013661:	85 d2                	test   edx,edx
c0013663:	75 0b                	jne    c0013670 <datetimeToSeconds(datetime_t)+0x10d>
c0013665:	66 83 fb 01          	cmp    bx,0x1
c0013669:	19 c0                	sbb    eax,eax
c001366b:	05 6e 01 00 00       	add    eax,0x16e
c0013670:	29 c1                	sub    ecx,eax
c0013672:	b8 80 51 01 00       	mov    eax,0x15180
c0013677:	f7 e9                	imul   ecx
c0013679:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001367d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013681:	83 c4 14             	add    esp,0x14
c0013684:	5b                   	pop    ebx
c0013685:	5e                   	pop    esi
c0013686:	5f                   	pop    edi
c0013687:	5d                   	pop    ebp
c0013688:	c3                   	ret    
c0013689:	90                   	nop

c001368a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001368a:	57                   	push   edi
c001368b:	56                   	push   esi
c001368c:	53                   	push   ebx
c001368d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013691:	8b 06                	mov    eax,DWORD PTR [esi]
c0013693:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013696:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001369a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001369e:	e8 c0 fe ff ff       	call   c0013563 <datetimeToSeconds(datetime_t)>
c00136a3:	59                   	pop    ecx
c00136a4:	0f b6 0d dc d7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002d7dc
c00136ab:	5b                   	pop    ebx
c00136ac:	03 0d e0 d7 02 c0    	add    ecx,DWORD PTR ds:0xc002d7e0
c00136b2:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00136b8:	89 cb                	mov    ebx,ecx
c00136ba:	c1 fb 1f             	sar    ebx,0x1f
c00136bd:	29 c8                	sub    eax,ecx
c00136bf:	19 da                	sbb    edx,ebx
c00136c1:	31 c9                	xor    ecx,ecx
c00136c3:	80 3d dd d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d7dd,0x0
c00136ca:	74 05                	je     c00136d1 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c00136cc:	b9 08 07 00 00       	mov    ecx,0x708
c00136d1:	31 db                	xor    ebx,ebx
c00136d3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00136d7:	29 c8                	sub    eax,ecx
c00136d9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00136dd:	19 da                	sbb    edx,ebx
c00136df:	89 f8                	mov    eax,edi
c00136e1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00136e5:	5b                   	pop    ebx
c00136e6:	5e                   	pop    esi
c00136e7:	5f                   	pop    edi
c00136e8:	ff e0                	jmp    eax

c00136ea <secondsToDatetime(unsigned long long)>:
c00136ea:	55                   	push   ebp
c00136eb:	57                   	push   edi
c00136ec:	56                   	push   esi
c00136ed:	53                   	push   ebx
c00136ee:	83 ec 1c             	sub    esp,0x1c
c00136f1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00136f5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00136f9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00136fd:	6a 00                	push   0x0
c00136ff:	68 80 51 01 00       	push   0x15180
c0013704:	55                   	push   ebp
c0013705:	57                   	push   edi
c0013706:	e8 99 2e 01 00       	call   c00265a4 <__udivdi3>
c001370b:	83 c4 10             	add    esp,0x10
c001370e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013714:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013718:	6a 00                	push   0x0
c001371a:	68 80 51 01 00       	push   0x15180
c001371f:	55                   	push   ebp
c0013720:	57                   	push   edi
c0013721:	bf 10 0e 00 00       	mov    edi,0xe10
c0013726:	e8 79 2f 01 00       	call   c00266a4 <__umoddi3>
c001372b:	83 c4 10             	add    esp,0x10
c001372e:	99                   	cdq    
c001372f:	f7 ff                	idiv   edi
c0013731:	bf 3c 00 00 00       	mov    edi,0x3c
c0013736:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013739:	89 d0                	mov    eax,edx
c001373b:	99                   	cdq    
c001373c:	f7 ff                	idiv   edi
c001373e:	85 db                	test   ebx,ebx
c0013740:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013743:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013746:	79 11                	jns    c0013759 <secondsToDatetime(unsigned long long)+0x6f>
c0013748:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001374c:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013752:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013757:	eb 07                	jmp    c0013760 <secondsToDatetime(unsigned long long)+0x76>
c0013759:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001375e:	89 d8                	mov    eax,ebx
c0013760:	bf b4 05 00 00       	mov    edi,0x5b4
c0013765:	99                   	cdq    
c0013766:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001376b:	f7 f9                	idiv   ecx
c001376d:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013772:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013776:	31 d2                	xor    edx,edx
c0013778:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013780:	01 c3                	add    ebx,eax
c0013782:	89 d8                	mov    eax,ebx
c0013784:	f7 f1                	div    ecx
c0013786:	31 d2                	xor    edx,edx
c0013788:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001378b:	89 d8                	mov    eax,ebx
c001378d:	f7 f7                	div    edi
c001378f:	31 d2                	xor    edx,edx
c0013791:	29 c1                	sub    ecx,eax
c0013793:	89 d8                	mov    eax,ebx
c0013795:	f7 f5                	div    ebp
c0013797:	bd 6d 01 00 00       	mov    ebp,0x16d
c001379c:	29 c1                	sub    ecx,eax
c001379e:	31 d2                	xor    edx,edx
c00137a0:	89 c8                	mov    eax,ecx
c00137a2:	f7 f5                	div    ebp
c00137a4:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00137a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00137ad:	31 d2                	xor    edx,edx
c00137af:	89 c8                	mov    eax,ecx
c00137b1:	f7 f5                	div    ebp
c00137b3:	31 d2                	xor    edx,edx
c00137b5:	01 c3                	add    ebx,eax
c00137b7:	89 c8                	mov    eax,ecx
c00137b9:	f7 f7                	div    edi
c00137bb:	bf 99 00 00 00       	mov    edi,0x99
c00137c0:	29 c3                	sub    ebx,eax
c00137c2:	31 d2                	xor    edx,edx
c00137c4:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00137cc:	29 c3                	sub    ebx,eax
c00137ce:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00137d1:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00137d4:	bb 05 00 00 00       	mov    ebx,0x5
c00137d9:	83 c1 02             	add    ecx,0x2
c00137dc:	89 c8                	mov    eax,ecx
c00137de:	f7 f7                	div    edi
c00137e0:	31 d2                	xor    edx,edx
c00137e2:	89 c7                	mov    edi,eax
c00137e4:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00137ea:	83 c0 02             	add    eax,0x2
c00137ed:	f7 f3                	div    ebx
c00137ef:	89 eb                	mov    ebx,ebp
c00137f1:	29 c3                	sub    ebx,eax
c00137f3:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00137f9:	88 1e                	mov    BYTE PTR [esi],bl
c00137fb:	19 c0                	sbb    eax,eax
c00137fd:	31 d2                	xor    edx,edx
c00137ff:	83 e0 0c             	and    eax,0xc
c0013802:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013806:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001380e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013812:	83 f9 01             	cmp    ecx,0x1
c0013815:	0f 96 c2             	setbe  dl
c0013818:	41                   	inc    ecx
c0013819:	01 d0                	add    eax,edx
c001381b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001381e:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013822:	83 c4 1c             	add    esp,0x1c
c0013825:	89 f0                	mov    eax,esi
c0013827:	5b                   	pop    ebx
c0013828:	5e                   	pop    esi
c0013829:	5f                   	pop    edi
c001382a:	5d                   	pop    ebp
c001382b:	c2 04 00             	ret    0x4

c001382e <Clock::timeInDatetimeLocal()>:
c001382e:	53                   	push   ebx
c001382f:	83 ec 14             	sub    esp,0x14
c0013832:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013836:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001383a:	e8 83 fc ff ff       	call   c00134c2 <Clock::timeInSecondsLocal()>
c001383f:	83 c4 0c             	add    esp,0xc
c0013842:	52                   	push   edx
c0013843:	50                   	push   eax
c0013844:	53                   	push   ebx
c0013845:	e8 a0 fe ff ff       	call   c00136ea <secondsToDatetime(unsigned long long)>
c001384a:	89 d8                	mov    eax,ebx
c001384c:	83 c4 14             	add    esp,0x14
c001384f:	5b                   	pop    ebx
c0013850:	c2 04 00             	ret    0x4
c0013853:	90                   	nop

c0013854 <Device::hibernate()>:
c0013854:	c3                   	ret    
c0013855:	90                   	nop

c0013856 <Device::wake()>:
c0013856:	c3                   	ret    
c0013857:	90                   	nop

c0013858 <Device::detect()>:
c0013858:	c3                   	ret    
c0013859:	90                   	nop

c001385a <Device::disableLegacy()>:
c001385a:	c3                   	ret    
c001385b:	90                   	nop

c001385c <Device::powerSaving(PowerSavingLevel)>:
c001385c:	c3                   	ret    
c001385d:	90                   	nop

c001385e <DriverlessDevice::close(int, int, void*)>:
c001385e:	31 c0                	xor    eax,eax
c0013860:	c3                   	ret    
c0013861:	90                   	nop

c0013862 <DriverlessDevice::detect()>:
c0013862:	c3                   	ret    
c0013863:	90                   	nop

c0013864 <DriverlessDevice::open(int, int, void*)>:
c0013864:	83 ec 18             	sub    esp,0x18
c0013867:	68 10 a7 02 c0       	push   0xc002a710
c001386c:	e8 60 64 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c0013871:	83 c8 ff             	or     eax,0xffffffff
c0013874:	83 c4 1c             	add    esp,0x1c
c0013877:	c3                   	ret    

c0013878 <Device::~Device()>:
c0013878:	ba 70 a7 02 c0       	mov    edx,0xc002a770
c001387d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013881:	89 10                	mov    DWORD PTR [eax],edx
c0013883:	90                   	nop
c0013884:	c3                   	ret    
c0013885:	90                   	nop

c0013886 <Device::~Device()>:
c0013886:	83 ec 0c             	sub    esp,0xc
c0013889:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001388d:	e8 e6 ff ff ff       	call   c0013878 <Device::~Device()>
c0013892:	83 c4 04             	add    esp,0x4
c0013895:	83 ec 08             	sub    esp,0x8
c0013898:	68 58 01 00 00       	push   0x158
c001389d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138a1:	e8 f3 eb ff ff       	call   c0012499 <operator delete(void*, unsigned long)>
c00138a6:	83 c4 10             	add    esp,0x10
c00138a9:	83 c4 0c             	add    esp,0xc
c00138ac:	c3                   	ret    
c00138ad:	90                   	nop

c00138ae <Device::findAndLoadDriver()>:
c00138ae:	c7 44 24 04 2e a7 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a72e
c00138b6:	e9 b6 ec ff ff       	jmp    c0012571 <Dbg::kprintf(char const*, ...)>
c00138bb:	90                   	nop

c00138bc <Device::preOpenPCI(PCIDeviceInfo)>:
c00138bc:	57                   	push   edi
c00138bd:	b9 09 00 00 00       	mov    ecx,0x9
c00138c2:	56                   	push   esi
c00138c3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00138c7:	8d 74 24 10          	lea    esi,[esp+0x10]
c00138cb:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00138d5:	81 c7 18 01 00 00    	add    edi,0x118
c00138db:	fc                   	cld    
c00138dc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00138de:	5e                   	pop    esi
c00138df:	5f                   	pop    edi
c00138e0:	c3                   	ret    
c00138e1:	90                   	nop

c00138e2 <Device::preOpenACPI(void*, char*, char*)>:
c00138e2:	57                   	push   edi
c00138e3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00138e8:	56                   	push   esi
c00138e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00138f1:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c00138fb:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013901:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013907:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001390b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001390d:	b9 0e 00 00 00       	mov    ecx,0xe
c0013912:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013918:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001391c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001391e:	5e                   	pop    esi
c001391f:	5f                   	pop    edi
c0013920:	c3                   	ret    
c0013921:	90                   	nop

c0013922 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013922:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013926:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001392b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013932:	75 0b                	jne    c001393f <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013934:	8b 00                	mov    eax,DWORD PTR [eax]
c0013936:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001393a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001393d:	eb 1e                	jmp    c001395d <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c001393f:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c0013944:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001394a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013950:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013952:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013956:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001395a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001395d:	ff e0                	jmp    eax
c001395f:	90                   	nop

c0013960 <Device::getParent()>:
c0013960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013964:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c001396a:	c3                   	ret    
c001396b:	90                   	nop

c001396c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001396c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013970:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013975:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001397c:	75 0b                	jne    c0013989 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001397e:	8b 00                	mov    eax,DWORD PTR [eax]
c0013980:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013984:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013987:	eb 1e                	jmp    c00139a7 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013989:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c001398e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013994:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001399a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001399c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00139a0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00139a4:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c00139a7:	ff e0                	jmp    eax
c00139a9:	90                   	nop

c00139aa <Device::addChild(Device*)>:
c00139aa:	53                   	push   ebx
c00139ab:	83 ec 08             	sub    esp,0x8
c00139ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00139b6:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00139bc:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00139c2:	8b 13                	mov    edx,DWORD PTR [ebx]
c00139c4:	85 d2                	test   edx,edx
c00139c6:	74 04                	je     c00139cc <Device::addChild(Device*)+0x22>
c00139c8:	89 d3                	mov    ebx,edx
c00139ca:	eb f6                	jmp    c00139c2 <Device::addChild(Device*)+0x18>
c00139cc:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00139cf:	83 ec 0c             	sub    esp,0xc
c00139d2:	6a 08                	push   0x8
c00139d4:	e8 c0 bb ff ff       	call   c000f599 <malloc>
c00139d9:	89 03                	mov    DWORD PTR [ebx],eax
c00139db:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00139e1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00139e8:	83 c4 18             	add    esp,0x18
c00139eb:	5b                   	pop    ebx
c00139ec:	c3                   	ret    
c00139ed:	90                   	nop

c00139ee <Device::removeAllChildren()>:
c00139ee:	56                   	push   esi
c00139ef:	53                   	push   ebx
c00139f0:	52                   	push   edx
c00139f1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00139f5:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00139fb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00139fe:	74 17                	je     c0013a17 <Device::removeAllChildren()+0x29>
c0013a00:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013a03:	85 c0                	test   eax,eax
c0013a05:	74 0c                	je     c0013a13 <Device::removeAllChildren()+0x25>
c0013a07:	83 ec 0c             	sub    esp,0xc
c0013a0a:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a0c:	50                   	push   eax
c0013a0d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013a10:	83 c4 10             	add    esp,0x10
c0013a13:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013a15:	eb e4                	jmp    c00139fb <Device::removeAllChildren()+0xd>
c0013a17:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013a1d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013a23:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013a29:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013a30:	58                   	pop    eax
c0013a31:	5b                   	pop    ebx
c0013a32:	5e                   	pop    esi
c0013a33:	c3                   	ret    

c0013a34 <Device::hibernateAll()>:
c0013a34:	53                   	push   ebx
c0013a35:	83 ec 14             	sub    esp,0x14
c0013a38:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a3c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013a3e:	53                   	push   ebx
c0013a3f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013a42:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013a48:	83 c4 10             	add    esp,0x10
c0013a4b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013a4e:	74 0f                	je     c0013a5f <Device::hibernateAll()+0x2b>
c0013a50:	83 ec 0c             	sub    esp,0xc
c0013a53:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013a56:	e8 d9 ff ff ff       	call   c0013a34 <Device::hibernateAll()>
c0013a5b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013a5d:	eb e9                	jmp    c0013a48 <Device::hibernateAll()+0x14>
c0013a5f:	83 c4 08             	add    esp,0x8
c0013a62:	5b                   	pop    ebx
c0013a63:	c3                   	ret    

c0013a64 <Device::wakeAll()>:
c0013a64:	53                   	push   ebx
c0013a65:	83 ec 14             	sub    esp,0x14
c0013a68:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013a6e:	53                   	push   ebx
c0013a6f:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013a72:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013a78:	83 c4 10             	add    esp,0x10
c0013a7b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013a7e:	74 0f                	je     c0013a8f <Device::wakeAll()+0x2b>
c0013a80:	83 ec 0c             	sub    esp,0xc
c0013a83:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013a86:	e8 d9 ff ff ff       	call   c0013a64 <Device::wakeAll()>
c0013a8b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013a8d:	eb e9                	jmp    c0013a78 <Device::wakeAll()+0x14>
c0013a8f:	83 c4 08             	add    esp,0x8
c0013a92:	5b                   	pop    ebx
c0013a93:	c3                   	ret    

c0013a94 <Device::detectAll()>:
c0013a94:	53                   	push   ebx
c0013a95:	83 ec 14             	sub    esp,0x14
c0013a98:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a9c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013a9e:	53                   	push   ebx
c0013a9f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013aa2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013aa8:	83 c4 10             	add    esp,0x10
c0013aab:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013aae:	74 0f                	je     c0013abf <Device::detectAll()+0x2b>
c0013ab0:	83 ec 0c             	sub    esp,0xc
c0013ab3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ab6:	e8 d9 ff ff ff       	call   c0013a94 <Device::detectAll()>
c0013abb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013abd:	eb e9                	jmp    c0013aa8 <Device::detectAll()+0x14>
c0013abf:	83 c4 08             	add    esp,0x8
c0013ac2:	5b                   	pop    ebx
c0013ac3:	c3                   	ret    

c0013ac4 <Device::disableLegacyAll()>:
c0013ac4:	53                   	push   ebx
c0013ac5:	83 ec 14             	sub    esp,0x14
c0013ac8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013acc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ace:	53                   	push   ebx
c0013acf:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013ad2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ad8:	83 c4 10             	add    esp,0x10
c0013adb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ade:	74 0f                	je     c0013aef <Device::disableLegacyAll()+0x2b>
c0013ae0:	83 ec 0c             	sub    esp,0xc
c0013ae3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ae6:	e8 d9 ff ff ff       	call   c0013ac4 <Device::disableLegacyAll()>
c0013aeb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013aed:	eb e9                	jmp    c0013ad8 <Device::disableLegacyAll()+0x14>
c0013aef:	83 c4 08             	add    esp,0x8
c0013af2:	5b                   	pop    ebx
c0013af3:	c3                   	ret    

c0013af4 <Device::loadDriversForAll()>:
c0013af4:	53                   	push   ebx
c0013af5:	83 ec 08             	sub    esp,0x8
c0013af8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013afc:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013b03:	75 0c                	jne    c0013b11 <Device::loadDriversForAll()+0x1d>
c0013b05:	83 ec 0c             	sub    esp,0xc
c0013b08:	53                   	push   ebx
c0013b09:	e8 a0 fd ff ff       	call   c00138ae <Device::findAndLoadDriver()>
c0013b0e:	83 c4 10             	add    esp,0x10
c0013b11:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b17:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b1a:	74 12                	je     c0013b2e <Device::loadDriversForAll()+0x3a>
c0013b1c:	83 ec 0c             	sub    esp,0xc
c0013b1f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b22:	e8 cd ff ff ff       	call   c0013af4 <Device::loadDriversForAll()>
c0013b27:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b29:	83 c4 10             	add    esp,0x10
c0013b2c:	eb e9                	jmp    c0013b17 <Device::loadDriversForAll()+0x23>
c0013b2e:	83 c4 08             	add    esp,0x8
c0013b31:	5b                   	pop    ebx
c0013b32:	c3                   	ret    
c0013b33:	90                   	nop

c0013b34 <Device::closeAll()>:
c0013b34:	53                   	push   ebx
c0013b35:	83 ec 08             	sub    esp,0x8
c0013b38:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013b3c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b3e:	6a 00                	push   0x0
c0013b40:	6a 00                	push   0x0
c0013b42:	6a 00                	push   0x0
c0013b44:	53                   	push   ebx
c0013b45:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b48:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b4e:	83 c4 10             	add    esp,0x10
c0013b51:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b54:	74 0f                	je     c0013b65 <Device::closeAll()+0x31>
c0013b56:	83 ec 0c             	sub    esp,0xc
c0013b59:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b5c:	e8 d3 ff ff ff       	call   c0013b34 <Device::closeAll()>
c0013b61:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b63:	eb e9                	jmp    c0013b4e <Device::closeAll()+0x1a>
c0013b65:	83 c4 08             	add    esp,0x8
c0013b68:	5b                   	pop    ebx
c0013b69:	c3                   	ret    

c0013b6a <Device::powerSavingAll(PowerSavingLevel)>:
c0013b6a:	56                   	push   esi
c0013b6b:	53                   	push   ebx
c0013b6c:	83 ec 0c             	sub    esp,0xc
c0013b6f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013b73:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013b77:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b79:	56                   	push   esi
c0013b7a:	53                   	push   ebx
c0013b7b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013b7e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b84:	83 c4 10             	add    esp,0x10
c0013b87:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b8a:	74 0f                	je     c0013b9b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013b8c:	52                   	push   edx
c0013b8d:	52                   	push   edx
c0013b8e:	56                   	push   esi
c0013b8f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b92:	e8 d3 ff ff ff       	call   c0013b6a <Device::powerSavingAll(PowerSavingLevel)>
c0013b97:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b99:	eb e9                	jmp    c0013b84 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013b9b:	58                   	pop    eax
c0013b9c:	5b                   	pop    ebx
c0013b9d:	5e                   	pop    esi
c0013b9e:	c3                   	ret    
c0013b9f:	90                   	nop

c0013ba0 <Device::setName(char const*)>:
c0013ba0:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013ba8:	e9 5f cc fe ff       	jmp    c000080c <strcpy>
c0013bad:	90                   	nop

c0013bae <Device::Device(char const*)>:
c0013bae:	83 ec 1c             	sub    esp,0x1c
c0013bb1:	ba 70 a7 02 c0       	mov    edx,0xc002a770
c0013bb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013bba:	89 10                	mov    DWORD PTR [eax],edx
c0013bbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013bc0:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013bca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013bce:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013bd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013bdc:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013be6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013bea:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013bf4:	83 ec 08             	sub    esp,0x8
c0013bf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013bfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013bff:	e8 9c ff ff ff       	call   c0013ba0 <Device::setName(char const*)>
c0013c04:	83 c4 10             	add    esp,0x10
c0013c07:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013c0f:	83 ec 0c             	sub    esp,0xc
c0013c12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c16:	e8 7e b9 ff ff       	call   c000f599 <malloc>
c0013c1b:	83 c4 10             	add    esp,0x10
c0013c1e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013c24:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013c2b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013c2f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c39:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013c3f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013c45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c49:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013c4f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013c56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c5a:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013c61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c65:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013c6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c70:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013c7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c7e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013c88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c8c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013c96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c9a:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0013ca4:	90                   	nop
c0013ca5:	83 c4 1c             	add    esp,0x1c
c0013ca8:	c3                   	ret    
c0013ca9:	90                   	nop

c0013caa <Device::getName()>:
c0013caa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013cae:	05 d0 00 00 00       	add    eax,0xd0
c0013cb3:	c3                   	ret    

c0013cb4 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013cb4:	83 ec 0c             	sub    esp,0xc
c0013cb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cbb:	83 ec 08             	sub    esp,0x8
c0013cbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cc2:	50                   	push   eax
c0013cc3:	e8 e6 fe ff ff       	call   c0013bae <Device::Device(char const*)>
c0013cc8:	83 c4 10             	add    esp,0x10
c0013ccb:	ba 9c a7 02 c0       	mov    edx,0xc002a79c
c0013cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cd4:	89 10                	mov    DWORD PTR [eax],edx
c0013cd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cda:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013ce4:	90                   	nop
c0013ce5:	83 c4 0c             	add    esp,0xc
c0013ce8:	c3                   	ret    
c0013ce9:	90                   	nop

c0013cea <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013cea:	57                   	push   edi
c0013ceb:	56                   	push   esi
c0013cec:	53                   	push   ebx
c0013ced:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013cf1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013cf5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013cf9:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013cff:	75 0c                	jne    c0013d0d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013d01:	52                   	push   edx
c0013d02:	52                   	push   edx
c0013d03:	53                   	push   ebx
c0013d04:	56                   	push   esi
c0013d05:	e8 d6 47 01 00       	call   c00284e0 <LinkedList<Device>::addElement(Device*)>
c0013d0a:	83 c4 10             	add    esp,0x10
c0013d0d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d13:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d16:	74 12                	je     c0013d2a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013d18:	50                   	push   eax
c0013d19:	57                   	push   edi
c0013d1a:	56                   	push   esi
c0013d1b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d1e:	e8 c7 ff ff ff       	call   c0013cea <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013d23:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d25:	83 c4 10             	add    esp,0x10
c0013d28:	eb e9                	jmp    c0013d13 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013d2a:	5b                   	pop    ebx
c0013d2b:	5e                   	pop    esi
c0013d2c:	5f                   	pop    edi
c0013d2d:	c3                   	ret    

c0013d2e <getDevicesOfType(DeviceType)>:
c0013d2e:	53                   	push   ebx
c0013d2f:	83 ec 14             	sub    esp,0x14
c0013d32:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d36:	53                   	push   ebx
c0013d37:	e8 80 48 01 00       	call   c00285bc <LinkedList<Device>::LinkedList()>
c0013d3c:	83 c4 0c             	add    esp,0xc
c0013d3f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013d43:	53                   	push   ebx
c0013d44:	ff 35 68 d6 02 c0    	push   DWORD PTR ds:0xc002d668
c0013d4a:	e8 9b ff ff ff       	call   c0013cea <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013d4f:	89 d8                	mov    eax,ebx
c0013d51:	83 c4 18             	add    esp,0x18
c0013d54:	5b                   	pop    ebx
c0013d55:	c2 04 00             	ret    0x4

c0013d58 <HardDiskController::HardDiskController(char const*)>:
c0013d58:	83 ec 0c             	sub    esp,0xc
c0013d5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d5f:	83 ec 08             	sub    esp,0x8
c0013d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d66:	50                   	push   eax
c0013d67:	e8 42 fe ff ff       	call   c0013bae <Device::Device(char const*)>
c0013d6c:	83 c4 10             	add    esp,0x10
c0013d6f:	ba c8 a7 02 c0       	mov    edx,0xc002a7c8
c0013d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d78:	89 10                	mov    DWORD PTR [eax],edx
c0013d7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d7e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013d88:	90                   	nop
c0013d89:	83 c4 0c             	add    esp,0xc
c0013d8c:	c3                   	ret    
c0013d8d:	90                   	nop

c0013d8e <HardDiskController::~HardDiskController()>:
c0013d8e:	83 ec 0c             	sub    esp,0xc
c0013d91:	ba c8 a7 02 c0       	mov    edx,0xc002a7c8
c0013d96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d9a:	89 10                	mov    DWORD PTR [eax],edx
c0013d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013da0:	83 ec 0c             	sub    esp,0xc
c0013da3:	50                   	push   eax
c0013da4:	e8 cf fa ff ff       	call   c0013878 <Device::~Device()>
c0013da9:	83 c4 10             	add    esp,0x10
c0013dac:	90                   	nop
c0013dad:	83 c4 0c             	add    esp,0xc
c0013db0:	c3                   	ret    
c0013db1:	90                   	nop

c0013db2 <HardDiskController::~HardDiskController()>:
c0013db2:	83 ec 0c             	sub    esp,0xc
c0013db5:	83 ec 0c             	sub    esp,0xc
c0013db8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dbc:	e8 cd ff ff ff       	call   c0013d8e <HardDiskController::~HardDiskController()>
c0013dc1:	83 c4 10             	add    esp,0x10
c0013dc4:	83 ec 08             	sub    esp,0x8
c0013dc7:	68 58 01 00 00       	push   0x158
c0013dcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dd0:	e8 c4 e6 ff ff       	call   c0012499 <operator delete(void*, unsigned long)>
c0013dd5:	83 c4 10             	add    esp,0x10
c0013dd8:	83 c4 0c             	add    esp,0xc
c0013ddb:	c3                   	ret    

c0013ddc <PhysicalDisk::eject()>:
c0013ddc:	83 c8 ff             	or     eax,0xffffffff
c0013ddf:	c3                   	ret    

c0013de0 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013de0:	83 ec 0c             	sub    esp,0xc
c0013de3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013de7:	83 ec 08             	sub    esp,0x8
c0013dea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dee:	50                   	push   eax
c0013def:	e8 ba fd ff ff       	call   c0013bae <Device::Device(char const*)>
c0013df4:	83 c4 10             	add    esp,0x10
c0013df7:	ba f4 a7 02 c0       	mov    edx,0xc002a7f4
c0013dfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e00:	89 10                	mov    DWORD PTR [eax],edx
c0013e02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e06:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013e0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e11:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013e18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e1c:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013e26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e2a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013e2e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013e34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e38:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013e42:	90                   	nop
c0013e43:	83 c4 0c             	add    esp,0xc
c0013e46:	c3                   	ret    
c0013e47:	90                   	nop

c0013e48 <PhysicalDisk::startCache()>:
c0013e48:	56                   	push   esi
c0013e49:	53                   	push   ebx
c0013e4a:	83 ec 10             	sub    esp,0x10
c0013e4d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e51:	6a 44                	push   0x44
c0013e53:	e8 41 b7 ff ff       	call   c000f599 <malloc>
c0013e58:	89 c6                	mov    esi,eax
c0013e5a:	58                   	pop    eax
c0013e5b:	5a                   	pop    edx
c0013e5c:	53                   	push   ebx
c0013e5d:	56                   	push   esi
c0013e5e:	e8 65 28 00 00       	call   c00166c8 <VCache::VCache(PhysicalDisk*)>
c0013e63:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013e69:	83 c4 14             	add    esp,0x14
c0013e6c:	5b                   	pop    ebx
c0013e6d:	5e                   	pop    esi
c0013e6e:	c3                   	ret    
c0013e6f:	90                   	nop

c0013e70 <PhysicalDisk::~PhysicalDisk()>:
c0013e70:	83 ec 0c             	sub    esp,0xc
c0013e73:	ba f4 a7 02 c0       	mov    edx,0xc002a7f4
c0013e78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e7c:	89 10                	mov    DWORD PTR [eax],edx
c0013e7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e82:	83 ec 0c             	sub    esp,0xc
c0013e85:	50                   	push   eax
c0013e86:	e8 ed f9 ff ff       	call   c0013878 <Device::~Device()>
c0013e8b:	83 c4 10             	add    esp,0x10
c0013e8e:	90                   	nop
c0013e8f:	83 c4 0c             	add    esp,0xc
c0013e92:	c3                   	ret    
c0013e93:	90                   	nop

c0013e94 <PhysicalDisk::~PhysicalDisk()>:
c0013e94:	83 ec 0c             	sub    esp,0xc
c0013e97:	83 ec 0c             	sub    esp,0xc
c0013e9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e9e:	e8 cd ff ff ff       	call   c0013e70 <PhysicalDisk::~PhysicalDisk()>
c0013ea3:	83 c4 10             	add    esp,0x10
c0013ea6:	83 ec 08             	sub    esp,0x8
c0013ea9:	68 6c 01 00 00       	push   0x16c
c0013eae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013eb2:	e8 e2 e5 ff ff       	call   c0012499 <operator delete(void*, unsigned long)>
c0013eb7:	83 c4 10             	add    esp,0x10
c0013eba:	83 c4 0c             	add    esp,0xc
c0013ebd:	c3                   	ret    

c0013ebe <FPU::FPU(char const*)>:
c0013ebe:	83 ec 0c             	sub    esp,0xc
c0013ec1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ec5:	83 ec 08             	sub    esp,0x8
c0013ec8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ecc:	50                   	push   eax
c0013ecd:	e8 dc fc ff ff       	call   c0013bae <Device::Device(char const*)>
c0013ed2:	83 c4 10             	add    esp,0x10
c0013ed5:	ba 38 a8 02 c0       	mov    edx,0xc002a838
c0013eda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ede:	89 10                	mov    DWORD PTR [eax],edx
c0013ee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ee4:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013eee:	90                   	nop
c0013eef:	83 c4 0c             	add    esp,0xc
c0013ef2:	c3                   	ret    
c0013ef3:	90                   	nop

c0013ef4 <FPU::~FPU()>:
c0013ef4:	83 ec 0c             	sub    esp,0xc
c0013ef7:	ba 38 a8 02 c0       	mov    edx,0xc002a838
c0013efc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f00:	89 10                	mov    DWORD PTR [eax],edx
c0013f02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f06:	83 ec 0c             	sub    esp,0xc
c0013f09:	50                   	push   eax
c0013f0a:	e8 69 f9 ff ff       	call   c0013878 <Device::~Device()>
c0013f0f:	83 c4 10             	add    esp,0x10
c0013f12:	90                   	nop
c0013f13:	83 c4 0c             	add    esp,0xc
c0013f16:	c3                   	ret    
c0013f17:	90                   	nop

c0013f18 <FPU::~FPU()>:
c0013f18:	83 ec 0c             	sub    esp,0xc
c0013f1b:	83 ec 0c             	sub    esp,0xc
c0013f1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f22:	e8 cd ff ff ff       	call   c0013ef4 <FPU::~FPU()>
c0013f27:	83 c4 10             	add    esp,0x10
c0013f2a:	83 ec 08             	sub    esp,0x8
c0013f2d:	68 58 01 00 00       	push   0x158
c0013f32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f36:	e8 5e e5 ff ff       	call   c0012499 <operator delete(void*, unsigned long)>
c0013f3b:	83 c4 10             	add    esp,0x10
c0013f3e:	83 c4 0c             	add    esp,0xc
c0013f41:	c3                   	ret    

c0013f42 <setupFPU()>:
c0013f42:	53                   	push   ebx
c0013f43:	83 ec 08             	sub    esp,0x8
c0013f46:	8b 15 68 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d668
c0013f4c:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0013f53:	74 19                	je     c0013f6e <setupFPU()+0x2c>
c0013f55:	83 ec 0c             	sub    esp,0xc
c0013f58:	68 58 01 00 00       	push   0x158
c0013f5d:	e8 37 b6 ff ff       	call   c000f599 <malloc>
c0013f62:	89 c3                	mov    ebx,eax
c0013f64:	89 04 24             	mov    DWORD PTR [esp],eax
c0013f67:	e8 ba 11 01 00       	call   c0025126 <AVX::AVX()>
c0013f6c:	eb 5b                	jmp    c0013fc9 <setupFPU()+0x87>
c0013f6e:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0013f74:	84 c0                	test   al,al
c0013f76:	79 19                	jns    c0013f91 <setupFPU()+0x4f>
c0013f78:	83 ec 0c             	sub    esp,0xc
c0013f7b:	68 58 01 00 00       	push   0x158
c0013f80:	e8 14 b6 ff ff       	call   c000f599 <malloc>
c0013f85:	89 c3                	mov    ebx,eax
c0013f87:	89 04 24             	mov    DWORD PTR [esp],eax
c0013f8a:	e8 bd 12 01 00       	call   c002524c <SSE::SSE()>
c0013f8f:	eb 38                	jmp    c0013fc9 <setupFPU()+0x87>
c0013f91:	a8 20                	test   al,0x20
c0013f93:	74 19                	je     c0013fae <setupFPU()+0x6c>
c0013f95:	83 ec 0c             	sub    esp,0xc
c0013f98:	68 58 01 00 00       	push   0x158
c0013f9d:	e8 f7 b5 ff ff       	call   c000f599 <malloc>
c0013fa2:	89 c3                	mov    ebx,eax
c0013fa4:	89 04 24             	mov    DWORD PTR [esp],eax
c0013fa7:	e8 0a 12 01 00       	call   c00251b6 <MMX::MMX()>
c0013fac:	eb 1b                	jmp    c0013fc9 <setupFPU()+0x87>
c0013fae:	a8 10                	test   al,0x10
c0013fb0:	74 1c                	je     c0013fce <setupFPU()+0x8c>
c0013fb2:	83 ec 0c             	sub    esp,0xc
c0013fb5:	68 58 01 00 00       	push   0x158
c0013fba:	e8 da b5 ff ff       	call   c000f599 <malloc>
c0013fbf:	89 c3                	mov    ebx,eax
c0013fc1:	89 04 24             	mov    DWORD PTR [esp],eax
c0013fc4:	e8 11 13 01 00       	call   c00252da <x87::x87()>
c0013fc9:	83 c4 10             	add    esp,0x10
c0013fcc:	eb 24                	jmp    c0013ff2 <setupFPU()+0xb0>
c0013fce:	83 e0 ef             	and    eax,0xffffffef
c0013fd1:	83 ec 0c             	sub    esp,0xc
c0013fd4:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0013fda:	68 24 a8 02 c0       	push   0xc002a824
c0013fdf:	e8 8d e5 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0013fe4:	0f 20 c0             	mov    eax,cr0
c0013fe7:	83 c8 04             	or     eax,0x4
c0013fea:	0f 22 c0             	mov    cr0,eax
c0013fed:	31 db                	xor    ebx,ebx
c0013fef:	83 c4 10             	add    esp,0x10
c0013ff2:	89 d8                	mov    eax,ebx
c0013ff4:	83 c4 08             	add    esp,0x8
c0013ff7:	5b                   	pop    ebx
c0013ff8:	c3                   	ret    
c0013ff9:	90                   	nop

c0013ffa <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0013ffa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013ffe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014002:	c1 e0 04             	shl    eax,0x4
c0014005:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014009:	8d 50 10             	lea    edx,[eax+0x10]
c001400c:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014012:	74 08                	je     c001401c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014014:	83 c0 04             	add    eax,0x4
c0014017:	39 d0                	cmp    eax,edx
c0014019:	75 f1                	jne    c001400c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001401b:	c3                   	ret    
c001401c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014026:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014030:	eb e2                	jmp    c0014014 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014032 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014032:	57                   	push   edi
c0014033:	31 c0                	xor    eax,eax
c0014035:	56                   	push   esi
c0014036:	53                   	push   ebx
c0014037:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001403b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001403f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014043:	89 da                	mov    edx,ebx
c0014045:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014049:	c1 e2 04             	shl    edx,0x4
c001404c:	01 ca                	add    edx,ecx
c001404e:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014056:	74 16                	je     c001406e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014058:	40                   	inc    eax
c0014059:	83 f8 04             	cmp    eax,0x4
c001405c:	75 f0                	jne    c001404e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c001405e:	c7 44 24 10 68 a8 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a868
c0014066:	5b                   	pop    ebx
c0014067:	5e                   	pop    esi
c0014068:	5f                   	pop    edi
c0014069:	e9 63 5c 00 00       	jmp    c0019cd1 <Krnl::panic(char const*)>
c001406e:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014071:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014074:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c001407a:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014080:	5b                   	pop    ebx
c0014081:	5e                   	pop    esi
c0014082:	5f                   	pop    edi
c0014083:	c3                   	ret    

c0014084 <doubleFault(regs*, void*)>:
c0014084:	55                   	push   ebp
c0014085:	89 e5                	mov    ebp,esp
c0014087:	83 ec 08             	sub    esp,0x8
c001408a:	83 ec 0c             	sub    esp,0xc
c001408d:	68 75 a8 02 c0       	push   0xc002a875
c0014092:	e8 3a 5c 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c0014097:	83 c4 10             	add    esp,0x10
c001409a:	90                   	nop
c001409b:	c9                   	leave  
c001409c:	c3                   	ret    
c001409d:	90                   	nop

c001409e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001409e:	56                   	push   esi
c001409f:	53                   	push   ebx
c00140a0:	50                   	push   eax
c00140a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00140a5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00140a9:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00140ae:	75 35                	jne    c00140e5 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00140b0:	8d 43 20             	lea    eax,[ebx+0x20]
c00140b3:	31 d2                	xor    edx,edx
c00140b5:	89 c1                	mov    ecx,eax
c00140b7:	c1 e1 04             	shl    ecx,0x4
c00140ba:	01 f1                	add    ecx,esi
c00140bc:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00140c4:	74 3e                	je     c0014104 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00140c6:	42                   	inc    edx
c00140c7:	83 fa 04             	cmp    edx,0x4
c00140ca:	75 f0                	jne    c00140bc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00140cc:	83 ec 0c             	sub    esp,0xc
c00140cf:	68 8f a8 02 c0       	push   0xc002a88f
c00140d4:	e8 f8 5b 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c00140d9:	83 c4 10             	add    esp,0x10
c00140dc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00140e1:	5a                   	pop    edx
c00140e2:	5b                   	pop    ebx
c00140e3:	5e                   	pop    esi
c00140e4:	c3                   	ret    
c00140e5:	83 ec 0c             	sub    esp,0xc
c00140e8:	56                   	push   esi
c00140e9:	e8 bc fb ff ff       	call   c0013caa <Device::getName()>
c00140ee:	83 c4 10             	add    esp,0x10
c00140f1:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00140f4:	75 ba                	jne    c00140b0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00140f6:	83 fb 0f             	cmp    ebx,0xf
c00140f9:	7f 29                	jg     c0014124 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00140fb:	0f b6 9b c0 c8 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd3740]
c0014102:	eb ac                	jmp    c00140b0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014104:	8d 04 82             	lea    eax,[edx+eax*4]
c0014107:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001410b:	8d 04 86             	lea    eax,[esi+eax*4]
c001410e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014114:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014118:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c001411e:	89 d8                	mov    eax,ebx
c0014120:	5a                   	pop    edx
c0014121:	5b                   	pop    ebx
c0014122:	5e                   	pop    esi
c0014123:	c3                   	ret    
c0014124:	83 ec 0c             	sub    esp,0xc
c0014127:	68 82 a8 02 c0       	push   0xc002a882
c001412c:	e8 a0 5b 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c0014131:	83 c4 10             	add    esp,0x10
c0014134:	e9 77 ff ff ff       	jmp    c00140b0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014139:	90                   	nop

c001413a <InterruptController::clearAllHandlers(int, bool)>:
c001413a:	56                   	push   esi
c001413b:	53                   	push   ebx
c001413c:	52                   	push   edx
c001413d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014141:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014145:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001414a:	75 61                	jne    c00141ad <InterruptController::clearAllHandlers(int, bool)+0x73>
c001414c:	8d 46 20             	lea    eax,[esi+0x20]
c001414f:	c1 e6 04             	shl    esi,0x4
c0014152:	c1 e0 04             	shl    eax,0x4
c0014155:	01 de                	add    esi,ebx
c0014157:	01 d8                	add    eax,ebx
c0014159:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014163:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c001416d:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014177:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014181:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c001418b:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014195:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c001419f:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00141a9:	58                   	pop    eax
c00141aa:	5b                   	pop    ebx
c00141ab:	5e                   	pop    esi
c00141ac:	c3                   	ret    
c00141ad:	83 ec 0c             	sub    esp,0xc
c00141b0:	53                   	push   ebx
c00141b1:	e8 f4 fa ff ff       	call   c0013caa <Device::getName()>
c00141b6:	83 c4 10             	add    esp,0x10
c00141b9:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00141bc:	75 8e                	jne    c001414c <InterruptController::clearAllHandlers(int, bool)+0x12>
c00141be:	83 fe 0f             	cmp    esi,0xf
c00141c1:	7f 09                	jg     c00141cc <InterruptController::clearAllHandlers(int, bool)+0x92>
c00141c3:	0f b6 b6 c0 c8 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd3740]
c00141ca:	eb 80                	jmp    c001414c <InterruptController::clearAllHandlers(int, bool)+0x12>
c00141cc:	83 ec 0c             	sub    esp,0xc
c00141cf:	68 9c a8 02 c0       	push   0xc002a89c
c00141d4:	e8 f8 5a 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c00141d9:	83 c4 10             	add    esp,0x10
c00141dc:	e9 6b ff ff ff       	jmp    c001414c <InterruptController::clearAllHandlers(int, bool)+0x12>
c00141e1:	90                   	nop

c00141e2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c00141e2:	56                   	push   esi
c00141e3:	53                   	push   ebx
c00141e4:	52                   	push   edx
c00141e5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00141e9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00141ed:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00141f2:	75 3a                	jne    c001422e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c00141f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00141f8:	8d 50 20             	lea    edx,[eax+0x20]
c00141fb:	c1 e2 04             	shl    edx,0x4
c00141fe:	8d 04 16             	lea    eax,[esi+edx*1]
c0014201:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014205:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c001420b:	74 0b                	je     c0014218 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c001420d:	83 c0 04             	add    eax,0x4
c0014210:	39 d0                	cmp    eax,edx
c0014212:	75 f1                	jne    c0014205 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014214:	58                   	pop    eax
c0014215:	5b                   	pop    ebx
c0014216:	5e                   	pop    esi
c0014217:	c3                   	ret    
c0014218:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014222:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001422c:	eb df                	jmp    c001420d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c001422e:	83 ec 0c             	sub    esp,0xc
c0014231:	56                   	push   esi
c0014232:	e8 73 fa ff ff       	call   c0013caa <Device::getName()>
c0014237:	83 c4 10             	add    esp,0x10
c001423a:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001423d:	75 b5                	jne    c00141f4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001423f:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014244:	7f 11                	jg     c0014257 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014246:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001424a:	0f b6 80 c0 c8 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd3740]
c0014251:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014255:	eb 9d                	jmp    c00141f4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014257:	83 ec 0c             	sub    esp,0xc
c001425a:	68 a9 a8 02 c0       	push   0xc002a8a9
c001425f:	e8 6d 5a 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c0014264:	83 c4 10             	add    esp,0x10
c0014267:	eb 8b                	jmp    c00141f4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014269 <nmiHandler(regs*, void*)>:
c0014269:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c001426e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014272:	e9 89 aa ff ff       	jmp    c000ed00 <Computer::handleNMI()>

c0014277 <int_handler>:
c0014277:	55                   	push   ebp
c0014278:	57                   	push   edi
c0014279:	56                   	push   esi
c001427a:	53                   	push   ebx
c001427b:	83 ec 0c             	sub    esp,0xc
c001427e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014282:	80 3d a4 01 03 c0 00 	cmp    BYTE PTR ds:0xc00301a4,0x0
c0014289:	74 0b                	je     c0014296 <int_handler+0x1f>
c001428b:	fa                   	cli    
c001428c:	f4                   	hlt    
c001428d:	80 3d a4 01 03 c0 00 	cmp    BYTE PTR ds:0xc00301a4,0x0
c0014294:	75 f5                	jne    c001428b <int_handler+0x14>
c0014296:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c001429b:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c001429e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00142a4:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c00142aa:	8d 43 e0             	lea    eax,[ebx-0x20]
c00142ad:	83 f8 17             	cmp    eax,0x17
c00142b0:	77 13                	ja     c00142c5 <int_handler+0x4e>
c00142b2:	83 ec 08             	sub    esp,0x8
c00142b5:	8b 17                	mov    edx,DWORD PTR [edi]
c00142b7:	8d 43 e0             	lea    eax,[ebx-0x20]
c00142ba:	0f b6 c0             	movzx  eax,al
c00142bd:	50                   	push   eax
c00142be:	57                   	push   edi
c00142bf:	ff 52 38             	call   DWORD PTR [edx+0x38]
c00142c2:	83 c4 10             	add    esp,0x10
c00142c5:	83 c3 15             	add    ebx,0x15
c00142c8:	c1 e3 04             	shl    ebx,0x4
c00142cb:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c00142cf:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c00142d6:	31 db                	xor    ebx,ebx
c00142d8:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c00142dc:	85 c0                	test   eax,eax
c00142de:	74 13                	je     c00142f3 <int_handler+0x7c>
c00142e0:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00142e3:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c00142e7:	74 1c                	je     c0014305 <int_handler+0x8e>
c00142e9:	83 ec 08             	sub    esp,0x8
c00142ec:	52                   	push   edx
c00142ed:	56                   	push   esi
c00142ee:	ff d0                	call   eax
c00142f0:	83 c4 10             	add    esp,0x10
c00142f3:	43                   	inc    ebx
c00142f4:	83 fb 04             	cmp    ebx,0x4
c00142f7:	75 df                	jne    c00142d8 <int_handler+0x61>
c00142f9:	83 c4 0c             	add    esp,0xc
c00142fc:	31 c0                	xor    eax,eax
c00142fe:	5b                   	pop    ebx
c00142ff:	31 d2                	xor    edx,edx
c0014301:	5e                   	pop    esi
c0014302:	5f                   	pop    edi
c0014303:	5d                   	pop    ebp
c0014304:	c3                   	ret    
c0014305:	83 ec 08             	sub    esp,0x8
c0014308:	52                   	push   edx
c0014309:	56                   	push   esi
c001430a:	ff d0                	call   eax
c001430c:	83 c4 10             	add    esp,0x10
c001430f:	83 c4 0c             	add    esp,0xc
c0014312:	5b                   	pop    ebx
c0014313:	5e                   	pop    esi
c0014314:	5f                   	pop    edi
c0014315:	5d                   	pop    ebp
c0014316:	c3                   	ret    
c0014317:	90                   	nop

c0014318 <InterruptController::InterruptController(char const*)>:
c0014318:	83 ec 1c             	sub    esp,0x1c
c001431b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001431f:	83 ec 08             	sub    esp,0x8
c0014322:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014326:	50                   	push   eax
c0014327:	e8 82 f8 ff ff       	call   c0013bae <Device::Device(char const*)>
c001432c:	83 c4 10             	add    esp,0x10
c001432f:	ba 5c ab 02 c0       	mov    edx,0xc002ab5c
c0014334:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014338:	89 10                	mov    DWORD PTR [eax],edx
c001433a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001433e:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014348:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014350:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014358:	7f 5e                	jg     c00143b8 <InterruptController::InterruptController(char const*)+0xa0>
c001435a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014362:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014367:	7f 49                	jg     c00143b2 <InterruptController::InterruptController(char const*)+0x9a>
c0014369:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001436d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014371:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014378:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001437c:	01 ca                	add    edx,ecx
c001437e:	83 c2 54             	add    edx,0x54
c0014381:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014389:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001438d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014391:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014398:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001439c:	01 ca                	add    edx,ecx
c001439e:	81 c2 54 04 00 00    	add    edx,0x454
c00143a4:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00143ac:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00143b0:	eb b0                	jmp    c0014362 <InterruptController::InterruptController(char const*)+0x4a>
c00143b2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00143b6:	eb 98                	jmp    c0014350 <InterruptController::InterruptController(char const*)+0x38>
c00143b8:	90                   	nop
c00143b9:	83 c4 1c             	add    esp,0x1c
c00143bc:	c3                   	ret    
c00143bd:	90                   	nop

c00143be <InterruptController::~InterruptController()>:
c00143be:	83 ec 0c             	sub    esp,0xc
c00143c1:	ba 5c ab 02 c0       	mov    edx,0xc002ab5c
c00143c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143ca:	89 10                	mov    DWORD PTR [eax],edx
c00143cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143d0:	83 ec 0c             	sub    esp,0xc
c00143d3:	50                   	push   eax
c00143d4:	e8 9f f4 ff ff       	call   c0013878 <Device::~Device()>
c00143d9:	83 c4 10             	add    esp,0x10
c00143dc:	90                   	nop
c00143dd:	83 c4 0c             	add    esp,0xc
c00143e0:	c3                   	ret    
c00143e1:	90                   	nop

c00143e2 <InterruptController::~InterruptController()>:
c00143e2:	83 ec 0c             	sub    esp,0xc
c00143e5:	83 ec 0c             	sub    esp,0xc
c00143e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00143ec:	e8 cd ff ff ff       	call   c00143be <InterruptController::~InterruptController()>
c00143f1:	83 c4 10             	add    esp,0x10
c00143f4:	83 ec 08             	sub    esp,0x8
c00143f7:	68 58 21 00 00       	push   0x2158
c00143fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014400:	e8 94 e0 ff ff       	call   c0012499 <operator delete(void*, unsigned long)>
c0014405:	83 c4 10             	add    esp,0x10
c0014408:	83 c4 0c             	add    esp,0xc
c001440b:	c3                   	ret    

c001440c <displayDebugInfo(regs*)>:
c001440c:	55                   	push   ebp
c001440d:	57                   	push   edi
c001440e:	56                   	push   esi
c001440f:	53                   	push   ebx
c0014410:	83 ec 24             	sub    esp,0x24
c0014413:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014417:	0f 20 c2             	mov    edx,cr0
c001441a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001441e:	0f 20 d7             	mov    edi,cr2
c0014421:	0f 20 de             	mov    esi,cr3
c0014424:	0f 20 e5             	mov    ebp,cr4
c0014427:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001442a:	68 b6 a8 02 c0       	push   0xc002a8b6
c001442f:	e8 3d e1 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0014434:	59                   	pop    ecx
c0014435:	58                   	pop    eax
c0014436:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014439:	68 c1 a8 02 c0       	push   0xc002a8c1
c001443e:	e8 2e e1 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0014443:	58                   	pop    eax
c0014444:	5a                   	pop    edx
c0014445:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014448:	68 cc a8 02 c0       	push   0xc002a8cc
c001444d:	e8 1f e1 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0014452:	59                   	pop    ecx
c0014453:	58                   	pop    eax
c0014454:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014457:	68 d7 a8 02 c0       	push   0xc002a8d7
c001445c:	e8 10 e1 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0014461:	58                   	pop    eax
c0014462:	5a                   	pop    edx
c0014463:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014466:	68 e2 a8 02 c0       	push   0xc002a8e2
c001446b:	e8 01 e1 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0014470:	59                   	pop    ecx
c0014471:	58                   	pop    eax
c0014472:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014475:	68 ed a8 02 c0       	push   0xc002a8ed
c001447a:	e8 f2 e0 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c001447f:	58                   	pop    eax
c0014480:	5a                   	pop    edx
c0014481:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014484:	68 f8 a8 02 c0       	push   0xc002a8f8
c0014489:	e8 e3 e0 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c001448e:	59                   	pop    ecx
c001448f:	58                   	pop    eax
c0014490:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014493:	68 03 a9 02 c0       	push   0xc002a903
c0014498:	e8 d4 e0 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c001449d:	58                   	pop    eax
c001449e:	5a                   	pop    edx
c001449f:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00144a2:	68 0e a9 02 c0       	push   0xc002a90e
c00144a7:	e8 c5 e0 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c00144ac:	59                   	pop    ecx
c00144ad:	58                   	pop    eax
c00144ae:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00144b1:	68 1d a9 02 c0       	push   0xc002a91d
c00144b6:	e8 b6 e0 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c00144bb:	58                   	pop    eax
c00144bc:	5a                   	pop    edx
c00144bd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00144c0:	68 28 a9 02 c0       	push   0xc002a928
c00144c5:	e8 a7 e0 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c00144ca:	59                   	pop    ecx
c00144cb:	58                   	pop    eax
c00144cc:	57                   	push   edi
c00144cd:	68 33 a9 02 c0       	push   0xc002a933
c00144d2:	e8 9a e0 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c00144d7:	58                   	pop    eax
c00144d8:	5a                   	pop    edx
c00144d9:	56                   	push   esi
c00144da:	68 3e a9 02 c0       	push   0xc002a93e
c00144df:	e8 8d e0 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c00144e4:	59                   	pop    ecx
c00144e5:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c00144ea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00144f0:	e8 de bd ff ff       	call   c00102d3 <setActiveTerminal(VgaText*)>
c00144f5:	58                   	pop    eax
c00144f6:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00144f9:	5a                   	pop    edx
c00144fa:	c1 e0 05             	shl    eax,0x5
c00144fd:	05 20 c6 02 c0       	add    eax,0xc002c620
c0014502:	50                   	push   eax
c0014503:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0014508:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001450e:	e8 cd c2 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0014513:	59                   	pop    ecx
c0014514:	58                   	pop    eax
c0014515:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c001451a:	68 49 a9 02 c0       	push   0xc002a949
c001451f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014525:	e8 b6 c2 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c001452a:	58                   	pop    eax
c001452b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014530:	5a                   	pop    edx
c0014531:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014534:	83 c0 0c             	add    eax,0xc
c0014537:	50                   	push   eax
c0014538:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c001453d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014543:	e8 98 c2 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0014548:	59                   	pop    ecx
c0014549:	58                   	pop    eax
c001454a:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c001454f:	68 52 a9 02 c0       	push   0xc002a952
c0014554:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001455a:	e8 81 c2 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c001455f:	58                   	pop    eax
c0014560:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0014565:	5a                   	pop    edx
c0014566:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014569:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001456f:	e8 26 c2 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c0014574:	59                   	pop    ecx
c0014575:	58                   	pop    eax
c0014576:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c001457b:	68 5a a9 02 c0       	push   0xc002a95a
c0014580:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014586:	e8 55 c2 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c001458b:	58                   	pop    eax
c001458c:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0014591:	5a                   	pop    edx
c0014592:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014595:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001459b:	e8 fa c1 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c00145a0:	59                   	pop    ecx
c00145a1:	58                   	pop    eax
c00145a2:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c00145a7:	68 62 a9 02 c0       	push   0xc002a962
c00145ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145b2:	e8 29 c2 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c00145b7:	58                   	pop    eax
c00145b8:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c00145bd:	5a                   	pop    edx
c00145be:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00145c1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145c7:	e8 ce c1 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c00145cc:	59                   	pop    ecx
c00145cd:	58                   	pop    eax
c00145ce:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c00145d3:	68 6a a9 02 c0       	push   0xc002a96a
c00145d8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145de:	e8 fd c1 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c00145e3:	58                   	pop    eax
c00145e4:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c00145e9:	5a                   	pop    edx
c00145ea:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00145ed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145f3:	e8 a2 c1 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c00145f8:	59                   	pop    ecx
c00145f9:	58                   	pop    eax
c00145fa:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c00145ff:	68 72 a9 02 c0       	push   0xc002a972
c0014604:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001460a:	e8 d1 c1 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c001460f:	58                   	pop    eax
c0014610:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0014615:	5a                   	pop    edx
c0014616:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014619:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001461f:	e8 76 c1 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c0014624:	59                   	pop    ecx
c0014625:	58                   	pop    eax
c0014626:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c001462b:	68 7a a9 02 c0       	push   0xc002a97a
c0014630:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014636:	e8 a5 c1 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c001463b:	58                   	pop    eax
c001463c:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0014641:	5a                   	pop    edx
c0014642:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014645:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001464b:	e8 4a c1 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c0014650:	59                   	pop    ecx
c0014651:	58                   	pop    eax
c0014652:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0014657:	68 82 a9 02 c0       	push   0xc002a982
c001465c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014662:	e8 79 c1 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0014667:	58                   	pop    eax
c0014668:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c001466d:	5a                   	pop    edx
c001466e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014672:	52                   	push   edx
c0014673:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014679:	e8 1c c1 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c001467e:	59                   	pop    ecx
c001467f:	58                   	pop    eax
c0014680:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0014685:	68 8b a9 02 c0       	push   0xc002a98b
c001468a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014690:	e8 4b c1 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0014695:	58                   	pop    eax
c0014696:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c001469b:	5a                   	pop    edx
c001469c:	57                   	push   edi
c001469d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146a3:	e8 f2 c0 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c00146a8:	59                   	pop    ecx
c00146a9:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c00146ae:	5f                   	pop    edi
c00146af:	68 93 a9 02 c0       	push   0xc002a993
c00146b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146ba:	e8 21 c1 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c00146bf:	58                   	pop    eax
c00146c0:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c00146c5:	5a                   	pop    edx
c00146c6:	56                   	push   esi
c00146c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146cd:	e8 c8 c0 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c00146d2:	59                   	pop    ecx
c00146d3:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c00146d8:	5e                   	pop    esi
c00146d9:	68 9b a9 02 c0       	push   0xc002a99b
c00146de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146e4:	e8 f7 c0 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c00146e9:	5f                   	pop    edi
c00146ea:	58                   	pop    eax
c00146eb:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c00146f0:	55                   	push   ebp
c00146f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146f7:	e8 9e c0 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c00146fc:	58                   	pop    eax
c00146fd:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0014702:	5a                   	pop    edx
c0014703:	68 a3 a9 02 c0       	push   0xc002a9a3
c0014708:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001470e:	e8 cd c0 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0014713:	0f 21 c0             	mov    eax,db0
c0014716:	59                   	pop    ecx
c0014717:	5e                   	pop    esi
c0014718:	50                   	push   eax
c0014719:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c001471e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014724:	e8 71 c0 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c0014729:	5f                   	pop    edi
c001472a:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c001472f:	5d                   	pop    ebp
c0014730:	68 ac a9 02 c0       	push   0xc002a9ac
c0014735:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001473b:	e8 a0 c0 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0014740:	0f 21 c8             	mov    eax,db1
c0014743:	5a                   	pop    edx
c0014744:	59                   	pop    ecx
c0014745:	50                   	push   eax
c0014746:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c001474b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014751:	e8 44 c0 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c0014756:	5e                   	pop    esi
c0014757:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c001475c:	5f                   	pop    edi
c001475d:	68 b4 a9 02 c0       	push   0xc002a9b4
c0014762:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014768:	e8 73 c0 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c001476d:	0f 21 d0             	mov    eax,db2
c0014770:	5d                   	pop    ebp
c0014771:	5a                   	pop    edx
c0014772:	50                   	push   eax
c0014773:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0014778:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001477e:	e8 17 c0 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c0014783:	59                   	pop    ecx
c0014784:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0014789:	5e                   	pop    esi
c001478a:	68 bc a9 02 c0       	push   0xc002a9bc
c001478f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014795:	e8 46 c0 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c001479a:	0f 21 d8             	mov    eax,db3
c001479d:	5f                   	pop    edi
c001479e:	5d                   	pop    ebp
c001479f:	50                   	push   eax
c00147a0:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c00147a5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147ab:	e8 ea bf ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c00147b0:	58                   	pop    eax
c00147b1:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c00147b6:	5a                   	pop    edx
c00147b7:	68 c4 a9 02 c0       	push   0xc002a9c4
c00147bc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147c2:	e8 19 c0 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c00147c7:	0f 21 f0             	mov    eax,db6
c00147ca:	59                   	pop    ecx
c00147cb:	5e                   	pop    esi
c00147cc:	50                   	push   eax
c00147cd:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c00147d2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147d8:	e8 bd bf ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c00147dd:	5f                   	pop    edi
c00147de:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c00147e3:	5d                   	pop    ebp
c00147e4:	68 cc a9 02 c0       	push   0xc002a9cc
c00147e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147ef:	e8 ec bf ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c00147f4:	0f 21 f8             	mov    eax,db7
c00147f7:	5a                   	pop    edx
c00147f8:	59                   	pop    ecx
c00147f9:	50                   	push   eax
c00147fa:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c00147ff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014805:	e8 90 bf ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c001480a:	5e                   	pop    esi
c001480b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001480e:	e8 37 86 00 00       	call   c001ce4a <Thr::getDriverNameFromAddress(unsigned long)>
c0014813:	83 c4 10             	add    esp,0x10
c0014816:	85 c0                	test   eax,eax
c0014818:	74 7d                	je     c0014897 <displayDebugInfo(regs*)+0x48b>
c001481a:	89 c6                	mov    esi,eax
c001481c:	50                   	push   eax
c001481d:	50                   	push   eax
c001481e:	56                   	push   esi
c001481f:	68 d4 a9 02 c0       	push   0xc002a9d4
c0014824:	e8 48 dd ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0014829:	5a                   	pop    edx
c001482a:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c001482f:	59                   	pop    ecx
c0014830:	68 e2 a9 02 c0       	push   0xc002a9e2
c0014835:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001483b:	e8 a0 bf ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0014840:	5f                   	pop    edi
c0014841:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0014846:	5d                   	pop    ebp
c0014847:	56                   	push   esi
c0014848:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001484e:	e8 8d bf ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0014853:	58                   	pop    eax
c0014854:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0014859:	5a                   	pop    edx
c001485a:	68 ee a9 02 c0       	push   0xc002a9ee
c001485f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014865:	e8 76 bf ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c001486a:	59                   	pop    ecx
c001486b:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0014870:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014876:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014879:	e8 03 86 00 00       	call   c001ce81 <Thr::getDriverOffsetFromAddress(unsigned long)>
c001487e:	5b                   	pop    ebx
c001487f:	5d                   	pop    ebp
c0014880:	50                   	push   eax
c0014881:	57                   	push   edi
c0014882:	e8 13 bf ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c0014887:	58                   	pop    eax
c0014888:	5a                   	pop    edx
c0014889:	56                   	push   esi
c001488a:	68 fa a9 02 c0       	push   0xc002a9fa
c001488f:	e8 dd dc ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0014894:	83 c4 10             	add    esp,0x10
c0014897:	fa                   	cli    
c0014898:	f4                   	hlt    
c0014899:	eb fe                	jmp    c0014899 <displayDebugInfo(regs*)+0x48d>

c001489b <x87EmulHandler(regs*, void*)>:
c001489b:	83 ec 0c             	sub    esp,0xc
c001489e:	0f 20 c2             	mov    edx,cr0
c00148a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148a6:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c00148aa:	75 4b                	jne    c00148f7 <x87EmulHandler(regs*, void*)+0x5c>
c00148ac:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c00148b1:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c00148b7:	85 c0                	test   eax,eax
c00148b9:	74 05                	je     c00148c0 <x87EmulHandler(regs*, void*)+0x25>
c00148bb:	83 e2 08             	and    edx,0x8
c00148be:	75 17                	jne    c00148d7 <x87EmulHandler(regs*, void*)+0x3c>
c00148c0:	83 ec 0c             	sub    esp,0xc
c00148c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148c7:	e8 4f a9 00 00       	call   c001f21b <Vm::x87Handler(regs*)>
c00148cc:	83 c4 10             	add    esp,0x10
c00148cf:	84 c0                	test   al,al
c00148d1:	74 24                	je     c00148f7 <x87EmulHandler(regs*, void*)+0x5c>
c00148d3:	83 c4 0c             	add    esp,0xc
c00148d6:	c3                   	ret    
c00148d7:	83 ec 0c             	sub    esp,0xc
c00148da:	68 20 aa 02 c0       	push   0xc002aa20
c00148df:	e8 8d dc ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c00148e4:	0f 06                	clts   
c00148e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148eb:	83 c4 10             	add    esp,0x10
c00148ee:	a3 e8 d7 02 c0       	mov    ds:0xc002d7e8,eax
c00148f3:	83 c4 0c             	add    esp,0xc
c00148f6:	c3                   	ret    
c00148f7:	83 ec 0c             	sub    esp,0xc
c00148fa:	68 0a aa 02 c0       	push   0xc002aa0a
c00148ff:	e8 6d dc ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0014904:	5a                   	pop    edx
c0014905:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014909:	e8 fe fa ff ff       	call   c001440c <displayDebugInfo(regs*)>

c001490e <gpFault(regs*, void*)>:
c001490e:	53                   	push   ebx
c001490f:	83 ec 14             	sub    esp,0x14
c0014912:	c7 05 e4 d7 02 c0 f4 e6 01 c0 	mov    DWORD PTR ds:0xc002d7e4,0xc001e6f4
c001491c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014920:	53                   	push   ebx
c0014921:	e8 ce 9d 00 00       	call   c001e6f4 <Vm::faultHandler(regs*)>
c0014926:	83 c4 10             	add    esp,0x10
c0014929:	84 c0                	test   al,al
c001492b:	74 05                	je     c0014932 <gpFault(regs*, void*)+0x24>
c001492d:	83 c4 08             	add    esp,0x8
c0014930:	5b                   	pop    ebx
c0014931:	c3                   	ret    
c0014932:	83 ec 0c             	sub    esp,0xc
c0014935:	68 2d aa 02 c0       	push   0xc002aa2d
c001493a:	e8 32 dc ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c001493f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014942:	e8 c5 fa ff ff       	call   c001440c <displayDebugInfo(regs*)>

c0014947 <pgFault(regs*, void*)>:
c0014947:	83 ec 14             	sub    esp,0x14
c001494a:	0f 20 d0             	mov    eax,cr2
c001494d:	50                   	push   eax
c001494e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014953:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014956:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001495c:	e8 e5 d7 ff ff       	call   c0012146 <VAS::tryLoadBackOffDisk(unsigned long)>
c0014961:	83 c4 10             	add    esp,0x10
c0014964:	84 c0                	test   al,al
c0014966:	74 04                	je     c001496c <pgFault(regs*, void*)+0x25>
c0014968:	83 c4 0c             	add    esp,0xc
c001496b:	c3                   	ret    
c001496c:	83 ec 0c             	sub    esp,0xc
c001496f:	68 48 aa 02 c0       	push   0xc002aa48
c0014974:	e8 f8 db ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0014979:	58                   	pop    eax
c001497a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001497e:	e8 89 fa ff ff       	call   c001440c <displayDebugInfo(regs*)>

c0014983 <otherISRHandler(regs*, void*)>:
c0014983:	53                   	push   ebx
c0014984:	83 ec 0c             	sub    esp,0xc
c0014987:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001498b:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001498e:	50                   	push   eax
c001498f:	50                   	push   eax
c0014990:	68 55 aa 02 c0       	push   0xc002aa55
c0014995:	e8 d7 db ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c001499a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001499d:	e8 6a fa ff ff       	call   c001440c <displayDebugInfo(regs*)>

c00149a2 <opcodeFault(regs*, void*)>:
c00149a2:	55                   	push   ebp
c00149a3:	89 e5                	mov    ebp,esp
c00149a5:	56                   	push   esi
c00149a6:	53                   	push   ebx
c00149a7:	83 ec 40             	sub    esp,0x40
c00149aa:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c00149af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00149b5:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c00149bb:	84 c0                	test   al,al
c00149bd:	74 24                	je     c00149e3 <opcodeFault(regs*, void*)+0x41>
c00149bf:	83 ec 0c             	sub    esp,0xc
c00149c2:	68 74 aa 02 c0       	push   0xc002aa74
c00149c7:	e8 a5 db ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c00149cc:	83 c4 10             	add    esp,0x10
c00149cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149d2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149d5:	8d 50 19             	lea    edx,[eax+0x19]
c00149d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149db:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00149de:	e9 d5 05 00 00       	jmp    c0014fb8 <opcodeFault(regs*, void*)+0x616>
c00149e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149e6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149e9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00149ec:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00149f0:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00149f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149f7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149fa:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00149fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a00:	8a 00                	mov    al,BYTE PTR [eax]
c0014a02:	3c f0                	cmp    al,0xf0
c0014a04:	75 17                	jne    c0014a1d <opcodeFault(regs*, void*)+0x7b>
c0014a06:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a0c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a0f:	8d 50 01             	lea    edx,[eax+0x1]
c0014a12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a15:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a18:	e9 da 00 00 00       	jmp    c0014af7 <opcodeFault(regs*, void*)+0x155>
c0014a1d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a20:	8a 00                	mov    al,BYTE PTR [eax]
c0014a22:	3c f2                	cmp    al,0xf2
c0014a24:	74 09                	je     c0014a2f <opcodeFault(regs*, void*)+0x8d>
c0014a26:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a29:	8a 00                	mov    al,BYTE PTR [eax]
c0014a2b:	3c f3                	cmp    al,0xf3
c0014a2d:	75 1b                	jne    c0014a4a <opcodeFault(regs*, void*)+0xa8>
c0014a2f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a33:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a39:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a3c:	8d 50 01             	lea    edx,[eax+0x1]
c0014a3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a42:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a45:	e9 ad 00 00 00       	jmp    c0014af7 <opcodeFault(regs*, void*)+0x155>
c0014a4a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a4d:	8a 00                	mov    al,BYTE PTR [eax]
c0014a4f:	3c 66                	cmp    al,0x66
c0014a51:	75 1f                	jne    c0014a72 <opcodeFault(regs*, void*)+0xd0>
c0014a53:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a57:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014a5b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a61:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a64:	8d 50 01             	lea    edx,[eax+0x1]
c0014a67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a6a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a6d:	e9 85 00 00 00       	jmp    c0014af7 <opcodeFault(regs*, void*)+0x155>
c0014a72:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a75:	8a 00                	mov    al,BYTE PTR [eax]
c0014a77:	3c 67                	cmp    al,0x67
c0014a79:	75 18                	jne    c0014a93 <opcodeFault(regs*, void*)+0xf1>
c0014a7b:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a7f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a85:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a88:	8d 50 01             	lea    edx,[eax+0x1]
c0014a8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a8e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a91:	eb 64                	jmp    c0014af7 <opcodeFault(regs*, void*)+0x155>
c0014a93:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a96:	8a 00                	mov    al,BYTE PTR [eax]
c0014a98:	3c 2e                	cmp    al,0x2e
c0014a9a:	74 09                	je     c0014aa5 <opcodeFault(regs*, void*)+0x103>
c0014a9c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a9f:	8a 00                	mov    al,BYTE PTR [eax]
c0014aa1:	3c 3e                	cmp    al,0x3e
c0014aa3:	75 18                	jne    c0014abd <opcodeFault(regs*, void*)+0x11b>
c0014aa5:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014aa9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014aac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aaf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ab2:	8d 50 01             	lea    edx,[eax+0x1]
c0014ab5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ab8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014abb:	eb 3a                	jmp    c0014af7 <opcodeFault(regs*, void*)+0x155>
c0014abd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ac0:	8a 00                	mov    al,BYTE PTR [eax]
c0014ac2:	3c 36                	cmp    al,0x36
c0014ac4:	74 1b                	je     c0014ae1 <opcodeFault(regs*, void*)+0x13f>
c0014ac6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ac9:	8a 00                	mov    al,BYTE PTR [eax]
c0014acb:	3c 26                	cmp    al,0x26
c0014acd:	74 12                	je     c0014ae1 <opcodeFault(regs*, void*)+0x13f>
c0014acf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ad2:	8a 00                	mov    al,BYTE PTR [eax]
c0014ad4:	3c 64                	cmp    al,0x64
c0014ad6:	74 09                	je     c0014ae1 <opcodeFault(regs*, void*)+0x13f>
c0014ad8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014adb:	8a 00                	mov    al,BYTE PTR [eax]
c0014add:	3c 65                	cmp    al,0x65
c0014adf:	75 16                	jne    c0014af7 <opcodeFault(regs*, void*)+0x155>
c0014ae1:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ae5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ae8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aeb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014aee:	8d 50 01             	lea    edx,[eax+0x1]
c0014af1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014af4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014af7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014afa:	8a 00                	mov    al,BYTE PTR [eax]
c0014afc:	3c 0f                	cmp    al,0xf
c0014afe:	0f 85 ad 00 00 00    	jne    c0014bb1 <opcodeFault(regs*, void*)+0x20f>
c0014b04:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b07:	40                   	inc    eax
c0014b08:	8a 00                	mov    al,BYTE PTR [eax]
c0014b0a:	3c c2                	cmp    al,0xc2
c0014b0c:	74 0e                	je     c0014b1c <opcodeFault(regs*, void*)+0x17a>
c0014b0e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b11:	40                   	inc    eax
c0014b12:	8a 00                	mov    al,BYTE PTR [eax]
c0014b14:	3c c3                	cmp    al,0xc3
c0014b16:	0f 85 95 00 00 00    	jne    c0014bb1 <opcodeFault(regs*, void*)+0x20f>
c0014b1c:	83 ec 0c             	sub    esp,0xc
c0014b1f:	68 97 aa 02 c0       	push   0xc002aa97
c0014b24:	e8 48 da ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0014b29:	83 c4 10             	add    esp,0x10
c0014b2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b2f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b32:	8d 50 01             	lea    edx,[eax+0x1]
c0014b35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b38:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b3b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b3e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b41:	8a 00                	mov    al,BYTE PTR [eax]
c0014b43:	8d 50 fe             	lea    edx,[eax-0x2]
c0014b46:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b49:	88 10                	mov    BYTE PTR [eax],dl
c0014b4b:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014b4e:	50                   	push   eax
c0014b4f:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014b52:	50                   	push   eax
c0014b53:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014b56:	50                   	push   eax
c0014b57:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014b5a:	e8 8b 48 00 00       	call   c00193ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014b5f:	83 c4 10             	add    esp,0x10
c0014b62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b65:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b68:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014b6b:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014b6e:	01 d0                	add    eax,edx
c0014b70:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014b73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b76:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b79:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014b7c:	48                   	dec    eax
c0014b7d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014b80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b83:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014b86:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b8c:	83 ec 04             	sub    esp,0x4
c0014b8f:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014b92:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014b95:	50                   	push   eax
c0014b96:	e8 19 b6 fe ff       	call   c00001b4 <voodooXADD>
c0014b9b:	83 c4 10             	add    esp,0x10
c0014b9e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014ba1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014ba4:	01 c2                	add    edx,eax
c0014ba6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ba9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bac:	e9 07 04 00 00       	jmp    c0014fb8 <opcodeFault(regs*, void*)+0x616>
c0014bb1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bb4:	8a 00                	mov    al,BYTE PTR [eax]
c0014bb6:	3c 0f                	cmp    al,0xf
c0014bb8:	0f 85 8b 01 00 00    	jne    c0014d49 <opcodeFault(regs*, void*)+0x3a7>
c0014bbe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bc1:	40                   	inc    eax
c0014bc2:	8a 00                	mov    al,BYTE PTR [eax]
c0014bc4:	3c c7                	cmp    al,0xc7
c0014bc6:	0f 86 7d 01 00 00    	jbe    c0014d49 <opcodeFault(regs*, void*)+0x3a7>
c0014bcc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bcf:	40                   	inc    eax
c0014bd0:	8a 00                	mov    al,BYTE PTR [eax]
c0014bd2:	3c cf                	cmp    al,0xcf
c0014bd4:	0f 87 6f 01 00 00    	ja     c0014d49 <opcodeFault(regs*, void*)+0x3a7>
c0014bda:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bdd:	40                   	inc    eax
c0014bde:	8a 00                	mov    al,BYTE PTR [eax]
c0014be0:	83 c0 38             	add    eax,0x38
c0014be3:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014be6:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014bea:	75 0b                	jne    c0014bf7 <opcodeFault(regs*, void*)+0x255>
c0014bec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bef:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014bf2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bf5:	eb 75                	jmp    c0014c6c <opcodeFault(regs*, void*)+0x2ca>
c0014bf7:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014bfb:	75 0b                	jne    c0014c08 <opcodeFault(regs*, void*)+0x266>
c0014bfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c00:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014c03:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c06:	eb 64                	jmp    c0014c6c <opcodeFault(regs*, void*)+0x2ca>
c0014c08:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014c0c:	75 0b                	jne    c0014c19 <opcodeFault(regs*, void*)+0x277>
c0014c0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c11:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014c14:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c17:	eb 53                	jmp    c0014c6c <opcodeFault(regs*, void*)+0x2ca>
c0014c19:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014c1d:	75 0b                	jne    c0014c2a <opcodeFault(regs*, void*)+0x288>
c0014c1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c22:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014c25:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c28:	eb 42                	jmp    c0014c6c <opcodeFault(regs*, void*)+0x2ca>
c0014c2a:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014c2e:	75 0b                	jne    c0014c3b <opcodeFault(regs*, void*)+0x299>
c0014c30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c33:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014c36:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c39:	eb 31                	jmp    c0014c6c <opcodeFault(regs*, void*)+0x2ca>
c0014c3b:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014c3f:	75 0b                	jne    c0014c4c <opcodeFault(regs*, void*)+0x2aa>
c0014c41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c44:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014c47:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c4a:	eb 20                	jmp    c0014c6c <opcodeFault(regs*, void*)+0x2ca>
c0014c4c:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014c50:	75 0b                	jne    c0014c5d <opcodeFault(regs*, void*)+0x2bb>
c0014c52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c55:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014c58:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c5b:	eb 0f                	jmp    c0014c6c <opcodeFault(regs*, void*)+0x2ca>
c0014c5d:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014c61:	75 09                	jne    c0014c6c <opcodeFault(regs*, void*)+0x2ca>
c0014c63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c66:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014c69:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c6c:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014c70:	74 10                	je     c0014c82 <opcodeFault(regs*, void*)+0x2e0>
c0014c72:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014c79:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014c80:	eb 2d                	jmp    c0014caf <opcodeFault(regs*, void*)+0x30d>
c0014c82:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c85:	c1 e0 18             	shl    eax,0x18
c0014c88:	89 c2                	mov    edx,eax
c0014c8a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c8d:	c1 e0 08             	shl    eax,0x8
c0014c90:	25 00 00 ff 00       	and    eax,0xff0000
c0014c95:	09 c2                	or     edx,eax
c0014c97:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c9a:	c1 e8 08             	shr    eax,0x8
c0014c9d:	25 00 ff 00 00       	and    eax,0xff00
c0014ca2:	09 c2                	or     edx,eax
c0014ca4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ca7:	c1 e8 18             	shr    eax,0x18
c0014caa:	09 d0                	or     eax,edx
c0014cac:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014caf:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014cb3:	75 0b                	jne    c0014cc0 <opcodeFault(regs*, void*)+0x31e>
c0014cb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cb8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014cbb:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014cbe:	eb 75                	jmp    c0014d35 <opcodeFault(regs*, void*)+0x393>
c0014cc0:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014cc4:	75 0b                	jne    c0014cd1 <opcodeFault(regs*, void*)+0x32f>
c0014cc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ccc:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014ccf:	eb 64                	jmp    c0014d35 <opcodeFault(regs*, void*)+0x393>
c0014cd1:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014cd5:	75 0b                	jne    c0014ce2 <opcodeFault(regs*, void*)+0x340>
c0014cd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cda:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014cdd:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014ce0:	eb 53                	jmp    c0014d35 <opcodeFault(regs*, void*)+0x393>
c0014ce2:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014ce6:	75 0b                	jne    c0014cf3 <opcodeFault(regs*, void*)+0x351>
c0014ce8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ceb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014cee:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014cf1:	eb 42                	jmp    c0014d35 <opcodeFault(regs*, void*)+0x393>
c0014cf3:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014cf7:	75 0b                	jne    c0014d04 <opcodeFault(regs*, void*)+0x362>
c0014cf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cfc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014cff:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014d02:	eb 31                	jmp    c0014d35 <opcodeFault(regs*, void*)+0x393>
c0014d04:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014d08:	75 0b                	jne    c0014d15 <opcodeFault(regs*, void*)+0x373>
c0014d0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d0d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d10:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014d13:	eb 20                	jmp    c0014d35 <opcodeFault(regs*, void*)+0x393>
c0014d15:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014d19:	75 0b                	jne    c0014d26 <opcodeFault(regs*, void*)+0x384>
c0014d1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d1e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d21:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014d24:	eb 0f                	jmp    c0014d35 <opcodeFault(regs*, void*)+0x393>
c0014d26:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014d2a:	75 09                	jne    c0014d35 <opcodeFault(regs*, void*)+0x393>
c0014d2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d2f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d32:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014d35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d38:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d3b:	8d 50 02             	lea    edx,[eax+0x2]
c0014d3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d41:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d44:	e9 6f 02 00 00       	jmp    c0014fb8 <opcodeFault(regs*, void*)+0x616>
c0014d49:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d4c:	8a 00                	mov    al,BYTE PTR [eax]
c0014d4e:	3c 0f                	cmp    al,0xf
c0014d50:	0f 85 8d 01 00 00    	jne    c0014ee3 <opcodeFault(regs*, void*)+0x541>
c0014d56:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d59:	40                   	inc    eax
c0014d5a:	8a 00                	mov    al,BYTE PTR [eax]
c0014d5c:	3c c7                	cmp    al,0xc7
c0014d5e:	0f 85 7f 01 00 00    	jne    c0014ee3 <opcodeFault(regs*, void*)+0x541>
c0014d64:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d6a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d6d:	8d 50 01             	lea    edx,[eax+0x1]
c0014d70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d73:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d76:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014d79:	50                   	push   eax
c0014d7a:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014d7d:	50                   	push   eax
c0014d7e:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014d81:	50                   	push   eax
c0014d82:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014d85:	e8 60 46 00 00       	call   c00193ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014d8a:	83 c4 10             	add    esp,0x10
c0014d8d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014d90:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014d93:	83 f0 01             	xor    eax,0x1
c0014d96:	84 c0                	test   al,al
c0014d98:	0f 84 45 01 00 00    	je     c0014ee3 <opcodeFault(regs*, void*)+0x541>
c0014d9e:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014da1:	3c 01                	cmp    al,0x1
c0014da3:	0f 85 3a 01 00 00    	jne    c0014ee3 <opcodeFault(regs*, void*)+0x541>
c0014da9:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014dac:	83 f0 01             	xor    eax,0x1
c0014daf:	84 c0                	test   al,al
c0014db1:	0f 84 2c 01 00 00    	je     c0014ee3 <opcodeFault(regs*, void*)+0x541>
c0014db7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dba:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014dbd:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014dc0:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014dc7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014dca:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014dcd:	89 c2                	mov    edx,eax
c0014dcf:	b8 00 00 00 00       	mov    eax,0x0
c0014dd4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014dd7:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014dda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ddd:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014de0:	ba 00 00 00 00       	mov    edx,0x0
c0014de5:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014de8:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014deb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dee:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014df1:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014df4:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014dfb:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014dfe:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014e01:	89 c2                	mov    edx,eax
c0014e03:	b8 00 00 00 00       	mov    eax,0x0
c0014e08:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014e0b:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014e0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e11:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014e14:	ba 00 00 00 00       	mov    edx,0x0
c0014e19:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014e1c:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014e1f:	fa                   	cli    
c0014e20:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c0014e25:	40                   	inc    eax
c0014e26:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c0014e2b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014e2e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014e31:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e33:	89 c1                	mov    ecx,eax
c0014e35:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014e38:	89 cb                	mov    ebx,ecx
c0014e3a:	89 d0                	mov    eax,edx
c0014e3c:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014e3f:	89 c6                	mov    esi,eax
c0014e41:	89 f0                	mov    eax,esi
c0014e43:	09 d8                	or     eax,ebx
c0014e45:	85 c0                	test   eax,eax
c0014e47:	75 21                	jne    c0014e6a <opcodeFault(regs*, void*)+0x4c8>
c0014e49:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014e4c:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014e4f:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014e52:	89 01                	mov    DWORD PTR [ecx],eax
c0014e54:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014e57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e5a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e5d:	83 c8 40             	or     eax,0x40
c0014e60:	89 c2                	mov    edx,eax
c0014e62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e65:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014e68:	eb 3e                	jmp    c0014ea8 <opcodeFault(regs*, void*)+0x506>
c0014e6a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014e6d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014e70:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e72:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014e75:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014e78:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014e7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e7e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014e81:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014e84:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014e87:	89 d0                	mov    eax,edx
c0014e89:	31 d2                	xor    edx,edx
c0014e8b:	89 c3                	mov    ebx,eax
c0014e8d:	89 d6                	mov    esi,edx
c0014e8f:	89 da                	mov    edx,ebx
c0014e91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e94:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014e97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e9a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e9d:	83 e0 bf             	and    eax,0xffffffbf
c0014ea0:	89 c2                	mov    edx,eax
c0014ea2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ea5:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014ea8:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c0014ead:	48                   	dec    eax
c0014eae:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c0014eb3:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c0014eb8:	85 c0                	test   eax,eax
c0014eba:	75 01                	jne    c0014ebd <opcodeFault(regs*, void*)+0x51b>
c0014ebc:	fb                   	sti    
c0014ebd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ec0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ec3:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014ec6:	01 c2                	add    edx,eax
c0014ec8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ecb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ece:	83 ec 0c             	sub    esp,0xc
c0014ed1:	68 a6 aa 02 c0       	push   0xc002aaa6
c0014ed6:	e8 96 d6 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0014edb:	83 c4 10             	add    esp,0x10
c0014ede:	e9 d5 00 00 00       	jmp    c0014fb8 <opcodeFault(regs*, void*)+0x616>
c0014ee3:	83 ec 0c             	sub    esp,0xc
c0014ee6:	68 b9 aa 02 c0       	push   0xc002aab9
c0014eeb:	e8 81 d6 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0014ef0:	83 c4 10             	add    esp,0x10
c0014ef3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014ef9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014efc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014eff:	c1 e0 04             	shl    eax,0x4
c0014f02:	01 d0                	add    eax,edx
c0014f04:	83 c0 03             	add    eax,0x3
c0014f07:	8a 00                	mov    al,BYTE PTR [eax]
c0014f09:	0f b6 d8             	movzx  ebx,al
c0014f0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f0f:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014f12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f15:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f18:	c1 e0 04             	shl    eax,0x4
c0014f1b:	01 d0                	add    eax,edx
c0014f1d:	83 c0 02             	add    eax,0x2
c0014f20:	8a 00                	mov    al,BYTE PTR [eax]
c0014f22:	0f b6 c8             	movzx  ecx,al
c0014f25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f28:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014f2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f2e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f31:	c1 e0 04             	shl    eax,0x4
c0014f34:	01 d0                	add    eax,edx
c0014f36:	40                   	inc    eax
c0014f37:	8a 00                	mov    al,BYTE PTR [eax]
c0014f39:	0f b6 d0             	movzx  edx,al
c0014f3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f3f:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014f42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f45:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f48:	c1 e0 04             	shl    eax,0x4
c0014f4b:	01 f0                	add    eax,esi
c0014f4d:	8a 00                	mov    al,BYTE PTR [eax]
c0014f4f:	0f b6 c0             	movzx  eax,al
c0014f52:	83 ec 0c             	sub    esp,0xc
c0014f55:	53                   	push   ebx
c0014f56:	51                   	push   ecx
c0014f57:	52                   	push   edx
c0014f58:	50                   	push   eax
c0014f59:	68 cc aa 02 c0       	push   0xc002aacc
c0014f5e:	e8 0e d6 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0014f63:	83 c4 20             	add    esp,0x20
c0014f66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f69:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f6c:	83 c0 03             	add    eax,0x3
c0014f6f:	8a 00                	mov    al,BYTE PTR [eax]
c0014f71:	0f b6 d8             	movzx  ebx,al
c0014f74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f77:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f7a:	83 c0 02             	add    eax,0x2
c0014f7d:	8a 00                	mov    al,BYTE PTR [eax]
c0014f7f:	0f b6 c8             	movzx  ecx,al
c0014f82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f85:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f88:	40                   	inc    eax
c0014f89:	8a 00                	mov    al,BYTE PTR [eax]
c0014f8b:	0f b6 d0             	movzx  edx,al
c0014f8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f91:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f94:	8a 00                	mov    al,BYTE PTR [eax]
c0014f96:	0f b6 c0             	movzx  eax,al
c0014f99:	83 ec 0c             	sub    esp,0xc
c0014f9c:	53                   	push   ebx
c0014f9d:	51                   	push   ecx
c0014f9e:	52                   	push   edx
c0014f9f:	50                   	push   eax
c0014fa0:	68 f4 aa 02 c0       	push   0xc002aaf4
c0014fa5:	e8 c7 d5 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0014faa:	83 c4 20             	add    esp,0x20
c0014fad:	83 ec 0c             	sub    esp,0xc
c0014fb0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014fb3:	e8 54 f4 ff ff       	call   c001440c <displayDebugInfo(regs*)>
c0014fb8:	8d 65 f8             	lea    esp,[ebp-0x8]
c0014fbb:	5b                   	pop    ebx
c0014fbc:	5e                   	pop    esi
c0014fbd:	5d                   	pop    ebp
c0014fbe:	c3                   	ret    

c0014fbf <displayProgramFault(char const*)>:
c0014fbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014fc4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014fc7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014fcd:	85 c0                	test   eax,eax
c0014fcf:	74 15                	je     c0014fe6 <displayProgramFault(char const*)+0x27>
c0014fd1:	83 ec 0c             	sub    esp,0xc
c0014fd4:	6a 04                	push   0x4
c0014fd6:	6a 0f                	push   0xf
c0014fd8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014fdc:	50                   	push   eax
c0014fdd:	e8 fa b4 ff ff       	call   c00104dc <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014fe2:	83 c4 1c             	add    esp,0x1c
c0014fe5:	c3                   	ret    
c0014fe6:	c3                   	ret    

c0014fe7 <setupInterruptController()>:
c0014fe7:	55                   	push   ebp
c0014fe8:	89 e5                	mov    ebp,esp
c0014fea:	53                   	push   ebx
c0014feb:	83 ec 24             	sub    esp,0x24
c0014fee:	b8 00 00 00 00       	mov    eax,0x0
c0014ff3:	85 c0                	test   eax,eax
c0014ff5:	0f 95 c0             	setne  al
c0014ff8:	84 c0                	test   al,al
c0014ffa:	74 5b                	je     c0015057 <setupInterruptController()+0x70>
c0014ffc:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015003:	83 ec 0c             	sub    esp,0xc
c0015006:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015009:	e8 8b a5 ff ff       	call   c000f599 <malloc>
c001500e:	83 c4 10             	add    esp,0x10
c0015011:	89 c3                	mov    ebx,eax
c0015013:	83 ec 0c             	sub    esp,0xc
c0015016:	53                   	push   ebx
c0015017:	e8 fc 04 01 00       	call   c0025518 <APIC::APIC()>
c001501c:	83 c4 10             	add    esp,0x10
c001501f:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015022:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015025:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015028:	8b 00                	mov    eax,DWORD PTR [eax]
c001502a:	83 c0 08             	add    eax,0x8
c001502d:	8b 00                	mov    eax,DWORD PTR [eax]
c001502f:	6a 00                	push   0x0
c0015031:	6a 00                	push   0x0
c0015033:	6a 00                	push   0x0
c0015035:	52                   	push   edx
c0015036:	ff d0                	call   eax
c0015038:	83 c4 10             	add    esp,0x10
c001503b:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c0015040:	83 ec 08             	sub    esp,0x8
c0015043:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015046:	50                   	push   eax
c0015047:	e8 5e e9 ff ff       	call   c00139aa <Device::addChild(Device*)>
c001504c:	83 c4 10             	add    esp,0x10
c001504f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015052:	e9 79 03 00 00       	jmp    c00153d0 <setupInterruptController()+0x3e9>
c0015057:	a0 e0 ff 02 c0       	mov    al,ds:0xc002ffe0
c001505c:	84 c0                	test   al,al
c001505e:	75 14                	jne    c0015074 <setupInterruptController()+0x8d>
c0015060:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c0015065:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001506b:	83 e2 fe             	and    edx,0xfffffffe
c001506e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015074:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c0015079:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001507f:	83 e0 01             	and    eax,0x1
c0015082:	84 c0                	test   al,al
c0015084:	0f 95 c0             	setne  al
c0015087:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001508a:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015091:	83 ec 0c             	sub    esp,0xc
c0015094:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015097:	e8 fd a4 ff ff       	call   c000f599 <malloc>
c001509c:	83 c4 10             	add    esp,0x10
c001509f:	89 c3                	mov    ebx,eax
c00150a1:	83 ec 0c             	sub    esp,0xc
c00150a4:	53                   	push   ebx
c00150a5:	e8 c6 09 01 00       	call   c0025a70 <PIC::PIC()>
c00150aa:	83 c4 10             	add    esp,0x10
c00150ad:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00150b0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00150b3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00150b8:	83 c0 08             	add    eax,0x8
c00150bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00150bd:	6a 00                	push   0x0
c00150bf:	6a 00                	push   0x0
c00150c1:	6a 00                	push   0x0
c00150c3:	52                   	push   edx
c00150c4:	ff d0                	call   eax
c00150c6:	83 c4 10             	add    esp,0x10
c00150c9:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00150cd:	74 73                	je     c0015142 <setupInterruptController()+0x15b>
c00150cf:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00150d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00150d7:	83 c0 0c             	add    eax,0xc
c00150da:	8b 00                	mov    eax,DWORD PTR [eax]
c00150dc:	6a 00                	push   0x0
c00150de:	6a 00                	push   0x0
c00150e0:	6a 00                	push   0x0
c00150e2:	52                   	push   edx
c00150e3:	ff d0                	call   eax
c00150e5:	83 c4 10             	add    esp,0x10
c00150e8:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00150ec:	74 15                	je     c0015103 <setupInterruptController()+0x11c>
c00150ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00150f3:	83 c0 04             	add    eax,0x4
c00150f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00150f8:	83 ec 0c             	sub    esp,0xc
c00150fb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150fe:	ff d0                	call   eax
c0015100:	83 c4 10             	add    esp,0x10
c0015103:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c001510a:	83 ec 0c             	sub    esp,0xc
c001510d:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015110:	e8 84 a4 ff ff       	call   c000f599 <malloc>
c0015115:	83 c4 10             	add    esp,0x10
c0015118:	89 c3                	mov    ebx,eax
c001511a:	83 ec 0c             	sub    esp,0xc
c001511d:	53                   	push   ebx
c001511e:	e8 f5 03 01 00       	call   c0025518 <APIC::APIC()>
c0015123:	83 c4 10             	add    esp,0x10
c0015126:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015129:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001512c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001512f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015131:	83 c0 08             	add    eax,0x8
c0015134:	8b 00                	mov    eax,DWORD PTR [eax]
c0015136:	6a 00                	push   0x0
c0015138:	6a 00                	push   0x0
c001513a:	6a 00                	push   0x0
c001513c:	52                   	push   edx
c001513d:	ff d0                	call   eax
c001513f:	83 c4 10             	add    esp,0x10
c0015142:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c0015147:	83 ec 08             	sub    esp,0x8
c001514a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001514d:	50                   	push   eax
c001514e:	e8 57 e8 ff ff       	call   c00139aa <Device::addChild(Device*)>
c0015153:	83 c4 10             	add    esp,0x10
c0015156:	c7 05 e8 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d7e8,0x0
c0015160:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015163:	8b 00                	mov    eax,DWORD PTR [eax]
c0015165:	83 c0 24             	add    eax,0x24
c0015168:	8b 00                	mov    eax,DWORD PTR [eax]
c001516a:	6a 00                	push   0x0
c001516c:	68 83 49 01 c0       	push   0xc0014983
c0015171:	6a 00                	push   0x0
c0015173:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015176:	ff d0                	call   eax
c0015178:	83 c4 10             	add    esp,0x10
c001517b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001517e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015180:	83 c0 24             	add    eax,0x24
c0015183:	8b 00                	mov    eax,DWORD PTR [eax]
c0015185:	6a 00                	push   0x0
c0015187:	68 83 49 01 c0       	push   0xc0014983
c001518c:	6a 01                	push   0x1
c001518e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015191:	ff d0                	call   eax
c0015193:	83 c4 10             	add    esp,0x10
c0015196:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015199:	8b 00                	mov    eax,DWORD PTR [eax]
c001519b:	83 c0 24             	add    eax,0x24
c001519e:	8b 00                	mov    eax,DWORD PTR [eax]
c00151a0:	6a 00                	push   0x0
c00151a2:	68 69 42 01 c0       	push   0xc0014269
c00151a7:	6a 02                	push   0x2
c00151a9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151ac:	ff d0                	call   eax
c00151ae:	83 c4 10             	add    esp,0x10
c00151b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00151b6:	83 c0 24             	add    eax,0x24
c00151b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00151bb:	6a 00                	push   0x0
c00151bd:	68 83 49 01 c0       	push   0xc0014983
c00151c2:	6a 03                	push   0x3
c00151c4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151c7:	ff d0                	call   eax
c00151c9:	83 c4 10             	add    esp,0x10
c00151cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00151d1:	83 c0 24             	add    eax,0x24
c00151d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00151d6:	6a 00                	push   0x0
c00151d8:	68 83 49 01 c0       	push   0xc0014983
c00151dd:	6a 04                	push   0x4
c00151df:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151e2:	ff d0                	call   eax
c00151e4:	83 c4 10             	add    esp,0x10
c00151e7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00151ec:	83 c0 24             	add    eax,0x24
c00151ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00151f1:	6a 00                	push   0x0
c00151f3:	68 83 49 01 c0       	push   0xc0014983
c00151f8:	6a 05                	push   0x5
c00151fa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151fd:	ff d0                	call   eax
c00151ff:	83 c4 10             	add    esp,0x10
c0015202:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015205:	8b 00                	mov    eax,DWORD PTR [eax]
c0015207:	83 c0 24             	add    eax,0x24
c001520a:	8b 00                	mov    eax,DWORD PTR [eax]
c001520c:	6a 00                	push   0x0
c001520e:	68 a2 49 01 c0       	push   0xc00149a2
c0015213:	6a 06                	push   0x6
c0015215:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015218:	ff d0                	call   eax
c001521a:	83 c4 10             	add    esp,0x10
c001521d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015220:	8b 00                	mov    eax,DWORD PTR [eax]
c0015222:	83 c0 24             	add    eax,0x24
c0015225:	8b 00                	mov    eax,DWORD PTR [eax]
c0015227:	6a 00                	push   0x0
c0015229:	68 9b 48 01 c0       	push   0xc001489b
c001522e:	6a 07                	push   0x7
c0015230:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015233:	ff d0                	call   eax
c0015235:	83 c4 10             	add    esp,0x10
c0015238:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001523b:	8b 00                	mov    eax,DWORD PTR [eax]
c001523d:	83 c0 24             	add    eax,0x24
c0015240:	8b 00                	mov    eax,DWORD PTR [eax]
c0015242:	6a 00                	push   0x0
c0015244:	68 84 40 01 c0       	push   0xc0014084
c0015249:	6a 08                	push   0x8
c001524b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001524e:	ff d0                	call   eax
c0015250:	83 c4 10             	add    esp,0x10
c0015253:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015256:	8b 00                	mov    eax,DWORD PTR [eax]
c0015258:	83 c0 24             	add    eax,0x24
c001525b:	8b 00                	mov    eax,DWORD PTR [eax]
c001525d:	6a 00                	push   0x0
c001525f:	68 83 49 01 c0       	push   0xc0014983
c0015264:	6a 09                	push   0x9
c0015266:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015269:	ff d0                	call   eax
c001526b:	83 c4 10             	add    esp,0x10
c001526e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015271:	8b 00                	mov    eax,DWORD PTR [eax]
c0015273:	83 c0 24             	add    eax,0x24
c0015276:	8b 00                	mov    eax,DWORD PTR [eax]
c0015278:	6a 00                	push   0x0
c001527a:	68 83 49 01 c0       	push   0xc0014983
c001527f:	6a 0a                	push   0xa
c0015281:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015284:	ff d0                	call   eax
c0015286:	83 c4 10             	add    esp,0x10
c0015289:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001528c:	8b 00                	mov    eax,DWORD PTR [eax]
c001528e:	83 c0 24             	add    eax,0x24
c0015291:	8b 00                	mov    eax,DWORD PTR [eax]
c0015293:	6a 00                	push   0x0
c0015295:	68 83 49 01 c0       	push   0xc0014983
c001529a:	6a 0b                	push   0xb
c001529c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001529f:	ff d0                	call   eax
c00152a1:	83 c4 10             	add    esp,0x10
c00152a4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00152a9:	83 c0 24             	add    eax,0x24
c00152ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ae:	6a 00                	push   0x0
c00152b0:	68 83 49 01 c0       	push   0xc0014983
c00152b5:	6a 0c                	push   0xc
c00152b7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152ba:	ff d0                	call   eax
c00152bc:	83 c4 10             	add    esp,0x10
c00152bf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00152c4:	83 c0 24             	add    eax,0x24
c00152c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00152c9:	6a 00                	push   0x0
c00152cb:	68 0e 49 01 c0       	push   0xc001490e
c00152d0:	6a 0d                	push   0xd
c00152d2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152d5:	ff d0                	call   eax
c00152d7:	83 c4 10             	add    esp,0x10
c00152da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00152df:	83 c0 24             	add    eax,0x24
c00152e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00152e4:	6a 00                	push   0x0
c00152e6:	68 47 49 01 c0       	push   0xc0014947
c00152eb:	6a 0e                	push   0xe
c00152ed:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152f0:	ff d0                	call   eax
c00152f2:	83 c4 10             	add    esp,0x10
c00152f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00152fa:	83 c0 24             	add    eax,0x24
c00152fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ff:	6a 00                	push   0x0
c0015301:	68 83 49 01 c0       	push   0xc0014983
c0015306:	6a 0f                	push   0xf
c0015308:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001530b:	ff d0                	call   eax
c001530d:	83 c4 10             	add    esp,0x10
c0015310:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015313:	8b 00                	mov    eax,DWORD PTR [eax]
c0015315:	83 c0 24             	add    eax,0x24
c0015318:	8b 00                	mov    eax,DWORD PTR [eax]
c001531a:	6a 00                	push   0x0
c001531c:	68 83 49 01 c0       	push   0xc0014983
c0015321:	6a 10                	push   0x10
c0015323:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015326:	ff d0                	call   eax
c0015328:	83 c4 10             	add    esp,0x10
c001532b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001532e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015330:	83 c0 24             	add    eax,0x24
c0015333:	8b 00                	mov    eax,DWORD PTR [eax]
c0015335:	6a 00                	push   0x0
c0015337:	68 83 49 01 c0       	push   0xc0014983
c001533c:	6a 11                	push   0x11
c001533e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015341:	ff d0                	call   eax
c0015343:	83 c4 10             	add    esp,0x10
c0015346:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015349:	8b 00                	mov    eax,DWORD PTR [eax]
c001534b:	83 c0 24             	add    eax,0x24
c001534e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015350:	6a 00                	push   0x0
c0015352:	68 83 49 01 c0       	push   0xc0014983
c0015357:	6a 12                	push   0x12
c0015359:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001535c:	ff d0                	call   eax
c001535e:	83 c4 10             	add    esp,0x10
c0015361:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015364:	8b 00                	mov    eax,DWORD PTR [eax]
c0015366:	83 c0 24             	add    eax,0x24
c0015369:	8b 00                	mov    eax,DWORD PTR [eax]
c001536b:	6a 00                	push   0x0
c001536d:	68 83 49 01 c0       	push   0xc0014983
c0015372:	6a 13                	push   0x13
c0015374:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015377:	ff d0                	call   eax
c0015379:	83 c4 10             	add    esp,0x10
c001537c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001537f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015381:	83 c0 24             	add    eax,0x24
c0015384:	8b 00                	mov    eax,DWORD PTR [eax]
c0015386:	6a 00                	push   0x0
c0015388:	68 83 49 01 c0       	push   0xc0014983
c001538d:	6a 14                	push   0x14
c001538f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015392:	ff d0                	call   eax
c0015394:	83 c4 10             	add    esp,0x10
c0015397:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001539a:	8b 00                	mov    eax,DWORD PTR [eax]
c001539c:	83 c0 24             	add    eax,0x24
c001539f:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a1:	6a 00                	push   0x0
c00153a3:	68 83 49 01 c0       	push   0xc0014983
c00153a8:	6a 1e                	push   0x1e
c00153aa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153ad:	ff d0                	call   eax
c00153af:	83 c4 10             	add    esp,0x10
c00153b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00153b7:	83 c0 24             	add    eax,0x24
c00153ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00153bc:	6a 00                	push   0x0
c00153be:	68 c0 be 01 c0       	push   0xc001bec0
c00153c3:	6a 60                	push   0x60
c00153c5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153c8:	ff d0                	call   eax
c00153ca:	83 c4 10             	add    esp,0x10
c00153cd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00153d3:	c9                   	leave  
c00153d4:	c3                   	ret    
c00153d5:	90                   	nop

c00153d6 <InterruptController::convertLegacyIRQNumber(int)>:
c00153d6:	55                   	push   ebp
c00153d7:	89 e5                	mov    ebp,esp
c00153d9:	83 ec 08             	sub    esp,0x8
c00153dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153df:	83 ec 0c             	sub    esp,0xc
c00153e2:	50                   	push   eax
c00153e3:	e8 c2 e8 ff ff       	call   c0013caa <Device::getName()>
c00153e8:	83 c4 10             	add    esp,0x10
c00153eb:	8a 00                	mov    al,BYTE PTR [eax]
c00153ed:	3c 41                	cmp    al,0x41
c00153ef:	0f 94 c0             	sete   al
c00153f2:	84 c0                	test   al,al
c00153f4:	74 28                	je     c001541e <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00153f6:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00153fa:	7f 12                	jg     c001540e <InterruptController::convertLegacyIRQNumber(int)+0x38>
c00153fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00153ff:	05 c0 c8 02 c0       	add    eax,0xc002c8c0
c0015404:	8a 00                	mov    al,BYTE PTR [eax]
c0015406:	0f b6 c0             	movzx  eax,al
c0015409:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001540c:	eb 10                	jmp    c001541e <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001540e:	83 ec 0c             	sub    esp,0xc
c0015411:	68 1c ab 02 c0       	push   0xc002ab1c
c0015416:	e8 b6 48 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c001541b:	83 c4 10             	add    esp,0x10
c001541e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015421:	c9                   	leave  
c0015422:	c3                   	ret    
c0015423:	90                   	nop

c0015424 <startGUI(void*)>:
c0015424:	55                   	push   ebp
c0015425:	89 e5                	mov    ebp,esp
c0015427:	53                   	push   ebx
c0015428:	83 ec 04             	sub    esp,0x4
c001542b:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c0015430:	48                   	dec    eax
c0015431:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c0015436:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c001543b:	85 c0                	test   eax,eax
c001543d:	75 01                	jne    c0015440 <startGUI(void*)+0x1c>
c001543f:	fb                   	sti    
c0015440:	8b 1d 68 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d668
c0015446:	83 ec 08             	sub    esp,0x8
c0015449:	6a 01                	push   0x1
c001544b:	68 9c ab 02 c0       	push   0xc002ab9c
c0015450:	e8 46 7a 00 00       	call   c001ce9b <Thr::loadDLL(char const*, bool)>
c0015455:	83 c4 10             	add    esp,0x10
c0015458:	83 ec 08             	sub    esp,0x8
c001545b:	53                   	push   ebx
c001545c:	50                   	push   eax
c001545d:	e8 64 7c 00 00       	call   c001d0c6 <Thr::executeDLL(unsigned long, void*)>
c0015462:	83 c4 10             	add    esp,0x10
c0015465:	8b 1d 68 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d668
c001546b:	83 ec 08             	sub    esp,0x8
c001546e:	6a 01                	push   0x1
c0015470:	68 b6 ab 02 c0       	push   0xc002abb6
c0015475:	e8 21 7a 00 00       	call   c001ce9b <Thr::loadDLL(char const*, bool)>
c001547a:	83 c4 10             	add    esp,0x10
c001547d:	83 ec 08             	sub    esp,0x8
c0015480:	53                   	push   ebx
c0015481:	50                   	push   eax
c0015482:	e8 3f 7c 00 00       	call   c001d0c6 <Thr::executeDLL(unsigned long, void*)>
c0015487:	83 c4 10             	add    esp,0x10
c001548a:	90                   	nop
c001548b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001548e:	c9                   	leave  
c001548f:	c3                   	ret    

c0015490 <startGUIVESA(void*)>:
c0015490:	55                   	push   ebp
c0015491:	89 e5                	mov    ebp,esp
c0015493:	53                   	push   ebx
c0015494:	83 ec 04             	sub    esp,0x4
c0015497:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c001549c:	48                   	dec    eax
c001549d:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c00154a2:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c00154a7:	85 c0                	test   eax,eax
c00154a9:	75 01                	jne    c00154ac <startGUIVESA(void*)+0x1c>
c00154ab:	fb                   	sti    
c00154ac:	8b 1d 68 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d668
c00154b2:	83 ec 08             	sub    esp,0x8
c00154b5:	6a 01                	push   0x1
c00154b7:	68 d0 ab 02 c0       	push   0xc002abd0
c00154bc:	e8 da 79 00 00       	call   c001ce9b <Thr::loadDLL(char const*, bool)>
c00154c1:	83 c4 10             	add    esp,0x10
c00154c4:	83 ec 08             	sub    esp,0x8
c00154c7:	53                   	push   ebx
c00154c8:	50                   	push   eax
c00154c9:	e8 f8 7b 00 00       	call   c001d0c6 <Thr::executeDLL(unsigned long, void*)>
c00154ce:	83 c4 10             	add    esp,0x10
c00154d1:	8b 1d 68 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d668
c00154d7:	83 ec 08             	sub    esp,0x8
c00154da:	6a 01                	push   0x1
c00154dc:	68 b6 ab 02 c0       	push   0xc002abb6
c00154e1:	e8 b5 79 00 00       	call   c001ce9b <Thr::loadDLL(char const*, bool)>
c00154e6:	83 c4 10             	add    esp,0x10
c00154e9:	83 ec 08             	sub    esp,0x8
c00154ec:	53                   	push   ebx
c00154ed:	50                   	push   eax
c00154ee:	e8 d3 7b 00 00       	call   c001d0c6 <Thr::executeDLL(unsigned long, void*)>
c00154f3:	83 c4 10             	add    esp,0x10
c00154f6:	90                   	nop
c00154f7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00154fa:	c9                   	leave  
c00154fb:	c3                   	ret    

c00154fc <sendKeyToTerminal(unsigned char)>:
c00154fc:	55                   	push   ebp
c00154fd:	89 e5                	mov    ebp,esp
c00154ff:	83 ec 28             	sub    esp,0x28
c0015502:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015505:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015508:	a1 24 d7 02 c0       	mov    eax,ds:0xc002d724
c001550d:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015511:	83 ec 08             	sub    esp,0x8
c0015514:	52                   	push   edx
c0015515:	50                   	push   eax
c0015516:	e8 67 b4 ff ff       	call   c0010982 <VgaText::receiveKey(unsigned char)>
c001551b:	83 c4 10             	add    esp,0x10
c001551e:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015522:	0f 85 8f 00 00 00    	jne    c00155b7 <sendKeyToTerminal(unsigned char)+0xbb>
c0015528:	fa                   	cli    
c0015529:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c001552e:	40                   	inc    eax
c001552f:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c0015534:	a1 84 0b 03 c0       	mov    eax,ds:0xc0030b84
c0015539:	40                   	inc    eax
c001553a:	a3 84 0b 03 c0       	mov    ds:0xc0030b84,eax
c001553f:	a1 00 d8 02 c0       	mov    eax,ds:0xc002d800
c0015544:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015547:	c7 05 00 d8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d800,0x0
c0015551:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015555:	74 1f                	je     c0015576 <sendKeyToTerminal(unsigned char)+0x7a>
c0015557:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001555a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001555d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015560:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015563:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015566:	83 ec 0c             	sub    esp,0xc
c0015569:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001556c:	e8 6d 87 00 00       	call   c001dcde <unblockTask(ThreadControlBlock*)>
c0015571:	83 c4 10             	add    esp,0x10
c0015574:	eb db                	jmp    c0015551 <sendKeyToTerminal(unsigned char)+0x55>
c0015576:	a1 84 0b 03 c0       	mov    eax,ds:0xc0030b84
c001557b:	48                   	dec    eax
c001557c:	a3 84 0b 03 c0       	mov    ds:0xc0030b84,eax
c0015581:	a1 84 0b 03 c0       	mov    eax,ds:0xc0030b84
c0015586:	85 c0                	test   eax,eax
c0015588:	75 18                	jne    c00155a2 <sendKeyToTerminal(unsigned char)+0xa6>
c001558a:	a1 80 0b 03 c0       	mov    eax,ds:0xc0030b80
c001558f:	85 c0                	test   eax,eax
c0015591:	74 0f                	je     c00155a2 <sendKeyToTerminal(unsigned char)+0xa6>
c0015593:	c7 05 80 0b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030b80,0x0
c001559d:	e8 b9 82 00 00       	call   c001d85b <schedule()>
c00155a2:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c00155a7:	48                   	dec    eax
c00155a8:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c00155ad:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c00155b2:	85 c0                	test   eax,eax
c00155b4:	75 01                	jne    c00155b7 <sendKeyToTerminal(unsigned char)+0xbb>
c00155b6:	fb                   	sti    
c00155b7:	90                   	nop
c00155b8:	c9                   	leave  
c00155b9:	c3                   	ret    

c00155ba <sendKeyboardToken(KeyboardToken)>:
c00155ba:	55                   	push   ebp
c00155bb:	89 e5                	mov    ebp,esp
c00155bd:	83 ec 18             	sub    esp,0x18
c00155c0:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00155c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c6:	0f b7 c0             	movzx  eax,ax
c00155c9:	83 f2 01             	xor    edx,0x1
c00155cc:	88 90 20 d8 02 c0    	mov    BYTE PTR [eax-0x3ffd27e0],dl
c00155d2:	a1 08 d8 02 c0       	mov    eax,ds:0xc002d808
c00155d7:	85 c0                	test   eax,eax
c00155d9:	74 24                	je     c00155ff <sendKeyboardToken(KeyboardToken)+0x45>
c00155db:	8b 0d 08 d8 02 c0    	mov    ecx,DWORD PTR ds:0xc002d808
c00155e1:	83 ec 04             	sub    esp,0x4
c00155e4:	68 20 d8 02 c0       	push   0xc002d820
c00155e9:	83 ec 08             	sub    esp,0x8
c00155ec:	89 e2                	mov    edx,esp
c00155ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f1:	89 02                	mov    DWORD PTR [edx],eax
c00155f3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00155f6:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00155fa:	ff d1                	call   ecx
c00155fc:	83 c4 10             	add    esp,0x10
c00155ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015602:	66 3d 03 02          	cmp    ax,0x203
c0015606:	75 07                	jne    c001560f <sendKeyboardToken(KeyboardToken)+0x55>
c0015608:	a0 20 d9 02 c0       	mov    al,ds:0xc002d920
c001560d:	84 c0                	test   al,al
c001560f:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015613:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015616:	a0 28 dc 02 c0       	mov    al,ds:0xc002dc28
c001561b:	38 c2                	cmp    dl,al
c001561d:	74 1c                	je     c001563b <sendKeyboardToken(KeyboardToken)+0x81>
c001561f:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015622:	a2 28 dc 02 c0       	mov    ds:0xc002dc28,al
c0015627:	a0 28 dc 02 c0       	mov    al,ds:0xc002dc28
c001562c:	0f b6 c0             	movzx  eax,al
c001562f:	83 ec 0c             	sub    esp,0xc
c0015632:	50                   	push   eax
c0015633:	e8 8c a9 ff ff       	call   c000ffc4 <setTerminalScrollLock(bool)>
c0015638:	83 c4 10             	add    esp,0x10
c001563b:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001563e:	84 c0                	test   al,al
c0015640:	0f 84 ae 00 00 00    	je     c00156f4 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015646:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015649:	66 3d 10 03          	cmp    ax,0x310
c001564d:	75 06                	jne    c0015655 <sendKeyboardToken(KeyboardToken)+0x9b>
c001564f:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015655:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015658:	66 3d 11 03          	cmp    ax,0x311
c001565c:	75 06                	jne    c0015664 <sendKeyboardToken(KeyboardToken)+0xaa>
c001565e:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015664:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015667:	66 3d 12 03          	cmp    ax,0x312
c001566b:	75 06                	jne    c0015673 <sendKeyboardToken(KeyboardToken)+0xb9>
c001566d:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015673:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015676:	66 3d 13 03          	cmp    ax,0x313
c001567a:	75 06                	jne    c0015682 <sendKeyboardToken(KeyboardToken)+0xc8>
c001567c:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015682:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015685:	66 3d 14 03          	cmp    ax,0x314
c0015689:	75 06                	jne    c0015691 <sendKeyboardToken(KeyboardToken)+0xd7>
c001568b:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015691:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015694:	66 3d 15 03          	cmp    ax,0x315
c0015698:	75 06                	jne    c00156a0 <sendKeyboardToken(KeyboardToken)+0xe6>
c001569a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00156a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a3:	66 3d 16 03          	cmp    ax,0x316
c00156a7:	75 06                	jne    c00156af <sendKeyboardToken(KeyboardToken)+0xf5>
c00156a9:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00156af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b2:	66 3d 17 03          	cmp    ax,0x317
c00156b6:	75 06                	jne    c00156be <sendKeyboardToken(KeyboardToken)+0x104>
c00156b8:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00156be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c1:	66 3d 18 03          	cmp    ax,0x318
c00156c5:	75 06                	jne    c00156cd <sendKeyboardToken(KeyboardToken)+0x113>
c00156c7:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00156cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d0:	66 3d 19 03          	cmp    ax,0x319
c00156d4:	75 06                	jne    c00156dc <sendKeyboardToken(KeyboardToken)+0x122>
c00156d6:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00156dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156df:	66 3d 1a 03          	cmp    ax,0x31a
c00156e3:	0f 85 c9 00 00 00    	jne    c00157b2 <sendKeyboardToken(KeyboardToken)+0x1f8>
c00156e9:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00156ef:	e9 be 00 00 00       	jmp    c00157b2 <sendKeyboardToken(KeyboardToken)+0x1f8>
c00156f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f7:	66 3d 10 03          	cmp    ax,0x310
c00156fb:	75 0a                	jne    c0015707 <sendKeyboardToken(KeyboardToken)+0x14d>
c00156fd:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015703:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015707:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001570a:	66 3d 11 03          	cmp    ax,0x311
c001570e:	75 0a                	jne    c001571a <sendKeyboardToken(KeyboardToken)+0x160>
c0015710:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015716:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001571a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001571d:	66 3d 12 03          	cmp    ax,0x312
c0015721:	75 0a                	jne    c001572d <sendKeyboardToken(KeyboardToken)+0x173>
c0015723:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015729:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001572d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015730:	66 3d 13 03          	cmp    ax,0x313
c0015734:	75 0a                	jne    c0015740 <sendKeyboardToken(KeyboardToken)+0x186>
c0015736:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001573c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015740:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015743:	66 3d 14 03          	cmp    ax,0x314
c0015747:	75 0a                	jne    c0015753 <sendKeyboardToken(KeyboardToken)+0x199>
c0015749:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001574f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015753:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015756:	66 3d 15 03          	cmp    ax,0x315
c001575a:	75 0a                	jne    c0015766 <sendKeyboardToken(KeyboardToken)+0x1ac>
c001575c:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015762:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015766:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015769:	66 3d 16 03          	cmp    ax,0x316
c001576d:	75 0a                	jne    c0015779 <sendKeyboardToken(KeyboardToken)+0x1bf>
c001576f:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015775:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015779:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001577c:	66 3d 17 03          	cmp    ax,0x317
c0015780:	75 0a                	jne    c001578c <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015782:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015788:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001578c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001578f:	66 3d 18 03          	cmp    ax,0x318
c0015793:	75 0a                	jne    c001579f <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015795:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001579b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001579f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a2:	66 3d 19 03          	cmp    ax,0x319
c00157a6:	75 0a                	jne    c00157b2 <sendKeyboardToken(KeyboardToken)+0x1f8>
c00157a8:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00157ae:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00157b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b5:	66 3d 00 02          	cmp    ax,0x200
c00157b9:	75 2c                	jne    c00157e7 <sendKeyboardToken(KeyboardToken)+0x22d>
c00157bb:	a0 20 dc 02 c0       	mov    al,ds:0xc002dc20
c00157c0:	83 f0 01             	xor    eax,0x1
c00157c3:	84 c0                	test   al,al
c00157c5:	74 20                	je     c00157e7 <sendKeyboardToken(KeyboardToken)+0x22d>
c00157c7:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c00157cc:	6a 01                	push   0x1
c00157ce:	6a 00                	push   0x0
c00157d0:	68 24 54 01 c0       	push   0xc0015424
c00157d5:	50                   	push   eax
c00157d6:	e8 5b 7e 00 00       	call   c001d636 <Process::createThread(void (*)(void*), void*, int)>
c00157db:	83 c4 10             	add    esp,0x10
c00157de:	c6 05 20 dc 02 c0 01 	mov    BYTE PTR ds:0xc002dc20,0x1
c00157e5:	eb 33                	jmp    c001581a <sendKeyboardToken(KeyboardToken)+0x260>
c00157e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ea:	66 3d 01 02          	cmp    ax,0x201
c00157ee:	75 2a                	jne    c001581a <sendKeyboardToken(KeyboardToken)+0x260>
c00157f0:	a0 20 dc 02 c0       	mov    al,ds:0xc002dc20
c00157f5:	83 f0 01             	xor    eax,0x1
c00157f8:	84 c0                	test   al,al
c00157fa:	74 1e                	je     c001581a <sendKeyboardToken(KeyboardToken)+0x260>
c00157fc:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0015801:	6a 01                	push   0x1
c0015803:	6a 00                	push   0x0
c0015805:	68 90 54 01 c0       	push   0xc0015490
c001580a:	50                   	push   eax
c001580b:	e8 26 7e 00 00       	call   c001d636 <Process::createThread(void (*)(void*), void*, int)>
c0015810:	83 c4 10             	add    esp,0x10
c0015813:	c6 05 20 dc 02 c0 01 	mov    BYTE PTR ds:0xc002dc20,0x1
c001581a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001581d:	66 3d 1d 03          	cmp    ax,0x31d
c0015821:	75 06                	jne    c0015829 <sendKeyboardToken(KeyboardToken)+0x26f>
c0015823:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015829:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001582c:	66 3d 1c 03          	cmp    ax,0x31c
c0015830:	75 06                	jne    c0015838 <sendKeyboardToken(KeyboardToken)+0x27e>
c0015832:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015838:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001583b:	66 3d 1b 03          	cmp    ax,0x31b
c001583f:	75 06                	jne    c0015847 <sendKeyboardToken(KeyboardToken)+0x28d>
c0015841:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015847:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001584a:	66 3d 1e 03          	cmp    ax,0x31e
c001584e:	75 06                	jne    c0015856 <sendKeyboardToken(KeyboardToken)+0x29c>
c0015850:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015856:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015859:	66 3d 1f 03          	cmp    ax,0x31f
c001585d:	75 06                	jne    c0015865 <sendKeyboardToken(KeyboardToken)+0x2ab>
c001585f:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015865:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015868:	66 3d 1a 03          	cmp    ax,0x31a
c001586c:	75 06                	jne    c0015874 <sendKeyboardToken(KeyboardToken)+0x2ba>
c001586e:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015874:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015878:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001587b:	83 f0 01             	xor    eax,0x1
c001587e:	84 c0                	test   al,al
c0015880:	74 77                	je     c00158f9 <sendKeyboardToken(KeyboardToken)+0x33f>
c0015882:	a0 21 d9 02 c0       	mov    al,ds:0xc002d921
c0015887:	84 c0                	test   al,al
c0015889:	74 41                	je     c00158cc <sendKeyboardToken(KeyboardToken)+0x312>
c001588b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001588f:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015893:	74 2b                	je     c00158c0 <sendKeyboardToken(KeyboardToken)+0x306>
c0015895:	8b 15 24 dc 02 c0    	mov    edx,DWORD PTR ds:0xc002dc24
c001589b:	89 d0                	mov    eax,edx
c001589d:	c1 e0 02             	shl    eax,0x2
c00158a0:	01 d0                	add    eax,edx
c00158a2:	01 c0                	add    eax,eax
c00158a4:	a3 24 dc 02 c0       	mov    ds:0xc002dc24,eax
c00158a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ac:	0f b7 c0             	movzx  eax,ax
c00158af:	8d 50 d0             	lea    edx,[eax-0x30]
c00158b2:	a1 24 dc 02 c0       	mov    eax,ds:0xc002dc24
c00158b7:	01 d0                	add    eax,edx
c00158b9:	a3 24 dc 02 c0       	mov    ds:0xc002dc24,eax
c00158be:	eb 6d                	jmp    c001592d <sendKeyboardToken(KeyboardToken)+0x373>
c00158c0:	c7 05 24 dc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dc24,0x0
c00158ca:	eb 61                	jmp    c001592d <sendKeyboardToken(KeyboardToken)+0x373>
c00158cc:	a1 24 dc 02 c0       	mov    eax,ds:0xc002dc24
c00158d1:	85 c0                	test   eax,eax
c00158d3:	74 18                	je     c00158ed <sendKeyboardToken(KeyboardToken)+0x333>
c00158d5:	a1 24 dc 02 c0       	mov    eax,ds:0xc002dc24
c00158da:	0f b6 c0             	movzx  eax,al
c00158dd:	83 ec 0c             	sub    esp,0xc
c00158e0:	50                   	push   eax
c00158e1:	e8 16 fc ff ff       	call   c00154fc <sendKeyToTerminal(unsigned char)>
c00158e6:	83 c4 10             	add    esp,0x10
c00158e9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00158ed:	c7 05 24 dc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dc24,0x0
c00158f7:	eb 34                	jmp    c001592d <sendKeyboardToken(KeyboardToken)+0x373>
c00158f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158fc:	66 3d 01 01          	cmp    ax,0x101
c0015900:	75 2b                	jne    c001592d <sendKeyboardToken(KeyboardToken)+0x373>
c0015902:	a1 24 dc 02 c0       	mov    eax,ds:0xc002dc24
c0015907:	85 c0                	test   eax,eax
c0015909:	74 18                	je     c0015923 <sendKeyboardToken(KeyboardToken)+0x369>
c001590b:	a1 24 dc 02 c0       	mov    eax,ds:0xc002dc24
c0015910:	0f b6 c0             	movzx  eax,al
c0015913:	83 ec 0c             	sub    esp,0xc
c0015916:	50                   	push   eax
c0015917:	e8 e0 fb ff ff       	call   c00154fc <sendKeyToTerminal(unsigned char)>
c001591c:	83 c4 10             	add    esp,0x10
c001591f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015923:	c7 05 24 dc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dc24,0x0
c001592d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015930:	83 f0 01             	xor    eax,0x1
c0015933:	84 c0                	test   al,al
c0015935:	74 4c                	je     c0015983 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015937:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001593a:	83 f0 01             	xor    eax,0x1
c001593d:	84 c0                	test   al,al
c001593f:	74 42                	je     c0015983 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015941:	a0 20 d9 02 c0       	mov    al,ds:0xc002d920
c0015946:	83 f0 01             	xor    eax,0x1
c0015949:	84 c0                	test   al,al
c001594b:	74 36                	je     c0015983 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001594d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015950:	66 83 f8 1f          	cmp    ax,0x1f
c0015954:	76 09                	jbe    c001595f <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015956:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015959:	66 83 f8 7e          	cmp    ax,0x7e
c001595d:	76 12                	jbe    c0015971 <sendKeyboardToken(KeyboardToken)+0x3b7>
c001595f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015962:	66 83 f8 0a          	cmp    ax,0xa
c0015966:	74 09                	je     c0015971 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015968:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001596b:	66 83 f8 08          	cmp    ax,0x8
c001596f:	75 12                	jne    c0015983 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015971:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015974:	0f b6 c0             	movzx  eax,al
c0015977:	83 ec 0c             	sub    esp,0xc
c001597a:	50                   	push   eax
c001597b:	e8 7c fb ff ff       	call   c00154fc <sendKeyToTerminal(unsigned char)>
c0015980:	83 c4 10             	add    esp,0x10
c0015983:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015986:	83 f0 01             	xor    eax,0x1
c0015989:	84 c0                	test   al,al
c001598b:	74 4f                	je     c00159dc <sendKeyboardToken(KeyboardToken)+0x422>
c001598d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015990:	83 f0 01             	xor    eax,0x1
c0015993:	84 c0                	test   al,al
c0015995:	74 45                	je     c00159dc <sendKeyboardToken(KeyboardToken)+0x422>
c0015997:	a0 20 d9 02 c0       	mov    al,ds:0xc002d920
c001599c:	84 c0                	test   al,al
c001599e:	74 3c                	je     c00159dc <sendKeyboardToken(KeyboardToken)+0x422>
c00159a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159a3:	66 83 f8 3f          	cmp    ax,0x3f
c00159a7:	76 33                	jbe    c00159dc <sendKeyboardToken(KeyboardToken)+0x422>
c00159a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159ac:	66 83 f8 7f          	cmp    ax,0x7f
c00159b0:	77 2a                	ja     c00159dc <sendKeyboardToken(KeyboardToken)+0x422>
c00159b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159b5:	88 c2                	mov    dl,al
c00159b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159ba:	66 83 f8 5f          	cmp    ax,0x5f
c00159be:	76 04                	jbe    c00159c4 <sendKeyboardToken(KeyboardToken)+0x40a>
c00159c0:	b0 20                	mov    al,0x20
c00159c2:	eb 02                	jmp    c00159c6 <sendKeyboardToken(KeyboardToken)+0x40c>
c00159c4:	b0 00                	mov    al,0x0
c00159c6:	29 c2                	sub    edx,eax
c00159c8:	88 d0                	mov    al,dl
c00159ca:	83 e8 40             	sub    eax,0x40
c00159cd:	0f b6 c0             	movzx  eax,al
c00159d0:	83 ec 0c             	sub    esp,0xc
c00159d3:	50                   	push   eax
c00159d4:	e8 23 fb ff ff       	call   c00154fc <sendKeyToTerminal(unsigned char)>
c00159d9:	83 c4 10             	add    esp,0x10
c00159dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159df:	66 3d 00 03          	cmp    ax,0x300
c00159e3:	75 0f                	jne    c00159f4 <sendKeyboardToken(KeyboardToken)+0x43a>
c00159e5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00159e8:	83 f0 01             	xor    eax,0x1
c00159eb:	84 c0                	test   al,al
c00159ed:	74 05                	je     c00159f4 <sendKeyboardToken(KeyboardToken)+0x43a>
c00159ef:	e8 41 a9 ff ff       	call   c0010335 <doTerminalCycle()>
c00159f4:	90                   	nop
c00159f5:	c9                   	leave  
c00159f6:	c3                   	ret    

c00159f7 <clearInternalKeybuffer(VgaText*)>:
c00159f7:	55                   	push   ebp
c00159f8:	89 e5                	mov    ebp,esp
c00159fa:	83 ec 08             	sub    esp,0x8
c00159fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a00:	05 98 01 00 00       	add    eax,0x198
c0015a05:	83 ec 0c             	sub    esp,0xc
c0015a08:	50                   	push   eax
c0015a09:	e8 5e ad fe ff       	call   c000076c <strlen>
c0015a0e:	83 c4 10             	add    esp,0x10
c0015a11:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015a14:	81 c2 98 01 00 00    	add    edx,0x198
c0015a1a:	83 ec 04             	sub    esp,0x4
c0015a1d:	50                   	push   eax
c0015a1e:	6a 00                	push   0x0
c0015a20:	52                   	push   edx
c0015a21:	e8 2a ad fe ff       	call   c0000750 <memset>
c0015a26:	83 c4 10             	add    esp,0x10
c0015a29:	90                   	nop
c0015a2a:	c9                   	leave  
c0015a2b:	c3                   	ret    

c0015a2c <readKeyboard(VgaText*, char*, unsigned long)>:
c0015a2c:	55                   	push   ebp
c0015a2d:	89 e5                	mov    ebp,esp
c0015a2f:	83 ec 18             	sub    esp,0x18
c0015a32:	a1 08 d8 02 c0       	mov    eax,ds:0xc002d808
c0015a37:	85 c0                	test   eax,eax
c0015a39:	74 2a                	je     c0015a65 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015a3b:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015a41:	8b 0d 08 d8 02 c0    	mov    ecx,DWORD PTR ds:0xc002d808
c0015a47:	83 ec 04             	sub    esp,0x4
c0015a4a:	68 20 d8 02 c0       	push   0xc002d820
c0015a4f:	83 ec 08             	sub    esp,0x8
c0015a52:	89 e2                	mov    edx,esp
c0015a54:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015a57:	89 02                	mov    DWORD PTR [edx],eax
c0015a59:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015a5c:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015a60:	ff d1                	call   ecx
c0015a62:	83 c4 10             	add    esp,0x10
c0015a65:	fb                   	sti    
c0015a66:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015a6d:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015a71:	0f 84 a1 00 00 00    	je     c0015b18 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0015a77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a7a:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015a80:	84 c0                	test   al,al
c0015a82:	75 28                	jne    c0015aac <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0015a84:	fa                   	cli    
c0015a85:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c0015a8a:	40                   	inc    eax
c0015a8b:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c0015a90:	e8 c6 7d 00 00       	call   c001d85b <schedule()>
c0015a95:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c0015a9a:	48                   	dec    eax
c0015a9b:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c0015aa0:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c0015aa5:	85 c0                	test   eax,eax
c0015aa7:	75 ce                	jne    c0015a77 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015aa9:	fb                   	sti    
c0015aaa:	eb cb                	jmp    c0015a77 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015aac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015aaf:	8d 50 01             	lea    edx,[eax+0x1]
c0015ab2:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015ab5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015ab8:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015abe:	88 10                	mov    BYTE PTR [eax],dl
c0015ac0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ac3:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015ac9:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015acc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015acf:	05 98 01 00 00       	add    eax,0x198
c0015ad4:	83 ec 0c             	sub    esp,0xc
c0015ad7:	50                   	push   eax
c0015ad8:	e8 8f ac fe ff       	call   c000076c <strlen>
c0015add:	83 c4 10             	add    esp,0x10
c0015ae0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015ae3:	81 c2 98 01 00 00    	add    edx,0x198
c0015ae9:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015aec:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015aef:	81 c2 98 01 00 00    	add    edx,0x198
c0015af5:	83 ec 04             	sub    esp,0x4
c0015af8:	50                   	push   eax
c0015af9:	51                   	push   ecx
c0015afa:	52                   	push   edx
c0015afb:	e8 88 ab fe ff       	call   c0000688 <memmove>
c0015b00:	83 c4 10             	add    esp,0x10
c0015b03:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015b06:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015b09:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015b0d:	0f 85 5a ff ff ff    	jne    c0015a6d <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0015b13:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b16:	eb 03                	jmp    c0015b1b <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0015b18:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b1b:	c9                   	leave  
c0015b1c:	c3                   	ret    
c0015b1d:	90                   	nop

c0015b1e <Keyboard::Keyboard(char const*)>:
c0015b1e:	83 ec 0c             	sub    esp,0xc
c0015b21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b25:	83 ec 08             	sub    esp,0x8
c0015b28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b2c:	50                   	push   eax
c0015b2d:	e8 7c e0 ff ff       	call   c0013bae <Device::Device(char const*)>
c0015b32:	83 c4 10             	add    esp,0x10
c0015b35:	ba f4 ab 02 c0       	mov    edx,0xc002abf4
c0015b3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b3e:	89 10                	mov    DWORD PTR [eax],edx
c0015b40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b44:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015b4e:	c6 05 04 d8 02 c0 01 	mov    BYTE PTR ds:0xc002d804,0x1
c0015b55:	90                   	nop
c0015b56:	83 c4 0c             	add    esp,0xc
c0015b59:	c3                   	ret    

c0015b5a <Keyboard::~Keyboard()>:
c0015b5a:	83 ec 0c             	sub    esp,0xc
c0015b5d:	ba f4 ab 02 c0       	mov    edx,0xc002abf4
c0015b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b66:	89 10                	mov    DWORD PTR [eax],edx
c0015b68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b6c:	83 ec 0c             	sub    esp,0xc
c0015b6f:	50                   	push   eax
c0015b70:	e8 03 dd ff ff       	call   c0013878 <Device::~Device()>
c0015b75:	83 c4 10             	add    esp,0x10
c0015b78:	90                   	nop
c0015b79:	83 c4 0c             	add    esp,0xc
c0015b7c:	c3                   	ret    
c0015b7d:	90                   	nop

c0015b7e <Keyboard::~Keyboard()>:
c0015b7e:	83 ec 0c             	sub    esp,0xc
c0015b81:	83 ec 0c             	sub    esp,0xc
c0015b84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b88:	e8 cd ff ff ff       	call   c0015b5a <Keyboard::~Keyboard()>
c0015b8d:	83 c4 10             	add    esp,0x10
c0015b90:	83 ec 08             	sub    esp,0x8
c0015b93:	68 5c 01 00 00       	push   0x15c
c0015b98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b9c:	e8 f8 c8 ff ff       	call   c0012499 <operator delete(void*, unsigned long)>
c0015ba1:	83 c4 10             	add    esp,0x10
c0015ba4:	83 c4 0c             	add    esp,0xc
c0015ba7:	c3                   	ret    

c0015ba8 <LogicalDisk::close(int, int, void*)>:
c0015ba8:	83 c8 ff             	or     eax,0xffffffff
c0015bab:	c3                   	ret    

c0015bac <LogicalDisk::~LogicalDisk()>:
c0015bac:	83 ec 0c             	sub    esp,0xc
c0015baf:	ba 6c ac 02 c0       	mov    edx,0xc002ac6c
c0015bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bb8:	89 10                	mov    DWORD PTR [eax],edx
c0015bba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bbe:	83 ec 0c             	sub    esp,0xc
c0015bc1:	50                   	push   eax
c0015bc2:	e8 b1 dc ff ff       	call   c0013878 <Device::~Device()>
c0015bc7:	83 c4 10             	add    esp,0x10
c0015bca:	90                   	nop
c0015bcb:	83 c4 0c             	add    esp,0xc
c0015bce:	c3                   	ret    
c0015bcf:	90                   	nop

c0015bd0 <LogicalDisk::~LogicalDisk()>:
c0015bd0:	83 ec 0c             	sub    esp,0xc
c0015bd3:	83 ec 0c             	sub    esp,0xc
c0015bd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015bda:	e8 cd ff ff ff       	call   c0015bac <LogicalDisk::~LogicalDisk()>
c0015bdf:	83 c4 10             	add    esp,0x10
c0015be2:	83 ec 08             	sub    esp,0x8
c0015be5:	68 74 01 00 00       	push   0x174
c0015bea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015bee:	e8 a6 c8 ff ff       	call   c0012499 <operator delete(void*, unsigned long)>
c0015bf3:	83 c4 10             	add    esp,0x10
c0015bf6:	83 c4 0c             	add    esp,0xc
c0015bf9:	c3                   	ret    

c0015bfa <LogicalDisk::open(int, int, void*)>:
c0015bfa:	83 ec 18             	sub    esp,0x18
c0015bfd:	68 20 ac 02 c0       	push   0xc002ac20
c0015c02:	e8 ca 40 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c0015c07:	83 c8 ff             	or     eax,0xffffffff
c0015c0a:	83 c4 1c             	add    esp,0x1c
c0015c0d:	c3                   	ret    

c0015c0e <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015c0e:	53                   	push   ebx
c0015c0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015c13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015c17:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015c1b:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015c21:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015c27:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015c2d:	77 10                	ja     c0015c3f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015c2f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015c35:	89 d3                	mov    ebx,edx
c0015c37:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015c3d:	72 05                	jb     c0015c44 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015c3f:	83 c8 ff             	or     eax,0xffffffff
c0015c42:	89 c2                	mov    edx,eax
c0015c44:	5b                   	pop    ebx
c0015c45:	c3                   	ret    

c0015c46 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015c46:	56                   	push   esi
c0015c47:	83 c8 ff             	or     eax,0xffffffff
c0015c4a:	53                   	push   ebx
c0015c4b:	89 c2                	mov    edx,eax
c0015c4d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015c51:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015c55:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015c59:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015c5f:	77 27                	ja     c0015c88 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015c61:	89 d8                	mov    eax,ebx
c0015c63:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015c69:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015c6f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c74:	89 c2                	mov    edx,eax
c0015c76:	73 10                	jae    c0015c88 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015c78:	89 c8                	mov    eax,ecx
c0015c7a:	89 da                	mov    edx,ebx
c0015c7c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015c82:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015c88:	5b                   	pop    ebx
c0015c89:	5e                   	pop    esi
c0015c8a:	c3                   	ret    
c0015c8b:	90                   	nop

c0015c8c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015c8c:	83 ec 1c             	sub    esp,0x1c
c0015c8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015c93:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015c97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015c9f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015ca3:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ca6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015caa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015cae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cb2:	83 ec 08             	sub    esp,0x8
c0015cb5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015cb9:	50                   	push   eax
c0015cba:	e8 ef de ff ff       	call   c0013bae <Device::Device(char const*)>
c0015cbf:	83 c4 10             	add    esp,0x10
c0015cc2:	ba 6c ac 02 c0       	mov    edx,0xc002ac6c
c0015cc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ccb:	89 10                	mov    DWORD PTR [eax],edx
c0015ccd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cd1:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015cd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cdc:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015ce3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ce7:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015cf1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015cf5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015cf9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015cfd:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015d03:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015d09:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015d0d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015d10:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015d14:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015d1a:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015d20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d24:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015d28:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015d2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d32:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015d3c:	90                   	nop
c0015d3d:	83 c4 1c             	add    esp,0x1c
c0015d40:	c3                   	ret    
c0015d41:	90                   	nop

c0015d42 <LogicalDisk::assignDriveLetter()>:
c0015d42:	55                   	push   ebp
c0015d43:	57                   	push   edi
c0015d44:	56                   	push   esi
c0015d45:	53                   	push   ebx
c0015d46:	83 ec 14             	sub    esp,0x14
c0015d49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015d4d:	8b 3d 40 dc 02 c0    	mov    edi,DWORD PTR ds:0xc002dc40
c0015d53:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015d59:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015d5d:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015d63:	8b 3d 44 dc 02 c0    	mov    edi,DWORD PTR ds:0xc002dc44
c0015d69:	3c 01                	cmp    al,0x1
c0015d6b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015d6f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015d73:	19 c0                	sbb    eax,eax
c0015d75:	83 e0 02             	and    eax,0x2
c0015d78:	83 c0 41             	add    eax,0x41
c0015d7b:	0f be e8             	movsx  ebp,al
c0015d7e:	3c 43                	cmp    al,0x43
c0015d80:	75 10                	jne    c0015d92 <LogicalDisk::assignDriveLetter()+0x50>
c0015d82:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015d89:	75 5d                	jne    c0015de8 <LogicalDisk::assignDriveLetter()+0xa6>
c0015d8b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015d90:	75 56                	jne    c0015de8 <LogicalDisk::assignDriveLetter()+0xa6>
c0015d92:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015d95:	ba 01 00 00 00       	mov    edx,0x1
c0015d9a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015d9e:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015da2:	d3 e2                	shl    edx,cl
c0015da4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015da8:	89 d7                	mov    edi,edx
c0015daa:	89 d6                	mov    esi,edx
c0015dac:	c1 ff 1f             	sar    edi,0x1f
c0015daf:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015db3:	21 f9                	and    ecx,edi
c0015db5:	09 d1                	or     ecx,edx
c0015db7:	75 2f                	jne    c0015de8 <LogicalDisk::assignDriveLetter()+0xa6>
c0015db9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015dbd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015dc1:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015dc7:	09 f2                	or     edx,esi
c0015dc9:	89 15 40 dc 02 c0    	mov    DWORD PTR ds:0xc002dc40,edx
c0015dcf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015dd3:	09 fa                	or     edx,edi
c0015dd5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015dd9:	89 15 44 dc 02 c0    	mov    DWORD PTR ds:0xc002dc44,edx
c0015ddf:	89 1c bd 60 dc 02 c0 	mov    DWORD PTR [edi*4-0x3ffd23a0],ebx
c0015de6:	eb 08                	jmp    c0015df0 <LogicalDisk::assignDriveLetter()+0xae>
c0015de8:	45                   	inc    ebp
c0015de9:	40                   	inc    eax
c0015dea:	3c 5b                	cmp    al,0x5b
c0015dec:	75 90                	jne    c0015d7e <LogicalDisk::assignDriveLetter()+0x3c>
c0015dee:	31 c0                	xor    eax,eax
c0015df0:	83 c4 14             	add    esp,0x14
c0015df3:	5b                   	pop    ebx
c0015df4:	5e                   	pop    esi
c0015df5:	5f                   	pop    edi
c0015df6:	5d                   	pop    ebp
c0015df7:	c3                   	ret    

c0015df8 <LogicalDisk::mount()>:
c0015df8:	56                   	push   esi
c0015df9:	53                   	push   ebx
c0015dfa:	53                   	push   ebx
c0015dfb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015dff:	8b 1d d4 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d7d4
c0015e05:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015e0f:	85 db                	test   ebx,ebx
c0015e11:	74 27                	je     c0015e3a <LogicalDisk::mount()+0x42>
c0015e13:	51                   	push   ecx
c0015e14:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015e1b:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015e1d:	83 e8 41             	sub    eax,0x41
c0015e20:	50                   	push   eax
c0015e21:	56                   	push   esi
c0015e22:	53                   	push   ebx
c0015e23:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015e26:	83 c4 10             	add    esp,0x10
c0015e29:	84 c0                	test   al,al
c0015e2b:	74 08                	je     c0015e35 <LogicalDisk::mount()+0x3d>
c0015e2d:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015e33:	eb 07                	jmp    c0015e3c <LogicalDisk::mount()+0x44>
c0015e35:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015e38:	eb d5                	jmp    c0015e0f <LogicalDisk::mount()+0x17>
c0015e3a:	31 c0                	xor    eax,eax
c0015e3c:	5a                   	pop    edx
c0015e3d:	5b                   	pop    ebx
c0015e3e:	5e                   	pop    esi
c0015e3f:	c3                   	ret    

c0015e40 <LogicalDisk::unmount()>:
c0015e40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e44:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015e4e:	c3                   	ret    
c0015e4f:	90                   	nop

c0015e50 <LogicalDisk::eject()>:
c0015e50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e54:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0015e5a:	8b 10                	mov    edx,DWORD PTR [eax]
c0015e5c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015e60:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0015e63:	90                   	nop

c0015e64 <LogicalDisk::unassignDriveLetter()>:
c0015e64:	57                   	push   edi
c0015e65:	56                   	push   esi
c0015e66:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e6a:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015e71:	84 c9                	test   cl,cl
c0015e73:	75 0f                	jne    c0015e84 <LogicalDisk::unassignDriveLetter()+0x20>
c0015e75:	c7 44 24 0c 44 ac 02 c0 	mov    DWORD PTR [esp+0xc],0xc002ac44
c0015e7d:	5e                   	pop    esi
c0015e7e:	5f                   	pop    edi
c0015e7f:	e9 4d 3e 00 00       	jmp    c0019cd1 <Krnl::panic(char const*)>
c0015e84:	83 e9 41             	sub    ecx,0x41
c0015e87:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015e8e:	b8 01 00 00 00       	mov    eax,0x1
c0015e93:	c7 04 8d 60 dc 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd23a0],0x0
c0015e9e:	d3 e0                	shl    eax,cl
c0015ea0:	89 c7                	mov    edi,eax
c0015ea2:	f7 d0                	not    eax
c0015ea4:	c1 ff 1f             	sar    edi,0x1f
c0015ea7:	21 05 40 dc 02 c0    	and    DWORD PTR ds:0xc002dc40,eax
c0015ead:	89 fe                	mov    esi,edi
c0015eaf:	f7 d6                	not    esi
c0015eb1:	21 35 44 dc 02 c0    	and    DWORD PTR ds:0xc002dc44,esi
c0015eb7:	5e                   	pop    esi
c0015eb8:	5f                   	pop    edi
c0015eb9:	c3                   	ret    

c0015eba <LogicalDisk::read(unsigned long long, int, void*)>:
c0015eba:	57                   	push   edi
c0015ebb:	56                   	push   esi
c0015ebc:	53                   	push   ebx
c0015ebd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015ec1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015ec5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015ec9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ecd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015ed3:	77 41                	ja     c0015f16 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015ed5:	99                   	cdq    
c0015ed6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015edc:	01 c8                	add    eax,ecx
c0015ede:	11 da                	adc    edx,ebx
c0015ee0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015ee6:	19 d7                	sbb    edi,edx
c0015ee8:	72 33                	jb     c0015f1d <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015eea:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015ef0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015ef6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015efa:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015efe:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015f04:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015f0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015f0e:	5b                   	pop    ebx
c0015f0f:	5e                   	pop    esi
c0015f10:	5f                   	pop    edi
c0015f11:	e9 cc 0a 00 00       	jmp    c00169e2 <VCache::read(unsigned long long, int, void*)>
c0015f16:	b8 05 00 00 00       	mov    eax,0x5
c0015f1b:	eb 05                	jmp    c0015f22 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015f1d:	b8 07 00 00 00       	mov    eax,0x7
c0015f22:	5b                   	pop    ebx
c0015f23:	5e                   	pop    esi
c0015f24:	5f                   	pop    edi
c0015f25:	c3                   	ret    

c0015f26 <LogicalDisk::write(unsigned long long, int, void*)>:
c0015f26:	57                   	push   edi
c0015f27:	56                   	push   esi
c0015f28:	53                   	push   ebx
c0015f29:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015f2d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f31:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015f35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015f39:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015f3f:	77 41                	ja     c0015f82 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015f41:	99                   	cdq    
c0015f42:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015f48:	01 c8                	add    eax,ecx
c0015f4a:	11 da                	adc    edx,ebx
c0015f4c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015f52:	19 d7                	sbb    edi,edx
c0015f54:	72 33                	jb     c0015f89 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015f56:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015f5c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015f62:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015f66:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015f6a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015f70:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015f76:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015f7a:	5b                   	pop    ebx
c0015f7b:	5e                   	pop    esi
c0015f7c:	5f                   	pop    edi
c0015f7d:	e9 76 09 00 00       	jmp    c00168f8 <VCache::write(unsigned long long, int, void*)>
c0015f82:	b8 05 00 00 00       	mov    eax,0x5
c0015f87:	eb 05                	jmp    c0015f8e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015f89:	b8 07 00 00 00       	mov    eax,0x7
c0015f8e:	5b                   	pop    ebx
c0015f8f:	5e                   	pop    esi
c0015f90:	5f                   	pop    edi
c0015f91:	c3                   	ret    

c0015f92 <Mouse::Mouse(char const*)>:
c0015f92:	83 ec 0c             	sub    esp,0xc
c0015f95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f99:	83 ec 08             	sub    esp,0x8
c0015f9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015fa0:	50                   	push   eax
c0015fa1:	e8 08 dc ff ff       	call   c0013bae <Device::Device(char const*)>
c0015fa6:	83 c4 10             	add    esp,0x10
c0015fa9:	ba 98 ac 02 c0       	mov    edx,0xc002ac98
c0015fae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fb2:	89 10                	mov    DWORD PTR [eax],edx
c0015fb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fb8:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0015fc2:	90                   	nop
c0015fc3:	83 c4 0c             	add    esp,0xc
c0015fc6:	c3                   	ret    
c0015fc7:	90                   	nop

c0015fc8 <Mouse::~Mouse()>:
c0015fc8:	83 ec 0c             	sub    esp,0xc
c0015fcb:	ba 98 ac 02 c0       	mov    edx,0xc002ac98
c0015fd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fd4:	89 10                	mov    DWORD PTR [eax],edx
c0015fd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fda:	83 ec 0c             	sub    esp,0xc
c0015fdd:	50                   	push   eax
c0015fde:	e8 95 d8 ff ff       	call   c0013878 <Device::~Device()>
c0015fe3:	83 c4 10             	add    esp,0x10
c0015fe6:	90                   	nop
c0015fe7:	83 c4 0c             	add    esp,0xc
c0015fea:	c3                   	ret    
c0015feb:	90                   	nop

c0015fec <Mouse::~Mouse()>:
c0015fec:	83 ec 0c             	sub    esp,0xc
c0015fef:	83 ec 0c             	sub    esp,0xc
c0015ff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ff6:	e8 cd ff ff ff       	call   c0015fc8 <Mouse::~Mouse()>
c0015ffb:	83 c4 10             	add    esp,0x10
c0015ffe:	83 ec 08             	sub    esp,0x8
c0016001:	68 58 01 00 00       	push   0x158
c0016006:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001600a:	e8 8a c4 ff ff       	call   c0012499 <operator delete(void*, unsigned long)>
c001600f:	83 c4 10             	add    esp,0x10
c0016012:	83 c4 0c             	add    esp,0xc
c0016015:	c3                   	ret    

c0016016 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016016:	55                   	push   ebp
c0016017:	57                   	push   edi
c0016018:	56                   	push   esi
c0016019:	53                   	push   ebx
c001601a:	81 ec 28 01 00 00    	sub    esp,0x128
c0016020:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016027:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001602e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016035:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001603c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016040:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016044:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001604b:	e8 5a dc ff ff       	call   c0013caa <Device::getName()>
c0016050:	5a                   	pop    edx
c0016051:	59                   	pop    ecx
c0016052:	50                   	push   eax
c0016053:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016057:	55                   	push   ebp
c0016058:	e8 af a7 fe ff       	call   c000080c <strcpy>
c001605d:	5b                   	pop    ebx
c001605e:	58                   	pop    eax
c001605f:	68 bc ac 02 c0       	push   0xc002acbc
c0016064:	55                   	push   ebp
c0016065:	e8 e2 a8 fe ff       	call   c000094c <strcat>
c001606a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016071:	e8 23 95 ff ff       	call   c000f599 <malloc>
c0016076:	83 c4 0c             	add    esp,0xc
c0016079:	89 c3                	mov    ebx,eax
c001607b:	57                   	push   edi
c001607c:	56                   	push   esi
c001607d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016081:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016085:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001608c:	55                   	push   ebp
c001608d:	50                   	push   eax
c001608e:	e8 f9 fb ff ff       	call   c0015c8c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016093:	83 c4 14             	add    esp,0x14
c0016096:	53                   	push   ebx
c0016097:	e8 a6 fc ff ff       	call   c0015d42 <LogicalDisk::assignDriveLetter()>
c001609c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001609f:	e8 54 fd ff ff       	call   c0015df8 <LogicalDisk::mount()>
c00160a4:	58                   	pop    eax
c00160a5:	5a                   	pop    edx
c00160a6:	53                   	push   ebx
c00160a7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00160ae:	e8 f7 d8 ff ff       	call   c00139aa <Device::addChild(Device*)>
c00160b3:	81 c4 2c 01 00 00    	add    esp,0x12c
c00160b9:	5b                   	pop    ebx
c00160ba:	5e                   	pop    esi
c00160bb:	5f                   	pop    edi
c00160bc:	5d                   	pop    ebp
c00160bd:	c3                   	ret    

c00160be <createPartitionsForDisk(PhysicalDisk*)>:
c00160be:	55                   	push   ebp
c00160bf:	57                   	push   edi
c00160c0:	56                   	push   esi
c00160c1:	53                   	push   ebx
c00160c2:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00160c8:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00160cf:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00160d5:	3d 00 02 00 00       	cmp    eax,0x200
c00160da:	74 27                	je     c0016103 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00160dc:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00160e2:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00160e8:	83 ec 10             	sub    esp,0x10
c00160eb:	0f a4 f7 0a          	shld   edi,esi,0xa
c00160ef:	99                   	cdq    
c00160f0:	c1 e6 0a             	shl    esi,0xa
c00160f3:	52                   	push   edx
c00160f4:	89 fd                	mov    ebp,edi
c00160f6:	50                   	push   eax
c00160f7:	55                   	push   ebp
c00160f8:	56                   	push   esi
c00160f9:	e8 a6 04 01 00       	call   c00265a4 <__udivdi3>
c00160fe:	e9 b1 00 00 00       	jmp    c00161b4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016103:	83 ec 0c             	sub    esp,0xc
c0016106:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016108:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001610c:	56                   	push   esi
c001610d:	6a 01                	push   0x1
c001610f:	6a 00                	push   0x0
c0016111:	6a 00                	push   0x0
c0016113:	53                   	push   ebx
c0016114:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016117:	83 c4 20             	add    esp,0x20
c001611a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016122:	75 0a                	jne    c001612e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016124:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001612c:	74 2c                	je     c001615a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001612e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016134:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001613a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016140:	83 ec 10             	sub    esp,0x10
c0016143:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016147:	89 f7                	mov    edi,esi
c0016149:	c1 e0 0a             	shl    eax,0xa
c001614c:	c1 ff 1f             	sar    edi,0x1f
c001614f:	57                   	push   edi
c0016150:	56                   	push   esi
c0016151:	52                   	push   edx
c0016152:	50                   	push   eax
c0016153:	e8 4c 04 01 00       	call   c00265a4 <__udivdi3>
c0016158:	eb 5a                	jmp    c00161b4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001615a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016161:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016168:	83 e1 7f             	and    ecx,0x7f
c001616b:	83 e0 7f             	and    eax,0x7f
c001616e:	01 c1                	add    ecx,eax
c0016170:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016177:	83 e0 7f             	and    eax,0x7f
c001617a:	01 c1                	add    ecx,eax
c001617c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016183:	83 e0 7f             	and    eax,0x7f
c0016186:	00 c1                	add    cl,al
c0016188:	74 41                	je     c00161cb <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c001618a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016190:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016196:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001619c:	83 ec 10             	sub    esp,0x10
c001619f:	0f a4 c2 0a          	shld   edx,eax,0xa
c00161a3:	89 f7                	mov    edi,esi
c00161a5:	c1 e0 0a             	shl    eax,0xa
c00161a8:	c1 ff 1f             	sar    edi,0x1f
c00161ab:	57                   	push   edi
c00161ac:	56                   	push   esi
c00161ad:	52                   	push   edx
c00161ae:	50                   	push   eax
c00161af:	e8 f0 03 01 00       	call   c00265a4 <__udivdi3>
c00161b4:	83 c4 14             	add    esp,0x14
c00161b7:	52                   	push   edx
c00161b8:	50                   	push   eax
c00161b9:	6a 00                	push   0x0
c00161bb:	6a 00                	push   0x0
c00161bd:	53                   	push   ebx
c00161be:	e8 53 fe ff ff       	call   c0016016 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00161c3:	83 c4 20             	add    esp,0x20
c00161c6:	e9 79 01 00 00       	jmp    c0016344 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00161cb:	89 f0                	mov    eax,esi
c00161cd:	31 f6                	xor    esi,esi
c00161cf:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00161d6:	75 02                	jne    c00161da <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00161d8:	89 f1                	mov    ecx,esi
c00161da:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00161e1:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00161e8:	c1 e2 08             	shl    edx,0x8
c00161eb:	c1 e7 10             	shl    edi,0x10
c00161ee:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00161f6:	09 fa                	or     edx,edi
c00161f8:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016200:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016207:	83 c0 10             	add    eax,0x10
c001620a:	09 fa                	or     edx,edi
c001620c:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016213:	c1 e7 18             	shl    edi,0x18
c0016216:	09 fa                	or     edx,edi
c0016218:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c001621f:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016223:	c1 e7 10             	shl    edi,0x10
c0016226:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001622d:	c1 e2 08             	shl    edx,0x8
c0016230:	09 fa                	or     edx,edi
c0016232:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016239:	09 fa                	or     edx,edi
c001623b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016242:	c1 e7 18             	shl    edi,0x18
c0016245:	09 fa                	or     edx,edi
c0016247:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c001624b:	46                   	inc    esi
c001624c:	83 fe 04             	cmp    esi,0x4
c001624f:	0f 85 7a ff ff ff    	jne    c00161cf <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016259:	83 f0 01             	xor    eax,0x1
c001625c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016260:	75 57                	jne    c00162b9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016262:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016266:	83 f0 01             	xor    eax,0x1
c0016269:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001626d:	75 4a                	jne    c00162b9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001626f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016273:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001627b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016283:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016289:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001628f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016295:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016299:	89 f7                	mov    edi,esi
c001629b:	c1 e0 0a             	shl    eax,0xa
c001629e:	c1 ff 1f             	sar    edi,0x1f
c00162a1:	57                   	push   edi
c00162a2:	56                   	push   esi
c00162a3:	52                   	push   edx
c00162a4:	50                   	push   eax
c00162a5:	e8 fa 02 01 00       	call   c00265a4 <__udivdi3>
c00162aa:	83 c4 10             	add    esp,0x10
c00162ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00162b1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00162b5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00162b9:	84 c9                	test   cl,cl
c00162bb:	74 53                	je     c0016310 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00162bd:	0f b6 c9             	movzx  ecx,cl
c00162c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00162c8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00162cc:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00162d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00162d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00162d8:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00162dc:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00162e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00162e4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00162e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162ec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00162f0:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00162f4:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00162f8:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00162fc:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016300:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016304:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016308:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c001630c:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016310:	31 ed                	xor    ebp,ebp
c0016312:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016316:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001631a:	89 f8                	mov    eax,edi
c001631c:	09 f0                	or     eax,esi
c001631e:	74 1e                	je     c001633e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016320:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016324:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016328:	89 d1                	mov    ecx,edx
c001632a:	09 c1                	or     ecx,eax
c001632c:	74 10                	je     c001633e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001632e:	83 ec 0c             	sub    esp,0xc
c0016331:	57                   	push   edi
c0016332:	56                   	push   esi
c0016333:	52                   	push   edx
c0016334:	50                   	push   eax
c0016335:	53                   	push   ebx
c0016336:	e8 db fc ff ff       	call   c0016016 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001633b:	83 c4 20             	add    esp,0x20
c001633e:	45                   	inc    ebp
c001633f:	83 fd 04             	cmp    ebp,0x4
c0016342:	75 ce                	jne    c0016312 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016344:	81 c4 5c 02 00 00    	add    esp,0x25c
c001634a:	5b                   	pop    ebx
c001634b:	5e                   	pop    esi
c001634c:	5f                   	pop    edi
c001634d:	5d                   	pop    ebp
c001634e:	c3                   	ret    
c001634f:	90                   	nop

c0016350 <Serial::Serial(char const*)>:
c0016350:	83 ec 0c             	sub    esp,0xc
c0016353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016357:	83 ec 08             	sub    esp,0x8
c001635a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001635e:	50                   	push   eax
c001635f:	e8 4a d8 ff ff       	call   c0013bae <Device::Device(char const*)>
c0016364:	83 c4 10             	add    esp,0x10
c0016367:	ba d0 ac 02 c0       	mov    edx,0xc002acd0
c001636c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016370:	89 10                	mov    DWORD PTR [eax],edx
c0016372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016376:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016380:	90                   	nop
c0016381:	83 c4 0c             	add    esp,0xc
c0016384:	c3                   	ret    
c0016385:	90                   	nop

c0016386 <Serial::~Serial()>:
c0016386:	83 ec 0c             	sub    esp,0xc
c0016389:	ba d0 ac 02 c0       	mov    edx,0xc002acd0
c001638e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016392:	89 10                	mov    DWORD PTR [eax],edx
c0016394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016398:	83 ec 0c             	sub    esp,0xc
c001639b:	50                   	push   eax
c001639c:	e8 d7 d4 ff ff       	call   c0013878 <Device::~Device()>
c00163a1:	83 c4 10             	add    esp,0x10
c00163a4:	90                   	nop
c00163a5:	83 c4 0c             	add    esp,0xc
c00163a8:	c3                   	ret    
c00163a9:	90                   	nop

c00163aa <Serial::~Serial()>:
c00163aa:	83 ec 0c             	sub    esp,0xc
c00163ad:	83 ec 0c             	sub    esp,0xc
c00163b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163b4:	e8 cd ff ff ff       	call   c0016386 <Serial::~Serial()>
c00163b9:	83 c4 10             	add    esp,0x10
c00163bc:	83 ec 08             	sub    esp,0x8
c00163bf:	68 58 01 00 00       	push   0x158
c00163c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163c8:	e8 cc c0 ff ff       	call   c0012499 <operator delete(void*, unsigned long)>
c00163cd:	83 c4 10             	add    esp,0x10
c00163d0:	83 c4 0c             	add    esp,0xc
c00163d3:	c3                   	ret    

c00163d4 <Timer::Timer(char const*)>:
c00163d4:	83 ec 0c             	sub    esp,0xc
c00163d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163db:	83 ec 08             	sub    esp,0x8
c00163de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163e2:	50                   	push   eax
c00163e3:	e8 c6 d7 ff ff       	call   c0013bae <Device::Device(char const*)>
c00163e8:	83 c4 10             	add    esp,0x10
c00163eb:	ba 14 ad 02 c0       	mov    edx,0xc002ad14
c00163f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163f4:	89 10                	mov    DWORD PTR [eax],edx
c00163f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163fa:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016404:	90                   	nop
c0016405:	83 c4 0c             	add    esp,0xc
c0016408:	c3                   	ret    
c0016409:	90                   	nop

c001640a <Timer::~Timer()>:
c001640a:	83 ec 0c             	sub    esp,0xc
c001640d:	ba 14 ad 02 c0       	mov    edx,0xc002ad14
c0016412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016416:	89 10                	mov    DWORD PTR [eax],edx
c0016418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001641c:	83 ec 0c             	sub    esp,0xc
c001641f:	50                   	push   eax
c0016420:	e8 53 d4 ff ff       	call   c0013878 <Device::~Device()>
c0016425:	83 c4 10             	add    esp,0x10
c0016428:	90                   	nop
c0016429:	83 c4 0c             	add    esp,0xc
c001642c:	c3                   	ret    
c001642d:	90                   	nop

c001642e <Timer::~Timer()>:
c001642e:	83 ec 0c             	sub    esp,0xc
c0016431:	83 ec 0c             	sub    esp,0xc
c0016434:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016438:	e8 cd ff ff ff       	call   c001640a <Timer::~Timer()>
c001643d:	83 c4 10             	add    esp,0x10
c0016440:	83 ec 08             	sub    esp,0x8
c0016443:	68 5c 01 00 00       	push   0x15c
c0016448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001644c:	e8 48 c0 ff ff       	call   c0012499 <operator delete(void*, unsigned long)>
c0016451:	83 c4 10             	add    esp,0x10
c0016454:	83 c4 0c             	add    esp,0xc
c0016457:	c3                   	ret    

c0016458 <Timer::read()>:
c0016458:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001645c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016462:	c3                   	ret    

c0016463 <timerHandler(unsigned long long)>:
c0016463:	55                   	push   ebp
c0016464:	57                   	push   edi
c0016465:	56                   	push   esi
c0016466:	53                   	push   ebx
c0016467:	83 ec 0c             	sub    esp,0xc
c001646a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001646e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016472:	01 35 d0 dc 02 c0    	add    DWORD PTR ds:0xc002dcd0,esi
c0016478:	11 3d d4 dc 02 c0    	adc    DWORD PTR ds:0xc002dcd4,edi
c001647e:	80 3d 6d d6 02 c0 00 	cmp    BYTE PTR ds:0xc002d66d,0x0
c0016485:	0f 84 42 01 00 00    	je     c00165cd <timerHandler(unsigned long long)+0x16a>
c001648b:	fa                   	cli    
c001648c:	ff 05 88 0b 03 c0    	inc    DWORD PTR ds:0xc0030b88
c0016492:	83 ec 0c             	sub    esp,0xc
c0016495:	ff 05 84 0b 03 c0    	inc    DWORD PTR ds:0xc0030b84
c001649b:	68 98 0b 03 c0       	push   0xc0030b98
c00164a0:	e8 59 21 01 00       	call   c00285fe <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00164a5:	83 c4 10             	add    esp,0x10
c00164a8:	84 c0                	test   al,al
c00164aa:	0f 85 a2 00 00 00    	jne    c0016552 <timerHandler(unsigned long long)+0xef>
c00164b0:	83 ec 0c             	sub    esp,0xc
c00164b3:	68 98 0b 03 c0       	push   0xc0030b98
c00164b8:	e8 5d 21 01 00       	call   c002861a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00164bd:	83 c4 10             	add    esp,0x10
c00164c0:	89 c3                	mov    ebx,eax
c00164c2:	83 ec 0c             	sub    esp,0xc
c00164c5:	68 98 0b 03 c0       	push   0xc0030b98
c00164ca:	e8 4b 21 01 00       	call   c002861a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00164cf:	c7 04 24 98 0b 03 c0 	mov    DWORD PTR [esp],0xc0030b98
c00164d6:	89 c5                	mov    ebp,eax
c00164d8:	e8 45 21 01 00       	call   c0028622 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00164dd:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c00164e0:	83 c4 10             	add    esp,0x10
c00164e3:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c00164e6:	39 15 d0 dc 02 c0    	cmp    DWORD PTR ds:0xc002dcd0,edx
c00164ec:	a1 d4 dc 02 c0       	mov    eax,ds:0xc002dcd4
c00164f1:	19 c8                	sbb    eax,ecx
c00164f3:	72 21                	jb     c0016516 <timerHandler(unsigned long long)+0xb3>
c00164f5:	83 ec 0c             	sub    esp,0xc
c00164f8:	55                   	push   ebp
c00164f9:	e8 e0 77 00 00       	call   c001dcde <unblockTask(ThreadControlBlock*)>
c00164fe:	83 c4 10             	add    esp,0x10
c0016501:	39 eb                	cmp    ebx,ebp
c0016503:	75 21                	jne    c0016526 <timerHandler(unsigned long long)+0xc3>
c0016505:	83 ec 0c             	sub    esp,0xc
c0016508:	68 98 0b 03 c0       	push   0xc0030b98
c001650d:	e8 08 21 01 00       	call   c002861a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016512:	89 c3                	mov    ebx,eax
c0016514:	eb 0d                	jmp    c0016523 <timerHandler(unsigned long long)+0xc0>
c0016516:	50                   	push   eax
c0016517:	50                   	push   eax
c0016518:	55                   	push   ebp
c0016519:	68 98 0b 03 c0       	push   0xc0030b98
c001651e:	e8 ad 21 01 00       	call   c00286d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016523:	83 c4 10             	add    esp,0x10
c0016526:	83 ec 0c             	sub    esp,0xc
c0016529:	68 98 0b 03 c0       	push   0xc0030b98
c001652e:	e8 cb 20 01 00       	call   c00285fe <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016533:	83 c4 10             	add    esp,0x10
c0016536:	84 c0                	test   al,al
c0016538:	75 18                	jne    c0016552 <timerHandler(unsigned long long)+0xef>
c001653a:	83 ec 0c             	sub    esp,0xc
c001653d:	68 98 0b 03 c0       	push   0xc0030b98
c0016542:	e8 d3 20 01 00       	call   c002861a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016547:	83 c4 10             	add    esp,0x10
c001654a:	39 d8                	cmp    eax,ebx
c001654c:	0f 85 70 ff ff ff    	jne    c00164c2 <timerHandler(unsigned long long)+0x5f>
c0016552:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016557:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c001655b:	74 3d                	je     c001659a <timerHandler(unsigned long long)+0x137>
c001655d:	80 3d 6c d6 02 c0 00 	cmp    BYTE PTR ds:0xc002d66c,0x0
c0016564:	74 34                	je     c001659a <timerHandler(unsigned long long)+0x137>
c0016566:	fa                   	cli    
c0016567:	ff 05 88 0b 03 c0    	inc    DWORD PTR ds:0xc0030b88
c001656d:	31 d2                	xor    edx,edx
c001656f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016574:	89 f9                	mov    ecx,edi
c0016576:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016579:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001657e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016581:	39 c6                	cmp    esi,eax
c0016583:	19 d1                	sbb    ecx,edx
c0016585:	72 05                	jb     c001658c <timerHandler(unsigned long long)+0x129>
c0016587:	e8 cf 72 00 00       	call   c001d85b <schedule()>
c001658c:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c0016591:	48                   	dec    eax
c0016592:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c0016597:	75 01                	jne    c001659a <timerHandler(unsigned long long)+0x137>
c0016599:	fb                   	sti    
c001659a:	a1 84 0b 03 c0       	mov    eax,ds:0xc0030b84
c001659f:	48                   	dec    eax
c00165a0:	a3 84 0b 03 c0       	mov    ds:0xc0030b84,eax
c00165a5:	75 18                	jne    c00165bf <timerHandler(unsigned long long)+0x15c>
c00165a7:	83 3d 80 0b 03 c0 00 	cmp    DWORD PTR ds:0xc0030b80,0x0
c00165ae:	74 0f                	je     c00165bf <timerHandler(unsigned long long)+0x15c>
c00165b0:	c7 05 80 0b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030b80,0x0
c00165ba:	e8 9c 72 00 00       	call   c001d85b <schedule()>
c00165bf:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c00165c4:	48                   	dec    eax
c00165c5:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c00165ca:	75 01                	jne    c00165cd <timerHandler(unsigned long long)+0x16a>
c00165cc:	fb                   	sti    
c00165cd:	83 c4 0c             	add    esp,0xc
c00165d0:	5b                   	pop    ebx
c00165d1:	5e                   	pop    esi
c00165d2:	5f                   	pop    edi
c00165d3:	5d                   	pop    ebp
c00165d4:	c3                   	ret    

c00165d5 <setupTimer(int)>:
c00165d5:	57                   	push   edi
c00165d6:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c00165db:	56                   	push   esi
c00165dc:	53                   	push   ebx
c00165dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00165e1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00165e7:	83 ec 0c             	sub    esp,0xc
c00165ea:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00165f0:	e8 b5 d6 ff ff       	call   c0013caa <Device::getName()>
c00165f5:	83 c4 10             	add    esp,0x10
c00165f8:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00165fb:	0f 85 8d 00 00 00    	jne    c001668e <setupTimer(int)+0xb9>
c0016601:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c0016606:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c001660d:	74 7f                	je     c001668e <setupTimer(int)+0xb9>
c001660f:	83 ec 0c             	sub    esp,0xc
c0016612:	68 5c 01 00 00       	push   0x15c
c0016617:	e8 7d 8f ff ff       	call   c000f599 <malloc>
c001661c:	89 04 24             	mov    DWORD PTR [esp],eax
c001661f:	89 c3                	mov    ebx,eax
c0016621:	e8 54 fb 00 00       	call   c002617a <PIT::PIT()>
c0016626:	59                   	pop    ecx
c0016627:	5f                   	pop    edi
c0016628:	53                   	push   ebx
c0016629:	ff 35 68 d6 02 c0    	push   DWORD PTR ds:0xc002d668
c001662f:	e8 76 d3 ff ff       	call   c00139aa <Device::addChild(Device*)>
c0016634:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016636:	6a 00                	push   0x0
c0016638:	6a 00                	push   0x0
c001663a:	56                   	push   esi
c001663b:	53                   	push   ebx
c001663c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001663f:	83 c4 14             	add    esp,0x14
c0016642:	68 60 01 00 00       	push   0x160
c0016647:	e8 4d 8f ff ff       	call   c000f599 <malloc>
c001664c:	89 04 24             	mov    DWORD PTR [esp],eax
c001664f:	89 c7                	mov    edi,eax
c0016651:	e8 d4 f9 00 00       	call   c002602a <APICTimer::APICTimer()>
c0016656:	6a 00                	push   0x0
c0016658:	6a 00                	push   0x0
c001665a:	56                   	push   esi
c001665b:	57                   	push   edi
c001665c:	e8 cb f8 00 00       	call   c0025f2c <APICTimer::open(int, int, void*)>
c0016661:	83 c4 20             	add    esp,0x20
c0016664:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016666:	6a 00                	push   0x0
c0016668:	6a 00                	push   0x0
c001666a:	6a 00                	push   0x0
c001666c:	53                   	push   ebx
c001666d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016670:	58                   	pop    eax
c0016671:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c0016676:	5a                   	pop    edx
c0016677:	57                   	push   edi
c0016678:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001667e:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016684:	e8 21 d3 ff ff       	call   c00139aa <Device::addChild(Device*)>
c0016689:	83 c4 10             	add    esp,0x10
c001668c:	eb 33                	jmp    c00166c1 <setupTimer(int)+0xec>
c001668e:	83 ec 0c             	sub    esp,0xc
c0016691:	68 5c 01 00 00       	push   0x15c
c0016696:	e8 fe 8e ff ff       	call   c000f599 <malloc>
c001669b:	89 04 24             	mov    DWORD PTR [esp],eax
c001669e:	89 c3                	mov    ebx,eax
c00166a0:	e8 d5 fa 00 00       	call   c002617a <PIT::PIT()>
c00166a5:	58                   	pop    eax
c00166a6:	5a                   	pop    edx
c00166a7:	53                   	push   ebx
c00166a8:	ff 35 68 d6 02 c0    	push   DWORD PTR ds:0xc002d668
c00166ae:	e8 f7 d2 ff ff       	call   c00139aa <Device::addChild(Device*)>
c00166b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00166b5:	6a 00                	push   0x0
c00166b7:	6a 00                	push   0x0
c00166b9:	56                   	push   esi
c00166ba:	53                   	push   ebx
c00166bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00166be:	83 c4 20             	add    esp,0x20
c00166c1:	89 d8                	mov    eax,ebx
c00166c3:	5b                   	pop    ebx
c00166c4:	5e                   	pop    esi
c00166c5:	5f                   	pop    edi
c00166c6:	c3                   	ret    
c00166c7:	90                   	nop

c00166c8 <VCache::VCache(PhysicalDisk*)>:
c00166c8:	53                   	push   ebx
c00166c9:	83 ec 18             	sub    esp,0x18
c00166cc:	ba 44 ad 02 c0       	mov    edx,0xc002ad44
c00166d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166d5:	89 10                	mov    DWORD PTR [eax],edx
c00166d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166db:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00166e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166e6:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00166ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166f1:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00166f8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00166ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016703:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001670a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016711:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016715:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001671c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016720:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016724:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016728:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c001672f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016736:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001673a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001673e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016742:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016746:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001674a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001674e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016752:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016759:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016761:	83 ec 0c             	sub    esp,0xc
c0016764:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016768:	e8 2c 8e ff ff       	call   c000f599 <malloc>
c001676d:	83 c4 10             	add    esp,0x10
c0016770:	89 c3                	mov    ebx,eax
c0016772:	83 ec 0c             	sub    esp,0xc
c0016775:	53                   	push   ebx
c0016776:	e8 a9 6e 00 00       	call   c001d624 <Mutex::Mutex()>
c001677b:	83 c4 10             	add    esp,0x10
c001677e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016782:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016785:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016789:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001678d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016790:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016794:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001679b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001679f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00167a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167a9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00167ac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00167b0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00167b6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00167bc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00167c0:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00167c3:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00167c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167ca:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00167ce:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00167d2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00167d8:	05 00 01 00 00       	add    eax,0x100
c00167dd:	c1 e0 04             	shl    eax,0x4
c00167e0:	83 ec 0c             	sub    esp,0xc
c00167e3:	50                   	push   eax
c00167e4:	e8 b0 8d ff ff       	call   c000f599 <malloc>
c00167e9:	83 c4 10             	add    esp,0x10
c00167ec:	89 c2                	mov    edx,eax
c00167ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167f2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00167f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167f9:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016800:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016804:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016808:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001680c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016812:	c1 e0 07             	shl    eax,0x7
c0016815:	83 ec 0c             	sub    esp,0xc
c0016818:	50                   	push   eax
c0016819:	e8 7b 8d ff ff       	call   c000f599 <malloc>
c001681e:	83 c4 10             	add    esp,0x10
c0016821:	89 c2                	mov    edx,eax
c0016823:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016827:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001682a:	90                   	nop
c001682b:	83 c4 18             	add    esp,0x18
c001682e:	5b                   	pop    ebx
c001682f:	c3                   	ret    

c0016830 <VCache::invalidateReadBuffer()>:
c0016830:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016834:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001683a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001683e:	c3                   	ret    
c001683f:	90                   	nop

c0016840 <VCache::writeWriteBuffer()>:
c0016840:	53                   	push   ebx
c0016841:	83 ec 14             	sub    esp,0x14
c0016844:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016848:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001684b:	8b 10                	mov    edx,DWORD PTR [eax]
c001684d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016850:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016853:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016856:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016859:	50                   	push   eax
c001685a:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001685d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016864:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001686b:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001686f:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016876:	83 c4 28             	add    esp,0x28
c0016879:	5b                   	pop    ebx
c001687a:	c3                   	ret    
c001687b:	90                   	nop

c001687c <VCache::~VCache()>:
c001687c:	83 ec 0c             	sub    esp,0xc
c001687f:	ba 44 ad 02 c0       	mov    edx,0xc002ad44
c0016884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016888:	89 10                	mov    DWORD PTR [eax],edx
c001688a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001688e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016891:	84 c0                	test   al,al
c0016893:	74 0f                	je     c00168a4 <VCache::~VCache()+0x28>
c0016895:	83 ec 0c             	sub    esp,0xc
c0016898:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001689c:	e8 9f ff ff ff       	call   c0016840 <VCache::writeWriteBuffer()>
c00168a1:	83 c4 10             	add    esp,0x10
c00168a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168a8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00168ab:	83 ec 0c             	sub    esp,0xc
c00168ae:	50                   	push   eax
c00168af:	e8 f5 8c ff ff       	call   c000f5a9 <free>
c00168b4:	83 c4 10             	add    esp,0x10
c00168b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168bb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00168be:	83 ec 0c             	sub    esp,0xc
c00168c1:	50                   	push   eax
c00168c2:	e8 e2 8c ff ff       	call   c000f5a9 <free>
c00168c7:	83 c4 10             	add    esp,0x10
c00168ca:	90                   	nop
c00168cb:	83 c4 0c             	add    esp,0xc
c00168ce:	c3                   	ret    
c00168cf:	90                   	nop

c00168d0 <VCache::~VCache()>:
c00168d0:	83 ec 0c             	sub    esp,0xc
c00168d3:	83 ec 0c             	sub    esp,0xc
c00168d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168da:	e8 9d ff ff ff       	call   c001687c <VCache::~VCache()>
c00168df:	83 c4 10             	add    esp,0x10
c00168e2:	83 ec 08             	sub    esp,0x8
c00168e5:	6a 44                	push   0x44
c00168e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168eb:	e8 a9 bb ff ff       	call   c0012499 <operator delete(void*, unsigned long)>
c00168f0:	83 c4 10             	add    esp,0x10
c00168f3:	83 c4 0c             	add    esp,0xc
c00168f6:	c3                   	ret    
c00168f7:	90                   	nop

c00168f8 <VCache::write(unsigned long long, int, void*)>:
c00168f8:	55                   	push   ebp
c00168f9:	57                   	push   edi
c00168fa:	56                   	push   esi
c00168fb:	53                   	push   ebx
c00168fc:	83 ec 18             	sub    esp,0x18
c00168ff:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016903:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016907:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001690b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001690e:	e8 57 72 00 00       	call   c001db6a <Semaphore::acquire()>
c0016913:	83 c4 10             	add    esp,0x10
c0016916:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001691a:	74 0c                	je     c0016928 <VCache::write(unsigned long long, int, void*)+0x30>
c001691c:	83 ec 0c             	sub    esp,0xc
c001691f:	53                   	push   ebx
c0016920:	e8 0b ff ff ff       	call   c0016830 <VCache::invalidateReadBuffer()>
c0016925:	83 c4 10             	add    esp,0x10
c0016928:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001692c:	74 5c                	je     c001698a <VCache::write(unsigned long long, int, void*)+0x92>
c001692e:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0016931:	89 e8                	mov    eax,ebp
c0016933:	99                   	cdq    
c0016934:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016937:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001693a:	89 c1                	mov    ecx,eax
c001693c:	89 d0                	mov    eax,edx
c001693e:	31 f1                	xor    ecx,esi
c0016940:	31 f8                	xor    eax,edi
c0016942:	09 c1                	or     ecx,eax
c0016944:	75 38                	jne    c001697e <VCache::write(unsigned long long, int, void*)+0x86>
c0016946:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001694b:	75 31                	jne    c001697e <VCache::write(unsigned long long, int, void*)+0x86>
c001694d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016950:	89 ef                	mov    edi,ebp
c0016952:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016958:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001695c:	0f af f9             	imul   edi,ecx
c001695f:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016962:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016964:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016967:	40                   	inc    eax
c0016968:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001696b:	83 c0 80             	add    eax,0xffffff80
c001696e:	75 5c                	jne    c00169cc <VCache::write(unsigned long long, int, void*)+0xd4>
c0016970:	83 ec 0c             	sub    esp,0xc
c0016973:	53                   	push   ebx
c0016974:	e8 c7 fe ff ff       	call   c0016840 <VCache::writeWriteBuffer()>
c0016979:	83 c4 10             	add    esp,0x10
c001697c:	eb 4e                	jmp    c00169cc <VCache::write(unsigned long long, int, void*)+0xd4>
c001697e:	83 ec 0c             	sub    esp,0xc
c0016981:	53                   	push   ebx
c0016982:	e8 b9 fe ff ff       	call   c0016840 <VCache::writeWriteBuffer()>
c0016987:	83 c4 10             	add    esp,0x10
c001698a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001698d:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0016992:	7f 22                	jg     c00169b6 <VCache::write(unsigned long long, int, void*)+0xbe>
c0016994:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016997:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001699a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001699e:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00169a2:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c00169a5:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c00169a8:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00169ae:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00169b2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00169b4:	eb 16                	jmp    c00169cc <VCache::write(unsigned long long, int, void*)+0xd4>
c00169b6:	83 ec 0c             	sub    esp,0xc
c00169b9:	8b 10                	mov    edx,DWORD PTR [eax]
c00169bb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00169bf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00169c3:	57                   	push   edi
c00169c4:	56                   	push   esi
c00169c5:	50                   	push   eax
c00169c6:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00169c9:	83 c4 20             	add    esp,0x20
c00169cc:	83 ec 0c             	sub    esp,0xc
c00169cf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00169d2:	e8 ef 77 00 00       	call   c001e1c6 <Semaphore::release()>
c00169d7:	83 c4 1c             	add    esp,0x1c
c00169da:	31 c0                	xor    eax,eax
c00169dc:	5b                   	pop    ebx
c00169dd:	5e                   	pop    esi
c00169de:	5f                   	pop    edi
c00169df:	5d                   	pop    ebp
c00169e0:	c3                   	ret    
c00169e1:	90                   	nop

c00169e2 <VCache::read(unsigned long long, int, void*)>:
c00169e2:	55                   	push   ebp
c00169e3:	57                   	push   edi
c00169e4:	56                   	push   esi
c00169e5:	53                   	push   ebx
c00169e6:	83 ec 28             	sub    esp,0x28
c00169e9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00169ed:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00169f1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00169f5:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00169f9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00169fc:	e8 69 71 00 00       	call   c001db6a <Semaphore::acquire()>
c0016a01:	83 c4 10             	add    esp,0x10
c0016a04:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016a08:	74 0c                	je     c0016a16 <VCache::read(unsigned long long, int, void*)+0x34>
c0016a0a:	83 ec 0c             	sub    esp,0xc
c0016a0d:	53                   	push   ebx
c0016a0e:	e8 2d fe ff ff       	call   c0016840 <VCache::writeWriteBuffer()>
c0016a13:	83 c4 10             	add    esp,0x10
c0016a16:	83 fd 01             	cmp    ebp,0x1
c0016a19:	0f 85 80 00 00 00    	jne    c0016a9f <VCache::read(unsigned long long, int, void*)+0xbd>
c0016a1f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a22:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016a26:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016a2d:	75 70                	jne    c0016a9f <VCache::read(unsigned long long, int, void*)+0xbd>
c0016a2f:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0016a32:	89 e9                	mov    ecx,ebp
c0016a34:	f7 d9                	neg    ecx
c0016a36:	89 c8                	mov    eax,ecx
c0016a38:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016a3c:	c1 f8 1f             	sar    eax,0x1f
c0016a3f:	21 f1                	and    ecx,esi
c0016a41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a45:	89 c8                	mov    eax,ecx
c0016a47:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016a4b:	21 f9                	and    ecx,edi
c0016a4d:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016a51:	89 ca                	mov    edx,ecx
c0016a53:	74 0a                	je     c0016a5f <VCache::read(unsigned long long, int, void*)+0x7d>
c0016a55:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016a58:	75 05                	jne    c0016a5f <VCache::read(unsigned long long, int, void*)+0x7d>
c0016a5a:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0016a5d:	74 23                	je     c0016a82 <VCache::read(unsigned long long, int, void*)+0xa0>
c0016a5f:	83 ec 0c             	sub    esp,0xc
c0016a62:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016a66:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016a6a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0016a6d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0016a70:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016a72:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016a75:	55                   	push   ebp
c0016a76:	52                   	push   edx
c0016a77:	50                   	push   eax
c0016a78:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016a7c:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016a7f:	83 c4 20             	add    esp,0x20
c0016a82:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a85:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016a89:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016a8f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016a92:	48                   	dec    eax
c0016a93:	21 c6                	and    esi,eax
c0016a95:	0f af f1             	imul   esi,ecx
c0016a98:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016a9b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016a9d:	eb 1d                	jmp    c0016abc <VCache::read(unsigned long long, int, void*)+0xda>
c0016a9f:	83 ec 0c             	sub    esp,0xc
c0016aa2:	53                   	push   ebx
c0016aa3:	e8 88 fd ff ff       	call   c0016830 <VCache::invalidateReadBuffer()>
c0016aa8:	5a                   	pop    edx
c0016aa9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016aac:	8b 10                	mov    edx,DWORD PTR [eax]
c0016aae:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016ab2:	55                   	push   ebp
c0016ab3:	57                   	push   edi
c0016ab4:	56                   	push   esi
c0016ab5:	50                   	push   eax
c0016ab6:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016ab9:	83 c4 20             	add    esp,0x20
c0016abc:	83 ec 0c             	sub    esp,0xc
c0016abf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016ac2:	e8 ff 76 00 00       	call   c001e1c6 <Semaphore::release()>
c0016ac7:	83 c4 2c             	add    esp,0x2c
c0016aca:	31 c0                	xor    eax,eax
c0016acc:	5b                   	pop    ebx
c0016acd:	5e                   	pop    esi
c0016ace:	5f                   	pop    edi
c0016acf:	5d                   	pop    ebp
c0016ad0:	c3                   	ret    
c0016ad1:	90                   	nop

c0016ad2 <Video::putrect(int, int, int, int, unsigned int)>:
c0016ad2:	55                   	push   ebp
c0016ad3:	57                   	push   edi
c0016ad4:	56                   	push   esi
c0016ad5:	53                   	push   ebx
c0016ad6:	83 ec 1c             	sub    esp,0x1c
c0016ad9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016add:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ae1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016ae5:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016ae9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016aed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016af1:	01 df                	add    edi,ebx
c0016af3:	39 fb                	cmp    ebx,edi
c0016af5:	7d 1f                	jge    c0016b16 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016af7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016afb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016aff:	7d 12                	jge    c0016b13 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016b01:	8b 16                	mov    edx,DWORD PTR [esi]
c0016b03:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016b07:	53                   	push   ebx
c0016b08:	55                   	push   ebp
c0016b09:	45                   	inc    ebp
c0016b0a:	56                   	push   esi
c0016b0b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016b0e:	83 c4 10             	add    esp,0x10
c0016b11:	eb e8                	jmp    c0016afb <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016b13:	43                   	inc    ebx
c0016b14:	eb dd                	jmp    c0016af3 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016b16:	83 c4 1c             	add    esp,0x1c
c0016b19:	5b                   	pop    ebx
c0016b1a:	5e                   	pop    esi
c0016b1b:	5f                   	pop    edi
c0016b1c:	5d                   	pop    ebp
c0016b1d:	c3                   	ret    

c0016b1e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016b1e:	55                   	push   ebp
c0016b1f:	57                   	push   edi
c0016b20:	31 ff                	xor    edi,edi
c0016b22:	56                   	push   esi
c0016b23:	53                   	push   ebx
c0016b24:	83 ec 1c             	sub    esp,0x1c
c0016b27:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016b2b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016b2f:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016b36:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016b3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b3f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016b43:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016b47:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016b4a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016b4e:	01 f9                	add    ecx,edi
c0016b50:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016b54:	7d 2f                	jge    c0016b85 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016b56:	31 f6                	xor    esi,esi
c0016b58:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016b5c:	01 f2                	add    edx,esi
c0016b5e:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016b62:	7d 1a                	jge    c0016b7e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016b64:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016b67:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016b6a:	46                   	inc    esi
c0016b6b:	51                   	push   ecx
c0016b6c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016b70:	52                   	push   edx
c0016b71:	55                   	push   ebp
c0016b72:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016b75:	83 c4 10             	add    esp,0x10
c0016b78:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016b7c:	eb da                	jmp    c0016b58 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016b7e:	47                   	inc    edi
c0016b7f:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016b83:	eb c5                	jmp    c0016b4a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016b85:	83 c4 1c             	add    esp,0x1c
c0016b88:	5b                   	pop    ebx
c0016b89:	5e                   	pop    esi
c0016b8a:	5f                   	pop    edi
c0016b8b:	5d                   	pop    ebp
c0016b8c:	c3                   	ret    
c0016b8d:	90                   	nop

c0016b8e <Video::blit(unsigned int*, int, int, int, int)>:
c0016b8e:	55                   	push   ebp
c0016b8f:	57                   	push   edi
c0016b90:	56                   	push   esi
c0016b91:	53                   	push   ebx
c0016b92:	83 ec 1c             	sub    esp,0x1c
c0016b95:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016b99:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b9d:	85 c0                	test   eax,eax
c0016b9f:	79 02                	jns    c0016ba3 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016ba1:	31 c0                	xor    eax,eax
c0016ba3:	c1 e0 02             	shl    eax,0x2
c0016ba6:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016baa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016bae:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016bb2:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016bb6:	39 d8                	cmp    eax,ebx
c0016bb8:	7e 49                	jle    c0016c03 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016bba:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016bc0:	7c 41                	jl     c0016c03 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016bc2:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016bc6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016bca:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016bce:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016bd2:	39 f9                	cmp    ecx,edi
c0016bd4:	7e 22                	jle    c0016bf8 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016bd6:	83 c5 04             	add    ebp,0x4
c0016bd9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016bdf:	7c 14                	jl     c0016bf5 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016be1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016be3:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016be6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016bea:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016bee:	56                   	push   esi
c0016bef:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016bf2:	83 c4 10             	add    esp,0x10
c0016bf5:	47                   	inc    edi
c0016bf6:	eb d2                	jmp    c0016bca <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016bf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016bfc:	43                   	inc    ebx
c0016bfd:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016c01:	eb ab                	jmp    c0016bae <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016c03:	83 c4 1c             	add    esp,0x1c
c0016c06:	5b                   	pop    ebx
c0016c07:	5e                   	pop    esi
c0016c08:	5f                   	pop    edi
c0016c09:	5d                   	pop    ebp
c0016c0a:	c3                   	ret    
c0016c0b:	90                   	nop

c0016c0c <Video::clearScreen(unsigned int)>:
c0016c0c:	57                   	push   edi
c0016c0d:	56                   	push   esi
c0016c0e:	53                   	push   ebx
c0016c0f:	31 db                	xor    ebx,ebx
c0016c11:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016c15:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016c1b:	7e 1f                	jle    c0016c3c <Video::clearScreen(unsigned int)+0x30>
c0016c1d:	31 ff                	xor    edi,edi
c0016c1f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016c25:	7e 12                	jle    c0016c39 <Video::clearScreen(unsigned int)+0x2d>
c0016c27:	8b 06                	mov    eax,DWORD PTR [esi]
c0016c29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016c2d:	53                   	push   ebx
c0016c2e:	57                   	push   edi
c0016c2f:	47                   	inc    edi
c0016c30:	56                   	push   esi
c0016c31:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016c34:	83 c4 10             	add    esp,0x10
c0016c37:	eb e6                	jmp    c0016c1f <Video::clearScreen(unsigned int)+0x13>
c0016c39:	43                   	inc    ebx
c0016c3a:	eb d9                	jmp    c0016c15 <Video::clearScreen(unsigned int)+0x9>
c0016c3c:	5b                   	pop    ebx
c0016c3d:	5e                   	pop    esi
c0016c3e:	5f                   	pop    edi
c0016c3f:	c3                   	ret    

c0016c40 <Video::putpixel(int, int, unsigned int)>:
c0016c40:	c7 44 24 04 4c ad 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ad4c
c0016c48:	e9 84 30 00 00       	jmp    c0019cd1 <Krnl::panic(char const*)>
c0016c4d:	90                   	nop

c0016c4e <Video::Video(char const*)>:
c0016c4e:	83 ec 0c             	sub    esp,0xc
c0016c51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c55:	83 ec 08             	sub    esp,0x8
c0016c58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c5c:	50                   	push   eax
c0016c5d:	e8 4c cf ff ff       	call   c0013bae <Device::Device(char const*)>
c0016c62:	83 c4 10             	add    esp,0x10
c0016c65:	ba bc ad 02 c0       	mov    edx,0xc002adbc
c0016c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c6e:	89 10                	mov    DWORD PTR [eax],edx
c0016c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c74:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016c7e:	90                   	nop
c0016c7f:	83 c4 0c             	add    esp,0xc
c0016c82:	c3                   	ret    
c0016c83:	90                   	nop

c0016c84 <Video::~Video()>:
c0016c84:	83 ec 0c             	sub    esp,0xc
c0016c87:	ba bc ad 02 c0       	mov    edx,0xc002adbc
c0016c8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c90:	89 10                	mov    DWORD PTR [eax],edx
c0016c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c96:	83 ec 0c             	sub    esp,0xc
c0016c99:	50                   	push   eax
c0016c9a:	e8 d9 cb ff ff       	call   c0013878 <Device::~Device()>
c0016c9f:	83 c4 10             	add    esp,0x10
c0016ca2:	90                   	nop
c0016ca3:	83 c4 0c             	add    esp,0xc
c0016ca6:	c3                   	ret    
c0016ca7:	90                   	nop

c0016ca8 <Video::~Video()>:
c0016ca8:	83 ec 0c             	sub    esp,0xc
c0016cab:	83 ec 0c             	sub    esp,0xc
c0016cae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cb2:	e8 cd ff ff ff       	call   c0016c84 <Video::~Video()>
c0016cb7:	83 c4 10             	add    esp,0x10
c0016cba:	83 ec 08             	sub    esp,0x8
c0016cbd:	68 64 01 00 00       	push   0x164
c0016cc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cc6:	e8 ce b7 ff ff       	call   c0012499 <operator delete(void*, unsigned long)>
c0016ccb:	83 c4 10             	add    esp,0x10
c0016cce:	83 c4 0c             	add    esp,0xc
c0016cd1:	c3                   	ret    

c0016cd2 <Video::isMonochrome()>:
c0016cd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016cd6:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016cdc:	c3                   	ret    
c0016cdd:	90                   	nop

c0016cde <Video::getWidth()>:
c0016cde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ce2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016ce8:	c3                   	ret    
c0016ce9:	90                   	nop

c0016cea <Video::getHeight()>:
c0016cea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016cee:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016cf4:	c3                   	ret    
c0016cf5:	90                   	nop

c0016cf6 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016cf6:	55                   	push   ebp
c0016cf7:	57                   	push   edi
c0016cf8:	56                   	push   esi
c0016cf9:	53                   	push   ebx
c0016cfa:	83 ec 2c             	sub    esp,0x2c
c0016cfd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016d01:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016d05:	83 f8 01             	cmp    eax,0x1
c0016d08:	19 c9                	sbb    ecx,ecx
c0016d0a:	31 db                	xor    ebx,ebx
c0016d0c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016d10:	89 cd                	mov    ebp,ecx
c0016d12:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016d1a:	f7 d5                	not    ebp
c0016d1c:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016d22:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016d26:	01 d8                	add    eax,ebx
c0016d28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d2c:	56                   	push   esi
c0016d2d:	e8 b8 ff ff ff       	call   c0016cea <Video::getHeight()>
c0016d32:	59                   	pop    ecx
c0016d33:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016d37:	7e 70                	jle    c0016da9 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016d39:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016d3d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016d41:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016d44:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016d48:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016d4c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016d53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016d57:	89 f8                	mov    eax,edi
c0016d59:	83 c0 20             	add    eax,0x20
c0016d5c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016d60:	56                   	push   esi
c0016d61:	e8 78 ff ff ff       	call   c0016cde <Video::getWidth()>
c0016d66:	5a                   	pop    edx
c0016d67:	39 c7                	cmp    edi,eax
c0016d69:	7d 34                	jge    c0016d9f <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016d6b:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016d70:	74 05                	je     c0016d77 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016d72:	8b 06                	mov    eax,DWORD PTR [esi]
c0016d74:	55                   	push   ebp
c0016d75:	eb 0d                	jmp    c0016d84 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016d77:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016d7c:	74 12                	je     c0016d90 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016d7e:	8b 06                	mov    eax,DWORD PTR [esi]
c0016d80:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016d84:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016d88:	57                   	push   edi
c0016d89:	56                   	push   esi
c0016d8a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016d8d:	83 c4 10             	add    esp,0x10
c0016d90:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016d94:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016d98:	47                   	inc    edi
c0016d99:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016d9d:	75 c1                	jne    c0016d60 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016d9f:	43                   	inc    ebx
c0016da0:	83 fb 20             	cmp    ebx,0x20
c0016da3:	0f 85 79 ff ff ff    	jne    c0016d22 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016da9:	83 c4 2c             	add    esp,0x2c
c0016dac:	5b                   	pop    ebx
c0016dad:	5e                   	pop    esi
c0016dae:	5f                   	pop    edi
c0016daf:	5d                   	pop    ebp
c0016db0:	c3                   	ret    
c0016db1:	90                   	nop

c0016db2 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016db2:	55                   	push   ebp
c0016db3:	57                   	push   edi
c0016db4:	56                   	push   esi
c0016db5:	53                   	push   ebx
c0016db6:	83 ec 28             	sub    esp,0x28
c0016db9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016dbd:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016dc1:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0016dc5:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016dc9:	c1 e6 08             	shl    esi,0x8
c0016dcc:	01 c6                	add    esi,eax
c0016dce:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016dd2:	c1 e0 08             	shl    eax,0x8
c0016dd5:	01 d0                	add    eax,edx
c0016dd7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ddb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ddf:	0f af c6             	imul   eax,esi
c0016de2:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016de9:	50                   	push   eax
c0016dea:	e8 aa 87 ff ff       	call   c000f599 <malloc>
c0016def:	83 c4 10             	add    esp,0x10
c0016df2:	89 c7                	mov    edi,eax
c0016df4:	85 c0                	test   eax,eax
c0016df6:	75 10                	jne    c0016e08 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0016df8:	83 ec 0c             	sub    esp,0xc
c0016dfb:	68 6d ad 02 c0       	push   0xc002ad6d
c0016e00:	e8 cc 2e 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c0016e05:	83 c4 10             	add    esp,0x10
c0016e08:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0016e0b:	ba 12 00 00 00       	mov    edx,0x12
c0016e10:	84 c0                	test   al,al
c0016e12:	74 11                	je     c0016e25 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0016e14:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0016e18:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0016e1c:	c1 fa 03             	sar    edx,0x3
c0016e1f:	0f af d1             	imul   edx,ecx
c0016e22:	83 c2 12             	add    edx,0x12
c0016e25:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016e29:	74 04                	je     c0016e2f <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0016e2b:	85 f6                	test   esi,esi
c0016e2d:	75 12                	jne    c0016e41 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0016e2f:	83 ec 0c             	sub    esp,0xc
c0016e32:	68 7d ad 02 c0       	push   0xc002ad7d
c0016e37:	e8 35 b7 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0016e3c:	e9 b8 00 00 00       	jmp    c0016ef9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0016e41:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0016e45:	80 f9 02             	cmp    cl,0x2
c0016e48:	0f 85 96 00 00 00    	jne    c0016ee4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0016e4e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016e53:	75 0e                	jne    c0016e63 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016e55:	84 c0                	test   al,al
c0016e57:	75 0a                	jne    c0016e63 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016e59:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016e5c:	83 e8 18             	sub    eax,0x18
c0016e5f:	a8 f7                	test   al,0xf7
c0016e61:	74 0a                	je     c0016e6d <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0016e63:	83 ec 0c             	sub    esp,0xc
c0016e66:	68 92 ad 02 c0       	push   0xc002ad92
c0016e6b:	eb 7f                	jmp    c0016eec <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0016e6d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016e75:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016e7d:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0016e81:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016e89:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016e8d:	75 0c                	jne    c0016e9b <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016e8f:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0016e94:	c1 e0 18             	shl    eax,0x18
c0016e97:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016e9b:	45                   	inc    ebp
c0016e9c:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0016ea1:	c1 e1 10             	shl    ecx,0x10
c0016ea4:	89 c8                	mov    eax,ecx
c0016ea6:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0016eab:	c1 e1 08             	shl    ecx,0x8
c0016eae:	09 c1                	or     ecx,eax
c0016eb0:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0016eb4:	09 c1                	or     ecx,eax
c0016eb6:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0016eba:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0016ebe:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0016ec2:	c1 f8 03             	sar    eax,0x3
c0016ec5:	01 c2                	add    edx,eax
c0016ec7:	89 e8                	mov    eax,ebp
c0016ec9:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0016ecd:	39 c6                	cmp    esi,eax
c0016ecf:	7f b0                	jg     c0016e81 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0016ed1:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016ed5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016ed9:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0016edc:	7e 22                	jle    c0016f00 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0016ede:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0016ee2:	eb 99                	jmp    c0016e7d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016ee4:	50                   	push   eax
c0016ee5:	50                   	push   eax
c0016ee6:	51                   	push   ecx
c0016ee7:	68 a0 ad 02 c0       	push   0xc002ada0
c0016eec:	e8 80 b6 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0016ef1:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016ef4:	e8 b0 86 ff ff       	call   c000f5a9 <free>
c0016ef9:	83 c4 10             	add    esp,0x10
c0016efc:	31 ff                	xor    edi,edi
c0016efe:	eb 0f                	jmp    c0016f0f <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0016f00:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f04:	89 30                	mov    DWORD PTR [eax],esi
c0016f06:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016f0a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0016f0d:	89 30                	mov    DWORD PTR [eax],esi
c0016f0f:	83 c4 1c             	add    esp,0x1c
c0016f12:	89 f8                	mov    eax,edi
c0016f14:	5b                   	pop    ebx
c0016f15:	5e                   	pop    esi
c0016f16:	5f                   	pop    edi
c0016f17:	5d                   	pop    ebp
c0016f18:	c3                   	ret    
c0016f19:	90                   	nop

c0016f1a <Video::putTGA(int, int, unsigned char*, int)>:
c0016f1a:	55                   	push   ebp
c0016f1b:	57                   	push   edi
c0016f1c:	56                   	push   esi
c0016f1d:	53                   	push   ebx
c0016f1e:	83 ec 28             	sub    esp,0x28
c0016f21:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016f25:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016f29:	50                   	push   eax
c0016f2a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016f2e:	50                   	push   eax
c0016f2f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016f33:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016f37:	56                   	push   esi
c0016f38:	e8 75 fe ff ff       	call   c0016db2 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0016f3d:	83 c4 20             	add    esp,0x20
c0016f40:	85 c0                	test   eax,eax
c0016f42:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016f46:	74 35                	je     c0016f7d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016f48:	89 c7                	mov    edi,eax
c0016f4a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016f4e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016f52:	39 d8                	cmp    eax,ebx
c0016f54:	7e 27                	jle    c0016f7d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016f56:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016f5a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f5e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016f62:	39 e8                	cmp    eax,ebp
c0016f64:	7e 14                	jle    c0016f7a <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0016f66:	8b 06                	mov    eax,DWORD PTR [esi]
c0016f68:	83 c7 04             	add    edi,0x4
c0016f6b:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0016f6e:	53                   	push   ebx
c0016f6f:	55                   	push   ebp
c0016f70:	45                   	inc    ebp
c0016f71:	56                   	push   esi
c0016f72:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016f75:	83 c4 10             	add    esp,0x10
c0016f78:	eb e0                	jmp    c0016f5a <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0016f7a:	43                   	inc    ebx
c0016f7b:	eb cd                	jmp    c0016f4a <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0016f7d:	83 c4 1c             	add    esp,0x1c
c0016f80:	5b                   	pop    ebx
c0016f81:	5e                   	pop    esi
c0016f82:	5f                   	pop    edi
c0016f83:	5d                   	pop    ebp
c0016f84:	c3                   	ret    
c0016f85:	90                   	nop

c0016f86 <ACPI::close(int, int, void*)>:
c0016f86:	83 ec 1c             	sub    esp,0x1c
c0016f89:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0016f91:	74 0a                	je     c0016f9d <ACPI::close(int, int, void*)+0x17>
c0016f93:	b8 00 00 00 00       	mov    eax,0x0
c0016f98:	e9 8a 00 00 00       	jmp    c0017027 <ACPI::close(int, int, void*)+0xa1>
c0016f9d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016fa2:	75 27                	jne    c0016fcb <ACPI::close(int, int, void*)+0x45>
c0016fa4:	a1 08 fd 02 c0       	mov    eax,ds:0xc002fd08
c0016fa9:	85 c0                	test   eax,eax
c0016fab:	74 07                	je     c0016fb4 <ACPI::close(int, int, void*)+0x2e>
c0016fad:	a1 08 fd 02 c0       	mov    eax,ds:0xc002fd08
c0016fb2:	ff d0                	call   eax
c0016fb4:	83 ec 0c             	sub    esp,0xc
c0016fb7:	68 fc ad 02 c0       	push   0xc002adfc
c0016fbc:	e8 10 2d 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c0016fc1:	83 c4 10             	add    esp,0x10
c0016fc4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016fc9:	eb 5c                	jmp    c0017027 <ACPI::close(int, int, void*)+0xa1>
c0016fcb:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0016fd0:	75 50                	jne    c0017022 <ACPI::close(int, int, void*)+0x9c>
c0016fd2:	a1 04 fd 02 c0       	mov    eax,ds:0xc002fd04
c0016fd7:	85 c0                	test   eax,eax
c0016fd9:	74 07                	je     c0016fe2 <ACPI::close(int, int, void*)+0x5c>
c0016fdb:	a1 04 fd 02 c0       	mov    eax,ds:0xc002fd04
c0016fe0:	ff d0                	call   eax
c0016fe2:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0016fe7:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016fec:	83 e0 02             	and    eax,0x2
c0016fef:	74 1c                	je     c001700d <ACPI::close(int, int, void*)+0x87>
c0016ff1:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0016ff8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ffc:	89 c2                	mov    edx,eax
c0016ffe:	ec                   	in     al,dx
c0016fff:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017003:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017007:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001700b:	eb da                	jmp    c0016fe7 <ACPI::close(int, int, void*)+0x61>
c001700d:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017014:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001701d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017021:	ee                   	out    dx,al
c0017022:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017027:	83 c4 1c             	add    esp,0x1c
c001702a:	c3                   	ret    

c001702b <findRSDP()>:
c001702b:	83 ec 1c             	sub    esp,0x1c
c001702e:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c0017033:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017039:	83 e0 04             	and    eax,0x4
c001703c:	84 c0                	test   al,al
c001703e:	75 07                	jne    c0017047 <findRSDP()+0x1c>
c0017040:	b8 00 00 00 00       	mov    eax,0x0
c0017045:	eb 6a                	jmp    c00170b1 <findRSDP()+0x86>
c0017047:	a1 b4 d6 02 c0       	mov    eax,ds:0xc002d6b4
c001704c:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017051:	7f 1b                	jg     c001706e <findRSDP()+0x43>
c0017053:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c0017058:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001705e:	83 e2 fb             	and    edx,0xfffffffb
c0017061:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017067:	b8 00 00 00 00       	mov    eax,0x0
c001706c:	eb 43                	jmp    c00170b1 <findRSDP()+0x86>
c001706e:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017076:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001707e:	77 2c                	ja     c00170ac <findRSDP()+0x81>
c0017080:	83 ec 04             	sub    esp,0x4
c0017083:	6a 08                	push   0x8
c0017085:	68 97 ae 02 c0       	push   0xc002ae97
c001708a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001708e:	e8 b9 95 fe ff       	call   c000064c <memcmp>
c0017093:	83 c4 10             	add    esp,0x10
c0017096:	85 c0                	test   eax,eax
c0017098:	0f 94 c0             	sete   al
c001709b:	84 c0                	test   al,al
c001709d:	74 06                	je     c00170a5 <findRSDP()+0x7a>
c001709f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170a3:	eb 0c                	jmp    c00170b1 <findRSDP()+0x86>
c00170a5:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00170aa:	eb ca                	jmp    c0017076 <findRSDP()+0x4b>
c00170ac:	b8 00 00 00 00       	mov    eax,0x0
c00170b1:	83 c4 1c             	add    esp,0x1c
c00170b4:	c3                   	ret    

c00170b5 <loadACPITables(unsigned char*)>:
c00170b5:	57                   	push   edi
c00170b6:	56                   	push   esi
c00170b7:	53                   	push   ebx
c00170b8:	83 ec 60             	sub    esp,0x60
c00170bb:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c00170c0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00170c6:	83 e0 04             	and    eax,0x4
c00170c9:	84 c0                	test   al,al
c00170cb:	0f 84 33 02 00 00    	je     c0017304 <loadACPITables(unsigned char*)+0x24f>
c00170d1:	a0 20 ff 02 c0       	mov    al,ds:0xc002ff20
c00170d6:	84 c0                	test   al,al
c00170d8:	74 75                	je     c001714f <loadACPITables(unsigned char*)+0x9a>
c00170da:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00170de:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00170e2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00170e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00170e9:	83 e8 24             	sub    eax,0x24
c00170ec:	c1 e8 03             	shr    eax,0x3
c00170ef:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00170f3:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00170fb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00170ff:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0017103:	0f 8d b2 00 00 00    	jge    c00171bb <loadACPITables(unsigned char*)+0x106>
c0017109:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001710d:	83 c0 24             	add    eax,0x24
c0017110:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017114:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017118:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001711c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017120:	c1 e0 03             	shl    eax,0x3
c0017123:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0017127:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001712b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001712e:	8b 00                	mov    eax,DWORD PTR [eax]
c0017130:	89 c1                	mov    ecx,eax
c0017132:	a1 0c fd 02 c0       	mov    eax,ds:0xc002fd0c
c0017137:	8d 50 01             	lea    edx,[eax+0x1]
c001713a:	89 15 0c fd 02 c0    	mov    DWORD PTR ds:0xc002fd0c,edx
c0017140:	89 ca                	mov    edx,ecx
c0017142:	89 14 c5 24 fd 02 c0 	mov    DWORD PTR [eax*8-0x3ffd02dc],edx
c0017149:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001714d:	eb ac                	jmp    c00170fb <loadACPITables(unsigned char*)+0x46>
c001714f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017153:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017157:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001715b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001715e:	83 e8 24             	sub    eax,0x24
c0017161:	c1 e8 02             	shr    eax,0x2
c0017164:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017168:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0017170:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017174:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0017178:	7d 41                	jge    c00171bb <loadACPITables(unsigned char*)+0x106>
c001717a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001717e:	83 c0 24             	add    eax,0x24
c0017181:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017185:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017189:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001718d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017191:	c1 e0 02             	shl    eax,0x2
c0017194:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017198:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001719c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001719e:	a1 0c fd 02 c0       	mov    eax,ds:0xc002fd0c
c00171a3:	8d 50 01             	lea    edx,[eax+0x1]
c00171a6:	89 15 0c fd 02 c0    	mov    DWORD PTR ds:0xc002fd0c,edx
c00171ac:	89 ca                	mov    edx,ecx
c00171ae:	89 14 c5 24 fd 02 c0 	mov    DWORD PTR [eax*8-0x3ffd02dc],edx
c00171b5:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c00171b9:	eb b5                	jmp    c0017170 <loadACPITables(unsigned char*)+0xbb>
c00171bb:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00171c3:	a1 0c fd 02 c0       	mov    eax,ds:0xc002fd0c
c00171c8:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00171cc:	0f 8d 33 01 00 00    	jge    c0017305 <loadACPITables(unsigned char*)+0x250>
c00171d2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00171d6:	8b 04 c5 24 fd 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd02dc]
c00171dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00171e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00171e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00171e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00171ed:	25 ff 0f 00 00       	and    eax,0xfff
c00171f2:	89 c6                	mov    esi,eax
c00171f4:	8b 1d d0 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d7d0
c00171fa:	83 ec 0c             	sub    esp,0xc
c00171fd:	6a 01                	push   0x1
c00171ff:	e8 99 9f ff ff       	call   c001119d <Virt::allocateKernelVirtualPages(int)>
c0017204:	83 c4 10             	add    esp,0x10
c0017207:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001720b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017211:	83 ec 0c             	sub    esp,0xc
c0017214:	6a 01                	push   0x1
c0017216:	6a 01                	push   0x1
c0017218:	50                   	push   eax
c0017219:	52                   	push   edx
c001721a:	53                   	push   ebx
c001721b:	e8 30 aa ff ff       	call   c0011c50 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017220:	83 c4 20             	add    esp,0x20
c0017223:	09 f0                	or     eax,esi
c0017225:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017229:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001722d:	c1 e0 03             	shl    eax,0x3
c0017230:	05 20 fd 02 c0       	add    eax,0xc002fd20
c0017235:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017239:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001723d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017241:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0017249:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001724d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017251:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017255:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017259:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001725d:	89 c6                	mov    esi,eax
c001725f:	89 d7                	mov    edi,edx
c0017261:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017263:	89 c8                	mov    eax,ecx
c0017265:	89 fa                	mov    edx,edi
c0017267:	89 f3                	mov    ebx,esi
c0017269:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001726d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017271:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017275:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017279:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001727c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017280:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017284:	05 00 10 00 00       	add    eax,0x1000
c0017289:	c1 e8 0c             	shr    eax,0xc
c001728c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017290:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017294:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017298:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001729c:	25 ff 0f 00 00       	and    eax,0xfff
c00172a1:	89 c6                	mov    esi,eax
c00172a3:	8b 1d d0 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d7d0
c00172a9:	83 ec 0c             	sub    esp,0xc
c00172ac:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00172b0:	e8 e8 9e ff ff       	call   c001119d <Virt::allocateKernelVirtualPages(int)>
c00172b5:	83 c4 10             	add    esp,0x10
c00172b8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00172bc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00172c2:	83 ec 0c             	sub    esp,0xc
c00172c5:	6a 01                	push   0x1
c00172c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00172cb:	50                   	push   eax
c00172cc:	52                   	push   edx
c00172cd:	53                   	push   ebx
c00172ce:	e8 7d a9 ff ff       	call   c0011c50 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00172d3:	83 c4 20             	add    esp,0x20
c00172d6:	09 f0                	or     eax,esi
c00172d8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00172dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172e0:	83 ec 0c             	sub    esp,0xc
c00172e3:	50                   	push   eax
c00172e4:	e8 fa a2 ff ff       	call   c00115e3 <Virt::freeKernelVirtualPages(unsigned long)>
c00172e9:	83 c4 10             	add    esp,0x10
c00172ec:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00172f0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00172f4:	89 14 c5 24 fd 02 c0 	mov    DWORD PTR [eax*8-0x3ffd02dc],edx
c00172fb:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c00172ff:	e9 bf fe ff ff       	jmp    c00171c3 <loadACPITables(unsigned char*)+0x10e>
c0017304:	90                   	nop
c0017305:	83 c4 60             	add    esp,0x60
c0017308:	5b                   	pop    ebx
c0017309:	5e                   	pop    esi
c001730a:	5f                   	pop    edi
c001730b:	c3                   	ret    

c001730c <findRSDT(unsigned char*)>:
c001730c:	57                   	push   edi
c001730d:	56                   	push   esi
c001730e:	53                   	push   ebx
c001730f:	83 ec 50             	sub    esp,0x50
c0017312:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c0017317:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001731d:	83 e0 04             	and    eax,0x4
c0017320:	84 c0                	test   al,al
c0017322:	75 0a                	jne    c001732e <findRSDT(unsigned char*)+0x22>
c0017324:	b8 00 00 00 00       	mov    eax,0x0
c0017329:	e9 21 01 00 00       	jmp    c001744f <findRSDT(unsigned char*)+0x143>
c001732e:	89 e0                	mov    eax,esp
c0017330:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017334:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017338:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001733c:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0017344:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017348:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001734c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017350:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017354:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0017358:	89 c6                	mov    esi,eax
c001735a:	89 d7                	mov    edi,edx
c001735c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001735e:	89 c8                	mov    eax,ecx
c0017360:	89 fa                	mov    edx,edi
c0017362:	89 f3                	mov    ebx,esi
c0017364:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017368:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001736c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017370:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017374:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0017378:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0017380:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017384:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017388:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001738c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017390:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017394:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017398:	25 ff 0f 00 00       	and    eax,0xfff
c001739d:	89 c6                	mov    esi,eax
c001739f:	8b 1d d0 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d7d0
c00173a5:	83 ec 0c             	sub    esp,0xc
c00173a8:	6a 02                	push   0x2
c00173aa:	e8 ee 9d ff ff       	call   c001119d <Virt::allocateKernelVirtualPages(int)>
c00173af:	83 c4 10             	add    esp,0x10
c00173b2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00173b6:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00173bc:	83 ec 0c             	sub    esp,0xc
c00173bf:	6a 01                	push   0x1
c00173c1:	6a 02                	push   0x2
c00173c3:	50                   	push   eax
c00173c4:	52                   	push   edx
c00173c5:	53                   	push   ebx
c00173c6:	e8 85 a8 ff ff       	call   c0011c50 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00173cb:	83 c4 20             	add    esp,0x20
c00173ce:	09 f0                	or     eax,esi
c00173d0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00173d4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00173d8:	25 ff 0f 00 00       	and    eax,0xfff
c00173dd:	89 c6                	mov    esi,eax
c00173df:	8b 1d d0 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d7d0
c00173e5:	83 ec 0c             	sub    esp,0xc
c00173e8:	6a 02                	push   0x2
c00173ea:	e8 ae 9d ff ff       	call   c001119d <Virt::allocateKernelVirtualPages(int)>
c00173ef:	83 c4 10             	add    esp,0x10
c00173f2:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00173f6:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00173fc:	83 ec 0c             	sub    esp,0xc
c00173ff:	6a 01                	push   0x1
c0017401:	6a 02                	push   0x2
c0017403:	50                   	push   eax
c0017404:	52                   	push   edx
c0017405:	53                   	push   ebx
c0017406:	e8 45 a8 ff ff       	call   c0011c50 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001740b:	83 c4 20             	add    esp,0x20
c001740e:	09 f0                	or     eax,esi
c0017410:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017414:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0017419:	75 11                	jne    c001742c <findRSDT(unsigned char*)+0x120>
c001741b:	c6 05 20 ff 02 c0 00 	mov    BYTE PTR ds:0xc002ff20,0x0
c0017422:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017426:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001742a:	eb 1f                	jmp    c001744b <findRSDT(unsigned char*)+0x13f>
c001742c:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0017431:	75 11                	jne    c0017444 <findRSDT(unsigned char*)+0x138>
c0017433:	c6 05 20 ff 02 c0 01 	mov    BYTE PTR ds:0xc002ff20,0x1
c001743a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001743e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017442:	eb 07                	jmp    c001744b <findRSDT(unsigned char*)+0x13f>
c0017444:	b8 00 00 00 00       	mov    eax,0x0
c0017449:	eb 04                	jmp    c001744f <findRSDT(unsigned char*)+0x143>
c001744b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001744f:	83 c4 50             	add    esp,0x50
c0017452:	5b                   	pop    ebx
c0017453:	5e                   	pop    esi
c0017454:	5f                   	pop    edi
c0017455:	c3                   	ret    

c0017456 <findDataTable(unsigned char*, char*)>:
c0017456:	83 ec 1c             	sub    esp,0x1c
c0017459:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c001745e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017464:	83 e0 04             	and    eax,0x4
c0017467:	84 c0                	test   al,al
c0017469:	75 07                	jne    c0017472 <findDataTable(unsigned char*, char*)+0x1c>
c001746b:	b8 00 00 00 00       	mov    eax,0x0
c0017470:	eb 52                	jmp    c00174c4 <findDataTable(unsigned char*, char*)+0x6e>
c0017472:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001747a:	a1 0c fd 02 c0       	mov    eax,ds:0xc002fd0c
c001747f:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017483:	7d 3a                	jge    c00174bf <findDataTable(unsigned char*, char*)+0x69>
c0017485:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017489:	c1 e0 03             	shl    eax,0x3
c001748c:	05 20 fd 02 c0       	add    eax,0xc002fd20
c0017491:	83 ec 04             	sub    esp,0x4
c0017494:	6a 04                	push   0x4
c0017496:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001749a:	50                   	push   eax
c001749b:	e8 ac 91 fe ff       	call   c000064c <memcmp>
c00174a0:	83 c4 10             	add    esp,0x10
c00174a3:	85 c0                	test   eax,eax
c00174a5:	0f 94 c0             	sete   al
c00174a8:	84 c0                	test   al,al
c00174aa:	74 0d                	je     c00174b9 <findDataTable(unsigned char*, char*)+0x63>
c00174ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174b0:	8b 04 c5 24 fd 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd02dc]
c00174b7:	eb 0b                	jmp    c00174c4 <findDataTable(unsigned char*, char*)+0x6e>
c00174b9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00174bd:	eb bb                	jmp    c001747a <findDataTable(unsigned char*, char*)+0x24>
c00174bf:	b8 00 00 00 00       	mov    eax,0x0
c00174c4:	83 c4 1c             	add    esp,0x1c
c00174c7:	c3                   	ret    

c00174c8 <scanMADT()>:
c00174c8:	53                   	push   ebx
c00174c9:	83 ec 38             	sub    esp,0x38
c00174cc:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c00174d1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00174d7:	83 e0 04             	and    eax,0x4
c00174da:	84 c0                	test   al,al
c00174dc:	0f 84 4a 04 00 00    	je     c001792c <scanMADT()+0x464>
c00174e2:	e8 44 fb ff ff       	call   c001702b <findRSDP()>
c00174e7:	a3 2c ff 02 c0       	mov    ds:0xc002ff2c,eax
c00174ec:	a1 2c ff 02 c0       	mov    eax,ds:0xc002ff2c
c00174f1:	85 c0                	test   eax,eax
c00174f3:	75 19                	jne    c001750e <scanMADT()+0x46>
c00174f5:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c00174fa:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017500:	83 e2 fb             	and    edx,0xfffffffb
c0017503:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017509:	e9 22 04 00 00       	jmp    c0017930 <scanMADT()+0x468>
c001750e:	a1 2c ff 02 c0       	mov    eax,ds:0xc002ff2c
c0017513:	83 ec 0c             	sub    esp,0xc
c0017516:	50                   	push   eax
c0017517:	e8 f0 fd ff ff       	call   c001730c <findRSDT(unsigned char*)>
c001751c:	83 c4 10             	add    esp,0x10
c001751f:	a3 28 ff 02 c0       	mov    ds:0xc002ff28,eax
c0017524:	a1 28 ff 02 c0       	mov    eax,ds:0xc002ff28
c0017529:	85 c0                	test   eax,eax
c001752b:	75 19                	jne    c0017546 <scanMADT()+0x7e>
c001752d:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c0017532:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017538:	83 e2 fb             	and    edx,0xfffffffb
c001753b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017541:	e9 ea 03 00 00       	jmp    c0017930 <scanMADT()+0x468>
c0017546:	a1 28 ff 02 c0       	mov    eax,ds:0xc002ff28
c001754b:	83 ec 0c             	sub    esp,0xc
c001754e:	50                   	push   eax
c001754f:	e8 61 fb ff ff       	call   c00170b5 <loadACPITables(unsigned char*)>
c0017554:	83 c4 10             	add    esp,0x10
c0017557:	a1 28 ff 02 c0       	mov    eax,ds:0xc002ff28
c001755c:	83 ec 08             	sub    esp,0x8
c001755f:	68 a0 ae 02 c0       	push   0xc002aea0
c0017564:	50                   	push   eax
c0017565:	e8 ec fe ff ff       	call   c0017456 <findDataTable(unsigned char*, char*)>
c001756a:	83 c4 10             	add    esp,0x10
c001756d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017571:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017576:	75 19                	jne    c0017591 <scanMADT()+0xc9>
c0017578:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c001757d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017583:	83 e2 fe             	and    edx,0xfffffffe
c0017586:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001758c:	e9 9f 03 00 00       	jmp    c0017930 <scanMADT()+0x468>
c0017591:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017599:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001759d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00175a0:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00175a4:	0f 87 86 03 00 00    	ja     c0017930 <scanMADT()+0x468>
c00175aa:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c00175b2:	0f 87 78 03 00 00    	ja     c0017930 <scanMADT()+0x468>
c00175b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175bc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00175c0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175c4:	8d 50 01             	lea    edx,[eax+0x1]
c00175c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00175cb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00175cf:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00175d3:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00175d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175db:	8d 50 01             	lea    edx,[eax+0x1]
c00175de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00175e2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00175e6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00175ea:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00175ee:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c00175f3:	0f 86 36 03 00 00    	jbe    c001792f <scanMADT()+0x467>
c00175f9:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c00175fe:	75 57                	jne    c0017657 <scanMADT()+0x18f>
c0017600:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017604:	8d 50 01             	lea    edx,[eax+0x1]
c0017607:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001760b:	8a 15 20 01 03 c0    	mov    dl,BYTE PTR ds:0xc0030120
c0017611:	0f b6 d2             	movzx  edx,dl
c0017614:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017618:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001761c:	88 82 60 01 03 c0    	mov    BYTE PTR [edx-0x3ffcfea0],al
c0017622:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017626:	8d 50 01             	lea    edx,[eax+0x1]
c0017629:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001762d:	8a 15 20 01 03 c0    	mov    dl,BYTE PTR ds:0xc0030120
c0017633:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017636:	88 0d 20 01 03 c0    	mov    BYTE PTR ds:0xc0030120,cl
c001763c:	0f b6 d2             	movzx  edx,dl
c001763f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017643:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017647:	88 82 40 01 03 c0    	mov    BYTE PTR [edx-0x3ffcfec0],al
c001764d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017652:	e9 c1 02 00 00       	jmp    c0017918 <scanMADT()+0x450>
c0017657:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c001765c:	0f 85 14 01 00 00    	jne    c0017776 <scanMADT()+0x2ae>
c0017662:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017666:	8d 50 01             	lea    edx,[eax+0x1]
c0017669:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001766d:	8a 15 e0 ff 02 c0    	mov    dl,BYTE PTR ds:0xc002ffe0
c0017673:	0f b6 d2             	movzx  edx,dl
c0017676:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001767a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001767e:	88 82 00 00 03 c0    	mov    BYTE PTR [edx-0x3ffd0000],al
c0017684:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017688:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001768c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017690:	01 d0                	add    eax,edx
c0017692:	83 c0 2c             	add    eax,0x2c
c0017695:	8a 00                	mov    al,BYTE PTR [eax]
c0017697:	0f b6 d0             	movzx  edx,al
c001769a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001769e:	8d 48 01             	lea    ecx,[eax+0x1]
c00176a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00176a5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00176a9:	0f b6 c0             	movzx  eax,al
c00176ac:	c1 e0 08             	shl    eax,0x8
c00176af:	89 d1                	mov    ecx,edx
c00176b1:	09 c1                	or     ecx,eax
c00176b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176b7:	8d 50 02             	lea    edx,[eax+0x2]
c00176ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00176be:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00176c2:	0f b6 c0             	movzx  eax,al
c00176c5:	c1 e0 10             	shl    eax,0x10
c00176c8:	09 c1                	or     ecx,eax
c00176ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176ce:	8d 50 03             	lea    edx,[eax+0x3]
c00176d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00176d5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00176d9:	0f b6 c0             	movzx  eax,al
c00176dc:	c1 e0 18             	shl    eax,0x18
c00176df:	09 c1                	or     ecx,eax
c00176e1:	89 ca                	mov    edx,ecx
c00176e3:	a0 e0 ff 02 c0       	mov    al,ds:0xc002ffe0
c00176e8:	0f b6 c0             	movzx  eax,al
c00176eb:	89 14 85 20 00 03 c0 	mov    DWORD PTR [eax*4-0x3ffcffe0],edx
c00176f2:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00176f7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00176fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176ff:	01 d0                	add    eax,edx
c0017701:	83 c0 2c             	add    eax,0x2c
c0017704:	8a 00                	mov    al,BYTE PTR [eax]
c0017706:	0f b6 d0             	movzx  edx,al
c0017709:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001770d:	8d 48 01             	lea    ecx,[eax+0x1]
c0017710:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017714:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017718:	0f b6 c0             	movzx  eax,al
c001771b:	c1 e0 08             	shl    eax,0x8
c001771e:	89 d1                	mov    ecx,edx
c0017720:	09 c1                	or     ecx,eax
c0017722:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017726:	8d 50 02             	lea    edx,[eax+0x2]
c0017729:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001772d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017731:	0f b6 c0             	movzx  eax,al
c0017734:	c1 e0 10             	shl    eax,0x10
c0017737:	09 c1                	or     ecx,eax
c0017739:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001773d:	8d 50 03             	lea    edx,[eax+0x3]
c0017740:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017744:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017748:	0f b6 c0             	movzx  eax,al
c001774b:	c1 e0 18             	shl    eax,0x18
c001774e:	09 c1                	or     ecx,eax
c0017750:	89 ca                	mov    edx,ecx
c0017752:	a0 e0 ff 02 c0       	mov    al,ds:0xc002ffe0
c0017757:	0f b6 c0             	movzx  eax,al
c001775a:	89 14 85 a0 00 03 c0 	mov    DWORD PTR [eax*4-0x3ffcff60],edx
c0017761:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017766:	a0 e0 ff 02 c0       	mov    al,ds:0xc002ffe0
c001776b:	40                   	inc    eax
c001776c:	a2 e0 ff 02 c0       	mov    ds:0xc002ffe0,al
c0017771:	e9 a2 01 00 00       	jmp    c0017918 <scanMADT()+0x450>
c0017776:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c001777b:	0f 85 e9 00 00 00    	jne    c001786a <scanMADT()+0x3a2>
c0017781:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017785:	8d 50 01             	lea    edx,[eax+0x1]
c0017788:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001778c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017790:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017794:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017798:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001779c:	8d 50 01             	lea    edx,[eax+0x1]
c001779f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00177a3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177a7:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00177ab:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00177af:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177b7:	01 d0                	add    eax,edx
c00177b9:	83 c0 2c             	add    eax,0x2c
c00177bc:	8a 00                	mov    al,BYTE PTR [eax]
c00177be:	0f b6 d0             	movzx  edx,al
c00177c1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177c5:	8d 48 01             	lea    ecx,[eax+0x1]
c00177c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177cc:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00177d0:	0f b6 c0             	movzx  eax,al
c00177d3:	c1 e0 08             	shl    eax,0x8
c00177d6:	89 d1                	mov    ecx,edx
c00177d8:	09 c1                	or     ecx,eax
c00177da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177de:	8d 50 02             	lea    edx,[eax+0x2]
c00177e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177e5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00177e9:	0f b6 c0             	movzx  eax,al
c00177ec:	c1 e0 10             	shl    eax,0x10
c00177ef:	09 c1                	or     ecx,eax
c00177f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177f5:	8d 50 03             	lea    edx,[eax+0x3]
c00177f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177fc:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017800:	0f b6 c0             	movzx  eax,al
c0017803:	c1 e0 18             	shl    eax,0x18
c0017806:	09 c8                	or     eax,ecx
c0017808:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001780c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017811:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017815:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017819:	01 d0                	add    eax,edx
c001781b:	83 c0 2c             	add    eax,0x2c
c001781e:	8a 00                	mov    al,BYTE PTR [eax]
c0017820:	0f b6 c0             	movzx  eax,al
c0017823:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017827:	8d 4a 01             	lea    ecx,[edx+0x1]
c001782a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001782e:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017832:	0f b6 d2             	movzx  edx,dl
c0017835:	c1 e2 08             	shl    edx,0x8
c0017838:	09 d0                	or     eax,edx
c001783a:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001783f:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017844:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017849:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001784d:	88 90 c0 c8 02 c0    	mov    BYTE PTR [eax-0x3ffd3740],dl
c0017853:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017858:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001785d:	66 89 84 12 c0 ff 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd0040],ax
c0017865:	e9 ae 00 00 00       	jmp    c0017918 <scanMADT()+0x450>
c001786a:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c001786f:	0f 85 97 00 00 00    	jne    c001790c <scanMADT()+0x444>
c0017875:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017879:	8d 50 01             	lea    edx,[eax+0x1]
c001787c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017880:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017884:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017888:	0f b6 c0             	movzx  eax,al
c001788b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001788f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017893:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017897:	01 d0                	add    eax,edx
c0017899:	83 c0 2c             	add    eax,0x2c
c001789c:	8a 00                	mov    al,BYTE PTR [eax]
c001789e:	0f b6 d0             	movzx  edx,al
c00178a1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178a5:	8d 48 01             	lea    ecx,[eax+0x1]
c00178a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178ac:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00178b0:	0f b6 c0             	movzx  eax,al
c00178b3:	c1 e0 08             	shl    eax,0x8
c00178b6:	09 d0                	or     eax,edx
c00178b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00178bc:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00178c1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178c5:	8d 50 01             	lea    edx,[eax+0x1]
c00178c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00178cc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178d0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00178d4:	0f b6 c0             	movzx  eax,al
c00178d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00178db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178df:	c1 e0 08             	shl    eax,0x8
c00178e2:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00178e6:	89 c1                	mov    ecx,eax
c00178e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178ec:	c1 e0 18             	shl    eax,0x18
c00178ef:	89 c3                	mov    ebx,eax
c00178f1:	a1 30 ff 02 c0       	mov    eax,ds:0xc002ff30
c00178f6:	8d 50 01             	lea    edx,[eax+0x1]
c00178f9:	89 15 30 ff 02 c0    	mov    DWORD PTR ds:0xc002ff30,edx
c00178ff:	09 d9                	or     ecx,ebx
c0017901:	89 ca                	mov    edx,ecx
c0017903:	89 14 85 40 ff 02 c0 	mov    DWORD PTR [eax*4-0x3ffd00c0],edx
c001790a:	eb 0c                	jmp    c0017918 <scanMADT()+0x450>
c001790c:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017911:	75 05                	jne    c0017918 <scanMADT()+0x450>
c0017913:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017918:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001791d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017921:	01 d0                	add    eax,edx
c0017923:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017927:	e9 6d fc ff ff       	jmp    c0017599 <scanMADT()+0xd1>
c001792c:	90                   	nop
c001792d:	eb 01                	jmp    c0017930 <scanMADT()+0x468>
c001792f:	90                   	nop
c0017930:	83 c4 38             	add    esp,0x38
c0017933:	5b                   	pop    ebx
c0017934:	c3                   	ret    
c0017935:	90                   	nop

c0017936 <ACPI::ACPI()>:
c0017936:	83 ec 0c             	sub    esp,0xc
c0017939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001793d:	83 ec 08             	sub    esp,0x8
c0017940:	68 a5 ae 02 c0       	push   0xc002aea5
c0017945:	50                   	push   eax
c0017946:	e8 63 c2 ff ff       	call   c0013bae <Device::Device(char const*)>
c001794b:	83 c4 10             	add    esp,0x10
c001794e:	ba 00 b0 02 c0       	mov    edx,0xc002b000
c0017953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017957:	89 10                	mov    DWORD PTR [eax],edx
c0017959:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001795d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017968:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017976:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017980:	e8 43 fb ff ff       	call   c00174c8 <scanMADT()>
c0017985:	90                   	nop
c0017986:	83 c4 0c             	add    esp,0xc
c0017989:	c3                   	ret    

c001798a <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001798a:	83 ec 2c             	sub    esp,0x2c
c001798d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017991:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017995:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017999:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001799d:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00179a2:	88 d0                	mov    al,dl
c00179a4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00179a8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00179ad:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00179b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00179b9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00179bf:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00179c3:	0f 8d 97 00 00 00    	jge    c0017a60 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00179c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00179cd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00179d1:	83 c2 2a             	add    edx,0x2a
c00179d4:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00179d8:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00179dd:	75 78                	jne    c0017a57 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00179df:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00179e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00179e7:	83 c2 2a             	add    edx,0x2a
c00179ea:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00179ee:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00179f2:	75 63                	jne    c0017a57 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00179f4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00179f9:	74 3a                	je     c0017a35 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00179fb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00179ff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017a03:	83 c2 2a             	add    edx,0x2a
c0017a06:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017a0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a11:	39 c2                	cmp    edx,eax
c0017a13:	74 10                	je     c0017a25 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017a15:	83 ec 0c             	sub    esp,0xc
c0017a18:	68 20 ae 02 c0       	push   0xc002ae20
c0017a1d:	e8 af 22 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c0017a22:	83 c4 10             	add    esp,0x10
c0017a25:	83 ec 0c             	sub    esp,0xc
c0017a28:	68 aa ae 02 c0       	push   0xc002aeaa
c0017a2d:	e8 9f 22 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c0017a32:	83 c4 10             	add    esp,0x10
c0017a35:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017a39:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a3d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017a41:	83 c2 2a             	add    edx,0x2a
c0017a44:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017a48:	8b 02                	mov    eax,DWORD PTR [edx]
c0017a4a:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017a4d:	89 01                	mov    DWORD PTR [ecx],eax
c0017a4f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017a52:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017a57:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017a5b:	e9 55 ff ff ff       	jmp    c00179b5 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017a60:	90                   	nop
c0017a61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a65:	83 c4 2c             	add    esp,0x2c
c0017a68:	c2 04 00             	ret    0x4
c0017a6b:	90                   	nop

c0017a6c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017a6c:	83 ec 1c             	sub    esp,0x1c
c0017a6f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a73:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017a77:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017a7b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017a80:	88 c8                	mov    al,cl
c0017a82:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017a86:	88 d0                	mov    al,dl
c0017a88:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017a8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a90:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017a96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a9a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017a9d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017aa1:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017aa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017aa9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017aaf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017ab3:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017ab6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017aba:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017abf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ac3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017ac9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017acd:	8d 48 01             	lea    ecx,[eax+0x1]
c0017ad0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ad4:	83 c2 2a             	add    edx,0x2a
c0017ad7:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017adb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017adf:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017ae5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ae9:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017aec:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017af0:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017af4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017af8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017afe:	8d 50 01             	lea    edx,[eax+0x1]
c0017b01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b05:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017b0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b0f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017b15:	3d 00 02 00 00       	cmp    eax,0x200
c0017b1a:	75 10                	jne    c0017b2c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017b1c:	83 ec 0c             	sub    esp,0xc
c0017b1f:	68 b9 ae 02 c0       	push   0xc002aeb9
c0017b24:	e8 a8 21 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c0017b29:	83 c4 10             	add    esp,0x10
c0017b2c:	90                   	nop
c0017b2d:	83 c4 1c             	add    esp,0x1c
c0017b30:	c3                   	ret    
c0017b31:	90                   	nop

c0017b32 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017b32:	b8 00 00 00 00       	mov    eax,0x0
c0017b37:	c3                   	ret    

c0017b38 <ACPI::detectPCI()>:
c0017b38:	53                   	push   ebx
c0017b39:	83 ec 28             	sub    esp,0x28
c0017b3c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017b41:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017b46:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c0017b4b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017b51:	83 e0 04             	and    eax,0x4
c0017b54:	84 c0                	test   al,al
c0017b56:	74 2b                	je     c0017b83 <ACPI::detectPCI()+0x4b>
c0017b58:	a1 28 ff 02 c0       	mov    eax,ds:0xc002ff28
c0017b5d:	83 ec 08             	sub    esp,0x8
c0017b60:	68 d6 ae 02 c0       	push   0xc002aed6
c0017b65:	50                   	push   eax
c0017b66:	e8 eb f8 ff ff       	call   c0017456 <findDataTable(unsigned char*, char*)>
c0017b6b:	83 c4 10             	add    esp,0x10
c0017b6e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b72:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017b77:	74 0a                	je     c0017b83 <ACPI::detectPCI()+0x4b>
c0017b79:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017b7e:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017b83:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0017b8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b8f:	8a 00                	mov    al,BYTE PTR [eax]
c0017b91:	3c 01                	cmp    al,0x1
c0017b93:	75 0c                	jne    c0017ba1 <ACPI::detectPCI()+0x69>
c0017b95:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017b9a:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017b9f:	eb 26                	jmp    c0017bc7 <ACPI::detectPCI()+0x8f>
c0017ba1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ba5:	8a 00                	mov    al,BYTE PTR [eax]
c0017ba7:	3c 02                	cmp    al,0x2
c0017ba9:	75 1c                	jne    c0017bc7 <ACPI::detectPCI()+0x8f>
c0017bab:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017bb0:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017bb5:	74 10                	je     c0017bc7 <ACPI::detectPCI()+0x8f>
c0017bb7:	83 ec 0c             	sub    esp,0xc
c0017bba:	68 50 ae 02 c0       	push   0xc002ae50
c0017bbf:	e8 0d 21 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c0017bc4:	83 c4 10             	add    esp,0x10
c0017bc7:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017bcb:	83 f0 01             	xor    eax,0x1
c0017bce:	84 c0                	test   al,al
c0017bd0:	74 3f                	je     c0017c11 <ACPI::detectPCI()+0xd9>
c0017bd2:	e8 79 85 fe ff       	call   c0000150 <manualPCIProbe>
c0017bd7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017bdb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017be0:	75 0c                	jne    c0017bee <ACPI::detectPCI()+0xb6>
c0017be2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017be7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017bec:	eb 23                	jmp    c0017c11 <ACPI::detectPCI()+0xd9>
c0017bee:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0017bf3:	75 1c                	jne    c0017c11 <ACPI::detectPCI()+0xd9>
c0017bf5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017bfa:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017bff:	74 10                	je     c0017c11 <ACPI::detectPCI()+0xd9>
c0017c01:	83 ec 0c             	sub    esp,0xc
c0017c04:	68 50 ae 02 c0       	push   0xc002ae50
c0017c09:	e8 c3 20 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c0017c0e:	83 c4 10             	add    esp,0x10
c0017c11:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017c16:	74 7e                	je     c0017c96 <ACPI::detectPCI()+0x15e>
c0017c18:	83 ec 0c             	sub    esp,0xc
c0017c1b:	68 db ae 02 c0       	push   0xc002aedb
c0017c20:	e8 ce 79 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017c25:	83 c4 10             	add    esp,0x10
c0017c28:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0017c30:	83 ec 0c             	sub    esp,0xc
c0017c33:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017c37:	e8 5d 79 ff ff       	call   c000f599 <malloc>
c0017c3c:	83 c4 10             	add    esp,0x10
c0017c3f:	89 c3                	mov    ebx,eax
c0017c41:	83 ec 0c             	sub    esp,0xc
c0017c44:	53                   	push   ebx
c0017c45:	e8 aa a5 00 00       	call   c00221f4 <PCI::PCI()>
c0017c4a:	83 c4 10             	add    esp,0x10
c0017c4d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017c51:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c55:	83 ec 08             	sub    esp,0x8
c0017c58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017c5c:	50                   	push   eax
c0017c5d:	e8 48 bd ff ff       	call   c00139aa <Device::addChild(Device*)>
c0017c62:	83 c4 10             	add    esp,0x10
c0017c65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c69:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c6b:	83 c0 08             	add    eax,0x8
c0017c6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c70:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017c75:	74 07                	je     c0017c7e <ACPI::detectPCI()+0x146>
c0017c77:	ba 01 00 00 00       	mov    edx,0x1
c0017c7c:	eb 05                	jmp    c0017c83 <ACPI::detectPCI()+0x14b>
c0017c7e:	ba 02 00 00 00       	mov    edx,0x2
c0017c83:	6a 00                	push   0x0
c0017c85:	6a 00                	push   0x0
c0017c87:	52                   	push   edx
c0017c88:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017c8c:	ff d0                	call   eax
c0017c8e:	83 c4 10             	add    esp,0x10
c0017c91:	e9 9e 00 00 00       	jmp    c0017d34 <ACPI::detectPCI()+0x1fc>
c0017c96:	83 ec 0c             	sub    esp,0xc
c0017c99:	68 f3 ae 02 c0       	push   0xc002aef3
c0017c9e:	e8 ce a8 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0017ca3:	83 c4 10             	add    esp,0x10
c0017ca6:	83 ec 0c             	sub    esp,0xc
c0017ca9:	68 fe ae 02 c0       	push   0xc002aefe
c0017cae:	e8 40 79 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017cb3:	83 c4 10             	add    esp,0x10
c0017cb6:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0017cbd:	83 ec 0c             	sub    esp,0xc
c0017cc0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017cc4:	e8 d0 78 ff ff       	call   c000f599 <malloc>
c0017cc9:	83 c4 10             	add    esp,0x10
c0017ccc:	89 c3                	mov    ebx,eax
c0017cce:	83 ec 0c             	sub    esp,0xc
c0017cd1:	53                   	push   ebx
c0017cd2:	e8 87 b0 00 00       	call   c0022d5e <IDE::IDE()>
c0017cd7:	83 c4 10             	add    esp,0x10
c0017cda:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0017cde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ce2:	83 ec 08             	sub    esp,0x8
c0017ce5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017ce9:	50                   	push   eax
c0017cea:	e8 bb bc ff ff       	call   c00139aa <Device::addChild(Device*)>
c0017cef:	83 c4 10             	add    esp,0x10
c0017cf2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017cf6:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0017d00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d04:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0017d0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d11:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0017d1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d20:	83 c0 08             	add    eax,0x8
c0017d23:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d25:	6a 00                	push   0x0
c0017d27:	6a 00                	push   0x0
c0017d29:	6a 00                	push   0x0
c0017d2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017d2f:	ff d0                	call   eax
c0017d31:	83 c4 10             	add    esp,0x10
c0017d34:	90                   	nop
c0017d35:	83 c4 28             	add    esp,0x28
c0017d38:	5b                   	pop    ebx
c0017d39:	c3                   	ret    

c0017d3a <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017d3a:	83 ec 1c             	sub    esp,0x1c
c0017d3d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d41:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017d44:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017d48:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c0017d4d:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017d52:	83 ec 08             	sub    esp,0x8
c0017d55:	52                   	push   edx
c0017d56:	50                   	push   eax
c0017d57:	e8 54 6e ff ff       	call   c000ebb0 <Computer::readCMOS(unsigned char)>
c0017d5c:	83 c4 10             	add    esp,0x10
c0017d5f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017d63:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c0017d68:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017d6d:	83 ec 04             	sub    esp,0x4
c0017d70:	6a 01                	push   0x1
c0017d72:	52                   	push   edx
c0017d73:	50                   	push   eax
c0017d74:	e8 69 6f ff ff       	call   c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017d79:	83 c4 10             	add    esp,0x10
c0017d7c:	90                   	nop
c0017d7d:	83 c4 1c             	add    esp,0x1c
c0017d80:	c3                   	ret    
c0017d81:	90                   	nop

c0017d82 <ACPI::sleep()>:
c0017d82:	83 ec 0c             	sub    esp,0xc
c0017d85:	a1 00 fd 02 c0       	mov    eax,ds:0xc002fd00
c0017d8a:	85 c0                	test   eax,eax
c0017d8c:	74 07                	je     c0017d95 <ACPI::sleep()+0x13>
c0017d8e:	a1 00 fd 02 c0       	mov    eax,ds:0xc002fd00
c0017d93:	ff d0                	call   eax
c0017d95:	90                   	nop
c0017d96:	83 c4 0c             	add    esp,0xc
c0017d99:	c3                   	ret    

c0017d9a <ACPI::open(int, int, void*)>:
c0017d9a:	57                   	push   edi
c0017d9b:	56                   	push   esi
c0017d9c:	53                   	push   ebx
c0017d9d:	81 ec 60 01 00 00    	sub    esp,0x160
c0017da3:	83 ec 0c             	sub    esp,0xc
c0017da6:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0017dad:	e8 86 fd ff ff       	call   c0017b38 <ACPI::detectPCI()>
c0017db2:	83 c4 10             	add    esp,0x10
c0017db5:	83 ec 0c             	sub    esp,0xc
c0017db8:	68 78 ae 02 c0       	push   0xc002ae78
c0017dbd:	e8 31 78 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017dc2:	83 c4 10             	add    esp,0x10
c0017dc5:	83 ec 0c             	sub    esp,0xc
c0017dc8:	68 13 af 02 c0       	push   0xc002af13
c0017dcd:	e8 52 46 00 00       	call   c001c424 <Thr::loadKernelSymbolTable(char const*)>
c0017dd2:	83 c4 10             	add    esp,0x10
c0017dd5:	83 ec 0c             	sub    esp,0xc
c0017dd8:	68 31 af 02 c0       	push   0xc002af31
c0017ddd:	e8 11 78 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017de2:	83 c4 10             	add    esp,0x10
c0017de5:	83 ec 04             	sub    esp,0x4
c0017de8:	6a 0c                	push   0xc
c0017dea:	68 4c af 02 c0       	push   0xc002af4c
c0017def:	68 5d af 02 c0       	push   0xc002af5d
c0017df4:	e8 94 2c 00 00       	call   c001aa8d <Reg::readIntWithDefault(char*, char*, int)>
c0017df9:	83 c4 10             	add    esp,0x10
c0017dfc:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0017e03:	83 ec 0c             	sub    esp,0xc
c0017e06:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c0017e0d:	e8 95 95 ff ff       	call   c00113a7 <Virt::setupPageSwapping(int)>
c0017e12:	83 c4 10             	add    esp,0x10
c0017e15:	83 ec 0c             	sub    esp,0xc
c0017e18:	68 95 9c 02 c0       	push   0xc0029c95
c0017e1d:	e8 d1 77 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017e22:	83 c4 10             	add    esp,0x10
c0017e25:	8b 1d 68 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d668
c0017e2b:	83 ec 08             	sub    esp,0x8
c0017e2e:	6a 01                	push   0x1
c0017e30:	68 64 af 02 c0       	push   0xc002af64
c0017e35:	e8 61 50 00 00       	call   c001ce9b <Thr::loadDLL(char const*, bool)>
c0017e3a:	83 c4 10             	add    esp,0x10
c0017e3d:	83 ec 08             	sub    esp,0x8
c0017e40:	53                   	push   ebx
c0017e41:	50                   	push   eax
c0017e42:	e8 7f 52 00 00       	call   c001d0c6 <Thr::executeDLL(unsigned long, void*)>
c0017e47:	83 c4 10             	add    esp,0x10
c0017e4a:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0017e51:	83 ec 08             	sub    esp,0x8
c0017e54:	6a 12                	push   0x12
c0017e56:	50                   	push   eax
c0017e57:	e8 d2 be ff ff       	call   c0013d2e <getDevicesOfType(DeviceType)>
c0017e5c:	83 c4 0c             	add    esp,0xc
c0017e5f:	83 ec 0c             	sub    esp,0xc
c0017e62:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017e69:	50                   	push   eax
c0017e6a:	e8 85 09 01 00       	call   c00287f4 <LinkedList<Device>::isEmpty()>
c0017e6f:	83 c4 10             	add    esp,0x10
c0017e72:	83 f0 01             	xor    eax,0x1
c0017e75:	84 c0                	test   al,al
c0017e77:	0f 84 43 01 00 00    	je     c0017fc0 <ACPI::open(int, int, void*)+0x226>
c0017e7d:	83 ec 0c             	sub    esp,0xc
c0017e80:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017e87:	50                   	push   eax
c0017e88:	e8 83 09 01 00       	call   c0028810 <LinkedList<Device>::getFirstElement()>
c0017e8d:	83 c4 10             	add    esp,0x10
c0017e90:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0017e97:	83 ec 0c             	sub    esp,0xc
c0017e9a:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017ea1:	50                   	push   eax
c0017ea2:	e8 71 09 01 00       	call   c0028818 <LinkedList<Device>::removeFirst()>
c0017ea7:	83 c4 10             	add    esp,0x10
c0017eaa:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c0017eb1:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0017eb8:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c0017ebf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017ec3:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0017ec9:	ba 09 00 00 00       	mov    edx,0x9
c0017ece:	fc                   	cld    
c0017ecf:	89 c7                	mov    edi,eax
c0017ed1:	89 de                	mov    esi,ebx
c0017ed3:	89 d1                	mov    ecx,edx
c0017ed5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0017ed7:	83 ec 08             	sub    esp,0x8
c0017eda:	8d 44 24 38          	lea    eax,[esp+0x38]
c0017ede:	50                   	push   eax
c0017edf:	83 ec 24             	sub    esp,0x24
c0017ee2:	89 e0                	mov    eax,esp
c0017ee4:	89 c3                	mov    ebx,eax
c0017ee6:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017eea:	ba 09 00 00 00       	mov    edx,0x9
c0017eef:	89 df                	mov    edi,ebx
c0017ef1:	89 c6                	mov    esi,eax
c0017ef3:	89 d1                	mov    ecx,edx
c0017ef5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0017ef7:	e8 d6 a7 00 00       	call   c00226d2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0017efc:	83 c4 30             	add    esp,0x30
c0017eff:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c0017f06:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0017f0e:	0f 84 4b ff ff ff    	je     c0017e5f <ACPI::open(int, int, void*)+0xc5>
c0017f14:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0017f1f:	83 ec 0c             	sub    esp,0xc
c0017f22:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0017f29:	e8 6b 76 ff ff       	call   c000f599 <malloc>
c0017f2e:	83 c4 10             	add    esp,0x10
c0017f31:	89 c3                	mov    ebx,eax
c0017f33:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0017f38:	83 ec 04             	sub    esp,0x4
c0017f3b:	50                   	push   eax
c0017f3c:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0017f43:	53                   	push   ebx
c0017f44:	e8 87 ab ff ff       	call   c0012ad0 <File::File(char const*, Process*)>
c0017f49:	83 c4 10             	add    esp,0x10
c0017f4c:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0017f53:	83 ec 0c             	sub    esp,0xc
c0017f56:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0017f5d:	e8 40 ae ff ff       	call   c0012da2 <File::exists()>
c0017f62:	83 c4 10             	add    esp,0x10
c0017f65:	84 c0                	test   al,al
c0017f67:	74 27                	je     c0017f90 <ACPI::open(int, int, void*)+0x1f6>
c0017f69:	83 ec 08             	sub    esp,0x8
c0017f6c:	6a 01                	push   0x1
c0017f6e:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0017f75:	e8 21 4f 00 00       	call   c001ce9b <Thr::loadDLL(char const*, bool)>
c0017f7a:	83 c4 10             	add    esp,0x10
c0017f7d:	83 ec 08             	sub    esp,0x8
c0017f80:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0017f87:	50                   	push   eax
c0017f88:	e8 39 51 00 00       	call   c001d0c6 <Thr::executeDLL(unsigned long, void*)>
c0017f8d:	83 c4 10             	add    esp,0x10
c0017f90:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0017f98:	0f 84 c1 fe ff ff    	je     c0017e5f <ACPI::open(int, int, void*)+0xc5>
c0017f9e:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0017fa5:	8b 00                	mov    eax,DWORD PTR [eax]
c0017fa7:	83 c0 08             	add    eax,0x8
c0017faa:	8b 00                	mov    eax,DWORD PTR [eax]
c0017fac:	83 ec 0c             	sub    esp,0xc
c0017faf:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0017fb6:	ff d0                	call   eax
c0017fb8:	83 c4 10             	add    esp,0x10
c0017fbb:	e9 9f fe ff ff       	jmp    c0017e5f <ACPI::open(int, int, void*)+0xc5>
c0017fc0:	83 ec 0c             	sub    esp,0xc
c0017fc3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017fca:	50                   	push   eax
c0017fcb:	e8 22 08 01 00       	call   c00287f2 <LinkedList<Device>::~LinkedList()>
c0017fd0:	83 c4 10             	add    esp,0x10
c0017fd3:	8b 1d 68 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d668
c0017fd9:	83 ec 08             	sub    esp,0x8
c0017fdc:	6a 01                	push   0x1
c0017fde:	68 7f af 02 c0       	push   0xc002af7f
c0017fe3:	e8 b3 4e 00 00       	call   c001ce9b <Thr::loadDLL(char const*, bool)>
c0017fe8:	83 c4 10             	add    esp,0x10
c0017feb:	83 ec 08             	sub    esp,0x8
c0017fee:	53                   	push   ebx
c0017fef:	50                   	push   eax
c0017ff0:	e8 d1 50 00 00       	call   c001d0c6 <Thr::executeDLL(unsigned long, void*)>
c0017ff5:	83 c4 10             	add    esp,0x10
c0017ff8:	8b 1d 68 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d668
c0017ffe:	83 ec 08             	sub    esp,0x8
c0018001:	6a 01                	push   0x1
c0018003:	68 9c af 02 c0       	push   0xc002af9c
c0018008:	e8 8e 4e 00 00       	call   c001ce9b <Thr::loadDLL(char const*, bool)>
c001800d:	83 c4 10             	add    esp,0x10
c0018010:	83 ec 08             	sub    esp,0x8
c0018013:	53                   	push   ebx
c0018014:	50                   	push   eax
c0018015:	e8 ac 50 00 00       	call   c001d0c6 <Thr::executeDLL(unsigned long, void*)>
c001801a:	83 c4 10             	add    esp,0x10
c001801d:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c0018022:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018028:	83 e0 04             	and    eax,0x4
c001802b:	84 c0                	test   al,al
c001802d:	0f 84 0d 01 00 00    	je     c0018140 <ACPI::open(int, int, void*)+0x3a6>
c0018033:	83 ec 0c             	sub    esp,0xc
c0018036:	68 b9 af 02 c0       	push   0xc002afb9
c001803b:	e8 b3 75 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0018040:	83 c4 10             	add    esp,0x10
c0018043:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c001804e:	83 ec 0c             	sub    esp,0xc
c0018051:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0018058:	e8 3c 75 ff ff       	call   c000f599 <malloc>
c001805d:	83 c4 10             	add    esp,0x10
c0018060:	89 c3                	mov    ebx,eax
c0018062:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0018067:	83 ec 04             	sub    esp,0x4
c001806a:	50                   	push   eax
c001806b:	68 d6 af 02 c0       	push   0xc002afd6
c0018070:	53                   	push   ebx
c0018071:	e8 5a aa ff ff       	call   c0012ad0 <File::File(char const*, Process*)>
c0018076:	83 c4 10             	add    esp,0x10
c0018079:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c0018080:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018088:	74 1a                	je     c00180a4 <ACPI::open(int, int, void*)+0x30a>
c001808a:	83 ec 0c             	sub    esp,0xc
c001808d:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018094:	e8 09 ad ff ff       	call   c0012da2 <File::exists()>
c0018099:	83 c4 10             	add    esp,0x10
c001809c:	84 c0                	test   al,al
c001809e:	74 04                	je     c00180a4 <ACPI::open(int, int, void*)+0x30a>
c00180a0:	b0 01                	mov    al,0x1
c00180a2:	eb 02                	jmp    c00180a6 <ACPI::open(int, int, void*)+0x30c>
c00180a4:	b0 00                	mov    al,0x0
c00180a6:	84 c0                	test   al,al
c00180a8:	74 25                	je     c00180cf <ACPI::open(int, int, void*)+0x335>
c00180aa:	83 ec 08             	sub    esp,0x8
c00180ad:	6a 01                	push   0x1
c00180af:	68 d6 af 02 c0       	push   0xc002afd6
c00180b4:	e8 e2 4d 00 00       	call   c001ce9b <Thr::loadDLL(char const*, bool)>
c00180b9:	83 c4 10             	add    esp,0x10
c00180bc:	83 ec 08             	sub    esp,0x8
c00180bf:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c00180c6:	50                   	push   eax
c00180c7:	e8 fa 4f 00 00       	call   c001d0c6 <Thr::executeDLL(unsigned long, void*)>
c00180cc:	83 c4 10             	add    esp,0x10
c00180cf:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00180d7:	74 27                	je     c0018100 <ACPI::open(int, int, void*)+0x366>
c00180d9:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00180e1:	74 1d                	je     c0018100 <ACPI::open(int, int, void*)+0x366>
c00180e3:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c00180ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00180ec:	83 c0 08             	add    eax,0x8
c00180ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00180f1:	83 ec 0c             	sub    esp,0xc
c00180f4:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00180fb:	ff d0                	call   eax
c00180fd:	83 c4 10             	add    esp,0x10
c0018100:	a1 28 ff 02 c0       	mov    eax,ds:0xc002ff28
c0018105:	83 ec 08             	sub    esp,0x8
c0018108:	68 f3 af 02 c0       	push   0xc002aff3
c001810d:	50                   	push   eax
c001810e:	e8 43 f3 ff ff       	call   c0017456 <findDataTable(unsigned char*, char*)>
c0018113:	83 c4 10             	add    esp,0x10
c0018116:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c001811d:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c0018125:	74 19                	je     c0018140 <ACPI::open(int, int, void*)+0x3a6>
c0018127:	83 ec 08             	sub    esp,0x8
c001812a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018131:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0018138:	e8 fd fb ff ff       	call   c0017d3a <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001813d:	83 c4 10             	add    esp,0x10
c0018140:	b8 00 00 00 00       	mov    eax,0x0
c0018145:	81 c4 60 01 00 00    	add    esp,0x160
c001814b:	5b                   	pop    ebx
c001814c:	5e                   	pop    esi
c001814d:	5f                   	pop    edi
c001814e:	c3                   	ret    
c001814f:	90                   	nop

c0018150 <CPU::close(int, int, void*)>:
c0018150:	31 c0                	xor    eax,eax
c0018152:	c3                   	ret    
c0018153:	90                   	nop

c0018154 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018154:	55                   	push   ebp
c0018155:	57                   	push   edi
c0018156:	56                   	push   esi
c0018157:	53                   	push   ebx
c0018158:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001815c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018160:	89 ce                	mov    esi,ecx
c0018162:	89 d5                	mov    ebp,edx
c0018164:	80 f9 04             	cmp    cl,0x4
c0018167:	75 28                	jne    c0018191 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018169:	8d 42 f9             	lea    eax,[edx-0x7]
c001816c:	3c 03                	cmp    al,0x3
c001816e:	0f 86 63 01 00 00    	jbe    c00182d7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018174:	80 fa 03             	cmp    dl,0x3
c0018177:	0f 84 5a 01 00 00    	je     c00182d7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001817d:	8d 7a f2             	lea    edi,[edx-0xe]
c0018180:	b8 90 ca 02 c0       	mov    eax,0xc002ca90
c0018185:	89 fb                	mov    ebx,edi
c0018187:	80 fb 01             	cmp    bl,0x1
c001818a:	77 4e                	ja     c00181da <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c001818c:	e9 52 01 00 00       	jmp    c00182e3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018191:	80 f9 05             	cmp    cl,0x5
c0018194:	75 4d                	jne    c00181e3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018196:	b8 a0 ca 02 c0       	mov    eax,0xc002caa0
c001819b:	80 fa 03             	cmp    dl,0x3
c001819e:	0f 86 3f 01 00 00    	jbe    c00182e3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00181a4:	8d 7a fa             	lea    edi,[edx-0x6]
c00181a7:	b8 b0 ca 02 c0       	mov    eax,0xc002cab0
c00181ac:	89 fb                	mov    ebx,edi
c00181ae:	80 fb 01             	cmp    bl,0x1
c00181b1:	0f 86 2c 01 00 00    	jbe    c00182e3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00181b7:	b8 c0 ca 02 c0       	mov    eax,0xc002cac0
c00181bc:	80 fa 08             	cmp    dl,0x8
c00181bf:	0f 84 1e 01 00 00    	je     c00182e3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00181c5:	89 d7                	mov    edi,edx
c00181c7:	b8 d0 ca 02 c0       	mov    eax,0xc002cad0
c00181cc:	83 e7 fb             	and    edi,0xfffffffb
c00181cf:	89 fb                	mov    ebx,edi
c00181d1:	80 fb 09             	cmp    bl,0x9
c00181d4:	0f 84 09 01 00 00    	je     c00182e3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00181da:	31 c0                	xor    eax,eax
c00181dc:	89 eb                	mov    ebx,ebp
c00181de:	0f b6 fb             	movzx  edi,bl
c00181e1:	eb 30                	jmp    c0018213 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00181e3:	31 c0                	xor    eax,eax
c00181e5:	80 f9 06             	cmp    cl,0x6
c00181e8:	75 f2                	jne    c00181dc <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00181ea:	80 fa 0a             	cmp    dl,0xa
c00181ed:	77 ed                	ja     c00181dc <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00181ef:	bf de 05 00 00       	mov    edi,0x5de
c00181f4:	0f a3 d7             	bt     edi,edx
c00181f7:	73 e3                	jae    c00181dc <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00181f9:	b8 e0 ca 02 c0       	mov    eax,0xc002cae0
c00181fe:	e9 e0 00 00 00       	jmp    c00182e3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018203:	39 c7                	cmp    edi,eax
c0018205:	0f 84 d3 00 00 00    	je     c00182de <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001820b:	40                   	inc    eax
c001820c:	3d d0 00 00 00       	cmp    eax,0xd0
c0018211:	74 09                	je     c001821c <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018213:	89 f3                	mov    ebx,esi
c0018215:	80 fb 0f             	cmp    bl,0xf
c0018218:	75 f1                	jne    c001820b <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c001821a:	eb e7                	jmp    c0018203 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c001821c:	80 f9 10             	cmp    cl,0x10
c001821f:	75 14                	jne    c0018235 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018221:	8d 42 fc             	lea    eax,[edx-0x4]
c0018224:	83 e0 fb             	and    eax,0xfffffffb
c0018227:	3c 02                	cmp    al,0x2
c0018229:	76 34                	jbe    c001825f <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c001822b:	b8 79 b1 02 c0       	mov    eax,0xc002b179
c0018230:	80 fa 02             	cmp    dl,0x2
c0018233:	eb 24                	jmp    c0018259 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018235:	80 f9 11             	cmp    cl,0x11
c0018238:	75 13                	jne    c001824d <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001823a:	b8 79 b1 02 c0       	mov    eax,0xc002b179
c001823f:	80 fa 03             	cmp    dl,0x3
c0018242:	0f 85 9b 00 00 00    	jne    c00182e3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018248:	e9 91 00 00 00       	jmp    c00182de <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001824d:	80 f9 12             	cmp    cl,0x12
c0018250:	75 14                	jne    c0018266 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018252:	b8 79 b1 02 c0       	mov    eax,0xc002b179
c0018257:	fe ca                	dec    dl
c0018259:	0f 85 84 00 00 00    	jne    c00182e3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001825f:	b8 00 cb 02 c0       	mov    eax,0xc002cb00
c0018264:	eb 7d                	jmp    c00182e3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018266:	80 f9 14             	cmp    cl,0x14
c0018269:	75 12                	jne    c001827d <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c001826b:	4a                   	dec    edx
c001826c:	b8 79 b1 02 c0       	mov    eax,0xc002b179
c0018271:	80 fa 01             	cmp    dl,0x1
c0018274:	77 6d                	ja     c00182e3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018276:	b8 10 cb 02 c0       	mov    eax,0xc002cb10
c001827b:	eb 66                	jmp    c00182e3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001827d:	80 f9 15             	cmp    cl,0x15
c0018280:	75 31                	jne    c00182b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018282:	b8 20 cb 02 c0       	mov    eax,0xc002cb20
c0018287:	80 fa 01             	cmp    dl,0x1
c001828a:	74 57                	je     c00182e3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001828c:	b8 79 b1 02 c0       	mov    eax,0xc002b179
c0018291:	80 fa 13             	cmp    dl,0x13
c0018294:	76 0c                	jbe    c00182a2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018296:	80 fa 30             	cmp    dl,0x30
c0018299:	75 48                	jne    c00182e3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001829b:	b8 40 cb 02 c0       	mov    eax,0xc002cb40
c00182a0:	eb 41                	jmp    c00182e3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182a2:	b9 04 00 09 00       	mov    ecx,0x90004
c00182a7:	0f a3 d1             	bt     ecx,edx
c00182aa:	73 37                	jae    c00182e3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182ac:	b8 30 cb 02 c0       	mov    eax,0xc002cb30
c00182b1:	eb 30                	jmp    c00182e3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182b3:	b8 79 b1 02 c0       	mov    eax,0xc002b179
c00182b8:	80 f9 16             	cmp    cl,0x16
c00182bb:	75 26                	jne    c00182e3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182bd:	b8 50 cb 02 c0       	mov    eax,0xc002cb50
c00182c2:	84 d2                	test   dl,dl
c00182c4:	74 1d                	je     c00182e3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182c6:	b8 79 b1 02 c0       	mov    eax,0xc002b179
c00182cb:	80 fa 30             	cmp    dl,0x30
c00182ce:	75 13                	jne    c00182e3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182d0:	b8 60 cb 02 c0       	mov    eax,0xc002cb60
c00182d5:	eb 0c                	jmp    c00182e3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182d7:	b8 80 ca 02 c0       	mov    eax,0xc002ca80
c00182dc:	eb 05                	jmp    c00182e3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182de:	b8 f0 ca 02 c0       	mov    eax,0xc002caf0
c00182e3:	5b                   	pop    ebx
c00182e4:	5e                   	pop    esi
c00182e5:	5f                   	pop    edi
c00182e6:	5d                   	pop    ebp
c00182e7:	c3                   	ret    

c00182e8 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00182e8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00182ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00182f0:	80 f9 04             	cmp    cl,0x4
c00182f3:	75 6b                	jne    c0018360 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00182f5:	b8 e0 c8 02 c0       	mov    eax,0xc002c8e0
c00182fa:	80 fa 01             	cmp    dl,0x1
c00182fd:	0f 86 92 02 00 00    	jbe    c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018303:	b8 f0 c8 02 c0       	mov    eax,0xc002c8f0
c0018308:	80 fa 02             	cmp    dl,0x2
c001830b:	0f 84 84 02 00 00    	je     c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018311:	b8 00 c9 02 c0       	mov    eax,0xc002c900
c0018316:	80 fa 03             	cmp    dl,0x3
c0018319:	0f 84 76 02 00 00    	je     c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001831f:	b8 10 c9 02 c0       	mov    eax,0xc002c910
c0018324:	80 fa 04             	cmp    dl,0x4
c0018327:	0f 84 68 02 00 00    	je     c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001832d:	b8 20 c9 02 c0       	mov    eax,0xc002c920
c0018332:	80 fa 05             	cmp    dl,0x5
c0018335:	0f 84 5a 02 00 00    	je     c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001833b:	b8 00 c9 02 c0       	mov    eax,0xc002c900
c0018340:	80 fa 07             	cmp    dl,0x7
c0018343:	0f 84 4c 02 00 00    	je     c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018349:	83 ea 08             	sub    edx,0x8
c001834c:	b8 79 b1 02 c0       	mov    eax,0xc002b179
c0018351:	80 fa 01             	cmp    dl,0x1
c0018354:	0f 87 3b 02 00 00    	ja     c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001835a:	b8 30 c9 02 c0       	mov    eax,0xc002c930
c001835f:	c3                   	ret    
c0018360:	80 f9 05             	cmp    cl,0x5
c0018363:	75 45                	jne    c00183aa <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018365:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018368:	b8 40 c9 02 c0       	mov    eax,0xc002c940
c001836d:	80 f9 02             	cmp    cl,0x2
c0018370:	0f 86 1f 02 00 00    	jbe    c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018376:	80 fa 04             	cmp    dl,0x4
c0018379:	0f 84 f3 01 00 00    	je     c0018572 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c001837f:	80 fa 07             	cmp    dl,0x7
c0018382:	0f 84 0d 02 00 00    	je     c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018388:	b8 50 c9 02 c0       	mov    eax,0xc002c950
c001838d:	80 fa 08             	cmp    dl,0x8
c0018390:	0f 84 ff 01 00 00    	je     c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018396:	b8 79 b1 02 c0       	mov    eax,0xc002b179
c001839b:	80 fa 09             	cmp    dl,0x9
c001839e:	0f 85 f1 01 00 00    	jne    c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183a4:	b8 60 c9 02 c0       	mov    eax,0xc002c960
c00183a9:	c3                   	ret    
c00183aa:	80 f9 06             	cmp    cl,0x6
c00183ad:	0f 85 85 01 00 00    	jne    c0018538 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00183b3:	b8 70 c9 02 c0       	mov    eax,0xc002c970
c00183b8:	80 fa 01             	cmp    dl,0x1
c00183bb:	0f 84 d4 01 00 00    	je     c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183c1:	8d 42 fb             	lea    eax,[edx-0x5]
c00183c4:	3c 01                	cmp    al,0x1
c00183c6:	0f 86 ac 01 00 00    	jbe    c0018578 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00183cc:	80 fa 03             	cmp    dl,0x3
c00183cf:	0f 84 a3 01 00 00    	je     c0018578 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00183d5:	8d 4a f9             	lea    ecx,[edx-0x7]
c00183d8:	b8 90 c9 02 c0       	mov    eax,0xc002c990
c00183dd:	80 f9 01             	cmp    cl,0x1
c00183e0:	0f 86 af 01 00 00    	jbe    c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183e6:	80 fa 09             	cmp    dl,0x9
c00183e9:	0f 84 8f 01 00 00    	je     c001857e <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00183ef:	8d 4a f6             	lea    ecx,[edx-0xa]
c00183f2:	80 f9 01             	cmp    cl,0x1
c00183f5:	0f 86 9a 01 00 00    	jbe    c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183fb:	b8 a0 c9 02 c0       	mov    eax,0xc002c9a0
c0018400:	80 fa 0d             	cmp    dl,0xd
c0018403:	0f 84 8c 01 00 00    	je     c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018409:	b8 b0 c9 02 c0       	mov    eax,0xc002c9b0
c001840e:	80 fa 0e             	cmp    dl,0xe
c0018411:	0f 84 7e 01 00 00    	je     c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018417:	b8 c0 c9 02 c0       	mov    eax,0xc002c9c0
c001841c:	80 fa 0f             	cmp    dl,0xf
c001841f:	0f 84 70 01 00 00    	je     c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018425:	b8 a0 c9 02 c0       	mov    eax,0xc002c9a0
c001842a:	80 fa 15             	cmp    dl,0x15
c001842d:	0f 84 62 01 00 00    	je     c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018433:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018436:	b8 c0 c9 02 c0       	mov    eax,0xc002c9c0
c001843b:	80 f9 01             	cmp    cl,0x1
c001843e:	0f 86 51 01 00 00    	jbe    c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018444:	80 fa 1a             	cmp    dl,0x1a
c0018447:	0f 84 37 01 00 00    	je     c0018584 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c001844d:	80 fa 1c             	cmp    dl,0x1c
c0018450:	0f 84 34 01 00 00    	je     c001858a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018456:	80 fa 1d             	cmp    dl,0x1d
c0018459:	0f 84 36 01 00 00    	je     c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001845f:	b8 f0 c9 02 c0       	mov    eax,0xc002c9f0
c0018464:	80 fa 25             	cmp    dl,0x25
c0018467:	0f 84 28 01 00 00    	je     c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001846d:	8d 4a da             	lea    ecx,[edx-0x26]
c0018470:	b8 e0 c9 02 c0       	mov    eax,0xc002c9e0
c0018475:	80 f9 01             	cmp    cl,0x1
c0018478:	0f 86 17 01 00 00    	jbe    c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001847e:	b8 00 ca 02 c0       	mov    eax,0xc002ca00
c0018483:	80 fa 2a             	cmp    dl,0x2a
c0018486:	0f 84 09 01 00 00    	je     c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001848c:	b8 f0 c9 02 c0       	mov    eax,0xc002c9f0
c0018491:	80 fa 2c             	cmp    dl,0x2c
c0018494:	0f 84 fb 00 00 00    	je     c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001849a:	b8 00 ca 02 c0       	mov    eax,0xc002ca00
c001849f:	80 fa 2d             	cmp    dl,0x2d
c00184a2:	0f 84 ed 00 00 00    	je     c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184a8:	b8 d0 c9 02 c0       	mov    eax,0xc002c9d0
c00184ad:	80 fa 2e             	cmp    dl,0x2e
c00184b0:	0f 84 df 00 00 00    	je     c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184b6:	b8 f0 c9 02 c0       	mov    eax,0xc002c9f0
c00184bb:	80 fa 2f             	cmp    dl,0x2f
c00184be:	0f 84 d1 00 00 00    	je     c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184c4:	8d 4a cb             	lea    ecx,[edx-0x35]
c00184c7:	b8 e0 c9 02 c0       	mov    eax,0xc002c9e0
c00184cc:	80 f9 01             	cmp    cl,0x1
c00184cf:	0f 86 c0 00 00 00    	jbe    c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184d5:	b8 10 ca 02 c0       	mov    eax,0xc002ca10
c00184da:	80 fa 37             	cmp    dl,0x37
c00184dd:	0f 84 b2 00 00 00    	je     c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184e3:	b8 20 ca 02 c0       	mov    eax,0xc002ca20
c00184e8:	80 fa 3a             	cmp    dl,0x3a
c00184eb:	0f 84 a4 00 00 00    	je     c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184f1:	b8 30 ca 02 c0       	mov    eax,0xc002ca30
c00184f6:	80 fa 3c             	cmp    dl,0x3c
c00184f9:	0f 84 96 00 00 00    	je     c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184ff:	b8 40 ca 02 c0       	mov    eax,0xc002ca40
c0018504:	80 fa 3d             	cmp    dl,0x3d
c0018507:	0f 84 88 00 00 00    	je     c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001850d:	b8 20 ca 02 c0       	mov    eax,0xc002ca20
c0018512:	80 fa 3e             	cmp    dl,0x3e
c0018515:	74 7e                	je     c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018517:	8d 42 bb             	lea    eax,[edx-0x45]
c001851a:	3c 01                	cmp    al,0x1
c001851c:	76 72                	jbe    c0018590 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001851e:	80 fa 3f             	cmp    dl,0x3f
c0018521:	74 6d                	je     c0018590 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018523:	80 fa 4a             	cmp    dl,0x4a
c0018526:	74 0a                	je     c0018532 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018528:	b8 79 b1 02 c0       	mov    eax,0xc002b179
c001852d:	80 fa 4d             	cmp    dl,0x4d
c0018530:	75 63                	jne    c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018532:	b8 10 ca 02 c0       	mov    eax,0xc002ca10
c0018537:	c3                   	ret    
c0018538:	b8 79 b1 02 c0       	mov    eax,0xc002b179
c001853d:	80 f9 0b             	cmp    cl,0xb
c0018540:	75 0a                	jne    c001854c <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018542:	fe ca                	dec    dl
c0018544:	75 4f                	jne    c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018546:	b8 50 ca 02 c0       	mov    eax,0xc002ca50
c001854b:	c3                   	ret    
c001854c:	80 f9 0f             	cmp    cl,0xf
c001854f:	75 44                	jne    c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018551:	b8 60 ca 02 c0       	mov    eax,0xc002ca60
c0018556:	80 fa 02             	cmp    dl,0x2
c0018559:	76 3a                	jbe    c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001855b:	8d 42 fd             	lea    eax,[edx-0x3]
c001855e:	3c 01                	cmp    al,0x1
c0018560:	76 0a                	jbe    c001856c <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018562:	b8 79 b1 02 c0       	mov    eax,0xc002b179
c0018567:	80 fa 06             	cmp    dl,0x6
c001856a:	75 29                	jne    c0018595 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001856c:	b8 70 ca 02 c0       	mov    eax,0xc002ca70
c0018571:	c3                   	ret    
c0018572:	b8 50 c9 02 c0       	mov    eax,0xc002c950
c0018577:	c3                   	ret    
c0018578:	b8 80 c9 02 c0       	mov    eax,0xc002c980
c001857d:	c3                   	ret    
c001857e:	b8 a0 c9 02 c0       	mov    eax,0xc002c9a0
c0018583:	c3                   	ret    
c0018584:	b8 d0 c9 02 c0       	mov    eax,0xc002c9d0
c0018589:	c3                   	ret    
c001858a:	b8 e0 c9 02 c0       	mov    eax,0xc002c9e0
c001858f:	c3                   	ret    
c0018590:	b8 30 ca 02 c0       	mov    eax,0xc002ca30
c0018595:	c3                   	ret    

c0018596 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018596:	60                   	pusha  
c0018597:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001859b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001859f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00185a3:	9c                   	pushf  
c00185a4:	fa                   	cli    
c00185a5:	0f 09                	wbinvd 
c00185a7:	0f 30                	wrmsr  
c00185a9:	9d                   	popf   
c00185aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00185ae:	89 02                	mov    DWORD PTR [edx],eax
c00185b0:	61                   	popa   
c00185b1:	c3                   	ret    

c00185b2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00185b2:	60                   	pusha  
c00185b3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00185b7:	9c                   	pushf  
c00185b8:	fa                   	cli    
c00185b9:	0f 09                	wbinvd 
c00185bb:	31 c0                	xor    eax,eax
c00185bd:	31 d2                	xor    edx,edx
c00185bf:	0f 32                	rdmsr  
c00185c1:	9d                   	popf   
c00185c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185c6:	89 02                	mov    DWORD PTR [edx],eax
c00185c8:	61                   	popa   
c00185c9:	c3                   	ret    

c00185ca <CPU::AMD_K6_writeback(int, int, int)>:
c00185ca:	56                   	push   esi
c00185cb:	53                   	push   ebx
c00185cc:	83 ec 10             	sub    esp,0x10
c00185cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185d3:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00185d8:	75 5d                	jne    c0018637 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00185da:	83 f8 08             	cmp    eax,0x8
c00185dd:	75 09                	jne    c00185e8 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00185df:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00185e4:	7e 13                	jle    c00185f9 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00185e6:	eb 30                	jmp    c0018618 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00185e8:	83 f8 06             	cmp    eax,0x6
c00185eb:	7c 4a                	jl     c0018637 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00185ed:	83 f8 07             	cmp    eax,0x7
c00185f0:	7e 07                	jle    c00185f9 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00185f2:	83 f8 09             	cmp    eax,0x9
c00185f5:	74 21                	je     c0018618 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00185f7:	eb 3e                	jmp    c0018637 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00185f9:	89 e6                	mov    esi,esp
c00185fb:	8b 1d a8 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6a8
c0018601:	56                   	push   esi
c0018602:	c1 eb 15             	shr    ebx,0x15
c0018605:	68 82 00 00 c0       	push   0xc0000082
c001860a:	83 e3 7e             	and    ebx,0x7e
c001860d:	e8 a0 ff ff ff       	call   c00185b2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018612:	56                   	push   esi
c0018613:	6a 00                	push   0x0
c0018615:	53                   	push   ebx
c0018616:	eb 12                	jmp    c001862a <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018618:	89 e3                	mov    ebx,esp
c001861a:	53                   	push   ebx
c001861b:	68 82 00 00 c0       	push   0xc0000082
c0018620:	e8 8d ff ff ff       	call   c00185b2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018625:	53                   	push   ebx
c0018626:	6a 00                	push   0x0
c0018628:	6a 00                	push   0x0
c001862a:	68 82 00 00 c0       	push   0xc0000082
c001862f:	e8 62 ff ff ff       	call   c0018596 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018634:	83 c4 18             	add    esp,0x18
c0018637:	83 c4 10             	add    esp,0x10
c001863a:	5b                   	pop    ebx
c001863b:	5e                   	pop    esi
c001863c:	c3                   	ret    
c001863d:	90                   	nop

c001863e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001863e:	55                   	push   ebp
c001863f:	57                   	push   edi
c0018640:	56                   	push   esi
c0018641:	53                   	push   ebx
c0018642:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018646:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001864a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001864e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018652:	39 05 80 cb 02 c0    	cmp    DWORD PTR ds:0xc002cb80,eax
c0018658:	75 23                	jne    c001867d <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001865a:	a1 8c 01 03 c0       	mov    eax,ds:0xc003018c
c001865f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018663:	89 06                	mov    DWORD PTR [esi],eax
c0018665:	a1 88 01 03 c0       	mov    eax,ds:0xc0030188
c001866a:	89 07                	mov    DWORD PTR [edi],eax
c001866c:	a1 84 01 03 c0       	mov    eax,ds:0xc0030184
c0018671:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018674:	a1 80 01 03 c0       	mov    eax,ds:0xc0030180
c0018679:	89 02                	mov    DWORD PTR [edx],eax
c001867b:	eb 3f                	jmp    c00186bc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001867d:	31 c9                	xor    ecx,ecx
c001867f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018683:	0f a2                	cpuid  
c0018685:	89 06                	mov    DWORD PTR [esi],eax
c0018687:	89 1f                	mov    DWORD PTR [edi],ebx
c0018689:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001868d:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018690:	89 10                	mov    DWORD PTR [eax],edx
c0018692:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018696:	a3 80 cb 02 c0       	mov    ds:0xc002cb80,eax
c001869b:	8b 06                	mov    eax,DWORD PTR [esi]
c001869d:	a3 8c 01 03 c0       	mov    ds:0xc003018c,eax
c00186a2:	8b 07                	mov    eax,DWORD PTR [edi]
c00186a4:	a3 88 01 03 c0       	mov    ds:0xc0030188,eax
c00186a9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00186ac:	a3 84 01 03 c0       	mov    ds:0xc0030184,eax
c00186b1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00186b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00186b7:	a3 80 01 03 c0       	mov    ds:0xc0030180,eax
c00186bc:	5b                   	pop    ebx
c00186bd:	5e                   	pop    esi
c00186be:	5f                   	pop    edi
c00186bf:	5d                   	pop    ebp
c00186c0:	c3                   	ret    
c00186c1:	90                   	nop

c00186c2 <CPU::cpuidCheckEDX(unsigned int)>:
c00186c2:	83 ec 10             	sub    esp,0x10
c00186c5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186c9:	50                   	push   eax
c00186ca:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186ce:	50                   	push   eax
c00186cf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186d3:	50                   	push   eax
c00186d4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186d8:	50                   	push   eax
c00186d9:	6a 01                	push   0x1
c00186db:	e8 5e ff ff ff       	call   c001863e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00186e0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00186e4:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00186e8:	0f 95 c0             	setne  al
c00186eb:	83 c4 24             	add    esp,0x24
c00186ee:	c3                   	ret    
c00186ef:	90                   	nop

c00186f0 <CPU::cpuidCheckECX(unsigned int)>:
c00186f0:	83 ec 10             	sub    esp,0x10
c00186f3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186f7:	50                   	push   eax
c00186f8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186fc:	50                   	push   eax
c00186fd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018701:	50                   	push   eax
c0018702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018706:	50                   	push   eax
c0018707:	6a 01                	push   0x1
c0018709:	e8 30 ff ff ff       	call   c001863e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001870e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018712:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018716:	0f 95 c0             	setne  al
c0018719:	83 c4 24             	add    esp,0x24
c001871c:	c3                   	ret    
c001871d:	90                   	nop

c001871e <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001871e:	83 ec 10             	sub    esp,0x10
c0018721:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018725:	50                   	push   eax
c0018726:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001872a:	50                   	push   eax
c001872b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001872f:	50                   	push   eax
c0018730:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018734:	50                   	push   eax
c0018735:	6a 07                	push   0x7
c0018737:	e8 02 ff ff ff       	call   c001863e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001873c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018740:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018744:	0f 95 c0             	setne  al
c0018747:	83 c4 24             	add    esp,0x24
c001874a:	c3                   	ret    
c001874b:	90                   	nop

c001874c <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001874c:	83 ec 10             	sub    esp,0x10
c001874f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018753:	50                   	push   eax
c0018754:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018758:	50                   	push   eax
c0018759:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001875d:	50                   	push   eax
c001875e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018762:	50                   	push   eax
c0018763:	6a 07                	push   0x7
c0018765:	e8 d4 fe ff ff       	call   c001863e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001876a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001876e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018772:	0f 95 c0             	setne  al
c0018775:	83 c4 24             	add    esp,0x24
c0018778:	c3                   	ret    
c0018779:	90                   	nop

c001877a <CPU::CPU()>:
c001877a:	83 ec 0c             	sub    esp,0xc
c001877d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018781:	83 ec 08             	sub    esp,0x8
c0018784:	68 79 b1 02 c0       	push   0xc002b179
c0018789:	50                   	push   eax
c001878a:	e8 1f b4 ff ff       	call   c0013bae <Device::Device(char const*)>
c001878f:	83 c4 10             	add    esp,0x10
c0018792:	ba 50 b2 02 c0       	mov    edx,0xc002b250
c0018797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001879b:	89 10                	mov    DWORD PTR [eax],edx
c001879d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187a1:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00187ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187af:	05 78 01 00 00       	add    eax,0x178
c00187b4:	83 ec 0c             	sub    esp,0xc
c00187b7:	50                   	push   eax
c00187b8:	e8 0f 66 ff ff       	call   c000edcc <GDT::GDT()>
c00187bd:	83 c4 10             	add    esp,0x10
c00187c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187c4:	05 7c 09 00 00       	add    eax,0x97c
c00187c9:	83 ec 0c             	sub    esp,0xc
c00187cc:	50                   	push   eax
c00187cd:	e8 4a 68 ff ff       	call   c000f01c <IDT::IDT()>
c00187d2:	83 c4 10             	add    esp,0x10
c00187d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187d9:	05 7c 11 00 00       	add    eax,0x117c
c00187de:	83 ec 0c             	sub    esp,0xc
c00187e1:	50                   	push   eax
c00187e2:	e8 fd 82 ff ff       	call   c0010ae4 <TSS::TSS()>
c00187e7:	83 c4 10             	add    esp,0x10
c00187ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187ee:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00187f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187f9:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018803:	90                   	nop
c0018804:	83 c4 0c             	add    esp,0xc
c0018807:	c3                   	ret    

c0018808 <CPU::displayFeatures()>:
c0018808:	c3                   	ret    
c0018809:	90                   	nop

c001880a <CPU::detectFeatures()>:
c001880a:	55                   	push   ebp
c001880b:	57                   	push   edi
c001880c:	56                   	push   esi
c001880d:	53                   	push   ebx
c001880e:	83 ec 50             	sub    esp,0x50
c0018811:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018815:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c001881f:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018826:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001882c:	6a 0d                	push   0xd
c001882e:	6a 00                	push   0x0
c0018830:	55                   	push   ebp
c0018831:	e8 1a 7f fe ff       	call   c0000750 <memset>
c0018836:	83 c4 10             	add    esp,0x10
c0018839:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c001883e:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018845:	0f 84 22 09 00 00    	je     c001916d <CPU::detectFeatures()+0x963>
c001884b:	83 ec 0c             	sub    esp,0xc
c001884e:	89 ef                	mov    edi,ebp
c0018850:	6a 10                	push   0x10
c0018852:	e8 6b fe ff ff       	call   c00186c2 <CPU::cpuidCheckEDX(unsigned int)>
c0018857:	83 e0 01             	and    eax,0x1
c001885a:	8d 14 00             	lea    edx,[eax+eax*1]
c001885d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018863:	83 e0 fd             	and    eax,0xfffffffd
c0018866:	09 d0                	or     eax,edx
c0018868:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001886e:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018875:	e8 48 fe ff ff       	call   c00186c2 <CPU::cpuidCheckEDX(unsigned int)>
c001887a:	83 e0 01             	and    eax,0x1
c001887d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018884:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001888a:	83 e0 fb             	and    eax,0xfffffffb
c001888d:	09 d0                	or     eax,edx
c001888f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018895:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001889c:	e8 21 fe ff ff       	call   c00186c2 <CPU::cpuidCheckEDX(unsigned int)>
c00188a1:	83 e0 01             	and    eax,0x1
c00188a4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00188ab:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00188b1:	83 e0 f7             	and    eax,0xfffffff7
c00188b4:	09 d0                	or     eax,edx
c00188b6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00188bc:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00188c3:	e8 fa fd ff ff       	call   c00186c2 <CPU::cpuidCheckEDX(unsigned int)>
c00188c8:	83 e0 01             	and    eax,0x1
c00188cb:	c1 e0 04             	shl    eax,0x4
c00188ce:	88 c2                	mov    dl,al
c00188d0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00188d6:	83 e0 ef             	and    eax,0xffffffef
c00188d9:	09 d0                	or     eax,edx
c00188db:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00188e1:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00188e8:	e8 d5 fd ff ff       	call   c00186c2 <CPU::cpuidCheckEDX(unsigned int)>
c00188ed:	83 e0 01             	and    eax,0x1
c00188f0:	c1 e0 05             	shl    eax,0x5
c00188f3:	88 c2                	mov    dl,al
c00188f5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00188fb:	83 e0 df             	and    eax,0xffffffdf
c00188fe:	09 d0                	or     eax,edx
c0018900:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018906:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001890d:	e8 b0 fd ff ff       	call   c00186c2 <CPU::cpuidCheckEDX(unsigned int)>
c0018912:	83 e0 01             	and    eax,0x1
c0018915:	8d 14 00             	lea    edx,[eax+eax*1]
c0018918:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001891e:	83 e0 fd             	and    eax,0xfffffffd
c0018921:	09 d0                	or     eax,edx
c0018923:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018929:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018930:	e8 8d fd ff ff       	call   c00186c2 <CPU::cpuidCheckEDX(unsigned int)>
c0018935:	83 e0 01             	and    eax,0x1
c0018938:	c1 e0 06             	shl    eax,0x6
c001893b:	88 c2                	mov    dl,al
c001893d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018943:	83 e0 bf             	and    eax,0xffffffbf
c0018946:	09 d0                	or     eax,edx
c0018948:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001894e:	58                   	pop    eax
c001894f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018953:	50                   	push   eax
c0018954:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018958:	50                   	push   eax
c0018959:	8d 74 24 28          	lea    esi,[esp+0x28]
c001895d:	56                   	push   esi
c001895e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018962:	50                   	push   eax
c0018963:	6a 00                	push   0x0
c0018965:	e8 d4 fc ff ff       	call   c001863e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001896a:	b8 04 00 00 00       	mov    eax,0x4
c001896f:	89 c1                	mov    ecx,eax
c0018971:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018973:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018979:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001897d:	89 c1                	mov    ecx,eax
c001897f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018981:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018987:	8d 74 24 38          	lea    esi,[esp+0x38]
c001898b:	89 c1                	mov    ecx,eax
c001898d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001898f:	83 c4 18             	add    esp,0x18
c0018992:	68 24 b0 02 c0       	push   0xc002b024
c0018997:	55                   	push   ebp
c0018998:	e8 fb 7e fe ff       	call   c0000898 <strcmp>
c001899d:	83 c4 10             	add    esp,0x10
c00189a0:	85 c0                	test   eax,eax
c00189a2:	75 0f                	jne    c00189b3 <CPU::detectFeatures()+0x1a9>
c00189a4:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00189ae:	e9 22 02 00 00       	jmp    c0018bd5 <CPU::detectFeatures()+0x3cb>
c00189b3:	50                   	push   eax
c00189b4:	50                   	push   eax
c00189b5:	68 31 b0 02 c0       	push   0xc002b031
c00189ba:	55                   	push   ebp
c00189bb:	e8 d8 7e fe ff       	call   c0000898 <strcmp>
c00189c0:	83 c4 10             	add    esp,0x10
c00189c3:	85 c0                	test   eax,eax
c00189c5:	74 dd                	je     c00189a4 <CPU::detectFeatures()+0x19a>
c00189c7:	50                   	push   eax
c00189c8:	50                   	push   eax
c00189c9:	68 3e b0 02 c0       	push   0xc002b03e
c00189ce:	55                   	push   ebp
c00189cf:	e8 c4 7e fe ff       	call   c0000898 <strcmp>
c00189d4:	83 c4 10             	add    esp,0x10
c00189d7:	85 c0                	test   eax,eax
c00189d9:	74 2a                	je     c0018a05 <CPU::detectFeatures()+0x1fb>
c00189db:	50                   	push   eax
c00189dc:	50                   	push   eax
c00189dd:	68 4b b0 02 c0       	push   0xc002b04b
c00189e2:	55                   	push   ebp
c00189e3:	e8 b0 7e fe ff       	call   c0000898 <strcmp>
c00189e8:	83 c4 10             	add    esp,0x10
c00189eb:	85 c0                	test   eax,eax
c00189ed:	74 16                	je     c0018a05 <CPU::detectFeatures()+0x1fb>
c00189ef:	50                   	push   eax
c00189f0:	50                   	push   eax
c00189f1:	68 58 b0 02 c0       	push   0xc002b058
c00189f6:	55                   	push   ebp
c00189f7:	e8 9c 7e fe ff       	call   c0000898 <strcmp>
c00189fc:	83 c4 10             	add    esp,0x10
c00189ff:	85 c0                	test   eax,eax
c0018a01:	74 48                	je     c0018a4b <CPU::detectFeatures()+0x241>
c0018a03:	eb 0f                	jmp    c0018a14 <CPU::detectFeatures()+0x20a>
c0018a05:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018a0f:	e9 c1 01 00 00       	jmp    c0018bd5 <CPU::detectFeatures()+0x3cb>
c0018a14:	50                   	push   eax
c0018a15:	50                   	push   eax
c0018a16:	68 65 b0 02 c0       	push   0xc002b065
c0018a1b:	55                   	push   ebp
c0018a1c:	e8 77 7e fe ff       	call   c0000898 <strcmp>
c0018a21:	83 c4 10             	add    esp,0x10
c0018a24:	85 c0                	test   eax,eax
c0018a26:	74 23                	je     c0018a4b <CPU::detectFeatures()+0x241>
c0018a28:	57                   	push   edi
c0018a29:	57                   	push   edi
c0018a2a:	68 72 b0 02 c0       	push   0xc002b072
c0018a2f:	55                   	push   ebp
c0018a30:	e8 63 7e fe ff       	call   c0000898 <strcmp>
c0018a35:	83 c4 10             	add    esp,0x10
c0018a38:	85 c0                	test   eax,eax
c0018a3a:	75 1e                	jne    c0018a5a <CPU::detectFeatures()+0x250>
c0018a3c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018a46:	e9 8a 01 00 00       	jmp    c0018bd5 <CPU::detectFeatures()+0x3cb>
c0018a4b:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018a55:	e9 7b 01 00 00       	jmp    c0018bd5 <CPU::detectFeatures()+0x3cb>
c0018a5a:	56                   	push   esi
c0018a5b:	56                   	push   esi
c0018a5c:	68 7f b0 02 c0       	push   0xc002b07f
c0018a61:	55                   	push   ebp
c0018a62:	e8 31 7e fe ff       	call   c0000898 <strcmp>
c0018a67:	83 c4 10             	add    esp,0x10
c0018a6a:	85 c0                	test   eax,eax
c0018a6c:	75 0f                	jne    c0018a7d <CPU::detectFeatures()+0x273>
c0018a6e:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018a78:	e9 58 01 00 00       	jmp    c0018bd5 <CPU::detectFeatures()+0x3cb>
c0018a7d:	51                   	push   ecx
c0018a7e:	51                   	push   ecx
c0018a7f:	68 3e b0 02 c0       	push   0xc002b03e
c0018a84:	55                   	push   ebp
c0018a85:	e8 0e 7e fe ff       	call   c0000898 <strcmp>
c0018a8a:	83 c4 10             	add    esp,0x10
c0018a8d:	85 c0                	test   eax,eax
c0018a8f:	75 0f                	jne    c0018aa0 <CPU::detectFeatures()+0x296>
c0018a91:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018a9b:	e9 35 01 00 00       	jmp    c0018bd5 <CPU::detectFeatures()+0x3cb>
c0018aa0:	52                   	push   edx
c0018aa1:	52                   	push   edx
c0018aa2:	68 8c b0 02 c0       	push   0xc002b08c
c0018aa7:	55                   	push   ebp
c0018aa8:	e8 eb 7d fe ff       	call   c0000898 <strcmp>
c0018aad:	83 c4 10             	add    esp,0x10
c0018ab0:	85 c0                	test   eax,eax
c0018ab2:	75 0f                	jne    c0018ac3 <CPU::detectFeatures()+0x2b9>
c0018ab4:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018abe:	e9 12 01 00 00       	jmp    c0018bd5 <CPU::detectFeatures()+0x3cb>
c0018ac3:	50                   	push   eax
c0018ac4:	50                   	push   eax
c0018ac5:	68 99 b0 02 c0       	push   0xc002b099
c0018aca:	55                   	push   ebp
c0018acb:	e8 c8 7d fe ff       	call   c0000898 <strcmp>
c0018ad0:	83 c4 10             	add    esp,0x10
c0018ad3:	85 c0                	test   eax,eax
c0018ad5:	75 0f                	jne    c0018ae6 <CPU::detectFeatures()+0x2dc>
c0018ad7:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018ae1:	e9 ef 00 00 00       	jmp    c0018bd5 <CPU::detectFeatures()+0x3cb>
c0018ae6:	50                   	push   eax
c0018ae7:	50                   	push   eax
c0018ae8:	68 a6 b0 02 c0       	push   0xc002b0a6
c0018aed:	55                   	push   ebp
c0018aee:	e8 a5 7d fe ff       	call   c0000898 <strcmp>
c0018af3:	83 c4 10             	add    esp,0x10
c0018af6:	85 c0                	test   eax,eax
c0018af8:	75 0f                	jne    c0018b09 <CPU::detectFeatures()+0x2ff>
c0018afa:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018b04:	e9 cc 00 00 00       	jmp    c0018bd5 <CPU::detectFeatures()+0x3cb>
c0018b09:	50                   	push   eax
c0018b0a:	50                   	push   eax
c0018b0b:	68 b3 b0 02 c0       	push   0xc002b0b3
c0018b10:	55                   	push   ebp
c0018b11:	e8 82 7d fe ff       	call   c0000898 <strcmp>
c0018b16:	83 c4 10             	add    esp,0x10
c0018b19:	85 c0                	test   eax,eax
c0018b1b:	75 0f                	jne    c0018b2c <CPU::detectFeatures()+0x322>
c0018b1d:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018b27:	e9 a9 00 00 00       	jmp    c0018bd5 <CPU::detectFeatures()+0x3cb>
c0018b2c:	50                   	push   eax
c0018b2d:	50                   	push   eax
c0018b2e:	68 c0 b0 02 c0       	push   0xc002b0c0
c0018b33:	55                   	push   ebp
c0018b34:	e8 5f 7d fe ff       	call   c0000898 <strcmp>
c0018b39:	83 c4 10             	add    esp,0x10
c0018b3c:	85 c0                	test   eax,eax
c0018b3e:	75 0f                	jne    c0018b4f <CPU::detectFeatures()+0x345>
c0018b40:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018b4a:	e9 86 00 00 00       	jmp    c0018bd5 <CPU::detectFeatures()+0x3cb>
c0018b4f:	50                   	push   eax
c0018b50:	50                   	push   eax
c0018b51:	68 cd b0 02 c0       	push   0xc002b0cd
c0018b56:	55                   	push   ebp
c0018b57:	e8 3c 7d fe ff       	call   c0000898 <strcmp>
c0018b5c:	83 c4 10             	add    esp,0x10
c0018b5f:	85 c0                	test   eax,eax
c0018b61:	75 0c                	jne    c0018b6f <CPU::detectFeatures()+0x365>
c0018b63:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018b6d:	eb 66                	jmp    c0018bd5 <CPU::detectFeatures()+0x3cb>
c0018b6f:	50                   	push   eax
c0018b70:	50                   	push   eax
c0018b71:	68 da b0 02 c0       	push   0xc002b0da
c0018b76:	55                   	push   ebp
c0018b77:	e8 1c 7d fe ff       	call   c0000898 <strcmp>
c0018b7c:	83 c4 10             	add    esp,0x10
c0018b7f:	85 c0                	test   eax,eax
c0018b81:	75 0c                	jne    c0018b8f <CPU::detectFeatures()+0x385>
c0018b83:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018b8d:	eb 46                	jmp    c0018bd5 <CPU::detectFeatures()+0x3cb>
c0018b8f:	57                   	push   edi
c0018b90:	57                   	push   edi
c0018b91:	68 e7 b0 02 c0       	push   0xc002b0e7
c0018b96:	55                   	push   ebp
c0018b97:	e8 fc 7c fe ff       	call   c0000898 <strcmp>
c0018b9c:	83 c4 10             	add    esp,0x10
c0018b9f:	85 c0                	test   eax,eax
c0018ba1:	74 e0                	je     c0018b83 <CPU::detectFeatures()+0x379>
c0018ba3:	56                   	push   esi
c0018ba4:	56                   	push   esi
c0018ba5:	68 f4 b0 02 c0       	push   0xc002b0f4
c0018baa:	55                   	push   ebp
c0018bab:	e8 e8 7c fe ff       	call   c0000898 <strcmp>
c0018bb0:	83 c4 10             	add    esp,0x10
c0018bb3:	85 c0                	test   eax,eax
c0018bb5:	74 cc                	je     c0018b83 <CPU::detectFeatures()+0x379>
c0018bb7:	51                   	push   ecx
c0018bb8:	51                   	push   ecx
c0018bb9:	68 01 b1 02 c0       	push   0xc002b101
c0018bbe:	55                   	push   ebp
c0018bbf:	e8 d4 7c fe ff       	call   c0000898 <strcmp>
c0018bc4:	83 c4 10             	add    esp,0x10
c0018bc7:	85 c0                	test   eax,eax
c0018bc9:	74 b8                	je     c0018b83 <CPU::detectFeatures()+0x379>
c0018bcb:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018bd5:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018bda:	0f 86 be 00 00 00    	jbe    c0018c9e <CPU::detectFeatures()+0x494>
c0018be0:	83 ec 0c             	sub    esp,0xc
c0018be3:	68 80 00 00 00       	push   0x80
c0018be8:	e8 31 fb ff ff       	call   c001871e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018bed:	83 e0 01             	and    eax,0x1
c0018bf0:	c1 e0 06             	shl    eax,0x6
c0018bf3:	88 c2                	mov    dl,al
c0018bf5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018bfb:	83 e0 bf             	and    eax,0xffffffbf
c0018bfe:	09 d0                	or     eax,edx
c0018c00:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018c06:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018c0d:	e8 0c fb ff ff       	call   c001871e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018c12:	83 e0 01             	and    eax,0x1
c0018c15:	c1 e0 04             	shl    eax,0x4
c0018c18:	88 c2                	mov    dl,al
c0018c1a:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018c20:	83 e0 ef             	and    eax,0xffffffef
c0018c23:	09 d0                	or     eax,edx
c0018c25:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018c2b:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018c32:	e8 e7 fa ff ff       	call   c001871e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018c37:	c1 e0 07             	shl    eax,0x7
c0018c3a:	88 c2                	mov    dl,al
c0018c3c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018c42:	83 e0 7f             	and    eax,0x7f
c0018c45:	09 d0                	or     eax,edx
c0018c47:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018c4d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018c54:	e8 f3 fa ff ff       	call   c001874c <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018c59:	83 e0 01             	and    eax,0x1
c0018c5c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018c63:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018c69:	83 e0 f7             	and    eax,0xfffffff7
c0018c6c:	09 d0                	or     eax,edx
c0018c6e:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018c74:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018c7b:	e8 cc fa ff ff       	call   c001874c <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018c80:	83 c4 10             	add    esp,0x10
c0018c83:	83 e0 01             	and    eax,0x1
c0018c86:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018c8d:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018c93:	83 e0 fb             	and    eax,0xfffffffb
c0018c96:	09 d0                	or     eax,edx
c0018c98:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018c9e:	83 ec 0c             	sub    esp,0xc
c0018ca1:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ca5:	50                   	push   eax
c0018ca6:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018caa:	50                   	push   eax
c0018cab:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018caf:	56                   	push   esi
c0018cb0:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018cb4:	50                   	push   eax
c0018cb5:	6a 01                	push   0x1
c0018cb7:	e8 82 f9 ff ff       	call   c001863e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018cbc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018cc0:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018cc6:	88 ca                	mov    dl,cl
c0018cc8:	83 e0 f0             	and    eax,0xfffffff0
c0018ccb:	83 e2 0f             	and    edx,0xf
c0018cce:	09 d0                	or     eax,edx
c0018cd0:	88 ca                	mov    dl,cl
c0018cd2:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018cd8:	c0 ea 04             	shr    dl,0x4
c0018cdb:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018cdf:	0f b6 c2             	movzx  eax,dl
c0018ce2:	83 c4 20             	add    esp,0x20
c0018ce5:	c1 e0 06             	shl    eax,0x6
c0018ce8:	89 c7                	mov    edi,eax
c0018cea:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018cf0:	66 25 3f c0          	and    ax,0xc03f
c0018cf4:	09 f8                	or     eax,edi
c0018cf6:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018cfd:	89 c8                	mov    eax,ecx
c0018cff:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0018d06:	c1 e8 08             	shr    eax,0x8
c0018d09:	83 e5 3f             	and    ebp,0x3f
c0018d0c:	83 e0 0f             	and    eax,0xf
c0018d0f:	89 c7                	mov    edi,eax
c0018d11:	c1 e7 06             	shl    edi,0x6
c0018d14:	09 ef                	or     edi,ebp
c0018d16:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0018d1d:	89 fa                	mov    edx,edi
c0018d1f:	83 e5 c0             	and    ebp,0xffffffc0
c0018d22:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018d28:	88 c2                	mov    dl,al
c0018d2a:	c0 ea 02             	shr    dl,0x2
c0018d2d:	89 d7                	mov    edi,edx
c0018d2f:	09 ef                	or     edi,ebp
c0018d31:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018d37:	89 fa                	mov    edx,edi
c0018d39:	83 e5 cf             	and    ebp,0xffffffcf
c0018d3c:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018d42:	89 cf                	mov    edi,ecx
c0018d44:	c1 ef 0c             	shr    edi,0xc
c0018d47:	83 e7 03             	and    edi,0x3
c0018d4a:	c1 e7 04             	shl    edi,0x4
c0018d4d:	09 ef                	or     edi,ebp
c0018d4f:	3c 06                	cmp    al,0x6
c0018d51:	89 fa                	mov    edx,edi
c0018d53:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018d59:	74 04                	je     c0018d5f <CPU::detectFeatures()+0x555>
c0018d5b:	3c 0f                	cmp    al,0xf
c0018d5d:	75 5c                	jne    c0018dbb <CPU::detectFeatures()+0x5b1>
c0018d5f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018d63:	89 cf                	mov    edi,ecx
c0018d65:	c1 ef 10             	shr    edi,0x10
c0018d68:	c1 e7 04             	shl    edi,0x4
c0018d6b:	09 fa                	or     edx,edi
c0018d6d:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0018d73:	0f b6 d2             	movzx  edx,dl
c0018d76:	66 81 e7 3f c0       	and    di,0xc03f
c0018d7b:	c1 e2 06             	shl    edx,0x6
c0018d7e:	09 fa                	or     edx,edi
c0018d80:	3c 0f                	cmp    al,0xf
c0018d82:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018d89:	75 30                	jne    c0018dbb <CPU::detectFeatures()+0x5b1>
c0018d8b:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018d91:	c1 e9 14             	shr    ecx,0x14
c0018d94:	83 e0 3f             	and    eax,0x3f
c0018d97:	83 c1 0f             	add    ecx,0xf
c0018d9a:	88 ca                	mov    dl,cl
c0018d9c:	c0 e9 02             	shr    cl,0x2
c0018d9f:	c1 e2 06             	shl    edx,0x6
c0018da2:	09 d0                	or     eax,edx
c0018da4:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018daa:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018db0:	83 e0 c0             	and    eax,0xffffffc0
c0018db3:	09 c1                	or     ecx,eax
c0018db5:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018dbb:	83 ec 0c             	sub    esp,0xc
c0018dbe:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018dc5:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018dc9:	50                   	push   eax
c0018dca:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018dce:	55                   	push   ebp
c0018dcf:	56                   	push   esi
c0018dd0:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018dd4:	57                   	push   edi
c0018dd5:	68 00 00 00 80       	push   0x80000000
c0018dda:	e8 5f f8 ff ff       	call   c001863e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ddf:	83 c4 20             	add    esp,0x20
c0018de2:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018dea:	76 22                	jbe    c0018e0e <CPU::detectFeatures()+0x604>
c0018dec:	83 ec 0c             	sub    esp,0xc
c0018def:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018df3:	50                   	push   eax
c0018df4:	55                   	push   ebp
c0018df5:	56                   	push   esi
c0018df6:	57                   	push   edi
c0018df7:	68 01 00 00 80       	push   0x80000001
c0018dfc:	e8 3d f8 ff ff       	call   c001863e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e01:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018e0b:	83 c4 20             	add    esp,0x20
c0018e0e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018e14:	83 f8 01             	cmp    eax,0x1
c0018e17:	75 6f                	jne    c0018e88 <CPU::detectFeatures()+0x67e>
c0018e19:	51                   	push   ecx
c0018e1a:	51                   	push   ecx
c0018e1b:	68 0d b1 02 c0       	push   0xc002b10d
c0018e20:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018e24:	56                   	push   esi
c0018e25:	e8 e2 79 fe ff       	call   c000080c <strcpy>
c0018e2a:	5f                   	pop    edi
c0018e2b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e31:	5d                   	pop    ebp
c0018e32:	66 c1 e8 06          	shr    ax,0x6
c0018e36:	0f b6 c0             	movzx  eax,al
c0018e39:	50                   	push   eax
c0018e3a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e40:	c1 e8 0e             	shr    eax,0xe
c0018e43:	0f b6 c0             	movzx  eax,al
c0018e46:	50                   	push   eax
c0018e47:	e8 9c f4 ff ff       	call   c00182e8 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018e4c:	5a                   	pop    edx
c0018e4d:	59                   	pop    ecx
c0018e4e:	50                   	push   eax
c0018e4f:	56                   	push   esi
c0018e50:	e8 f7 7a fe ff       	call   c000094c <strcat>
c0018e55:	5f                   	pop    edi
c0018e56:	5d                   	pop    ebp
c0018e57:	56                   	push   esi
c0018e58:	53                   	push   ebx
c0018e59:	e8 42 ad ff ff       	call   c0013ba0 <Device::setName(char const*)>
c0018e5e:	58                   	pop    eax
c0018e5f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018e65:	5a                   	pop    edx
c0018e66:	68 14 b1 02 c0       	push   0xc002b114
c0018e6b:	50                   	push   eax
c0018e6c:	e8 27 7a fe ff       	call   c0000898 <strcmp>
c0018e71:	83 c4 10             	add    esp,0x10
c0018e74:	85 c0                	test   eax,eax
c0018e76:	0f 85 71 03 00 00    	jne    c00191ed <CPU::detectFeatures()+0x9e3>
c0018e7c:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018e83:	e9 65 03 00 00       	jmp    c00191ed <CPU::detectFeatures()+0x9e3>
c0018e88:	83 f8 02             	cmp    eax,0x2
c0018e8b:	0f 85 b5 00 00 00    	jne    c0018f46 <CPU::detectFeatures()+0x73c>
c0018e91:	57                   	push   edi
c0018e92:	57                   	push   edi
c0018e93:	68 26 b1 02 c0       	push   0xc002b126
c0018e98:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018e9c:	56                   	push   esi
c0018e9d:	e8 6a 79 fe ff       	call   c000080c <strcpy>
c0018ea2:	5d                   	pop    ebp
c0018ea3:	58                   	pop    eax
c0018ea4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018eaa:	66 c1 e8 06          	shr    ax,0x6
c0018eae:	0f b6 c0             	movzx  eax,al
c0018eb1:	50                   	push   eax
c0018eb2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018eb8:	c1 e8 0e             	shr    eax,0xe
c0018ebb:	0f b6 c0             	movzx  eax,al
c0018ebe:	50                   	push   eax
c0018ebf:	e8 90 f2 ff ff       	call   c0018154 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0018ec4:	5a                   	pop    edx
c0018ec5:	59                   	pop    ecx
c0018ec6:	50                   	push   eax
c0018ec7:	56                   	push   esi
c0018ec8:	e8 7f 7a fe ff       	call   c000094c <strcat>
c0018ecd:	5f                   	pop    edi
c0018ece:	5d                   	pop    ebp
c0018ecf:	56                   	push   esi
c0018ed0:	53                   	push   ebx
c0018ed1:	e8 ca ac ff ff       	call   c0013ba0 <Device::setName(char const*)>
c0018ed6:	58                   	pop    eax
c0018ed7:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018edd:	5a                   	pop    edx
c0018ede:	68 2b b1 02 c0       	push   0xc002b12b
c0018ee3:	50                   	push   eax
c0018ee4:	e8 af 79 fe ff       	call   c0000898 <strcmp>
c0018ee9:	83 c4 10             	add    esp,0x10
c0018eec:	85 c0                	test   eax,eax
c0018eee:	75 20                	jne    c0018f10 <CPU::detectFeatures()+0x706>
c0018ef0:	8b 15 68 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d668
c0018ef6:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018efc:	a8 01                	test   al,0x1
c0018efe:	74 10                	je     c0018f10 <CPU::detectFeatures()+0x706>
c0018f00:	83 e0 fe             	and    eax,0xfffffffe
c0018f03:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0018f09:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0018f10:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f16:	c1 e8 0e             	shr    eax,0xe
c0018f19:	3c 05                	cmp    al,0x5
c0018f1b:	0f 85 cc 02 00 00    	jne    c00191ed <CPU::detectFeatures()+0x9e3>
c0018f21:	56                   	push   esi
c0018f22:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018f28:	83 e0 0f             	and    eax,0xf
c0018f2b:	50                   	push   eax
c0018f2c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f32:	66 c1 e8 06          	shr    ax,0x6
c0018f36:	0f b6 c0             	movzx  eax,al
c0018f39:	50                   	push   eax
c0018f3a:	6a 05                	push   0x5
c0018f3c:	e8 89 f6 ff ff       	call   c00185ca <CPU::AMD_K6_writeback(int, int, int)>
c0018f41:	e9 1f 02 00 00       	jmp    c0019165 <CPU::detectFeatures()+0x95b>
c0018f46:	8d 50 fd             	lea    edx,[eax-0x3]
c0018f49:	83 fa 01             	cmp    edx,0x1
c0018f4c:	76 09                	jbe    c0018f57 <CPU::detectFeatures()+0x74d>
c0018f4e:	83 f8 06             	cmp    eax,0x6
c0018f51:	0f 85 91 01 00 00    	jne    c00190e8 <CPU::detectFeatures()+0x8de>
c0018f57:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018f5d:	c1 ea 0e             	shr    edx,0xe
c0018f60:	80 fa 05             	cmp    dl,0x5
c0018f63:	75 7b                	jne    c0018fe0 <CPU::detectFeatures()+0x7d6>
c0018f65:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018f6b:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018f70:	66 81 fa 00 01       	cmp    dx,0x100
c0018f75:	75 0c                	jne    c0018f83 <CPU::detectFeatures()+0x779>
c0018f77:	51                   	push   ecx
c0018f78:	51                   	push   ecx
c0018f79:	68 32 b1 02 c0       	push   0xc002b132
c0018f7e:	e9 dc 01 00 00       	jmp    c001915f <CPU::detectFeatures()+0x955>
c0018f83:	66 81 fa 00 02       	cmp    dx,0x200
c0018f88:	75 0c                	jne    c0018f96 <CPU::detectFeatures()+0x78c>
c0018f8a:	52                   	push   edx
c0018f8b:	52                   	push   edx
c0018f8c:	68 45 b1 02 c0       	push   0xc002b145
c0018f91:	e9 c9 01 00 00       	jmp    c001915f <CPU::detectFeatures()+0x955>
c0018f96:	66 81 fa 40 02       	cmp    dx,0x240
c0018f9b:	75 0c                	jne    c0018fa9 <CPU::detectFeatures()+0x79f>
c0018f9d:	50                   	push   eax
c0018f9e:	50                   	push   eax
c0018f9f:	68 57 b1 02 c0       	push   0xc002b157
c0018fa4:	e9 b6 01 00 00       	jmp    c001915f <CPU::detectFeatures()+0x955>
c0018fa9:	83 f8 06             	cmp    eax,0x6
c0018fac:	75 0c                	jne    c0018fba <CPU::detectFeatures()+0x7b0>
c0018fae:	50                   	push   eax
c0018faf:	50                   	push   eax
c0018fb0:	68 69 b1 02 c0       	push   0xc002b169
c0018fb5:	e9 a5 01 00 00       	jmp    c001915f <CPU::detectFeatures()+0x955>
c0018fba:	83 f8 04             	cmp    eax,0x4
c0018fbd:	75 0c                	jne    c0018fcb <CPU::detectFeatures()+0x7c1>
c0018fbf:	50                   	push   eax
c0018fc0:	50                   	push   eax
c0018fc1:	68 75 b1 02 c0       	push   0xc002b175
c0018fc6:	e9 94 01 00 00       	jmp    c001915f <CPU::detectFeatures()+0x955>
c0018fcb:	83 f8 03             	cmp    eax,0x3
c0018fce:	0f 85 19 02 00 00    	jne    c00191ed <CPU::detectFeatures()+0x9e3>
c0018fd4:	50                   	push   eax
c0018fd5:	50                   	push   eax
c0018fd6:	68 7d b1 02 c0       	push   0xc002b17d
c0018fdb:	e9 7f 01 00 00       	jmp    c001915f <CPU::detectFeatures()+0x955>
c0018fe0:	80 fa 06             	cmp    dl,0x6
c0018fe3:	0f 85 db 00 00 00    	jne    c00190c4 <CPU::detectFeatures()+0x8ba>
c0018fe9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018fef:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018ff4:	66 81 fa 80 01       	cmp    dx,0x180
c0018ff9:	75 0c                	jne    c0019007 <CPU::detectFeatures()+0x7fd>
c0018ffb:	50                   	push   eax
c0018ffc:	50                   	push   eax
c0018ffd:	68 88 b1 02 c0       	push   0xc002b188
c0019002:	e9 58 01 00 00       	jmp    c001915f <CPU::detectFeatures()+0x955>
c0019007:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001900d:	66 f7 c1 80 ff       	test   cx,0xff80
c0019012:	75 0c                	jne    c0019020 <CPU::detectFeatures()+0x816>
c0019014:	50                   	push   eax
c0019015:	50                   	push   eax
c0019016:	68 98 b1 02 c0       	push   0xc002b198
c001901b:	e9 3f 01 00 00       	jmp    c001915f <CPU::detectFeatures()+0x955>
c0019020:	66 81 fa 40 02       	cmp    dx,0x240
c0019025:	75 0c                	jne    c0019033 <CPU::detectFeatures()+0x829>
c0019027:	55                   	push   ebp
c0019028:	55                   	push   ebp
c0019029:	68 9f b1 02 c0       	push   0xc002b19f
c001902e:	e9 2c 01 00 00       	jmp    c001915f <CPU::detectFeatures()+0x955>
c0019033:	66 81 fa 80 02       	cmp    dx,0x280
c0019038:	75 0c                	jne    c0019046 <CPU::detectFeatures()+0x83c>
c001903a:	57                   	push   edi
c001903b:	57                   	push   edi
c001903c:	68 a8 b1 02 c0       	push   0xc002b1a8
c0019041:	e9 19 01 00 00       	jmp    c001915f <CPU::detectFeatures()+0x955>
c0019046:	66 81 fa 40 03       	cmp    dx,0x340
c001904b:	74 ed                	je     c001903a <CPU::detectFeatures()+0x830>
c001904d:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019052:	75 0c                	jne    c0019060 <CPU::detectFeatures()+0x856>
c0019054:	56                   	push   esi
c0019055:	56                   	push   esi
c0019056:	68 af b1 02 c0       	push   0xc002b1af
c001905b:	e9 ff 00 00 00       	jmp    c001915f <CPU::detectFeatures()+0x955>
c0019060:	83 f8 06             	cmp    eax,0x6
c0019063:	0f 84 45 ff ff ff    	je     c0018fae <CPU::detectFeatures()+0x7a4>
c0019069:	83 f8 04             	cmp    eax,0x4
c001906c:	0f 84 4d ff ff ff    	je     c0018fbf <CPU::detectFeatures()+0x7b5>
c0019072:	83 f8 03             	cmp    eax,0x3
c0019075:	0f 85 72 01 00 00    	jne    c00191ed <CPU::detectFeatures()+0x9e3>
c001907b:	51                   	push   ecx
c001907c:	51                   	push   ecx
c001907d:	68 b8 b1 02 c0       	push   0xc002b1b8
c0019082:	53                   	push   ebx
c0019083:	e8 18 ab ff ff       	call   c0013ba0 <Device::setName(char const*)>
c0019088:	b1 c1                	mov    cl,0xc1
c001908a:	88 c8                	mov    al,cl
c001908c:	e6 22                	out    0x22,al
c001908e:	e4 23                	in     al,0x23
c0019090:	88 c2                	mov    dl,al
c0019092:	88 c8                	mov    al,cl
c0019094:	e6 22                	out    0x22,al
c0019096:	88 d0                	mov    al,dl
c0019098:	83 c8 10             	or     eax,0x10
c001909b:	e6 23                	out    0x23,al
c001909d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00190a4:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00190a7:	89 d0                	mov    eax,edx
c00190a9:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00190af:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00190b3:	40                   	inc    eax
c00190b4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00190ba:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00190bf:	e9 a1 00 00 00       	jmp    c0019165 <CPU::detectFeatures()+0x95b>
c00190c4:	83 f8 06             	cmp    eax,0x6
c00190c7:	0f 84 e1 fe ff ff    	je     c0018fae <CPU::detectFeatures()+0x7a4>
c00190cd:	83 f8 04             	cmp    eax,0x4
c00190d0:	0f 84 e9 fe ff ff    	je     c0018fbf <CPU::detectFeatures()+0x7b5>
c00190d6:	83 f8 03             	cmp    eax,0x3
c00190d9:	0f 85 0e 01 00 00    	jne    c00191ed <CPU::detectFeatures()+0x9e3>
c00190df:	52                   	push   edx
c00190e0:	52                   	push   edx
c00190e1:	68 c3 b1 02 c0       	push   0xc002b1c3
c00190e6:	eb 77                	jmp    c001915f <CPU::detectFeatures()+0x955>
c00190e8:	83 f8 07             	cmp    eax,0x7
c00190eb:	75 09                	jne    c00190f6 <CPU::detectFeatures()+0x8ec>
c00190ed:	50                   	push   eax
c00190ee:	50                   	push   eax
c00190ef:	68 cd b1 02 c0       	push   0xc002b1cd
c00190f4:	eb 69                	jmp    c001915f <CPU::detectFeatures()+0x955>
c00190f6:	83 f8 0a             	cmp    eax,0xa
c00190f9:	75 09                	jne    c0019104 <CPU::detectFeatures()+0x8fa>
c00190fb:	50                   	push   eax
c00190fc:	50                   	push   eax
c00190fd:	68 d8 b1 02 c0       	push   0xc002b1d8
c0019102:	eb 5b                	jmp    c001915f <CPU::detectFeatures()+0x955>
c0019104:	83 f8 0b             	cmp    eax,0xb
c0019107:	75 09                	jne    c0019112 <CPU::detectFeatures()+0x908>
c0019109:	50                   	push   eax
c001910a:	50                   	push   eax
c001910b:	68 e0 b1 02 c0       	push   0xc002b1e0
c0019110:	eb 4d                	jmp    c001915f <CPU::detectFeatures()+0x955>
c0019112:	83 f8 08             	cmp    eax,0x8
c0019115:	75 09                	jne    c0019120 <CPU::detectFeatures()+0x916>
c0019117:	50                   	push   eax
c0019118:	50                   	push   eax
c0019119:	68 e9 b1 02 c0       	push   0xc002b1e9
c001911e:	eb 3f                	jmp    c001915f <CPU::detectFeatures()+0x955>
c0019120:	83 f8 09             	cmp    eax,0x9
c0019123:	75 09                	jne    c001912e <CPU::detectFeatures()+0x924>
c0019125:	50                   	push   eax
c0019126:	50                   	push   eax
c0019127:	68 f1 b1 02 c0       	push   0xc002b1f1
c001912c:	eb 31                	jmp    c001915f <CPU::detectFeatures()+0x955>
c001912e:	83 f8 05             	cmp    eax,0x5
c0019131:	75 09                	jne    c001913c <CPU::detectFeatures()+0x932>
c0019133:	50                   	push   eax
c0019134:	50                   	push   eax
c0019135:	68 f9 b1 02 c0       	push   0xc002b1f9
c001913a:	eb 23                	jmp    c001915f <CPU::detectFeatures()+0x955>
c001913c:	83 f8 0c             	cmp    eax,0xc
c001913f:	75 09                	jne    c001914a <CPU::detectFeatures()+0x940>
c0019141:	55                   	push   ebp
c0019142:	55                   	push   ebp
c0019143:	68 07 b2 02 c0       	push   0xc002b207
c0019148:	eb 15                	jmp    c001915f <CPU::detectFeatures()+0x955>
c001914a:	83 f8 0d             	cmp    eax,0xd
c001914d:	75 09                	jne    c0019158 <CPU::detectFeatures()+0x94e>
c001914f:	57                   	push   edi
c0019150:	57                   	push   edi
c0019151:	68 12 b2 02 c0       	push   0xc002b212
c0019156:	eb 07                	jmp    c001915f <CPU::detectFeatures()+0x955>
c0019158:	56                   	push   esi
c0019159:	56                   	push   esi
c001915a:	68 26 b2 02 c0       	push   0xc002b226
c001915f:	53                   	push   ebx
c0019160:	e8 3b aa ff ff       	call   c0013ba0 <Device::setName(char const*)>
c0019165:	83 c4 10             	add    esp,0x10
c0019168:	e9 80 00 00 00       	jmp    c00191ed <CPU::detectFeatures()+0x9e3>
c001916d:	51                   	push   ecx
c001916e:	51                   	push   ecx
c001916f:	68 72 b0 02 c0       	push   0xc002b072
c0019174:	55                   	push   ebp
c0019175:	e8 92 76 fe ff       	call   c000080c <strcpy>
c001917a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019184:	e8 25 71 fe ff       	call   c00002ae <is486>
c0019189:	83 c4 10             	add    esp,0x10
c001918c:	85 c0                	test   eax,eax
c001918e:	74 2b                	je     c00191bb <CPU::detectFeatures()+0x9b1>
c0019190:	52                   	push   edx
c0019191:	52                   	push   edx
c0019192:	68 32 b2 02 c0       	push   0xc002b232
c0019197:	53                   	push   ebx
c0019198:	e8 03 aa ff ff       	call   c0013ba0 <Device::setName(char const*)>
c001919d:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00191a4:	0f 20 c0             	mov    eax,cr0
c00191a7:	83 e0 14             	and    eax,0x14
c00191aa:	83 c4 10             	add    esp,0x10
c00191ad:	83 f8 04             	cmp    eax,0x4
c00191b0:	75 1f                	jne    c00191d1 <CPU::detectFeatures()+0x9c7>
c00191b2:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00191b9:	eb 32                	jmp    c00191ed <CPU::detectFeatures()+0x9e3>
c00191bb:	50                   	push   eax
c00191bc:	50                   	push   eax
c00191bd:	68 3d b2 02 c0       	push   0xc002b23d
c00191c2:	53                   	push   ebx
c00191c3:	e8 d8 a9 ff ff       	call   c0013ba0 <Device::setName(char const*)>
c00191c8:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00191cf:	eb d3                	jmp    c00191a4 <CPU::detectFeatures()+0x99a>
c00191d1:	e8 b3 70 fe ff       	call   c0000289 <hasLegacyFPU>
c00191d6:	83 e0 01             	and    eax,0x1
c00191d9:	8d 14 00             	lea    edx,[eax+eax*1]
c00191dc:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00191e2:	83 e0 fd             	and    eax,0xfffffffd
c00191e5:	09 d0                	or     eax,edx
c00191e7:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00191ed:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00191f4:	83 c4 4c             	add    esp,0x4c
c00191f7:	5b                   	pop    ebx
c00191f8:	5e                   	pop    esi
c00191f9:	5f                   	pop    edi
c00191fa:	5d                   	pop    ebp
c00191fb:	c3                   	ret    

c00191fc <CPU::setupSMEP()>:
c00191fc:	0f 20 e0             	mov    eax,cr4
c00191ff:	0d 00 00 10 00       	or     eax,0x100000
c0019204:	0f 22 e0             	mov    cr4,eax
c0019207:	c3                   	ret    

c0019208 <CPU::setupUMIP()>:
c0019208:	0f 20 e0             	mov    eax,cr4
c001920b:	80 cc 08             	or     ah,0x8
c001920e:	0f 22 e0             	mov    cr4,eax
c0019211:	c3                   	ret    

c0019212 <CPU::setupTSC()>:
c0019212:	0f 20 e0             	mov    eax,cr4
c0019215:	83 c8 04             	or     eax,0x4
c0019218:	0f 22 e0             	mov    cr4,eax
c001921b:	c3                   	ret    

c001921c <CPU::setupLargePages()>:
c001921c:	0f 20 e0             	mov    eax,cr4
c001921f:	83 c8 10             	or     eax,0x10
c0019222:	0f 22 e0             	mov    cr4,eax
c0019225:	c3                   	ret    

c0019226 <CPU::setupPAT()>:
c0019226:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c001922b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019232:	74 2c                	je     c0019260 <CPU::setupPAT()+0x3a>
c0019234:	53                   	push   ebx
c0019235:	83 ec 10             	sub    esp,0x10
c0019238:	68 77 02 00 00       	push   0x277
c001923d:	50                   	push   eax
c001923e:	e8 fd 58 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c0019243:	83 e2 f8             	and    edx,0xfffffff8
c0019246:	83 ca 01             	or     edx,0x1
c0019249:	52                   	push   edx
c001924a:	50                   	push   eax
c001924b:	68 77 02 00 00       	push   0x277
c0019250:	ff 35 68 d6 02 c0    	push   DWORD PTR ds:0xc002d668
c0019256:	e8 11 59 ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c001925b:	83 c4 28             	add    esp,0x28
c001925e:	5b                   	pop    ebx
c001925f:	c3                   	ret    
c0019260:	c3                   	ret    
c0019261:	90                   	nop

c0019262 <CPU::setupMTRR()>:
c0019262:	c3                   	ret    
c0019263:	90                   	nop

c0019264 <CPU::setupGlobalPages()>:
c0019264:	0f 20 e0             	mov    eax,cr4
c0019267:	0c 80                	or     al,0x80
c0019269:	0f 22 e0             	mov    cr4,eax
c001926c:	c3                   	ret    
c001926d:	90                   	nop

c001926e <CPU::allowUsermodeDataAccess()>:
c001926e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019272:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019279:	74 03                	je     c001927e <CPU::allowUsermodeDataAccess()+0x10>
c001927b:	0f 01 cb             	stac   
c001927e:	c3                   	ret    
c001927f:	90                   	nop

c0019280 <CPU::prohibitUsermodeDataAccess()>:
c0019280:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019284:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001928b:	74 03                	je     c0019290 <CPU::prohibitUsermodeDataAccess()+0x10>
c001928d:	0f 01 ca             	clac   
c0019290:	c3                   	ret    
c0019291:	90                   	nop

c0019292 <CPU::setupSMAP()>:
c0019292:	0f 20 e0             	mov    eax,cr4
c0019295:	0d 00 00 20 00       	or     eax,0x200000
c001929a:	0f 22 e0             	mov    cr4,eax
c001929d:	eb e1                	jmp    c0019280 <CPU::prohibitUsermodeDataAccess()>
c001929f:	90                   	nop

c00192a0 <CPU::setupFeatures()>:
c00192a0:	83 ec 0c             	sub    esp,0xc
c00192a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00192a7:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c00192ae:	74 07                	je     c00192b7 <CPU::setupFeatures()+0x17>
c00192b0:	52                   	push   edx
c00192b1:	e8 46 ff ff ff       	call   c00191fc <CPU::setupSMEP()>
c00192b6:	58                   	pop    eax
c00192b7:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c00192be:	74 07                	je     c00192c7 <CPU::setupFeatures()+0x27>
c00192c0:	52                   	push   edx
c00192c1:	e8 cc ff ff ff       	call   c0019292 <CPU::setupSMAP()>
c00192c6:	58                   	pop    eax
c00192c7:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c00192ce:	74 07                	je     c00192d7 <CPU::setupFeatures()+0x37>
c00192d0:	52                   	push   edx
c00192d1:	e8 32 ff ff ff       	call   c0019208 <CPU::setupUMIP()>
c00192d6:	58                   	pop    eax
c00192d7:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c00192de:	74 07                	je     c00192e7 <CPU::setupFeatures()+0x47>
c00192e0:	52                   	push   edx
c00192e1:	e8 2c ff ff ff       	call   c0019212 <CPU::setupTSC()>
c00192e6:	58                   	pop    eax
c00192e7:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c00192ee:	74 07                	je     c00192f7 <CPU::setupFeatures()+0x57>
c00192f0:	52                   	push   edx
c00192f1:	e8 26 ff ff ff       	call   c001921c <CPU::setupLargePages()>
c00192f6:	59                   	pop    ecx
c00192f7:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c00192fe:	74 07                	je     c0019307 <CPU::setupFeatures()+0x67>
c0019300:	52                   	push   edx
c0019301:	e8 5e ff ff ff       	call   c0019264 <CPU::setupGlobalPages()>
c0019306:	58                   	pop    eax
c0019307:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c001930e:	74 0c                	je     c001931c <CPU::setupFeatures()+0x7c>
c0019310:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019314:	83 c4 0c             	add    esp,0xc
c0019317:	e9 0a ff ff ff       	jmp    c0019226 <CPU::setupPAT()>
c001931c:	83 c4 0c             	add    esp,0xc
c001931f:	c3                   	ret    

c0019320 <CPU::open(int, int, void*)>:
c0019320:	57                   	push   edi
c0019321:	56                   	push   esi
c0019322:	53                   	push   ebx
c0019323:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019327:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001932b:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019331:	83 ec 0c             	sub    esp,0xc
c0019334:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001933a:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019340:	50                   	push   eax
c0019341:	e8 e8 5a ff ff       	call   c000ee2e <GDT::setup()>
c0019346:	83 c4 0c             	add    esp,0xc
c0019349:	6a 00                	push   0x0
c001934b:	68 ef be ad de       	push   0xdeadbeef
c0019350:	57                   	push   edi
c0019351:	e8 ce 77 ff ff       	call   c0010b24 <TSS::setup(unsigned long, unsigned long)>
c0019356:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019359:	e8 a6 77 ff ff       	call   c0010b04 <TSS::flush()>
c001935e:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019364:	89 04 24             	mov    DWORD PTR [esp],eax
c0019367:	e8 26 5d ff ff       	call   c000f092 <IDT::setup()>
c001936c:	b8 00 04 00 00       	mov    eax,0x400
c0019371:	0f 23 f8             	mov    db7,eax
c0019374:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001937e:	e8 ba 65 ff ff       	call   c000f93d <Phys::allocatePage()>
c0019383:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019389:	89 30                	mov    DWORD PTR [eax],esi
c001938b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019391:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019394:	58                   	pop    eax
c0019395:	5a                   	pop    edx
c0019396:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001939c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00193a0:	e8 8f 88 ff ff       	call   c0011c34 <VAS::setCPUSpecific(unsigned long)>
c00193a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00193a8:	e8 5d f4 ff ff       	call   c001880a <CPU::detectFeatures()>
c00193ad:	e8 35 bc ff ff       	call   c0014fe7 <setupInterruptController()>
c00193b2:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00193b8:	a1 80 d6 02 c0       	mov    eax,ds:0xc002d680
c00193bd:	83 e0 10             	and    eax,0x10
c00193c0:	83 f8 01             	cmp    eax,0x1
c00193c3:	19 c0                	sbb    eax,eax
c00193c5:	83 e0 46             	and    eax,0x46
c00193c8:	83 c0 1e             	add    eax,0x1e
c00193cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00193ce:	e8 02 d2 ff ff       	call   c00165d5 <setupTimer(int)>
c00193d3:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00193d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00193dc:	e8 bf fe ff ff       	call   c00192a0 <CPU::setupFeatures()>
c00193e1:	83 c4 10             	add    esp,0x10
c00193e4:	31 c0                	xor    eax,eax
c00193e6:	5b                   	pop    ebx
c00193e7:	5e                   	pop    esi
c00193e8:	5f                   	pop    edi
c00193e9:	c3                   	ret    

c00193ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00193ea:	57                   	push   edi
c00193eb:	56                   	push   esi
c00193ec:	53                   	push   ebx
c00193ed:	51                   	push   ecx
c00193ee:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00193f2:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00193f5:	0f 02 c0             	lar    eax,ax
c00193f8:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00193fb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00193ff:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019402:	88 ca                	mov    dl,cl
c0019404:	c0 ea 06             	shr    dl,0x6
c0019407:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c001940b:	89 ca                	mov    edx,ecx
c001940d:	66 c1 ea 03          	shr    dx,0x3
c0019411:	83 e2 07             	and    edx,0x7
c0019414:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019419:	88 17                	mov    BYTE PTR [edi],dl
c001941b:	0f 84 a6 01 00 00    	je     c00195c7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019421:	83 e1 07             	and    ecx,0x7
c0019424:	80 f9 04             	cmp    cl,0x4
c0019427:	0f 84 98 00 00 00    	je     c00194c5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001942d:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019432:	0f 95 c0             	setne  al
c0019435:	80 f9 05             	cmp    cl,0x5
c0019438:	0f 95 c2             	setne  dl
c001943b:	08 c2                	or     dl,al
c001943d:	74 79                	je     c00194b8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c001943f:	84 c9                	test   cl,cl
c0019441:	75 05                	jne    c0019448 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019443:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019446:	eb 3c                	jmp    c0019484 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019448:	80 f9 01             	cmp    cl,0x1
c001944b:	75 05                	jne    c0019452 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001944d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019450:	eb 32                	jmp    c0019484 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019452:	80 f9 02             	cmp    cl,0x2
c0019455:	75 05                	jne    c001945c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019457:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001945a:	eb 28                	jmp    c0019484 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001945c:	31 c0                	xor    eax,eax
c001945e:	80 f9 03             	cmp    cl,0x3
c0019461:	75 05                	jne    c0019468 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019463:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019466:	eb 1c                	jmp    c0019484 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019468:	80 f9 05             	cmp    cl,0x5
c001946b:	75 05                	jne    c0019472 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001946d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019470:	eb 12                	jmp    c0019484 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019472:	80 f9 06             	cmp    cl,0x6
c0019475:	75 05                	jne    c001947c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019477:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001947a:	eb 08                	jmp    c0019484 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001947c:	80 f9 07             	cmp    cl,0x7
c001947f:	75 03                	jne    c0019484 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019481:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019484:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019489:	75 10                	jne    c001949b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c001948b:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c001948f:	b9 03 00 00 00       	mov    ecx,0x3
c0019494:	01 d0                	add    eax,edx
c0019496:	e9 37 01 00 00       	jmp    c00195d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001949b:	b9 02 00 00 00       	mov    ecx,0x2
c00194a0:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00194a5:	0f 85 27 01 00 00    	jne    c00195d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00194ab:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00194ae:	b9 06 00 00 00       	mov    ecx,0x6
c00194b3:	e9 1a 01 00 00       	jmp    c00195d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00194b8:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00194bb:	b9 06 00 00 00       	mov    ecx,0x6
c00194c0:	e9 0f 01 00 00       	jmp    c00195d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00194c5:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00194c8:	88 ca                	mov    dl,cl
c00194ca:	c0 ea 06             	shr    dl,0x6
c00194cd:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00194d1:	89 ca                	mov    edx,ecx
c00194d3:	66 c1 ea 03          	shr    dx,0x3
c00194d7:	83 e2 07             	and    edx,0x7
c00194da:	80 e1 07             	and    cl,0x7
c00194dd:	75 05                	jne    c00194e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00194df:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00194e2:	eb 4c                	jmp    c0019530 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00194e4:	80 f9 01             	cmp    cl,0x1
c00194e7:	75 05                	jne    c00194ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00194e9:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00194ec:	eb 42                	jmp    c0019530 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00194ee:	80 f9 02             	cmp    cl,0x2
c00194f1:	75 05                	jne    c00194f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00194f3:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00194f6:	eb 38                	jmp    c0019530 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00194f8:	80 f9 03             	cmp    cl,0x3
c00194fb:	75 05                	jne    c0019502 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00194fd:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019500:	eb 2e                	jmp    c0019530 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019502:	80 f9 04             	cmp    cl,0x4
c0019505:	75 12                	jne    c0019519 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019507:	f6 c4 60             	test   ah,0x60
c001950a:	75 08                	jne    c0019514 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001950c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001950f:	8d 78 14             	lea    edi,[eax+0x14]
c0019512:	eb 1c                	jmp    c0019530 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019514:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019517:	eb 17                	jmp    c0019530 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019519:	80 f9 05             	cmp    cl,0x5
c001951c:	75 05                	jne    c0019523 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001951e:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019521:	eb 0d                	jmp    c0019530 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019523:	80 f9 06             	cmp    cl,0x6
c0019526:	75 05                	jne    c001952d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019528:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001952b:	eb 03                	jmp    c0019530 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001952d:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019530:	84 d2                	test   dl,dl
c0019532:	75 05                	jne    c0019539 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019534:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019537:	eb 3c                	jmp    c0019575 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019539:	80 fa 01             	cmp    dl,0x1
c001953c:	75 05                	jne    c0019543 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001953e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019541:	eb 32                	jmp    c0019575 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019543:	80 fa 02             	cmp    dl,0x2
c0019546:	75 05                	jne    c001954d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019548:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001954b:	eb 28                	jmp    c0019575 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001954d:	80 fa 03             	cmp    dl,0x3
c0019550:	75 05                	jne    c0019557 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019552:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019555:	eb 1e                	jmp    c0019575 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019557:	31 c0                	xor    eax,eax
c0019559:	80 fa 04             	cmp    dl,0x4
c001955c:	74 17                	je     c0019575 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001955e:	80 fa 05             	cmp    dl,0x5
c0019561:	75 05                	jne    c0019568 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019563:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019566:	eb 0d                	jmp    c0019575 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019568:	80 fa 06             	cmp    dl,0x6
c001956b:	75 05                	jne    c0019572 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001956d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019570:	eb 03                	jmp    c0019575 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019572:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019575:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001957a:	0f 94 c2             	sete   dl
c001957d:	80 f9 05             	cmp    cl,0x5
c0019580:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019584:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019589:	d3 e0                	shl    eax,cl
c001958b:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001958f:	74 0a                	je     c001959b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019591:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019594:	b9 07 00 00 00       	mov    ecx,0x7
c0019599:	eb 37                	jmp    c00195d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001959b:	01 f8                	add    eax,edi
c001959d:	b9 03 00 00 00       	mov    ecx,0x3
c00195a2:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00195a7:	74 2b                	je     c00195d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00195a9:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00195ae:	75 0d                	jne    c00195bd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00195b0:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00195b4:	01 c8                	add    eax,ecx
c00195b6:	b9 04 00 00 00       	mov    ecx,0x4
c00195bb:	eb 17                	jmp    c00195d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00195bd:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00195c0:	b9 07 00 00 00       	mov    ecx,0x7
c00195c5:	eb 0d                	jmp    c00195d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00195c7:	b9 02 00 00 00       	mov    ecx,0x2
c00195cc:	b2 01                	mov    dl,0x1
c00195ce:	31 c0                	xor    eax,eax
c00195d0:	eb 02                	jmp    c00195d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00195d2:	31 d2                	xor    edx,edx
c00195d4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00195d8:	89 0b                	mov    DWORD PTR [ebx],ecx
c00195da:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00195de:	88 11                	mov    BYTE PTR [ecx],dl
c00195e0:	5a                   	pop    edx
c00195e1:	5b                   	pop    ebx
c00195e2:	5e                   	pop    esi
c00195e3:	5f                   	pop    edi
c00195e4:	c3                   	ret    

c00195e5 <Krnl::smpEntry()>:
c00195e5:	eb fe                	jmp    c00195e5 <Krnl::smpEntry()>

c00195e7 <Krnl::startCPU(int)>:
c00195e7:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c00195ec:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00195f3:	0f 84 36 01 00 00    	je     c001972f <Krnl::startCPU(int)+0x148>
c00195f9:	53                   	push   ebx
c00195fa:	83 ec 10             	sub    esp,0x10
c00195fd:	fa                   	cli    
c00195fe:	ff 05 88 0b 03 c0    	inc    DWORD PTR ds:0xc0030b88
c0019604:	6a 1b                	push   0x1b
c0019606:	ff 35 68 d6 02 c0    	push   DWORD PTR ds:0xc002d668
c001960c:	e8 2f 55 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c0019611:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019616:	89 c3                	mov    ebx,eax
c0019618:	58                   	pop    eax
c0019619:	5a                   	pop    edx
c001961a:	53                   	push   ebx
c001961b:	68 74 b2 02 c0       	push   0xc002b274
c0019620:	e8 4c 8f ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0019625:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001962f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019633:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001963d:	c1 e0 18             	shl    eax,0x18
c0019640:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019646:	83 c4 10             	add    esp,0x10
c0019649:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001964f:	09 c2                	or     edx,eax
c0019651:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019657:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c001965d:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019663:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019669:	80 cd c5             	or     ch,0xc5
c001966c:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019672:	f3 90                	pause  
c0019674:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019676:	0f ba e1 0c          	bt     ecx,0xc
c001967a:	72 f6                	jb     c0019672 <Krnl::startCPU(int)+0x8b>
c001967c:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019682:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019688:	09 c1                	or     ecx,eax
c001968a:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019690:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019696:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001969c:	80 cd 85             	or     ch,0x85
c001969f:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00196a5:	f3 90                	pause  
c00196a7:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00196a9:	0f ba e1 0c          	bt     ecx,0xc
c00196ad:	72 f6                	jb     c00196a5 <Krnl::startCPU(int)+0xbe>
c00196af:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00196b9:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00196bf:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00196c5:	09 c1                	or     ecx,eax
c00196c7:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00196cd:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00196d3:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c00196d9:	81 c9 02 06 00 00    	or     ecx,0x602
c00196df:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00196e5:	f3 90                	pause  
c00196e7:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00196e9:	0f ba e1 0c          	bt     ecx,0xc
c00196ed:	72 f6                	jb     c00196e5 <Krnl::startCPU(int)+0xfe>
c00196ef:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00196f9:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00196ff:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019705:	09 c8                	or     eax,ecx
c0019707:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001970d:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019713:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019718:	0d 02 06 00 00       	or     eax,0x602
c001971d:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019723:	f3 90                	pause  
c0019725:	8b 02                	mov    eax,DWORD PTR [edx]
c0019727:	0f ba e0 0c          	bt     eax,0xc
c001972b:	72 f6                	jb     c0019723 <Krnl::startCPU(int)+0x13c>
c001972d:	eb fe                	jmp    c001972d <Krnl::startCPU(int)+0x146>
c001972f:	c3                   	ret    

c0019730 <Krnl::startCPUs()>:
c0019730:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c0019735:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001973b:	88 c2                	mov    dl,al
c001973d:	83 e2 0a             	and    edx,0xa
c0019740:	80 fa 0a             	cmp    dl,0xa
c0019743:	75 09                	jne    c001974e <Krnl::startCPUs()+0x1e>
c0019745:	a8 01                	test   al,0x1
c0019747:	74 05                	je     c001974e <Krnl::startCPUs()+0x1e>
c0019749:	e9 4d 6a fe ff       	jmp    c000019b <prepareTramp>
c001974e:	c3                   	ret    
c001974f:	90                   	nop

c0019750 <EnvVarContainer::getEnv(char const*)>:
c0019750:	57                   	push   edi
c0019751:	56                   	push   esi
c0019752:	53                   	push   ebx
c0019753:	31 db                	xor    ebx,ebx
c0019755:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019759:	39 1e                	cmp    DWORD PTR [esi],ebx
c001975b:	7e 2b                	jle    c0019788 <EnvVarContainer::getEnv(char const*)+0x38>
c001975d:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019764:	50                   	push   eax
c0019765:	50                   	push   eax
c0019766:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019769:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001976c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019770:	e8 23 71 fe ff       	call   c0000898 <strcmp>
c0019775:	83 c4 10             	add    esp,0x10
c0019778:	85 c0                	test   eax,eax
c001977a:	75 09                	jne    c0019785 <EnvVarContainer::getEnv(char const*)+0x35>
c001977c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001977f:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019783:	eb 05                	jmp    c001978a <EnvVarContainer::getEnv(char const*)+0x3a>
c0019785:	43                   	inc    ebx
c0019786:	eb d1                	jmp    c0019759 <EnvVarContainer::getEnv(char const*)+0x9>
c0019788:	31 c0                	xor    eax,eax
c001978a:	5b                   	pop    ebx
c001978b:	5e                   	pop    esi
c001978c:	5f                   	pop    edi
c001978d:	c3                   	ret    

c001978e <EnvVarContainer::setEnv(char const*, char const*)>:
c001978e:	55                   	push   ebp
c001978f:	57                   	push   edi
c0019790:	56                   	push   esi
c0019791:	53                   	push   ebx
c0019792:	83 ec 28             	sub    esp,0x28
c0019795:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0019799:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001979d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00197a1:	56                   	push   esi
c00197a2:	e8 c5 6f fe ff       	call   c000076c <strlen>
c00197a7:	40                   	inc    eax
c00197a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00197ab:	e8 e9 5d ff ff       	call   c000f599 <malloc>
c00197b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00197b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00197b7:	e8 b0 6f fe ff       	call   c000076c <strlen>
c00197bc:	40                   	inc    eax
c00197bd:	89 04 24             	mov    DWORD PTR [esp],eax
c00197c0:	e8 d4 5d ff ff       	call   c000f599 <malloc>
c00197c5:	89 34 24             	mov    DWORD PTR [esp],esi
c00197c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00197cc:	e8 9b 6f fe ff       	call   c000076c <strlen>
c00197d1:	83 c4 0c             	add    esp,0xc
c00197d4:	40                   	inc    eax
c00197d5:	50                   	push   eax
c00197d6:	6a 00                	push   0x0
c00197d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00197dc:	e8 6f 6f fe ff       	call   c0000750 <memset>
c00197e1:	89 34 24             	mov    DWORD PTR [esp],esi
c00197e4:	e8 83 6f fe ff       	call   c000076c <strlen>
c00197e9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00197ed:	8d 48 01             	lea    ecx,[eax+0x1]
c00197f0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00197f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00197f5:	89 de                	mov    esi,ebx
c00197f7:	e8 70 6f fe ff       	call   c000076c <strlen>
c00197fc:	83 c4 0c             	add    esp,0xc
c00197ff:	40                   	inc    eax
c0019800:	50                   	push   eax
c0019801:	6a 00                	push   0x0
c0019803:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019807:	e8 44 6f fe ff       	call   c0000750 <memset>
c001980c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001980f:	e8 58 6f fe ff       	call   c000076c <strlen>
c0019814:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019818:	8d 48 01             	lea    ecx,[eax+0x1]
c001981b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001981d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019820:	40                   	inc    eax
c0019821:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019824:	c1 e0 03             	shl    eax,0x3
c0019827:	5a                   	pop    edx
c0019828:	59                   	pop    ecx
c0019829:	50                   	push   eax
c001982a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001982d:	e8 53 5d ff ff       	call   c000f585 <realloc>
c0019832:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019836:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019839:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001983c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019840:	b9 08 00 00 00       	mov    ecx,0x8
c0019845:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019847:	83 c4 2c             	add    esp,0x2c
c001984a:	5b                   	pop    ebx
c001984b:	5e                   	pop    esi
c001984c:	5f                   	pop    edi
c001984d:	5d                   	pop    ebp
c001984e:	c3                   	ret    
c001984f:	90                   	nop

c0019850 <EnvVarContainer::deleteEnv(char const*)>:
c0019850:	c3                   	ret    
c0019851:	90                   	nop

c0019852 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019852:	55                   	push   ebp
c0019853:	57                   	push   edi
c0019854:	56                   	push   esi
c0019855:	53                   	push   ebx
c0019856:	81 ec 38 01 00 00    	sub    esp,0x138
c001985c:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0019863:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001986a:	68 14 01 00 00       	push   0x114
c001986f:	e8 25 5d ff ff       	call   c000f599 <malloc>
c0019874:	83 c4 0c             	add    esp,0xc
c0019877:	89 c3                	mov    ebx,eax
c0019879:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001987c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019883:	50                   	push   eax
c0019884:	e8 47 92 ff ff       	call   c0012ad0 <File::File(char const*, Process*)>
c0019889:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001988c:	e8 11 95 ff ff       	call   c0012da2 <File::exists()>
c0019891:	83 c4 10             	add    esp,0x10
c0019894:	84 c0                	test   al,al
c0019896:	75 31                	jne    c00198c9 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019898:	50                   	push   eax
c0019899:	50                   	push   eax
c001989a:	6a 12                	push   0x12
c001989c:	53                   	push   ebx
c001989d:	e8 92 92 ff ff       	call   c0012b34 <File::open(FileOpenMode)>
c00198a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00198a4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00198a7:	89 34 24             	mov    DWORD PTR [esp],esi
c00198aa:	e8 bd 6e fe ff       	call   c000076c <strlen>
c00198af:	5a                   	pop    edx
c00198b0:	31 d2                	xor    edx,edx
c00198b2:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00198b6:	51                   	push   ecx
c00198b7:	56                   	push   esi
c00198b8:	52                   	push   edx
c00198b9:	50                   	push   eax
c00198ba:	53                   	push   ebx
c00198bb:	ff d7                	call   edi
c00198bd:	83 c4 14             	add    esp,0x14
c00198c0:	53                   	push   ebx
c00198c1:	e8 cc 92 ff ff       	call   c0012b92 <File::close()>
c00198c6:	83 c4 10             	add    esp,0x10
c00198c9:	56                   	push   esi
c00198ca:	31 f6                	xor    esi,esi
c00198cc:	68 00 01 00 00       	push   0x100
c00198d1:	6a 00                	push   0x0
c00198d3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00198d7:	50                   	push   eax
c00198d8:	e8 73 6e fe ff       	call   c0000750 <memset>
c00198dd:	5f                   	pop    edi
c00198de:	58                   	pop    eax
c00198df:	6a 01                	push   0x1
c00198e1:	53                   	push   ebx
c00198e2:	e8 4d 92 ff ff       	call   c0012b34 <File::open(FileOpenMode)>
c00198e7:	83 c4 10             	add    esp,0x10
c00198ea:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00198f2:	83 ec 0c             	sub    esp,0xc
c00198f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00198f7:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00198fb:	51                   	push   ecx
c00198fc:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019900:	52                   	push   edx
c0019901:	6a 00                	push   0x0
c0019903:	6a 01                	push   0x1
c0019905:	53                   	push   ebx
c0019906:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019909:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001990d:	83 c4 20             	add    esp,0x20
c0019910:	3c 0d                	cmp    al,0xd
c0019912:	0f 84 09 01 00 00    	je     c0019a21 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019918:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001991d:	0f 84 ef 00 00 00    	je     c0019a12 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019923:	3c 0a                	cmp    al,0xa
c0019925:	74 13                	je     c001993a <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019927:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001992c:	74 0c                	je     c001993a <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c001992e:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0019934:	0f 8e d8 00 00 00    	jle    c0019a12 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c001993a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001993e:	83 ec 0c             	sub    esp,0xc
c0019941:	8d 78 01             	lea    edi,[eax+0x1]
c0019944:	57                   	push   edi
c0019945:	e8 4f 5c ff ff       	call   c000f599 <malloc>
c001994a:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001994e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019952:	8d 56 04             	lea    edx,[esi+0x4]
c0019955:	89 14 24             	mov    DWORD PTR [esp],edx
c0019958:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001995c:	e8 38 5c ff ff       	call   c000f599 <malloc>
c0019961:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019965:	83 c4 0c             	add    esp,0xc
c0019968:	57                   	push   edi
c0019969:	6a 00                	push   0x0
c001996b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001996f:	e8 dc 6d fe ff       	call   c0000750 <memset>
c0019974:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019978:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001997c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019980:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019982:	83 c4 0c             	add    esp,0xc
c0019985:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019989:	52                   	push   edx
c001998a:	6a 00                	push   0x0
c001998c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019990:	e8 bb 6d fe ff       	call   c0000750 <memset>
c0019995:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019999:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001999d:	89 34 24             	mov    DWORD PTR [esp],esi
c00199a0:	e8 c7 6d fe ff       	call   c000076c <strlen>
c00199a5:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00199a9:	89 c1                	mov    ecx,eax
c00199ab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00199ad:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00199b0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00199b3:	40                   	inc    eax
c00199b4:	83 c4 10             	add    esp,0x10
c00199b7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00199ba:	85 d2                	test   edx,edx
c00199bc:	75 0c                	jne    c00199ca <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c00199be:	83 ec 0c             	sub    esp,0xc
c00199c1:	6a 08                	push   0x8
c00199c3:	e8 d1 5b ff ff       	call   c000f599 <malloc>
c00199c8:	eb 0c                	jmp    c00199d6 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c00199ca:	c1 e0 03             	shl    eax,0x3
c00199cd:	51                   	push   ecx
c00199ce:	51                   	push   ecx
c00199cf:	50                   	push   eax
c00199d0:	52                   	push   edx
c00199d1:	e8 af 5b ff ff       	call   c000f585 <realloc>
c00199d6:	83 c4 10             	add    esp,0x10
c00199d9:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00199dc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00199df:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00199e2:	8d 74 24 18          	lea    esi,[esp+0x18]
c00199e6:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00199ea:	b9 08 00 00 00       	mov    ecx,0x8
c00199ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00199f1:	31 f6                	xor    esi,esi
c00199f3:	50                   	push   eax
c00199f4:	68 00 01 00 00       	push   0x100
c00199f9:	6a 00                	push   0x0
c00199fb:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00199ff:	50                   	push   eax
c0019a00:	e8 4b 6d fe ff       	call   c0000750 <memset>
c0019a05:	83 c4 10             	add    esp,0x10
c0019a08:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019a10:	eb 0f                	jmp    c0019a21 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019a12:	3c 3d                	cmp    al,0x3d
c0019a14:	74 07                	je     c0019a1d <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0019a16:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0019a1a:	46                   	inc    esi
c0019a1b:	eb 04                	jmp    c0019a21 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019a1d:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019a21:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019a26:	0f 85 c6 fe ff ff    	jne    c00198f2 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0019a2c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019a32:	5b                   	pop    ebx
c0019a33:	5e                   	pop    esi
c0019a34:	5f                   	pop    edi
c0019a35:	5d                   	pop    ebp
c0019a36:	c3                   	ret    
c0019a37:	90                   	nop

c0019a38 <EnvVarContainer::__loadSystem()>:
c0019a38:	83 ec 10             	sub    esp,0x10
c0019a3b:	68 a0 cb 02 c0       	push   0xc002cba0
c0019a40:	68 85 b2 02 c0       	push   0xc002b285
c0019a45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019a49:	e8 04 fe ff ff       	call   c0019852 <EnvVarContainer::loadFrom(char const*, char const*)>
c0019a4e:	83 c4 1c             	add    esp,0x1c
c0019a51:	c3                   	ret    

c0019a52 <EnvVarContainer::__loadUser()>:
c0019a52:	c3                   	ret    
c0019a53:	90                   	nop

c0019a54 <EnvVarContainer::EnvVarContainer(Process*)>:
c0019a54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019a58:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019a5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019a62:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019a66:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019a69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019a6d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019a74:	90                   	nop
c0019a75:	c3                   	ret    

c0019a76 <EnvVarContainer::~EnvVarContainer()>:
c0019a76:	83 ec 0c             	sub    esp,0xc
c0019a79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a7d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019a80:	85 c0                	test   eax,eax
c0019a82:	74 1d                	je     c0019aa1 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019a84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a88:	8b 00                	mov    eax,DWORD PTR [eax]
c0019a8a:	85 c0                	test   eax,eax
c0019a8c:	74 13                	je     c0019aa1 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a92:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019a95:	83 ec 0c             	sub    esp,0xc
c0019a98:	50                   	push   eax
c0019a99:	e8 0b 5b ff ff       	call   c000f5a9 <free>
c0019a9e:	83 c4 10             	add    esp,0x10
c0019aa1:	90                   	nop
c0019aa2:	83 c4 0c             	add    esp,0xc
c0019aa5:	c3                   	ret    

c0019aa6 <Krnl::getEnv(Process*, char const*)>:
c0019aa6:	53                   	push   ebx
c0019aa7:	83 ec 08             	sub    esp,0x8
c0019aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019aae:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019ab2:	39 05 b0 0b 03 c0    	cmp    DWORD PTR ds:0xc0030bb0,eax
c0019ab8:	74 04                	je     c0019abe <Krnl::getEnv(Process*, char const*)+0x18>
c0019aba:	85 c0                	test   eax,eax
c0019abc:	75 0b                	jne    c0019ac9 <Krnl::getEnv(Process*, char const*)+0x23>
c0019abe:	a1 94 01 03 c0       	mov    eax,ds:0xc0030194
c0019ac3:	85 c0                	test   eax,eax
c0019ac5:	75 19                	jne    c0019ae0 <Krnl::getEnv(Process*, char const*)+0x3a>
c0019ac7:	eb 27                	jmp    c0019af0 <Krnl::getEnv(Process*, char const*)+0x4a>
c0019ac9:	52                   	push   edx
c0019aca:	52                   	push   edx
c0019acb:	53                   	push   ebx
c0019acc:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019ad2:	e8 79 fc ff ff       	call   c0019750 <EnvVarContainer::getEnv(char const*)>
c0019ad7:	83 c4 10             	add    esp,0x10
c0019ada:	85 c0                	test   eax,eax
c0019adc:	75 28                	jne    c0019b06 <Krnl::getEnv(Process*, char const*)+0x60>
c0019ade:	eb de                	jmp    c0019abe <Krnl::getEnv(Process*, char const*)+0x18>
c0019ae0:	52                   	push   edx
c0019ae1:	52                   	push   edx
c0019ae2:	53                   	push   ebx
c0019ae3:	50                   	push   eax
c0019ae4:	e8 67 fc ff ff       	call   c0019750 <EnvVarContainer::getEnv(char const*)>
c0019ae9:	83 c4 10             	add    esp,0x10
c0019aec:	85 c0                	test   eax,eax
c0019aee:	75 16                	jne    c0019b06 <Krnl::getEnv(Process*, char const*)+0x60>
c0019af0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019af4:	a1 98 01 03 c0       	mov    eax,ds:0xc0030198
c0019af9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019afd:	83 c4 08             	add    esp,0x8
c0019b00:	5b                   	pop    ebx
c0019b01:	e9 4a fc ff ff       	jmp    c0019750 <EnvVarContainer::getEnv(char const*)>
c0019b06:	83 c4 08             	add    esp,0x8
c0019b09:	5b                   	pop    ebx
c0019b0a:	c3                   	ret    

c0019b0b <Krnl::setEnvSystem(char const*, char const*)>:
c0019b0b:	83 ec 10             	sub    esp,0x10
c0019b0e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b16:	ff 35 98 01 03 c0    	push   DWORD PTR ds:0xc0030198
c0019b1c:	e8 6d fc ff ff       	call   c001978e <EnvVarContainer::setEnv(char const*, char const*)>
c0019b21:	83 c4 1c             	add    esp,0x1c
c0019b24:	c3                   	ret    

c0019b25 <Krnl::setEnvUser(char const*, char const*)>:
c0019b25:	a1 94 01 03 c0       	mov    eax,ds:0xc0030194
c0019b2a:	85 c0                	test   eax,eax
c0019b2c:	74 15                	je     c0019b43 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019b2e:	83 ec 10             	sub    esp,0x10
c0019b31:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b39:	50                   	push   eax
c0019b3a:	e8 4f fc ff ff       	call   c001978e <EnvVarContainer::setEnv(char const*, char const*)>
c0019b3f:	83 c4 1c             	add    esp,0x1c
c0019b42:	c3                   	ret    
c0019b43:	c3                   	ret    

c0019b44 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019b44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b48:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019b4e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019b52:	e9 37 fc ff ff       	jmp    c001978e <EnvVarContainer::setEnv(char const*, char const*)>

c0019b57 <Krnl::deleteEnvSystem(char const*)>:
c0019b57:	c3                   	ret    

c0019b58 <Krnl::deleteEnvUser(char const*)>:
c0019b58:	c3                   	ret    

c0019b59 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019b59:	c3                   	ret    

c0019b5a <Krnl::newProcessEnv(Process*)>:
c0019b5a:	83 ec 28             	sub    esp,0x28
c0019b5d:	6a 0c                	push   0xc
c0019b5f:	e8 35 5a ff ff       	call   c000f599 <malloc>
c0019b64:	5a                   	pop    edx
c0019b65:	59                   	pop    ecx
c0019b66:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019b6a:	50                   	push   eax
c0019b6b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019b6f:	e8 e0 fe ff ff       	call   c0019a54 <EnvVarContainer::EnvVarContainer(Process*)>
c0019b74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b78:	83 c4 2c             	add    esp,0x2c
c0019b7b:	c3                   	ret    

c0019b7c <Krnl::copyProcessEnv(Process*, Process*)>:
c0019b7c:	57                   	push   edi
c0019b7d:	56                   	push   esi
c0019b7e:	53                   	push   ebx
c0019b7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b83:	83 ec 0c             	sub    esp,0xc
c0019b86:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c0019b8c:	6a 0c                	push   0xc
c0019b8e:	e8 06 5a ff ff       	call   c000f599 <malloc>
c0019b93:	89 c3                	mov    ebx,eax
c0019b95:	58                   	pop    eax
c0019b96:	5a                   	pop    edx
c0019b97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019b9b:	53                   	push   ebx
c0019b9c:	e8 b3 fe ff ff       	call   c0019a54 <EnvVarContainer::EnvVarContainer(Process*)>
c0019ba1:	8b 07                	mov    eax,DWORD PTR [edi]
c0019ba3:	89 03                	mov    DWORD PTR [ebx],eax
c0019ba5:	c1 e0 03             	shl    eax,0x3
c0019ba8:	89 04 24             	mov    DWORD PTR [esp],eax
c0019bab:	e8 e9 59 ff ff       	call   c000f599 <malloc>
c0019bb0:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019bb3:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0019bb5:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0019bb8:	c1 e1 03             	shl    ecx,0x3
c0019bbb:	89 c7                	mov    edi,eax
c0019bbd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019bbf:	83 c4 10             	add    esp,0x10
c0019bc2:	89 d8                	mov    eax,ebx
c0019bc4:	5b                   	pop    ebx
c0019bc5:	5e                   	pop    esi
c0019bc6:	5f                   	pop    edi
c0019bc7:	c3                   	ret    

c0019bc8 <Krnl::loadSystemEnv()>:
c0019bc8:	53                   	push   ebx
c0019bc9:	83 ec 14             	sub    esp,0x14
c0019bcc:	6a 0c                	push   0xc
c0019bce:	e8 c6 59 ff ff       	call   c000f599 <malloc>
c0019bd3:	89 c3                	mov    ebx,eax
c0019bd5:	58                   	pop    eax
c0019bd6:	5a                   	pop    edx
c0019bd7:	ff 35 b0 0b 03 c0    	push   DWORD PTR ds:0xc0030bb0
c0019bdd:	53                   	push   ebx
c0019bde:	e8 71 fe ff ff       	call   c0019a54 <EnvVarContainer::EnvVarContainer(Process*)>
c0019be3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019be6:	89 1d 98 01 03 c0    	mov    DWORD PTR ds:0xc0030198,ebx
c0019bec:	e8 47 fe ff ff       	call   c0019a38 <EnvVarContainer::__loadSystem()>
c0019bf1:	83 c4 18             	add    esp,0x18
c0019bf4:	5b                   	pop    ebx
c0019bf5:	c3                   	ret    

c0019bf6 <Krnl::loadUserEnv()>:
c0019bf6:	53                   	push   ebx
c0019bf7:	83 ec 14             	sub    esp,0x14
c0019bfa:	6a 0c                	push   0xc
c0019bfc:	e8 98 59 ff ff       	call   c000f599 <malloc>
c0019c01:	89 c3                	mov    ebx,eax
c0019c03:	58                   	pop    eax
c0019c04:	5a                   	pop    edx
c0019c05:	ff 35 b0 0b 03 c0    	push   DWORD PTR ds:0xc0030bb0
c0019c0b:	53                   	push   ebx
c0019c0c:	e8 43 fe ff ff       	call   c0019a54 <EnvVarContainer::EnvVarContainer(Process*)>
c0019c11:	89 1d 94 01 03 c0    	mov    DWORD PTR ds:0xc0030194,ebx
c0019c17:	83 c4 18             	add    esp,0x18
c0019c1a:	5b                   	pop    ebx
c0019c1b:	c3                   	ret    

c0019c1c <Krnl::flushEnv()>:
c0019c1c:	c3                   	ret    

c0019c1d <Krnl::getProcessTotalEnvCount(Process*)>:
c0019c1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c21:	8b 15 94 01 03 c0    	mov    edx,DWORD PTR ds:0xc0030194
c0019c27:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019c2d:	a1 98 01 03 c0       	mov    eax,ds:0xc0030198
c0019c32:	8b 00                	mov    eax,DWORD PTR [eax]
c0019c34:	03 01                	add    eax,DWORD PTR [ecx]
c0019c36:	85 d2                	test   edx,edx
c0019c38:	74 02                	je     c0019c3c <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019c3a:	03 02                	add    eax,DWORD PTR [edx]
c0019c3c:	c3                   	ret    

c0019c3d <Krnl::getProcessEnvPair(Process*, int)>:
c0019c3d:	57                   	push   edi
c0019c3e:	56                   	push   esi
c0019c3f:	8b 35 94 01 03 c0    	mov    esi,DWORD PTR ds:0xc0030194
c0019c45:	53                   	push   ebx
c0019c46:	85 f6                	test   esi,esi
c0019c48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c4c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019c50:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019c56:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019c5a:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019c5c:	75 16                	jne    c0019c74 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0019c5e:	39 c2                	cmp    edx,eax
c0019c60:	7c 16                	jl     c0019c78 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019c62:	8b 0d 98 01 03 c0    	mov    ecx,DWORD PTR ds:0xc0030198
c0019c68:	8b 31                	mov    esi,DWORD PTR [ecx]
c0019c6a:	01 c6                	add    esi,eax
c0019c6c:	39 d6                	cmp    esi,edx
c0019c6e:	7e 3c                	jle    c0019cac <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019c70:	29 c2                	sub    edx,eax
c0019c72:	eb 04                	jmp    c0019c78 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019c74:	39 c2                	cmp    edx,eax
c0019c76:	7d 05                	jge    c0019c7d <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0019c78:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019c7b:	eb 20                	jmp    c0019c9d <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0019c7d:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019c7f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0019c82:	39 d1                	cmp    ecx,edx
c0019c84:	7e 04                	jle    c0019c8a <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0019c86:	29 c2                	sub    edx,eax
c0019c88:	eb 10                	jmp    c0019c9a <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0019c8a:	8b 35 98 01 03 c0    	mov    esi,DWORD PTR ds:0xc0030198
c0019c90:	03 0e                	add    ecx,DWORD PTR [esi]
c0019c92:	39 d1                	cmp    ecx,edx
c0019c94:	7e 16                	jle    c0019cac <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019c96:	29 c2                	sub    edx,eax
c0019c98:	29 fa                	sub    edx,edi
c0019c9a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019c9d:	8d 14 d0             	lea    edx,[eax+edx*8]
c0019ca0:	8b 02                	mov    eax,DWORD PTR [edx]
c0019ca2:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0019ca5:	89 03                	mov    DWORD PTR [ebx],eax
c0019ca7:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019caa:	eb 1d                	jmp    c0019cc9 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0019cac:	83 ec 0c             	sub    esp,0xc
c0019caf:	68 a7 b2 02 c0       	push   0xc002b2a7
c0019cb4:	e8 18 00 00 00       	call   c0019cd1 <Krnl::panic(char const*)>
c0019cb9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0019cbf:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019cc6:	83 c4 10             	add    esp,0x10
c0019cc9:	89 d8                	mov    eax,ebx
c0019ccb:	5b                   	pop    ebx
c0019ccc:	5e                   	pop    esi
c0019ccd:	5f                   	pop    edi
c0019cce:	c2 04 00             	ret    0x4

c0019cd1 <Krnl::panic(char const*)>:
c0019cd1:	55                   	push   ebp
c0019cd2:	89 e5                	mov    ebp,esp
c0019cd4:	53                   	push   ebx
c0019cd5:	83 ec 10             	sub    esp,0x10
c0019cd8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019cdb:	fa                   	cli    
c0019cdc:	c6 05 a4 01 03 c0 01 	mov    BYTE PTR ds:0xc00301a4,0x1
c0019ce3:	53                   	push   ebx
c0019ce4:	e8 0a 59 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0019ce9:	58                   	pop    eax
c0019cea:	c6 05 a0 c5 02 c0 00 	mov    BYTE PTR ds:0xc002c5a0,0x0
c0019cf1:	5a                   	pop    edx
c0019cf2:	53                   	push   ebx
c0019cf3:	68 c1 b2 02 c0       	push   0xc002b2c1
c0019cf8:	e8 74 88 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0019cfd:	59                   	pop    ecx
c0019cfe:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0019d03:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d09:	e8 c5 65 ff ff       	call   c00102d3 <setActiveTerminal(VgaText*)>
c0019d0e:	83 c4 0c             	add    esp,0xc
c0019d11:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0019d16:	6a 01                	push   0x1
c0019d18:	6a 0f                	push   0xf
c0019d1a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d20:	e8 0d 64 ff ff       	call   c0010132 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019d25:	58                   	pop    eax
c0019d26:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0019d2b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d31:	e8 1e 69 ff ff       	call   c0010654 <VgaText::clearScreen()>
c0019d36:	58                   	pop    eax
c0019d37:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0019d3c:	5a                   	pop    edx
c0019d3d:	68 da b2 02 c0       	push   0xc002b2da
c0019d42:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d48:	e8 93 6a ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019d4d:	59                   	pop    ecx
c0019d4e:	58                   	pop    eax
c0019d4f:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0019d54:	68 80 b3 02 c0       	push   0xc002b380
c0019d59:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d5f:	e8 7c 6a ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019d64:	58                   	pop    eax
c0019d65:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0019d6a:	5a                   	pop    edx
c0019d6b:	68 f6 b2 02 c0       	push   0xc002b2f6
c0019d70:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d76:	e8 65 6a ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019d7b:	59                   	pop    ecx
c0019d7c:	58                   	pop    eax
c0019d7d:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0019d82:	53                   	push   ebx
c0019d83:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d89:	e8 52 6a ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019d8e:	58                   	pop    eax
c0019d8f:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0019d94:	5a                   	pop    edx
c0019d95:	68 16 b3 02 c0       	push   0xc002b316
c0019d9a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019da0:	e8 3b 6a ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019da5:	a1 a0 01 03 c0       	mov    eax,ds:0xc00301a0
c0019daa:	83 c4 10             	add    esp,0x10
c0019dad:	85 c0                	test   eax,eax
c0019daf:	74 02                	je     c0019db3 <Krnl::panic(char const*)+0xe2>
c0019db1:	ff d0                	call   eax
c0019db3:	83 ec 0c             	sub    esp,0xc
c0019db6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019db9:	e8 8c 30 00 00       	call   c001ce4a <Thr::getDriverNameFromAddress(unsigned long)>
c0019dbe:	83 c4 10             	add    esp,0x10
c0019dc1:	89 c3                	mov    ebx,eax
c0019dc3:	85 c0                	test   eax,eax
c0019dc5:	0f 84 4e 02 00 00    	je     c001a019 <Krnl::panic(char const*)+0x348>
c0019dcb:	83 ec 08             	sub    esp,0x8
c0019dce:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0019dd3:	68 bc b3 02 c0       	push   0xc002b3bc
c0019dd8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019dde:	e8 fd 69 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019de3:	58                   	pop    eax
c0019de4:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0019de9:	5a                   	pop    edx
c0019dea:	68 f6 b2 02 c0       	push   0xc002b2f6
c0019def:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019df5:	e8 e6 69 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019dfa:	59                   	pop    ecx
c0019dfb:	58                   	pop    eax
c0019dfc:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0019e01:	53                   	push   ebx
c0019e02:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e08:	e8 d3 69 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019e0d:	83 c4 10             	add    esp,0x10
c0019e10:	83 ec 08             	sub    esp,0x8
c0019e13:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0019e18:	68 15 b3 02 c0       	push   0xc002b315
c0019e1d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e23:	e8 b8 69 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019e28:	58                   	pop    eax
c0019e29:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0019e2e:	5a                   	pop    edx
c0019e2f:	68 14 b4 02 c0       	push   0xc002b414
c0019e34:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e3a:	e8 a1 69 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019e3f:	59                   	pop    ecx
c0019e40:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0019e45:	5b                   	pop    ebx
c0019e46:	68 54 b4 02 c0       	push   0xc002b454
c0019e4b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e51:	e8 8a 69 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019e56:	58                   	pop    eax
c0019e57:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0019e5c:	5a                   	pop    edx
c0019e5d:	68 01 b3 02 c0       	push   0xc002b301
c0019e62:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e68:	e8 73 69 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019e6d:	59                   	pop    ecx
c0019e6e:	5b                   	pop    ebx
c0019e6f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019e72:	68 19 b3 02 c0       	push   0xc002b319
c0019e77:	e8 f5 86 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0019e7c:	58                   	pop    eax
c0019e7d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019e80:	5a                   	pop    edx
c0019e81:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019e84:	68 22 b3 02 c0       	push   0xc002b322
c0019e89:	e8 e3 86 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0019e8e:	59                   	pop    ecx
c0019e8f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019e92:	5b                   	pop    ebx
c0019e93:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e95:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019e98:	68 2b b3 02 c0       	push   0xc002b32b
c0019e9d:	e8 cf 86 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0019ea2:	58                   	pop    eax
c0019ea3:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0019ea8:	5a                   	pop    edx
c0019ea9:	68 98 b4 02 c0       	push   0xc002b498
c0019eae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019eb4:	e8 27 69 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019eb9:	59                   	pop    ecx
c0019eba:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0019ebf:	5b                   	pop    ebx
c0019ec0:	68 34 b3 02 c0       	push   0xc002b334
c0019ec5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ecb:	e8 10 69 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019ed0:	0f 20 c0             	mov    eax,cr0
c0019ed3:	5a                   	pop    edx
c0019ed4:	59                   	pop    ecx
c0019ed5:	50                   	push   eax
c0019ed6:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0019edb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ee1:	e8 b4 68 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c0019ee6:	5b                   	pop    ebx
c0019ee7:	58                   	pop    eax
c0019ee8:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0019eed:	68 3e b3 02 c0       	push   0xc002b33e
c0019ef2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ef8:	e8 e3 68 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019efd:	0f 20 d0             	mov    eax,cr2
c0019f00:	5a                   	pop    edx
c0019f01:	59                   	pop    ecx
c0019f02:	50                   	push   eax
c0019f03:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0019f08:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f0e:	e8 87 68 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c0019f13:	5b                   	pop    ebx
c0019f14:	58                   	pop    eax
c0019f15:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0019f1a:	68 48 b3 02 c0       	push   0xc002b348
c0019f1f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f25:	e8 b6 68 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019f2a:	0f 20 d8             	mov    eax,cr3
c0019f2d:	5a                   	pop    edx
c0019f2e:	59                   	pop    ecx
c0019f2f:	50                   	push   eax
c0019f30:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0019f35:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f3b:	e8 5a 68 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c0019f40:	5b                   	pop    ebx
c0019f41:	58                   	pop    eax
c0019f42:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0019f47:	68 5b b3 02 c0       	push   0xc002b35b
c0019f4c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f52:	e8 89 68 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019f57:	0f 20 e0             	mov    eax,cr4
c0019f5a:	5a                   	pop    edx
c0019f5b:	59                   	pop    ecx
c0019f5c:	50                   	push   eax
c0019f5d:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0019f62:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f68:	e8 2d 68 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c0019f6d:	5b                   	pop    ebx
c0019f6e:	58                   	pop    eax
c0019f6f:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0019f74:	68 65 b3 02 c0       	push   0xc002b365
c0019f79:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f7f:	e8 5c 68 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019f84:	5a                   	pop    edx
c0019f85:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0019f8a:	59                   	pop    ecx
c0019f8b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019f91:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019f94:	50                   	push   eax
c0019f95:	e8 00 68 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c0019f9a:	5b                   	pop    ebx
c0019f9b:	58                   	pop    eax
c0019f9c:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0019fa1:	68 7c b3 02 c0       	push   0xc002b37c
c0019fa6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fac:	e8 2f 68 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019fb1:	5a                   	pop    edx
c0019fb2:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0019fb7:	59                   	pop    ecx
c0019fb8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019fbe:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019fc1:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019fc4:	50                   	push   eax
c0019fc5:	e8 d0 67 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c0019fca:	5b                   	pop    ebx
c0019fcb:	58                   	pop    eax
c0019fcc:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0019fd1:	68 7c b3 02 c0       	push   0xc002b37c
c0019fd6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fdc:	e8 ff 67 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019fe1:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c0019fe6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019fe9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019fef:	8b 12                	mov    edx,DWORD PTR [edx]
c0019ff1:	59                   	pop    ecx
c0019ff2:	5b                   	pop    ebx
c0019ff3:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019ff6:	50                   	push   eax
c0019ff7:	e8 9e 67 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c0019ffc:	83 c4 10             	add    esp,0x10
c0019fff:	b2 fe                	mov    dl,0xfe
c001a001:	e4 60                	in     al,0x60
c001a003:	3c 1c                	cmp    al,0x1c
c001a005:	74 04                	je     c001a00b <Krnl::panic(char const*)+0x33a>
c001a007:	3c 5a                	cmp    al,0x5a
c001a009:	75 f6                	jne    c001a001 <Krnl::panic(char const*)+0x330>
c001a00b:	e4 64                	in     al,0x64
c001a00d:	a8 02                	test   al,0x2
c001a00f:	75 fa                	jne    c001a00b <Krnl::panic(char const*)+0x33a>
c001a011:	88 d0                	mov    al,dl
c001a013:	e6 64                	out    0x64,al
c001a015:	fa                   	cli    
c001a016:	f4                   	hlt    
c001a017:	eb e8                	jmp    c001a001 <Krnl::panic(char const*)+0x330>
c001a019:	50                   	push   eax
c001a01a:	50                   	push   eax
c001a01b:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c001a020:	68 e8 b3 02 c0       	push   0xc002b3e8
c001a025:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a02b:	e8 b0 67 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c001a030:	58                   	pop    eax
c001a031:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c001a036:	5a                   	pop    edx
c001a037:	68 f6 b2 02 c0       	push   0xc002b2f6
c001a03c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a042:	e8 99 67 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c001a047:	59                   	pop    ecx
c001a048:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a04d:	5b                   	pop    ebx
c001a04e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a051:	83 c0 0c             	add    eax,0xc
c001a054:	50                   	push   eax
c001a055:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c001a05a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a060:	e8 7b 67 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c001a065:	83 c4 10             	add    esp,0x10
c001a068:	e9 a3 fd ff ff       	jmp    c0019e10 <Krnl::panic(char const*)+0x13f>

c001a06d <Net::switchEndian16(unsigned short)>:
c001a06d:	83 ec 04             	sub    esp,0x4
c001a070:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a074:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a078:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a07c:	c1 f8 08             	sar    eax,0x8
c001a07f:	89 c2                	mov    edx,eax
c001a081:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a085:	c1 e0 08             	shl    eax,0x8
c001a088:	09 d0                	or     eax,edx
c001a08a:	83 c4 04             	add    esp,0x4
c001a08d:	c3                   	ret    

c001a08e <Net::switchEndian32(unsigned int)>:
c001a08e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a092:	c1 e8 18             	shr    eax,0x18
c001a095:	89 c2                	mov    edx,eax
c001a097:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a09b:	c1 e0 08             	shl    eax,0x8
c001a09e:	25 00 00 ff 00       	and    eax,0xff0000
c001a0a3:	09 c2                	or     edx,eax
c001a0a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0a9:	c1 e8 08             	shr    eax,0x8
c001a0ac:	25 00 ff 00 00       	and    eax,0xff00
c001a0b1:	09 c2                	or     edx,eax
c001a0b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0b7:	c1 e0 18             	shl    eax,0x18
c001a0ba:	09 d0                	or     eax,edx
c001a0bc:	c3                   	ret    

c001a0bd <Net::crc32Calc(unsigned char*, int)>:
c001a0bd:	83 ec 10             	sub    esp,0x10
c001a0c0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a0c5:	75 07                	jne    c001a0ce <Net::crc32Calc(unsigned char*, int)+0x11>
c001a0c7:	b8 00 00 00 00       	mov    eax,0x0
c001a0cc:	eb 7c                	jmp    c001a14a <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a0ce:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a0d3:	7f 07                	jg     c001a0dc <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a0d5:	b8 00 00 00 00       	mov    eax,0x0
c001a0da:	eb 6e                	jmp    c001a14a <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a0dc:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a0e4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a0ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a0f0:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a0f4:	7d 4e                	jge    c001a144 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a0f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a0fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a0fe:	01 d0                	add    eax,edx
c001a100:	8a 00                	mov    al,BYTE PTR [eax]
c001a102:	0f b6 c0             	movzx  eax,al
c001a105:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a109:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a111:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a116:	7f 26                	jg     c001a13e <Net::crc32Calc(unsigned char*, int)+0x81>
c001a118:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a11c:	83 e0 01             	and    eax,0x1
c001a11f:	74 0d                	je     c001a12e <Net::crc32Calc(unsigned char*, int)+0x71>
c001a121:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a125:	d1 e8                	shr    eax,1
c001a127:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a12c:	eb 06                	jmp    c001a134 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a12e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a132:	d1 e8                	shr    eax,1
c001a134:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a138:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a13c:	eb d3                	jmp    c001a111 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a13e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a142:	eb a8                	jmp    c001a0ec <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a148:	f7 d0                	not    eax
c001a14a:	83 c4 10             	add    esp,0x10
c001a14d:	c3                   	ret    

c001a14e <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a14e:	57                   	push   edi
c001a14f:	56                   	push   esi
c001a150:	53                   	push   ebx
c001a151:	83 ec 60             	sub    esp,0x60
c001a154:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a15b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a15f:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a167:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a16c:	7f 1a                	jg     c001a188 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a16e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a175:	8d 50 01             	lea    edx,[eax+0x1]
c001a178:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a17f:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a182:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a186:	eb df                	jmp    c001a167 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a188:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a18f:	8d 50 01             	lea    edx,[eax+0x1]
c001a192:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a199:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a19c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a1a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a1a7:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a1ab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a1af:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a1b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a1bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a1bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a1c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a1c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a1cb:	89 c6                	mov    esi,eax
c001a1cd:	89 d7                	mov    edi,edx
c001a1cf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a1d1:	89 c8                	mov    eax,ecx
c001a1d3:	89 fa                	mov    edx,edi
c001a1d5:	89 f3                	mov    ebx,esi
c001a1d7:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a1db:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a1df:	89 04 24             	mov    DWORD PTR [esp],eax
c001a1e2:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a1ea:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a1f1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a1f5:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a1f9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a1fd:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a205:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a209:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a20d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a211:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a215:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a219:	89 c6                	mov    esi,eax
c001a21b:	89 d7                	mov    edi,edx
c001a21d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a21f:	89 c8                	mov    eax,ecx
c001a221:	89 fa                	mov    edx,edi
c001a223:	89 f3                	mov    ebx,esi
c001a225:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a229:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a22d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a231:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a239:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a240:	0f b7 c0             	movzx  eax,ax
c001a243:	c1 f8 08             	sar    eax,0x8
c001a246:	89 c1                	mov    ecx,eax
c001a248:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a24f:	8d 50 01             	lea    edx,[eax+0x1]
c001a252:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a259:	88 ca                	mov    dl,cl
c001a25b:	88 10                	mov    BYTE PTR [eax],dl
c001a25d:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a264:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a26b:	8d 48 01             	lea    ecx,[eax+0x1]
c001a26e:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a275:	88 10                	mov    BYTE PTR [eax],dl
c001a277:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a27b:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a27f:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a286:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a28a:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a28e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a292:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a296:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a29a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a29e:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a2a2:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a2a6:	89 c6                	mov    esi,eax
c001a2a8:	89 d7                	mov    edi,edx
c001a2aa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a2ac:	89 c8                	mov    eax,ecx
c001a2ae:	89 fa                	mov    edx,edi
c001a2b0:	89 f3                	mov    ebx,esi
c001a2b2:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a2b6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a2ba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a2be:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a2c2:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a2c9:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2d0:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a2d4:	50                   	push   eax
c001a2d5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a2d9:	e8 df fd ff ff       	call   c001a0bd <Net::crc32Calc(unsigned char*, int)>
c001a2de:	83 c4 08             	add    esp,0x8
c001a2e1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a2e5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a2e9:	c1 e8 18             	shr    eax,0x18
c001a2ec:	89 c1                	mov    ecx,eax
c001a2ee:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2f5:	8d 50 01             	lea    edx,[eax+0x1]
c001a2f8:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a2ff:	88 ca                	mov    dl,cl
c001a301:	88 10                	mov    BYTE PTR [eax],dl
c001a303:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a307:	c1 e8 10             	shr    eax,0x10
c001a30a:	89 c1                	mov    ecx,eax
c001a30c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a313:	8d 50 01             	lea    edx,[eax+0x1]
c001a316:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a31d:	88 ca                	mov    dl,cl
c001a31f:	88 10                	mov    BYTE PTR [eax],dl
c001a321:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a325:	c1 e8 08             	shr    eax,0x8
c001a328:	89 c1                	mov    ecx,eax
c001a32a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a331:	8d 50 01             	lea    edx,[eax+0x1]
c001a334:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a33b:	88 ca                	mov    dl,cl
c001a33d:	88 10                	mov    BYTE PTR [eax],dl
c001a33f:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a346:	8d 50 01             	lea    edx,[eax+0x1]
c001a349:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a350:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a354:	88 10                	mov    BYTE PTR [eax],dl
c001a356:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a35a:	83 c4 60             	add    esp,0x60
c001a35d:	5b                   	pop    ebx
c001a35e:	5e                   	pop    esi
c001a35f:	5f                   	pop    edi
c001a360:	c3                   	ret    

c001a361 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a361:	57                   	push   edi
c001a362:	56                   	push   esi
c001a363:	53                   	push   ebx
c001a364:	83 ec 70             	sub    esp,0x70
c001a367:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a36e:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a372:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a37a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a381:	83 c0 0e             	add    eax,0xe
c001a384:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a388:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a38f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a393:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a39b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a39f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a3a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a3a7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a3ab:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a3af:	89 c6                	mov    esi,eax
c001a3b1:	89 d7                	mov    edi,edx
c001a3b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a3b5:	89 c8                	mov    eax,ecx
c001a3b7:	89 fa                	mov    edx,edi
c001a3b9:	89 f3                	mov    ebx,esi
c001a3bb:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a3bf:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a3c3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a3c7:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a3cf:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a3d6:	83 c0 08             	add    eax,0x8
c001a3d9:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001a3dd:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a3e4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a3e8:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001a3f0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a3f4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a3f8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a3fc:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a400:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a404:	89 c6                	mov    esi,eax
c001a406:	89 d7                	mov    edi,edx
c001a408:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a40a:	89 c8                	mov    eax,ecx
c001a40c:	89 fa                	mov    edx,edi
c001a40e:	89 f3                	mov    ebx,esi
c001a410:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a414:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a418:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a41c:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a424:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a42b:	8d 50 01             	lea    edx,[eax+0x1]
c001a42e:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a435:	8a 00                	mov    al,BYTE PTR [eax]
c001a437:	0f b6 c0             	movzx  eax,al
c001a43a:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001a43f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a446:	8d 50 01             	lea    edx,[eax+0x1]
c001a449:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a450:	8a 00                	mov    al,BYTE PTR [eax]
c001a452:	0f b6 c0             	movzx  eax,al
c001a455:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001a45a:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001a45f:	c1 e0 08             	shl    eax,0x8
c001a462:	89 c2                	mov    edx,eax
c001a464:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a468:	09 d0                	or     eax,edx
c001a46a:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a471:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a475:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001a47d:	75 46                	jne    c001a4c5 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a47f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a486:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a489:	66 3d dc 05          	cmp    ax,0x5dc
c001a48d:	77 16                	ja     c001a4a5 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001a48f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a496:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a499:	0f b7 c0             	movzx  eax,ax
c001a49c:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a4a3:	eb 20                	jmp    c001a4c5 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a4a5:	83 ec 0c             	sub    esp,0xc
c001a4a8:	68 c0 b4 02 c0       	push   0xc002b4c0
c001a4ad:	e8 bf 80 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c001a4b2:	83 c4 10             	add    esp,0x10
c001a4b5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a4bc:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a4c0:	e9 17 01 00 00       	jmp    c001a5dc <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001a4c5:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a4cc:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a4d3:	8b 12                	mov    edx,DWORD PTR [edx]
c001a4d5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a4d9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a4e0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001a4e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a4e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a4ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a4f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a4f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a4f8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a4fc:	89 c6                	mov    esi,eax
c001a4fe:	89 d7                	mov    edi,edx
c001a500:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a502:	89 c8                	mov    eax,ecx
c001a504:	89 fa                	mov    edx,edi
c001a506:	89 f3                	mov    ebx,esi
c001a508:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a50c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a510:	89 04 24             	mov    DWORD PTR [esp],eax
c001a513:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a51a:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001a521:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a528:	8d 50 01             	lea    edx,[eax+0x1]
c001a52b:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a532:	8a 00                	mov    al,BYTE PTR [eax]
c001a534:	0f b6 c0             	movzx  eax,al
c001a537:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001a53b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a542:	8d 50 01             	lea    edx,[eax+0x1]
c001a545:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a54c:	8a 00                	mov    al,BYTE PTR [eax]
c001a54e:	0f b6 c0             	movzx  eax,al
c001a551:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001a555:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a55c:	8d 50 01             	lea    edx,[eax+0x1]
c001a55f:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a566:	8a 00                	mov    al,BYTE PTR [eax]
c001a568:	0f b6 c0             	movzx  eax,al
c001a56b:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001a56f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a576:	8d 50 01             	lea    edx,[eax+0x1]
c001a579:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a580:	8a 00                	mov    al,BYTE PTR [eax]
c001a582:	0f b6 c0             	movzx  eax,al
c001a585:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a589:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001a58d:	c1 e0 18             	shl    eax,0x18
c001a590:	89 c2                	mov    edx,eax
c001a592:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001a596:	c1 e0 10             	shl    eax,0x10
c001a599:	09 c2                	or     edx,eax
c001a59b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a59f:	c1 e0 08             	shl    eax,0x8
c001a5a2:	09 d0                	or     eax,edx
c001a5a4:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001a5a8:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a5ac:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a5b3:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001a5b7:	83 e8 04             	sub    eax,0x4
c001a5ba:	83 ec 08             	sub    esp,0x8
c001a5bd:	50                   	push   eax
c001a5be:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a5c2:	e8 f6 fa ff ff       	call   c001a0bd <Net::crc32Calc(unsigned char*, int)>
c001a5c7:	83 c4 10             	add    esp,0x10
c001a5ca:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001a5ce:	0f 94 c2             	sete   dl
c001a5d1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a5d8:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a5db:	90                   	nop
c001a5dc:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a5e3:	83 c4 70             	add    esp,0x70
c001a5e6:	5b                   	pop    ebx
c001a5e7:	5e                   	pop    esi
c001a5e8:	5f                   	pop    edi
c001a5e9:	c2 04 00             	ret    0x4

c001a5ec <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a5ec:	55                   	push   ebp
c001a5ed:	57                   	push   edi
c001a5ee:	56                   	push   esi
c001a5ef:	53                   	push   ebx
c001a5f0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a5f6:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a5fd:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a5ff:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a602:	80 fb 40             	cmp    bl,0x40
c001a605:	75 1b                	jne    c001a622 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a607:	8a 16                	mov    dl,BYTE PTR [esi]
c001a609:	84 d2                	test   dl,dl
c001a60b:	0f 84 f1 00 00 00    	je     c001a702 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a611:	8d 46 01             	lea    eax,[esi+0x1]
c001a614:	80 fa 3a             	cmp    dl,0x3a
c001a617:	74 04                	je     c001a61d <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a619:	89 c6                	mov    esi,eax
c001a61b:	eb ea                	jmp    c001a607 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a61d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a620:	89 c6                	mov    esi,eax
c001a622:	50                   	push   eax
c001a623:	6a 40                	push   0x40
c001a625:	6a 00                	push   0x0
c001a627:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a62b:	50                   	push   eax
c001a62c:	e8 1f 61 fe ff       	call   c0000750 <memset>
c001a631:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a638:	31 c0                	xor    eax,eax
c001a63a:	83 c4 10             	add    esp,0x10
c001a63d:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a63f:	84 c9                	test   cl,cl
c001a641:	0f 84 bb 00 00 00    	je     c001a702 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a647:	3d c7 00 00 00       	cmp    eax,0xc7
c001a64c:	0f 8f b0 00 00 00    	jg     c001a702 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a652:	80 f9 0a             	cmp    cl,0xa
c001a655:	0f 85 98 00 00 00    	jne    c001a6f3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a65b:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a660:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a664:	a8 df                	test   al,0xdf
c001a666:	0f 94 c1             	sete   cl
c001a669:	3c 23                	cmp    al,0x23
c001a66b:	0f 94 c2             	sete   dl
c001a66e:	08 d1                	or     cl,dl
c001a670:	75 4a                	jne    c001a6bc <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a672:	8d 50 f7             	lea    edx,[eax-0x9]
c001a675:	80 fa 01             	cmp    dl,0x1
c001a678:	76 42                	jbe    c001a6bc <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a67a:	3c 5b                	cmp    al,0x5b
c001a67c:	75 42                	jne    c001a6c0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a67e:	80 fb 40             	cmp    bl,0x40
c001a681:	75 39                	jne    c001a6bc <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a683:	83 ec 0c             	sub    esp,0xc
c001a686:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a68a:	52                   	push   edx
c001a68b:	e8 dc 60 fe ff       	call   c000076c <strlen>
c001a690:	83 c4 10             	add    esp,0x10
c001a693:	83 f8 3f             	cmp    eax,0x3f
c001a696:	77 6a                	ja     c001a702 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a698:	50                   	push   eax
c001a699:	50                   	push   eax
c001a69a:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a69e:	52                   	push   edx
c001a69f:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a6a3:	52                   	push   edx
c001a6a4:	e8 63 61 fe ff       	call   c000080c <strcpy>
c001a6a9:	58                   	pop    eax
c001a6aa:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a6ae:	52                   	push   edx
c001a6af:	e8 b8 60 fe ff       	call   c000076c <strlen>
c001a6b4:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a6b9:	83 c4 10             	add    esp,0x10
c001a6bc:	31 d2                	xor    edx,edx
c001a6be:	eb 3a                	jmp    c001a6fa <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a6c0:	80 fb 40             	cmp    bl,0x40
c001a6c3:	74 06                	je     c001a6cb <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a6c5:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a6c9:	eb 20                	jmp    c001a6eb <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a6cb:	50                   	push   eax
c001a6cc:	50                   	push   eax
c001a6cd:	55                   	push   ebp
c001a6ce:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a6d2:	50                   	push   eax
c001a6d3:	e8 c0 61 fe ff       	call   c0000898 <strcmp>
c001a6d8:	83 c4 10             	add    esp,0x10
c001a6db:	85 c0                	test   eax,eax
c001a6dd:	75 dd                	jne    c001a6bc <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a6df:	eb e4                	jmp    c001a6c5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a6e1:	8d 50 01             	lea    edx,[eax+0x1]
c001a6e4:	80 f9 3d             	cmp    cl,0x3d
c001a6e7:	74 1d                	je     c001a706 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a6e9:	89 d0                	mov    eax,edx
c001a6eb:	8a 08                	mov    cl,BYTE PTR [eax]
c001a6ed:	84 c9                	test   cl,cl
c001a6ef:	75 f0                	jne    c001a6e1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a6f1:	eb 0f                	jmp    c001a702 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a6f3:	8d 50 01             	lea    edx,[eax+0x1]
c001a6f6:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a6fa:	47                   	inc    edi
c001a6fb:	89 d0                	mov    eax,edx
c001a6fd:	e9 3b ff ff ff       	jmp    c001a63d <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a702:	31 c0                	xor    eax,eax
c001a704:	eb 33                	jmp    c001a739 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a706:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a70a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a70d:	50                   	push   eax
c001a70e:	50                   	push   eax
c001a70f:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a713:	50                   	push   eax
c001a714:	56                   	push   esi
c001a715:	e8 7e 61 fe ff       	call   c0000898 <strcmp>
c001a71a:	83 c4 10             	add    esp,0x10
c001a71d:	85 c0                	test   eax,eax
c001a71f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a723:	75 97                	jne    c001a6bc <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a725:	51                   	push   ecx
c001a726:	51                   	push   ecx
c001a727:	52                   	push   edx
c001a728:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a72f:	e8 d8 60 fe ff       	call   c000080c <strcpy>
c001a734:	83 c4 10             	add    esp,0x10
c001a737:	b0 01                	mov    al,0x1
c001a739:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a73f:	5b                   	pop    ebx
c001a740:	5e                   	pop    esi
c001a741:	5f                   	pop    edi
c001a742:	5d                   	pop    ebp
c001a743:	c3                   	ret    

c001a744 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a744:	57                   	push   edi
c001a745:	56                   	push   esi
c001a746:	53                   	push   ebx
c001a747:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a74d:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a754:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a75b:	53                   	push   ebx
c001a75c:	e8 0b 60 fe ff       	call   c000076c <strlen>
c001a761:	89 34 24             	mov    DWORD PTR [esp],esi
c001a764:	89 c7                	mov    edi,eax
c001a766:	e8 01 60 fe ff       	call   c000076c <strlen>
c001a76b:	83 c4 10             	add    esp,0x10
c001a76e:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a772:	3d ff 00 00 00       	cmp    eax,0xff
c001a777:	0f 87 d3 00 00 00    	ja     c001a850 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a77d:	57                   	push   edi
c001a77e:	57                   	push   edi
c001a77f:	56                   	push   esi
c001a780:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a784:	56                   	push   esi
c001a785:	e8 82 60 fe ff       	call   c000080c <strcpy>
c001a78a:	58                   	pop    eax
c001a78b:	5a                   	pop    edx
c001a78c:	68 62 b8 02 c0       	push   0xc002b862
c001a791:	56                   	push   esi
c001a792:	e8 b5 61 fe ff       	call   c000094c <strcat>
c001a797:	59                   	pop    ecx
c001a798:	5f                   	pop    edi
c001a799:	53                   	push   ebx
c001a79a:	56                   	push   esi
c001a79b:	e8 ac 61 fe ff       	call   c000094c <strcat>
c001a7a0:	58                   	pop    eax
c001a7a1:	5a                   	pop    edx
c001a7a2:	68 0c b5 02 c0       	push   0xc002b50c
c001a7a7:	56                   	push   esi
c001a7a8:	e8 9f 61 fe ff       	call   c000094c <strcat>
c001a7ad:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a7b4:	e8 e0 4d ff ff       	call   c000f599 <malloc>
c001a7b9:	83 c4 0c             	add    esp,0xc
c001a7bc:	89 c3                	mov    ebx,eax
c001a7be:	ff 35 b0 0b 03 c0    	push   DWORD PTR ds:0xc0030bb0
c001a7c4:	56                   	push   esi
c001a7c5:	50                   	push   eax
c001a7c6:	e8 05 83 ff ff       	call   c0012ad0 <File::File(char const*, Process*)>
c001a7cb:	83 c4 10             	add    esp,0x10
c001a7ce:	85 db                	test   ebx,ebx
c001a7d0:	74 7e                	je     c001a850 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a7d2:	51                   	push   ecx
c001a7d3:	51                   	push   ecx
c001a7d4:	6a 01                	push   0x1
c001a7d6:	53                   	push   ebx
c001a7d7:	e8 58 83 ff ff       	call   c0012b34 <File::open(FileOpenMode)>
c001a7dc:	83 c4 10             	add    esp,0x10
c001a7df:	85 c0                	test   eax,eax
c001a7e1:	74 08                	je     c001a7eb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a7e3:	83 ec 0c             	sub    esp,0xc
c001a7e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a7e8:	53                   	push   ebx
c001a7e9:	eb 5f                	jmp    c001a84a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a7eb:	52                   	push   edx
c001a7ec:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a7f0:	50                   	push   eax
c001a7f1:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a7f5:	50                   	push   eax
c001a7f6:	53                   	push   ebx
c001a7f7:	e8 e4 85 ff ff       	call   c0012de0 <File::stat(unsigned long long*, bool*)>
c001a7fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a800:	83 c4 10             	add    esp,0x10
c001a803:	89 c1                	mov    ecx,eax
c001a805:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a809:	74 31                	je     c001a83c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a80b:	83 ec 0c             	sub    esp,0xc
c001a80e:	50                   	push   eax
c001a80f:	e8 85 4d ff ff       	call   c000f599 <malloc>
c001a814:	89 c6                	mov    esi,eax
c001a816:	58                   	pop    eax
c001a817:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a819:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a81d:	52                   	push   edx
c001a81e:	56                   	push   esi
c001a81f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a823:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a827:	53                   	push   ebx
c001a828:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a82b:	83 c4 20             	add    esp,0x20
c001a82e:	85 c0                	test   eax,eax
c001a830:	75 0a                	jne    c001a83c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a832:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a836:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a83a:	74 18                	je     c001a854 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a83c:	83 ec 0c             	sub    esp,0xc
c001a83f:	53                   	push   ebx
c001a840:	e8 4d 83 ff ff       	call   c0012b92 <File::close()>
c001a845:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a847:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a84a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a84d:	83 c4 10             	add    esp,0x10
c001a850:	31 c0                	xor    eax,eax
c001a852:	eb 3b                	jmp    c001a88f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a854:	83 ec 0c             	sub    esp,0xc
c001a857:	53                   	push   ebx
c001a858:	e8 35 83 ff ff       	call   c0012b92 <File::close()>
c001a85d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a85f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a862:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a865:	83 c4 0c             	add    esp,0xc
c001a868:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a86f:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a876:	56                   	push   esi
c001a877:	e8 70 fd ff ff       	call   c001a5ec <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a87c:	89 34 24             	mov    DWORD PTR [esp],esi
c001a87f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a883:	e8 21 4d ff ff       	call   c000f5a9 <free>
c001a888:	83 c4 10             	add    esp,0x10
c001a88b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a88f:	81 c4 20 01 00 00    	add    esp,0x120
c001a895:	5b                   	pop    ebx
c001a896:	5e                   	pop    esi
c001a897:	5f                   	pop    edi
c001a898:	c3                   	ret    

c001a899 <Reg::getLine(char*, char*, char*)>:
c001a899:	57                   	push   edi
c001a89a:	56                   	push   esi
c001a89b:	53                   	push   ebx
c001a89c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a8a0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a8a4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a8a8:	57                   	push   edi
c001a8a9:	56                   	push   esi
c001a8aa:	53                   	push   ebx
c001a8ab:	68 11 b5 02 c0       	push   0xc002b511
c001a8b0:	e8 8f fe ff ff       	call   c001a744 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a8b5:	83 c4 10             	add    esp,0x10
c001a8b8:	84 c0                	test   al,al
c001a8ba:	75 10                	jne    c001a8cc <Reg::getLine(char*, char*, char*)+0x33>
c001a8bc:	57                   	push   edi
c001a8bd:	56                   	push   esi
c001a8be:	53                   	push   ebx
c001a8bf:	68 36 b5 02 c0       	push   0xc002b536
c001a8c4:	e8 7b fe ff ff       	call   c001a744 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a8c9:	83 c4 10             	add    esp,0x10
c001a8cc:	5b                   	pop    ebx
c001a8cd:	5e                   	pop    esi
c001a8ce:	5f                   	pop    edi
c001a8cf:	c3                   	ret    

c001a8d0 <Reg::readInt(char*, char*, int*)>:
c001a8d0:	55                   	push   ebp
c001a8d1:	57                   	push   edi
c001a8d2:	56                   	push   esi
c001a8d3:	53                   	push   ebx
c001a8d4:	81 ec f0 00 00 00    	sub    esp,0xf0
c001a8da:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a8de:	57                   	push   edi
c001a8df:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a8e6:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a8ed:	e8 a7 ff ff ff       	call   c001a899 <Reg::getLine(char*, char*, char*)>
c001a8f2:	83 c4 10             	add    esp,0x10
c001a8f5:	84 c0                	test   al,al
c001a8f7:	0f 84 b3 00 00 00    	je     c001a9b0 <Reg::readInt(char*, char*, int*)+0xe0>
c001a8fd:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001a901:	80 fa 2b             	cmp    dl,0x2b
c001a904:	74 0c                	je     c001a912 <Reg::readInt(char*, char*, int*)+0x42>
c001a906:	80 fa 2d             	cmp    dl,0x2d
c001a909:	75 0e                	jne    c001a919 <Reg::readInt(char*, char*, int*)+0x49>
c001a90b:	ba 01 00 00 00       	mov    edx,0x1
c001a910:	eb 0b                	jmp    c001a91d <Reg::readInt(char*, char*, int*)+0x4d>
c001a912:	ba 01 00 00 00       	mov    edx,0x1
c001a917:	eb 02                	jmp    c001a91b <Reg::readInt(char*, char*, int*)+0x4b>
c001a919:	31 d2                	xor    edx,edx
c001a91b:	31 c0                	xor    eax,eax
c001a91d:	be 0a 00 00 00       	mov    esi,0xa
c001a922:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001a927:	75 20                	jne    c001a949 <Reg::readInt(char*, char*, int*)+0x79>
c001a929:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001a92d:	80 f9 78             	cmp    cl,0x78
c001a930:	75 0a                	jne    c001a93c <Reg::readInt(char*, char*, int*)+0x6c>
c001a932:	83 c2 02             	add    edx,0x2
c001a935:	be 10 00 00 00       	mov    esi,0x10
c001a93a:	eb 0d                	jmp    c001a949 <Reg::readInt(char*, char*, int*)+0x79>
c001a93c:	80 f9 62             	cmp    cl,0x62
c001a93f:	75 08                	jne    c001a949 <Reg::readInt(char*, char*, int*)+0x79>
c001a941:	83 c2 02             	add    edx,0x2
c001a944:	be 02 00 00 00       	mov    esi,0x2
c001a949:	01 d7                	add    edi,edx
c001a94b:	31 d2                	xor    edx,edx
c001a94d:	8a 1f                	mov    bl,BYTE PTR [edi]
c001a94f:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001a953:	80 fb 0d             	cmp    bl,0xd
c001a956:	0f 94 c3             	sete   bl
c001a959:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a95e:	0f 94 c1             	sete   cl
c001a961:	08 cb                	or     bl,cl
c001a963:	75 3a                	jne    c001a99f <Reg::readInt(char*, char*, int*)+0xcf>
c001a965:	0f af d6             	imul   edx,esi
c001a968:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001a96d:	83 fe 10             	cmp    esi,0x10
c001a970:	75 26                	jne    c001a998 <Reg::readInt(char*, char*, int*)+0xc8>
c001a972:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a976:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001a979:	89 e9                	mov    ecx,ebp
c001a97b:	80 f9 05             	cmp    cl,0x5
c001a97e:	77 06                	ja     c001a986 <Reg::readInt(char*, char*, int*)+0xb6>
c001a980:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001a984:	eb 16                	jmp    c001a99c <Reg::readInt(char*, char*, int*)+0xcc>
c001a986:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a98a:	83 e9 61             	sub    ecx,0x61
c001a98d:	80 f9 05             	cmp    cl,0x5
c001a990:	77 06                	ja     c001a998 <Reg::readInt(char*, char*, int*)+0xc8>
c001a992:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001a996:	eb 04                	jmp    c001a99c <Reg::readInt(char*, char*, int*)+0xcc>
c001a998:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001a99c:	47                   	inc    edi
c001a99d:	eb ae                	jmp    c001a94d <Reg::readInt(char*, char*, int*)+0x7d>
c001a99f:	84 c0                	test   al,al
c001a9a1:	74 02                	je     c001a9a5 <Reg::readInt(char*, char*, int*)+0xd5>
c001a9a3:	f7 da                	neg    edx
c001a9a5:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001a9ac:	89 10                	mov    DWORD PTR [eax],edx
c001a9ae:	88 d8                	mov    al,bl
c001a9b0:	81 c4 ec 00 00 00    	add    esp,0xec
c001a9b6:	5b                   	pop    ebx
c001a9b7:	5e                   	pop    esi
c001a9b8:	5f                   	pop    edi
c001a9b9:	5d                   	pop    ebp
c001a9ba:	c3                   	ret    

c001a9bb <Reg::readString(char*, char*, char*, int)>:
c001a9bb:	57                   	push   edi
c001a9bc:	56                   	push   esi
c001a9bd:	53                   	push   ebx
c001a9be:	81 ec d4 00 00 00    	sub    esp,0xd4
c001a9c4:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001a9cb:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a9cf:	57                   	push   edi
c001a9d0:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a9d7:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a9de:	e8 b6 fe ff ff       	call   c001a899 <Reg::getLine(char*, char*, char*)>
c001a9e3:	83 c4 10             	add    esp,0x10
c001a9e6:	89 c6                	mov    esi,eax
c001a9e8:	84 c0                	test   al,al
c001a9ea:	74 44                	je     c001aa30 <Reg::readString(char*, char*, char*, int)+0x75>
c001a9ec:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001a9f3:	31 c0                	xor    eax,eax
c001a9f5:	4a                   	dec    edx
c001a9f6:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001a9f9:	84 c9                	test   cl,cl
c001a9fb:	74 0f                	je     c001aa0c <Reg::readString(char*, char*, char*, int)+0x51>
c001a9fd:	39 c2                	cmp    edx,eax
c001a9ff:	7e 0b                	jle    c001aa0c <Reg::readString(char*, char*, char*, int)+0x51>
c001aa01:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001aa04:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001aa09:	40                   	inc    eax
c001aa0a:	eb ea                	jmp    c001a9f6 <Reg::readString(char*, char*, char*, int)+0x3b>
c001aa0c:	83 ec 0c             	sub    esp,0xc
c001aa0f:	53                   	push   ebx
c001aa10:	e8 57 5d fe ff       	call   c000076c <strlen>
c001aa15:	83 c4 10             	add    esp,0x10
c001aa18:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001aa1d:	75 11                	jne    c001aa30 <Reg::readString(char*, char*, char*, int)+0x75>
c001aa1f:	83 ec 0c             	sub    esp,0xc
c001aa22:	53                   	push   ebx
c001aa23:	e8 44 5d fe ff       	call   c000076c <strlen>
c001aa28:	83 c4 10             	add    esp,0x10
c001aa2b:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001aa30:	81 c4 d0 00 00 00    	add    esp,0xd0
c001aa36:	89 f0                	mov    eax,esi
c001aa38:	5b                   	pop    ebx
c001aa39:	5e                   	pop    esi
c001aa3a:	5f                   	pop    edi
c001aa3b:	c3                   	ret    

c001aa3c <Reg::readBool(char*, char*, bool*)>:
c001aa3c:	83 ec 20             	sub    esp,0x20
c001aa3f:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aa43:	50                   	push   eax
c001aa44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa4c:	e8 7f fe ff ff       	call   c001a8d0 <Reg::readInt(char*, char*, int*)>
c001aa51:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001aa56:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001aa5a:	0f 95 02             	setne  BYTE PTR [edx]
c001aa5d:	83 c4 2c             	add    esp,0x2c
c001aa60:	c3                   	ret    

c001aa61 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001aa61:	53                   	push   ebx
c001aa62:	83 ec 1c             	sub    esp,0x1c
c001aa65:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001aa69:	8d 44 24 13          	lea    eax,[esp+0x13]
c001aa6d:	50                   	push   eax
c001aa6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa76:	e8 c1 ff ff ff       	call   c001aa3c <Reg::readBool(char*, char*, bool*)>
c001aa7b:	83 c4 10             	add    esp,0x10
c001aa7e:	84 c0                	test   al,al
c001aa80:	74 04                	je     c001aa86 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001aa82:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001aa86:	88 d8                	mov    al,bl
c001aa88:	83 c4 18             	add    esp,0x18
c001aa8b:	5b                   	pop    ebx
c001aa8c:	c3                   	ret    

c001aa8d <Reg::readIntWithDefault(char*, char*, int)>:
c001aa8d:	53                   	push   ebx
c001aa8e:	83 ec 1c             	sub    esp,0x1c
c001aa91:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001aa95:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aa99:	50                   	push   eax
c001aa9a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa9e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aaa2:	e8 29 fe ff ff       	call   c001a8d0 <Reg::readInt(char*, char*, int*)>
c001aaa7:	83 c4 10             	add    esp,0x10
c001aaaa:	84 c0                	test   al,al
c001aaac:	74 04                	je     c001aab2 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001aaae:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001aab2:	89 d8                	mov    eax,ebx
c001aab4:	83 c4 18             	add    esp,0x18
c001aab7:	5b                   	pop    ebx
c001aab8:	c3                   	ret    

c001aab9 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001aab9:	57                   	push   edi
c001aaba:	56                   	push   esi
c001aabb:	56                   	push   esi
c001aabc:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001aac0:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001aac4:	56                   	push   esi
c001aac5:	57                   	push   edi
c001aac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aaca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aace:	e8 e8 fe ff ff       	call   c001a9bb <Reg::readString(char*, char*, char*, int)>
c001aad3:	83 c4 10             	add    esp,0x10
c001aad6:	84 c0                	test   al,al
c001aad8:	75 1a                	jne    c001aaf4 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001aada:	51                   	push   ecx
c001aadb:	56                   	push   esi
c001aadc:	6a 00                	push   0x0
c001aade:	57                   	push   edi
c001aadf:	e8 6c 5c fe ff       	call   c0000750 <memset>
c001aae4:	8d 4e ff             	lea    ecx,[esi-0x1]
c001aae7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001aaeb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aaed:	83 c4 10             	add    esp,0x10
c001aaf0:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001aaf4:	89 f8                	mov    eax,edi
c001aaf6:	5a                   	pop    edx
c001aaf7:	5e                   	pop    esi
c001aaf8:	5f                   	pop    edi
c001aaf9:	c3                   	ret    

c001aafa <Sys::eject(regs*)>:
c001aafa:	83 ec 0c             	sub    esp,0xc
c001aafd:	83 ca ff             	or     edx,0xffffffff
c001ab00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab04:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001ab07:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ab0c:	83 e9 41             	sub    ecx,0x41
c001ab0f:	83 f9 19             	cmp    ecx,0x19
c001ab12:	77 18                	ja     c001ab2c <Sys::eject(regs*)+0x32>
c001ab14:	8b 0c 8d 60 dc 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd23a0]
c001ab1b:	85 c9                	test   ecx,ecx
c001ab1d:	74 0d                	je     c001ab2c <Sys::eject(regs*)+0x32>
c001ab1f:	83 ec 0c             	sub    esp,0xc
c001ab22:	51                   	push   ecx
c001ab23:	e8 28 b3 ff ff       	call   c0015e50 <LogicalDisk::eject()>
c001ab28:	83 c4 10             	add    esp,0x10
c001ab2b:	99                   	cdq    
c001ab2c:	83 c4 0c             	add    esp,0xc
c001ab2f:	c3                   	ret    

c001ab30 <Sys::exit(regs*)>:
c001ab30:	83 ec 18             	sub    esp,0x18
c001ab33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab37:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ab3a:	e8 bc 35 00 00       	call   c001e0fb <terminateTask(int)>
c001ab3f:	83 c8 ff             	or     eax,0xffffffff
c001ab42:	83 c4 1c             	add    esp,0x1c
c001ab45:	89 c2                	mov    edx,eax
c001ab47:	c3                   	ret    

c001ab48 <Sys::getCwd(regs*)>:
c001ab48:	83 ec 10             	sub    esp,0x10
c001ab4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab4f:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001ab52:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ab55:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab5a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ab5d:	e8 70 7d ff ff       	call   c00128d2 <Fs::getcwd(Process*, char*, int)>
c001ab62:	83 c4 1c             	add    esp,0x1c
c001ab65:	99                   	cdq    
c001ab66:	c3                   	ret    

c001ab67 <Sys::getPID(regs*)>:
c001ab67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab6c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ab6f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab71:	99                   	cdq    
c001ab72:	c3                   	ret    

c001ab73 <Sys::getRAMData(regs*)>:
c001ab73:	8b 0d b4 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b4
c001ab79:	6b 05 b0 d6 02 c0 64 	imul   eax,DWORD PTR ds:0xc002d6b0,0x64
c001ab80:	99                   	cdq    
c001ab81:	f7 f9                	idiv   ecx
c001ab83:	c1 e0 18             	shl    eax,0x18
c001ab86:	09 c8                	or     eax,ecx
c001ab88:	99                   	cdq    
c001ab89:	c3                   	ret    

c001ab8a <Sys::getVGAPtr(regs*)>:
c001ab8a:	55                   	push   ebp
c001ab8b:	57                   	push   edi
c001ab8c:	56                   	push   esi
c001ab8d:	53                   	push   ebx
c001ab8e:	83 ec 18             	sub    esp,0x18
c001ab91:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ab95:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ab98:	e8 aa 30 00 00       	call   c001dc47 <Thr::processFromPID(int)>
c001ab9d:	83 c4 10             	add    esp,0x10
c001aba0:	89 c1                	mov    ecx,eax
c001aba2:	b8 01 00 00 00       	mov    eax,0x1
c001aba7:	85 c9                	test   ecx,ecx
c001aba9:	74 59                	je     c001ac04 <Sys::getVGAPtr(regs*)+0x7a>
c001abab:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001abb1:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001abb5:	74 0c                	je     c001abc3 <Sys::getVGAPtr(regs*)+0x39>
c001abb7:	83 ec 0c             	sub    esp,0xc
c001abba:	53                   	push   ebx
c001abbb:	e8 13 57 ff ff       	call   c00102d3 <setActiveTerminal(VgaText*)>
c001abc0:	83 c4 10             	add    esp,0x10
c001abc3:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001abc6:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001abc9:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001abce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001abd0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001abd3:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001abd6:	81 c3 82 00 00 00    	add    ebx,0x82
c001abdc:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001abe2:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001abe5:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001abe8:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001abee:	50                   	push   eax
c001abef:	50                   	push   eax
c001abf0:	53                   	push   ebx
c001abf1:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001abf4:	05 a8 0f 00 00       	add    eax,0xfa8
c001abf9:	50                   	push   eax
c001abfa:	e8 0d 5c fe ff       	call   c000080c <strcpy>
c001abff:	83 c4 10             	add    esp,0x10
c001ac02:	31 c0                	xor    eax,eax
c001ac04:	83 c4 0c             	add    esp,0xc
c001ac07:	31 d2                	xor    edx,edx
c001ac09:	5b                   	pop    ebx
c001ac0a:	5e                   	pop    esi
c001ac0b:	5f                   	pop    edi
c001ac0c:	5d                   	pop    ebp
c001ac0d:	c3                   	ret    

c001ac0e <Sys::loadDLL(regs*)>:
c001ac0e:	56                   	push   esi
c001ac0f:	53                   	push   ebx
c001ac10:	31 d2                	xor    edx,edx
c001ac12:	51                   	push   ecx
c001ac13:	b8 01 00 00 00       	mov    eax,0x1
c001ac18:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ac1c:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001ac20:	0f 84 8c 00 00 00    	je     c001acb2 <Sys::loadDLL(regs*)+0xa4>
c001ac26:	83 ec 0c             	sub    esp,0xc
c001ac29:	68 14 01 00 00       	push   0x114
c001ac2e:	e8 66 49 ff ff       	call   c000f599 <malloc>
c001ac33:	83 c4 0c             	add    esp,0xc
c001ac36:	89 c3                	mov    ebx,eax
c001ac38:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac3d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ac40:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001ac43:	53                   	push   ebx
c001ac44:	e8 87 7e ff ff       	call   c0012ad0 <File::File(char const*, Process*)>
c001ac49:	83 c4 10             	add    esp,0x10
c001ac4c:	31 d2                	xor    edx,edx
c001ac4e:	b8 02 00 00 00       	mov    eax,0x2
c001ac53:	85 db                	test   ebx,ebx
c001ac55:	74 5b                	je     c001acb2 <Sys::loadDLL(regs*)+0xa4>
c001ac57:	83 ec 0c             	sub    esp,0xc
c001ac5a:	53                   	push   ebx
c001ac5b:	e8 42 81 ff ff       	call   c0012da2 <File::exists()>
c001ac60:	83 c4 10             	add    esp,0x10
c001ac63:	84 c0                	test   al,al
c001ac65:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ac67:	75 11                	jne    c001ac7a <Sys::loadDLL(regs*)+0x6c>
c001ac69:	83 ec 0c             	sub    esp,0xc
c001ac6c:	53                   	push   ebx
c001ac6d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ac70:	83 c4 10             	add    esp,0x10
c001ac73:	b8 03 00 00 00       	mov    eax,0x3
c001ac78:	eb 36                	jmp    c001acb0 <Sys::loadDLL(regs*)+0xa2>
c001ac7a:	83 ec 0c             	sub    esp,0xc
c001ac7d:	53                   	push   ebx
c001ac7e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ac81:	58                   	pop    eax
c001ac82:	5a                   	pop    edx
c001ac83:	6a 00                	push   0x0
c001ac85:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001ac88:	e8 0e 22 00 00       	call   c001ce9b <Thr::loadDLL(char const*, bool)>
c001ac8d:	83 c4 10             	add    esp,0x10
c001ac90:	89 c1                	mov    ecx,eax
c001ac92:	31 d2                	xor    edx,edx
c001ac94:	b8 04 00 00 00       	mov    eax,0x4
c001ac99:	85 c9                	test   ecx,ecx
c001ac9b:	74 15                	je     c001acb2 <Sys::loadDLL(regs*)+0xa4>
c001ac9d:	53                   	push   ebx
c001ac9e:	53                   	push   ebx
c001ac9f:	ff 35 68 d6 02 c0    	push   DWORD PTR ds:0xc002d668
c001aca5:	51                   	push   ecx
c001aca6:	e8 1b 24 00 00       	call   c001d0c6 <Thr::executeDLL(unsigned long, void*)>
c001acab:	83 c4 10             	add    esp,0x10
c001acae:	31 c0                	xor    eax,eax
c001acb0:	31 d2                	xor    edx,edx
c001acb2:	59                   	pop    ecx
c001acb3:	5b                   	pop    ebx
c001acb4:	5e                   	pop    esi
c001acb5:	c3                   	ret    

c001acb6 <Sys::read(regs*)>:
c001acb6:	57                   	push   edi
c001acb7:	56                   	push   esi
c001acb8:	53                   	push   ebx
c001acb9:	83 ec 10             	sub    esp,0x10
c001acbc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001acc0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001acc3:	83 f8 02             	cmp    eax,0x2
c001acc6:	77 10                	ja     c001acd8 <Sys::read(regs*)+0x22>
c001acc8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001accd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001acd0:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001acd6:	eb 0e                	jmp    c001ace6 <Sys::read(regs*)+0x30>
c001acd8:	83 ec 0c             	sub    esp,0xc
c001acdb:	50                   	push   eax
c001acdc:	e8 66 63 ff ff       	call   c0011047 <getFromFileDescriptor(int)>
c001ace1:	83 c4 10             	add    esp,0x10
c001ace4:	89 c1                	mov    ecx,eax
c001ace6:	83 c8 ff             	or     eax,0xffffffff
c001ace9:	85 c9                	test   ecx,ecx
c001aceb:	89 c2                	mov    edx,eax
c001aced:	74 28                	je     c001ad17 <Sys::read(regs*)+0x61>
c001acef:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001acf7:	31 ff                	xor    edi,edi
c001acf9:	83 ec 0c             	sub    esp,0xc
c001acfc:	8b 01                	mov    eax,DWORD PTR [ecx]
c001acfe:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ad02:	52                   	push   edx
c001ad03:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ad06:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001ad09:	57                   	push   edi
c001ad0a:	56                   	push   esi
c001ad0b:	51                   	push   ecx
c001ad0c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ad0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ad13:	83 c4 20             	add    esp,0x20
c001ad16:	99                   	cdq    
c001ad17:	83 c4 10             	add    esp,0x10
c001ad1a:	5b                   	pop    ebx
c001ad1b:	5e                   	pop    esi
c001ad1c:	5f                   	pop    edi
c001ad1d:	c3                   	ret    

c001ad1e <Sys::sbrk(regs*)>:
c001ad1e:	56                   	push   esi
c001ad1f:	53                   	push   ebx
c001ad20:	50                   	push   eax
c001ad21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad26:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad2a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ad2d:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001ad30:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001ad36:	85 db                	test   ebx,ebx
c001ad38:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001ad3b:	74 02                	je     c001ad3f <Sys::sbrk(regs*)+0x21>
c001ad3d:	79 06                	jns    c001ad45 <Sys::sbrk(regs*)+0x27>
c001ad3f:	89 f0                	mov    eax,esi
c001ad41:	31 d2                	xor    edx,edx
c001ad43:	eb 2a                	jmp    c001ad6f <Sys::sbrk(regs*)+0x51>
c001ad45:	83 c8 ff             	or     eax,0xffffffff
c001ad48:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001ad4e:	89 c2                	mov    edx,eax
c001ad50:	77 1d                	ja     c001ad6f <Sys::sbrk(regs*)+0x51>
c001ad52:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001ad58:	50                   	push   eax
c001ad59:	c1 ea 0c             	shr    edx,0xc
c001ad5c:	68 07 0c 00 00       	push   0xc07
c001ad61:	52                   	push   edx
c001ad62:	51                   	push   ecx
c001ad63:	e8 f4 6c ff ff       	call   c0011a5c <VAS::allocatePages(int, int)>
c001ad68:	89 f0                	mov    eax,esi
c001ad6a:	31 d2                	xor    edx,edx
c001ad6c:	83 c4 10             	add    esp,0x10
c001ad6f:	59                   	pop    ecx
c001ad70:	5b                   	pop    ebx
c001ad71:	5e                   	pop    esi
c001ad72:	c3                   	ret    

c001ad73 <Sys::setCwd(regs*)>:
c001ad73:	83 ec 14             	sub    esp,0x14
c001ad76:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad7a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ad7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad82:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ad85:	e8 b7 80 ff ff       	call   c0012e41 <Fs::setcwd(Process*, char*)>
c001ad8a:	83 c4 1c             	add    esp,0x1c
c001ad8d:	99                   	cdq    
c001ad8e:	c3                   	ret    

c001ad8f <Sys::setTime(regs*)>:
c001ad8f:	55                   	push   ebp
c001ad90:	31 c9                	xor    ecx,ecx
c001ad92:	57                   	push   edi
c001ad93:	bd 0c 00 00 00       	mov    ebp,0xc
c001ad98:	56                   	push   esi
c001ad99:	53                   	push   ebx
c001ad9a:	31 db                	xor    ebx,ebx
c001ad9c:	83 ec 10             	sub    esp,0x10
c001ad9f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ada3:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001ada6:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001ada9:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001adac:	89 c2                	mov    edx,eax
c001adae:	66 81 ef 6c 07       	sub    di,0x76c
c001adb3:	83 e2 1f             	and    edx,0x1f
c001adb6:	c1 e7 10             	shl    edi,0x10
c001adb9:	42                   	inc    edx
c001adba:	c1 e8 05             	shr    eax,0x5
c001adbd:	88 d1                	mov    cl,dl
c001adbf:	31 d2                	xor    edx,edx
c001adc1:	f7 f5                	div    ebp
c001adc3:	89 dd                	mov    ebp,ebx
c001adc5:	88 d5                	mov    ch,dl
c001adc7:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001adcd:	0f b7 c1             	movzx  eax,cx
c001add0:	31 d2                	xor    edx,edx
c001add2:	09 f8                	or     eax,edi
c001add4:	bf 3c 00 00 00       	mov    edi,0x3c
c001add9:	89 c1                	mov    ecx,eax
c001addb:	89 f0                	mov    eax,esi
c001addd:	f7 f7                	div    edi
c001addf:	c1 e2 10             	shl    edx,0x10
c001ade2:	09 d5                	or     ebp,edx
c001ade4:	31 d2                	xor    edx,edx
c001ade6:	89 eb                	mov    ebx,ebp
c001ade8:	f7 f7                	div    edi
c001adea:	bf 10 0e 00 00       	mov    edi,0xe10
c001adef:	88 d7                	mov    bh,dl
c001adf1:	89 f0                	mov    eax,esi
c001adf3:	31 d2                	xor    edx,edx
c001adf5:	f7 f7                	div    edi
c001adf7:	bf 18 00 00 00       	mov    edi,0x18
c001adfc:	31 d2                	xor    edx,edx
c001adfe:	f7 f7                	div    edi
c001ae00:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c001ae05:	88 d3                	mov    bl,dl
c001ae07:	53                   	push   ebx
c001ae08:	51                   	push   ecx
c001ae09:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001ae0f:	e8 76 88 ff ff       	call   c001368a <Clock::setTimeInDatetimeLocal(datetime_t)>
c001ae14:	83 c4 1c             	add    esp,0x1c
c001ae17:	83 f0 01             	xor    eax,0x1
c001ae1a:	5b                   	pop    ebx
c001ae1b:	0f b6 c0             	movzx  eax,al
c001ae1e:	5e                   	pop    esi
c001ae1f:	31 d2                	xor    edx,edx
c001ae21:	5f                   	pop    edi
c001ae22:	5d                   	pop    ebp
c001ae23:	c3                   	ret    

c001ae24 <Sys::timezone(regs*)>:
c001ae24:	53                   	push   ebx
c001ae25:	83 ec 08             	sub    esp,0x8
c001ae28:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ae2c:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001ae30:	75 17                	jne    c001ae49 <Sys::timezone(regs*)+0x25>
c001ae32:	83 ec 0c             	sub    esp,0xc
c001ae35:	68 51 b5 02 c0       	push   0xc002b551
c001ae3a:	e8 32 77 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c001ae3f:	83 c8 ff             	or     eax,0xffffffff
c001ae42:	83 c4 10             	add    esp,0x10
c001ae45:	89 c2                	mov    edx,eax
c001ae47:	eb 20                	jmp    c001ae69 <Sys::timezone(regs*)+0x45>
c001ae49:	83 ec 0c             	sub    esp,0xc
c001ae4c:	68 66 b5 02 c0       	push   0xc002b566
c001ae51:	e8 1b 77 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c001ae56:	58                   	pop    eax
c001ae57:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001ae5a:	e8 8d 85 ff ff       	call   c00133ec <User::loadClockSettings(int)>
c001ae5f:	83 c4 10             	add    esp,0x10
c001ae62:	b8 01 00 00 00       	mov    eax,0x1
c001ae67:	31 d2                	xor    edx,edx
c001ae69:	83 c4 08             	add    esp,0x8
c001ae6c:	5b                   	pop    ebx
c001ae6d:	c3                   	ret    

c001ae6e <Sys::write(regs*)>:
c001ae6e:	57                   	push   edi
c001ae6f:	56                   	push   esi
c001ae70:	53                   	push   ebx
c001ae71:	83 ec 10             	sub    esp,0x10
c001ae74:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ae78:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ae7b:	83 f8 02             	cmp    eax,0x2
c001ae7e:	77 10                	ja     c001ae90 <Sys::write(regs*)+0x22>
c001ae80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae85:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae88:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001ae8e:	eb 0e                	jmp    c001ae9e <Sys::write(regs*)+0x30>
c001ae90:	83 ec 0c             	sub    esp,0xc
c001ae93:	50                   	push   eax
c001ae94:	e8 ae 61 ff ff       	call   c0011047 <getFromFileDescriptor(int)>
c001ae99:	83 c4 10             	add    esp,0x10
c001ae9c:	89 c1                	mov    ecx,eax
c001ae9e:	83 c8 ff             	or     eax,0xffffffff
c001aea1:	85 c9                	test   ecx,ecx
c001aea3:	89 c2                	mov    edx,eax
c001aea5:	74 28                	je     c001aecf <Sys::write(regs*)+0x61>
c001aea7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aeaf:	31 ff                	xor    edi,edi
c001aeb1:	83 ec 0c             	sub    esp,0xc
c001aeb4:	8b 01                	mov    eax,DWORD PTR [ecx]
c001aeb6:	8d 54 24 18          	lea    edx,[esp+0x18]
c001aeba:	52                   	push   edx
c001aebb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001aebe:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001aec1:	57                   	push   edi
c001aec2:	56                   	push   esi
c001aec3:	51                   	push   ecx
c001aec4:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001aec7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001aecb:	83 c4 20             	add    esp,0x20
c001aece:	99                   	cdq    
c001aecf:	83 c4 10             	add    esp,0x10
c001aed2:	5b                   	pop    ebx
c001aed3:	5e                   	pop    esi
c001aed4:	5f                   	pop    edi
c001aed5:	c3                   	ret    

c001aed6 <Sys::wsbe(regs*)>:
c001aed6:	57                   	push   edi
c001aed7:	b9 0b 00 00 00       	mov    ecx,0xb
c001aedc:	56                   	push   esi
c001aedd:	be a5 b5 02 c0       	mov    esi,0xc002b5a5
c001aee2:	53                   	push   ebx
c001aee3:	83 ec 30             	sub    esp,0x30
c001aee6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001aeea:	fc                   	cld    
c001aeeb:	83 ec 0c             	sub    esp,0xc
c001aeee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001aef0:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001aef4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aef9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aefc:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001af02:	8b 06                	mov    eax,DWORD PTR [esi]
c001af04:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001af07:	57                   	push   edi
c001af08:	e8 5f 58 fe ff       	call   c000076c <strlen>
c001af0d:	5a                   	pop    edx
c001af0e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001af12:	52                   	push   edx
c001af13:	31 d2                	xor    edx,edx
c001af15:	57                   	push   edi
c001af16:	52                   	push   edx
c001af17:	50                   	push   eax
c001af18:	56                   	push   esi
c001af19:	ff d3                	call   ebx
c001af1b:	83 c4 14             	add    esp,0x14
c001af1e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001af22:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001af25:	e8 d1 31 00 00       	call   c001e0fb <terminateTask(int)>
c001af2a:	83 c4 40             	add    esp,0x40
c001af2d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001af32:	5b                   	pop    ebx
c001af33:	31 d2                	xor    edx,edx
c001af35:	5e                   	pop    esi
c001af36:	5f                   	pop    edi
c001af37:	c3                   	ret    

c001af38 <Sys::yield(regs*)>:
c001af38:	57                   	push   edi
c001af39:	56                   	push   esi
c001af3a:	53                   	push   ebx
c001af3b:	fa                   	cli    
c001af3c:	ff 05 88 0b 03 c0    	inc    DWORD PTR ds:0xc0030b88
c001af42:	e8 14 29 00 00       	call   c001d85b <schedule()>
c001af47:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c001af4c:	48                   	dec    eax
c001af4d:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c001af52:	75 01                	jne    c001af55 <Sys::yield(regs*)+0x1d>
c001af54:	fb                   	sti    
c001af55:	8b 35 d0 dc 02 c0    	mov    esi,DWORD PTR ds:0xc002dcd0
c001af5b:	8b 3d d4 dc 02 c0    	mov    edi,DWORD PTR ds:0xc002dcd4
c001af61:	89 f0                	mov    eax,esi
c001af63:	89 fb                	mov    ebx,edi
c001af65:	89 f1                	mov    ecx,esi
c001af67:	c1 e0 07             	shl    eax,0x7
c001af6a:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001af6e:	25 80 30 0f 00       	and    eax,0xf3080
c001af73:	c1 eb 17             	shr    ebx,0x17
c001af76:	31 c8                	xor    eax,ecx
c001af78:	89 da                	mov    edx,ebx
c001af7a:	5b                   	pop    ebx
c001af7b:	5e                   	pop    esi
c001af7c:	5f                   	pop    edi
c001af7d:	c3                   	ret    

c001af7e <sysCallSeekDir(regs*)>:
c001af7e:	31 c0                	xor    eax,eax
c001af80:	31 d2                	xor    edx,edx
c001af82:	c3                   	ret    

c001af83 <sysCallTellDir(regs*)>:
c001af83:	31 c0                	xor    eax,eax
c001af85:	31 d2                	xor    edx,edx
c001af87:	c3                   	ret    

c001af88 <sysCallVerify(regs*)>:
c001af88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af8c:	31 d2                	xor    edx,edx
c001af8e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001af91:	c3                   	ret    

c001af92 <sysCallGetArgc(regs*)>:
c001af92:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af97:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001af9a:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001afa0:	99                   	cdq    
c001afa1:	c3                   	ret    

c001afa2 <sysFormatDisk(regs*)>:
c001afa2:	56                   	push   esi
c001afa3:	53                   	push   ebx
c001afa4:	53                   	push   ebx
c001afa5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001afa9:	8b 1d d4 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d7d4
c001afaf:	eb 25                	jmp    c001afd6 <sysFormatDisk(regs*)+0x34>
c001afb1:	83 ec 0c             	sub    esp,0xc
c001afb4:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001afb7:	8b 13                	mov    edx,DWORD PTR [ebx]
c001afb9:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001afbc:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001afbf:	50                   	push   eax
c001afc0:	ff 34 85 60 dc 02 c0 	push   DWORD PTR [eax*4-0x3ffd23a0]
c001afc7:	53                   	push   ebx
c001afc8:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001afcb:	83 c4 20             	add    esp,0x20
c001afce:	83 f8 08             	cmp    eax,0x8
c001afd1:	75 12                	jne    c001afe5 <sysFormatDisk(regs*)+0x43>
c001afd3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001afd6:	85 db                	test   ebx,ebx
c001afd8:	75 d7                	jne    c001afb1 <sysFormatDisk(regs*)+0xf>
c001afda:	59                   	pop    ecx
c001afdb:	b8 03 00 00 00       	mov    eax,0x3
c001afe0:	31 d2                	xor    edx,edx
c001afe2:	5b                   	pop    ebx
c001afe3:	5e                   	pop    esi
c001afe4:	c3                   	ret    
c001afe5:	85 c0                	test   eax,eax
c001afe7:	74 1b                	je     c001b004 <sysFormatDisk(regs*)+0x62>
c001afe9:	83 f8 09             	cmp    eax,0x9
c001afec:	74 0b                	je     c001aff9 <sysFormatDisk(regs*)+0x57>
c001afee:	59                   	pop    ecx
c001afef:	b8 02 00 00 00       	mov    eax,0x2
c001aff4:	31 d2                	xor    edx,edx
c001aff6:	5b                   	pop    ebx
c001aff7:	5e                   	pop    esi
c001aff8:	c3                   	ret    
c001aff9:	59                   	pop    ecx
c001affa:	b8 01 00 00 00       	mov    eax,0x1
c001afff:	31 d2                	xor    edx,edx
c001b001:	5b                   	pop    ebx
c001b002:	5e                   	pop    esi
c001b003:	c3                   	ret    
c001b004:	59                   	pop    ecx
c001b005:	31 c0                	xor    eax,eax
c001b007:	31 d2                	xor    edx,edx
c001b009:	5b                   	pop    ebx
c001b00a:	5e                   	pop    esi
c001b00b:	c3                   	ret    

c001b00c <sysSetDiskVolumeLabel(regs*)>:
c001b00c:	56                   	push   esi
c001b00d:	53                   	push   ebx
c001b00e:	53                   	push   ebx
c001b00f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b013:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b016:	83 f8 19             	cmp    eax,0x19
c001b019:	77 29                	ja     c001b044 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b01b:	8b 0c 85 60 dc 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd23a0]
c001b022:	85 c9                	test   ecx,ecx
c001b024:	74 1e                	je     c001b044 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b026:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b029:	85 d2                	test   edx,edx
c001b02b:	74 17                	je     c001b044 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b02d:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b033:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b035:	52                   	push   edx
c001b036:	50                   	push   eax
c001b037:	51                   	push   ecx
c001b038:	53                   	push   ebx
c001b039:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b03c:	83 c4 10             	add    esp,0x10
c001b03f:	99                   	cdq    
c001b040:	59                   	pop    ecx
c001b041:	5b                   	pop    ebx
c001b042:	5e                   	pop    esi
c001b043:	c3                   	ret    
c001b044:	59                   	pop    ecx
c001b045:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b04a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b04f:	5b                   	pop    ebx
c001b050:	5e                   	pop    esi
c001b051:	c3                   	ret    

c001b052 <sysGetDiskVolumeLabel(regs*)>:
c001b052:	57                   	push   edi
c001b053:	56                   	push   esi
c001b054:	53                   	push   ebx
c001b055:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b059:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b05c:	83 fa 19             	cmp    edx,0x19
c001b05f:	77 34                	ja     c001b095 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b061:	8b 0c 95 60 dc 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd23a0]
c001b068:	85 c9                	test   ecx,ecx
c001b06a:	74 29                	je     c001b095 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b06c:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b06f:	85 db                	test   ebx,ebx
c001b071:	74 22                	je     c001b095 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b073:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b076:	85 c0                	test   eax,eax
c001b078:	74 1b                	je     c001b095 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b07a:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b080:	83 ec 0c             	sub    esp,0xc
c001b083:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b085:	50                   	push   eax
c001b086:	53                   	push   ebx
c001b087:	52                   	push   edx
c001b088:	51                   	push   ecx
c001b089:	56                   	push   esi
c001b08a:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b08d:	83 c4 20             	add    esp,0x20
c001b090:	99                   	cdq    
c001b091:	5b                   	pop    ebx
c001b092:	5e                   	pop    esi
c001b093:	5f                   	pop    edi
c001b094:	c3                   	ret    
c001b095:	5b                   	pop    ebx
c001b096:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b09b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b0a0:	5e                   	pop    esi
c001b0a1:	5f                   	pop    edi
c001b0a2:	c3                   	ret    

c001b0a3 <sysShutdown(regs*)>:
c001b0a3:	83 ec 0c             	sub    esp,0xc
c001b0a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0aa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b0ad:	85 c0                	test   eax,eax
c001b0af:	74 18                	je     c001b0c9 <sysShutdown(regs*)+0x26>
c001b0b1:	83 f8 01             	cmp    eax,0x1
c001b0b4:	74 38                	je     c001b0ee <sysShutdown(regs*)+0x4b>
c001b0b6:	83 f8 02             	cmp    eax,0x2
c001b0b9:	74 24                	je     c001b0df <sysShutdown(regs*)+0x3c>
c001b0bb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b0c0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b0c5:	83 c4 0c             	add    esp,0xc
c001b0c8:	c3                   	ret    
c001b0c9:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c001b0ce:	8b 10                	mov    edx,DWORD PTR [eax]
c001b0d0:	6a 00                	push   0x0
c001b0d2:	6a 00                	push   0x0
c001b0d4:	6a 00                	push   0x0
c001b0d6:	50                   	push   eax
c001b0d7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b0da:	83 c4 10             	add    esp,0x10
c001b0dd:	eb dc                	jmp    c001b0bb <sysShutdown(regs*)+0x18>
c001b0df:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c001b0e4:	8b 10                	mov    edx,DWORD PTR [eax]
c001b0e6:	6a 00                	push   0x0
c001b0e8:	6a 00                	push   0x0
c001b0ea:	6a 01                	push   0x1
c001b0ec:	eb e8                	jmp    c001b0d6 <sysShutdown(regs*)+0x33>
c001b0ee:	a1 00 fd 02 c0       	mov    eax,ds:0xc002fd00
c001b0f3:	85 c0                	test   eax,eax
c001b0f5:	74 02                	je     c001b0f9 <sysShutdown(regs*)+0x56>
c001b0f7:	ff d0                	call   eax
c001b0f9:	31 c0                	xor    eax,eax
c001b0fb:	31 d2                	xor    edx,edx
c001b0fd:	83 c4 0c             	add    esp,0xc
c001b100:	c3                   	ret    

c001b101 <sysCallRealpath(regs*)>:
c001b101:	83 ec 0c             	sub    esp,0xc
c001b104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b108:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b10b:	85 d2                	test   edx,edx
c001b10d:	74 07                	je     c001b116 <sysCallRealpath(regs*)+0x15>
c001b10f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b112:	85 c0                	test   eax,eax
c001b114:	75 0b                	jne    c001b121 <sysCallRealpath(regs*)+0x20>
c001b116:	b8 01 00 00 00       	mov    eax,0x1
c001b11b:	31 d2                	xor    edx,edx
c001b11d:	83 c4 0c             	add    esp,0xc
c001b120:	c3                   	ret    
c001b121:	51                   	push   ecx
c001b122:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b128:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b12b:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b131:	51                   	push   ecx
c001b132:	52                   	push   edx
c001b133:	50                   	push   eax
c001b134:	e8 ed 77 ff ff       	call   c0012926 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b139:	83 c4 10             	add    esp,0x10
c001b13c:	31 c0                	xor    eax,eax
c001b13e:	31 d2                	xor    edx,edx
c001b140:	83 c4 0c             	add    esp,0xc
c001b143:	c3                   	ret    

c001b144 <sysCallReadDir(regs*)>:
c001b144:	53                   	push   ebx
c001b145:	83 ec 18             	sub    esp,0x18
c001b148:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b14c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b14f:	83 f8 02             	cmp    eax,0x2
c001b152:	76 60                	jbe    c001b1b4 <sysCallReadDir(regs*)+0x70>
c001b154:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001b15b:	77 48                	ja     c001b1a5 <sysCallReadDir(regs*)+0x61>
c001b15d:	83 ec 0c             	sub    esp,0xc
c001b160:	50                   	push   eax
c001b161:	e8 e1 5e ff ff       	call   c0011047 <getFromFileDescriptor(int)>
c001b166:	83 c4 10             	add    esp,0x10
c001b169:	85 c0                	test   eax,eax
c001b16b:	74 38                	je     c001b1a5 <sysCallReadDir(regs*)+0x61>
c001b16d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b175:	83 ec 0c             	sub    esp,0xc
c001b178:	8b 10                	mov    edx,DWORD PTR [eax]
c001b17a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b17e:	51                   	push   ecx
c001b17f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b182:	6a 00                	push   0x0
c001b184:	68 10 01 00 00       	push   0x110
c001b189:	50                   	push   eax
c001b18a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b18d:	83 c4 20             	add    esp,0x20
c001b190:	85 c0                	test   eax,eax
c001b192:	74 29                	je     c001b1bd <sysCallReadDir(regs*)+0x79>
c001b194:	83 f8 07             	cmp    eax,0x7
c001b197:	74 1b                	je     c001b1b4 <sysCallReadDir(regs*)+0x70>
c001b199:	b8 02 00 00 00       	mov    eax,0x2
c001b19e:	31 d2                	xor    edx,edx
c001b1a0:	83 c4 18             	add    esp,0x18
c001b1a3:	5b                   	pop    ebx
c001b1a4:	c3                   	ret    
c001b1a5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b1aa:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b1af:	83 c4 18             	add    esp,0x18
c001b1b2:	5b                   	pop    ebx
c001b1b3:	c3                   	ret    
c001b1b4:	b8 01 00 00 00       	mov    eax,0x1
c001b1b9:	31 d2                	xor    edx,edx
c001b1bb:	eb e3                	jmp    c001b1a0 <sysCallReadDir(regs*)+0x5c>
c001b1bd:	31 c0                	xor    eax,eax
c001b1bf:	31 d2                	xor    edx,edx
c001b1c1:	eb dd                	jmp    c001b1a0 <sysCallReadDir(regs*)+0x5c>

c001b1c3 <sysCallIsATTY(regs*)>:
c001b1c3:	83 ec 0c             	sub    esp,0xc
c001b1c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1ca:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b1cd:	83 f8 02             	cmp    eax,0x2
c001b1d0:	76 07                	jbe    c001b1d9 <sysCallIsATTY(regs*)+0x16>
c001b1d2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b1d7:	75 26                	jne    c001b1ff <sysCallIsATTY(regs*)+0x3c>
c001b1d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1de:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b1e1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b1e7:	85 c0                	test   eax,eax
c001b1e9:	74 24                	je     c001b20f <sysCallIsATTY(regs*)+0x4c>
c001b1eb:	83 ec 0c             	sub    esp,0xc
c001b1ee:	8b 10                	mov    edx,DWORD PTR [eax]
c001b1f0:	50                   	push   eax
c001b1f1:	ff 12                	call   DWORD PTR [edx]
c001b1f3:	31 d2                	xor    edx,edx
c001b1f5:	0f b6 c0             	movzx  eax,al
c001b1f8:	83 c4 10             	add    esp,0x10
c001b1fb:	83 c4 0c             	add    esp,0xc
c001b1fe:	c3                   	ret    
c001b1ff:	83 ec 0c             	sub    esp,0xc
c001b202:	50                   	push   eax
c001b203:	e8 3f 5e ff ff       	call   c0011047 <getFromFileDescriptor(int)>
c001b208:	83 c4 10             	add    esp,0x10
c001b20b:	85 c0                	test   eax,eax
c001b20d:	75 dc                	jne    c001b1eb <sysCallIsATTY(regs*)+0x28>
c001b20f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b214:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b219:	83 c4 0c             	add    esp,0xc
c001b21c:	c3                   	ret    

c001b21d <sysCallSeek(regs*)>:
c001b21d:	53                   	push   ebx
c001b21e:	83 ec 08             	sub    esp,0x8
c001b221:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b225:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b228:	8d 50 fd             	lea    edx,[eax-0x3]
c001b22b:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b231:	77 32                	ja     c001b265 <sysCallSeek(regs*)+0x48>
c001b233:	83 ec 0c             	sub    esp,0xc
c001b236:	50                   	push   eax
c001b237:	e8 0b 5e ff ff       	call   c0011047 <getFromFileDescriptor(int)>
c001b23c:	83 c4 0c             	add    esp,0xc
c001b23f:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b242:	31 db                	xor    ebx,ebx
c001b244:	53                   	push   ebx
c001b245:	51                   	push   ecx
c001b246:	50                   	push   eax
c001b247:	e8 a6 79 ff ff       	call   c0012bf2 <File::seek(unsigned long long)>
c001b24c:	83 c4 10             	add    esp,0x10
c001b24f:	85 c0                	test   eax,eax
c001b251:	0f 95 c0             	setne  al
c001b254:	31 d2                	xor    edx,edx
c001b256:	0f b6 c0             	movzx  eax,al
c001b259:	f7 d8                	neg    eax
c001b25b:	83 d2 00             	adc    edx,0x0
c001b25e:	83 c4 08             	add    esp,0x8
c001b261:	f7 da                	neg    edx
c001b263:	5b                   	pop    ebx
c001b264:	c3                   	ret    
c001b265:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b26a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b26f:	83 c4 08             	add    esp,0x8
c001b272:	5b                   	pop    ebx
c001b273:	c3                   	ret    

c001b274 <sysCallTell(regs*)>:
c001b274:	53                   	push   ebx
c001b275:	83 ec 08             	sub    esp,0x8
c001b278:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b27c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b27f:	83 f8 02             	cmp    eax,0x2
c001b282:	76 4d                	jbe    c001b2d1 <sysCallTell(regs*)+0x5d>
c001b284:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b289:	76 19                	jbe    c001b2a4 <sysCallTell(regs*)+0x30>
c001b28b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b28e:	31 d2                	xor    edx,edx
c001b290:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b296:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b29d:	31 c0                	xor    eax,eax
c001b29f:	83 c4 08             	add    esp,0x8
c001b2a2:	5b                   	pop    ebx
c001b2a3:	c3                   	ret    
c001b2a4:	83 ec 0c             	sub    esp,0xc
c001b2a7:	50                   	push   eax
c001b2a8:	e8 9a 5d ff ff       	call   c0011047 <getFromFileDescriptor(int)>
c001b2ad:	5a                   	pop    edx
c001b2ae:	59                   	pop    ecx
c001b2af:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b2b2:	50                   	push   eax
c001b2b3:	e8 90 79 ff ff       	call   c0012c48 <File::tell(unsigned long long*)>
c001b2b8:	83 c4 10             	add    esp,0x10
c001b2bb:	85 c0                	test   eax,eax
c001b2bd:	0f 95 c0             	setne  al
c001b2c0:	31 d2                	xor    edx,edx
c001b2c2:	0f b6 c0             	movzx  eax,al
c001b2c5:	f7 d8                	neg    eax
c001b2c7:	83 d2 00             	adc    edx,0x0
c001b2ca:	83 c4 08             	add    esp,0x8
c001b2cd:	f7 da                	neg    edx
c001b2cf:	5b                   	pop    ebx
c001b2d0:	c3                   	ret    
c001b2d1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b2d6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b2db:	83 c4 08             	add    esp,0x8
c001b2de:	5b                   	pop    ebx
c001b2df:	c3                   	ret    

c001b2e0 <sysCallSize(regs*)>:
c001b2e0:	53                   	push   ebx
c001b2e1:	83 ec 18             	sub    esp,0x18
c001b2e4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b2e8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b2eb:	83 f8 02             	cmp    eax,0x2
c001b2ee:	76 53                	jbe    c001b343 <sysCallSize(regs*)+0x63>
c001b2f0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b2f5:	76 19                	jbe    c001b310 <sysCallSize(regs*)+0x30>
c001b2f7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b2fa:	31 d2                	xor    edx,edx
c001b2fc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b302:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b309:	31 c0                	xor    eax,eax
c001b30b:	83 c4 18             	add    esp,0x18
c001b30e:	5b                   	pop    ebx
c001b30f:	c3                   	ret    
c001b310:	83 ec 0c             	sub    esp,0xc
c001b313:	50                   	push   eax
c001b314:	e8 2e 5d ff ff       	call   c0011047 <getFromFileDescriptor(int)>
c001b319:	83 c4 0c             	add    esp,0xc
c001b31c:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b320:	52                   	push   edx
c001b321:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b324:	50                   	push   eax
c001b325:	e8 b6 7a ff ff       	call   c0012de0 <File::stat(unsigned long long*, bool*)>
c001b32a:	83 c4 10             	add    esp,0x10
c001b32d:	85 c0                	test   eax,eax
c001b32f:	0f 95 c0             	setne  al
c001b332:	31 d2                	xor    edx,edx
c001b334:	0f b6 c0             	movzx  eax,al
c001b337:	f7 d8                	neg    eax
c001b339:	83 d2 00             	adc    edx,0x0
c001b33c:	83 c4 18             	add    esp,0x18
c001b33f:	f7 da                	neg    edx
c001b341:	5b                   	pop    ebx
c001b342:	c3                   	ret    
c001b343:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b348:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b34d:	83 c4 18             	add    esp,0x18
c001b350:	5b                   	pop    ebx
c001b351:	c3                   	ret    

c001b352 <sysCallSizeFromFilename(regs*)>:
c001b352:	57                   	push   edi
c001b353:	56                   	push   esi
c001b354:	53                   	push   ebx
c001b355:	83 ec 20             	sub    esp,0x20
c001b358:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b35c:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001b35f:	83 fb 02             	cmp    ebx,0x2
c001b362:	0f 86 88 00 00 00    	jbe    c001b3f0 <sysCallSizeFromFilename(regs*)+0x9e>
c001b368:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b36e:	76 1b                	jbe    c001b38b <sysCallSizeFromFilename(regs*)+0x39>
c001b370:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b373:	31 d2                	xor    edx,edx
c001b375:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b37b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b382:	83 c4 20             	add    esp,0x20
c001b385:	31 c0                	xor    eax,eax
c001b387:	5b                   	pop    ebx
c001b388:	5e                   	pop    esi
c001b389:	5f                   	pop    edi
c001b38a:	c3                   	ret    
c001b38b:	83 ec 0c             	sub    esp,0xc
c001b38e:	68 14 01 00 00       	push   0x114
c001b393:	e8 01 42 ff ff       	call   c000f599 <malloc>
c001b398:	83 c4 0c             	add    esp,0xc
c001b39b:	89 c7                	mov    edi,eax
c001b39d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3a2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b3a5:	53                   	push   ebx
c001b3a6:	57                   	push   edi
c001b3a7:	e8 24 77 ff ff       	call   c0012ad0 <File::File(char const*, Process*)>
c001b3ac:	83 c4 0c             	add    esp,0xc
c001b3af:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b3b3:	50                   	push   eax
c001b3b4:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b3b7:	57                   	push   edi
c001b3b8:	e8 23 7a ff ff       	call   c0012de0 <File::stat(unsigned long long*, bool*)>
c001b3bd:	83 c4 10             	add    esp,0x10
c001b3c0:	85 ff                	test   edi,edi
c001b3c2:	74 14                	je     c001b3d8 <sysCallSizeFromFilename(regs*)+0x86>
c001b3c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b3c8:	8b 17                	mov    edx,DWORD PTR [edi]
c001b3ca:	83 ec 0c             	sub    esp,0xc
c001b3cd:	57                   	push   edi
c001b3ce:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b3d1:	83 c4 10             	add    esp,0x10
c001b3d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b3d8:	85 c0                	test   eax,eax
c001b3da:	0f 95 c0             	setne  al
c001b3dd:	31 d2                	xor    edx,edx
c001b3df:	0f b6 c0             	movzx  eax,al
c001b3e2:	f7 d8                	neg    eax
c001b3e4:	83 d2 00             	adc    edx,0x0
c001b3e7:	83 c4 20             	add    esp,0x20
c001b3ea:	f7 da                	neg    edx
c001b3ec:	5b                   	pop    ebx
c001b3ed:	5e                   	pop    esi
c001b3ee:	5f                   	pop    edi
c001b3ef:	c3                   	ret    
c001b3f0:	83 c4 20             	add    esp,0x20
c001b3f3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b3f8:	5b                   	pop    ebx
c001b3f9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3fe:	5e                   	pop    esi
c001b3ff:	5f                   	pop    edi
c001b400:	c3                   	ret    

c001b401 <sysCallClose(regs*)>:
c001b401:	53                   	push   ebx
c001b402:	83 ec 08             	sub    esp,0x8
c001b405:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b409:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b40c:	83 f8 02             	cmp    eax,0x2
c001b40f:	76 41                	jbe    c001b452 <sysCallClose(regs*)+0x51>
c001b411:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001b417:	83 fa 01             	cmp    edx,0x1
c001b41a:	76 2d                	jbe    c001b449 <sysCallClose(regs*)+0x48>
c001b41c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b421:	77 2f                	ja     c001b452 <sysCallClose(regs*)+0x51>
c001b423:	83 ec 0c             	sub    esp,0xc
c001b426:	50                   	push   eax
c001b427:	e8 1b 5c ff ff       	call   c0011047 <getFromFileDescriptor(int)>
c001b42c:	89 c3                	mov    ebx,eax
c001b42e:	89 04 24             	mov    DWORD PTR [esp],eax
c001b431:	e8 5c 77 ff ff       	call   c0012b92 <File::close()>
c001b436:	83 c4 10             	add    esp,0x10
c001b439:	85 db                	test   ebx,ebx
c001b43b:	74 0c                	je     c001b449 <sysCallClose(regs*)+0x48>
c001b43d:	83 ec 0c             	sub    esp,0xc
c001b440:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b442:	53                   	push   ebx
c001b443:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b446:	83 c4 10             	add    esp,0x10
c001b449:	31 c0                	xor    eax,eax
c001b44b:	31 d2                	xor    edx,edx
c001b44d:	83 c4 08             	add    esp,0x8
c001b450:	5b                   	pop    ebx
c001b451:	c3                   	ret    
c001b452:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b457:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b45c:	83 c4 08             	add    esp,0x8
c001b45f:	5b                   	pop    ebx
c001b460:	c3                   	ret    

c001b461 <sysCallOpenDir(regs*)>:
c001b461:	56                   	push   esi
c001b462:	53                   	push   ebx
c001b463:	53                   	push   ebx
c001b464:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b468:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b46b:	85 f6                	test   esi,esi
c001b46d:	74 59                	je     c001b4c8 <sysCallOpenDir(regs*)+0x67>
c001b46f:	83 ec 0c             	sub    esp,0xc
c001b472:	68 14 01 00 00       	push   0x114
c001b477:	e8 1d 41 ff ff       	call   c000f599 <malloc>
c001b47c:	83 c4 0c             	add    esp,0xc
c001b47f:	89 c6                	mov    esi,eax
c001b481:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b486:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b489:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b48c:	56                   	push   esi
c001b48d:	e8 ea 7a ff ff       	call   c0012f7c <Directory::Directory(char const*, Process*)>
c001b492:	83 c4 10             	add    esp,0x10
c001b495:	85 f6                	test   esi,esi
c001b497:	74 2f                	je     c001b4c8 <sysCallOpenDir(regs*)+0x67>
c001b499:	83 ec 0c             	sub    esp,0xc
c001b49c:	56                   	push   esi
c001b49d:	e8 3e 7b ff ff       	call   c0012fe0 <Directory::open()>
c001b4a2:	83 c4 10             	add    esp,0x10
c001b4a5:	85 c0                	test   eax,eax
c001b4a7:	75 1f                	jne    c001b4c8 <sysCallOpenDir(regs*)+0x67>
c001b4a9:	83 ec 0c             	sub    esp,0xc
c001b4ac:	56                   	push   esi
c001b4ad:	e8 a0 58 ff ff       	call   c0010d52 <UnixFile::getFileDescriptor()>
c001b4b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b4b5:	83 c4 10             	add    esp,0x10
c001b4b8:	89 02                	mov    DWORD PTR [edx],eax
c001b4ba:	c1 f8 1f             	sar    eax,0x1f
c001b4bd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b4c0:	31 c0                	xor    eax,eax
c001b4c2:	59                   	pop    ecx
c001b4c3:	31 d2                	xor    edx,edx
c001b4c5:	5b                   	pop    ebx
c001b4c6:	5e                   	pop    esi
c001b4c7:	c3                   	ret    
c001b4c8:	59                   	pop    ecx
c001b4c9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b4ce:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b4d3:	5b                   	pop    ebx
c001b4d4:	5e                   	pop    esi
c001b4d5:	c3                   	ret    

c001b4d6 <sysCallCloseDir(regs*)>:
c001b4d6:	53                   	push   ebx
c001b4d7:	83 ec 08             	sub    esp,0x8
c001b4da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4de:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b4e1:	8d 50 fd             	lea    edx,[eax-0x3]
c001b4e4:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b4ea:	77 2f                	ja     c001b51b <sysCallCloseDir(regs*)+0x45>
c001b4ec:	83 ec 0c             	sub    esp,0xc
c001b4ef:	50                   	push   eax
c001b4f0:	e8 52 5b ff ff       	call   c0011047 <getFromFileDescriptor(int)>
c001b4f5:	89 c3                	mov    ebx,eax
c001b4f7:	89 04 24             	mov    DWORD PTR [esp],eax
c001b4fa:	e8 3d 7b ff ff       	call   c001303c <Directory::close()>
c001b4ff:	83 c4 10             	add    esp,0x10
c001b502:	85 db                	test   ebx,ebx
c001b504:	74 0c                	je     c001b512 <sysCallCloseDir(regs*)+0x3c>
c001b506:	83 ec 0c             	sub    esp,0xc
c001b509:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b50b:	53                   	push   ebx
c001b50c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b50f:	83 c4 10             	add    esp,0x10
c001b512:	31 c0                	xor    eax,eax
c001b514:	31 d2                	xor    edx,edx
c001b516:	83 c4 08             	add    esp,0x8
c001b519:	5b                   	pop    ebx
c001b51a:	c3                   	ret    
c001b51b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b520:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b525:	83 c4 08             	add    esp,0x8
c001b528:	5b                   	pop    ebx
c001b529:	c3                   	ret    

c001b52a <sysCallMakeDir(regs*)>:
c001b52a:	56                   	push   esi
c001b52b:	53                   	push   ebx
c001b52c:	83 ec 10             	sub    esp,0x10
c001b52f:	68 14 01 00 00       	push   0x114
c001b534:	e8 60 40 ff ff       	call   c000f599 <malloc>
c001b539:	83 c4 0c             	add    esp,0xc
c001b53c:	89 c3                	mov    ebx,eax
c001b53e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b543:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b546:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b54a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b54d:	53                   	push   ebx
c001b54e:	e8 29 7a ff ff       	call   c0012f7c <Directory::Directory(char const*, Process*)>
c001b553:	83 c4 10             	add    esp,0x10
c001b556:	85 db                	test   ebx,ebx
c001b558:	74 32                	je     c001b58c <sysCallMakeDir(regs*)+0x62>
c001b55a:	83 ec 0c             	sub    esp,0xc
c001b55d:	53                   	push   ebx
c001b55e:	e8 5d 7c ff ff       	call   c00131c0 <Directory::create()>
c001b563:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b566:	89 c6                	mov    esi,eax
c001b568:	e8 cf 7a ff ff       	call   c001303c <Directory::close()>
c001b56d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b56f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b572:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b575:	83 c4 10             	add    esp,0x10
c001b578:	31 c0                	xor    eax,eax
c001b57a:	59                   	pop    ecx
c001b57b:	85 f6                	test   esi,esi
c001b57d:	5b                   	pop    ebx
c001b57e:	0f 95 c0             	setne  al
c001b581:	5e                   	pop    esi
c001b582:	31 d2                	xor    edx,edx
c001b584:	f7 d8                	neg    eax
c001b586:	83 d2 00             	adc    edx,0x0
c001b589:	f7 da                	neg    edx
c001b58b:	c3                   	ret    
c001b58c:	59                   	pop    ecx
c001b58d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b592:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b597:	5b                   	pop    ebx
c001b598:	5e                   	pop    esi
c001b599:	c3                   	ret    

c001b59a <sysCallWait(regs*)>:
c001b59a:	83 ec 10             	sub    esp,0x10
c001b59d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b5a1:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b5a4:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b5a7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b5aa:	e8 af 24 00 00       	call   c001da5e <waitTask(int, int*, int)>
c001b5af:	83 c4 1c             	add    esp,0x1c
c001b5b2:	99                   	cdq    
c001b5b3:	c3                   	ret    

c001b5b4 <sysCallNotImpl(regs*)>:
c001b5b4:	83 ec 18             	sub    esp,0x18
c001b5b7:	68 d1 b5 02 c0       	push   0xc002b5d1
c001b5bc:	e8 10 e7 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c001b5c1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b5c6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5cb:	83 c4 1c             	add    esp,0x1c
c001b5ce:	c3                   	ret    

c001b5cf <sysPanic(regs*)>:
c001b5cf:	83 ec 18             	sub    esp,0x18
c001b5d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b5d6:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b5d9:	e8 f3 e6 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c001b5de:	b8 01 00 00 00       	mov    eax,0x1
c001b5e3:	31 d2                	xor    edx,edx
c001b5e5:	83 c4 1c             	add    esp,0x1c
c001b5e8:	c3                   	ret    

c001b5e9 <sysCallRmdir(regs*)>:
c001b5e9:	56                   	push   esi
c001b5ea:	53                   	push   ebx
c001b5eb:	83 ec 20             	sub    esp,0x20
c001b5ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b5f2:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b5f5:	68 14 01 00 00       	push   0x114
c001b5fa:	e8 9a 3f ff ff       	call   c000f599 <malloc>
c001b5ff:	83 c4 0c             	add    esp,0xc
c001b602:	89 c3                	mov    ebx,eax
c001b604:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b609:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b60c:	56                   	push   esi
c001b60d:	53                   	push   ebx
c001b60e:	e8 bd 74 ff ff       	call   c0012ad0 <File::File(char const*, Process*)>
c001b613:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b616:	e8 91 76 ff ff       	call   c0012cac <File::unlink()>
c001b61b:	83 c4 10             	add    esp,0x10
c001b61e:	85 db                	test   ebx,ebx
c001b620:	74 14                	je     c001b636 <sysCallRmdir(regs*)+0x4d>
c001b622:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b626:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b628:	83 ec 0c             	sub    esp,0xc
c001b62b:	53                   	push   ebx
c001b62c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b62f:	83 c4 10             	add    esp,0x10
c001b632:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b636:	85 c0                	test   eax,eax
c001b638:	0f 95 c0             	setne  al
c001b63b:	31 d2                	xor    edx,edx
c001b63d:	0f b6 c0             	movzx  eax,al
c001b640:	f7 d8                	neg    eax
c001b642:	83 d2 00             	adc    edx,0x0
c001b645:	83 c4 14             	add    esp,0x14
c001b648:	f7 da                	neg    edx
c001b64a:	5b                   	pop    ebx
c001b64b:	5e                   	pop    esi
c001b64c:	c3                   	ret    

c001b64d <sysCallUnlink(regs*)>:
c001b64d:	56                   	push   esi
c001b64e:	53                   	push   ebx
c001b64f:	83 ec 20             	sub    esp,0x20
c001b652:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b656:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b659:	68 14 01 00 00       	push   0x114
c001b65e:	e8 36 3f ff ff       	call   c000f599 <malloc>
c001b663:	83 c4 0c             	add    esp,0xc
c001b666:	89 c3                	mov    ebx,eax
c001b668:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b66d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b670:	56                   	push   esi
c001b671:	53                   	push   ebx
c001b672:	e8 59 74 ff ff       	call   c0012ad0 <File::File(char const*, Process*)>
c001b677:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b67a:	e8 2d 76 ff ff       	call   c0012cac <File::unlink()>
c001b67f:	83 c4 10             	add    esp,0x10
c001b682:	85 db                	test   ebx,ebx
c001b684:	74 14                	je     c001b69a <sysCallUnlink(regs*)+0x4d>
c001b686:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b68a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b68c:	83 ec 0c             	sub    esp,0xc
c001b68f:	53                   	push   ebx
c001b690:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b693:	83 c4 10             	add    esp,0x10
c001b696:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b69a:	85 c0                	test   eax,eax
c001b69c:	0f 95 c0             	setne  al
c001b69f:	31 d2                	xor    edx,edx
c001b6a1:	0f b6 c0             	movzx  eax,al
c001b6a4:	f7 d8                	neg    eax
c001b6a6:	83 d2 00             	adc    edx,0x0
c001b6a9:	83 c4 14             	add    esp,0x14
c001b6ac:	f7 da                	neg    edx
c001b6ae:	5b                   	pop    ebx
c001b6af:	5e                   	pop    esi
c001b6b0:	c3                   	ret    

c001b6b1 <sysCallGetArgv(regs*)>:
c001b6b1:	83 ec 0c             	sub    esp,0xc
c001b6b4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b6b8:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b6bb:	85 c0                	test   eax,eax
c001b6bd:	78 2b                	js     c001b6ea <sysCallGetArgv(regs*)+0x39>
c001b6bf:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b6c5:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b6c8:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b6ce:	7d 1a                	jge    c001b6ea <sysCallGetArgv(regs*)+0x39>
c001b6d0:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b6d7:	85 c0                	test   eax,eax
c001b6d9:	74 17                	je     c001b6f2 <sysCallGetArgv(regs*)+0x41>
c001b6db:	83 ec 08             	sub    esp,0x8
c001b6de:	50                   	push   eax
c001b6df:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b6e2:	e8 25 51 fe ff       	call   c000080c <strcpy>
c001b6e7:	83 c4 10             	add    esp,0x10
c001b6ea:	31 c0                	xor    eax,eax
c001b6ec:	31 d2                	xor    edx,edx
c001b6ee:	83 c4 0c             	add    esp,0xc
c001b6f1:	c3                   	ret    
c001b6f2:	b8 01 00 00 00       	mov    eax,0x1
c001b6f7:	31 d2                	xor    edx,edx
c001b6f9:	83 c4 0c             	add    esp,0xc
c001b6fc:	c3                   	ret    

c001b6fd <sysCallTTYName(regs*)>:
c001b6fd:	56                   	push   esi
c001b6fe:	53                   	push   ebx
c001b6ff:	53                   	push   ebx
c001b700:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b704:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b707:	85 c0                	test   eax,eax
c001b709:	74 5f                	je     c001b76a <sysCallTTYName(regs*)+0x6d>
c001b70b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b70e:	83 f8 02             	cmp    eax,0x2
c001b711:	77 3e                	ja     c001b751 <sysCallTTYName(regs*)+0x54>
c001b713:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b718:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b71b:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b721:	85 db                	test   ebx,ebx
c001b723:	74 45                	je     c001b76a <sysCallTTYName(regs*)+0x6d>
c001b725:	83 ec 0c             	sub    esp,0xc
c001b728:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b72a:	53                   	push   ebx
c001b72b:	ff 10                	call   DWORD PTR [eax]
c001b72d:	83 c4 10             	add    esp,0x10
c001b730:	84 c0                	test   al,al
c001b732:	74 41                	je     c001b775 <sysCallTTYName(regs*)+0x78>
c001b734:	83 ec 08             	sub    esp,0x8
c001b737:	81 c3 82 00 00 00    	add    ebx,0x82
c001b73d:	53                   	push   ebx
c001b73e:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b741:	e8 c6 50 fe ff       	call   c000080c <strcpy>
c001b746:	83 c4 10             	add    esp,0x10
c001b749:	31 c0                	xor    eax,eax
c001b74b:	59                   	pop    ecx
c001b74c:	31 d2                	xor    edx,edx
c001b74e:	5b                   	pop    ebx
c001b74f:	5e                   	pop    esi
c001b750:	c3                   	ret    
c001b751:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b756:	74 bb                	je     c001b713 <sysCallTTYName(regs*)+0x16>
c001b758:	83 ec 0c             	sub    esp,0xc
c001b75b:	50                   	push   eax
c001b75c:	e8 e6 58 ff ff       	call   c0011047 <getFromFileDescriptor(int)>
c001b761:	83 c4 10             	add    esp,0x10
c001b764:	89 c3                	mov    ebx,eax
c001b766:	85 db                	test   ebx,ebx
c001b768:	75 bb                	jne    c001b725 <sysCallTTYName(regs*)+0x28>
c001b76a:	59                   	pop    ecx
c001b76b:	b8 01 00 00 00       	mov    eax,0x1
c001b770:	31 d2                	xor    edx,edx
c001b772:	5b                   	pop    ebx
c001b773:	5e                   	pop    esi
c001b774:	c3                   	ret    
c001b775:	59                   	pop    ecx
c001b776:	b8 02 00 00 00       	mov    eax,0x2
c001b77b:	31 d2                	xor    edx,edx
c001b77d:	5b                   	pop    ebx
c001b77e:	5e                   	pop    esi
c001b77f:	c3                   	ret    

c001b780 <sysCallUSleep(regs*)>:
c001b780:	83 ec 14             	sub    esp,0x14
c001b783:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b788:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b78c:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b793:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b796:	01 ca                	add    edx,ecx
c001b798:	52                   	push   edx
c001b799:	50                   	push   eax
c001b79a:	e8 96 23 00 00       	call   c001db35 <nanoSleep(unsigned long long)>
c001b79f:	31 c0                	xor    eax,eax
c001b7a1:	31 d2                	xor    edx,edx
c001b7a3:	83 c4 1c             	add    esp,0x1c
c001b7a6:	c3                   	ret    

c001b7a7 <sysCallSpawn(regs*)>:
c001b7a7:	56                   	push   esi
c001b7a8:	53                   	push   ebx
c001b7a9:	50                   	push   eax
c001b7aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b7ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b7b1:	85 c0                	test   eax,eax
c001b7b3:	75 08                	jne    c001b7bd <sysCallSpawn(regs*)+0x16>
c001b7b5:	59                   	pop    ecx
c001b7b6:	31 c0                	xor    eax,eax
c001b7b8:	31 d2                	xor    edx,edx
c001b7ba:	5b                   	pop    ebx
c001b7bb:	5e                   	pop    esi
c001b7bc:	c3                   	ret    
c001b7bd:	83 ec 0c             	sub    esp,0xc
c001b7c0:	68 3f 07 00 00       	push   0x73f
c001b7c5:	e8 cf 3d ff ff       	call   c000f599 <malloc>
c001b7ca:	83 c4 10             	add    esp,0x10
c001b7cd:	89 c6                	mov    esi,eax
c001b7cf:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b7d2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b7d5:	85 c0                	test   eax,eax
c001b7d7:	75 32                	jne    c001b80b <sysCallSpawn(regs*)+0x64>
c001b7d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7de:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b7e1:	52                   	push   edx
c001b7e2:	50                   	push   eax
c001b7e3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b7e6:	56                   	push   esi
c001b7e7:	e8 6e 1a 00 00       	call   c001d25a <Process::Process(char const*, Process*, char**)>
c001b7ec:	83 c4 10             	add    esp,0x10
c001b7ef:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b7f6:	75 bd                	jne    c001b7b5 <sysCallSpawn(regs*)+0xe>
c001b7f8:	83 ec 0c             	sub    esp,0xc
c001b7fb:	56                   	push   esi
c001b7fc:	e8 3b 1f 00 00       	call   c001d73c <Process::createUserThread()>
c001b801:	8b 06                	mov    eax,DWORD PTR [esi]
c001b803:	83 c4 10             	add    esp,0x10
c001b806:	99                   	cdq    
c001b807:	59                   	pop    ecx
c001b808:	5b                   	pop    ebx
c001b809:	5e                   	pop    esi
c001b80a:	c3                   	ret    
c001b80b:	31 c0                	xor    eax,eax
c001b80d:	eb d2                	jmp    c001b7e1 <sysCallSpawn(regs*)+0x3a>

c001b80f <sysCallGetEnv(regs*)>:
c001b80f:	57                   	push   edi
c001b810:	56                   	push   esi
c001b811:	53                   	push   ebx
c001b812:	83 ec 1c             	sub    esp,0x1c
c001b815:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b819:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b81e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b821:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b824:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b827:	e8 f1 e3 ff ff       	call   c0019c1d <Krnl::getProcessTotalEnvCount(Process*)>
c001b82c:	83 c4 10             	add    esp,0x10
c001b82f:	39 c7                	cmp    edi,eax
c001b831:	7c 14                	jl     c001b847 <sysCallGetEnv(regs*)+0x38>
c001b833:	85 f6                	test   esi,esi
c001b835:	75 0b                	jne    c001b842 <sysCallGetEnv(regs*)+0x33>
c001b837:	83 c4 10             	add    esp,0x10
c001b83a:	31 c0                	xor    eax,eax
c001b83c:	5b                   	pop    ebx
c001b83d:	31 d2                	xor    edx,edx
c001b83f:	5e                   	pop    esi
c001b840:	5f                   	pop    edi
c001b841:	c3                   	ret    
c001b842:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b845:	eb f0                	jmp    c001b837 <sysCallGetEnv(regs*)+0x28>
c001b847:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b84b:	52                   	push   edx
c001b84c:	57                   	push   edi
c001b84d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b853:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b856:	50                   	push   eax
c001b857:	e8 e1 e3 ff ff       	call   c0019c3d <Krnl::getProcessEnvPair(Process*, int)>
c001b85c:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b85f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b863:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b867:	83 c4 0c             	add    esp,0xc
c001b86a:	85 c9                	test   ecx,ecx
c001b86c:	75 23                	jne    c001b891 <sysCallGetEnv(regs*)+0x82>
c001b86e:	83 ec 0c             	sub    esp,0xc
c001b871:	50                   	push   eax
c001b872:	e8 f5 4e fe ff       	call   c000076c <strlen>
c001b877:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b87a:	89 c3                	mov    ebx,eax
c001b87c:	e8 eb 4e fe ff       	call   c000076c <strlen>
c001b881:	83 c4 10             	add    esp,0x10
c001b884:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b888:	83 c4 10             	add    esp,0x10
c001b88b:	31 d2                	xor    edx,edx
c001b88d:	5b                   	pop    ebx
c001b88e:	5e                   	pop    esi
c001b88f:	5f                   	pop    edi
c001b890:	c3                   	ret    
c001b891:	83 ec 08             	sub    esp,0x8
c001b894:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b897:	50                   	push   eax
c001b898:	56                   	push   esi
c001b899:	e8 6e 4f fe ff       	call   c000080c <strcpy>
c001b89e:	58                   	pop    eax
c001b89f:	5a                   	pop    edx
c001b8a0:	68 eb b5 02 c0       	push   0xc002b5eb
c001b8a5:	56                   	push   esi
c001b8a6:	e8 a1 50 fe ff       	call   c000094c <strcat>
c001b8ab:	59                   	pop    ecx
c001b8ac:	5b                   	pop    ebx
c001b8ad:	57                   	push   edi
c001b8ae:	56                   	push   esi
c001b8af:	e8 98 50 fe ff       	call   c000094c <strcat>
c001b8b4:	83 c4 10             	add    esp,0x10
c001b8b7:	e9 7b ff ff ff       	jmp    c001b837 <sysCallGetEnv(regs*)+0x28>

c001b8bc <sysAppSettings(regs*)>:
c001b8bc:	57                   	push   edi
c001b8bd:	56                   	push   esi
c001b8be:	56                   	push   esi
c001b8bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8c3:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b8c6:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001b8cc:	25 e0 1f 00 00       	and    eax,0x1fe0
c001b8d1:	66 3d c0 09          	cmp    ax,0x9c0
c001b8d5:	75 2e                	jne    c001b905 <sysAppSettings(regs*)+0x49>
c001b8d7:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001b8dd:	83 e0 1f             	and    eax,0x1f
c001b8e0:	3c 01                	cmp    al,0x1
c001b8e2:	74 2c                	je     c001b910 <sysAppSettings(regs*)+0x54>
c001b8e4:	3c 07                	cmp    al,0x7
c001b8e6:	0f 84 b3 00 00 00    	je     c001b99f <sysAppSettings(regs*)+0xe3>
c001b8ec:	84 c0                	test   al,al
c001b8ee:	0f 84 d2 00 00 00    	je     c001b9c6 <sysAppSettings(regs*)+0x10a>
c001b8f4:	3c 08                	cmp    al,0x8
c001b8f6:	74 63                	je     c001b95b <sysAppSettings(regs*)+0x9f>
c001b8f8:	59                   	pop    ecx
c001b8f9:	0f b6 c0             	movzx  eax,al
c001b8fc:	5e                   	pop    esi
c001b8fd:	05 e8 03 00 00       	add    eax,0x3e8
c001b902:	5f                   	pop    edi
c001b903:	99                   	cdq    
c001b904:	c3                   	ret    
c001b905:	b8 01 00 00 00       	mov    eax,0x1
c001b90a:	59                   	pop    ecx
c001b90b:	31 d2                	xor    edx,edx
c001b90d:	5e                   	pop    esi
c001b90e:	5f                   	pop    edi
c001b90f:	c3                   	ret    
c001b910:	50                   	push   eax
c001b911:	68 00 01 00 00       	push   0x100
c001b916:	6a 00                	push   0x0
c001b918:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b91d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b920:	83 c0 0c             	add    eax,0xc
c001b923:	50                   	push   eax
c001b924:	e8 27 4e fe ff       	call   c0000750 <memset>
c001b929:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b92e:	b9 ff 00 00 00       	mov    ecx,0xff
c001b933:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001b936:	83 c7 0c             	add    edi,0xc
c001b939:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b93b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b940:	5a                   	pop    edx
c001b941:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b944:	59                   	pop    ecx
c001b945:	8d 50 0c             	lea    edx,[eax+0xc]
c001b948:	52                   	push   edx
c001b949:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b94f:	e8 1e 48 ff ff       	call   c0010172 <VgaText::setTitle(char*)>
c001b954:	83 c4 10             	add    esp,0x10
c001b957:	31 c0                	xor    eax,eax
c001b959:	eb af                	jmp    c001b90a <sysAppSettings(regs*)+0x4e>
c001b95b:	83 ec 08             	sub    esp,0x8
c001b95e:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001b964:	83 e0 0f             	and    eax,0xf
c001b967:	50                   	push   eax
c001b968:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b96d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b970:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b976:	e8 e7 47 ff ff       	call   c0010162 <VgaText::setTitleColour(VgaColour)>
c001b97b:	5f                   	pop    edi
c001b97c:	58                   	pop    eax
c001b97d:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001b983:	c1 e8 04             	shr    eax,0x4
c001b986:	83 e0 0f             	and    eax,0xf
c001b989:	50                   	push   eax
c001b98a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b98f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b992:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b998:	e8 b5 47 ff ff       	call   c0010152 <VgaText::setTitleTextColour(VgaColour)>
c001b99d:	eb b5                	jmp    c001b954 <sysAppSettings(regs*)+0x98>
c001b99f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9a4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9a7:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b9ad:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001b9b3:	c0 e8 06             	shr    al,0x6
c001b9b6:	83 e0 01             	and    eax,0x1
c001b9b9:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001b9bf:	31 c0                	xor    eax,eax
c001b9c1:	e9 44 ff ff ff       	jmp    c001b90a <sysAppSettings(regs*)+0x4e>
c001b9c6:	b8 02 00 00 00       	mov    eax,0x2
c001b9cb:	e9 3a ff ff ff       	jmp    c001b90a <sysAppSettings(regs*)+0x4e>

c001b9d0 <sysSetFatAttrib(regs*)>:
c001b9d0:	57                   	push   edi
c001b9d1:	56                   	push   esi
c001b9d2:	53                   	push   ebx
c001b9d3:	83 ec 1c             	sub    esp,0x1c
c001b9d6:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b9da:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001b9dd:	68 14 01 00 00       	push   0x114
c001b9e2:	e8 b2 3b ff ff       	call   c000f599 <malloc>
c001b9e7:	83 c4 0c             	add    esp,0xc
c001b9ea:	89 c3                	mov    ebx,eax
c001b9ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9f1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b9f4:	57                   	push   edi
c001b9f5:	53                   	push   ebx
c001b9f6:	e8 d5 70 ff ff       	call   c0012ad0 <File::File(char const*, Process*)>
c001b9fb:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b9fe:	83 c4 0c             	add    esp,0xc
c001ba01:	0f b6 d4             	movzx  edx,ah
c001ba04:	0f b6 c0             	movzx  eax,al
c001ba07:	52                   	push   edx
c001ba08:	50                   	push   eax
c001ba09:	53                   	push   ebx
c001ba0a:	e8 37 73 ff ff       	call   c0012d46 <File::chfatattr(unsigned char, unsigned char)>
c001ba0f:	83 c4 10             	add    esp,0x10
c001ba12:	85 db                	test   ebx,ebx
c001ba14:	74 14                	je     c001ba2a <sysSetFatAttrib(regs*)+0x5a>
c001ba16:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba1a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ba1c:	83 ec 0c             	sub    esp,0xc
c001ba1f:	53                   	push   ebx
c001ba20:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ba23:	83 c4 10             	add    esp,0x10
c001ba26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba2a:	85 c0                	test   eax,eax
c001ba2c:	0f 95 c0             	setne  al
c001ba2f:	31 d2                	xor    edx,edx
c001ba31:	0f b6 c0             	movzx  eax,al
c001ba34:	f7 d8                	neg    eax
c001ba36:	83 d2 00             	adc    edx,0x0
c001ba39:	83 c4 10             	add    esp,0x10
c001ba3c:	f7 da                	neg    edx
c001ba3e:	5b                   	pop    ebx
c001ba3f:	5e                   	pop    esi
c001ba40:	5f                   	pop    edi
c001ba41:	c3                   	ret    

c001ba42 <sysPipe(regs*)>:
c001ba42:	57                   	push   edi
c001ba43:	56                   	push   esi
c001ba44:	53                   	push   ebx
c001ba45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba49:	83 ec 0c             	sub    esp,0xc
c001ba4c:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001ba4f:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001ba52:	6a 20                	push   0x20
c001ba54:	e8 40 3b ff ff       	call   c000f599 <malloc>
c001ba59:	89 c3                	mov    ebx,eax
c001ba5b:	58                   	pop    eax
c001ba5c:	5a                   	pop    edx
c001ba5d:	68 00 50 00 00       	push   0x5000
c001ba62:	53                   	push   ebx
c001ba63:	e8 82 44 ff ff       	call   c000feea <Pipe::Pipe(int)>
c001ba68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ba6b:	e8 e2 52 ff ff       	call   c0010d52 <UnixFile::getFileDescriptor()>
c001ba70:	89 07                	mov    DWORD PTR [edi],eax
c001ba72:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ba75:	e8 d8 52 ff ff       	call   c0010d52 <UnixFile::getFileDescriptor()>
c001ba7a:	83 c4 10             	add    esp,0x10
c001ba7d:	89 06                	mov    DWORD PTR [esi],eax
c001ba7f:	31 d2                	xor    edx,edx
c001ba81:	5b                   	pop    ebx
c001ba82:	31 c0                	xor    eax,eax
c001ba84:	5e                   	pop    esi
c001ba85:	5f                   	pop    edi
c001ba86:	c3                   	ret    

c001ba87 <sysGetUnixTime(regs*)>:
c001ba87:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c001ba8c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ba92:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ba96:	e9 27 7a ff ff       	jmp    c00134c2 <Clock::timeInSecondsLocal()>

c001ba9b <string_ends_with(char const*, char const*)>:
c001ba9b:	57                   	push   edi
c001ba9c:	56                   	push   esi
c001ba9d:	53                   	push   ebx
c001ba9e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001baa2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001baa6:	83 ec 0c             	sub    esp,0xc
c001baa9:	53                   	push   ebx
c001baaa:	e8 bd 4c fe ff       	call   c000076c <strlen>
c001baaf:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bab2:	89 c6                	mov    esi,eax
c001bab4:	e8 b3 4c fe ff       	call   c000076c <strlen>
c001bab9:	83 c4 10             	add    esp,0x10
c001babc:	39 c6                	cmp    esi,eax
c001babe:	7d 06                	jge    c001bac6 <string_ends_with(char const*, char const*)+0x2b>
c001bac0:	5b                   	pop    ebx
c001bac1:	31 c0                	xor    eax,eax
c001bac3:	5e                   	pop    esi
c001bac4:	5f                   	pop    edi
c001bac5:	c3                   	ret    
c001bac6:	83 ec 08             	sub    esp,0x8
c001bac9:	29 c6                	sub    esi,eax
c001bacb:	57                   	push   edi
c001bacc:	01 f3                	add    ebx,esi
c001bace:	53                   	push   ebx
c001bacf:	e8 c4 4d fe ff       	call   c0000898 <strcmp>
c001bad4:	83 c4 10             	add    esp,0x10
c001bad7:	85 c0                	test   eax,eax
c001bad9:	5b                   	pop    ebx
c001bada:	0f 94 c0             	sete   al
c001badd:	5e                   	pop    esi
c001bade:	0f b6 c0             	movzx  eax,al
c001bae1:	5f                   	pop    edi
c001bae2:	c3                   	ret    

c001bae3 <sysCallOpen(regs*)>:
c001bae3:	56                   	push   esi
c001bae4:	53                   	push   ebx
c001bae5:	81 ec 04 01 00 00    	sub    esp,0x104
c001baeb:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001baf2:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001baf5:	85 c9                	test   ecx,ecx
c001baf7:	0f 84 ad 01 00 00    	je     c001bcaa <sysCallOpen(regs*)+0x1c7>
c001bafd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bb00:	85 c0                	test   eax,eax
c001bb02:	0f 84 a2 01 00 00    	je     c001bcaa <sysCallOpen(regs*)+0x1c7>
c001bb08:	52                   	push   edx
c001bb09:	68 ed b5 02 c0       	push   0xc002b5ed
c001bb0e:	50                   	push   eax
c001bb0f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001bb13:	56                   	push   esi
c001bb14:	e8 0d 6e ff ff       	call   c0012926 <Fs::standardiseFiles(char*, char const*, char const*)>
c001bb19:	89 34 24             	mov    DWORD PTR [esp],esi
c001bb1c:	e8 4b 4c fe ff       	call   c000076c <strlen>
c001bb21:	83 c4 10             	add    esp,0x10
c001bb24:	48                   	dec    eax
c001bb25:	74 1d                	je     c001bb44 <sysCallOpen(regs*)+0x61>
c001bb27:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001bb2a:	eb 0f                	jmp    c001bb3b <sysCallOpen(regs*)+0x58>
c001bb2c:	80 fa 3a             	cmp    dl,0x3a
c001bb2f:	74 0f                	je     c001bb40 <sysCallOpen(regs*)+0x5d>
c001bb31:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001bb35:	48                   	dec    eax
c001bb36:	74 0c                	je     c001bb44 <sysCallOpen(regs*)+0x61>
c001bb38:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001bb3b:	80 fa 2e             	cmp    dl,0x2e
c001bb3e:	75 ec                	jne    c001bb2c <sysCallOpen(regs*)+0x49>
c001bb40:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001bb44:	83 ec 08             	sub    esp,0x8
c001bb47:	68 f1 b5 02 c0       	push   0xc002b5f1
c001bb4c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb4f:	e8 47 ff ff ff       	call   c001ba9b <string_ends_with(char const*, char const*)>
c001bb54:	83 c4 10             	add    esp,0x10
c001bb57:	85 c0                	test   eax,eax
c001bb59:	74 1d                	je     c001bb78 <sysCallOpen(regs*)+0x95>
c001bb5b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bb5e:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001bb64:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb6b:	81 c4 04 01 00 00    	add    esp,0x104
c001bb71:	31 c0                	xor    eax,eax
c001bb73:	31 d2                	xor    edx,edx
c001bb75:	5b                   	pop    ebx
c001bb76:	5e                   	pop    esi
c001bb77:	c3                   	ret    
c001bb78:	83 ec 08             	sub    esp,0x8
c001bb7b:	68 f6 b5 02 c0       	push   0xc002b5f6
c001bb80:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb83:	e8 13 ff ff ff       	call   c001ba9b <string_ends_with(char const*, char const*)>
c001bb88:	83 c4 10             	add    esp,0x10
c001bb8b:	85 c0                	test   eax,eax
c001bb8d:	75 cc                	jne    c001bb5b <sysCallOpen(regs*)+0x78>
c001bb8f:	83 ec 08             	sub    esp,0x8
c001bb92:	68 f2 b5 02 c0       	push   0xc002b5f2
c001bb97:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb9a:	e8 f9 4c fe ff       	call   c0000898 <strcmp>
c001bb9f:	83 c4 10             	add    esp,0x10
c001bba2:	85 c0                	test   eax,eax
c001bba4:	74 b5                	je     c001bb5b <sysCallOpen(regs*)+0x78>
c001bba6:	83 ec 08             	sub    esp,0x8
c001bba9:	68 f1 b5 02 c0       	push   0xc002b5f1
c001bbae:	56                   	push   esi
c001bbaf:	e8 e7 fe ff ff       	call   c001ba9b <string_ends_with(char const*, char const*)>
c001bbb4:	83 c4 10             	add    esp,0x10
c001bbb7:	85 c0                	test   eax,eax
c001bbb9:	75 a0                	jne    c001bb5b <sysCallOpen(regs*)+0x78>
c001bbbb:	83 ec 08             	sub    esp,0x8
c001bbbe:	68 fb b5 02 c0       	push   0xc002b5fb
c001bbc3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bbc6:	e8 d0 fe ff ff       	call   c001ba9b <string_ends_with(char const*, char const*)>
c001bbcb:	83 c4 10             	add    esp,0x10
c001bbce:	85 c0                	test   eax,eax
c001bbd0:	0f 85 e7 00 00 00    	jne    c001bcbd <sysCallOpen(regs*)+0x1da>
c001bbd6:	83 ec 08             	sub    esp,0x8
c001bbd9:	68 00 b6 02 c0       	push   0xc002b600
c001bbde:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bbe1:	e8 b5 fe ff ff       	call   c001ba9b <string_ends_with(char const*, char const*)>
c001bbe6:	83 c4 10             	add    esp,0x10
c001bbe9:	85 c0                	test   eax,eax
c001bbeb:	0f 85 cc 00 00 00    	jne    c001bcbd <sysCallOpen(regs*)+0x1da>
c001bbf1:	83 ec 08             	sub    esp,0x8
c001bbf4:	68 fc b5 02 c0       	push   0xc002b5fc
c001bbf9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bbfc:	e8 97 4c fe ff       	call   c0000898 <strcmp>
c001bc01:	83 c4 10             	add    esp,0x10
c001bc04:	85 c0                	test   eax,eax
c001bc06:	0f 84 b1 00 00 00    	je     c001bcbd <sysCallOpen(regs*)+0x1da>
c001bc0c:	83 ec 08             	sub    esp,0x8
c001bc0f:	68 fb b5 02 c0       	push   0xc002b5fb
c001bc14:	56                   	push   esi
c001bc15:	e8 81 fe ff ff       	call   c001ba9b <string_ends_with(char const*, char const*)>
c001bc1a:	83 c4 10             	add    esp,0x10
c001bc1d:	85 c0                	test   eax,eax
c001bc1f:	0f 85 98 00 00 00    	jne    c001bcbd <sysCallOpen(regs*)+0x1da>
c001bc25:	83 ec 0c             	sub    esp,0xc
c001bc28:	68 14 01 00 00       	push   0x114
c001bc2d:	e8 67 39 ff ff       	call   c000f599 <malloc>
c001bc32:	83 c4 0c             	add    esp,0xc
c001bc35:	89 c6                	mov    esi,eax
c001bc37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc3c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc3f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc42:	56                   	push   esi
c001bc43:	e8 88 6e ff ff       	call   c0012ad0 <File::File(char const*, Process*)>
c001bc48:	83 c4 10             	add    esp,0x10
c001bc4b:	85 f6                	test   esi,esi
c001bc4d:	74 5b                	je     c001bcaa <sysCallOpen(regs*)+0x1c7>
c001bc4f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bc52:	0f b6 c2             	movzx  eax,dl
c001bc55:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001bc58:	89 d0                	mov    eax,edx
c001bc5a:	83 e0 01             	and    eax,0x1
c001bc5d:	f6 c2 02             	test   dl,0x2
c001bc60:	74 03                	je     c001bc65 <sysCallOpen(regs*)+0x182>
c001bc62:	83 c8 02             	or     eax,0x2
c001bc65:	f6 c2 04             	test   dl,0x4
c001bc68:	74 03                	je     c001bc6d <sysCallOpen(regs*)+0x18a>
c001bc6a:	83 c8 04             	or     eax,0x4
c001bc6d:	f6 c2 08             	test   dl,0x8
c001bc70:	74 03                	je     c001bc75 <sysCallOpen(regs*)+0x192>
c001bc72:	83 c8 0a             	or     eax,0xa
c001bc75:	83 e2 10             	and    edx,0x10
c001bc78:	74 03                	je     c001bc7d <sysCallOpen(regs*)+0x19a>
c001bc7a:	83 c8 12             	or     eax,0x12
c001bc7d:	83 ec 08             	sub    esp,0x8
c001bc80:	50                   	push   eax
c001bc81:	56                   	push   esi
c001bc82:	e8 ad 6e ff ff       	call   c0012b34 <File::open(FileOpenMode)>
c001bc87:	83 c4 10             	add    esp,0x10
c001bc8a:	85 c0                	test   eax,eax
c001bc8c:	75 1c                	jne    c001bcaa <sysCallOpen(regs*)+0x1c7>
c001bc8e:	83 ec 0c             	sub    esp,0xc
c001bc91:	56                   	push   esi
c001bc92:	e8 bb 50 ff ff       	call   c0010d52 <UnixFile::getFileDescriptor()>
c001bc97:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bc9a:	83 c4 10             	add    esp,0x10
c001bc9d:	89 02                	mov    DWORD PTR [edx],eax
c001bc9f:	c1 f8 1f             	sar    eax,0x1f
c001bca2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bca5:	e9 c1 fe ff ff       	jmp    c001bb6b <sysCallOpen(regs*)+0x88>
c001bcaa:	81 c4 04 01 00 00    	add    esp,0x104
c001bcb0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcb5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcba:	5b                   	pop    ebx
c001bcbb:	5e                   	pop    esi
c001bcbc:	c3                   	ret    
c001bcbd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bcc0:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001bcc6:	e9 99 fe ff ff       	jmp    c001bb64 <sysCallOpen(regs*)+0x81>

c001bccb <Sys::loadSyscalls()>:
c001bccb:	c7 05 c0 01 03 c0 38 af 01 c0 	mov    DWORD PTR ds:0xc00301c0,0xc001af38
c001bcd5:	c7 05 c4 01 03 c0 30 ab 01 c0 	mov    DWORD PTR ds:0xc00301c4,0xc001ab30
c001bcdf:	c7 05 c8 01 03 c0 1e ad 01 c0 	mov    DWORD PTR ds:0xc00301c8,0xc001ad1e
c001bce9:	c7 05 cc 01 03 c0 6e ae 01 c0 	mov    DWORD PTR ds:0xc00301cc,0xc001ae6e
c001bcf3:	c7 05 d0 01 03 c0 b6 ac 01 c0 	mov    DWORD PTR ds:0xc00301d0,0xc001acb6
c001bcfd:	c7 05 d4 01 03 c0 67 ab 01 c0 	mov    DWORD PTR ds:0xc00301d4,0xc001ab67
c001bd07:	c7 05 d8 01 03 c0 48 ab 01 c0 	mov    DWORD PTR ds:0xc00301d8,0xc001ab48
c001bd11:	c7 05 dc 01 03 c0 73 ad 01 c0 	mov    DWORD PTR ds:0xc00301dc,0xc001ad73
c001bd1b:	c7 05 e4 01 03 c0 01 b4 01 c0 	mov    DWORD PTR ds:0xc00301e4,0xc001b401
c001bd25:	c7 05 e0 01 03 c0 e3 ba 01 c0 	mov    DWORD PTR ds:0xc00301e0,0xc001bae3
c001bd2f:	c7 05 e8 01 03 c0 61 b4 01 c0 	mov    DWORD PTR ds:0xc00301e8,0xc001b461
c001bd39:	c7 05 ec 01 03 c0 44 b1 01 c0 	mov    DWORD PTR ds:0xc00301ec,0xc001b144
c001bd43:	c7 05 f0 01 03 c0 7e af 01 c0 	mov    DWORD PTR ds:0xc00301f0,0xc001af7e
c001bd4d:	c7 05 f4 01 03 c0 83 af 01 c0 	mov    DWORD PTR ds:0xc00301f4,0xc001af83
c001bd57:	c7 05 f8 01 03 c0 2a b5 01 c0 	mov    DWORD PTR ds:0xc00301f8,0xc001b52a
c001bd61:	c7 05 fc 01 03 c0 d6 b4 01 c0 	mov    DWORD PTR ds:0xc00301fc,0xc001b4d6
c001bd6b:	c7 05 00 02 03 c0 1d b2 01 c0 	mov    DWORD PTR ds:0xc0030200,0xc001b21d
c001bd75:	c7 05 04 02 03 c0 74 b2 01 c0 	mov    DWORD PTR ds:0xc0030204,0xc001b274
c001bd7f:	c7 05 08 02 03 c0 e0 b2 01 c0 	mov    DWORD PTR ds:0xc0030208,0xc001b2e0
c001bd89:	c7 05 0c 02 03 c0 88 af 01 c0 	mov    DWORD PTR ds:0xc003020c,0xc001af88
c001bd93:	c7 05 10 02 03 c0 9a b5 01 c0 	mov    DWORD PTR ds:0xc0030210,0xc001b59a
c001bd9d:	c7 05 14 02 03 c0 b4 b5 01 c0 	mov    DWORD PTR ds:0xc0030214,0xc001b5b4
c001bda7:	c7 05 18 02 03 c0 b4 b5 01 c0 	mov    DWORD PTR ds:0xc0030218,0xc001b5b4
c001bdb1:	c7 05 1c 02 03 c0 e9 b5 01 c0 	mov    DWORD PTR ds:0xc003021c,0xc001b5e9
c001bdbb:	c7 05 20 02 03 c0 4d b6 01 c0 	mov    DWORD PTR ds:0xc0030220,0xc001b64d
c001bdc5:	c7 05 24 02 03 c0 92 af 01 c0 	mov    DWORD PTR ds:0xc0030224,0xc001af92
c001bdcf:	c7 05 28 02 03 c0 b1 b6 01 c0 	mov    DWORD PTR ds:0xc0030228,0xc001b6b1
c001bdd9:	c7 05 2c 02 03 c0 01 b1 01 c0 	mov    DWORD PTR ds:0xc003022c,0xc001b101
c001bde3:	c7 05 30 02 03 c0 fd b6 01 c0 	mov    DWORD PTR ds:0xc0030230,0xc001b6fd
c001bded:	c7 05 34 02 03 c0 c3 b1 01 c0 	mov    DWORD PTR ds:0xc0030234,0xc001b1c3
c001bdf7:	c7 05 38 02 03 c0 80 b7 01 c0 	mov    DWORD PTR ds:0xc0030238,0xc001b780
c001be01:	c7 05 3c 02 03 c0 52 b3 01 c0 	mov    DWORD PTR ds:0xc003023c,0xc001b352
c001be0b:	c7 05 40 02 03 c0 a7 b7 01 c0 	mov    DWORD PTR ds:0xc0030240,0xc001b7a7
c001be15:	c7 05 44 02 03 c0 0f b8 01 c0 	mov    DWORD PTR ds:0xc0030244,0xc001b80f
c001be1f:	c7 05 48 02 03 c0 bc b8 01 c0 	mov    DWORD PTR ds:0xc0030248,0xc001b8bc
c001be29:	c7 05 4c 02 03 c0 a2 af 01 c0 	mov    DWORD PTR ds:0xc003024c,0xc001afa2
c001be33:	c7 05 50 02 03 c0 0c b0 01 c0 	mov    DWORD PTR ds:0xc0030250,0xc001b00c
c001be3d:	c7 05 54 02 03 c0 52 b0 01 c0 	mov    DWORD PTR ds:0xc0030254,0xc001b052
c001be47:	c7 05 58 02 03 c0 d0 b9 01 c0 	mov    DWORD PTR ds:0xc0030258,0xc001b9d0
c001be51:	c7 05 5c 02 03 c0 cf b5 01 c0 	mov    DWORD PTR ds:0xc003025c,0xc001b5cf
c001be5b:	c7 05 60 02 03 c0 a3 b0 01 c0 	mov    DWORD PTR ds:0xc0030260,0xc001b0a3
c001be65:	c7 05 64 02 03 c0 42 ba 01 c0 	mov    DWORD PTR ds:0xc0030264,0xc001ba42
c001be6f:	c7 05 68 02 03 c0 87 ba 01 c0 	mov    DWORD PTR ds:0xc0030268,0xc001ba87
c001be79:	c7 05 6c 02 03 c0 0e ac 01 c0 	mov    DWORD PTR ds:0xc003026c,0xc001ac0e
c001be83:	c7 05 70 02 03 c0 8f ad 01 c0 	mov    DWORD PTR ds:0xc0030270,0xc001ad8f
c001be8d:	c7 05 74 02 03 c0 24 ae 01 c0 	mov    DWORD PTR ds:0xc0030274,0xc001ae24
c001be97:	c7 05 78 02 03 c0 fa aa 01 c0 	mov    DWORD PTR ds:0xc0030278,0xc001aafa
c001bea1:	c7 05 7c 02 03 c0 d6 ae 01 c0 	mov    DWORD PTR ds:0xc003027c,0xc001aed6
c001beab:	c7 05 80 02 03 c0 73 ab 01 c0 	mov    DWORD PTR ds:0xc0030280,0xc001ab73
c001beb5:	c7 05 84 02 03 c0 8a ab 01 c0 	mov    DWORD PTR ds:0xc0030284,0xc001ab8a
c001bebf:	c3                   	ret    

c001bec0 <Sys::systemCall(regs*, void*)>:
c001bec0:	53                   	push   ebx
c001bec1:	83 ec 08             	sub    esp,0x8
c001bec4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bec8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001becb:	83 f8 7f             	cmp    eax,0x7f
c001bece:	77 16                	ja     c001bee6 <Sys::systemCall(regs*, void*)+0x26>
c001bed0:	8b 14 85 c0 01 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfe40]
c001bed7:	85 d2                	test   edx,edx
c001bed9:	74 0b                	je     c001bee6 <Sys::systemCall(regs*, void*)+0x26>
c001bedb:	83 ec 0c             	sub    esp,0xc
c001bede:	53                   	push   ebx
c001bedf:	ff d2                	call   edx
c001bee1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001bee4:	eb 0d                	jmp    c001bef3 <Sys::systemCall(regs*, void*)+0x33>
c001bee6:	52                   	push   edx
c001bee7:	52                   	push   edx
c001bee8:	50                   	push   eax
c001bee9:	68 05 b6 02 c0       	push   0xc002b605
c001beee:	e8 7e 66 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c001bef3:	83 c4 10             	add    esp,0x10
c001bef6:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001befb:	31 d2                	xor    edx,edx
c001befd:	83 c4 08             	add    esp,0x8
c001bf00:	5b                   	pop    ebx
c001bf01:	c3                   	ret    

c001bf02 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001bf02:	55                   	push   ebp
c001bf03:	57                   	push   edi
c001bf04:	56                   	push   esi
c001bf05:	53                   	push   ebx
c001bf06:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001bf0c:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001bf13:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001bf1a:	85 c0                	test   eax,eax
c001bf1c:	0f 95 c1             	setne  cl
c001bf1f:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001bf27:	0f 94 c2             	sete   dl
c001bf2a:	84 d1                	test   cl,dl
c001bf2c:	74 23                	je     c001bf51 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001bf2e:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001bf34:	74 1b                	je     c001bf51 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001bf36:	81 c3 00 10 00 00    	add    ebx,0x1000
c001bf3c:	89 da                	mov    edx,ebx
c001bf3e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001bf44:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001bf4a:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001bf51:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001bf58:	05 ff 0f 00 00       	add    eax,0xfff
c001bf5d:	83 ec 0c             	sub    esp,0xc
c001bf60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bf64:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001bf6a:	c1 e8 0c             	shr    eax,0xc
c001bf6d:	89 fe                	mov    esi,edi
c001bf6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bf73:	c1 ee 0c             	shr    esi,0xc
c001bf76:	6a 01                	push   0x1
c001bf78:	e8 20 52 ff ff       	call   c001119d <Virt::allocateKernelVirtualPages(int)>
c001bf7d:	89 c5                	mov    ebp,eax
c001bf7f:	58                   	pop    eax
c001bf80:	5a                   	pop    edx
c001bf81:	56                   	push   esi
c001bf82:	68 19 b6 02 c0       	push   0xc002b619
c001bf87:	e8 e5 65 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c001bf8c:	59                   	pop    ecx
c001bf8d:	58                   	pop    eax
c001bf8e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001bf92:	68 2b b6 02 c0       	push   0xc002b62b
c001bf97:	e8 d5 65 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c001bf9c:	83 c4 10             	add    esp,0x10
c001bf9f:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001bfa5:	0f 86 31 01 00 00    	jbe    c001c0dc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001bfab:	c1 e6 0c             	shl    esi,0xc
c001bfae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bfb1:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001bfb4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bfb8:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001bfbf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bfc2:	01 df                	add    edi,ebx
c001bfc4:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001bfc7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001bfcb:	0f 84 08 01 00 00    	je     c001c0d9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001bfd1:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001bfd7:	76 05                	jbe    c001bfde <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001bfd9:	bf 00 10 00 00       	mov    edi,0x1000
c001bfde:	83 ec 0c             	sub    esp,0xc
c001bfe1:	31 d2                	xor    edx,edx
c001bfe3:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001bfea:	8b 08                	mov    ecx,DWORD PTR [eax]
c001bfec:	8d 44 24 28          	lea    eax,[esp+0x28]
c001bff0:	50                   	push   eax
c001bff1:	8d 74 24 30          	lea    esi,[esp+0x30]
c001bff5:	56                   	push   esi
c001bff6:	52                   	push   edx
c001bff7:	57                   	push   edi
c001bff8:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001bfff:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c002:	83 c4 20             	add    esp,0x20
c001c005:	85 c0                	test   eax,eax
c001c007:	74 0a                	je     c001c013 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c009:	53                   	push   ebx
c001c00a:	53                   	push   ebx
c001c00b:	50                   	push   eax
c001c00c:	68 3d b6 02 c0       	push   0xc002b63d
c001c011:	eb 0f                	jmp    c001c022 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c013:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c017:	74 20                	je     c001c039 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c019:	51                   	push   ecx
c001c01a:	51                   	push   ecx
c001c01b:	6a 00                	push   0x0
c001c01d:	68 68 b6 02 c0       	push   0xc002b668
c001c022:	e8 4a 65 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c001c027:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c02a:	e8 b4 55 ff ff       	call   c00115e3 <Virt::freeKernelVirtualPages(unsigned long)>
c001c02f:	83 c4 10             	add    esp,0x10
c001c032:	31 c0                	xor    eax,eax
c001c034:	e9 68 01 00 00       	jmp    c001c1a1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c039:	fa                   	cli    
c001c03a:	ff 05 88 0b 03 c0    	inc    DWORD PTR ds:0xc0030b88
c001c040:	e8 f8 38 ff ff       	call   c000f93d <Phys::allocatePage()>
c001c045:	6a 07                	push   0x7
c001c047:	89 c7                	mov    edi,eax
c001c049:	55                   	push   ebp
c001c04a:	50                   	push   eax
c001c04b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c050:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c053:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c059:	e8 fc 58 ff ff       	call   c001195a <VAS::mapPage(unsigned long, unsigned long, int)>
c001c05e:	83 c4 0c             	add    esp,0xc
c001c061:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c068:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c06e:	6a 00                	push   0x0
c001c070:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c075:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c078:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c07e:	e8 31 57 ff ff       	call   c00117b4 <VAS::mapOtherVASIn(bool, VAS*)>
c001c083:	58                   	pop    eax
c001c084:	5a                   	pop    edx
c001c085:	68 07 0c 00 00       	push   0xc07
c001c08a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c08e:	57                   	push   edi
c001c08f:	89 ef                	mov    edi,ebp
c001c091:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c098:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c09e:	6a 00                	push   0x0
c001c0a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0a5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0a8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c0ae:	e8 63 5c ff ff       	call   c0011d16 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c0b3:	b9 00 10 00 00       	mov    ecx,0x1000
c001c0b8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c0ba:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c001c0bf:	83 c4 20             	add    esp,0x20
c001c0c2:	48                   	dec    eax
c001c0c3:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c001c0c8:	85 c0                	test   eax,eax
c001c0ca:	75 01                	jne    c001c0cd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c0cc:	fb                   	sti    
c001c0cd:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c0d4:	e9 df fe ff ff       	jmp    c001bfb8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c0d9:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c0dc:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c0e4:	0f 86 a9 00 00 00    	jbe    c001c193 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c0ea:	fa                   	cli    
c001c0eb:	ff 05 88 0b 03 c0    	inc    DWORD PTR ds:0xc0030b88
c001c0f1:	51                   	push   ecx
c001c0f2:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c0f9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c0ff:	6a 00                	push   0x0
c001c101:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c106:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c109:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c10f:	e8 a0 56 ff ff       	call   c00117b4 <VAS::mapOtherVASIn(bool, VAS*)>
c001c114:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c118:	c1 e6 0c             	shl    esi,0xc
c001c11b:	01 de                	add    esi,ebx
c001c11d:	83 c4 10             	add    esp,0x10
c001c120:	39 de                	cmp    esi,ebx
c001c122:	74 61                	je     c001c185 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c124:	e8 14 38 ff ff       	call   c000f93d <Phys::allocatePage()>
c001c129:	6a 07                	push   0x7
c001c12b:	89 c7                	mov    edi,eax
c001c12d:	55                   	push   ebp
c001c12e:	50                   	push   eax
c001c12f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c134:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c137:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c13d:	e8 18 58 ff ff       	call   c001195a <VAS::mapPage(unsigned long, unsigned long, int)>
c001c142:	58                   	pop    eax
c001c143:	5a                   	pop    edx
c001c144:	68 07 0c 00 00       	push   0xc07
c001c149:	53                   	push   ebx
c001c14a:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c150:	57                   	push   edi
c001c151:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c158:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c15e:	6a 00                	push   0x0
c001c160:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c165:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c168:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c16e:	e8 a3 5b ff ff       	call   c0011d16 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c173:	83 c4 1c             	add    esp,0x1c
c001c176:	68 00 10 00 00       	push   0x1000
c001c17b:	6a 00                	push   0x0
c001c17d:	55                   	push   ebp
c001c17e:	e8 cd 45 fe ff       	call   c0000750 <memset>
c001c183:	eb 98                	jmp    c001c11d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c185:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c001c18a:	48                   	dec    eax
c001c18b:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c001c190:	75 01                	jne    c001c193 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c192:	fb                   	sti    
c001c193:	83 ec 0c             	sub    esp,0xc
c001c196:	55                   	push   ebp
c001c197:	e8 47 54 ff ff       	call   c00115e3 <Virt::freeKernelVirtualPages(unsigned long)>
c001c19c:	83 c4 10             	add    esp,0x10
c001c19f:	b0 01                	mov    al,0x1
c001c1a1:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c1a7:	5b                   	pop    ebx
c001c1a8:	5e                   	pop    esi
c001c1a9:	5f                   	pop    edi
c001c1aa:	5d                   	pop    ebp
c001c1ab:	c3                   	ret    

c001c1ac <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c1ac:	55                   	push   ebp
c001c1ad:	57                   	push   edi
c001c1ae:	56                   	push   esi
c001c1af:	53                   	push   ebx
c001c1b0:	83 ec 48             	sub    esp,0x48
c001c1b3:	68 14 01 00 00       	push   0x114
c001c1b8:	e8 dc 33 ff ff       	call   c000f599 <malloc>
c001c1bd:	83 c4 0c             	add    esp,0xc
c001c1c0:	89 c6                	mov    esi,eax
c001c1c2:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c1c6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c1ca:	50                   	push   eax
c001c1cb:	e8 00 69 ff ff       	call   c0012ad0 <File::File(char const*, Process*)>
c001c1d0:	58                   	pop    eax
c001c1d1:	5a                   	pop    edx
c001c1d2:	6a 01                	push   0x1
c001c1d4:	56                   	push   esi
c001c1d5:	e8 5a 69 ff ff       	call   c0012b34 <File::open(FileOpenMode)>
c001c1da:	83 c4 10             	add    esp,0x10
c001c1dd:	85 c0                	test   eax,eax
c001c1df:	0f 85 47 01 00 00    	jne    c001c32c <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c1e5:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c1ed:	83 ec 0c             	sub    esp,0xc
c001c1f0:	6a 34                	push   0x34
c001c1f2:	e8 a2 33 ff ff       	call   c000f599 <malloc>
c001c1f7:	89 c3                	mov    ebx,eax
c001c1f9:	58                   	pop    eax
c001c1fa:	8b 06                	mov    eax,DWORD PTR [esi]
c001c1fc:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c200:	57                   	push   edi
c001c201:	53                   	push   ebx
c001c202:	6a 00                	push   0x0
c001c204:	6a 34                	push   0x34
c001c206:	56                   	push   esi
c001c207:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c20a:	83 c4 20             	add    esp,0x20
c001c20d:	85 c0                	test   eax,eax
c001c20f:	0f 85 17 01 00 00    	jne    c001c32c <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c215:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c21b:	0f 85 0b 01 00 00    	jne    c001c32c <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c221:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c224:	85 c0                	test   eax,eax
c001c226:	0f 84 00 01 00 00    	je     c001c32c <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c22c:	31 d2                	xor    edx,edx
c001c22e:	55                   	push   ebp
c001c22f:	52                   	push   edx
c001c230:	50                   	push   eax
c001c231:	56                   	push   esi
c001c232:	e8 bb 69 ff ff       	call   c0012bf2 <File::seek(unsigned long long)>
c001c237:	83 c4 10             	add    esp,0x10
c001c23a:	85 c0                	test   eax,eax
c001c23c:	0f 85 ea 00 00 00    	jne    c001c32c <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c242:	83 ec 0c             	sub    esp,0xc
c001c245:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c248:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c24c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c250:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c254:	0f af c2             	imul   eax,edx
c001c257:	50                   	push   eax
c001c258:	e8 3c 33 ff ff       	call   c000f599 <malloc>
c001c25d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c25f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c263:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c266:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c26a:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c26e:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c272:	0f af c2             	imul   eax,edx
c001c275:	99                   	cdq    
c001c276:	52                   	push   edx
c001c277:	50                   	push   eax
c001c278:	56                   	push   esi
c001c279:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c27c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c27f:	83 c4 20             	add    esp,0x20
c001c282:	85 c0                	test   eax,eax
c001c284:	0f 84 a2 00 00 00    	je     c001c32c <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c28a:	31 d2                	xor    edx,edx
c001c28c:	51                   	push   ecx
c001c28d:	52                   	push   edx
c001c28e:	50                   	push   eax
c001c28f:	56                   	push   esi
c001c290:	e8 5d 69 ff ff       	call   c0012bf2 <File::seek(unsigned long long)>
c001c295:	83 c4 10             	add    esp,0x10
c001c298:	85 c0                	test   eax,eax
c001c29a:	0f 85 8c 00 00 00    	jne    c001c32c <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c2a0:	83 ec 0c             	sub    esp,0xc
c001c2a3:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c2a7:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c2ab:	31 ed                	xor    ebp,ebp
c001c2ad:	0f af c2             	imul   eax,edx
c001c2b0:	50                   	push   eax
c001c2b1:	e8 e3 32 ff ff       	call   c000f599 <malloc>
c001c2b6:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c2b8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c2bc:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c2bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2c3:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c2c7:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c2cb:	0f af c2             	imul   eax,edx
c001c2ce:	99                   	cdq    
c001c2cf:	52                   	push   edx
c001c2d0:	50                   	push   eax
c001c2d1:	56                   	push   esi
c001c2d2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c2d5:	83 c4 20             	add    esp,0x20
c001c2d8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c2e0:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c2e4:	0f 86 80 00 00 00    	jbe    c001c36a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c2ea:	0f b7 fd             	movzx  edi,bp
c001c2ed:	c1 e7 05             	shl    edi,0x5
c001c2f0:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c2f4:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c2f7:	75 6b                	jne    c001c364 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c2f9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c2fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c300:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c303:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c307:	52                   	push   edx
c001c308:	31 d2                	xor    edx,edx
c001c30a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c30d:	52                   	push   edx
c001c30e:	50                   	push   eax
c001c30f:	56                   	push   esi
c001c310:	e8 dd 68 ff ff       	call   c0012bf2 <File::seek(unsigned long long)>
c001c315:	83 c4 10             	add    esp,0x10
c001c318:	85 c0                	test   eax,eax
c001c31a:	74 17                	je     c001c333 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c31c:	83 ec 0c             	sub    esp,0xc
c001c31f:	68 94 b6 02 c0       	push   0xc002b694
c001c324:	e8 48 62 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c001c329:	83 c4 10             	add    esp,0x10
c001c32c:	31 c0                	xor    eax,eax
c001c32e:	e9 87 00 00 00       	jmp    c001c3ba <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c333:	83 ec 0c             	sub    esp,0xc
c001c336:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c339:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c33c:	50                   	push   eax
c001c33d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c341:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c345:	56                   	push   esi
c001c346:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c34a:	e8 b3 fb ff ff       	call   c001bf02 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c34f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c353:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c357:	83 c4 20             	add    esp,0x20
c001c35a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c35e:	73 04                	jae    c001c364 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c360:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c364:	45                   	inc    ebp
c001c365:	e9 76 ff ff ff       	jmp    c001c2e0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c36a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c36e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c372:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c376:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c37c:	83 ec 0c             	sub    esp,0xc
c001c37f:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c385:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c38a:	05 00 10 00 00       	add    eax,0x1000
c001c38f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c396:	e8 0e 32 ff ff       	call   c000f5a9 <free>
c001c39b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c39e:	e8 06 32 ff ff       	call   c000f5a9 <free>
c001c3a3:	58                   	pop    eax
c001c3a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c3a8:	e8 fc 31 ff ff       	call   c000f5a9 <free>
c001c3ad:	89 34 24             	mov    DWORD PTR [esp],esi
c001c3b0:	e8 dd 67 ff ff       	call   c0012b92 <File::close()>
c001c3b5:	83 c4 10             	add    esp,0x10
c001c3b8:	b0 01                	mov    al,0x1
c001c3ba:	83 c4 3c             	add    esp,0x3c
c001c3bd:	5b                   	pop    ebx
c001c3be:	5e                   	pop    esi
c001c3bf:	5f                   	pop    edi
c001c3c0:	5d                   	pop    ebp
c001c3c1:	c3                   	ret    

c001c3c2 <Thr::runtimeReferenceHelper()>:
c001c3c2:	83 ec 18             	sub    esp,0x18
c001c3c5:	68 9c b6 02 c0       	push   0xc002b69c
c001c3ca:	e8 a2 61 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c001c3cf:	fa                   	cli    
c001c3d0:	83 c4 10             	add    esp,0x10
c001c3d3:	eb fe                	jmp    c001c3d3 <Thr::runtimeReferenceHelper()+0x11>

c001c3d5 <Thr::getAddressOfKernelSymbol(char const*)>:
c001c3d5:	57                   	push   edi
c001c3d6:	56                   	push   esi
c001c3d7:	53                   	push   ebx
c001c3d8:	31 db                	xor    ebx,ebx
c001c3da:	39 1d 60 0b 03 c0    	cmp    DWORD PTR ds:0xc0030b60,ebx
c001c3e0:	7e 3c                	jle    c001c41e <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c3e2:	8b 34 9d e0 0a 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcf520]
c001c3e9:	31 ff                	xor    edi,edi
c001c3eb:	39 3c 9d e0 09 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcf620],edi
c001c3f2:	7e 27                	jle    c001c41b <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c3f4:	50                   	push   eax
c001c3f5:	50                   	push   eax
c001c3f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c3fa:	8b 06                	mov    eax,DWORD PTR [esi]
c001c3fc:	03 04 9d 60 0a 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcf5a0]
c001c403:	50                   	push   eax
c001c404:	e8 8f 44 fe ff       	call   c0000898 <strcmp>
c001c409:	83 c4 10             	add    esp,0x10
c001c40c:	85 c0                	test   eax,eax
c001c40e:	75 05                	jne    c001c415 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c410:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c413:	eb 0b                	jmp    c001c420 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c415:	83 c6 10             	add    esi,0x10
c001c418:	47                   	inc    edi
c001c419:	eb d0                	jmp    c001c3eb <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c41b:	43                   	inc    ebx
c001c41c:	eb bc                	jmp    c001c3da <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c41e:	31 c0                	xor    eax,eax
c001c420:	5b                   	pop    ebx
c001c421:	5e                   	pop    esi
c001c422:	5f                   	pop    edi
c001c423:	c3                   	ret    

c001c424 <Thr::loadKernelSymbolTable(char const*)>:
c001c424:	55                   	push   ebp
c001c425:	57                   	push   edi
c001c426:	56                   	push   esi
c001c427:	53                   	push   ebx
c001c428:	83 ec 68             	sub    esp,0x68
c001c42b:	8b 35 b0 0b 03 c0    	mov    esi,DWORD PTR ds:0xc0030bb0
c001c431:	68 14 01 00 00       	push   0x114
c001c436:	e8 5e 31 ff ff       	call   c000f599 <malloc>
c001c43b:	83 c4 0c             	add    esp,0xc
c001c43e:	89 c3                	mov    ebx,eax
c001c440:	56                   	push   esi
c001c441:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c445:	50                   	push   eax
c001c446:	e8 85 66 ff ff       	call   c0012ad0 <File::File(char const*, Process*)>
c001c44b:	5e                   	pop    esi
c001c44c:	5f                   	pop    edi
c001c44d:	6a 01                	push   0x1
c001c44f:	53                   	push   ebx
c001c450:	e8 df 66 ff ff       	call   c0012b34 <File::open(FileOpenMode)>
c001c455:	83 c4 10             	add    esp,0x10
c001c458:	85 c0                	test   eax,eax
c001c45a:	74 0a                	je     c001c466 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c45c:	83 ec 0c             	sub    esp,0xc
c001c45f:	68 be b6 02 c0       	push   0xc002b6be
c001c464:	eb 34                	jmp    c001c49a <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c466:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c46e:	83 ec 0c             	sub    esp,0xc
c001c471:	6a 34                	push   0x34
c001c473:	e8 21 31 ff ff       	call   c000f599 <malloc>
c001c478:	59                   	pop    ecx
c001c479:	89 c7                	mov    edi,eax
c001c47b:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c47f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c481:	56                   	push   esi
c001c482:	57                   	push   edi
c001c483:	6a 00                	push   0x0
c001c485:	6a 34                	push   0x34
c001c487:	53                   	push   ebx
c001c488:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c48b:	83 c4 20             	add    esp,0x20
c001c48e:	85 c0                	test   eax,eax
c001c490:	74 17                	je     c001c4a9 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c492:	83 ec 0c             	sub    esp,0xc
c001c495:	68 d5 b6 02 c0       	push   0xc002b6d5
c001c49a:	e8 32 d8 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c001c49f:	83 c4 10             	add    esp,0x10
c001c4a2:	31 c0                	xor    eax,eax
c001c4a4:	e9 31 02 00 00       	jmp    c001c6da <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c4a9:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c4af:	75 e1                	jne    c001c492 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c4b1:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c4b4:	85 c0                	test   eax,eax
c001c4b6:	74 da                	je     c001c492 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c4b8:	52                   	push   edx
c001c4b9:	31 d2                	xor    edx,edx
c001c4bb:	52                   	push   edx
c001c4bc:	50                   	push   eax
c001c4bd:	53                   	push   ebx
c001c4be:	e8 2f 67 ff ff       	call   c0012bf2 <File::seek(unsigned long long)>
c001c4c3:	83 c4 10             	add    esp,0x10
c001c4c6:	85 c0                	test   eax,eax
c001c4c8:	75 c8                	jne    c001c492 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c4ca:	83 ec 0c             	sub    esp,0xc
c001c4cd:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c4d1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c4d5:	31 ed                	xor    ebp,ebp
c001c4d7:	0f af c2             	imul   eax,edx
c001c4da:	50                   	push   eax
c001c4db:	e8 b9 30 ff ff       	call   c000f599 <malloc>
c001c4e0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c4e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c4e6:	89 34 24             	mov    DWORD PTR [esp],esi
c001c4e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c4ed:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c4f1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c4f5:	0f af c2             	imul   eax,edx
c001c4f8:	99                   	cdq    
c001c4f9:	52                   	push   edx
c001c4fa:	50                   	push   eax
c001c4fb:	53                   	push   ebx
c001c4fc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c4ff:	83 c4 20             	add    esp,0x20
c001c502:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c50a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c512:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c51a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c522:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c526:	0f 86 aa 00 00 00    	jbe    c001c5d6 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001c52c:	0f b7 f5             	movzx  esi,bp
c001c52f:	6b f6 28             	imul   esi,esi,0x28
c001c532:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c536:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c539:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c53d:	50                   	push   eax
c001c53e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c542:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c546:	8b 16                	mov    edx,DWORD PTR [esi]
c001c548:	6b c0 28             	imul   eax,eax,0x28
c001c54b:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c54f:	89 d0                	mov    eax,edx
c001c551:	31 d2                	xor    edx,edx
c001c553:	52                   	push   edx
c001c554:	50                   	push   eax
c001c555:	53                   	push   ebx
c001c556:	e8 97 66 ff ff       	call   c0012bf2 <File::seek(unsigned long long)>
c001c55b:	83 c4 0c             	add    esp,0xc
c001c55e:	6a 20                	push   0x20
c001c560:	6a 00                	push   0x0
c001c562:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c566:	52                   	push   edx
c001c567:	e8 e4 41 fe ff       	call   c0000750 <memset>
c001c56c:	58                   	pop    eax
c001c56d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c56f:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c573:	51                   	push   ecx
c001c574:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c578:	52                   	push   edx
c001c579:	6a 00                	push   0x0
c001c57b:	6a 1f                	push   0x1f
c001c57d:	53                   	push   ebx
c001c57e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c581:	83 c4 18             	add    esp,0x18
c001c584:	68 ec b6 02 c0       	push   0xc002b6ec
c001c589:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c58d:	52                   	push   edx
c001c58e:	e8 05 43 fe ff       	call   c0000898 <strcmp>
c001c593:	83 c4 10             	add    esp,0x10
c001c596:	85 c0                	test   eax,eax
c001c598:	75 0f                	jne    c001c5a9 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001c59a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c59d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c5a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c5a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c5a9:	50                   	push   eax
c001c5aa:	50                   	push   eax
c001c5ab:	68 f4 b6 02 c0       	push   0xc002b6f4
c001c5b0:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c5b4:	50                   	push   eax
c001c5b5:	e8 de 42 fe ff       	call   c0000898 <strcmp>
c001c5ba:	83 c4 10             	add    esp,0x10
c001c5bd:	85 c0                	test   eax,eax
c001c5bf:	75 0f                	jne    c001c5d0 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001c5c1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c5c4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c5c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c5cc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c5d0:	45                   	inc    ebp
c001c5d1:	e9 4c ff ff ff       	jmp    c001c522 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001c5d6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c5db:	75 10                	jne    c001c5ed <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001c5dd:	83 ec 0c             	sub    esp,0xc
c001c5e0:	68 fc b6 02 c0       	push   0xc002b6fc
c001c5e5:	e8 e7 d6 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c001c5ea:	83 c4 10             	add    esp,0x10
c001c5ed:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c5f2:	75 10                	jne    c001c604 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001c5f4:	83 ec 0c             	sub    esp,0xc
c001c5f7:	68 fc b6 02 c0       	push   0xc002b6fc
c001c5fc:	e8 d0 d6 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c001c601:	83 c4 10             	add    esp,0x10
c001c604:	31 d2                	xor    edx,edx
c001c606:	50                   	push   eax
c001c607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c60b:	52                   	push   edx
c001c60c:	50                   	push   eax
c001c60d:	53                   	push   ebx
c001c60e:	e8 df 65 ff ff       	call   c0012bf2 <File::seek(unsigned long long)>
c001c613:	5a                   	pop    edx
c001c614:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c618:	e8 7c 2f ff ff       	call   c000f599 <malloc>
c001c61d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c621:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c625:	31 c9                	xor    ecx,ecx
c001c627:	5e                   	pop    esi
c001c628:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c62a:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c62e:	55                   	push   ebp
c001c62f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c633:	51                   	push   ecx
c001c634:	52                   	push   edx
c001c635:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c639:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c63d:	53                   	push   ebx
c001c63e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c641:	83 c4 14             	add    esp,0x14
c001c644:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c648:	e8 4c 2f ff ff       	call   c000f599 <malloc>
c001c64d:	89 c6                	mov    esi,eax
c001c64f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c651:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c654:	56                   	push   esi
c001c655:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c659:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c65d:	51                   	push   ecx
c001c65e:	52                   	push   edx
c001c65f:	53                   	push   ebx
c001c660:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c663:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c667:	8b 15 60 0b 03 c0    	mov    edx,DWORD PTR ds:0xc0030b60
c001c66d:	83 c4 1c             	add    esp,0x1c
c001c670:	c1 e8 04             	shr    eax,0x4
c001c673:	89 04 95 e0 09 03 c0 	mov    DWORD PTR [edx*4-0x3ffcf620],eax
c001c67a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c67e:	31 d2                	xor    edx,edx
c001c680:	52                   	push   edx
c001c681:	50                   	push   eax
c001c682:	53                   	push   ebx
c001c683:	e8 6a 65 ff ff       	call   c0012bf2 <File::seek(unsigned long long)>
c001c688:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c68a:	31 d2                	xor    edx,edx
c001c68c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c68f:	56                   	push   esi
c001c690:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c694:	52                   	push   edx
c001c695:	50                   	push   eax
c001c696:	53                   	push   ebx
c001c697:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c69a:	83 c4 14             	add    esp,0x14
c001c69d:	53                   	push   ebx
c001c69e:	e8 ef 64 ff ff       	call   c0012b92 <File::close()>
c001c6a3:	5d                   	pop    ebp
c001c6a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c6a8:	e8 fc 2e ff ff       	call   c000f5a9 <free>
c001c6ad:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c6b0:	e8 f4 2e ff ff       	call   c000f5a9 <free>
c001c6b5:	a1 60 0b 03 c0       	mov    eax,ds:0xc0030b60
c001c6ba:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c6be:	8d 50 01             	lea    edx,[eax+0x1]
c001c6c1:	89 0c 85 e0 0a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf520],ecx
c001c6c8:	89 34 85 60 0a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf5a0],esi
c001c6cf:	89 15 60 0b 03 c0    	mov    DWORD PTR ds:0xc0030b60,edx
c001c6d5:	83 c4 10             	add    esp,0x10
c001c6d8:	b0 01                	mov    al,0x1
c001c6da:	83 c4 5c             	add    esp,0x5c
c001c6dd:	5b                   	pop    ebx
c001c6de:	5e                   	pop    esi
c001c6df:	5f                   	pop    edi
c001c6e0:	5d                   	pop    ebp
c001c6e1:	c3                   	ret    

c001c6e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c6e2:	55                   	push   ebp
c001c6e3:	57                   	push   edi
c001c6e4:	56                   	push   esi
c001c6e5:	53                   	push   ebx
c001c6e6:	81 ec 68 03 00 00    	sub    esp,0x368
c001c6ec:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c6f3:	8b 1d b0 0b 03 c0    	mov    ebx,DWORD PTR ds:0xc0030bb0
c001c6f9:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c6fd:	68 14 01 00 00       	push   0x114
c001c702:	e8 92 2e ff ff       	call   c000f599 <malloc>
c001c707:	83 c4 0c             	add    esp,0xc
c001c70a:	89 c5                	mov    ebp,eax
c001c70c:	53                   	push   ebx
c001c70d:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c714:	50                   	push   eax
c001c715:	e8 b6 63 ff ff       	call   c0012ad0 <File::File(char const*, Process*)>
c001c71a:	5e                   	pop    esi
c001c71b:	5f                   	pop    edi
c001c71c:	6a 01                	push   0x1
c001c71e:	55                   	push   ebp
c001c71f:	e8 10 64 ff ff       	call   c0012b34 <File::open(FileOpenMode)>
c001c724:	83 c4 10             	add    esp,0x10
c001c727:	85 c0                	test   eax,eax
c001c729:	0f 85 a7 06 00 00    	jne    c001cdd6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c72f:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c737:	83 ec 0c             	sub    esp,0xc
c001c73a:	6a 34                	push   0x34
c001c73c:	e8 58 2e ff ff       	call   c000f599 <malloc>
c001c741:	5b                   	pop    ebx
c001c742:	89 c7                	mov    edi,eax
c001c744:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c748:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c74b:	53                   	push   ebx
c001c74c:	57                   	push   edi
c001c74d:	6a 00                	push   0x0
c001c74f:	6a 34                	push   0x34
c001c751:	55                   	push   ebp
c001c752:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c755:	83 c4 20             	add    esp,0x20
c001c758:	85 c0                	test   eax,eax
c001c75a:	0f 85 76 06 00 00    	jne    c001cdd6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c760:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c766:	0f 85 6a 06 00 00    	jne    c001cdd6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c76c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c76f:	85 c0                	test   eax,eax
c001c771:	0f 84 5f 06 00 00    	je     c001cdd6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c777:	31 d2                	xor    edx,edx
c001c779:	51                   	push   ecx
c001c77a:	52                   	push   edx
c001c77b:	50                   	push   eax
c001c77c:	55                   	push   ebp
c001c77d:	e8 70 64 ff ff       	call   c0012bf2 <File::seek(unsigned long long)>
c001c782:	83 c4 10             	add    esp,0x10
c001c785:	85 c0                	test   eax,eax
c001c787:	0f 85 49 06 00 00    	jne    c001cdd6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c78d:	83 ec 0c             	sub    esp,0xc
c001c790:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c793:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c797:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c79b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c79f:	0f af c2             	imul   eax,edx
c001c7a2:	50                   	push   eax
c001c7a3:	e8 f1 2d ff ff       	call   c000f599 <malloc>
c001c7a8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c7ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c7af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c7b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c7b6:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c7ba:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c7be:	0f af c2             	imul   eax,edx
c001c7c1:	99                   	cdq    
c001c7c2:	52                   	push   edx
c001c7c3:	50                   	push   eax
c001c7c4:	55                   	push   ebp
c001c7c5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c7c8:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c7cb:	83 c4 20             	add    esp,0x20
c001c7ce:	85 c0                	test   eax,eax
c001c7d0:	0f 84 00 06 00 00    	je     c001cdd6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c7d6:	52                   	push   edx
c001c7d7:	31 d2                	xor    edx,edx
c001c7d9:	52                   	push   edx
c001c7da:	50                   	push   eax
c001c7db:	55                   	push   ebp
c001c7dc:	e8 11 64 ff ff       	call   c0012bf2 <File::seek(unsigned long long)>
c001c7e1:	83 c4 10             	add    esp,0x10
c001c7e4:	85 c0                	test   eax,eax
c001c7e6:	0f 85 ea 05 00 00    	jne    c001cdd6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c7ec:	83 ec 0c             	sub    esp,0xc
c001c7ef:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c7f3:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c7f7:	31 f6                	xor    esi,esi
c001c7f9:	0f af c2             	imul   eax,edx
c001c7fc:	50                   	push   eax
c001c7fd:	e8 97 2d ff ff       	call   c000f599 <malloc>
c001c802:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c805:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c809:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c80c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c810:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c814:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c818:	0f af c2             	imul   eax,edx
c001c81b:	99                   	cdq    
c001c81c:	52                   	push   edx
c001c81d:	50                   	push   eax
c001c81e:	55                   	push   ebp
c001c81f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c822:	83 c4 20             	add    esp,0x20
c001c825:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c829:	0f 86 8a 00 00 00    	jbe    c001c8b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c82f:	0f b7 de             	movzx  ebx,si
c001c832:	c1 e3 05             	shl    ebx,0x5
c001c835:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001c839:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c83c:	75 75                	jne    c001c8b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c83e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c841:	31 d2                	xor    edx,edx
c001c843:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c847:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c84a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c84e:	50                   	push   eax
c001c84f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c852:	52                   	push   edx
c001c853:	50                   	push   eax
c001c854:	55                   	push   ebp
c001c855:	e8 98 63 ff ff       	call   c0012bf2 <File::seek(unsigned long long)>
c001c85a:	83 c4 10             	add    esp,0x10
c001c85d:	85 c0                	test   eax,eax
c001c85f:	0f 85 71 05 00 00    	jne    c001cdd6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c865:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c86c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c86f:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001c873:	31 d2                	xor    edx,edx
c001c875:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c879:	83 ec 0c             	sub    esp,0xc
c001c87c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c880:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c887:	50                   	push   eax
c001c888:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c88c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c890:	52                   	push   edx
c001c891:	50                   	push   eax
c001c892:	55                   	push   ebp
c001c893:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c896:	83 c4 1c             	add    esp,0x1c
c001c899:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c89c:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001c89f:	50                   	push   eax
c001c8a0:	6a 00                	push   0x0
c001c8a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8a6:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001c8aa:	50                   	push   eax
c001c8ab:	e8 a0 3e fe ff       	call   c0000750 <memset>
c001c8b0:	83 c4 10             	add    esp,0x10
c001c8b3:	46                   	inc    esi
c001c8b4:	e9 6c ff ff ff       	jmp    c001c825 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001c8b9:	53                   	push   ebx
c001c8ba:	31 db                	xor    ebx,ebx
c001c8bc:	68 00 01 00 00       	push   0x100
c001c8c1:	6a 00                	push   0x0
c001c8c3:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c8c7:	50                   	push   eax
c001c8c8:	e8 83 3e fe ff       	call   c0000750 <memset>
c001c8cd:	83 c4 0c             	add    esp,0xc
c001c8d0:	68 00 01 00 00       	push   0x100
c001c8d5:	6a 00                	push   0x0
c001c8d7:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001c8de:	50                   	push   eax
c001c8df:	e8 6c 3e fe ff       	call   c0000750 <memset>
c001c8e4:	83 c4 10             	add    esp,0x10
c001c8e7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c8ef:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c8f7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001c8ff:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c907:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001c90f:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001c913:	0f 86 30 01 00 00    	jbe    c001ca49 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001c919:	0f b7 f3             	movzx  esi,bx
c001c91c:	6b f6 28             	imul   esi,esi,0x28
c001c91f:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c923:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c926:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c92a:	52                   	push   edx
c001c92b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c92f:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001c933:	8b 06                	mov    eax,DWORD PTR [esi]
c001c935:	6b d2 28             	imul   edx,edx,0x28
c001c938:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001c93c:	31 d2                	xor    edx,edx
c001c93e:	52                   	push   edx
c001c93f:	50                   	push   eax
c001c940:	55                   	push   ebp
c001c941:	e8 ac 62 ff ff       	call   c0012bf2 <File::seek(unsigned long long)>
c001c946:	83 c4 0c             	add    esp,0xc
c001c949:	6a 20                	push   0x20
c001c94b:	6a 00                	push   0x0
c001c94d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c954:	51                   	push   ecx
c001c955:	e8 f6 3d fe ff       	call   c0000750 <memset>
c001c95a:	59                   	pop    ecx
c001c95b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c95e:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c962:	52                   	push   edx
c001c963:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001c96a:	51                   	push   ecx
c001c96b:	6a 00                	push   0x0
c001c96d:	6a 1f                	push   0x1f
c001c96f:	55                   	push   ebp
c001c970:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c973:	83 c4 1c             	add    esp,0x1c
c001c976:	6a 09                	push   0x9
c001c978:	68 16 b7 02 c0       	push   0xc002b716
c001c97d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c984:	51                   	push   ecx
c001c985:	e8 c2 3c fe ff       	call   c000064c <memcmp>
c001c98a:	83 c4 10             	add    esp,0x10
c001c98d:	85 c0                	test   eax,eax
c001c98f:	75 21                	jne    c001c9b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001c991:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c995:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c999:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c99d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c9a1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c9a4:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001c9ab:	89 d0                	mov    eax,edx
c001c9ad:	40                   	inc    eax
c001c9ae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c9b2:	50                   	push   eax
c001c9b3:	6a 09                	push   0x9
c001c9b5:	68 20 b7 02 c0       	push   0xc002b720
c001c9ba:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c9c1:	50                   	push   eax
c001c9c2:	e8 85 3c fe ff       	call   c000064c <memcmp>
c001c9c7:	83 c4 10             	add    esp,0x10
c001c9ca:	85 c0                	test   eax,eax
c001c9cc:	75 21                	jne    c001c9ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001c9ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c9d6:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c9da:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c9de:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c9e1:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001c9e8:	89 d0                	mov    eax,edx
c001c9ea:	40                   	inc    eax
c001c9eb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c9ef:	50                   	push   eax
c001c9f0:	50                   	push   eax
c001c9f1:	68 ec b6 02 c0       	push   0xc002b6ec
c001c9f6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c9fd:	50                   	push   eax
c001c9fe:	e8 95 3e fe ff       	call   c0000898 <strcmp>
c001ca03:	83 c4 10             	add    esp,0x10
c001ca06:	85 c0                	test   eax,eax
c001ca08:	75 0f                	jne    c001ca19 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001ca0a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ca0d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ca11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca15:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ca19:	50                   	push   eax
c001ca1a:	50                   	push   eax
c001ca1b:	68 f4 b6 02 c0       	push   0xc002b6f4
c001ca20:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ca27:	50                   	push   eax
c001ca28:	e8 6b 3e fe ff       	call   c0000898 <strcmp>
c001ca2d:	83 c4 10             	add    esp,0x10
c001ca30:	85 c0                	test   eax,eax
c001ca32:	75 0f                	jne    c001ca43 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001ca34:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ca37:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ca3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca3f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ca43:	43                   	inc    ebx
c001ca44:	e9 c6 fe ff ff       	jmp    c001c90f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001ca49:	31 d2                	xor    edx,edx
c001ca4b:	50                   	push   eax
c001ca4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ca50:	52                   	push   edx
c001ca51:	50                   	push   eax
c001ca52:	55                   	push   ebp
c001ca53:	e8 9a 61 ff ff       	call   c0012bf2 <File::seek(unsigned long long)>
c001ca58:	58                   	pop    eax
c001ca59:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ca5d:	e8 37 2b ff ff       	call   c000f599 <malloc>
c001ca62:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ca65:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001ca69:	31 d2                	xor    edx,edx
c001ca6b:	58                   	pop    eax
c001ca6c:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001ca70:	53                   	push   ebx
c001ca71:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ca75:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ca79:	52                   	push   edx
c001ca7a:	50                   	push   eax
c001ca7b:	55                   	push   ebp
c001ca7c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca7f:	83 c4 14             	add    esp,0x14
c001ca82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca86:	e8 0e 2b ff ff       	call   c000f599 <malloc>
c001ca8b:	31 d2                	xor    edx,edx
c001ca8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ca91:	83 c4 0c             	add    esp,0xc
c001ca94:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ca98:	52                   	push   edx
c001ca99:	50                   	push   eax
c001ca9a:	55                   	push   ebp
c001ca9b:	e8 52 61 ff ff       	call   c0012bf2 <File::seek(unsigned long long)>
c001caa0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001caa3:	31 d2                	xor    edx,edx
c001caa5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001caa8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001caac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cab0:	52                   	push   edx
c001cab1:	50                   	push   eax
c001cab2:	55                   	push   ebp
c001cab3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cab6:	83 c4 20             	add    esp,0x20
c001cab9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cac1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cac5:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001cac9:	0f 84 0b 03 00 00    	je     c001cdda <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001cacf:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001cad6:	31 d2                	xor    edx,edx
c001cad8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cadc:	c1 e8 03             	shr    eax,0x3
c001cadf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001cae3:	51                   	push   ecx
c001cae4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cae8:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001caec:	52                   	push   edx
c001caed:	50                   	push   eax
c001caee:	55                   	push   ebp
c001caef:	e8 fe 60 ff ff       	call   c0012bf2 <File::seek(unsigned long long)>
c001caf4:	5b                   	pop    ebx
c001caf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001caf9:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001cb00:	e8 94 2a ff ff       	call   c000f599 <malloc>
c001cb05:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cb08:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb0c:	31 d2                	xor    edx,edx
c001cb0e:	5e                   	pop    esi
c001cb0f:	8d 44 24 58          	lea    eax,[esp+0x58]
c001cb13:	50                   	push   eax
c001cb14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb18:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cb1c:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001cb23:	52                   	push   edx
c001cb24:	50                   	push   eax
c001cb25:	55                   	push   ebp
c001cb26:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb29:	83 c4 20             	add    esp,0x20
c001cb2c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cb34:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001cb38:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001cb3c:	0f 8d 7c 02 00 00    	jge    c001cdbe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001cb42:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cb46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb4a:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001cb4f:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001cb52:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001cb56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb5a:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001cb5e:	89 d8                	mov    eax,ebx
c001cb60:	c1 e8 08             	shr    eax,0x8
c001cb63:	89 c6                	mov    esi,eax
c001cb65:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cb69:	c1 e6 04             	shl    esi,0x4
c001cb6c:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001cb70:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001cb73:	85 d2                	test   edx,edx
c001cb75:	0f 85 bf 00 00 00    	jne    c001cc3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cb7b:	83 ec 0c             	sub    esp,0xc
c001cb7e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cb82:	03 06                	add    eax,DWORD PTR [esi]
c001cb84:	50                   	push   eax
c001cb85:	e8 4b f8 ff ff       	call   c001c3d5 <Thr::getAddressOfKernelSymbol(char const*)>
c001cb8a:	83 c4 10             	add    esp,0x10
c001cb8d:	89 c2                	mov    edx,eax
c001cb8f:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001cb94:	85 c0                	test   eax,eax
c001cb96:	0f 85 9e 00 00 00    	jne    c001cc3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cb9c:	83 ec 0c             	sub    esp,0xc
c001cb9f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cba3:	03 06                	add    eax,DWORD PTR [esi]
c001cba5:	50                   	push   eax
c001cba6:	e8 94 19 ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001cbab:	83 c4 10             	add    esp,0x10
c001cbae:	89 c2                	mov    edx,eax
c001cbb0:	85 c0                	test   eax,eax
c001cbb2:	0f 85 82 00 00 00    	jne    c001cc3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cbb8:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001cbbc:	50                   	push   eax
c001cbbd:	50                   	push   eax
c001cbbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cbc2:	03 06                	add    eax,DWORD PTR [esi]
c001cbc4:	50                   	push   eax
c001cbc5:	68 2a b7 02 c0       	push   0xc002b72a
c001cbca:	e8 a2 59 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c001cbcf:	58                   	pop    eax
c001cbd0:	5a                   	pop    edx
c001cbd1:	68 44 b7 02 c0       	push   0xc002b744
c001cbd6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cbdd:	50                   	push   eax
c001cbde:	e8 29 3c fe ff       	call   c000080c <strcpy>
c001cbe3:	59                   	pop    ecx
c001cbe4:	58                   	pop    eax
c001cbe5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cbe9:	03 06                	add    eax,DWORD PTR [esi]
c001cbeb:	50                   	push   eax
c001cbec:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cbf3:	50                   	push   eax
c001cbf4:	e8 53 3d fe ff       	call   c000094c <strcat>
c001cbf9:	58                   	pop    eax
c001cbfa:	5a                   	pop    edx
c001cbfb:	68 da b7 02 c0       	push   0xc002b7da
c001cc00:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cc07:	50                   	push   eax
c001cc08:	e8 3f 3d fe ff       	call   c000094c <strcat>
c001cc0d:	83 c4 10             	add    esp,0x10
c001cc10:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cc15:	0f 84 5d 01 00 00    	je     c001cd78 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cc1b:	83 ec 0c             	sub    esp,0xc
c001cc1e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cc25:	50                   	push   eax
c001cc26:	e8 a6 d0 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c001cc2b:	83 c4 10             	add    esp,0x10
c001cc2e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001cc32:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cc36:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001cc3a:	80 fb 01             	cmp    bl,0x1
c001cc3d:	0f 85 88 00 00 00    	jne    c001cccb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001cc43:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001cc4a:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cc4e:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001cc52:	01 ce                	add    esi,ecx
c001cc54:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cc5a:	0f 94 c0             	sete   al
c001cc5d:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cc63:	0f 94 c3             	sete   bl
c001cc66:	09 c3                	or     ebx,eax
c001cc68:	8b 06                	mov    eax,DWORD PTR [esi]
c001cc6a:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cc6f:	74 41                	je     c001ccb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001cc71:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001cc74:	84 db                	test   bl,bl
c001cc76:	75 15                	jne    c001cc8d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001cc78:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cc7c:	66 83 f8 0c          	cmp    ax,0xc
c001cc80:	76 05                	jbe    c001cc87 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001cc82:	b8 0c 00 00 00       	mov    eax,0xc
c001cc87:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cc8b:	76 37                	jbe    c001ccc4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cc8d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001cc91:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cc96:	0f 84 dc 00 00 00    	je     c001cd78 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cc9c:	83 ec 0c             	sub    esp,0xc
c001cc9f:	68 5b b7 02 c0       	push   0xc002b75b
c001cca4:	e8 28 d0 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c001cca9:	83 c4 10             	add    esp,0x10
c001ccac:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ccb0:	eb 12                	jmp    c001ccc4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ccb2:	01 c1                	add    ecx,eax
c001ccb4:	84 db                	test   bl,bl
c001ccb6:	75 0c                	jne    c001ccc4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ccb8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ccbc:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001ccc0:	77 02                	ja     c001ccc4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ccc2:	01 d1                	add    ecx,edx
c001ccc4:	89 0e                	mov    DWORD PTR [esi],ecx
c001ccc6:	e9 ea 00 00 00       	jmp    c001cdb5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cccb:	80 fb 02             	cmp    bl,0x2
c001ccce:	75 7c                	jne    c001cd4c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001ccd0:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001ccd7:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001ccdb:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001ccdf:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cce5:	74 20                	je     c001cd07 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001cce7:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cced:	74 18                	je     c001cd07 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001ccef:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ccf3:	b9 0a 00 00 00       	mov    ecx,0xa
c001ccf8:	66 83 f8 0e          	cmp    ax,0xe
c001ccfc:	77 03                	ja     c001cd01 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001ccfe:	8d 48 fc             	lea    ecx,[eax-0x4]
c001cd01:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001cd05:	76 1f                	jbe    c001cd26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001cd07:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001cd0b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cd10:	74 66                	je     c001cd78 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cd12:	83 ec 0c             	sub    esp,0xc
c001cd15:	68 77 b7 02 c0       	push   0xc002b777
c001cd1a:	e8 b2 cf ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c001cd1f:	83 c4 10             	add    esp,0x10
c001cd22:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cd26:	8b 06                	mov    eax,DWORD PTR [esi]
c001cd28:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cd2d:	74 13                	je     c001cd42 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001cd2f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001cd33:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001cd3a:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001cd3e:	01 c8                	add    eax,ecx
c001cd40:	eb 04                	jmp    c001cd46 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001cd42:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001cd46:	01 c2                	add    edx,eax
c001cd48:	89 16                	mov    DWORD PTR [esi],edx
c001cd4a:	eb 69                	jmp    c001cdb5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cd4c:	0f b6 db             	movzx  ebx,bl
c001cd4f:	50                   	push   eax
c001cd50:	50                   	push   eax
c001cd51:	53                   	push   ebx
c001cd52:	68 93 b7 02 c0       	push   0xc002b793
c001cd57:	e8 15 58 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c001cd5c:	83 c4 10             	add    esp,0x10
c001cd5f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cd64:	74 12                	je     c001cd78 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cd66:	83 ec 0c             	sub    esp,0xc
c001cd69:	68 9e b7 02 c0       	push   0xc002b79e
c001cd6e:	e8 5e cf ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c001cd73:	83 c4 10             	add    esp,0x10
c001cd76:	eb 3d                	jmp    c001cdb5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cd78:	83 ec 0c             	sub    esp,0xc
c001cd7b:	55                   	push   ebp
c001cd7c:	e8 11 5e ff ff       	call   c0012b92 <File::close()>
c001cd81:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cd84:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cd87:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cd8a:	59                   	pop    ecx
c001cd8b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd8f:	e8 15 28 ff ff       	call   c000f5a9 <free>
c001cd94:	5b                   	pop    ebx
c001cd95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cd99:	e8 0b 28 ff ff       	call   c000f5a9 <free>
c001cd9e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cda1:	e8 03 28 ff ff       	call   c000f5a9 <free>
c001cda6:	5e                   	pop    esi
c001cda7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdab:	e8 f9 27 ff ff       	call   c000f5a9 <free>
c001cdb0:	83 c4 10             	add    esp,0x10
c001cdb3:	eb 21                	jmp    c001cdd6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cdb5:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001cdb9:	e9 76 fd ff ff       	jmp    c001cb34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001cdbe:	83 ec 0c             	sub    esp,0xc
c001cdc1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cdc5:	e8 df 27 ff ff       	call   c000f5a9 <free>
c001cdca:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001cdce:	83 c4 10             	add    esp,0x10
c001cdd1:	e9 eb fc ff ff       	jmp    c001cac1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001cdd6:	31 c0                	xor    eax,eax
c001cdd8:	eb 33                	jmp    c001ce0d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001cdda:	83 ec 0c             	sub    esp,0xc
c001cddd:	55                   	push   ebp
c001cdde:	e8 af 5d ff ff       	call   c0012b92 <File::close()>
c001cde3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cde6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cde9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cdec:	58                   	pop    eax
c001cded:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cdf1:	e8 b3 27 ff ff       	call   c000f5a9 <free>
c001cdf6:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cdf9:	e8 ab 27 ff ff       	call   c000f5a9 <free>
c001cdfe:	5a                   	pop    edx
c001cdff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce03:	e8 a1 27 ff ff       	call   c000f5a9 <free>
c001ce08:	83 c4 10             	add    esp,0x10
c001ce0b:	b0 01                	mov    al,0x1
c001ce0d:	81 c4 5c 03 00 00    	add    esp,0x35c
c001ce13:	5b                   	pop    ebx
c001ce14:	5e                   	pop    esi
c001ce15:	5f                   	pop    edi
c001ce16:	5d                   	pop    ebp
c001ce17:	c3                   	ret    

c001ce18 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001ce18:	56                   	push   esi
c001ce19:	31 d2                	xor    edx,edx
c001ce1b:	53                   	push   ebx
c001ce1c:	8b 1d c0 03 03 c0    	mov    ebx,DWORD PTR ds:0xc00303c0
c001ce22:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ce26:	39 d3                	cmp    ebx,edx
c001ce28:	7e 1b                	jle    c001ce45 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001ce2a:	8b 04 95 e0 05 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcfa20]
c001ce31:	39 c8                	cmp    eax,ecx
c001ce33:	77 0d                	ja     c001ce42 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001ce35:	8b 34 95 e0 03 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcfc20]
c001ce3c:	01 c6                	add    esi,eax
c001ce3e:	39 ce                	cmp    esi,ecx
c001ce40:	77 05                	ja     c001ce47 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001ce42:	42                   	inc    edx
c001ce43:	eb e1                	jmp    c001ce26 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001ce45:	31 c0                	xor    eax,eax
c001ce47:	5b                   	pop    ebx
c001ce48:	5e                   	pop    esi
c001ce49:	c3                   	ret    

c001ce4a <Thr::getDriverNameFromAddress(unsigned long)>:
c001ce4a:	53                   	push   ebx
c001ce4b:	31 c0                	xor    eax,eax
c001ce4d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ce51:	8b 1d c0 03 03 c0    	mov    ebx,DWORD PTR ds:0xc00303c0
c001ce57:	39 c3                	cmp    ebx,eax
c001ce59:	7e 22                	jle    c001ce7d <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001ce5b:	8b 14 85 e0 05 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfa20]
c001ce62:	39 ca                	cmp    edx,ecx
c001ce64:	77 14                	ja     c001ce7a <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001ce66:	03 14 85 e0 03 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcfc20]
c001ce6d:	39 ca                	cmp    edx,ecx
c001ce6f:	76 09                	jbe    c001ce7a <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001ce71:	8b 04 85 e0 07 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf820]
c001ce78:	eb 05                	jmp    c001ce7f <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001ce7a:	40                   	inc    eax
c001ce7b:	eb da                	jmp    c001ce57 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001ce7d:	31 c0                	xor    eax,eax
c001ce7f:	5b                   	pop    ebx
c001ce80:	c3                   	ret    

c001ce81 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001ce81:	53                   	push   ebx
c001ce82:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001ce86:	53                   	push   ebx
c001ce87:	e8 8c ff ff ff       	call   c001ce18 <Thr::getDriverBaseFromAddress(unsigned long)>
c001ce8c:	5a                   	pop    edx
c001ce8d:	31 d2                	xor    edx,edx
c001ce8f:	85 c0                	test   eax,eax
c001ce91:	74 04                	je     c001ce97 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001ce93:	89 da                	mov    edx,ebx
c001ce95:	29 c2                	sub    edx,eax
c001ce97:	89 d0                	mov    eax,edx
c001ce99:	5b                   	pop    ebx
c001ce9a:	c3                   	ret    

c001ce9b <Thr::loadDLL(char const*, bool)>:
c001ce9b:	55                   	push   ebp
c001ce9c:	57                   	push   edi
c001ce9d:	56                   	push   esi
c001ce9e:	53                   	push   ebx
c001ce9f:	81 ec 34 01 00 00    	sub    esp,0x134
c001cea5:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001ceac:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001ceb3:	56                   	push   esi
c001ceb4:	68 b6 b7 02 c0       	push   0xc002b7b6
c001ceb9:	e8 b3 56 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c001cebe:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001cec5:	e8 cf 26 ff ff       	call   c000f599 <malloc>
c001ceca:	83 c4 0c             	add    esp,0xc
c001cecd:	89 c3                	mov    ebx,eax
c001cecf:	ff 35 b0 0b 03 c0    	push   DWORD PTR ds:0xc0030bb0
c001ced5:	56                   	push   esi
c001ced6:	50                   	push   eax
c001ced7:	e8 f4 5b ff ff       	call   c0012ad0 <File::File(char const*, Process*)>
c001cedc:	83 c4 10             	add    esp,0x10
c001cedf:	85 db                	test   ebx,ebx
c001cee1:	75 3c                	jne    c001cf1f <Thr::loadDLL(char const*, bool)+0x84>
c001cee3:	89 f8                	mov    eax,edi
c001cee5:	84 c0                	test   al,al
c001cee7:	0f 84 cc 01 00 00    	je     c001d0b9 <Thr::loadDLL(char const*, bool)+0x21e>
c001ceed:	55                   	push   ebp
c001ceee:	55                   	push   ebp
c001ceef:	68 c7 b7 02 c0       	push   0xc002b7c7
c001cef4:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001cef8:	55                   	push   ebp
c001cef9:	e8 0e 39 fe ff       	call   c000080c <strcpy>
c001cefe:	58                   	pop    eax
c001ceff:	5a                   	pop    edx
c001cf00:	56                   	push   esi
c001cf01:	55                   	push   ebp
c001cf02:	e8 45 3a fe ff       	call   c000094c <strcat>
c001cf07:	59                   	pop    ecx
c001cf08:	58                   	pop    eax
c001cf09:	68 da b7 02 c0       	push   0xc002b7da
c001cf0e:	55                   	push   ebp
c001cf0f:	e8 38 3a fe ff       	call   c000094c <strcat>
c001cf14:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf17:	e8 b5 cd ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c001cf1c:	83 c4 10             	add    esp,0x10
c001cf1f:	51                   	push   ecx
c001cf20:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001cf24:	50                   	push   eax
c001cf25:	8d 44 24 20          	lea    eax,[esp+0x20]
c001cf29:	50                   	push   eax
c001cf2a:	53                   	push   ebx
c001cf2b:	e8 b0 5e ff ff       	call   c0012de0 <File::stat(unsigned long long*, bool*)>
c001cf30:	83 c4 10             	add    esp,0x10
c001cf33:	85 db                	test   ebx,ebx
c001cf35:	74 0c                	je     c001cf43 <Thr::loadDLL(char const*, bool)+0xa8>
c001cf37:	83 ec 0c             	sub    esp,0xc
c001cf3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf3c:	53                   	push   ebx
c001cf3d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cf40:	83 c4 10             	add    esp,0x10
c001cf43:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001cf48:	75 0a                	jne    c001cf54 <Thr::loadDLL(char const*, bool)+0xb9>
c001cf4a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cf4e:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001cf52:	75 3c                	jne    c001cf90 <Thr::loadDLL(char const*, bool)+0xf5>
c001cf54:	89 f8                	mov    eax,edi
c001cf56:	84 c0                	test   al,al
c001cf58:	0f 84 43 01 00 00    	je     c001d0a1 <Thr::loadDLL(char const*, bool)+0x206>
c001cf5e:	51                   	push   ecx
c001cf5f:	51                   	push   ecx
c001cf60:	68 c7 b7 02 c0       	push   0xc002b7c7
c001cf65:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001cf69:	53                   	push   ebx
c001cf6a:	e8 9d 38 fe ff       	call   c000080c <strcpy>
c001cf6f:	5d                   	pop    ebp
c001cf70:	58                   	pop    eax
c001cf71:	56                   	push   esi
c001cf72:	53                   	push   ebx
c001cf73:	e8 d4 39 fe ff       	call   c000094c <strcat>
c001cf78:	58                   	pop    eax
c001cf79:	5a                   	pop    edx
c001cf7a:	68 da b7 02 c0       	push   0xc002b7da
c001cf7f:	53                   	push   ebx
c001cf80:	e8 c7 39 fe ff       	call   c000094c <strcat>
c001cf85:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cf88:	e8 44 cd ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c001cf8d:	83 c4 10             	add    esp,0x10
c001cf90:	52                   	push   edx
c001cf91:	6a 03                	push   0x3
c001cf93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf97:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001cf9b:	05 ff 0f 00 00       	add    eax,0xfff
c001cfa0:	83 d2 00             	adc    edx,0x0
c001cfa3:	0f ac d0 0c          	shrd   eax,edx,0xc
c001cfa7:	50                   	push   eax
c001cfa8:	ff 35 d0 d7 02 c0    	push   DWORD PTR ds:0xc002d7d0
c001cfae:	e8 a9 4a ff ff       	call   c0011a5c <VAS::allocatePages(int, int)>
c001cfb3:	59                   	pop    ecx
c001cfb4:	89 c3                	mov    ebx,eax
c001cfb6:	5d                   	pop    ebp
c001cfb7:	50                   	push   eax
c001cfb8:	68 a2 9e 02 c0       	push   0xc0029ea2
c001cfbd:	e8 af 55 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c001cfc2:	89 34 24             	mov    DWORD PTR [esp],esi
c001cfc5:	e8 a2 37 fe ff       	call   c000076c <strlen>
c001cfca:	8b 2d c0 03 03 c0    	mov    ebp,DWORD PTR ds:0xc00303c0
c001cfd0:	40                   	inc    eax
c001cfd1:	89 04 24             	mov    DWORD PTR [esp],eax
c001cfd4:	e8 c0 25 ff ff       	call   c000f599 <malloc>
c001cfd9:	89 04 ad e0 07 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcf820],eax
c001cfe0:	58                   	pop    eax
c001cfe1:	a1 c0 03 03 c0       	mov    eax,ds:0xc00303c0
c001cfe6:	5a                   	pop    edx
c001cfe7:	56                   	push   esi
c001cfe8:	ff 34 85 e0 07 03 c0 	push   DWORD PTR [eax*4-0x3ffcf820]
c001cfef:	e8 18 38 fe ff       	call   c000080c <strcpy>
c001cff4:	a1 c0 03 03 c0       	mov    eax,ds:0xc00303c0
c001cff9:	8d 50 01             	lea    edx,[eax+0x1]
c001cffc:	89 1c 85 e0 05 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfa20],ebx
c001d003:	89 15 c0 03 03 c0    	mov    DWORD PTR ds:0xc00303c0,edx
c001d009:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d00d:	83 c4 0c             	add    esp,0xc
c001d010:	89 14 85 e0 03 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfc20],edx
c001d017:	6a 01                	push   0x1
c001d019:	53                   	push   ebx
c001d01a:	56                   	push   esi
c001d01b:	e8 c2 f6 ff ff       	call   c001c6e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d020:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d024:	83 c4 10             	add    esp,0x10
c001d027:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d02c:	0f 85 83 00 00 00    	jne    c001d0b5 <Thr::loadDLL(char const*, bool)+0x21a>
c001d032:	89 f8                	mov    eax,edi
c001d034:	84 c0                	test   al,al
c001d036:	74 6d                	je     c001d0a5 <Thr::loadDLL(char const*, bool)+0x20a>
c001d038:	83 ec 0c             	sub    esp,0xc
c001d03b:	68 dc b7 02 c0       	push   0xc002b7dc
c001d040:	e8 8c cc ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c001d045:	83 c4 10             	add    esp,0x10
c001d048:	eb 5b                	jmp    c001d0a5 <Thr::loadDLL(char const*, bool)+0x20a>
c001d04a:	89 ee                	mov    esi,ebp
c001d04c:	50                   	push   eax
c001d04d:	c1 e6 0c             	shl    esi,0xc
c001d050:	50                   	push   eax
c001d051:	01 de                	add    esi,ebx
c001d053:	56                   	push   esi
c001d054:	ff 35 d0 d7 02 c0    	push   DWORD PTR ds:0xc002d7d0
c001d05a:	e8 65 45 ff ff       	call   c00115c4 <VAS::getPageTableEntry(unsigned long)>
c001d05f:	83 c4 10             	add    esp,0x10
c001d062:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d065:	75 0c                	jne    c001d073 <Thr::loadDLL(char const*, bool)+0x1d8>
c001d067:	83 ec 0c             	sub    esp,0xc
c001d06a:	56                   	push   esi
c001d06b:	e8 72 28 ff ff       	call   c000f8e2 <Phys::freePage(unsigned long)>
c001d070:	83 c4 10             	add    esp,0x10
c001d073:	45                   	inc    ebp
c001d074:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d078:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d07c:	05 ff 0f 00 00       	add    eax,0xfff
c001d081:	bf 00 00 00 00       	mov    edi,0x0
c001d086:	83 d2 00             	adc    edx,0x0
c001d089:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d08d:	c1 ea 0c             	shr    edx,0xc
c001d090:	39 c5                	cmp    ebp,eax
c001d092:	89 d1                	mov    ecx,edx
c001d094:	89 f8                	mov    eax,edi
c001d096:	19 c8                	sbb    eax,ecx
c001d098:	72 b0                	jb     c001d04a <Thr::loadDLL(char const*, bool)+0x1af>
c001d09a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d09f:	75 18                	jne    c001d0b9 <Thr::loadDLL(char const*, bool)+0x21e>
c001d0a1:	31 db                	xor    ebx,ebx
c001d0a3:	eb 14                	jmp    c001d0b9 <Thr::loadDLL(char const*, bool)+0x21e>
c001d0a5:	83 ec 0c             	sub    esp,0xc
c001d0a8:	68 fb b7 02 c0       	push   0xc002b7fb
c001d0ad:	e8 1f cc ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c001d0b2:	83 c4 10             	add    esp,0x10
c001d0b5:	31 ed                	xor    ebp,ebp
c001d0b7:	eb bb                	jmp    c001d074 <Thr::loadDLL(char const*, bool)+0x1d9>
c001d0b9:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d0bf:	89 d8                	mov    eax,ebx
c001d0c1:	5b                   	pop    ebx
c001d0c2:	5e                   	pop    esi
c001d0c3:	5f                   	pop    edi
c001d0c4:	5d                   	pop    ebp
c001d0c5:	c3                   	ret    

c001d0c6 <Thr::executeDLL(unsigned long, void*)>:
c001d0c6:	56                   	push   esi
c001d0c7:	53                   	push   ebx
c001d0c8:	52                   	push   edx
c001d0c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d0cd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d0d1:	85 db                	test   ebx,ebx
c001d0d3:	75 10                	jne    c001d0e5 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d0d5:	83 ec 0c             	sub    esp,0xc
c001d0d8:	68 17 b8 02 c0       	push   0xc002b817
c001d0dd:	e8 ef cb ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c001d0e2:	83 c4 10             	add    esp,0x10
c001d0e5:	50                   	push   eax
c001d0e6:	50                   	push   eax
c001d0e7:	53                   	push   ebx
c001d0e8:	68 41 b8 02 c0       	push   0xc002b841
c001d0ed:	e8 7f 54 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c001d0f2:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d0f6:	89 d8                	mov    eax,ebx
c001d0f8:	83 c4 14             	add    esp,0x14
c001d0fb:	5b                   	pop    ebx
c001d0fc:	5e                   	pop    esi
c001d0fd:	ff e0                	jmp    eax
c001d0ff:	90                   	nop

c001d100 <userModeEntryPoint(void*)>:
c001d100:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c001d105:	48                   	dec    eax
c001d106:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c001d10b:	75 01                	jne    c001d10e <userModeEntryPoint(void*)+0xe>
c001d10d:	fb                   	sti    
c001d10e:	fb                   	sti    
c001d10f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d114:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d117:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d11d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d121:	e9 04 32 fe ff       	jmp    c000032a <goToUsermode>

c001d126 <changeTSS>:
c001d126:	83 ec 14             	sub    esp,0x14
c001d129:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d12e:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d131:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d136:	c1 e2 15             	shl    edx,0x15
c001d139:	29 d0                	sub    eax,edx
c001d13b:	50                   	push   eax
c001d13c:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c001d141:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d147:	05 7c 11 00 00       	add    eax,0x117c
c001d14c:	50                   	push   eax
c001d14d:	e8 a0 39 ff ff       	call   c0010af2 <TSS::setESP(unsigned long)>
c001d152:	83 c4 1c             	add    esp,0x1c
c001d155:	c3                   	ret    

c001d156 <switchToThread(ThreadControlBlock*)>:
c001d156:	57                   	push   edi
c001d157:	a1 84 0b 03 c0       	mov    eax,ds:0xc0030b84
c001d15c:	56                   	push   esi
c001d15d:	85 c0                	test   eax,eax
c001d15f:	53                   	push   ebx
c001d160:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d164:	0f 85 88 00 00 00    	jne    c001d1f2 <switchToThread(ThreadControlBlock*)+0x9c>
c001d16a:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d16d:	3c ff                	cmp    al,0xff
c001d16f:	74 7d                	je     c001d1ee <switchToThread(ThreadControlBlock*)+0x98>
c001d171:	0f b6 d0             	movzx  edx,al
c001d174:	b8 84 03 00 00       	mov    eax,0x384
c001d179:	29 d0                	sub    eax,edx
c001d17b:	c1 e0 10             	shl    eax,0x10
c001d17e:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d181:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d184:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c001d189:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d18f:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d196:	74 4a                	je     c001d1e2 <switchToThread(ThreadControlBlock*)+0x8c>
c001d198:	0f 31                	rdtsc  
c001d19a:	a3 c8 0b 03 c0       	mov    ds:0xc0030bc8,eax
c001d19f:	89 c6                	mov    esi,eax
c001d1a1:	89 d7                	mov    edi,edx
c001d1a3:	2b 35 b8 0b 03 c0    	sub    esi,DWORD PTR ds:0xc0030bb8
c001d1a9:	89 15 cc 0b 03 c0    	mov    DWORD PTR ds:0xc0030bcc,edx
c001d1af:	1b 3d bc 0b 03 c0    	sbb    edi,DWORD PTR ds:0xc0030bbc
c001d1b5:	89 35 c0 0b 03 c0    	mov    DWORD PTR ds:0xc0030bc0,esi
c001d1bb:	a3 b8 0b 03 c0       	mov    ds:0xc0030bb8,eax
c001d1c0:	89 3d c4 0b 03 c0    	mov    DWORD PTR ds:0xc0030bc4,edi
c001d1c6:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d1cc:	89 15 bc 0b 03 c0    	mov    DWORD PTR ds:0xc0030bbc,edx
c001d1d2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d1d5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d1d8:	01 c6                	add    esi,eax
c001d1da:	11 d7                	adc    edi,edx
c001d1dc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d1df:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d1e2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d1e6:	5b                   	pop    ebx
c001d1e7:	5e                   	pop    esi
c001d1e8:	5f                   	pop    edi
c001d1e9:	e9 74 31 fe ff       	jmp    c0000362 <switchToThreadASM>
c001d1ee:	31 c0                	xor    eax,eax
c001d1f0:	eb 8f                	jmp    c001d181 <switchToThread(ThreadControlBlock*)+0x2b>
c001d1f2:	5b                   	pop    ebx
c001d1f3:	c7 05 80 0b 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030b80,0x1
c001d1fd:	5e                   	pop    esi
c001d1fe:	5f                   	pop    edi
c001d1ff:	c3                   	ret    

c001d200 <Process::addArgs(char**)>:
c001d200:	57                   	push   edi
c001d201:	56                   	push   esi
c001d202:	53                   	push   ebx
c001d203:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d207:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d20b:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d215:	85 ff                	test   edi,edi
c001d217:	74 3d                	je     c001d256 <Process::addArgs(char**)+0x56>
c001d219:	8b 07                	mov    eax,DWORD PTR [edi]
c001d21b:	85 c0                	test   eax,eax
c001d21d:	74 37                	je     c001d256 <Process::addArgs(char**)+0x56>
c001d21f:	31 db                	xor    ebx,ebx
c001d221:	83 ec 0c             	sub    esp,0xc
c001d224:	50                   	push   eax
c001d225:	e8 42 35 fe ff       	call   c000076c <strlen>
c001d22a:	40                   	inc    eax
c001d22b:	89 04 24             	mov    DWORD PTR [esp],eax
c001d22e:	e8 66 23 ff ff       	call   c000f599 <malloc>
c001d233:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d23a:	5a                   	pop    edx
c001d23b:	59                   	pop    ecx
c001d23c:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d23f:	43                   	inc    ebx
c001d240:	50                   	push   eax
c001d241:	e8 c6 35 fe ff       	call   c000080c <strcpy>
c001d246:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d24c:	83 c4 10             	add    esp,0x10
c001d24f:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d252:	85 c0                	test   eax,eax
c001d254:	75 cb                	jne    c001d221 <Process::addArgs(char**)+0x21>
c001d256:	5b                   	pop    ebx
c001d257:	5e                   	pop    esi
c001d258:	5f                   	pop    edi
c001d259:	c3                   	ret    

c001d25a <Process::Process(char const*, Process*, char**)>:
c001d25a:	56                   	push   esi
c001d25b:	53                   	push   ebx
c001d25c:	83 ec 14             	sub    esp,0x14
c001d25f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d263:	05 0c 02 00 00       	add    eax,0x20c
c001d268:	bb 07 00 00 00       	mov    ebx,0x7
c001d26d:	89 c6                	mov    esi,eax
c001d26f:	85 db                	test   ebx,ebx
c001d271:	78 12                	js     c001d285 <Process::Process(char const*, Process*, char**)+0x2b>
c001d273:	83 ec 0c             	sub    esp,0xc
c001d276:	56                   	push   esi
c001d277:	e8 9a b6 00 00       	call   c0028916 <ThreadControlBlock::ThreadControlBlock()>
c001d27c:	83 c4 10             	add    esp,0x10
c001d27f:	83 c6 63             	add    esi,0x63
c001d282:	4b                   	dec    ebx
c001d283:	eb ea                	jmp    c001d26f <Process::Process(char const*, Process*, char**)+0x15>
c001d285:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d289:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d290:	83 ec 0c             	sub    esp,0xc
c001d293:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d297:	e8 be c8 ff ff       	call   c0019b5a <Krnl::newProcessEnv(Process*)>
c001d29c:	83 c4 10             	add    esp,0x10
c001d29f:	89 c2                	mov    edx,eax
c001d2a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2a5:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d2ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2af:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d2b8:	a1 f0 cb 02 c0       	mov    eax,ds:0xc002cbf0
c001d2bd:	8d 50 01             	lea    edx,[eax+0x1]
c001d2c0:	89 15 f0 cb 02 c0    	mov    DWORD PTR ds:0xc002cbf0,edx
c001d2c6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d2ca:	89 02                	mov    DWORD PTR [edx],eax
c001d2cc:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d2d4:	83 ec 0c             	sub    esp,0xc
c001d2d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d2db:	e8 b9 22 ff ff       	call   c000f599 <malloc>
c001d2e0:	83 c4 10             	add    esp,0x10
c001d2e3:	89 c3                	mov    ebx,eax
c001d2e5:	83 ec 08             	sub    esp,0x8
c001d2e8:	6a 00                	push   0x0
c001d2ea:	53                   	push   ebx
c001d2eb:	e8 14 4b ff ff       	call   c0011e04 <VAS::VAS(bool)>
c001d2f0:	83 c4 10             	add    esp,0x10
c001d2f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2f7:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d2fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d301:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d30b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d30f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d313:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d319:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d31d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d323:	85 c0                	test   eax,eax
c001d325:	74 42                	je     c001d369 <Process::Process(char const*, Process*, char**)+0x10f>
c001d327:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d32b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d331:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d337:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d33b:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d341:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d345:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d34b:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d351:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d355:	05 0c 01 00 00       	add    eax,0x10c
c001d35a:	83 ec 08             	sub    esp,0x8
c001d35d:	52                   	push   edx
c001d35e:	50                   	push   eax
c001d35f:	e8 a8 34 fe ff       	call   c000080c <strcpy>
c001d364:	83 c4 10             	add    esp,0x10
c001d367:	eb 63                	jmp    c001d3cc <Process::Process(char const*, Process*, char**)+0x172>
c001d369:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001d371:	83 ec 0c             	sub    esp,0xc
c001d374:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d378:	e8 1c 22 ff ff       	call   c000f599 <malloc>
c001d37d:	83 c4 10             	add    esp,0x10
c001d380:	89 c3                	mov    ebx,eax
c001d382:	83 ec 08             	sub    esp,0x8
c001d385:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d389:	53                   	push   ebx
c001d38a:	e8 77 34 ff ff       	call   c0010806 <VgaText::VgaText(char const*)>
c001d38f:	83 c4 10             	add    esp,0x10
c001d392:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d396:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d39c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3a0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d3a6:	83 ec 0c             	sub    esp,0xc
c001d3a9:	50                   	push   eax
c001d3aa:	e8 16 2c ff ff       	call   c000ffc5 <addToTerminalCycle(VgaText*)>
c001d3af:	83 c4 10             	add    esp,0x10
c001d3b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3b6:	05 0c 01 00 00       	add    eax,0x10c
c001d3bb:	83 ec 08             	sub    esp,0x8
c001d3be:	68 60 b8 02 c0       	push   0xc002b860
c001d3c3:	50                   	push   eax
c001d3c4:	e8 43 34 fe ff       	call   c000080c <strcpy>
c001d3c9:	83 c4 10             	add    esp,0x10
c001d3cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3d0:	83 c0 0c             	add    eax,0xc
c001d3d3:	83 ec 08             	sub    esp,0x8
c001d3d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d3da:	50                   	push   eax
c001d3db:	e8 2c 34 fe ff       	call   c000080c <strcpy>
c001d3e0:	83 c4 10             	add    esp,0x10
c001d3e3:	83 ec 08             	sub    esp,0x8
c001d3e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d3ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d3ee:	e8 0d fe ff ff       	call   c001d200 <Process::addArgs(char**)>
c001d3f3:	83 c4 10             	add    esp,0x10
c001d3f6:	83 ec 08             	sub    esp,0x8
c001d3f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d3fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d401:	e8 a6 ed ff ff       	call   c001c1ac <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d406:	83 c4 10             	add    esp,0x10
c001d409:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d40d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d411:	83 f0 01             	xor    eax,0x1
c001d414:	88 c2                	mov    dl,al
c001d416:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d41a:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d420:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d425:	83 ec 08             	sub    esp,0x8
c001d428:	50                   	push   eax
c001d429:	68 b8 b8 02 c0       	push   0xc002b8b8
c001d42e:	e8 3e 51 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c001d433:	83 c4 10             	add    esp,0x10
c001d436:	90                   	nop
c001d437:	83 c4 14             	add    esp,0x14
c001d43a:	5b                   	pop    ebx
c001d43b:	5e                   	pop    esi
c001d43c:	c3                   	ret    
c001d43d:	90                   	nop

c001d43e <Process::Process(bool, char const*, Process*, char**)>:
c001d43e:	56                   	push   esi
c001d43f:	53                   	push   ebx
c001d440:	83 ec 24             	sub    esp,0x24
c001d443:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d447:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d44b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d44f:	05 0c 02 00 00       	add    eax,0x20c
c001d454:	bb 07 00 00 00       	mov    ebx,0x7
c001d459:	89 c6                	mov    esi,eax
c001d45b:	85 db                	test   ebx,ebx
c001d45d:	78 12                	js     c001d471 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d45f:	83 ec 0c             	sub    esp,0xc
c001d462:	56                   	push   esi
c001d463:	e8 ae b4 00 00       	call   c0028916 <ThreadControlBlock::ThreadControlBlock()>
c001d468:	83 c4 10             	add    esp,0x10
c001d46b:	83 c6 63             	add    esi,0x63
c001d46e:	4b                   	dec    ebx
c001d46f:	eb ea                	jmp    c001d45b <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d471:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d475:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d47c:	83 ec 0c             	sub    esp,0xc
c001d47f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d483:	e8 d2 c6 ff ff       	call   c0019b5a <Krnl::newProcessEnv(Process*)>
c001d488:	83 c4 10             	add    esp,0x10
c001d48b:	89 c2                	mov    edx,eax
c001d48d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d491:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d497:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d49b:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d4a4:	a1 f0 cb 02 c0       	mov    eax,ds:0xc002cbf0
c001d4a9:	8d 50 01             	lea    edx,[eax+0x1]
c001d4ac:	89 15 f0 cb 02 c0    	mov    DWORD PTR ds:0xc002cbf0,edx
c001d4b2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d4b6:	89 02                	mov    DWORD PTR [edx],eax
c001d4b8:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001d4c0:	83 ec 0c             	sub    esp,0xc
c001d4c3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d4c7:	e8 cd 20 ff ff       	call   c000f599 <malloc>
c001d4cc:	83 c4 10             	add    esp,0x10
c001d4cf:	89 c3                	mov    ebx,eax
c001d4d1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d4d6:	83 ec 08             	sub    esp,0x8
c001d4d9:	50                   	push   eax
c001d4da:	53                   	push   ebx
c001d4db:	e8 24 49 ff ff       	call   c0011e04 <VAS::VAS(bool)>
c001d4e0:	83 c4 10             	add    esp,0x10
c001d4e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d4e7:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d4ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d4f1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d4fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d4ff:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d503:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d509:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d50d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d513:	85 c0                	test   eax,eax
c001d515:	74 42                	je     c001d559 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d517:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d51b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d521:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d527:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d52b:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d531:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d535:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d53b:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d541:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d545:	05 0c 01 00 00       	add    eax,0x10c
c001d54a:	83 ec 08             	sub    esp,0x8
c001d54d:	52                   	push   edx
c001d54e:	50                   	push   eax
c001d54f:	e8 b8 32 fe ff       	call   c000080c <strcpy>
c001d554:	83 c4 10             	add    esp,0x10
c001d557:	eb 63                	jmp    c001d5bc <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d559:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001d561:	83 ec 0c             	sub    esp,0xc
c001d564:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d568:	e8 2c 20 ff ff       	call   c000f599 <malloc>
c001d56d:	83 c4 10             	add    esp,0x10
c001d570:	89 c3                	mov    ebx,eax
c001d572:	83 ec 08             	sub    esp,0x8
c001d575:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d579:	53                   	push   ebx
c001d57a:	e8 87 32 ff ff       	call   c0010806 <VgaText::VgaText(char const*)>
c001d57f:	83 c4 10             	add    esp,0x10
c001d582:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d586:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d58c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d590:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d596:	83 ec 0c             	sub    esp,0xc
c001d599:	50                   	push   eax
c001d59a:	e8 26 2a ff ff       	call   c000ffc5 <addToTerminalCycle(VgaText*)>
c001d59f:	83 c4 10             	add    esp,0x10
c001d5a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5a6:	05 0c 01 00 00       	add    eax,0x10c
c001d5ab:	83 ec 08             	sub    esp,0x8
c001d5ae:	68 60 b8 02 c0       	push   0xc002b860
c001d5b3:	50                   	push   eax
c001d5b4:	e8 53 32 fe ff       	call   c000080c <strcpy>
c001d5b9:	83 c4 10             	add    esp,0x10
c001d5bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5c0:	83 c0 0c             	add    eax,0xc
c001d5c3:	83 ec 08             	sub    esp,0x8
c001d5c6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d5ca:	50                   	push   eax
c001d5cb:	e8 3c 32 fe ff       	call   c000080c <strcpy>
c001d5d0:	83 c4 10             	add    esp,0x10
c001d5d3:	83 ec 08             	sub    esp,0x8
c001d5d6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d5da:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d5de:	e8 1d fc ff ff       	call   c001d200 <Process::addArgs(char**)>
c001d5e3:	83 c4 10             	add    esp,0x10
c001d5e6:	90                   	nop
c001d5e7:	83 c4 24             	add    esp,0x24
c001d5ea:	5b                   	pop    ebx
c001d5eb:	5e                   	pop    esi
c001d5ec:	c3                   	ret    

c001d5ed <taskStartupFunction>:
c001d5ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d5f2:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d5f5:	c3                   	ret    

c001d5f6 <Semaphore::Semaphore(int)>:
c001d5f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d5fe:	89 10                	mov    DWORD PTR [eax],edx
c001d600:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d604:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d60b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d60f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d616:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d61a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d621:	90                   	nop
c001d622:	c3                   	ret    
c001d623:	90                   	nop

c001d624 <Mutex::Mutex()>:
c001d624:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d628:	6a 01                	push   0x1
c001d62a:	50                   	push   eax
c001d62b:	e8 c6 ff ff ff       	call   c001d5f6 <Semaphore::Semaphore(int)>
c001d630:	83 c4 08             	add    esp,0x8
c001d633:	90                   	nop
c001d634:	c3                   	ret    
c001d635:	90                   	nop

c001d636 <Process::createThread(void (*)(void*), void*, int)>:
c001d636:	55                   	push   ebp
c001d637:	31 c9                	xor    ecx,ecx
c001d639:	57                   	push   edi
c001d63a:	56                   	push   esi
c001d63b:	53                   	push   ebx
c001d63c:	83 ec 1c             	sub    esp,0x1c
c001d63f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d643:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d64a:	89 f2                	mov    edx,esi
c001d64c:	0f b7 c2             	movzx  eax,dx
c001d64f:	83 e2 01             	and    edx,0x1
c001d652:	74 16                	je     c001d66a <Process::createThread(void (*)(void*), void*, int)+0x34>
c001d654:	d1 f8                	sar    eax,1
c001d656:	41                   	inc    ecx
c001d657:	89 c2                	mov    edx,eax
c001d659:	83 f9 10             	cmp    ecx,0x10
c001d65c:	75 ee                	jne    c001d64c <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d65e:	83 c4 1c             	add    esp,0x1c
c001d661:	31 db                	xor    ebx,ebx
c001d663:	89 d8                	mov    eax,ebx
c001d665:	5b                   	pop    ebx
c001d666:	5e                   	pop    esi
c001d667:	5f                   	pop    edi
c001d668:	5d                   	pop    ebp
c001d669:	c3                   	ret    
c001d66a:	b8 01 00 00 00       	mov    eax,0x1
c001d66f:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d672:	d3 e0                	shl    eax,cl
c001d674:	09 c6                	or     esi,eax
c001d676:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001d679:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d680:	89 c6                	mov    esi,eax
c001d682:	c1 e6 05             	shl    esi,0x5
c001d685:	01 f0                	add    eax,esi
c001d687:	01 d8                	add    eax,ebx
c001d689:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001d690:	75 0a                	jne    c001d69c <Process::createThread(void (*)(void*), void*, int)+0x66>
c001d692:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001d69c:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d6a2:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d6a6:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001d6a9:	01 ca                	add    edx,ecx
c001d6ab:	83 ec 08             	sub    esp,0x8
c001d6ae:	89 d0                	mov    eax,edx
c001d6b0:	c1 e0 05             	shl    eax,0x5
c001d6b3:	01 d0                	add    eax,edx
c001d6b5:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001d6b9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d6bd:	01 d8                	add    eax,ebx
c001d6bf:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001d6c5:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001d6cb:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d6d1:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d6d7:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d6dd:	89 cd                	mov    ebp,ecx
c001d6df:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001d6e3:	f7 dd                	neg    ebp
c001d6e5:	c1 e5 15             	shl    ebp,0x15
c001d6e8:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001d6ee:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001d6f4:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d6fe:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001d704:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d70e:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d718:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d71c:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001d723:	53                   	push   ebx
c001d724:	68 a4 0b 03 c0       	push   0xc0030ba4
c001d729:	e8 a2 af 00 00       	call   c00286d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d72e:	89 d8                	mov    eax,ebx
c001d730:	83 c4 10             	add    esp,0x10
c001d733:	83 c4 1c             	add    esp,0x1c
c001d736:	5b                   	pop    ebx
c001d737:	5e                   	pop    esi
c001d738:	5f                   	pop    edi
c001d739:	5d                   	pop    ebp
c001d73a:	c3                   	ret    
c001d73b:	90                   	nop

c001d73c <Process::createUserThread()>:
c001d73c:	83 ec 0c             	sub    esp,0xc
c001d73f:	68 80 00 00 00       	push   0x80
c001d744:	6a 00                	push   0x0
c001d746:	68 00 d1 01 c0       	push   0xc001d100
c001d74b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d74f:	e8 e2 fe ff ff       	call   c001d636 <Process::createThread(void (*)(void*), void*, int)>
c001d754:	83 c4 1c             	add    esp,0x1c
c001d757:	c3                   	ret    

c001d758 <setupMultitasking(void (*)())>:
c001d758:	56                   	push   esi
c001d759:	53                   	push   ebx
c001d75a:	51                   	push   ecx
c001d75b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d75f:	eb 10                	jmp    c001d771 <setupMultitasking(void (*)())+0x19>
c001d761:	83 ec 0c             	sub    esp,0xc
c001d764:	68 a4 0b 03 c0       	push   0xc0030ba4
c001d769:	e8 b4 ae 00 00       	call   c0028622 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d76e:	83 c4 10             	add    esp,0x10
c001d771:	83 ec 0c             	sub    esp,0xc
c001d774:	68 a4 0b 03 c0       	push   0xc0030ba4
c001d779:	e8 80 ae 00 00       	call   c00285fe <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d77e:	83 c4 10             	add    esp,0x10
c001d781:	84 c0                	test   al,al
c001d783:	74 dc                	je     c001d761 <setupMultitasking(void (*)())+0x9>
c001d785:	83 ec 0c             	sub    esp,0xc
c001d788:	68 3f 07 00 00       	push   0x73f
c001d78d:	e8 07 1e ff ff       	call   c000f599 <malloc>
c001d792:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d799:	89 c3                	mov    ebx,eax
c001d79b:	6a 00                	push   0x0
c001d79d:	68 64 b8 02 c0       	push   0xc002b864
c001d7a2:	6a 01                	push   0x1
c001d7a4:	50                   	push   eax
c001d7a5:	e8 94 fc ff ff       	call   c001d43e <Process::Process(bool, char const*, Process*, char**)>
c001d7aa:	83 c4 14             	add    esp,0x14
c001d7ad:	89 1d b0 0b 03 c0    	mov    DWORD PTR ds:0xc0030bb0,ebx
c001d7b3:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d7b9:	e8 15 2b ff ff       	call   c00102d3 <setActiveTerminal(VgaText*)>
c001d7be:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d7c6:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001d7d0:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d7d6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d7d9:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d7e3:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d7e9:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d7ef:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d7f9:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d803:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d80d:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d813:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d81d:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d823:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d82d:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d833:	58                   	pop    eax
c001d834:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d83a:	5a                   	pop    edx
c001d83b:	68 60 b8 02 c0       	push   0xc002b860
c001d840:	50                   	push   eax
c001d841:	e8 c6 2f fe ff       	call   c000080c <strcpy>
c001d846:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d84d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d851:	83 c4 14             	add    esp,0x14
c001d854:	5b                   	pop    ebx
c001d855:	5e                   	pop    esi
c001d856:	e9 f9 2a fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001d85b <schedule()>:
c001d85b:	a1 84 0b 03 c0       	mov    eax,ds:0xc0030b84
c001d860:	85 c0                	test   eax,eax
c001d862:	74 0b                	je     c001d86f <schedule()+0x14>
c001d864:	c7 05 80 0b 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030b80,0x1
c001d86e:	c3                   	ret    
c001d86f:	53                   	push   ebx
c001d870:	83 ec 14             	sub    esp,0x14
c001d873:	68 a4 0b 03 c0       	push   0xc0030ba4
c001d878:	e8 81 ad 00 00       	call   c00285fe <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d87d:	83 c4 10             	add    esp,0x10
c001d880:	84 c0                	test   al,al
c001d882:	75 38                	jne    c001d8bc <schedule()+0x61>
c001d884:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d889:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d88c:	4a                   	dec    edx
c001d88d:	74 32                	je     c001d8c1 <schedule()+0x66>
c001d88f:	83 ec 0c             	sub    esp,0xc
c001d892:	68 a4 0b 03 c0       	push   0xc0030ba4
c001d897:	e8 7e ad 00 00       	call   c002861a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d89c:	c7 04 24 a4 0b 03 c0 	mov    DWORD PTR [esp],0xc0030ba4
c001d8a3:	89 c3                	mov    ebx,eax
c001d8a5:	e8 78 ad 00 00       	call   c0028622 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d8aa:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001d8b1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d8b4:	e8 9d f8 ff ff       	call   c001d156 <switchToThread(ThreadControlBlock*)>
c001d8b9:	83 c4 10             	add    esp,0x10
c001d8bc:	83 c4 08             	add    esp,0x8
c001d8bf:	5b                   	pop    ebx
c001d8c0:	c3                   	ret    
c001d8c1:	83 ec 08             	sub    esp,0x8
c001d8c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d8cb:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d8d1:	68 a4 0b 03 c0       	push   0xc0030ba4
c001d8d6:	e8 f5 ad 00 00       	call   c00286d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d8db:	83 c4 10             	add    esp,0x10
c001d8de:	eb af                	jmp    c001d88f <schedule()+0x34>

c001d8e0 <Semaphore::tryAcquire()>:
c001d8e0:	53                   	push   ebx
c001d8e1:	83 ec 08             	sub    esp,0x8
c001d8e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d8e8:	fa                   	cli    
c001d8e9:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c001d8ee:	8d 50 01             	lea    edx,[eax+0x1]
c001d8f1:	89 15 88 0b 03 c0    	mov    DWORD PTR ds:0xc0030b88,edx
c001d8f7:	8b 15 84 0b 03 c0    	mov    edx,DWORD PTR ds:0xc0030b84
c001d8fd:	8d 5a 01             	lea    ebx,[edx+0x1]
c001d900:	89 1d 84 0b 03 c0    	mov    DWORD PTR ds:0xc0030b84,ebx
c001d906:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001d909:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001d90b:	7c 2a                	jl     c001d937 <Semaphore::tryAcquire()+0x57>
c001d90d:	89 15 84 0b 03 c0    	mov    DWORD PTR ds:0xc0030b84,edx
c001d913:	85 d2                	test   edx,edx
c001d915:	75 0a                	jne    c001d921 <Semaphore::tryAcquire()+0x41>
c001d917:	8b 15 80 0b 03 c0    	mov    edx,DWORD PTR ds:0xc0030b80
c001d91d:	85 d2                	test   edx,edx
c001d91f:	75 5b                	jne    c001d97c <Semaphore::tryAcquire()+0x9c>
c001d921:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c001d926:	85 c0                	test   eax,eax
c001d928:	74 07                	je     c001d931 <Semaphore::tryAcquire()+0x51>
c001d92a:	31 c0                	xor    eax,eax
c001d92c:	83 c4 08             	add    esp,0x8
c001d92f:	5b                   	pop    ebx
c001d930:	c3                   	ret    
c001d931:	fb                   	sti    
c001d932:	83 c4 08             	add    esp,0x8
c001d935:	5b                   	pop    ebx
c001d936:	c3                   	ret    
c001d937:	43                   	inc    ebx
c001d938:	89 15 84 0b 03 c0    	mov    DWORD PTR ds:0xc0030b84,edx
c001d93e:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001d941:	85 d2                	test   edx,edx
c001d943:	75 1f                	jne    c001d964 <Semaphore::tryAcquire()+0x84>
c001d945:	8b 0d 80 0b 03 c0    	mov    ecx,DWORD PTR ds:0xc0030b80
c001d94b:	85 c9                	test   ecx,ecx
c001d94d:	74 15                	je     c001d964 <Semaphore::tryAcquire()+0x84>
c001d94f:	c7 05 80 0b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030b80,0x0
c001d959:	e8 fd fe ff ff       	call   c001d85b <schedule()>
c001d95e:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c001d963:	48                   	dec    eax
c001d964:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c001d969:	85 c0                	test   eax,eax
c001d96b:	75 08                	jne    c001d975 <Semaphore::tryAcquire()+0x95>
c001d96d:	fb                   	sti    
c001d96e:	b0 01                	mov    al,0x1
c001d970:	83 c4 08             	add    esp,0x8
c001d973:	5b                   	pop    ebx
c001d974:	c3                   	ret    
c001d975:	b0 01                	mov    al,0x1
c001d977:	83 c4 08             	add    esp,0x8
c001d97a:	5b                   	pop    ebx
c001d97b:	c3                   	ret    
c001d97c:	c7 05 80 0b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030b80,0x0
c001d986:	e8 d0 fe ff ff       	call   c001d85b <schedule()>
c001d98b:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c001d990:	48                   	dec    eax
c001d991:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c001d996:	85 c0                	test   eax,eax
c001d998:	75 90                	jne    c001d92a <Semaphore::tryAcquire()+0x4a>
c001d99a:	eb 95                	jmp    c001d931 <Semaphore::tryAcquire()+0x51>

c001d99c <Semaphore::assertLocked(char const*)>:
c001d99c:	83 ec 0c             	sub    esp,0xc
c001d99f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d9a3:	fa                   	cli    
c001d9a4:	ff 05 88 0b 03 c0    	inc    DWORD PTR ds:0xc0030b88
c001d9aa:	a1 84 0b 03 c0       	mov    eax,ds:0xc0030b84
c001d9af:	8d 48 01             	lea    ecx,[eax+0x1]
c001d9b2:	89 0d 84 0b 03 c0    	mov    DWORD PTR ds:0xc0030b84,ecx
c001d9b8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001d9ba:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001d9bd:	7c 24                	jl     c001d9e3 <Semaphore::assertLocked(char const*)+0x47>
c001d9bf:	a3 84 0b 03 c0       	mov    ds:0xc0030b84,eax
c001d9c4:	85 c0                	test   eax,eax
c001d9c6:	75 09                	jne    c001d9d1 <Semaphore::assertLocked(char const*)+0x35>
c001d9c8:	a1 80 0b 03 c0       	mov    eax,ds:0xc0030b80
c001d9cd:	85 c0                	test   eax,eax
c001d9cf:	75 29                	jne    c001d9fa <Semaphore::assertLocked(char const*)+0x5e>
c001d9d1:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c001d9d6:	48                   	dec    eax
c001d9d7:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c001d9dc:	75 01                	jne    c001d9df <Semaphore::assertLocked(char const*)+0x43>
c001d9de:	fb                   	sti    
c001d9df:	83 c4 0c             	add    esp,0xc
c001d9e2:	c3                   	ret    
c001d9e3:	83 ec 0c             	sub    esp,0xc
c001d9e6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d9ea:	e8 e2 c2 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c001d9ef:	a1 84 0b 03 c0       	mov    eax,ds:0xc0030b84
c001d9f4:	83 c4 10             	add    esp,0x10
c001d9f7:	48                   	dec    eax
c001d9f8:	eb c5                	jmp    c001d9bf <Semaphore::assertLocked(char const*)+0x23>
c001d9fa:	c7 05 80 0b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030b80,0x0
c001da04:	e8 52 fe ff ff       	call   c001d85b <schedule()>
c001da09:	eb c6                	jmp    c001d9d1 <Semaphore::assertLocked(char const*)+0x35>

c001da0b <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001da0b:	83 ec 0c             	sub    esp,0xc
c001da0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da13:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001da17:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001da1a:	e8 3c fe ff ff       	call   c001d85b <schedule()>
c001da1f:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c001da24:	48                   	dec    eax
c001da25:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c001da2a:	75 01                	jne    c001da2d <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c001da2c:	fb                   	sti    
c001da2d:	83 c4 0c             	add    esp,0xc
c001da30:	c3                   	ret    

c001da31 <blockTask(TaskState)>:
c001da31:	83 ec 0c             	sub    esp,0xc
c001da34:	fa                   	cli    
c001da35:	ff 05 88 0b 03 c0    	inc    DWORD PTR ds:0xc0030b88
c001da3b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001da3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da44:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001da47:	e8 0f fe ff ff       	call   c001d85b <schedule()>
c001da4c:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c001da51:	48                   	dec    eax
c001da52:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c001da57:	75 01                	jne    c001da5a <blockTask(TaskState)+0x29>
c001da59:	fb                   	sti    
c001da5a:	83 c4 0c             	add    esp,0xc
c001da5d:	c3                   	ret    

c001da5e <waitTask(int, int*, int)>:
c001da5e:	83 ec 18             	sub    esp,0x18
c001da61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da66:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001da6a:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001da6d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001da71:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da76:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001da79:	6a 07                	push   0x7
c001da7b:	e8 b1 ff ff ff       	call   c001da31 <blockTask(TaskState)>
c001da80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da85:	83 c4 10             	add    esp,0x10
c001da88:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001da8b:	85 d2                	test   edx,edx
c001da8d:	74 0a                	je     c001da99 <waitTask(int, int*, int)+0x3b>
c001da8f:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001da92:	89 02                	mov    DWORD PTR [edx],eax
c001da94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da99:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001da9c:	83 c4 0c             	add    esp,0xc
c001da9f:	c3                   	ret    

c001daa0 <nanoSleepUntil(unsigned long long)>:
c001daa0:	83 ec 0c             	sub    esp,0xc
c001daa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001daa7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001daab:	3b 05 d0 dc 02 c0    	cmp    eax,DWORD PTR ds:0xc002dcd0
c001dab1:	89 d1                	mov    ecx,edx
c001dab3:	1b 0d d4 dc 02 c0    	sbb    ecx,DWORD PTR ds:0xc002dcd4
c001dab9:	73 04                	jae    c001dabf <nanoSleepUntil(unsigned long long)+0x1f>
c001dabb:	83 c4 0c             	add    esp,0xc
c001dabe:	c3                   	ret    
c001dabf:	fa                   	cli    
c001dac0:	ff 05 88 0b 03 c0    	inc    DWORD PTR ds:0xc0030b88
c001dac6:	83 ec 08             	sub    esp,0x8
c001dac9:	ff 05 84 0b 03 c0    	inc    DWORD PTR ds:0xc0030b84
c001dacf:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dad5:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001dad8:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001dadb:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001dae1:	68 98 0b 03 c0       	push   0xc0030b98
c001dae6:	e8 e5 ab 00 00       	call   c00286d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001daeb:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001daf2:	e8 3a ff ff ff       	call   c001da31 <blockTask(TaskState)>
c001daf7:	a1 84 0b 03 c0       	mov    eax,ds:0xc0030b84
c001dafc:	83 c4 10             	add    esp,0x10
c001daff:	48                   	dec    eax
c001db00:	a3 84 0b 03 c0       	mov    ds:0xc0030b84,eax
c001db05:	85 c0                	test   eax,eax
c001db07:	75 09                	jne    c001db12 <nanoSleepUntil(unsigned long long)+0x72>
c001db09:	a1 80 0b 03 c0       	mov    eax,ds:0xc0030b80
c001db0e:	85 c0                	test   eax,eax
c001db10:	75 12                	jne    c001db24 <nanoSleepUntil(unsigned long long)+0x84>
c001db12:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c001db17:	48                   	dec    eax
c001db18:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c001db1d:	75 9c                	jne    c001dabb <nanoSleepUntil(unsigned long long)+0x1b>
c001db1f:	fb                   	sti    
c001db20:	83 c4 0c             	add    esp,0xc
c001db23:	c3                   	ret    
c001db24:	c7 05 80 0b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030b80,0x0
c001db2e:	e8 28 fd ff ff       	call   c001d85b <schedule()>
c001db33:	eb dd                	jmp    c001db12 <nanoSleepUntil(unsigned long long)+0x72>

c001db35 <nanoSleep(unsigned long long)>:
c001db35:	a1 d0 dc 02 c0       	mov    eax,ds:0xc002dcd0
c001db3a:	8b 15 d4 dc 02 c0    	mov    edx,DWORD PTR ds:0xc002dcd4
c001db40:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001db44:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001db48:	e9 53 ff ff ff       	jmp    c001daa0 <nanoSleepUntil(unsigned long long)>

c001db4d <sleep(unsigned long long)>:
c001db4d:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001db55:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001db5a:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001db5e:	01 ca                	add    edx,ecx
c001db60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001db64:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001db68:	eb cb                	jmp    c001db35 <nanoSleep(unsigned long long)>

c001db6a <Semaphore::acquire()>:
c001db6a:	83 ec 0c             	sub    esp,0xc
c001db6d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db71:	fa                   	cli    
c001db72:	a1 84 0b 03 c0       	mov    eax,ds:0xc0030b84
c001db77:	ff 05 88 0b 03 c0    	inc    DWORD PTR ds:0xc0030b88
c001db7d:	8d 48 01             	lea    ecx,[eax+0x1]
c001db80:	89 0d 84 0b 03 c0    	mov    DWORD PTR ds:0xc0030b84,ecx
c001db86:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001db89:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001db8b:	7d 28                	jge    c001dbb5 <Semaphore::acquire()+0x4b>
c001db8d:	41                   	inc    ecx
c001db8e:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001db91:	a3 84 0b 03 c0       	mov    ds:0xc0030b84,eax
c001db96:	85 c0                	test   eax,eax
c001db98:	75 09                	jne    c001dba3 <Semaphore::acquire()+0x39>
c001db9a:	a1 80 0b 03 c0       	mov    eax,ds:0xc0030b80
c001db9f:	85 c0                	test   eax,eax
c001dba1:	75 4e                	jne    c001dbf1 <Semaphore::acquire()+0x87>
c001dba3:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c001dba8:	48                   	dec    eax
c001dba9:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c001dbae:	75 01                	jne    c001dbb1 <Semaphore::acquire()+0x47>
c001dbb0:	fb                   	sti    
c001dbb1:	83 c4 0c             	add    esp,0xc
c001dbb4:	c3                   	ret    
c001dbb5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbba:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001dbc1:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001dbc4:	85 c9                	test   ecx,ecx
c001dbc6:	74 3a                	je     c001dc02 <Semaphore::acquire()+0x98>
c001dbc8:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001dbcb:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dbd1:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001dbd4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbd9:	83 ec 0c             	sub    esp,0xc
c001dbdc:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001dbdf:	6a 05                	push   0x5
c001dbe1:	e8 4b fe ff ff       	call   c001da31 <blockTask(TaskState)>
c001dbe6:	a1 84 0b 03 c0       	mov    eax,ds:0xc0030b84
c001dbeb:	83 c4 10             	add    esp,0x10
c001dbee:	48                   	dec    eax
c001dbef:	eb a0                	jmp    c001db91 <Semaphore::acquire()+0x27>
c001dbf1:	c7 05 80 0b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030b80,0x0
c001dbfb:	e8 5b fc ff ff       	call   c001d85b <schedule()>
c001dc00:	eb a1                	jmp    c001dba3 <Semaphore::acquire()+0x39>
c001dc02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc07:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001dc0a:	eb c8                	jmp    c001dbd4 <Semaphore::acquire()+0x6a>

c001dc0c <taskReturned>:
c001dc0c:	83 ec 18             	sub    esp,0x18
c001dc0f:	68 e0 b8 02 c0       	push   0xc002b8e0
c001dc14:	e8 b8 c0 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c001dc19:	83 c4 10             	add    esp,0x10
c001dc1c:	83 ec 0c             	sub    esp,0xc
c001dc1f:	6a 02                	push   0x2
c001dc21:	e8 0b fe ff ff       	call   c001da31 <blockTask(TaskState)>
c001dc26:	fa                   	cli    
c001dc27:	ff 05 88 0b 03 c0    	inc    DWORD PTR ds:0xc0030b88
c001dc2d:	e8 29 fc ff ff       	call   c001d85b <schedule()>
c001dc32:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c001dc37:	83 c4 10             	add    esp,0x10
c001dc3a:	48                   	dec    eax
c001dc3b:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c001dc40:	85 c0                	test   eax,eax
c001dc42:	75 d8                	jne    c001dc1c <taskReturned+0x10>
c001dc44:	fb                   	sti    
c001dc45:	eb d5                	jmp    c001dc1c <taskReturned+0x10>

c001dc47 <Thr::processFromPID(int)>:
c001dc47:	57                   	push   edi
c001dc48:	56                   	push   esi
c001dc49:	53                   	push   ebx
c001dc4a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dc4e:	fa                   	cli    
c001dc4f:	ff 05 88 0b 03 c0    	inc    DWORD PTR ds:0xc0030b88
c001dc55:	83 ec 0c             	sub    esp,0xc
c001dc58:	68 a4 0b 03 c0       	push   0xc0030ba4
c001dc5d:	e8 b8 a9 00 00       	call   c002861a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dc62:	83 c4 10             	add    esp,0x10
c001dc65:	89 c7                	mov    edi,eax
c001dc67:	eb 14                	jmp    c001dc7d <Thr::processFromPID(int)+0x36>
c001dc69:	83 ec 0c             	sub    esp,0xc
c001dc6c:	68 a4 0b 03 c0       	push   0xc0030ba4
c001dc71:	e8 a4 a9 00 00       	call   c002861a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dc76:	83 c4 10             	add    esp,0x10
c001dc79:	39 f8                	cmp    eax,edi
c001dc7b:	74 49                	je     c001dcc6 <Thr::processFromPID(int)+0x7f>
c001dc7d:	83 ec 0c             	sub    esp,0xc
c001dc80:	68 a4 0b 03 c0       	push   0xc0030ba4
c001dc85:	e8 90 a9 00 00       	call   c002861a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dc8a:	c7 04 24 a4 0b 03 c0 	mov    DWORD PTR [esp],0xc0030ba4
c001dc91:	89 c3                	mov    ebx,eax
c001dc93:	e8 8a a9 00 00       	call   c0028622 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dc98:	58                   	pop    eax
c001dc99:	5a                   	pop    edx
c001dc9a:	53                   	push   ebx
c001dc9b:	68 a4 0b 03 c0       	push   0xc0030ba4
c001dca0:	e8 2b aa 00 00       	call   c00286d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dca5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dca8:	83 c4 10             	add    esp,0x10
c001dcab:	39 30                	cmp    DWORD PTR [eax],esi
c001dcad:	75 ba                	jne    c001dc69 <Thr::processFromPID(int)+0x22>
c001dcaf:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c001dcb4:	48                   	dec    eax
c001dcb5:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c001dcba:	74 07                	je     c001dcc3 <Thr::processFromPID(int)+0x7c>
c001dcbc:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dcbf:	5b                   	pop    ebx
c001dcc0:	5e                   	pop    esi
c001dcc1:	5f                   	pop    edi
c001dcc2:	c3                   	ret    
c001dcc3:	fb                   	sti    
c001dcc4:	eb f6                	jmp    c001dcbc <Thr::processFromPID(int)+0x75>
c001dcc6:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c001dccb:	48                   	dec    eax
c001dccc:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c001dcd1:	75 05                	jne    c001dcd8 <Thr::processFromPID(int)+0x91>
c001dcd3:	fb                   	sti    
c001dcd4:	5b                   	pop    ebx
c001dcd5:	5e                   	pop    esi
c001dcd6:	5f                   	pop    edi
c001dcd7:	c3                   	ret    
c001dcd8:	5b                   	pop    ebx
c001dcd9:	31 c0                	xor    eax,eax
c001dcdb:	5e                   	pop    esi
c001dcdc:	5f                   	pop    edi
c001dcdd:	c3                   	ret    

c001dcde <unblockTask(ThreadControlBlock*)>:
c001dcde:	53                   	push   ebx
c001dcdf:	83 ec 08             	sub    esp,0x8
c001dce2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dce6:	fa                   	cli    
c001dce7:	ff 05 88 0b 03 c0    	inc    DWORD PTR ds:0xc0030b88
c001dced:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001dcf0:	85 c0                	test   eax,eax
c001dcf2:	74 5a                	je     c001dd4e <unblockTask(ThreadControlBlock*)+0x70>
c001dcf4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001dcf7:	48                   	dec    eax
c001dcf8:	74 31                	je     c001dd2b <unblockTask(ThreadControlBlock*)+0x4d>
c001dcfa:	83 ec 0c             	sub    esp,0xc
c001dcfd:	68 a4 0b 03 c0       	push   0xc0030ba4
c001dd02:	e8 13 a9 00 00       	call   c002861a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dd07:	83 c4 10             	add    esp,0x10
c001dd0a:	85 c0                	test   eax,eax
c001dd0c:	75 17                	jne    c001dd25 <unblockTask(ThreadControlBlock*)+0x47>
c001dd0e:	eb 50                	jmp    c001dd60 <unblockTask(ThreadControlBlock*)+0x82>
c001dd10:	83 ec 08             	sub    esp,0x8
c001dd13:	50                   	push   eax
c001dd14:	68 a4 0b 03 c0       	push   0xc0030ba4
c001dd19:	e8 84 ac 00 00       	call   c00289a2 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001dd1e:	83 c4 10             	add    esp,0x10
c001dd21:	85 c0                	test   eax,eax
c001dd23:	74 3b                	je     c001dd60 <unblockTask(ThreadControlBlock*)+0x82>
c001dd25:	39 c3                	cmp    ebx,eax
c001dd27:	75 e7                	jne    c001dd10 <unblockTask(ThreadControlBlock*)+0x32>
c001dd29:	eb 10                	jmp    c001dd3b <unblockTask(ThreadControlBlock*)+0x5d>
c001dd2b:	83 ec 0c             	sub    esp,0xc
c001dd2e:	68 82 b8 02 c0       	push   0xc002b882
c001dd33:	e8 39 48 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c001dd38:	83 c4 10             	add    esp,0x10
c001dd3b:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c001dd40:	48                   	dec    eax
c001dd41:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c001dd46:	75 01                	jne    c001dd49 <unblockTask(ThreadControlBlock*)+0x6b>
c001dd48:	fb                   	sti    
c001dd49:	83 c4 08             	add    esp,0x8
c001dd4c:	5b                   	pop    ebx
c001dd4d:	c3                   	ret    
c001dd4e:	83 ec 0c             	sub    esp,0xc
c001dd51:	68 6b b8 02 c0       	push   0xc002b86b
c001dd56:	e8 16 48 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c001dd5b:	83 c4 10             	add    esp,0x10
c001dd5e:	eb db                	jmp    c001dd3b <unblockTask(ThreadControlBlock*)+0x5d>
c001dd60:	83 ec 08             	sub    esp,0x8
c001dd63:	53                   	push   ebx
c001dd64:	68 a4 0b 03 c0       	push   0xc0030ba4
c001dd69:	e8 62 a9 00 00       	call   c00286d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dd6e:	83 c4 10             	add    esp,0x10
c001dd71:	eb c8                	jmp    c001dd3b <unblockTask(ThreadControlBlock*)+0x5d>

c001dd73 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001dd73:	55                   	push   ebp
c001dd74:	57                   	push   edi
c001dd75:	56                   	push   esi
c001dd76:	53                   	push   ebx
c001dd77:	83 ec 1c             	sub    esp,0x1c
c001dd7a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dd7e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dd81:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001dd87:	85 ff                	test   edi,edi
c001dd89:	7e 20                	jle    c001ddab <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001dd8b:	31 f6                	xor    esi,esi
c001dd8d:	83 ec 0c             	sub    esp,0xc
c001dd90:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001dd97:	46                   	inc    esi
c001dd98:	e8 0c 18 ff ff       	call   c000f5a9 <free>
c001dd9d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dda0:	83 c4 10             	add    esp,0x10
c001dda3:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001dda9:	7f e2                	jg     c001dd8d <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001ddab:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001ddb5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ddba:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001ddbd:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001ddc0:	d3 c0                	rol    eax,cl
c001ddc2:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001ddc9:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ddcc:	89 f7                	mov    edi,esi
c001ddce:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001ddd6:	0f 85 64 01 00 00    	jne    c001df40 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001dddc:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001dde2:	85 ed                	test   ebp,ebp
c001dde4:	74 1b                	je     c001de01 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001dde6:	83 ec 0c             	sub    esp,0xc
c001dde9:	55                   	push   ebp
c001ddea:	e8 87 bc ff ff       	call   c0019a76 <EnvVarContainer::~EnvVarContainer()>
c001ddef:	59                   	pop    ecx
c001ddf0:	5e                   	pop    esi
c001ddf1:	6a 0c                	push   0xc
c001ddf3:	55                   	push   ebp
c001ddf4:	e8 a0 46 ff ff       	call   c0012499 <operator delete(void*, unsigned long)>
c001ddf9:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ddfc:	83 c4 10             	add    esp,0x10
c001ddff:	89 f7                	mov    edi,esi
c001de01:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001de07:	85 c0                	test   eax,eax
c001de09:	0f 84 aa 00 00 00    	je     c001deb9 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001de0f:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001de12:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001de16:	31 c9                	xor    ecx,ecx
c001de18:	eb 10                	jmp    c001de2a <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001de1a:	41                   	inc    ecx
c001de1b:	83 f9 10             	cmp    ecx,0x10
c001de1e:	0f 84 95 00 00 00    	je     c001deb9 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001de24:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001de2a:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001de31:	d3 fa                	sar    edx,cl
c001de33:	83 e2 01             	and    edx,0x1
c001de36:	74 e2                	je     c001de1a <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001de38:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001de3b:	01 ca                	add    edx,ecx
c001de3d:	89 d5                	mov    ebp,edx
c001de3f:	c1 e5 05             	shl    ebp,0x5
c001de42:	01 ea                	add    edx,ebp
c001de44:	01 d0                	add    eax,edx
c001de46:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001de4c:	83 fd 07             	cmp    ebp,0x7
c001de4f:	75 c9                	jne    c001de1a <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001de51:	05 40 02 00 00       	add    eax,0x240
c001de56:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001de59:	83 fd ff             	cmp    ebp,0xffffffff
c001de5c:	0f 8c e6 00 00 00    	jl     c001df48 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c001de62:	0f 84 97 01 00 00    	je     c001dfff <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001de68:	85 ed                	test   ebp,ebp
c001de6a:	0f 84 7e 01 00 00    	je     c001dfee <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c001de70:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001de72:	75 a6                	jne    c001de1a <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001de74:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001de7a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001de7e:	01 d0                	add    eax,edx
c001de80:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001de84:	83 ec 0c             	sub    esp,0xc
c001de87:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001de8d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de90:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001de96:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001de9d:	50                   	push   eax
c001de9e:	e8 3b fe ff ff       	call   c001dcde <unblockTask(ThreadControlBlock*)>
c001dea3:	83 c4 10             	add    esp,0x10
c001dea6:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dea9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dead:	89 f7                	mov    edi,esi
c001deaf:	41                   	inc    ecx
c001deb0:	83 f9 10             	cmp    ecx,0x10
c001deb3:	0f 85 6b ff ff ff    	jne    c001de24 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001deb9:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001debf:	85 c0                	test   eax,eax
c001dec1:	74 5d                	je     c001df20 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001dec3:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001dec9:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001decf:	74 4f                	je     c001df20 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001ded1:	83 ec 0c             	sub    esp,0xc
c001ded4:	68 a4 0b 03 c0       	push   0xc0030ba4
c001ded9:	e8 3c a7 00 00       	call   c002861a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dede:	c7 04 24 a4 0b 03 c0 	mov    DWORD PTR [esp],0xc0030ba4
c001dee5:	89 c7                	mov    edi,eax
c001dee7:	e8 12 a7 00 00       	call   c00285fe <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001deec:	83 c4 10             	add    esp,0x10
c001deef:	84 c0                	test   al,al
c001def1:	0f 84 c2 00 00 00    	je     c001dfb9 <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c001def7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001defa:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001df00:	85 d2                	test   edx,edx
c001df02:	74 0f                	je     c001df13 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001df04:	83 ec 0c             	sub    esp,0xc
c001df07:	8b 02                	mov    eax,DWORD PTR [edx]
c001df09:	52                   	push   edx
c001df0a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001df0d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df10:	83 c4 10             	add    esp,0x10
c001df13:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001df1d:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001df20:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001df26:	85 db                	test   ebx,ebx
c001df28:	74 16                	je     c001df40 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001df2a:	83 ec 0c             	sub    esp,0xc
c001df2d:	53                   	push   ebx
c001df2e:	e8 ab 38 ff ff       	call   c00117de <VAS::~VAS()>
c001df33:	58                   	pop    eax
c001df34:	5a                   	pop    edx
c001df35:	6a 14                	push   0x14
c001df37:	53                   	push   ebx
c001df38:	e8 5c 45 ff ff       	call   c0012499 <operator delete(void*, unsigned long)>
c001df3d:	83 c4 10             	add    esp,0x10
c001df40:	83 c4 1c             	add    esp,0x1c
c001df43:	5b                   	pop    ebx
c001df44:	5e                   	pop    esi
c001df45:	5f                   	pop    edi
c001df46:	5d                   	pop    ebp
c001df47:	c3                   	ret    
c001df48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001df4c:	83 ec 0c             	sub    esp,0xc
c001df4f:	68 14 b9 02 c0       	push   0xc002b914
c001df54:	e8 78 bd ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c001df59:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001df5c:	83 c4 10             	add    esp,0x10
c001df5f:	89 f7                	mov    edi,esi
c001df61:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001df65:	e9 b0 fe ff ff       	jmp    c001de1a <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001df6a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001df70:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001df76:	75 1c                	jne    c001df94 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001df78:	83 ec 0c             	sub    esp,0xc
c001df7b:	68 7c b9 02 c0       	push   0xc002b97c
c001df80:	e8 ec 45 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c001df85:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001df8c:	e8 a0 fa ff ff       	call   c001da31 <blockTask(TaskState)>
c001df91:	83 c4 10             	add    esp,0x10
c001df94:	83 ec 08             	sub    esp,0x8
c001df97:	56                   	push   esi
c001df98:	68 a4 0b 03 c0       	push   0xc0030ba4
c001df9d:	e8 2e a7 00 00       	call   c00286d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dfa2:	c7 04 24 a4 0b 03 c0 	mov    DWORD PTR [esp],0xc0030ba4
c001dfa9:	e8 6c a6 00 00       	call   c002861a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dfae:	83 c4 10             	add    esp,0x10
c001dfb1:	39 f8                	cmp    eax,edi
c001dfb3:	0f 84 3e ff ff ff    	je     c001def7 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001dfb9:	83 ec 0c             	sub    esp,0xc
c001dfbc:	68 a4 0b 03 c0       	push   0xc0030ba4
c001dfc1:	e8 54 a6 00 00       	call   c002861a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dfc6:	c7 04 24 a4 0b 03 c0 	mov    DWORD PTR [esp],0xc0030ba4
c001dfcd:	89 c6                	mov    esi,eax
c001dfcf:	e8 4e a6 00 00       	call   c0028622 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dfd4:	83 c4 10             	add    esp,0x10
c001dfd7:	39 f3                	cmp    ebx,esi
c001dfd9:	74 b9                	je     c001df94 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001dfdb:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001dfde:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dfe1:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001dfe7:	75 ab                	jne    c001df94 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001dfe9:	e9 7c ff ff ff       	jmp    c001df6a <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001dfee:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dff2:	83 ec 0c             	sub    esp,0xc
c001dff5:	68 48 b9 02 c0       	push   0xc002b948
c001dffa:	e9 55 ff ff ff       	jmp    c001df54 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c001dfff:	8b 36                	mov    esi,DWORD PTR [esi]
c001e001:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e005:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e008:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e00b:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e011:	01 d7                	add    edi,edx
c001e013:	89 f8                	mov    eax,edi
c001e015:	e9 66 fe ff ff       	jmp    c001de80 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e01a <cleanerTaskFunction(void*)>:
c001e01a:	53                   	push   ebx
c001e01b:	83 ec 08             	sub    esp,0x8
c001e01e:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c001e023:	48                   	dec    eax
c001e024:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c001e029:	75 01                	jne    c001e02c <cleanerTaskFunction(void*)+0x12>
c001e02b:	fb                   	sti    
c001e02c:	fa                   	cli    
c001e02d:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c001e032:	80 3d 6c 0b 03 c0 00 	cmp    BYTE PTR ds:0xc0030b6c,0x0
c001e039:	8d 50 01             	lea    edx,[eax+0x1]
c001e03c:	89 15 88 0b 03 c0    	mov    DWORD PTR ds:0xc0030b88,edx
c001e042:	0f 84 a1 00 00 00    	je     c001e0e9 <cleanerTaskFunction(void*)+0xcf>
c001e048:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c001e04d:	85 c0                	test   eax,eax
c001e04f:	75 01                	jne    c001e052 <cleanerTaskFunction(void*)+0x38>
c001e051:	fb                   	sti    
c001e052:	c6 05 6c 0b 03 c0 00 	mov    BYTE PTR ds:0xc0030b6c,0x0
c001e059:	fa                   	cli    
c001e05a:	ff 05 88 0b 03 c0    	inc    DWORD PTR ds:0xc0030b88
c001e060:	ff 05 84 0b 03 c0    	inc    DWORD PTR ds:0xc0030b84
c001e066:	fa                   	cli    
c001e067:	ff 05 88 0b 03 c0    	inc    DWORD PTR ds:0xc0030b88
c001e06d:	eb 26                	jmp    c001e095 <cleanerTaskFunction(void*)+0x7b>
c001e06f:	83 ec 0c             	sub    esp,0xc
c001e072:	68 8c 0b 03 c0       	push   0xc0030b8c
c001e077:	e8 9e a5 00 00       	call   c002861a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e07c:	c7 04 24 8c 0b 03 c0 	mov    DWORD PTR [esp],0xc0030b8c
c001e083:	89 c3                	mov    ebx,eax
c001e085:	e8 98 a5 00 00       	call   c0028622 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e08a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e08d:	e8 e1 fc ff ff       	call   c001dd73 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e092:	83 c4 10             	add    esp,0x10
c001e095:	83 ec 0c             	sub    esp,0xc
c001e098:	68 8c 0b 03 c0       	push   0xc0030b8c
c001e09d:	e8 5c a5 00 00       	call   c00285fe <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e0a2:	83 c4 10             	add    esp,0x10
c001e0a5:	84 c0                	test   al,al
c001e0a7:	74 c6                	je     c001e06f <cleanerTaskFunction(void*)+0x55>
c001e0a9:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c001e0ae:	48                   	dec    eax
c001e0af:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c001e0b4:	75 01                	jne    c001e0b7 <cleanerTaskFunction(void*)+0x9d>
c001e0b6:	fb                   	sti    
c001e0b7:	a1 84 0b 03 c0       	mov    eax,ds:0xc0030b84
c001e0bc:	48                   	dec    eax
c001e0bd:	a3 84 0b 03 c0       	mov    ds:0xc0030b84,eax
c001e0c2:	0f 85 56 ff ff ff    	jne    c001e01e <cleanerTaskFunction(void*)+0x4>
c001e0c8:	a1 80 0b 03 c0       	mov    eax,ds:0xc0030b80
c001e0cd:	85 c0                	test   eax,eax
c001e0cf:	0f 84 49 ff ff ff    	je     c001e01e <cleanerTaskFunction(void*)+0x4>
c001e0d5:	c7 05 80 0b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030b80,0x0
c001e0df:	e8 77 f7 ff ff       	call   c001d85b <schedule()>
c001e0e4:	e9 35 ff ff ff       	jmp    c001e01e <cleanerTaskFunction(void*)+0x4>
c001e0e9:	83 ec 0c             	sub    esp,0xc
c001e0ec:	6a 02                	push   0x2
c001e0ee:	e8 18 f9 ff ff       	call   c001da0b <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e0f3:	83 c4 10             	add    esp,0x10
c001e0f6:	e9 57 ff ff ff       	jmp    c001e052 <cleanerTaskFunction(void*)+0x38>

c001e0fb <terminateTask(int)>:
c001e0fb:	83 ec 14             	sub    esp,0x14
c001e0fe:	fa                   	cli    
c001e0ff:	ff 05 88 0b 03 c0    	inc    DWORD PTR ds:0xc0030b88
c001e105:	ff 05 84 0b 03 c0    	inc    DWORD PTR ds:0xc0030b84
c001e10b:	fa                   	cli    
c001e10c:	ff 05 88 0b 03 c0    	inc    DWORD PTR ds:0xc0030b88
c001e112:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e116:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e11b:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e11e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e123:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e126:	50                   	push   eax
c001e127:	68 8c 0b 03 c0       	push   0xc0030b8c
c001e12c:	e8 9f a5 00 00       	call   c00286d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e131:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e136:	83 c4 10             	add    esp,0x10
c001e139:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e140:	a1 68 0b 03 c0       	mov    eax,ds:0xc0030b68
c001e145:	85 c0                	test   eax,eax
c001e147:	74 53                	je     c001e19c <terminateTask(int)+0xa1>
c001e149:	83 ec 0c             	sub    esp,0xc
c001e14c:	c6 05 6c 0b 03 c0 01 	mov    BYTE PTR ds:0xc0030b6c,0x1
c001e153:	50                   	push   eax
c001e154:	e8 85 fb ff ff       	call   c001dcde <unblockTask(ThreadControlBlock*)>
c001e159:	83 c4 10             	add    esp,0x10
c001e15c:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c001e161:	48                   	dec    eax
c001e162:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c001e167:	75 01                	jne    c001e16a <terminateTask(int)+0x6f>
c001e169:	fb                   	sti    
c001e16a:	a1 84 0b 03 c0       	mov    eax,ds:0xc0030b84
c001e16f:	48                   	dec    eax
c001e170:	a3 84 0b 03 c0       	mov    ds:0xc0030b84,eax
c001e175:	75 09                	jne    c001e180 <terminateTask(int)+0x85>
c001e177:	83 3d 80 0b 03 c0 00 	cmp    DWORD PTR ds:0xc0030b80,0x0
c001e17e:	75 2e                	jne    c001e1ae <terminateTask(int)+0xb3>
c001e180:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c001e185:	48                   	dec    eax
c001e186:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c001e18b:	75 01                	jne    c001e18e <terminateTask(int)+0x93>
c001e18d:	fb                   	sti    
c001e18e:	fa                   	cli    
c001e18f:	ff 05 88 0b 03 c0    	inc    DWORD PTR ds:0xc0030b88
c001e195:	e8 c1 f6 ff ff       	call   c001d85b <schedule()>
c001e19a:	eb e4                	jmp    c001e180 <terminateTask(int)+0x85>
c001e19c:	83 ec 0c             	sub    esp,0xc
c001e19f:	68 99 b8 02 c0       	push   0xc002b899
c001e1a4:	e8 c8 43 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c001e1a9:	83 c4 10             	add    esp,0x10
c001e1ac:	eb ae                	jmp    c001e15c <terminateTask(int)+0x61>
c001e1ae:	c7 05 80 0b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030b80,0x0
c001e1b8:	eb db                	jmp    c001e195 <terminateTask(int)+0x9a>

c001e1ba <Thr::terminateFromIRQ(int)>:
c001e1ba:	83 ec 18             	sub    esp,0x18
c001e1bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e1c1:	e8 35 ff ff ff       	call   c001e0fb <terminateTask(int)>

c001e1c6 <Semaphore::release()>:
c001e1c6:	83 ec 0c             	sub    esp,0xc
c001e1c9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e1cd:	fa                   	cli    
c001e1ce:	a1 84 0b 03 c0       	mov    eax,ds:0xc0030b84
c001e1d3:	ff 05 88 0b 03 c0    	inc    DWORD PTR ds:0xc0030b88
c001e1d9:	8d 48 01             	lea    ecx,[eax+0x1]
c001e1dc:	89 0d 84 0b 03 c0    	mov    DWORD PTR ds:0xc0030b84,ecx
c001e1e2:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e1e5:	85 c9                	test   ecx,ecx
c001e1e7:	74 3c                	je     c001e225 <Semaphore::release()+0x5f>
c001e1e9:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e1ec:	83 ec 0c             	sub    esp,0xc
c001e1ef:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e1f2:	51                   	push   ecx
c001e1f3:	e8 e6 fa ff ff       	call   c001dcde <unblockTask(ThreadControlBlock*)>
c001e1f8:	a1 84 0b 03 c0       	mov    eax,ds:0xc0030b84
c001e1fd:	83 c4 10             	add    esp,0x10
c001e200:	48                   	dec    eax
c001e201:	a3 84 0b 03 c0       	mov    ds:0xc0030b84,eax
c001e206:	85 c0                	test   eax,eax
c001e208:	75 09                	jne    c001e213 <Semaphore::release()+0x4d>
c001e20a:	a1 80 0b 03 c0       	mov    eax,ds:0xc0030b80
c001e20f:	85 c0                	test   eax,eax
c001e211:	75 17                	jne    c001e22a <Semaphore::release()+0x64>
c001e213:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c001e218:	48                   	dec    eax
c001e219:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c001e21e:	75 01                	jne    c001e221 <Semaphore::release()+0x5b>
c001e220:	fb                   	sti    
c001e221:	83 c4 0c             	add    esp,0xc
c001e224:	c3                   	ret    
c001e225:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e228:	eb d7                	jmp    c001e201 <Semaphore::release()+0x3b>
c001e22a:	c7 05 80 0b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030b80,0x0
c001e234:	e8 22 f6 ff ff       	call   c001d85b <schedule()>
c001e239:	eb d8                	jmp    c001e213 <Semaphore::release()+0x4d>

c001e23b <__static_initialization_and_destruction_0(int, int)>:
c001e23b:	83 ec 0c             	sub    esp,0xc
c001e23e:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e243:	0f 85 88 00 00 00    	jne    c001e2d1 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e249:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e251:	75 7e                	jne    c001e2d1 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e253:	83 ec 0c             	sub    esp,0xc
c001e256:	68 a4 0b 03 c0       	push   0xc0030ba4
c001e25b:	e8 00 a7 00 00       	call   c0028960 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e260:	83 c4 10             	add    esp,0x10
c001e263:	83 ec 04             	sub    esp,0x4
c001e266:	68 30 c4 02 c0       	push   0xc002c430
c001e26b:	68 a4 0b 03 c0       	push   0xc0030ba4
c001e270:	68 14 89 02 c0       	push   0xc0028914
c001e275:	e8 99 41 ff ff       	call   c0012413 <__cxa_atexit>
c001e27a:	83 c4 10             	add    esp,0x10
c001e27d:	83 ec 0c             	sub    esp,0xc
c001e280:	68 98 0b 03 c0       	push   0xc0030b98
c001e285:	e8 d6 a6 00 00       	call   c0028960 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e28a:	83 c4 10             	add    esp,0x10
c001e28d:	83 ec 04             	sub    esp,0x4
c001e290:	68 30 c4 02 c0       	push   0xc002c430
c001e295:	68 98 0b 03 c0       	push   0xc0030b98
c001e29a:	68 14 89 02 c0       	push   0xc0028914
c001e29f:	e8 6f 41 ff ff       	call   c0012413 <__cxa_atexit>
c001e2a4:	83 c4 10             	add    esp,0x10
c001e2a7:	83 ec 0c             	sub    esp,0xc
c001e2aa:	68 8c 0b 03 c0       	push   0xc0030b8c
c001e2af:	e8 ac a6 00 00       	call   c0028960 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e2b4:	83 c4 10             	add    esp,0x10
c001e2b7:	83 ec 04             	sub    esp,0x4
c001e2ba:	68 30 c4 02 c0       	push   0xc002c430
c001e2bf:	68 8c 0b 03 c0       	push   0xc0030b8c
c001e2c4:	68 14 89 02 c0       	push   0xc0028914
c001e2c9:	e8 45 41 ff ff       	call   c0012413 <__cxa_atexit>
c001e2ce:	83 c4 10             	add    esp,0x10
c001e2d1:	90                   	nop
c001e2d2:	83 c4 0c             	add    esp,0xc
c001e2d5:	c3                   	ret    

c001e2d6 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e2d6:	83 ec 0c             	sub    esp,0xc
c001e2d9:	83 ec 08             	sub    esp,0x8
c001e2dc:	68 ff ff 00 00       	push   0xffff
c001e2e1:	6a 01                	push   0x1
c001e2e3:	e8 53 ff ff ff       	call   c001e23b <__static_initialization_and_destruction_0(int, int)>
c001e2e8:	83 c4 10             	add    esp,0x10
c001e2eb:	83 c4 0c             	add    esp,0xc
c001e2ee:	c3                   	ret    

c001e2ef <Vm::inbv(unsigned short)>:
c001e2ef:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e2f3:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e2f8:	75 06                	jne    c001e300 <Vm::inbv(unsigned short)+0x11>
c001e2fa:	a0 ec 0b 03 c0       	mov    al,ds:0xc0030bec
c001e2ff:	c3                   	ret    
c001e300:	ec                   	in     al,dx
c001e301:	c3                   	ret    

c001e302 <Vm::outbv(unsigned short, unsigned char)>:
c001e302:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e306:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e30a:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e30f:	75 25                	jne    c001e336 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001e311:	8b 0d ec 0b 03 c0    	mov    ecx,DWORD PTR ds:0xc0030bec
c001e317:	8d 51 01             	lea    edx,[ecx+0x1]
c001e31a:	88 81 00 0c 03 c0    	mov    BYTE PTR [ecx-0x3ffcf400],al
c001e320:	89 15 ec 0b 03 c0    	mov    DWORD PTR ds:0xc0030bec,edx
c001e326:	83 fa 20             	cmp    edx,0x20
c001e329:	75 0c                	jne    c001e337 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001e32b:	c7 05 ec 0b 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0030bec,0x1f
c001e335:	c3                   	ret    
c001e336:	ee                   	out    dx,al
c001e337:	c3                   	ret    

c001e338 <Vm::realToLinear(unsigned short, unsigned short)>:
c001e338:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e33d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e342:	c1 e0 04             	shl    eax,0x4
c001e345:	01 d0                	add    eax,edx
c001e347:	c3                   	ret    

c001e348 <Vm::getSegment(unsigned int)>:
c001e348:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e34c:	c1 e8 10             	shr    eax,0x10
c001e34f:	c3                   	ret    

c001e350 <Vm::getOffset(unsigned int)>:
c001e350:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e354:	c3                   	ret    

c001e355 <Vm::mainloop2()>:
c001e355:	83 ec 18             	sub    esp,0x18
c001e358:	fa                   	cli    
c001e359:	ff 05 88 0b 03 c0    	inc    DWORD PTR ds:0xc0030b88
c001e35f:	6a 02                	push   0x2
c001e361:	c6 05 e5 0b 03 c0 01 	mov    BYTE PTR ds:0xc0030be5,0x1
c001e368:	e8 9e f6 ff ff       	call   c001da0b <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e36d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e372:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e376:	52                   	push   edx
c001e377:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e37b:	52                   	push   edx
c001e37c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e380:	52                   	push   edx
c001e381:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e385:	50                   	push   eax
c001e386:	e8 6f 1f fe ff       	call   c00002fa <goToVM86>
c001e38b:	83 c4 2c             	add    esp,0x2c
c001e38e:	c3                   	ret    

c001e38f <Vm::mainVm8086Loop(void*)>:
c001e38f:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c001e394:	48                   	dec    eax
c001e395:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c001e39a:	75 01                	jne    c001e39d <Vm::mainVm8086Loop(void*)+0xe>
c001e39c:	fb                   	sti    
c001e39d:	eb b6                	jmp    c001e355 <Vm::mainloop2()>

c001e39f <Vm::mainloop3(unsigned long)>:
c001e39f:	83 ec 18             	sub    esp,0x18
c001e3a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e3a6:	fa                   	cli    
c001e3a7:	ff 05 88 0b 03 c0    	inc    DWORD PTR ds:0xc0030b88
c001e3ad:	6a 02                	push   0x2
c001e3af:	c6 05 e4 0b 03 c0 01 	mov    BYTE PTR ds:0xc0030be4,0x1
c001e3b6:	a3 e0 0b 03 c0       	mov    ds:0xc0030be0,eax
c001e3bb:	e8 4b f6 ff ff       	call   c001da0b <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e3c0:	83 c4 1c             	add    esp,0x1c
c001e3c3:	eb 90                	jmp    c001e355 <Vm::mainloop2()>

c001e3c5 <Vm::initialise8086()>:
c001e3c5:	83 ec 0c             	sub    esp,0xc
c001e3c8:	68 80 00 00 00       	push   0x80
c001e3cd:	6a 00                	push   0x0
c001e3cf:	68 8f e3 01 c0       	push   0xc001e38f
c001e3d4:	ff 35 b0 0b 03 c0    	push   DWORD PTR ds:0xc0030bb0
c001e3da:	e8 57 f2 ff ff       	call   c001d636 <Process::createThread(void (*)(void*), void*, int)>
c001e3df:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e3e6:	a3 e8 0b 03 c0       	mov    ds:0xc0030be8,eax
c001e3eb:	68 00 01 00 00       	push   0x100
c001e3f0:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c001e3f5:	6a 00                	push   0x0
c001e3f7:	6a 00                	push   0x0
c001e3f9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e3ff:	e8 4c 38 ff ff       	call   c0011c50 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e404:	83 c4 2c             	add    esp,0x2c
c001e407:	c3                   	ret    

c001e408 <Vm::finish8086()>:
c001e408:	53                   	push   ebx
c001e409:	83 ec 08             	sub    esp,0x8
c001e40c:	fa                   	cli    
c001e40d:	ff 05 88 0b 03 c0    	inc    DWORD PTR ds:0xc0030b88
c001e413:	80 3d e4 0b 03 c0 00 	cmp    BYTE PTR ds:0xc0030be4,0x0
c001e41a:	75 15                	jne    c001e431 <Vm::finish8086()+0x29>
c001e41c:	e8 3a f4 ff ff       	call   c001d85b <schedule()>
c001e421:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c001e426:	48                   	dec    eax
c001e427:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c001e42c:	75 de                	jne    c001e40c <Vm::finish8086()+0x4>
c001e42e:	fb                   	sti    
c001e42f:	eb db                	jmp    c001e40c <Vm::finish8086()+0x4>
c001e431:	83 ec 0c             	sub    esp,0xc
c001e434:	8b 1d e0 0b 03 c0    	mov    ebx,DWORD PTR ds:0xc0030be0
c001e43a:	ff 35 e8 0b 03 c0    	push   DWORD PTR ds:0xc0030be8
c001e440:	c6 05 e4 0b 03 c0 00 	mov    BYTE PTR ds:0xc0030be4,0x0
c001e447:	e8 92 f8 ff ff       	call   c001dcde <unblockTask(ThreadControlBlock*)>
c001e44c:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c001e451:	83 c4 10             	add    esp,0x10
c001e454:	8d 50 ff             	lea    edx,[eax-0x1]
c001e457:	89 15 88 0b 03 c0    	mov    DWORD PTR ds:0xc0030b88,edx
c001e45d:	85 d2                	test   edx,edx
c001e45f:	75 01                	jne    c001e462 <Vm::finish8086()+0x5a>
c001e461:	fb                   	sti    
c001e462:	89 d8                	mov    eax,ebx
c001e464:	83 c4 08             	add    esp,0x8
c001e467:	5b                   	pop    ebx
c001e468:	c3                   	ret    

c001e469 <Vm::getOutput8086(unsigned char*)>:
c001e469:	57                   	push   edi
c001e46a:	8b 0d ec 0b 03 c0    	mov    ecx,DWORD PTR ds:0xc0030bec
c001e470:	56                   	push   esi
c001e471:	be 00 0c 03 c0       	mov    esi,0xc0030c00
c001e476:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e47a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e47c:	a1 ec 0b 03 c0       	mov    eax,ds:0xc0030bec
c001e481:	5e                   	pop    esi
c001e482:	c7 05 ec 0b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030bec,0x0
c001e48c:	5f                   	pop    edi
c001e48d:	c3                   	ret    

c001e48e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e48e:	55                   	push   ebp
c001e48f:	57                   	push   edi
c001e490:	56                   	push   esi
c001e491:	53                   	push   ebx
c001e492:	83 ec 2c             	sub    esp,0x2c
c001e495:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e499:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001e49d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e4a1:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e4a5:	fa                   	cli    
c001e4a6:	ff 05 88 0b 03 c0    	inc    DWORD PTR ds:0xc0030b88
c001e4ac:	0f b6 35 e5 0b 03 c0 	movzx  esi,BYTE PTR ds:0xc0030be5
c001e4b3:	89 f0                	mov    eax,esi
c001e4b5:	84 c0                	test   al,al
c001e4b7:	75 1d                	jne    c001e4d6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001e4b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e4bd:	e8 99 f3 ff ff       	call   c001d85b <schedule()>
c001e4c2:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c001e4c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e4cb:	48                   	dec    eax
c001e4cc:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c001e4d1:	75 d2                	jne    c001e4a5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e4d3:	fb                   	sti    
c001e4d4:	eb cf                	jmp    c001e4a5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e4d6:	a1 e8 0b 03 c0       	mov    eax,ds:0xc0030be8
c001e4db:	c7 05 ec 0b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030bec,0x0
c001e4e5:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001e4e9:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001e4ed:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001e4f1:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001e4f5:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e4f9:	50                   	push   eax
c001e4fa:	6a 20                	push   0x20
c001e4fc:	6a 00                	push   0x0
c001e4fe:	68 00 0c 03 c0       	push   0xc0030c00
c001e503:	e8 48 22 fe ff       	call   c0000750 <memset>
c001e508:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e50f:	e8 85 10 ff ff       	call   c000f599 <malloc>
c001e514:	83 c4 0c             	add    esp,0xc
c001e517:	89 c3                	mov    ebx,eax
c001e519:	ff 35 b0 0b 03 c0    	push   DWORD PTR ds:0xc0030bb0
c001e51f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e523:	50                   	push   eax
c001e524:	e8 a7 45 ff ff       	call   c0012ad0 <File::File(char const*, Process*)>
c001e529:	83 c4 10             	add    esp,0x10
c001e52c:	85 db                	test   ebx,ebx
c001e52e:	75 0a                	jne    c001e53a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001e530:	83 ec 0c             	sub    esp,0xc
c001e533:	68 a4 b9 02 c0       	push   0xc002b9a4
c001e538:	eb 3e                	jmp    c001e578 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e53a:	50                   	push   eax
c001e53b:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e53f:	50                   	push   eax
c001e540:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e544:	50                   	push   eax
c001e545:	53                   	push   ebx
c001e546:	e8 95 48 ff ff       	call   c0012de0 <File::stat(unsigned long long*, bool*)>
c001e54b:	83 c4 10             	add    esp,0x10
c001e54e:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001e553:	74 0a                	je     c001e55f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e555:	83 ec 0c             	sub    esp,0xc
c001e558:	68 b8 b9 02 c0       	push   0xc002b9b8
c001e55d:	eb 19                	jmp    c001e578 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e55f:	51                   	push   ecx
c001e560:	51                   	push   ecx
c001e561:	6a 01                	push   0x1
c001e563:	53                   	push   ebx
c001e564:	e8 cb 45 ff ff       	call   c0012b34 <File::open(FileOpenMode)>
c001e569:	83 c4 10             	add    esp,0x10
c001e56c:	85 c0                	test   eax,eax
c001e56e:	74 24                	je     c001e594 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001e570:	83 ec 0c             	sub    esp,0xc
c001e573:	68 d1 b9 02 c0       	push   0xc002b9d1
c001e578:	e8 54 b7 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c001e57d:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c001e582:	83 c4 10             	add    esp,0x10
c001e585:	48                   	dec    eax
c001e586:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c001e58b:	85 c0                	test   eax,eax
c001e58d:	75 01                	jne    c001e590 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001e58f:	fb                   	sti    
c001e590:	31 f6                	xor    esi,esi
c001e592:	eb 58                	jmp    c001e5ec <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001e594:	0f b7 ed             	movzx  ebp,bp
c001e597:	50                   	push   eax
c001e598:	0f b7 ff             	movzx  edi,di
c001e59b:	50                   	push   eax
c001e59c:	55                   	push   ebp
c001e59d:	57                   	push   edi
c001e59e:	e8 95 fd ff ff       	call   c001e338 <Vm::realToLinear(unsigned short, unsigned short)>
c001e5a3:	5a                   	pop    edx
c001e5a4:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e5a6:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e5aa:	51                   	push   ecx
c001e5ab:	50                   	push   eax
c001e5ac:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e5b0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e5b4:	53                   	push   ebx
c001e5b5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e5b8:	83 c4 14             	add    esp,0x14
c001e5bb:	53                   	push   ebx
c001e5bc:	e8 d1 45 ff ff       	call   c0012b92 <File::close()>
c001e5c1:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c001e5c6:	83 c4 10             	add    esp,0x10
c001e5c9:	48                   	dec    eax
c001e5ca:	c6 05 e5 0b 03 c0 00 	mov    BYTE PTR ds:0xc0030be5,0x0
c001e5d1:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c001e5d6:	85 c0                	test   eax,eax
c001e5d8:	75 01                	jne    c001e5db <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001e5da:	fb                   	sti    
c001e5db:	83 ec 0c             	sub    esp,0xc
c001e5de:	ff 35 e8 0b 03 c0    	push   DWORD PTR ds:0xc0030be8
c001e5e4:	e8 f5 f6 ff ff       	call   c001dcde <unblockTask(ThreadControlBlock*)>
c001e5e9:	83 c4 10             	add    esp,0x10
c001e5ec:	83 c4 2c             	add    esp,0x2c
c001e5ef:	89 f0                	mov    eax,esi
c001e5f1:	5b                   	pop    ebx
c001e5f2:	5e                   	pop    esi
c001e5f3:	5f                   	pop    edi
c001e5f4:	5d                   	pop    ebp
c001e5f5:	c3                   	ret    

c001e5f6 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e5f6:	57                   	push   edi
c001e5f7:	56                   	push   esi
c001e5f8:	53                   	push   ebx
c001e5f9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e5fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e601:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e605:	83 e8 06             	sub    eax,0x6
c001e608:	0f b7 c0             	movzx  eax,ax
c001e60b:	50                   	push   eax
c001e60c:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e611:	50                   	push   eax
c001e612:	e8 21 fd ff ff       	call   c001e338 <Vm::realToLinear(unsigned short, unsigned short)>
c001e617:	5a                   	pop    edx
c001e618:	5e                   	pop    esi
c001e619:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e61c:	8d 56 fa             	lea    edx,[esi-0x6]
c001e61f:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e625:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e628:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e62b:	83 c2 02             	add    edx,0x2
c001e62e:	66 89 10             	mov    WORD PTR [eax],dx
c001e631:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e634:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e638:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e63b:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e63f:	89 d6                	mov    esi,edx
c001e641:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e647:	66 81 e6 ff fd       	and    si,0xfdff
c001e64c:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e650:	74 07                	je     c001e659 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e652:	89 d6                	mov    esi,edx
c001e654:	66 81 ce 00 02       	or     si,0x200
c001e659:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e65d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e662:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e666:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e66e:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e671:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e679:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e67c:	5b                   	pop    ebx
c001e67d:	5e                   	pop    esi
c001e67e:	5f                   	pop    edi
c001e67f:	c3                   	ret    

c001e680 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e680:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e685:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e68a:	c1 e0 04             	shl    eax,0x4
c001e68d:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e690:	c3                   	ret    

c001e691 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e691:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e696:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e69b:	c1 e0 04             	shl    eax,0x4
c001e69e:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e6a2:	c3                   	ret    

c001e6a3 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e6a3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e6a8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e6ad:	c1 e0 04             	shl    eax,0x4
c001e6b0:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e6b3:	c3                   	ret    

c001e6b4 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e6b4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e6b9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e6be:	c1 e0 04             	shl    eax,0x4
c001e6c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e6c5:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e6c8:	c3                   	ret    

c001e6c9 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e6c9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e6ce:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e6d3:	c1 e0 04             	shl    eax,0x4
c001e6d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e6da:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e6de:	c3                   	ret    

c001e6df <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e6df:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e6e4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e6e9:	c1 e0 04             	shl    eax,0x4
c001e6ec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e6f0:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e6f3:	c3                   	ret    

c001e6f4 <Vm::faultHandler(regs*)>:
c001e6f4:	55                   	push   ebp
c001e6f5:	57                   	push   edi
c001e6f6:	56                   	push   esi
c001e6f7:	53                   	push   ebx
c001e6f8:	83 ec 1c             	sub    esp,0x1c
c001e6fb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e6ff:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001e702:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001e706:	0f b7 f8             	movzx  edi,ax
c001e709:	52                   	push   edx
c001e70a:	0f b7 c0             	movzx  eax,ax
c001e70d:	50                   	push   eax
c001e70e:	e8 25 fc ff ff       	call   c001e338 <Vm::realToLinear(unsigned short, unsigned short)>
c001e713:	5a                   	pop    edx
c001e714:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001e717:	59                   	pop    ecx
c001e718:	89 c1                	mov    ecx,eax
c001e71a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e71d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e721:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e726:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e72a:	0f b7 c5             	movzx  eax,bp
c001e72d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e731:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001e735:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e739:	e8 fa fb ff ff       	call   c001e338 <Vm::realToLinear(unsigned short, unsigned short)>
c001e73e:	5e                   	pop    esi
c001e73f:	be 06 00 00 00       	mov    esi,0x6
c001e744:	5a                   	pop    edx
c001e745:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001e74a:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001e74f:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001e752:	80 fa 9d             	cmp    dl,0x9d
c001e755:	0f 84 2c 02 00 00    	je     c001e987 <Vm::faultHandler(regs*)+0x293>
c001e75b:	0f 87 91 00 00 00    	ja     c001e7f2 <Vm::faultHandler(regs*)+0xfe>
c001e761:	80 fa 66             	cmp    dl,0x66
c001e764:	0f 84 98 01 00 00    	je     c001e902 <Vm::faultHandler(regs*)+0x20e>
c001e76a:	77 47                	ja     c001e7b3 <Vm::faultHandler(regs*)+0xbf>
c001e76c:	80 fa 36             	cmp    dl,0x36
c001e76f:	0f 84 80 01 00 00    	je     c001e8f5 <Vm::faultHandler(regs*)+0x201>
c001e775:	77 1a                	ja     c001e791 <Vm::faultHandler(regs*)+0x9d>
c001e777:	80 fa 26             	cmp    dl,0x26
c001e77a:	0f 84 4e 01 00 00    	je     c001e8ce <Vm::faultHandler(regs*)+0x1da>
c001e780:	80 fa 2e             	cmp    dl,0x2e
c001e783:	0f 85 e2 05 00 00    	jne    c001ed6b <Vm::faultHandler(regs*)+0x677>
c001e789:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e78c:	31 f6                	xor    esi,esi
c001e78e:	41                   	inc    ecx
c001e78f:	eb be                	jmp    c001e74f <Vm::faultHandler(regs*)+0x5b>
c001e791:	80 fa 64             	cmp    dl,0x64
c001e794:	0f 84 41 01 00 00    	je     c001e8db <Vm::faultHandler(regs*)+0x1e7>
c001e79a:	0f 87 48 01 00 00    	ja     c001e8e8 <Vm::faultHandler(regs*)+0x1f4>
c001e7a0:	80 fa 3e             	cmp    dl,0x3e
c001e7a3:	0f 85 c2 05 00 00    	jne    c001ed6b <Vm::faultHandler(regs*)+0x677>
c001e7a9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e7ac:	be 01 00 00 00       	mov    esi,0x1
c001e7b1:	eb db                	jmp    c001e78e <Vm::faultHandler(regs*)+0x9a>
c001e7b3:	80 fa 6d             	cmp    dl,0x6d
c001e7b6:	0f 84 ec 02 00 00    	je     c001eaa8 <Vm::faultHandler(regs*)+0x3b4>
c001e7bc:	77 17                	ja     c001e7d5 <Vm::faultHandler(regs*)+0xe1>
c001e7be:	80 fa 67             	cmp    dl,0x67
c001e7c1:	0f 84 48 01 00 00    	je     c001e90f <Vm::faultHandler(regs*)+0x21b>
c001e7c7:	80 fa 6c             	cmp    dl,0x6c
c001e7ca:	0f 84 69 02 00 00    	je     c001ea39 <Vm::faultHandler(regs*)+0x345>
c001e7d0:	e9 96 05 00 00       	jmp    c001ed6b <Vm::faultHandler(regs*)+0x677>
c001e7d5:	80 fa 6f             	cmp    dl,0x6f
c001e7d8:	0f 84 f4 03 00 00    	je     c001ebd2 <Vm::faultHandler(regs*)+0x4de>
c001e7de:	0f 82 59 03 00 00    	jb     c001eb3d <Vm::faultHandler(regs*)+0x449>
c001e7e4:	80 fa 9c             	cmp    dl,0x9c
c001e7e7:	0f 84 2f 01 00 00    	je     c001e91c <Vm::faultHandler(regs*)+0x228>
c001e7ed:	e9 79 05 00 00       	jmp    c001ed6b <Vm::faultHandler(regs*)+0x677>
c001e7f2:	80 fa ec             	cmp    dl,0xec
c001e7f5:	0f 84 14 05 00 00    	je     c001ed0f <Vm::faultHandler(regs*)+0x61b>
c001e7fb:	77 7b                	ja     c001e878 <Vm::faultHandler(regs*)+0x184>
c001e7fd:	80 fa e4             	cmp    dl,0xe4
c001e800:	0f 84 93 04 00 00    	je     c001ec99 <Vm::faultHandler(regs*)+0x5a5>
c001e806:	77 53                	ja     c001e85b <Vm::faultHandler(regs*)+0x167>
c001e808:	80 fa cd             	cmp    dl,0xcd
c001e80b:	0f 84 d9 01 00 00    	je     c001e9ea <Vm::faultHandler(regs*)+0x2f6>
c001e811:	80 fa cf             	cmp    dl,0xcf
c001e814:	0f 85 51 05 00 00    	jne    c001ed6b <Vm::faultHandler(regs*)+0x677>
c001e81a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001e81d:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001e820:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001e824:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001e827:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001e82b:	81 ca 00 02 02 00    	or     edx,0x20200
c001e831:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001e834:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001e838:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e83e:	66 c1 e8 09          	shr    ax,0x9
c001e842:	83 e0 01             	and    eax,0x1
c001e845:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e848:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e84b:	83 c0 06             	add    eax,0x6
c001e84e:	25 ff ff 00 00       	and    eax,0xffff
c001e853:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001e856:	e9 0c 05 00 00       	jmp    c001ed67 <Vm::faultHandler(regs*)+0x673>
c001e85b:	80 fa e6             	cmp    dl,0xe6
c001e85e:	0f 84 7f 04 00 00    	je     c001ece3 <Vm::faultHandler(regs*)+0x5ef>
c001e864:	0f 82 4b 04 00 00    	jb     c001ecb5 <Vm::faultHandler(regs*)+0x5c1>
c001e86a:	80 fa e7             	cmp    dl,0xe7
c001e86d:	0f 84 87 04 00 00    	je     c001ecfa <Vm::faultHandler(regs*)+0x606>
c001e873:	e9 f3 04 00 00       	jmp    c001ed6b <Vm::faultHandler(regs*)+0x677>
c001e878:	80 fa ef             	cmp    dl,0xef
c001e87b:	0f 84 d1 04 00 00    	je     c001ed52 <Vm::faultHandler(regs*)+0x65e>
c001e881:	77 28                	ja     c001e8ab <Vm::faultHandler(regs*)+0x1b7>
c001e883:	80 fa ed             	cmp    dl,0xed
c001e886:	0f 84 9f 04 00 00    	je     c001ed2b <Vm::faultHandler(regs*)+0x637>
c001e88c:	80 fa ee             	cmp    dl,0xee
c001e88f:	0f 85 d6 04 00 00    	jne    c001ed6b <Vm::faultHandler(regs*)+0x677>
c001e895:	50                   	push   eax
c001e896:	50                   	push   eax
c001e897:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001e89b:	50                   	push   eax
c001e89c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001e8a0:	50                   	push   eax
c001e8a1:	e8 5c fa ff ff       	call   c001e302 <Vm::outbv(unsigned short, unsigned char)>
c001e8a6:	e9 9f 04 00 00       	jmp    c001ed4a <Vm::faultHandler(regs*)+0x656>
c001e8ab:	80 fa fa             	cmp    dl,0xfa
c001e8ae:	0f 84 69 01 00 00    	je     c001ea1d <Vm::faultHandler(regs*)+0x329>
c001e8b4:	80 fa fb             	cmp    dl,0xfb
c001e8b7:	0f 84 6e 01 00 00    	je     c001ea2b <Vm::faultHandler(regs*)+0x337>
c001e8bd:	80 fa f3             	cmp    dl,0xf3
c001e8c0:	0f 85 a5 04 00 00    	jne    c001ed6b <Vm::faultHandler(regs*)+0x677>
c001e8c6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e8c9:	e9 c0 fe ff ff       	jmp    c001e78e <Vm::faultHandler(regs*)+0x9a>
c001e8ce:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e8d1:	be 02 00 00 00       	mov    esi,0x2
c001e8d6:	e9 b3 fe ff ff       	jmp    c001e78e <Vm::faultHandler(regs*)+0x9a>
c001e8db:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e8de:	be 03 00 00 00       	mov    esi,0x3
c001e8e3:	e9 a6 fe ff ff       	jmp    c001e78e <Vm::faultHandler(regs*)+0x9a>
c001e8e8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e8eb:	be 04 00 00 00       	mov    esi,0x4
c001e8f0:	e9 99 fe ff ff       	jmp    c001e78e <Vm::faultHandler(regs*)+0x9a>
c001e8f5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e8f8:	be 05 00 00 00       	mov    esi,0x5
c001e8fd:	e9 8c fe ff ff       	jmp    c001e78e <Vm::faultHandler(regs*)+0x9a>
c001e902:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e905:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001e90a:	e9 7f fe ff ff       	jmp    c001e78e <Vm::faultHandler(regs*)+0x9a>
c001e90f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e912:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001e917:	e9 72 fe ff ff       	jmp    c001e78e <Vm::faultHandler(regs*)+0x9a>
c001e91c:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e91f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001e923:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001e928:	74 30                	je     c001e95a <Vm::faultHandler(regs*)+0x266>
c001e92a:	83 e9 04             	sub    ecx,0x4
c001e92d:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001e933:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001e939:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001e93c:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001e93f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e945:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001e949:	0f 84 15 04 00 00    	je     c001ed64 <Vm::faultHandler(regs*)+0x670>
c001e94f:	80 ce 02             	or     dh,0x2
c001e952:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001e955:	e9 0a 04 00 00       	jmp    c001ed64 <Vm::faultHandler(regs*)+0x670>
c001e95a:	83 e9 02             	sub    ecx,0x2
c001e95d:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001e963:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001e966:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001e96a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e970:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001e974:	74 05                	je     c001e97b <Vm::faultHandler(regs*)+0x287>
c001e976:	80 ce 02             	or     dh,0x2
c001e979:	eb 03                	jmp    c001e97e <Vm::faultHandler(regs*)+0x28a>
c001e97b:	80 e6 fd             	and    dh,0xfd
c001e97e:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001e982:	e9 dd 03 00 00       	jmp    c001ed64 <Vm::faultHandler(regs*)+0x670>
c001e987:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001e98c:	74 2a                	je     c001e9b8 <Vm::faultHandler(regs*)+0x2c4>
c001e98e:	8b 10                	mov    edx,DWORD PTR [eax]
c001e990:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001e996:	81 ca 00 02 02 00    	or     edx,0x20200
c001e99c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001e99f:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9a1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e9a7:	c1 e8 09             	shr    eax,0x9
c001e9aa:	83 e0 01             	and    eax,0x1
c001e9ad:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e9b0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e9b3:	83 c0 04             	add    eax,0x4
c001e9b6:	eb 25                	jmp    c001e9dd <Vm::faultHandler(regs*)+0x2e9>
c001e9b8:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001e9bb:	81 ca 00 02 02 00    	or     edx,0x20200
c001e9c1:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001e9c4:	66 8b 00             	mov    ax,WORD PTR [eax]
c001e9c7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e9cd:	66 c1 e8 09          	shr    ax,0x9
c001e9d1:	83 e0 01             	and    eax,0x1
c001e9d4:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e9d7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e9da:	83 c0 02             	add    eax,0x2
c001e9dd:	25 ff ff 00 00       	and    eax,0xffff
c001e9e2:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001e9e5:	e9 7a 03 00 00       	jmp    c001ed64 <Vm::faultHandler(regs*)+0x670>
c001e9ea:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001e9ee:	3c ee                	cmp    al,0xee
c001e9f0:	75 10                	jne    c001ea02 <Vm::faultHandler(regs*)+0x30e>
c001e9f2:	83 ec 0c             	sub    esp,0xc
c001e9f5:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001e9f8:	e8 a2 f9 ff ff       	call   c001e39f <Vm::mainloop3(unsigned long)>
c001e9fd:	e9 4b 03 00 00       	jmp    c001ed4d <Vm::faultHandler(regs*)+0x659>
c001ea02:	83 ec 0c             	sub    esp,0xc
c001ea05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ea09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea0d:	51                   	push   ecx
c001ea0e:	50                   	push   eax
c001ea0f:	53                   	push   ebx
c001ea10:	e8 e1 fb ff ff       	call   c001e5f6 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001ea15:	83 c4 20             	add    esp,0x20
c001ea18:	e9 4a 03 00 00       	jmp    c001ed67 <Vm::faultHandler(regs*)+0x673>
c001ea1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea22:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ea26:	e9 39 03 00 00       	jmp    c001ed64 <Vm::faultHandler(regs*)+0x670>
c001ea2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea30:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001ea34:	e9 2b 03 00 00       	jmp    c001ed64 <Vm::faultHandler(regs*)+0x670>
c001ea39:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ea3c:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ea41:	74 2b                	je     c001ea6e <Vm::faultHandler(regs*)+0x37a>
c001ea43:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001ea4a:	76 22                	jbe    c001ea6e <Vm::faultHandler(regs*)+0x37a>
c001ea4c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ea50:	50                   	push   eax
c001ea51:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ea55:	50                   	push   eax
c001ea56:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ea5a:	50                   	push   eax
c001ea5b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ea5f:	50                   	push   eax
c001ea60:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ea64:	50                   	push   eax
c001ea65:	6a 6c                	push   0x6c
c001ea67:	6a 6c                	push   0x6c
c001ea69:	e9 b9 01 00 00       	jmp    c001ec27 <Vm::faultHandler(regs*)+0x533>
c001ea6e:	83 ec 0c             	sub    esp,0xc
c001ea71:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ea75:	0f b7 f6             	movzx  esi,si
c001ea78:	50                   	push   eax
c001ea79:	e8 71 f8 ff ff       	call   c001e2ef <Vm::inbv(unsigned short)>
c001ea7e:	83 c4 0c             	add    esp,0xc
c001ea81:	0f b6 c0             	movzx  eax,al
c001ea84:	50                   	push   eax
c001ea85:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001ea89:	50                   	push   eax
c001ea8a:	56                   	push   esi
c001ea8b:	e8 24 fc ff ff       	call   c001e6b4 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001ea90:	83 c4 10             	add    esp,0x10
c001ea93:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ea96:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ea9a:	74 03                	je     c001ea9f <Vm::faultHandler(regs*)+0x3ab>
c001ea9c:	48                   	dec    eax
c001ea9d:	eb 01                	jmp    c001eaa0 <Vm::faultHandler(regs*)+0x3ac>
c001ea9f:	40                   	inc    eax
c001eaa0:	0f b7 c0             	movzx  eax,ax
c001eaa3:	e9 8d 00 00 00       	jmp    c001eb35 <Vm::faultHandler(regs*)+0x441>
c001eaa8:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001eaab:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001eaae:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001eab3:	74 29                	je     c001eade <Vm::faultHandler(regs*)+0x3ea>
c001eab5:	3d ff ff 00 00       	cmp    eax,0xffff
c001eaba:	76 22                	jbe    c001eade <Vm::faultHandler(regs*)+0x3ea>
c001eabc:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001eac0:	50                   	push   eax
c001eac1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001eac5:	50                   	push   eax
c001eac6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eaca:	50                   	push   eax
c001eacb:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001eacf:	50                   	push   eax
c001ead0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ead4:	50                   	push   eax
c001ead5:	6a 6d                	push   0x6d
c001ead7:	6a 6d                	push   0x6d
c001ead9:	e9 49 01 00 00       	jmp    c001ec27 <Vm::faultHandler(regs*)+0x533>
c001eade:	0f b7 c8             	movzx  ecx,ax
c001eae1:	0f b7 f6             	movzx  esi,si
c001eae4:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001eae7:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eaec:	74 20                	je     c001eb0e <Vm::faultHandler(regs*)+0x41a>
c001eaee:	ed                   	in     eax,dx
c001eaef:	55                   	push   ebp
c001eaf0:	50                   	push   eax
c001eaf1:	51                   	push   ecx
c001eaf2:	56                   	push   esi
c001eaf3:	e8 e7 fb ff ff       	call   c001e6df <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001eaf8:	83 c4 10             	add    esp,0x10
c001eafb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001eafe:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001eb02:	74 05                	je     c001eb09 <Vm::faultHandler(regs*)+0x415>
c001eb04:	83 e8 04             	sub    eax,0x4
c001eb07:	eb 27                	jmp    c001eb30 <Vm::faultHandler(regs*)+0x43c>
c001eb09:	83 c0 04             	add    eax,0x4
c001eb0c:	eb 22                	jmp    c001eb30 <Vm::faultHandler(regs*)+0x43c>
c001eb0e:	66 ed                	in     ax,dx
c001eb10:	0f b7 c0             	movzx  eax,ax
c001eb13:	57                   	push   edi
c001eb14:	50                   	push   eax
c001eb15:	51                   	push   ecx
c001eb16:	56                   	push   esi
c001eb17:	e8 ad fb ff ff       	call   c001e6c9 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001eb1c:	83 c4 10             	add    esp,0x10
c001eb1f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001eb22:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001eb26:	74 05                	je     c001eb2d <Vm::faultHandler(regs*)+0x439>
c001eb28:	83 e8 02             	sub    eax,0x2
c001eb2b:	eb 03                	jmp    c001eb30 <Vm::faultHandler(regs*)+0x43c>
c001eb2d:	83 c0 02             	add    eax,0x2
c001eb30:	25 ff ff 00 00       	and    eax,0xffff
c001eb35:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001eb38:	e9 27 02 00 00       	jmp    c001ed64 <Vm::faultHandler(regs*)+0x670>
c001eb3d:	8d 46 ff             	lea    eax,[esi-0x1]
c001eb40:	3c 05                	cmp    al,0x5
c001eb42:	77 24                	ja     c001eb68 <Vm::faultHandler(regs*)+0x474>
c001eb44:	0f b6 c0             	movzx  eax,al
c001eb47:	ff 24 85 44 ba 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd45bc]
c001eb4e:	0f b7 fd             	movzx  edi,bp
c001eb51:	eb 15                	jmp    c001eb68 <Vm::faultHandler(regs*)+0x474>
c001eb53:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001eb57:	eb 0f                	jmp    c001eb68 <Vm::faultHandler(regs*)+0x474>
c001eb59:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001eb5d:	eb 09                	jmp    c001eb68 <Vm::faultHandler(regs*)+0x474>
c001eb5f:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001eb63:	eb 03                	jmp    c001eb68 <Vm::faultHandler(regs*)+0x474>
c001eb65:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001eb68:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001eb6b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001eb70:	74 29                	je     c001eb9b <Vm::faultHandler(regs*)+0x4a7>
c001eb72:	3d ff ff 00 00       	cmp    eax,0xffff
c001eb77:	76 22                	jbe    c001eb9b <Vm::faultHandler(regs*)+0x4a7>
c001eb79:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001eb7d:	50                   	push   eax
c001eb7e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001eb82:	50                   	push   eax
c001eb83:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eb87:	50                   	push   eax
c001eb88:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001eb8c:	50                   	push   eax
c001eb8d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eb91:	50                   	push   eax
c001eb92:	6a 6e                	push   0x6e
c001eb94:	6a 6e                	push   0x6e
c001eb96:	e9 8c 00 00 00       	jmp    c001ec27 <Vm::faultHandler(regs*)+0x533>
c001eb9b:	0f b7 c0             	movzx  eax,ax
c001eb9e:	52                   	push   edx
c001eb9f:	52                   	push   edx
c001eba0:	50                   	push   eax
c001eba1:	57                   	push   edi
c001eba2:	e8 d9 fa ff ff       	call   c001e680 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001eba7:	59                   	pop    ecx
c001eba8:	0f b6 c0             	movzx  eax,al
c001ebab:	5e                   	pop    esi
c001ebac:	50                   	push   eax
c001ebad:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ebb1:	50                   	push   eax
c001ebb2:	e8 4b f7 ff ff       	call   c001e302 <Vm::outbv(unsigned short, unsigned char)>
c001ebb7:	83 c4 10             	add    esp,0x10
c001ebba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ebbd:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ebc1:	74 03                	je     c001ebc6 <Vm::faultHandler(regs*)+0x4d2>
c001ebc3:	48                   	dec    eax
c001ebc4:	eb 01                	jmp    c001ebc7 <Vm::faultHandler(regs*)+0x4d3>
c001ebc6:	40                   	inc    eax
c001ebc7:	0f b7 c0             	movzx  eax,ax
c001ebca:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ebcd:	e9 92 01 00 00       	jmp    c001ed64 <Vm::faultHandler(regs*)+0x670>
c001ebd2:	8d 46 ff             	lea    eax,[esi-0x1]
c001ebd5:	3c 05                	cmp    al,0x5
c001ebd7:	77 1f                	ja     c001ebf8 <Vm::faultHandler(regs*)+0x504>
c001ebd9:	0f b6 c0             	movzx  eax,al
c001ebdc:	ff 24 85 5c ba 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd45a4]
c001ebe3:	89 ef                	mov    edi,ebp
c001ebe5:	eb 11                	jmp    c001ebf8 <Vm::faultHandler(regs*)+0x504>
c001ebe7:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001ebea:	eb 0c                	jmp    c001ebf8 <Vm::faultHandler(regs*)+0x504>
c001ebec:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001ebef:	eb 07                	jmp    c001ebf8 <Vm::faultHandler(regs*)+0x504>
c001ebf1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001ebf4:	eb 02                	jmp    c001ebf8 <Vm::faultHandler(regs*)+0x504>
c001ebf6:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001ebf8:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001ebfb:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ec00:	74 37                	je     c001ec39 <Vm::faultHandler(regs*)+0x545>
c001ec02:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001ec08:	76 2f                	jbe    c001ec39 <Vm::faultHandler(regs*)+0x545>
c001ec0a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ec0e:	50                   	push   eax
c001ec0f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ec13:	50                   	push   eax
c001ec14:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ec18:	50                   	push   eax
c001ec19:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ec1d:	50                   	push   eax
c001ec1e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ec22:	50                   	push   eax
c001ec23:	6a 6f                	push   0x6f
c001ec25:	6a 6f                	push   0x6f
c001ec27:	68 ea b9 02 c0       	push   0xc002b9ea
c001ec2c:	e8 40 39 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c001ec31:	83 c4 20             	add    esp,0x20
c001ec34:	e9 86 01 00 00       	jmp    c001edbf <Vm::faultHandler(regs*)+0x6cb>
c001ec39:	0f b7 d7             	movzx  edx,di
c001ec3c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001ec3f:	0f b7 c6             	movzx  eax,si
c001ec42:	81 e1 00 04 00 00    	and    ecx,0x400
c001ec48:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001ec4b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ec50:	74 1d                	je     c001ec6f <Vm::faultHandler(regs*)+0x57b>
c001ec52:	55                   	push   ebp
c001ec53:	55                   	push   ebp
c001ec54:	50                   	push   eax
c001ec55:	52                   	push   edx
c001ec56:	e8 48 fa ff ff       	call   c001e6a3 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001ec5b:	83 c4 10             	add    esp,0x10
c001ec5e:	89 fa                	mov    edx,edi
c001ec60:	ef                   	out    dx,eax
c001ec61:	85 c9                	test   ecx,ecx
c001ec63:	74 05                	je     c001ec6a <Vm::faultHandler(regs*)+0x576>
c001ec65:	83 ee 04             	sub    esi,0x4
c001ec68:	eb 21                	jmp    c001ec8b <Vm::faultHandler(regs*)+0x597>
c001ec6a:	83 c6 04             	add    esi,0x4
c001ec6d:	eb 1c                	jmp    c001ec8b <Vm::faultHandler(regs*)+0x597>
c001ec6f:	55                   	push   ebp
c001ec70:	55                   	push   ebp
c001ec71:	50                   	push   eax
c001ec72:	52                   	push   edx
c001ec73:	e8 19 fa ff ff       	call   c001e691 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001ec78:	83 c4 10             	add    esp,0x10
c001ec7b:	89 fa                	mov    edx,edi
c001ec7d:	66 ef                	out    dx,ax
c001ec7f:	85 c9                	test   ecx,ecx
c001ec81:	74 05                	je     c001ec88 <Vm::faultHandler(regs*)+0x594>
c001ec83:	83 ee 02             	sub    esi,0x2
c001ec86:	eb 03                	jmp    c001ec8b <Vm::faultHandler(regs*)+0x597>
c001ec88:	83 c6 02             	add    esi,0x2
c001ec8b:	81 e6 ff ff 00 00    	and    esi,0xffff
c001ec91:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001ec94:	e9 cb 00 00 00       	jmp    c001ed64 <Vm::faultHandler(regs*)+0x670>
c001ec99:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001eca0:	83 ec 0c             	sub    esp,0xc
c001eca3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eca7:	50                   	push   eax
c001eca8:	e8 42 f6 ff ff       	call   c001e2ef <Vm::inbv(unsigned short)>
c001ecad:	0f b6 c0             	movzx  eax,al
c001ecb0:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ecb3:	eb 3f                	jmp    c001ecf4 <Vm::faultHandler(regs*)+0x600>
c001ecb5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ecba:	74 07                	je     c001ecc3 <Vm::faultHandler(regs*)+0x5cf>
c001ecbc:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ecc0:	ed                   	in     eax,dx
c001ecc1:	eb 14                	jmp    c001ecd7 <Vm::faultHandler(regs*)+0x5e3>
c001ecc3:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001ecc6:	66 31 f6             	xor    si,si
c001ecc9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001eccc:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ecd0:	66 ed                	in     ax,dx
c001ecd2:	0f b7 c0             	movzx  eax,ax
c001ecd5:	09 f0                	or     eax,esi
c001ecd7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ecda:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ecde:	e9 84 00 00 00       	jmp    c001ed67 <Vm::faultHandler(regs*)+0x673>
c001ece3:	52                   	push   edx
c001ece4:	52                   	push   edx
c001ece5:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ece9:	50                   	push   eax
c001ecea:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ecee:	50                   	push   eax
c001ecef:	e8 0e f6 ff ff       	call   c001e302 <Vm::outbv(unsigned short, unsigned char)>
c001ecf4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ecf8:	eb 53                	jmp    c001ed4d <Vm::faultHandler(regs*)+0x659>
c001ecfa:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ecfd:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ed01:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ed06:	74 03                	je     c001ed0b <Vm::faultHandler(regs*)+0x617>
c001ed08:	ef                   	out    dx,eax
c001ed09:	eb cf                	jmp    c001ecda <Vm::faultHandler(regs*)+0x5e6>
c001ed0b:	66 ef                	out    dx,ax
c001ed0d:	eb cb                	jmp    c001ecda <Vm::faultHandler(regs*)+0x5e6>
c001ed0f:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ed16:	83 ec 0c             	sub    esp,0xc
c001ed19:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ed1d:	50                   	push   eax
c001ed1e:	e8 cc f5 ff ff       	call   c001e2ef <Vm::inbv(unsigned short)>
c001ed23:	0f b6 c0             	movzx  eax,al
c001ed26:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ed29:	eb 1f                	jmp    c001ed4a <Vm::faultHandler(regs*)+0x656>
c001ed2b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ed2e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ed33:	74 03                	je     c001ed38 <Vm::faultHandler(regs*)+0x644>
c001ed35:	ed                   	in     eax,dx
c001ed36:	eb 0d                	jmp    c001ed45 <Vm::faultHandler(regs*)+0x651>
c001ed38:	66 ed                	in     ax,dx
c001ed3a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001ed3d:	0f b7 c0             	movzx  eax,ax
c001ed40:	66 31 d2             	xor    dx,dx
c001ed43:	09 d0                	or     eax,edx
c001ed45:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ed48:	eb 1a                	jmp    c001ed64 <Vm::faultHandler(regs*)+0x670>
c001ed4a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ed4d:	83 c4 10             	add    esp,0x10
c001ed50:	eb 15                	jmp    c001ed67 <Vm::faultHandler(regs*)+0x673>
c001ed52:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ed55:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ed58:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ed5d:	74 03                	je     c001ed62 <Vm::faultHandler(regs*)+0x66e>
c001ed5f:	ef                   	out    dx,eax
c001ed60:	eb 02                	jmp    c001ed64 <Vm::faultHandler(regs*)+0x670>
c001ed62:	66 ef                	out    dx,ax
c001ed64:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ed67:	b0 01                	mov    al,0x1
c001ed69:	eb 56                	jmp    c001edc1 <Vm::faultHandler(regs*)+0x6cd>
c001ed6b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ed6f:	50                   	push   eax
c001ed70:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ed74:	50                   	push   eax
c001ed75:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ed79:	50                   	push   eax
c001ed7a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ed7e:	50                   	push   eax
c001ed7f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ed83:	50                   	push   eax
c001ed84:	52                   	push   edx
c001ed85:	52                   	push   edx
c001ed86:	68 17 ba 02 c0       	push   0xc002ba17
c001ed8b:	e8 e1 37 ff ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c001ed90:	83 c4 20             	add    esp,0x20
c001ed93:	83 ec 0c             	sub    esp,0xc
c001ed96:	6a 60                	push   0x60
c001ed98:	e8 52 f5 ff ff       	call   c001e2ef <Vm::inbv(unsigned short)>
c001ed9d:	83 c4 10             	add    esp,0x10
c001eda0:	3c 1c                	cmp    al,0x1c
c001eda2:	74 04                	je     c001eda8 <Vm::faultHandler(regs*)+0x6b4>
c001eda4:	3c 5a                	cmp    al,0x5a
c001eda6:	75 eb                	jne    c001ed93 <Vm::faultHandler(regs*)+0x69f>
c001eda8:	3c 5a                	cmp    al,0x5a
c001edaa:	74 04                	je     c001edb0 <Vm::faultHandler(regs*)+0x6bc>
c001edac:	3c 1c                	cmp    al,0x1c
c001edae:	75 0f                	jne    c001edbf <Vm::faultHandler(regs*)+0x6cb>
c001edb0:	83 ec 0c             	sub    esp,0xc
c001edb3:	6a 60                	push   0x60
c001edb5:	e8 35 f5 ff ff       	call   c001e2ef <Vm::inbv(unsigned short)>
c001edba:	83 c4 10             	add    esp,0x10
c001edbd:	eb e9                	jmp    c001eda8 <Vm::faultHandler(regs*)+0x6b4>
c001edbf:	31 c0                	xor    eax,eax
c001edc1:	83 c4 1c             	add    esp,0x1c
c001edc4:	5b                   	pop    ebx
c001edc5:	5e                   	pop    esi
c001edc6:	5f                   	pop    edi
c001edc7:	5d                   	pop    ebp
c001edc8:	c3                   	ret    

c001edc9 <Vm::fpuInternalTo32(unsigned long long)>:
c001edc9:	57                   	push   edi
c001edca:	56                   	push   esi
c001edcb:	53                   	push   ebx
c001edcc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001edd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edd4:	89 d6                	mov    esi,edx
c001edd6:	89 d7                	mov    edi,edx
c001edd8:	89 c1                	mov    ecx,eax
c001edda:	c1 ef 14             	shr    edi,0x14
c001eddd:	89 d3                	mov    ebx,edx
c001eddf:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001ede5:	31 d2                	xor    edx,edx
c001ede7:	89 f8                	mov    eax,edi
c001ede9:	81 e6 00 00 00 80    	and    esi,0x80000000
c001edef:	bf ff 00 00 00       	mov    edi,0xff
c001edf4:	05 80 fc ff ff       	add    eax,0xfffffc80
c001edf9:	83 d2 ff             	adc    edx,0xffffffff
c001edfc:	39 c7                	cmp    edi,eax
c001edfe:	bf 00 00 00 00       	mov    edi,0x0
c001ee03:	19 d7                	sbb    edi,edx
c001ee05:	72 15                	jb     c001ee1c <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001ee07:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001ee0b:	c1 e0 17             	shl    eax,0x17
c001ee0e:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001ee14:	09 f1                	or     ecx,esi
c001ee16:	09 c1                	or     ecx,eax
c001ee18:	89 cf                	mov    edi,ecx
c001ee1a:	eb 02                	jmp    c001ee1e <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001ee1c:	31 ff                	xor    edi,edi
c001ee1e:	89 f8                	mov    eax,edi
c001ee20:	5b                   	pop    ebx
c001ee21:	5e                   	pop    esi
c001ee22:	5f                   	pop    edi
c001ee23:	c3                   	ret    

c001ee24 <Vm::fpuInternalTo64(unsigned long long)>:
c001ee24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ee2c:	c3                   	ret    

c001ee2d <Vm::fpu32ToInternal(unsigned int)>:
c001ee2d:	57                   	push   edi
c001ee2e:	31 ff                	xor    edi,edi
c001ee30:	56                   	push   esi
c001ee31:	53                   	push   ebx
c001ee32:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ee36:	89 cb                	mov    ebx,ecx
c001ee38:	89 ce                	mov    esi,ecx
c001ee3a:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001ee40:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001ee46:	c1 e9 17             	shr    ecx,0x17
c001ee49:	89 f0                	mov    eax,esi
c001ee4b:	0f b6 d1             	movzx  edx,cl
c001ee4e:	81 c2 80 03 00 00    	add    edx,0x380
c001ee54:	89 d1                	mov    ecx,edx
c001ee56:	89 fa                	mov    edx,edi
c001ee58:	c1 e1 14             	shl    ecx,0x14
c001ee5b:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001ee5f:	c1 e0 1d             	shl    eax,0x1d
c001ee62:	89 d7                	mov    edi,edx
c001ee64:	89 c6                	mov    esi,eax
c001ee66:	89 ca                	mov    edx,ecx
c001ee68:	89 f0                	mov    eax,esi
c001ee6a:	09 fa                	or     edx,edi
c001ee6c:	09 da                	or     edx,ebx
c001ee6e:	5b                   	pop    ebx
c001ee6f:	5e                   	pop    esi
c001ee70:	5f                   	pop    edi
c001ee71:	c3                   	ret    

c001ee72 <Vm::fpu64ToInternal(unsigned long long)>:
c001ee72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee76:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ee7a:	c3                   	ret    

c001ee7b <Vm::fpuFloatToLong(unsigned long long)>:
c001ee7b:	57                   	push   edi
c001ee7c:	31 c0                	xor    eax,eax
c001ee7e:	56                   	push   esi
c001ee7f:	31 d2                	xor    edx,edx
c001ee81:	53                   	push   ebx
c001ee82:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ee86:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ee8a:	89 d9                	mov    ecx,ebx
c001ee8c:	c1 e9 14             	shr    ecx,0x14
c001ee8f:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001ee95:	89 cf                	mov    edi,ecx
c001ee97:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001ee9d:	78 33                	js     c001eed2 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ee9f:	89 d9                	mov    ecx,ebx
c001eea1:	89 f0                	mov    eax,esi
c001eea3:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001eea9:	81 c9 00 00 10 00    	or     ecx,0x100000
c001eeaf:	89 ca                	mov    edx,ecx
c001eeb1:	b9 34 00 00 00       	mov    ecx,0x34
c001eeb6:	29 f9                	sub    ecx,edi
c001eeb8:	0f ad d0             	shrd   eax,edx,cl
c001eebb:	d3 fa                	sar    edx,cl
c001eebd:	f6 c1 20             	test   cl,0x20
c001eec0:	74 05                	je     c001eec7 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001eec2:	89 d0                	mov    eax,edx
c001eec4:	c1 fa 1f             	sar    edx,0x1f
c001eec7:	85 db                	test   ebx,ebx
c001eec9:	79 07                	jns    c001eed2 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001eecb:	f7 d8                	neg    eax
c001eecd:	83 d2 00             	adc    edx,0x0
c001eed0:	f7 da                	neg    edx
c001eed2:	5b                   	pop    ebx
c001eed3:	5e                   	pop    esi
c001eed4:	5f                   	pop    edi
c001eed5:	c3                   	ret    

c001eed6 <Vm::fpuULongToFloat(unsigned long long)>:
c001eed6:	57                   	push   edi
c001eed7:	31 c9                	xor    ecx,ecx
c001eed9:	56                   	push   esi
c001eeda:	53                   	push   ebx
c001eedb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001eedf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001eee3:	0f ba e7 14          	bt     edi,0x14
c001eee7:	72 07                	jb     c001eef0 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001eee9:	01 f6                	add    esi,esi
c001eeeb:	11 ff                	adc    edi,edi
c001eeed:	41                   	inc    ecx
c001eeee:	eb f3                	jmp    c001eee3 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001eef0:	89 fa                	mov    edx,edi
c001eef2:	89 f0                	mov    eax,esi
c001eef4:	bb 33 04 00 00       	mov    ebx,0x433
c001eef9:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001eeff:	29 cb                	sub    ebx,ecx
c001ef01:	89 d9                	mov    ecx,ebx
c001ef03:	5b                   	pop    ebx
c001ef04:	c1 e1 14             	shl    ecx,0x14
c001ef07:	5e                   	pop    esi
c001ef08:	09 ca                	or     edx,ecx
c001ef0a:	5f                   	pop    edi
c001ef0b:	c3                   	ret    

c001ef0c <Vm::fpuLongToFloat(long long)>:
c001ef0c:	56                   	push   esi
c001ef0d:	31 c0                	xor    eax,eax
c001ef0f:	53                   	push   ebx
c001ef10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ef14:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ef18:	39 c8                	cmp    eax,ecx
c001ef1a:	19 d8                	sbb    eax,ebx
c001ef1c:	7d 04                	jge    c001ef22 <Vm::fpuLongToFloat(long long)+0x16>
c001ef1e:	31 f6                	xor    esi,esi
c001ef20:	eb 0c                	jmp    c001ef2e <Vm::fpuLongToFloat(long long)+0x22>
c001ef22:	f7 d9                	neg    ecx
c001ef24:	be 01 00 00 00       	mov    esi,0x1
c001ef29:	83 d3 00             	adc    ebx,0x0
c001ef2c:	f7 db                	neg    ebx
c001ef2e:	31 c0                	xor    eax,eax
c001ef30:	0f ba e3 14          	bt     ebx,0x14
c001ef34:	72 07                	jb     c001ef3d <Vm::fpuLongToFloat(long long)+0x31>
c001ef36:	01 c9                	add    ecx,ecx
c001ef38:	11 db                	adc    ebx,ebx
c001ef3a:	40                   	inc    eax
c001ef3b:	eb f3                	jmp    c001ef30 <Vm::fpuLongToFloat(long long)+0x24>
c001ef3d:	ba 33 04 00 00       	mov    edx,0x433
c001ef42:	29 c2                	sub    edx,eax
c001ef44:	89 c8                	mov    eax,ecx
c001ef46:	c1 e2 14             	shl    edx,0x14
c001ef49:	89 d9                	mov    ecx,ebx
c001ef4b:	89 f3                	mov    ebx,esi
c001ef4d:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001ef53:	09 ca                	or     edx,ecx
c001ef55:	84 db                	test   bl,bl
c001ef57:	74 06                	je     c001ef5f <Vm::fpuLongToFloat(long long)+0x53>
c001ef59:	81 ca 00 00 00 80    	or     edx,0x80000000
c001ef5f:	5b                   	pop    ebx
c001ef60:	5e                   	pop    esi
c001ef61:	c3                   	ret    

c001ef62 <Vm::fpuGet0()>:
c001ef62:	31 c0                	xor    eax,eax
c001ef64:	31 d2                	xor    edx,edx
c001ef66:	c3                   	ret    

c001ef67 <Vm::fpuGet1()>:
c001ef67:	b8 01 00 00 00       	mov    eax,0x1
c001ef6c:	31 d2                	xor    edx,edx
c001ef6e:	c3                   	ret    

c001ef6f <Vm::fpuGetPi()>:
c001ef6f:	b8 03 00 00 00       	mov    eax,0x3
c001ef74:	31 d2                	xor    edx,edx
c001ef76:	c3                   	ret    

c001ef77 <Vm::fpuGetLog2E()>:
c001ef77:	83 ec 18             	sub    esp,0x18
c001ef7a:	68 74 ba 02 c0       	push   0xc002ba74
c001ef7f:	e8 4d ad ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c001ef84:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ef89:	31 d2                	xor    edx,edx
c001ef8b:	83 c4 1c             	add    esp,0x1c
c001ef8e:	c3                   	ret    

c001ef8f <Vm::fpuGetLogE2()>:
c001ef8f:	83 ec 18             	sub    esp,0x18
c001ef92:	68 80 ba 02 c0       	push   0xc002ba80
c001ef97:	e8 35 ad ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c001ef9c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001efa1:	31 d2                	xor    edx,edx
c001efa3:	83 c4 1c             	add    esp,0x1c
c001efa6:	c3                   	ret    

c001efa7 <Vm::fpuGetLog210()>:
c001efa7:	83 ec 18             	sub    esp,0x18
c001efaa:	68 8c ba 02 c0       	push   0xc002ba8c
c001efaf:	e8 1d ad ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c001efb4:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001efb9:	31 d2                	xor    edx,edx
c001efbb:	83 c4 1c             	add    esp,0x1c
c001efbe:	c3                   	ret    

c001efbf <Vm::fpuGetLog102()>:
c001efbf:	83 ec 18             	sub    esp,0x18
c001efc2:	68 99 ba 02 c0       	push   0xc002ba99
c001efc7:	e8 05 ad ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c001efcc:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001efd1:	31 d2                	xor    edx,edx
c001efd3:	83 c4 1c             	add    esp,0x1c
c001efd6:	c3                   	ret    

c001efd7 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001efd7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001efdb:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001efdf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001efe3:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001efe7:	0f 92 c0             	setb   al
c001efea:	c3                   	ret    

c001efeb <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001efeb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001efef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eff3:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001eff7:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001effb:	09 c2                	or     edx,eax
c001effd:	0f 94 c0             	sete   al
c001f000:	c3                   	ret    

c001f001 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f001:	57                   	push   edi
c001f002:	56                   	push   esi
c001f003:	53                   	push   ebx
c001f004:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f008:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f00c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f010:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f014:	57                   	push   edi
c001f015:	56                   	push   esi
c001f016:	53                   	push   ebx
c001f017:	51                   	push   ecx
c001f018:	e8 ce ff ff ff       	call   c001efeb <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f01d:	83 c4 10             	add    esp,0x10
c001f020:	88 c2                	mov    dl,al
c001f022:	31 c0                	xor    eax,eax
c001f024:	84 d2                	test   dl,dl
c001f026:	75 0c                	jne    c001f034 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f028:	57                   	push   edi
c001f029:	56                   	push   esi
c001f02a:	53                   	push   ebx
c001f02b:	51                   	push   ecx
c001f02c:	e8 a6 ff ff ff       	call   c001efd7 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f031:	83 c4 10             	add    esp,0x10
c001f034:	83 e0 01             	and    eax,0x1
c001f037:	5b                   	pop    ebx
c001f038:	88 c1                	mov    cl,al
c001f03a:	83 e2 01             	and    edx,0x1
c001f03d:	a0 21 0c 03 c0       	mov    al,ds:0xc0030c21
c001f042:	c1 e2 06             	shl    edx,0x6
c001f045:	83 e0 ba             	and    eax,0xffffffba
c001f048:	5e                   	pop    esi
c001f049:	09 c8                	or     eax,ecx
c001f04b:	5f                   	pop    edi
c001f04c:	09 d0                	or     eax,edx
c001f04e:	a2 21 0c 03 c0       	mov    ds:0xc0030c21,al
c001f053:	c3                   	ret    

c001f054 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f054:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f058:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f05c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f060:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f064:	c3                   	ret    

c001f065 <Vm::fpuAbs(unsigned long long)>:
c001f065:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f069:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f06d:	c3                   	ret    

c001f06e <Vm::fpuChs(unsigned long long)>:
c001f06e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f072:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f076:	f7 d8                	neg    eax
c001f078:	83 d2 00             	adc    edx,0x0
c001f07b:	f7 da                	neg    edx
c001f07d:	c3                   	ret    

c001f07e <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f07e:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f082:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f087:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f08b:	eb c7                	jmp    c001f054 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f08d <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f08d:	53                   	push   ebx
c001f08e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f092:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f096:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f09a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f09e:	0f af ca             	imul   ecx,edx
c001f0a1:	0f af d8             	imul   ebx,eax
c001f0a4:	f7 e2                	mul    edx
c001f0a6:	01 d9                	add    ecx,ebx
c001f0a8:	5b                   	pop    ebx
c001f0a9:	01 ca                	add    edx,ecx
c001f0ab:	c3                   	ret    

c001f0ac <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f0ac:	83 ec 0c             	sub    esp,0xc
c001f0af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0bf:	e8 e0 74 00 00       	call   c00265a4 <__udivdi3>
c001f0c4:	83 c4 1c             	add    esp,0x1c
c001f0c7:	c3                   	ret    

c001f0c8 <Vm::fpuSquare(unsigned long long)>:
c001f0c8:	50                   	push   eax
c001f0c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f0cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f0d1:	52                   	push   edx
c001f0d2:	50                   	push   eax
c001f0d3:	52                   	push   edx
c001f0d4:	50                   	push   eax
c001f0d5:	e8 b3 ff ff ff       	call   c001f08d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f0da:	83 c4 14             	add    esp,0x14
c001f0dd:	c3                   	ret    

c001f0de <Vm::fpuGetReg(int)>:
c001f0de:	83 ec 0c             	sub    esp,0xc
c001f0e1:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f0e6:	76 10                	jbe    c001f0f8 <Vm::fpuGetReg(int)+0x1a>
c001f0e8:	83 ec 0c             	sub    esp,0xc
c001f0eb:	68 a6 ba 02 c0       	push   0xc002baa6
c001f0f0:	e8 dc ab ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c001f0f5:	83 c4 10             	add    esp,0x10
c001f0f8:	a0 21 0c 03 c0       	mov    al,ds:0xc0030c21
c001f0fd:	b9 08 00 00 00       	mov    ecx,0x8
c001f102:	c0 e8 03             	shr    al,0x3
c001f105:	83 e0 07             	and    eax,0x7
c001f108:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f10c:	99                   	cdq    
c001f10d:	f7 f9                	idiv   ecx
c001f10f:	8b 04 d5 24 0c 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcf3dc]
c001f116:	8b 14 d5 28 0c 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcf3d8]
c001f11d:	83 c4 0c             	add    esp,0xc
c001f120:	c3                   	ret    

c001f121 <Vm::fpuSetReg(int, unsigned long long)>:
c001f121:	57                   	push   edi
c001f122:	56                   	push   esi
c001f123:	52                   	push   edx
c001f124:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f128:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f12c:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f131:	76 10                	jbe    c001f143 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f133:	83 ec 0c             	sub    esp,0xc
c001f136:	68 b9 ba 02 c0       	push   0xc002bab9
c001f13b:	e8 91 ab ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c001f140:	83 c4 10             	add    esp,0x10
c001f143:	a0 21 0c 03 c0       	mov    al,ds:0xc0030c21
c001f148:	b9 08 00 00 00       	mov    ecx,0x8
c001f14d:	c0 e8 03             	shr    al,0x3
c001f150:	83 e0 07             	and    eax,0x7
c001f153:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f157:	99                   	cdq    
c001f158:	f7 f9                	idiv   ecx
c001f15a:	89 34 d5 24 0c 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf3dc],esi
c001f161:	89 3c d5 28 0c 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf3d8],edi
c001f168:	58                   	pop    eax
c001f169:	5e                   	pop    esi
c001f16a:	5f                   	pop    edi
c001f16b:	c3                   	ret    

c001f16c <Vm::fpuPush(unsigned long long)>:
c001f16c:	a0 21 0c 03 c0       	mov    al,ds:0xc0030c21
c001f171:	c0 e8 03             	shr    al,0x3
c001f174:	83 e0 07             	and    eax,0x7
c001f177:	83 c0 07             	add    eax,0x7
c001f17a:	88 c2                	mov    dl,al
c001f17c:	83 e0 07             	and    eax,0x7
c001f17f:	83 e2 07             	and    edx,0x7
c001f182:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f189:	8a 15 21 0c 03 c0    	mov    dl,BYTE PTR ds:0xc0030c21
c001f18f:	83 e2 c7             	and    edx,0xffffffc7
c001f192:	09 ca                	or     edx,ecx
c001f194:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f198:	88 15 21 0c 03 c0    	mov    BYTE PTR ds:0xc0030c21,dl
c001f19e:	89 0c c5 28 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf3d8],ecx
c001f1a5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f1a9:	89 14 c5 24 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf3dc],edx
c001f1b0:	a1 64 0c 03 c0       	mov    eax,ds:0xc0030c64
c001f1b5:	83 f8 08             	cmp    eax,0x8
c001f1b8:	75 08                	jne    c001f1c2 <Vm::fpuPush(unsigned long long)+0x56>
c001f1ba:	80 0d 20 0c 03 c0 40 	or     BYTE PTR ds:0xc0030c20,0x40
c001f1c1:	c3                   	ret    
c001f1c2:	40                   	inc    eax
c001f1c3:	a3 64 0c 03 c0       	mov    ds:0xc0030c64,eax
c001f1c8:	c3                   	ret    

c001f1c9 <Vm::fpuPop()>:
c001f1c9:	8a 0d 21 0c 03 c0    	mov    cl,BYTE PTR ds:0xc0030c21
c001f1cf:	53                   	push   ebx
c001f1d0:	c0 e9 03             	shr    cl,0x3
c001f1d3:	8a 1d 21 0c 03 c0    	mov    bl,BYTE PTR ds:0xc0030c21
c001f1d9:	83 e1 07             	and    ecx,0x7
c001f1dc:	83 e3 c7             	and    ebx,0xffffffc7
c001f1df:	8b 04 cd 24 0c 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcf3dc]
c001f1e6:	8b 14 cd 28 0c 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcf3d8]
c001f1ed:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f1f4:	83 e1 38             	and    ecx,0x38
c001f1f7:	09 d9                	or     ecx,ebx
c001f1f9:	88 0d 21 0c 03 c0    	mov    BYTE PTR ds:0xc0030c21,cl
c001f1ff:	8b 0d 64 0c 03 c0    	mov    ecx,DWORD PTR ds:0xc0030c64
c001f205:	85 c9                	test   ecx,ecx
c001f207:	74 09                	je     c001f212 <Vm::fpuPop()+0x49>
c001f209:	49                   	dec    ecx
c001f20a:	89 0d 64 0c 03 c0    	mov    DWORD PTR ds:0xc0030c64,ecx
c001f210:	eb 07                	jmp    c001f219 <Vm::fpuPop()+0x50>
c001f212:	80 0d 20 0c 03 c0 40 	or     BYTE PTR ds:0xc0030c20,0x40
c001f219:	5b                   	pop    ebx
c001f21a:	c3                   	ret    

c001f21b <Vm::x87Handler(regs*)>:
c001f21b:	55                   	push   ebp
c001f21c:	57                   	push   edi
c001f21d:	56                   	push   esi
c001f21e:	53                   	push   ebx
c001f21f:	83 ec 1c             	sub    esp,0x1c
c001f222:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f226:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f22b:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f22e:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f236:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f23a:	50                   	push   eax
c001f23b:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f23f:	50                   	push   eax
c001f240:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f244:	50                   	push   eax
c001f245:	53                   	push   ebx
c001f246:	e8 9f a1 ff ff       	call   c00193ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f24b:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f24e:	83 c4 10             	add    esp,0x10
c001f251:	89 c6                	mov    esi,eax
c001f253:	80 fa d9             	cmp    dl,0xd9
c001f256:	0f 85 52 01 00 00    	jne    c001f3ae <Vm::x87Handler(regs*)+0x193>
c001f25c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f260:	8d 50 20             	lea    edx,[eax+0x20]
c001f263:	80 fa 0e             	cmp    dl,0xe
c001f266:	0f 87 86 00 00 00    	ja     c001f2f2 <Vm::x87Handler(regs*)+0xd7>
c001f26c:	0f b6 d2             	movzx  edx,dl
c001f26f:	ff 24 95 cc ba 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd4534]
c001f276:	e8 e7 fc ff ff       	call   c001ef62 <Vm::fpuGet0()>
c001f27b:	eb 05                	jmp    c001f282 <Vm::x87Handler(regs*)+0x67>
c001f27d:	e8 e5 fc ff ff       	call   c001ef67 <Vm::fpuGet1()>
c001f282:	57                   	push   edi
c001f283:	57                   	push   edi
c001f284:	52                   	push   edx
c001f285:	50                   	push   eax
c001f286:	e8 e1 fe ff ff       	call   c001f16c <Vm::fpuPush(unsigned long long)>
c001f28b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f28f:	83 c4 10             	add    esp,0x10
c001f292:	b0 01                	mov    al,0x1
c001f294:	e9 e3 09 00 00       	jmp    c001fc7c <Vm::x87Handler(regs*)+0xa61>
c001f299:	83 ec 0c             	sub    esp,0xc
c001f29c:	6a 00                	push   0x0
c001f29e:	e8 3b fe ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f2a3:	59                   	pop    ecx
c001f2a4:	5e                   	pop    esi
c001f2a5:	52                   	push   edx
c001f2a6:	50                   	push   eax
c001f2a7:	e8 c2 fd ff ff       	call   c001f06e <Vm::fpuChs(unsigned long long)>
c001f2ac:	eb 13                	jmp    c001f2c1 <Vm::x87Handler(regs*)+0xa6>
c001f2ae:	83 ec 0c             	sub    esp,0xc
c001f2b1:	6a 00                	push   0x0
c001f2b3:	e8 26 fe ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f2b8:	5f                   	pop    edi
c001f2b9:	5d                   	pop    ebp
c001f2ba:	52                   	push   edx
c001f2bb:	50                   	push   eax
c001f2bc:	e8 a4 fd ff ff       	call   c001f065 <Vm::fpuAbs(unsigned long long)>
c001f2c1:	83 c4 0c             	add    esp,0xc
c001f2c4:	52                   	push   edx
c001f2c5:	50                   	push   eax
c001f2c6:	6a 00                	push   0x0
c001f2c8:	e8 54 fe ff ff       	call   c001f121 <Vm::fpuSetReg(int, unsigned long long)>
c001f2cd:	eb bc                	jmp    c001f28b <Vm::x87Handler(regs*)+0x70>
c001f2cf:	e8 d3 fc ff ff       	call   c001efa7 <Vm::fpuGetLog210()>
c001f2d4:	eb ac                	jmp    c001f282 <Vm::x87Handler(regs*)+0x67>
c001f2d6:	e8 9c fc ff ff       	call   c001ef77 <Vm::fpuGetLog2E()>
c001f2db:	eb a5                	jmp    c001f282 <Vm::x87Handler(regs*)+0x67>
c001f2dd:	e8 8d fc ff ff       	call   c001ef6f <Vm::fpuGetPi()>
c001f2e2:	eb 9e                	jmp    c001f282 <Vm::x87Handler(regs*)+0x67>
c001f2e4:	e8 d6 fc ff ff       	call   c001efbf <Vm::fpuGetLog102()>
c001f2e9:	eb 97                	jmp    c001f282 <Vm::x87Handler(regs*)+0x67>
c001f2eb:	e8 9f fc ff ff       	call   c001ef8f <Vm::fpuGetLogE2()>
c001f2f0:	eb 90                	jmp    c001f282 <Vm::x87Handler(regs*)+0x67>
c001f2f2:	8d 50 40             	lea    edx,[eax+0x40]
c001f2f5:	80 fa 07             	cmp    dl,0x7
c001f2f8:	77 15                	ja     c001f30f <Vm::x87Handler(regs*)+0xf4>
c001f2fa:	83 ec 0c             	sub    esp,0xc
c001f2fd:	2d c0 00 00 00       	sub    eax,0xc0
c001f302:	50                   	push   eax
c001f303:	e8 d6 fd ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f308:	59                   	pop    ecx
c001f309:	5e                   	pop    esi
c001f30a:	e9 75 ff ff ff       	jmp    c001f284 <Vm::x87Handler(regs*)+0x69>
c001f30f:	8d 50 38             	lea    edx,[eax+0x38]
c001f312:	80 fa 07             	cmp    dl,0x7
c001f315:	77 3c                	ja     c001f353 <Vm::x87Handler(regs*)+0x138>
c001f317:	83 ec 0c             	sub    esp,0xc
c001f31a:	2d c8 00 00 00       	sub    eax,0xc8
c001f31f:	50                   	push   eax
c001f320:	e8 b9 fd ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f325:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f32c:	89 c6                	mov    esi,eax
c001f32e:	89 d7                	mov    edi,edx
c001f330:	e8 a9 fd ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f335:	83 c4 0c             	add    esp,0xc
c001f338:	52                   	push   edx
c001f339:	50                   	push   eax
c001f33a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f33e:	2d c8 00 00 00       	sub    eax,0xc8
c001f343:	50                   	push   eax
c001f344:	e8 d8 fd ff ff       	call   c001f121 <Vm::fpuSetReg(int, unsigned long long)>
c001f349:	83 c4 0c             	add    esp,0xc
c001f34c:	57                   	push   edi
c001f34d:	56                   	push   esi
c001f34e:	e9 73 ff ff ff       	jmp    c001f2c6 <Vm::x87Handler(regs*)+0xab>
c001f353:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f357:	84 d2                	test   dl,dl
c001f359:	75 0f                	jne    c001f36a <Vm::x87Handler(regs*)+0x14f>
c001f35b:	83 ec 0c             	sub    esp,0xc
c001f35e:	ff 36                	push   DWORD PTR [esi]
c001f360:	e8 c8 fa ff ff       	call   c001ee2d <Vm::fpu32ToInternal(unsigned int)>
c001f365:	e9 bf 00 00 00       	jmp    c001f429 <Vm::x87Handler(regs*)+0x20e>
c001f36a:	80 fa 03             	cmp    dl,0x3
c001f36d:	75 13                	jne    c001f382 <Vm::x87Handler(regs*)+0x167>
c001f36f:	e8 55 fe ff ff       	call   c001f1c9 <Vm::fpuPop()>
c001f374:	55                   	push   ebp
c001f375:	55                   	push   ebp
c001f376:	52                   	push   edx
c001f377:	50                   	push   eax
c001f378:	e8 4c fa ff ff       	call   c001edc9 <Vm::fpuInternalTo32(unsigned long long)>
c001f37d:	e9 88 00 00 00       	jmp    c001f40a <Vm::x87Handler(regs*)+0x1ef>
c001f382:	80 fa 05             	cmp    dl,0x5
c001f385:	75 0e                	jne    c001f395 <Vm::x87Handler(regs*)+0x17a>
c001f387:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f38a:	66 a3 22 0c 03 c0    	mov    ds:0xc0030c22,ax
c001f390:	e9 df 00 00 00       	jmp    c001f474 <Vm::x87Handler(regs*)+0x259>
c001f395:	31 c0                	xor    eax,eax
c001f397:	80 fa 07             	cmp    dl,0x7
c001f39a:	0f 85 dc 08 00 00    	jne    c001fc7c <Vm::x87Handler(regs*)+0xa61>
c001f3a0:	66 a1 22 0c 03 c0    	mov    ax,ds:0xc0030c22
c001f3a6:	66 89 06             	mov    WORD PTR [esi],ax
c001f3a9:	e9 c6 00 00 00       	jmp    c001f474 <Vm::x87Handler(regs*)+0x259>
c001f3ae:	80 fa d8             	cmp    dl,0xd8
c001f3b1:	0f 84 c9 00 00 00    	je     c001f480 <Vm::x87Handler(regs*)+0x265>
c001f3b7:	80 fa dc             	cmp    dl,0xdc
c001f3ba:	0f 84 0d 02 00 00    	je     c001f5cd <Vm::x87Handler(regs*)+0x3b2>
c001f3c0:	80 fa de             	cmp    dl,0xde
c001f3c3:	0f 84 cd 02 00 00    	je     c001f696 <Vm::x87Handler(regs*)+0x47b>
c001f3c9:	80 fa dd             	cmp    dl,0xdd
c001f3cc:	0f 84 5f 04 00 00    	je     c001f831 <Vm::x87Handler(regs*)+0x616>
c001f3d2:	80 fa da             	cmp    dl,0xda
c001f3d5:	0f 84 24 05 00 00    	je     c001f8ff <Vm::x87Handler(regs*)+0x6e4>
c001f3db:	80 fa df             	cmp    dl,0xdf
c001f3de:	0f 84 68 05 00 00    	je     c001f94c <Vm::x87Handler(regs*)+0x731>
c001f3e4:	31 c0                	xor    eax,eax
c001f3e6:	80 fa db             	cmp    dl,0xdb
c001f3e9:	0f 85 8d 08 00 00    	jne    c001fc7c <Vm::x87Handler(regs*)+0xa61>
c001f3ef:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f3f3:	80 fa 03             	cmp    dl,0x3
c001f3f6:	0f 85 70 06 00 00    	jne    c001fa6c <Vm::x87Handler(regs*)+0x851>
c001f3fc:	e8 c8 fd ff ff       	call   c001f1c9 <Vm::fpuPop()>
c001f401:	55                   	push   ebp
c001f402:	55                   	push   ebp
c001f403:	52                   	push   edx
c001f404:	50                   	push   eax
c001f405:	e8 71 fa ff ff       	call   c001ee7b <Vm::fpuFloatToLong(unsigned long long)>
c001f40a:	83 c4 10             	add    esp,0x10
c001f40d:	89 06                	mov    DWORD PTR [esi],eax
c001f40f:	eb 63                	jmp    c001f474 <Vm::x87Handler(regs*)+0x259>
c001f411:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f415:	84 d2                	test   dl,dl
c001f417:	0f 85 e6 05 00 00    	jne    c001fa03 <Vm::x87Handler(regs*)+0x7e8>
c001f41d:	57                   	push   edi
c001f41e:	57                   	push   edi
c001f41f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f422:	ff 36                	push   DWORD PTR [esi]
c001f424:	e8 49 fa ff ff       	call   c001ee72 <Vm::fpu64ToInternal(unsigned long long)>
c001f429:	5e                   	pop    esi
c001f42a:	5f                   	pop    edi
c001f42b:	52                   	push   edx
c001f42c:	50                   	push   eax
c001f42d:	e8 3a fd ff ff       	call   c001f16c <Vm::fpuPush(unsigned long long)>
c001f432:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f436:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f439:	e9 51 fe ff ff       	jmp    c001f28f <Vm::x87Handler(regs*)+0x74>
c001f43e:	80 fa 03             	cmp    dl,0x3
c001f441:	0f 85 d7 06 00 00    	jne    c001fb1e <Vm::x87Handler(regs*)+0x903>
c001f447:	57                   	push   edi
c001f448:	57                   	push   edi
c001f449:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f44c:	ff 36                	push   DWORD PTR [esi]
c001f44e:	e8 1f fa ff ff       	call   c001ee72 <Vm::fpu64ToInternal(unsigned long long)>
c001f453:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f45a:	89 c6                	mov    esi,eax
c001f45c:	89 d7                	mov    edi,edx
c001f45e:	e8 7b fc ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f463:	57                   	push   edi
c001f464:	56                   	push   esi
c001f465:	52                   	push   edx
c001f466:	50                   	push   eax
c001f467:	e8 95 fb ff ff       	call   c001f001 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f46c:	83 c4 20             	add    esp,0x20
c001f46f:	e8 55 fd ff ff       	call   c001f1c9 <Vm::fpuPop()>
c001f474:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f478:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f47b:	e9 12 fe ff ff       	jmp    c001f292 <Vm::x87Handler(regs*)+0x77>
c001f480:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f484:	8d 50 40             	lea    edx,[eax+0x40]
c001f487:	80 fa 07             	cmp    dl,0x7
c001f48a:	77 29                	ja     c001f4b5 <Vm::x87Handler(regs*)+0x29a>
c001f48c:	83 ec 0c             	sub    esp,0xc
c001f48f:	2d c0 00 00 00       	sub    eax,0xc0
c001f494:	50                   	push   eax
c001f495:	e8 44 fc ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f49a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f4a1:	89 c6                	mov    esi,eax
c001f4a3:	89 d7                	mov    edi,edx
c001f4a5:	e8 34 fc ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f4aa:	57                   	push   edi
c001f4ab:	56                   	push   esi
c001f4ac:	52                   	push   edx
c001f4ad:	50                   	push   eax
c001f4ae:	e8 a1 fb ff ff       	call   c001f054 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f4b3:	eb 2f                	jmp    c001f4e4 <Vm::x87Handler(regs*)+0x2c9>
c001f4b5:	8d 50 38             	lea    edx,[eax+0x38]
c001f4b8:	80 fa 07             	cmp    dl,0x7
c001f4bb:	77 2f                	ja     c001f4ec <Vm::x87Handler(regs*)+0x2d1>
c001f4bd:	83 ec 0c             	sub    esp,0xc
c001f4c0:	2d c8 00 00 00       	sub    eax,0xc8
c001f4c5:	50                   	push   eax
c001f4c6:	e8 13 fc ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f4cb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f4d2:	89 c6                	mov    esi,eax
c001f4d4:	89 d7                	mov    edi,edx
c001f4d6:	e8 03 fc ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f4db:	57                   	push   edi
c001f4dc:	56                   	push   esi
c001f4dd:	52                   	push   edx
c001f4de:	50                   	push   eax
c001f4df:	e8 a9 fb ff ff       	call   c001f08d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f4e4:	83 c4 1c             	add    esp,0x1c
c001f4e7:	e9 d8 fd ff ff       	jmp    c001f2c4 <Vm::x87Handler(regs*)+0xa9>
c001f4ec:	8d 50 30             	lea    edx,[eax+0x30]
c001f4ef:	80 fa 07             	cmp    dl,0x7
c001f4f2:	77 0d                	ja     c001f501 <Vm::x87Handler(regs*)+0x2e6>
c001f4f4:	83 ec 0c             	sub    esp,0xc
c001f4f7:	2d d0 00 00 00       	sub    eax,0xd0
c001f4fc:	e9 99 03 00 00       	jmp    c001f89a <Vm::x87Handler(regs*)+0x67f>
c001f501:	8d 50 28             	lea    edx,[eax+0x28]
c001f504:	80 fa 07             	cmp    dl,0x7
c001f507:	77 0d                	ja     c001f516 <Vm::x87Handler(regs*)+0x2fb>
c001f509:	83 ec 0c             	sub    esp,0xc
c001f50c:	2d d8 00 00 00       	sub    eax,0xd8
c001f511:	e9 c0 03 00 00       	jmp    c001f8d6 <Vm::x87Handler(regs*)+0x6bb>
c001f516:	8d 50 20             	lea    edx,[eax+0x20]
c001f519:	80 fa 07             	cmp    dl,0x7
c001f51c:	77 1b                	ja     c001f539 <Vm::x87Handler(regs*)+0x31e>
c001f51e:	83 ec 0c             	sub    esp,0xc
c001f521:	2d e0 00 00 00       	sub    eax,0xe0
c001f526:	50                   	push   eax
c001f527:	e8 b2 fb ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f52c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f533:	89 c6                	mov    esi,eax
c001f535:	89 d7                	mov    edi,edx
c001f537:	eb 22                	jmp    c001f55b <Vm::x87Handler(regs*)+0x340>
c001f539:	8d 50 18             	lea    edx,[eax+0x18]
c001f53c:	80 fa 07             	cmp    dl,0x7
c001f53f:	77 2d                	ja     c001f56e <Vm::x87Handler(regs*)+0x353>
c001f541:	83 ec 0c             	sub    esp,0xc
c001f544:	6a 00                	push   0x0
c001f546:	e8 93 fb ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f54b:	89 c6                	mov    esi,eax
c001f54d:	89 d7                	mov    edi,edx
c001f54f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f553:	2d e8 00 00 00       	sub    eax,0xe8
c001f558:	89 04 24             	mov    DWORD PTR [esp],eax
c001f55b:	e8 7e fb ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f560:	57                   	push   edi
c001f561:	56                   	push   esi
c001f562:	52                   	push   edx
c001f563:	50                   	push   eax
c001f564:	e8 15 fb ff ff       	call   c001f07e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f569:	e9 76 ff ff ff       	jmp    c001f4e4 <Vm::x87Handler(regs*)+0x2c9>
c001f56e:	8d 50 10             	lea    edx,[eax+0x10]
c001f571:	80 fa 07             	cmp    dl,0x7
c001f574:	77 1b                	ja     c001f591 <Vm::x87Handler(regs*)+0x376>
c001f576:	83 ec 0c             	sub    esp,0xc
c001f579:	2d f0 00 00 00       	sub    eax,0xf0
c001f57e:	50                   	push   eax
c001f57f:	e8 5a fb ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f584:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f58b:	89 c6                	mov    esi,eax
c001f58d:	89 d7                	mov    edi,edx
c001f58f:	eb 22                	jmp    c001f5b3 <Vm::x87Handler(regs*)+0x398>
c001f591:	3c f7                	cmp    al,0xf7
c001f593:	0f 86 d1 03 00 00    	jbe    c001f96a <Vm::x87Handler(regs*)+0x74f>
c001f599:	83 ec 0c             	sub    esp,0xc
c001f59c:	6a 00                	push   0x0
c001f59e:	e8 3b fb ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f5a3:	89 c6                	mov    esi,eax
c001f5a5:	89 d7                	mov    edi,edx
c001f5a7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5ab:	2d f8 00 00 00       	sub    eax,0xf8
c001f5b0:	89 04 24             	mov    DWORD PTR [esp],eax
c001f5b3:	e8 26 fb ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f5b8:	57                   	push   edi
c001f5b9:	56                   	push   esi
c001f5ba:	52                   	push   edx
c001f5bb:	50                   	push   eax
c001f5bc:	e8 eb fa ff ff       	call   c001f0ac <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f5c1:	83 c4 1c             	add    esp,0x1c
c001f5c4:	52                   	push   edx
c001f5c5:	50                   	push   eax
c001f5c6:	6a 00                	push   0x0
c001f5c8:	e9 51 02 00 00       	jmp    c001f81e <Vm::x87Handler(regs*)+0x603>
c001f5cd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5d1:	8d 50 40             	lea    edx,[eax+0x40]
c001f5d4:	80 fa 07             	cmp    dl,0x7
c001f5d7:	77 37                	ja     c001f610 <Vm::x87Handler(regs*)+0x3f5>
c001f5d9:	83 ec 0c             	sub    esp,0xc
c001f5dc:	2d c0 00 00 00       	sub    eax,0xc0
c001f5e1:	50                   	push   eax
c001f5e2:	e8 f7 fa ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f5e7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5ee:	89 c6                	mov    esi,eax
c001f5f0:	89 d7                	mov    edi,edx
c001f5f2:	e8 e7 fa ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f5f7:	57                   	push   edi
c001f5f8:	56                   	push   esi
c001f5f9:	52                   	push   edx
c001f5fa:	50                   	push   eax
c001f5fb:	e8 54 fa ff ff       	call   c001f054 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f600:	83 c4 1c             	add    esp,0x1c
c001f603:	52                   	push   edx
c001f604:	50                   	push   eax
c001f605:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f609:	2d c0 00 00 00       	sub    eax,0xc0
c001f60e:	eb 3d                	jmp    c001f64d <Vm::x87Handler(regs*)+0x432>
c001f610:	8d 50 38             	lea    edx,[eax+0x38]
c001f613:	80 fa 07             	cmp    dl,0x7
c001f616:	77 3b                	ja     c001f653 <Vm::x87Handler(regs*)+0x438>
c001f618:	83 ec 0c             	sub    esp,0xc
c001f61b:	2d c8 00 00 00       	sub    eax,0xc8
c001f620:	50                   	push   eax
c001f621:	e8 b8 fa ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f626:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f62d:	89 c6                	mov    esi,eax
c001f62f:	89 d7                	mov    edi,edx
c001f631:	e8 a8 fa ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f636:	57                   	push   edi
c001f637:	56                   	push   esi
c001f638:	52                   	push   edx
c001f639:	50                   	push   eax
c001f63a:	e8 4e fa ff ff       	call   c001f08d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f63f:	83 c4 1c             	add    esp,0x1c
c001f642:	52                   	push   edx
c001f643:	50                   	push   eax
c001f644:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f648:	2d c8 00 00 00       	sub    eax,0xc8
c001f64d:	50                   	push   eax
c001f64e:	e9 75 fc ff ff       	jmp    c001f2c8 <Vm::x87Handler(regs*)+0xad>
c001f653:	83 c0 18             	add    eax,0x18
c001f656:	3c 07                	cmp    al,0x7
c001f658:	0f 87 3b 04 00 00    	ja     c001fa99 <Vm::x87Handler(regs*)+0x87e>
c001f65e:	83 ec 0c             	sub    esp,0xc
c001f661:	6a 00                	push   0x0
c001f663:	e8 76 fa ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f668:	89 c6                	mov    esi,eax
c001f66a:	89 d7                	mov    edi,edx
c001f66c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f670:	2d e8 00 00 00       	sub    eax,0xe8
c001f675:	89 04 24             	mov    DWORD PTR [esp],eax
c001f678:	e8 61 fa ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f67d:	57                   	push   edi
c001f67e:	56                   	push   esi
c001f67f:	52                   	push   edx
c001f680:	50                   	push   eax
c001f681:	e8 f8 f9 ff ff       	call   c001f07e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f686:	83 c4 1c             	add    esp,0x1c
c001f689:	52                   	push   edx
c001f68a:	50                   	push   eax
c001f68b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f68f:	2d e8 00 00 00       	sub    eax,0xe8
c001f694:	eb b7                	jmp    c001f64d <Vm::x87Handler(regs*)+0x432>
c001f696:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f69a:	8d 50 40             	lea    edx,[eax+0x40]
c001f69d:	80 fa 07             	cmp    dl,0x7
c001f6a0:	77 3a                	ja     c001f6dc <Vm::x87Handler(regs*)+0x4c1>
c001f6a2:	83 ec 0c             	sub    esp,0xc
c001f6a5:	2d c0 00 00 00       	sub    eax,0xc0
c001f6aa:	50                   	push   eax
c001f6ab:	e8 2e fa ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f6b0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f6b7:	89 c6                	mov    esi,eax
c001f6b9:	89 d7                	mov    edi,edx
c001f6bb:	e8 1e fa ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f6c0:	57                   	push   edi
c001f6c1:	56                   	push   esi
c001f6c2:	52                   	push   edx
c001f6c3:	50                   	push   eax
c001f6c4:	e8 8b f9 ff ff       	call   c001f054 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f6c9:	83 c4 1c             	add    esp,0x1c
c001f6cc:	52                   	push   edx
c001f6cd:	50                   	push   eax
c001f6ce:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6d2:	2d c0 00 00 00       	sub    eax,0xc0
c001f6d7:	e9 9e 01 00 00       	jmp    c001f87a <Vm::x87Handler(regs*)+0x65f>
c001f6dc:	8d 50 20             	lea    edx,[eax+0x20]
c001f6df:	80 fa 07             	cmp    dl,0x7
c001f6e2:	77 3a                	ja     c001f71e <Vm::x87Handler(regs*)+0x503>
c001f6e4:	83 ec 0c             	sub    esp,0xc
c001f6e7:	2d e0 00 00 00       	sub    eax,0xe0
c001f6ec:	50                   	push   eax
c001f6ed:	e8 ec f9 ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f6f2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f6f9:	89 c6                	mov    esi,eax
c001f6fb:	89 d7                	mov    edi,edx
c001f6fd:	e8 dc f9 ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f702:	57                   	push   edi
c001f703:	56                   	push   esi
c001f704:	52                   	push   edx
c001f705:	50                   	push   eax
c001f706:	e8 73 f9 ff ff       	call   c001f07e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f70b:	83 c4 1c             	add    esp,0x1c
c001f70e:	52                   	push   edx
c001f70f:	50                   	push   eax
c001f710:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f714:	2d e0 00 00 00       	sub    eax,0xe0
c001f719:	e9 5c 01 00 00       	jmp    c001f87a <Vm::x87Handler(regs*)+0x65f>
c001f71e:	8d 50 18             	lea    edx,[eax+0x18]
c001f721:	80 fa 07             	cmp    dl,0x7
c001f724:	77 3b                	ja     c001f761 <Vm::x87Handler(regs*)+0x546>
c001f726:	83 ec 0c             	sub    esp,0xc
c001f729:	6a 00                	push   0x0
c001f72b:	e8 ae f9 ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f730:	89 c6                	mov    esi,eax
c001f732:	89 d7                	mov    edi,edx
c001f734:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f738:	2d e8 00 00 00       	sub    eax,0xe8
c001f73d:	89 04 24             	mov    DWORD PTR [esp],eax
c001f740:	e8 99 f9 ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f745:	57                   	push   edi
c001f746:	56                   	push   esi
c001f747:	52                   	push   edx
c001f748:	50                   	push   eax
c001f749:	e8 30 f9 ff ff       	call   c001f07e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f74e:	83 c4 1c             	add    esp,0x1c
c001f751:	52                   	push   edx
c001f752:	50                   	push   eax
c001f753:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f757:	2d e8 00 00 00       	sub    eax,0xe8
c001f75c:	e9 19 01 00 00       	jmp    c001f87a <Vm::x87Handler(regs*)+0x65f>
c001f761:	8d 50 38             	lea    edx,[eax+0x38]
c001f764:	80 fa 07             	cmp    dl,0x7
c001f767:	77 37                	ja     c001f7a0 <Vm::x87Handler(regs*)+0x585>
c001f769:	83 ec 0c             	sub    esp,0xc
c001f76c:	2d c8 00 00 00       	sub    eax,0xc8
c001f771:	50                   	push   eax
c001f772:	e8 67 f9 ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f777:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f77e:	89 c6                	mov    esi,eax
c001f780:	89 d7                	mov    edi,edx
c001f782:	e8 57 f9 ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f787:	57                   	push   edi
c001f788:	56                   	push   esi
c001f789:	52                   	push   edx
c001f78a:	50                   	push   eax
c001f78b:	e8 fd f8 ff ff       	call   c001f08d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f790:	83 c4 1c             	add    esp,0x1c
c001f793:	52                   	push   edx
c001f794:	50                   	push   eax
c001f795:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f799:	2d c8 00 00 00       	sub    eax,0xc8
c001f79e:	eb 7d                	jmp    c001f81d <Vm::x87Handler(regs*)+0x602>
c001f7a0:	3c f7                	cmp    al,0xf7
c001f7a2:	76 38                	jbe    c001f7dc <Vm::x87Handler(regs*)+0x5c1>
c001f7a4:	83 ec 0c             	sub    esp,0xc
c001f7a7:	6a 00                	push   0x0
c001f7a9:	e8 30 f9 ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f7ae:	89 c6                	mov    esi,eax
c001f7b0:	89 d7                	mov    edi,edx
c001f7b2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7b6:	2d f8 00 00 00       	sub    eax,0xf8
c001f7bb:	89 04 24             	mov    DWORD PTR [esp],eax
c001f7be:	e8 1b f9 ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f7c3:	57                   	push   edi
c001f7c4:	56                   	push   esi
c001f7c5:	52                   	push   edx
c001f7c6:	50                   	push   eax
c001f7c7:	e8 e0 f8 ff ff       	call   c001f0ac <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f7cc:	83 c4 1c             	add    esp,0x1c
c001f7cf:	52                   	push   edx
c001f7d0:	50                   	push   eax
c001f7d1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7d5:	2d f8 00 00 00       	sub    eax,0xf8
c001f7da:	eb 41                	jmp    c001f81d <Vm::x87Handler(regs*)+0x602>
c001f7dc:	8d 50 10             	lea    edx,[eax+0x10]
c001f7df:	80 fa 07             	cmp    dl,0x7
c001f7e2:	0f 87 5a 01 00 00    	ja     c001f942 <Vm::x87Handler(regs*)+0x727>
c001f7e8:	83 ec 0c             	sub    esp,0xc
c001f7eb:	2d f0 00 00 00       	sub    eax,0xf0
c001f7f0:	50                   	push   eax
c001f7f1:	e8 e8 f8 ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f7f6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7fd:	89 c6                	mov    esi,eax
c001f7ff:	89 d7                	mov    edi,edx
c001f801:	e8 d8 f8 ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f806:	57                   	push   edi
c001f807:	56                   	push   esi
c001f808:	52                   	push   edx
c001f809:	50                   	push   eax
c001f80a:	e8 9d f8 ff ff       	call   c001f0ac <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f80f:	83 c4 1c             	add    esp,0x1c
c001f812:	52                   	push   edx
c001f813:	50                   	push   eax
c001f814:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f818:	2d f0 00 00 00       	sub    eax,0xf0
c001f81d:	50                   	push   eax
c001f81e:	e8 fe f8 ff ff       	call   c001f121 <Vm::fpuSetReg(int, unsigned long long)>
c001f823:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f827:	e8 9d f9 ff ff       	call   c001f1c9 <Vm::fpuPop()>
c001f82c:	e9 5e fa ff ff       	jmp    c001f28f <Vm::x87Handler(regs*)+0x74>
c001f831:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f835:	8d 50 30             	lea    edx,[eax+0x30]
c001f838:	80 fa 07             	cmp    dl,0x7
c001f83b:	77 1d                	ja     c001f85a <Vm::x87Handler(regs*)+0x63f>
c001f83d:	83 ec 0c             	sub    esp,0xc
c001f840:	6a 00                	push   0x0
c001f842:	e8 97 f8 ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f847:	83 c4 0c             	add    esp,0xc
c001f84a:	52                   	push   edx
c001f84b:	50                   	push   eax
c001f84c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f850:	2d d0 00 00 00       	sub    eax,0xd0
c001f855:	e9 f3 fd ff ff       	jmp    c001f64d <Vm::x87Handler(regs*)+0x432>
c001f85a:	8d 50 28             	lea    edx,[eax+0x28]
c001f85d:	80 fa 07             	cmp    dl,0x7
c001f860:	77 28                	ja     c001f88a <Vm::x87Handler(regs*)+0x66f>
c001f862:	83 ec 0c             	sub    esp,0xc
c001f865:	6a 00                	push   0x0
c001f867:	e8 72 f8 ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f86c:	83 c4 0c             	add    esp,0xc
c001f86f:	52                   	push   edx
c001f870:	50                   	push   eax
c001f871:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f875:	2d d8 00 00 00       	sub    eax,0xd8
c001f87a:	50                   	push   eax
c001f87b:	e8 a1 f8 ff ff       	call   c001f121 <Vm::fpuSetReg(int, unsigned long long)>
c001f880:	e8 44 f9 ff ff       	call   c001f1c9 <Vm::fpuPop()>
c001f885:	e9 01 fa ff ff       	jmp    c001f28b <Vm::x87Handler(regs*)+0x70>
c001f88a:	8d 50 20             	lea    edx,[eax+0x20]
c001f88d:	80 fa 07             	cmp    dl,0x7
c001f890:	77 30                	ja     c001f8c2 <Vm::x87Handler(regs*)+0x6a7>
c001f892:	83 ec 0c             	sub    esp,0xc
c001f895:	2d e0 00 00 00       	sub    eax,0xe0
c001f89a:	50                   	push   eax
c001f89b:	e8 3e f8 ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f8a0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f8a7:	89 c6                	mov    esi,eax
c001f8a9:	89 d7                	mov    edi,edx
c001f8ab:	e8 2e f8 ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f8b0:	57                   	push   edi
c001f8b1:	56                   	push   esi
c001f8b2:	52                   	push   edx
c001f8b3:	50                   	push   eax
c001f8b4:	e8 48 f7 ff ff       	call   c001f001 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f8b9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f8bd:	e9 54 02 00 00       	jmp    c001fb16 <Vm::x87Handler(regs*)+0x8fb>
c001f8c2:	8d 50 18             	lea    edx,[eax+0x18]
c001f8c5:	80 fa 07             	cmp    dl,0x7
c001f8c8:	0f 87 43 fb ff ff    	ja     c001f411 <Vm::x87Handler(regs*)+0x1f6>
c001f8ce:	83 ec 0c             	sub    esp,0xc
c001f8d1:	2d e8 00 00 00       	sub    eax,0xe8
c001f8d6:	50                   	push   eax
c001f8d7:	e8 02 f8 ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f8dc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f8e3:	89 c6                	mov    esi,eax
c001f8e5:	89 d7                	mov    edi,edx
c001f8e7:	e8 f2 f7 ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f8ec:	57                   	push   edi
c001f8ed:	56                   	push   esi
c001f8ee:	52                   	push   edx
c001f8ef:	50                   	push   eax
c001f8f0:	e8 0c f7 ff ff       	call   c001f001 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f8f5:	83 c4 20             	add    esp,0x20
c001f8f8:	e8 cc f8 ff ff       	call   c001f1c9 <Vm::fpuPop()>
c001f8fd:	eb 62                	jmp    c001f961 <Vm::x87Handler(regs*)+0x746>
c001f8ff:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001f903:	0f 85 0f 01 00 00    	jne    c001fa18 <Vm::x87Handler(regs*)+0x7fd>
c001f909:	83 ec 0c             	sub    esp,0xc
c001f90c:	6a 01                	push   0x1
c001f90e:	e8 cb f7 ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f913:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f91a:	89 c6                	mov    esi,eax
c001f91c:	89 d7                	mov    edi,edx
c001f91e:	e8 bb f7 ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f923:	57                   	push   edi
c001f924:	56                   	push   esi
c001f925:	52                   	push   edx
c001f926:	50                   	push   eax
c001f927:	e8 d5 f6 ff ff       	call   c001f001 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f92c:	83 c4 20             	add    esp,0x20
c001f92f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f933:	e8 91 f8 ff ff       	call   c001f1c9 <Vm::fpuPop()>
c001f938:	e8 8c f8 ff ff       	call   c001f1c9 <Vm::fpuPop()>
c001f93d:	e9 50 f9 ff ff       	jmp    c001f292 <Vm::x87Handler(regs*)+0x77>
c001f942:	3c d9                	cmp    al,0xd9
c001f944:	0f 85 b5 02 00 00    	jne    c001fbff <Vm::x87Handler(regs*)+0x9e4>
c001f94a:	eb bd                	jmp    c001f909 <Vm::x87Handler(regs*)+0x6ee>
c001f94c:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001f950:	0f 85 ea 02 00 00    	jne    c001fc40 <Vm::x87Handler(regs*)+0xa25>
c001f956:	0f b7 05 20 0c 03 c0 	movzx  eax,WORD PTR ds:0xc0030c20
c001f95d:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001f961:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f965:	e9 28 f9 ff ff       	jmp    c001f292 <Vm::x87Handler(regs*)+0x77>
c001f96a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f96e:	84 d2                	test   dl,dl
c001f970:	75 0f                	jne    c001f981 <Vm::x87Handler(regs*)+0x766>
c001f972:	83 ec 0c             	sub    esp,0xc
c001f975:	ff 36                	push   DWORD PTR [esi]
c001f977:	e8 b1 f4 ff ff       	call   c001ee2d <Vm::fpu32ToInternal(unsigned int)>
c001f97c:	e9 2c 01 00 00       	jmp    c001faad <Vm::x87Handler(regs*)+0x892>
c001f981:	80 fa 01             	cmp    dl,0x1
c001f984:	75 0f                	jne    c001f995 <Vm::x87Handler(regs*)+0x77a>
c001f986:	83 ec 0c             	sub    esp,0xc
c001f989:	ff 36                	push   DWORD PTR [esi]
c001f98b:	e8 9d f4 ff ff       	call   c001ee2d <Vm::fpu32ToInternal(unsigned int)>
c001f990:	e9 81 02 00 00       	jmp    c001fc16 <Vm::x87Handler(regs*)+0x9fb>
c001f995:	80 fa 04             	cmp    dl,0x4
c001f998:	75 0f                	jne    c001f9a9 <Vm::x87Handler(regs*)+0x78e>
c001f99a:	83 ec 0c             	sub    esp,0xc
c001f99d:	ff 36                	push   DWORD PTR [esi]
c001f99f:	e8 89 f4 ff ff       	call   c001ee2d <Vm::fpu32ToInternal(unsigned int)>
c001f9a4:	e9 86 01 00 00       	jmp    c001fb2f <Vm::x87Handler(regs*)+0x914>
c001f9a9:	80 fa 05             	cmp    dl,0x5
c001f9ac:	75 1b                	jne    c001f9c9 <Vm::x87Handler(regs*)+0x7ae>
c001f9ae:	83 ec 0c             	sub    esp,0xc
c001f9b1:	6a 00                	push   0x0
c001f9b3:	e8 26 f7 ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f9b8:	89 c7                	mov    edi,eax
c001f9ba:	89 d5                	mov    ebp,edx
c001f9bc:	58                   	pop    eax
c001f9bd:	ff 36                	push   DWORD PTR [esi]
c001f9bf:	e8 69 f4 ff ff       	call   c001ee2d <Vm::fpu32ToInternal(unsigned int)>
c001f9c4:	e9 a3 01 00 00       	jmp    c001fb6c <Vm::x87Handler(regs*)+0x951>
c001f9c9:	80 fa 06             	cmp    dl,0x6
c001f9cc:	75 0f                	jne    c001f9dd <Vm::x87Handler(regs*)+0x7c2>
c001f9ce:	83 ec 0c             	sub    esp,0xc
c001f9d1:	ff 36                	push   DWORD PTR [esi]
c001f9d3:	e8 55 f4 ff ff       	call   c001ee2d <Vm::fpu32ToInternal(unsigned int)>
c001f9d8:	e9 ae 01 00 00       	jmp    c001fb8b <Vm::x87Handler(regs*)+0x970>
c001f9dd:	31 c0                	xor    eax,eax
c001f9df:	80 fa 07             	cmp    dl,0x7
c001f9e2:	0f 85 94 02 00 00    	jne    c001fc7c <Vm::x87Handler(regs*)+0xa61>
c001f9e8:	83 ec 0c             	sub    esp,0xc
c001f9eb:	6a 00                	push   0x0
c001f9ed:	e8 ec f6 ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001f9f2:	89 c7                	mov    edi,eax
c001f9f4:	89 d5                	mov    ebp,edx
c001f9f6:	58                   	pop    eax
c001f9f7:	ff 36                	push   DWORD PTR [esi]
c001f9f9:	e8 2f f4 ff ff       	call   c001ee2d <Vm::fpu32ToInternal(unsigned int)>
c001f9fe:	e9 cb 01 00 00       	jmp    c001fbce <Vm::x87Handler(regs*)+0x9b3>
c001fa03:	80 fa 03             	cmp    dl,0x3
c001fa06:	0f 85 d3 01 00 00    	jne    c001fbdf <Vm::x87Handler(regs*)+0x9c4>
c001fa0c:	e8 b8 f7 ff ff       	call   c001f1c9 <Vm::fpuPop()>
c001fa11:	51                   	push   ecx
c001fa12:	51                   	push   ecx
c001fa13:	e9 de 01 00 00       	jmp    c001fbf6 <Vm::x87Handler(regs*)+0x9db>
c001fa18:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fa1c:	80 fa 01             	cmp    dl,0x1
c001fa1f:	75 09                	jne    c001fa2a <Vm::x87Handler(regs*)+0x80f>
c001fa21:	57                   	push   edi
c001fa22:	57                   	push   edi
c001fa23:	8b 06                	mov    eax,DWORD PTR [esi]
c001fa25:	e9 e3 01 00 00       	jmp    c001fc0d <Vm::x87Handler(regs*)+0x9f2>
c001fa2a:	80 fa 04             	cmp    dl,0x4
c001fa2d:	75 12                	jne    c001fa41 <Vm::x87Handler(regs*)+0x826>
c001fa2f:	31 d2                	xor    edx,edx
c001fa31:	51                   	push   ecx
c001fa32:	51                   	push   ecx
c001fa33:	8b 06                	mov    eax,DWORD PTR [esi]
c001fa35:	52                   	push   edx
c001fa36:	50                   	push   eax
c001fa37:	e8 d0 f4 ff ff       	call   c001ef0c <Vm::fpuLongToFloat(long long)>
c001fa3c:	e9 ee 00 00 00       	jmp    c001fb2f <Vm::x87Handler(regs*)+0x914>
c001fa41:	31 c0                	xor    eax,eax
c001fa43:	80 fa 07             	cmp    dl,0x7
c001fa46:	0f 85 30 02 00 00    	jne    c001fc7c <Vm::x87Handler(regs*)+0xa61>
c001fa4c:	83 ec 0c             	sub    esp,0xc
c001fa4f:	6a 00                	push   0x0
c001fa51:	e8 88 f6 ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001fa56:	89 c7                	mov    edi,eax
c001fa58:	89 d5                	mov    ebp,edx
c001fa5a:	58                   	pop    eax
c001fa5b:	8b 06                	mov    eax,DWORD PTR [esi]
c001fa5d:	5a                   	pop    edx
c001fa5e:	31 d2                	xor    edx,edx
c001fa60:	52                   	push   edx
c001fa61:	50                   	push   eax
c001fa62:	e8 a5 f4 ff ff       	call   c001ef0c <Vm::fpuLongToFloat(long long)>
c001fa67:	e9 62 01 00 00       	jmp    c001fbce <Vm::x87Handler(regs*)+0x9b3>
c001fa6c:	84 d2                	test   dl,dl
c001fa6e:	75 0d                	jne    c001fa7d <Vm::x87Handler(regs*)+0x862>
c001fa70:	31 d2                	xor    edx,edx
c001fa72:	55                   	push   ebp
c001fa73:	55                   	push   ebp
c001fa74:	8b 06                	mov    eax,DWORD PTR [esi]
c001fa76:	52                   	push   edx
c001fa77:	50                   	push   eax
c001fa78:	e9 d3 01 00 00       	jmp    c001fc50 <Vm::x87Handler(regs*)+0xa35>
c001fa7d:	31 c0                	xor    eax,eax
c001fa7f:	80 fa 02             	cmp    dl,0x2
c001fa82:	0f 85 f4 01 00 00    	jne    c001fc7c <Vm::x87Handler(regs*)+0xa61>
c001fa88:	83 ec 0c             	sub    esp,0xc
c001fa8b:	6a 00                	push   0x0
c001fa8d:	e8 4c f6 ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001fa92:	59                   	pop    ecx
c001fa93:	5f                   	pop    edi
c001fa94:	e9 6a f9 ff ff       	jmp    c001f403 <Vm::x87Handler(regs*)+0x1e8>
c001fa99:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fa9d:	84 d2                	test   dl,dl
c001fa9f:	75 2a                	jne    c001facb <Vm::x87Handler(regs*)+0x8b0>
c001faa1:	50                   	push   eax
c001faa2:	50                   	push   eax
c001faa3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001faa6:	ff 36                	push   DWORD PTR [esi]
c001faa8:	e8 c5 f3 ff ff       	call   c001ee72 <Vm::fpu64ToInternal(unsigned long long)>
c001faad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fab4:	89 c6                	mov    esi,eax
c001fab6:	89 d7                	mov    edi,edx
c001fab8:	e8 21 f6 ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001fabd:	57                   	push   edi
c001fabe:	56                   	push   esi
c001fabf:	52                   	push   edx
c001fac0:	50                   	push   eax
c001fac1:	e8 8e f5 ff ff       	call   c001f054 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fac6:	e9 64 01 00 00       	jmp    c001fc2f <Vm::x87Handler(regs*)+0xa14>
c001facb:	80 fa 01             	cmp    dl,0x1
c001face:	75 11                	jne    c001fae1 <Vm::x87Handler(regs*)+0x8c6>
c001fad0:	50                   	push   eax
c001fad1:	50                   	push   eax
c001fad2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fad5:	ff 36                	push   DWORD PTR [esi]
c001fad7:	e8 96 f3 ff ff       	call   c001ee72 <Vm::fpu64ToInternal(unsigned long long)>
c001fadc:	e9 35 01 00 00       	jmp    c001fc16 <Vm::x87Handler(regs*)+0x9fb>
c001fae1:	80 fa 02             	cmp    dl,0x2
c001fae4:	0f 85 54 f9 ff ff    	jne    c001f43e <Vm::x87Handler(regs*)+0x223>
c001faea:	55                   	push   ebp
c001faeb:	55                   	push   ebp
c001faec:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001faef:	ff 36                	push   DWORD PTR [esi]
c001faf1:	e8 7c f3 ff ff       	call   c001ee72 <Vm::fpu64ToInternal(unsigned long long)>
c001faf6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fafd:	89 c6                	mov    esi,eax
c001faff:	89 d7                	mov    edi,edx
c001fb01:	e8 d8 f5 ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001fb06:	57                   	push   edi
c001fb07:	56                   	push   esi
c001fb08:	52                   	push   edx
c001fb09:	50                   	push   eax
c001fb0a:	e8 f2 f4 ff ff       	call   c001f001 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fb0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fb13:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fb16:	83 c4 20             	add    esp,0x20
c001fb19:	e9 74 f7 ff ff       	jmp    c001f292 <Vm::x87Handler(regs*)+0x77>
c001fb1e:	80 fa 04             	cmp    dl,0x4
c001fb21:	75 2a                	jne    c001fb4d <Vm::x87Handler(regs*)+0x932>
c001fb23:	51                   	push   ecx
c001fb24:	51                   	push   ecx
c001fb25:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb28:	ff 36                	push   DWORD PTR [esi]
c001fb2a:	e8 43 f3 ff ff       	call   c001ee72 <Vm::fpu64ToInternal(unsigned long long)>
c001fb2f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb36:	89 c6                	mov    esi,eax
c001fb38:	89 d7                	mov    edi,edx
c001fb3a:	e8 9f f5 ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001fb3f:	57                   	push   edi
c001fb40:	56                   	push   esi
c001fb41:	52                   	push   edx
c001fb42:	50                   	push   eax
c001fb43:	e8 36 f5 ff ff       	call   c001f07e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fb48:	e9 e2 00 00 00       	jmp    c001fc2f <Vm::x87Handler(regs*)+0xa14>
c001fb4d:	80 fa 05             	cmp    dl,0x5
c001fb50:	75 28                	jne    c001fb7a <Vm::x87Handler(regs*)+0x95f>
c001fb52:	83 ec 0c             	sub    esp,0xc
c001fb55:	6a 00                	push   0x0
c001fb57:	e8 82 f5 ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001fb5c:	89 c7                	mov    edi,eax
c001fb5e:	89 d5                	mov    ebp,edx
c001fb60:	58                   	pop    eax
c001fb61:	5a                   	pop    edx
c001fb62:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb65:	ff 36                	push   DWORD PTR [esi]
c001fb67:	e8 06 f3 ff ff       	call   c001ee72 <Vm::fpu64ToInternal(unsigned long long)>
c001fb6c:	83 c4 10             	add    esp,0x10
c001fb6f:	55                   	push   ebp
c001fb70:	57                   	push   edi
c001fb71:	52                   	push   edx
c001fb72:	50                   	push   eax
c001fb73:	e8 06 f5 ff ff       	call   c001f07e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fb78:	eb 60                	jmp    c001fbda <Vm::x87Handler(regs*)+0x9bf>
c001fb7a:	80 fa 06             	cmp    dl,0x6
c001fb7d:	75 2a                	jne    c001fba9 <Vm::x87Handler(regs*)+0x98e>
c001fb7f:	51                   	push   ecx
c001fb80:	51                   	push   ecx
c001fb81:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb84:	ff 36                	push   DWORD PTR [esi]
c001fb86:	e8 e7 f2 ff ff       	call   c001ee72 <Vm::fpu64ToInternal(unsigned long long)>
c001fb8b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb92:	89 c6                	mov    esi,eax
c001fb94:	89 d7                	mov    edi,edx
c001fb96:	e8 43 f5 ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001fb9b:	57                   	push   edi
c001fb9c:	56                   	push   esi
c001fb9d:	52                   	push   edx
c001fb9e:	50                   	push   eax
c001fb9f:	e8 08 f5 ff ff       	call   c001f0ac <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fba4:	e9 86 00 00 00       	jmp    c001fc2f <Vm::x87Handler(regs*)+0xa14>
c001fba9:	31 c0                	xor    eax,eax
c001fbab:	80 fa 07             	cmp    dl,0x7
c001fbae:	0f 85 c8 00 00 00    	jne    c001fc7c <Vm::x87Handler(regs*)+0xa61>
c001fbb4:	83 ec 0c             	sub    esp,0xc
c001fbb7:	6a 00                	push   0x0
c001fbb9:	e8 20 f5 ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001fbbe:	89 c7                	mov    edi,eax
c001fbc0:	89 d5                	mov    ebp,edx
c001fbc2:	58                   	pop    eax
c001fbc3:	5a                   	pop    edx
c001fbc4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fbc7:	ff 36                	push   DWORD PTR [esi]
c001fbc9:	e8 a4 f2 ff ff       	call   c001ee72 <Vm::fpu64ToInternal(unsigned long long)>
c001fbce:	83 c4 10             	add    esp,0x10
c001fbd1:	55                   	push   ebp
c001fbd2:	57                   	push   edi
c001fbd3:	52                   	push   edx
c001fbd4:	50                   	push   eax
c001fbd5:	e8 d2 f4 ff ff       	call   c001f0ac <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fbda:	83 c4 0c             	add    esp,0xc
c001fbdd:	eb 53                	jmp    c001fc32 <Vm::x87Handler(regs*)+0xa17>
c001fbdf:	31 c0                	xor    eax,eax
c001fbe1:	80 fa 02             	cmp    dl,0x2
c001fbe4:	0f 85 92 00 00 00    	jne    c001fc7c <Vm::x87Handler(regs*)+0xa61>
c001fbea:	83 ec 0c             	sub    esp,0xc
c001fbed:	6a 00                	push   0x0
c001fbef:	e8 ea f4 ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001fbf4:	59                   	pop    ecx
c001fbf5:	5f                   	pop    edi
c001fbf6:	52                   	push   edx
c001fbf7:	50                   	push   eax
c001fbf8:	e8 27 f2 ff ff       	call   c001ee24 <Vm::fpuInternalTo64(unsigned long long)>
c001fbfd:	eb 70                	jmp    c001fc6f <Vm::x87Handler(regs*)+0xa54>
c001fbff:	31 c0                	xor    eax,eax
c001fc01:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001fc06:	75 74                	jne    c001fc7c <Vm::x87Handler(regs*)+0xa61>
c001fc08:	50                   	push   eax
c001fc09:	50                   	push   eax
c001fc0a:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001fc0d:	31 d2                	xor    edx,edx
c001fc0f:	52                   	push   edx
c001fc10:	50                   	push   eax
c001fc11:	e8 f6 f2 ff ff       	call   c001ef0c <Vm::fpuLongToFloat(long long)>
c001fc16:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc1d:	89 c6                	mov    esi,eax
c001fc1f:	89 d7                	mov    edi,edx
c001fc21:	e8 b8 f4 ff ff       	call   c001f0de <Vm::fpuGetReg(int)>
c001fc26:	57                   	push   edi
c001fc27:	56                   	push   esi
c001fc28:	52                   	push   edx
c001fc29:	50                   	push   eax
c001fc2a:	e8 5e f4 ff ff       	call   c001f08d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fc2f:	83 c4 1c             	add    esp,0x1c
c001fc32:	52                   	push   edx
c001fc33:	50                   	push   eax
c001fc34:	6a 00                	push   0x0
c001fc36:	e8 e6 f4 ff ff       	call   c001f121 <Vm::fpuSetReg(int, unsigned long long)>
c001fc3b:	e9 f2 f7 ff ff       	jmp    c001f432 <Vm::x87Handler(regs*)+0x217>
c001fc40:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc44:	80 fa 05             	cmp    dl,0x5
c001fc47:	75 11                	jne    c001fc5a <Vm::x87Handler(regs*)+0xa3f>
c001fc49:	55                   	push   ebp
c001fc4a:	55                   	push   ebp
c001fc4b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc4e:	ff 36                	push   DWORD PTR [esi]
c001fc50:	e8 81 f2 ff ff       	call   c001eed6 <Vm::fpuULongToFloat(unsigned long long)>
c001fc55:	e9 cf f7 ff ff       	jmp    c001f429 <Vm::x87Handler(regs*)+0x20e>
c001fc5a:	31 c0                	xor    eax,eax
c001fc5c:	80 fa 07             	cmp    dl,0x7
c001fc5f:	75 1b                	jne    c001fc7c <Vm::x87Handler(regs*)+0xa61>
c001fc61:	e8 63 f5 ff ff       	call   c001f1c9 <Vm::fpuPop()>
c001fc66:	51                   	push   ecx
c001fc67:	51                   	push   ecx
c001fc68:	52                   	push   edx
c001fc69:	50                   	push   eax
c001fc6a:	e8 0c f2 ff ff       	call   c001ee7b <Vm::fpuFloatToLong(unsigned long long)>
c001fc6f:	83 c4 10             	add    esp,0x10
c001fc72:	89 06                	mov    DWORD PTR [esi],eax
c001fc74:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001fc77:	e9 f8 f7 ff ff       	jmp    c001f474 <Vm::x87Handler(regs*)+0x259>
c001fc7c:	83 c4 1c             	add    esp,0x1c
c001fc7f:	5b                   	pop    ebx
c001fc80:	5e                   	pop    esi
c001fc81:	5f                   	pop    edi
c001fc82:	5d                   	pop    ebp
c001fc83:	c3                   	ret    

c001fc84 <__static_initialization_and_destruction_0(int, int)>:
c001fc84:	83 ec 0c             	sub    esp,0xc
c001fc87:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001fc8c:	75 1a                	jne    c001fca8 <__static_initialization_and_destruction_0(int, int)+0x24>
c001fc8e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001fc96:	75 10                	jne    c001fca8 <__static_initialization_and_destruction_0(int, int)+0x24>
c001fc98:	83 ec 0c             	sub    esp,0xc
c001fc9b:	68 20 0c 03 c0       	push   0xc0030c20
c001fca0:	e8 05 8d 00 00       	call   c00289aa <Vm::_FPUState::_FPUState()>
c001fca5:	83 c4 10             	add    esp,0x10
c001fca8:	90                   	nop
c001fca9:	83 c4 0c             	add    esp,0xc
c001fcac:	c3                   	ret    

c001fcad <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001fcad:	83 ec 0c             	sub    esp,0xc
c001fcb0:	83 ec 08             	sub    esp,0x8
c001fcb3:	68 ff ff 00 00       	push   0xffff
c001fcb8:	6a 01                	push   0x1
c001fcba:	e8 c5 ff ff ff       	call   c001fc84 <__static_initialization_and_destruction_0(int, int)>
c001fcbf:	83 c4 10             	add    esp,0x10
c001fcc2:	83 c4 0c             	add    esp,0xc
c001fcc5:	c3                   	ret    

c001fcc6 <FAT::getName()>:
c001fcc6:	b8 08 bb 02 c0       	mov    eax,0xc002bb08
c001fccb:	c3                   	ret    

c001fccc <FAT::tell(void*, unsigned long long*)>:
c001fccc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fcd1:	75 06                	jne    c001fcd9 <FAT::tell(void*, unsigned long long*)+0xd>
c001fcd3:	b8 04 00 00 00       	mov    eax,0x4
c001fcd8:	c3                   	ret    
c001fcd9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fcde:	75 06                	jne    c001fce6 <FAT::tell(void*, unsigned long long*)+0x1a>
c001fce0:	b8 04 00 00 00       	mov    eax,0x4
c001fce5:	c3                   	ret    
c001fce6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fcea:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001fced:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001fcf0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fcf4:	89 01                	mov    DWORD PTR [ecx],eax
c001fcf6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fcf9:	b8 00 00 00 00       	mov    eax,0x0
c001fcfe:	c3                   	ret    
c001fcff:	90                   	nop

c001fd00 <FAT::stat(void*, unsigned long long*)>:
c001fd00:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fd05:	75 06                	jne    c001fd0d <FAT::stat(void*, unsigned long long*)+0xd>
c001fd07:	b8 04 00 00 00       	mov    eax,0x4
c001fd0c:	c3                   	ret    
c001fd0d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fd12:	75 06                	jne    c001fd1a <FAT::stat(void*, unsigned long long*)+0x1a>
c001fd14:	b8 04 00 00 00       	mov    eax,0x4
c001fd19:	c3                   	ret    
c001fd1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fd1e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001fd21:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001fd24:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fd28:	89 01                	mov    DWORD PTR [ecx],eax
c001fd2a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fd2d:	b8 00 00 00 00       	mov    eax,0x0
c001fd32:	c3                   	ret    
c001fd33:	90                   	nop

c001fd34 <FAT::~FAT()>:
c001fd34:	83 ec 0c             	sub    esp,0xc
c001fd37:	ba 54 bb 02 c0       	mov    edx,0xc002bb54
c001fd3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd40:	89 10                	mov    DWORD PTR [eax],edx
c001fd42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd46:	83 ec 0c             	sub    esp,0xc
c001fd49:	50                   	push   eax
c001fd4a:	e8 51 2b ff ff       	call   c00128a0 <Filesystem::~Filesystem()>
c001fd4f:	83 c4 10             	add    esp,0x10
c001fd52:	90                   	nop
c001fd53:	83 c4 0c             	add    esp,0xc
c001fd56:	c3                   	ret    
c001fd57:	90                   	nop

c001fd58 <FAT::~FAT()>:
c001fd58:	83 ec 0c             	sub    esp,0xc
c001fd5b:	83 ec 0c             	sub    esp,0xc
c001fd5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd62:	e8 cd ff ff ff       	call   c001fd34 <FAT::~FAT()>
c001fd67:	83 c4 10             	add    esp,0x10
c001fd6a:	83 ec 08             	sub    esp,0x8
c001fd6d:	6a 08                	push   0x8
c001fd6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd73:	e8 21 27 ff ff       	call   c0012499 <operator delete(void*, unsigned long)>
c001fd78:	83 c4 10             	add    esp,0x10
c001fd7b:	83 c4 0c             	add    esp,0xc
c001fd7e:	c3                   	ret    
c001fd7f:	90                   	nop

c001fd80 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001fd80:	83 ec 1c             	sub    esp,0x1c
c001fd83:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001fd8a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001fd8f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fd93:	8b 04 85 a0 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf360]
c001fd9a:	83 f8 ff             	cmp    eax,0xffffffff
c001fd9d:	75 34                	jne    c001fdd3 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001fd9f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fda3:	88 c2                	mov    dl,al
c001fda5:	a1 80 0c 03 c0       	mov    eax,ds:0xc0030c80
c001fdaa:	01 d0                	add    eax,edx
c001fdac:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fdb0:	8b 15 80 0c 03 c0    	mov    edx,DWORD PTR ds:0xc0030c80
c001fdb6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fdba:	89 14 85 a0 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf360],edx
c001fdc1:	a1 80 0c 03 c0       	mov    eax,ds:0xc0030c80
c001fdc6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001fdca:	89 14 85 20 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf2e0],edx
c001fdd1:	eb 17                	jmp    c001fdea <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001fdd3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fdd7:	88 c2                	mov    dl,al
c001fdd9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fddd:	8b 04 85 a0 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf360]
c001fde4:	01 d0                	add    eax,edx
c001fde6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fdea:	83 ec 04             	sub    esp,0x4
c001fded:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fdf1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fdf5:	8d 44 24 15          	lea    eax,[esp+0x15]
c001fdf9:	50                   	push   eax
c001fdfa:	e8 ff 6e fe ff       	call   c0006cfe <f_getlabel>
c001fdff:	83 c4 10             	add    esp,0x10
c001fe02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fe06:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fe0b:	75 07                	jne    c001fe14 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001fe0d:	b8 00 00 00 00       	mov    eax,0x0
c001fe12:	eb 05                	jmp    c001fe19 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001fe14:	b8 01 00 00 00       	mov    eax,0x1
c001fe19:	83 c4 1c             	add    esp,0x1c
c001fe1c:	c3                   	ret    
c001fe1d:	90                   	nop

c001fe1e <FAT::setlabel(LogicalDisk*, int, char*)>:
c001fe1e:	57                   	push   edi
c001fe1f:	83 ec 58             	sub    esp,0x58
c001fe22:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001fe2a:	8d 54 24 10          	lea    edx,[esp+0x10]
c001fe2e:	b9 0f 00 00 00       	mov    ecx,0xf
c001fe33:	b8 00 00 00 00       	mov    eax,0x0
c001fe38:	fc                   	cld    
c001fe39:	89 d7                	mov    edi,edx
c001fe3b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fe3d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fe41:	8b 04 85 a0 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf360]
c001fe48:	83 f8 ff             	cmp    eax,0xffffffff
c001fe4b:	75 34                	jne    c001fe81 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001fe4d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fe51:	88 c2                	mov    dl,al
c001fe53:	a1 80 0c 03 c0       	mov    eax,ds:0xc0030c80
c001fe58:	01 d0                	add    eax,edx
c001fe5a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fe5e:	8b 15 80 0c 03 c0    	mov    edx,DWORD PTR ds:0xc0030c80
c001fe64:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fe68:	89 14 85 a0 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf360],edx
c001fe6f:	a1 80 0c 03 c0       	mov    eax,ds:0xc0030c80
c001fe74:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001fe78:	89 14 85 20 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf2e0],edx
c001fe7f:	eb 17                	jmp    c001fe98 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001fe81:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fe85:	88 c2                	mov    dl,al
c001fe87:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fe8b:	8b 04 85 a0 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf360]
c001fe92:	01 d0                	add    eax,edx
c001fe94:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fe98:	83 ec 08             	sub    esp,0x8
c001fe9b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001fe9f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fea3:	50                   	push   eax
c001fea4:	e8 a3 0a fe ff       	call   c000094c <strcat>
c001fea9:	83 c4 10             	add    esp,0x10
c001feac:	83 ec 0c             	sub    esp,0xc
c001feaf:	8d 44 24 18          	lea    eax,[esp+0x18]
c001feb3:	50                   	push   eax
c001feb4:	e8 33 70 fe ff       	call   c0006eec <f_setlabel>
c001feb9:	83 c4 10             	add    esp,0x10
c001febc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001fec0:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001fec5:	75 07                	jne    c001fece <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001fec7:	b8 00 00 00 00       	mov    eax,0x0
c001fecc:	eb 05                	jmp    c001fed3 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001fece:	b8 01 00 00 00       	mov    eax,0x1
c001fed3:	83 c4 58             	add    esp,0x58
c001fed6:	5f                   	pop    edi
c001fed7:	c3                   	ret    

c001fed8 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001fed8:	83 ec 2c             	sub    esp,0x2c
c001fedb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001fee3:	83 ec 08             	sub    esp,0x8
c001fee6:	68 2c bb 02 c0       	push   0xc002bb2c
c001feeb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001feef:	e8 a4 09 fe ff       	call   c0000898 <strcmp>
c001fef4:	83 c4 10             	add    esp,0x10
c001fef7:	85 c0                	test   eax,eax
c001fef9:	0f 94 c0             	sete   al
c001fefc:	84 c0                	test   al,al
c001fefe:	74 0d                	je     c001ff0d <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001ff00:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ff08:	e9 a6 00 00 00       	jmp    c001ffb3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001ff0d:	83 ec 08             	sub    esp,0x8
c001ff10:	68 1e bb 02 c0       	push   0xc002bb1e
c001ff15:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ff19:	e8 7a 09 fe ff       	call   c0000898 <strcmp>
c001ff1e:	83 c4 10             	add    esp,0x10
c001ff21:	85 c0                	test   eax,eax
c001ff23:	0f 94 c0             	sete   al
c001ff26:	84 c0                	test   al,al
c001ff28:	74 0a                	je     c001ff34 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001ff2a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ff32:	eb 7f                	jmp    c001ffb3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001ff34:	83 ec 08             	sub    esp,0x8
c001ff37:	68 24 bb 02 c0       	push   0xc002bb24
c001ff3c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ff40:	e8 53 09 fe ff       	call   c0000898 <strcmp>
c001ff45:	83 c4 10             	add    esp,0x10
c001ff48:	85 c0                	test   eax,eax
c001ff4a:	0f 94 c0             	sete   al
c001ff4d:	84 c0                	test   al,al
c001ff4f:	74 0a                	je     c001ff5b <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001ff51:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ff59:	eb 58                	jmp    c001ffb3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001ff5b:	83 ec 08             	sub    esp,0x8
c001ff5e:	68 0c 91 02 c0       	push   0xc002910c
c001ff63:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ff67:	e8 2c 09 fe ff       	call   c0000898 <strcmp>
c001ff6c:	83 c4 10             	add    esp,0x10
c001ff6f:	85 c0                	test   eax,eax
c001ff71:	0f 94 c0             	sete   al
c001ff74:	84 c0                	test   al,al
c001ff76:	74 0a                	je     c001ff82 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001ff78:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001ff80:	eb 31                	jmp    c001ffb3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001ff82:	83 ec 08             	sub    esp,0x8
c001ff85:	68 2a bb 02 c0       	push   0xc002bb2a
c001ff8a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ff8e:	e8 05 09 fe ff       	call   c0000898 <strcmp>
c001ff93:	83 c4 10             	add    esp,0x10
c001ff96:	85 c0                	test   eax,eax
c001ff98:	0f 94 c0             	sete   al
c001ff9b:	84 c0                	test   al,al
c001ff9d:	74 0a                	je     c001ffa9 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001ff9f:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001ffa7:	eb 0a                	jmp    c001ffb3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001ffa9:	b8 08 00 00 00       	mov    eax,0x8
c001ffae:	e9 df 00 00 00       	jmp    c0020092 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c001ffb3:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001ffba:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001ffbf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ffc3:	8b 04 85 a0 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf360]
c001ffca:	83 f8 ff             	cmp    eax,0xffffffff
c001ffcd:	75 34                	jne    c0020003 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001ffcf:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001ffd3:	88 c2                	mov    dl,al
c001ffd5:	a1 80 0c 03 c0       	mov    eax,ds:0xc0030c80
c001ffda:	01 d0                	add    eax,edx
c001ffdc:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001ffe0:	8b 15 80 0c 03 c0    	mov    edx,DWORD PTR ds:0xc0030c80
c001ffe6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ffea:	89 14 85 a0 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf360],edx
c001fff1:	a1 80 0c 03 c0       	mov    eax,ds:0xc0030c80
c001fff6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001fffa:	89 14 85 20 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf2e0],edx
c0020001:	eb 17                	jmp    c002001a <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020003:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020007:	88 c2                	mov    dl,al
c0020009:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002000d:	8b 04 85 a0 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf360]
c0020014:	01 d0                	add    eax,edx
c0020016:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002001a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002001e:	88 04 24             	mov    BYTE PTR [esp],al
c0020021:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020025:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020029:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020031:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020036:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002003e:	83 ec 0c             	sub    esp,0xc
c0020041:	68 00 20 00 00       	push   0x2000
c0020046:	e8 4e f5 fe ff       	call   c000f599 <malloc>
c002004b:	83 c4 10             	add    esp,0x10
c002004e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020052:	68 00 20 00 00       	push   0x2000
c0020057:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002005b:	8d 44 24 08          	lea    eax,[esp+0x8]
c002005f:	50                   	push   eax
c0020060:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020064:	50                   	push   eax
c0020065:	e8 cd 72 fe ff       	call   c0007337 <f_mkfs>
c002006a:	83 c4 10             	add    esp,0x10
c002006d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020071:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020076:	75 07                	jne    c002007f <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020078:	b8 00 00 00 00       	mov    eax,0x0
c002007d:	eb 13                	jmp    c0020092 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c002007f:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020084:	75 07                	jne    c002008d <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c0020086:	b8 09 00 00 00       	mov    eax,0x9
c002008b:	eb 05                	jmp    c0020092 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c002008d:	b8 01 00 00 00       	mov    eax,0x1
c0020092:	83 c4 2c             	add    esp,0x2c
c0020095:	c3                   	ret    

c0020096 <FAT::tryMount(LogicalDisk*, int)>:
c0020096:	81 ec 6c 03 00 00    	sub    esp,0x36c
c002009c:	a1 80 0c 03 c0       	mov    eax,ds:0xc0030c80
c00200a1:	83 f8 14             	cmp    eax,0x14
c00200a4:	75 17                	jne    c00200bd <FAT::tryMount(LogicalDisk*, int)+0x27>
c00200a6:	83 ec 0c             	sub    esp,0xc
c00200a9:	68 30 bb 02 c0       	push   0xc002bb30
c00200ae:	e8 1e 9c ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c00200b3:	83 c4 10             	add    esp,0x10
c00200b6:	b0 00                	mov    al,0x0
c00200b8:	e9 d7 01 00 00       	jmp    c0020294 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00200bd:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00200c4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00200ca:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00200d0:	3d 00 02 00 00       	cmp    eax,0x200
c00200d5:	74 07                	je     c00200de <FAT::tryMount(LogicalDisk*, int)+0x48>
c00200d7:	b0 00                	mov    al,0x0
c00200d9:	e9 b6 01 00 00       	jmp    c0020294 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00200de:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00200e6:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00200ed:	8b 04 85 a0 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf360]
c00200f4:	83 f8 ff             	cmp    eax,0xffffffff
c00200f7:	74 07                	je     c0020100 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00200f9:	b0 01                	mov    al,0x1
c00200fb:	e9 94 01 00 00       	jmp    c0020294 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020100:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c002010a:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020112:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020119:	88 c2                	mov    dl,al
c002011b:	a1 80 0c 03 c0       	mov    eax,ds:0xc0030c80
c0020120:	01 d0                	add    eax,edx
c0020122:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020129:	8b 15 80 0c 03 c0    	mov    edx,DWORD PTR ds:0xc0030c80
c002012f:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020136:	89 14 85 a0 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf360],edx
c002013d:	a1 80 0c 03 c0       	mov    eax,ds:0xc0030c80
c0020142:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020149:	89 14 85 20 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf2e0],edx
c0020150:	83 ec 0c             	sub    esp,0xc
c0020153:	68 54 02 00 00       	push   0x254
c0020158:	e8 3c f4 fe ff       	call   c000f599 <malloc>
c002015d:	83 c4 10             	add    esp,0x10
c0020160:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020167:	83 ec 04             	sub    esp,0x4
c002016a:	6a 00                	push   0x0
c002016c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020173:	50                   	push   eax
c0020174:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002017b:	e8 75 4d fe ff       	call   c0004ef5 <f_mount>
c0020180:	83 c4 10             	add    esp,0x10
c0020183:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c002018a:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020192:	74 19                	je     c00201ad <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020194:	83 ec 0c             	sub    esp,0xc
c0020197:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002019e:	e8 16 f4 fe ff       	call   c000f5b9 <rfree>
c00201a3:	83 c4 10             	add    esp,0x10
c00201a6:	b0 00                	mov    al,0x0
c00201a8:	e9 e7 00 00 00       	jmp    c0020294 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00201ad:	83 ec 04             	sub    esp,0x4
c00201b0:	68 00 01 00 00       	push   0x100
c00201b5:	6a 00                	push   0x0
c00201b7:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00201be:	50                   	push   eax
c00201bf:	e8 8c 05 fe ff       	call   c0000750 <memset>
c00201c4:	83 c4 10             	add    esp,0x10
c00201c7:	83 ec 08             	sub    esp,0x8
c00201ca:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00201d1:	50                   	push   eax
c00201d2:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00201d9:	50                   	push   eax
c00201da:	e8 6d 07 fe ff       	call   c000094c <strcat>
c00201df:	83 c4 10             	add    esp,0x10
c00201e2:	83 ec 08             	sub    esp,0x8
c00201e5:	68 3e bb 02 c0       	push   0xc002bb3e
c00201ea:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00201f1:	50                   	push   eax
c00201f2:	e8 55 07 fe ff       	call   c000094c <strcat>
c00201f7:	83 c4 10             	add    esp,0x10
c00201fa:	83 ec 04             	sub    esp,0x4
c00201fd:	6a 01                	push   0x1
c00201ff:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020206:	50                   	push   eax
c0020207:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002020b:	50                   	push   eax
c002020c:	e8 46 4d fe ff       	call   c0004f57 <f_open>
c0020211:	83 c4 10             	add    esp,0x10
c0020214:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c002021b:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020222:	85 c0                	test   eax,eax
c0020224:	74 0a                	je     c0020230 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020226:	78 2d                	js     c0020255 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020228:	83 e8 04             	sub    eax,0x4
c002022b:	83 f8 01             	cmp    eax,0x1
c002022e:	77 25                	ja     c0020255 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020230:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020238:	83 ec 0c             	sub    esp,0xc
c002023b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002023f:	50                   	push   eax
c0020240:	e8 64 58 fe ff       	call   c0005aa9 <f_close>
c0020245:	83 c4 10             	add    esp,0x10
c0020248:	90                   	nop
c0020249:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020251:	74 3a                	je     c002028d <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020253:	eb 2d                	jmp    c0020282 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020255:	83 ec 0c             	sub    esp,0xc
c0020258:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002025f:	e8 55 f3 fe ff       	call   c000f5b9 <rfree>
c0020264:	83 c4 10             	add    esp,0x10
c0020267:	83 ec 04             	sub    esp,0x4
c002026a:	6a 00                	push   0x0
c002026c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020273:	50                   	push   eax
c0020274:	6a 00                	push   0x0
c0020276:	e8 7a 4c fe ff       	call   c0004ef5 <f_mount>
c002027b:	83 c4 10             	add    esp,0x10
c002027e:	b0 00                	mov    al,0x0
c0020280:	eb 12                	jmp    c0020294 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020282:	a1 80 0c 03 c0       	mov    eax,ds:0xc0030c80
c0020287:	40                   	inc    eax
c0020288:	a3 80 0c 03 c0       	mov    ds:0xc0030c80,eax
c002028d:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020294:	81 c4 6c 03 00 00    	add    esp,0x36c
c002029a:	c3                   	ret    
c002029b:	90                   	nop

c002029c <FAT::getFileFirstSector(char const*)>:
c002029c:	53                   	push   ebx
c002029d:	83 ec 28             	sub    esp,0x28
c00202a0:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c00202a8:	83 ec 0c             	sub    esp,0xc
c00202ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202af:	e8 e5 f2 fe ff       	call   c000f599 <malloc>
c00202b4:	83 c4 10             	add    esp,0x10
c00202b7:	89 c3                	mov    ebx,eax
c00202b9:	a1 b0 0b 03 c0       	mov    eax,ds:0xc0030bb0
c00202be:	83 ec 04             	sub    esp,0x4
c00202c1:	50                   	push   eax
c00202c2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00202c6:	53                   	push   ebx
c00202c7:	e8 04 28 ff ff       	call   c0012ad0 <File::File(char const*, Process*)>
c00202cc:	83 c4 10             	add    esp,0x10
c00202cf:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00202d3:	83 ec 08             	sub    esp,0x8
c00202d6:	6a 01                	push   0x1
c00202d8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00202dc:	e8 53 28 ff ff       	call   c0012b34 <File::open(FileOpenMode)>
c00202e1:	83 c4 10             	add    esp,0x10
c00202e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00202e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00202ea:	83 c0 0c             	add    eax,0xc
c00202ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00202ef:	83 ec 0c             	sub    esp,0xc
c00202f2:	8d 54 24 14          	lea    edx,[esp+0x14]
c00202f6:	52                   	push   edx
c00202f7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00202fb:	52                   	push   edx
c00202fc:	6a 00                	push   0x0
c00202fe:	6a 04                	push   0x4
c0020300:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0020304:	ff d0                	call   eax
c0020306:	83 c4 20             	add    esp,0x20
c0020309:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002030d:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020313:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020317:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002031b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c002031e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020321:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020325:	83 ec 0c             	sub    esp,0xc
c0020328:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c002032c:	e8 61 28 ff ff       	call   c0012b92 <File::close()>
c0020331:	83 c4 10             	add    esp,0x10
c0020334:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020338:	ba 00 00 00 00       	mov    edx,0x0
c002033d:	83 c4 28             	add    esp,0x28
c0020340:	5b                   	pop    ebx
c0020341:	c3                   	ret    

c0020342 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020342:	57                   	push   edi
c0020343:	56                   	push   esi
c0020344:	53                   	push   ebx
c0020345:	81 ec 50 02 00 00    	sub    esp,0x250
c002034b:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0020353:	74 0a                	je     c002035f <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c0020355:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c002035d:	75 0a                	jne    c0020369 <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c002035f:	b8 04 00 00 00       	mov    eax,0x4
c0020364:	e9 29 01 00 00       	jmp    c0020492 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020369:	83 ec 08             	sub    esp,0x8
c002036c:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020373:	50                   	push   eax
c0020374:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c002037b:	e8 33 5d fe ff       	call   c00060b3 <f_readdir>
c0020380:	83 c4 10             	add    esp,0x10
c0020383:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c002038a:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0020391:	83 ec 0c             	sub    esp,0xc
c0020394:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c002039b:	83 c0 1a             	add    eax,0x1a
c002039e:	50                   	push   eax
c002039f:	e8 c8 03 fe ff       	call   c000076c <strlen>
c00203a4:	83 c4 10             	add    esp,0x10
c00203a7:	ba 00 00 00 00       	mov    edx,0x0
c00203ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00203b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00203b4:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00203bb:	0f b6 c0             	movzx  eax,al
c00203be:	83 e0 10             	and    eax,0x10
c00203c1:	74 07                	je     c00203ca <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c00203c3:	b8 02 00 00 00       	mov    eax,0x2
c00203c8:	eb 05                	jmp    c00203cf <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c00203ca:	b8 01 00 00 00       	mov    eax,0x1
c00203cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00203d3:	83 ec 08             	sub    esp,0x8
c00203d6:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00203dd:	83 c0 1a             	add    eax,0x1a
c00203e0:	50                   	push   eax
c00203e1:	8d 44 24 10          	lea    eax,[esp+0x10]
c00203e5:	83 c0 10             	add    eax,0x10
c00203e8:	50                   	push   eax
c00203e9:	e8 1e 04 fe ff       	call   c000080c <strcpy>
c00203ee:	83 c4 10             	add    esp,0x10
c00203f1:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00203f8:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00203ff:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020403:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c002040a:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0020411:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0020418:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c002041f:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0020426:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c002042d:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0020434:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c002043b:	89 c6                	mov    esi,eax
c002043d:	89 d7                	mov    edi,edx
c002043f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020441:	89 c8                	mov    eax,ecx
c0020443:	89 fa                	mov    edx,edi
c0020445:	89 f3                	mov    ebx,esi
c0020447:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c002044e:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0020455:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c002045c:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0020463:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020469:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0020470:	84 c0                	test   al,al
c0020472:	75 07                	jne    c002047b <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c0020474:	b8 07 00 00 00       	mov    eax,0x7
c0020479:	eb 17                	jmp    c0020492 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c002047b:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0020482:	85 c0                	test   eax,eax
c0020484:	75 07                	jne    c002048d <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c0020486:	b8 00 00 00 00       	mov    eax,0x0
c002048b:	eb 05                	jmp    c0020492 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c002048d:	b8 01 00 00 00       	mov    eax,0x1
c0020492:	81 c4 50 02 00 00    	add    esp,0x250
c0020498:	5b                   	pop    ebx
c0020499:	5e                   	pop    esi
c002049a:	5f                   	pop    edi
c002049b:	c3                   	ret    

c002049c <FAT::read(void*, unsigned long, void*, int*)>:
c002049c:	83 ec 1c             	sub    esp,0x1c
c002049f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00204a4:	74 07                	je     c00204ad <FAT::read(void*, unsigned long, void*, int*)+0x11>
c00204a6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00204ab:	75 07                	jne    c00204b4 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c00204ad:	b8 04 00 00 00       	mov    eax,0x4
c00204b2:	eb 3d                	jmp    c00204f1 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00204b4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00204b8:	50                   	push   eax
c00204b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00204bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00204c1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00204c5:	e8 c9 4e fe ff       	call   c0005393 <f_read>
c00204ca:	83 c4 10             	add    esp,0x10
c00204cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00204d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00204d5:	89 c2                	mov    edx,eax
c00204d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00204db:	89 10                	mov    DWORD PTR [eax],edx
c00204dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00204e1:	85 c0                	test   eax,eax
c00204e3:	75 07                	jne    c00204ec <FAT::read(void*, unsigned long, void*, int*)+0x50>
c00204e5:	b8 00 00 00 00       	mov    eax,0x0
c00204ea:	eb 05                	jmp    c00204f1 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00204ec:	b8 01 00 00 00       	mov    eax,0x1
c00204f1:	83 c4 1c             	add    esp,0x1c
c00204f4:	c3                   	ret    
c00204f5:	90                   	nop

c00204f6 <FAT::write(void*, unsigned long, void*, int*)>:
c00204f6:	83 ec 1c             	sub    esp,0x1c
c00204f9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00204fe:	74 07                	je     c0020507 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020500:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020505:	75 07                	jne    c002050e <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020507:	b8 04 00 00 00       	mov    eax,0x4
c002050c:	eb 3d                	jmp    c002054b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c002050e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020512:	50                   	push   eax
c0020513:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002051b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002051f:	e8 ef 50 fe ff       	call   c0005613 <f_write>
c0020524:	83 c4 10             	add    esp,0x10
c0020527:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002052b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002052f:	89 c2                	mov    edx,eax
c0020531:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020535:	89 10                	mov    DWORD PTR [eax],edx
c0020537:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002053b:	85 c0                	test   eax,eax
c002053d:	75 07                	jne    c0020546 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c002053f:	b8 00 00 00 00       	mov    eax,0x0
c0020544:	eb 05                	jmp    c002054b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020546:	b8 01 00 00 00       	mov    eax,0x1
c002054b:	83 c4 1c             	add    esp,0x1c
c002054e:	c3                   	ret    
c002054f:	90                   	nop

c0020550 <FAT::close(void*)>:
c0020550:	83 ec 1c             	sub    esp,0x1c
c0020553:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020558:	75 07                	jne    c0020561 <FAT::close(void*)+0x11>
c002055a:	b8 04 00 00 00       	mov    eax,0x4
c002055f:	eb 36                	jmp    c0020597 <FAT::close(void*)+0x47>
c0020561:	83 ec 0c             	sub    esp,0xc
c0020564:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020568:	e8 3c 55 fe ff       	call   c0005aa9 <f_close>
c002056d:	83 c4 10             	add    esp,0x10
c0020570:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020574:	83 ec 0c             	sub    esp,0xc
c0020577:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002057b:	e8 29 f0 fe ff       	call   c000f5a9 <free>
c0020580:	83 c4 10             	add    esp,0x10
c0020583:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020587:	85 c0                	test   eax,eax
c0020589:	75 07                	jne    c0020592 <FAT::close(void*)+0x42>
c002058b:	b8 00 00 00 00       	mov    eax,0x0
c0020590:	eb 05                	jmp    c0020597 <FAT::close(void*)+0x47>
c0020592:	b8 01 00 00 00       	mov    eax,0x1
c0020597:	83 c4 1c             	add    esp,0x1c
c002059a:	c3                   	ret    
c002059b:	90                   	nop

c002059c <FAT::closeDir(void*)>:
c002059c:	83 ec 1c             	sub    esp,0x1c
c002059f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00205a4:	75 07                	jne    c00205ad <FAT::closeDir(void*)+0x11>
c00205a6:	b8 04 00 00 00       	mov    eax,0x4
c00205ab:	eb 36                	jmp    c00205e3 <FAT::closeDir(void*)+0x47>
c00205ad:	83 ec 0c             	sub    esp,0xc
c00205b0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00205b4:	e8 d8 5a fe ff       	call   c0006091 <f_closedir>
c00205b9:	83 c4 10             	add    esp,0x10
c00205bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00205c0:	83 ec 0c             	sub    esp,0xc
c00205c3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00205c7:	e8 dd ef fe ff       	call   c000f5a9 <free>
c00205cc:	83 c4 10             	add    esp,0x10
c00205cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00205d3:	85 c0                	test   eax,eax
c00205d5:	75 07                	jne    c00205de <FAT::closeDir(void*)+0x42>
c00205d7:	b8 00 00 00 00       	mov    eax,0x0
c00205dc:	eb 05                	jmp    c00205e3 <FAT::closeDir(void*)+0x47>
c00205de:	b8 01 00 00 00       	mov    eax,0x1
c00205e3:	83 c4 1c             	add    esp,0x1c
c00205e6:	c3                   	ret    
c00205e7:	90                   	nop

c00205e8 <FAT::seek(void*, unsigned long long)>:
c00205e8:	83 ec 2c             	sub    esp,0x2c
c00205eb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00205ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00205f3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00205f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00205fb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020600:	75 07                	jne    c0020609 <FAT::seek(void*, unsigned long long)+0x21>
c0020602:	b8 04 00 00 00       	mov    eax,0x4
c0020607:	eb 2f                	jmp    c0020638 <FAT::seek(void*, unsigned long long)+0x50>
c0020609:	83 ec 04             	sub    esp,0x4
c002060c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020610:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020614:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020618:	e8 bb 54 fe ff       	call   c0005ad8 <f_lseek>
c002061d:	83 c4 10             	add    esp,0x10
c0020620:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020628:	85 c0                	test   eax,eax
c002062a:	75 07                	jne    c0020633 <FAT::seek(void*, unsigned long long)+0x4b>
c002062c:	b8 00 00 00 00       	mov    eax,0x0
c0020631:	eb 05                	jmp    c0020638 <FAT::seek(void*, unsigned long long)+0x50>
c0020633:	b8 01 00 00 00       	mov    eax,0x1
c0020638:	83 c4 2c             	add    esp,0x2c
c002063b:	c3                   	ret    

c002063c <fatWrapperReadDisk>:
c002063c:	83 ec 1c             	sub    esp,0x1c
c002063f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020643:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020647:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002064b:	89 04 24             	mov    DWORD PTR [esp],eax
c002064e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020652:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020656:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002065b:	8b 04 85 60 dc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd23a0]
c0020662:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020666:	83 ec 0c             	sub    esp,0xc
c0020669:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002066d:	52                   	push   edx
c002066e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020672:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020676:	50                   	push   eax
c0020677:	e8 3e 58 ff ff       	call   c0015eba <LogicalDisk::read(unsigned long long, int, void*)>
c002067c:	83 c4 20             	add    esp,0x20
c002067f:	83 c4 1c             	add    esp,0x1c
c0020682:	c3                   	ret    

c0020683 <fatWrapperWriteDisk>:
c0020683:	83 ec 1c             	sub    esp,0x1c
c0020686:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002068a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002068e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020692:	89 04 24             	mov    DWORD PTR [esp],eax
c0020695:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020699:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002069d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00206a2:	8b 04 85 60 dc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd23a0]
c00206a9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00206ad:	83 ec 0c             	sub    esp,0xc
c00206b0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00206b4:	52                   	push   edx
c00206b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00206b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00206bd:	50                   	push   eax
c00206be:	e8 63 58 ff ff       	call   c0015f26 <LogicalDisk::write(unsigned long long, int, void*)>
c00206c3:	83 c4 20             	add    esp,0x20
c00206c6:	83 c4 1c             	add    esp,0x1c
c00206c9:	c3                   	ret    

c00206ca <fatWrapperIoctl>:
c00206ca:	53                   	push   ebx
c00206cb:	83 ec 28             	sub    esp,0x28
c00206ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00206d2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00206d6:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00206da:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00206de:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00206e3:	75 31                	jne    c0020716 <fatWrapperIoctl+0x4c>
c00206e5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00206e9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00206ed:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00206f2:	8b 04 85 60 dc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd23a0]
c00206f9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00206ff:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020705:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020709:	66 89 02             	mov    WORD PTR [edx],ax
c002070c:	b8 00 00 00 00       	mov    eax,0x0
c0020711:	e9 b2 00 00 00       	jmp    c00207c8 <fatWrapperIoctl+0xfe>
c0020716:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c002071b:	75 6a                	jne    c0020787 <fatWrapperIoctl+0xbd>
c002071d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020721:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020725:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002072a:	8b 04 85 60 dc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd23a0]
c0020731:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020737:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c002073d:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020743:	89 c8                	mov    eax,ecx
c0020745:	89 da                	mov    edx,ebx
c0020747:	0f a4 c2 0a          	shld   edx,eax,0xa
c002074b:	c1 e0 0a             	shl    eax,0xa
c002074e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020753:	8b 0c 8d 60 dc 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd23a0]
c002075a:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020760:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020766:	89 cb                	mov    ebx,ecx
c0020768:	c1 fb 1f             	sar    ebx,0x1f
c002076b:	53                   	push   ebx
c002076c:	51                   	push   ecx
c002076d:	52                   	push   edx
c002076e:	50                   	push   eax
c002076f:	e8 30 5e 00 00       	call   c00265a4 <__udivdi3>
c0020774:	83 c4 10             	add    esp,0x10
c0020777:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002077b:	89 01                	mov    DWORD PTR [ecx],eax
c002077d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020780:	b8 00 00 00 00       	mov    eax,0x0
c0020785:	eb 41                	jmp    c00207c8 <fatWrapperIoctl+0xfe>
c0020787:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002078c:	75 07                	jne    c0020795 <fatWrapperIoctl+0xcb>
c002078e:	b8 00 00 00 00       	mov    eax,0x0
c0020793:	eb 33                	jmp    c00207c8 <fatWrapperIoctl+0xfe>
c0020795:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c002079a:	75 19                	jne    c00207b5 <fatWrapperIoctl+0xeb>
c002079c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00207a0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00207a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00207a8:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00207ae:	b8 00 00 00 00       	mov    eax,0x0
c00207b3:	eb 13                	jmp    c00207c8 <fatWrapperIoctl+0xfe>
c00207b5:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00207ba:	75 07                	jne    c00207c3 <fatWrapperIoctl+0xf9>
c00207bc:	b8 00 00 00 00       	mov    eax,0x0
c00207c1:	eb 05                	jmp    c00207c8 <fatWrapperIoctl+0xfe>
c00207c3:	b8 04 00 00 00       	mov    eax,0x4
c00207c8:	83 c4 28             	add    esp,0x28
c00207cb:	5b                   	pop    ebx
c00207cc:	c3                   	ret    
c00207cd:	90                   	nop

c00207ce <FAT::FAT()>:
c00207ce:	83 ec 1c             	sub    esp,0x1c
c00207d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207d5:	83 ec 0c             	sub    esp,0xc
c00207d8:	50                   	push   eax
c00207d9:	e8 9e 20 ff ff       	call   c001287c <Filesystem::Filesystem()>
c00207de:	83 c4 10             	add    esp,0x10
c00207e1:	ba 54 bb 02 c0       	mov    edx,0xc002bb54
c00207e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207ea:	89 10                	mov    DWORD PTR [eax],edx
c00207ec:	c7 05 80 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c80,0x0
c00207f6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00207fe:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020803:	7f 15                	jg     c002081a <FAT::FAT()+0x4c>
c0020805:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020809:	c7 04 85 a0 0c 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcf360],0xffffffff
c0020814:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020818:	eb e4                	jmp    c00207fe <FAT::FAT()+0x30>
c002081a:	90                   	nop
c002081b:	83 c4 1c             	add    esp,0x1c
c002081e:	c3                   	ret    
c002081f:	90                   	nop

c0020820 <FAT::fixFilepath(char*)>:
c0020820:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020824:	8a 00                	mov    al,BYTE PTR [eax]
c0020826:	3c 40                	cmp    al,0x40
c0020828:	7e 2c                	jle    c0020856 <FAT::fixFilepath(char*)+0x36>
c002082a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002082e:	8a 00                	mov    al,BYTE PTR [eax]
c0020830:	83 e8 41             	sub    eax,0x41
c0020833:	88 c2                	mov    dl,al
c0020835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020839:	88 10                	mov    BYTE PTR [eax],dl
c002083b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002083f:	8a 00                	mov    al,BYTE PTR [eax]
c0020841:	0f be c0             	movsx  eax,al
c0020844:	8b 04 85 a0 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf360]
c002084b:	83 c0 30             	add    eax,0x30
c002084e:	88 c2                	mov    dl,al
c0020850:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020854:	88 10                	mov    BYTE PTR [eax],dl
c0020856:	90                   	nop
c0020857:	c3                   	ret    

c0020858 <FAT::open(char const*, void**, FileOpenMode)>:
c0020858:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002085e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020866:	74 0a                	je     c0020872 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020868:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020870:	75 0a                	jne    c002087c <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020872:	b8 04 00 00 00       	mov    eax,0x4
c0020877:	e9 fd 00 00 00       	jmp    c0020979 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002087c:	83 ec 08             	sub    esp,0x8
c002087f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020886:	8d 44 24 14          	lea    eax,[esp+0x14]
c002088a:	50                   	push   eax
c002088b:	e8 7c ff fd ff       	call   c000080c <strcpy>
c0020890:	83 c4 10             	add    esp,0x10
c0020893:	83 ec 08             	sub    esp,0x8
c0020896:	8d 44 24 10          	lea    eax,[esp+0x10]
c002089a:	50                   	push   eax
c002089b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00208a2:	e8 79 ff ff ff       	call   c0020820 <FAT::fixFilepath(char*)>
c00208a7:	83 c4 10             	add    esp,0x10
c00208aa:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00208b2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00208b9:	83 e0 01             	and    eax,0x1
c00208bc:	74 08                	je     c00208c6 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c00208be:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00208c6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00208cd:	83 e0 04             	and    eax,0x4
c00208d0:	74 10                	je     c00208e2 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c00208d2:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00208da:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00208e2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00208e9:	83 e0 02             	and    eax,0x2
c00208ec:	74 08                	je     c00208f6 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c00208ee:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00208f6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00208fd:	83 e0 08             	and    eax,0x8
c0020900:	74 08                	je     c002090a <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020902:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c002090a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020911:	83 e0 10             	and    eax,0x10
c0020914:	74 08                	je     c002091e <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020916:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c002091e:	83 ec 0c             	sub    esp,0xc
c0020921:	68 50 02 00 00       	push   0x250
c0020926:	e8 6e ec fe ff       	call   c000f599 <malloc>
c002092b:	83 c4 10             	add    esp,0x10
c002092e:	89 c2                	mov    edx,eax
c0020930:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020937:	89 10                	mov    DWORD PTR [eax],edx
c0020939:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020941:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020948:	8b 00                	mov    eax,DWORD PTR [eax]
c002094a:	83 ec 04             	sub    esp,0x4
c002094d:	52                   	push   edx
c002094e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020952:	52                   	push   edx
c0020953:	50                   	push   eax
c0020954:	e8 fe 45 fe ff       	call   c0004f57 <f_open>
c0020959:	83 c4 10             	add    esp,0x10
c002095c:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020963:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c002096b:	74 07                	je     c0020974 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c002096d:	b8 01 00 00 00       	mov    eax,0x1
c0020972:	eb 05                	jmp    c0020979 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020974:	b8 00 00 00 00       	mov    eax,0x0
c0020979:	81 c4 1c 01 00 00    	add    esp,0x11c
c002097f:	c3                   	ret    

c0020980 <FAT::openDir(char const*, void**)>:
c0020980:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020986:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002098e:	74 0a                	je     c002099a <FAT::openDir(char const*, void**)+0x1a>
c0020990:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020998:	75 07                	jne    c00209a1 <FAT::openDir(char const*, void**)+0x21>
c002099a:	b8 04 00 00 00       	mov    eax,0x4
c002099f:	eb 7d                	jmp    c0020a1e <FAT::openDir(char const*, void**)+0x9e>
c00209a1:	83 ec 08             	sub    esp,0x8
c00209a4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00209ab:	8d 44 24 18          	lea    eax,[esp+0x18]
c00209af:	50                   	push   eax
c00209b0:	e8 57 fe fd ff       	call   c000080c <strcpy>
c00209b5:	83 c4 10             	add    esp,0x10
c00209b8:	83 ec 08             	sub    esp,0x8
c00209bb:	8d 44 24 14          	lea    eax,[esp+0x14]
c00209bf:	50                   	push   eax
c00209c0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00209c7:	e8 54 fe ff ff       	call   c0020820 <FAT::fixFilepath(char*)>
c00209cc:	83 c4 10             	add    esp,0x10
c00209cf:	83 ec 0c             	sub    esp,0xc
c00209d2:	6a 4c                	push   0x4c
c00209d4:	e8 c0 eb fe ff       	call   c000f599 <malloc>
c00209d9:	83 c4 10             	add    esp,0x10
c00209dc:	89 c2                	mov    edx,eax
c00209de:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00209e5:	89 10                	mov    DWORD PTR [eax],edx
c00209e7:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00209ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00209f0:	83 ec 08             	sub    esp,0x8
c00209f3:	8d 54 24 14          	lea    edx,[esp+0x14]
c00209f7:	52                   	push   edx
c00209f8:	50                   	push   eax
c00209f9:	e8 91 55 fe ff       	call   c0005f8f <f_opendir>
c00209fe:	83 c4 10             	add    esp,0x10
c0020a01:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020a08:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020a10:	74 07                	je     c0020a19 <FAT::openDir(char const*, void**)+0x99>
c0020a12:	b8 01 00 00 00       	mov    eax,0x1
c0020a17:	eb 05                	jmp    c0020a1e <FAT::openDir(char const*, void**)+0x9e>
c0020a19:	b8 00 00 00 00       	mov    eax,0x0
c0020a1e:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020a24:	c3                   	ret    
c0020a25:	90                   	nop

c0020a26 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020a26:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020a2c:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020a34:	75 0a                	jne    c0020a40 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020a36:	b8 04 00 00 00       	mov    eax,0x4
c0020a3b:	e9 c9 00 00 00       	jmp    c0020b09 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020a40:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020a48:	75 0a                	jne    c0020a54 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020a4a:	b8 04 00 00 00       	mov    eax,0x4
c0020a4f:	e9 b5 00 00 00       	jmp    c0020b09 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020a54:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020a5c:	75 0a                	jne    c0020a68 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020a5e:	b8 04 00 00 00       	mov    eax,0x4
c0020a63:	e9 a1 00 00 00       	jmp    c0020b09 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020a68:	83 ec 08             	sub    esp,0x8
c0020a6b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020a72:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020a79:	50                   	push   eax
c0020a7a:	e8 8d fd fd ff       	call   c000080c <strcpy>
c0020a7f:	83 c4 10             	add    esp,0x10
c0020a82:	83 ec 08             	sub    esp,0x8
c0020a85:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020a8c:	50                   	push   eax
c0020a8d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020a94:	e8 87 fd ff ff       	call   c0020820 <FAT::fixFilepath(char*)>
c0020a99:	83 c4 10             	add    esp,0x10
c0020a9c:	83 ec 08             	sub    esp,0x8
c0020a9f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020aa3:	50                   	push   eax
c0020aa4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020aab:	50                   	push   eax
c0020aac:	e8 9d 56 fe ff       	call   c000614e <f_stat>
c0020ab1:	83 c4 10             	add    esp,0x10
c0020ab4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020abb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020ac2:	85 c0                	test   eax,eax
c0020ac4:	74 07                	je     c0020acd <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020ac6:	83 f8 04             	cmp    eax,0x4
c0020ac9:	74 32                	je     c0020afd <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020acb:	eb 37                	jmp    c0020b04 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020acd:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020ad1:	0f b6 c0             	movzx  eax,al
c0020ad4:	83 e0 10             	and    eax,0x10
c0020ad7:	0f 95 c2             	setne  dl
c0020ada:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020ae1:	88 10                	mov    BYTE PTR [eax],dl
c0020ae3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020ae6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020aea:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020af1:	89 01                	mov    DWORD PTR [ecx],eax
c0020af3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020af6:	b8 00 00 00 00       	mov    eax,0x0
c0020afb:	eb 0c                	jmp    c0020b09 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020afd:	b8 02 00 00 00       	mov    eax,0x2
c0020b02:	eb 05                	jmp    c0020b09 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020b04:	b8 01 00 00 00       	mov    eax,0x1
c0020b09:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020b0f:	c3                   	ret    

c0020b10 <FAT::unlink(char const*)>:
c0020b10:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020b16:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020b1e:	75 07                	jne    c0020b27 <FAT::unlink(char const*)+0x17>
c0020b20:	b8 04 00 00 00       	mov    eax,0x4
c0020b25:	eb 5c                	jmp    c0020b83 <FAT::unlink(char const*)+0x73>
c0020b27:	83 ec 08             	sub    esp,0x8
c0020b2a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020b31:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020b35:	50                   	push   eax
c0020b36:	e8 d1 fc fd ff       	call   c000080c <strcpy>
c0020b3b:	83 c4 10             	add    esp,0x10
c0020b3e:	83 ec 08             	sub    esp,0x8
c0020b41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020b45:	50                   	push   eax
c0020b46:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020b4d:	e8 ce fc ff ff       	call   c0020820 <FAT::fixFilepath(char*)>
c0020b52:	83 c4 10             	add    esp,0x10
c0020b55:	83 ec 0c             	sub    esp,0xc
c0020b58:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020b5c:	50                   	push   eax
c0020b5d:	e8 3e 59 fe ff       	call   c00064a0 <f_unlink>
c0020b62:	83 c4 10             	add    esp,0x10
c0020b65:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020b6c:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020b73:	85 c0                	test   eax,eax
c0020b75:	75 07                	jne    c0020b7e <FAT::unlink(char const*)+0x6e>
c0020b77:	b8 00 00 00 00       	mov    eax,0x0
c0020b7c:	eb 05                	jmp    c0020b83 <FAT::unlink(char const*)+0x73>
c0020b7e:	b8 01 00 00 00       	mov    eax,0x1
c0020b83:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020b89:	c3                   	ret    

c0020b8a <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020b8a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020b90:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020b97:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020b9e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020ba2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020ba6:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020bae:	75 0a                	jne    c0020bba <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020bb0:	b8 04 00 00 00       	mov    eax,0x4
c0020bb5:	e9 1c 01 00 00       	jmp    c0020cd6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020bba:	83 ec 08             	sub    esp,0x8
c0020bbd:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020bc4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020bc8:	50                   	push   eax
c0020bc9:	e8 3e fc fd ff       	call   c000080c <strcpy>
c0020bce:	83 c4 10             	add    esp,0x10
c0020bd1:	83 ec 08             	sub    esp,0x8
c0020bd4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020bd8:	50                   	push   eax
c0020bd9:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020be0:	e8 3b fc ff ff       	call   c0020820 <FAT::fixFilepath(char*)>
c0020be5:	83 c4 10             	add    esp,0x10
c0020be8:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020bf0:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020bf8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020bfd:	83 e0 01             	and    eax,0x1
c0020c00:	74 08                	je     c0020c0a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020c02:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020c0a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020c0f:	83 e0 02             	and    eax,0x2
c0020c12:	74 08                	je     c0020c1c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020c14:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020c1c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020c21:	83 e0 04             	and    eax,0x4
c0020c24:	74 08                	je     c0020c2e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020c26:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020c2e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020c33:	83 e0 08             	and    eax,0x8
c0020c36:	74 08                	je     c0020c40 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020c38:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020c40:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020c45:	83 e0 01             	and    eax,0x1
c0020c48:	74 08                	je     c0020c52 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020c4a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020c52:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020c57:	83 e0 02             	and    eax,0x2
c0020c5a:	74 08                	je     c0020c64 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020c5c:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020c64:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020c69:	83 e0 04             	and    eax,0x4
c0020c6c:	74 08                	je     c0020c76 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020c6e:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020c76:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020c7b:	83 e0 08             	and    eax,0x8
c0020c7e:	74 08                	je     c0020c88 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020c80:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020c88:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020c8f:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020c96:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020c9e:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020ca6:	83 ec 04             	sub    esp,0x4
c0020ca9:	52                   	push   edx
c0020caa:	50                   	push   eax
c0020cab:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020caf:	50                   	push   eax
c0020cb0:	e8 8d 5e fe ff       	call   c0006b42 <f_chmod>
c0020cb5:	83 c4 10             	add    esp,0x10
c0020cb8:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020cbf:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020cc6:	85 c0                	test   eax,eax
c0020cc8:	75 07                	jne    c0020cd1 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020cca:	b8 00 00 00 00       	mov    eax,0x0
c0020ccf:	eb 05                	jmp    c0020cd6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020cd1:	b8 01 00 00 00       	mov    eax,0x1
c0020cd6:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020cdc:	c3                   	ret    
c0020cdd:	90                   	nop

c0020cde <FAT::rename(char const*, char const*)>:
c0020cde:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020ce4:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020cec:	74 0a                	je     c0020cf8 <FAT::rename(char const*, char const*)+0x1a>
c0020cee:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020cf6:	75 0a                	jne    c0020d02 <FAT::rename(char const*, char const*)+0x24>
c0020cf8:	b8 04 00 00 00       	mov    eax,0x4
c0020cfd:	e9 98 00 00 00       	jmp    c0020d9a <FAT::rename(char const*, char const*)+0xbc>
c0020d02:	83 ec 08             	sub    esp,0x8
c0020d05:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020d0c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020d13:	50                   	push   eax
c0020d14:	e8 f3 fa fd ff       	call   c000080c <strcpy>
c0020d19:	83 c4 10             	add    esp,0x10
c0020d1c:	83 ec 08             	sub    esp,0x8
c0020d1f:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020d26:	50                   	push   eax
c0020d27:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020d2e:	e8 ed fa ff ff       	call   c0020820 <FAT::fixFilepath(char*)>
c0020d33:	83 c4 10             	add    esp,0x10
c0020d36:	83 ec 08             	sub    esp,0x8
c0020d39:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020d40:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020d44:	50                   	push   eax
c0020d45:	e8 c2 fa fd ff       	call   c000080c <strcpy>
c0020d4a:	83 c4 10             	add    esp,0x10
c0020d4d:	83 ec 08             	sub    esp,0x8
c0020d50:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020d54:	50                   	push   eax
c0020d55:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020d5c:	e8 bf fa ff ff       	call   c0020820 <FAT::fixFilepath(char*)>
c0020d61:	83 c4 10             	add    esp,0x10
c0020d64:	83 ec 08             	sub    esp,0x8
c0020d67:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020d6b:	50                   	push   eax
c0020d6c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020d73:	50                   	push   eax
c0020d74:	e8 d6 5a fe ff       	call   c000684f <f_rename>
c0020d79:	83 c4 10             	add    esp,0x10
c0020d7c:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020d83:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020d8a:	85 c0                	test   eax,eax
c0020d8c:	75 07                	jne    c0020d95 <FAT::rename(char const*, char const*)+0xb7>
c0020d8e:	b8 00 00 00 00       	mov    eax,0x0
c0020d93:	eb 05                	jmp    c0020d9a <FAT::rename(char const*, char const*)+0xbc>
c0020d95:	b8 01 00 00 00       	mov    eax,0x1
c0020d9a:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020da0:	c3                   	ret    
c0020da1:	90                   	nop

c0020da2 <FAT::mkdir(char const*)>:
c0020da2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020da8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020db0:	75 07                	jne    c0020db9 <FAT::mkdir(char const*)+0x17>
c0020db2:	b8 04 00 00 00       	mov    eax,0x4
c0020db7:	eb 5c                	jmp    c0020e15 <FAT::mkdir(char const*)+0x73>
c0020db9:	83 ec 08             	sub    esp,0x8
c0020dbc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020dc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020dc7:	50                   	push   eax
c0020dc8:	e8 3f fa fd ff       	call   c000080c <strcpy>
c0020dcd:	83 c4 10             	add    esp,0x10
c0020dd0:	83 ec 08             	sub    esp,0x8
c0020dd3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020dd7:	50                   	push   eax
c0020dd8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020ddf:	e8 3c fa ff ff       	call   c0020820 <FAT::fixFilepath(char*)>
c0020de4:	83 c4 10             	add    esp,0x10
c0020de7:	83 ec 0c             	sub    esp,0xc
c0020dea:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020dee:	50                   	push   eax
c0020def:	e8 2f 58 fe ff       	call   c0006623 <f_mkdir>
c0020df4:	83 c4 10             	add    esp,0x10
c0020df7:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020dfe:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020e05:	85 c0                	test   eax,eax
c0020e07:	75 07                	jne    c0020e10 <FAT::mkdir(char const*)+0x6e>
c0020e09:	b8 00 00 00 00       	mov    eax,0x0
c0020e0e:	eb 05                	jmp    c0020e15 <FAT::mkdir(char const*)+0x73>
c0020e10:	b8 01 00 00 00       	mov    eax,0x1
c0020e15:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020e1b:	c3                   	ret    

c0020e1c <FAT::exists(char const*)>:
c0020e1c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020e22:	83 ec 08             	sub    esp,0x8
c0020e25:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020e2c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020e30:	50                   	push   eax
c0020e31:	e8 d6 f9 fd ff       	call   c000080c <strcpy>
c0020e36:	83 c4 10             	add    esp,0x10
c0020e39:	83 ec 08             	sub    esp,0x8
c0020e3c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020e40:	50                   	push   eax
c0020e41:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020e48:	e8 d3 f9 ff ff       	call   c0020820 <FAT::fixFilepath(char*)>
c0020e4d:	83 c4 10             	add    esp,0x10
c0020e50:	83 ec 08             	sub    esp,0x8
c0020e53:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0020e5a:	50                   	push   eax
c0020e5b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020e5f:	50                   	push   eax
c0020e60:	e8 e9 52 fe ff       	call   c000614e <f_stat>
c0020e65:	83 c4 10             	add    esp,0x10
c0020e68:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020e6f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020e76:	85 c0                	test   eax,eax
c0020e78:	75 04                	jne    c0020e7e <FAT::exists(char const*)+0x62>
c0020e7a:	b0 01                	mov    al,0x1
c0020e7c:	eb 02                	jmp    c0020e80 <FAT::exists(char const*)+0x64>
c0020e7e:	b0 00                	mov    al,0x0
c0020e80:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020e86:	c3                   	ret    
c0020e87:	90                   	nop

c0020e88 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0020e88:	b8 08 00 00 00       	mov    eax,0x8
c0020e8d:	c3                   	ret    

c0020e8e <ISO9660::seek(void*, unsigned long long)>:
c0020e8e:	53                   	push   ebx
c0020e8f:	b8 04 00 00 00       	mov    eax,0x4
c0020e94:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020e98:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020e9c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020ea0:	85 d2                	test   edx,edx
c0020ea2:	74 17                	je     c0020ebb <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020ea4:	89 c8                	mov    eax,ecx
c0020ea6:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0020ea9:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0020eac:	b8 01 00 00 00       	mov    eax,0x1
c0020eb1:	73 08                	jae    c0020ebb <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020eb3:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0020eb6:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0020eb9:	31 c0                	xor    eax,eax
c0020ebb:	5b                   	pop    ebx
c0020ebc:	c3                   	ret    
c0020ebd:	90                   	nop

c0020ebe <ISO9660::tell(void*, unsigned long long*)>:
c0020ebe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020ec2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ec6:	85 d2                	test   edx,edx
c0020ec8:	74 12                	je     c0020edc <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020eca:	85 c0                	test   eax,eax
c0020ecc:	74 0e                	je     c0020edc <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020ece:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0020ed1:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0020ed4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020ed7:	89 10                	mov    DWORD PTR [eax],edx
c0020ed9:	31 c0                	xor    eax,eax
c0020edb:	c3                   	ret    
c0020edc:	b8 04 00 00 00       	mov    eax,0x4
c0020ee1:	c3                   	ret    

c0020ee2 <ISO9660::getName()>:
c0020ee2:	b8 b4 bb 02 c0       	mov    eax,0xc002bbb4
c0020ee7:	c3                   	ret    

c0020ee8 <ISO9660::stat(void*, unsigned long long*)>:
c0020ee8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020eec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ef0:	85 d2                	test   edx,edx
c0020ef2:	74 12                	je     c0020f06 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020ef4:	85 c0                	test   eax,eax
c0020ef6:	74 0e                	je     c0020f06 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020ef8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0020efb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0020efe:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020f01:	89 10                	mov    DWORD PTR [eax],edx
c0020f03:	31 c0                	xor    eax,eax
c0020f05:	c3                   	ret    
c0020f06:	b8 04 00 00 00       	mov    eax,0x4
c0020f0b:	c3                   	ret    

c0020f0c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0020f0c:	b8 01 00 00 00       	mov    eax,0x1
c0020f11:	c3                   	ret    

c0020f12 <ISO9660::unlink(char const*)>:
c0020f12:	b8 01 00 00 00       	mov    eax,0x1
c0020f17:	c3                   	ret    

c0020f18 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0020f18:	b8 01 00 00 00       	mov    eax,0x1
c0020f1d:	c3                   	ret    

c0020f1e <ISO9660::rename(char const*, char const*)>:
c0020f1e:	b8 01 00 00 00       	mov    eax,0x1
c0020f23:	c3                   	ret    

c0020f24 <ISO9660::mkdir(char const*)>:
c0020f24:	b8 01 00 00 00       	mov    eax,0x1
c0020f29:	c3                   	ret    

c0020f2a <ISO9660::close(void*)>:
c0020f2a:	83 ec 0c             	sub    esp,0xc
c0020f2d:	b8 04 00 00 00       	mov    eax,0x4
c0020f32:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020f36:	85 d2                	test   edx,edx
c0020f38:	74 0e                	je     c0020f48 <ISO9660::close(void*)+0x1e>
c0020f3a:	83 ec 0c             	sub    esp,0xc
c0020f3d:	52                   	push   edx
c0020f3e:	e8 66 e6 fe ff       	call   c000f5a9 <free>
c0020f43:	83 c4 10             	add    esp,0x10
c0020f46:	31 c0                	xor    eax,eax
c0020f48:	83 c4 0c             	add    esp,0xc
c0020f4b:	c3                   	ret    

c0020f4c <ISO9660::closeDir(void*)>:
c0020f4c:	83 ec 0c             	sub    esp,0xc
c0020f4f:	b8 04 00 00 00       	mov    eax,0x4
c0020f54:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020f58:	85 d2                	test   edx,edx
c0020f5a:	74 0e                	je     c0020f6a <ISO9660::closeDir(void*)+0x1e>
c0020f5c:	83 ec 0c             	sub    esp,0xc
c0020f5f:	52                   	push   edx
c0020f60:	e8 44 e6 fe ff       	call   c000f5a9 <free>
c0020f65:	83 c4 10             	add    esp,0x10
c0020f68:	31 c0                	xor    eax,eax
c0020f6a:	83 c4 0c             	add    esp,0xc
c0020f6d:	c3                   	ret    

c0020f6e <ISO9660::~ISO9660()>:
c0020f6e:	83 ec 0c             	sub    esp,0xc
c0020f71:	ba d8 bb 02 c0       	mov    edx,0xc002bbd8
c0020f76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f7a:	89 10                	mov    DWORD PTR [eax],edx
c0020f7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f80:	83 ec 0c             	sub    esp,0xc
c0020f83:	50                   	push   eax
c0020f84:	e8 17 19 ff ff       	call   c00128a0 <Filesystem::~Filesystem()>
c0020f89:	83 c4 10             	add    esp,0x10
c0020f8c:	90                   	nop
c0020f8d:	83 c4 0c             	add    esp,0xc
c0020f90:	c3                   	ret    
c0020f91:	90                   	nop

c0020f92 <ISO9660::~ISO9660()>:
c0020f92:	83 ec 0c             	sub    esp,0xc
c0020f95:	83 ec 0c             	sub    esp,0xc
c0020f98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020f9c:	e8 cd ff ff ff       	call   c0020f6e <ISO9660::~ISO9660()>
c0020fa1:	83 c4 10             	add    esp,0x10
c0020fa4:	83 ec 08             	sub    esp,0x8
c0020fa7:	6a 08                	push   0x8
c0020fa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020fad:	e8 e7 14 ff ff       	call   c0012499 <operator delete(void*, unsigned long)>
c0020fb2:	83 c4 10             	add    esp,0x10
c0020fb5:	83 c4 0c             	add    esp,0xc
c0020fb8:	c3                   	ret    

c0020fb9 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0020fb9:	55                   	push   ebp
c0020fba:	31 c9                	xor    ecx,ecx
c0020fbc:	57                   	push   edi
c0020fbd:	56                   	push   esi
c0020fbe:	53                   	push   ebx
c0020fbf:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0020fc3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0020fc7:	89 eb                	mov    ebx,ebp
c0020fc9:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0020fcd:	39 ce                	cmp    esi,ecx
c0020fcf:	7e 17                	jle    c0020fe8 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0020fd1:	31 d2                	xor    edx,edx
c0020fd3:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0020fd7:	7d 13                	jge    c0020fec <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0020fd9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020fdd:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0020fe0:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0020fe3:	75 0d                	jne    c0020ff2 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0020fe5:	42                   	inc    edx
c0020fe6:	eb eb                	jmp    c0020fd3 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0020fe8:	31 c0                	xor    eax,eax
c0020fea:	eb 0a                	jmp    c0020ff6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020fec:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0020ff0:	eb 04                	jmp    c0020ff6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020ff2:	41                   	inc    ecx
c0020ff3:	43                   	inc    ebx
c0020ff4:	eb d7                	jmp    c0020fcd <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0020ff6:	5b                   	pop    ebx
c0020ff7:	5e                   	pop    esi
c0020ff8:	5f                   	pop    edi
c0020ff9:	5d                   	pop    ebp
c0020ffa:	c3                   	ret    

c0020ffb <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0020ffb:	57                   	push   edi
c0020ffc:	56                   	push   esi
c0020ffd:	53                   	push   ebx
c0020ffe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021002:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021006:	39 0d 80 0d 03 c0    	cmp    DWORD PTR ds:0xc0030d80,ecx
c002100c:	75 08                	jne    c0021016 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c002100e:	38 05 f4 cb 02 c0    	cmp    BYTE PTR ds:0xc002cbf4,al
c0021014:	74 2b                	je     c0021041 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c0021016:	83 ec 0c             	sub    esp,0xc
c0021019:	a2 f4 cb 02 c0       	mov    ds:0xc002cbf4,al
c002101e:	68 a0 0d 03 c0       	push   0xc0030da0
c0021023:	0f be c0             	movsx  eax,al
c0021026:	6a 01                	push   0x1
c0021028:	89 0d 80 0d 03 c0    	mov    DWORD PTR ds:0xc0030d80,ecx
c002102e:	31 db                	xor    ebx,ebx
c0021030:	53                   	push   ebx
c0021031:	51                   	push   ecx
c0021032:	ff 34 85 5c db 02 c0 	push   DWORD PTR [eax*4-0x3ffd24a4]
c0021039:	e8 7c 4e ff ff       	call   c0015eba <LogicalDisk::read(unsigned long long, int, void*)>
c002103e:	83 c4 20             	add    esp,0x20
c0021041:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0021045:	be a0 0d 03 c0       	mov    esi,0xc0030da0
c002104a:	b9 00 08 00 00       	mov    ecx,0x800
c002104f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021051:	5b                   	pop    ebx
c0021052:	5e                   	pop    esi
c0021053:	5f                   	pop    edi
c0021054:	c3                   	ret    
c0021055:	90                   	nop

c0021056 <ISO9660::tryMount(LogicalDisk*, int)>:
c0021056:	81 ec 10 08 00 00    	sub    esp,0x810
c002105c:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021063:	83 c0 41             	add    eax,0x41
c0021066:	0f be c0             	movsx  eax,al
c0021069:	50                   	push   eax
c002106a:	8d 44 24 08          	lea    eax,[esp+0x8]
c002106e:	50                   	push   eax
c002106f:	6a 10                	push   0x10
c0021071:	e8 85 ff ff ff       	call   c0020ffb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021076:	83 c4 10             	add    esp,0x10
c0021079:	31 c0                	xor    eax,eax
c002107b:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021080:	75 1d                	jne    c002109f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021082:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021087:	75 16                	jne    c002109f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021089:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c002108e:	75 0f                	jne    c002109f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021090:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021095:	75 08                	jne    c002109f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021097:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c002109c:	0f 94 c0             	sete   al
c002109f:	81 c4 0c 08 00 00    	add    esp,0x80c
c00210a5:	c3                   	ret    

c00210a6 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00210a6:	55                   	push   ebp
c00210a7:	57                   	push   edi
c00210a8:	56                   	push   esi
c00210a9:	53                   	push   ebx
c00210aa:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00210b0:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00210b7:	85 ed                	test   ebp,ebp
c00210b9:	0f 84 da 01 00 00    	je     c0021299 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c00210bf:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00210c7:	0f 84 cc 01 00 00    	je     c0021299 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c00210cd:	b8 01 00 00 00       	mov    eax,0x1
c00210d2:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c00210d6:	0f 85 c2 01 00 00    	jne    c002129e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c00210dc:	31 d2                	xor    edx,edx
c00210de:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00210e5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00210e8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00210eb:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00210ee:	89 04 24             	mov    DWORD PTR [esp],eax
c00210f1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00210f5:	01 c8                	add    eax,ecx
c00210f7:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00210fa:	11 da                	adc    edx,ebx
c00210fc:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0021100:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021104:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021108:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002110c:	19 d7                	sbb    edi,edx
c002110e:	72 11                	jb     c0021121 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0021110:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021113:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021117:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002111b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002111f:	eb 0c                	jmp    c002112d <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021121:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0021125:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021129:	29 ce                	sub    esi,ecx
c002112b:	19 df                	sbb    edi,ebx
c002112d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021130:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021133:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021137:	c1 e0 0b             	shl    eax,0xb
c002113a:	01 c8                	add    eax,ecx
c002113c:	11 da                	adc    edx,ebx
c002113e:	89 04 24             	mov    DWORD PTR [esp],eax
c0021141:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021145:	51                   	push   ecx
c0021146:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002114a:	50                   	push   eax
c002114b:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c002114f:	53                   	push   ebx
c0021150:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021154:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021158:	0f ac d0 0b          	shrd   eax,edx,0xb
c002115c:	50                   	push   eax
c002115d:	e8 99 fe ff ff       	call   c0020ffb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021162:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021165:	b8 00 08 00 00       	mov    eax,0x800
c002116a:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021170:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0021174:	29 d0                	sub    eax,edx
c0021176:	83 c4 10             	add    esp,0x10
c0021179:	89 f9                	mov    ecx,edi
c002117b:	39 c6                	cmp    esi,eax
c002117d:	83 d9 00             	sbb    ecx,0x0
c0021180:	7d 1b                	jge    c002119d <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0021182:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021187:	75 12                	jne    c002119b <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0021189:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021190:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021196:	e9 fa 00 00 00       	jmp    c0021295 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002119b:	89 f0                	mov    eax,esi
c002119d:	01 d3                	add    ebx,edx
c002119f:	31 d2                	xor    edx,edx
c00211a1:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00211a5:	39 c2                	cmp    edx,eax
c00211a7:	7d 14                	jge    c00211bd <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c00211a9:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00211b0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00211b4:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00211b7:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00211ba:	42                   	inc    edx
c00211bb:	eb e8                	jmp    c00211a5 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c00211bd:	89 c2                	mov    edx,eax
c00211bf:	85 c0                	test   eax,eax
c00211c1:	79 02                	jns    c00211c5 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c00211c3:	31 d2                	xor    edx,edx
c00211c5:	01 c2                	add    edx,eax
c00211c7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00211ca:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c00211d1:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00211d5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00211d9:	99                   	cdq    
c00211da:	01 c1                	add    ecx,eax
c00211dc:	11 d3                	adc    ebx,edx
c00211de:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00211e2:	29 c6                	sub    esi,eax
c00211e4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00211e8:	19 d7                	sbb    edi,edx
c00211ea:	89 34 24             	mov    DWORD PTR [esp],esi
c00211ed:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00211f1:	b8 ff 07 00 00       	mov    eax,0x7ff
c00211f6:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00211f9:	b8 00 00 00 00       	mov    eax,0x0
c00211fe:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021202:	7d 43                	jge    c0021247 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0021204:	52                   	push   edx
c0021205:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021209:	50                   	push   eax
c002120a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002120e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021212:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021216:	0f ac d0 0b          	shrd   eax,edx,0xb
c002121a:	50                   	push   eax
c002121b:	e8 db fd ff ff       	call   c0020ffb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021220:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021228:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c002122d:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0021235:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c002123d:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021242:	83 c4 10             	add    esp,0x10
c0021245:	eb aa                	jmp    c00211f1 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0021247:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002124b:	0b 04 24             	or     eax,DWORD PTR [esp]
c002124e:	74 2a                	je     c002127a <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0021250:	50                   	push   eax
c0021251:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021255:	50                   	push   eax
c0021256:	8d 74 24 28          	lea    esi,[esp+0x28]
c002125a:	56                   	push   esi
c002125b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002125f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021263:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0021267:	51                   	push   ecx
c0021268:	e8 8e fd ff ff       	call   c0020ffb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002126d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021271:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021275:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021277:	83 c4 10             	add    esp,0x10
c002127a:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021281:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021285:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021289:	89 18                	mov    DWORD PTR [eax],ebx
c002128b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002128f:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021292:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021295:	31 c0                	xor    eax,eax
c0021297:	eb 05                	jmp    c002129e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021299:	b8 04 00 00 00       	mov    eax,0x4
c002129e:	81 c4 2c 08 00 00    	add    esp,0x82c
c00212a4:	5b                   	pop    ebx
c00212a5:	5e                   	pop    esi
c00212a6:	5f                   	pop    edi
c00212a7:	5d                   	pop    ebp
c00212a8:	c3                   	ret    
c00212a9:	90                   	nop

c00212aa <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00212aa:	55                   	push   ebp
c00212ab:	57                   	push   edi
c00212ac:	56                   	push   esi
c00212ad:	53                   	push   ebx
c00212ae:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00212b4:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c00212bb:	85 ed                	test   ebp,ebp
c00212bd:	0f 84 51 02 00 00    	je     c0021514 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c00212c3:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c00212cb:	0f 84 43 02 00 00    	je     c0021514 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c00212d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00212d4:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c00212d7:	75 0a                	jne    c00212e3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c00212d9:	b8 07 00 00 00       	mov    eax,0x7
c00212de:	e9 36 02 00 00       	jmp    c0021519 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00212e3:	50                   	push   eax
c00212e4:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00212e8:	50                   	push   eax
c00212e9:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00212f0:	53                   	push   ebx
c00212f1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00212f4:	c1 e0 0b             	shl    eax,0xb
c00212f7:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c00212fa:	c1 e8 0b             	shr    eax,0xb
c00212fd:	50                   	push   eax
c00212fe:	e8 f8 fc ff ff       	call   c0020ffb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021303:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021306:	83 c4 10             	add    esp,0x10
c0021309:	89 c1                	mov    ecx,eax
c002130b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002130e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021314:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021317:	84 db                	test   bl,bl
c0021319:	0f 85 8b 00 00 00    	jne    c00213aa <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c002131f:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0021325:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021328:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002132e:	29 c6                	sub    esi,eax
c0021330:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0021334:	89 f3                	mov    ebx,esi
c0021336:	89 f1                	mov    ecx,esi
c0021338:	c1 fb 1f             	sar    ebx,0x1f
c002133b:	01 f0                	add    eax,esi
c002133d:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021340:	11 da                	adc    edx,ebx
c0021342:	89 04 24             	mov    DWORD PTR [esp],eax
c0021345:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021349:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002134c:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c002134f:	89 d8                	mov    eax,ebx
c0021351:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0021355:	ba 00 00 00 00       	mov    edx,0x0
c002135a:	19 f8                	sbb    eax,edi
c002135c:	b8 00 00 00 00       	mov    eax,0x0
c0021361:	73 08                	jae    c002136b <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0021363:	89 f0                	mov    eax,esi
c0021365:	89 fa                	mov    edx,edi
c0021367:	29 c8                	sub    eax,ecx
c0021369:	19 da                	sbb    edx,ebx
c002136b:	89 d7                	mov    edi,edx
c002136d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021370:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021373:	09 c7                	or     edi,eax
c0021375:	0f 84 5e ff ff ff    	je     c00212d9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c002137b:	57                   	push   edi
c002137c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021380:	50                   	push   eax
c0021381:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021388:	53                   	push   ebx
c0021389:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002138c:	c1 e0 0b             	shl    eax,0xb
c002138f:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0021393:	c1 e8 0b             	shr    eax,0xb
c0021396:	50                   	push   eax
c0021397:	e8 5f fc ff ff       	call   c0020ffb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002139c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002139f:	83 c4 10             	add    esp,0x10
c00213a2:	25 ff 07 00 00       	and    eax,0x7ff
c00213a7:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c00213aa:	31 ff                	xor    edi,edi
c00213ac:	56                   	push   esi
c00213ad:	6a 28                	push   0x28
c00213af:	6a 00                	push   0x0
c00213b1:	8d 44 24 24          	lea    eax,[esp+0x24]
c00213b5:	50                   	push   eax
c00213b6:	e8 95 f3 fd ff       	call   c0000750 <memset>
c00213bb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00213be:	25 ff 07 00 00       	and    eax,0x7ff
c00213c3:	89 c6                	mov    esi,eax
c00213c5:	83 c6 21             	add    esi,0x21
c00213c8:	83 d7 00             	adc    edi,0x0
c00213cb:	83 c4 10             	add    esp,0x10
c00213ce:	31 c9                	xor    ecx,ecx
c00213d0:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c00213d7:	83 f9 28             	cmp    ecx,0x28
c00213da:	88 04 24             	mov    BYTE PTR [esp],al
c00213dd:	0f 94 c2             	sete   dl
c00213e0:	88 d0                	mov    al,dl
c00213e2:	ba ff 07 00 00       	mov    edx,0x7ff
c00213e7:	39 f2                	cmp    edx,esi
c00213e9:	ba 00 00 00 00       	mov    edx,0x0
c00213ee:	19 fa                	sbb    edx,edi
c00213f0:	0f 92 c2             	setb   dl
c00213f3:	09 c2                	or     edx,eax
c00213f5:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00213f9:	0f 94 c0             	sete   al
c00213fc:	08 d0                	or     al,dl
c00213fe:	75 16                	jne    c0021416 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021400:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021404:	74 10                	je     c0021416 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021406:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021409:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c002140d:	41                   	inc    ecx
c002140e:	83 c6 01             	add    esi,0x1
c0021411:	83 d7 00             	adc    edi,0x0
c0021414:	eb ba                	jmp    c00213d0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0021416:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c002141d:	83 ec 0c             	sub    esp,0xc
c0021420:	8d 74 24 24          	lea    esi,[esp+0x24]
c0021424:	56                   	push   esi
c0021425:	e8 42 f3 fd ff       	call   c000076c <strlen>
c002142a:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0021431:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021435:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c002143d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021440:	5a                   	pop    edx
c0021441:	25 ff 07 00 00       	and    eax,0x7ff
c0021446:	59                   	pop    ecx
c0021447:	01 f8                	add    eax,edi
c0021449:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c002144f:	83 e0 02             	and    eax,0x2
c0021452:	3c 01                	cmp    al,0x1
c0021454:	19 c0                	sbb    eax,eax
c0021456:	83 c0 02             	add    eax,0x2
c0021459:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c002145d:	56                   	push   esi
c002145e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021462:	50                   	push   eax
c0021463:	e8 a4 f3 fd ff       	call   c000080c <strcpy>
c0021468:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c002146c:	83 c4 10             	add    esp,0x10
c002146f:	84 c0                	test   al,al
c0021471:	75 21                	jne    c0021494 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0021473:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c002147b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021483:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c002148b:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021492:	eb 28                	jmp    c00214bc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021494:	fe c8                	dec    al
c0021496:	75 24                	jne    c00214bc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021498:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c00214a0:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00214a8:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00214b0:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c00214b7:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c00214bc:	8d 74 24 40          	lea    esi,[esp+0x40]
c00214c0:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c00214c7:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c00214ce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00214d0:	0f b6 f3             	movzx  esi,bl
c00214d3:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c00214da:	31 db                	xor    ebx,ebx
c00214dc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00214e2:	89 df                	mov    edi,ebx
c00214e4:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c00214e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00214ea:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c00214ed:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00214f0:	39 c6                	cmp    esi,eax
c00214f2:	19 d7                	sbb    edi,edx
c00214f4:	72 10                	jb     c0021506 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c00214f6:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00214fd:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0021504:	eb 0a                	jmp    c0021510 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c0021506:	29 f0                	sub    eax,esi
c0021508:	19 da                	sbb    edx,ebx
c002150a:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c002150d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021510:	31 c0                	xor    eax,eax
c0021512:	eb 05                	jmp    c0021519 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021514:	b8 04 00 00 00       	mov    eax,0x4
c0021519:	81 c4 5c 09 00 00    	add    esp,0x95c
c002151f:	5b                   	pop    ebx
c0021520:	5e                   	pop    esi
c0021521:	5f                   	pop    edi
c0021522:	5d                   	pop    ebp
c0021523:	c3                   	ret    

c0021524 <readRoot(unsigned int*, unsigned int*, char)>:
c0021524:	57                   	push   edi
c0021525:	56                   	push   esi
c0021526:	81 ec 38 08 00 00    	sub    esp,0x838
c002152c:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021534:	50                   	push   eax
c0021535:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021539:	50                   	push   eax
c002153a:	6a 10                	push   0x10
c002153c:	e8 ba fa ff ff       	call   c0020ffb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021541:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0021548:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c002154c:	b9 22 00 00 00       	mov    ecx,0x22
c0021551:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021553:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002155a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002155e:	89 10                	mov    DWORD PTR [eax],edx
c0021560:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021567:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002156b:	89 10                	mov    DWORD PTR [eax],edx
c002156d:	81 c4 44 08 00 00    	add    esp,0x844
c0021573:	b0 01                	mov    al,0x1
c0021575:	5e                   	pop    esi
c0021576:	5f                   	pop    edi
c0021577:	c3                   	ret    

c0021578 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021578:	55                   	push   ebp
c0021579:	57                   	push   edi
c002157a:	56                   	push   esi
c002157b:	53                   	push   ebx
c002157c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021582:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021589:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021590:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021594:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021598:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002159c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00215a0:	75 03                	jne    c00215a5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00215a2:	83 c3 02             	add    ebx,0x2
c00215a5:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c00215a8:	75 03                	jne    c00215ad <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c00215aa:	43                   	inc    ebx
c00215ab:	eb f8                	jmp    c00215a5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00215ad:	51                   	push   ecx
c00215ae:	68 00 01 00 00       	push   0x100
c00215b3:	6a 00                	push   0x0
c00215b5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00215b9:	50                   	push   eax
c00215ba:	e8 91 f1 fd ff       	call   c0000750 <memset>
c00215bf:	83 c4 10             	add    esp,0x10
c00215c2:	31 d2                	xor    edx,edx
c00215c4:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00215c7:	84 c0                	test   al,al
c00215c9:	74 21                	je     c00215ec <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c00215cb:	3c 2f                	cmp    al,0x2f
c00215cd:	75 0b                	jne    c00215da <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c00215cf:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c00215d3:	bd 01 00 00 00       	mov    ebp,0x1
c00215d8:	eb 14                	jmp    c00215ee <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c00215da:	8d 48 9f             	lea    ecx,[eax-0x61]
c00215dd:	80 f9 19             	cmp    cl,0x19
c00215e0:	77 03                	ja     c00215e5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c00215e2:	83 e8 20             	sub    eax,0x20
c00215e5:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c00215e9:	42                   	inc    edx
c00215ea:	eb d8                	jmp    c00215c4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c00215ec:	31 ed                	xor    ebp,ebp
c00215ee:	83 ec 0c             	sub    esp,0xc
c00215f1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00215f8:	e8 9c df fe ff       	call   c000f599 <malloc>
c00215fd:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021604:	89 c6                	mov    esi,eax
c0021606:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c002160c:	c1 ef 0b             	shr    edi,0xb
c002160f:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021616:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c002161a:	83 c4 10             	add    esp,0x10
c002161d:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021622:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021626:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c002162d:	74 28                	je     c0021657 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c002162f:	52                   	push   edx
c0021630:	57                   	push   edi
c0021631:	50                   	push   eax
c0021632:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021636:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c002163d:	e8 b9 f9 ff ff       	call   c0020ffb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021642:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021646:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c002164d:	05 00 08 00 00       	add    eax,0x800
c0021652:	83 c4 10             	add    esp,0x10
c0021655:	eb cb                	jmp    c0021622 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021657:	83 ec 0c             	sub    esp,0xc
c002165a:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c002165e:	57                   	push   edi
c002165f:	e8 08 f1 fd ff       	call   c000076c <strlen>
c0021664:	50                   	push   eax
c0021665:	57                   	push   edi
c0021666:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c002166d:	56                   	push   esi
c002166e:	e8 46 f9 ff ff       	call   c0020fb9 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021673:	83 c4 20             	add    esp,0x20
c0021676:	85 c0                	test   eax,eax
c0021678:	75 13                	jne    c002168d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c002167a:	83 ec 0c             	sub    esp,0xc
c002167d:	56                   	push   esi
c002167e:	e8 26 df fe ff       	call   c000f5a9 <free>
c0021683:	83 c4 10             	add    esp,0x10
c0021686:	31 c0                	xor    eax,eax
c0021688:	e9 b3 00 00 00       	jmp    c0021740 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c002168d:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021691:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021695:	c1 e7 08             	shl    edi,0x8
c0021698:	c1 e2 10             	shl    edx,0x10
c002169b:	09 d7                	or     edi,edx
c002169d:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c00216a1:	09 d7                	or     edi,edx
c00216a3:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c00216a7:	c1 e2 18             	shl    edx,0x18
c00216aa:	09 d7                	or     edi,edx
c00216ac:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c00216b0:	89 d1                	mov    ecx,edx
c00216b2:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c00216b6:	c1 e1 08             	shl    ecx,0x8
c00216b9:	c1 e2 10             	shl    edx,0x10
c00216bc:	09 ca                	or     edx,ecx
c00216be:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c00216c2:	09 ca                	or     edx,ecx
c00216c4:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c00216c8:	c1 e1 18             	shl    ecx,0x18
c00216cb:	09 ca                	or     edx,ecx
c00216cd:	89 e9                	mov    ecx,ebp
c00216cf:	84 c9                	test   cl,cl
c00216d1:	74 3c                	je     c002170f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c00216d3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00216d7:	83 ec 0c             	sub    esp,0xc
c00216da:	56                   	push   esi
c00216db:	e8 c9 de fe ff       	call   c000f5a9 <free>
c00216e0:	83 c4 0c             	add    esp,0xc
c00216e3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00216ea:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00216ef:	50                   	push   eax
c00216f0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00216f7:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00216fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021702:	52                   	push   edx
c0021703:	57                   	push   edi
c0021704:	53                   	push   ebx
c0021705:	e8 6e fe ff ff       	call   c0021578 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002170a:	83 c4 20             	add    esp,0x20
c002170d:	eb 31                	jmp    c0021740 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c002170f:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021712:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021719:	d0 e8                	shr    al,1
c002171b:	89 3b                	mov    DWORD PTR [ebx],edi
c002171d:	83 e0 01             	and    eax,0x1
c0021720:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021727:	83 ec 0c             	sub    esp,0xc
c002172a:	89 13                	mov    DWORD PTR [ebx],edx
c002172c:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021733:	89 03                	mov    DWORD PTR [ebx],eax
c0021735:	56                   	push   esi
c0021736:	e8 6e de fe ff       	call   c000f5a9 <free>
c002173b:	83 c4 10             	add    esp,0x10
c002173e:	b0 01                	mov    al,0x1
c0021740:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021746:	5b                   	pop    ebx
c0021747:	5e                   	pop    esi
c0021748:	5f                   	pop    edi
c0021749:	5d                   	pop    ebp
c002174a:	c3                   	ret    

c002174b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c002174b:	55                   	push   ebp
c002174c:	57                   	push   edi
c002174d:	56                   	push   esi
c002174e:	53                   	push   ebx
c002174f:	83 ec 20             	sub    esp,0x20
c0021752:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021756:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c002175a:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002175e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021766:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002176e:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021773:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021779:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c002177f:	57                   	push   edi
c0021780:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021784:	50                   	push   eax
c0021785:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021789:	50                   	push   eax
c002178a:	e8 95 fd ff ff       	call   c0021524 <readRoot(unsigned int*, unsigned int*, char)>
c002178f:	5a                   	pop    edx
c0021790:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021794:	e8 d3 ef fd ff       	call   c000076c <strlen>
c0021799:	83 c4 10             	add    esp,0x10
c002179c:	83 f8 03             	cmp    eax,0x3
c002179f:	77 17                	ja     c00217b8 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c00217a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00217a5:	89 03                	mov    DWORD PTR [ebx],eax
c00217a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00217ab:	89 06                	mov    DWORD PTR [esi],eax
c00217ad:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c00217b4:	b0 01                	mov    al,0x1
c00217b6:	eb 19                	jmp    c00217d1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c00217b8:	50                   	push   eax
c00217b9:	55                   	push   ebp
c00217ba:	57                   	push   edi
c00217bb:	56                   	push   esi
c00217bc:	53                   	push   ebx
c00217bd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00217c1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00217c5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00217c9:	e8 aa fd ff ff       	call   c0021578 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00217ce:	83 c4 20             	add    esp,0x20
c00217d1:	83 c4 1c             	add    esp,0x1c
c00217d4:	5b                   	pop    ebx
c00217d5:	5e                   	pop    esi
c00217d6:	5f                   	pop    edi
c00217d7:	5d                   	pop    ebp
c00217d8:	c3                   	ret    
c00217d9:	90                   	nop

c00217da <ISO9660::open(char const*, void**, FileOpenMode)>:
c00217da:	57                   	push   edi
c00217db:	56                   	push   esi
c00217dc:	53                   	push   ebx
c00217dd:	83 ec 10             	sub    esp,0x10
c00217e0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00217e4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00217e8:	85 ff                	test   edi,edi
c00217ea:	0f 84 8b 00 00 00    	je     c002187b <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c00217f0:	85 f6                	test   esi,esi
c00217f2:	0f 84 83 00 00 00    	je     c002187b <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c00217f8:	b8 03 00 00 00       	mov    eax,0x3
c00217fd:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021802:	75 7c                	jne    c0021880 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021804:	83 ec 0c             	sub    esp,0xc
c0021807:	6a 1c                	push   0x1c
c0021809:	e8 8b dd fe ff       	call   c000f599 <malloc>
c002180e:	89 07                	mov    DWORD PTR [edi],eax
c0021810:	89 c3                	mov    ebx,eax
c0021812:	58                   	pop    eax
c0021813:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021817:	50                   	push   eax
c0021818:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002181b:	50                   	push   eax
c002181c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021820:	50                   	push   eax
c0021821:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021825:	50                   	push   eax
c0021826:	56                   	push   esi
c0021827:	e8 1f ff ff ff       	call   c002174b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002182c:	83 c4 20             	add    esp,0x20
c002182f:	84 c0                	test   al,al
c0021831:	74 07                	je     c002183a <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c0021833:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021838:	74 0b                	je     c0021845 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c002183a:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002183e:	b8 01 00 00 00       	mov    eax,0x1
c0021843:	eb 3b                	jmp    c0021880 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021845:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021849:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002184d:	89 03                	mov    DWORD PTR [ebx],eax
c002184f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021856:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002185a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021861:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021868:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002186b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021872:	8a 06                	mov    al,BYTE PTR [esi]
c0021874:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021877:	31 c0                	xor    eax,eax
c0021879:	eb 05                	jmp    c0021880 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c002187b:	b8 04 00 00 00       	mov    eax,0x4
c0021880:	83 c4 10             	add    esp,0x10
c0021883:	5b                   	pop    ebx
c0021884:	5e                   	pop    esi
c0021885:	5f                   	pop    edi
c0021886:	c3                   	ret    
c0021887:	90                   	nop

c0021888 <ISO9660::exists(char const*)>:
c0021888:	83 ec 28             	sub    esp,0x28
c002188b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002188f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021893:	52                   	push   edx
c0021894:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021897:	52                   	push   edx
c0021898:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002189c:	52                   	push   edx
c002189d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00218a1:	52                   	push   edx
c00218a2:	50                   	push   eax
c00218a3:	e8 a3 fe ff ff       	call   c002174b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00218a8:	83 c4 3c             	add    esp,0x3c
c00218ab:	c3                   	ret    

c00218ac <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00218ac:	56                   	push   esi
c00218ad:	53                   	push   ebx
c00218ae:	83 ec 14             	sub    esp,0x14
c00218b1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00218b5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00218b9:	85 db                	test   ebx,ebx
c00218bb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00218bf:	0f 94 c2             	sete   dl
c00218c2:	85 f6                	test   esi,esi
c00218c4:	0f 94 c0             	sete   al
c00218c7:	08 c2                	or     dl,al
c00218c9:	75 68                	jne    c0021933 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00218cb:	85 c9                	test   ecx,ecx
c00218cd:	74 64                	je     c0021933 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00218cf:	83 ec 0c             	sub    esp,0xc
c00218d2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00218d5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00218d9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00218df:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00218e6:	50                   	push   eax
c00218e7:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00218ea:	50                   	push   eax
c00218eb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00218ef:	50                   	push   eax
c00218f0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00218f4:	50                   	push   eax
c00218f5:	51                   	push   ecx
c00218f6:	e8 50 fe ff ff       	call   c002174b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00218fb:	83 c4 20             	add    esp,0x20
c00218fe:	ba 01 00 00 00       	mov    edx,0x1
c0021903:	84 c0                	test   al,al
c0021905:	74 31                	je     c0021938 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021907:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002190b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021912:	89 03                	mov    DWORD PTR [ebx],eax
c0021914:	ba 00 00 00 00       	mov    edx,0x0
c0021919:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002191d:	85 c0                	test   eax,eax
c002191f:	0f 95 06             	setne  BYTE PTR [esi]
c0021922:	74 14                	je     c0021938 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021924:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002192a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021931:	eb 05                	jmp    c0021938 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021933:	ba 04 00 00 00       	mov    edx,0x4
c0021938:	83 c4 14             	add    esp,0x14
c002193b:	89 d0                	mov    eax,edx
c002193d:	5b                   	pop    ebx
c002193e:	5e                   	pop    esi
c002193f:	c3                   	ret    

c0021940 <ISO9660::openDir(char const*, void**)>:
c0021940:	57                   	push   edi
c0021941:	56                   	push   esi
c0021942:	53                   	push   ebx
c0021943:	83 ec 10             	sub    esp,0x10
c0021946:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002194a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002194e:	85 ff                	test   edi,edi
c0021950:	74 7b                	je     c00219cd <ISO9660::openDir(char const*, void**)+0x8d>
c0021952:	85 f6                	test   esi,esi
c0021954:	74 77                	je     c00219cd <ISO9660::openDir(char const*, void**)+0x8d>
c0021956:	83 ec 0c             	sub    esp,0xc
c0021959:	6a 1c                	push   0x1c
c002195b:	e8 39 dc fe ff       	call   c000f599 <malloc>
c0021960:	89 07                	mov    DWORD PTR [edi],eax
c0021962:	89 c3                	mov    ebx,eax
c0021964:	58                   	pop    eax
c0021965:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021969:	50                   	push   eax
c002196a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002196d:	50                   	push   eax
c002196e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021972:	50                   	push   eax
c0021973:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021977:	50                   	push   eax
c0021978:	56                   	push   esi
c0021979:	e8 cd fd ff ff       	call   c002174b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002197e:	83 c4 20             	add    esp,0x20
c0021981:	84 c0                	test   al,al
c0021983:	74 07                	je     c002198c <ISO9660::openDir(char const*, void**)+0x4c>
c0021985:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002198a:	75 0b                	jne    c0021997 <ISO9660::openDir(char const*, void**)+0x57>
c002198c:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021990:	b8 01 00 00 00       	mov    eax,0x1
c0021995:	eb 3b                	jmp    c00219d2 <ISO9660::openDir(char const*, void**)+0x92>
c0021997:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002199b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002199f:	89 03                	mov    DWORD PTR [ebx],eax
c00219a1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00219a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219ac:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00219b3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00219ba:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00219bd:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00219c4:	8a 06                	mov    al,BYTE PTR [esi]
c00219c6:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00219c9:	31 c0                	xor    eax,eax
c00219cb:	eb 05                	jmp    c00219d2 <ISO9660::openDir(char const*, void**)+0x92>
c00219cd:	b8 04 00 00 00       	mov    eax,0x4
c00219d2:	83 c4 10             	add    esp,0x10
c00219d5:	5b                   	pop    ebx
c00219d6:	5e                   	pop    esi
c00219d7:	5f                   	pop    edi
c00219d8:	c3                   	ret    
c00219d9:	90                   	nop

c00219da <ISO9660::ISO9660()>:
c00219da:	83 ec 0c             	sub    esp,0xc
c00219dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219e1:	83 ec 0c             	sub    esp,0xc
c00219e4:	50                   	push   eax
c00219e5:	e8 92 0e ff ff       	call   c001287c <Filesystem::Filesystem()>
c00219ea:	83 c4 10             	add    esp,0x10
c00219ed:	ba d8 bb 02 c0       	mov    edx,0xc002bbd8
c00219f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219f6:	89 10                	mov    DWORD PTR [eax],edx
c00219f8:	90                   	nop
c00219f9:	83 c4 0c             	add    esp,0xc
c00219fc:	c3                   	ret    
c00219fd:	90                   	nop

c00219fe <SoundChannel::SoundChannel(int, int, int, int)>:
c00219fe:	83 ec 1c             	sub    esp,0x1c
c0021a01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a05:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021a09:	89 10                	mov    DWORD PTR [eax],edx
c0021a0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a0f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021a13:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021a16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a1a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021a1e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021a21:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021a26:	75 23                	jne    c0021a4b <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c0021a28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a2c:	8b 10                	mov    edx,DWORD PTR [eax]
c0021a2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a32:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021a35:	0f af c2             	imul   eax,edx
c0021a38:	85 c0                	test   eax,eax
c0021a3a:	79 03                	jns    c0021a3f <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c0021a3c:	83 c0 03             	add    eax,0x3
c0021a3f:	c1 f8 02             	sar    eax,0x2
c0021a42:	05 a0 0f 00 00       	add    eax,0xfa0
c0021a47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021a4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a4f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021a53:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021a56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a5a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021a61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a65:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021a6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a70:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021a73:	c1 e0 02             	shl    eax,0x2
c0021a76:	83 ec 0c             	sub    esp,0xc
c0021a79:	50                   	push   eax
c0021a7a:	e8 1a db fe ff       	call   c000f599 <malloc>
c0021a7f:	83 c4 10             	add    esp,0x10
c0021a82:	89 c2                	mov    edx,eax
c0021a84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a88:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021a8b:	83 ec 04             	sub    esp,0x4
c0021a8e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021a92:	50                   	push   eax
c0021a93:	6a 01                	push   0x1
c0021a95:	6a 04                	push   0x4
c0021a97:	e8 c9 70 fe ff       	call   c0008b65 <src_new>
c0021a9c:	83 c4 10             	add    esp,0x10
c0021a9f:	89 c2                	mov    edx,eax
c0021aa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021aa5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021aa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021aac:	85 c0                	test   eax,eax
c0021aae:	74 10                	je     c0021ac0 <SoundChannel::SoundChannel(int, int, int, int)+0xc2>
c0021ab0:	83 ec 0c             	sub    esp,0xc
c0021ab3:	68 38 bc 02 c0       	push   0xc002bc38
c0021ab8:	e8 14 82 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c0021abd:	83 c4 10             	add    esp,0x10
c0021ac0:	a0 a0 19 03 c0       	mov    al,ds:0xc00319a0
c0021ac5:	83 f0 01             	xor    eax,0x1
c0021ac8:	84 c0                	test   al,al
c0021aca:	74 57                	je     c0021b23 <SoundChannel::SoundChannel(int, int, int, int)+0x125>
c0021acc:	a1 54 bc 02 c0       	mov    eax,ds:0xc002bc54
c0021ad1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021ad5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021add:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021ae5:	7f 35                	jg     c0021b1c <SoundChannel::SoundChannel(int, int, int, int)+0x11e>
c0021ae7:	83 ec 0c             	sub    esp,0xc
c0021aea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021aee:	e8 dc 53 00 00       	call   c0026ecf <__floatsisf>
c0021af3:	83 c4 10             	add    esp,0x10
c0021af6:	8b 15 54 bc 02 c0    	mov    edx,DWORD PTR ds:0xc002bc54
c0021afc:	83 ec 08             	sub    esp,0x8
c0021aff:	52                   	push   edx
c0021b00:	50                   	push   eax
c0021b01:	e8 db 4f 00 00       	call   c0026ae1 <__mulsf3>
c0021b06:	83 c4 10             	add    esp,0x10
c0021b09:	89 c2                	mov    edx,eax
c0021b0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021b0f:	89 14 85 a0 15 03 c0 	mov    DWORD PTR [eax*4-0x3ffcea60],edx
c0021b16:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021b1a:	eb c1                	jmp    c0021add <SoundChannel::SoundChannel(int, int, int, int)+0xdf>
c0021b1c:	c6 05 a0 19 03 c0 01 	mov    BYTE PTR ds:0xc00319a0,0x1
c0021b23:	90                   	nop
c0021b24:	83 c4 1c             	add    esp,0x1c
c0021b27:	c3                   	ret    

c0021b28 <SoundChannel::~SoundChannel()>:
c0021b28:	83 ec 0c             	sub    esp,0xc
c0021b2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b2f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021b32:	83 ec 0c             	sub    esp,0xc
c0021b35:	50                   	push   eax
c0021b36:	e8 6e da fe ff       	call   c000f5a9 <free>
c0021b3b:	83 c4 10             	add    esp,0x10
c0021b3e:	90                   	nop
c0021b3f:	83 c4 0c             	add    esp,0xc
c0021b42:	c3                   	ret    
c0021b43:	90                   	nop

c0021b44 <SoundChannel::getSampleRate()>:
c0021b44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b48:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b4a:	c3                   	ret    
c0021b4b:	90                   	nop

c0021b4c <SoundChannel::getBits()>:
c0021b4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b53:	c3                   	ret    

c0021b54 <SoundChannel::getBufferUsed()>:
c0021b54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b58:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021b5b:	c3                   	ret    

c0021b5c <SoundChannel::getBufferSize()>:
c0021b5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b60:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021b63:	c3                   	ret    

c0021b64 <SoundChannel::unbuffer(float*, int, int)>:
c0021b64:	56                   	push   esi
c0021b65:	53                   	push   ebx
c0021b66:	83 ec 40             	sub    esp,0x40
c0021b69:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021b6d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021b70:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021b74:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021b77:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021b7b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021b7f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021b83:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021b87:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021b8b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021b8f:	e8 3b 53 00 00       	call   c0026ecf <__floatsisf>
c0021b94:	5a                   	pop    edx
c0021b95:	89 c6                	mov    esi,eax
c0021b97:	ff 33                	push   DWORD PTR [ebx]
c0021b99:	e8 31 53 00 00       	call   c0026ecf <__floatsisf>
c0021b9e:	59                   	pop    ecx
c0021b9f:	5a                   	pop    edx
c0021ba0:	50                   	push   eax
c0021ba1:	56                   	push   esi
c0021ba2:	e8 fd 50 00 00       	call   c0026ca4 <__divsf3>
c0021ba7:	89 04 24             	mov    DWORD PTR [esp],eax
c0021baa:	e8 f0 65 00 00       	call   c002819f <__extendsfdf2>
c0021baf:	59                   	pop    ecx
c0021bb0:	5e                   	pop    esi
c0021bb1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021bb5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021bb9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021bc1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021bc5:	50                   	push   eax
c0021bc6:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021bc9:	e8 8c 6b fe ff       	call   c000875a <src_process>
c0021bce:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021bd2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021bd5:	83 c4 0c             	add    esp,0xc
c0021bd8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021bdb:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021bde:	29 d0                	sub    eax,edx
c0021be0:	c1 e0 02             	shl    eax,0x2
c0021be3:	50                   	push   eax
c0021be4:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021be7:	50                   	push   eax
c0021be8:	51                   	push   ecx
c0021be9:	e8 9a ea fd ff       	call   c0000688 <memmove>
c0021bee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021bf2:	83 c4 44             	add    esp,0x44
c0021bf5:	5b                   	pop    ebx
c0021bf6:	5e                   	pop    esi
c0021bf7:	c3                   	ret    

c0021bf8 <SoundChannel::buffer16(short*, int)>:
c0021bf8:	55                   	push   ebp
c0021bf9:	57                   	push   edi
c0021bfa:	56                   	push   esi
c0021bfb:	53                   	push   ebx
c0021bfc:	83 ec 1c             	sub    esp,0x1c
c0021bff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0021c03:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021c06:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021c09:	0f 84 d2 00 00 00    	je     c0021ce1 <SoundChannel::buffer16(short*, int)+0xe9>
c0021c0f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0021c13:	85 ed                	test   ebp,ebp
c0021c15:	0f 8e c6 00 00 00    	jle    c0021ce1 <SoundChannel::buffer16(short*, int)+0xe9>
c0021c1b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021c1f:	bd 00 00 00 38       	mov    ebp,0x38000000
c0021c24:	83 ec 0c             	sub    esp,0xc
c0021c27:	0f bf 00             	movsx  eax,WORD PTR [eax]
c0021c2a:	50                   	push   eax
c0021c2b:	e8 9f 52 00 00       	call   c0026ecf <__floatsisf>
c0021c30:	59                   	pop    ecx
c0021c31:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021c34:	5f                   	pop    edi
c0021c35:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021c38:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021c3b:	55                   	push   ebp
c0021c3c:	50                   	push   eax
c0021c3d:	e8 9f 4e 00 00       	call   c0026ae1 <__mulsf3>
c0021c42:	83 c4 10             	add    esp,0x10
c0021c45:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021c48:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021c4b:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021c4e:	0f 84 99 00 00 00    	je     c0021ced <SoundChannel::buffer16(short*, int)+0xf5>
c0021c54:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0021c59:	74 78                	je     c0021cd3 <SoundChannel::buffer16(short*, int)+0xdb>
c0021c5b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021c5f:	83 ec 0c             	sub    esp,0xc
c0021c62:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c0021c66:	50                   	push   eax
c0021c67:	e8 63 52 00 00       	call   c0026ecf <__floatsisf>
c0021c6c:	5f                   	pop    edi
c0021c6d:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021c70:	5a                   	pop    edx
c0021c71:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021c74:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021c77:	55                   	push   ebp
c0021c78:	50                   	push   eax
c0021c79:	e8 63 4e 00 00       	call   c0026ae1 <__mulsf3>
c0021c7e:	83 c4 10             	add    esp,0x10
c0021c81:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021c84:	be 02 00 00 00       	mov    esi,0x2
c0021c89:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021c8c:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021c8f:	74 46                	je     c0021cd7 <SoundChannel::buffer16(short*, int)+0xdf>
c0021c91:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0021c95:	eb 36                	jmp    c0021ccd <SoundChannel::buffer16(short*, int)+0xd5>
c0021c97:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021c9b:	83 ec 0c             	sub    esp,0xc
c0021c9e:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0021ca2:	46                   	inc    esi
c0021ca3:	50                   	push   eax
c0021ca4:	e8 26 52 00 00       	call   c0026ecf <__floatsisf>
c0021ca9:	5a                   	pop    edx
c0021caa:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0021cad:	59                   	pop    ecx
c0021cae:	8d 4f 01             	lea    ecx,[edi+0x1]
c0021cb1:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021cb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021cb8:	50                   	push   eax
c0021cb9:	e8 23 4e 00 00       	call   c0026ae1 <__mulsf3>
c0021cbe:	83 c4 10             	add    esp,0x10
c0021cc1:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c0021cc5:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021cc8:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021ccb:	74 0a                	je     c0021cd7 <SoundChannel::buffer16(short*, int)+0xdf>
c0021ccd:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0021cd1:	75 c4                	jne    c0021c97 <SoundChannel::buffer16(short*, int)+0x9f>
c0021cd3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0021cd7:	83 c4 1c             	add    esp,0x1c
c0021cda:	89 f0                	mov    eax,esi
c0021cdc:	5b                   	pop    ebx
c0021cdd:	5e                   	pop    esi
c0021cde:	5f                   	pop    edi
c0021cdf:	5d                   	pop    ebp
c0021ce0:	c3                   	ret    
c0021ce1:	83 c4 1c             	add    esp,0x1c
c0021ce4:	31 f6                	xor    esi,esi
c0021ce6:	5b                   	pop    ebx
c0021ce7:	89 f0                	mov    eax,esi
c0021ce9:	5e                   	pop    esi
c0021cea:	5f                   	pop    edi
c0021ceb:	5d                   	pop    ebp
c0021cec:	c3                   	ret    
c0021ced:	be 01 00 00 00       	mov    esi,0x1
c0021cf2:	eb e3                	jmp    c0021cd7 <SoundChannel::buffer16(short*, int)+0xdf>

c0021cf4 <SoundChannel::buffer8(unsigned char*, int)>:
c0021cf4:	55                   	push   ebp
c0021cf5:	57                   	push   edi
c0021cf6:	56                   	push   esi
c0021cf7:	53                   	push   ebx
c0021cf8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021cfc:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021d00:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021d03:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021d07:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021d0a:	74 7a                	je     c0021d86 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021d0c:	85 ff                	test   edi,edi
c0021d0e:	7e 76                	jle    c0021d86 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021d10:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021d14:	8d 70 01             	lea    esi,[eax+0x1]
c0021d17:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021d1a:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021d1d:	8b 1c 9d a0 15 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcea60]
c0021d24:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021d27:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021d2a:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021d2d:	74 5e                	je     c0021d8d <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021d2f:	83 ff 01             	cmp    edi,0x1
c0021d32:	74 4b                	je     c0021d7f <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021d34:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021d38:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021d3b:	8d 70 01             	lea    esi,[eax+0x1]
c0021d3e:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021d41:	8b 1c 9d a0 15 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcea60]
c0021d48:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021d4b:	b8 02 00 00 00       	mov    eax,0x2
c0021d50:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021d53:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021d56:	75 23                	jne    c0021d7b <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021d58:	eb 27                	jmp    c0021d81 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021d5a:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021d5f:	8d 71 01             	lea    esi,[ecx+0x1]
c0021d62:	40                   	inc    eax
c0021d63:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021d66:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021d69:	8b 1c 9d a0 15 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcea60]
c0021d70:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021d73:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021d76:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021d79:	74 06                	je     c0021d81 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021d7b:	39 c7                	cmp    edi,eax
c0021d7d:	75 db                	jne    c0021d5a <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021d7f:	89 f8                	mov    eax,edi
c0021d81:	5b                   	pop    ebx
c0021d82:	5e                   	pop    esi
c0021d83:	5f                   	pop    edi
c0021d84:	5d                   	pop    ebp
c0021d85:	c3                   	ret    
c0021d86:	5b                   	pop    ebx
c0021d87:	31 c0                	xor    eax,eax
c0021d89:	5e                   	pop    esi
c0021d8a:	5f                   	pop    edi
c0021d8b:	5d                   	pop    ebp
c0021d8c:	c3                   	ret    
c0021d8d:	b8 01 00 00 00       	mov    eax,0x1
c0021d92:	eb ed                	jmp    c0021d81 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021d94 <SoundDevice::SoundDevice(char const*)>:
c0021d94:	83 ec 1c             	sub    esp,0x1c
c0021d97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d9b:	83 ec 08             	sub    esp,0x8
c0021d9e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021da2:	50                   	push   eax
c0021da3:	e8 06 1e ff ff       	call   c0013bae <Device::Device(char const*)>
c0021da8:	83 c4 10             	add    esp,0x10
c0021dab:	ba 60 bc 02 c0       	mov    edx,0xc002bc60
c0021db0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021db4:	89 10                	mov    DWORD PTR [eax],edx
c0021db6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021dba:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0021dc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021dc8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0021dd2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021dda:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021ddf:	7f 19                	jg     c0021dfa <SoundDevice::SoundDevice(char const*)+0x66>
c0021de1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021de5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021de9:	83 c2 54             	add    edx,0x54
c0021dec:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0021df4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021df8:	eb e0                	jmp    c0021dda <SoundDevice::SoundDevice(char const*)+0x46>
c0021dfa:	90                   	nop
c0021dfb:	83 c4 1c             	add    esp,0x1c
c0021dfe:	c3                   	ret    
c0021dff:	90                   	nop

c0021e00 <SoundDevice::~SoundDevice()>:
c0021e00:	53                   	push   ebx
c0021e01:	83 ec 18             	sub    esp,0x18
c0021e04:	ba 60 bc 02 c0       	mov    edx,0xc002bc60
c0021e09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e0d:	89 10                	mov    DWORD PTR [eax],edx
c0021e0f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021e17:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021e1c:	7f 46                	jg     c0021e64 <SoundDevice::~SoundDevice()+0x64>
c0021e1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e22:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021e26:	83 c2 54             	add    edx,0x54
c0021e29:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0021e2d:	85 c0                	test   eax,eax
c0021e2f:	74 2d                	je     c0021e5e <SoundDevice::~SoundDevice()+0x5e>
c0021e31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e35:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021e39:	83 c2 54             	add    edx,0x54
c0021e3c:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0021e40:	85 db                	test   ebx,ebx
c0021e42:	74 1a                	je     c0021e5e <SoundDevice::~SoundDevice()+0x5e>
c0021e44:	83 ec 0c             	sub    esp,0xc
c0021e47:	53                   	push   ebx
c0021e48:	e8 db fc ff ff       	call   c0021b28 <SoundChannel::~SoundChannel()>
c0021e4d:	83 c4 10             	add    esp,0x10
c0021e50:	83 ec 08             	sub    esp,0x8
c0021e53:	6a 2c                	push   0x2c
c0021e55:	53                   	push   ebx
c0021e56:	e8 3e 06 ff ff       	call   c0012499 <operator delete(void*, unsigned long)>
c0021e5b:	83 c4 10             	add    esp,0x10
c0021e5e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021e62:	eb b3                	jmp    c0021e17 <SoundDevice::~SoundDevice()+0x17>
c0021e64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e68:	83 ec 0c             	sub    esp,0xc
c0021e6b:	50                   	push   eax
c0021e6c:	e8 07 1a ff ff       	call   c0013878 <Device::~Device()>
c0021e71:	83 c4 10             	add    esp,0x10
c0021e74:	90                   	nop
c0021e75:	83 c4 18             	add    esp,0x18
c0021e78:	5b                   	pop    ebx
c0021e79:	c3                   	ret    

c0021e7a <SoundDevice::~SoundDevice()>:
c0021e7a:	83 ec 0c             	sub    esp,0xc
c0021e7d:	83 ec 0c             	sub    esp,0xc
c0021e80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e84:	e8 77 ff ff ff       	call   c0021e00 <SoundDevice::~SoundDevice()>
c0021e89:	83 c4 10             	add    esp,0x10
c0021e8c:	83 ec 08             	sub    esp,0x8
c0021e8f:	68 e4 01 00 00       	push   0x1e4
c0021e94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e98:	e8 fc 05 ff ff       	call   c0012499 <operator delete(void*, unsigned long)>
c0021e9d:	83 c4 10             	add    esp,0x10
c0021ea0:	83 c4 0c             	add    esp,0xc
c0021ea3:	c3                   	ret    

c0021ea4 <SoundDevice::getFreeChannelNum()>:
c0021ea4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021ea8:	31 c0                	xor    eax,eax
c0021eaa:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0021eb2:	74 09                	je     c0021ebd <SoundDevice::getFreeChannelNum()+0x19>
c0021eb4:	40                   	inc    eax
c0021eb5:	83 f8 20             	cmp    eax,0x20
c0021eb8:	75 f0                	jne    c0021eaa <SoundDevice::getFreeChannelNum()+0x6>
c0021eba:	83 c8 ff             	or     eax,0xffffffff
c0021ebd:	c3                   	ret    

c0021ebe <SoundDevice::addChannel(SoundChannel*)>:
c0021ebe:	56                   	push   esi
c0021ebf:	53                   	push   ebx
c0021ec0:	51                   	push   ecx
c0021ec1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021ec5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021ec9:	53                   	push   ebx
c0021eca:	e8 d5 ff ff ff       	call   c0021ea4 <SoundDevice::getFreeChannelNum()>
c0021ecf:	5a                   	pop    edx
c0021ed0:	83 f8 ff             	cmp    eax,0xffffffff
c0021ed3:	74 51                	je     c0021f26 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021ed5:	85 f6                	test   esi,esi
c0021ed7:	74 4d                	je     c0021f26 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021ed9:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0021ee0:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0021ee7:	75 30                	jne    c0021f19 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0021ee9:	83 ec 0c             	sub    esp,0xc
c0021eec:	56                   	push   esi
c0021eed:	e8 52 fc ff ff       	call   c0021b44 <SoundChannel::getSampleRate()>
c0021ef2:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0021ef8:	89 34 24             	mov    DWORD PTR [esp],esi
c0021efb:	e8 4c fc ff ff       	call   c0021b4c <SoundChannel::getBits()>
c0021f00:	83 c4 0c             	add    esp,0xc
c0021f03:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0021f09:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021f0b:	50                   	push   eax
c0021f0c:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0021f12:	53                   	push   ebx
c0021f13:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0021f16:	83 c4 10             	add    esp,0x10
c0021f19:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0021f1f:	b8 01 00 00 00       	mov    eax,0x1
c0021f24:	eb 03                	jmp    c0021f29 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0021f26:	83 c8 ff             	or     eax,0xffffffff
c0021f29:	5a                   	pop    edx
c0021f2a:	5b                   	pop    ebx
c0021f2b:	5e                   	pop    esi
c0021f2c:	c3                   	ret    
c0021f2d:	90                   	nop

c0021f2e <SoundDevice::removeChannel(int)>:
c0021f2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021f32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f36:	83 fa 1f             	cmp    edx,0x1f
c0021f39:	77 23                	ja     c0021f5e <SoundDevice::removeChannel(int)+0x30>
c0021f3b:	8d 14 90             	lea    edx,[eax+edx*4]
c0021f3e:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0021f45:	74 17                	je     c0021f5e <SoundDevice::removeChannel(int)+0x30>
c0021f47:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0021f51:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0021f57:	75 05                	jne    c0021f5e <SoundDevice::removeChannel(int)+0x30>
c0021f59:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f5b:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c0021f5e:	c3                   	ret    
c0021f5f:	90                   	nop

c0021f60 <SoundDevice::floatTo16(float*, short*, int)>:
c0021f60:	57                   	push   edi
c0021f61:	56                   	push   esi
c0021f62:	53                   	push   ebx
c0021f63:	31 db                	xor    ebx,ebx
c0021f65:	83 ec 10             	sub    esp,0x10
c0021f68:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0021f6c:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0021f70:	0f 8d d0 00 00 00    	jge    c0022046 <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c0021f76:	83 ec 0c             	sub    esp,0xc
c0021f79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021f7d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0021f80:	e8 1a 62 00 00       	call   c002819f <__extendsfdf2>
c0021f85:	83 c4 10             	add    esp,0x10
c0021f88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021f8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021f90:	68 00 00 f0 3f       	push   0x3ff00000
c0021f95:	6a 00                	push   0x0
c0021f97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f9f:	e8 87 51 00 00       	call   c002712b <__adddf3>
c0021fa4:	83 c4 10             	add    esp,0x10
c0021fa7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021fab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021faf:	68 00 00 e0 3f       	push   0x3fe00000
c0021fb4:	6a 00                	push   0x0
c0021fb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021fba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021fbe:	e8 e5 57 00 00       	call   c00277a8 <__muldf3>
c0021fc3:	83 c4 10             	add    esp,0x10
c0021fc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021fca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021fce:	68 c0 ff df 40       	push   0x40dfffc0
c0021fd3:	6a 00                	push   0x0
c0021fd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021fd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021fdd:	e8 c6 57 00 00       	call   c00277a8 <__muldf3>
c0021fe2:	59                   	pop    ecx
c0021fe3:	5f                   	pop    edi
c0021fe4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021fe8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0021fec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021ff0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021ff4:	e8 82 60 00 00       	call   c002807b <__truncdfsf2>
c0021ff9:	5a                   	pop    edx
c0021ffa:	89 c7                	mov    edi,eax
c0021ffc:	59                   	pop    ecx
c0021ffd:	68 00 fe ff 46       	push   0x46fffe00
c0022002:	50                   	push   eax
c0022003:	e8 1d 51 00 00       	call   c0027125 <__gesf2>
c0022008:	83 c4 10             	add    esp,0x10
c002200b:	85 c0                	test   eax,eax
c002200d:	78 08                	js     c0022017 <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c002200f:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0022015:	eb 29                	jmp    c0022040 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022017:	50                   	push   eax
c0022018:	50                   	push   eax
c0022019:	6a 00                	push   0x0
c002201b:	57                   	push   edi
c002201c:	e8 08 51 00 00       	call   c0027129 <__lesf2>
c0022021:	83 c4 10             	add    esp,0x10
c0022024:	85 c0                	test   eax,eax
c0022026:	7f 08                	jg     c0022030 <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c0022028:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c002202e:	eb 10                	jmp    c0022040 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022030:	83 ec 0c             	sub    esp,0xc
c0022033:	57                   	push   edi
c0022034:	e8 03 62 00 00       	call   c002823c <lrintf>
c0022039:	83 c4 10             	add    esp,0x10
c002203c:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0022040:	43                   	inc    ebx
c0022041:	e9 26 ff ff ff       	jmp    c0021f6c <SoundDevice::floatTo16(float*, short*, int)+0xc>
c0022046:	83 c4 10             	add    esp,0x10
c0022049:	5b                   	pop    ebx
c002204a:	5e                   	pop    esi
c002204b:	5f                   	pop    edi
c002204c:	c3                   	ret    
c002204d:	90                   	nop

c002204e <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c002204e:	57                   	push   edi
c002204f:	56                   	push   esi
c0022050:	53                   	push   ebx
c0022051:	31 db                	xor    ebx,ebx
c0022053:	83 ec 10             	sub    esp,0x10
c0022056:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002205a:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c002205e:	0f 8d cb 00 00 00    	jge    c002212f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022064:	83 ec 0c             	sub    esp,0xc
c0022067:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002206b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c002206e:	e8 2c 61 00 00       	call   c002819f <__extendsfdf2>
c0022073:	83 c4 10             	add    esp,0x10
c0022076:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002207a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002207e:	68 00 00 f0 3f       	push   0x3ff00000
c0022083:	6a 00                	push   0x0
c0022085:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022089:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002208d:	e8 99 50 00 00       	call   c002712b <__adddf3>
c0022092:	83 c4 10             	add    esp,0x10
c0022095:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022099:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002209d:	68 00 00 e0 3f       	push   0x3fe00000
c00220a2:	6a 00                	push   0x0
c00220a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00220a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00220ac:	e8 f7 56 00 00       	call   c00277a8 <__muldf3>
c00220b1:	83 c4 10             	add    esp,0x10
c00220b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00220b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00220bc:	68 00 00 60 40       	push   0x40600000
c00220c1:	6a 00                	push   0x0
c00220c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00220c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00220cb:	e8 d8 56 00 00       	call   c00277a8 <__muldf3>
c00220d0:	59                   	pop    ecx
c00220d1:	5f                   	pop    edi
c00220d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00220d6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00220da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00220de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00220e2:	e8 94 5f 00 00       	call   c002807b <__truncdfsf2>
c00220e7:	5a                   	pop    edx
c00220e8:	89 c7                	mov    edi,eax
c00220ea:	59                   	pop    ecx
c00220eb:	68 00 00 fe 42       	push   0x42fe0000
c00220f0:	50                   	push   eax
c00220f1:	e8 2f 50 00 00       	call   c0027125 <__gesf2>
c00220f6:	83 c4 10             	add    esp,0x10
c00220f9:	85 c0                	test   eax,eax
c00220fb:	78 06                	js     c0022103 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00220fd:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022101:	eb 26                	jmp    c0022129 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022103:	50                   	push   eax
c0022104:	50                   	push   eax
c0022105:	6a 00                	push   0x0
c0022107:	57                   	push   edi
c0022108:	e8 1c 50 00 00       	call   c0027129 <__lesf2>
c002210d:	83 c4 10             	add    esp,0x10
c0022110:	85 c0                	test   eax,eax
c0022112:	7f 06                	jg     c002211a <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022114:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022118:	eb 0f                	jmp    c0022129 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002211a:	83 ec 0c             	sub    esp,0xc
c002211d:	57                   	push   edi
c002211e:	e8 19 61 00 00       	call   c002823c <lrintf>
c0022123:	83 c4 10             	add    esp,0x10
c0022126:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022129:	43                   	inc    ebx
c002212a:	e9 2b ff ff ff       	jmp    c002205a <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c002212f:	83 c4 10             	add    esp,0x10
c0022132:	5b                   	pop    ebx
c0022133:	5e                   	pop    esi
c0022134:	5f                   	pop    edi
c0022135:	c3                   	ret    

c0022136 <SoundDevice::getAudio(int, float*, float*)>:
c0022136:	55                   	push   ebp
c0022137:	31 ed                	xor    ebp,ebp
c0022139:	57                   	push   edi
c002213a:	56                   	push   esi
c002213b:	31 f6                	xor    esi,esi
c002213d:	53                   	push   ebx
c002213e:	83 ec 20             	sub    esp,0x20
c0022141:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022145:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022149:	c1 e0 02             	shl    eax,0x2
c002214c:	50                   	push   eax
c002214d:	6a 00                	push   0x0
c002214f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022153:	e8 f8 e5 fd ff       	call   c0000750 <memset>
c0022158:	83 c4 10             	add    esp,0x10
c002215b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022163:	8b 8c b3 5c 01 00 00 	mov    ecx,DWORD PTR [ebx+esi*4+0x15c]
c002216a:	85 c9                	test   ecx,ecx
c002216c:	74 52                	je     c00221c0 <SoundDevice::getAudio(int, float*, float*)+0x8a>
c002216e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022172:	99                   	cdq    
c0022173:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c0022179:	50                   	push   eax
c002217a:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022180:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0022184:	51                   	push   ecx
c0022185:	e8 da f9 ff ff       	call   c0021b64 <SoundChannel::unbuffer(float*, int, int)>
c002218a:	31 d2                	xor    edx,edx
c002218c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022190:	83 c4 10             	add    esp,0x10
c0022193:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022197:	7d 1e                	jge    c00221b7 <SoundDevice::getAudio(int, float*, float*)+0x81>
c0022199:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c002219d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00221a1:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c00221a4:	89 cf                	mov    edi,ecx
c00221a6:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c00221ac:	0f af ca             	imul   ecx,edx
c00221af:	42                   	inc    edx
c00221b0:	01 e9                	add    ecx,ebp
c00221b2:	89 3c 88             	mov    DWORD PTR [eax+ecx*4],edi
c00221b5:	eb dc                	jmp    c0022193 <SoundDevice::getAudio(int, float*, float*)+0x5d>
c00221b7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00221bb:	45                   	inc    ebp
c00221bc:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c00221c0:	46                   	inc    esi
c00221c1:	83 fe 20             	cmp    esi,0x20
c00221c4:	75 9d                	jne    c0022163 <SoundDevice::getAudio(int, float*, float*)+0x2d>
c00221c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00221ca:	83 c4 1c             	add    esp,0x1c
c00221cd:	5b                   	pop    ebx
c00221ce:	5e                   	pop    esi
c00221cf:	5f                   	pop    edi
c00221d0:	5d                   	pop    ebp
c00221d1:	c3                   	ret    

c00221d2 <PCI::open(int, int, void*)>:
c00221d2:	83 ec 18             	sub    esp,0x18
c00221d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00221d9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00221dd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00221e3:	8b 10                	mov    edx,DWORD PTR [eax]
c00221e5:	50                   	push   eax
c00221e6:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00221e9:	31 c0                	xor    eax,eax
c00221eb:	83 c4 1c             	add    esp,0x1c
c00221ee:	c3                   	ret    
c00221ef:	90                   	nop

c00221f0 <PCI::close(int, int, void*)>:
c00221f0:	31 c0                	xor    eax,eax
c00221f2:	c3                   	ret    
c00221f3:	90                   	nop

c00221f4 <PCI::PCI()>:
c00221f4:	83 ec 0c             	sub    esp,0xc
c00221f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221fb:	83 ec 08             	sub    esp,0x8
c00221fe:	68 90 bc 02 c0       	push   0xc002bc90
c0022203:	50                   	push   eax
c0022204:	e8 09 10 ff ff       	call   c0013212 <Bus::Bus(char const*)>
c0022209:	83 c4 10             	add    esp,0x10
c002220c:	ba 7c bd 02 c0       	mov    edx,0xc002bd7c
c0022211:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022215:	89 10                	mov    DWORD PTR [eax],edx
c0022217:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002221b:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0022225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022229:	a3 a4 19 03 c0       	mov    ds:0xc00319a4,eax
c002222e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022232:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022238:	0f b6 d0             	movzx  edx,al
c002223b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002223f:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002224a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022250:	0f b6 d0             	movzx  edx,al
c0022253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022257:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002225c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022260:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022266:	8d 50 01             	lea    edx,[eax+0x1]
c0022269:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002226d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022273:	0f b6 d0             	movzx  edx,al
c0022276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002227a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002227e:	83 c9 c0             	or     ecx,0xffffffc0
c0022281:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022285:	90                   	nop
c0022286:	83 c4 0c             	add    esp,0xc
c0022289:	c3                   	ret    

c002228a <PCI::readBAR8(unsigned int, int)>:
c002228a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002228e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022292:	f6 c2 01             	test   dl,0x1
c0022295:	74 07                	je     c002229e <PCI::readBAR8(unsigned int, int)+0x14>
c0022297:	83 e2 fc             	and    edx,0xfffffffc
c002229a:	01 c2                	add    edx,eax
c002229c:	ec                   	in     al,dx
c002229d:	c3                   	ret    
c002229e:	83 e2 f0             	and    edx,0xfffffff0
c00222a1:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00222a4:	c3                   	ret    
c00222a5:	90                   	nop

c00222a6 <PCI::readBAR16(unsigned int, int)>:
c00222a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00222aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00222ae:	f6 c2 01             	test   dl,0x1
c00222b1:	74 08                	je     c00222bb <PCI::readBAR16(unsigned int, int)+0x15>
c00222b3:	83 e2 fc             	and    edx,0xfffffffc
c00222b6:	01 c2                	add    edx,eax
c00222b8:	66 ed                	in     ax,dx
c00222ba:	c3                   	ret    
c00222bb:	83 e2 f0             	and    edx,0xfffffff0
c00222be:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00222c2:	c3                   	ret    
c00222c3:	90                   	nop

c00222c4 <PCI::readBAR32(unsigned int, int)>:
c00222c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00222c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00222cc:	f6 c2 01             	test   dl,0x1
c00222cf:	74 07                	je     c00222d8 <PCI::readBAR32(unsigned int, int)+0x14>
c00222d1:	83 e2 fc             	and    edx,0xfffffffc
c00222d4:	01 c2                	add    edx,eax
c00222d6:	ed                   	in     eax,dx
c00222d7:	c3                   	ret    
c00222d8:	83 e2 f0             	and    edx,0xfffffff0
c00222db:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c00222de:	c3                   	ret    
c00222df:	90                   	nop

c00222e0 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c00222e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00222e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00222e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00222ec:	f6 c2 01             	test   dl,0x1
c00222ef:	74 07                	je     c00222f8 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00222f1:	83 e2 fc             	and    edx,0xfffffffc
c00222f4:	01 ca                	add    edx,ecx
c00222f6:	ee                   	out    dx,al
c00222f7:	c3                   	ret    
c00222f8:	83 e2 f0             	and    edx,0xfffffff0
c00222fb:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00222fe:	c3                   	ret    
c00222ff:	90                   	nop

c0022300 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0022300:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022304:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022308:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002230c:	f6 c2 01             	test   dl,0x1
c002230f:	74 08                	je     c0022319 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0022311:	83 e2 fc             	and    edx,0xfffffffc
c0022314:	01 ca                	add    edx,ecx
c0022316:	66 ef                	out    dx,ax
c0022318:	c3                   	ret    
c0022319:	83 e2 f0             	and    edx,0xfffffff0
c002231c:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0022320:	c3                   	ret    
c0022321:	90                   	nop

c0022322 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0022322:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022326:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002232a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002232e:	f6 c2 01             	test   dl,0x1
c0022331:	74 07                	je     c002233a <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0022333:	83 e2 fc             	and    edx,0xfffffffc
c0022336:	01 ca                	add    edx,ecx
c0022338:	ef                   	out    dx,eax
c0022339:	c3                   	ret    
c002233a:	83 e2 f0             	and    edx,0xfffffff0
c002233d:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0022340:	c3                   	ret    
c0022341:	90                   	nop

c0022342 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022342:	55                   	push   ebp
c0022343:	57                   	push   edi
c0022344:	56                   	push   esi
c0022345:	53                   	push   ebx
c0022346:	83 ec 0c             	sub    esp,0xc
c0022349:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002234d:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0022351:	89 f0                	mov    eax,esi
c0022353:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022357:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002235b:	3c 07                	cmp    al,0x7
c002235d:	76 10                	jbe    c002236f <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c002235f:	83 ec 0c             	sub    esp,0xc
c0022362:	68 98 bc 02 c0       	push   0xc002bc98
c0022367:	e8 65 79 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c002236c:	83 c4 10             	add    esp,0x10
c002236f:	80 fb 0f             	cmp    bl,0xf
c0022372:	76 10                	jbe    c0022384 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0022374:	83 ec 0c             	sub    esp,0xc
c0022377:	68 c8 bc 02 c0       	push   0xc002bcc8
c002237c:	e8 50 79 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c0022381:	83 c4 10             	add    esp,0x10
c0022384:	8d 04 36             	lea    eax,[esi+esi*1]
c0022387:	ba f8 0c 00 00       	mov    edx,0xcf8
c002238c:	83 c8 f0             	or     eax,0xfffffff0
c002238f:	ee                   	out    dx,al
c0022390:	ba fa 0c 00 00       	mov    edx,0xcfa
c0022395:	89 e8                	mov    eax,ebp
c0022397:	ee                   	out    dx,al
c0022398:	83 c4 0c             	add    esp,0xc
c002239b:	89 d8                	mov    eax,ebx
c002239d:	66 81 e7 fc 00       	and    di,0xfc
c00223a2:	5b                   	pop    ebx
c00223a3:	c1 e0 08             	shl    eax,0x8
c00223a6:	5e                   	pop    esi
c00223a7:	09 f8                	or     eax,edi
c00223a9:	5f                   	pop    edi
c00223aa:	66 0d 00 c0          	or     ax,0xc000
c00223ae:	5d                   	pop    ebp
c00223af:	c3                   	ret    

c00223b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00223b0:	57                   	push   edi
c00223b1:	56                   	push   esi
c00223b2:	53                   	push   ebx
c00223b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00223b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00223bb:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c00223c1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00223c5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00223c9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00223cd:	83 ff 01             	cmp    edi,0x1
c00223d0:	75 3e                	jne    c0022410 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c00223d2:	89 de                	mov    esi,ebx
c00223d4:	0f b6 c0             	movzx  eax,al
c00223d7:	81 e6 fc 00 00 00    	and    esi,0xfc
c00223dd:	c1 e0 10             	shl    eax,0x10
c00223e0:	0f b6 c9             	movzx  ecx,cl
c00223e3:	09 f0                	or     eax,esi
c00223e5:	c1 e1 08             	shl    ecx,0x8
c00223e8:	0f b6 d2             	movzx  edx,dl
c00223eb:	09 c8                	or     eax,ecx
c00223ed:	c1 e2 0b             	shl    edx,0xb
c00223f0:	09 d0                	or     eax,edx
c00223f2:	ba f8 0c 00 00       	mov    edx,0xcf8
c00223f7:	0d 00 00 00 80       	or     eax,0x80000000
c00223fc:	ef                   	out    dx,eax
c00223fd:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022402:	ed                   	in     eax,dx
c0022403:	83 e3 02             	and    ebx,0x2
c0022406:	0f b6 cb             	movzx  ecx,bl
c0022409:	c1 e1 03             	shl    ecx,0x3
c002240c:	d3 e8                	shr    eax,cl
c002240e:	eb 43                	jmp    c0022453 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022410:	83 ff 02             	cmp    edi,0x2
c0022413:	75 2c                	jne    c0022441 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0022415:	83 ec 0c             	sub    esp,0xc
c0022418:	0f b6 c9             	movzx  ecx,cl
c002241b:	0f b6 d2             	movzx  edx,dl
c002241e:	0f b6 fb             	movzx  edi,bl
c0022421:	0f b6 c0             	movzx  eax,al
c0022424:	57                   	push   edi
c0022425:	51                   	push   ecx
c0022426:	52                   	push   edx
c0022427:	50                   	push   eax
c0022428:	56                   	push   esi
c0022429:	e8 14 ff ff ff       	call   c0022342 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002242e:	89 c2                	mov    edx,eax
c0022430:	ed                   	in     eax,dx
c0022431:	83 e3 02             	and    ebx,0x2
c0022434:	83 c4 20             	add    esp,0x20
c0022437:	0f b6 cb             	movzx  ecx,bl
c002243a:	c1 e1 03             	shl    ecx,0x3
c002243d:	d3 e8                	shr    eax,cl
c002243f:	eb 12                	jmp    c0022453 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022441:	83 ec 0c             	sub    esp,0xc
c0022444:	68 f8 bc 02 c0       	push   0xc002bcf8
c0022449:	e8 83 78 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c002244e:	83 c4 10             	add    esp,0x10
c0022451:	31 c0                	xor    eax,eax
c0022453:	5b                   	pop    ebx
c0022454:	5e                   	pop    esi
c0022455:	5f                   	pop    edi
c0022456:	c3                   	ret    
c0022457:	90                   	nop

c0022458 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022458:	83 ec 18             	sub    esp,0x18
c002245b:	6a 00                	push   0x0
c002245d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022462:	50                   	push   eax
c0022463:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022468:	50                   	push   eax
c0022469:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002246e:	50                   	push   eax
c002246f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022473:	e8 38 ff ff ff       	call   c00223b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022478:	83 c4 2c             	add    esp,0x2c
c002247b:	c3                   	ret    

c002247c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002247c:	83 ec 18             	sub    esp,0x18
c002247f:	6a 0e                	push   0xe
c0022481:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022486:	50                   	push   eax
c0022487:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002248c:	50                   	push   eax
c002248d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022492:	50                   	push   eax
c0022493:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022497:	e8 14 ff ff ff       	call   c00223b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002249c:	83 c4 2c             	add    esp,0x2c
c002249f:	0f b6 c0             	movzx  eax,al
c00224a2:	c3                   	ret    
c00224a3:	90                   	nop

c00224a4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00224a4:	55                   	push   ebp
c00224a5:	57                   	push   edi
c00224a6:	56                   	push   esi
c00224a7:	53                   	push   ebx
c00224a8:	83 ec 18             	sub    esp,0x18
c00224ab:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c00224b0:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c00224b5:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c00224ba:	6a 0a                	push   0xa
c00224bc:	56                   	push   esi
c00224bd:	55                   	push   ebp
c00224be:	57                   	push   edi
c00224bf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00224c3:	e8 e8 fe ff ff       	call   c00223b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00224c8:	83 c4 14             	add    esp,0x14
c00224cb:	89 c3                	mov    ebx,eax
c00224cd:	6a 0a                	push   0xa
c00224cf:	0f b6 db             	movzx  ebx,bl
c00224d2:	56                   	push   esi
c00224d3:	55                   	push   ebp
c00224d4:	57                   	push   edi
c00224d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00224d9:	e8 d2 fe ff ff       	call   c00223b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00224de:	83 c4 2c             	add    esp,0x2c
c00224e1:	25 00 ff 00 00       	and    eax,0xff00
c00224e6:	09 d8                	or     eax,ebx
c00224e8:	5b                   	pop    ebx
c00224e9:	5e                   	pop    esi
c00224ea:	5f                   	pop    edi
c00224eb:	5d                   	pop    ebp
c00224ec:	c3                   	ret    
c00224ed:	90                   	nop

c00224ee <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00224ee:	83 ec 18             	sub    esp,0x18
c00224f1:	6a 08                	push   0x8
c00224f3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224f8:	50                   	push   eax
c00224f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224fe:	50                   	push   eax
c00224ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022504:	50                   	push   eax
c0022505:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022509:	e8 a2 fe ff ff       	call   c00223b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002250e:	83 c4 2c             	add    esp,0x2c
c0022511:	0f b6 c4             	movzx  eax,ah
c0022514:	c3                   	ret    
c0022515:	90                   	nop

c0022516 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022516:	83 ec 18             	sub    esp,0x18
c0022519:	6a 08                	push   0x8
c002251b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022520:	50                   	push   eax
c0022521:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022526:	50                   	push   eax
c0022527:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002252c:	50                   	push   eax
c002252d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022531:	e8 7a fe ff ff       	call   c00223b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022536:	83 c4 2c             	add    esp,0x2c
c0022539:	c3                   	ret    

c002253a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002253a:	83 ec 18             	sub    esp,0x18
c002253d:	6a 3c                	push   0x3c
c002253f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022544:	50                   	push   eax
c0022545:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002254a:	50                   	push   eax
c002254b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022550:	50                   	push   eax
c0022551:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022555:	e8 56 fe ff ff       	call   c00223b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002255a:	83 c4 2c             	add    esp,0x2c
c002255d:	c3                   	ret    

c002255e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002255e:	83 ec 18             	sub    esp,0x18
c0022561:	6a 18                	push   0x18
c0022563:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022568:	50                   	push   eax
c0022569:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002256e:	50                   	push   eax
c002256f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022574:	50                   	push   eax
c0022575:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022579:	e8 32 fe ff ff       	call   c00223b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002257e:	83 c4 2c             	add    esp,0x2c
c0022581:	0f b6 c4             	movzx  eax,ah
c0022584:	c3                   	ret    
c0022585:	90                   	nop

c0022586 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022586:	55                   	push   ebp
c0022587:	57                   	push   edi
c0022588:	56                   	push   esi
c0022589:	53                   	push   ebx
c002258a:	83 ec 28             	sub    esp,0x28
c002258d:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0022591:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0022596:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c002259b:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c00225a0:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00225a7:	8d 43 12             	lea    eax,[ebx+0x12]
c00225aa:	83 c3 10             	add    ebx,0x10
c00225ad:	0f b6 c0             	movzx  eax,al
c00225b0:	0f b6 db             	movzx  ebx,bl
c00225b3:	50                   	push   eax
c00225b4:	51                   	push   ecx
c00225b5:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00225b9:	57                   	push   edi
c00225ba:	55                   	push   ebp
c00225bb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00225bf:	e8 ec fd ff ff       	call   c00223b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00225c4:	83 c4 14             	add    esp,0x14
c00225c7:	89 c6                	mov    esi,eax
c00225c9:	53                   	push   ebx
c00225ca:	c1 e6 10             	shl    esi,0x10
c00225cd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00225d1:	51                   	push   ecx
c00225d2:	57                   	push   edi
c00225d3:	55                   	push   ebp
c00225d4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00225d8:	e8 d3 fd ff ff       	call   c00223b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00225dd:	83 c4 3c             	add    esp,0x3c
c00225e0:	0f b7 c0             	movzx  eax,ax
c00225e3:	5b                   	pop    ebx
c00225e4:	09 f0                	or     eax,esi
c00225e6:	5e                   	pop    esi
c00225e7:	5f                   	pop    edi
c00225e8:	5d                   	pop    ebp
c00225e9:	c3                   	ret    

c00225ea <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00225ea:	55                   	push   ebp
c00225eb:	57                   	push   edi
c00225ec:	56                   	push   esi
c00225ed:	53                   	push   ebx
c00225ee:	83 ec 0c             	sub    esp,0xc
c00225f1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00225f5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00225f9:	89 f5                	mov    ebp,esi
c00225fb:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0022601:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022605:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022609:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002260d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022611:	83 f9 01             	cmp    ecx,0x1
c0022614:	75 5d                	jne    c0022673 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0022616:	0f b6 c8             	movzx  ecx,al
c0022619:	0f b6 d2             	movzx  edx,dl
c002261c:	c1 e1 10             	shl    ecx,0x10
c002261f:	c1 e2 0b             	shl    edx,0xb
c0022622:	89 f0                	mov    eax,esi
c0022624:	25 fc 00 00 00       	and    eax,0xfc
c0022629:	09 c1                	or     ecx,eax
c002262b:	89 e8                	mov    eax,ebp
c002262d:	0f b6 c0             	movzx  eax,al
c0022630:	c1 e0 08             	shl    eax,0x8
c0022633:	09 c1                	or     ecx,eax
c0022635:	09 d1                	or     ecx,edx
c0022637:	ba f8 0c 00 00       	mov    edx,0xcf8
c002263c:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022642:	89 c8                	mov    eax,ecx
c0022644:	ef                   	out    dx,eax
c0022645:	ba fc 0c 00 00       	mov    edx,0xcfc
c002264a:	ed                   	in     eax,dx
c002264b:	0f b7 db             	movzx  ebx,bx
c002264e:	83 e6 02             	and    esi,0x2
c0022651:	74 0a                	je     c002265d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0022653:	0f b7 d0             	movzx  edx,ax
c0022656:	c1 e3 10             	shl    ebx,0x10
c0022659:	09 d3                	or     ebx,edx
c002265b:	eb 05                	jmp    c0022662 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c002265d:	66 31 c0             	xor    ax,ax
c0022660:	09 c3                	or     ebx,eax
c0022662:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022667:	89 c8                	mov    eax,ecx
c0022669:	ef                   	out    dx,eax
c002266a:	ba fc 0c 00 00       	mov    edx,0xcfc
c002266f:	89 d8                	mov    eax,ebx
c0022671:	eb 41                	jmp    c00226b4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022673:	83 f9 02             	cmp    ecx,0x2
c0022676:	75 45                	jne    c00226bd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0022678:	83 ec 0c             	sub    esp,0xc
c002267b:	0f b6 d2             	movzx  edx,dl
c002267e:	89 f1                	mov    ecx,esi
c0022680:	0f b6 c0             	movzx  eax,al
c0022683:	0f b6 f1             	movzx  esi,cl
c0022686:	89 e9                	mov    ecx,ebp
c0022688:	56                   	push   esi
c0022689:	0f b6 c9             	movzx  ecx,cl
c002268c:	51                   	push   ecx
c002268d:	52                   	push   edx
c002268e:	50                   	push   eax
c002268f:	57                   	push   edi
c0022690:	e8 ad fc ff ff       	call   c0022342 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022695:	89 c2                	mov    edx,eax
c0022697:	ed                   	in     eax,dx
c0022698:	83 c4 20             	add    esp,0x20
c002269b:	0f b7 db             	movzx  ebx,bx
c002269e:	f6 c2 02             	test   dl,0x2
c00226a1:	74 0c                	je     c00226af <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c00226a3:	0f b7 c8             	movzx  ecx,ax
c00226a6:	89 d8                	mov    eax,ebx
c00226a8:	c1 e0 10             	shl    eax,0x10
c00226ab:	09 c8                	or     eax,ecx
c00226ad:	eb 05                	jmp    c00226b4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00226af:	66 31 c0             	xor    ax,ax
c00226b2:	09 d8                	or     eax,ebx
c00226b4:	ef                   	out    dx,eax
c00226b5:	83 c4 0c             	add    esp,0xc
c00226b8:	5b                   	pop    ebx
c00226b9:	5e                   	pop    esi
c00226ba:	5f                   	pop    edi
c00226bb:	5d                   	pop    ebp
c00226bc:	c3                   	ret    
c00226bd:	c7 44 24 20 f8 bc 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bcf8
c00226c5:	83 c4 0c             	add    esp,0xc
c00226c8:	5b                   	pop    ebx
c00226c9:	5e                   	pop    esi
c00226ca:	5f                   	pop    edi
c00226cb:	5d                   	pop    ebp
c00226cc:	e9 00 76 ff ff       	jmp    c0019cd1 <Krnl::panic(char const*)>
c00226d1:	90                   	nop

c00226d2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c00226d2:	55                   	push   ebp
c00226d3:	57                   	push   edi
c00226d4:	56                   	push   esi
c00226d5:	53                   	push   ebx
c00226d6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00226dc:	80 3d b0 19 03 c0 00 	cmp    BYTE PTR ds:0xc00319b0,0x0
c00226e3:	0f 85 84 00 00 00    	jne    c002276d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c00226e9:	83 ec 0c             	sub    esp,0xc
c00226ec:	68 14 01 00 00       	push   0x114
c00226f1:	e8 a3 ce fe ff       	call   c000f599 <malloc>
c00226f6:	83 c4 0c             	add    esp,0xc
c00226f9:	89 c3                	mov    ebx,eax
c00226fb:	ff 35 b0 0b 03 c0    	push   DWORD PTR ds:0xc0030bb0
c0022701:	68 fe bc 02 c0       	push   0xc002bcfe
c0022706:	50                   	push   eax
c0022707:	e8 c4 03 ff ff       	call   c0012ad0 <File::File(char const*, Process*)>
c002270c:	5a                   	pop    edx
c002270d:	59                   	pop    ecx
c002270e:	6a 01                	push   0x1
c0022710:	53                   	push   ebx
c0022711:	e8 1e 04 ff ff       	call   c0012b34 <File::open(FileOpenMode)>
c0022716:	83 c4 0c             	add    esp,0xc
c0022719:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c002271d:	50                   	push   eax
c002271e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022722:	50                   	push   eax
c0022723:	53                   	push   ebx
c0022724:	e8 b7 06 ff ff       	call   c0012de0 <File::stat(unsigned long long*, bool*)>
c0022729:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002272d:	40                   	inc    eax
c002272e:	89 04 24             	mov    DWORD PTR [esp],eax
c0022731:	e8 63 ce fe ff       	call   c000f599 <malloc>
c0022736:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002273a:	a3 ac 19 03 c0       	mov    ds:0xc00319ac,eax
c002273f:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0022743:	5e                   	pop    esi
c0022744:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022746:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c002274a:	51                   	push   ecx
c002274b:	50                   	push   eax
c002274c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022750:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022754:	53                   	push   ebx
c0022755:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022758:	83 c4 14             	add    esp,0x14
c002275b:	53                   	push   ebx
c002275c:	e8 31 04 ff ff       	call   c0012b92 <File::close()>
c0022761:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022765:	83 c4 10             	add    esp,0x10
c0022768:	a3 a8 19 03 c0       	mov    ds:0xc00319a8,eax
c002276d:	a1 a8 19 03 c0       	mov    eax,ds:0xc00319a8
c0022772:	8b 15 ac 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319ac
c0022778:	89 04 24             	mov    DWORD PTR [esp],eax
c002277b:	31 ff                	xor    edi,edi
c002277d:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0022785:	31 f6                	xor    esi,esi
c0022787:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c002278c:	31 db                	xor    ebx,ebx
c002278e:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0022796:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c002279b:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c00227a2:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c00227a6:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c00227ad:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00227b1:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00227b4:	0f 8e 6b 01 00 00    	jle    c0022925 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c00227ba:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c00227bd:	d4 40                	aam    0x40
c00227bf:	d5 39                	aad    0x39
c00227c1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00227c5:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c00227c9:	d4 40                	aam    0x40
c00227cb:	d5 39                	aad    0x39
c00227cd:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00227d1:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c00227d5:	d4 40                	aam    0x40
c00227d7:	d5 39                	aad    0x39
c00227d9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00227dd:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c00227e1:	d4 40                	aam    0x40
c00227e3:	d5 39                	aad    0x39
c00227e5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00227e9:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c00227ed:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00227f1:	3c 56                	cmp    al,0x56
c00227f3:	74 45                	je     c002283a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c00227f5:	d4 40                	aam    0x40
c00227f7:	d5 39                	aad    0x39
c00227f9:	8d 48 d0             	lea    ecx,[eax-0x30]
c00227fc:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0022800:	0f b6 c9             	movzx  ecx,cl
c0022803:	c1 e1 04             	shl    ecx,0x4
c0022806:	d4 40                	aam    0x40
c0022808:	d5 39                	aad    0x39
c002280a:	8d 58 d0             	lea    ebx,[eax-0x30]
c002280d:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0022811:	0f b6 db             	movzx  ebx,bl
c0022814:	09 cb                	or     ebx,ecx
c0022816:	c1 e3 04             	shl    ebx,0x4
c0022819:	d4 40                	aam    0x40
c002281b:	d5 39                	aad    0x39
c002281d:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022820:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0022824:	0f b6 c9             	movzx  ecx,cl
c0022827:	09 cb                	or     ebx,ecx
c0022829:	c1 e3 04             	shl    ebx,0x4
c002282c:	89 d9                	mov    ecx,ebx
c002282e:	d4 40                	aam    0x40
c0022830:	d5 39                	aad    0x39
c0022832:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022835:	0f b6 db             	movzx  ebx,bl
c0022838:	09 cb                	or     ebx,ecx
c002283a:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c002283e:	80 f9 44             	cmp    cl,0x44
c0022841:	74 47                	je     c002288a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0022843:	88 c8                	mov    al,cl
c0022845:	d4 40                	aam    0x40
c0022847:	d5 39                	aad    0x39
c0022849:	83 e8 30             	sub    eax,0x30
c002284c:	0f b6 e8             	movzx  ebp,al
c002284f:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0022853:	c1 e5 04             	shl    ebp,0x4
c0022856:	d4 40                	aam    0x40
c0022858:	d5 39                	aad    0x39
c002285a:	83 e8 30             	sub    eax,0x30
c002285d:	0f b6 f0             	movzx  esi,al
c0022860:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0022864:	09 ee                	or     esi,ebp
c0022866:	c1 e6 04             	shl    esi,0x4
c0022869:	d4 40                	aam    0x40
c002286b:	d5 39                	aad    0x39
c002286d:	83 e8 30             	sub    eax,0x30
c0022870:	0f b6 e8             	movzx  ebp,al
c0022873:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0022877:	09 ee                	or     esi,ebp
c0022879:	c1 e6 04             	shl    esi,0x4
c002287c:	89 f5                	mov    ebp,esi
c002287e:	d4 40                	aam    0x40
c0022880:	d5 39                	aad    0x39
c0022882:	83 e8 30             	sub    eax,0x30
c0022885:	0f b6 f0             	movzx  esi,al
c0022888:	09 ee                	or     esi,ebp
c002288a:	83 c7 10             	add    edi,0x10
c002288d:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0022891:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022894:	3c 0a                	cmp    al,0xa
c0022896:	74 09                	je     c00228a1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0022898:	45                   	inc    ebp
c0022899:	39 3c 24             	cmp    DWORD PTR [esp],edi
c002289c:	75 16                	jne    c00228b4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c002289e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00228a1:	3c 0a                	cmp    al,0xa
c00228a3:	0f 94 c0             	sete   al
c00228a6:	0f b6 c0             	movzx  eax,al
c00228a9:	01 c7                	add    edi,eax
c00228ab:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c00228b0:	75 0c                	jne    c00228be <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c00228b2:	eb 15                	jmp    c00228c9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c00228b4:	47                   	inc    edi
c00228b5:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c00228b8:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00228bc:	eb d3                	jmp    c0022891 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c00228be:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c00228c3:	0f 85 e8 fe ff ff    	jne    c00227b1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c00228c9:	80 f9 44             	cmp    cl,0x44
c00228cc:	74 0b                	je     c00228d9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c00228ce:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c00228d3:	0f 85 d8 fe ff ff    	jne    c00227b1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c00228d9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00228dd:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00228e1:	c1 e1 04             	shl    ecx,0x4
c00228e4:	83 e8 30             	sub    eax,0x30
c00228e7:	09 c8                	or     eax,ecx
c00228e9:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c00228ed:	0f 85 be fe ff ff    	jne    c00227b1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c00228f3:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c00228f7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00228fb:	c1 e1 04             	shl    ecx,0x4
c00228fe:	83 e8 30             	sub    eax,0x30
c0022901:	09 c8                	or     eax,ecx
c0022903:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0022907:	0f 85 a4 fe ff ff    	jne    c00227b1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c002290d:	50                   	push   eax
c002290e:	50                   	push   eax
c002290f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022913:	50                   	push   eax
c0022914:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c002291b:	e8 ec de fd ff       	call   c000080c <strcpy>
c0022920:	83 c4 10             	add    esp,0x10
c0022923:	eb 15                	jmp    c002293a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0022925:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c002292c:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0022937:	c6 00 00             	mov    BYTE PTR [eax],0x0
c002293a:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022941:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022947:	5b                   	pop    ebx
c0022948:	5e                   	pop    esi
c0022949:	5f                   	pop    edi
c002294a:	5d                   	pop    ebp
c002294b:	c3                   	ret    

c002294c <PCI::checkBus(unsigned char)>:
c002294c:	56                   	push   esi
c002294d:	53                   	push   ebx
c002294e:	31 db                	xor    ebx,ebx
c0022950:	51                   	push   ecx
c0022951:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022956:	52                   	push   edx
c0022957:	53                   	push   ebx
c0022958:	43                   	inc    ebx
c0022959:	56                   	push   esi
c002295a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002295e:	e8 37 03 00 00       	call   c0022c9a <PCI::checkDevice(unsigned char, unsigned char)>
c0022963:	83 c4 10             	add    esp,0x10
c0022966:	83 fb 20             	cmp    ebx,0x20
c0022969:	75 eb                	jne    c0022956 <PCI::checkBus(unsigned char)+0xa>
c002296b:	58                   	pop    eax
c002296c:	5b                   	pop    ebx
c002296d:	5e                   	pop    esi
c002296e:	c3                   	ret    
c002296f:	90                   	nop

c0022970 <PCI::foundDevice(PCIDeviceInfo)>:
c0022970:	55                   	push   ebp
c0022971:	57                   	push   edi
c0022972:	56                   	push   esi
c0022973:	53                   	push   ebx
c0022974:	83 ec 1c             	sub    esp,0x1c
c0022977:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002297b:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022981:	0f 84 52 01 00 00    	je     c0022ad9 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022987:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002298b:	66 81 f9 06 04       	cmp    cx,0x406
c0022990:	75 2c                	jne    c00229be <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022992:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022997:	50                   	push   eax
c0022998:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c002299d:	50                   	push   eax
c002299e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00229a3:	50                   	push   eax
c00229a4:	56                   	push   esi
c00229a5:	e8 b4 fb ff ff       	call   c002255e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00229aa:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00229ae:	0f b6 c0             	movzx  eax,al
c00229b1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00229b5:	83 c4 2c             	add    esp,0x2c
c00229b8:	5b                   	pop    ebx
c00229b9:	5e                   	pop    esi
c00229ba:	5f                   	pop    edi
c00229bb:	5d                   	pop    ebp
c00229bc:	eb 8e                	jmp    c002294c <PCI::checkBus(unsigned char)>
c00229be:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00229c2:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00229c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00229cc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00229d0:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c00229d4:	88 d3                	mov    bl,dl
c00229d6:	85 c0                	test   eax,eax
c00229d8:	74 33                	je     c0022a0d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c00229da:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00229dd:	85 d2                	test   edx,edx
c00229df:	74 28                	je     c0022a09 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00229e1:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c00229e7:	31 ef                	xor    edi,ebp
c00229e9:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c00229ef:	75 18                	jne    c0022a09 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00229f1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00229f5:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c00229fb:	75 0c                	jne    c0022a09 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00229fd:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022a03:	0f 84 d0 00 00 00    	je     c0022ad9 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022a09:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a0b:	eb c9                	jmp    c00229d6 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022a0d:	66 81 f9 01 06       	cmp    cx,0x601
c0022a12:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022a16:	75 19                	jne    c0022a31 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022a18:	83 ec 0c             	sub    esp,0xc
c0022a1b:	68 64 01 00 00       	push   0x164
c0022a20:	e8 74 cb fe ff       	call   c000f599 <malloc>
c0022a25:	89 c5                	mov    ebp,eax
c0022a27:	89 04 24             	mov    DWORD PTR [esp],eax
c0022a2a:	e8 85 0e 00 00       	call   c00238b4 <SATABus::SATABus()>
c0022a2f:	eb 1e                	jmp    c0022a4f <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022a31:	66 81 f9 01 01       	cmp    cx,0x101
c0022a36:	75 60                	jne    c0022a98 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022a38:	83 ec 0c             	sub    esp,0xc
c0022a3b:	68 70 02 00 00       	push   0x270
c0022a40:	e8 54 cb fe ff       	call   c000f599 <malloc>
c0022a45:	89 c5                	mov    ebp,eax
c0022a47:	89 04 24             	mov    DWORD PTR [esp],eax
c0022a4a:	e8 0f 03 00 00       	call   c0022d5e <IDE::IDE()>
c0022a4f:	58                   	pop    eax
c0022a50:	5a                   	pop    edx
c0022a51:	55                   	push   ebp
c0022a52:	56                   	push   esi
c0022a53:	e8 52 0f ff ff       	call   c00139aa <Device::addChild(Device*)>
c0022a58:	83 ec 1c             	sub    esp,0x1c
c0022a5b:	b9 09 00 00 00       	mov    ecx,0x9
c0022a60:	fc                   	cld    
c0022a61:	89 e7                	mov    edi,esp
c0022a63:	89 de                	mov    esi,ebx
c0022a65:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022a67:	55                   	push   ebp
c0022a68:	e8 4f 0e ff ff       	call   c00138bc <Device::preOpenPCI(PCIDeviceInfo)>
c0022a6d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022a70:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022a74:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022a7c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022a84:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022a8c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022a8f:	83 c4 4c             	add    esp,0x4c
c0022a92:	5b                   	pop    ebx
c0022a93:	5e                   	pop    esi
c0022a94:	5f                   	pop    edi
c0022a95:	5d                   	pop    ebp
c0022a96:	ff e0                	jmp    eax
c0022a98:	83 ec 0c             	sub    esp,0xc
c0022a9b:	68 58 01 00 00       	push   0x158
c0022aa0:	e8 f4 ca fe ff       	call   c000f599 <malloc>
c0022aa5:	89 c5                	mov    ebp,eax
c0022aa7:	58                   	pop    eax
c0022aa8:	5a                   	pop    edx
c0022aa9:	68 17 bd 02 c0       	push   0xc002bd17
c0022aae:	55                   	push   ebp
c0022aaf:	e8 00 12 ff ff       	call   c0013cb4 <DriverlessDevice::DriverlessDevice(char const*)>
c0022ab4:	59                   	pop    ecx
c0022ab5:	5f                   	pop    edi
c0022ab6:	55                   	push   ebp
c0022ab7:	56                   	push   esi
c0022ab8:	e8 ed 0e ff ff       	call   c00139aa <Device::addChild(Device*)>
c0022abd:	b9 09 00 00 00       	mov    ecx,0x9
c0022ac2:	fc                   	cld    
c0022ac3:	89 df                	mov    edi,ebx
c0022ac5:	89 de                	mov    esi,ebx
c0022ac7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022ac9:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022acd:	83 c4 2c             	add    esp,0x2c
c0022ad0:	5b                   	pop    ebx
c0022ad1:	5e                   	pop    esi
c0022ad2:	5f                   	pop    edi
c0022ad3:	5d                   	pop    ebp
c0022ad4:	e9 e3 0d ff ff       	jmp    c00138bc <Device::preOpenPCI(PCIDeviceInfo)>
c0022ad9:	83 c4 1c             	add    esp,0x1c
c0022adc:	5b                   	pop    ebx
c0022add:	5e                   	pop    esi
c0022ade:	5f                   	pop    edi
c0022adf:	5d                   	pop    ebp
c0022ae0:	c3                   	ret    
c0022ae1:	90                   	nop

c0022ae2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022ae2:	55                   	push   ebp
c0022ae3:	57                   	push   edi
c0022ae4:	56                   	push   esi
c0022ae5:	53                   	push   ebx
c0022ae6:	83 ec 68             	sub    esp,0x68
c0022ae9:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0022aed:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0022af4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022af8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0022aff:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0022b04:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022b08:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0022b0f:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0022b14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022b18:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0022b1d:	6a 0c                	push   0xc
c0022b1f:	57                   	push   edi
c0022b20:	53                   	push   ebx
c0022b21:	56                   	push   esi
c0022b22:	55                   	push   ebp
c0022b23:	e8 88 f8 ff ff       	call   c00223b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b28:	83 c4 20             	add    esp,0x20
c0022b2b:	57                   	push   edi
c0022b2c:	53                   	push   ebx
c0022b2d:	56                   	push   esi
c0022b2e:	55                   	push   ebp
c0022b2f:	e8 70 f9 ff ff       	call   c00224a4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022b34:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0022b39:	57                   	push   edi
c0022b3a:	53                   	push   ebx
c0022b3b:	56                   	push   esi
c0022b3c:	55                   	push   ebp
c0022b3d:	e8 f8 f9 ff ff       	call   c002253a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022b42:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0022b46:	83 c4 14             	add    esp,0x14
c0022b49:	6a 3c                	push   0x3c
c0022b4b:	57                   	push   edi
c0022b4c:	53                   	push   ebx
c0022b4d:	56                   	push   esi
c0022b4e:	55                   	push   ebp
c0022b4f:	e8 5c f8 ff ff       	call   c00223b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b54:	0f b6 c4             	movzx  eax,ah
c0022b57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0022b5b:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0022b5f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0022b63:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c0022b68:	83 c4 20             	add    esp,0x20
c0022b6b:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022b71:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022b78:	74 7c                	je     c0022bf6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022b7a:	31 c0                	xor    eax,eax
c0022b7c:	8b 15 68 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d668
c0022b82:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022b88:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0022b8e:	7e 66                	jle    c0022bf6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022b90:	8d 14 c2             	lea    edx,[edx+eax*8]
c0022b93:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022b9a:	39 cb                	cmp    ebx,ecx
c0022b9c:	75 55                	jne    c0022bf3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022b9e:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022ba5:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022ba9:	75 48                	jne    c0022bf3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022bab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022baf:	83 ec 0c             	sub    esp,0xc
c0022bb2:	68 31 bd 02 c0       	push   0xc002bd31
c0022bb7:	e8 b5 f9 fe ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0022bbc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022bc0:	8b 15 68 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d668
c0022bc6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0022bca:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022bd0:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0022bd8:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0022bdc:	52                   	push   edx
c0022bdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022be1:	53                   	push   ebx
c0022be2:	68 56 bd 02 c0       	push   0xc002bd56
c0022be7:	e8 85 f9 fe ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0022bec:	83 c4 20             	add    esp,0x20
c0022bef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022bf3:	40                   	inc    eax
c0022bf4:	eb 86                	jmp    c0022b7c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c0022bf6:	31 d2                	xor    edx,edx
c0022bf8:	83 ec 0c             	sub    esp,0xc
c0022bfb:	57                   	push   edi
c0022bfc:	53                   	push   ebx
c0022bfd:	56                   	push   esi
c0022bfe:	52                   	push   edx
c0022bff:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0022c03:	55                   	push   ebp
c0022c04:	e8 7d f9 ff ff       	call   c0022586 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c09:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022c0d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022c11:	42                   	inc    edx
c0022c12:	83 c4 20             	add    esp,0x20
c0022c15:	83 fa 06             	cmp    edx,0x6
c0022c18:	75 de                	jne    c0022bf8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c0022c1a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0022c1f:	83 ec 0c             	sub    esp,0xc
c0022c22:	86 e0                	xchg   al,ah
c0022c24:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0022c29:	6a 02                	push   0x2
c0022c2b:	57                   	push   edi
c0022c2c:	53                   	push   ebx
c0022c2d:	56                   	push   esi
c0022c2e:	55                   	push   ebp
c0022c2f:	e8 7c f7 ff ff       	call   c00223b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c34:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0022c39:	83 c4 20             	add    esp,0x20
c0022c3c:	57                   	push   edi
c0022c3d:	53                   	push   ebx
c0022c3e:	56                   	push   esi
c0022c3f:	55                   	push   ebp
c0022c40:	e8 a9 f8 ff ff       	call   c00224ee <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022c45:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022c49:	57                   	push   edi
c0022c4a:	53                   	push   ebx
c0022c4b:	56                   	push   esi
c0022c4c:	55                   	push   ebp
c0022c4d:	e8 06 f8 ff ff       	call   c0022458 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022c52:	b9 09 00 00 00       	mov    ecx,0x9
c0022c57:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0022c5c:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0022c60:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0022c64:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0022c68:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0022c6c:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022c70:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0022c74:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0022c78:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0022c7c:	83 ec 0c             	sub    esp,0xc
c0022c7f:	fc                   	cld    
c0022c80:	89 e7                	mov    edi,esp
c0022c82:	8d 74 24 58          	lea    esi,[esp+0x58]
c0022c86:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022c88:	55                   	push   ebp
c0022c89:	e8 e2 fc ff ff       	call   c0022970 <PCI::foundDevice(PCIDeviceInfo)>
c0022c8e:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022c94:	5b                   	pop    ebx
c0022c95:	5e                   	pop    esi
c0022c96:	5f                   	pop    edi
c0022c97:	5d                   	pop    ebp
c0022c98:	c3                   	ret    
c0022c99:	90                   	nop

c0022c9a <PCI::checkDevice(unsigned char, unsigned char)>:
c0022c9a:	55                   	push   ebp
c0022c9b:	57                   	push   edi
c0022c9c:	56                   	push   esi
c0022c9d:	53                   	push   ebx
c0022c9e:	83 ec 0c             	sub    esp,0xc
c0022ca1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022ca5:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022caa:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022caf:	6a 00                	push   0x0
c0022cb1:	56                   	push   esi
c0022cb2:	57                   	push   edi
c0022cb3:	55                   	push   ebp
c0022cb4:	e8 9f f7 ff ff       	call   c0022458 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022cb9:	6a 00                	push   0x0
c0022cbb:	56                   	push   esi
c0022cbc:	57                   	push   edi
c0022cbd:	55                   	push   ebp
c0022cbe:	e8 1f fe ff ff       	call   c0022ae2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022cc3:	83 c4 20             	add    esp,0x20
c0022cc6:	6a 00                	push   0x0
c0022cc8:	56                   	push   esi
c0022cc9:	57                   	push   edi
c0022cca:	55                   	push   ebp
c0022ccb:	e8 ac f7 ff ff       	call   c002247c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022cd0:	83 c4 10             	add    esp,0x10
c0022cd3:	84 c0                	test   al,al
c0022cd5:	79 27                	jns    c0022cfe <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022cd7:	bb 01 00 00 00       	mov    ebx,0x1
c0022cdc:	53                   	push   ebx
c0022cdd:	56                   	push   esi
c0022cde:	57                   	push   edi
c0022cdf:	55                   	push   ebp
c0022ce0:	e8 73 f7 ff ff       	call   c0022458 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ce5:	83 c4 10             	add    esp,0x10
c0022ce8:	66 40                	inc    ax
c0022cea:	74 0c                	je     c0022cf8 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022cec:	53                   	push   ebx
c0022ced:	56                   	push   esi
c0022cee:	57                   	push   edi
c0022cef:	55                   	push   ebp
c0022cf0:	e8 ed fd ff ff       	call   c0022ae2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022cf5:	83 c4 10             	add    esp,0x10
c0022cf8:	43                   	inc    ebx
c0022cf9:	83 fb 08             	cmp    ebx,0x8
c0022cfc:	75 de                	jne    c0022cdc <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022cfe:	83 c4 0c             	add    esp,0xc
c0022d01:	5b                   	pop    ebx
c0022d02:	5e                   	pop    esi
c0022d03:	5f                   	pop    edi
c0022d04:	5d                   	pop    ebp
c0022d05:	c3                   	ret    

c0022d06 <PCI::detect()>:
c0022d06:	56                   	push   esi
c0022d07:	53                   	push   ebx
c0022d08:	53                   	push   ebx
c0022d09:	31 db                	xor    ebx,ebx
c0022d0b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022d0f:	6a 00                	push   0x0
c0022d11:	6a 00                	push   0x0
c0022d13:	6a 00                	push   0x0
c0022d15:	56                   	push   esi
c0022d16:	e8 61 f7 ff ff       	call   c002247c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022d1b:	83 c4 10             	add    esp,0x10
c0022d1e:	a8 80                	test   al,0x80
c0022d20:	75 21                	jne    c0022d43 <PCI::detect()+0x3d>
c0022d22:	51                   	push   ecx
c0022d23:	51                   	push   ecx
c0022d24:	6a 00                	push   0x0
c0022d26:	56                   	push   esi
c0022d27:	e8 20 fc ff ff       	call   c002294c <PCI::checkBus(unsigned char)>
c0022d2c:	83 c4 10             	add    esp,0x10
c0022d2f:	eb 24                	jmp    c0022d55 <PCI::detect()+0x4f>
c0022d31:	52                   	push   edx
c0022d32:	52                   	push   edx
c0022d33:	53                   	push   ebx
c0022d34:	43                   	inc    ebx
c0022d35:	56                   	push   esi
c0022d36:	e8 11 fc ff ff       	call   c002294c <PCI::checkBus(unsigned char)>
c0022d3b:	83 c4 10             	add    esp,0x10
c0022d3e:	83 fb 08             	cmp    ebx,0x8
c0022d41:	74 12                	je     c0022d55 <PCI::detect()+0x4f>
c0022d43:	53                   	push   ebx
c0022d44:	6a 00                	push   0x0
c0022d46:	6a 00                	push   0x0
c0022d48:	56                   	push   esi
c0022d49:	e8 0a f7 ff ff       	call   c0022458 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022d4e:	83 c4 10             	add    esp,0x10
c0022d51:	66 40                	inc    ax
c0022d53:	74 dc                	je     c0022d31 <PCI::detect()+0x2b>
c0022d55:	58                   	pop    eax
c0022d56:	5b                   	pop    ebx
c0022d57:	5e                   	pop    esi
c0022d58:	c3                   	ret    
c0022d59:	90                   	nop

c0022d5a <IDE::close(int, int, void*)>:
c0022d5a:	83 c8 ff             	or     eax,0xffffffff
c0022d5d:	c3                   	ret    

c0022d5e <IDE::IDE()>:
c0022d5e:	83 ec 0c             	sub    esp,0xc
c0022d61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d65:	83 ec 08             	sub    esp,0x8
c0022d68:	68 a0 bd 02 c0       	push   0xc002bda0
c0022d6d:	50                   	push   eax
c0022d6e:	e8 e5 0f ff ff       	call   c0013d58 <HardDiskController::HardDiskController(char const*)>
c0022d73:	83 c4 10             	add    esp,0x10
c0022d76:	ba 30 be 02 c0       	mov    edx,0xc002be30
c0022d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d7f:	89 10                	mov    DWORD PTR [eax],edx
c0022d81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d85:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022d8c:	90                   	nop
c0022d8d:	83 c4 0c             	add    esp,0xc
c0022d90:	c3                   	ret    
c0022d91:	90                   	nop

c0022d92 <IDE::prepareInterrupt(unsigned char)>:
c0022d92:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022d97:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022d9b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022da3:	c3                   	ret    

c0022da4 <selectDrive(unsigned char, unsigned char)>:
c0022da4:	c3                   	ret    
c0022da5:	90                   	nop

c0022da6 <IDE::getBase(unsigned char)>:
c0022da6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022dab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022daf:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022db7:	c3                   	ret    

c0022db8 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022db8:	55                   	push   ebp
c0022db9:	57                   	push   edi
c0022dba:	56                   	push   esi
c0022dbb:	53                   	push   ebx
c0022dbc:	83 ec 1c             	sub    esp,0x1c
c0022dbf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022dc3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022dc7:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022dca:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022dce:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022dd2:	80 f9 03             	cmp    cl,0x3
c0022dd5:	77 51                	ja     c0022e28 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022dd7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022ddb:	0f b6 f2             	movzx  esi,dl
c0022dde:	0f b6 db             	movzx  ebx,bl
c0022de1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022de4:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022de8:	83 ca 80             	or     edx,0xffffff80
c0022deb:	0f b6 d2             	movzx  edx,dl
c0022dee:	52                   	push   edx
c0022def:	6a 0c                	push   0xc
c0022df1:	56                   	push   esi
c0022df2:	57                   	push   edi
c0022df3:	e8 c0 ff ff ff       	call   c0022db8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022df8:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022e01:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022e05:	ee                   	out    dx,al
c0022e06:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022e0b:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022e0f:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022e13:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022e17:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022e1f:	83 c4 2c             	add    esp,0x2c
c0022e22:	5b                   	pop    ebx
c0022e23:	5e                   	pop    esi
c0022e24:	5f                   	pop    edi
c0022e25:	5d                   	pop    ebp
c0022e26:	eb 90                	jmp    c0022db8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022e28:	80 fb 07             	cmp    bl,0x7
c0022e2b:	77 12                	ja     c0022e3f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022e2d:	0f b6 d2             	movzx  edx,dl
c0022e30:	0f b6 db             	movzx  ebx,bl
c0022e33:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022e3b:	89 da                	mov    edx,ebx
c0022e3d:	eb 2f                	jmp    c0022e6e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022e3f:	80 fb 0d             	cmp    bl,0xd
c0022e42:	77 13                	ja     c0022e57 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022e44:	0f b6 d2             	movzx  edx,dl
c0022e47:	0f b6 db             	movzx  ebx,bl
c0022e4a:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022e51:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022e55:	eb 17                	jmp    c0022e6e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022e57:	80 fb 15             	cmp    bl,0x15
c0022e5a:	77 13                	ja     c0022e6f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022e5c:	0f b6 d2             	movzx  edx,dl
c0022e5f:	0f b6 db             	movzx  ebx,bl
c0022e62:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022e6a:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022e6e:	ee                   	out    dx,al
c0022e6f:	83 c4 1c             	add    esp,0x1c
c0022e72:	5b                   	pop    ebx
c0022e73:	5e                   	pop    esi
c0022e74:	5f                   	pop    edi
c0022e75:	5d                   	pop    ebp
c0022e76:	c3                   	ret    
c0022e77:	90                   	nop

c0022e78 <IDE::read(unsigned char, unsigned char)>:
c0022e78:	55                   	push   ebp
c0022e79:	57                   	push   edi
c0022e7a:	56                   	push   esi
c0022e7b:	53                   	push   ebx
c0022e7c:	83 ec 1c             	sub    esp,0x1c
c0022e7f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022e83:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022e87:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022e8a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022e8e:	3c 03                	cmp    al,0x3
c0022e90:	77 43                	ja     c0022ed5 <IDE::read(unsigned char, unsigned char)+0x5d>
c0022e92:	0f b6 f2             	movzx  esi,dl
c0022e95:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022e98:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0022e9c:	83 c8 80             	or     eax,0xffffff80
c0022e9f:	0f b6 c0             	movzx  eax,al
c0022ea2:	50                   	push   eax
c0022ea3:	6a 0c                	push   0xc
c0022ea5:	56                   	push   esi
c0022ea6:	57                   	push   edi
c0022ea7:	e8 0c ff ff ff       	call   c0022db8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022eac:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0022eb1:	0f b6 c3             	movzx  eax,bl
c0022eb4:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0022eb8:	ec                   	in     al,dx
c0022eb9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022ebd:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0022ec2:	52                   	push   edx
c0022ec3:	6a 0c                	push   0xc
c0022ec5:	56                   	push   esi
c0022ec6:	57                   	push   edi
c0022ec7:	e8 ec fe ff ff       	call   c0022db8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022ecc:	83 c4 20             	add    esp,0x20
c0022ecf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022ed3:	eb 49                	jmp    c0022f1e <IDE::read(unsigned char, unsigned char)+0xa6>
c0022ed5:	80 fb 07             	cmp    bl,0x7
c0022ed8:	77 12                	ja     c0022eec <IDE::read(unsigned char, unsigned char)+0x74>
c0022eda:	0f b6 d2             	movzx  edx,dl
c0022edd:	0f b6 c3             	movzx  eax,bl
c0022ee0:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0022ee8:	89 c2                	mov    edx,eax
c0022eea:	eb 31                	jmp    c0022f1d <IDE::read(unsigned char, unsigned char)+0xa5>
c0022eec:	80 fb 0d             	cmp    bl,0xd
c0022eef:	77 13                	ja     c0022f04 <IDE::read(unsigned char, unsigned char)+0x8c>
c0022ef1:	0f b6 d2             	movzx  edx,dl
c0022ef4:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0022efb:	0f b6 d3             	movzx  edx,bl
c0022efe:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0022f02:	eb 19                	jmp    c0022f1d <IDE::read(unsigned char, unsigned char)+0xa5>
c0022f04:	31 c0                	xor    eax,eax
c0022f06:	80 fb 15             	cmp    bl,0x15
c0022f09:	77 13                	ja     c0022f1e <IDE::read(unsigned char, unsigned char)+0xa6>
c0022f0b:	0f b6 d2             	movzx  edx,dl
c0022f0e:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0022f16:	0f b6 d3             	movzx  edx,bl
c0022f19:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0022f1d:	ec                   	in     al,dx
c0022f1e:	83 c4 1c             	add    esp,0x1c
c0022f21:	5b                   	pop    ebx
c0022f22:	5e                   	pop    esi
c0022f23:	5f                   	pop    edi
c0022f24:	5d                   	pop    ebp
c0022f25:	c3                   	ret    

c0022f26 <IDE::waitInterrupt(unsigned char)>:
c0022f26:	55                   	push   ebp
c0022f27:	57                   	push   edi
c0022f28:	56                   	push   esi
c0022f29:	53                   	push   ebx
c0022f2a:	31 db                	xor    ebx,ebx
c0022f2c:	83 ec 0c             	sub    esp,0xc
c0022f2f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022f33:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0022f38:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0022f40:	89 e8                	mov    eax,ebp
c0022f42:	84 c0                	test   al,al
c0022f44:	75 34                	jne    c0022f7a <IDE::waitInterrupt(unsigned char)+0x54>
c0022f46:	52                   	push   edx
c0022f47:	6a 0c                	push   0xc
c0022f49:	56                   	push   esi
c0022f4a:	57                   	push   edi
c0022f4b:	e8 28 ff ff ff       	call   c0022e78 <IDE::read(unsigned char, unsigned char)>
c0022f50:	83 c4 10             	add    esp,0x10
c0022f53:	a8 01                	test   al,0x1
c0022f55:	75 2b                	jne    c0022f82 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022f57:	f6 c3 04             	test   bl,0x4
c0022f5a:	75 16                	jne    c0022f72 <IDE::waitInterrupt(unsigned char)+0x4c>
c0022f5c:	83 fb 32             	cmp    ebx,0x32
c0022f5f:	7e 11                	jle    c0022f72 <IDE::waitInterrupt(unsigned char)+0x4c>
c0022f61:	50                   	push   eax
c0022f62:	50                   	push   eax
c0022f63:	6a 00                	push   0x0
c0022f65:	68 80 96 98 00       	push   0x989680
c0022f6a:	e8 c6 ab ff ff       	call   c001db35 <nanoSleep(unsigned long long)>
c0022f6f:	83 c4 10             	add    esp,0x10
c0022f72:	83 fb 3c             	cmp    ebx,0x3c
c0022f75:	74 0b                	je     c0022f82 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022f77:	43                   	inc    ebx
c0022f78:	eb be                	jmp    c0022f38 <IDE::waitInterrupt(unsigned char)+0x12>
c0022f7a:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0022f82:	83 c4 0c             	add    esp,0xc
c0022f85:	89 e8                	mov    eax,ebp
c0022f87:	5b                   	pop    ebx
c0022f88:	5e                   	pop    esi
c0022f89:	5f                   	pop    edi
c0022f8a:	5d                   	pop    ebp
c0022f8b:	c3                   	ret    

c0022f8c <ideChannel0IRQHandler(regs*, void*)>:
c0022f8c:	83 ec 10             	sub    esp,0x10
c0022f8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022f93:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0022f9a:	6a 07                	push   0x7
c0022f9c:	6a 00                	push   0x0
c0022f9e:	50                   	push   eax
c0022f9f:	e8 d4 fe ff ff       	call   c0022e78 <IDE::read(unsigned char, unsigned char)>
c0022fa4:	83 c4 1c             	add    esp,0x1c
c0022fa7:	c3                   	ret    

c0022fa8 <ideChannel1IRQHandler(regs*, void*)>:
c0022fa8:	83 ec 10             	sub    esp,0x10
c0022fab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022faf:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0022fb6:	6a 07                	push   0x7
c0022fb8:	6a 01                	push   0x1
c0022fba:	50                   	push   eax
c0022fbb:	e8 b8 fe ff ff       	call   c0022e78 <IDE::read(unsigned char, unsigned char)>
c0022fc0:	83 c4 1c             	add    esp,0x1c
c0022fc3:	c3                   	ret    

c0022fc4 <IDE::enableIRQs(unsigned char, bool)>:
c0022fc4:	57                   	push   edi
c0022fc5:	56                   	push   esi
c0022fc6:	be 04 00 00 00       	mov    esi,0x4
c0022fcb:	53                   	push   ebx
c0022fcc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0022fd1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022fd5:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0022fda:	0f 94 c0             	sete   al
c0022fdd:	d1 e0                	shl    eax,1
c0022fdf:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0022fe6:	0f b6 c0             	movzx  eax,al
c0022fe9:	50                   	push   eax
c0022fea:	6a 0c                	push   0xc
c0022fec:	57                   	push   edi
c0022fed:	53                   	push   ebx
c0022fee:	e8 c5 fd ff ff       	call   c0022db8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022ff3:	83 c4 10             	add    esp,0x10
c0022ff6:	50                   	push   eax
c0022ff7:	6a 0c                	push   0xc
c0022ff9:	57                   	push   edi
c0022ffa:	53                   	push   ebx
c0022ffb:	e8 78 fe ff ff       	call   c0022e78 <IDE::read(unsigned char, unsigned char)>
c0023000:	83 c4 10             	add    esp,0x10
c0023003:	4e                   	dec    esi
c0023004:	75 f0                	jne    c0022ff6 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023006:	5b                   	pop    ebx
c0023007:	5e                   	pop    esi
c0023008:	5f                   	pop    edi
c0023009:	c3                   	ret    

c002300a <IDE::open(int, int, void*)>:
c002300a:	55                   	push   ebp
c002300b:	57                   	push   edi
c002300c:	56                   	push   esi
c002300d:	53                   	push   ebx
c002300e:	83 ec 1c             	sub    esp,0x1c
c0023011:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023015:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002301e:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023027:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002302e:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023035:	0f 85 b0 02 00 00    	jne    c00232eb <IDE::open(int, int, void*)+0x2e1>
c002303b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023041:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023045:	83 e0 7f             	and    eax,0x7f
c0023048:	3c 05                	cmp    al,0x5
c002304a:	74 04                	je     c0023050 <IDE::open(int, int, void*)+0x46>
c002304c:	3c 0f                	cmp    al,0xf
c002304e:	75 32                	jne    c0023082 <IDE::open(int, int, void*)+0x78>
c0023050:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023056:	83 e0 fc             	and    eax,0xfffffffc
c0023059:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023060:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023066:	83 e0 fc             	and    eax,0xfffffffc
c0023069:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023070:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023076:	83 e0 fc             	and    eax,0xfffffffc
c0023079:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023080:	eb 14                	jmp    c0023096 <IDE::open(int, int, void*)+0x8c>
c0023082:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002308c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023096:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c002309d:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00230a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00230a8:	89 c6                	mov    esi,eax
c00230aa:	bf f8 0c 00 00       	mov    edi,0xcf8
c00230af:	c1 e6 10             	shl    esi,0x10
c00230b2:	89 e8                	mov    eax,ebp
c00230b4:	89 fa                	mov    edx,edi
c00230b6:	c1 e0 0b             	shl    eax,0xb
c00230b9:	09 f0                	or     eax,esi
c00230bb:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00230c2:	c1 e6 08             	shl    esi,0x8
c00230c5:	09 c6                	or     esi,eax
c00230c7:	89 f0                	mov    eax,esi
c00230c9:	0d 08 00 00 80       	or     eax,0x80000008
c00230ce:	ef                   	out    dx,eax
c00230cf:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00230d4:	89 ca                	mov    edx,ecx
c00230d6:	ed                   	in     eax,dx
c00230d7:	c1 e8 10             	shr    eax,0x10
c00230da:	3d ff ff 00 00       	cmp    eax,0xffff
c00230df:	0f 84 f5 00 00 00    	je     c00231da <IDE::open(int, int, void*)+0x1d0>
c00230e5:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00230eb:	89 fa                	mov    edx,edi
c00230ed:	89 f0                	mov    eax,esi
c00230ef:	ef                   	out    dx,eax
c00230f0:	b0 fe                	mov    al,0xfe
c00230f2:	89 ca                	mov    edx,ecx
c00230f4:	ee                   	out    dx,al
c00230f5:	89 f0                	mov    eax,esi
c00230f7:	89 fa                	mov    edx,edi
c00230f9:	ef                   	out    dx,eax
c00230fa:	89 ca                	mov    edx,ecx
c00230fc:	ed                   	in     eax,dx
c00230fd:	3c fe                	cmp    al,0xfe
c00230ff:	0f 85 a9 00 00 00    	jne    c00231ae <IDE::open(int, int, void*)+0x1a4>
c0023105:	8b 15 68 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d668
c002310b:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023112:	74 33                	je     c0023147 <IDE::open(int, int, void*)+0x13d>
c0023114:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002311a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002311e:	40                   	inc    eax
c002311f:	83 ec 0c             	sub    esp,0xc
c0023122:	0f b6 c0             	movzx  eax,al
c0023125:	50                   	push   eax
c0023126:	55                   	push   ebp
c0023127:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002312b:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023131:	51                   	push   ecx
c0023132:	e8 53 48 ff ff       	call   c001798a <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023137:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002313c:	83 c4 1c             	add    esp,0x1c
c002313f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023145:	eb 0a                	jmp    c0023151 <IDE::open(int, int, void*)+0x147>
c0023147:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023151:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023158:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002315f:	c1 e1 10             	shl    ecx,0x10
c0023162:	c1 e0 08             	shl    eax,0x8
c0023165:	bf f8 0c 00 00       	mov    edi,0xcf8
c002316a:	09 c1                	or     ecx,eax
c002316c:	89 fa                	mov    edx,edi
c002316e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023175:	c1 e0 0b             	shl    eax,0xb
c0023178:	09 c1                	or     ecx,eax
c002317a:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023180:	89 c8                	mov    eax,ecx
c0023182:	ef                   	out    dx,eax
c0023183:	be fc 0c 00 00       	mov    esi,0xcfc
c0023188:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002318e:	89 f2                	mov    edx,esi
c0023190:	ee                   	out    dx,al
c0023191:	89 c8                	mov    eax,ecx
c0023193:	89 fa                	mov    edx,edi
c0023195:	ef                   	out    dx,eax
c0023196:	89 f2                	mov    edx,esi
c0023198:	ed                   	in     eax,dx
c0023199:	0f b6 c0             	movzx  eax,al
c002319c:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00231a2:	74 46                	je     c00231ea <IDE::open(int, int, void*)+0x1e0>
c00231a4:	83 ec 0c             	sub    esp,0xc
c00231a7:	68 b8 bd 02 c0       	push   0xc002bdb8
c00231ac:	eb 34                	jmp    c00231e2 <IDE::open(int, int, void*)+0x1d8>
c00231ae:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00231b7:	75 17                	jne    c00231d0 <IDE::open(int, int, void*)+0x1c6>
c00231b9:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00231be:	74 07                	je     c00231c7 <IDE::open(int, int, void*)+0x1bd>
c00231c0:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00231c5:	75 09                	jne    c00231d0 <IDE::open(int, int, void*)+0x1c6>
c00231c7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00231ce:	eb 1a                	jmp    c00231ea <IDE::open(int, int, void*)+0x1e0>
c00231d0:	83 ec 0c             	sub    esp,0xc
c00231d3:	68 c0 bd 02 c0       	push   0xc002bdc0
c00231d8:	eb 08                	jmp    c00231e2 <IDE::open(int, int, void*)+0x1d8>
c00231da:	83 ec 0c             	sub    esp,0xc
c00231dd:	68 f1 bd 02 c0       	push   0xc002bdf1
c00231e2:	e8 ea 6a ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c00231e7:	83 c4 10             	add    esp,0x10
c00231ea:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00231f1:	79 1a                	jns    c002320d <IDE::open(int, int, void*)+0x203>
c00231f3:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00231f9:	83 e0 fc             	and    eax,0xfffffffc
c00231fc:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023203:	83 c0 08             	add    eax,0x8
c0023206:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002320d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023213:	89 c2                	mov    edx,eax
c0023215:	83 e2 0f             	and    edx,0xf
c0023218:	66 83 fa 08          	cmp    dx,0x8
c002321c:	75 0a                	jne    c0023228 <IDE::open(int, int, void*)+0x21e>
c002321e:	83 e8 02             	sub    eax,0x2
c0023221:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023228:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002322e:	89 c2                	mov    edx,eax
c0023230:	83 e2 0f             	and    edx,0xf
c0023233:	66 83 fa 08          	cmp    dx,0x8
c0023237:	75 0a                	jne    c0023243 <IDE::open(int, int, void*)+0x239>
c0023239:	83 e8 02             	sub    eax,0x2
c002323c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023243:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002324a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023251:	89 d0                	mov    eax,edx
c0023253:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023256:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002325a:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002325e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023261:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023266:	0f b6 c9             	movzx  ecx,cl
c0023269:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023270:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023273:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023277:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002327b:	8d 50 02             	lea    edx,[eax+0x2]
c002327e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023283:	0f b6 d2             	movzx  edx,dl
c0023286:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002328c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002328f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023293:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023297:	8d 48 03             	lea    ecx,[eax+0x3]
c002329a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002329f:	0f b6 c9             	movzx  ecx,cl
c00232a2:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00232a8:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00232ab:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00232af:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00232b3:	8d 50 04             	lea    edx,[eax+0x4]
c00232b6:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00232bc:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00232c1:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00232c8:	66 85 f6             	test   si,si
c00232cb:	74 5b                	je     c0023328 <IDE::open(int, int, void*)+0x31e>
c00232cd:	0f b6 d2             	movzx  edx,dl
c00232d0:	83 c0 05             	add    eax,0x5
c00232d3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00232d6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00232da:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00232de:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00232e4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00232e9:	eb 3d                	jmp    c0023328 <IDE::open(int, int, void*)+0x31e>
c00232eb:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c00232f1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00232f8:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00232ff:	66 05 06 02          	add    ax,0x206
c0023303:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002330a:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0023311:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023318:	66 05 06 02          	add    ax,0x206
c002331c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023323:	e9 e5 fe ff ff       	jmp    c002320d <IDE::open(int, int, void*)+0x203>
c0023328:	50                   	push   eax
c0023329:	50                   	push   eax
c002332a:	6a 00                	push   0x0
c002332c:	53                   	push   ebx
c002332d:	e8 60 fa ff ff       	call   c0022d92 <IDE::prepareInterrupt(unsigned char)>
c0023332:	5a                   	pop    edx
c0023333:	59                   	pop    ecx
c0023334:	6a 01                	push   0x1
c0023336:	53                   	push   ebx
c0023337:	e8 56 fa ff ff       	call   c0022d92 <IDE::prepareInterrupt(unsigned char)>
c002333c:	83 c4 0c             	add    esp,0xc
c002333f:	6a 00                	push   0x0
c0023341:	6a 00                	push   0x0
c0023343:	53                   	push   ebx
c0023344:	e8 7b fc ff ff       	call   c0022fc4 <IDE::enableIRQs(unsigned char, bool)>
c0023349:	83 c4 0c             	add    esp,0xc
c002334c:	6a 00                	push   0x0
c002334e:	6a 01                	push   0x1
c0023350:	53                   	push   ebx
c0023351:	e8 6e fc ff ff       	call   c0022fc4 <IDE::enableIRQs(unsigned char, bool)>
c0023356:	83 c4 10             	add    esp,0x10
c0023359:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023360:	74 34                	je     c0023396 <IDE::open(int, int, void*)+0x38c>
c0023362:	83 ec 0c             	sub    esp,0xc
c0023365:	53                   	push   ebx
c0023366:	6a 01                	push   0x1
c0023368:	68 8c 2f 02 c0       	push   0xc0022f8c
c002336d:	6a 0e                	push   0xe
c002336f:	53                   	push   ebx
c0023370:	e8 ad 05 ff ff       	call   c0013922 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023375:	83 c4 14             	add    esp,0x14
c0023378:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002337e:	53                   	push   ebx
c002337f:	6a 01                	push   0x1
c0023381:	68 a8 2f 02 c0       	push   0xc0022fa8
c0023386:	6a 0f                	push   0xf
c0023388:	53                   	push   ebx
c0023389:	e8 94 05 ff ff       	call   c0013922 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002338e:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023394:	eb 38                	jmp    c00233ce <IDE::open(int, int, void*)+0x3c4>
c0023396:	83 ec 0c             	sub    esp,0xc
c0023399:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00233a3:	53                   	push   ebx
c00233a4:	6a 00                	push   0x0
c00233a6:	68 8c 2f 02 c0       	push   0xc0022f8c
c00233ab:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00233b1:	53                   	push   ebx
c00233b2:	e8 6b 05 ff ff       	call   c0013922 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00233b7:	83 c4 14             	add    esp,0x14
c00233ba:	53                   	push   ebx
c00233bb:	6a 00                	push   0x0
c00233bd:	68 a8 2f 02 c0       	push   0xc0022fa8
c00233c2:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00233c8:	53                   	push   ebx
c00233c9:	e8 54 05 ff ff       	call   c0013922 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00233ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c00233d0:	83 c4 20             	add    esp,0x20
c00233d3:	83 ec 0c             	sub    esp,0xc
c00233d6:	53                   	push   ebx
c00233d7:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00233da:	83 c4 0c             	add    esp,0xc
c00233dd:	6a 07                	push   0x7
c00233df:	6a 00                	push   0x0
c00233e1:	53                   	push   ebx
c00233e2:	e8 91 fa ff ff       	call   c0022e78 <IDE::read(unsigned char, unsigned char)>
c00233e7:	83 c4 0c             	add    esp,0xc
c00233ea:	6a 07                	push   0x7
c00233ec:	6a 01                	push   0x1
c00233ee:	53                   	push   ebx
c00233ef:	e8 84 fa ff ff       	call   c0022e78 <IDE::read(unsigned char, unsigned char)>
c00233f4:	83 c4 0c             	add    esp,0xc
c00233f7:	6a 01                	push   0x1
c00233f9:	6a 00                	push   0x0
c00233fb:	53                   	push   ebx
c00233fc:	e8 c3 fb ff ff       	call   c0022fc4 <IDE::enableIRQs(unsigned char, bool)>
c0023401:	83 c4 0c             	add    esp,0xc
c0023404:	6a 01                	push   0x1
c0023406:	6a 01                	push   0x1
c0023408:	53                   	push   ebx
c0023409:	e8 b6 fb ff ff       	call   c0022fc4 <IDE::enableIRQs(unsigned char, bool)>
c002340e:	83 c4 2c             	add    esp,0x2c
c0023411:	31 c0                	xor    eax,eax
c0023413:	5b                   	pop    ebx
c0023414:	5e                   	pop    esi
c0023415:	5f                   	pop    edi
c0023416:	5d                   	pop    ebp
c0023417:	c3                   	ret    

c0023418 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023418:	55                   	push   ebp
c0023419:	57                   	push   edi
c002341a:	56                   	push   esi
c002341b:	53                   	push   ebx
c002341c:	83 ec 1c             	sub    esp,0x1c
c002341f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023423:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023427:	8d 50 f8             	lea    edx,[eax-0x8]
c002342a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002342e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023432:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023436:	80 fa 03             	cmp    dl,0x3
c0023439:	77 5d                	ja     c0023498 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c002343b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002343f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023443:	0f b6 db             	movzx  ebx,bl
c0023446:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023449:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c002344d:	83 ca 80             	or     edx,0xffffff80
c0023450:	0f b6 d2             	movzx  edx,dl
c0023453:	52                   	push   edx
c0023454:	6a 0c                	push   0xc
c0023456:	53                   	push   ebx
c0023457:	56                   	push   esi
c0023458:	e8 5b f9 ff ff       	call   c0022db8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002345d:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023462:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023466:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002346a:	0f b6 c0             	movzx  eax,al
c002346d:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023471:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023473:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023478:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002347c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023480:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023484:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002348c:	83 c4 2c             	add    esp,0x2c
c002348f:	5b                   	pop    ebx
c0023490:	5e                   	pop    esi
c0023491:	5f                   	pop    edi
c0023492:	5d                   	pop    ebp
c0023493:	e9 20 f9 ff ff       	jmp    c0022db8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023498:	3c 07                	cmp    al,0x7
c002349a:	77 10                	ja     c00234ac <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c002349c:	0f b6 db             	movzx  ebx,bl
c002349f:	0f b6 d0             	movzx  edx,al
c00234a2:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00234aa:	eb 2d                	jmp    c00234d9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00234ac:	3c 0d                	cmp    al,0xd
c00234ae:	77 13                	ja     c00234c3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00234b0:	0f b6 db             	movzx  ebx,bl
c00234b3:	0f b6 c0             	movzx  eax,al
c00234b6:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00234bd:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00234c1:	eb 16                	jmp    c00234d9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00234c3:	3c 15                	cmp    al,0x15
c00234c5:	77 14                	ja     c00234db <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00234c7:	0f b6 db             	movzx  ebx,bl
c00234ca:	0f b6 c0             	movzx  eax,al
c00234cd:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00234d5:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00234d9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00234db:	83 c4 1c             	add    esp,0x1c
c00234de:	5b                   	pop    ebx
c00234df:	5e                   	pop    esi
c00234e0:	5f                   	pop    edi
c00234e1:	5d                   	pop    ebp
c00234e2:	c3                   	ret    
c00234e3:	90                   	nop

c00234e4 <IDE::detect()>:
c00234e4:	55                   	push   ebp
c00234e5:	57                   	push   edi
c00234e6:	56                   	push   esi
c00234e7:	53                   	push   ebx
c00234e8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00234ee:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00234f5:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00234fc:	0f 85 9d 02 00 00    	jne    c002379f <IDE::detect()+0x2bb>
c0023502:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023509:	31 f6                	xor    esi,esi
c002350b:	31 ed                	xor    ebp,ebp
c002350d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023515:	89 e8                	mov    eax,ebp
c0023517:	c1 e0 06             	shl    eax,0x6
c002351a:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023522:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023526:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002352a:	c1 e0 04             	shl    eax,0x4
c002352d:	83 c8 a0             	or     eax,0xffffffa0
c0023530:	0f b6 c0             	movzx  eax,al
c0023533:	50                   	push   eax
c0023534:	6a 06                	push   0x6
c0023536:	56                   	push   esi
c0023537:	53                   	push   ebx
c0023538:	e8 7b f8 ff ff       	call   c0022db8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002353d:	83 c4 0c             	add    esp,0xc
c0023540:	6a 0c                	push   0xc
c0023542:	56                   	push   esi
c0023543:	53                   	push   ebx
c0023544:	e8 2f f9 ff ff       	call   c0022e78 <IDE::read(unsigned char, unsigned char)>
c0023549:	83 c4 0c             	add    esp,0xc
c002354c:	6a 0c                	push   0xc
c002354e:	56                   	push   esi
c002354f:	53                   	push   ebx
c0023550:	e8 23 f9 ff ff       	call   c0022e78 <IDE::read(unsigned char, unsigned char)>
c0023555:	83 c4 0c             	add    esp,0xc
c0023558:	6a 0c                	push   0xc
c002355a:	56                   	push   esi
c002355b:	53                   	push   ebx
c002355c:	e8 17 f9 ff ff       	call   c0022e78 <IDE::read(unsigned char, unsigned char)>
c0023561:	83 c4 0c             	add    esp,0xc
c0023564:	6a 0c                	push   0xc
c0023566:	56                   	push   esi
c0023567:	53                   	push   ebx
c0023568:	e8 0b f9 ff ff       	call   c0022e78 <IDE::read(unsigned char, unsigned char)>
c002356d:	68 ec 00 00 00       	push   0xec
c0023572:	6a 07                	push   0x7
c0023574:	56                   	push   esi
c0023575:	53                   	push   ebx
c0023576:	e8 3d f8 ff ff       	call   c0022db8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002357b:	83 c4 1c             	add    esp,0x1c
c002357e:	6a 0c                	push   0xc
c0023580:	56                   	push   esi
c0023581:	53                   	push   ebx
c0023582:	e8 f1 f8 ff ff       	call   c0022e78 <IDE::read(unsigned char, unsigned char)>
c0023587:	83 c4 0c             	add    esp,0xc
c002358a:	6a 0c                	push   0xc
c002358c:	56                   	push   esi
c002358d:	53                   	push   ebx
c002358e:	e8 e5 f8 ff ff       	call   c0022e78 <IDE::read(unsigned char, unsigned char)>
c0023593:	83 c4 0c             	add    esp,0xc
c0023596:	6a 0c                	push   0xc
c0023598:	56                   	push   esi
c0023599:	53                   	push   ebx
c002359a:	e8 d9 f8 ff ff       	call   c0022e78 <IDE::read(unsigned char, unsigned char)>
c002359f:	83 c4 0c             	add    esp,0xc
c00235a2:	6a 0c                	push   0xc
c00235a4:	56                   	push   esi
c00235a5:	53                   	push   ebx
c00235a6:	e8 cd f8 ff ff       	call   c0022e78 <IDE::read(unsigned char, unsigned char)>
c00235ab:	83 c4 0c             	add    esp,0xc
c00235ae:	6a 0c                	push   0xc
c00235b0:	56                   	push   esi
c00235b1:	53                   	push   ebx
c00235b2:	e8 c1 f8 ff ff       	call   c0022e78 <IDE::read(unsigned char, unsigned char)>
c00235b7:	83 c4 10             	add    esp,0x10
c00235ba:	84 c0                	test   al,al
c00235bc:	0f 84 63 01 00 00    	je     c0023725 <IDE::detect()+0x241>
c00235c2:	31 ff                	xor    edi,edi
c00235c4:	50                   	push   eax
c00235c5:	6a 0c                	push   0xc
c00235c7:	56                   	push   esi
c00235c8:	53                   	push   ebx
c00235c9:	e8 aa f8 ff ff       	call   c0022e78 <IDE::read(unsigned char, unsigned char)>
c00235ce:	83 c4 10             	add    esp,0x10
c00235d1:	a8 01                	test   al,0x1
c00235d3:	0f 85 6d 01 00 00    	jne    c0023746 <IDE::detect()+0x262>
c00235d9:	84 c0                	test   al,al
c00235db:	78 04                	js     c00235e1 <IDE::detect()+0xfd>
c00235dd:	a8 08                	test   al,0x8
c00235df:	75 27                	jne    c0023608 <IDE::detect()+0x124>
c00235e1:	47                   	inc    edi
c00235e2:	81 ff 17 01 00 00    	cmp    edi,0x117
c00235e8:	7e da                	jle    c00235c4 <IDE::detect()+0xe0>
c00235ea:	50                   	push   eax
c00235eb:	50                   	push   eax
c00235ec:	6a 00                	push   0x0
c00235ee:	68 40 4b 4c 00       	push   0x4c4b40
c00235f3:	e8 3d a5 ff ff       	call   c001db35 <nanoSleep(unsigned long long)>
c00235f8:	83 c4 10             	add    esp,0x10
c00235fb:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023601:	75 c1                	jne    c00235c4 <IDE::detect()+0xe0>
c0023603:	e9 3e 01 00 00       	jmp    c0023746 <IDE::detect()+0x262>
c0023608:	31 c9                	xor    ecx,ecx
c002360a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002360e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023612:	83 ec 0c             	sub    esp,0xc
c0023615:	68 80 00 00 00       	push   0x80
c002361a:	57                   	push   edi
c002361b:	6a 00                	push   0x0
c002361d:	56                   	push   esi
c002361e:	53                   	push   ebx
c002361f:	e8 f4 fd ff ff       	call   c0023418 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023624:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023629:	89 e8                	mov    eax,ebp
c002362b:	89 d1                	mov    ecx,edx
c002362d:	c1 e0 06             	shl    eax,0x6
c0023630:	01 d8                	add    eax,ebx
c0023632:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023639:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023640:	89 f2                	mov    edx,esi
c0023642:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023648:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002364c:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023652:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023656:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002365d:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023665:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002366c:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023674:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002367a:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023681:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023687:	8d 54 24 58          	lea    edx,[esp+0x58]
c002368b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002368f:	83 c4 20             	add    esp,0x20
c0023692:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023695:	83 c0 02             	add    eax,0x2
c0023698:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002369e:	83 c7 02             	add    edi,0x2
c00236a1:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00236a4:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00236aa:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00236ae:	75 e2                	jne    c0023692 <IDE::detect()+0x1ae>
c00236b0:	89 e8                	mov    eax,ebp
c00236b2:	c1 e0 06             	shl    eax,0x6
c00236b5:	01 d8                	add    eax,ebx
c00236b7:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00236bd:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00236c4:	66 c1 ea 09          	shr    dx,0x9
c00236c8:	83 e2 01             	and    edx,0x1
c00236cb:	84 c9                	test   cl,cl
c00236cd:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00236d3:	75 22                	jne    c00236f7 <IDE::detect()+0x213>
c00236d5:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c00236dc:	74 46                	je     c0023724 <IDE::detect()+0x240>
c00236de:	83 ec 0c             	sub    esp,0xc
c00236e1:	68 7c 01 00 00       	push   0x17c
c00236e6:	e8 ae be fe ff       	call   c000f599 <malloc>
c00236eb:	89 c7                	mov    edi,eax
c00236ed:	89 04 24             	mov    DWORD PTR [esp],eax
c00236f0:	e8 15 05 00 00       	call   c0023c0a <ATA::ATA()>
c00236f5:	eb 17                	jmp    c002370e <IDE::detect()+0x22a>
c00236f7:	83 ec 0c             	sub    esp,0xc
c00236fa:	68 80 01 00 00       	push   0x180
c00236ff:	e8 95 be fe ff       	call   c000f599 <malloc>
c0023704:	89 c7                	mov    edi,eax
c0023706:	89 04 24             	mov    DWORD PTR [esp],eax
c0023709:	e8 04 0b 00 00       	call   c0024212 <ATAPI::ATAPI()>
c002370e:	5a                   	pop    edx
c002370f:	59                   	pop    ecx
c0023710:	57                   	push   edi
c0023711:	53                   	push   ebx
c0023712:	e8 93 02 ff ff       	call   c00139aa <Device::addChild(Device*)>
c0023717:	8b 07                	mov    eax,DWORD PTR [edi]
c0023719:	53                   	push   ebx
c002371a:	55                   	push   ebp
c002371b:	6a 00                	push   0x0
c002371d:	57                   	push   edi
c002371e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023721:	83 c4 20             	add    esp,0x20
c0023724:	45                   	inc    ebp
c0023725:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c002372a:	74 0d                	je     c0023739 <IDE::detect()+0x255>
c002372c:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0023734:	e9 dc fd ff ff       	jmp    c0023515 <IDE::detect()+0x31>
c0023739:	4e                   	dec    esi
c002373a:	74 63                	je     c002379f <IDE::detect()+0x2bb>
c002373c:	be 01 00 00 00       	mov    esi,0x1
c0023741:	e9 c7 fd ff ff       	jmp    c002350d <IDE::detect()+0x29>
c0023746:	50                   	push   eax
c0023747:	6a 04                	push   0x4
c0023749:	56                   	push   esi
c002374a:	53                   	push   ebx
c002374b:	e8 28 f7 ff ff       	call   c0022e78 <IDE::read(unsigned char, unsigned char)>
c0023750:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023754:	83 c4 0c             	add    esp,0xc
c0023757:	6a 05                	push   0x5
c0023759:	56                   	push   esi
c002375a:	53                   	push   ebx
c002375b:	e8 18 f7 ff ff       	call   c0022e78 <IDE::read(unsigned char, unsigned char)>
c0023760:	83 c4 10             	add    esp,0x10
c0023763:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023767:	80 fa 14             	cmp    dl,0x14
c002376a:	75 04                	jne    c0023770 <IDE::detect()+0x28c>
c002376c:	3c eb                	cmp    al,0xeb
c002376e:	eb 07                	jmp    c0023777 <IDE::detect()+0x293>
c0023770:	3c 96                	cmp    al,0x96
c0023772:	75 b1                	jne    c0023725 <IDE::detect()+0x241>
c0023774:	80 fa 69             	cmp    dl,0x69
c0023777:	75 ac                	jne    c0023725 <IDE::detect()+0x241>
c0023779:	68 a1 00 00 00       	push   0xa1
c002377e:	6a 07                	push   0x7
c0023780:	56                   	push   esi
c0023781:	53                   	push   ebx
c0023782:	e8 31 f6 ff ff       	call   c0022db8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023787:	5f                   	pop    edi
c0023788:	58                   	pop    eax
c0023789:	6a 00                	push   0x0
c002378b:	68 40 42 0f 00       	push   0xf4240
c0023790:	e8 a0 a3 ff ff       	call   c001db35 <nanoSleep(unsigned long long)>
c0023795:	83 c4 10             	add    esp,0x10
c0023798:	b1 01                	mov    cl,0x1
c002379a:	e9 6b fe ff ff       	jmp    c002360a <IDE::detect()+0x126>
c002379f:	81 c4 1c 02 00 00    	add    esp,0x21c
c00237a5:	5b                   	pop    ebx
c00237a6:	5e                   	pop    esi
c00237a7:	5f                   	pop    edi
c00237a8:	5d                   	pop    ebp
c00237a9:	c3                   	ret    

c00237aa <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00237aa:	55                   	push   ebp
c00237ab:	57                   	push   edi
c00237ac:	56                   	push   esi
c00237ad:	53                   	push   ebx
c00237ae:	83 ec 1c             	sub    esp,0x1c
c00237b1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00237b5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00237b9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00237bd:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00237c1:	88 c3                	mov    bl,al
c00237c3:	84 c0                	test   al,al
c00237c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00237c9:	0f 84 81 00 00 00    	je     c0023850 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00237cf:	83 ec 0c             	sub    esp,0xc
c00237d2:	68 1b be 02 c0       	push   0xc002be1b
c00237d7:	e8 95 ed fe ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c00237dc:	83 c4 10             	add    esp,0x10
c00237df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00237e3:	3c 01                	cmp    al,0x1
c00237e5:	74 63                	je     c002384a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c00237e7:	3c 02                	cmp    al,0x2
c00237e9:	75 53                	jne    c002383e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c00237eb:	d1 e6                	shl    esi,1
c00237ed:	09 ee                	or     esi,ebp
c00237ef:	50                   	push   eax
c00237f0:	89 f0                	mov    eax,esi
c00237f2:	6a 01                	push   0x1
c00237f4:	0f b6 f0             	movzx  esi,al
c00237f7:	c1 e6 06             	shl    esi,0x6
c00237fa:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023802:	50                   	push   eax
c0023803:	57                   	push   edi
c0023804:	e8 6f f6 ff ff       	call   c0022e78 <IDE::read(unsigned char, unsigned char)>
c0023809:	83 c4 10             	add    esp,0x10
c002380c:	a8 01                	test   al,0x1
c002380e:	74 02                	je     c0023812 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0023810:	b3 07                	mov    bl,0x7
c0023812:	a8 02                	test   al,0x2
c0023814:	74 02                	je     c0023818 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0023816:	b3 03                	mov    bl,0x3
c0023818:	a8 04                	test   al,0x4
c002381a:	74 02                	je     c002381e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c002381c:	b3 14                	mov    bl,0x14
c002381e:	a8 08                	test   al,0x8
c0023820:	74 02                	je     c0023824 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0023822:	b3 03                	mov    bl,0x3
c0023824:	a8 10                	test   al,0x10
c0023826:	74 02                	je     c002382a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0023828:	b3 15                	mov    bl,0x15
c002382a:	a8 20                	test   al,0x20
c002382c:	74 02                	je     c0023830 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c002382e:	b3 03                	mov    bl,0x3
c0023830:	a8 40                	test   al,0x40
c0023832:	74 02                	je     c0023836 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0023834:	b3 16                	mov    bl,0x16
c0023836:	84 c0                	test   al,al
c0023838:	79 16                	jns    c0023850 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c002383a:	b3 0d                	mov    bl,0xd
c002383c:	eb 12                	jmp    c0023850 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c002383e:	3c 03                	cmp    al,0x3
c0023840:	74 0c                	je     c002384e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0023842:	3c 04                	cmp    al,0x4
c0023844:	75 0a                	jne    c0023850 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023846:	b3 08                	mov    bl,0x8
c0023848:	eb 06                	jmp    c0023850 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c002384a:	b3 13                	mov    bl,0x13
c002384c:	eb 02                	jmp    c0023850 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c002384e:	b3 17                	mov    bl,0x17
c0023850:	83 c4 1c             	add    esp,0x1c
c0023853:	88 d8                	mov    al,bl
c0023855:	5b                   	pop    ebx
c0023856:	5e                   	pop    esi
c0023857:	5f                   	pop    edi
c0023858:	5d                   	pop    ebp
c0023859:	c3                   	ret    

c002385a <IDE::polling(unsigned char, unsigned int)>:
c002385a:	57                   	push   edi
c002385b:	56                   	push   esi
c002385c:	53                   	push   ebx
c002385d:	bb 04 00 00 00       	mov    ebx,0x4
c0023862:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023866:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002386b:	52                   	push   edx
c002386c:	6a 0c                	push   0xc
c002386e:	56                   	push   esi
c002386f:	57                   	push   edi
c0023870:	e8 03 f6 ff ff       	call   c0022e78 <IDE::read(unsigned char, unsigned char)>
c0023875:	83 c4 10             	add    esp,0x10
c0023878:	4b                   	dec    ebx
c0023879:	75 f0                	jne    c002386b <IDE::polling(unsigned char, unsigned int)+0x11>
c002387b:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023880:	50                   	push   eax
c0023881:	6a 0c                	push   0xc
c0023883:	56                   	push   esi
c0023884:	57                   	push   edi
c0023885:	e8 ee f5 ff ff       	call   c0022e78 <IDE::read(unsigned char, unsigned char)>
c002388a:	83 c4 10             	add    esp,0x10
c002388d:	a8 01                	test   al,0x1
c002388f:	75 17                	jne    c00238a8 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023891:	a8 20                	test   al,0x20
c0023893:	75 0f                	jne    c00238a4 <IDE::polling(unsigned char, unsigned int)+0x4a>
c0023895:	4b                   	dec    ebx
c0023896:	74 10                	je     c00238a8 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023898:	84 c0                	test   al,al
c002389a:	78 e4                	js     c0023880 <IDE::polling(unsigned char, unsigned int)+0x26>
c002389c:	a8 08                	test   al,0x8
c002389e:	74 e0                	je     c0023880 <IDE::polling(unsigned char, unsigned int)+0x26>
c00238a0:	31 c0                	xor    eax,eax
c00238a2:	eb 06                	jmp    c00238aa <IDE::polling(unsigned char, unsigned int)+0x50>
c00238a4:	b0 01                	mov    al,0x1
c00238a6:	eb 02                	jmp    c00238aa <IDE::polling(unsigned char, unsigned int)+0x50>
c00238a8:	b0 02                	mov    al,0x2
c00238aa:	5b                   	pop    ebx
c00238ab:	5e                   	pop    esi
c00238ac:	5f                   	pop    edi
c00238ad:	c3                   	ret    

c00238ae <SATABus::close(int, int, void*)>:
c00238ae:	31 c0                	xor    eax,eax
c00238b0:	c3                   	ret    
c00238b1:	90                   	nop

c00238b2 <SATABus::detect()>:
c00238b2:	c3                   	ret    
c00238b3:	90                   	nop

c00238b4 <SATABus::SATABus()>:
c00238b4:	83 ec 0c             	sub    esp,0xc
c00238b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238bb:	83 ec 08             	sub    esp,0x8
c00238be:	68 54 be 02 c0       	push   0xc002be54
c00238c3:	50                   	push   eax
c00238c4:	e8 8f 04 ff ff       	call   c0013d58 <HardDiskController::HardDiskController(char const*)>
c00238c9:	83 c4 10             	add    esp,0x10
c00238cc:	ba a8 be 02 c0       	mov    edx,0xc002bea8
c00238d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238d5:	89 10                	mov    DWORD PTR [eax],edx
c00238d7:	83 ec 0c             	sub    esp,0xc
c00238da:	6a 50                	push   0x50
c00238dc:	e8 05 c1 fe ff       	call   c000f9e6 <Phys::allocateContiguousPages(int)>
c00238e1:	83 c4 10             	add    esp,0x10
c00238e4:	89 c2                	mov    edx,eax
c00238e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238ea:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00238f0:	83 ec 0c             	sub    esp,0xc
c00238f3:	6a 50                	push   0x50
c00238f5:	e8 a3 d8 fe ff       	call   c001119d <Virt::allocateKernelVirtualPages(int)>
c00238fa:	83 c4 10             	add    esp,0x10
c00238fd:	89 c2                	mov    edx,eax
c00238ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023903:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023909:	a1 d0 d7 02 c0       	mov    eax,ds:0xc002d7d0
c002390e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023912:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023918:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002391c:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023922:	83 ec 0c             	sub    esp,0xc
c0023925:	6a 03                	push   0x3
c0023927:	6a 50                	push   0x50
c0023929:	51                   	push   ecx
c002392a:	52                   	push   edx
c002392b:	50                   	push   eax
c002392c:	e8 1f e3 fe ff       	call   c0011c50 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023931:	83 c4 20             	add    esp,0x20
c0023934:	90                   	nop
c0023935:	83 c4 0c             	add    esp,0xc
c0023938:	c3                   	ret    
c0023939:	90                   	nop

c002393a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c002393a:	83 ec 0c             	sub    esp,0xc
c002393d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023941:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023944:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023947:	09 c2                	or     edx,eax
c0023949:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002394d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023953:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023955:	31 c0                	xor    eax,eax
c0023957:	c1 e9 08             	shr    ecx,0x8
c002395a:	83 e1 0f             	and    ecx,0xf
c002395d:	39 c8                	cmp    eax,ecx
c002395f:	74 0a                	je     c002396b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023961:	f6 c2 01             	test   dl,0x1
c0023964:	74 18                	je     c002397e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023966:	d1 ea                	shr    edx,1
c0023968:	40                   	inc    eax
c0023969:	eb f2                	jmp    c002395d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c002396b:	83 ec 0c             	sub    esp,0xc
c002396e:	68 78 be 02 c0       	push   0xc002be78
c0023973:	e8 59 63 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c0023978:	83 c4 10             	add    esp,0x10
c002397b:	83 c8 ff             	or     eax,0xffffffff
c002397e:	83 c4 0c             	add    esp,0xc
c0023981:	c3                   	ret    

c0023982 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023982:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023986:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023989:	89 c2                	mov    edx,eax
c002398b:	c1 ea 08             	shr    edx,0x8
c002398e:	83 e2 0f             	and    edx,0xf
c0023991:	fe ca                	dec    dl
c0023993:	75 31                	jne    c00239c6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023995:	83 e0 0f             	and    eax,0xf
c0023998:	3c 03                	cmp    al,0x3
c002399a:	75 2a                	jne    c00239c6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002399c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002399f:	b8 02 00 00 00       	mov    eax,0x2
c00239a4:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c00239aa:	74 1c                	je     c00239c8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00239ac:	b8 04 00 00 00       	mov    eax,0x4
c00239b1:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c00239b7:	74 0f                	je     c00239c8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00239b9:	31 c0                	xor    eax,eax
c00239bb:	83 fa 03             	cmp    edx,0x3
c00239be:	0f 94 c0             	sete   al
c00239c1:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c00239c5:	c3                   	ret    
c00239c6:	31 c0                	xor    eax,eax
c00239c8:	c3                   	ret    
c00239c9:	90                   	nop

c00239ca <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c00239ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00239ce:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00239d1:	0f ba e2 0f          	bt     edx,0xf
c00239d5:	72 f7                	jb     c00239ce <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c00239d7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00239da:	83 ca 10             	or     edx,0x10
c00239dd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00239e0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00239e3:	83 ca 01             	or     edx,0x1
c00239e6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00239e9:	c3                   	ret    

c00239ea <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c00239ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00239ee:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00239f1:	83 e2 fe             	and    edx,0xfffffffe
c00239f4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00239f7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00239fa:	83 e2 ef             	and    edx,0xffffffef
c00239fd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023a00:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023a03:	0f ba e2 0e          	bt     edx,0xe
c0023a07:	72 f7                	jb     c0023a00 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023a09:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023a0c:	0f ba e2 0f          	bt     edx,0xf
c0023a10:	72 ee                	jb     c0023a00 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023a12:	c3                   	ret    
c0023a13:	90                   	nop

c0023a14 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023a14:	55                   	push   ebp
c0023a15:	57                   	push   edi
c0023a16:	56                   	push   esi
c0023a17:	53                   	push   ebx
c0023a18:	83 ec 1c             	sub    esp,0x1c
c0023a1b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023a1f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023a23:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023a27:	53                   	push   ebx
c0023a28:	89 fd                	mov    ebp,edi
c0023a2a:	56                   	push   esi
c0023a2b:	c1 e5 0a             	shl    ebp,0xa
c0023a2e:	e8 b7 ff ff ff       	call   c00239ea <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023a33:	83 ec 0c             	sub    esp,0xc
c0023a36:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023a3c:	01 e8                	add    eax,ebp
c0023a3e:	89 03                	mov    DWORD PTR [ebx],eax
c0023a40:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023a42:	68 00 04 00 00       	push   0x400
c0023a47:	6a 00                	push   0x0
c0023a49:	50                   	push   eax
c0023a4a:	e8 01 cd fd ff       	call   c0000750 <memset>
c0023a4f:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023a55:	89 fa                	mov    edx,edi
c0023a57:	01 e8                	add    eax,ebp
c0023a59:	c1 e7 0d             	shl    edi,0xd
c0023a5c:	89 03                	mov    DWORD PTR [ebx],eax
c0023a5e:	c1 e2 08             	shl    edx,0x8
c0023a61:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023a68:	81 c2 00 80 00 00    	add    edx,0x8000
c0023a6e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023a72:	89 d0                	mov    eax,edx
c0023a74:	83 c4 1c             	add    esp,0x1c
c0023a77:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023a7d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023a80:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023a83:	68 00 01 00 00       	push   0x100
c0023a88:	6a 00                	push   0x0
c0023a8a:	50                   	push   eax
c0023a8b:	e8 c0 cc fd ff       	call   c0000750 <memset>
c0023a90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023a94:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023a9a:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023aa0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023aa4:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023aa7:	83 c4 10             	add    esp,0x10
c0023aaa:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023ab1:	31 ff                	xor    edi,edi
c0023ab3:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023ab9:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023abf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023ac3:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023ac9:	83 c5 20             	add    ebp,0x20
c0023acc:	01 f8                	add    eax,edi
c0023ace:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023ad1:	52                   	push   edx
c0023ad2:	68 00 01 00 00       	push   0x100
c0023ad7:	6a 00                	push   0x0
c0023ad9:	50                   	push   eax
c0023ada:	e8 71 cc fd ff       	call   c0000750 <memset>
c0023adf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023ae3:	83 c4 10             	add    esp,0x10
c0023ae6:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023aec:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023af3:	01 f8                	add    eax,edi
c0023af5:	81 c7 00 01 00 00    	add    edi,0x100
c0023afb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023afe:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023b04:	75 b3                	jne    c0023ab9 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023b06:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023b0a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023b0e:	83 c4 1c             	add    esp,0x1c
c0023b11:	5b                   	pop    ebx
c0023b12:	5e                   	pop    esi
c0023b13:	5f                   	pop    edi
c0023b14:	5d                   	pop    ebp
c0023b15:	e9 b0 fe ff ff       	jmp    c00239ca <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023b1a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023b1a:	55                   	push   ebp
c0023b1b:	57                   	push   edi
c0023b1c:	56                   	push   esi
c0023b1d:	53                   	push   ebx
c0023b1e:	31 db                	xor    ebx,ebx
c0023b20:	83 ec 0c             	sub    esp,0xc
c0023b23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023b27:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023b2b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023b2e:	f7 c7 01 00 00 00    	test   edi,0x1
c0023b34:	74 7a                	je     c0023bb0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023b36:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0023b3a:	89 d8                	mov    eax,ebx
c0023b3c:	c1 e0 07             	shl    eax,0x7
c0023b3f:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0023b46:	55                   	push   ebp
c0023b47:	56                   	push   esi
c0023b48:	e8 35 fe ff ff       	call   c0023982 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023b4d:	5a                   	pop    edx
c0023b4e:	83 f8 01             	cmp    eax,0x1
c0023b51:	59                   	pop    ecx
c0023b52:	75 21                	jne    c0023b75 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0023b54:	50                   	push   eax
c0023b55:	53                   	push   ebx
c0023b56:	55                   	push   ebp
c0023b57:	56                   	push   esi
c0023b58:	e8 b7 fe ff ff       	call   c0023a14 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023b5d:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023b64:	e8 30 ba fe ff       	call   c000f599 <malloc>
c0023b69:	89 c5                	mov    ebp,eax
c0023b6b:	89 04 24             	mov    DWORD PTR [esp],eax
c0023b6e:	e8 03 0d 00 00       	call   c0024876 <SATA::SATA()>
c0023b73:	eb 24                	jmp    c0023b99 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0023b75:	83 f8 04             	cmp    eax,0x4
c0023b78:	75 36                	jne    c0023bb0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023b7a:	51                   	push   ecx
c0023b7b:	53                   	push   ebx
c0023b7c:	55                   	push   ebp
c0023b7d:	56                   	push   esi
c0023b7e:	e8 91 fe ff ff       	call   c0023a14 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023b83:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023b8a:	e8 0a ba fe ff       	call   c000f599 <malloc>
c0023b8f:	89 c5                	mov    ebp,eax
c0023b91:	89 04 24             	mov    DWORD PTR [esp],eax
c0023b94:	e8 53 10 00 00       	call   c0024bec <SATAPI::SATAPI()>
c0023b99:	58                   	pop    eax
c0023b9a:	5a                   	pop    edx
c0023b9b:	55                   	push   ebp
c0023b9c:	56                   	push   esi
c0023b9d:	e8 08 fe fe ff       	call   c00139aa <Device::addChild(Device*)>
c0023ba2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0023ba5:	56                   	push   esi
c0023ba6:	6a 00                	push   0x0
c0023ba8:	53                   	push   ebx
c0023ba9:	55                   	push   ebp
c0023baa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0023bad:	83 c4 20             	add    esp,0x20
c0023bb0:	d1 ef                	shr    edi,1
c0023bb2:	43                   	inc    ebx
c0023bb3:	83 fb 20             	cmp    ebx,0x20
c0023bb6:	0f 85 72 ff ff ff    	jne    c0023b2e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023bbc:	83 c4 0c             	add    esp,0xc
c0023bbf:	5b                   	pop    ebx
c0023bc0:	5e                   	pop    esi
c0023bc1:	5f                   	pop    edi
c0023bc2:	5d                   	pop    ebp
c0023bc3:	c3                   	ret    

c0023bc4 <SATABus::open(int, int, void*)>:
c0023bc4:	83 ec 14             	sub    esp,0x14
c0023bc7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023bcb:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023bd1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023bd7:	52                   	push   edx
c0023bd8:	50                   	push   eax
c0023bd9:	e8 3c ff ff ff       	call   c0023b1a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023bde:	31 c0                	xor    eax,eax
c0023be0:	83 c4 1c             	add    esp,0x1c
c0023be3:	c3                   	ret    

c0023be4 <ATA::close(int, int, void*)>:
c0023be4:	83 ec 0c             	sub    esp,0xc
c0023be7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023beb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023bf1:	85 c0                	test   eax,eax
c0023bf3:	74 0c                	je     c0023c01 <ATA::close(int, int, void*)+0x1d>
c0023bf5:	83 ec 0c             	sub    esp,0xc
c0023bf8:	8b 10                	mov    edx,DWORD PTR [eax]
c0023bfa:	50                   	push   eax
c0023bfb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023bfe:	83 c4 10             	add    esp,0x10
c0023c01:	31 c0                	xor    eax,eax
c0023c03:	83 c4 0c             	add    esp,0xc
c0023c06:	c3                   	ret    
c0023c07:	90                   	nop

c0023c08 <ATA::powerSaving(PowerSavingLevel)>:
c0023c08:	c3                   	ret    
c0023c09:	90                   	nop

c0023c0a <ATA::ATA()>:
c0023c0a:	83 ec 0c             	sub    esp,0xc
c0023c0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c11:	83 ec 04             	sub    esp,0x4
c0023c14:	68 00 02 00 00       	push   0x200
c0023c19:	68 71 bf 02 c0       	push   0xc002bf71
c0023c1e:	50                   	push   eax
c0023c1f:	e8 bc 01 ff ff       	call   c0013de0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023c24:	83 c4 10             	add    esp,0x10
c0023c27:	ba f4 be 02 c0       	mov    edx,0xc002bef4
c0023c2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c30:	89 10                	mov    DWORD PTR [eax],edx
c0023c32:	90                   	nop
c0023c33:	83 c4 0c             	add    esp,0xc
c0023c36:	c3                   	ret    
c0023c37:	90                   	nop

c0023c38 <ATA::flush(bool)>:
c0023c38:	53                   	push   ebx
c0023c39:	83 ec 08             	sub    esp,0x8
c0023c3c:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023c41:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023c45:	19 c0                	sbb    eax,eax
c0023c47:	83 e0 fd             	and    eax,0xfffffffd
c0023c4a:	05 ea 00 00 00       	add    eax,0xea
c0023c4f:	50                   	push   eax
c0023c50:	6a 07                	push   0x7
c0023c52:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023c59:	50                   	push   eax
c0023c5a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023c60:	e8 53 f1 ff ff       	call   c0022db8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023c65:	83 c4 0c             	add    esp,0xc
c0023c68:	6a 00                	push   0x0
c0023c6a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023c71:	50                   	push   eax
c0023c72:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023c78:	e8 dd fb ff ff       	call   c002385a <IDE::polling(unsigned char, unsigned int)>
c0023c7d:	83 c4 18             	add    esp,0x18
c0023c80:	5b                   	pop    ebx
c0023c81:	c3                   	ret    

c0023c82 <ATA::readyForCommand()>:
c0023c82:	56                   	push   esi
c0023c83:	53                   	push   ebx
c0023c84:	31 db                	xor    ebx,ebx
c0023c86:	50                   	push   eax
c0023c87:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023c8b:	50                   	push   eax
c0023c8c:	6a 0c                	push   0xc
c0023c8e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023c95:	50                   	push   eax
c0023c96:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023c9c:	e8 d7 f1 ff ff       	call   c0022e78 <IDE::read(unsigned char, unsigned char)>
c0023ca1:	83 c4 10             	add    esp,0x10
c0023ca4:	a8 88                	test   al,0x88
c0023ca6:	74 23                	je     c0023ccb <ATA::readyForCommand()+0x49>
c0023ca8:	43                   	inc    ebx
c0023ca9:	83 fb 63             	cmp    ebx,0x63
c0023cac:	7e dd                	jle    c0023c8b <ATA::readyForCommand()+0x9>
c0023cae:	51                   	push   ecx
c0023caf:	51                   	push   ecx
c0023cb0:	6a 00                	push   0x0
c0023cb2:	68 40 42 0f 00       	push   0xf4240
c0023cb7:	e8 79 9e ff ff       	call   c001db35 <nanoSleep(unsigned long long)>
c0023cbc:	83 c4 10             	add    esp,0x10
c0023cbf:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023cc5:	75 c4                	jne    c0023c8b <ATA::readyForCommand()+0x9>
c0023cc7:	31 c0                	xor    eax,eax
c0023cc9:	eb 02                	jmp    c0023ccd <ATA::readyForCommand()+0x4b>
c0023ccb:	b0 01                	mov    al,0x1
c0023ccd:	5a                   	pop    edx
c0023cce:	5b                   	pop    ebx
c0023ccf:	5e                   	pop    esi
c0023cd0:	c3                   	ret    
c0023cd1:	90                   	nop

c0023cd2 <ATA::access(unsigned long long, int, void*, bool)>:
c0023cd2:	55                   	push   ebp
c0023cd3:	57                   	push   edi
c0023cd4:	56                   	push   esi
c0023cd5:	53                   	push   ebx
c0023cd6:	83 ec 2c             	sub    esp,0x2c
c0023cd9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023cdd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023ce1:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023ce9:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023ced:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023cf1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023cf5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023cfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023cff:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023d05:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023d09:	c1 e0 06             	shl    eax,0x6
c0023d0c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023d14:	74 5d                	je     c0023d73 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023d16:	89 fa                	mov    edx,edi
c0023d18:	89 f0                	mov    eax,esi
c0023d1a:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023d1e:	c1 ea 1c             	shr    edx,0x1c
c0023d21:	89 d1                	mov    ecx,edx
c0023d23:	09 c1                	or     ecx,eax
c0023d25:	74 25                	je     c0023d4c <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023d27:	31 ed                	xor    ebp,ebp
c0023d29:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023d30:	89 fa                	mov    edx,edi
c0023d32:	89 f0                	mov    eax,esi
c0023d34:	0f ad d0             	shrd   eax,edx,cl
c0023d37:	d3 ea                	shr    edx,cl
c0023d39:	f6 c1 20             	test   cl,0x20
c0023d3c:	74 02                	je     c0023d40 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023d3e:	89 d0                	mov    eax,edx
c0023d40:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023d44:	45                   	inc    ebp
c0023d45:	83 fd 06             	cmp    ebp,0x6
c0023d48:	75 df                	jne    c0023d29 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023d4a:	eb 76                	jmp    c0023dc2 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023d4c:	89 f0                	mov    eax,esi
c0023d4e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023d53:	89 fa                	mov    edx,edi
c0023d55:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023d5c:	0f ac d0 10          	shrd   eax,edx,0x10
c0023d60:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023d65:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023d69:	c1 ee 18             	shr    esi,0x18
c0023d6c:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023d71:	eb 56                	jmp    c0023dc9 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023d73:	6a 00                	push   0x0
c0023d75:	6a 3f                	push   0x3f
c0023d77:	57                   	push   edi
c0023d78:	56                   	push   esi
c0023d79:	e8 26 29 00 00       	call   c00266a4 <__umoddi3>
c0023d7e:	83 c4 10             	add    esp,0x10
c0023d81:	40                   	inc    eax
c0023d82:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023d86:	6a 00                	push   0x0
c0023d88:	68 f0 03 00 00       	push   0x3f0
c0023d8d:	57                   	push   edi
c0023d8e:	56                   	push   esi
c0023d8f:	e8 10 28 00 00       	call   c00265a4 <__udivdi3>
c0023d94:	83 c4 10             	add    esp,0x10
c0023d97:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023d9c:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023da3:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023da8:	6a 00                	push   0x0
c0023daa:	6a 3f                	push   0x3f
c0023dac:	57                   	push   edi
c0023dad:	56                   	push   esi
c0023dae:	e8 f1 27 00 00       	call   c00265a4 <__udivdi3>
c0023db3:	83 c4 10             	add    esp,0x10
c0023db6:	89 c6                	mov    esi,eax
c0023db8:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023dbd:	83 e6 0f             	and    esi,0xf
c0023dc0:	eb 07                	jmp    c0023dc9 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023dc2:	31 f6                	xor    esi,esi
c0023dc4:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023dc9:	bf 01 00 00 00       	mov    edi,0x1
c0023dce:	50                   	push   eax
c0023dcf:	6a 00                	push   0x0
c0023dd1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023dd8:	50                   	push   eax
c0023dd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023ddd:	e8 e2 f1 ff ff       	call   c0022fc4 <IDE::enableIRQs(unsigned char, bool)>
c0023de2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023de5:	e8 98 fe ff ff       	call   c0023c82 <ATA::readyForCommand()>
c0023dea:	83 c4 10             	add    esp,0x10
c0023ded:	84 c0                	test   al,al
c0023def:	0f 84 5a 02 00 00    	je     c002404f <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023df5:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023dfb:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023e01:	c1 e0 04             	shl    eax,0x4
c0023e04:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0023e0b:	09 c6                	or     esi,eax
c0023e0d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023e12:	75 05                	jne    c0023e19 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023e14:	83 ce a0             	or     esi,0xffffffa0
c0023e17:	eb 03                	jmp    c0023e1c <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023e19:	83 ce e0             	or     esi,0xffffffe0
c0023e1c:	89 f0                	mov    eax,esi
c0023e1e:	0f b6 f0             	movzx  esi,al
c0023e21:	56                   	push   esi
c0023e22:	6a 06                	push   0x6
c0023e24:	51                   	push   ecx
c0023e25:	52                   	push   edx
c0023e26:	e8 8d ef ff ff       	call   c0022db8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e2b:	83 c4 10             	add    esp,0x10
c0023e2e:	6a 00                	push   0x0
c0023e30:	6a 01                	push   0x1
c0023e32:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e39:	50                   	push   eax
c0023e3a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e40:	e8 73 ef ff ff       	call   c0022db8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e45:	83 c4 10             	add    esp,0x10
c0023e48:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023e4d:	75 6e                	jne    c0023ebd <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023e4f:	6a 00                	push   0x0
c0023e51:	6a 08                	push   0x8
c0023e53:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e5a:	50                   	push   eax
c0023e5b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e61:	e8 52 ef ff ff       	call   c0022db8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e66:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0023e6b:	50                   	push   eax
c0023e6c:	6a 09                	push   0x9
c0023e6e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e75:	50                   	push   eax
c0023e76:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e7c:	e8 37 ef ff ff       	call   c0022db8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e81:	83 c4 20             	add    esp,0x20
c0023e84:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0023e89:	50                   	push   eax
c0023e8a:	6a 0a                	push   0xa
c0023e8c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e93:	50                   	push   eax
c0023e94:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e9a:	e8 19 ef ff ff       	call   c0022db8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e9f:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0023ea4:	50                   	push   eax
c0023ea5:	6a 0b                	push   0xb
c0023ea7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023eae:	50                   	push   eax
c0023eaf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023eb5:	e8 fe ee ff ff       	call   c0022db8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023eba:	83 c4 20             	add    esp,0x20
c0023ebd:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0023ec2:	50                   	push   eax
c0023ec3:	6a 02                	push   0x2
c0023ec5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ecc:	50                   	push   eax
c0023ecd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ed3:	e8 e0 ee ff ff       	call   c0022db8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ed8:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0023edd:	50                   	push   eax
c0023ede:	6a 03                	push   0x3
c0023ee0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ee7:	50                   	push   eax
c0023ee8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023eee:	e8 c5 ee ff ff       	call   c0022db8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ef3:	83 c4 20             	add    esp,0x20
c0023ef6:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0023efb:	50                   	push   eax
c0023efc:	6a 04                	push   0x4
c0023efe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f05:	50                   	push   eax
c0023f06:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f0c:	e8 a7 ee ff ff       	call   c0022db8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f11:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023f16:	50                   	push   eax
c0023f17:	6a 05                	push   0x5
c0023f19:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f20:	50                   	push   eax
c0023f21:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f27:	e8 8c ee ff ff       	call   c0022db8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f2c:	83 c4 20             	add    esp,0x20
c0023f2f:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023f34:	0f 94 c0             	sete   al
c0023f37:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023f3c:	74 09                	je     c0023f47 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0023f3e:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0023f45:	eb 07                	jmp    c0023f4e <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0023f47:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0023f4e:	0f b6 c0             	movzx  eax,al
c0023f51:	50                   	push   eax
c0023f52:	6a 07                	push   0x7
c0023f54:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f5b:	50                   	push   eax
c0023f5c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f62:	e8 51 ee ff ff       	call   c0022db8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f67:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0023f6b:	83 c4 10             	add    esp,0x10
c0023f6e:	85 f6                	test   esi,esi
c0023f70:	0f 84 ba 00 00 00    	je     c0024030 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0023f76:	50                   	push   eax
c0023f77:	6a 01                	push   0x1
c0023f79:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f80:	50                   	push   eax
c0023f81:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f87:	e8 ce f8 ff ff       	call   c002385a <IDE::polling(unsigned char, unsigned int)>
c0023f8c:	83 c4 10             	add    esp,0x10
c0023f8f:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0023f95:	84 c0                	test   al,al
c0023f97:	74 2c                	je     c0023fc5 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0023f99:	0f b6 f8             	movzx  edi,al
c0023f9c:	0f b6 d2             	movzx  edx,dl
c0023f9f:	57                   	push   edi
c0023fa0:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0023fa7:	50                   	push   eax
c0023fa8:	52                   	push   edx
c0023fa9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023faf:	e8 f6 f7 ff ff       	call   c00237aa <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0023fb4:	c7 04 24 cc be 02 c0 	mov    DWORD PTR [esp],0xc002becc
c0023fbb:	e8 b1 e5 fe ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0023fc0:	e9 87 00 00 00       	jmp    c002404c <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0023fc5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0023fca:	74 33                	je     c0023fff <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0023fcc:	31 ed                	xor    ebp,ebp
c0023fce:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0023fd2:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0023fd6:	50                   	push   eax
c0023fd7:	50                   	push   eax
c0023fd8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fdf:	50                   	push   eax
c0023fe0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fe6:	e8 bb ed ff ff       	call   c0022da6 <IDE::getBase(unsigned char)>
c0023feb:	89 c2                	mov    edx,eax
c0023fed:	89 f8                	mov    eax,edi
c0023fef:	66 ef                	out    dx,ax
c0023ff1:	45                   	inc    ebp
c0023ff2:	83 c4 10             	add    esp,0x10
c0023ff5:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0023ffb:	75 d1                	jne    c0023fce <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0023ffd:	eb 23                	jmp    c0024022 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0023fff:	0f b6 d2             	movzx  edx,dl
c0024002:	51                   	push   ecx
c0024003:	51                   	push   ecx
c0024004:	52                   	push   edx
c0024005:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002400b:	e8 96 ed ff ff       	call   c0022da6 <IDE::getBase(unsigned char)>
c0024010:	b9 00 01 00 00       	mov    ecx,0x100
c0024015:	89 c2                	mov    edx,eax
c0024017:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002401b:	fc                   	cld    
c002401c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002401f:	83 c4 10             	add    esp,0x10
c0024022:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002402a:	4e                   	dec    esi
c002402b:	e9 3e ff ff ff       	jmp    c0023f6e <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024030:	31 ff                	xor    edi,edi
c0024032:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024037:	74 16                	je     c002404f <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024039:	50                   	push   eax
c002403a:	50                   	push   eax
c002403b:	31 c0                	xor    eax,eax
c002403d:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024042:	0f 94 c0             	sete   al
c0024045:	50                   	push   eax
c0024046:	53                   	push   ebx
c0024047:	e8 ec fb ff ff       	call   c0023c38 <ATA::flush(bool)>
c002404c:	83 c4 10             	add    esp,0x10
c002404f:	83 c4 2c             	add    esp,0x2c
c0024052:	89 f8                	mov    eax,edi
c0024054:	5b                   	pop    ebx
c0024055:	5e                   	pop    esi
c0024056:	5f                   	pop    edi
c0024057:	5d                   	pop    ebp
c0024058:	c3                   	ret    
c0024059:	90                   	nop

c002405a <ATA::read(unsigned long long, int, void*)>:
c002405a:	57                   	push   edi
c002405b:	b8 04 00 00 00       	mov    eax,0x4
c0024060:	56                   	push   esi
c0024061:	53                   	push   ebx
c0024062:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024066:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002406a:	8d 7a ff             	lea    edi,[edx-0x1]
c002406d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024071:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024075:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002407b:	77 25                	ja     c00240a2 <ATA::read(unsigned long long, int, void*)+0x48>
c002407d:	b8 06 00 00 00       	mov    eax,0x6
c0024082:	85 f6                	test   esi,esi
c0024084:	74 1c                	je     c00240a2 <ATA::read(unsigned long long, int, void*)+0x48>
c0024086:	50                   	push   eax
c0024087:	50                   	push   eax
c0024088:	6a 00                	push   0x0
c002408a:	56                   	push   esi
c002408b:	52                   	push   edx
c002408c:	53                   	push   ebx
c002408d:	51                   	push   ecx
c002408e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024092:	e8 3b fc ff ff       	call   c0023cd2 <ATA::access(unsigned long long, int, void*, bool)>
c0024097:	83 c4 20             	add    esp,0x20
c002409a:	85 c0                	test   eax,eax
c002409c:	0f 95 c0             	setne  al
c002409f:	0f b6 c0             	movzx  eax,al
c00240a2:	5b                   	pop    ebx
c00240a3:	5e                   	pop    esi
c00240a4:	5f                   	pop    edi
c00240a5:	c3                   	ret    

c00240a6 <ATA::write(unsigned long long, int, void*)>:
c00240a6:	57                   	push   edi
c00240a7:	b8 04 00 00 00       	mov    eax,0x4
c00240ac:	56                   	push   esi
c00240ad:	53                   	push   ebx
c00240ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00240b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00240b6:	8d 7a ff             	lea    edi,[edx-0x1]
c00240b9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00240bd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00240c1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00240c7:	77 25                	ja     c00240ee <ATA::write(unsigned long long, int, void*)+0x48>
c00240c9:	b8 06 00 00 00       	mov    eax,0x6
c00240ce:	85 f6                	test   esi,esi
c00240d0:	74 1c                	je     c00240ee <ATA::write(unsigned long long, int, void*)+0x48>
c00240d2:	50                   	push   eax
c00240d3:	50                   	push   eax
c00240d4:	6a 01                	push   0x1
c00240d6:	56                   	push   esi
c00240d7:	52                   	push   edx
c00240d8:	53                   	push   ebx
c00240d9:	51                   	push   ecx
c00240da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00240de:	e8 ef fb ff ff       	call   c0023cd2 <ATA::access(unsigned long long, int, void*, bool)>
c00240e3:	83 c4 20             	add    esp,0x20
c00240e6:	85 c0                	test   eax,eax
c00240e8:	0f 95 c0             	setne  al
c00240eb:	0f b6 c0             	movzx  eax,al
c00240ee:	5b                   	pop    ebx
c00240ef:	5e                   	pop    esi
c00240f0:	5f                   	pop    edi
c00240f1:	c3                   	ret    

c00240f2 <ATA::detectCHS()>:
c00240f2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00240f6:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00240fc:	c1 e0 06             	shl    eax,0x6
c00240ff:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024105:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002410f:	c7 44 24 04 d7 be 02 c0 	mov    DWORD PTR [esp+0x4],0xc002bed7
c0024117:	e9 b5 5b ff ff       	jmp    c0019cd1 <Krnl::panic(char const*)>

c002411c <ATA::open(int, int, void*)>:
c002411c:	53                   	push   ebx
c002411d:	83 ec 08             	sub    esp,0x8
c0024120:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024124:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024128:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002412c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024132:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024138:	c1 e0 06             	shl    eax,0x6
c002413b:	01 d0                	add    eax,edx
c002413d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024144:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002414a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024151:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002415b:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024161:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024168:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002416f:	75 0c                	jne    c002417d <ATA::open(int, int, void*)+0x61>
c0024171:	83 ec 0c             	sub    esp,0xc
c0024174:	53                   	push   ebx
c0024175:	e8 78 ff ff ff       	call   c00240f2 <ATA::detectCHS()>
c002417a:	83 c4 10             	add    esp,0x10
c002417d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024183:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024189:	c1 e0 06             	shl    eax,0x6
c002418c:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024193:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002419d:	d1 e8                	shr    eax,1
c002419f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00241a5:	6a 04                	push   0x4
c00241a7:	6a 0c                	push   0xc
c00241a9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241b0:	50                   	push   eax
c00241b1:	52                   	push   edx
c00241b2:	e8 01 ec ff ff       	call   c0022db8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241b7:	90                   	nop
c00241b8:	90                   	nop
c00241b9:	6a 00                	push   0x0
c00241bb:	6a 0c                	push   0xc
c00241bd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241c4:	50                   	push   eax
c00241c5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241cb:	e8 e8 eb ff ff       	call   c0022db8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241d0:	83 c4 14             	add    esp,0x14
c00241d3:	53                   	push   ebx
c00241d4:	e8 6f fc fe ff       	call   c0013e48 <PhysicalDisk::startCache()>
c00241d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00241dc:	e8 dd 1e ff ff       	call   c00160be <createPartitionsForDisk(PhysicalDisk*)>
c00241e1:	31 c0                	xor    eax,eax
c00241e3:	83 c4 18             	add    esp,0x18
c00241e6:	5b                   	pop    ebx
c00241e7:	c3                   	ret    

c00241e8 <ATAPI::write(unsigned long long, int, void*)>:
c00241e8:	b8 03 00 00 00       	mov    eax,0x3
c00241ed:	c3                   	ret    

c00241ee <ATAPI::close(int, int, void*)>:
c00241ee:	83 ec 0c             	sub    esp,0xc
c00241f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00241f5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00241fb:	85 c0                	test   eax,eax
c00241fd:	74 0c                	je     c002420b <ATAPI::close(int, int, void*)+0x1d>
c00241ff:	83 ec 0c             	sub    esp,0xc
c0024202:	8b 10                	mov    edx,DWORD PTR [eax]
c0024204:	50                   	push   eax
c0024205:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024208:	83 c4 10             	add    esp,0x10
c002420b:	31 c0                	xor    eax,eax
c002420d:	83 c4 0c             	add    esp,0xc
c0024210:	c3                   	ret    
c0024211:	90                   	nop

c0024212 <ATAPI::ATAPI()>:
c0024212:	83 ec 0c             	sub    esp,0xc
c0024215:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024219:	83 ec 04             	sub    esp,0x4
c002421c:	68 00 08 00 00       	push   0x800
c0024221:	68 11 c0 02 c0       	push   0xc002c011
c0024226:	50                   	push   eax
c0024227:	e8 b4 fb fe ff       	call   c0013de0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002422c:	83 c4 10             	add    esp,0x10
c002422f:	ba 2c bf 02 c0       	mov    edx,0xc002bf2c
c0024234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024238:	89 10                	mov    DWORD PTR [eax],edx
c002423a:	90                   	nop
c002423b:	83 c4 0c             	add    esp,0xc
c002423e:	c3                   	ret    
c002423f:	90                   	nop

c0024240 <ATAPI::readyForCommand()>:
c0024240:	56                   	push   esi
c0024241:	53                   	push   ebx
c0024242:	31 db                	xor    ebx,ebx
c0024244:	50                   	push   eax
c0024245:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024249:	50                   	push   eax
c002424a:	6a 0c                	push   0xc
c002424c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024253:	50                   	push   eax
c0024254:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002425a:	e8 19 ec ff ff       	call   c0022e78 <IDE::read(unsigned char, unsigned char)>
c002425f:	83 c4 10             	add    esp,0x10
c0024262:	a8 88                	test   al,0x88
c0024264:	74 23                	je     c0024289 <ATAPI::readyForCommand()+0x49>
c0024266:	43                   	inc    ebx
c0024267:	83 fb 63             	cmp    ebx,0x63
c002426a:	7e dd                	jle    c0024249 <ATAPI::readyForCommand()+0x9>
c002426c:	51                   	push   ecx
c002426d:	51                   	push   ecx
c002426e:	6a 00                	push   0x0
c0024270:	68 40 42 0f 00       	push   0xf4240
c0024275:	e8 bb 98 ff ff       	call   c001db35 <nanoSleep(unsigned long long)>
c002427a:	83 c4 10             	add    esp,0x10
c002427d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024283:	75 c4                	jne    c0024249 <ATAPI::readyForCommand()+0x9>
c0024285:	31 c0                	xor    eax,eax
c0024287:	eb 02                	jmp    c002428b <ATAPI::readyForCommand()+0x4b>
c0024289:	b0 01                	mov    al,0x1
c002428b:	5a                   	pop    edx
c002428c:	5b                   	pop    ebx
c002428d:	5e                   	pop    esi
c002428e:	c3                   	ret    
c002428f:	90                   	nop

c0024290 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024290:	55                   	push   ebp
c0024291:	57                   	push   edi
c0024292:	56                   	push   esi
c0024293:	53                   	push   ebx
c0024294:	83 ec 20             	sub    esp,0x20
c0024297:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002429b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002429f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00242a3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00242a7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00242ab:	6a 01                	push   0x1
c00242ad:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00242b4:	50                   	push   eax
c00242b5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00242bb:	e8 04 ed ff ff       	call   c0022fc4 <IDE::enableIRQs(unsigned char, bool)>
c00242c0:	5e                   	pop    esi
c00242c1:	58                   	pop    eax
c00242c2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00242c9:	50                   	push   eax
c00242ca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00242d0:	e8 bd ea ff ff       	call   c0022d92 <IDE::prepareInterrupt(unsigned char)>
c00242d5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00242d8:	e8 63 ff ff ff       	call   c0024240 <ATAPI::readyForCommand()>
c00242dd:	83 c4 10             	add    esp,0x10
c00242e0:	84 c0                	test   al,al
c00242e2:	75 0a                	jne    c00242ee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00242e4:	bb 01 00 00 00       	mov    ebx,0x1
c00242e9:	e9 57 02 00 00       	jmp    c0024545 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00242ee:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00242f4:	c1 e0 04             	shl    eax,0x4
c00242f7:	0f b6 c0             	movzx  eax,al
c00242fa:	50                   	push   eax
c00242fb:	6a 06                	push   0x6
c00242fd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024304:	50                   	push   eax
c0024305:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002430b:	e8 a8 ea ff ff       	call   c0022db8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024310:	6a 00                	push   0x0
c0024312:	6a 01                	push   0x1
c0024314:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002431b:	50                   	push   eax
c002431c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024322:	e8 91 ea ff ff       	call   c0022db8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024327:	83 c4 20             	add    esp,0x20
c002432a:	0f b6 c3             	movzx  eax,bl
c002432d:	0f b6 df             	movzx  ebx,bh
c0024330:	50                   	push   eax
c0024331:	6a 04                	push   0x4
c0024333:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002433a:	50                   	push   eax
c002433b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024341:	e8 72 ea ff ff       	call   c0022db8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024346:	53                   	push   ebx
c0024347:	6a 05                	push   0x5
c0024349:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024350:	50                   	push   eax
c0024351:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024357:	e8 5c ea ff ff       	call   c0022db8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002435c:	83 c4 20             	add    esp,0x20
c002435f:	68 a0 00 00 00       	push   0xa0
c0024364:	6a 07                	push   0x7
c0024366:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002436d:	50                   	push   eax
c002436e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024374:	e8 3f ea ff ff       	call   c0022db8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024379:	83 c4 0c             	add    esp,0xc
c002437c:	6a 01                	push   0x1
c002437e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024385:	50                   	push   eax
c0024386:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002438c:	e8 c9 f4 ff ff       	call   c002385a <IDE::polling(unsigned char, unsigned int)>
c0024391:	83 c4 10             	add    esp,0x10
c0024394:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c002439a:	84 c0                	test   al,al
c002439c:	74 23                	je     c00243c1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002439e:	0f b6 d8             	movzx  ebx,al
c00243a1:	0f b6 d2             	movzx  edx,dl
c00243a4:	53                   	push   ebx
c00243a5:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00243ac:	50                   	push   eax
c00243ad:	52                   	push   edx
c00243ae:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243b4:	e8 f1 f3 ff ff       	call   c00237aa <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00243b9:	83 c4 10             	add    esp,0x10
c00243bc:	e9 84 01 00 00       	jmp    c0024545 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00243c1:	0f b6 d2             	movzx  edx,dl
c00243c4:	53                   	push   ebx
c00243c5:	53                   	push   ebx
c00243c6:	52                   	push   edx
c00243c7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243cd:	e8 d4 e9 ff ff       	call   c0022da6 <IDE::getBase(unsigned char)>
c00243d2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00243d6:	b9 06 00 00 00       	mov    ecx,0x6
c00243db:	89 c2                	mov    edx,eax
c00243dd:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00243e0:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00243e4:	83 c4 10             	add    esp,0x10
c00243e7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00243ed:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00243f4:	85 db                	test   ebx,ebx
c00243f6:	0f 84 ec 00 00 00    	je     c00244e8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00243fc:	51                   	push   ecx
c00243fd:	51                   	push   ecx
c00243fe:	52                   	push   edx
c00243ff:	50                   	push   eax
c0024400:	e8 21 eb ff ff       	call   c0022f26 <IDE::waitInterrupt(unsigned char)>
c0024405:	83 c4 10             	add    esp,0x10
c0024408:	84 c0                	test   al,al
c002440a:	0f 84 d4 fe ff ff    	je     c00242e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024410:	56                   	push   esi
c0024411:	56                   	push   esi
c0024412:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024419:	50                   	push   eax
c002441a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024420:	e8 6d e9 ff ff       	call   c0022d92 <IDE::prepareInterrupt(unsigned char)>
c0024425:	83 c4 0c             	add    esp,0xc
c0024428:	6a 04                	push   0x4
c002442a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024431:	50                   	push   eax
c0024432:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024438:	e8 3b ea ff ff       	call   c0022e78 <IDE::read(unsigned char, unsigned char)>
c002443d:	83 c4 0c             	add    esp,0xc
c0024440:	89 c6                	mov    esi,eax
c0024442:	6a 05                	push   0x5
c0024444:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002444b:	50                   	push   eax
c002444c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024452:	e8 21 ea ff ff       	call   c0022e78 <IDE::read(unsigned char, unsigned char)>
c0024457:	89 f1                	mov    ecx,esi
c0024459:	0f b6 c0             	movzx  eax,al
c002445c:	0f b6 f1             	movzx  esi,cl
c002445f:	c1 e0 08             	shl    eax,0x8
c0024462:	09 c6                	or     esi,eax
c0024464:	d1 fe                	sar    esi,1
c0024466:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002446a:	83 c4 10             	add    esp,0x10
c002446d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024472:	74 41                	je     c00244b5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024474:	31 c9                	xor    ecx,ecx
c0024476:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002447c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024483:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024487:	75 0a                	jne    c0024493 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024489:	01 c9                	add    ecx,ecx
c002448b:	01 cd                	add    ebp,ecx
c002448d:	4b                   	dec    ebx
c002448e:	e9 54 ff ff ff       	jmp    c00243e7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024493:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024498:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002449c:	51                   	push   ecx
c002449d:	51                   	push   ecx
c002449e:	52                   	push   edx
c002449f:	50                   	push   eax
c00244a0:	e8 01 e9 ff ff       	call   c0022da6 <IDE::getBase(unsigned char)>
c00244a5:	89 c2                	mov    edx,eax
c00244a7:	89 f0                	mov    eax,esi
c00244a9:	66 ef                	out    dx,ax
c00244ab:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00244af:	83 c4 10             	add    esp,0x10
c00244b2:	41                   	inc    ecx
c00244b3:	eb c1                	jmp    c0024476 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00244b5:	31 f6                	xor    esi,esi
c00244b7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00244bd:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00244c4:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00244c8:	75 06                	jne    c00244d0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00244ca:	01 f6                	add    esi,esi
c00244cc:	01 f5                	add    ebp,esi
c00244ce:	eb bd                	jmp    c002448d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00244d0:	51                   	push   ecx
c00244d1:	51                   	push   ecx
c00244d2:	52                   	push   edx
c00244d3:	50                   	push   eax
c00244d4:	e8 cd e8 ff ff       	call   c0022da6 <IDE::getBase(unsigned char)>
c00244d9:	89 c2                	mov    edx,eax
c00244db:	66 ed                	in     ax,dx
c00244dd:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00244e2:	83 c4 10             	add    esp,0x10
c00244e5:	46                   	inc    esi
c00244e6:	eb cf                	jmp    c00244b7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00244e8:	51                   	push   ecx
c00244e9:	51                   	push   ecx
c00244ea:	52                   	push   edx
c00244eb:	50                   	push   eax
c00244ec:	e8 35 ea ff ff       	call   c0022f26 <IDE::waitInterrupt(unsigned char)>
c00244f1:	83 c4 10             	add    esp,0x10
c00244f4:	84 c0                	test   al,al
c00244f6:	0f 84 e8 fd ff ff    	je     c00242e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00244fc:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024501:	52                   	push   edx
c0024502:	52                   	push   edx
c0024503:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002450a:	50                   	push   eax
c002450b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024511:	e8 7c e8 ff ff       	call   c0022d92 <IDE::prepareInterrupt(unsigned char)>
c0024516:	83 c4 10             	add    esp,0x10
c0024519:	50                   	push   eax
c002451a:	50                   	push   eax
c002451b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024522:	50                   	push   eax
c0024523:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024529:	e8 78 e8 ff ff       	call   c0022da6 <IDE::getBase(unsigned char)>
c002452e:	8d 50 07             	lea    edx,[eax+0x7]
c0024531:	ec                   	in     al,dx
c0024532:	83 c4 10             	add    esp,0x10
c0024535:	a8 88                	test   al,0x88
c0024537:	74 0a                	je     c0024543 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024539:	4b                   	dec    ebx
c002453a:	75 dd                	jne    c0024519 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002453c:	bb 02 00 00 00       	mov    ebx,0x2
c0024541:	eb 02                	jmp    c0024545 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024543:	31 db                	xor    ebx,ebx
c0024545:	83 c4 1c             	add    esp,0x1c
c0024548:	89 d8                	mov    eax,ebx
c002454a:	5b                   	pop    ebx
c002454b:	5e                   	pop    esi
c002454c:	5f                   	pop    edi
c002454d:	5d                   	pop    ebp
c002454e:	c3                   	ret    
c002454f:	90                   	nop

c0024550 <ATAPI::diskRemoved()>:
c0024550:	83 ec 18             	sub    esp,0x18
c0024553:	68 1d c0 02 c0       	push   0xc002c01d
c0024558:	e8 14 e0 fe ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c002455d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024561:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024568:	83 c4 1c             	add    esp,0x1c
c002456b:	c3                   	ret    

c002456c <ATAPI::eject()>:
c002456c:	57                   	push   edi
c002456d:	b9 03 00 00 00       	mov    ecx,0x3
c0024572:	53                   	push   ebx
c0024573:	83 ec 14             	sub    esp,0x14
c0024576:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002457a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002457e:	fc                   	cld    
c002457f:	31 c0                	xor    eax,eax
c0024581:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024583:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024588:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002458d:	50                   	push   eax
c002458e:	50                   	push   eax
c002458f:	6a 00                	push   0x0
c0024591:	6a 00                	push   0x0
c0024593:	6a 00                	push   0x0
c0024595:	6a 02                	push   0x2
c0024597:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002459b:	50                   	push   eax
c002459c:	53                   	push   ebx
c002459d:	e8 ee fc ff ff       	call   c0024290 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00245a2:	83 c4 14             	add    esp,0x14
c00245a5:	53                   	push   ebx
c00245a6:	e8 a5 ff ff ff       	call   c0024550 <ATAPI::diskRemoved()>
c00245ab:	83 c4 24             	add    esp,0x24
c00245ae:	31 c0                	xor    eax,eax
c00245b0:	5b                   	pop    ebx
c00245b1:	5f                   	pop    edi
c00245b2:	c3                   	ret    
c00245b3:	90                   	nop

c00245b4 <ATAPI::diskInserted()>:
c00245b4:	53                   	push   ebx
c00245b5:	83 ec 14             	sub    esp,0x14
c00245b8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00245bc:	68 34 c0 02 c0       	push   0xc002c034
c00245c1:	e8 ab df fe ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c00245c6:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00245cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00245d0:	e8 73 f8 fe ff       	call   c0013e48 <PhysicalDisk::startCache()>
c00245d5:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00245d9:	83 c4 18             	add    esp,0x18
c00245dc:	5b                   	pop    ebx
c00245dd:	e9 dc 1a ff ff       	jmp    c00160be <createPartitionsForDisk(PhysicalDisk*)>

c00245e2 <ATAPI::detectMedia()>:
c00245e2:	56                   	push   esi
c00245e3:	53                   	push   ebx
c00245e4:	83 ec 28             	sub    esp,0x28
c00245e7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00245eb:	6a 0c                	push   0xc
c00245ed:	6a 00                	push   0x0
c00245ef:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00245f3:	56                   	push   esi
c00245f4:	e8 57 c1 fd ff       	call   c0000750 <memset>
c00245f9:	58                   	pop    eax
c00245fa:	5a                   	pop    edx
c00245fb:	6a 00                	push   0x0
c00245fd:	6a 00                	push   0x0
c00245ff:	6a 00                	push   0x0
c0024601:	6a 00                	push   0x0
c0024603:	56                   	push   esi
c0024604:	53                   	push   ebx
c0024605:	e8 86 fc ff ff       	call   c0024290 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002460a:	83 c4 1c             	add    esp,0x1c
c002460d:	6a 0c                	push   0xc
c002460f:	6a 00                	push   0x0
c0024611:	56                   	push   esi
c0024612:	e8 39 c1 fd ff       	call   c0000750 <memset>
c0024617:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002461c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024621:	59                   	pop    ecx
c0024622:	58                   	pop    eax
c0024623:	6a 01                	push   0x1
c0024625:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024629:	50                   	push   eax
c002462a:	6a 00                	push   0x0
c002462c:	6a 12                	push   0x12
c002462e:	56                   	push   esi
c002462f:	53                   	push   ebx
c0024630:	e8 5b fc ff ff       	call   c0024290 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024635:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024639:	83 c4 20             	add    esp,0x20
c002463c:	83 e0 7f             	and    eax,0x7f
c002463f:	3c 70                	cmp    al,0x70
c0024641:	74 15                	je     c0024658 <ATAPI::detectMedia()+0x76>
c0024643:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002464a:	75 0c                	jne    c0024658 <ATAPI::detectMedia()+0x76>
c002464c:	83 ec 0c             	sub    esp,0xc
c002464f:	53                   	push   ebx
c0024650:	e8 5f ff ff ff       	call   c00245b4 <ATAPI::diskInserted()>
c0024655:	83 c4 10             	add    esp,0x10
c0024658:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002465c:	83 e0 0f             	and    eax,0xf
c002465f:	3c 02                	cmp    al,0x2
c0024661:	75 1b                	jne    c002467e <ATAPI::detectMedia()+0x9c>
c0024663:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024668:	75 2d                	jne    c0024697 <ATAPI::detectMedia()+0xb5>
c002466a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024671:	74 24                	je     c0024697 <ATAPI::detectMedia()+0xb5>
c0024673:	83 ec 0c             	sub    esp,0xc
c0024676:	53                   	push   ebx
c0024677:	e8 d4 fe ff ff       	call   c0024550 <ATAPI::diskRemoved()>
c002467c:	eb 16                	jmp    c0024694 <ATAPI::detectMedia()+0xb2>
c002467e:	84 c0                	test   al,al
c0024680:	75 15                	jne    c0024697 <ATAPI::detectMedia()+0xb5>
c0024682:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024689:	75 0c                	jne    c0024697 <ATAPI::detectMedia()+0xb5>
c002468b:	83 ec 0c             	sub    esp,0xc
c002468e:	53                   	push   ebx
c002468f:	e8 20 ff ff ff       	call   c00245b4 <ATAPI::diskInserted()>
c0024694:	83 c4 10             	add    esp,0x10
c0024697:	83 c4 24             	add    esp,0x24
c002469a:	5b                   	pop    ebx
c002469b:	5e                   	pop    esi
c002469c:	c3                   	ret    
c002469d:	90                   	nop

c002469e <ATAPI::open(int, int, void*)>:
c002469e:	53                   	push   ebx
c002469f:	83 ec 08             	sub    esp,0x8
c00246a2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00246a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00246aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00246ae:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00246b4:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00246ba:	c1 e0 06             	shl    eax,0x6
c00246bd:	01 d0                	add    eax,edx
c00246bf:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00246c6:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00246cc:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00246d3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00246dd:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00246e3:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00246ea:	6a 04                	push   0x4
c00246ec:	6a 0c                	push   0xc
c00246ee:	51                   	push   ecx
c00246ef:	52                   	push   edx
c00246f0:	e8 c3 e6 ff ff       	call   c0022db8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246f5:	90                   	nop
c00246f6:	90                   	nop
c00246f7:	6a 00                	push   0x0
c00246f9:	6a 0c                	push   0xc
c00246fb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024702:	50                   	push   eax
c0024703:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024709:	e8 aa e6 ff ff       	call   c0022db8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002470e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024715:	83 c4 14             	add    esp,0x14
c0024718:	53                   	push   ebx
c0024719:	e8 c4 fe ff ff       	call   c00245e2 <ATAPI::detectMedia()>
c002471e:	31 c0                	xor    eax,eax
c0024720:	83 c4 18             	add    esp,0x18
c0024723:	5b                   	pop    ebx
c0024724:	c3                   	ret    
c0024725:	90                   	nop

c0024726 <ATAPI::read(unsigned long long, int, void*)>:
c0024726:	55                   	push   ebp
c0024727:	57                   	push   edi
c0024728:	56                   	push   esi
c0024729:	53                   	push   ebx
c002472a:	83 ec 1c             	sub    esp,0x1c
c002472d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024731:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024735:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024739:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024740:	74 41                	je     c0024783 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024742:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024746:	b9 03 00 00 00       	mov    ecx,0x3
c002474b:	fc                   	cld    
c002474c:	31 c0                	xor    eax,eax
c002474e:	86 fb                	xchg   bl,bh
c0024750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024752:	c1 c3 10             	rol    ebx,0x10
c0024755:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002475a:	89 e8                	mov    eax,ebp
c002475c:	86 fb                	xchg   bl,bh
c002475e:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024762:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024766:	50                   	push   eax
c0024767:	50                   	push   eax
c0024768:	55                   	push   ebp
c0024769:	c1 e5 0b             	shl    ebp,0xb
c002476c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024770:	6a 00                	push   0x0
c0024772:	55                   	push   ebp
c0024773:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024777:	50                   	push   eax
c0024778:	56                   	push   esi
c0024779:	e8 12 fb ff ff       	call   c0024290 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002477e:	83 c4 20             	add    esp,0x20
c0024781:	eb 1a                	jmp    c002479d <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024783:	83 ec 0c             	sub    esp,0xc
c0024786:	56                   	push   esi
c0024787:	e8 56 fe ff ff       	call   c00245e2 <ATAPI::detectMedia()>
c002478c:	83 c4 10             	add    esp,0x10
c002478f:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024796:	75 aa                	jne    c0024742 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024798:	b8 02 00 00 00       	mov    eax,0x2
c002479d:	83 c4 1c             	add    esp,0x1c
c00247a0:	5b                   	pop    ebx
c00247a1:	5e                   	pop    esi
c00247a2:	5f                   	pop    edi
c00247a3:	5d                   	pop    ebp
c00247a4:	c3                   	ret    
c00247a5:	90                   	nop

c00247a6 <SATA::close(int, int, void*)>:
c00247a6:	83 ec 0c             	sub    esp,0xc
c00247a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247ad:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00247b3:	85 c0                	test   eax,eax
c00247b5:	74 0c                	je     c00247c3 <SATA::close(int, int, void*)+0x1d>
c00247b7:	83 ec 0c             	sub    esp,0xc
c00247ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00247bc:	50                   	push   eax
c00247bd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00247c0:	83 c4 10             	add    esp,0x10
c00247c3:	31 c0                	xor    eax,eax
c00247c5:	83 c4 0c             	add    esp,0xc
c00247c8:	c3                   	ret    
c00247c9:	90                   	nop

c00247ca <SATA::powerSaving(PowerSavingLevel)>:
c00247ca:	c3                   	ret    
c00247cb:	90                   	nop

c00247cc <SATA::open(int, int, void*)>:
c00247cc:	56                   	push   esi
c00247cd:	53                   	push   ebx
c00247ce:	50                   	push   eax
c00247cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00247d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00247d7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00247e1:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00247e7:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00247f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00247f5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00247ff:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024805:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002480c:	e8 2c b1 fe ff       	call   c000f93d <Phys::allocatePage()>
c0024811:	89 c6                	mov    esi,eax
c0024813:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024819:	81 c6 00 10 00 00    	add    esi,0x1000
c002481f:	e8 19 b1 fe ff       	call   c000f93d <Phys::allocatePage()>
c0024824:	39 c6                	cmp    esi,eax
c0024826:	74 10                	je     c0024838 <SATA::open(int, int, void*)+0x6c>
c0024828:	83 ec 0c             	sub    esp,0xc
c002482b:	68 5c bf 02 c0       	push   0xc002bf5c
c0024830:	e8 9c 54 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c0024835:	83 c4 10             	add    esp,0x10
c0024838:	83 ec 0c             	sub    esp,0xc
c002483b:	6a 02                	push   0x2
c002483d:	e8 5b c9 fe ff       	call   c001119d <Virt::allocateKernelVirtualPages(int)>
c0024842:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024848:	6a 03                	push   0x3
c002484a:	50                   	push   eax
c002484b:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024851:	ff 35 d0 d7 02 c0    	push   DWORD PTR ds:0xc002d7d0
c0024857:	e8 fe d0 fe ff       	call   c001195a <VAS::mapPage(unsigned long, unsigned long, int)>
c002485c:	83 c4 14             	add    esp,0x14
c002485f:	53                   	push   ebx
c0024860:	e8 e3 f5 fe ff       	call   c0013e48 <PhysicalDisk::startCache()>
c0024865:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024868:	e8 51 18 ff ff       	call   c00160be <createPartitionsForDisk(PhysicalDisk*)>
c002486d:	83 c4 14             	add    esp,0x14
c0024870:	31 c0                	xor    eax,eax
c0024872:	5b                   	pop    ebx
c0024873:	5e                   	pop    esi
c0024874:	c3                   	ret    
c0024875:	90                   	nop

c0024876 <SATA::SATA()>:
c0024876:	83 ec 0c             	sub    esp,0xc
c0024879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002487d:	83 ec 04             	sub    esp,0x4
c0024880:	68 00 02 00 00       	push   0x200
c0024885:	68 70 bf 02 c0       	push   0xc002bf70
c002488a:	50                   	push   eax
c002488b:	e8 50 f5 fe ff       	call   c0013de0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024890:	83 c4 10             	add    esp,0x10
c0024893:	ba e0 bf 02 c0       	mov    edx,0xc002bfe0
c0024898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002489c:	89 10                	mov    DWORD PTR [eax],edx
c002489e:	90                   	nop
c002489f:	83 c4 0c             	add    esp,0xc
c00248a2:	c3                   	ret    
c00248a3:	90                   	nop

c00248a4 <SATA::access(unsigned long long, int, void*, bool)>:
c00248a4:	55                   	push   ebp
c00248a5:	57                   	push   edi
c00248a6:	56                   	push   esi
c00248a7:	53                   	push   ebx
c00248a8:	83 ec 2c             	sub    esp,0x2c
c00248ab:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00248af:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00248b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00248b7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00248bb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00248bf:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00248c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00248c8:	7e 10                	jle    c00248da <SATA::access(unsigned long long, int, void*, bool)+0x36>
c00248ca:	83 ec 0c             	sub    esp,0xc
c00248cd:	68 80 bf 02 c0       	push   0xc002bf80
c00248d2:	e8 fa 53 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c00248d7:	83 c4 10             	add    esp,0x10
c00248da:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00248e0:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00248e6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00248ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00248f0:	89 d0                	mov    eax,edx
c00248f2:	c1 e0 07             	shl    eax,0x7
c00248f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00248f9:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024903:	51                   	push   ecx
c0024904:	8d 42 02             	lea    eax,[edx+0x2]
c0024907:	51                   	push   ecx
c0024908:	c1 e0 07             	shl    eax,0x7
c002490b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002490f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024913:	50                   	push   eax
c0024914:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002491a:	e8 1b f0 ff ff       	call   c002393a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002491f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024923:	83 c4 10             	add    esp,0x10
c0024926:	b8 01 00 00 00       	mov    eax,0x1
c002492b:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024930:	0f 84 cb 01 00 00    	je     c0024b01 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024936:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002493a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002493e:	c1 e0 09             	shl    eax,0x9
c0024941:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024946:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002494a:	74 0e                	je     c002495a <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c002494c:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0024952:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0024956:	89 c1                	mov    ecx,eax
c0024958:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002495a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002495e:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024964:	8d 42 02             	lea    eax,[edx+0x2]
c0024967:	c1 e0 07             	shl    eax,0x7
c002496a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002496e:	8b 00                	mov    eax,DWORD PTR [eax]
c0024970:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024976:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002497c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024980:	c1 e1 05             	shl    ecx,0x5
c0024983:	01 c8                	add    eax,ecx
c0024985:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0024989:	83 e1 01             	and    ecx,0x1
c002498c:	89 ce                	mov    esi,ecx
c002498e:	8a 08                	mov    cl,BYTE PTR [eax]
c0024990:	c1 e6 06             	shl    esi,0x6
c0024993:	83 e1 bf             	and    ecx,0xffffffbf
c0024996:	09 f1                	or     ecx,esi
c0024998:	88 08                	mov    BYTE PTR [eax],cl
c002499a:	8b 08                	mov    ecx,DWORD PTR [eax]
c002499c:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c00249a2:	81 c9 05 00 01 00    	or     ecx,0x10005
c00249a8:	89 08                	mov    DWORD PTR [eax],ecx
c00249aa:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00249b0:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c00249b6:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c00249bc:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c00249bf:	50                   	push   eax
c00249c0:	68 90 00 00 00       	push   0x90
c00249c5:	6a 00                	push   0x0
c00249c7:	56                   	push   esi
c00249c8:	e8 83 bd fd ff       	call   c0000750 <memset>
c00249cd:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00249d3:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c00249d7:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c00249dd:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c00249e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00249e5:	83 c4 10             	add    esp,0x10
c00249e8:	48                   	dec    eax
c00249e9:	25 ff ff 3f 00       	and    eax,0x3fffff
c00249ee:	89 c1                	mov    ecx,eax
c00249f0:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c00249f6:	25 00 00 c0 ff       	and    eax,0xffc00000
c00249fb:	09 c8                	or     eax,ecx
c00249fd:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0024a03:	66 8b 06             	mov    ax,WORD PTR [esi]
c0024a06:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0024a0d:	66 25 00 7f          	and    ax,0x7f00
c0024a11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024a15:	66 0d 27 80          	or     ax,0x8027
c0024a19:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0024a1e:	66 89 06             	mov    WORD PTR [esi],ax
c0024a21:	19 c0                	sbb    eax,eax
c0024a23:	83 e0 f0             	and    eax,0xfffffff0
c0024a26:	83 c0 35             	add    eax,0x35
c0024a29:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0024a2c:	89 e8                	mov    eax,ebp
c0024a2e:	c1 e8 10             	shr    eax,0x10
c0024a31:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0024a34:	89 e8                	mov    eax,ebp
c0024a36:	c1 e8 18             	shr    eax,0x18
c0024a39:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0024a3c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0024a40:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0024a43:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024a47:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0024a4a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024a4e:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0024a52:	89 d6                	mov    esi,edx
c0024a54:	31 c0                	xor    eax,eax
c0024a56:	c1 e6 07             	shl    esi,0x7
c0024a59:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0024a5d:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0024a63:	80 e1 88             	and    cl,0x88
c0024a66:	74 0a                	je     c0024a72 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0024a68:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024a6d:	74 0a                	je     c0024a79 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0024a6f:	40                   	inc    eax
c0024a70:	eb eb                	jmp    c0024a5d <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0024a72:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024a77:	75 0a                	jne    c0024a83 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0024a79:	83 ec 0c             	sub    esp,0xc
c0024a7c:	68 b9 bf 02 c0       	push   0xc002bfb9
c0024a81:	eb 56                	jmp    c0024ad9 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0024a83:	b8 01 00 00 00       	mov    eax,0x1
c0024a88:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024a8c:	c1 e2 07             	shl    edx,0x7
c0024a8f:	d3 e0                	shl    eax,cl
c0024a91:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0024a95:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0024a9b:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0024aa1:	85 c8                	test   eax,ecx
c0024aa3:	74 20                	je     c0024ac5 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0024aa5:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0024aab:	0f ba e1 1e          	bt     ecx,0x1e
c0024aaf:	73 ea                	jae    c0024a9b <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0024ab1:	83 ec 0c             	sub    esp,0xc
c0024ab4:	68 c7 bf 02 c0       	push   0xc002bfc7
c0024ab9:	e8 13 52 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c0024abe:	83 c4 10             	add    esp,0x10
c0024ac1:	31 c0                	xor    eax,eax
c0024ac3:	eb 3c                	jmp    c0024b01 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024ac5:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0024acb:	0f ba e0 1e          	bt     eax,0x1e
c0024acf:	73 17                	jae    c0024ae8 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0024ad1:	83 ec 0c             	sub    esp,0xc
c0024ad4:	68 c7 bf 02 c0       	push   0xc002bfc7
c0024ad9:	e8 f3 51 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c0024ade:	83 c4 10             	add    esp,0x10
c0024ae1:	b8 01 00 00 00       	mov    eax,0x1
c0024ae6:	eb 19                	jmp    c0024b01 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024ae8:	31 c0                	xor    eax,eax
c0024aea:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024aef:	75 10                	jne    c0024b01 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024af1:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0024af7:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0024afb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024aff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024b01:	83 c4 2c             	add    esp,0x2c
c0024b04:	5b                   	pop    ebx
c0024b05:	5e                   	pop    esi
c0024b06:	5f                   	pop    edi
c0024b07:	5d                   	pop    ebp
c0024b08:	c3                   	ret    
c0024b09:	90                   	nop

c0024b0a <SATA::read(unsigned long long, int, void*)>:
c0024b0a:	57                   	push   edi
c0024b0b:	b8 04 00 00 00       	mov    eax,0x4
c0024b10:	56                   	push   esi
c0024b11:	53                   	push   ebx
c0024b12:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024b16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024b1a:	8d 7a ff             	lea    edi,[edx-0x1]
c0024b1d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024b21:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024b25:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024b2b:	77 25                	ja     c0024b52 <SATA::read(unsigned long long, int, void*)+0x48>
c0024b2d:	b8 06 00 00 00       	mov    eax,0x6
c0024b32:	85 f6                	test   esi,esi
c0024b34:	74 1c                	je     c0024b52 <SATA::read(unsigned long long, int, void*)+0x48>
c0024b36:	50                   	push   eax
c0024b37:	50                   	push   eax
c0024b38:	6a 00                	push   0x0
c0024b3a:	56                   	push   esi
c0024b3b:	52                   	push   edx
c0024b3c:	53                   	push   ebx
c0024b3d:	51                   	push   ecx
c0024b3e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024b42:	e8 5d fd ff ff       	call   c00248a4 <SATA::access(unsigned long long, int, void*, bool)>
c0024b47:	83 c4 20             	add    esp,0x20
c0024b4a:	85 c0                	test   eax,eax
c0024b4c:	0f 95 c0             	setne  al
c0024b4f:	0f b6 c0             	movzx  eax,al
c0024b52:	5b                   	pop    ebx
c0024b53:	5e                   	pop    esi
c0024b54:	5f                   	pop    edi
c0024b55:	c3                   	ret    

c0024b56 <SATA::write(unsigned long long, int, void*)>:
c0024b56:	55                   	push   ebp
c0024b57:	b8 04 00 00 00       	mov    eax,0x4
c0024b5c:	57                   	push   edi
c0024b5d:	56                   	push   esi
c0024b5e:	53                   	push   ebx
c0024b5f:	83 ec 0c             	sub    esp,0xc
c0024b62:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024b66:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024b6a:	8d 73 ff             	lea    esi,[ebx-0x1]
c0024b6d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024b71:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024b75:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024b7b:	77 3d                	ja     c0024bba <SATA::write(unsigned long long, int, void*)+0x64>
c0024b7d:	b8 06 00 00 00       	mov    eax,0x6
c0024b82:	85 ed                	test   ebp,ebp
c0024b84:	74 34                	je     c0024bba <SATA::write(unsigned long long, int, void*)+0x64>
c0024b86:	c1 e3 09             	shl    ebx,0x9
c0024b89:	01 eb                	add    ebx,ebp
c0024b8b:	89 d6                	mov    esi,edx
c0024b8d:	89 cf                	mov    edi,ecx
c0024b8f:	83 c6 01             	add    esi,0x1
c0024b92:	83 d7 00             	adc    edi,0x0
c0024b95:	50                   	push   eax
c0024b96:	50                   	push   eax
c0024b97:	6a 01                	push   0x1
c0024b99:	55                   	push   ebp
c0024b9a:	81 c5 00 02 00 00    	add    ebp,0x200
c0024ba0:	6a 01                	push   0x1
c0024ba2:	51                   	push   ecx
c0024ba3:	52                   	push   edx
c0024ba4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024ba8:	e8 f7 fc ff ff       	call   c00248a4 <SATA::access(unsigned long long, int, void*, bool)>
c0024bad:	83 c4 20             	add    esp,0x20
c0024bb0:	89 f2                	mov    edx,esi
c0024bb2:	89 f9                	mov    ecx,edi
c0024bb4:	39 dd                	cmp    ebp,ebx
c0024bb6:	75 d3                	jne    c0024b8b <SATA::write(unsigned long long, int, void*)+0x35>
c0024bb8:	31 c0                	xor    eax,eax
c0024bba:	83 c4 0c             	add    esp,0xc
c0024bbd:	5b                   	pop    ebx
c0024bbe:	5e                   	pop    esi
c0024bbf:	5f                   	pop    edi
c0024bc0:	5d                   	pop    ebp
c0024bc1:	c3                   	ret    

c0024bc2 <SATAPI::write(unsigned long long, int, void*)>:
c0024bc2:	b8 03 00 00 00       	mov    eax,0x3
c0024bc7:	c3                   	ret    

c0024bc8 <SATAPI::close(int, int, void*)>:
c0024bc8:	83 ec 0c             	sub    esp,0xc
c0024bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024bcf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024bd5:	85 c0                	test   eax,eax
c0024bd7:	74 0c                	je     c0024be5 <SATAPI::close(int, int, void*)+0x1d>
c0024bd9:	83 ec 0c             	sub    esp,0xc
c0024bdc:	8b 10                	mov    edx,DWORD PTR [eax]
c0024bde:	50                   	push   eax
c0024bdf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024be2:	83 c4 10             	add    esp,0x10
c0024be5:	31 c0                	xor    eax,eax
c0024be7:	83 c4 0c             	add    esp,0xc
c0024bea:	c3                   	ret    
c0024beb:	90                   	nop

c0024bec <SATAPI::SATAPI()>:
c0024bec:	83 ec 0c             	sub    esp,0xc
c0024bef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024bf3:	83 ec 04             	sub    esp,0x4
c0024bf6:	68 00 08 00 00       	push   0x800
c0024bfb:	68 10 c0 02 c0       	push   0xc002c010
c0024c00:	50                   	push   eax
c0024c01:	e8 da f1 fe ff       	call   c0013de0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024c06:	83 c4 10             	add    esp,0x10
c0024c09:	ba bc c0 02 c0       	mov    edx,0xc002c0bc
c0024c0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c12:	89 10                	mov    DWORD PTR [eax],edx
c0024c14:	90                   	nop
c0024c15:	83 c4 0c             	add    esp,0xc
c0024c18:	c3                   	ret    
c0024c19:	90                   	nop

c0024c1a <SATAPI::diskRemoved()>:
c0024c1a:	83 ec 18             	sub    esp,0x18
c0024c1d:	68 1c c0 02 c0       	push   0xc002c01c
c0024c22:	e8 4a d9 fe ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0024c27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c2b:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024c32:	83 c4 1c             	add    esp,0x1c
c0024c35:	c3                   	ret    

c0024c36 <SATAPI::diskInserted()>:
c0024c36:	53                   	push   ebx
c0024c37:	83 ec 14             	sub    esp,0x14
c0024c3a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024c3e:	68 33 c0 02 c0       	push   0xc002c033
c0024c43:	e8 29 d9 fe ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0024c48:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024c4f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024c52:	e8 f1 f1 fe ff       	call   c0013e48 <PhysicalDisk::startCache()>
c0024c57:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024c5b:	83 c4 18             	add    esp,0x18
c0024c5e:	5b                   	pop    ebx
c0024c5f:	e9 5a 14 ff ff       	jmp    c00160be <createPartitionsForDisk(PhysicalDisk*)>

c0024c64 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024c64:	55                   	push   ebp
c0024c65:	57                   	push   edi
c0024c66:	56                   	push   esi
c0024c67:	53                   	push   ebx
c0024c68:	83 ec 34             	sub    esp,0x34
c0024c6b:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0024c6f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024c73:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0024c77:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024c7b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024c7f:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024c85:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024c8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024c8f:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0024c95:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024c99:	c1 e0 07             	shl    eax,0x7
c0024c9c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024ca0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024ca4:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024cae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024cb2:	8d 58 02             	lea    ebx,[eax+0x2]
c0024cb5:	c1 e3 07             	shl    ebx,0x7
c0024cb8:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0024cbc:	53                   	push   ebx
c0024cbd:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024cc3:	e8 72 ec ff ff       	call   c002393a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024cc8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024ccc:	83 c4 10             	add    esp,0x10
c0024ccf:	b8 01 00 00 00       	mov    eax,0x1
c0024cd4:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024cd9:	0f 84 85 01 00 00    	je     c0024e64 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024cdf:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024ce5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024ce7:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024ced:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024cf3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024cf7:	c1 e1 05             	shl    ecx,0x5
c0024cfa:	01 c8                	add    eax,ecx
c0024cfc:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024cfe:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024d04:	81 c9 25 00 01 00    	or     ecx,0x10025
c0024d0a:	89 08                	mov    DWORD PTR [eax],ecx
c0024d0c:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d12:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024d18:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024d1e:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024d21:	8d 7b 40             	lea    edi,[ebx+0x40]
c0024d24:	50                   	push   eax
c0024d25:	68 90 00 00 00       	push   0x90
c0024d2a:	6a 00                	push   0x0
c0024d2c:	53                   	push   ebx
c0024d2d:	e8 1e ba fd ff       	call   c0000750 <memset>
c0024d32:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0024d36:	b9 0c 00 00 00       	mov    ecx,0xc
c0024d3b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024d3d:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0024d43:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0024d47:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024d4d:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024d51:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024d55:	48                   	dec    eax
c0024d56:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024d5b:	89 c1                	mov    ecx,eax
c0024d5d:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024d63:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024d68:	09 c8                	or     eax,ecx
c0024d6a:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024d70:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024d73:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024d7a:	66 25 00 7f          	and    ax,0x7f00
c0024d7e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0024d82:	66 0d 27 80          	or     ax,0x8027
c0024d86:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0024d8a:	66 89 03             	mov    WORD PTR [ebx],ax
c0024d8d:	89 d0                	mov    eax,edx
c0024d8f:	c1 ea 18             	shr    edx,0x18
c0024d92:	c1 e8 10             	shr    eax,0x10
c0024d95:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0024d98:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024d9b:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0024d9f:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024da2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024da6:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024da9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0024dad:	83 c4 10             	add    esp,0x10
c0024db0:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024db4:	31 c0                	xor    eax,eax
c0024db6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0024dba:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0024dc0:	80 e2 88             	and    dl,0x88
c0024dc3:	74 0a                	je     c0024dcf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0024dc5:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024dca:	74 0a                	je     c0024dd6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0024dcc:	40                   	inc    eax
c0024dcd:	eb eb                	jmp    c0024dba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0024dcf:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024dd4:	75 0f                	jne    c0024de5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0024dd6:	83 ec 0c             	sub    esp,0xc
c0024dd9:	68 b9 bf 02 c0       	push   0xc002bfb9
c0024dde:	e8 ee 4e ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c0024de3:	eb 3f                	jmp    c0024e24 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0024de5:	ba 01 00 00 00       	mov    edx,0x1
c0024dea:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024dee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024df2:	d3 e2                	shl    edx,cl
c0024df4:	c1 e0 07             	shl    eax,0x7
c0024df7:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0024dfd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024e01:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0024e07:	85 ca                	test   edx,ecx
c0024e09:	74 23                	je     c0024e2e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0024e0b:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0024e11:	0f ba e1 1e          	bt     ecx,0x1e
c0024e15:	73 ea                	jae    c0024e01 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0024e17:	83 ec 0c             	sub    esp,0xc
c0024e1a:	68 4b c0 02 c0       	push   0xc002c04b
c0024e1f:	e8 4d d7 fe ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0024e24:	83 c4 10             	add    esp,0x10
c0024e27:	b8 01 00 00 00       	mov    eax,0x1
c0024e2c:	eb 36                	jmp    c0024e64 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024e2e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0024e34:	0f ba e0 1e          	bt     eax,0x1e
c0024e38:	73 0a                	jae    c0024e44 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0024e3a:	83 ec 0c             	sub    esp,0xc
c0024e3d:	68 5e c0 02 c0       	push   0xc002c05e
c0024e42:	eb db                	jmp    c0024e1f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0024e44:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0024e49:	74 17                	je     c0024e62 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024e4b:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0024e50:	74 10                	je     c0024e62 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024e52:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0024e58:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0024e5c:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0024e60:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024e62:	31 c0                	xor    eax,eax
c0024e64:	83 c4 2c             	add    esp,0x2c
c0024e67:	5b                   	pop    ebx
c0024e68:	5e                   	pop    esi
c0024e69:	5f                   	pop    edi
c0024e6a:	5d                   	pop    ebp
c0024e6b:	c3                   	ret    

c0024e6c <SATAPI::eject()>:
c0024e6c:	57                   	push   edi
c0024e6d:	b9 03 00 00 00       	mov    ecx,0x3
c0024e72:	53                   	push   ebx
c0024e73:	83 ec 14             	sub    esp,0x14
c0024e76:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024e7a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024e7e:	fc                   	cld    
c0024e7f:	31 c0                	xor    eax,eax
c0024e81:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024e83:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024e88:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024e8d:	50                   	push   eax
c0024e8e:	6a 00                	push   0x0
c0024e90:	6a 00                	push   0x0
c0024e92:	6a 00                	push   0x0
c0024e94:	6a 00                	push   0x0
c0024e96:	6a 02                	push   0x2
c0024e98:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024e9c:	50                   	push   eax
c0024e9d:	53                   	push   ebx
c0024e9e:	e8 c1 fd ff ff       	call   c0024c64 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024ea3:	83 c4 14             	add    esp,0x14
c0024ea6:	53                   	push   ebx
c0024ea7:	e8 6e fd ff ff       	call   c0024c1a <SATAPI::diskRemoved()>
c0024eac:	83 c4 24             	add    esp,0x24
c0024eaf:	31 c0                	xor    eax,eax
c0024eb1:	5b                   	pop    ebx
c0024eb2:	5f                   	pop    edi
c0024eb3:	c3                   	ret    

c0024eb4 <SATAPI::detectMedia()>:
c0024eb4:	56                   	push   esi
c0024eb5:	53                   	push   ebx
c0024eb6:	83 ec 28             	sub    esp,0x28
c0024eb9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024ebd:	6a 0c                	push   0xc
c0024ebf:	6a 00                	push   0x0
c0024ec1:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024ec5:	56                   	push   esi
c0024ec6:	e8 85 b8 fd ff       	call   c0000750 <memset>
c0024ecb:	83 c4 0c             	add    esp,0xc
c0024ece:	6a 00                	push   0x0
c0024ed0:	6a 00                	push   0x0
c0024ed2:	6a 00                	push   0x0
c0024ed4:	6a 00                	push   0x0
c0024ed6:	6a 00                	push   0x0
c0024ed8:	56                   	push   esi
c0024ed9:	53                   	push   ebx
c0024eda:	e8 85 fd ff ff       	call   c0024c64 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024edf:	83 c4 1c             	add    esp,0x1c
c0024ee2:	6a 0c                	push   0xc
c0024ee4:	6a 00                	push   0x0
c0024ee6:	56                   	push   esi
c0024ee7:	e8 64 b8 fd ff       	call   c0000750 <memset>
c0024eec:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024ef1:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024ef6:	83 c4 0c             	add    esp,0xc
c0024ef9:	6a 01                	push   0x1
c0024efb:	8d 44 24 16          	lea    eax,[esp+0x16]
c0024eff:	50                   	push   eax
c0024f00:	6a 00                	push   0x0
c0024f02:	6a 00                	push   0x0
c0024f04:	6a 12                	push   0x12
c0024f06:	56                   	push   esi
c0024f07:	53                   	push   ebx
c0024f08:	e8 57 fd ff ff       	call   c0024c64 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024f0d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024f11:	83 c4 20             	add    esp,0x20
c0024f14:	83 e0 7f             	and    eax,0x7f
c0024f17:	3c 70                	cmp    al,0x70
c0024f19:	74 15                	je     c0024f30 <SATAPI::detectMedia()+0x7c>
c0024f1b:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024f22:	75 0c                	jne    c0024f30 <SATAPI::detectMedia()+0x7c>
c0024f24:	83 ec 0c             	sub    esp,0xc
c0024f27:	53                   	push   ebx
c0024f28:	e8 09 fd ff ff       	call   c0024c36 <SATAPI::diskInserted()>
c0024f2d:	83 c4 10             	add    esp,0x10
c0024f30:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024f34:	83 e0 0f             	and    eax,0xf
c0024f37:	3c 02                	cmp    al,0x2
c0024f39:	75 1b                	jne    c0024f56 <SATAPI::detectMedia()+0xa2>
c0024f3b:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024f40:	75 2d                	jne    c0024f6f <SATAPI::detectMedia()+0xbb>
c0024f42:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024f49:	74 24                	je     c0024f6f <SATAPI::detectMedia()+0xbb>
c0024f4b:	83 ec 0c             	sub    esp,0xc
c0024f4e:	53                   	push   ebx
c0024f4f:	e8 c6 fc ff ff       	call   c0024c1a <SATAPI::diskRemoved()>
c0024f54:	eb 16                	jmp    c0024f6c <SATAPI::detectMedia()+0xb8>
c0024f56:	84 c0                	test   al,al
c0024f58:	75 15                	jne    c0024f6f <SATAPI::detectMedia()+0xbb>
c0024f5a:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024f61:	75 0c                	jne    c0024f6f <SATAPI::detectMedia()+0xbb>
c0024f63:	83 ec 0c             	sub    esp,0xc
c0024f66:	53                   	push   ebx
c0024f67:	e8 ca fc ff ff       	call   c0024c36 <SATAPI::diskInserted()>
c0024f6c:	83 c4 10             	add    esp,0x10
c0024f6f:	83 c4 24             	add    esp,0x24
c0024f72:	5b                   	pop    ebx
c0024f73:	5e                   	pop    esi
c0024f74:	c3                   	ret    
c0024f75:	90                   	nop

c0024f76 <SATAPI::open(int, int, void*)>:
c0024f76:	56                   	push   esi
c0024f77:	53                   	push   ebx
c0024f78:	50                   	push   eax
c0024f79:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024f7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024f81:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024f8b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024f91:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024f9b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024f9f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024fa9:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024faf:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024fb6:	e8 82 a9 fe ff       	call   c000f93d <Phys::allocatePage()>
c0024fbb:	89 c6                	mov    esi,eax
c0024fbd:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024fc3:	81 c6 00 10 00 00    	add    esi,0x1000
c0024fc9:	e8 6f a9 fe ff       	call   c000f93d <Phys::allocatePage()>
c0024fce:	39 c6                	cmp    esi,eax
c0024fd0:	74 10                	je     c0024fe2 <SATAPI::open(int, int, void*)+0x6c>
c0024fd2:	83 ec 0c             	sub    esp,0xc
c0024fd5:	68 73 c0 02 c0       	push   0xc002c073
c0024fda:	e8 f2 4c ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c0024fdf:	83 c4 10             	add    esp,0x10
c0024fe2:	83 ec 0c             	sub    esp,0xc
c0024fe5:	6a 02                	push   0x2
c0024fe7:	e8 b1 c1 fe ff       	call   c001119d <Virt::allocateKernelVirtualPages(int)>
c0024fec:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0024ff2:	6a 03                	push   0x3
c0024ff4:	50                   	push   eax
c0024ff5:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024ffb:	ff 35 d0 d7 02 c0    	push   DWORD PTR ds:0xc002d7d0
c0025001:	e8 54 c9 fe ff       	call   c001195a <VAS::mapPage(unsigned long, unsigned long, int)>
c0025006:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002500d:	83 c4 14             	add    esp,0x14
c0025010:	53                   	push   ebx
c0025011:	e8 9e fe ff ff       	call   c0024eb4 <SATAPI::detectMedia()>
c0025016:	83 c4 14             	add    esp,0x14
c0025019:	31 c0                	xor    eax,eax
c002501b:	5b                   	pop    ebx
c002501c:	5e                   	pop    esi
c002501d:	c3                   	ret    

c002501e <SATAPI::read(unsigned long long, int, void*)>:
c002501e:	55                   	push   ebp
c002501f:	57                   	push   edi
c0025020:	56                   	push   esi
c0025021:	53                   	push   ebx
c0025022:	83 ec 1c             	sub    esp,0x1c
c0025025:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025029:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002502d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025031:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025038:	74 19                	je     c0025053 <SATAPI::read(unsigned long long, int, void*)+0x35>
c002503a:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c002503f:	7e 2e                	jle    c002506f <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025041:	83 ec 0c             	sub    esp,0xc
c0025044:	68 89 c0 02 c0       	push   0xc002c089
c0025049:	e8 83 4c ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c002504e:	83 c4 10             	add    esp,0x10
c0025051:	eb 1c                	jmp    c002506f <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025053:	83 ec 0c             	sub    esp,0xc
c0025056:	55                   	push   ebp
c0025057:	e8 58 fe ff ff       	call   c0024eb4 <SATAPI::detectMedia()>
c002505c:	83 c4 10             	add    esp,0x10
c002505f:	b8 02 00 00 00       	mov    eax,0x2
c0025064:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002506b:	75 cd                	jne    c002503a <SATAPI::read(unsigned long long, int, void*)+0x1c>
c002506d:	eb 49                	jmp    c00250b8 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c002506f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025073:	b9 03 00 00 00       	mov    ecx,0x3
c0025078:	fc                   	cld    
c0025079:	31 c0                	xor    eax,eax
c002507b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002507d:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025082:	89 d8                	mov    eax,ebx
c0025084:	86 e0                	xchg   al,ah
c0025086:	c1 c0 10             	rol    eax,0x10
c0025089:	86 e0                	xchg   al,ah
c002508b:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c002508f:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025093:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025097:	50                   	push   eax
c0025098:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002509c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00250a0:	56                   	push   esi
c00250a1:	53                   	push   ebx
c00250a2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00250a6:	c1 e0 0b             	shl    eax,0xb
c00250a9:	50                   	push   eax
c00250aa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00250ae:	50                   	push   eax
c00250af:	55                   	push   ebp
c00250b0:	e8 af fb ff ff       	call   c0024c64 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00250b5:	83 c4 20             	add    esp,0x20
c00250b8:	83 c4 1c             	add    esp,0x1c
c00250bb:	5b                   	pop    ebx
c00250bc:	5e                   	pop    esi
c00250bd:	5f                   	pop    edi
c00250be:	5d                   	pop    ebp
c00250bf:	c3                   	ret    

c00250c0 <AVX::open(int, int, void*)>:
c00250c0:	83 ec 0c             	sub    esp,0xc
c00250c3:	e8 40 11 00 00       	call   c0026208 <avxInit>
c00250c8:	b8 00 00 00 00       	mov    eax,0x0
c00250cd:	83 c4 0c             	add    esp,0xc
c00250d0:	c3                   	ret    
c00250d1:	90                   	nop

c00250d2 <AVX::close(int, int, void*)>:
c00250d2:	83 ec 0c             	sub    esp,0xc
c00250d5:	e8 2f 11 00 00       	call   c0026209 <avxClose>
c00250da:	b8 00 00 00 00       	mov    eax,0x0
c00250df:	83 c4 0c             	add    esp,0xc
c00250e2:	c3                   	ret    
c00250e3:	90                   	nop

c00250e4 <AVX::available()>:
c00250e4:	83 ec 0c             	sub    esp,0xc
c00250e7:	e8 14 11 00 00       	call   c0026200 <avxDetect>
c00250ec:	85 c0                	test   eax,eax
c00250ee:	0f 95 c0             	setne  al
c00250f1:	83 c4 0c             	add    esp,0xc
c00250f4:	c3                   	ret    
c00250f5:	90                   	nop

c00250f6 <AVX::save(void*)>:
c00250f6:	83 ec 0c             	sub    esp,0xc
c00250f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00250fd:	83 ec 0c             	sub    esp,0xc
c0025100:	50                   	push   eax
c0025101:	e8 00 11 00 00       	call   c0026206 <avxSave>
c0025106:	83 c4 10             	add    esp,0x10
c0025109:	90                   	nop
c002510a:	83 c4 0c             	add    esp,0xc
c002510d:	c3                   	ret    

c002510e <AVX::load(void*)>:
c002510e:	83 ec 0c             	sub    esp,0xc
c0025111:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025115:	83 ec 0c             	sub    esp,0xc
c0025118:	50                   	push   eax
c0025119:	e8 e9 10 00 00       	call   c0026207 <avxLoad>
c002511e:	83 c4 10             	add    esp,0x10
c0025121:	90                   	nop
c0025122:	83 c4 0c             	add    esp,0xc
c0025125:	c3                   	ret    

c0025126 <AVX::AVX()>:
c0025126:	83 ec 0c             	sub    esp,0xc
c0025129:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002512d:	83 ec 08             	sub    esp,0x8
c0025130:	68 ec c0 02 c0       	push   0xc002c0ec
c0025135:	50                   	push   eax
c0025136:	e8 83 ed fe ff       	call   c0013ebe <FPU::FPU(char const*)>
c002513b:	83 c4 10             	add    esp,0x10
c002513e:	ba fc c0 02 c0       	mov    edx,0xc002c0fc
c0025143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025147:	89 10                	mov    DWORD PTR [eax],edx
c0025149:	90                   	nop
c002514a:	83 c4 0c             	add    esp,0xc
c002514d:	c3                   	ret    

c002514e <MMX::available()>:
c002514e:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c0025153:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025159:	83 e0 20             	and    eax,0x20
c002515c:	84 c0                	test   al,al
c002515e:	0f 95 c0             	setne  al
c0025161:	c3                   	ret    

c0025162 <MMX::open(int, int, void*)>:
c0025162:	83 ec 0c             	sub    esp,0xc
c0025165:	e8 28 11 00 00       	call   c0026292 <x87Init>
c002516a:	b8 00 00 00 00       	mov    eax,0x0
c002516f:	83 c4 0c             	add    esp,0xc
c0025172:	c3                   	ret    
c0025173:	90                   	nop

c0025174 <MMX::close(int, int, void*)>:
c0025174:	83 ec 0c             	sub    esp,0xc
c0025177:	e8 30 11 00 00       	call   c00262ac <x87Close>
c002517c:	b8 00 00 00 00       	mov    eax,0x0
c0025181:	83 c4 0c             	add    esp,0xc
c0025184:	c3                   	ret    
c0025185:	90                   	nop

c0025186 <MMX::save(void*)>:
c0025186:	83 ec 0c             	sub    esp,0xc
c0025189:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002518d:	83 ec 0c             	sub    esp,0xc
c0025190:	50                   	push   eax
c0025191:	e8 eb 10 00 00       	call   c0026281 <x87Save>
c0025196:	83 c4 10             	add    esp,0x10
c0025199:	90                   	nop
c002519a:	83 c4 0c             	add    esp,0xc
c002519d:	c3                   	ret    

c002519e <MMX::load(void*)>:
c002519e:	83 ec 0c             	sub    esp,0xc
c00251a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00251a5:	83 ec 0c             	sub    esp,0xc
c00251a8:	50                   	push   eax
c00251a9:	e8 dc 10 00 00       	call   c002628a <x87Load>
c00251ae:	83 c4 10             	add    esp,0x10
c00251b1:	90                   	nop
c00251b2:	83 c4 0c             	add    esp,0xc
c00251b5:	c3                   	ret    

c00251b6 <MMX::MMX()>:
c00251b6:	83 ec 0c             	sub    esp,0xc
c00251b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251bd:	83 ec 08             	sub    esp,0x8
c00251c0:	68 2c c1 02 c0       	push   0xc002c12c
c00251c5:	50                   	push   eax
c00251c6:	e8 f3 ec fe ff       	call   c0013ebe <FPU::FPU(char const*)>
c00251cb:	83 c4 10             	add    esp,0x10
c00251ce:	ba 3c c1 02 c0       	mov    edx,0xc002c13c
c00251d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251d7:	89 10                	mov    DWORD PTR [eax],edx
c00251d9:	90                   	nop
c00251da:	83 c4 0c             	add    esp,0xc
c00251dd:	c3                   	ret    

c00251de <SSE::open(int, int, void*)>:
c00251de:	83 ec 0c             	sub    esp,0xc
c00251e1:	e8 5e 10 00 00       	call   c0026244 <sseInit>
c00251e6:	b8 00 00 00 00       	mov    eax,0x0
c00251eb:	83 c4 0c             	add    esp,0xc
c00251ee:	c3                   	ret    
c00251ef:	90                   	nop

c00251f0 <SSE::close(int, int, void*)>:
c00251f0:	83 ec 0c             	sub    esp,0xc
c00251f3:	e8 5c 10 00 00       	call   c0026254 <sseClose>
c00251f8:	b8 00 00 00 00       	mov    eax,0x0
c00251fd:	83 c4 0c             	add    esp,0xc
c0025200:	c3                   	ret    
c0025201:	90                   	nop

c0025202 <SSE::available()>:
c0025202:	83 ec 1c             	sub    esp,0x1c
c0025205:	e8 16 10 00 00       	call   c0026220 <absolutelyNoChanceInHell>
c002520a:	85 c0                	test   eax,eax
c002520c:	0f 95 c0             	setne  al
c002520f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025213:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025217:	83 c4 1c             	add    esp,0x1c
c002521a:	c3                   	ret    
c002521b:	90                   	nop

c002521c <SSE::save(void*)>:
c002521c:	83 ec 0c             	sub    esp,0xc
c002521f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025223:	83 ec 0c             	sub    esp,0xc
c0025226:	50                   	push   eax
c0025227:	e8 0c 10 00 00       	call   c0026238 <sseSave>
c002522c:	83 c4 10             	add    esp,0x10
c002522f:	90                   	nop
c0025230:	83 c4 0c             	add    esp,0xc
c0025233:	c3                   	ret    

c0025234 <SSE::load(void*)>:
c0025234:	83 ec 0c             	sub    esp,0xc
c0025237:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002523b:	83 ec 0c             	sub    esp,0xc
c002523e:	50                   	push   eax
c002523f:	e8 fa 0f 00 00       	call   c002623e <sseLoad>
c0025244:	83 c4 10             	add    esp,0x10
c0025247:	90                   	nop
c0025248:	83 c4 0c             	add    esp,0xc
c002524b:	c3                   	ret    

c002524c <SSE::SSE()>:
c002524c:	83 ec 0c             	sub    esp,0xc
c002524f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025253:	83 ec 08             	sub    esp,0x8
c0025256:	68 6c c1 02 c0       	push   0xc002c16c
c002525b:	50                   	push   eax
c002525c:	e8 5d ec fe ff       	call   c0013ebe <FPU::FPU(char const*)>
c0025261:	83 c4 10             	add    esp,0x10
c0025264:	ba 7c c1 02 c0       	mov    edx,0xc002c17c
c0025269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002526d:	89 10                	mov    DWORD PTR [eax],edx
c002526f:	90                   	nop
c0025270:	83 c4 0c             	add    esp,0xc
c0025273:	c3                   	ret    

c0025274 <x87::open(int, int, void*)>:
c0025274:	83 ec 0c             	sub    esp,0xc
c0025277:	e8 16 10 00 00       	call   c0026292 <x87Init>
c002527c:	b8 00 00 00 00       	mov    eax,0x0
c0025281:	83 c4 0c             	add    esp,0xc
c0025284:	c3                   	ret    
c0025285:	90                   	nop

c0025286 <x87::close(int, int, void*)>:
c0025286:	83 ec 0c             	sub    esp,0xc
c0025289:	e8 1e 10 00 00       	call   c00262ac <x87Close>
c002528e:	b8 00 00 00 00       	mov    eax,0x0
c0025293:	83 c4 0c             	add    esp,0xc
c0025296:	c3                   	ret    
c0025297:	90                   	nop

c0025298 <x87::available()>:
c0025298:	83 ec 0c             	sub    esp,0xc
c002529b:	e8 c6 0f 00 00       	call   c0026266 <x87Detect>
c00252a0:	85 c0                	test   eax,eax
c00252a2:	0f 95 c0             	setne  al
c00252a5:	83 c4 0c             	add    esp,0xc
c00252a8:	c3                   	ret    
c00252a9:	90                   	nop

c00252aa <x87::save(void*)>:
c00252aa:	83 ec 0c             	sub    esp,0xc
c00252ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00252b1:	83 ec 0c             	sub    esp,0xc
c00252b4:	50                   	push   eax
c00252b5:	e8 c7 0f 00 00       	call   c0026281 <x87Save>
c00252ba:	83 c4 10             	add    esp,0x10
c00252bd:	90                   	nop
c00252be:	83 c4 0c             	add    esp,0xc
c00252c1:	c3                   	ret    

c00252c2 <x87::load(void*)>:
c00252c2:	83 ec 0c             	sub    esp,0xc
c00252c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00252c9:	83 ec 0c             	sub    esp,0xc
c00252cc:	50                   	push   eax
c00252cd:	e8 b8 0f 00 00       	call   c002628a <x87Load>
c00252d2:	83 c4 10             	add    esp,0x10
c00252d5:	90                   	nop
c00252d6:	83 c4 0c             	add    esp,0xc
c00252d9:	c3                   	ret    

c00252da <x87::x87()>:
c00252da:	83 ec 0c             	sub    esp,0xc
c00252dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252e1:	83 ec 08             	sub    esp,0x8
c00252e4:	68 ac c1 02 c0       	push   0xc002c1ac
c00252e9:	50                   	push   eax
c00252ea:	e8 cf eb fe ff       	call   c0013ebe <FPU::FPU(char const*)>
c00252ef:	83 c4 10             	add    esp,0x10
c00252f2:	ba bc c1 02 c0       	mov    edx,0xc002c1bc
c00252f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252fb:	89 10                	mov    DWORD PTR [eax],edx
c00252fd:	90                   	nop
c00252fe:	83 c4 0c             	add    esp,0xc
c0025301:	c3                   	ret    

c0025302 <APIC::disable()>:
c0025302:	90                   	nop
c0025303:	c3                   	ret    

c0025304 <APIC::close(int, int, void*)>:
c0025304:	55                   	push   ebp
c0025305:	89 e5                	mov    ebp,esp
c0025307:	83 ec 08             	sub    esp,0x8
c002530a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002530d:	8b 00                	mov    eax,DWORD PTR [eax]
c002530f:	83 c0 3c             	add    eax,0x3c
c0025312:	8b 00                	mov    eax,DWORD PTR [eax]
c0025314:	83 ec 0c             	sub    esp,0xc
c0025317:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002531a:	ff d0                	call   eax
c002531c:	83 c4 10             	add    esp,0x10
c002531f:	b8 00 00 00 00       	mov    eax,0x0
c0025324:	c9                   	leave  
c0025325:	c3                   	ret    

c0025326 <IOAPIC::close(int, int, void*)>:
c0025326:	b8 00 00 00 00       	mov    eax,0x0
c002532b:	c3                   	ret    

c002532c <APIC::io_wait()>:
c002532c:	eb 00                	jmp    c002532e <APIC::io_wait()+0x2>
c002532e:	eb 00                	jmp    c0025330 <APIC::io_wait()+0x4>
c0025330:	90                   	nop
c0025331:	c3                   	ret    

c0025332 <APIC::getBase()>:
c0025332:	55                   	push   ebp
c0025333:	89 e5                	mov    ebp,esp
c0025335:	83 ec 18             	sub    esp,0x18
c0025338:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c002533d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025343:	83 e0 08             	and    eax,0x8
c0025346:	84 c0                	test   al,al
c0025348:	75 07                	jne    c0025351 <APIC::getBase()+0x1f>
c002534a:	b8 00 00 00 00       	mov    eax,0x0
c002534f:	eb 21                	jmp    c0025372 <APIC::getBase()+0x40>
c0025351:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c0025356:	83 ec 08             	sub    esp,0x8
c0025359:	6a 1b                	push   0x1b
c002535b:	50                   	push   eax
c002535c:	e8 df 97 fe ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c0025361:	83 c4 10             	add    esp,0x10
c0025364:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025367:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002536a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002536d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025372:	c9                   	leave  
c0025373:	c3                   	ret    

c0025374 <APIC::eoi(unsigned char)>:
c0025374:	55                   	push   ebp
c0025375:	89 e5                	mov    ebp,esp
c0025377:	83 ec 28             	sub    esp,0x28
c002537a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002537d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025380:	83 ec 0c             	sub    esp,0xc
c0025383:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025386:	e8 a7 ff ff ff       	call   c0025332 <APIC::getBase()>
c002538b:	83 c4 10             	add    esp,0x10
c002538e:	05 b0 00 00 00       	add    eax,0xb0
c0025393:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025396:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025399:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002539f:	90                   	nop
c00253a0:	c9                   	leave  
c00253a1:	c3                   	ret    

c00253a2 <APIC::open(int, int, void*)>:
c00253a2:	55                   	push   ebp
c00253a3:	89 e5                	mov    ebp,esp
c00253a5:	57                   	push   edi
c00253a6:	56                   	push   esi
c00253a7:	53                   	push   ebx
c00253a8:	83 ec 2c             	sub    esp,0x2c
c00253ab:	83 ec 0c             	sub    esp,0xc
c00253ae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00253b1:	e8 7c ff ff ff       	call   c0025332 <APIC::getBase()>
c00253b6:	83 c4 10             	add    esp,0x10
c00253b9:	89 c2                	mov    edx,eax
c00253bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00253be:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00253c4:	0f b6 f8             	movzx  edi,al
c00253c7:	89 d0                	mov    eax,edx
c00253c9:	ba 00 00 00 00       	mov    edx,0x0
c00253ce:	89 c1                	mov    ecx,eax
c00253d0:	80 e5 ff             	and    ch,0xff
c00253d3:	89 cb                	mov    ebx,ecx
c00253d5:	0f b6 f2             	movzx  esi,dl
c00253d8:	89 d8                	mov    eax,ebx
c00253da:	89 f2                	mov    edx,esi
c00253dc:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00253df:	8d 5f 08             	lea    ebx,[edi+0x8]
c00253e2:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00253e6:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00253ea:	83 e0 00             	and    eax,0x0
c00253ed:	09 d0                	or     eax,edx
c00253ef:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00253f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00253f6:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00253fc:	8d 50 01             	lea    edx,[eax+0x1]
c00253ff:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025402:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025408:	0f b6 d0             	movzx  edx,al
c002540b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002540e:	83 c2 08             	add    edx,0x8
c0025411:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025415:	0f b6 c9             	movzx  ecx,cl
c0025418:	81 c9 00 00 01 00    	or     ecx,0x10000
c002541e:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025422:	83 ec 0c             	sub    esp,0xc
c0025425:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025428:	e8 05 ff ff ff       	call   c0025332 <APIC::getBase()>
c002542d:	83 c4 10             	add    esp,0x10
c0025430:	05 f0 00 00 00       	add    eax,0xf0
c0025435:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025438:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002543b:	8b 00                	mov    eax,DWORD PTR [eax]
c002543d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025440:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025447:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c002544e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025451:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025454:	89 10                	mov    DWORD PTR [eax],edx
c0025456:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c002545d:	a1 30 ff 02 c0       	mov    eax,ds:0xc002ff30
c0025462:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025465:	7d 7c                	jge    c00254e3 <APIC::open(int, int, void*)+0x141>
c0025467:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002546a:	8b 04 85 40 ff 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd00c0]
c0025471:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025474:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025477:	8b 04 85 40 ff 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd00c0]
c002547e:	c1 e8 08             	shr    eax,0x8
c0025481:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025485:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025488:	8b 04 85 40 ff 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd00c0]
c002548f:	c1 e8 18             	shr    eax,0x18
c0025492:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025495:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025499:	75 40                	jne    c00254db <APIC::open(int, int, void*)+0x139>
c002549b:	83 ec 0c             	sub    esp,0xc
c002549e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00254a1:	e8 8c fe ff ff       	call   c0025332 <APIC::getBase()>
c00254a6:	83 c4 10             	add    esp,0x10
c00254a9:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00254ad:	75 07                	jne    c00254b6 <APIC::open(int, int, void*)+0x114>
c00254af:	ba 60 03 00 00       	mov    edx,0x360
c00254b4:	eb 05                	jmp    c00254bb <APIC::open(int, int, void*)+0x119>
c00254b6:	ba 50 03 00 00       	mov    edx,0x350
c00254bb:	01 d0                	add    eax,edx
c00254bd:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00254c0:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00254c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00254c5:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00254c8:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00254cf:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00254d3:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00254d6:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00254d9:	89 10                	mov    DWORD PTR [eax],edx
c00254db:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00254de:	e9 7a ff ff ff       	jmp    c002545d <APIC::open(int, int, void*)+0xbb>
c00254e3:	b8 00 00 00 00       	mov    eax,0x0
c00254e8:	8d 65 f4             	lea    esp,[ebp-0xc]
c00254eb:	5b                   	pop    ebx
c00254ec:	5e                   	pop    esi
c00254ed:	5f                   	pop    edi
c00254ee:	5d                   	pop    ebp
c00254ef:	c3                   	ret    

c00254f0 <IOAPIC::IOAPIC()>:
c00254f0:	83 ec 0c             	sub    esp,0xc
c00254f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254f7:	83 ec 08             	sub    esp,0x8
c00254fa:	68 ec c1 02 c0       	push   0xc002c1ec
c00254ff:	50                   	push   eax
c0025500:	e8 a9 e6 fe ff       	call   c0013bae <Device::Device(char const*)>
c0025505:	83 c4 10             	add    esp,0x10
c0025508:	ba 14 c3 02 c0       	mov    edx,0xc002c314
c002550d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025511:	89 10                	mov    DWORD PTR [eax],edx
c0025513:	90                   	nop
c0025514:	83 c4 0c             	add    esp,0xc
c0025517:	c3                   	ret    

c0025518 <APIC::APIC()>:
c0025518:	53                   	push   ebx
c0025519:	83 ec 18             	sub    esp,0x18
c002551c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025520:	83 ec 08             	sub    esp,0x8
c0025523:	68 f4 c1 02 c0       	push   0xc002c1f4
c0025528:	50                   	push   eax
c0025529:	e8 ea ed fe ff       	call   c0014318 <InterruptController::InterruptController(char const*)>
c002552e:	83 c4 10             	add    esp,0x10
c0025531:	ba cc c2 02 c0       	mov    edx,0xc002c2cc
c0025536:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002553a:	89 10                	mov    DWORD PTR [eax],edx
c002553c:	a0 00 1a 03 c0       	mov    al,ds:0xc0031a00
c0025541:	83 f0 01             	xor    eax,0x1
c0025544:	84 c0                	test   al,al
c0025546:	0f 84 a1 00 00 00    	je     c00255ed <APIC::APIC()+0xd5>
c002554c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025551:	a0 e0 ff 02 c0       	mov    al,ds:0xc002ffe0
c0025556:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c002555a:	0f 83 86 00 00 00    	jae    c00255e6 <APIC::APIC()+0xce>
c0025560:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025568:	83 ec 0c             	sub    esp,0xc
c002556b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002556f:	e8 25 a0 fe ff       	call   c000f599 <malloc>
c0025574:	83 c4 10             	add    esp,0x10
c0025577:	89 c3                	mov    ebx,eax
c0025579:	83 ec 0c             	sub    esp,0xc
c002557c:	53                   	push   ebx
c002557d:	e8 6e ff ff ff       	call   c00254f0 <IOAPIC::IOAPIC()>
c0025582:	83 c4 10             	add    esp,0x10
c0025585:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025589:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c002558e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025592:	89 14 85 e0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce620],edx
c0025599:	a1 c0 19 03 c0       	mov    eax,ds:0xc00319c0
c002559e:	40                   	inc    eax
c002559f:	a3 c0 19 03 c0       	mov    ds:0xc00319c0,eax
c00255a4:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c00255a9:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00255af:	83 ec 08             	sub    esp,0x8
c00255b2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00255b6:	50                   	push   eax
c00255b7:	e8 ee e3 fe ff       	call   c00139aa <Device::addChild(Device*)>
c00255bc:	83 c4 10             	add    esp,0x10
c00255bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00255c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00255c5:	83 c0 08             	add    eax,0x8
c00255c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00255ca:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00255cf:	6a 00                	push   0x0
c00255d1:	6a 00                	push   0x0
c00255d3:	52                   	push   edx
c00255d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00255d8:	ff d0                	call   eax
c00255da:	83 c4 10             	add    esp,0x10
c00255dd:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00255e1:	e9 6b ff ff ff       	jmp    c0025551 <APIC::APIC()+0x39>
c00255e6:	c6 05 00 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031a00,0x1
c00255ed:	90                   	nop
c00255ee:	83 c4 18             	add    esp,0x18
c00255f1:	5b                   	pop    ebx
c00255f2:	c3                   	ret    
c00255f3:	90                   	nop

c00255f4 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00255f4:	55                   	push   ebp
c00255f5:	89 e5                	mov    ebp,esp
c00255f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00255fa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025600:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025603:	72 1d                	jb     c0025622 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025605:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025608:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002560e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025611:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025617:	01 d0                	add    eax,edx
c0025619:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002561c:	73 04                	jae    c0025622 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002561e:	b0 01                	mov    al,0x1
c0025620:	eb 02                	jmp    c0025624 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025622:	b0 00                	mov    al,0x0
c0025624:	5d                   	pop    ebp
c0025625:	c3                   	ret    

c0025626 <IOAPIC::read(int)>:
c0025626:	55                   	push   ebp
c0025627:	89 e5                	mov    ebp,esp
c0025629:	83 ec 10             	sub    esp,0x10
c002562c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002562f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025635:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025638:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002563b:	0f b6 d0             	movzx  edx,al
c002563e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025641:	89 10                	mov    DWORD PTR [eax],edx
c0025643:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025646:	83 c0 10             	add    eax,0x10
c0025649:	8b 00                	mov    eax,DWORD PTR [eax]
c002564b:	c9                   	leave  
c002564c:	c3                   	ret    
c002564d:	90                   	nop

c002564e <IOAPIC::open(int, int, void*)>:
c002564e:	55                   	push   ebp
c002564f:	89 e5                	mov    ebp,esp
c0025651:	57                   	push   edi
c0025652:	56                   	push   esi
c0025653:	53                   	push   ebx
c0025654:	83 ec 0c             	sub    esp,0xc
c0025657:	83 ec 0c             	sub    esp,0xc
c002565a:	68 1f c2 02 c0       	push   0xc002c21f
c002565f:	e8 0d cf fe ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c0025664:	83 c4 10             	add    esp,0x10
c0025667:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002566a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002566d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025673:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025676:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002567c:	8b 14 85 20 00 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcffe0]
c0025683:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025686:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002568c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002568f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025695:	8b 14 85 a0 00 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcff60]
c002569c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002569f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00256a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256a8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00256ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256b1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00256b7:	0f b6 f8             	movzx  edi,al
c00256ba:	89 d0                	mov    eax,edx
c00256bc:	ba 00 00 00 00       	mov    edx,0x0
c00256c1:	89 c1                	mov    ecx,eax
c00256c3:	80 e5 ff             	and    ch,0xff
c00256c6:	89 cb                	mov    ebx,ecx
c00256c8:	0f b6 f2             	movzx  esi,dl
c00256cb:	89 d8                	mov    eax,ebx
c00256cd:	89 f2                	mov    edx,esi
c00256cf:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00256d2:	8d 5f 08             	lea    ebx,[edi+0x8]
c00256d5:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00256d9:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00256dd:	83 e0 00             	and    eax,0x0
c00256e0:	09 d0                	or     eax,edx
c00256e2:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00256e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256e9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00256ef:	8d 50 01             	lea    edx,[eax+0x1]
c00256f2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00256f5:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00256fb:	0f b6 d0             	movzx  edx,al
c00256fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025701:	83 c2 08             	add    edx,0x8
c0025704:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025708:	0f b6 c9             	movzx  ecx,cl
c002570b:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025711:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025715:	83 ec 08             	sub    esp,0x8
c0025718:	6a 01                	push   0x1
c002571a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002571d:	e8 04 ff ff ff       	call   c0025626 <IOAPIC::read(int)>
c0025722:	83 c4 10             	add    esp,0x10
c0025725:	c1 f8 10             	sar    eax,0x10
c0025728:	0f b6 c0             	movzx  eax,al
c002572b:	8d 50 01             	lea    edx,[eax+0x1]
c002572e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025731:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025737:	b8 00 00 00 00       	mov    eax,0x0
c002573c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002573f:	5b                   	pop    ebx
c0025740:	5e                   	pop    esi
c0025741:	5f                   	pop    edi
c0025742:	5d                   	pop    ebp
c0025743:	c3                   	ret    

c0025744 <IOAPIC::write(int, int)>:
c0025744:	55                   	push   ebp
c0025745:	89 e5                	mov    ebp,esp
c0025747:	83 ec 10             	sub    esp,0x10
c002574a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002574d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025753:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025756:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025759:	0f b6 d0             	movzx  edx,al
c002575c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002575f:	89 10                	mov    DWORD PTR [eax],edx
c0025761:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025764:	8d 50 10             	lea    edx,[eax+0x10]
c0025767:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002576a:	89 02                	mov    DWORD PTR [edx],eax
c002576c:	90                   	nop
c002576d:	c9                   	leave  
c002576e:	c3                   	ret    
c002576f:	90                   	nop

c0025770 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025770:	55                   	push   ebp
c0025771:	89 e5                	mov    ebp,esp
c0025773:	53                   	push   ebx
c0025774:	83 ec 2c             	sub    esp,0x2c
c0025777:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002577a:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002577d:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025780:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025783:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025786:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025789:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002578c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002578f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025792:	88 d8                	mov    al,bl
c0025794:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025797:	88 c8                	mov    al,cl
c0025799:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002579c:	88 d0                	mov    al,dl
c002579e:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00257a1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00257a5:	83 c0 08             	add    eax,0x8
c00257a8:	01 c0                	add    eax,eax
c00257aa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00257ad:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00257b1:	83 c0 08             	add    eax,0x8
c00257b4:	01 c0                	add    eax,eax
c00257b6:	40                   	inc    eax
c00257b7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00257ba:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00257bd:	50                   	push   eax
c00257be:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257c1:	e8 60 fe ff ff       	call   c0025626 <IOAPIC::read(int)>
c00257c6:	83 c4 08             	add    esp,0x8
c00257c9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00257cc:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00257d3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00257d6:	c1 e0 18             	shl    eax,0x18
c00257d9:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00257dc:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00257df:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00257e2:	52                   	push   edx
c00257e3:	50                   	push   eax
c00257e4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257e7:	e8 58 ff ff ff       	call   c0025744 <IOAPIC::write(int, int)>
c00257ec:	83 c4 0c             	add    esp,0xc
c00257ef:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00257f2:	50                   	push   eax
c00257f3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257f6:	e8 2b fe ff ff       	call   c0025626 <IOAPIC::read(int)>
c00257fb:	83 c4 08             	add    esp,0x8
c00257fe:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025801:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025808:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002580f:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025816:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002581a:	74 09                	je     c0025825 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c002581c:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025823:	eb 07                	jmp    c002582c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025825:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002582c:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025830:	74 09                	je     c002583b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025832:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025839:	eb 07                	jmp    c0025842 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c002583b:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025842:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025849:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002584d:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025850:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025853:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025856:	52                   	push   edx
c0025857:	50                   	push   eax
c0025858:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002585b:	e8 e4 fe ff ff       	call   c0025744 <IOAPIC::write(int, int)>
c0025860:	83 c4 0c             	add    esp,0xc
c0025863:	90                   	nop
c0025864:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025867:	c9                   	leave  
c0025868:	c3                   	ret    
c0025869:	90                   	nop

c002586a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c002586a:	55                   	push   ebp
c002586b:	89 e5                	mov    ebp,esp
c002586d:	57                   	push   edi
c002586e:	56                   	push   esi
c002586f:	53                   	push   ebx
c0025870:	83 ec 2c             	sub    esp,0x2c
c0025873:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025876:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025879:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002587d:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025881:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025885:	74 5a                	je     c00258e1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025887:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c002588b:	7f 44                	jg     c00258d1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c002588d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025890:	05 c0 c8 02 c0       	add    eax,0xc002c8c0
c0025895:	8a 00                	mov    al,BYTE PTR [eax]
c0025897:	0f b6 c0             	movzx  eax,al
c002589a:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002589d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00258a0:	66 8b 84 00 c0 ff 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd0040]
c00258a8:	0f b7 c0             	movzx  eax,ax
c00258ab:	83 e0 02             	and    eax,0x2
c00258ae:	85 c0                	test   eax,eax
c00258b0:	74 04                	je     c00258b6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00258b2:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00258b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00258b9:	66 8b 84 00 c0 ff 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd0040]
c00258c1:	0f b7 c0             	movzx  eax,ax
c00258c4:	83 e0 08             	and    eax,0x8
c00258c7:	85 c0                	test   eax,eax
c00258c9:	74 16                	je     c00258e1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00258cb:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00258cf:	eb 10                	jmp    c00258e1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00258d1:	83 ec 0c             	sub    esp,0xc
c00258d4:	68 30 c2 02 c0       	push   0xc002c230
c00258d9:	e8 f3 43 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c00258de:	83 c4 10             	add    esp,0x10
c00258e1:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00258e5:	a1 c0 19 03 c0       	mov    eax,ds:0xc00319c0
c00258ea:	83 ec 08             	sub    esp,0x8
c00258ed:	50                   	push   eax
c00258ee:	68 68 c2 02 c0       	push   0xc002c268
c00258f3:	e8 79 cc fe ff       	call   c0012571 <Dbg::kprintf(char const*, ...)>
c00258f8:	83 c4 10             	add    esp,0x10
c00258fb:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025902:	a1 c0 19 03 c0       	mov    eax,ds:0xc00319c0
c0025907:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c002590a:	7d 67                	jge    c0025973 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002590c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002590f:	8b 04 85 e0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce620]
c0025916:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025919:	83 ec 08             	sub    esp,0x8
c002591c:	52                   	push   edx
c002591d:	50                   	push   eax
c002591e:	e8 d1 fc ff ff       	call   c00255f4 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025923:	83 c4 10             	add    esp,0x10
c0025926:	84 c0                	test   al,al
c0025928:	74 44                	je     c002596e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c002592a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002592d:	8b 1c 85 e0 19 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffce620]
c0025934:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025938:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002593b:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c002593f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025942:	83 c0 20             	add    eax,0x20
c0025945:	0f b6 f0             	movzx  esi,al
c0025948:	b8 00 00 00 00       	mov    eax,0x0
c002594d:	99                   	cdq    
c002594e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025951:	0f b6 c9             	movzx  ecx,cl
c0025954:	83 ec 04             	sub    esp,0x4
c0025957:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002595a:	57                   	push   edi
c002595b:	56                   	push   esi
c002595c:	52                   	push   edx
c002595d:	50                   	push   eax
c002595e:	51                   	push   ecx
c002595f:	53                   	push   ebx
c0025960:	e8 0b fe ff ff       	call   c0025770 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025965:	83 c4 20             	add    esp,0x20
c0025968:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c002596c:	eb 05                	jmp    c0025973 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002596e:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025971:	eb 8f                	jmp    c0025902 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025973:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025976:	83 f0 01             	xor    eax,0x1
c0025979:	84 c0                	test   al,al
c002597b:	74 10                	je     c002598d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c002597d:	83 ec 0c             	sub    esp,0xc
c0025980:	68 7f c2 02 c0       	push   0xc002c27f
c0025985:	e8 47 43 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c002598a:	83 c4 10             	add    esp,0x10
c002598d:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025991:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025998:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c002599c:	7f 65                	jg     c0025a03 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c002599e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259a1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00259a4:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00259ab:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00259ae:	01 ca                	add    edx,ecx
c00259b0:	83 c2 54             	add    edx,0x54
c00259b3:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00259b7:	85 c0                	test   eax,eax
c00259b9:	75 43                	jne    c00259fe <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00259bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259be:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00259c1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00259c8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00259cb:	01 ca                	add    edx,ecx
c00259cd:	8d 4a 54             	lea    ecx,[edx+0x54]
c00259d0:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00259d3:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00259d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259da:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00259dd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00259e4:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00259e7:	01 ca                	add    edx,ecx
c00259e9:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00259ef:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00259f2:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00259f6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00259f9:	83 e8 20             	sub    eax,0x20
c00259fc:	eb 1a                	jmp    c0025a18 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00259fe:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025a01:	eb 95                	jmp    c0025998 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025a03:	83 ec 0c             	sub    esp,0xc
c0025a06:	68 8c c2 02 c0       	push   0xc002c28c
c0025a0b:	e8 c1 42 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c0025a10:	83 c4 10             	add    esp,0x10
c0025a13:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025a18:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025a1b:	5b                   	pop    ebx
c0025a1c:	5e                   	pop    esi
c0025a1d:	5f                   	pop    edi
c0025a1e:	5d                   	pop    ebp
c0025a1f:	c3                   	ret    

c0025a20 <PIC::disable()>:
c0025a20:	55                   	push   ebp
c0025a21:	89 e5                	mov    ebp,esp
c0025a23:	83 ec 10             	sub    esp,0x10
c0025a26:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025a2c:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025a30:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025a33:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025a37:	ee                   	out    dx,al
c0025a38:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025a3e:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025a42:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025a45:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025a49:	ee                   	out    dx,al
c0025a4a:	90                   	nop
c0025a4b:	c9                   	leave  
c0025a4c:	c3                   	ret    
c0025a4d:	90                   	nop

c0025a4e <PIC::close(int, int, void*)>:
c0025a4e:	55                   	push   ebp
c0025a4f:	89 e5                	mov    ebp,esp
c0025a51:	83 ec 08             	sub    esp,0x8
c0025a54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a57:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a59:	83 c0 3c             	add    eax,0x3c
c0025a5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a5e:	83 ec 0c             	sub    esp,0xc
c0025a61:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a64:	ff d0                	call   eax
c0025a66:	83 c4 10             	add    esp,0x10
c0025a69:	b8 00 00 00 00       	mov    eax,0x0
c0025a6e:	c9                   	leave  
c0025a6f:	c3                   	ret    

c0025a70 <PIC::PIC()>:
c0025a70:	83 ec 0c             	sub    esp,0xc
c0025a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a77:	83 ec 08             	sub    esp,0x8
c0025a7a:	68 38 c3 02 c0       	push   0xc002c338
c0025a7f:	50                   	push   eax
c0025a80:	e8 93 e8 fe ff       	call   c0014318 <InterruptController::InterruptController(char const*)>
c0025a85:	83 c4 10             	add    esp,0x10
c0025a88:	ba 64 c3 02 c0       	mov    edx,0xc002c364
c0025a8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a91:	89 10                	mov    DWORD PTR [eax],edx
c0025a93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a97:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025a9d:	0f b6 d0             	movzx  edx,al
c0025aa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025aa4:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025aab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025aaf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ab5:	0f b6 d0             	movzx  edx,al
c0025ab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025abc:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025ac1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ac5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025acb:	8d 50 01             	lea    edx,[eax+0x1]
c0025ace:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025ad2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025ad8:	0f b6 d0             	movzx  edx,al
c0025adb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025adf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025ae3:	83 e1 3f             	and    ecx,0x3f
c0025ae6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025aee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025af4:	0f b6 d0             	movzx  edx,al
c0025af7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025afb:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025b02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b06:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b0c:	0f b6 d0             	movzx  edx,al
c0025b0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b13:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025b18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b1c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b22:	8d 50 01             	lea    edx,[eax+0x1]
c0025b25:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025b29:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025b2f:	0f b6 d0             	movzx  edx,al
c0025b32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b36:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025b3a:	83 e1 3f             	and    ecx,0x3f
c0025b3d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025b41:	90                   	nop
c0025b42:	83 c4 0c             	add    esp,0xc
c0025b45:	c3                   	ret    

c0025b46 <PIC::ioWait()>:
c0025b46:	eb 00                	jmp    c0025b48 <PIC::ioWait()+0x2>
c0025b48:	eb 00                	jmp    c0025b4a <PIC::ioWait()+0x4>
c0025b4a:	90                   	nop
c0025b4b:	c3                   	ret    

c0025b4c <PIC::getIRQReg(int)>:
c0025b4c:	55                   	push   ebp
c0025b4d:	89 e5                	mov    ebp,esp
c0025b4f:	83 ec 10             	sub    esp,0x10
c0025b52:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b55:	0f b6 c0             	movzx  eax,al
c0025b58:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025b5e:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025b61:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025b64:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025b68:	ee                   	out    dx,al
c0025b69:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b6c:	0f b6 c0             	movzx  eax,al
c0025b6f:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025b75:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025b78:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025b7b:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025b7f:	ee                   	out    dx,al
c0025b80:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025b86:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025b8a:	89 c2                	mov    edx,eax
c0025b8c:	ec                   	in     al,dx
c0025b8d:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025b90:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025b93:	0f b6 c0             	movzx  eax,al
c0025b96:	c1 e0 08             	shl    eax,0x8
c0025b99:	89 c1                	mov    ecx,eax
c0025b9b:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025ba1:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025ba5:	89 c2                	mov    edx,eax
c0025ba7:	ec                   	in     al,dx
c0025ba8:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025bab:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025bae:	0f b6 c0             	movzx  eax,al
c0025bb1:	09 c8                	or     eax,ecx
c0025bb3:	c9                   	leave  
c0025bb4:	c3                   	ret    
c0025bb5:	90                   	nop

c0025bb6 <PIC::eoi(unsigned char)>:
c0025bb6:	55                   	push   ebp
c0025bb7:	89 e5                	mov    ebp,esp
c0025bb9:	83 ec 14             	sub    esp,0x14
c0025bbc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bbf:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025bc2:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025bc6:	75 1e                	jne    c0025be6 <PIC::eoi(unsigned char)+0x30>
c0025bc8:	6a 0b                	push   0xb
c0025bca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bcd:	e8 7a ff ff ff       	call   c0025b4c <PIC::getIRQReg(int)>
c0025bd2:	83 c4 08             	add    esp,0x8
c0025bd5:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025bd9:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025bdd:	25 80 00 00 00       	and    eax,0x80
c0025be2:	85 c0                	test   eax,eax
c0025be4:	74 5f                	je     c0025c45 <PIC::eoi(unsigned char)+0x8f>
c0025be6:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025bea:	75 2d                	jne    c0025c19 <PIC::eoi(unsigned char)+0x63>
c0025bec:	6a 0b                	push   0xb
c0025bee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bf1:	e8 56 ff ff ff       	call   c0025b4c <PIC::getIRQReg(int)>
c0025bf6:	83 c4 08             	add    esp,0x8
c0025bf9:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025bfd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025c00:	66 85 c0             	test   ax,ax
c0025c03:	78 14                	js     c0025c19 <PIC::eoi(unsigned char)+0x63>
c0025c05:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025c0b:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025c0f:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025c12:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025c16:	ee                   	out    dx,al
c0025c17:	eb 2d                	jmp    c0025c46 <PIC::eoi(unsigned char)+0x90>
c0025c19:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025c1d:	76 12                	jbe    c0025c31 <PIC::eoi(unsigned char)+0x7b>
c0025c1f:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025c25:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025c29:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025c2c:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025c30:	ee                   	out    dx,al
c0025c31:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025c37:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025c3b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025c3e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025c42:	ee                   	out    dx,al
c0025c43:	eb 01                	jmp    c0025c46 <PIC::eoi(unsigned char)+0x90>
c0025c45:	90                   	nop
c0025c46:	c9                   	leave  
c0025c47:	c3                   	ret    

c0025c48 <PIC::remap()>:
c0025c48:	55                   	push   ebp
c0025c49:	89 e5                	mov    ebp,esp
c0025c4b:	83 ec 48             	sub    esp,0x48
c0025c4e:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025c55:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025c5c:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025c62:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025c65:	89 c2                	mov    edx,eax
c0025c67:	ec                   	in     al,dx
c0025c68:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025c6b:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025c6e:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025c71:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025c77:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025c7a:	89 c2                	mov    edx,eax
c0025c7c:	ec                   	in     al,dx
c0025c7d:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025c80:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025c83:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025c86:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025c8c:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025c90:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025c93:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025c96:	ee                   	out    dx,al
c0025c97:	83 ec 0c             	sub    esp,0xc
c0025c9a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c9d:	e8 a4 fe ff ff       	call   c0025b46 <PIC::ioWait()>
c0025ca2:	83 c4 10             	add    esp,0x10
c0025ca5:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025cab:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025caf:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025cb2:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025cb5:	ee                   	out    dx,al
c0025cb6:	83 ec 0c             	sub    esp,0xc
c0025cb9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cbc:	e8 85 fe ff ff       	call   c0025b46 <PIC::ioWait()>
c0025cc1:	83 c4 10             	add    esp,0x10
c0025cc4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025cc7:	0f b6 c0             	movzx  eax,al
c0025cca:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025cd0:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025cd3:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025cd6:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025cd9:	ee                   	out    dx,al
c0025cda:	83 ec 0c             	sub    esp,0xc
c0025cdd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ce0:	e8 61 fe ff ff       	call   c0025b46 <PIC::ioWait()>
c0025ce5:	83 c4 10             	add    esp,0x10
c0025ce8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025ceb:	0f b6 c0             	movzx  eax,al
c0025cee:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0025cf4:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0025cf7:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0025cfa:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025cfd:	ee                   	out    dx,al
c0025cfe:	83 ec 0c             	sub    esp,0xc
c0025d01:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d04:	e8 3d fe ff ff       	call   c0025b46 <PIC::ioWait()>
c0025d09:	83 c4 10             	add    esp,0x10
c0025d0c:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0025d12:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025d16:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025d19:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0025d1c:	ee                   	out    dx,al
c0025d1d:	83 ec 0c             	sub    esp,0xc
c0025d20:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d23:	e8 1e fe ff ff       	call   c0025b46 <PIC::ioWait()>
c0025d28:	83 c4 10             	add    esp,0x10
c0025d2b:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0025d31:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0025d35:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0025d38:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025d3b:	ee                   	out    dx,al
c0025d3c:	83 ec 0c             	sub    esp,0xc
c0025d3f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d42:	e8 ff fd ff ff       	call   c0025b46 <PIC::ioWait()>
c0025d47:	83 c4 10             	add    esp,0x10
c0025d4a:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0025d50:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0025d54:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0025d57:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025d5a:	ee                   	out    dx,al
c0025d5b:	83 ec 0c             	sub    esp,0xc
c0025d5e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d61:	e8 e0 fd ff ff       	call   c0025b46 <PIC::ioWait()>
c0025d66:	83 c4 10             	add    esp,0x10
c0025d69:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0025d6f:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0025d73:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0025d76:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025d79:	ee                   	out    dx,al
c0025d7a:	83 ec 0c             	sub    esp,0xc
c0025d7d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d80:	e8 c1 fd ff ff       	call   c0025b46 <PIC::ioWait()>
c0025d85:	83 c4 10             	add    esp,0x10
c0025d88:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0025d8c:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0025d92:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0025d95:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0025d98:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025d9b:	ee                   	out    dx,al
c0025d9c:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0025da0:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0025da6:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0025da9:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0025dac:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025daf:	ee                   	out    dx,al
c0025db0:	90                   	nop
c0025db1:	c9                   	leave  
c0025db2:	c3                   	ret    
c0025db3:	90                   	nop

c0025db4 <PIC::open(int, int, void*)>:
c0025db4:	55                   	push   ebp
c0025db5:	89 e5                	mov    ebp,esp
c0025db7:	83 ec 18             	sub    esp,0x18
c0025dba:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0025dc0:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0025dc4:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025dc7:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025dcb:	ee                   	out    dx,al
c0025dcc:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0025dd2:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0025dd6:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025dd9:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025ddd:	ee                   	out    dx,al
c0025dde:	83 ec 0c             	sub    esp,0xc
c0025de1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025de4:	e8 5f fe ff ff       	call   c0025c48 <PIC::remap()>
c0025de9:	83 c4 10             	add    esp,0x10
c0025dec:	b8 00 00 00 00       	mov    eax,0x0
c0025df1:	c9                   	leave  
c0025df2:	c3                   	ret    
c0025df3:	90                   	nop

c0025df4 <APICTimer::close(int, int, void*)>:
c0025df4:	b8 00 00 00 00       	mov    eax,0x0
c0025df9:	c3                   	ret    

c0025dfa <apicTimerHandler(regs*, void*)>:
c0025dfa:	83 ec 0c             	sub    esp,0xc
c0025dfd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e01:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e03:	99                   	cdq    
c0025e04:	52                   	push   edx
c0025e05:	50                   	push   eax
c0025e06:	6a 00                	push   0x0
c0025e08:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025e0d:	e8 92 07 00 00       	call   c00265a4 <__udivdi3>
c0025e12:	83 c4 10             	add    esp,0x10
c0025e15:	83 ec 08             	sub    esp,0x8
c0025e18:	52                   	push   edx
c0025e19:	50                   	push   eax
c0025e1a:	e8 44 06 ff ff       	call   c0016463 <timerHandler(unsigned long long)>
c0025e1f:	83 c4 10             	add    esp,0x10
c0025e22:	90                   	nop
c0025e23:	83 c4 0c             	add    esp,0xc
c0025e26:	c3                   	ret    
c0025e27:	90                   	nop

c0025e28 <APICTimer::write(int)>:
c0025e28:	53                   	push   ebx
c0025e29:	83 ec 28             	sub    esp,0x28
c0025e2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025e30:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0025e34:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025e3a:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c0025e3f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025e45:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025e4b:	83 ec 0c             	sub    esp,0xc
c0025e4e:	50                   	push   eax
c0025e4f:	e8 de f4 ff ff       	call   c0025332 <APIC::getBase()>
c0025e54:	83 c4 10             	add    esp,0x10
c0025e57:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025e5b:	a1 d0 dc 02 c0       	mov    eax,ds:0xc002dcd0
c0025e60:	8b 15 d4 dc 02 c0    	mov    edx,DWORD PTR ds:0xc002dcd4
c0025e66:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025e6a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025e6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025e72:	05 e0 03 00 00       	add    eax,0x3e0
c0025e77:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025e7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025e81:	05 80 03 00 00       	add    eax,0x380
c0025e86:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0025e8c:	fb                   	sti    
c0025e8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025e95:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0025e9a:	83 d2 00             	adc    edx,0x0
c0025e9d:	89 c1                	mov    ecx,eax
c0025e9f:	89 d3                	mov    ebx,edx
c0025ea1:	a1 d0 dc 02 c0       	mov    eax,ds:0xc002dcd0
c0025ea6:	8b 15 d4 dc 02 c0    	mov    edx,DWORD PTR ds:0xc002dcd4
c0025eac:	39 c8                	cmp    eax,ecx
c0025eae:	89 d0                	mov    eax,edx
c0025eb0:	19 d8                	sbb    eax,ebx
c0025eb2:	73 02                	jae    c0025eb6 <APICTimer::write(int)+0x8e>
c0025eb4:	eb d7                	jmp    c0025e8d <APICTimer::write(int)+0x65>
c0025eb6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025eba:	05 20 03 00 00       	add    eax,0x320
c0025ebf:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0025ec5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025ec9:	05 90 03 00 00       	add    eax,0x390
c0025ece:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ed0:	f7 d0                	not    eax
c0025ed2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025ed6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025ede:	ba 00 00 00 00       	mov    edx,0x0
c0025ee3:	f7 f3                	div    ebx
c0025ee5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025ee9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025eed:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025ef3:	0d 00 00 02 00       	or     eax,0x20000
c0025ef8:	89 c2                	mov    edx,eax
c0025efa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025efe:	05 20 03 00 00       	add    eax,0x320
c0025f03:	89 10                	mov    DWORD PTR [eax],edx
c0025f05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f09:	05 e0 03 00 00       	add    eax,0x3e0
c0025f0e:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025f14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f18:	05 80 03 00 00       	add    eax,0x380
c0025f1d:	89 c2                	mov    edx,eax
c0025f1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025f23:	89 02                	mov    DWORD PTR [edx],eax
c0025f25:	90                   	nop
c0025f26:	83 c4 28             	add    esp,0x28
c0025f29:	5b                   	pop    ebx
c0025f2a:	c3                   	ret    
c0025f2b:	90                   	nop

c0025f2c <APICTimer::open(int, int, void*)>:
c0025f2c:	57                   	push   edi
c0025f2d:	56                   	push   esi
c0025f2e:	53                   	push   ebx
c0025f2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f33:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f35:	83 c0 24             	add    eax,0x24
c0025f38:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f3a:	83 ec 08             	sub    esp,0x8
c0025f3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025f41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025f45:	ff d0                	call   eax
c0025f47:	83 c4 10             	add    esp,0x10
c0025f4a:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c0025f4f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025f55:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025f5b:	83 ec 0c             	sub    esp,0xc
c0025f5e:	50                   	push   eax
c0025f5f:	e8 ce f3 ff ff       	call   c0025332 <APIC::getBase()>
c0025f64:	83 c4 10             	add    esp,0x10
c0025f67:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0025f6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f71:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025f77:	0f b6 f8             	movzx  edi,al
c0025f7a:	89 d0                	mov    eax,edx
c0025f7c:	ba 00 00 00 00       	mov    edx,0x0
c0025f81:	89 c1                	mov    ecx,eax
c0025f83:	80 e5 ff             	and    ch,0xff
c0025f86:	89 cb                	mov    ebx,ecx
c0025f88:	0f b6 f2             	movzx  esi,dl
c0025f8b:	89 d8                	mov    eax,ebx
c0025f8d:	89 f2                	mov    edx,esi
c0025f8f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f93:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025f96:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025f9a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025f9e:	83 e0 00             	and    eax,0x0
c0025fa1:	09 d0                	or     eax,edx
c0025fa3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025fa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fab:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025fb1:	8d 50 01             	lea    edx,[eax+0x1]
c0025fb4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025fb8:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025fbe:	0f b6 d0             	movzx  edx,al
c0025fc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fc5:	83 c2 08             	add    edx,0x8
c0025fc8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025fcc:	0f b6 c9             	movzx  ecx,cl
c0025fcf:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025fd5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025fd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fdd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025fe1:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025fe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025feb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025fef:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0025ff5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025ff9:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0025fff:	83 ec 0c             	sub    esp,0xc
c0026002:	51                   	push   ecx
c0026003:	6a 01                	push   0x1
c0026005:	68 fa 5d 02 c0       	push   0xc0025dfa
c002600a:	52                   	push   edx
c002600b:	50                   	push   eax
c002600c:	e8 11 d9 fe ff       	call   c0013922 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026011:	83 c4 20             	add    esp,0x20
c0026014:	89 c2                	mov    edx,eax
c0026016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002601a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026020:	b8 00 00 00 00       	mov    eax,0x0
c0026025:	5b                   	pop    ebx
c0026026:	5e                   	pop    esi
c0026027:	5f                   	pop    edi
c0026028:	c3                   	ret    
c0026029:	90                   	nop

c002602a <APICTimer::APICTimer()>:
c002602a:	83 ec 0c             	sub    esp,0xc
c002602d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026031:	83 ec 08             	sub    esp,0x8
c0026034:	68 a4 c3 02 c0       	push   0xc002c3a4
c0026039:	50                   	push   eax
c002603a:	e8 95 03 ff ff       	call   c00163d4 <Timer::Timer(char const*)>
c002603f:	83 c4 10             	add    esp,0x10
c0026042:	ba b8 c3 02 c0       	mov    edx,0xc002c3b8
c0026047:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002604b:	89 10                	mov    DWORD PTR [eax],edx
c002604d:	90                   	nop
c002604e:	83 c4 0c             	add    esp,0xc
c0026051:	c3                   	ret    

c0026052 <PIT::write(int)>:
c0026052:	83 ec 10             	sub    esp,0x10
c0026055:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026059:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002605d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026063:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026067:	a3 04 1a 03 c0       	mov    ds:0xc0031a04,eax
c002606c:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026071:	99                   	cdq    
c0026072:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026076:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002607a:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026081:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026086:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002608a:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002608f:	ee                   	out    dx,al
c0026090:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026094:	0f b6 c0             	movzx  eax,al
c0026097:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002609e:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00260a2:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00260a6:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00260ab:	ee                   	out    dx,al
c00260ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00260b0:	c1 f8 08             	sar    eax,0x8
c00260b3:	0f b6 c0             	movzx  eax,al
c00260b6:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00260bd:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00260c1:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00260c5:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00260ca:	ee                   	out    dx,al
c00260cb:	90                   	nop
c00260cc:	83 c4 10             	add    esp,0x10
c00260cf:	c3                   	ret    

c00260d0 <pitHandler(regs*, void*)>:
c00260d0:	83 ec 0c             	sub    esp,0xc
c00260d3:	a1 04 1a 03 c0       	mov    eax,ds:0xc0031a04
c00260d8:	99                   	cdq    
c00260d9:	52                   	push   edx
c00260da:	50                   	push   eax
c00260db:	6a 00                	push   0x0
c00260dd:	68 00 ca 9a 3b       	push   0x3b9aca00
c00260e2:	e8 bd 04 00 00       	call   c00265a4 <__udivdi3>
c00260e7:	83 c4 10             	add    esp,0x10
c00260ea:	83 ec 08             	sub    esp,0x8
c00260ed:	52                   	push   edx
c00260ee:	50                   	push   eax
c00260ef:	e8 6f 03 ff ff       	call   c0016463 <timerHandler(unsigned long long)>
c00260f4:	83 c4 10             	add    esp,0x10
c00260f7:	90                   	nop
c00260f8:	83 c4 0c             	add    esp,0xc
c00260fb:	c3                   	ret    

c00260fc <PIT::open(int, int, void*)>:
c00260fc:	83 ec 0c             	sub    esp,0xc
c00260ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026103:	8b 00                	mov    eax,DWORD PTR [eax]
c0026105:	83 c0 24             	add    eax,0x24
c0026108:	8b 00                	mov    eax,DWORD PTR [eax]
c002610a:	83 ec 08             	sub    esp,0x8
c002610d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026111:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026115:	ff d0                	call   eax
c0026117:	83 c4 10             	add    esp,0x10
c002611a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002611e:	83 ec 0c             	sub    esp,0xc
c0026121:	6a 00                	push   0x0
c0026123:	6a 01                	push   0x1
c0026125:	68 d0 60 02 c0       	push   0xc00260d0
c002612a:	6a 00                	push   0x0
c002612c:	50                   	push   eax
c002612d:	e8 f0 d7 fe ff       	call   c0013922 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026132:	83 c4 20             	add    esp,0x20
c0026135:	89 c2                	mov    edx,eax
c0026137:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002613b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026141:	b8 00 00 00 00       	mov    eax,0x0
c0026146:	83 c4 0c             	add    esp,0xc
c0026149:	c3                   	ret    

c002614a <PIT::close(int, int, void*)>:
c002614a:	83 ec 0c             	sub    esp,0xc
c002614d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026151:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002615b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002615f:	6a 01                	push   0x1
c0026161:	68 d0 60 02 c0       	push   0xc00260d0
c0026166:	6a 00                	push   0x0
c0026168:	50                   	push   eax
c0026169:	e8 fe d7 fe ff       	call   c001396c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002616e:	83 c4 10             	add    esp,0x10
c0026171:	b8 00 00 00 00       	mov    eax,0x0
c0026176:	83 c4 0c             	add    esp,0xc
c0026179:	c3                   	ret    

c002617a <PIT::PIT()>:
c002617a:	83 ec 0c             	sub    esp,0xc
c002617d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026181:	83 ec 08             	sub    esp,0x8
c0026184:	68 e0 c3 02 c0       	push   0xc002c3e0
c0026189:	50                   	push   eax
c002618a:	e8 45 02 ff ff       	call   c00163d4 <Timer::Timer(char const*)>
c002618f:	83 c4 10             	add    esp,0x10
c0026192:	ba 08 c4 02 c0       	mov    edx,0xc002c408
c0026197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002619b:	89 10                	mov    DWORD PTR [eax],edx
c002619d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261a1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00261a7:	0f b6 d0             	movzx  edx,al
c00261aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261ae:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00261b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261b9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00261bf:	0f b6 d0             	movzx  edx,al
c00261c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261c6:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00261cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261cf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00261d5:	8d 50 01             	lea    edx,[eax+0x1]
c00261d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00261dc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00261e2:	0f b6 d0             	movzx  edx,al
c00261e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261e9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00261ed:	83 e1 3f             	and    ecx,0x3f
c00261f0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00261f4:	90                   	nop
c00261f5:	83 c4 0c             	add    esp,0xc
c00261f8:	c3                   	ret    
c00261f9:	66 90                	xchg   ax,ax
c00261fb:	66 90                	xchg   ax,ax
c00261fd:	66 90                	xchg   ax,ax
c00261ff:	90                   	nop

c0026200 <avxDetect>:
c0026200:	b8 00 00 00 00       	mov    eax,0x0
c0026205:	c3                   	ret    

c0026206 <avxSave>:
c0026206:	c3                   	ret    

c0026207 <avxLoad>:
c0026207:	c3                   	ret    

c0026208 <avxInit>:
c0026208:	c3                   	ret    

c0026209 <avxClose>:
c0026209:	c3                   	ret    

c002620a <wouldSheSayYes>:
c002620a:	c3                   	ret    
c002620b:	49                   	dec    ecx
c002620c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026210:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026214:	75 20                	jne    c0026236 <sseDetect.noSSE+0x1>
c0026216:	4e                   	dec    esi
c0026217:	79 61                	jns    c002627a <x87Detect+0x14>
c0026219:	68 2e 2e 2e 00       	push   0x2e2e2e
c002621e:	66 90                	xchg   ax,ax

c0026220 <absolutelyNoChanceInHell>:
c0026220:	b8 01 00 00 00       	mov    eax,0x1
c0026225:	0f a2                	cpuid  
c0026227:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002622d:	74 06                	je     c0026235 <sseDetect.noSSE>
c002622f:	b8 01 00 00 00       	mov    eax,0x1
c0026234:	c3                   	ret    

c0026235 <sseDetect.noSSE>:
c0026235:	31 c0                	xor    eax,eax
c0026237:	c3                   	ret    

c0026238 <sseSave>:
c0026238:	0f ae 44 24 04       	fxsave [esp+0x4]
c002623d:	c3                   	ret    

c002623e <sseLoad>:
c002623e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026243:	c3                   	ret    

c0026244 <sseInit>:
c0026244:	e8 49 00 00 00       	call   c0026292 <x87Init>
c0026249:	0f 20 e0             	mov    eax,cr4
c002624c:	66 0d 00 06          	or     ax,0x600
c0026250:	0f 22 e0             	mov    cr4,eax
c0026253:	c3                   	ret    

c0026254 <sseClose>:
c0026254:	c3                   	ret    
c0026255:	66 90                	xchg   ax,ax
c0026257:	66 90                	xchg   ax,ax
c0026259:	66 90                	xchg   ax,ax
c002625b:	66 90                	xchg   ax,ax
c002625d:	66 90                	xchg   ax,ax
c002625f:	90                   	nop

c0026260 <value_37F>:
c0026260:	7f 03                	jg     c0026265 <value_37A+0x1>

c0026262 <value_37E>:
c0026262:	7e 03                	jle    c0026267 <x87Detect+0x1>

c0026264 <value_37A>:
c0026264:	7a 03                	jp     c0026269 <x87Detect+0x3>

c0026266 <x87Detect>:
c0026266:	b8 01 00 00 00       	mov    eax,0x1
c002626b:	0f a2                	cpuid  
c002626d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026273:	74 06                	je     c002627b <x87Detect.nox87>
c0026275:	b8 01 00 00 00       	mov    eax,0x1
c002627a:	c3                   	ret    

c002627b <x87Detect.nox87>:
c002627b:	b8 00 00 00 00       	mov    eax,0x0
c0026280:	c3                   	ret    

c0026281 <x87Save>:
c0026281:	55                   	push   ebp
c0026282:	89 e5                	mov    ebp,esp
c0026284:	9b dd 75 08          	fsave  [ebp+0x8]
c0026288:	c9                   	leave  
c0026289:	c3                   	ret    

c002628a <x87Load>:
c002628a:	55                   	push   ebp
c002628b:	89 e5                	mov    ebp,esp
c002628d:	dd 65 08             	frstor [ebp+0x8]
c0026290:	c9                   	leave  
c0026291:	c3                   	ret    

c0026292 <x87Init>:
c0026292:	9b db e3             	finit  
c0026295:	0f 20 c0             	mov    eax,cr0
c0026298:	66 25 fb ff          	and    ax,0xfffb
c002629c:	66 0d 22 00          	or     ax,0x22
c00262a0:	0f 22 c0             	mov    cr0,eax
c00262a3:	0f 06                	clts   
c00262a5:	d9 2d 64 62 02 c0    	fldcw  WORD PTR ds:0xc0026264
c00262ab:	c3                   	ret    

c00262ac <x87Close>:
c00262ac:	c3                   	ret    
c00262ad:	66 90                	xchg   ax,ax
c00262af:	90                   	nop

c00262b0 <__do_global_ctors_aux>:
c00262b0:	a1 a4 8e 02 c0       	mov    eax,ds:0xc0028ea4
c00262b5:	83 f8 ff             	cmp    eax,0xffffffff
c00262b8:	74 1a                	je     c00262d4 <__do_global_ctors_aux+0x24>
c00262ba:	55                   	push   ebp
c00262bb:	89 e5                	mov    ebp,esp
c00262bd:	53                   	push   ebx
c00262be:	52                   	push   edx
c00262bf:	bb a4 8e 02 c0       	mov    ebx,0xc0028ea4
c00262c4:	ff d0                	call   eax
c00262c6:	83 eb 04             	sub    ebx,0x4
c00262c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00262cb:	83 f8 ff             	cmp    eax,0xffffffff
c00262ce:	75 f4                	jne    c00262c4 <__do_global_ctors_aux+0x14>
c00262d0:	58                   	pop    eax
c00262d1:	5b                   	pop    ebx
c00262d2:	5d                   	pop    ebp
c00262d3:	c3                   	ret    
c00262d4:	c3                   	ret    
c00262d5:	66 90                	xchg   ax,ax
c00262d7:	90                   	nop

c00262d8 <__divdi3>:
c00262d8:	55                   	push   ebp
c00262d9:	57                   	push   edi
c00262da:	56                   	push   esi
c00262db:	53                   	push   ebx
c00262dc:	83 ec 1c             	sub    esp,0x1c
c00262df:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00262e3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00262e7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00262ea:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00262ee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00262f2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00262f6:	85 db                	test   ebx,ebx
c00262f8:	0f 88 8e 00 00 00    	js     c002638c <__divdi3+0xb4>
c00262fe:	89 dd                	mov    ebp,ebx
c0026300:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026308:	89 d3                	mov    ebx,edx
c002630a:	85 d2                	test   edx,edx
c002630c:	79 0d                	jns    c002631b <__divdi3+0x43>
c002630e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026312:	f7 d8                	neg    eax
c0026314:	83 d2 00             	adc    edx,0x0
c0026317:	f7 da                	neg    edx
c0026319:	89 d3                	mov    ebx,edx
c002631b:	89 c7                	mov    edi,eax
c002631d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026320:	85 db                	test   ebx,ebx
c0026322:	75 48                	jne    c002636c <__divdi3+0x94>
c0026324:	39 ef                	cmp    edi,ebp
c0026326:	76 24                	jbe    c002634c <__divdi3+0x74>
c0026328:	89 ea                	mov    edx,ebp
c002632a:	f7 f7                	div    edi
c002632c:	89 c1                	mov    ecx,eax
c002632e:	31 f6                	xor    esi,esi
c0026330:	89 c8                	mov    eax,ecx
c0026332:	89 f2                	mov    edx,esi
c0026334:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026338:	85 c9                	test   ecx,ecx
c002633a:	74 07                	je     c0026343 <__divdi3+0x6b>
c002633c:	f7 d8                	neg    eax
c002633e:	83 d2 00             	adc    edx,0x0
c0026341:	f7 da                	neg    edx
c0026343:	83 c4 1c             	add    esp,0x1c
c0026346:	5b                   	pop    ebx
c0026347:	5e                   	pop    esi
c0026348:	5f                   	pop    edi
c0026349:	5d                   	pop    ebp
c002634a:	c3                   	ret    
c002634b:	90                   	nop
c002634c:	85 ff                	test   edi,edi
c002634e:	75 0b                	jne    c002635b <__divdi3+0x83>
c0026350:	b8 01 00 00 00       	mov    eax,0x1
c0026355:	31 d2                	xor    edx,edx
c0026357:	f7 f3                	div    ebx
c0026359:	89 c7                	mov    edi,eax
c002635b:	31 d2                	xor    edx,edx
c002635d:	89 e8                	mov    eax,ebp
c002635f:	f7 f7                	div    edi
c0026361:	89 c6                	mov    esi,eax
c0026363:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026366:	f7 f7                	div    edi
c0026368:	89 c1                	mov    ecx,eax
c002636a:	eb c4                	jmp    c0026330 <__divdi3+0x58>
c002636c:	39 eb                	cmp    ebx,ebp
c002636e:	77 3c                	ja     c00263ac <__divdi3+0xd4>
c0026370:	0f bd f3             	bsr    esi,ebx
c0026373:	83 f6 1f             	xor    esi,0x1f
c0026376:	75 40                	jne    c00263b8 <__divdi3+0xe0>
c0026378:	39 eb                	cmp    ebx,ebp
c002637a:	72 09                	jb     c0026385 <__divdi3+0xad>
c002637c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002637f:	0f 87 97 00 00 00    	ja     c002641c <__divdi3+0x144>
c0026385:	b9 01 00 00 00       	mov    ecx,0x1
c002638a:	eb a4                	jmp    c0026330 <__divdi3+0x58>
c002638c:	f7 d9                	neg    ecx
c002638e:	83 d3 00             	adc    ebx,0x0
c0026391:	f7 db                	neg    ebx
c0026393:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026396:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002639a:	89 dd                	mov    ebp,ebx
c002639c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00263a4:	e9 5f ff ff ff       	jmp    c0026308 <__divdi3+0x30>
c00263a9:	8d 76 00             	lea    esi,[esi+0x0]
c00263ac:	31 f6                	xor    esi,esi
c00263ae:	31 c9                	xor    ecx,ecx
c00263b0:	e9 7b ff ff ff       	jmp    c0026330 <__divdi3+0x58>
c00263b5:	8d 76 00             	lea    esi,[esi+0x0]
c00263b8:	b8 20 00 00 00       	mov    eax,0x20
c00263bd:	29 f0                	sub    eax,esi
c00263bf:	89 f1                	mov    ecx,esi
c00263c1:	d3 e3                	shl    ebx,cl
c00263c3:	89 fa                	mov    edx,edi
c00263c5:	88 c1                	mov    cl,al
c00263c7:	d3 ea                	shr    edx,cl
c00263c9:	09 da                	or     edx,ebx
c00263cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00263cf:	89 f1                	mov    ecx,esi
c00263d1:	d3 e7                	shl    edi,cl
c00263d3:	89 eb                	mov    ebx,ebp
c00263d5:	88 c1                	mov    cl,al
c00263d7:	d3 eb                	shr    ebx,cl
c00263d9:	89 f1                	mov    ecx,esi
c00263db:	d3 e5                	shl    ebp,cl
c00263dd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00263e0:	88 c1                	mov    cl,al
c00263e2:	d3 ea                	shr    edx,cl
c00263e4:	09 d5                	or     ebp,edx
c00263e6:	89 e8                	mov    eax,ebp
c00263e8:	89 da                	mov    edx,ebx
c00263ea:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00263ee:	89 d3                	mov    ebx,edx
c00263f0:	89 c5                	mov    ebp,eax
c00263f2:	f7 e7                	mul    edi
c00263f4:	39 d3                	cmp    ebx,edx
c00263f6:	72 18                	jb     c0026410 <__divdi3+0x138>
c00263f8:	74 0a                	je     c0026404 <__divdi3+0x12c>
c00263fa:	89 e9                	mov    ecx,ebp
c00263fc:	31 f6                	xor    esi,esi
c00263fe:	e9 2d ff ff ff       	jmp    c0026330 <__divdi3+0x58>
c0026403:	90                   	nop
c0026404:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026407:	89 f1                	mov    ecx,esi
c0026409:	d3 e7                	shl    edi,cl
c002640b:	39 c7                	cmp    edi,eax
c002640d:	73 eb                	jae    c00263fa <__divdi3+0x122>
c002640f:	90                   	nop
c0026410:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0026413:	31 f6                	xor    esi,esi
c0026415:	e9 16 ff ff ff       	jmp    c0026330 <__divdi3+0x58>
c002641a:	66 90                	xchg   ax,ax
c002641c:	31 c9                	xor    ecx,ecx
c002641e:	e9 0d ff ff ff       	jmp    c0026330 <__divdi3+0x58>
c0026423:	90                   	nop

c0026424 <__moddi3>:
c0026424:	55                   	push   ebp
c0026425:	57                   	push   edi
c0026426:	56                   	push   esi
c0026427:	53                   	push   ebx
c0026428:	83 ec 2c             	sub    esp,0x2c
c002642b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002642f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0026433:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0026437:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002643b:	85 db                	test   ebx,ebx
c002643d:	0f 88 85 00 00 00    	js     c00264c8 <__moddi3+0xa4>
c0026443:	89 de                	mov    esi,ebx
c0026445:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002644d:	89 d7                	mov    edi,edx
c002644f:	85 d2                	test   edx,edx
c0026451:	79 09                	jns    c002645c <__moddi3+0x38>
c0026453:	f7 d8                	neg    eax
c0026455:	83 d2 00             	adc    edx,0x0
c0026458:	f7 da                	neg    edx
c002645a:	89 d7                	mov    edi,edx
c002645c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026460:	89 cd                	mov    ebp,ecx
c0026462:	85 ff                	test   edi,edi
c0026464:	75 52                	jne    c00264b8 <__moddi3+0x94>
c0026466:	89 c3                	mov    ebx,eax
c0026468:	39 f0                	cmp    eax,esi
c002646a:	76 24                	jbe    c0026490 <__moddi3+0x6c>
c002646c:	89 c8                	mov    eax,ecx
c002646e:	89 f2                	mov    edx,esi
c0026470:	f7 f3                	div    ebx
c0026472:	89 d6                	mov    esi,edx
c0026474:	89 f0                	mov    eax,esi
c0026476:	31 d2                	xor    edx,edx
c0026478:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002647c:	85 c9                	test   ecx,ecx
c002647e:	74 07                	je     c0026487 <__moddi3+0x63>
c0026480:	f7 d8                	neg    eax
c0026482:	83 d2 00             	adc    edx,0x0
c0026485:	f7 da                	neg    edx
c0026487:	83 c4 2c             	add    esp,0x2c
c002648a:	5b                   	pop    ebx
c002648b:	5e                   	pop    esi
c002648c:	5f                   	pop    edi
c002648d:	5d                   	pop    ebp
c002648e:	c3                   	ret    
c002648f:	90                   	nop
c0026490:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0026494:	85 db                	test   ebx,ebx
c0026496:	75 0d                	jne    c00264a5 <__moddi3+0x81>
c0026498:	b8 01 00 00 00       	mov    eax,0x1
c002649d:	31 d2                	xor    edx,edx
c002649f:	f7 f7                	div    edi
c00264a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00264a5:	89 f0                	mov    eax,esi
c00264a7:	31 d2                	xor    edx,edx
c00264a9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00264ad:	f7 f7                	div    edi
c00264af:	89 e8                	mov    eax,ebp
c00264b1:	f7 f7                	div    edi
c00264b3:	89 d6                	mov    esi,edx
c00264b5:	eb bd                	jmp    c0026474 <__moddi3+0x50>
c00264b7:	90                   	nop
c00264b8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00264bc:	39 f7                	cmp    edi,esi
c00264be:	76 20                	jbe    c00264e0 <__moddi3+0xbc>
c00264c0:	89 c8                	mov    eax,ecx
c00264c2:	89 f2                	mov    edx,esi
c00264c4:	eb b2                	jmp    c0026478 <__moddi3+0x54>
c00264c6:	66 90                	xchg   ax,ax
c00264c8:	f7 d9                	neg    ecx
c00264ca:	83 d3 00             	adc    ebx,0x0
c00264cd:	f7 db                	neg    ebx
c00264cf:	89 de                	mov    esi,ebx
c00264d1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00264d9:	e9 6f ff ff ff       	jmp    c002644d <__moddi3+0x29>
c00264de:	66 90                	xchg   ax,ax
c00264e0:	0f bd c7             	bsr    eax,edi
c00264e3:	83 f0 1f             	xor    eax,0x1f
c00264e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00264ea:	75 24                	jne    c0026510 <__moddi3+0xec>
c00264ec:	39 f7                	cmp    edi,esi
c00264ee:	72 06                	jb     c00264f6 <__moddi3+0xd2>
c00264f0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00264f4:	77 0c                	ja     c0026502 <__moddi3+0xde>
c00264f6:	89 e9                	mov    ecx,ebp
c00264f8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00264fc:	19 fe                	sbb    esi,edi
c00264fe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026502:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026506:	89 f2                	mov    edx,esi
c0026508:	e9 6b ff ff ff       	jmp    c0026478 <__moddi3+0x54>
c002650d:	8d 76 00             	lea    esi,[esi+0x0]
c0026510:	b8 20 00 00 00       	mov    eax,0x20
c0026515:	89 c2                	mov    edx,eax
c0026517:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002651b:	29 da                	sub    edx,ebx
c002651d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026521:	88 d9                	mov    cl,bl
c0026523:	d3 e7                	shl    edi,cl
c0026525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026529:	88 d1                	mov    cl,dl
c002652b:	d3 e8                	shr    eax,cl
c002652d:	09 c7                	or     edi,eax
c002652f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026533:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026537:	89 d8                	mov    eax,ebx
c0026539:	88 d9                	mov    cl,bl
c002653b:	d3 e7                	shl    edi,cl
c002653d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026541:	89 f3                	mov    ebx,esi
c0026543:	88 d1                	mov    cl,dl
c0026545:	d3 eb                	shr    ebx,cl
c0026547:	89 c7                	mov    edi,eax
c0026549:	88 c1                	mov    cl,al
c002654b:	d3 e6                	shl    esi,cl
c002654d:	89 e8                	mov    eax,ebp
c002654f:	88 d1                	mov    cl,dl
c0026551:	d3 e8                	shr    eax,cl
c0026553:	09 f0                	or     eax,esi
c0026555:	89 f9                	mov    ecx,edi
c0026557:	d3 e5                	shl    ebp,cl
c0026559:	89 da                	mov    edx,ebx
c002655b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002655f:	89 d3                	mov    ebx,edx
c0026561:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026565:	89 c6                	mov    esi,eax
c0026567:	89 d1                	mov    ecx,edx
c0026569:	39 d3                	cmp    ebx,edx
c002656b:	72 27                	jb     c0026594 <__moddi3+0x170>
c002656d:	74 21                	je     c0026590 <__moddi3+0x16c>
c002656f:	29 f5                	sub    ebp,esi
c0026571:	19 cb                	sbb    ebx,ecx
c0026573:	89 de                	mov    esi,ebx
c0026575:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026579:	d3 e6                	shl    esi,cl
c002657b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002657f:	89 f9                	mov    ecx,edi
c0026581:	d3 ed                	shr    ebp,cl
c0026583:	09 ee                	or     esi,ebp
c0026585:	89 f0                	mov    eax,esi
c0026587:	d3 eb                	shr    ebx,cl
c0026589:	89 da                	mov    edx,ebx
c002658b:	e9 e8 fe ff ff       	jmp    c0026478 <__moddi3+0x54>
c0026590:	39 c5                	cmp    ebp,eax
c0026592:	73 db                	jae    c002656f <__moddi3+0x14b>
c0026594:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026598:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002659c:	89 d1                	mov    ecx,edx
c002659e:	89 c6                	mov    esi,eax
c00265a0:	eb cd                	jmp    c002656f <__moddi3+0x14b>
c00265a2:	66 90                	xchg   ax,ax

c00265a4 <__udivdi3>:
c00265a4:	55                   	push   ebp
c00265a5:	57                   	push   edi
c00265a6:	56                   	push   esi
c00265a7:	53                   	push   ebx
c00265a8:	83 ec 1c             	sub    esp,0x1c
c00265ab:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00265af:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00265b3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00265b7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00265bb:	85 d2                	test   edx,edx
c00265bd:	75 41                	jne    c0026600 <__udivdi3+0x5c>
c00265bf:	39 f7                	cmp    edi,esi
c00265c1:	76 15                	jbe    c00265d8 <__udivdi3+0x34>
c00265c3:	89 e8                	mov    eax,ebp
c00265c5:	89 f2                	mov    edx,esi
c00265c7:	f7 f7                	div    edi
c00265c9:	31 db                	xor    ebx,ebx
c00265cb:	89 da                	mov    edx,ebx
c00265cd:	83 c4 1c             	add    esp,0x1c
c00265d0:	5b                   	pop    ebx
c00265d1:	5e                   	pop    esi
c00265d2:	5f                   	pop    edi
c00265d3:	5d                   	pop    ebp
c00265d4:	c3                   	ret    
c00265d5:	8d 76 00             	lea    esi,[esi+0x0]
c00265d8:	89 f9                	mov    ecx,edi
c00265da:	85 ff                	test   edi,edi
c00265dc:	75 0b                	jne    c00265e9 <__udivdi3+0x45>
c00265de:	b8 01 00 00 00       	mov    eax,0x1
c00265e3:	31 d2                	xor    edx,edx
c00265e5:	f7 f7                	div    edi
c00265e7:	89 c1                	mov    ecx,eax
c00265e9:	31 d2                	xor    edx,edx
c00265eb:	89 f0                	mov    eax,esi
c00265ed:	f7 f1                	div    ecx
c00265ef:	89 c3                	mov    ebx,eax
c00265f1:	89 e8                	mov    eax,ebp
c00265f3:	f7 f1                	div    ecx
c00265f5:	89 da                	mov    edx,ebx
c00265f7:	83 c4 1c             	add    esp,0x1c
c00265fa:	5b                   	pop    ebx
c00265fb:	5e                   	pop    esi
c00265fc:	5f                   	pop    edi
c00265fd:	5d                   	pop    ebp
c00265fe:	c3                   	ret    
c00265ff:	90                   	nop
c0026600:	39 f2                	cmp    edx,esi
c0026602:	77 1c                	ja     c0026620 <__udivdi3+0x7c>
c0026604:	0f bd da             	bsr    ebx,edx
c0026607:	83 f3 1f             	xor    ebx,0x1f
c002660a:	75 24                	jne    c0026630 <__udivdi3+0x8c>
c002660c:	39 f2                	cmp    edx,esi
c002660e:	72 08                	jb     c0026618 <__udivdi3+0x74>
c0026610:	39 ef                	cmp    edi,ebp
c0026612:	0f 87 84 00 00 00    	ja     c002669c <__udivdi3+0xf8>
c0026618:	b8 01 00 00 00       	mov    eax,0x1
c002661d:	eb ac                	jmp    c00265cb <__udivdi3+0x27>
c002661f:	90                   	nop
c0026620:	31 db                	xor    ebx,ebx
c0026622:	31 c0                	xor    eax,eax
c0026624:	89 da                	mov    edx,ebx
c0026626:	83 c4 1c             	add    esp,0x1c
c0026629:	5b                   	pop    ebx
c002662a:	5e                   	pop    esi
c002662b:	5f                   	pop    edi
c002662c:	5d                   	pop    ebp
c002662d:	c3                   	ret    
c002662e:	66 90                	xchg   ax,ax
c0026630:	b8 20 00 00 00       	mov    eax,0x20
c0026635:	29 d8                	sub    eax,ebx
c0026637:	88 d9                	mov    cl,bl
c0026639:	d3 e2                	shl    edx,cl
c002663b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002663f:	89 fa                	mov    edx,edi
c0026641:	88 c1                	mov    cl,al
c0026643:	d3 ea                	shr    edx,cl
c0026645:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026649:	09 d1                	or     ecx,edx
c002664b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002664f:	88 d9                	mov    cl,bl
c0026651:	d3 e7                	shl    edi,cl
c0026653:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026657:	89 f7                	mov    edi,esi
c0026659:	88 c1                	mov    cl,al
c002665b:	d3 ef                	shr    edi,cl
c002665d:	88 d9                	mov    cl,bl
c002665f:	d3 e6                	shl    esi,cl
c0026661:	89 ea                	mov    edx,ebp
c0026663:	88 c1                	mov    cl,al
c0026665:	d3 ea                	shr    edx,cl
c0026667:	09 d6                	or     esi,edx
c0026669:	89 f0                	mov    eax,esi
c002666b:	89 fa                	mov    edx,edi
c002666d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026671:	89 d7                	mov    edi,edx
c0026673:	89 c6                	mov    esi,eax
c0026675:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026679:	39 d7                	cmp    edi,edx
c002667b:	72 13                	jb     c0026690 <__udivdi3+0xec>
c002667d:	74 09                	je     c0026688 <__udivdi3+0xe4>
c002667f:	89 f0                	mov    eax,esi
c0026681:	31 db                	xor    ebx,ebx
c0026683:	e9 43 ff ff ff       	jmp    c00265cb <__udivdi3+0x27>
c0026688:	88 d9                	mov    cl,bl
c002668a:	d3 e5                	shl    ebp,cl
c002668c:	39 c5                	cmp    ebp,eax
c002668e:	73 ef                	jae    c002667f <__udivdi3+0xdb>
c0026690:	8d 46 ff             	lea    eax,[esi-0x1]
c0026693:	31 db                	xor    ebx,ebx
c0026695:	e9 31 ff ff ff       	jmp    c00265cb <__udivdi3+0x27>
c002669a:	66 90                	xchg   ax,ax
c002669c:	31 c0                	xor    eax,eax
c002669e:	e9 28 ff ff ff       	jmp    c00265cb <__udivdi3+0x27>
c00266a3:	90                   	nop

c00266a4 <__umoddi3>:
c00266a4:	55                   	push   ebp
c00266a5:	57                   	push   edi
c00266a6:	56                   	push   esi
c00266a7:	53                   	push   ebx
c00266a8:	83 ec 1c             	sub    esp,0x1c
c00266ab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00266af:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00266b3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00266b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00266bb:	89 da                	mov    edx,ebx
c00266bd:	85 c0                	test   eax,eax
c00266bf:	75 37                	jne    c00266f8 <__umoddi3+0x54>
c00266c1:	39 df                	cmp    edi,ebx
c00266c3:	76 13                	jbe    c00266d8 <__umoddi3+0x34>
c00266c5:	89 f0                	mov    eax,esi
c00266c7:	f7 f7                	div    edi
c00266c9:	89 d0                	mov    eax,edx
c00266cb:	31 d2                	xor    edx,edx
c00266cd:	83 c4 1c             	add    esp,0x1c
c00266d0:	5b                   	pop    ebx
c00266d1:	5e                   	pop    esi
c00266d2:	5f                   	pop    edi
c00266d3:	5d                   	pop    ebp
c00266d4:	c3                   	ret    
c00266d5:	8d 76 00             	lea    esi,[esi+0x0]
c00266d8:	89 fd                	mov    ebp,edi
c00266da:	85 ff                	test   edi,edi
c00266dc:	75 0b                	jne    c00266e9 <__umoddi3+0x45>
c00266de:	b8 01 00 00 00       	mov    eax,0x1
c00266e3:	31 d2                	xor    edx,edx
c00266e5:	f7 f7                	div    edi
c00266e7:	89 c5                	mov    ebp,eax
c00266e9:	89 d8                	mov    eax,ebx
c00266eb:	31 d2                	xor    edx,edx
c00266ed:	f7 f5                	div    ebp
c00266ef:	89 f0                	mov    eax,esi
c00266f1:	f7 f5                	div    ebp
c00266f3:	89 d0                	mov    eax,edx
c00266f5:	eb d4                	jmp    c00266cb <__umoddi3+0x27>
c00266f7:	90                   	nop
c00266f8:	89 f1                	mov    ecx,esi
c00266fa:	39 d8                	cmp    eax,ebx
c00266fc:	76 0a                	jbe    c0026708 <__umoddi3+0x64>
c00266fe:	89 f0                	mov    eax,esi
c0026700:	83 c4 1c             	add    esp,0x1c
c0026703:	5b                   	pop    ebx
c0026704:	5e                   	pop    esi
c0026705:	5f                   	pop    edi
c0026706:	5d                   	pop    ebp
c0026707:	c3                   	ret    
c0026708:	0f bd e8             	bsr    ebp,eax
c002670b:	83 f5 1f             	xor    ebp,0x1f
c002670e:	75 1c                	jne    c002672c <__umoddi3+0x88>
c0026710:	39 d8                	cmp    eax,ebx
c0026712:	72 04                	jb     c0026718 <__umoddi3+0x74>
c0026714:	39 f7                	cmp    edi,esi
c0026716:	77 08                	ja     c0026720 <__umoddi3+0x7c>
c0026718:	89 da                	mov    edx,ebx
c002671a:	29 fe                	sub    esi,edi
c002671c:	19 c2                	sbb    edx,eax
c002671e:	89 f1                	mov    ecx,esi
c0026720:	89 c8                	mov    eax,ecx
c0026722:	83 c4 1c             	add    esp,0x1c
c0026725:	5b                   	pop    ebx
c0026726:	5e                   	pop    esi
c0026727:	5f                   	pop    edi
c0026728:	5d                   	pop    ebp
c0026729:	c3                   	ret    
c002672a:	66 90                	xchg   ax,ax
c002672c:	ba 20 00 00 00       	mov    edx,0x20
c0026731:	29 ea                	sub    edx,ebp
c0026733:	89 e9                	mov    ecx,ebp
c0026735:	d3 e0                	shl    eax,cl
c0026737:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002673b:	89 f8                	mov    eax,edi
c002673d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026741:	88 d1                	mov    cl,dl
c0026743:	d3 e8                	shr    eax,cl
c0026745:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026749:	09 c1                	or     ecx,eax
c002674b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002674f:	89 e9                	mov    ecx,ebp
c0026751:	d3 e7                	shl    edi,cl
c0026753:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026757:	89 d8                	mov    eax,ebx
c0026759:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002675d:	88 d1                	mov    cl,dl
c002675f:	d3 e8                	shr    eax,cl
c0026761:	89 c7                	mov    edi,eax
c0026763:	89 e9                	mov    ecx,ebp
c0026765:	d3 e3                	shl    ebx,cl
c0026767:	89 f0                	mov    eax,esi
c0026769:	88 d1                	mov    cl,dl
c002676b:	d3 e8                	shr    eax,cl
c002676d:	09 d8                	or     eax,ebx
c002676f:	89 e9                	mov    ecx,ebp
c0026771:	d3 e6                	shl    esi,cl
c0026773:	89 f3                	mov    ebx,esi
c0026775:	89 fa                	mov    edx,edi
c0026777:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002677b:	89 d1                	mov    ecx,edx
c002677d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026781:	89 c6                	mov    esi,eax
c0026783:	89 d7                	mov    edi,edx
c0026785:	39 d1                	cmp    ecx,edx
c0026787:	72 27                	jb     c00267b0 <__umoddi3+0x10c>
c0026789:	74 21                	je     c00267ac <__umoddi3+0x108>
c002678b:	89 ca                	mov    edx,ecx
c002678d:	29 f3                	sub    ebx,esi
c002678f:	19 fa                	sbb    edx,edi
c0026791:	89 d0                	mov    eax,edx
c0026793:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026797:	d3 e0                	shl    eax,cl
c0026799:	89 e9                	mov    ecx,ebp
c002679b:	d3 eb                	shr    ebx,cl
c002679d:	09 d8                	or     eax,ebx
c002679f:	d3 ea                	shr    edx,cl
c00267a1:	83 c4 1c             	add    esp,0x1c
c00267a4:	5b                   	pop    ebx
c00267a5:	5e                   	pop    esi
c00267a6:	5f                   	pop    edi
c00267a7:	5d                   	pop    ebp
c00267a8:	c3                   	ret    
c00267a9:	8d 76 00             	lea    esi,[esi+0x0]
c00267ac:	39 c3                	cmp    ebx,eax
c00267ae:	73 db                	jae    c002678b <__umoddi3+0xe7>
c00267b0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00267b4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00267b8:	89 d7                	mov    edi,edx
c00267ba:	89 c6                	mov    esi,eax
c00267bc:	eb cd                	jmp    c002678b <__umoddi3+0xe7>

c00267be <__addsf3>:
c00267be:	55                   	push   ebp
c00267bf:	89 e5                	mov    ebp,esp
c00267c1:	57                   	push   edi
c00267c2:	56                   	push   esi
c00267c3:	53                   	push   ebx
c00267c4:	83 ec 08             	sub    esp,0x8
c00267c7:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00267ca:	89 fa                	mov    edx,edi
c00267cc:	89 f8                	mov    eax,edi
c00267ce:	c1 f8 17             	sar    eax,0x17
c00267d1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00267d4:	c1 e2 08             	shl    edx,0x8
c00267d7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00267dd:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00267e0:	89 de                	mov    esi,ebx
c00267e2:	c1 fe 17             	sar    esi,0x17
c00267e5:	c1 e3 08             	shl    ebx,0x8
c00267e8:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00267ee:	31 f0                	xor    eax,esi
c00267f0:	0f 88 3b 01 00 00    	js     c0026931 <__addsf3+0x173>
c00267f6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00267f9:	29 f1                	sub    ecx,esi
c00267fb:	85 c9                	test   ecx,ecx
c00267fd:	7e 54                	jle    c0026853 <__addsf3+0x95>
c00267ff:	89 f0                	mov    eax,esi
c0026801:	84 c0                	test   al,al
c0026803:	75 10                	jne    c0026815 <__addsf3+0x57>
c0026805:	85 db                	test   ebx,ebx
c0026807:	0f 84 aa 02 00 00    	je     c0026ab7 <__addsf3+0x2f9>
c002680d:	49                   	dec    ecx
c002680e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026811:	74 38                	je     c002684b <__addsf3+0x8d>
c0026813:	eb 13                	jmp    c0026828 <__addsf3+0x6a>
c0026815:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026818:	f7 d0                	not    eax
c002681a:	84 c0                	test   al,al
c002681c:	0f 84 95 02 00 00    	je     c0026ab7 <__addsf3+0x2f9>
c0026822:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026828:	83 f9 1f             	cmp    ecx,0x1f
c002682b:	0f 8f 86 02 00 00    	jg     c0026ab7 <__addsf3+0x2f9>
c0026831:	89 de                	mov    esi,ebx
c0026833:	d3 ee                	shr    esi,cl
c0026835:	b8 20 00 00 00       	mov    eax,0x20
c002683a:	29 c8                	sub    eax,ecx
c002683c:	89 c1                	mov    ecx,eax
c002683e:	d3 e3                	shl    ebx,cl
c0026840:	31 c0                	xor    eax,eax
c0026842:	85 db                	test   ebx,ebx
c0026844:	0f 95 c0             	setne  al
c0026847:	09 f0                	or     eax,esi
c0026849:	01 d0                	add    eax,edx
c002684b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002684e:	e9 b6 00 00 00       	jmp    c0026909 <__addsf3+0x14b>
c0026853:	74 5c                	je     c00268b1 <__addsf3+0xf3>
c0026855:	89 f1                	mov    ecx,esi
c0026857:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c002685a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002685d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026861:	75 14                	jne    c0026877 <__addsf3+0xb9>
c0026863:	85 d2                	test   edx,edx
c0026865:	0f 84 4c 02 00 00    	je     c0026ab7 <__addsf3+0x2f9>
c002686b:	49                   	dec    ecx
c002686c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002686f:	0f 84 94 00 00 00    	je     c0026909 <__addsf3+0x14b>
c0026875:	eb 12                	jmp    c0026889 <__addsf3+0xcb>
c0026877:	89 f0                	mov    eax,esi
c0026879:	f7 d0                	not    eax
c002687b:	84 c0                	test   al,al
c002687d:	0f 84 34 02 00 00    	je     c0026ab7 <__addsf3+0x2f9>
c0026883:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026889:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002688c:	83 f9 1f             	cmp    ecx,0x1f
c002688f:	0f 8f 22 02 00 00    	jg     c0026ab7 <__addsf3+0x2f9>
c0026895:	89 d7                	mov    edi,edx
c0026897:	d3 ef                	shr    edi,cl
c0026899:	b8 20 00 00 00       	mov    eax,0x20
c002689e:	29 c8                	sub    eax,ecx
c00268a0:	89 c1                	mov    ecx,eax
c00268a2:	d3 e2                	shl    edx,cl
c00268a4:	31 c0                	xor    eax,eax
c00268a6:	85 d2                	test   edx,edx
c00268a8:	0f 95 c0             	setne  al
c00268ab:	09 f8                	or     eax,edi
c00268ad:	01 d8                	add    eax,ebx
c00268af:	eb 58                	jmp    c0026909 <__addsf3+0x14b>
c00268b1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00268b4:	8d 70 01             	lea    esi,[eax+0x1]
c00268b7:	f7 c6 fe 00 00 00    	test   esi,0xfe
c00268bd:	75 32                	jne    c00268f1 <__addsf3+0x133>
c00268bf:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00268c3:	75 1f                	jne    c00268e4 <__addsf3+0x126>
c00268c5:	85 d2                	test   edx,edx
c00268c7:	0f 84 e0 01 00 00    	je     c0026aad <__addsf3+0x2ef>
c00268cd:	85 db                	test   ebx,ebx
c00268cf:	0f 84 e2 01 00 00    	je     c0026ab7 <__addsf3+0x2f9>
c00268d5:	89 d0                	mov    eax,edx
c00268d7:	01 d8                	add    eax,ebx
c00268d9:	0f 89 a9 01 00 00    	jns    c0026a88 <__addsf3+0x2ca>
c00268df:	e9 9d 01 00 00       	jmp    c0026a81 <__addsf3+0x2c3>
c00268e4:	85 d2                	test   edx,edx
c00268e6:	0f 85 cb 01 00 00    	jne    c0026ab7 <__addsf3+0x2f9>
c00268ec:	e9 bc 01 00 00       	jmp    c0026aad <__addsf3+0x2ef>
c00268f1:	31 c0                	xor    eax,eax
c00268f3:	89 f1                	mov    ecx,esi
c00268f5:	f7 d1                	not    ecx
c00268f7:	84 c9                	test   cl,cl
c00268f9:	0f 84 90 01 00 00    	je     c0026a8f <__addsf3+0x2d1>
c00268ff:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026902:	d1 e8                	shr    eax,1
c0026904:	e9 86 01 00 00       	jmp    c0026a8f <__addsf3+0x2d1>
c0026909:	85 c0                	test   eax,eax
c002690b:	0f 89 7e 01 00 00    	jns    c0026a8f <__addsf3+0x2d1>
c0026911:	46                   	inc    esi
c0026912:	89 f2                	mov    edx,esi
c0026914:	f7 d2                	not    edx
c0026916:	84 d2                	test   dl,dl
c0026918:	0f 84 6f 01 00 00    	je     c0026a8d <__addsf3+0x2cf>
c002691e:	89 c2                	mov    edx,eax
c0026920:	83 e2 01             	and    edx,0x1
c0026923:	d1 e8                	shr    eax,1
c0026925:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002692a:	09 d0                	or     eax,edx
c002692c:	e9 5e 01 00 00       	jmp    c0026a8f <__addsf3+0x2d1>
c0026931:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026935:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026938:	89 f0                	mov    eax,esi
c002693a:	0f b6 c0             	movzx  eax,al
c002693d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026940:	29 c1                	sub    ecx,eax
c0026942:	85 c9                	test   ecx,ecx
c0026944:	7e 55                	jle    c002699b <__addsf3+0x1dd>
c0026946:	85 c0                	test   eax,eax
c0026948:	75 11                	jne    c002695b <__addsf3+0x19d>
c002694a:	85 db                	test   ebx,ebx
c002694c:	0f 84 65 01 00 00    	je     c0026ab7 <__addsf3+0x2f9>
c0026952:	49                   	dec    ecx
c0026953:	75 19                	jne    c002696e <__addsf3+0x1b0>
c0026955:	89 d0                	mov    eax,edx
c0026957:	29 d8                	sub    eax,ebx
c0026959:	eb 38                	jmp    c0026993 <__addsf3+0x1d5>
c002695b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002695e:	f7 d0                	not    eax
c0026960:	84 c0                	test   al,al
c0026962:	0f 84 4f 01 00 00    	je     c0026ab7 <__addsf3+0x2f9>
c0026968:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002696e:	83 f9 1f             	cmp    ecx,0x1f
c0026971:	0f 8f 40 01 00 00    	jg     c0026ab7 <__addsf3+0x2f9>
c0026977:	89 de                	mov    esi,ebx
c0026979:	d3 ee                	shr    esi,cl
c002697b:	b8 20 00 00 00       	mov    eax,0x20
c0026980:	29 c8                	sub    eax,ecx
c0026982:	89 c1                	mov    ecx,eax
c0026984:	d3 e3                	shl    ebx,cl
c0026986:	31 c0                	xor    eax,eax
c0026988:	85 db                	test   ebx,ebx
c002698a:	0f 95 c0             	setne  al
c002698d:	09 f0                	or     eax,esi
c002698f:	29 c2                	sub    edx,eax
c0026991:	89 d0                	mov    eax,edx
c0026993:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026996:	e9 af 00 00 00       	jmp    c0026a4a <__addsf3+0x28c>
c002699b:	74 5c                	je     c00269f9 <__addsf3+0x23b>
c002699d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c00269a0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00269a3:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00269a7:	75 14                	jne    c00269bd <__addsf3+0x1ff>
c00269a9:	85 d2                	test   edx,edx
c00269ab:	0f 84 06 01 00 00    	je     c0026ab7 <__addsf3+0x2f9>
c00269b1:	48                   	dec    eax
c00269b2:	75 1b                	jne    c00269cf <__addsf3+0x211>
c00269b4:	89 d8                	mov    eax,ebx
c00269b6:	29 d0                	sub    eax,edx
c00269b8:	e9 8d 00 00 00       	jmp    c0026a4a <__addsf3+0x28c>
c00269bd:	89 f1                	mov    ecx,esi
c00269bf:	f7 d1                	not    ecx
c00269c1:	84 c9                	test   cl,cl
c00269c3:	0f 84 ee 00 00 00    	je     c0026ab7 <__addsf3+0x2f9>
c00269c9:	81 ca 00 00 00 80    	or     edx,0x80000000
c00269cf:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00269d2:	83 f8 1f             	cmp    eax,0x1f
c00269d5:	0f 8f dc 00 00 00    	jg     c0026ab7 <__addsf3+0x2f9>
c00269db:	89 d7                	mov    edi,edx
c00269dd:	88 c1                	mov    cl,al
c00269df:	d3 ef                	shr    edi,cl
c00269e1:	b9 20 00 00 00       	mov    ecx,0x20
c00269e6:	29 c1                	sub    ecx,eax
c00269e8:	d3 e2                	shl    edx,cl
c00269ea:	31 c0                	xor    eax,eax
c00269ec:	85 d2                	test   edx,edx
c00269ee:	0f 95 c0             	setne  al
c00269f1:	09 f8                	or     eax,edi
c00269f3:	29 c3                	sub    ebx,eax
c00269f5:	89 d8                	mov    eax,ebx
c00269f7:	eb 51                	jmp    c0026a4a <__addsf3+0x28c>
c00269f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00269fc:	40                   	inc    eax
c00269fd:	a8 fe                	test   al,0xfe
c00269ff:	75 3d                	jne    c0026a3e <__addsf3+0x280>
c0026a01:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026a05:	0f 85 a7 00 00 00    	jne    c0026ab2 <__addsf3+0x2f4>
c0026a0b:	85 d2                	test   edx,edx
c0026a0d:	75 12                	jne    c0026a21 <__addsf3+0x263>
c0026a0f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026a12:	85 db                	test   ebx,ebx
c0026a14:	0f 85 9d 00 00 00    	jne    c0026ab7 <__addsf3+0x2f9>
c0026a1a:	31 ff                	xor    edi,edi
c0026a1c:	e9 96 00 00 00       	jmp    c0026ab7 <__addsf3+0x2f9>
c0026a21:	85 db                	test   ebx,ebx
c0026a23:	0f 84 8e 00 00 00    	je     c0026ab7 <__addsf3+0x2f9>
c0026a29:	89 d0                	mov    eax,edx
c0026a2b:	29 d8                	sub    eax,ebx
c0026a2d:	79 06                	jns    c0026a35 <__addsf3+0x277>
c0026a2f:	89 d8                	mov    eax,ebx
c0026a31:	29 d0                	sub    eax,edx
c0026a33:	eb 5a                	jmp    c0026a8f <__addsf3+0x2d1>
c0026a35:	bf 00 00 00 00       	mov    edi,0x0
c0026a3a:	74 7b                	je     c0026ab7 <__addsf3+0x2f9>
c0026a3c:	eb 4a                	jmp    c0026a88 <__addsf3+0x2ca>
c0026a3e:	89 d0                	mov    eax,edx
c0026a40:	29 d8                	sub    eax,ebx
c0026a42:	79 12                	jns    c0026a56 <__addsf3+0x298>
c0026a44:	89 d8                	mov    eax,ebx
c0026a46:	29 d0                	sub    eax,edx
c0026a48:	eb 09                	jmp    c0026a53 <__addsf3+0x295>
c0026a4a:	85 c0                	test   eax,eax
c0026a4c:	79 41                	jns    c0026a8f <__addsf3+0x2d1>
c0026a4e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026a53:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026a56:	31 f6                	xor    esi,esi
c0026a58:	85 c0                	test   eax,eax
c0026a5a:	74 33                	je     c0026a8f <__addsf3+0x2d1>
c0026a5c:	0f bd c8             	bsr    ecx,eax
c0026a5f:	83 f1 1f             	xor    ecx,0x1f
c0026a62:	d3 e0                	shl    eax,cl
c0026a64:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026a68:	39 ca                	cmp    edx,ecx
c0026a6a:	7f 10                	jg     c0026a7c <__addsf3+0x2be>
c0026a6c:	29 d1                	sub    ecx,edx
c0026a6e:	41                   	inc    ecx
c0026a6f:	d3 e8                	shr    eax,cl
c0026a71:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026a74:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026a7a:	eb 13                	jmp    c0026a8f <__addsf3+0x2d1>
c0026a7c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026a7f:	29 ce                	sub    esi,ecx
c0026a81:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026a86:	eb 07                	jmp    c0026a8f <__addsf3+0x2d1>
c0026a88:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026a8b:	eb 02                	jmp    c0026a8f <__addsf3+0x2d1>
c0026a8d:	31 c0                	xor    eax,eax
c0026a8f:	89 c2                	mov    edx,eax
c0026a91:	c1 ea 08             	shr    edx,0x8
c0026a94:	a8 7f                	test   al,0x7f
c0026a96:	0f 95 c1             	setne  cl
c0026a99:	09 d1                	or     ecx,edx
c0026a9b:	83 e1 01             	and    ecx,0x1
c0026a9e:	c1 e8 07             	shr    eax,0x7
c0026aa1:	21 c8                	and    eax,ecx
c0026aa3:	c1 e6 17             	shl    esi,0x17
c0026aa6:	09 d6                	or     esi,edx
c0026aa8:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026aab:	eb 0a                	jmp    c0026ab7 <__addsf3+0x2f9>
c0026aad:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026ab0:	eb 05                	jmp    c0026ab7 <__addsf3+0x2f9>
c0026ab2:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026ab7:	89 f8                	mov    eax,edi
c0026ab9:	5a                   	pop    edx
c0026aba:	59                   	pop    ecx
c0026abb:	5b                   	pop    ebx
c0026abc:	5e                   	pop    esi
c0026abd:	5f                   	pop    edi
c0026abe:	5d                   	pop    ebp
c0026abf:	c3                   	ret    

c0026ac0 <__subsf3>:
c0026ac0:	55                   	push   ebp
c0026ac1:	89 e5                	mov    ebp,esp
c0026ac3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026ac6:	05 00 00 00 80       	add    eax,0x80000000
c0026acb:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026ace:	5d                   	pop    ebp
c0026acf:	e9 ea fc ff ff       	jmp    c00267be <__addsf3>

c0026ad4 <__negsf2>:
c0026ad4:	55                   	push   ebp
c0026ad5:	89 e5                	mov    ebp,esp
c0026ad7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026ada:	05 00 00 00 80       	add    eax,0x80000000
c0026adf:	5d                   	pop    ebp
c0026ae0:	c3                   	ret    

c0026ae1 <__mulsf3>:
c0026ae1:	55                   	push   ebp
c0026ae2:	89 e5                	mov    ebp,esp
c0026ae4:	57                   	push   edi
c0026ae5:	56                   	push   esi
c0026ae6:	53                   	push   ebx
c0026ae7:	83 ec 1c             	sub    esp,0x1c
c0026aea:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026aed:	89 f0                	mov    eax,esi
c0026aef:	89 f1                	mov    ecx,esi
c0026af1:	c1 f9 17             	sar    ecx,0x17
c0026af4:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026af7:	c1 e0 08             	shl    eax,0x8
c0026afa:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026aff:	89 c1                	mov    ecx,eax
c0026b01:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026b04:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026b07:	89 c7                	mov    edi,eax
c0026b09:	c1 ff 17             	sar    edi,0x17
c0026b0c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026b10:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026b13:	89 f8                	mov    eax,edi
c0026b15:	0f b6 c0             	movzx  eax,al
c0026b18:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026b1b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026b1f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026b22:	42                   	inc    edx
c0026b23:	80 e2 fe             	and    dl,0xfe
c0026b26:	75 7b                	jne    c0026ba3 <__mulsf3+0xc2>
c0026b28:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026b2c:	74 54                	je     c0026b82 <__mulsf3+0xa1>
c0026b2e:	85 c9                	test   ecx,ecx
c0026b30:	0f 85 64 01 00 00    	jne    c0026c9a <__mulsf3+0x1b9>
c0026b36:	8d 57 01             	lea    edx,[edi+0x1]
c0026b39:	80 e2 fe             	and    dl,0xfe
c0026b3c:	75 1f                	jne    c0026b5d <__mulsf3+0x7c>
c0026b3e:	85 c0                	test   eax,eax
c0026b40:	b8 00 00 00 00       	mov    eax,0x0
c0026b45:	74 29                	je     c0026b70 <__mulsf3+0x8f>
c0026b47:	53                   	push   ebx
c0026b48:	53                   	push   ebx
c0026b49:	50                   	push   eax
c0026b4a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026b4d:	e8 96 05 00 00       	call   c00270e8 <__nesf2>
c0026b52:	83 c4 10             	add    esp,0x10
c0026b55:	85 c0                	test   eax,eax
c0026b57:	0f 85 3a 01 00 00    	jne    c0026c97 <__mulsf3+0x1b6>
c0026b5d:	85 ff                	test   edi,edi
c0026b5f:	0f 89 35 01 00 00    	jns    c0026c9a <__mulsf3+0x1b9>
c0026b65:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026b6b:	e9 2a 01 00 00       	jmp    c0026c9a <__mulsf3+0x1b9>
c0026b70:	51                   	push   ecx
c0026b71:	51                   	push   ecx
c0026b72:	50                   	push   eax
c0026b73:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026b76:	e8 6d 05 00 00       	call   c00270e8 <__nesf2>
c0026b7b:	83 c4 10             	add    esp,0x10
c0026b7e:	85 c0                	test   eax,eax
c0026b80:	eb 15                	jmp    c0026b97 <__mulsf3+0xb6>
c0026b82:	85 c9                	test   ecx,ecx
c0026b84:	74 0b                	je     c0026b91 <__mulsf3+0xb0>
c0026b86:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026b89:	01 c9                	add    ecx,ecx
c0026b8b:	78 16                	js     c0026ba3 <__mulsf3+0xc2>
c0026b8d:	89 d3                	mov    ebx,edx
c0026b8f:	eb f5                	jmp    c0026b86 <__mulsf3+0xa5>
c0026b91:	89 f8                	mov    eax,edi
c0026b93:	f7 d0                	not    eax
c0026b95:	84 c0                	test   al,al
c0026b97:	75 c4                	jne    c0026b5d <__mulsf3+0x7c>
c0026b99:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026b9e:	e9 f7 00 00 00       	jmp    c0026c9a <__mulsf3+0x1b9>
c0026ba3:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026ba6:	c1 e6 08             	shl    esi,0x8
c0026ba9:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026baf:	8d 57 01             	lea    edx,[edi+0x1]
c0026bb2:	80 e2 fe             	and    dl,0xfe
c0026bb5:	75 63                	jne    c0026c1a <__mulsf3+0x139>
c0026bb7:	85 c0                	test   eax,eax
c0026bb9:	74 2f                	je     c0026bea <__mulsf3+0x109>
c0026bbb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026bbf:	0f 89 d2 00 00 00    	jns    c0026c97 <__mulsf3+0x1b6>
c0026bc5:	52                   	push   edx
c0026bc6:	52                   	push   edx
c0026bc7:	6a 00                	push   0x0
c0026bc9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026bcc:	e8 dc 04 00 00       	call   c00270ad <__eqsf2>
c0026bd1:	83 c4 10             	add    esp,0x10
c0026bd4:	85 c0                	test   eax,eax
c0026bd6:	0f 85 bb 00 00 00    	jne    c0026c97 <__mulsf3+0x1b6>
c0026bdc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026bdf:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026be5:	e9 b0 00 00 00       	jmp    c0026c9a <__mulsf3+0x1b9>
c0026bea:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026bed:	50                   	push   eax
c0026bee:	50                   	push   eax
c0026bef:	6a 00                	push   0x0
c0026bf1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026bf4:	e8 b4 04 00 00       	call   c00270ad <__eqsf2>
c0026bf9:	83 c4 10             	add    esp,0x10
c0026bfc:	85 c0                	test   eax,eax
c0026bfe:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026c01:	75 0c                	jne    c0026c0f <__mulsf3+0x12e>
c0026c03:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026c07:	0f 89 8a 00 00 00    	jns    c0026c97 <__mulsf3+0x1b6>
c0026c0d:	eb cd                	jmp    c0026bdc <__mulsf3+0xfb>
c0026c0f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026c12:	01 f6                	add    esi,esi
c0026c14:	78 04                	js     c0026c1a <__mulsf3+0x139>
c0026c16:	89 c3                	mov    ebx,eax
c0026c18:	eb f5                	jmp    c0026c0f <__mulsf3+0x12e>
c0026c1a:	89 c8                	mov    eax,ecx
c0026c1c:	0d 00 00 00 80       	or     eax,0x80000000
c0026c21:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026c27:	f7 e6                	mul    esi
c0026c29:	85 c0                	test   eax,eax
c0026c2b:	0f 95 c0             	setne  al
c0026c2e:	0f b6 c0             	movzx  eax,al
c0026c31:	09 c2                	or     edx,eax
c0026c33:	78 03                	js     c0026c38 <__mulsf3+0x157>
c0026c35:	01 d2                	add    edx,edx
c0026c37:	4b                   	dec    ebx
c0026c38:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026c3e:	7f 22                	jg     c0026c62 <__mulsf3+0x181>
c0026c40:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026c46:	85 db                	test   ebx,ebx
c0026c48:	7f 23                	jg     c0026c6d <__mulsf3+0x18c>
c0026c4a:	83 fb e9             	cmp    ebx,0xffffffe9
c0026c4d:	7c 1a                	jl     c0026c69 <__mulsf3+0x188>
c0026c4f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026c55:	b9 01 00 00 00       	mov    ecx,0x1
c0026c5a:	29 d9                	sub    ecx,ebx
c0026c5c:	d3 ea                	shr    edx,cl
c0026c5e:	31 db                	xor    ebx,ebx
c0026c60:	eb 0b                	jmp    c0026c6d <__mulsf3+0x18c>
c0026c62:	bb ff 00 00 00       	mov    ebx,0xff
c0026c67:	eb 02                	jmp    c0026c6b <__mulsf3+0x18a>
c0026c69:	31 db                	xor    ebx,ebx
c0026c6b:	31 d2                	xor    edx,edx
c0026c6d:	89 d0                	mov    eax,edx
c0026c6f:	c1 e8 08             	shr    eax,0x8
c0026c72:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026c75:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026c7b:	09 fb                	or     ebx,edi
c0026c7d:	c1 e3 17             	shl    ebx,0x17
c0026c80:	09 c3                	or     ebx,eax
c0026c82:	f6 c2 7f             	test   dl,0x7f
c0026c85:	0f 95 c1             	setne  cl
c0026c88:	09 c8                	or     eax,ecx
c0026c8a:	83 e0 01             	and    eax,0x1
c0026c8d:	c1 ea 07             	shr    edx,0x7
c0026c90:	21 c2                	and    edx,eax
c0026c92:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026c95:	eb 03                	jmp    c0026c9a <__mulsf3+0x1b9>
c0026c97:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026c9a:	89 f0                	mov    eax,esi
c0026c9c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026c9f:	5b                   	pop    ebx
c0026ca0:	5e                   	pop    esi
c0026ca1:	5f                   	pop    edi
c0026ca2:	5d                   	pop    ebp
c0026ca3:	c3                   	ret    

c0026ca4 <__divsf3>:
c0026ca4:	55                   	push   ebp
c0026ca5:	89 e5                	mov    ebp,esp
c0026ca7:	57                   	push   edi
c0026ca8:	56                   	push   esi
c0026ca9:	53                   	push   ebx
c0026caa:	83 ec 1c             	sub    esp,0x1c
c0026cad:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026cb0:	89 d8                	mov    eax,ebx
c0026cb2:	89 d9                	mov    ecx,ebx
c0026cb4:	c1 f9 17             	sar    ecx,0x17
c0026cb7:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026cba:	c1 e0 08             	shl    eax,0x8
c0026cbd:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026cc2:	89 c1                	mov    ecx,eax
c0026cc4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026cc7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026cca:	89 c7                	mov    edi,eax
c0026ccc:	c1 ff 17             	sar    edi,0x17
c0026ccf:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026cd3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026cd6:	89 f8                	mov    eax,edi
c0026cd8:	0f b6 c0             	movzx  eax,al
c0026cdb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026cde:	29 c6                	sub    esi,eax
c0026ce0:	83 c6 7f             	add    esi,0x7f
c0026ce3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026ce6:	42                   	inc    edx
c0026ce7:	80 e2 fe             	and    dl,0xfe
c0026cea:	0f 85 9c 00 00 00    	jne    c0026d8c <__divsf3+0xe8>
c0026cf0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026cf4:	74 33                	je     c0026d29 <__divsf3+0x85>
c0026cf6:	85 c9                	test   ecx,ecx
c0026cf8:	0f 85 c7 01 00 00    	jne    c0026ec5 <__divsf3+0x221>
c0026cfe:	8d 57 01             	lea    edx,[edi+0x1]
c0026d01:	80 e2 fe             	and    dl,0xfe
c0026d04:	75 2f                	jne    c0026d35 <__divsf3+0x91>
c0026d06:	85 c0                	test   eax,eax
c0026d08:	74 2b                	je     c0026d35 <__divsf3+0x91>
c0026d0a:	51                   	push   ecx
c0026d0b:	51                   	push   ecx
c0026d0c:	6a 00                	push   0x0
c0026d0e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d11:	e8 d2 03 00 00       	call   c00270e8 <__nesf2>
c0026d16:	83 c4 10             	add    esp,0x10
c0026d19:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026d1c:	85 c0                	test   eax,eax
c0026d1e:	0f 85 a1 01 00 00    	jne    c0026ec5 <__divsf3+0x221>
c0026d24:	e9 92 01 00 00       	jmp    c0026ebb <__divsf3+0x217>
c0026d29:	85 c9                	test   ecx,ecx
c0026d2b:	75 1b                	jne    c0026d48 <__divsf3+0xa4>
c0026d2d:	8d 57 01             	lea    edx,[edi+0x1]
c0026d30:	80 e2 fe             	and    dl,0xfe
c0026d33:	74 1e                	je     c0026d53 <__divsf3+0xaf>
c0026d35:	85 ff                	test   edi,edi
c0026d37:	0f 89 88 01 00 00    	jns    c0026ec5 <__divsf3+0x221>
c0026d3d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0026d43:	e9 7d 01 00 00       	jmp    c0026ec5 <__divsf3+0x221>
c0026d48:	8d 56 ff             	lea    edx,[esi-0x1]
c0026d4b:	01 c9                	add    ecx,ecx
c0026d4d:	78 3d                	js     c0026d8c <__divsf3+0xe8>
c0026d4f:	89 d6                	mov    esi,edx
c0026d51:	eb f5                	jmp    c0026d48 <__divsf3+0xa4>
c0026d53:	85 c0                	test   eax,eax
c0026d55:	b8 00 00 00 00       	mov    eax,0x0
c0026d5a:	74 18                	je     c0026d74 <__divsf3+0xd0>
c0026d5c:	52                   	push   edx
c0026d5d:	52                   	push   edx
c0026d5e:	50                   	push   eax
c0026d5f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d62:	e8 81 03 00 00       	call   c00270e8 <__nesf2>
c0026d67:	83 c4 10             	add    esp,0x10
c0026d6a:	85 c0                	test   eax,eax
c0026d6c:	0f 85 50 01 00 00    	jne    c0026ec2 <__divsf3+0x21e>
c0026d72:	eb c1                	jmp    c0026d35 <__divsf3+0x91>
c0026d74:	56                   	push   esi
c0026d75:	56                   	push   esi
c0026d76:	50                   	push   eax
c0026d77:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d7a:	e8 69 03 00 00       	call   c00270e8 <__nesf2>
c0026d7f:	83 c4 10             	add    esp,0x10
c0026d82:	85 c0                	test   eax,eax
c0026d84:	0f 84 31 01 00 00    	je     c0026ebb <__divsf3+0x217>
c0026d8a:	eb a9                	jmp    c0026d35 <__divsf3+0x91>
c0026d8c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026d8f:	c1 e3 08             	shl    ebx,0x8
c0026d92:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026d98:	8d 57 01             	lea    edx,[edi+0x1]
c0026d9b:	80 e2 fe             	and    dl,0xfe
c0026d9e:	75 71                	jne    c0026e11 <__divsf3+0x16d>
c0026da0:	85 c0                	test   eax,eax
c0026da2:	ba 00 00 00 00       	mov    edx,0x0
c0026da7:	74 2f                	je     c0026dd8 <__divsf3+0x134>
c0026da9:	51                   	push   ecx
c0026daa:	51                   	push   ecx
c0026dab:	52                   	push   edx
c0026dac:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026daf:	e8 f9 02 00 00       	call   c00270ad <__eqsf2>
c0026db4:	83 c4 10             	add    esp,0x10
c0026db7:	85 c0                	test   eax,eax
c0026db9:	0f 85 03 01 00 00    	jne    c0026ec2 <__divsf3+0x21e>
c0026dbf:	31 d2                	xor    edx,edx
c0026dc1:	89 d3                	mov    ebx,edx
c0026dc3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026dc6:	31 f8                	xor    eax,edi
c0026dc8:	0f 89 f7 00 00 00    	jns    c0026ec5 <__divsf3+0x221>
c0026dce:	bb 00 00 00 80       	mov    ebx,0x80000000
c0026dd3:	e9 ed 00 00 00       	jmp    c0026ec5 <__divsf3+0x221>
c0026dd8:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026ddb:	50                   	push   eax
c0026ddc:	50                   	push   eax
c0026ddd:	52                   	push   edx
c0026dde:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026de1:	e8 c7 02 00 00       	call   c00270ad <__eqsf2>
c0026de6:	83 c4 10             	add    esp,0x10
c0026de9:	85 c0                	test   eax,eax
c0026deb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026dee:	75 16                	jne    c0026e06 <__divsf3+0x162>
c0026df0:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026df3:	31 fb                	xor    ebx,edi
c0026df5:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0026dfb:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0026e01:	e9 bf 00 00 00       	jmp    c0026ec5 <__divsf3+0x221>
c0026e06:	8d 46 01             	lea    eax,[esi+0x1]
c0026e09:	01 db                	add    ebx,ebx
c0026e0b:	78 04                	js     c0026e11 <__divsf3+0x16d>
c0026e0d:	89 c6                	mov    esi,eax
c0026e0f:	eb f5                	jmp    c0026e06 <__divsf3+0x162>
c0026e11:	89 c8                	mov    eax,ecx
c0026e13:	0d 00 00 00 80       	or     eax,0x80000000
c0026e18:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026e1e:	31 d2                	xor    edx,edx
c0026e20:	39 d8                	cmp    eax,ebx
c0026e22:	72 07                	jb     c0026e2b <__divsf3+0x187>
c0026e24:	29 d8                	sub    eax,ebx
c0026e26:	ba 01 00 00 00       	mov    edx,0x1
c0026e2b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0026e32:	01 d2                	add    edx,edx
c0026e34:	89 c1                	mov    ecx,eax
c0026e36:	01 c0                	add    eax,eax
c0026e38:	85 c9                	test   ecx,ecx
c0026e3a:	78 04                	js     c0026e40 <__divsf3+0x19c>
c0026e3c:	39 c3                	cmp    ebx,eax
c0026e3e:	77 05                	ja     c0026e45 <__divsf3+0x1a1>
c0026e40:	29 d8                	sub    eax,ebx
c0026e42:	83 ca 01             	or     edx,0x1
c0026e45:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0026e48:	75 e8                	jne    c0026e32 <__divsf3+0x18e>
c0026e4a:	85 c0                	test   eax,eax
c0026e4c:	0f 95 c0             	setne  al
c0026e4f:	0f b6 c0             	movzx  eax,al
c0026e52:	c1 e2 06             	shl    edx,0x6
c0026e55:	09 c2                	or     edx,eax
c0026e57:	78 03                	js     c0026e5c <__divsf3+0x1b8>
c0026e59:	01 d2                	add    edx,edx
c0026e5b:	4e                   	dec    esi
c0026e5c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0026e62:	7f 22                	jg     c0026e86 <__divsf3+0x1e2>
c0026e64:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026e6a:	85 f6                	test   esi,esi
c0026e6c:	7f 23                	jg     c0026e91 <__divsf3+0x1ed>
c0026e6e:	83 fe e9             	cmp    esi,0xffffffe9
c0026e71:	7c 1a                	jl     c0026e8d <__divsf3+0x1e9>
c0026e73:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026e79:	b9 01 00 00 00       	mov    ecx,0x1
c0026e7e:	29 f1                	sub    ecx,esi
c0026e80:	d3 ea                	shr    edx,cl
c0026e82:	31 f6                	xor    esi,esi
c0026e84:	eb 0b                	jmp    c0026e91 <__divsf3+0x1ed>
c0026e86:	be ff 00 00 00       	mov    esi,0xff
c0026e8b:	eb 02                	jmp    c0026e8f <__divsf3+0x1eb>
c0026e8d:	31 f6                	xor    esi,esi
c0026e8f:	31 d2                	xor    edx,edx
c0026e91:	89 d0                	mov    eax,edx
c0026e93:	c1 e8 08             	shr    eax,0x8
c0026e96:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026e99:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026e9f:	09 fe                	or     esi,edi
c0026ea1:	c1 e6 17             	shl    esi,0x17
c0026ea4:	09 c6                	or     esi,eax
c0026ea6:	f6 c2 7f             	test   dl,0x7f
c0026ea9:	0f 95 c1             	setne  cl
c0026eac:	09 c8                	or     eax,ecx
c0026eae:	83 e0 01             	and    eax,0x1
c0026eb1:	c1 ea 07             	shr    edx,0x7
c0026eb4:	21 c2                	and    edx,eax
c0026eb6:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0026eb9:	eb 0a                	jmp    c0026ec5 <__divsf3+0x221>
c0026ebb:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0026ec0:	eb 03                	jmp    c0026ec5 <__divsf3+0x221>
c0026ec2:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026ec5:	89 d8                	mov    eax,ebx
c0026ec7:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026eca:	5b                   	pop    ebx
c0026ecb:	5e                   	pop    esi
c0026ecc:	5f                   	pop    edi
c0026ecd:	5d                   	pop    ebp
c0026ece:	c3                   	ret    

c0026ecf <__floatsisf>:
c0026ecf:	55                   	push   ebp
c0026ed0:	89 e5                	mov    ebp,esp
c0026ed2:	53                   	push   ebx
c0026ed3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026ed6:	85 d2                	test   edx,edx
c0026ed8:	7e 2b                	jle    c0026f05 <__floatsisf+0x36>
c0026eda:	0f bd ca             	bsr    ecx,edx
c0026edd:	83 f1 1f             	xor    ecx,0x1f
c0026ee0:	d3 e2                	shl    edx,cl
c0026ee2:	89 d0                	mov    eax,edx
c0026ee4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026ee9:	89 c3                	mov    ebx,eax
c0026eeb:	c1 eb 08             	shr    ebx,0x8
c0026eee:	80 e2 7f             	and    dl,0x7f
c0026ef1:	0f 95 c2             	setne  dl
c0026ef4:	09 da                	or     edx,ebx
c0026ef6:	83 e2 01             	and    edx,0x1
c0026ef9:	c1 e8 07             	shr    eax,0x7
c0026efc:	21 c2                	and    edx,eax
c0026efe:	b8 9e 00 00 00       	mov    eax,0x9e
c0026f03:	eb 32                	jmp    c0026f37 <__floatsisf+0x68>
c0026f05:	b8 00 00 00 00       	mov    eax,0x0
c0026f0a:	74 34                	je     c0026f40 <__floatsisf+0x71>
c0026f0c:	f7 da                	neg    edx
c0026f0e:	0f bd ca             	bsr    ecx,edx
c0026f11:	83 f1 1f             	xor    ecx,0x1f
c0026f14:	d3 e2                	shl    edx,cl
c0026f16:	89 d0                	mov    eax,edx
c0026f18:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f1d:	89 c3                	mov    ebx,eax
c0026f1f:	c1 eb 08             	shr    ebx,0x8
c0026f22:	80 e2 7f             	and    dl,0x7f
c0026f25:	0f 95 c2             	setne  dl
c0026f28:	09 da                	or     edx,ebx
c0026f2a:	83 e2 01             	and    edx,0x1
c0026f2d:	c1 e8 07             	shr    eax,0x7
c0026f30:	21 c2                	and    edx,eax
c0026f32:	b8 9e 01 00 00       	mov    eax,0x19e
c0026f37:	29 c8                	sub    eax,ecx
c0026f39:	c1 e0 17             	shl    eax,0x17
c0026f3c:	09 d8                	or     eax,ebx
c0026f3e:	01 d0                	add    eax,edx
c0026f40:	5b                   	pop    ebx
c0026f41:	5d                   	pop    ebp
c0026f42:	c3                   	ret    

c0026f43 <__floatunsisf>:
c0026f43:	55                   	push   ebp
c0026f44:	89 e5                	mov    ebp,esp
c0026f46:	53                   	push   ebx
c0026f47:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026f4a:	31 c0                	xor    eax,eax
c0026f4c:	85 d2                	test   edx,edx
c0026f4e:	74 32                	je     c0026f82 <__floatunsisf+0x3f>
c0026f50:	0f bd ca             	bsr    ecx,edx
c0026f53:	83 f1 1f             	xor    ecx,0x1f
c0026f56:	d3 e2                	shl    edx,cl
c0026f58:	89 d0                	mov    eax,edx
c0026f5a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f5f:	89 c3                	mov    ebx,eax
c0026f61:	c1 eb 08             	shr    ebx,0x8
c0026f64:	80 e2 7f             	and    dl,0x7f
c0026f67:	0f 95 c2             	setne  dl
c0026f6a:	09 da                	or     edx,ebx
c0026f6c:	83 e2 01             	and    edx,0x1
c0026f6f:	c1 e8 07             	shr    eax,0x7
c0026f72:	21 c2                	and    edx,eax
c0026f74:	b8 9e 00 00 00       	mov    eax,0x9e
c0026f79:	29 c8                	sub    eax,ecx
c0026f7b:	c1 e0 17             	shl    eax,0x17
c0026f7e:	09 d8                	or     eax,ebx
c0026f80:	01 d0                	add    eax,edx
c0026f82:	5b                   	pop    ebx
c0026f83:	5d                   	pop    ebp
c0026f84:	c3                   	ret    

c0026f85 <__fixsfsi>:
c0026f85:	55                   	push   ebp
c0026f86:	89 e5                	mov    ebp,esp
c0026f88:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026f8b:	89 d1                	mov    ecx,edx
c0026f8d:	c1 e1 08             	shl    ecx,0x8
c0026f90:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0026f96:	c1 fa 17             	sar    edx,0x17
c0026f99:	78 1c                	js     c0026fb7 <__fixsfsi+0x32>
c0026f9b:	83 ea 7f             	sub    edx,0x7f
c0026f9e:	31 c0                	xor    eax,eax
c0026fa0:	83 fa 1e             	cmp    edx,0x1e
c0026fa3:	77 40                	ja     c0026fe5 <__fixsfsi+0x60>
c0026fa5:	89 c8                	mov    eax,ecx
c0026fa7:	0d 00 00 00 80       	or     eax,0x80000000
c0026fac:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026fb1:	29 d1                	sub    ecx,edx
c0026fb3:	d3 e8                	shr    eax,cl
c0026fb5:	eb 2e                	jmp    c0026fe5 <__fixsfsi+0x60>
c0026fb7:	31 c0                	xor    eax,eax
c0026fb9:	81 c2 81 00 00 00    	add    edx,0x81
c0026fbf:	78 24                	js     c0026fe5 <__fixsfsi+0x60>
c0026fc1:	83 fa 1e             	cmp    edx,0x1e
c0026fc4:	7e 09                	jle    c0026fcf <__fixsfsi+0x4a>
c0026fc6:	83 fa 1f             	cmp    edx,0x1f
c0026fc9:	75 18                	jne    c0026fe3 <__fixsfsi+0x5e>
c0026fcb:	85 c9                	test   ecx,ecx
c0026fcd:	75 14                	jne    c0026fe3 <__fixsfsi+0x5e>
c0026fcf:	89 c8                	mov    eax,ecx
c0026fd1:	0d 00 00 00 80       	or     eax,0x80000000
c0026fd6:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026fdb:	29 d1                	sub    ecx,edx
c0026fdd:	d3 e8                	shr    eax,cl
c0026fdf:	f7 d8                	neg    eax
c0026fe1:	eb 02                	jmp    c0026fe5 <__fixsfsi+0x60>
c0026fe3:	31 c0                	xor    eax,eax
c0026fe5:	5d                   	pop    ebp
c0026fe6:	c3                   	ret    

c0026fe7 <__fixunssfsi>:
c0026fe7:	55                   	push   ebp
c0026fe8:	89 e5                	mov    ebp,esp
c0026fea:	53                   	push   ebx
c0026feb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026fee:	89 d3                	mov    ebx,edx
c0026ff0:	c1 fb 17             	sar    ebx,0x17
c0026ff3:	83 eb 7f             	sub    ebx,0x7f
c0026ff6:	31 c0                	xor    eax,eax
c0026ff8:	83 fb 1f             	cmp    ebx,0x1f
c0026ffb:	77 18                	ja     c0027015 <__fixunssfsi+0x2e>
c0026ffd:	89 d0                	mov    eax,edx
c0026fff:	c1 e0 08             	shl    eax,0x8
c0027002:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027007:	0d 00 00 00 80       	or     eax,0x80000000
c002700c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027011:	29 d9                	sub    ecx,ebx
c0027013:	d3 e8                	shr    eax,cl
c0027015:	5b                   	pop    ebx
c0027016:	5d                   	pop    ebp
c0027017:	c3                   	ret    

c0027018 <__cmpsf2>:
c0027018:	55                   	push   ebp
c0027019:	89 e5                	mov    ebp,esp
c002701b:	57                   	push   edi
c002701c:	56                   	push   esi
c002701d:	53                   	push   ebx
c002701e:	83 ec 24             	sub    esp,0x24
c0027021:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027024:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027027:	e8 4f 10 00 00       	call   c002807b <__truncdfsf2>
c002702c:	5a                   	pop    edx
c002702d:	59                   	pop    ecx
c002702e:	89 c3                	mov    ebx,eax
c0027030:	c1 e8 17             	shr    eax,0x17
c0027033:	0f b6 f0             	movzx  esi,al
c0027036:	89 d8                	mov    eax,ebx
c0027038:	c1 e8 1f             	shr    eax,0x1f
c002703b:	31 c6                	xor    esi,eax
c002703d:	c1 e3 08             	shl    ebx,0x8
c0027040:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027043:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027046:	e8 30 10 00 00       	call   c002807b <__truncdfsf2>
c002704b:	83 c4 10             	add    esp,0x10
c002704e:	89 c1                	mov    ecx,eax
c0027050:	c1 e9 17             	shr    ecx,0x17
c0027053:	0f b6 c9             	movzx  ecx,cl
c0027056:	89 c7                	mov    edi,eax
c0027058:	c1 ef 1f             	shr    edi,0x1f
c002705b:	89 ca                	mov    edx,ecx
c002705d:	31 fa                	xor    edx,edi
c002705f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027062:	c1 e0 08             	shl    eax,0x8
c0027065:	89 c2                	mov    edx,eax
c0027067:	89 d8                	mov    eax,ebx
c0027069:	09 d0                	or     eax,edx
c002706b:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027070:	09 f0                	or     eax,esi
c0027072:	75 08                	jne    c002707c <__cmpsf2+0x64>
c0027074:	31 c0                	xor    eax,eax
c0027076:	39 f9                	cmp    ecx,edi
c0027078:	75 0c                	jne    c0027086 <__cmpsf2+0x6e>
c002707a:	eb 29                	jmp    c00270a5 <__cmpsf2+0x8d>
c002707c:	b8 01 00 00 00       	mov    eax,0x1
c0027081:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027084:	7f 1f                	jg     c00270a5 <__cmpsf2+0x8d>
c0027086:	83 c8 ff             	or     eax,0xffffffff
c0027089:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002708c:	7c 17                	jl     c00270a5 <__cmpsf2+0x8d>
c002708e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027094:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002709a:	b8 01 00 00 00       	mov    eax,0x1
c002709f:	39 d3                	cmp    ebx,edx
c00270a1:	77 02                	ja     c00270a5 <__cmpsf2+0x8d>
c00270a3:	19 c0                	sbb    eax,eax
c00270a5:	8d 65 f4             	lea    esp,[ebp-0xc]
c00270a8:	5b                   	pop    ebx
c00270a9:	5e                   	pop    esi
c00270aa:	5f                   	pop    edi
c00270ab:	5d                   	pop    ebp
c00270ac:	c3                   	ret    

c00270ad <__eqsf2>:
c00270ad:	55                   	push   ebp
c00270ae:	89 e5                	mov    ebp,esp
c00270b0:	83 ec 24             	sub    esp,0x24
c00270b3:	6a 01                	push   0x1
c00270b5:	83 ec 0c             	sub    esp,0xc
c00270b8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270bb:	e8 df 10 00 00       	call   c002819f <__extendsfdf2>
c00270c0:	83 c4 10             	add    esp,0x10
c00270c3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00270c6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00270c9:	52                   	push   edx
c00270ca:	50                   	push   eax
c00270cb:	50                   	push   eax
c00270cc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00270cf:	e8 cb 10 00 00       	call   c002819f <__extendsfdf2>
c00270d4:	59                   	pop    ecx
c00270d5:	59                   	pop    ecx
c00270d6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00270d9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00270dc:	52                   	push   edx
c00270dd:	50                   	push   eax
c00270de:	e8 35 ff ff ff       	call   c0027018 <__cmpsf2>
c00270e3:	83 c4 20             	add    esp,0x20
c00270e6:	c9                   	leave  
c00270e7:	c3                   	ret    

c00270e8 <__nesf2>:
c00270e8:	eb c3                	jmp    c00270ad <__eqsf2>

c00270ea <__gtsf2>:
c00270ea:	55                   	push   ebp
c00270eb:	89 e5                	mov    ebp,esp
c00270ed:	83 ec 24             	sub    esp,0x24
c00270f0:	6a ff                	push   0xffffffff
c00270f2:	83 ec 0c             	sub    esp,0xc
c00270f5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270f8:	e8 a2 10 00 00       	call   c002819f <__extendsfdf2>
c00270fd:	83 c4 10             	add    esp,0x10
c0027100:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027103:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027106:	52                   	push   edx
c0027107:	50                   	push   eax
c0027108:	50                   	push   eax
c0027109:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002710c:	e8 8e 10 00 00       	call   c002819f <__extendsfdf2>
c0027111:	59                   	pop    ecx
c0027112:	59                   	pop    ecx
c0027113:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027116:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027119:	52                   	push   edx
c002711a:	50                   	push   eax
c002711b:	e8 f8 fe ff ff       	call   c0027018 <__cmpsf2>
c0027120:	83 c4 20             	add    esp,0x20
c0027123:	c9                   	leave  
c0027124:	c3                   	ret    

c0027125 <__gesf2>:
c0027125:	eb c3                	jmp    c00270ea <__gtsf2>

c0027127 <__ltsf2>:
c0027127:	eb 84                	jmp    c00270ad <__eqsf2>

c0027129 <__lesf2>:
c0027129:	eb 82                	jmp    c00270ad <__eqsf2>

c002712b <__adddf3>:
c002712b:	55                   	push   ebp
c002712c:	89 e5                	mov    ebp,esp
c002712e:	57                   	push   edi
c002712f:	56                   	push   esi
c0027130:	53                   	push   ebx
c0027131:	83 ec 24             	sub    esp,0x24
c0027134:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027137:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002713a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002713d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027140:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027143:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027146:	89 c8                	mov    eax,ecx
c0027148:	89 ce                	mov    esi,ecx
c002714a:	c1 fe 14             	sar    esi,0x14
c002714d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027150:	89 fb                	mov    ebx,edi
c0027152:	89 fa                	mov    edx,edi
c0027154:	c1 e2 0b             	shl    edx,0xb
c0027157:	c1 e0 0b             	shl    eax,0xb
c002715a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002715f:	c1 eb 15             	shr    ebx,0x15
c0027162:	09 d8                	or     eax,ebx
c0027164:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027167:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002716a:	c1 fe 14             	sar    esi,0x14
c002716d:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027170:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027173:	89 f3                	mov    ebx,esi
c0027175:	c1 e3 0b             	shl    ebx,0xb
c0027178:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002717b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002717e:	c1 e3 0b             	shl    ebx,0xb
c0027181:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027187:	c1 ee 15             	shr    esi,0x15
c002718a:	09 f3                	or     ebx,esi
c002718c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c002718f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027192:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027195:	0f 88 5f 02 00 00    	js     c00273fa <__adddf3+0x2cf>
c002719b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002719e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00271a1:	85 db                	test   ebx,ebx
c00271a3:	0f 8e c7 00 00 00    	jle    c0027270 <__adddf3+0x145>
c00271a9:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00271b0:	75 1a                	jne    c00271cc <__adddf3+0xa1>
c00271b2:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00271b5:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00271b8:	0f 84 b2 05 00 00    	je     c0027770 <__adddf3+0x645>
c00271be:	4b                   	dec    ebx
c00271bf:	75 23                	jne    c00271e4 <__adddf3+0xb9>
c00271c1:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00271c4:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00271c7:	e9 99 00 00 00       	jmp    c0027265 <__adddf3+0x13a>
c00271cc:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00271cf:	f7 d6                	not    esi
c00271d1:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00271d7:	0f 84 93 05 00 00    	je     c0027770 <__adddf3+0x645>
c00271dd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00271e4:	83 fb 1f             	cmp    ebx,0x1f
c00271e7:	7e 42                	jle    c002722b <__adddf3+0x100>
c00271e9:	83 fb 3f             	cmp    ebx,0x3f
c00271ec:	0f 8f 7e 05 00 00    	jg     c0027770 <__adddf3+0x645>
c00271f2:	83 e3 1f             	and    ebx,0x1f
c00271f5:	89 d9                	mov    ecx,ebx
c00271f7:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00271fa:	d3 ef                	shr    edi,cl
c00271fc:	31 db                	xor    ebx,ebx
c00271fe:	85 c9                	test   ecx,ecx
c0027200:	74 15                	je     c0027217 <__adddf3+0xec>
c0027202:	be 20 00 00 00       	mov    esi,0x20
c0027207:	29 ce                	sub    esi,ecx
c0027209:	89 f1                	mov    ecx,esi
c002720b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002720e:	d3 e6                	shl    esi,cl
c0027210:	31 db                	xor    ebx,ebx
c0027212:	85 f6                	test   esi,esi
c0027214:	0f 95 c3             	setne  bl
c0027217:	31 c9                	xor    ecx,ecx
c0027219:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002721d:	0f 95 c1             	setne  cl
c0027220:	09 cf                	or     edi,ecx
c0027222:	09 fb                	or     ebx,edi
c0027224:	01 da                	add    edx,ebx
c0027226:	83 d0 00             	adc    eax,0x0
c0027229:	eb 3a                	jmp    c0027265 <__adddf3+0x13a>
c002722b:	bf 20 00 00 00       	mov    edi,0x20
c0027230:	29 df                	sub    edi,ebx
c0027232:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027235:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027238:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002723b:	d3 e6                	shl    esi,cl
c002723d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027240:	88 d9                	mov    cl,bl
c0027242:	d3 ef                	shr    edi,cl
c0027244:	09 fe                	or     esi,edi
c0027246:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027249:	88 d9                	mov    cl,bl
c002724b:	d3 ef                	shr    edi,cl
c002724d:	89 fb                	mov    ebx,edi
c002724f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027252:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027255:	d3 e7                	shl    edi,cl
c0027257:	85 ff                	test   edi,edi
c0027259:	0f 95 c1             	setne  cl
c002725c:	0f b6 c9             	movzx  ecx,cl
c002725f:	09 ce                	or     esi,ecx
c0027261:	01 f2                	add    edx,esi
c0027263:	11 d8                	adc    eax,ebx
c0027265:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027268:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002726b:	e9 52 01 00 00       	jmp    c00273c2 <__adddf3+0x297>
c0027270:	0f 84 d5 00 00 00    	je     c002734b <__adddf3+0x220>
c0027276:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027279:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c002727c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002727f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027282:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027289:	75 20                	jne    c00272ab <__adddf3+0x180>
c002728b:	89 d6                	mov    esi,edx
c002728d:	09 c6                	or     esi,eax
c002728f:	0f 84 db 04 00 00    	je     c0027770 <__adddf3+0x645>
c0027295:	4b                   	dec    ebx
c0027296:	75 29                	jne    c00272c1 <__adddf3+0x196>
c0027298:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002729b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002729e:	01 d1                	add    ecx,edx
c00272a0:	11 c6                	adc    esi,eax
c00272a2:	89 f0                	mov    eax,esi
c00272a4:	89 ca                	mov    edx,ecx
c00272a6:	e9 17 01 00 00       	jmp    c00273c2 <__adddf3+0x297>
c00272ab:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00272ae:	f7 d6                	not    esi
c00272b0:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00272b6:	0f 84 b4 04 00 00    	je     c0027770 <__adddf3+0x645>
c00272bc:	0d 00 00 00 80       	or     eax,0x80000000
c00272c1:	83 fb 1f             	cmp    ebx,0x1f
c00272c4:	7e 48                	jle    c002730e <__adddf3+0x1e3>
c00272c6:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00272c9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00272cc:	83 fb 3f             	cmp    ebx,0x3f
c00272cf:	0f 8f 9b 04 00 00    	jg     c0027770 <__adddf3+0x645>
c00272d5:	83 e3 1f             	and    ebx,0x1f
c00272d8:	89 d9                	mov    ecx,ebx
c00272da:	89 c7                	mov    edi,eax
c00272dc:	d3 ef                	shr    edi,cl
c00272de:	31 db                	xor    ebx,ebx
c00272e0:	85 c9                	test   ecx,ecx
c00272e2:	74 12                	je     c00272f6 <__adddf3+0x1cb>
c00272e4:	be 20 00 00 00       	mov    esi,0x20
c00272e9:	29 ce                	sub    esi,ecx
c00272eb:	89 f1                	mov    ecx,esi
c00272ed:	d3 e0                	shl    eax,cl
c00272ef:	31 db                	xor    ebx,ebx
c00272f1:	85 c0                	test   eax,eax
c00272f3:	0f 95 c3             	setne  bl
c00272f6:	31 c0                	xor    eax,eax
c00272f8:	85 d2                	test   edx,edx
c00272fa:	0f 95 c0             	setne  al
c00272fd:	09 c7                	or     edi,eax
c00272ff:	09 fb                	or     ebx,edi
c0027301:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027304:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027307:	01 da                	add    edx,ebx
c0027309:	83 d6 00             	adc    esi,0x0
c002730c:	eb 39                	jmp    c0027347 <__adddf3+0x21c>
c002730e:	be 20 00 00 00       	mov    esi,0x20
c0027313:	29 de                	sub    esi,ebx
c0027315:	89 c7                	mov    edi,eax
c0027317:	89 f1                	mov    ecx,esi
c0027319:	d3 e7                	shl    edi,cl
c002731b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002731e:	89 d7                	mov    edi,edx
c0027320:	88 d9                	mov    cl,bl
c0027322:	d3 ef                	shr    edi,cl
c0027324:	89 f9                	mov    ecx,edi
c0027326:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027329:	09 cf                	or     edi,ecx
c002732b:	88 d9                	mov    cl,bl
c002732d:	d3 e8                	shr    eax,cl
c002732f:	89 f1                	mov    ecx,esi
c0027331:	d3 e2                	shl    edx,cl
c0027333:	85 d2                	test   edx,edx
c0027335:	0f 95 c2             	setne  dl
c0027338:	0f b6 d2             	movzx  edx,dl
c002733b:	09 d7                	or     edi,edx
c002733d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027340:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027343:	01 fa                	add    edx,edi
c0027345:	11 c6                	adc    esi,eax
c0027347:	89 f0                	mov    eax,esi
c0027349:	eb 77                	jmp    c00273c2 <__adddf3+0x297>
c002734b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002734e:	46                   	inc    esi
c002734f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027352:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027358:	75 41                	jne    c002739b <__adddf3+0x270>
c002735a:	89 d3                	mov    ebx,edx
c002735c:	09 c3                	or     ebx,eax
c002735e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027365:	75 27                	jne    c002738e <__adddf3+0x263>
c0027367:	85 db                	test   ebx,ebx
c0027369:	0f 84 fb 03 00 00    	je     c002776a <__adddf3+0x63f>
c002736f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027372:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027375:	0f 84 f5 03 00 00    	je     c0027770 <__adddf3+0x645>
c002737b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002737e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027381:	85 c0                	test   eax,eax
c0027383:	0f 89 91 03 00 00    	jns    c002771a <__adddf3+0x5ef>
c0027389:	e9 85 03 00 00       	jmp    c0027713 <__adddf3+0x5e8>
c002738e:	85 db                	test   ebx,ebx
c0027390:	0f 85 da 03 00 00    	jne    c0027770 <__adddf3+0x645>
c0027396:	e9 cf 03 00 00       	jmp    c002776a <__adddf3+0x63f>
c002739b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002739e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00273a1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00273a4:	f7 d1                	not    ecx
c00273a6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00273ac:	0f 84 70 03 00 00    	je     c0027722 <__adddf3+0x5f7>
c00273b2:	d1 ea                	shr    edx,1
c00273b4:	89 c1                	mov    ecx,eax
c00273b6:	c1 e1 1f             	shl    ecx,0x1f
c00273b9:	09 ca                	or     edx,ecx
c00273bb:	d1 e8                	shr    eax,1
c00273bd:	e9 6f 03 00 00       	jmp    c0027731 <__adddf3+0x606>
c00273c2:	85 c0                	test   eax,eax
c00273c4:	0f 89 67 03 00 00    	jns    c0027731 <__adddf3+0x606>
c00273ca:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00273cd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00273d0:	f7 d1                	not    ecx
c00273d2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00273d8:	0f 84 44 03 00 00    	je     c0027722 <__adddf3+0x5f7>
c00273de:	89 d1                	mov    ecx,edx
c00273e0:	d1 e9                	shr    ecx,1
c00273e2:	83 e2 01             	and    edx,0x1
c00273e5:	09 ca                	or     edx,ecx
c00273e7:	89 c1                	mov    ecx,eax
c00273e9:	c1 e1 1f             	shl    ecx,0x1f
c00273ec:	09 ca                	or     edx,ecx
c00273ee:	d1 e8                	shr    eax,1
c00273f0:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00273f5:	e9 37 03 00 00       	jmp    c0027731 <__adddf3+0x606>
c00273fa:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00273fd:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027403:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027406:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027409:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002740f:	29 de                	sub    esi,ebx
c0027411:	85 f6                	test   esi,esi
c0027413:	0f 8e bd 00 00 00    	jle    c00274d6 <__adddf3+0x3ab>
c0027419:	85 db                	test   ebx,ebx
c002741b:	75 17                	jne    c0027434 <__adddf3+0x309>
c002741d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027420:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027423:	0f 84 47 03 00 00    	je     c0027770 <__adddf3+0x645>
c0027429:	4e                   	dec    esi
c002742a:	75 20                	jne    c002744c <__adddf3+0x321>
c002742c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002742f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027432:	eb 5b                	jmp    c002748f <__adddf3+0x364>
c0027434:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027437:	f7 d3                	not    ebx
c0027439:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002743f:	0f 84 2b 03 00 00    	je     c0027770 <__adddf3+0x645>
c0027445:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002744c:	83 fe 1f             	cmp    esi,0x1f
c002744f:	7e 49                	jle    c002749a <__adddf3+0x36f>
c0027451:	83 fe 3f             	cmp    esi,0x3f
c0027454:	0f 8f 16 03 00 00    	jg     c0027770 <__adddf3+0x645>
c002745a:	83 e6 1f             	and    esi,0x1f
c002745d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027460:	89 f1                	mov    ecx,esi
c0027462:	d3 ef                	shr    edi,cl
c0027464:	31 db                	xor    ebx,ebx
c0027466:	85 f6                	test   esi,esi
c0027468:	74 13                	je     c002747d <__adddf3+0x352>
c002746a:	b9 20 00 00 00       	mov    ecx,0x20
c002746f:	29 f1                	sub    ecx,esi
c0027471:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027474:	d3 e6                	shl    esi,cl
c0027476:	31 db                	xor    ebx,ebx
c0027478:	85 f6                	test   esi,esi
c002747a:	0f 95 c3             	setne  bl
c002747d:	31 c9                	xor    ecx,ecx
c002747f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027483:	0f 95 c1             	setne  cl
c0027486:	09 cf                	or     edi,ecx
c0027488:	09 fb                	or     ebx,edi
c002748a:	29 da                	sub    edx,ebx
c002748c:	83 d8 00             	sbb    eax,0x0
c002748f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027492:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027495:	e9 aa 01 00 00       	jmp    c0027644 <__adddf3+0x519>
c002749a:	bf 20 00 00 00       	mov    edi,0x20
c002749f:	29 f7                	sub    edi,esi
c00274a1:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00274a4:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00274a7:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00274aa:	d3 e3                	shl    ebx,cl
c00274ac:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00274af:	89 f1                	mov    ecx,esi
c00274b1:	d3 ef                	shr    edi,cl
c00274b3:	09 fb                	or     ebx,edi
c00274b5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00274b8:	89 f1                	mov    ecx,esi
c00274ba:	d3 ef                	shr    edi,cl
c00274bc:	89 fe                	mov    esi,edi
c00274be:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00274c1:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00274c4:	d3 e7                	shl    edi,cl
c00274c6:	85 ff                	test   edi,edi
c00274c8:	0f 95 c1             	setne  cl
c00274cb:	0f b6 c9             	movzx  ecx,cl
c00274ce:	09 cb                	or     ebx,ecx
c00274d0:	29 da                	sub    edx,ebx
c00274d2:	19 f0                	sbb    eax,esi
c00274d4:	eb b9                	jmp    c002748f <__adddf3+0x364>
c00274d6:	0f 84 cd 00 00 00    	je     c00275a9 <__adddf3+0x47e>
c00274dc:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00274df:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00274e2:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00274e5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00274e9:	75 1b                	jne    c0027506 <__adddf3+0x3db>
c00274eb:	89 d6                	mov    esi,edx
c00274ed:	09 c6                	or     esi,eax
c00274ef:	0f 84 7b 02 00 00    	je     c0027770 <__adddf3+0x645>
c00274f5:	4b                   	dec    ebx
c00274f6:	75 24                	jne    c002751c <__adddf3+0x3f1>
c00274f8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00274fb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00274fe:	29 d1                	sub    ecx,edx
c0027500:	19 c6                	sbb    esi,eax
c0027502:	89 ca                	mov    edx,ecx
c0027504:	eb 61                	jmp    c0027567 <__adddf3+0x43c>
c0027506:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027509:	f7 d6                	not    esi
c002750b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027511:	0f 84 59 02 00 00    	je     c0027770 <__adddf3+0x645>
c0027517:	0d 00 00 00 80       	or     eax,0x80000000
c002751c:	83 fb 1f             	cmp    ebx,0x1f
c002751f:	7e 4d                	jle    c002756e <__adddf3+0x443>
c0027521:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027524:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027527:	83 fb 3f             	cmp    ebx,0x3f
c002752a:	0f 8f 40 02 00 00    	jg     c0027770 <__adddf3+0x645>
c0027530:	83 e3 1f             	and    ebx,0x1f
c0027533:	89 d9                	mov    ecx,ebx
c0027535:	89 c7                	mov    edi,eax
c0027537:	d3 ef                	shr    edi,cl
c0027539:	31 db                	xor    ebx,ebx
c002753b:	85 c9                	test   ecx,ecx
c002753d:	74 12                	je     c0027551 <__adddf3+0x426>
c002753f:	be 20 00 00 00       	mov    esi,0x20
c0027544:	29 ce                	sub    esi,ecx
c0027546:	89 f1                	mov    ecx,esi
c0027548:	d3 e0                	shl    eax,cl
c002754a:	31 db                	xor    ebx,ebx
c002754c:	85 c0                	test   eax,eax
c002754e:	0f 95 c3             	setne  bl
c0027551:	31 c0                	xor    eax,eax
c0027553:	85 d2                	test   edx,edx
c0027555:	0f 95 c0             	setne  al
c0027558:	09 c7                	or     edi,eax
c002755a:	09 fb                	or     ebx,edi
c002755c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002755f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027562:	29 da                	sub    edx,ebx
c0027564:	83 de 00             	sbb    esi,0x0
c0027567:	89 f0                	mov    eax,esi
c0027569:	e9 d6 00 00 00       	jmp    c0027644 <__adddf3+0x519>
c002756e:	be 20 00 00 00       	mov    esi,0x20
c0027573:	29 de                	sub    esi,ebx
c0027575:	89 c7                	mov    edi,eax
c0027577:	89 f1                	mov    ecx,esi
c0027579:	d3 e7                	shl    edi,cl
c002757b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002757e:	89 d7                	mov    edi,edx
c0027580:	88 d9                	mov    cl,bl
c0027582:	d3 ef                	shr    edi,cl
c0027584:	89 f9                	mov    ecx,edi
c0027586:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027589:	09 cf                	or     edi,ecx
c002758b:	88 d9                	mov    cl,bl
c002758d:	d3 e8                	shr    eax,cl
c002758f:	89 f1                	mov    ecx,esi
c0027591:	d3 e2                	shl    edx,cl
c0027593:	85 d2                	test   edx,edx
c0027595:	0f 95 c2             	setne  dl
c0027598:	0f b6 d2             	movzx  edx,dl
c002759b:	09 d7                	or     edi,edx
c002759d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275a0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00275a3:	29 fa                	sub    edx,edi
c00275a5:	19 c6                	sbb    esi,eax
c00275a7:	eb be                	jmp    c0027567 <__adddf3+0x43c>
c00275a9:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00275ac:	8d 5e 01             	lea    ebx,[esi+0x1]
c00275af:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00275b5:	75 6a                	jne    c0027621 <__adddf3+0x4f6>
c00275b7:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00275bb:	75 58                	jne    c0027615 <__adddf3+0x4ea>
c00275bd:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00275c0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00275c3:	89 d6                	mov    esi,edx
c00275c5:	09 c6                	or     esi,eax
c00275c7:	75 17                	jne    c00275e0 <__adddf3+0x4b5>
c00275c9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00275cc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00275cf:	85 db                	test   ebx,ebx
c00275d1:	0f 85 99 01 00 00    	jne    c0027770 <__adddf3+0x645>
c00275d7:	31 ff                	xor    edi,edi
c00275d9:	31 c9                	xor    ecx,ecx
c00275db:	e9 90 01 00 00       	jmp    c0027770 <__adddf3+0x645>
c00275e0:	85 db                	test   ebx,ebx
c00275e2:	0f 84 88 01 00 00    	je     c0027770 <__adddf3+0x645>
c00275e8:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00275eb:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00275ee:	85 c0                	test   eax,eax
c00275f0:	79 10                	jns    c0027602 <__adddf3+0x4d7>
c00275f2:	31 c9                	xor    ecx,ecx
c00275f4:	f7 da                	neg    edx
c00275f6:	0f 95 c1             	setne  cl
c00275f9:	01 c8                	add    eax,ecx
c00275fb:	f7 d8                	neg    eax
c00275fd:	e9 2f 01 00 00       	jmp    c0027731 <__adddf3+0x606>
c0027602:	31 ff                	xor    edi,edi
c0027604:	31 c9                	xor    ecx,ecx
c0027606:	89 c3                	mov    ebx,eax
c0027608:	09 d3                	or     ebx,edx
c002760a:	0f 84 60 01 00 00    	je     c0027770 <__adddf3+0x645>
c0027610:	e9 05 01 00 00       	jmp    c002771a <__adddf3+0x5ef>
c0027615:	31 ff                	xor    edi,edi
c0027617:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002761c:	e9 4f 01 00 00       	jmp    c0027770 <__adddf3+0x645>
c0027621:	89 c1                	mov    ecx,eax
c0027623:	89 d0                	mov    eax,edx
c0027625:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027628:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002762b:	89 ca                	mov    edx,ecx
c002762d:	85 c9                	test   ecx,ecx
c002762f:	79 2c                	jns    c002765d <__adddf3+0x532>
c0027631:	31 c9                	xor    ecx,ecx
c0027633:	f7 d8                	neg    eax
c0027635:	0f 95 c1             	setne  cl
c0027638:	01 ca                	add    edx,ecx
c002763a:	f7 da                	neg    edx
c002763c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002763f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027642:	eb 19                	jmp    c002765d <__adddf3+0x532>
c0027644:	85 c0                	test   eax,eax
c0027646:	0f 89 e5 00 00 00    	jns    c0027731 <__adddf3+0x606>
c002764c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027651:	89 c1                	mov    ecx,eax
c0027653:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027656:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027659:	89 d0                	mov    eax,edx
c002765b:	89 ca                	mov    edx,ecx
c002765d:	85 d2                	test   edx,edx
c002765f:	74 59                	je     c00276ba <__adddf3+0x58f>
c0027661:	0f bd da             	bsr    ebx,edx
c0027664:	83 f3 1f             	xor    ebx,0x1f
c0027667:	88 d9                	mov    cl,bl
c0027669:	d3 e2                	shl    edx,cl
c002766b:	bf 20 00 00 00       	mov    edi,0x20
c0027670:	89 f9                	mov    ecx,edi
c0027672:	29 d9                	sub    ecx,ebx
c0027674:	89 c6                	mov    esi,eax
c0027676:	d3 ee                	shr    esi,cl
c0027678:	09 d6                	or     esi,edx
c002767a:	88 d9                	mov    cl,bl
c002767c:	d3 e0                	shl    eax,cl
c002767e:	89 c2                	mov    edx,eax
c0027680:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027683:	25 ff 07 00 00       	and    eax,0x7ff
c0027688:	39 d8                	cmp    eax,ebx
c002768a:	7f 22                	jg     c00276ae <__adddf3+0x583>
c002768c:	29 c3                	sub    ebx,eax
c002768e:	43                   	inc    ebx
c002768f:	88 d9                	mov    cl,bl
c0027691:	d3 ea                	shr    edx,cl
c0027693:	29 df                	sub    edi,ebx
c0027695:	89 f9                	mov    ecx,edi
c0027697:	89 f0                	mov    eax,esi
c0027699:	d3 e0                	shl    eax,cl
c002769b:	09 c2                	or     edx,eax
c002769d:	89 f0                	mov    eax,esi
c002769f:	88 d9                	mov    cl,bl
c00276a1:	d3 e8                	shr    eax,cl
c00276a3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00276a6:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00276ac:	eb 6f                	jmp    c002771d <__adddf3+0x5f2>
c00276ae:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00276b1:	29 d8                	sub    eax,ebx
c00276b3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00276b6:	89 f0                	mov    eax,esi
c00276b8:	eb 59                	jmp    c0027713 <__adddf3+0x5e8>
c00276ba:	85 c0                	test   eax,eax
c00276bc:	74 6a                	je     c0027728 <__adddf3+0x5fd>
c00276be:	0f bd c8             	bsr    ecx,eax
c00276c1:	83 f1 1f             	xor    ecx,0x1f
c00276c4:	d3 e0                	shl    eax,cl
c00276c6:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00276c9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00276cf:	83 c1 20             	add    ecx,0x20
c00276d2:	39 cb                	cmp    ebx,ecx
c00276d4:	7f 35                	jg     c002770b <__adddf3+0x5e0>
c00276d6:	29 d9                	sub    ecx,ebx
c00276d8:	8d 71 01             	lea    esi,[ecx+0x1]
c00276db:	83 fe 1f             	cmp    esi,0x1f
c00276de:	7e 09                	jle    c00276e9 <__adddf3+0x5be>
c00276e0:	83 e9 1f             	sub    ecx,0x1f
c00276e3:	d3 e8                	shr    eax,cl
c00276e5:	89 c3                	mov    ebx,eax
c00276e7:	eb 11                	jmp    c00276fa <__adddf3+0x5cf>
c00276e9:	b9 20 00 00 00       	mov    ecx,0x20
c00276ee:	29 f1                	sub    ecx,esi
c00276f0:	89 c3                	mov    ebx,eax
c00276f2:	d3 e3                	shl    ebx,cl
c00276f4:	89 f1                	mov    ecx,esi
c00276f6:	d3 e8                	shr    eax,cl
c00276f8:	89 c2                	mov    edx,eax
c00276fa:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00276fd:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027702:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027705:	89 d0                	mov    eax,edx
c0027707:	89 da                	mov    edx,ebx
c0027709:	eb 26                	jmp    c0027731 <__adddf3+0x606>
c002770b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002770e:	29 cf                	sub    edi,ecx
c0027710:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027713:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027718:	eb 17                	jmp    c0027731 <__adddf3+0x606>
c002771a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002771d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027720:	eb 0f                	jmp    c0027731 <__adddf3+0x606>
c0027722:	31 d2                	xor    edx,edx
c0027724:	31 c0                	xor    eax,eax
c0027726:	eb 09                	jmp    c0027731 <__adddf3+0x606>
c0027728:	89 c2                	mov    edx,eax
c002772a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027731:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027734:	c1 e1 14             	shl    ecx,0x14
c0027737:	89 c3                	mov    ebx,eax
c0027739:	c1 eb 0b             	shr    ebx,0xb
c002773c:	09 d9                	or     ecx,ebx
c002773e:	89 d3                	mov    ebx,edx
c0027740:	c1 eb 0b             	shr    ebx,0xb
c0027743:	c1 e0 15             	shl    eax,0x15
c0027746:	09 d8                	or     eax,ebx
c0027748:	89 c7                	mov    edi,eax
c002774a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027750:	0f 95 c0             	setne  al
c0027753:	89 c6                	mov    esi,eax
c0027755:	09 f3                	or     ebx,esi
c0027757:	83 e3 01             	and    ebx,0x1
c002775a:	c1 ea 0a             	shr    edx,0xa
c002775d:	21 da                	and    edx,ebx
c002775f:	89 f8                	mov    eax,edi
c0027761:	01 d0                	add    eax,edx
c0027763:	83 d1 00             	adc    ecx,0x0
c0027766:	89 c7                	mov    edi,eax
c0027768:	eb 06                	jmp    c0027770 <__adddf3+0x645>
c002776a:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002776d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027770:	89 f8                	mov    eax,edi
c0027772:	89 ca                	mov    edx,ecx
c0027774:	83 c4 24             	add    esp,0x24
c0027777:	5b                   	pop    ebx
c0027778:	5e                   	pop    esi
c0027779:	5f                   	pop    edi
c002777a:	5d                   	pop    ebp
c002777b:	c3                   	ret    

c002777c <__subdf3>:
c002777c:	55                   	push   ebp
c002777d:	89 e5                	mov    ebp,esp
c002777f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027782:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027785:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002778b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002778e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027791:	5d                   	pop    ebp
c0027792:	e9 94 f9 ff ff       	jmp    c002712b <__adddf3>

c0027797 <__negdf2>:
c0027797:	55                   	push   ebp
c0027798:	89 e5                	mov    ebp,esp
c002779a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002779d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00277a0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00277a6:	5d                   	pop    ebp
c00277a7:	c3                   	ret    

c00277a8 <__muldf3>:
c00277a8:	55                   	push   ebp
c00277a9:	89 e5                	mov    ebp,esp
c00277ab:	57                   	push   edi
c00277ac:	56                   	push   esi
c00277ad:	53                   	push   ebx
c00277ae:	83 ec 24             	sub    esp,0x24
c00277b1:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00277b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00277b7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00277ba:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00277bd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00277c0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00277c3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00277c6:	89 c8                	mov    eax,ecx
c00277c8:	c1 f8 14             	sar    eax,0x14
c00277cb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00277ce:	89 f8                	mov    eax,edi
c00277d0:	89 fb                	mov    ebx,edi
c00277d2:	c1 e3 0b             	shl    ebx,0xb
c00277d5:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c00277d8:	c1 e1 0b             	shl    ecx,0xb
c00277db:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00277e1:	c1 e8 15             	shr    eax,0x15
c00277e4:	09 c1                	or     ecx,eax
c00277e6:	89 d6                	mov    esi,edx
c00277e8:	89 d0                	mov    eax,edx
c00277ea:	c1 f8 14             	sar    eax,0x14
c00277ed:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00277f0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00277f3:	89 c3                	mov    ebx,eax
c00277f5:	c1 e3 0b             	shl    ebx,0xb
c00277f8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00277fb:	c1 e6 0b             	shl    esi,0xb
c00277fe:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027804:	c1 e8 15             	shr    eax,0x15
c0027807:	09 c6                	or     esi,eax
c0027809:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002780c:	25 ff 07 00 00       	and    eax,0x7ff
c0027811:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027814:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027817:	25 ff 07 00 00       	and    eax,0x7ff
c002781c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002781f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027822:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027825:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002782c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002782f:	40                   	inc    eax
c0027830:	a9 fe 07 00 00       	test   eax,0x7fe
c0027835:	0f 85 8d 00 00 00    	jne    c00278c8 <__muldf3+0x120>
c002783b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002783e:	09 c8                	or     eax,ecx
c0027840:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027844:	74 44                	je     c002788a <__muldf3+0xe2>
c0027846:	85 c0                	test   eax,eax
c0027848:	0f 85 31 02 00 00    	jne    c0027a7f <__muldf3+0x2d7>
c002784e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027851:	40                   	inc    eax
c0027852:	a9 fe 07 00 00       	test   eax,0x7fe
c0027857:	75 13                	jne    c002786c <__muldf3+0xc4>
c0027859:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002785c:	09 f1                	or     ecx,esi
c002785e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027862:	74 22                	je     c0027886 <__muldf3+0xde>
c0027864:	85 c9                	test   ecx,ecx
c0027866:	0f 85 0d 02 00 00    	jne    c0027a79 <__muldf3+0x2d1>
c002786c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027870:	0f 89 09 02 00 00    	jns    c0027a7f <__muldf3+0x2d7>
c0027876:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027879:	05 00 00 00 80       	add    eax,0x80000000
c002787e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027881:	e9 f9 01 00 00       	jmp    c0027a7f <__muldf3+0x2d7>
c0027886:	85 c9                	test   ecx,ecx
c0027888:	eb 2e                	jmp    c00278b8 <__muldf3+0x110>
c002788a:	85 c0                	test   eax,eax
c002788c:	74 20                	je     c00278ae <__muldf3+0x106>
c002788e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027891:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027894:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027897:	c1 ef 1f             	shr    edi,0x1f
c002789a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c002789d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c00278a0:	8d 43 ff             	lea    eax,[ebx-0x1]
c00278a3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00278a6:	09 f9                	or     ecx,edi
c00278a8:	78 1e                	js     c00278c8 <__muldf3+0x120>
c00278aa:	89 c3                	mov    ebx,eax
c00278ac:	eb e0                	jmp    c002788e <__muldf3+0xe6>
c00278ae:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00278b1:	f7 d0                	not    eax
c00278b3:	a9 ff 07 00 00       	test   eax,0x7ff
c00278b8:	75 b2                	jne    c002786c <__muldf3+0xc4>
c00278ba:	31 ff                	xor    edi,edi
c00278bc:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c00278c3:	e9 b7 01 00 00       	jmp    c0027a7f <__muldf3+0x2d7>
c00278c8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00278cb:	40                   	inc    eax
c00278cc:	a9 fe 07 00 00       	test   eax,0x7fe
c00278d1:	75 57                	jne    c002792a <__muldf3+0x182>
c00278d3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00278d6:	09 f0                	or     eax,esi
c00278d8:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00278dc:	74 23                	je     c0027901 <__muldf3+0x159>
c00278de:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00278e2:	0f 89 91 01 00 00    	jns    c0027a79 <__muldf3+0x2d1>
c00278e8:	85 c0                	test   eax,eax
c00278ea:	0f 85 89 01 00 00    	jne    c0027a79 <__muldf3+0x2d1>
c00278f0:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00278f3:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c00278f9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00278fc:	e9 7e 01 00 00       	jmp    c0027a7f <__muldf3+0x2d7>
c0027901:	85 c0                	test   eax,eax
c0027903:	75 0c                	jne    c0027911 <__muldf3+0x169>
c0027905:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027909:	0f 89 6a 01 00 00    	jns    c0027a79 <__muldf3+0x2d1>
c002790f:	eb df                	jmp    c00278f0 <__muldf3+0x148>
c0027911:	01 f6                	add    esi,esi
c0027913:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027916:	c1 ea 1f             	shr    edx,0x1f
c0027919:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002791c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c002791f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027922:	09 d6                	or     esi,edx
c0027924:	78 04                	js     c002792a <__muldf3+0x182>
c0027926:	89 c3                	mov    ebx,eax
c0027928:	eb e7                	jmp    c0027911 <__muldf3+0x169>
c002792a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027930:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027936:	89 c8                	mov    eax,ecx
c0027938:	f7 e6                	mul    esi
c002793a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c002793d:	89 c7                	mov    edi,eax
c002793f:	89 c8                	mov    eax,ecx
c0027941:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027944:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027947:	89 c1                	mov    ecx,eax
c0027949:	89 f0                	mov    eax,esi
c002794b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c002794e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027951:	89 c6                	mov    esi,eax
c0027953:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027956:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027959:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002795c:	31 c0                	xor    eax,eax
c002795e:	01 f1                	add    ecx,esi
c0027960:	0f 92 c0             	setb   al
c0027963:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027966:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027969:	83 d6 00             	adc    esi,0x0
c002796c:	01 c7                	add    edi,eax
c002796e:	83 d6 00             	adc    esi,0x0
c0027971:	01 ca                	add    edx,ecx
c0027973:	0f 92 c1             	setb   cl
c0027976:	0f b6 c9             	movzx  ecx,cl
c0027979:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c002797c:	83 d6 00             	adc    esi,0x0
c002797f:	01 cf                	add    edi,ecx
c0027981:	83 d6 00             	adc    esi,0x0
c0027984:	31 c9                	xor    ecx,ecx
c0027986:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027989:	0f 95 c1             	setne  cl
c002798c:	09 cf                	or     edi,ecx
c002798e:	85 f6                	test   esi,esi
c0027990:	78 0c                	js     c002799e <__muldf3+0x1f6>
c0027992:	01 f6                	add    esi,esi
c0027994:	89 f8                	mov    eax,edi
c0027996:	c1 e8 1f             	shr    eax,0x1f
c0027999:	09 c6                	or     esi,eax
c002799b:	01 ff                	add    edi,edi
c002799d:	4b                   	dec    ebx
c002799e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c00279a4:	0f 8f 85 00 00 00    	jg     c0027a2f <__muldf3+0x287>
c00279aa:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c00279b0:	85 db                	test   ebx,ebx
c00279b2:	0f 8f 84 00 00 00    	jg     c0027a3c <__muldf3+0x294>
c00279b8:	83 fb cc             	cmp    ebx,0xffffffcc
c00279bb:	7c 79                	jl     c0027a36 <__muldf3+0x28e>
c00279bd:	ba 01 00 00 00       	mov    edx,0x1
c00279c2:	29 da                	sub    edx,ebx
c00279c4:	81 ce 00 00 00 80    	or     esi,0x80000000
c00279ca:	83 fa 1f             	cmp    edx,0x1f
c00279cd:	7e 30                	jle    c00279ff <__muldf3+0x257>
c00279cf:	83 fa 20             	cmp    edx,0x20
c00279d2:	75 0b                	jne    c00279df <__muldf3+0x237>
c00279d4:	31 c0                	xor    eax,eax
c00279d6:	85 ff                	test   edi,edi
c00279d8:	0f 95 c0             	setne  al
c00279db:	89 c7                	mov    edi,eax
c00279dd:	eb 1a                	jmp    c00279f9 <__muldf3+0x251>
c00279df:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c00279e2:	89 f0                	mov    eax,esi
c00279e4:	d3 e0                	shl    eax,cl
c00279e6:	09 f8                	or     eax,edi
c00279e8:	0f 95 c0             	setne  al
c00279eb:	0f b6 c0             	movzx  eax,al
c00279ee:	89 c7                	mov    edi,eax
c00279f0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00279f5:	29 d9                	sub    ecx,ebx
c00279f7:	d3 ee                	shr    esi,cl
c00279f9:	09 f7                	or     edi,esi
c00279fb:	31 db                	xor    ebx,ebx
c00279fd:	eb 3b                	jmp    c0027a3a <__muldf3+0x292>
c00279ff:	83 c3 1f             	add    ebx,0x1f
c0027a02:	89 f0                	mov    eax,esi
c0027a04:	88 d9                	mov    cl,bl
c0027a06:	d3 e0                	shl    eax,cl
c0027a08:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a0b:	89 f8                	mov    eax,edi
c0027a0d:	88 d1                	mov    cl,dl
c0027a0f:	d3 e8                	shr    eax,cl
c0027a11:	89 c1                	mov    ecx,eax
c0027a13:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027a16:	09 c8                	or     eax,ecx
c0027a18:	88 d9                	mov    cl,bl
c0027a1a:	d3 e7                	shl    edi,cl
c0027a1c:	31 db                	xor    ebx,ebx
c0027a1e:	85 ff                	test   edi,edi
c0027a20:	0f 95 c3             	setne  bl
c0027a23:	89 df                	mov    edi,ebx
c0027a25:	09 c7                	or     edi,eax
c0027a27:	88 d1                	mov    cl,dl
c0027a29:	d3 ee                	shr    esi,cl
c0027a2b:	31 db                	xor    ebx,ebx
c0027a2d:	eb 0d                	jmp    c0027a3c <__muldf3+0x294>
c0027a2f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027a34:	eb 02                	jmp    c0027a38 <__muldf3+0x290>
c0027a36:	31 db                	xor    ebx,ebx
c0027a38:	31 ff                	xor    edi,edi
c0027a3a:	31 f6                	xor    esi,esi
c0027a3c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027a3f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027a42:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027a47:	09 c3                	or     ebx,eax
c0027a49:	c1 e3 14             	shl    ebx,0x14
c0027a4c:	89 f0                	mov    eax,esi
c0027a4e:	c1 e8 0b             	shr    eax,0xb
c0027a51:	09 c3                	or     ebx,eax
c0027a53:	89 f8                	mov    eax,edi
c0027a55:	c1 e8 0b             	shr    eax,0xb
c0027a58:	c1 e6 15             	shl    esi,0x15
c0027a5b:	09 c6                	or     esi,eax
c0027a5d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027a63:	0f 95 c1             	setne  cl
c0027a66:	09 c8                	or     eax,ecx
c0027a68:	83 e0 01             	and    eax,0x1
c0027a6b:	c1 ef 0a             	shr    edi,0xa
c0027a6e:	21 c7                	and    edi,eax
c0027a70:	01 f7                	add    edi,esi
c0027a72:	83 d3 00             	adc    ebx,0x0
c0027a75:	89 da                	mov    edx,ebx
c0027a77:	eb 03                	jmp    c0027a7c <__muldf3+0x2d4>
c0027a79:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027a7c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027a7f:	89 f8                	mov    eax,edi
c0027a81:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027a84:	83 c4 24             	add    esp,0x24
c0027a87:	5b                   	pop    ebx
c0027a88:	5e                   	pop    esi
c0027a89:	5f                   	pop    edi
c0027a8a:	5d                   	pop    ebp
c0027a8b:	c3                   	ret    

c0027a8c <__divdf3>:
c0027a8c:	55                   	push   ebp
c0027a8d:	89 e5                	mov    ebp,esp
c0027a8f:	57                   	push   edi
c0027a90:	56                   	push   esi
c0027a91:	53                   	push   ebx
c0027a92:	83 ec 2c             	sub    esp,0x2c
c0027a95:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027a98:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027a9b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027a9e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027aa1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027aa4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027aa7:	89 ce                	mov    esi,ecx
c0027aa9:	89 c8                	mov    eax,ecx
c0027aab:	c1 f8 14             	sar    eax,0x14
c0027aae:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027ab1:	89 f8                	mov    eax,edi
c0027ab3:	89 fb                	mov    ebx,edi
c0027ab5:	c1 e3 0b             	shl    ebx,0xb
c0027ab8:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027abb:	c1 e6 0b             	shl    esi,0xb
c0027abe:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027ac4:	c1 e8 15             	shr    eax,0x15
c0027ac7:	09 c6                	or     esi,eax
c0027ac9:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027acc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027acf:	89 c2                	mov    edx,eax
c0027ad1:	c1 fa 14             	sar    edx,0x14
c0027ad4:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027ad7:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027ada:	89 de                	mov    esi,ebx
c0027adc:	c1 e6 0b             	shl    esi,0xb
c0027adf:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027ae2:	c1 e0 0b             	shl    eax,0xb
c0027ae5:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027aea:	c1 eb 15             	shr    ebx,0x15
c0027aed:	09 d8                	or     eax,ebx
c0027aef:	89 c2                	mov    edx,eax
c0027af1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027af4:	25 ff 07 00 00       	and    eax,0x7ff
c0027af9:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027afc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027aff:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027b05:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027b08:	29 d8                	sub    eax,ebx
c0027b0a:	05 ff 03 00 00       	add    eax,0x3ff
c0027b0f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027b12:	46                   	inc    esi
c0027b13:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027b19:	0f 85 a5 00 00 00    	jne    c0027bc4 <__divdf3+0x138>
c0027b1f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027b22:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027b25:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027b29:	74 2a                	je     c0027b55 <__divdf3+0xc9>
c0027b2b:	85 f6                	test   esi,esi
c0027b2d:	0f 85 cc 02 00 00    	jne    c0027dff <__divdf3+0x373>
c0027b33:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b36:	40                   	inc    eax
c0027b37:	a9 fe 07 00 00       	test   eax,0x7fe
c0027b3c:	75 26                	jne    c0027b64 <__divdf3+0xd8>
c0027b3e:	85 db                	test   ebx,ebx
c0027b40:	74 22                	je     c0027b64 <__divdf3+0xd8>
c0027b42:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027b45:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027b48:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027b4b:	09 d0                	or     eax,edx
c0027b4d:	0f 85 ac 02 00 00    	jne    c0027dff <__divdf3+0x373>
c0027b53:	eb 63                	jmp    c0027bb8 <__divdf3+0x12c>
c0027b55:	85 f6                	test   esi,esi
c0027b57:	75 22                	jne    c0027b7b <__divdf3+0xef>
c0027b59:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b5c:	40                   	inc    eax
c0027b5d:	a9 fe 07 00 00       	test   eax,0x7fe
c0027b62:	74 36                	je     c0027b9a <__divdf3+0x10e>
c0027b64:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027b68:	0f 89 91 02 00 00    	jns    c0027dff <__divdf3+0x373>
c0027b6e:	89 f8                	mov    eax,edi
c0027b70:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027b76:	e9 80 02 00 00       	jmp    c0027dfb <__divdf3+0x36f>
c0027b7b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027b7e:	01 f6                	add    esi,esi
c0027b80:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027b83:	c1 ef 1f             	shr    edi,0x1f
c0027b86:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027b89:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027b8c:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027b8f:	09 f7                	or     edi,esi
c0027b91:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027b94:	78 2e                	js     c0027bc4 <__divdf3+0x138>
c0027b96:	89 c8                	mov    eax,ecx
c0027b98:	eb e1                	jmp    c0027b7b <__divdf3+0xef>
c0027b9a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027b9d:	09 d0                	or     eax,edx
c0027b9f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027ba3:	74 0f                	je     c0027bb4 <__divdf3+0x128>
c0027ba5:	85 c0                	test   eax,eax
c0027ba7:	74 bb                	je     c0027b64 <__divdf3+0xd8>
c0027ba9:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027bac:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027baf:	e9 4b 02 00 00       	jmp    c0027dff <__divdf3+0x373>
c0027bb4:	85 c0                	test   eax,eax
c0027bb6:	75 ac                	jne    c0027b64 <__divdf3+0xd8>
c0027bb8:	31 ff                	xor    edi,edi
c0027bba:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027bbf:	e9 3b 02 00 00       	jmp    c0027dff <__divdf3+0x373>
c0027bc4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027bc7:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027bca:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027bd0:	75 6b                	jne    c0027c3d <__divdf3+0x1b1>
c0027bd2:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027bd5:	09 d6                	or     esi,edx
c0027bd7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027bdb:	74 28                	je     c0027c05 <__divdf3+0x179>
c0027bdd:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027be0:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027be3:	85 f6                	test   esi,esi
c0027be5:	0f 85 14 02 00 00    	jne    c0027dff <__divdf3+0x373>
c0027beb:	31 ff                	xor    edi,edi
c0027bed:	31 c9                	xor    ecx,ecx
c0027bef:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027bf2:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027bf5:	0f 89 04 02 00 00    	jns    c0027dff <__divdf3+0x373>
c0027bfb:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027c00:	e9 fa 01 00 00       	jmp    c0027dff <__divdf3+0x373>
c0027c05:	85 f6                	test   esi,esi
c0027c07:	75 1b                	jne    c0027c24 <__divdf3+0x198>
c0027c09:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c0c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027c0f:	25 00 00 00 80       	and    eax,0x80000000
c0027c14:	31 c9                	xor    ecx,ecx
c0027c16:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027c1b:	89 cf                	mov    edi,ecx
c0027c1d:	89 c1                	mov    ecx,eax
c0027c1f:	e9 db 01 00 00       	jmp    c0027dff <__divdf3+0x373>
c0027c24:	01 d2                	add    edx,edx
c0027c26:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027c29:	c1 eb 1f             	shr    ebx,0x1f
c0027c2c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027c2f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027c32:	8d 48 01             	lea    ecx,[eax+0x1]
c0027c35:	09 da                	or     edx,ebx
c0027c37:	78 04                	js     c0027c3d <__divdf3+0x1b1>
c0027c39:	89 c8                	mov    eax,ecx
c0027c3b:	eb e7                	jmp    c0027c24 <__divdf3+0x198>
c0027c3d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027c40:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027c46:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027c4c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027c4f:	39 d6                	cmp    esi,edx
c0027c51:	77 0d                	ja     c0027c60 <__divdf3+0x1d4>
c0027c53:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027c56:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027c59:	72 1b                	jb     c0027c76 <__divdf3+0x1ea>
c0027c5b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027c5e:	75 16                	jne    c0027c76 <__divdf3+0x1ea>
c0027c60:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027c63:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027c66:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027c69:	83 de 00             	sbb    esi,0x0
c0027c6c:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027c6f:	ba 01 00 00 00       	mov    edx,0x1
c0027c74:	eb 02                	jmp    c0027c78 <__divdf3+0x1ec>
c0027c76:	31 d2                	xor    edx,edx
c0027c78:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027c7f:	31 ff                	xor    edi,edi
c0027c81:	01 ff                	add    edi,edi
c0027c83:	89 d1                	mov    ecx,edx
c0027c85:	c1 e9 1f             	shr    ecx,0x1f
c0027c88:	09 cf                	or     edi,ecx
c0027c8a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027c8d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027c90:	89 da                	mov    edx,ebx
c0027c92:	89 f3                	mov    ebx,esi
c0027c94:	8d 34 36             	lea    esi,[esi+esi*1]
c0027c97:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c9a:	c1 e9 1f             	shr    ecx,0x1f
c0027c9d:	09 ce                	or     esi,ecx
c0027c9f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027ca2:	01 c9                	add    ecx,ecx
c0027ca4:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027ca7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027caa:	85 db                	test   ebx,ebx
c0027cac:	78 29                	js     c0027cd7 <__divdf3+0x24b>
c0027cae:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027cb1:	72 07                	jb     c0027cba <__divdf3+0x22e>
c0027cb3:	75 3c                	jne    c0027cf1 <__divdf3+0x265>
c0027cb5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027cb8:	77 37                	ja     c0027cf1 <__divdf3+0x265>
c0027cba:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027cbd:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027cc0:	31 d2                	xor    edx,edx
c0027cc2:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0027cc5:	0f 97 c2             	seta   dl
c0027cc8:	29 d6                	sub    esi,edx
c0027cca:	89 d9                	mov    ecx,ebx
c0027ccc:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027ccf:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027cd2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0027cd5:	eb 17                	jmp    c0027cee <__divdf3+0x262>
c0027cd7:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027cda:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027cdd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027ce0:	0f 97 c1             	seta   cl
c0027ce3:	0f b6 c9             	movzx  ecx,cl
c0027ce6:	29 ce                	sub    esi,ecx
c0027ce8:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027ceb:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027cee:	83 ca 01             	or     edx,0x1
c0027cf1:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0027cf4:	75 8b                	jne    c0027c81 <__divdf3+0x1f5>
c0027cf6:	c1 e7 09             	shl    edi,0x9
c0027cf9:	89 d1                	mov    ecx,edx
c0027cfb:	c1 e9 17             	shr    ecx,0x17
c0027cfe:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027d01:	09 f3                	or     ebx,esi
c0027d03:	0f 95 c3             	setne  bl
c0027d06:	0f b6 db             	movzx  ebx,bl
c0027d09:	c1 e2 09             	shl    edx,0x9
c0027d0c:	09 d3                	or     ebx,edx
c0027d0e:	89 ca                	mov    edx,ecx
c0027d10:	09 fa                	or     edx,edi
c0027d12:	78 0c                	js     c0027d20 <__divdf3+0x294>
c0027d14:	01 d2                	add    edx,edx
c0027d16:	89 d9                	mov    ecx,ebx
c0027d18:	c1 e9 1f             	shr    ecx,0x1f
c0027d1b:	09 ca                	or     edx,ecx
c0027d1d:	01 db                	add    ebx,ebx
c0027d1f:	48                   	dec    eax
c0027d20:	3d fe 07 00 00       	cmp    eax,0x7fe
c0027d25:	0f 8f 83 00 00 00    	jg     c0027dae <__divdf3+0x322>
c0027d2b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027d31:	85 c0                	test   eax,eax
c0027d33:	0f 8f 82 00 00 00    	jg     c0027dbb <__divdf3+0x32f>
c0027d39:	83 f8 cc             	cmp    eax,0xffffffcc
c0027d3c:	7c 77                	jl     c0027db5 <__divdf3+0x329>
c0027d3e:	be 01 00 00 00       	mov    esi,0x1
c0027d43:	29 c6                	sub    esi,eax
c0027d45:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027d4b:	83 fe 1f             	cmp    esi,0x1f
c0027d4e:	7e 2f                	jle    c0027d7f <__divdf3+0x2f3>
c0027d50:	83 fe 20             	cmp    esi,0x20
c0027d53:	75 0a                	jne    c0027d5f <__divdf3+0x2d3>
c0027d55:	85 db                	test   ebx,ebx
c0027d57:	0f 95 c3             	setne  bl
c0027d5a:	0f b6 db             	movzx  ebx,bl
c0027d5d:	eb 1a                	jmp    c0027d79 <__divdf3+0x2ed>
c0027d5f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0027d62:	89 d7                	mov    edi,edx
c0027d64:	d3 e7                	shl    edi,cl
c0027d66:	89 f9                	mov    ecx,edi
c0027d68:	09 d9                	or     ecx,ebx
c0027d6a:	0f 95 c3             	setne  bl
c0027d6d:	0f b6 db             	movzx  ebx,bl
c0027d70:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027d75:	29 c1                	sub    ecx,eax
c0027d77:	d3 ea                	shr    edx,cl
c0027d79:	09 d3                	or     ebx,edx
c0027d7b:	31 c0                	xor    eax,eax
c0027d7d:	eb 3a                	jmp    c0027db9 <__divdf3+0x32d>
c0027d7f:	83 c0 1f             	add    eax,0x1f
c0027d82:	89 d7                	mov    edi,edx
c0027d84:	88 c1                	mov    cl,al
c0027d86:	d3 e7                	shl    edi,cl
c0027d88:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027d8b:	89 df                	mov    edi,ebx
c0027d8d:	89 f1                	mov    ecx,esi
c0027d8f:	d3 ef                	shr    edi,cl
c0027d91:	89 f9                	mov    ecx,edi
c0027d93:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027d96:	09 cf                	or     edi,ecx
c0027d98:	88 c1                	mov    cl,al
c0027d9a:	d3 e3                	shl    ebx,cl
c0027d9c:	85 db                	test   ebx,ebx
c0027d9e:	0f 95 c3             	setne  bl
c0027da1:	0f b6 db             	movzx  ebx,bl
c0027da4:	09 fb                	or     ebx,edi
c0027da6:	89 f1                	mov    ecx,esi
c0027da8:	d3 ea                	shr    edx,cl
c0027daa:	31 c0                	xor    eax,eax
c0027dac:	eb 0d                	jmp    c0027dbb <__divdf3+0x32f>
c0027dae:	b8 ff 07 00 00       	mov    eax,0x7ff
c0027db3:	eb 02                	jmp    c0027db7 <__divdf3+0x32b>
c0027db5:	31 c0                	xor    eax,eax
c0027db7:	31 db                	xor    ebx,ebx
c0027db9:	31 d2                	xor    edx,edx
c0027dbb:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027dbe:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027dc1:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0027dc7:	09 c8                	or     eax,ecx
c0027dc9:	c1 e0 14             	shl    eax,0x14
c0027dcc:	89 d1                	mov    ecx,edx
c0027dce:	c1 e9 0b             	shr    ecx,0xb
c0027dd1:	09 c8                	or     eax,ecx
c0027dd3:	89 c6                	mov    esi,eax
c0027dd5:	89 d9                	mov    ecx,ebx
c0027dd7:	c1 e9 0b             	shr    ecx,0xb
c0027dda:	c1 e2 15             	shl    edx,0x15
c0027ddd:	09 ca                	or     edx,ecx
c0027ddf:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0027de5:	0f 95 c0             	setne  al
c0027de8:	09 c1                	or     ecx,eax
c0027dea:	83 e1 01             	and    ecx,0x1
c0027ded:	c1 eb 0a             	shr    ebx,0xa
c0027df0:	21 cb                	and    ebx,ecx
c0027df2:	01 d3                	add    ebx,edx
c0027df4:	89 d8                	mov    eax,ebx
c0027df6:	83 d6 00             	adc    esi,0x0
c0027df9:	89 f2                	mov    edx,esi
c0027dfb:	89 c7                	mov    edi,eax
c0027dfd:	89 d1                	mov    ecx,edx
c0027dff:	89 f8                	mov    eax,edi
c0027e01:	89 ca                	mov    edx,ecx
c0027e03:	83 c4 2c             	add    esp,0x2c
c0027e06:	5b                   	pop    ebx
c0027e07:	5e                   	pop    esi
c0027e08:	5f                   	pop    edi
c0027e09:	5d                   	pop    ebp
c0027e0a:	c3                   	ret    

c0027e0b <__floatsidf>:
c0027e0b:	55                   	push   ebp
c0027e0c:	89 e5                	mov    ebp,esp
c0027e0e:	56                   	push   esi
c0027e0f:	53                   	push   ebx
c0027e10:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027e13:	85 db                	test   ebx,ebx
c0027e15:	7e 15                	jle    c0027e2c <__floatsidf+0x21>
c0027e17:	0f bd cb             	bsr    ecx,ebx
c0027e1a:	83 f1 1f             	xor    ecx,0x1f
c0027e1d:	d3 e3                	shl    ebx,cl
c0027e1f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027e25:	b8 1e 04 00 00       	mov    eax,0x41e
c0027e2a:	eb 21                	jmp    c0027e4d <__floatsidf+0x42>
c0027e2c:	b8 00 00 00 00       	mov    eax,0x0
c0027e31:	ba 00 00 00 00       	mov    edx,0x0
c0027e36:	74 2a                	je     c0027e62 <__floatsidf+0x57>
c0027e38:	f7 db                	neg    ebx
c0027e3a:	0f bd cb             	bsr    ecx,ebx
c0027e3d:	83 f1 1f             	xor    ecx,0x1f
c0027e40:	d3 e3                	shl    ebx,cl
c0027e42:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027e48:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0027e4d:	29 c8                	sub    eax,ecx
c0027e4f:	c1 e0 14             	shl    eax,0x14
c0027e52:	89 c1                	mov    ecx,eax
c0027e54:	89 de                	mov    esi,ebx
c0027e56:	c1 ee 0b             	shr    esi,0xb
c0027e59:	09 f1                	or     ecx,esi
c0027e5b:	89 ca                	mov    edx,ecx
c0027e5d:	c1 e3 15             	shl    ebx,0x15
c0027e60:	89 d8                	mov    eax,ebx
c0027e62:	5b                   	pop    ebx
c0027e63:	5e                   	pop    esi
c0027e64:	5d                   	pop    ebp
c0027e65:	c3                   	ret    

c0027e66 <__floatunsidf>:
c0027e66:	55                   	push   ebp
c0027e67:	89 e5                	mov    ebp,esp
c0027e69:	56                   	push   esi
c0027e6a:	53                   	push   ebx
c0027e6b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027e6e:	85 db                	test   ebx,ebx
c0027e70:	74 2a                	je     c0027e9c <__floatunsidf+0x36>
c0027e72:	0f bd cb             	bsr    ecx,ebx
c0027e75:	83 f1 1f             	xor    ecx,0x1f
c0027e78:	d3 e3                	shl    ebx,cl
c0027e7a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027e80:	b8 1e 04 00 00       	mov    eax,0x41e
c0027e85:	29 c8                	sub    eax,ecx
c0027e87:	c1 e0 14             	shl    eax,0x14
c0027e8a:	89 c1                	mov    ecx,eax
c0027e8c:	89 de                	mov    esi,ebx
c0027e8e:	c1 ee 0b             	shr    esi,0xb
c0027e91:	09 f1                	or     ecx,esi
c0027e93:	89 ca                	mov    edx,ecx
c0027e95:	c1 e3 15             	shl    ebx,0x15
c0027e98:	89 d8                	mov    eax,ebx
c0027e9a:	eb 04                	jmp    c0027ea0 <__floatunsidf+0x3a>
c0027e9c:	31 c0                	xor    eax,eax
c0027e9e:	31 d2                	xor    edx,edx
c0027ea0:	5b                   	pop    ebx
c0027ea1:	5e                   	pop    esi
c0027ea2:	5d                   	pop    ebp
c0027ea3:	c3                   	ret    

c0027ea4 <__fixdfsi>:
c0027ea4:	55                   	push   ebp
c0027ea5:	89 e5                	mov    ebp,esp
c0027ea7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027eaa:	89 d1                	mov    ecx,edx
c0027eac:	c1 e1 0b             	shl    ecx,0xb
c0027eaf:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027eb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027eb8:	c1 e8 15             	shr    eax,0x15
c0027ebb:	09 c1                	or     ecx,eax
c0027ebd:	c1 fa 14             	sar    edx,0x14
c0027ec0:	78 1f                	js     c0027ee1 <__fixdfsi+0x3d>
c0027ec2:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0027ec8:	31 c0                	xor    eax,eax
c0027eca:	83 fa 1e             	cmp    edx,0x1e
c0027ecd:	77 40                	ja     c0027f0f <__fixdfsi+0x6b>
c0027ecf:	89 c8                	mov    eax,ecx
c0027ed1:	0d 00 00 00 80       	or     eax,0x80000000
c0027ed6:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027edb:	29 d1                	sub    ecx,edx
c0027edd:	d3 e8                	shr    eax,cl
c0027edf:	eb 2e                	jmp    c0027f0f <__fixdfsi+0x6b>
c0027ee1:	31 c0                	xor    eax,eax
c0027ee3:	81 c2 01 04 00 00    	add    edx,0x401
c0027ee9:	78 24                	js     c0027f0f <__fixdfsi+0x6b>
c0027eeb:	83 fa 1e             	cmp    edx,0x1e
c0027eee:	7e 09                	jle    c0027ef9 <__fixdfsi+0x55>
c0027ef0:	83 fa 1f             	cmp    edx,0x1f
c0027ef3:	75 18                	jne    c0027f0d <__fixdfsi+0x69>
c0027ef5:	85 c9                	test   ecx,ecx
c0027ef7:	75 14                	jne    c0027f0d <__fixdfsi+0x69>
c0027ef9:	89 c8                	mov    eax,ecx
c0027efb:	0d 00 00 00 80       	or     eax,0x80000000
c0027f00:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027f05:	29 d1                	sub    ecx,edx
c0027f07:	d3 e8                	shr    eax,cl
c0027f09:	f7 d8                	neg    eax
c0027f0b:	eb 02                	jmp    c0027f0f <__fixdfsi+0x6b>
c0027f0d:	31 c0                	xor    eax,eax
c0027f0f:	5d                   	pop    ebp
c0027f10:	c3                   	ret    

c0027f11 <__fixunsdfsi>:
c0027f11:	55                   	push   ebp
c0027f12:	89 e5                	mov    ebp,esp
c0027f14:	53                   	push   ebx
c0027f15:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0027f18:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027f1b:	89 d3                	mov    ebx,edx
c0027f1d:	c1 fb 14             	sar    ebx,0x14
c0027f20:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0027f26:	31 c0                	xor    eax,eax
c0027f28:	83 fb 1f             	cmp    ebx,0x1f
c0027f2b:	77 1d                	ja     c0027f4a <__fixunsdfsi+0x39>
c0027f2d:	89 d0                	mov    eax,edx
c0027f2f:	c1 e0 0b             	shl    eax,0xb
c0027f32:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027f37:	c1 e9 15             	shr    ecx,0x15
c0027f3a:	09 c8                	or     eax,ecx
c0027f3c:	0d 00 00 00 80       	or     eax,0x80000000
c0027f41:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027f46:	29 d9                	sub    ecx,ebx
c0027f48:	d3 e8                	shr    eax,cl
c0027f4a:	5b                   	pop    ebx
c0027f4b:	5d                   	pop    ebp
c0027f4c:	c3                   	ret    

c0027f4d <__cmpdf2>:
c0027f4d:	55                   	push   ebp
c0027f4e:	89 e5                	mov    ebp,esp
c0027f50:	57                   	push   edi
c0027f51:	56                   	push   esi
c0027f52:	53                   	push   ebx
c0027f53:	83 ec 0c             	sub    esp,0xc
c0027f56:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0027f59:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027f5c:	89 ca                	mov    edx,ecx
c0027f5e:	c1 ea 14             	shr    edx,0x14
c0027f61:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0027f67:	89 cb                	mov    ebx,ecx
c0027f69:	c1 fb 1f             	sar    ebx,0x1f
c0027f6c:	31 da                	xor    edx,ebx
c0027f6e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027f71:	89 df                	mov    edi,ebx
c0027f73:	c1 e7 0b             	shl    edi,0xb
c0027f76:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027f79:	c1 e1 0b             	shl    ecx,0xb
c0027f7c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027f82:	c1 eb 15             	shr    ebx,0x15
c0027f85:	09 d9                	or     ecx,ebx
c0027f87:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0027f8a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027f8d:	89 ce                	mov    esi,ecx
c0027f8f:	c1 ee 14             	shr    esi,0x14
c0027f92:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027f98:	89 cb                	mov    ebx,ecx
c0027f9a:	c1 fb 1f             	sar    ebx,0x1f
c0027f9d:	31 de                	xor    esi,ebx
c0027f9f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0027fa2:	89 df                	mov    edi,ebx
c0027fa4:	c1 e7 0b             	shl    edi,0xb
c0027fa7:	c1 e1 0b             	shl    ecx,0xb
c0027faa:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027fb0:	c1 eb 15             	shr    ebx,0x15
c0027fb3:	09 d9                	or     ecx,ebx
c0027fb5:	89 d3                	mov    ebx,edx
c0027fb7:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0027fbd:	43                   	inc    ebx
c0027fbe:	83 fb 01             	cmp    ebx,0x1
c0027fc1:	77 08                	ja     c0027fcb <__cmpdf2+0x7e>
c0027fc3:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027fc6:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027fc9:	75 68                	jne    c0028033 <__cmpdf2+0xe6>
c0027fcb:	89 f3                	mov    ebx,esi
c0027fcd:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0027fd3:	43                   	inc    ebx
c0027fd4:	83 fb 01             	cmp    ebx,0x1
c0027fd7:	77 06                	ja     c0027fdf <__cmpdf2+0x92>
c0027fd9:	89 fb                	mov    ebx,edi
c0027fdb:	09 cb                	or     ebx,ecx
c0027fdd:	75 54                	jne    c0028033 <__cmpdf2+0xe6>
c0027fdf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027fe2:	09 f8                	or     eax,edi
c0027fe4:	09 c8                	or     eax,ecx
c0027fe6:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0027fe9:	75 12                	jne    c0027ffd <__cmpdf2+0xb0>
c0027feb:	8d 42 01             	lea    eax,[edx+0x1]
c0027fee:	83 f8 01             	cmp    eax,0x1
c0027ff1:	77 0a                	ja     c0027ffd <__cmpdf2+0xb0>
c0027ff3:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027ff6:	31 c0                	xor    eax,eax
c0027ff8:	83 fb 01             	cmp    ebx,0x1
c0027ffb:	76 36                	jbe    c0028033 <__cmpdf2+0xe6>
c0027ffd:	b8 01 00 00 00       	mov    eax,0x1
c0028002:	39 f2                	cmp    edx,esi
c0028004:	7f 2d                	jg     c0028033 <__cmpdf2+0xe6>
c0028006:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002800b:	7c 26                	jl     c0028033 <__cmpdf2+0xe6>
c002800d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028010:	77 07                	ja     c0028019 <__cmpdf2+0xcc>
c0028012:	72 16                	jb     c002802a <__cmpdf2+0xdd>
c0028014:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028017:	76 0a                	jbe    c0028023 <__cmpdf2+0xd6>
c0028019:	89 d0                	mov    eax,edx
c002801b:	c1 f8 1f             	sar    eax,0x1f
c002801e:	83 c8 01             	or     eax,0x1
c0028021:	eb 10                	jmp    c0028033 <__cmpdf2+0xe6>
c0028023:	b8 00 00 00 00       	mov    eax,0x0
c0028028:	73 09                	jae    c0028033 <__cmpdf2+0xe6>
c002802a:	89 d0                	mov    eax,edx
c002802c:	c1 f8 1f             	sar    eax,0x1f
c002802f:	83 e0 02             	and    eax,0x2
c0028032:	48                   	dec    eax
c0028033:	83 c4 0c             	add    esp,0xc
c0028036:	5b                   	pop    ebx
c0028037:	5e                   	pop    esi
c0028038:	5f                   	pop    edi
c0028039:	5d                   	pop    ebp
c002803a:	c3                   	ret    

c002803b <__eqdf2>:
c002803b:	55                   	push   ebp
c002803c:	89 e5                	mov    ebp,esp
c002803e:	50                   	push   eax
c002803f:	6a 01                	push   0x1
c0028041:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028044:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028047:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002804a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002804d:	e8 fb fe ff ff       	call   c0027f4d <__cmpdf2>
c0028052:	83 c4 18             	add    esp,0x18
c0028055:	c9                   	leave  
c0028056:	c3                   	ret    

c0028057 <__nedf2>:
c0028057:	eb e2                	jmp    c002803b <__eqdf2>

c0028059 <__gtdf2>:
c0028059:	55                   	push   ebp
c002805a:	89 e5                	mov    ebp,esp
c002805c:	50                   	push   eax
c002805d:	6a ff                	push   0xffffffff
c002805f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028062:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028065:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028068:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002806b:	e8 dd fe ff ff       	call   c0027f4d <__cmpdf2>
c0028070:	83 c4 18             	add    esp,0x18
c0028073:	c9                   	leave  
c0028074:	c3                   	ret    

c0028075 <__gedf2>:
c0028075:	eb e2                	jmp    c0028059 <__gtdf2>

c0028077 <__ltdf2>:
c0028077:	eb c2                	jmp    c002803b <__eqdf2>

c0028079 <__ledf2>:
c0028079:	eb c0                	jmp    c002803b <__eqdf2>

c002807b <__truncdfsf2>:
c002807b:	55                   	push   ebp
c002807c:	89 e5                	mov    ebp,esp
c002807e:	57                   	push   edi
c002807f:	56                   	push   esi
c0028080:	53                   	push   ebx
c0028081:	83 ec 0c             	sub    esp,0xc
c0028084:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028087:	89 d1                	mov    ecx,edx
c0028089:	c1 f9 14             	sar    ecx,0x14
c002808c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002808f:	89 df                	mov    edi,ebx
c0028091:	c1 e7 0b             	shl    edi,0xb
c0028094:	89 d0                	mov    eax,edx
c0028096:	c1 e0 0b             	shl    eax,0xb
c0028099:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002809e:	c1 eb 15             	shr    ebx,0x15
c00280a1:	09 d8                	or     eax,ebx
c00280a3:	89 cb                	mov    ebx,ecx
c00280a5:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00280ab:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00280b1:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00280b7:	0f 86 9e 00 00 00    	jbe    c002815b <__truncdfsf2+0xe0>
c00280bd:	85 db                	test   ebx,ebx
c00280bf:	75 0a                	jne    c00280cb <__truncdfsf2+0x50>
c00280c1:	c1 fa 17             	sar    edx,0x17
c00280c4:	30 d2                	xor    dl,dl
c00280c6:	e9 84 00 00 00       	jmp    c002814f <__truncdfsf2+0xd4>
c00280cb:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00280d1:	83 fe 83             	cmp    esi,0xffffff83
c00280d4:	7d 4b                	jge    c0028121 <__truncdfsf2+0xa6>
c00280d6:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00280db:	29 f1                	sub    ecx,esi
c00280dd:	83 f9 1f             	cmp    ecx,0x1f
c00280e0:	7f 6b                	jg     c002814d <__truncdfsf2+0xd2>
c00280e2:	0d 00 00 00 80       	or     eax,0x80000000
c00280e7:	89 c3                	mov    ebx,eax
c00280e9:	d3 eb                	shr    ebx,cl
c00280eb:	be 01 00 00 00       	mov    esi,0x1
c00280f0:	d3 e6                	shl    esi,cl
c00280f2:	4e                   	dec    esi
c00280f3:	21 f0                	and    eax,esi
c00280f5:	09 f8                	or     eax,edi
c00280f7:	0f 95 c0             	setne  al
c00280fa:	0f b6 c0             	movzx  eax,al
c00280fd:	09 c3                	or     ebx,eax
c00280ff:	89 d9                	mov    ecx,ebx
c0028101:	c1 e9 08             	shr    ecx,0x8
c0028104:	f6 c3 7f             	test   bl,0x7f
c0028107:	0f 95 c0             	setne  al
c002810a:	09 c8                	or     eax,ecx
c002810c:	83 e0 01             	and    eax,0x1
c002810f:	c1 eb 07             	shr    ebx,0x7
c0028112:	21 c3                	and    ebx,eax
c0028114:	81 e2 00 00 00 80    	and    edx,0x80000000
c002811a:	09 d1                	or     ecx,edx
c002811c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c002811f:	eb 76                	jmp    c0028197 <__truncdfsf2+0x11c>
c0028121:	83 c6 80             	add    esi,0xffffff80
c0028124:	7e 1d                	jle    c0028143 <__truncdfsf2+0xc8>
c0028126:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c002812c:	75 0b                	jne    c0028139 <__truncdfsf2+0xbe>
c002812e:	09 f8                	or     eax,edi
c0028130:	74 09                	je     c002813b <__truncdfsf2+0xc0>
c0028132:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028137:	eb 02                	jmp    c002813b <__truncdfsf2+0xc0>
c0028139:	31 c0                	xor    eax,eax
c002813b:	c1 fa 17             	sar    edx,0x17
c002813e:	80 ca ff             	or     dl,0xff
c0028141:	eb 0e                	jmp    c0028151 <__truncdfsf2+0xd6>
c0028143:	c1 fa 1f             	sar    edx,0x1f
c0028146:	c1 e2 08             	shl    edx,0x8
c0028149:	09 ca                	or     edx,ecx
c002814b:	eb 04                	jmp    c0028151 <__truncdfsf2+0xd6>
c002814d:	31 d2                	xor    edx,edx
c002814f:	31 c0                	xor    eax,eax
c0028151:	c1 e2 17             	shl    edx,0x17
c0028154:	c1 e8 08             	shr    eax,0x8
c0028157:	09 d0                	or     eax,edx
c0028159:	eb 3c                	jmp    c0028197 <__truncdfsf2+0x11c>
c002815b:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028161:	89 ca                	mov    edx,ecx
c0028163:	c1 fa 0b             	sar    edx,0xb
c0028166:	c1 e2 08             	shl    edx,0x8
c0028169:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002816c:	31 db                	xor    ebx,ebx
c002816e:	85 ff                	test   edi,edi
c0028170:	0f 95 c3             	setne  bl
c0028173:	09 d8                	or     eax,ebx
c0028175:	89 c3                	mov    ebx,eax
c0028177:	c1 eb 08             	shr    ebx,0x8
c002817a:	a8 7f                	test   al,0x7f
c002817c:	0f 95 c2             	setne  dl
c002817f:	89 d6                	mov    esi,edx
c0028181:	09 de                	or     esi,ebx
c0028183:	83 e6 01             	and    esi,0x1
c0028186:	c1 e8 07             	shr    eax,0x7
c0028189:	21 f0                	and    eax,esi
c002818b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002818e:	09 ca                	or     edx,ecx
c0028190:	c1 e2 17             	shl    edx,0x17
c0028193:	09 da                	or     edx,ebx
c0028195:	01 d0                	add    eax,edx
c0028197:	83 c4 0c             	add    esp,0xc
c002819a:	5b                   	pop    ebx
c002819b:	5e                   	pop    esi
c002819c:	5f                   	pop    edi
c002819d:	5d                   	pop    ebp
c002819e:	c3                   	ret    

c002819f <__extendsfdf2>:
c002819f:	55                   	push   ebp
c00281a0:	89 e5                	mov    ebp,esp
c00281a2:	57                   	push   edi
c00281a3:	56                   	push   esi
c00281a4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00281a7:	89 d1                	mov    ecx,edx
c00281a9:	c1 f9 17             	sar    ecx,0x17
c00281ac:	c1 e2 08             	shl    edx,0x8
c00281af:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00281b5:	89 c8                	mov    eax,ecx
c00281b7:	80 e4 f8             	and    ah,0xf8
c00281ba:	8d 71 01             	lea    esi,[ecx+0x1]
c00281bd:	81 e6 fe 00 00 00    	and    esi,0xfe
c00281c3:	75 27                	jne    c00281ec <__extendsfdf2+0x4d>
c00281c5:	81 e1 ff 00 00 00    	and    ecx,0xff
c00281cb:	75 18                	jne    c00281e5 <__extendsfdf2+0x46>
c00281cd:	85 d2                	test   edx,edx
c00281cf:	74 20                	je     c00281f1 <__extendsfdf2+0x52>
c00281d1:	41                   	inc    ecx
c00281d2:	01 d2                	add    edx,edx
c00281d4:	79 fb                	jns    c00281d1 <__extendsfdf2+0x32>
c00281d6:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00281dc:	29 c8                	sub    eax,ecx
c00281de:	05 81 03 00 00       	add    eax,0x381
c00281e3:	eb 0c                	jmp    c00281f1 <__extendsfdf2+0x52>
c00281e5:	05 00 07 00 00       	add    eax,0x700
c00281ea:	eb 05                	jmp    c00281f1 <__extendsfdf2+0x52>
c00281ec:	05 80 03 00 00       	add    eax,0x380
c00281f1:	c1 e0 14             	shl    eax,0x14
c00281f4:	89 c1                	mov    ecx,eax
c00281f6:	89 d0                	mov    eax,edx
c00281f8:	c1 e8 0b             	shr    eax,0xb
c00281fb:	09 c1                	or     ecx,eax
c00281fd:	c1 e2 15             	shl    edx,0x15
c0028200:	89 d0                	mov    eax,edx
c0028202:	89 ca                	mov    edx,ecx
c0028204:	5e                   	pop    esi
c0028205:	5f                   	pop    edi
c0028206:	5d                   	pop    ebp
c0028207:	c3                   	ret    
c0028208:	66 90                	xchg   ax,ax
c002820a:	66 90                	xchg   ax,ax
c002820c:	66 90                	xchg   ax,ax
c002820e:	66 90                	xchg   ax,ax

c0028210 <fabs>:
c0028210:	83 ec 0c             	sub    esp,0xc
c0028213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028217:	89 04 24             	mov    DWORD PTR [esp],eax
c002821a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002821e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028223:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028227:	dd 04 24             	fld    QWORD PTR [esp]
c002822a:	83 c4 0c             	add    esp,0xc
c002822d:	c3                   	ret    
c002822e:	66 90                	xchg   ax,ax

c0028230 <lrint>:
c0028230:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028234:	83 ec 04             	sub    esp,0x4
c0028237:	db 1c 24             	fistp  DWORD PTR [esp]
c002823a:	58                   	pop    eax
c002823b:	c3                   	ret    

c002823c <lrintf>:
c002823c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028240:	83 ec 04             	sub    esp,0x4
c0028243:	db 1c 24             	fistp  DWORD PTR [esp]
c0028246:	58                   	pop    eax
c0028247:	c3                   	ret    

Disassembly of section .init:

c0028248 <_init>:
c0028248:	55                   	push   ebp
c0028249:	89 e5                	mov    ebp,esp
c002824b:	e8 c8 7e fd ff       	call   c0000118 <frame_dummy>
c0028250:	e8 5b e0 ff ff       	call   c00262b0 <__do_global_ctors_aux>
c0028255:	5d                   	pop    ebp
c0028256:	c3                   	ret    

Disassembly of section .fini:

c0028257 <_fini>:
c0028257:	55                   	push   ebp
c0028258:	89 e5                	mov    ebp,esp
c002825a:	e8 49 7e fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002825f:	5d                   	pop    ebp
c0028260:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028262 <Computer::~Computer()>:
c0028262:	83 ec 0c             	sub    esp,0xc
c0028265:	ba dc 9d 02 c0       	mov    edx,0xc0029ddc
c002826a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002826e:	89 10                	mov    DWORD PTR [eax],edx
c0028270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028274:	83 ec 0c             	sub    esp,0xc
c0028277:	50                   	push   eax
c0028278:	e8 fb b5 fe ff       	call   c0013878 <Device::~Device()>
c002827d:	83 c4 10             	add    esp,0x10
c0028280:	90                   	nop
c0028281:	83 c4 0c             	add    esp,0xc
c0028284:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028286 <Computer::~Computer()>:
c0028286:	83 ec 0c             	sub    esp,0xc
c0028289:	83 ec 0c             	sub    esp,0xc
c002828c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028290:	e8 cd ff ff ff       	call   c0028262 <Computer::~Computer()>
c0028295:	83 c4 10             	add    esp,0x10
c0028298:	83 ec 08             	sub    esp,0x8
c002829b:	68 ec 01 00 00       	push   0x1ec
c00282a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00282a4:	e8 f0 a1 fe ff       	call   c0012499 <operator delete(void*, unsigned long)>
c00282a9:	83 c4 10             	add    esp,0x10
c00282ac:	83 c4 0c             	add    esp,0xc
c00282af:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00282b0 <idleCommon()>:
c00282b0:	83 ec 0c             	sub    esp,0xc
c00282b3:	fa                   	cli    
c00282b4:	ff 05 88 0b 03 c0    	inc    DWORD PTR ds:0xc0030b88
c00282ba:	e8 9c 55 ff ff       	call   c001d85b <schedule()>
c00282bf:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c00282c4:	48                   	dec    eax
c00282c5:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c00282ca:	75 01                	jne    c00282cd <idleCommon()+0x1d>
c00282cc:	fb                   	sti    
c00282cd:	83 c4 0c             	add    esp,0xc
c00282d0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00282d2 <LinkedList<UnixFile>::~LinkedList()>:
c00282d2:	90                   	nop
c00282d3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00282d4 <LinkedList<UnixFile>::LinkedList()>:
c00282d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00282d8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00282de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00282e2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00282e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00282ed:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00282f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00282f8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00282fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028302:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002830d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028314:	90                   	nop
c0028315:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028316 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028316:	83 ec 0c             	sub    esp,0xc
c0028319:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002831e:	75 10                	jne    c0028330 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028320:	83 ec 0c             	sub    esp,0xc
c0028323:	68 b8 9f 02 c0       	push   0xc0029fb8
c0028328:	e8 a4 19 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c002832d:	83 c4 10             	add    esp,0x10
c0028330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028334:	8b 00                	mov    eax,DWORD PTR [eax]
c0028336:	85 c0                	test   eax,eax
c0028338:	74 34                	je     c002836e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002833a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002833e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028341:	85 c0                	test   eax,eax
c0028343:	74 29                	je     c002836e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028345:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028349:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002834c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028350:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028357:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002835b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002835e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028362:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028365:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002836c:	eb 65                	jmp    c00283d3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002836e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028372:	8b 00                	mov    eax,DWORD PTR [eax]
c0028374:	85 c0                	test   eax,eax
c0028376:	75 4b                	jne    c00283c3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002837c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002837f:	85 c0                	test   eax,eax
c0028381:	75 40                	jne    c00283c3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028387:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002838b:	89 10                	mov    DWORD PTR [eax],edx
c002838d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028391:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028395:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002839c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002839f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00283a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283aa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00283ad:	85 c0                	test   eax,eax
c00283af:	74 22                	je     c00283d3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00283b1:	83 ec 0c             	sub    esp,0xc
c00283b4:	68 da 9f 02 c0       	push   0xc0029fda
c00283b9:	e8 13 19 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c00283be:	83 c4 10             	add    esp,0x10
c00283c1:	eb 10                	jmp    c00283d3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00283c3:	83 ec 0c             	sub    esp,0xc
c00283c6:	68 e4 9f 02 c0       	push   0xc0029fe4
c00283cb:	e8 01 19 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c00283d0:	83 c4 10             	add    esp,0x10
c00283d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283d7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00283da:	8d 50 01             	lea    edx,[eax+0x1]
c00283dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283e1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00283e4:	90                   	nop
c00283e5:	83 c4 0c             	add    esp,0xc
c00283e8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00283ea <LinkedList<UnixFile>::getFirstElement()>:
c00283ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00283ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00283f0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00283f2 <LinkedList<UnixFile>::removeFirst()>:
c00283f2:	83 ec 0c             	sub    esp,0xc
c00283f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00283fb:	85 c0                	test   eax,eax
c00283fd:	75 12                	jne    c0028411 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00283ff:	83 ec 0c             	sub    esp,0xc
c0028402:	68 f0 9f 02 c0       	push   0xc0029ff0
c0028407:	e8 c5 18 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c002840c:	83 c4 10             	add    esp,0x10
c002840f:	eb 7e                	jmp    c002848f <LinkedList<UnixFile>::removeFirst()+0x9d>
c0028411:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028415:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028418:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002841b:	85 c0                	test   eax,eax
c002841d:	74 10                	je     c002842f <LinkedList<UnixFile>::removeFirst()+0x3d>
c002841f:	83 ec 0c             	sub    esp,0xc
c0028422:	68 3b a0 02 c0       	push   0xc002a03b
c0028427:	e8 a5 18 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c002842c:	83 c4 10             	add    esp,0x10
c002842f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028433:	8b 00                	mov    eax,DWORD PTR [eax]
c0028435:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028438:	85 c0                	test   eax,eax
c002843a:	75 33                	jne    c002846f <LinkedList<UnixFile>::removeFirst()+0x7d>
c002843c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028440:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002844a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028451:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028455:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028458:	83 f8 01             	cmp    eax,0x1
c002845b:	74 21                	je     c002847e <LinkedList<UnixFile>::removeFirst()+0x8c>
c002845d:	83 ec 0c             	sub    esp,0xc
c0028460:	68 14 a0 02 c0       	push   0xc002a014
c0028465:	e8 67 18 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c002846a:	83 c4 10             	add    esp,0x10
c002846d:	eb 0f                	jmp    c002847e <LinkedList<UnixFile>::removeFirst()+0x8c>
c002846f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028473:	8b 00                	mov    eax,DWORD PTR [eax]
c0028475:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002847c:	89 10                	mov    DWORD PTR [eax],edx
c002847e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028482:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028485:	8d 50 ff             	lea    edx,[eax-0x1]
c0028488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002848c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002848f:	83 c4 0c             	add    esp,0xc
c0028492:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0028494 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0028494:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028498:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002849b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002849c <DriverlessDevice::~DriverlessDevice()>:
c002849c:	ba 9c a7 02 c0       	mov    edx,0xc002a79c
c00284a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00284a5:	89 10                	mov    DWORD PTR [eax],edx
c00284a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00284ab:	50                   	push   eax
c00284ac:	e8 c7 b3 fe ff       	call   c0013878 <Device::~Device()>
c00284b1:	83 c4 04             	add    esp,0x4
c00284b4:	90                   	nop
c00284b5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00284b6 <DriverlessDevice::~DriverlessDevice()>:
c00284b6:	83 ec 0c             	sub    esp,0xc
c00284b9:	83 ec 0c             	sub    esp,0xc
c00284bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00284c0:	e8 d7 ff ff ff       	call   c002849c <DriverlessDevice::~DriverlessDevice()>
c00284c5:	83 c4 10             	add    esp,0x10
c00284c8:	83 ec 08             	sub    esp,0x8
c00284cb:	68 58 01 00 00       	push   0x158
c00284d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00284d4:	e8 c0 9f fe ff       	call   c0012499 <operator delete(void*, unsigned long)>
c00284d9:	83 c4 10             	add    esp,0x10
c00284dc:	83 c4 0c             	add    esp,0xc
c00284df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00284e0 <LinkedList<Device>::addElement(Device*)>:
c00284e0:	83 ec 0c             	sub    esp,0xc
c00284e3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00284e8:	75 10                	jne    c00284fa <LinkedList<Device>::addElement(Device*)+0x1a>
c00284ea:	83 ec 0c             	sub    esp,0xc
c00284ed:	68 b8 9f 02 c0       	push   0xc0029fb8
c00284f2:	e8 da 17 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c00284f7:	83 c4 10             	add    esp,0x10
c00284fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0028500:	85 c0                	test   eax,eax
c0028502:	74 3a                	je     c002853e <LinkedList<Device>::addElement(Device*)+0x5e>
c0028504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028508:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002850b:	85 c0                	test   eax,eax
c002850d:	74 2f                	je     c002853e <LinkedList<Device>::addElement(Device*)+0x5e>
c002850f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028513:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028516:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002851a:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028524:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028528:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002852b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002852f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028532:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002853c:	eb 68                	jmp    c00285a6 <LinkedList<Device>::addElement(Device*)+0xc6>
c002853e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028542:	8b 00                	mov    eax,DWORD PTR [eax]
c0028544:	85 c0                	test   eax,eax
c0028546:	75 4e                	jne    c0028596 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002854c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002854f:	85 c0                	test   eax,eax
c0028551:	75 43                	jne    c0028596 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028557:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002855b:	89 10                	mov    DWORD PTR [eax],edx
c002855d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028561:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028565:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002856c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002856f:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028579:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002857d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028580:	85 c0                	test   eax,eax
c0028582:	74 22                	je     c00285a6 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028584:	83 ec 0c             	sub    esp,0xc
c0028587:	68 da 9f 02 c0       	push   0xc0029fda
c002858c:	e8 40 17 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c0028591:	83 c4 10             	add    esp,0x10
c0028594:	eb 10                	jmp    c00285a6 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028596:	83 ec 0c             	sub    esp,0xc
c0028599:	68 e4 9f 02 c0       	push   0xc0029fe4
c002859e:	e8 2e 17 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c00285a3:	83 c4 10             	add    esp,0x10
c00285a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285aa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285ad:	8d 50 01             	lea    edx,[eax+0x1]
c00285b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285b4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00285b7:	90                   	nop
c00285b8:	83 c4 0c             	add    esp,0xc
c00285bb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00285bc <LinkedList<Device>::LinkedList()>:
c00285bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00285c0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00285c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00285ca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00285d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00285d5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00285dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00285e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00285e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00285ea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00285f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00285f5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00285fc:	90                   	nop
c00285fd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00285fe <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00285fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028602:	8b 00                	mov    eax,DWORD PTR [eax]
c0028604:	85 c0                	test   eax,eax
c0028606:	75 0e                	jne    c0028616 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002860c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002860f:	85 c0                	test   eax,eax
c0028611:	75 03                	jne    c0028616 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028613:	b0 01                	mov    al,0x1
c0028615:	c3                   	ret    
c0028616:	b0 00                	mov    al,0x0
c0028618:	90                   	nop
c0028619:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002861a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002861a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002861e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028620:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028622 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028622:	83 ec 0c             	sub    esp,0xc
c0028625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028629:	8b 00                	mov    eax,DWORD PTR [eax]
c002862b:	85 c0                	test   eax,eax
c002862d:	75 15                	jne    c0028644 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002862f:	83 ec 0c             	sub    esp,0xc
c0028632:	68 f0 9f 02 c0       	push   0xc0029ff0
c0028637:	e8 95 16 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c002863c:	83 c4 10             	add    esp,0x10
c002863f:	e9 88 00 00 00       	jmp    c00286cc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028648:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002864b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002864e:	85 c0                	test   eax,eax
c0028650:	0f 95 c0             	setne  al
c0028653:	84 c0                	test   al,al
c0028655:	74 10                	je     c0028667 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028657:	83 ec 0c             	sub    esp,0xc
c002865a:	68 3b a0 02 c0       	push   0xc002a03b
c002865f:	e8 6d 16 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c0028664:	83 c4 10             	add    esp,0x10
c0028667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002866b:	8b 00                	mov    eax,DWORD PTR [eax]
c002866d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028670:	85 c0                	test   eax,eax
c0028672:	0f 94 c0             	sete   al
c0028675:	84 c0                	test   al,al
c0028677:	74 33                	je     c00286ac <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028679:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002867d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028683:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028687:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002868e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028692:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028695:	83 f8 01             	cmp    eax,0x1
c0028698:	74 21                	je     c00286bb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002869a:	83 ec 0c             	sub    esp,0xc
c002869d:	68 14 a0 02 c0       	push   0xc002a014
c00286a2:	e8 2a 16 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c00286a7:	83 c4 10             	add    esp,0x10
c00286aa:	eb 0f                	jmp    c00286bb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00286ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00286b2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00286b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b9:	89 10                	mov    DWORD PTR [eax],edx
c00286bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286bf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286c2:	8d 50 ff             	lea    edx,[eax-0x1]
c00286c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286c9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00286cc:	83 c4 0c             	add    esp,0xc
c00286cf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00286d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00286d0:	83 ec 0c             	sub    esp,0xc
c00286d3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00286d8:	75 10                	jne    c00286ea <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c00286da:	83 ec 0c             	sub    esp,0xc
c00286dd:	68 b8 9f 02 c0       	push   0xc0029fb8
c00286e2:	e8 ea 15 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c00286e7:	83 c4 10             	add    esp,0x10
c00286ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00286f0:	85 c0                	test   eax,eax
c00286f2:	74 34                	je     c0028728 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00286f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286fb:	85 c0                	test   eax,eax
c00286fd:	74 29                	je     c0028728 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00286ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028703:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028706:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002870a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002870d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028711:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028715:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002871c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002871f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028726:	eb 65                	jmp    c002878d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002872c:	8b 00                	mov    eax,DWORD PTR [eax]
c002872e:	85 c0                	test   eax,eax
c0028730:	75 4b                	jne    c002877d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028736:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028739:	85 c0                	test   eax,eax
c002873b:	75 40                	jne    c002877d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002873d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028741:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028745:	89 10                	mov    DWORD PTR [eax],edx
c0028747:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002874b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002874f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028756:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028759:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028764:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028767:	85 c0                	test   eax,eax
c0028769:	74 22                	je     c002878d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002876b:	83 ec 0c             	sub    esp,0xc
c002876e:	68 da 9f 02 c0       	push   0xc0029fda
c0028773:	e8 59 15 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c0028778:	83 c4 10             	add    esp,0x10
c002877b:	eb 10                	jmp    c002878d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002877d:	83 ec 0c             	sub    esp,0xc
c0028780:	68 e4 9f 02 c0       	push   0xc0029fe4
c0028785:	e8 47 15 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c002878a:	83 c4 10             	add    esp,0x10
c002878d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028791:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028794:	8d 50 01             	lea    edx,[eax+0x1]
c0028797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002879b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002879e:	90                   	nop
c002879f:	83 c4 0c             	add    esp,0xc
c00287a2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00287a4 <ACPI::~ACPI()>:
c00287a4:	83 ec 0c             	sub    esp,0xc
c00287a7:	ba 00 b0 02 c0       	mov    edx,0xc002b000
c00287ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b0:	89 10                	mov    DWORD PTR [eax],edx
c00287b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b6:	83 ec 0c             	sub    esp,0xc
c00287b9:	50                   	push   eax
c00287ba:	e8 b9 b0 fe ff       	call   c0013878 <Device::~Device()>
c00287bf:	83 c4 10             	add    esp,0x10
c00287c2:	90                   	nop
c00287c3:	83 c4 0c             	add    esp,0xc
c00287c6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00287c8 <ACPI::~ACPI()>:
c00287c8:	83 ec 0c             	sub    esp,0xc
c00287cb:	83 ec 0c             	sub    esp,0xc
c00287ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287d2:	e8 cd ff ff ff       	call   c00287a4 <ACPI::~ACPI()>
c00287d7:	83 c4 10             	add    esp,0x10
c00287da:	83 ec 08             	sub    esp,0x8
c00287dd:	68 64 12 00 00       	push   0x1264
c00287e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287e6:	e8 ae 9c fe ff       	call   c0012499 <operator delete(void*, unsigned long)>
c00287eb:	83 c4 10             	add    esp,0x10
c00287ee:	83 c4 0c             	add    esp,0xc
c00287f1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00287f2 <LinkedList<Device>::~LinkedList()>:
c00287f2:	90                   	nop
c00287f3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c00287f4 <LinkedList<Device>::isEmpty()>:
c00287f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00287fa:	85 c0                	test   eax,eax
c00287fc:	75 0e                	jne    c002880c <LinkedList<Device>::isEmpty()+0x18>
c00287fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028802:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028805:	85 c0                	test   eax,eax
c0028807:	75 03                	jne    c002880c <LinkedList<Device>::isEmpty()+0x18>
c0028809:	b0 01                	mov    al,0x1
c002880b:	c3                   	ret    
c002880c:	b0 00                	mov    al,0x0
c002880e:	90                   	nop
c002880f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0028810 <LinkedList<Device>::getFirstElement()>:
c0028810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028814:	8b 00                	mov    eax,DWORD PTR [eax]
c0028816:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0028818 <LinkedList<Device>::removeFirst()>:
c0028818:	83 ec 0c             	sub    esp,0xc
c002881b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002881f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028821:	85 c0                	test   eax,eax
c0028823:	75 15                	jne    c002883a <LinkedList<Device>::removeFirst()+0x22>
c0028825:	83 ec 0c             	sub    esp,0xc
c0028828:	68 f0 9f 02 c0       	push   0xc0029ff0
c002882d:	e8 9f 14 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c0028832:	83 c4 10             	add    esp,0x10
c0028835:	e9 87 00 00 00       	jmp    c00288c1 <LinkedList<Device>::removeFirst()+0xa9>
c002883a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002883e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028841:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0028847:	85 c0                	test   eax,eax
c0028849:	74 10                	je     c002885b <LinkedList<Device>::removeFirst()+0x43>
c002884b:	83 ec 0c             	sub    esp,0xc
c002884e:	68 3b a0 02 c0       	push   0xc002a03b
c0028853:	e8 79 14 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c0028858:	83 c4 10             	add    esp,0x10
c002885b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002885f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028861:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0028867:	85 c0                	test   eax,eax
c0028869:	75 33                	jne    c002889e <LinkedList<Device>::removeFirst()+0x86>
c002886b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002886f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028879:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028884:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028887:	83 f8 01             	cmp    eax,0x1
c002888a:	74 24                	je     c00288b0 <LinkedList<Device>::removeFirst()+0x98>
c002888c:	83 ec 0c             	sub    esp,0xc
c002888f:	68 14 a0 02 c0       	push   0xc002a014
c0028894:	e8 38 14 ff ff       	call   c0019cd1 <Krnl::panic(char const*)>
c0028899:	83 c4 10             	add    esp,0x10
c002889c:	eb 12                	jmp    c00288b0 <LinkedList<Device>::removeFirst()+0x98>
c002889e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00288a4:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00288aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ae:	89 10                	mov    DWORD PTR [eax],edx
c00288b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288b7:	8d 50 ff             	lea    edx,[eax-0x1]
c00288ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288be:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288c1:	83 c4 0c             	add    esp,0xc
c00288c4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00288c6 <CPU::~CPU()>:
c00288c6:	83 ec 0c             	sub    esp,0xc
c00288c9:	ba 50 b2 02 c0       	mov    edx,0xc002b250
c00288ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d2:	89 10                	mov    DWORD PTR [eax],edx
c00288d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d8:	83 ec 0c             	sub    esp,0xc
c00288db:	50                   	push   eax
c00288dc:	e8 97 af fe ff       	call   c0013878 <Device::~Device()>
c00288e1:	83 c4 10             	add    esp,0x10
c00288e4:	90                   	nop
c00288e5:	83 c4 0c             	add    esp,0xc
c00288e8:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00288ea <CPU::~CPU()>:
c00288ea:	83 ec 0c             	sub    esp,0xc
c00288ed:	83 ec 0c             	sub    esp,0xc
c00288f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288f4:	e8 cd ff ff ff       	call   c00288c6 <CPU::~CPU()>
c00288f9:	83 c4 10             	add    esp,0x10
c00288fc:	83 ec 08             	sub    esp,0x8
c00288ff:	68 98 11 00 00       	push   0x1198
c0028904:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028908:	e8 8c 9b fe ff       	call   c0012499 <operator delete(void*, unsigned long)>
c002890d:	83 c4 10             	add    esp,0x10
c0028910:	83 c4 0c             	add    esp,0xc
c0028913:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028914 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028914:	90                   	nop
c0028915:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028916 <ThreadControlBlock::ThreadControlBlock()>:
c0028916:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002891a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028921:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028925:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002892c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028930:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028937:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002893b:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028942:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028946:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c002894d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028951:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028955:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028959:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c002895d:	90                   	nop
c002895e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028960 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028964:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002896a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002896e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028975:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028979:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028984:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002898a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002898e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028995:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028999:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00289a0:	90                   	nop
c00289a1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00289a2 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00289a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00289a6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00289a9:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00289aa <Vm::_FPUState::_FPUState()>:
c00289aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289ae:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00289b5:	90                   	nop
c00289b6:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00289b8 <PCI::~PCI()>:
c00289b8:	83 ec 0c             	sub    esp,0xc
c00289bb:	ba 7c bd 02 c0       	mov    edx,0xc002bd7c
c00289c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289c4:	89 10                	mov    DWORD PTR [eax],edx
c00289c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ca:	83 ec 0c             	sub    esp,0xc
c00289cd:	50                   	push   eax
c00289ce:	e8 75 a8 fe ff       	call   c0013248 <Bus::~Bus()>
c00289d3:	83 c4 10             	add    esp,0x10
c00289d6:	90                   	nop
c00289d7:	83 c4 0c             	add    esp,0xc
c00289da:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00289dc <PCI::~PCI()>:
c00289dc:	83 ec 0c             	sub    esp,0xc
c00289df:	83 ec 0c             	sub    esp,0xc
c00289e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289e6:	e8 cd ff ff ff       	call   c00289b8 <PCI::~PCI()>
c00289eb:	83 c4 10             	add    esp,0x10
c00289ee:	83 ec 08             	sub    esp,0x8
c00289f1:	68 5c 01 00 00       	push   0x15c
c00289f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289fa:	e8 9a 9a fe ff       	call   c0012499 <operator delete(void*, unsigned long)>
c00289ff:	83 c4 10             	add    esp,0x10
c0028a02:	83 c4 0c             	add    esp,0xc
c0028a05:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028a06 <IDE::~IDE()>:
c0028a06:	83 ec 0c             	sub    esp,0xc
c0028a09:	ba 30 be 02 c0       	mov    edx,0xc002be30
c0028a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a12:	89 10                	mov    DWORD PTR [eax],edx
c0028a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a18:	83 ec 0c             	sub    esp,0xc
c0028a1b:	50                   	push   eax
c0028a1c:	e8 6d b3 fe ff       	call   c0013d8e <HardDiskController::~HardDiskController()>
c0028a21:	83 c4 10             	add    esp,0x10
c0028a24:	90                   	nop
c0028a25:	83 c4 0c             	add    esp,0xc
c0028a28:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028a2a <IDE::~IDE()>:
c0028a2a:	83 ec 0c             	sub    esp,0xc
c0028a2d:	83 ec 0c             	sub    esp,0xc
c0028a30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a34:	e8 cd ff ff ff       	call   c0028a06 <IDE::~IDE()>
c0028a39:	83 c4 10             	add    esp,0x10
c0028a3c:	83 ec 08             	sub    esp,0x8
c0028a3f:	68 70 02 00 00       	push   0x270
c0028a44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a48:	e8 4c 9a fe ff       	call   c0012499 <operator delete(void*, unsigned long)>
c0028a4d:	83 c4 10             	add    esp,0x10
c0028a50:	83 c4 0c             	add    esp,0xc
c0028a53:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028a54 <SATABus::~SATABus()>:
c0028a54:	83 ec 0c             	sub    esp,0xc
c0028a57:	ba a8 be 02 c0       	mov    edx,0xc002bea8
c0028a5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a60:	89 10                	mov    DWORD PTR [eax],edx
c0028a62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a66:	83 ec 0c             	sub    esp,0xc
c0028a69:	50                   	push   eax
c0028a6a:	e8 1f b3 fe ff       	call   c0013d8e <HardDiskController::~HardDiskController()>
c0028a6f:	83 c4 10             	add    esp,0x10
c0028a72:	90                   	nop
c0028a73:	83 c4 0c             	add    esp,0xc
c0028a76:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028a78 <SATABus::~SATABus()>:
c0028a78:	83 ec 0c             	sub    esp,0xc
c0028a7b:	83 ec 0c             	sub    esp,0xc
c0028a7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a82:	e8 cd ff ff ff       	call   c0028a54 <SATABus::~SATABus()>
c0028a87:	83 c4 10             	add    esp,0x10
c0028a8a:	83 ec 08             	sub    esp,0x8
c0028a8d:	68 64 01 00 00       	push   0x164
c0028a92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a96:	e8 fe 99 fe ff       	call   c0012499 <operator delete(void*, unsigned long)>
c0028a9b:	83 c4 10             	add    esp,0x10
c0028a9e:	83 c4 0c             	add    esp,0xc
c0028aa1:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028aa2 <ATA::~ATA()>:
c0028aa2:	83 ec 0c             	sub    esp,0xc
c0028aa5:	ba f4 be 02 c0       	mov    edx,0xc002bef4
c0028aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aae:	89 10                	mov    DWORD PTR [eax],edx
c0028ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ab4:	83 ec 0c             	sub    esp,0xc
c0028ab7:	50                   	push   eax
c0028ab8:	e8 b3 b3 fe ff       	call   c0013e70 <PhysicalDisk::~PhysicalDisk()>
c0028abd:	83 c4 10             	add    esp,0x10
c0028ac0:	90                   	nop
c0028ac1:	83 c4 0c             	add    esp,0xc
c0028ac4:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028ac6 <ATA::~ATA()>:
c0028ac6:	83 ec 0c             	sub    esp,0xc
c0028ac9:	83 ec 0c             	sub    esp,0xc
c0028acc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ad0:	e8 cd ff ff ff       	call   c0028aa2 <ATA::~ATA()>
c0028ad5:	83 c4 10             	add    esp,0x10
c0028ad8:	83 ec 08             	sub    esp,0x8
c0028adb:	68 7c 01 00 00       	push   0x17c
c0028ae0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ae4:	e8 b0 99 fe ff       	call   c0012499 <operator delete(void*, unsigned long)>
c0028ae9:	83 c4 10             	add    esp,0x10
c0028aec:	83 c4 0c             	add    esp,0xc
c0028aef:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028af0 <ATAPI::~ATAPI()>:
c0028af0:	83 ec 0c             	sub    esp,0xc
c0028af3:	ba 2c bf 02 c0       	mov    edx,0xc002bf2c
c0028af8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028afc:	89 10                	mov    DWORD PTR [eax],edx
c0028afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b02:	83 ec 0c             	sub    esp,0xc
c0028b05:	50                   	push   eax
c0028b06:	e8 65 b3 fe ff       	call   c0013e70 <PhysicalDisk::~PhysicalDisk()>
c0028b0b:	83 c4 10             	add    esp,0x10
c0028b0e:	90                   	nop
c0028b0f:	83 c4 0c             	add    esp,0xc
c0028b12:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028b14 <ATAPI::~ATAPI()>:
c0028b14:	83 ec 0c             	sub    esp,0xc
c0028b17:	83 ec 0c             	sub    esp,0xc
c0028b1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b1e:	e8 cd ff ff ff       	call   c0028af0 <ATAPI::~ATAPI()>
c0028b23:	83 c4 10             	add    esp,0x10
c0028b26:	83 ec 08             	sub    esp,0x8
c0028b29:	68 80 01 00 00       	push   0x180
c0028b2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b32:	e8 62 99 fe ff       	call   c0012499 <operator delete(void*, unsigned long)>
c0028b37:	83 c4 10             	add    esp,0x10
c0028b3a:	83 c4 0c             	add    esp,0xc
c0028b3d:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028b3e <SATA::~SATA()>:
c0028b3e:	83 ec 0c             	sub    esp,0xc
c0028b41:	ba e0 bf 02 c0       	mov    edx,0xc002bfe0
c0028b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b4a:	89 10                	mov    DWORD PTR [eax],edx
c0028b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b50:	83 ec 0c             	sub    esp,0xc
c0028b53:	50                   	push   eax
c0028b54:	e8 17 b3 fe ff       	call   c0013e70 <PhysicalDisk::~PhysicalDisk()>
c0028b59:	83 c4 10             	add    esp,0x10
c0028b5c:	90                   	nop
c0028b5d:	83 c4 0c             	add    esp,0xc
c0028b60:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028b62 <SATA::~SATA()>:
c0028b62:	83 ec 0c             	sub    esp,0xc
c0028b65:	83 ec 0c             	sub    esp,0xc
c0028b68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b6c:	e8 cd ff ff ff       	call   c0028b3e <SATA::~SATA()>
c0028b71:	83 c4 10             	add    esp,0x10
c0028b74:	83 ec 08             	sub    esp,0x8
c0028b77:	68 7c 01 00 00       	push   0x17c
c0028b7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b80:	e8 14 99 fe ff       	call   c0012499 <operator delete(void*, unsigned long)>
c0028b85:	83 c4 10             	add    esp,0x10
c0028b88:	83 c4 0c             	add    esp,0xc
c0028b8b:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028b8c <SATAPI::~SATAPI()>:
c0028b8c:	83 ec 0c             	sub    esp,0xc
c0028b8f:	ba bc c0 02 c0       	mov    edx,0xc002c0bc
c0028b94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b98:	89 10                	mov    DWORD PTR [eax],edx
c0028b9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b9e:	83 ec 0c             	sub    esp,0xc
c0028ba1:	50                   	push   eax
c0028ba2:	e8 c9 b2 fe ff       	call   c0013e70 <PhysicalDisk::~PhysicalDisk()>
c0028ba7:	83 c4 10             	add    esp,0x10
c0028baa:	90                   	nop
c0028bab:	83 c4 0c             	add    esp,0xc
c0028bae:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028bb0 <SATAPI::~SATAPI()>:
c0028bb0:	83 ec 0c             	sub    esp,0xc
c0028bb3:	83 ec 0c             	sub    esp,0xc
c0028bb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bba:	e8 cd ff ff ff       	call   c0028b8c <SATAPI::~SATAPI()>
c0028bbf:	83 c4 10             	add    esp,0x10
c0028bc2:	83 ec 08             	sub    esp,0x8
c0028bc5:	68 80 01 00 00       	push   0x180
c0028bca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bce:	e8 c6 98 fe ff       	call   c0012499 <operator delete(void*, unsigned long)>
c0028bd3:	83 c4 10             	add    esp,0x10
c0028bd6:	83 c4 0c             	add    esp,0xc
c0028bd9:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028bda <AVX::~AVX()>:
c0028bda:	83 ec 0c             	sub    esp,0xc
c0028bdd:	ba fc c0 02 c0       	mov    edx,0xc002c0fc
c0028be2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028be6:	89 10                	mov    DWORD PTR [eax],edx
c0028be8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bec:	83 ec 0c             	sub    esp,0xc
c0028bef:	50                   	push   eax
c0028bf0:	e8 ff b2 fe ff       	call   c0013ef4 <FPU::~FPU()>
c0028bf5:	83 c4 10             	add    esp,0x10
c0028bf8:	90                   	nop
c0028bf9:	83 c4 0c             	add    esp,0xc
c0028bfc:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028bfe <AVX::~AVX()>:
c0028bfe:	83 ec 0c             	sub    esp,0xc
c0028c01:	83 ec 0c             	sub    esp,0xc
c0028c04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c08:	e8 cd ff ff ff       	call   c0028bda <AVX::~AVX()>
c0028c0d:	83 c4 10             	add    esp,0x10
c0028c10:	83 ec 08             	sub    esp,0x8
c0028c13:	68 58 01 00 00       	push   0x158
c0028c18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c1c:	e8 78 98 fe ff       	call   c0012499 <operator delete(void*, unsigned long)>
c0028c21:	83 c4 10             	add    esp,0x10
c0028c24:	83 c4 0c             	add    esp,0xc
c0028c27:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028c28 <MMX::~MMX()>:
c0028c28:	83 ec 0c             	sub    esp,0xc
c0028c2b:	ba 3c c1 02 c0       	mov    edx,0xc002c13c
c0028c30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c34:	89 10                	mov    DWORD PTR [eax],edx
c0028c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c3a:	83 ec 0c             	sub    esp,0xc
c0028c3d:	50                   	push   eax
c0028c3e:	e8 b1 b2 fe ff       	call   c0013ef4 <FPU::~FPU()>
c0028c43:	83 c4 10             	add    esp,0x10
c0028c46:	90                   	nop
c0028c47:	83 c4 0c             	add    esp,0xc
c0028c4a:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028c4c <MMX::~MMX()>:
c0028c4c:	83 ec 0c             	sub    esp,0xc
c0028c4f:	83 ec 0c             	sub    esp,0xc
c0028c52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c56:	e8 cd ff ff ff       	call   c0028c28 <MMX::~MMX()>
c0028c5b:	83 c4 10             	add    esp,0x10
c0028c5e:	83 ec 08             	sub    esp,0x8
c0028c61:	68 58 01 00 00       	push   0x158
c0028c66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c6a:	e8 2a 98 fe ff       	call   c0012499 <operator delete(void*, unsigned long)>
c0028c6f:	83 c4 10             	add    esp,0x10
c0028c72:	83 c4 0c             	add    esp,0xc
c0028c75:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028c76 <SSE::~SSE()>:
c0028c76:	83 ec 0c             	sub    esp,0xc
c0028c79:	ba 7c c1 02 c0       	mov    edx,0xc002c17c
c0028c7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c82:	89 10                	mov    DWORD PTR [eax],edx
c0028c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c88:	83 ec 0c             	sub    esp,0xc
c0028c8b:	50                   	push   eax
c0028c8c:	e8 63 b2 fe ff       	call   c0013ef4 <FPU::~FPU()>
c0028c91:	83 c4 10             	add    esp,0x10
c0028c94:	90                   	nop
c0028c95:	83 c4 0c             	add    esp,0xc
c0028c98:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028c9a <SSE::~SSE()>:
c0028c9a:	83 ec 0c             	sub    esp,0xc
c0028c9d:	83 ec 0c             	sub    esp,0xc
c0028ca0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ca4:	e8 cd ff ff ff       	call   c0028c76 <SSE::~SSE()>
c0028ca9:	83 c4 10             	add    esp,0x10
c0028cac:	83 ec 08             	sub    esp,0x8
c0028caf:	68 58 01 00 00       	push   0x158
c0028cb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cb8:	e8 dc 97 fe ff       	call   c0012499 <operator delete(void*, unsigned long)>
c0028cbd:	83 c4 10             	add    esp,0x10
c0028cc0:	83 c4 0c             	add    esp,0xc
c0028cc3:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028cc4 <x87::~x87()>:
c0028cc4:	83 ec 0c             	sub    esp,0xc
c0028cc7:	ba bc c1 02 c0       	mov    edx,0xc002c1bc
c0028ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cd0:	89 10                	mov    DWORD PTR [eax],edx
c0028cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cd6:	83 ec 0c             	sub    esp,0xc
c0028cd9:	50                   	push   eax
c0028cda:	e8 15 b2 fe ff       	call   c0013ef4 <FPU::~FPU()>
c0028cdf:	83 c4 10             	add    esp,0x10
c0028ce2:	90                   	nop
c0028ce3:	83 c4 0c             	add    esp,0xc
c0028ce6:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028ce8 <x87::~x87()>:
c0028ce8:	83 ec 0c             	sub    esp,0xc
c0028ceb:	83 ec 0c             	sub    esp,0xc
c0028cee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cf2:	e8 cd ff ff ff       	call   c0028cc4 <x87::~x87()>
c0028cf7:	83 c4 10             	add    esp,0x10
c0028cfa:	83 ec 08             	sub    esp,0x8
c0028cfd:	68 58 01 00 00       	push   0x158
c0028d02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d06:	e8 8e 97 fe ff       	call   c0012499 <operator delete(void*, unsigned long)>
c0028d0b:	83 c4 10             	add    esp,0x10
c0028d0e:	83 c4 0c             	add    esp,0xc
c0028d11:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028d12 <IOAPIC::~IOAPIC()>:
c0028d12:	83 ec 0c             	sub    esp,0xc
c0028d15:	ba 14 c3 02 c0       	mov    edx,0xc002c314
c0028d1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d1e:	89 10                	mov    DWORD PTR [eax],edx
c0028d20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d24:	83 ec 0c             	sub    esp,0xc
c0028d27:	50                   	push   eax
c0028d28:	e8 4b ab fe ff       	call   c0013878 <Device::~Device()>
c0028d2d:	83 c4 10             	add    esp,0x10
c0028d30:	90                   	nop
c0028d31:	83 c4 0c             	add    esp,0xc
c0028d34:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0028d36 <IOAPIC::~IOAPIC()>:
c0028d36:	83 ec 0c             	sub    esp,0xc
c0028d39:	83 ec 0c             	sub    esp,0xc
c0028d3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d40:	e8 cd ff ff ff       	call   c0028d12 <IOAPIC::~IOAPIC()>
c0028d45:	83 c4 10             	add    esp,0x10
c0028d48:	83 ec 08             	sub    esp,0x8
c0028d4b:	68 68 01 00 00       	push   0x168
c0028d50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d54:	e8 40 97 fe ff       	call   c0012499 <operator delete(void*, unsigned long)>
c0028d59:	83 c4 10             	add    esp,0x10
c0028d5c:	83 c4 0c             	add    esp,0xc
c0028d5f:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028d60 <APIC::~APIC()>:
c0028d60:	83 ec 0c             	sub    esp,0xc
c0028d63:	ba cc c2 02 c0       	mov    edx,0xc002c2cc
c0028d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d6c:	89 10                	mov    DWORD PTR [eax],edx
c0028d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d72:	83 ec 0c             	sub    esp,0xc
c0028d75:	50                   	push   eax
c0028d76:	e8 43 b6 fe ff       	call   c00143be <InterruptController::~InterruptController()>
c0028d7b:	83 c4 10             	add    esp,0x10
c0028d7e:	90                   	nop
c0028d7f:	83 c4 0c             	add    esp,0xc
c0028d82:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0028d84 <APIC::~APIC()>:
c0028d84:	83 ec 0c             	sub    esp,0xc
c0028d87:	83 ec 0c             	sub    esp,0xc
c0028d8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d8e:	e8 cd ff ff ff       	call   c0028d60 <APIC::~APIC()>
c0028d93:	83 c4 10             	add    esp,0x10
c0028d96:	83 ec 08             	sub    esp,0x8
c0028d99:	68 58 21 00 00       	push   0x2158
c0028d9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028da2:	e8 f2 96 fe ff       	call   c0012499 <operator delete(void*, unsigned long)>
c0028da7:	83 c4 10             	add    esp,0x10
c0028daa:	83 c4 0c             	add    esp,0xc
c0028dad:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0028dae <PIC::~PIC()>:
c0028dae:	83 ec 0c             	sub    esp,0xc
c0028db1:	ba 64 c3 02 c0       	mov    edx,0xc002c364
c0028db6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dba:	89 10                	mov    DWORD PTR [eax],edx
c0028dbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dc0:	83 ec 0c             	sub    esp,0xc
c0028dc3:	50                   	push   eax
c0028dc4:	e8 f5 b5 fe ff       	call   c00143be <InterruptController::~InterruptController()>
c0028dc9:	83 c4 10             	add    esp,0x10
c0028dcc:	90                   	nop
c0028dcd:	83 c4 0c             	add    esp,0xc
c0028dd0:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0028dd2 <PIC::~PIC()>:
c0028dd2:	83 ec 0c             	sub    esp,0xc
c0028dd5:	83 ec 0c             	sub    esp,0xc
c0028dd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ddc:	e8 cd ff ff ff       	call   c0028dae <PIC::~PIC()>
c0028de1:	83 c4 10             	add    esp,0x10
c0028de4:	83 ec 08             	sub    esp,0x8
c0028de7:	68 58 21 00 00       	push   0x2158
c0028dec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028df0:	e8 a4 96 fe ff       	call   c0012499 <operator delete(void*, unsigned long)>
c0028df5:	83 c4 10             	add    esp,0x10
c0028df8:	83 c4 0c             	add    esp,0xc
c0028dfb:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0028dfc <APICTimer::~APICTimer()>:
c0028dfc:	83 ec 0c             	sub    esp,0xc
c0028dff:	ba b8 c3 02 c0       	mov    edx,0xc002c3b8
c0028e04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e08:	89 10                	mov    DWORD PTR [eax],edx
c0028e0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e0e:	83 ec 0c             	sub    esp,0xc
c0028e11:	50                   	push   eax
c0028e12:	e8 f3 d5 fe ff       	call   c001640a <Timer::~Timer()>
c0028e17:	83 c4 10             	add    esp,0x10
c0028e1a:	90                   	nop
c0028e1b:	83 c4 0c             	add    esp,0xc
c0028e1e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0028e20 <APICTimer::~APICTimer()>:
c0028e20:	83 ec 0c             	sub    esp,0xc
c0028e23:	83 ec 0c             	sub    esp,0xc
c0028e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e2a:	e8 cd ff ff ff       	call   c0028dfc <APICTimer::~APICTimer()>
c0028e2f:	83 c4 10             	add    esp,0x10
c0028e32:	83 ec 08             	sub    esp,0x8
c0028e35:	68 60 01 00 00       	push   0x160
c0028e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e3e:	e8 56 96 fe ff       	call   c0012499 <operator delete(void*, unsigned long)>
c0028e43:	83 c4 10             	add    esp,0x10
c0028e46:	83 c4 0c             	add    esp,0xc
c0028e49:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0028e4a <PIT::~PIT()>:
c0028e4a:	83 ec 0c             	sub    esp,0xc
c0028e4d:	ba 08 c4 02 c0       	mov    edx,0xc002c408
c0028e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e56:	89 10                	mov    DWORD PTR [eax],edx
c0028e58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e5c:	83 ec 0c             	sub    esp,0xc
c0028e5f:	50                   	push   eax
c0028e60:	e8 a5 d5 fe ff       	call   c001640a <Timer::~Timer()>
c0028e65:	83 c4 10             	add    esp,0x10
c0028e68:	90                   	nop
c0028e69:	83 c4 0c             	add    esp,0xc
c0028e6c:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0028e6e <PIT::~PIT()>:
c0028e6e:	83 ec 0c             	sub    esp,0xc
c0028e71:	83 ec 0c             	sub    esp,0xc
c0028e74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e78:	e8 cd ff ff ff       	call   c0028e4a <PIT::~PIT()>
c0028e7d:	83 c4 10             	add    esp,0x10
c0028e80:	83 ec 08             	sub    esp,0x8
c0028e83:	68 5c 01 00 00       	push   0x15c
c0028e88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e8c:	e8 08 96 fe ff       	call   c0012499 <operator delete(void*, unsigned long)>
c0028e91:	83 c4 10             	add    esp,0x10
c0028e94:	83 c4 0c             	add    esp,0xc
c0028e97:	c3                   	ret    
